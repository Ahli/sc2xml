//==================================================================================================
// 
// Generated Map Script
// 
// Name:   The Host
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"
include "TriggerLibs/VoidLib"
include "TriggerLibs/VoidCampaignLib"
include "TriggerLibs/VoidCampaignMissionLib"
include "ai99448CFF"
include "ai52ED4B20"
include "ai1AEFD599"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libHots_InitLib();
    libLotv_InitLib();
    libVoiC_InitLib();
    libVCMI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_PROTOSS_BULLIES = 2;
const int gv_pLAYER_03_ZERG_BULLIES = 3;
const int gv_pLAYER_04_INFESTED_BULLIES = 4;
const int gv_pLAYER_05_VOIDFORCES = 5;
const int gv_pLAYER_06_VOIDFORCES = 6;
const int gv_pLAYER_07_VOIDFORCES = 7;
const int gv_pLAYER_08_NERAZIM = 8;
const int gv_pLAYER_09_TALDARIM = 9;
const int gv_pLAYER_10_PURIFIER = 10;
const int gv_voidShardsCount = 5;

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_PRESETAttackWaveVector_TopRamp = 0;
const int ge_PRESETAttackWaveVector_BottomLeftRamp = 1;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
playergroup gv_enemyPlayerGroup;
playergroup gv_enemyPlayerGroup_AmonForces;
playergroup gv_allyPlayerGroup;
string gv_mapMusicTrack;
unit gv_amonUnit;
unit gv_chosenVoidShard;
unit[6] gv_voidShards;
fixed gv_voidShardGenericCooldown;
fixed gv_voidShardShockwaveRange;
fixed gv_voidShardShockwaveCooldown;
fixed gv_voidShardDeathGripRange;
int gv_voidShardDeathGripTargetCount;
fixed gv_voidShardDeathGripCooldown;
fixed gv_voidShardUnstableEnergyRange;
fixed gv_voidShardUnstableEnergyCooldown;
bool gv_warpInZoneCleared01;
bool gv_warpInZoneCleared02;
bool gv_warpInZoneCleared03;
int gv_warpInZonePing01;
int gv_warpInZonePing02;
int gv_warpInZonePing03;
unit gv_warpInZoneSuperGateP08;
unit gv_warpInZoneSuperGateP09;
unit gv_warpInZoneSuperGateP10;
int gv_warpInZoneBattlecryCount01;
int gv_warpInZoneBattlecryCount02;
int gv_warpInZoneBattlecryCount03;
int gv_bigWavesSent;
int gv_bigWavesTransmission;
int gv_victoryStat_UnitsLostToShard;
int gv_victoryStat_VoidUnitsKilled;
timer gv_achievement_ShardComboTimer;
timer gv_mastery_SpeedRunTimer;
int gv_achievement_VoidShardKills;
int gv_objectiveDestroyVoidShards;
int gv_objectiveRescueStalkers;
int gv_objectiveClearWarpInZonesCount;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicPausedUnits;
unitgroup gv_cinematicTempUnits;
bool gv_cinematicCompleted;
unit gv_cinematicAmon;
unit gv_cinematicVoidShard;
unit gv_cinematicVoidRift;
unitgroup gv_cinematicVoidUnits;
unitgroup gv_cinematicPlayerUnits;
bool gv_cinematicAIActive;
unitgroup gv_victoryPlayerFleet;
unitgroup gv_victoryPlayerBase;
int gv_victoryOrbitalStrikeMax;

void InitGlobals () {
    gv_enemyPlayerGroup = PlayerGroupEmpty();
    gv_enemyPlayerGroup_AmonForces = PlayerGroupEmpty();
    gv_allyPlayerGroup = PlayerGroupEmpty();
    gv_warpInZonePing01 = c_invalidPingId;
    gv_warpInZonePing02 = c_invalidPingId;
    gv_warpInZonePing03 = c_invalidPingId;
    gv_warpInZoneSuperGateP08 = UnitFromId(1670);
    gv_warpInZoneSuperGateP09 = UnitFromId(1679);
    gv_warpInZoneSuperGateP10 = UnitFromId(1680);
    gv_achievement_ShardComboTimer = TimerCreate();
    gv_mastery_SpeedRunTimer = TimerCreate();
    gv_objectiveDestroyVoidShards = c_invalidObjectiveId;
    gv_objectiveRescueStalkers = c_invalidObjectiveId;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_cinematicVoidUnits = UnitGroupEmpty();
    gv_cinematicPlayerUnits = UnitGroupEmpty();
    gv_victoryPlayerFleet = UnitGroupEmpty();
    gv_victoryPlayerBase = UnitGroupEmpty();
    gv_victoryOrbitalStrikeMax = 11;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_InfestedBunker (unit lp_bunker);
int gf_NumberofDestroyedVoidShards ();
void gf_VoidShardAI (int lp_index, unit lp_voidShard);
void gf_VoidShardAbilityDeathGripUnit (unit lp_casterUnit, region lp_targetRegion);
void gf_VoidShardAbilityShockwave (unit lp_voidShard, region lp_targetRegion);
void gf_VoidShardAbilityUnstableEnergy (unit lp_voidShard, region lp_targetRegion);
void gf_SetUpWarpPrism (point lp_spawnLoc, point lp_targetLoc, int lp_player);
void gf_TrackAttackWaveWithPing (unitgroup lp_unitGroup);
int gf_GetBigWaveVoidShard ();
void gf_SetGatherAndWaypointsforBigWave (int lp_voidShardIndex, int lp_attackVector);
void gf_AddUnitsAndSendBigWave (int lp_bigWaveIndex, int lp_attacker);
void gf_TransmissionBigWaveAmonBarkQ (int lp_transmissionIndex);
void gf_TransmissionBigWaveKaraxWarningQ (int lp_transmissionIndex);
void gf_IntroVoidRiftEventSpawning (string lp_unitType);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04MusicSound;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_VoidEntitySpawned;
trigger gt_AllyStructureWarpsIn;
trigger gt_AllyUnitWarpsIn;
trigger gt_StartGameQ;
trigger gt_VoidShardDifficultySettings;
trigger gt_VoidShardDies;
trigger gt_TransmissionVoidShardDestroyedQ;
trigger gt_VoidShardWarningController;
trigger gt_TransmissionShardWarning1DestroyedQ;
trigger gt_TransmissionShardWarning2DestroyedQ;
trigger gt_TransmissionShardWarning3DestroyedQ;
trigger gt_TransmissionShardWarning4DestroyedQ;
trigger gt_UnitEntersBOReveal;
trigger gt_TransmissionIntroBonusObjectiveQ;
trigger gt_TransmissionWarpInZoneCleared01Q;
trigger gt_TransmissionWarpInZoneCleared02Q;
trigger gt_TransmissionWarpInZoneCleared03Q;
trigger gt_EstablishWarpInZone01;
trigger gt_EstablishWarpInZone02;
trigger gt_EstablishWarpInZone03;
trigger gt_TransmissionWarpInZone01AttackWaveInitialBattlecryQ;
trigger gt_TransmissionWarpInZone02AttackWaveInitialBattlecryQ;
trigger gt_TransmissionWarpInZone03AttackWaveInitialBattlecryQ;
trigger gt_TransmissionWarpInZone01AttackWaveRepeatBattlecryQ;
trigger gt_TransmissionWarpInZone02AttackWaveRepeatBattlecryQ;
trigger gt_TransmissionWarpInZone03AttackWaveRepeatBattlecryQ;
trigger gt_TurnOnRain;
trigger gt_TurnOnLightningStrikes;
trigger gt_DropGas;
trigger gt_KillLarva;
trigger gt_StartAI;
trigger gt_AIUpgradesNormal;
trigger gt_AIUpgradesHard;
trigger gt_VoidSpawnsReinforcementsController;
trigger gt_VoidSpawnsReinforcements01;
trigger gt_VoidSpawnsReinforcements02;
trigger gt_VoidSpawnsReinforcements03;
trigger gt_VoidSpawnsReinforcements04Hard;
trigger gt_UnitGetsAllyMindControl;
trigger gt_TransmissionFirstAttackWaveQ;
trigger gt_SendBigWave;
trigger gt_BigWaveTransmissionController;
trigger gt_DefeatBaseDead;
trigger gt_VictoryVoidShardsDestroyed;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_VictoryStatsForUnitsThatDie;
trigger gt_AchievementShardAssist;
trigger gt_AchievementShardCombo;
trigger gt_MasteryTimedRun;
trigger gt_AchievementDestroy2VoidShardsbefore9minutes;
trigger gt_TipReadyQ;
trigger gt_ObjectiveDestroyVoidShardsCreate;
trigger gt_ObjectiveDestroyVoidShardsComplete;
trigger gt_ObjectiveDestroyVoidShardsUpdate;
trigger gt_ObjectiveDestroyVoidShardsFailed;
trigger gt_ObjectiveClearWarpInZonesCreate;
trigger gt_ObjectiveClearWarpInZonesComplete;
trigger gt_ObjectiveClearWarpInZonesUpdate;
trigger gt_ObjectiveClearWarpInZonesFailed;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_IntroVoidRiftEvent;
trigger gt_IntroUnitSpawned;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;
trigger gt_VictoryOrbitalStrikes;
trigger gt_VictoryAmonBeamController;

//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;

//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        cai_playerAI[init_i] = null;
    }
}

//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;

    if (cai_playerAI[p] == "ai99448CFF") { ai99448CFF_start(p); }
    if (cai_playerAI[p] == "ai52ED4B20") { ai52ED4B20_start(p); }
    if (cai_playerAI[p] == "ai1AEFD599") { ai1AEFD599_start(p); }
}

//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai99448CFF") { ai99448CFF_setDefGather(p, val); }
    if (cai_playerAI[p] == "ai52ED4B20") { ai52ED4B20_setDefGather(p, val); }
    if (cai_playerAI[p] == "ai1AEFD599") { ai1AEFD599_setDefGather(p, val); }
}

//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai99448CFF") { return ai99448CFF_getCustomData(p); }
    if (cai_playerAI[p] == "ai52ED4B20") { return ai52ED4B20_getCustomData(p); }
    if (cai_playerAI[p] == "ai1AEFD599") { return ai1AEFD599_getCustomData(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai99448CFF") { return ai99448CFF_getLastWave(p); }
    if (cai_playerAI[p] == "ai52ED4B20") { return ai52ED4B20_getLastWave(p); }
    if (cai_playerAI[p] == "ai1AEFD599") { return ai1AEFD599_getLastWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai99448CFF") { ai99448CFF_waves_run(p, target); }
    if (cai_playerAI[p] == "ai52ED4B20") { ai52ED4B20_waves_run(p, target); }
    if (cai_playerAI[p] == "ai1AEFD599") { ai1AEFD599_waves_run(p, target); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai99448CFF") { ai99448CFF_waves_enable(p, val); }
    if (cai_playerAI[p] == "ai52ED4B20") { ai52ED4B20_waves_enable(p, val); }
    if (cai_playerAI[p] == "ai1AEFD599") { ai1AEFD599_waves_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "ai99448CFF") { ai99448CFF_waves_stop(); }
    if (ai == "ai52ED4B20") { ai52ED4B20_waves_stop(); }
    if (ai == "ai1AEFD599") { ai1AEFD599_waves_stop(); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai99448CFF") { ai99448CFF_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "ai52ED4B20") { ai52ED4B20_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "ai1AEFD599") { ai1AEFD599_wave_run(w, p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai99448CFF") { ai99448CFF_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "ai52ED4B20") { ai52ED4B20_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "ai1AEFD599") { ai1AEFD599_wave_enable(w, p, val); }
}

//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "ai99448CFF") { return ai99448CFF_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "ai52ED4B20") { return ai52ED4B20_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "ai1AEFD599") { return ai1AEFD599_wave_isEnabled(w, p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai99448CFF") { return ai99448CFF_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "ai52ED4B20") { return ai52ED4B20_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "ai1AEFD599") { return ai1AEFD599_wave_createdUnits(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai99448CFF") { return ai99448CFF_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "ai52ED4B20") { return ai52ED4B20_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "ai1AEFD599") { return ai1AEFD599_wave_createdWave(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_startall () {
    cai_start("ai99448CFF", 5);
    cai_start("ai52ED4B20", 6);
    cai_start("ai1AEFD599", 7);
    AICampaignStart(2);
    AICampaignStart(3);
    AICampaignStart(4);
    AICampaignStart(8);
    AICampaignStart(9);
    AICampaignStart(10);
}

//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(5, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(6, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(7, target);
}

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
trigger auto_gf_InfestedBunker_Trigger = null;
unit auto_gf_InfestedBunker_lp_bunker;

void gf_InfestedBunker (unit lp_bunker) {
    auto_gf_InfestedBunker_lp_bunker = lp_bunker;

    if (auto_gf_InfestedBunker_Trigger == null) {
        auto_gf_InfestedBunker_Trigger = TriggerCreate("auto_gf_InfestedBunker_TriggerFunc");
    }

    TriggerExecute(auto_gf_InfestedBunker_Trigger, false, false);
}

bool auto_gf_InfestedBunker_TriggerFunc (bool testConds, bool runActions) {
    unit lp_bunker = auto_gf_InfestedBunker_lp_bunker;

    // Variable Declarations
    unitgroup lv_cargoUnits;
    actor lv_infestation;

    // Automatic Variable Declarations
    unitgroup autoDF7AB5E9_g;
    int autoDF7AB5E9_u;
    unit autoDF7AB5E9_var;

    // Variable Initialization
    lv_cargoUnits = UnitCargoGroup(lp_bunker);

    // Implementation
    libNtve_gf_CreateModelAtPoint("InfestedHomeSmall", UnitGetPosition(lp_bunker));
    lv_infestation = libNtve_gf_ActorLastCreated();
    ActorSend(lv_infestation, libNtve_gf_SetScale(0.5, 0.5, 0.5, 0.0));
    ActorSend(lv_infestation, libNtve_gf_SetFacing(libNtve_gf_RandomAngle()));
    ActorSend(lv_infestation, libNtve_gf_SetHeight(0));
    while (!((UnitIsAlive(lp_bunker) == false))) {
        Wait(0.5, c_timeGame);
    }
    libNtve_gf_PlayAnimation(lv_infestation, c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    autoDF7AB5E9_g = lv_cargoUnits;
    autoDF7AB5E9_u = UnitGroupCount(autoDF7AB5E9_g, c_unitCountAll);
    for (;; autoDF7AB5E9_u -= 1) {
        autoDF7AB5E9_var = UnitGroupUnitFromEnd(autoDF7AB5E9_g, autoDF7AB5E9_u);
        if (autoDF7AB5E9_var == null) { break; }
        libNtve_gf_ReplaceUnit(autoDF7AB5E9_var, "InfestedTerranCampaign", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    }
    return true;
}

int gf_NumberofDestroyedVoidShards () {
    // Variable Declarations
    int lv_iter;
    int lv_destroyedNodes;

    // Automatic Variable Declarations
    const int auto6016ED47_ae = gv_voidShardsCount;
    const int auto6016ED47_ai = 1;

    // Variable Initialization

    // Implementation
    lv_iter = 1;
    for ( ; ( (auto6016ED47_ai >= 0 && lv_iter <= auto6016ED47_ae) || (auto6016ED47_ai < 0 && lv_iter >= auto6016ED47_ae) ) ; lv_iter += auto6016ED47_ai ) {
        if ((UnitIsAlive(gv_voidShards[lv_iter]) == false)) {
            lv_destroyedNodes += 1;
        }

    }
    return lv_destroyedNodes;
}

trigger auto_gf_VoidShardAI_Trigger = null;
int auto_gf_VoidShardAI_lp_index;
unit auto_gf_VoidShardAI_lp_voidShard;

void gf_VoidShardAI (int lp_index, unit lp_voidShard) {
    auto_gf_VoidShardAI_lp_index = lp_index;
    auto_gf_VoidShardAI_lp_voidShard = lp_voidShard;

    if (auto_gf_VoidShardAI_Trigger == null) {
        auto_gf_VoidShardAI_Trigger = TriggerCreate("auto_gf_VoidShardAI_TriggerFunc");
    }

    TriggerExecute(auto_gf_VoidShardAI_Trigger, false, false);
}

bool auto_gf_VoidShardAI_TriggerFunc (bool testConds, bool runActions) {
    int lp_index = auto_gf_VoidShardAI_lp_index;
    unit lp_voidShard = auto_gf_VoidShardAI_lp_voidShard;

    // Variable Declarations
    region lv_voidShardRegion_DeathGrip;
    region lv_voidShardRegion_Shockwave;
    region lv_voidShardRegion_UnstableEnergy;
    timer lv_timerGeneric;
    timer lv_timerDeathGrip;
    timer lv_timerShockwave;
    timer lv_timerUnstableEnergy;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timerGeneric = TimerCreate();
    lv_timerDeathGrip = TimerCreate();
    lv_timerShockwave = TimerCreate();
    lv_timerUnstableEnergy = TimerCreate();

    // Implementation
    lv_voidShardRegion_DeathGrip = RegionCircle(UnitGetPosition(lp_voidShard), gv_voidShardDeathGripRange);
    lv_voidShardRegion_Shockwave = RegionCircle(UnitGetPosition(lp_voidShard), gv_voidShardShockwaveRange);
    lv_voidShardRegion_UnstableEnergy = RegionCircle(UnitGetPosition(lp_voidShard), gv_voidShardUnstableEnergyRange);
    while ((UnitIsAlive(lp_voidShard) == true) && (libVCMI_gf_GameIsOver() == false)) {
        if ((libVCMI_gf_PlayerInCinematicModeCampaign() == false)) {
            if ((libVCMI_gf_GameIsOver() == false) && (UnitIsAlive(lp_voidShard) == true) && (gf_NumberofDestroyedVoidShards() >= 1) && (UnitGroupCount(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, lv_voidShardRegion_Shockwave, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) && (TimerGetRemaining(lv_timerGeneric) == 0.0) && (TimerGetRemaining(lv_timerShockwave) == 0.0)) {
                gf_VoidShardAbilityShockwave(lp_voidShard, lv_voidShardRegion_Shockwave);
                TimerStart(lv_timerShockwave, gv_voidShardShockwaveCooldown, false, c_timeGame);
                TimerStart(lv_timerGeneric, gv_voidShardGenericCooldown, false, c_timeGame);
            }

            if ((libVCMI_gf_GameIsOver() == false) && (UnitIsAlive(lp_voidShard) == true) && (UnitGroupCount(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, lv_voidShardRegion_DeathGrip, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) && (((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, lv_voidShardRegion_DeathGrip, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) || ((gf_NumberofDestroyedVoidShards() >= 2) && (TimerGetRemaining(lv_timerGeneric) == 0.0) && (TimerGetRemaining(lv_timerDeathGrip) == 0.0)))) {
                gf_VoidShardAbilityDeathGripUnit(lp_voidShard, lv_voidShardRegion_DeathGrip);
                TimerStart(lv_timerDeathGrip, gv_voidShardDeathGripCooldown, false, c_timeGame);
                TimerStart(lv_timerGeneric, gv_voidShardGenericCooldown, false, c_timeGame);
            }

            if ((libVCMI_gf_GameIsOver() == false) && (UnitIsAlive(lp_voidShard) == true) && (gf_NumberofDestroyedVoidShards() >= 3) && (UnitGroupCount(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, lv_voidShardRegion_UnstableEnergy, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) && (TimerGetRemaining(lv_timerGeneric) == 0.0) && (TimerGetRemaining(lv_timerUnstableEnergy) == 0.0)) {
                gf_VoidShardAbilityUnstableEnergy(lp_voidShard, lv_voidShardRegion_UnstableEnergy);
                TimerStart(lv_timerUnstableEnergy, gv_voidShardUnstableEnergyCooldown, false, c_timeGame);
                TimerStart(lv_timerGeneric, gv_voidShardGenericCooldown, false, c_timeGame);
            }

        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

void gf_VoidShardAbilityDeathGripUnit (unit lp_casterUnit, region lp_targetRegion) {
    // Variable Declarations
    unitgroup lv_enemyGroup;
    unit lv_targetUnit;

    // Automatic Variable Declarations
    int auto0445400E_n;
    int auto0445400E_i;
    unitgroup autoC20E9EDC_g;
    int autoC20E9EDC_u;
    unit autoC20E9EDC_var;
    unitgroup auto63B96317_g;
    int auto63B96317_u;
    unit auto63B96317_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    auto0445400E_n = gv_voidShardDeathGripTargetCount;
    for (auto0445400E_i = 1; auto0445400E_i <= auto0445400E_n; auto0445400E_i += 1) {
        UnitGroupClear(lv_enemyGroup);
        lv_enemyGroup = UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, lp_targetRegion, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        autoC20E9EDC_g = lv_enemyGroup;
        autoC20E9EDC_u = UnitGroupCount(autoC20E9EDC_g, c_unitCountAll);
        for (;; autoC20E9EDC_u -= 1) {
            autoC20E9EDC_var = UnitGroupUnitFromEnd(autoC20E9EDC_g, autoC20E9EDC_u);
            if (autoC20E9EDC_var == null) { break; }
            if (((UnitGetType(autoC20E9EDC_var) == "Interceptor") || (UnitGetType(autoC20E9EDC_var) == "InterceptorAiur") || (UnitGetType(autoC20E9EDC_var) == "CarrierRepairDrone") || (UnitGetType(autoC20E9EDC_var) == "FenixSOA") || (UnitGetType(autoC20E9EDC_var) == "Flagship") || (UnitHasBehavior2(autoC20E9EDC_var, "VoidTendrilDeathGripStun") == true) || (UnitHasBehavior2(autoC20E9EDC_var, "VoidTendrilDeathGripWarningDebuff") == true))) {
                UnitGroupRemove(lv_enemyGroup, autoC20E9EDC_var);
            }

        }
        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) > 0)) {
            lv_targetUnit = UnitGroupUnit(lv_enemyGroup, 1);
            auto63B96317_g = lv_enemyGroup;
            auto63B96317_u = UnitGroupCount(auto63B96317_g, c_unitCountAll);
            for (;; auto63B96317_u -= 1) {
                auto63B96317_var = UnitGroupUnitFromEnd(auto63B96317_g, auto63B96317_u);
                if (auto63B96317_var == null) { break; }
                if ((UnitGetPropertyFixed(auto63B96317_var, c_unitPropLife, c_unitPropCurrent) < UnitGetPropertyFixed(lv_targetUnit, c_unitPropLife, c_unitPropCurrent))) {
                    lv_targetUnit = UnitGroupUnit(lv_enemyGroup, 1);
                }

            }
            UnitIssueOrder(lp_casterUnit, OrderTargetingUnit(AbilityCommand("VoidTendrilDeathGrip", 0), lv_targetUnit), c_orderQueueReplace);
            UnitIssueOrder(lp_casterUnit, OrderTargetingUnit(AbilityCommand("VoidTendrilDeathGripAutoCast", 0), lv_targetUnit), c_orderQueueReplace);
            Wait(0.25, c_timeGame);
            AISetUnitScriptControlled(lp_casterUnit, false);
        }

    }
}

void gf_VoidShardAbilityShockwave (unit lp_voidShard, region lp_targetRegion) {
    // Variable Declarations
    unitgroup lv_enemyGroup;
    point lv_targetPoint;
    int lv_targetPointTargetCount;
    int lv_possibleTargetPointTargetCount;

    // Automatic Variable Declarations
    unitgroup auto160C49C9_g;
    int auto160C49C9_u;
    unit auto160C49C9_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    lv_enemyGroup = UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, lp_targetRegion, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    auto160C49C9_g = lv_enemyGroup;
    auto160C49C9_u = UnitGroupCount(auto160C49C9_g, c_unitCountAll);
    for (;; auto160C49C9_u -= 1) {
        auto160C49C9_var = UnitGroupUnitFromEnd(auto160C49C9_g, auto160C49C9_u);
        if (auto160C49C9_var == null) { break; }
        if (((UnitGetType(auto160C49C9_var) == "Interceptor") || (UnitGetType(auto160C49C9_var) == "InterceptorAiur") || (UnitGetType(auto160C49C9_var) == "CarrierRepairDrone"))) {
            UnitGroupRemove(lv_enemyGroup, auto160C49C9_var);
        }

    }
    if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) > 0)) {
        UnitIssueOrder(lp_voidShard, Order(AbilityCommand("VoidTendrilShockwave", 0)), c_orderQueueReplace);
        Wait(0.25, c_timeGame);
        AISetUnitScriptControlled(lp_voidShard, false);
    }

}

void gf_VoidShardAbilityUnstableEnergy (unit lp_voidShard, region lp_targetRegion) {
    // Variable Declarations
    unitgroup lv_enemyGroup;
    point lv_targetPoint;
    int lv_targetPointTargetCount;
    int lv_possibleTargetPointTargetCount;

    // Automatic Variable Declarations
    unitgroup auto1A2E6292_g;
    int auto1A2E6292_u;
    unit auto1A2E6292_var;
    unitgroup autoEF25E030_g;
    int autoEF25E030_u;
    unit autoEF25E030_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    lv_enemyGroup = UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, lp_targetRegion, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    auto1A2E6292_g = lv_enemyGroup;
    auto1A2E6292_u = UnitGroupCount(auto1A2E6292_g, c_unitCountAll);
    for (;; auto1A2E6292_u -= 1) {
        auto1A2E6292_var = UnitGroupUnitFromEnd(auto1A2E6292_g, auto1A2E6292_u);
        if (auto1A2E6292_var == null) { break; }
        if (((UnitGetType(auto1A2E6292_var) == "Interceptor") || (UnitGetType(auto1A2E6292_var) == "InterceptorAiur") || (UnitGetType(auto1A2E6292_var) == "CarrierRepairDrone"))) {
            UnitGroupRemove(lv_enemyGroup, auto1A2E6292_var);
        }

    }
    if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) > 0)) {
        lv_targetPoint = UnitGetPosition(UnitGroupRandomUnit(lv_enemyGroup, c_unitCountAlive));
        autoEF25E030_g = lv_enemyGroup;
        autoEF25E030_u = UnitGroupCount(autoEF25E030_g, c_unitCountAll);
        for (;; autoEF25E030_u -= 1) {
            autoEF25E030_var = UnitGroupUnitFromEnd(autoEF25E030_g, autoEF25E030_u);
            if (autoEF25E030_var == null) { break; }
            lv_possibleTargetPointTargetCount = UnitGroupCount(UnitGroupFilterRegion(lv_enemyGroup, RegionCircle(UnitGetPosition(autoEF25E030_var), 4.0), 0), c_unitCountAlive);
            if ((lv_possibleTargetPointTargetCount > lv_targetPointTargetCount)) {
                lv_targetPoint = UnitGetPosition(autoEF25E030_var);
                lv_targetPointTargetCount = lv_possibleTargetPointTargetCount;
            }

        }
        UnitIssueOrder(lp_voidShard, OrderTargetingPoint(AbilityCommand("VoidTendrilUnstableEnergy", 0), lv_targetPoint), c_orderQueueReplace);
        Wait(0.25, c_timeGame);
        AISetUnitScriptControlled(lp_voidShard, false);
    }

}

trigger auto_gf_SetUpWarpPrism_Trigger = null;
point auto_gf_SetUpWarpPrism_lp_spawnLoc;
point auto_gf_SetUpWarpPrism_lp_targetLoc;
int auto_gf_SetUpWarpPrism_lp_player;

void gf_SetUpWarpPrism (point lp_spawnLoc, point lp_targetLoc, int lp_player) {
    auto_gf_SetUpWarpPrism_lp_spawnLoc = lp_spawnLoc;
    auto_gf_SetUpWarpPrism_lp_targetLoc = lp_targetLoc;
    auto_gf_SetUpWarpPrism_lp_player = lp_player;

    if (auto_gf_SetUpWarpPrism_Trigger == null) {
        auto_gf_SetUpWarpPrism_Trigger = TriggerCreate("auto_gf_SetUpWarpPrism_TriggerFunc");
    }

    TriggerExecute(auto_gf_SetUpWarpPrism_Trigger, false, false);
}

bool auto_gf_SetUpWarpPrism_TriggerFunc (bool testConds, bool runActions) {
    point lp_spawnLoc = auto_gf_SetUpWarpPrism_lp_spawnLoc;
    point lp_targetLoc = auto_gf_SetUpWarpPrism_lp_targetLoc;
    int lp_player = auto_gf_SetUpWarpPrism_lp_player;

    // Variable Declarations
    unit lv_warpPrismUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libNtve_gf_CreateUnitsAtPoint2(1, "WarpPrism", 0, lp_player, lp_spawnLoc);
    lv_warpPrismUnit = UnitLastCreated();
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
    while ((libVCMI_gf_GameIsOver() == false) && (DistanceBetweenPoints(UnitGetPosition(lv_warpPrismUnit), lp_targetLoc) > 1)) {
        UnitIssueOrder(lv_warpPrismUnit, OrderTargetingPoint(AbilityCommand("move", 0), lp_targetLoc), c_orderQueueReplace);
        Wait(0.5, c_timeAI);
    }
    while ((libVCMI_gf_GameIsOver() == false) && (PowerIsProvidedBy(lp_player, lp_targetLoc, "PowerSource", lv_warpPrismUnit, 1) == false)) {
        UnitIssueOrder(lv_warpPrismUnit, Order(AbilityCommand("PhasingMode", 0)), c_orderQueueReplace);
        Wait(0.5, c_timeAI);
    }
    libNtve_gf_MakeUnitInvulnerable(lv_warpPrismUnit, false);
    return true;
}

trigger auto_gf_TrackAttackWaveWithPing_Trigger = null;
unitgroup auto_gf_TrackAttackWaveWithPing_lp_unitGroup;

void gf_TrackAttackWaveWithPing (unitgroup lp_unitGroup) {
    auto_gf_TrackAttackWaveWithPing_lp_unitGroup = lp_unitGroup;

    if (auto_gf_TrackAttackWaveWithPing_Trigger == null) {
        auto_gf_TrackAttackWaveWithPing_Trigger = TriggerCreate("auto_gf_TrackAttackWaveWithPing_TriggerFunc");
    }

    TriggerExecute(auto_gf_TrackAttackWaveWithPing_Trigger, false, false);
}

bool auto_gf_TrackAttackWaveWithPing_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_unitGroup = auto_gf_TrackAttackWaveWithPing_lp_unitGroup;

    // Variable Declarations
    int lv_wavePing;
    int lv_transportCount;

    // Automatic Variable Declarations
    unitgroup auto5D53C738_g;
    int auto5D53C738_u;
    unit auto5D53C738_var;

    // Variable Initialization
    lv_wavePing = c_invalidPingId;

    // Implementation
    lv_transportCount = 0;
    auto5D53C738_g = lp_unitGroup;
    auto5D53C738_u = UnitGroupCount(auto5D53C738_g, c_unitCountAll);
    for (;; auto5D53C738_u -= 1) {
        auto5D53C738_var = UnitGroupUnitFromEnd(auto5D53C738_g, auto5D53C738_u);
        if (auto5D53C738_var == null) { break; }
        if (((UnitGetType(auto5D53C738_var) == "Medivac") || (UnitGetType(auto5D53C738_var) == "Overseer") || (UnitGetType(auto5D53C738_var) == "Raven"))) {
            lv_transportCount += 1;
        }

    }
    if ((UnitGroupCount(lp_unitGroup, c_unitCountAlive) > lv_transportCount)) {
        PingCreateWithPlayerId(PlayerGroupAll(), "PingAlert", UnitGroupCenterOfGroup(lp_unitGroup), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, gv_pLAYER_01_USER);
        lv_wavePing = PingLastCreated();
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/7F578510"));
        while ((UnitGroupCount(lp_unitGroup, c_unitCountAlive) > lv_transportCount)) {
            PingSetPosition(lv_wavePing, UnitGroupCenterOfGroup(lp_unitGroup));
            Wait(0.0625, c_timeGame);
        }
        PingDestroy(lv_wavePing);
    }

    return true;
}

int gf_GetBigWaveVoidShard () {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitIsAlive(gv_voidShards[5]) == true)) {
        return 5;
    }
    else if ((UnitIsAlive(gv_voidShards[3]) == true)) {
        return 3;
    }
    else if ((UnitIsAlive(gv_voidShards[4]) == true)) {
        return 4;
    }
    else if ((UnitIsAlive(gv_voidShards[2]) == true)) {
        return 2;
    }
    return 1;
}

void gf_SetGatherAndWaypointsforBigWave (int lp_voidShardIndex, int lp_attackVector) {
    // Variable Declarations
    int lv_attacker;

    // Automatic Variable Declarations
    int auto2553DA4A_val;

    // Variable Initialization

    // Implementation
    lv_attacker = UnitGetOwner(gv_voidShards[lp_voidShardIndex]);
    auto2553DA4A_val = lp_voidShardIndex;
    if (auto2553DA4A_val == 1) {
        AIAttackWaveSetGatherPoint(lv_attacker, PointFromId(1252));
    }
    else if (auto2553DA4A_val == 2) {
        AIAttackWaveSetGatherPoint(lv_attacker, PointFromId(1253));
    }
    else if (auto2553DA4A_val == 3) {
        AIAttackWaveSetGatherPoint(lv_attacker, PointFromId(1254));
    }
    else if (auto2553DA4A_val == 4) {
        AIAttackWaveSetGatherPoint(lv_attacker, PointFromId(1255));
    }
    else if (auto2553DA4A_val == 5) {
        AIAttackWaveSetGatherPoint(lv_attacker, PointFromId(1256));
    }
    else {
    }
    if ((lp_attackVector == ge_PRESETAttackWaveVector_TopRamp)) {
        AIAttackWaveAddWaypoint(lv_attacker, PointFromId(1105), false);
    }
    else {
        AIAttackWaveAddWaypoint(lv_attacker, PointFromId(1104), false);
    }
}

void gf_AddUnitsAndSendBigWave (int lp_bigWaveIndex, int lp_attacker) {
    // Automatic Variable Declarations
    int autoF2887639_val;

    // Implementation
    autoF2887639_val = lp_bigWaveIndex;
    if (autoF2887639_val == 1) {
        AIAttackWaveAddUnits4(8, 8, 8, 10, "Marine");
        AIAttackWaveAddUnits4(0, 0, 2, 2, "Ghost");
        AIAttackWaveAddUnits4(1, 1, 2, 2, "SiegeTank");
        AIAttackWaveAddUnits4(1, 1, 1, 1, "Banshee");
    }
    else if (autoF2887639_val == 2) {
        AIAttackWaveAddUnits4(3, 3, 3, 3, "Phoenix");
        AIAttackWaveAddUnits4(2, 2, 2, 2, "Banshee");
        AIAttackWaveAddUnits4(1, 1, 2, 2, "Carrier");
        AIAttackWaveAddUnits4(0, 0, 1, 2, "Raven");
    }
    else if (autoF2887639_val == 3) {
        AIAttackWaveAddUnits4(10, 10, 14, 14, "Zergling");
        AIAttackWaveAddUnits4(2, 2, 2, 3, "Ultralisk");
        AIAttackWaveAddUnits4(2, 2, 4, 4, "Mutalisk");
        AIAttackWaveAddUnits4(2, 2, 2, 2, "Medivac");
        AIAttackWaveAddUnits4(0, 0, 1, 1, "Overseer");
    }
    else if (autoF2887639_val == 4) {
        AIAttackWaveAddUnits4(5, 5, 6, 7, "Zealot");
        AIAttackWaveAddUnits4(3, 3, 4, 4, "Stalker");
        AIAttackWaveAddUnits4(2, 2, 2, 3, "Immortal");
        AIAttackWaveAddUnits4(2, 2, 3, 3, "Colossus");
        AIAttackWaveAddUnits4(0, 0, 1, 2, "Oracle");
    }
    else if (autoF2887639_val == 5) {
        AIAttackWaveAddUnits4(4, 4, 4, 6, "SiegeTank");
        AIAttackWaveAddUnits4(4, 4, 5, 5, "Immortal");
        AIAttackWaveAddUnits4(2, 2, 2, 3, "Ultralisk");
        AIAttackWaveAddUnits4(0, 0, 1, 1, "Overseer");
    }
    else if (autoF2887639_val == 6) {
        AIAttackWaveAddUnits4(6, 6, 6, 6, "Mutalisk");
        AIAttackWaveAddUnits4(3, 3, 4, 5, "BroodLord");
        AIAttackWaveAddUnits4(1, 1, 2, 3, "Carrier");
        AIAttackWaveAddUnits4(0, 0, 1, 2, "Oracle");
    }
    else if (autoF2887639_val == 7) {
        AIAttackWaveAddUnits4(12, 12, 12, 12, "Zergling");
        AIAttackWaveAddUnits4(10, 10, 12, 12, "Marine");
        AIAttackWaveAddUnits4(2, 2, 3, 4, "Archon");
        AIAttackWaveAddUnits4(0, 0, 1, 2, "Liberator");
        AIAttackWaveAddUnits4(0, 0, 1, 2, "Raven");
    }
    else {
    }
    AIAttackWaveSend(lp_attacker, 210, false);
}

void gf_TransmissionBigWaveAmonBarkQ (int lp_transmissionIndex) {
    // Automatic Variable Declarations
    int auto0E183335_val;

    // Implementation
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    auto0E183335_val = gv_bigWavesTransmission;
    if (auto0E183335_val == 1) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00078", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto0E183335_val == 2) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00085", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto0E183335_val == 3) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00087", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto0E183335_val == 4) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00089", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto0E183335_val == 5) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00090", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto0E183335_val == 6) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00075", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto0E183335_val == 7) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00087", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto0E183335_val == 8) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00085", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto0E183335_val == 9) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00078", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
}

void gf_TransmissionBigWaveKaraxWarningQ (int lp_transmissionIndex) {
    // Automatic Variable Declarations
    int autoD059C7CC_val;

    // Implementation
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    autoD059C7CC_val = gv_bigWavesTransmission;
    if (autoD059C7CC_val == 1) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00166", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoD059C7CC_val == 2) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00167", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoD059C7CC_val == 3) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00168", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoD059C7CC_val == 4) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00160", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoD059C7CC_val == 5) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00161", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoD059C7CC_val == 6) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00162", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoD059C7CC_val == 7) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00163", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoD059C7CC_val == 8) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00165", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoD059C7CC_val == 9) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00169", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
}

trigger auto_gf_IntroVoidRiftEventSpawning_Trigger = null;
string auto_gf_IntroVoidRiftEventSpawning_lp_unitType;

void gf_IntroVoidRiftEventSpawning (string lp_unitType) {
    auto_gf_IntroVoidRiftEventSpawning_lp_unitType = lp_unitType;

    if (auto_gf_IntroVoidRiftEventSpawning_Trigger == null) {
        auto_gf_IntroVoidRiftEventSpawning_Trigger = TriggerCreate("auto_gf_IntroVoidRiftEventSpawning_TriggerFunc");
    }

    TriggerExecute(auto_gf_IntroVoidRiftEventSpawning_Trigger, false, false);
}

bool auto_gf_IntroVoidRiftEventSpawning_TriggerFunc (bool testConds, bool runActions) {
    string lp_unitType = auto_gf_IntroVoidRiftEventSpawning_lp_unitType;

    // Variable Declarations
    fixed lv_angle;
    fixed lv_randomRealMax;
    fixed lv_randomRealMin;
    unit lv_unit;

    // Automatic Variable Declarations
    fixed autoDE86D87B_at;

    // Variable Initialization
    lv_angle = libNtve_gf_RandomAngle();
    lv_randomRealMax = 12.0;
    lv_randomRealMin = 6.0;

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_unitType, 0, gv_pLAYER_05_VOIDFORCES, PointWithOffsetPolar(UnitGetPosition(UnitFromId(1267)), 6.0, lv_angle));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitBehaviorAddPlayer(UnitLastCreated(), "VoidRiftTrainPrecursor", UnitGetOwner(UnitLastCreated()), 1);
    UnitCreateEffectUnit(UnitFromId(1267), "VoidRiftTrainLM", UnitLastCreated());
    autoDE86D87B_at = 0;
    while (!((UnitHasBehavior2(UnitLastCreated(), "VoidRiftTrainPrecursor") == false)) && autoDE86D87B_at <= 4.0) {
        Wait(0.0625, c_timeGame);
        autoDE86D87B_at = autoDE86D87B_at + 0.0625;
    }
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(UnitFromId(1267)), RandomFixed(lv_randomRealMin, lv_randomRealMax), lv_angle)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_ULoadCampaignData("PAiur05");
    TriggerExecute(gt_Init01Technology, true, false);
    libVoiC_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init02Players, true, false);
    TriggerExecute(gt_Init03Units, true, false);
    TriggerExecute(gt_Init04MusicSound, true, false);
    TriggerExecute(gt_Init05Environment, true, false);
    TriggerExecute(gt_Init06Difficulties, true, false);
    TriggerExecute(gt_Init07Help, true, false);
    TriggerExecute(gt_IntroQ, true, true);
    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    TechTreeAbilityAllow(gv_pLAYER_02_PROTOSS_BULLIES, AbilityCommand("Charge", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_05_VOIDFORCES, AbilityCommand("Charge", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_06_VOIDFORCES, AbilityCommand("Charge", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_07_VOIDFORCES, AbilityCommand("Charge", 0), false);
    libVoiC_gf_EnableCampaignTechUnit(true, "ZealotShakuras", gv_pLAYER_08_NERAZIM);
    libVoiC_gf_EnableCampaignTechUnit(true, "StalkerShakuras", gv_pLAYER_08_NERAZIM);
    libVoiC_gf_EnableCampaignTechUnit(true, "HighTemplarShakuras", gv_pLAYER_08_NERAZIM);
    libVoiC_gf_EnableCampaignTechUnit(true, "HighTemplarTaldarim", gv_pLAYER_09_TALDARIM);
    libVoiC_gf_EnableCampaignTechUnit(true, "SentryTalDarim", gv_pLAYER_09_TALDARIM);
    libVoiC_gf_EnableCampaignTechUnit(true, "DarkTemplarTaldarim", gv_pLAYER_09_TALDARIM);
    libVoiC_gf_EnableCampaignTechUnit(true, "ImmortalTaldarim", gv_pLAYER_09_TALDARIM);
    TechTreeUpgradeAddLevel(gv_pLAYER_09_TALDARIM, "DarkProtoss", 1);
    libVoiC_gf_EnableCampaignTechUnit(true, "ZealotPurifier", gv_pLAYER_10_PURIFIER);
    libVoiC_gf_EnableCampaignTechUnit(true, "StalkerPurifier", gv_pLAYER_10_PURIFIER);
    libVoiC_gf_EnableCampaignTechUnit(true, "ColossusPurifier", gv_pLAYER_10_PURIFIER);
    libVoiC_gf_EnableCampaignTechUnit(true, "SentryPurifier", gv_pLAYER_10_PURIFIER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto60D44A30_g;
    int auto60D44A30_var;
    playergroup auto202CF63E_g;
    int auto202CF63E_var;

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 250);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 100);
    UISetAlertTypeVisible(PlayerGroupSingle(gv_pLAYER_01_USER), "AttackTownAlly", false);
    UISetAlertTypeVisible(PlayerGroupSingle(gv_pLAYER_01_USER), "AttackTownAlly_Prot", false);
    UISetAlertTypeVisible(PlayerGroupSingle(gv_pLAYER_01_USER), "AttackTownAlly_Terr", false);
    UISetAlertTypeVisible(PlayerGroupSingle(gv_pLAYER_01_USER), "AttackTownAlly_Zerg", false);
    UISetAlertTypeVisible(PlayerGroupSingle(gv_pLAYER_01_USER), "AttackUnitAlly", false);
    UISetAlertTypeVisible(PlayerGroupSingle(gv_pLAYER_01_USER), "AttackUnitAlly_Prot", false);
    UISetAlertTypeVisible(PlayerGroupSingle(gv_pLAYER_01_USER), "AttackUnitAlly_Terr", false);
    UISetAlertTypeVisible(PlayerGroupSingle(gv_pLAYER_01_USER), "AttackUnitAlly_Zerg", false);
    PlayerGroupAdd(gv_allyPlayerGroup, gv_pLAYER_08_NERAZIM);
    PlayerGroupAdd(gv_allyPlayerGroup, gv_pLAYER_09_TALDARIM);
    PlayerGroupAdd(gv_allyPlayerGroup, gv_pLAYER_10_PURIFIER);
    auto60D44A30_g = gv_allyPlayerGroup;
    auto60D44A30_var = -1;
    while (true) {
        auto60D44A30_var = PlayerGroupNextPlayer(auto60D44A30_g, auto60D44A30_var);
        if (auto60D44A30_var < 0) { break; }
        libNtve_gf_SetAlliance(auto60D44A30_var, gv_pLAYER_01_USER, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        libNtve_gf_SetAlliance(auto60D44A30_var, gv_pLAYER_02_PROTOSS_BULLIES, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(auto60D44A30_var, gv_pLAYER_03_ZERG_BULLIES, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(auto60D44A30_var, gv_pLAYER_04_INFESTED_BULLIES, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(auto60D44A30_var, gv_pLAYER_05_VOIDFORCES, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(auto60D44A30_var, gv_pLAYER_06_VOIDFORCES, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(auto60D44A30_var, gv_pLAYER_07_VOIDFORCES, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(auto60D44A30_var, gv_pLAYER_08_NERAZIM, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        libNtve_gf_SetAlliance(auto60D44A30_var, gv_pLAYER_09_TALDARIM, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        libNtve_gf_SetAlliance(auto60D44A30_var, gv_pLAYER_10_PURIFIER, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        PlayerSetState(auto60D44A30_var, c_playerStateMineralCostIgnored, true);
        PlayerSetState(auto60D44A30_var, c_playerStateVespeneCostIgnored, true);
        PlayerSetState(auto60D44A30_var, c_playerStateFoodIgnored, true);
    }
    PlayerSetColorIndex(gv_pLAYER_08_NERAZIM, 4, true);
    PlayerSetColorIndex(gv_pLAYER_09_TALDARIM, 3, true);
    PlayerSetColorIndex(gv_pLAYER_10_PURIFIER, 6, true);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_PROTOSS_BULLIES, "HeroicShieldCleanUp", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_05_VOIDFORCES, "HeroicShieldCleanUp", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_06_VOIDFORCES, "HeroicShieldCleanUp", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_07_VOIDFORCES, "HeroicShieldCleanUp", 1);
    PlayerGroupAdd(gv_enemyPlayerGroup, gv_pLAYER_02_PROTOSS_BULLIES);
    PlayerGroupAdd(gv_enemyPlayerGroup, gv_pLAYER_03_ZERG_BULLIES);
    PlayerGroupAdd(gv_enemyPlayerGroup, gv_pLAYER_04_INFESTED_BULLIES);
    PlayerGroupAdd(gv_enemyPlayerGroup, gv_pLAYER_05_VOIDFORCES);
    PlayerGroupAdd(gv_enemyPlayerGroup, gv_pLAYER_06_VOIDFORCES);
    PlayerGroupAdd(gv_enemyPlayerGroup, gv_pLAYER_07_VOIDFORCES);
    auto202CF63E_g = gv_enemyPlayerGroup;
    auto202CF63E_var = -1;
    while (true) {
        auto202CF63E_var = PlayerGroupNextPlayer(auto202CF63E_g, auto202CF63E_var);
        if (auto202CF63E_var < 0) { break; }
        libNtve_gf_SetAlliance(auto202CF63E_var, gv_pLAYER_01_USER, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(auto202CF63E_var, gv_pLAYER_02_PROTOSS_BULLIES, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        libNtve_gf_SetAlliance(auto202CF63E_var, gv_pLAYER_03_ZERG_BULLIES, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        libNtve_gf_SetAlliance(auto202CF63E_var, gv_pLAYER_04_INFESTED_BULLIES, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        libNtve_gf_SetAlliance(auto202CF63E_var, gv_pLAYER_05_VOIDFORCES, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        libNtve_gf_SetAlliance(auto202CF63E_var, gv_pLAYER_06_VOIDFORCES, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        libNtve_gf_SetAlliance(auto202CF63E_var, gv_pLAYER_07_VOIDFORCES, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        libNtve_gf_SetAlliance(auto202CF63E_var, gv_pLAYER_08_NERAZIM, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(auto202CF63E_var, gv_pLAYER_09_TALDARIM, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(auto202CF63E_var, gv_pLAYER_10_PURIFIER, libNtve_ge_AllianceSetting_Enemy);
        PlayerSetState(auto202CF63E_var, c_playerStateMineralCostIgnored, true);
        PlayerSetState(auto202CF63E_var, c_playerStateVespeneCostIgnored, true);
        PlayerSetState(auto202CF63E_var, c_playerStateFoodIgnored, true);
        PlayerSetColorIndex(auto202CF63E_var, 1, true);
    }
    PlayerGroupAdd(gv_enemyPlayerGroup_AmonForces, gv_pLAYER_05_VOIDFORCES);
    PlayerGroupAdd(gv_enemyPlayerGroup_AmonForces, gv_pLAYER_06_VOIDFORCES);
    PlayerGroupAdd(gv_enemyPlayerGroup_AmonForces, gv_pLAYER_07_VOIDFORCES);
    libVCMI_gf_PM_DetectionUpgradesApply();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_airPatrol;
    unitgroup lv_infestationGroup;
    int lv_iter;

    // Automatic Variable Declarations
    unitgroup auto6C3012C6_g;
    int auto6C3012C6_u;
    unit auto6C3012C6_var;
    unitgroup auto72E2CDFE_g;
    int auto72E2CDFE_u;
    unit auto72E2CDFE_var;
    unitgroup auto1088C3DF_g;
    int auto1088C3DF_u;
    unit auto1088C3DF_var;
    unitgroup autoD6334447_g;
    int autoD6334447_u;
    unit autoD6334447_var;
    unitgroup auto170FBD7E_g;
    int auto170FBD7E_u;
    unit auto170FBD7E_var;
    unitgroup auto6CA27623_g;
    int auto6CA27623_u;
    unit auto6CA27623_var;
    unitgroup auto64826AC2_g;
    int auto64826AC2_u;
    unit auto64826AC2_var;
    unitgroup auto33C6A22E_g;
    int auto33C6A22E_u;
    unit auto33C6A22E_var;
    unitgroup auto3C12E09F_g;
    int auto3C12E09F_u;
    unit auto3C12E09F_var;
    unitgroup auto08DA3358_g;
    int auto08DA3358_u;
    unit auto08DA3358_var;

    // Variable Initialization
    lv_airPatrol = UnitGroupEmpty();
    lv_infestationGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    gv_amonUnit = UnitFromId(47);
    libNtve_gf_ShareVisionofUnit(gv_amonUnit, true, gv_pLAYER_01_USER);
    libVCMI_gf_SetWorkerRallyPointsPlayersNexuses(gv_pLAYER_01_USER);
    gv_voidShards[1] = UnitFromId(19);
    gv_voidShards[2] = UnitFromId(23);
    gv_voidShards[3] = UnitFromId(46);
    gv_voidShards[4] = UnitFromId(40);
    gv_voidShards[5] = UnitFromId(26);
    TerrainShowRegion(RegionFromId(28), false);
    TerrainShowRegion(RegionFromId(37), false);
    TerrainShowRegion(RegionFromId(38), false);
    TerrainShowRegion(RegionFromId(39), false);
    TerrainShowRegion(RegionFromId(40), false);
    auto6C3012C6_g = UnitGroup("VoidShard", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6C3012C6_u = UnitGroupCount(auto6C3012C6_g, c_unitCountAll);
    for (;; auto6C3012C6_u -= 1) {
        auto6C3012C6_var = UnitGroupUnitFromEnd(auto6C3012C6_g, auto6C3012C6_u);
        if (auto6C3012C6_var == null) { break; }
        UnitSetInfoTip(auto6C3012C6_var, UnitTypeGetName(UnitGetType(auto6C3012C6_var)));
    }
    auto72E2CDFE_g = UnitGroup(null, gv_pLAYER_06_VOIDFORCES, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto72E2CDFE_u = UnitGroupCount(auto72E2CDFE_g, c_unitCountAll);
    for (;; auto72E2CDFE_u -= 1) {
        auto72E2CDFE_var = UnitGroupUnitFromEnd(auto72E2CDFE_g, auto72E2CDFE_u);
        if (auto72E2CDFE_var == null) { break; }
        UnitBehaviorAdd(auto72E2CDFE_var, "VoidShade", auto72E2CDFE_var, 1);
    }
    auto1088C3DF_g = UnitGroup(null, gv_pLAYER_07_VOIDFORCES, RegionFromId(10), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1088C3DF_u = UnitGroupCount(auto1088C3DF_g, c_unitCountAll);
    for (;; auto1088C3DF_u -= 1) {
        auto1088C3DF_var = UnitGroupUnitFromEnd(auto1088C3DF_g, auto1088C3DF_u);
        if (auto1088C3DF_var == null) { break; }
        UnitBehaviorAdd(auto1088C3DF_var, "VoidShade", auto1088C3DF_var, 1);
    }
    autoD6334447_g = UnitGroup(null, gv_pLAYER_07_VOIDFORCES, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD6334447_u = UnitGroupCount(autoD6334447_g, c_unitCountAll);
    for (;; autoD6334447_u -= 1) {
        autoD6334447_var = UnitGroupUnitFromEnd(autoD6334447_g, autoD6334447_u);
        if (autoD6334447_var == null) { break; }
        UnitBehaviorAdd(autoD6334447_var, "VoidShade", autoD6334447_var, 1);
    }
    auto170FBD7E_g = UnitGroup(null, gv_pLAYER_06_VOIDFORCES, RegionFromId(22), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto170FBD7E_u = UnitGroupCount(auto170FBD7E_g, c_unitCountAll);
    for (;; auto170FBD7E_u -= 1) {
        auto170FBD7E_var = UnitGroupUnitFromEnd(auto170FBD7E_g, auto170FBD7E_u);
        if (auto170FBD7E_var == null) { break; }
        UnitBehaviorAdd(auto170FBD7E_var, "VoidShade", auto170FBD7E_var, 1);
    }
    auto6CA27623_g = UnitGroup(null, gv_pLAYER_05_VOIDFORCES, RegionFromId(23), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6CA27623_u = UnitGroupCount(auto6CA27623_g, c_unitCountAll);
    for (;; auto6CA27623_u -= 1) {
        auto6CA27623_var = UnitGroupUnitFromEnd(auto6CA27623_g, auto6CA27623_u);
        if (auto6CA27623_var == null) { break; }
        UnitBehaviorAdd(auto6CA27623_var, "VoidShade", auto6CA27623_var, 1);
    }
    auto64826AC2_g = UnitGroup(null, gv_pLAYER_04_INFESTED_BULLIES, RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto64826AC2_u = UnitGroupCount(auto64826AC2_g, c_unitCountAll);
    for (;; auto64826AC2_u -= 1) {
        auto64826AC2_var = UnitGroupUnitFromEnd(auto64826AC2_g, auto64826AC2_u);
        if (auto64826AC2_var == null) { break; }
        UnitBehaviorAddPlayer(auto64826AC2_var, "ColonyInfestation", UnitGetOwner(auto64826AC2_var), 1);
    }
    auto33C6A22E_g = UnitGroup("Bunker", gv_pLAYER_04_INFESTED_BULLIES, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto33C6A22E_u = UnitGroupCount(auto33C6A22E_g, c_unitCountAll);
    for (;; auto33C6A22E_u -= 1) {
        auto33C6A22E_var = UnitGroupUnitFromEnd(auto33C6A22E_g, auto33C6A22E_u);
        if (auto33C6A22E_var == null) { break; }
        UnitCargoCreate(auto33C6A22E_var, "Marine", 4);
        gf_InfestedBunker(auto33C6A22E_var);
    }
    auto3C12E09F_g = UnitGroup("InfestedColonistShip", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3C12E09F_u = UnitGroupCount(auto3C12E09F_g, c_unitCountAll);
    for (;; auto3C12E09F_u -= 1) {
        auto3C12E09F_var = UnitGroupUnitFromEnd(auto3C12E09F_g, auto3C12E09F_u);
        if (auto3C12E09F_var == null) { break; }
        ActorSend(libNtve_gf_MainActorofUnit(auto3C12E09F_var), "SetMinimapVisibility");
    }
    UnitGroupAddUnitGroup(lv_infestationGroup, UnitGroup("InfestationSpire", gv_pLAYER_03_ZERG_BULLIES, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_infestationGroup, UnitGroup("InfestedColonistShip", gv_pLAYER_03_ZERG_BULLIES, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    auto08DA3358_g = lv_infestationGroup;
    auto08DA3358_u = UnitGroupCount(auto08DA3358_g, c_unitCountAll);
    for (;; auto08DA3358_u -= 1) {
        auto08DA3358_var = UnitGroupUnitFromEnd(auto08DA3358_g, auto08DA3358_u);
        if (auto08DA3358_var == null) { break; }
        UnitBehaviorAddPlayer(auto08DA3358_var, "Harmless", gv_pLAYER_03_ZERG_BULLIES, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init04MusicSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mapMusicTrack = "PAiur05_Music_Main";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, 0, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Typhon", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04MusicSound_Init () {
    gt_Init04MusicSound = TriggerCreate("gt_Init04MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameSetLighting("AiurTempleJungle", 0.0);
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionEntireMap(), "RainEmitterLarge");
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionEntireMap(), "LightningBolt");
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionEntireMap(), "ThunderLightning");
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionEntireMap(), "Cybros_Beam");
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionEntireMap(), "SOA_Beam");
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionEntireMap(), "OrbitalMegaDeathBeam_ImpactTrail");
    libLbty_gf_AutoRevealRegion(RegionFromId(43), RegionFromId(43), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(44), RegionFromId(44), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(45), RegionFromId(45), gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_baseWaveRadius;

    // Automatic Variable Declarations
    playergroup auto105AA7CF_g;
    int auto105AA7CF_var;
    playergroup auto1A80D95B_g;
    int auto1A80D95B_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_VoidShardDifficultySettings, true, false);
    auto105AA7CF_g = gv_enemyPlayerGroup;
    auto105AA7CF_var = -1;
    while (true) {
        auto105AA7CF_var = PlayerGroupNextPlayer(auto105AA7CF_g, auto105AA7CF_var);
        if (auto105AA7CF_var < 0) { break; }
        TechTreeAbilityAllow(auto105AA7CF_var, AbilityCommand("EMP", 0), false);
        if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
            TechTreeUpgradeAddLevel(auto105AA7CF_var, "ShieldWall", 1);
            TechTreeUpgradeAddLevel(auto105AA7CF_var, "zerglingmovementspeed", 1);
            TechTreeUpgradeAddLevel(auto105AA7CF_var, "hydraliskspeed", 1);
            TechTreeAbilityAllow(auto105AA7CF_var, AbilityCommand("FungalGrowth", 0), true);
            TechTreeUpgradeAddLevel(auto105AA7CF_var, "ProtossAirWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto105AA7CF_var, "ProtossGroundWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto105AA7CF_var, "ProtossAirArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(auto105AA7CF_var, "ProtossGroundArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(auto105AA7CF_var, "ProtossShieldsLevel1", 1);
            TechTreeUpgradeAddLevel(auto105AA7CF_var, "ZergFlyerWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto105AA7CF_var, "ZergMeleeWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto105AA7CF_var, "ZergMissileWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto105AA7CF_var, "ZergGroundArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(auto105AA7CF_var, "ZergFlyerArmorsLevel1", 1);
        }

        if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
            TechTreeUpgradeAddLevel(auto105AA7CF_var, "ClusterWarheads", 1);
            TechTreeUpgradeAddLevel(auto105AA7CF_var, "AdvancedHealingAI", 1);
            TechTreeUpgradeAddLevel(auto105AA7CF_var, "ExtendedThermalLance", 1);
            TechTreeUpgradeAddLevel(auto105AA7CF_var, "zerglingattackspeed", 1);
        }

    }
    auto1A80D95B_g = gv_allyPlayerGroup;
    auto1A80D95B_var = -1;
    while (true) {
        auto1A80D95B_var = PlayerGroupNextPlayer(auto1A80D95B_g, auto1A80D95B_var);
        if (auto1A80D95B_var < 0) { break; }
        if ((TechTreeUpgradeCount(gv_pLAYER_01_USER, "SOASuperShield", c_techCountQueuedOrBetter) >= 1)) {
            TechTreeUpgradeAddLevel(auto1A80D95B_var, "SOASuperShield", 1);
        }

        if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
            TechTreeUpgradeAddLevel(auto1A80D95B_var, "ProtossAirWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto1A80D95B_var, "ProtossGroundWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto1A80D95B_var, "ProtossAirArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(auto1A80D95B_var, "ProtossGroundArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(auto1A80D95B_var, "ProtossShieldsLevel1", 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_AddMissionTipCampaign("AmonHostBody");
    libVCMI_gf_AddMissionTipCampaign("VoidShard");
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Zealot", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Dragoon", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Immortal", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Archon", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Colossus", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Scout", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("VoidRay", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Carrier", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("InfestedCivilian", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("InfestedTerranCampaign", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Zergling", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Hydralisk", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Roach", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Ultralisk", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Mutalisk", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Scourge", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Guardian", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("HybridReaver", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("HybridDestroyer", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("HybridNemesis", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("SpineCrawler", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("SporeCrawler", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("PhotonCannon", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Probe", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Drone", false, gv_pLAYER_01_USER);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        libVoiC_gf_AddUnitTypeToUnitHelpPanel("InfestedAbomination", false, gv_pLAYER_01_USER);
        libVoiC_gf_AddUnitTypeToUnitHelpPanel("HighTemplar", false, gv_pLAYER_01_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Entity Spawned
//--------------------------------------------------------------------------------------------------
bool gt_VoidEntitySpawned_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_05_VOIDFORCES) || (UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_06_VOIDFORCES) || (UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_07_VOIDFORCES)))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "VoidRiftUnselectable"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnitProgressUnit(), "VoidShade", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidEntitySpawned_Init () {
    gt_VoidEntitySpawned = TriggerCreate("gt_VoidEntitySpawned_Func");
    TriggerAddEventUnitTrainProgress(gt_VoidEntitySpawned, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ally Structure Warps In
//--------------------------------------------------------------------------------------------------
bool gt_AllyStructureWarpsIn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_08_NERAZIM) || (UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_09_TALDARIM) || (UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_10_PURIFIER)))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnitProgressUnit(), gv_pLAYER_01_USER, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnitProgressUnit(), "Queue2x", EventUnitProgressUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AllyStructureWarpsIn_Init () {
    gt_AllyStructureWarpsIn = TriggerCreate("gt_AllyStructureWarpsIn_Func");
    TriggerAddEventUnitConstructProgress(gt_AllyStructureWarpsIn, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ally Unit Warps In
//--------------------------------------------------------------------------------------------------
bool gt_AllyUnitWarpsIn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_08_NERAZIM) || (UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_09_TALDARIM) || (UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_10_PURIFIER)))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnitProgressUnit(), gv_pLAYER_01_USER, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventUnitProgressUnit(), c_unitPropEnergyPercent, 100.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AllyUnitWarpsIn_Init () {
    gt_AllyUnitWarpsIn = TriggerCreate("gt_AllyUnitWarpsIn_Func");
    TriggerAddEventUnitConstructProgress(gt_AllyUnitWarpsIn, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto07AA8B2B_ae = gv_voidShardsCount;
    const int auto07AA8B2B_ai = 1;
    const int autoFF9CBEED_ae = 5;
    const int autoFF9CBEED_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_mastery_SpeedRunTimer, 1440.0, false, c_timeAI);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/976F43A0"), null, PointFromId(70));
    libVCMI_gf_StartingWorkersAutoHarvest(RegionFromId(17), null);
    lv_i = 1;
    for ( ; ( (auto07AA8B2B_ai >= 0 && lv_i <= auto07AA8B2B_ae) || (auto07AA8B2B_ai < 0 && lv_i >= auto07AA8B2B_ae) ) ; lv_i += auto07AA8B2B_ai ) {
        gf_VoidShardAI(lv_i, gv_voidShards[lv_i]);
    }
    TriggerExecute(gt_VoidShardWarningController, true, false);
    Wait(3.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveDestroyVoidShardsCreate, true, false);
    lv_i = 1;
    for ( ; ( (autoFF9CBEED_ai >= 0 && lv_i <= autoFF9CBEED_ae) || (autoFF9CBEED_ai < 0 && lv_i >= autoFF9CBEED_ae) ) ; lv_i += autoFF9CBEED_ai ) {
        VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_voidShards[lv_i]), 5.0), 2.0, false);
        libVCMI_gf_CreateObjectivePing(true, UnitGetPosition(gv_voidShards[lv_i]), StringExternal("Param/Value/7281ED54"));
        libHots_gf_StorePingForUnit(gv_voidShards[lv_i], 1, PingLastCreated());
        Wait(0.125, c_timeGame);
    }
    Wait(2.0, c_timeReal);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00063", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_TipReadyQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Shard Difficulty Settings
//--------------------------------------------------------------------------------------------------
bool gt_VoidShardDifficultySettings_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto2544B541_g;
    int auto2544B541_u;
    unit auto2544B541_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto2544B541_g = UnitGroup("VoidShard", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2544B541_u = UnitGroupCount(auto2544B541_g, c_unitCountAll);
    for (;; auto2544B541_u -= 1) {
        auto2544B541_var = UnitGroupUnitFromEnd(auto2544B541_g, auto2544B541_u);
        if (auto2544B541_var == null) { break; }
        UnitSetPropertyFixed(auto2544B541_var, c_unitPropLifeMax, libLotv_gf_DifficultyValueFixed2(1500.0, 1500.0, 2250.0, 2500.0));
        UnitSetPropertyFixed(auto2544B541_var, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(auto2544B541_var, c_unitPropShieldsMax, libLotv_gf_DifficultyValueFixed2(1000.0, 1000.0, 1250.0, 1500.0));
        UnitSetPropertyFixed(auto2544B541_var, c_unitPropShieldsPercent, 100.0);
    }
    gv_voidShardGenericCooldown = libLotv_gf_DifficultyValueFixed2(4.0, 4.0, 4.0, 2.0);
    gv_voidShardShockwaveRange = 10.0;
    gv_voidShardShockwaveCooldown = 16.0;
    gv_voidShardDeathGripRange = 16.0;
    gv_voidShardDeathGripTargetCount = libLotv_gf_DifficultyValueInt2(1, 1, 2, 2);
    gv_voidShardDeathGripCooldown = libLotv_gf_DifficultyValueFixed2(15.0, 15.0, 15.0, 10.0);
    gv_voidShardUnstableEnergyRange = 18.0;
    gv_voidShardUnstableEnergyCooldown = 20.0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidShardDifficultySettings_Init () {
    gt_VoidShardDifficultySettings = TriggerCreate("gt_VoidShardDifficultySettings_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Shard Dies
//--------------------------------------------------------------------------------------------------
bool gt_VoidShardDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    region lv_voidShardRegion;
    fixed lv_voidShardShields;

    // Automatic Variable Declarations
    const int auto3CD5D6A2_ae = gv_voidShardsCount;
    const int auto3CD5D6A2_ai = 1;
    unit auto45400C5A_val;
    unitgroup autoDA02BF54_g;
    int autoDA02BF54_u;
    unit autoDA02BF54_var;
    unitgroup auto30562DD3_g;
    int auto30562DD3_u;
    unit auto30562DD3_var;
    unitgroup auto2BDDAA5C_g;
    int auto2BDDAA5C_u;
    unit auto2BDDAA5C_var;

    // Variable Initialization
    lv_voidShardRegion = RegionCircle(UnitGetPosition(EventUnit()), 20.0);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceAllyExcludeSelf, RegionCircle(UnitGetPosition(EventUnit()), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        TriggerExecute(gt_AchievementShardAssist, true, false);
    }

    if ((libLotv_gf_DifficultyValueInt2(0, 1, 1, 1) == 1)) {
        TriggerExecute(gt_AchievementShardCombo, true, false);
    }

    PingDestroy(libHots_gf_PingStoredForUnit(EventUnit(), 1));
    libNtve_gf_SendActorMessageToUnit(gv_amonUnit, "AnimPlay SpellA Spell,A");
    CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 0.0, 3.5, 4.0);
    if ((gf_NumberofDestroyedVoidShards() == 2)) {
        TriggerExecute(gt_TurnOnRain, true, false);
    }

    if ((gf_NumberofDestroyedVoidShards() == 4)) {
        TriggerExecute(gt_TurnOnLightningStrikes, true, false);
    }

    AIToggleBulliesInRegion(gv_pLAYER_05_VOIDFORCES, lv_voidShardRegion, false);
    AIToggleBulliesInRegion(gv_pLAYER_06_VOIDFORCES, lv_voidShardRegion, false);
    AIToggleBulliesInRegion(gv_pLAYER_07_VOIDFORCES, lv_voidShardRegion, false);
    lv_i = 1;
    for ( ; ( (auto3CD5D6A2_ai >= 0 && lv_i <= auto3CD5D6A2_ae) || (auto3CD5D6A2_ai < 0 && lv_i >= auto3CD5D6A2_ae) ) ; lv_i += auto3CD5D6A2_ai ) {
        if ((UnitIsAlive(gv_voidShards[lv_i]) == true)) {
            lv_voidShardShields = (UnitGetPropertyFixed(gv_voidShards[lv_i], c_unitPropShieldsMax, c_unitPropCurrent) + 250.0);
            UnitSetPropertyFixed(gv_voidShards[lv_i], c_unitPropShieldsMax, lv_voidShardShields);
        }

    }
    if ((gf_NumberofDestroyedVoidShards() >= 2)) {
        gv_voidShardShockwaveCooldown -= libLotv_gf_DifficultyValueInt2(1, 1, 2, 2);
    }

    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1) && (gf_NumberofDestroyedVoidShards() >= 4)) {
        gv_voidShardShockwaveCooldown -= 10.0;
    }

    Wait(1.0, c_timeGame);
    auto45400C5A_val = EventUnit();
    if (auto45400C5A_val == gv_voidShards[1]) {
        TerrainShowRegion(RegionFromId(28), true);
        AIAttackWaveSetGatherPoint(gv_pLAYER_06_VOIDFORCES, PointFromId(1255));
        cai_setDefGather(gv_pLAYER_06_VOIDFORCES, PointFromId(1255));
    }
    else if (auto45400C5A_val == gv_voidShards[2]) {
        TerrainShowRegion(RegionFromId(37), true);
        AIAttackWaveSetGatherPoint(gv_pLAYER_07_VOIDFORCES, PointFromId(1254));
        cai_setDefGather(gv_pLAYER_07_VOIDFORCES, PointFromId(1254));
    }
    else if (auto45400C5A_val == gv_voidShards[3]) {
        TerrainShowRegion(RegionFromId(38), true);
        AIAttackWaveSetGatherPoint(gv_pLAYER_07_VOIDFORCES, PointFromId(1253));
        cai_setDefGather(gv_pLAYER_07_VOIDFORCES, PointFromId(1253));
    }
    else if (auto45400C5A_val == gv_voidShards[4]) {
        TerrainShowRegion(RegionFromId(39), true);
        AIAttackWaveSetGatherPoint(gv_pLAYER_06_VOIDFORCES, PointFromId(1252));
        cai_setDefGather(gv_pLAYER_06_VOIDFORCES, PointFromId(1252));
    }
    else if (auto45400C5A_val == gv_voidShards[5]) {
        TerrainShowRegion(RegionFromId(40), true);
    }
    else {
    }
    libVCMI_gf_SendActorMessageToDoodadsInRegion("SetOpacity 0.000000 2.000000", "ShakurasBaseShield", lv_voidShardRegion);
    Wait(0.5, c_timeGame);
    autoDA02BF54_g = UnitGroup("VoidTendrilDeathGripCrystal", c_playerAny, lv_voidShardRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDA02BF54_u = UnitGroupCount(autoDA02BF54_g, c_unitCountAll);
    for (;; autoDA02BF54_u -= 1) {
        autoDA02BF54_var = UnitGroupUnitFromEnd(autoDA02BF54_g, autoDA02BF54_u);
        if (autoDA02BF54_var == null) { break; }
        UnitKill(autoDA02BF54_var);
    }
    auto30562DD3_g = UnitGroup("VoidTendrilUnstableEnergy", c_playerAny, lv_voidShardRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto30562DD3_u = UnitGroupCount(auto30562DD3_g, c_unitCountAll);
    for (;; auto30562DD3_u -= 1) {
        auto30562DD3_var = UnitGroupUnitFromEnd(auto30562DD3_g, auto30562DD3_u);
        if (auto30562DD3_var == null) { break; }
        UnitKill(auto30562DD3_var);
    }
    auto2BDDAA5C_g = UnitGroup("VoidRiftUnselectable", c_playerAny, lv_voidShardRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2BDDAA5C_u = UnitGroupCount(auto2BDDAA5C_g, c_unitCountAll);
    for (;; auto2BDDAA5C_u -= 1) {
        auto2BDDAA5C_var = UnitGroupUnitFromEnd(auto2BDDAA5C_g, auto2BDDAA5C_u);
        if (auto2BDDAA5C_var == null) { break; }
        UnitKill(auto2BDDAA5C_var);
        Wait(0.125, c_timeGame);
    }
    Wait(2.0, c_timeGame);
    libNtve_gf_ShowHideDoodadsInRegion(false, lv_voidShardRegion, "ShakurasBaseShield");
    TriggerExecute(gt_ObjectiveDestroyVoidShardsUpdate, true, false);
    if ((gf_NumberofDestroyedVoidShards() < gv_voidShardsCount)) {
        TextExpressionSetToken("Param/Expression/9D2039A4", "nodeDestroyedCount", IntToText(gf_NumberofDestroyedVoidShards()));
        libVCMI_gf_CreateMissionAutosavePoint(TextExpressionAssemble("Param/Expression/9D2039A4"));
        TriggerExecute(gt_TransmissionVoidShardDestroyedQ, true, false);
    }
    else {
        TriggerExecute(gt_VictoryVoidShardsDestroyed, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidShardDies_Init () {
    gt_VoidShardDies = TriggerCreate("gt_VoidShardDies_Func");
    TriggerAddEventUnitDied(gt_VoidShardDies, UnitRefFromVariable("gv_voidShards[1]"));
    TriggerAddEventUnitDied(gt_VoidShardDies, UnitRefFromVariable("gv_voidShards[2]"));
    TriggerAddEventUnitDied(gt_VoidShardDies, UnitRefFromVariable("gv_voidShards[3]"));
    TriggerAddEventUnitDied(gt_VoidShardDies, UnitRefFromVariable("gv_voidShards[4]"));
    TriggerAddEventUnitDied(gt_VoidShardDies, UnitRefFromVariable("gv_voidShards[5]"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Void Shard Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionVoidShardDestroyedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto51D2C3DB_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    auto51D2C3DB_val = gf_NumberofDestroyedVoidShards();
    if (auto51D2C3DB_val == 1) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00073", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto51D2C3DB_val == 2) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00159", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto51D2C3DB_val == 3) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00158", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto51D2C3DB_val == 4) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00077", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(2.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionVoidShardDestroyedQ_Init () {
    gt_TransmissionVoidShardDestroyedQ = TriggerCreate("gt_TransmissionVoidShardDestroyedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Shard Warning Controller
//--------------------------------------------------------------------------------------------------
bool gt_VoidShardWarningController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    bool lv_unitInShardArea;
    int lv_countUnitsNearVoidShard;
    int lv_countSolarLancesNearVoidShard;

    // Automatic Variable Declarations
    const int auto88A2C240_ae = gv_voidShardsCount;
    const int auto88A2C240_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while ((libVCMI_gf_GameIsOver() == false) && (TriggerIsEnabled(gt_TransmissionShardWarning4DestroyedQ) == true)) {
        lv_unitInShardArea = false;
        lv_i = 1;
        for ( ; ( (auto88A2C240_ai >= 0 && lv_i <= auto88A2C240_ae) || (auto88A2C240_ai < 0 && lv_i >= auto88A2C240_ae) ) ; lv_i += auto88A2C240_ai ) {
            if ((UnitIsAlive(gv_voidShards[lv_i]) == true)) {
                lv_countUnitsNearVoidShard = UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_voidShards[lv_i]), 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
                lv_countSolarLancesNearVoidShard = UnitGroupCount(UnitGroup("SOAThermalLanceTargeter", gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_voidShards[lv_i]), 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
                if (((lv_countUnitsNearVoidShard - lv_countSolarLancesNearVoidShard) > 0)) {
                    lv_unitInShardArea = true;
                }

            }

        }
        if ((lv_unitInShardArea == true)) {
            if ((TriggerIsEnabled(gt_TransmissionShardWarning4DestroyedQ) == true) && (gf_NumberofDestroyedVoidShards() == 4)) {
                TriggerExecute(gt_TransmissionShardWarning4DestroyedQ, true, false);
            }
            else if ((TriggerIsEnabled(gt_TransmissionShardWarning3DestroyedQ) == true) && (gf_NumberofDestroyedVoidShards() == 3)) {
                TriggerExecute(gt_TransmissionShardWarning3DestroyedQ, true, false);
            }
            else if ((TriggerIsEnabled(gt_TransmissionShardWarning2DestroyedQ) == true) && (gf_NumberofDestroyedVoidShards() == 2)) {
                TriggerExecute(gt_TransmissionShardWarning2DestroyedQ, true, false);
            }
            else if ((TriggerIsEnabled(gt_TransmissionShardWarning1DestroyedQ) == true) && (gf_NumberofDestroyedVoidShards() == 1)) {
                TriggerExecute(gt_TransmissionShardWarning1DestroyedQ, true, false);
            }
        }

        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidShardWarningController_Init () {
    gt_VoidShardWarningController = TriggerCreate("gt_VoidShardWarningController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Shard Warning (1 Destroyed) Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionShardWarning1DestroyedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00150", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionShardWarning1DestroyedQ_Init () {
    gt_TransmissionShardWarning1DestroyedQ = TriggerCreate("gt_TransmissionShardWarning1DestroyedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Shard Warning (2 Destroyed) Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionShardWarning2DestroyedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00151", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionShardWarning2DestroyedQ_Init () {
    gt_TransmissionShardWarning2DestroyedQ = TriggerCreate("gt_TransmissionShardWarning2DestroyedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Shard Warning (3 Destroyed) Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionShardWarning3DestroyedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00157", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionShardWarning3DestroyedQ_Init () {
    gt_TransmissionShardWarning3DestroyedQ = TriggerCreate("gt_TransmissionShardWarning3DestroyedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Shard Warning (4 Destroyed) Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionShardWarning4DestroyedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PShakuras02_Music_Stinger", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00155", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionShardWarning4DestroyedQ_Init () {
    gt_TransmissionShardWarning4DestroyedQ = TriggerCreate("gt_TransmissionShardWarning4DestroyedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Enters BO Reveal
//--------------------------------------------------------------------------------------------------
bool gt_UnitEntersBOReveal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionIntroBonusObjectiveQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitEntersBOReveal_Init () {
    gt_UnitEntersBOReveal = TriggerCreate("gt_UnitEntersBOReveal_Func");
    TriggerAddEventUnitRegion(gt_UnitEntersBOReveal, null, RegionFromId(43), true);
    TriggerAddEventUnitRegion(gt_UnitEntersBOReveal, null, RegionFromId(44), true);
    TriggerAddEventUnitRegion(gt_UnitEntersBOReveal, null, RegionFromId(45), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Intro Bonus Objective Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionIntroBonusObjectiveQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveClearWarpInZonesCreate, true, true);
    libVCMI_gf_CreateObjectivePing(false, PointFromId(122), StringExternal("Param/Value/912540D5"));
    gv_warpInZonePing01 = PingLastCreated();
    Wait(0.25, c_timeGame);
    libVCMI_gf_CreateObjectivePing(false, PointFromId(190), StringExternal("Param/Value/AFF306C0"));
    gv_warpInZonePing02 = PingLastCreated();
    Wait(0.25, c_timeGame);
    libVCMI_gf_CreateObjectivePing(false, PointFromId(195), StringExternal("Param/Value/7E50524C"));
    gv_warpInZonePing03 = PingLastCreated();
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00147", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00148", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    TriggerExecute(gt_TransmissionWarpInZoneCleared01Q, true, false);
    TriggerExecute(gt_TransmissionWarpInZoneCleared02Q, true, false);
    TriggerExecute(gt_TransmissionWarpInZoneCleared03Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionIntroBonusObjectiveQ_Init () {
    gt_TransmissionIntroBonusObjectiveQ = TriggerCreate("gt_TransmissionIntroBonusObjectiveQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Warp In Zone Cleared 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionWarpInZoneCleared01Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while ((UnitGroupCount(UnitGroup(null, gv_pLAYER_04_INFESTED_BULLIES, RegionFromId(12), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        if ((libVCMI_gf_GameIsOver() == true)) {
            return true;
        }

        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_EstablishWarpInZone01, true, false);
    PingDestroy(gv_warpInZonePing01);
    gv_warpInZoneCleared01 = true;
    gv_objectiveClearWarpInZonesCount += 1;
    TriggerExecute(gt_ObjectiveClearWarpInZonesUpdate, true, true);
    if ((gv_warpInZoneCleared01 == true) && (gv_warpInZoneCleared02 == true) && (gv_warpInZoneCleared03 == true)) {
        TriggerExecute(gt_ObjectiveClearWarpInZonesComplete, true, false);
    }

    Wait(2.0, c_timeGame);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00149", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    if ((gv_warpInZoneCleared01 == true) && (gv_warpInZoneCleared02 == true) && (gv_warpInZoneCleared03 == true)) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00154", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }

    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionWarpInZoneCleared01Q_Init () {
    gt_TransmissionWarpInZoneCleared01Q = TriggerCreate("gt_TransmissionWarpInZoneCleared01Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Warp In Zone Cleared 02 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionWarpInZoneCleared02Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while ((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_PROTOSS_BULLIES, RegionFromId(42), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        if ((libVCMI_gf_GameIsOver() == true)) {
            return true;
        }

        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_EstablishWarpInZone02, true, false);
    PingDestroy(gv_warpInZonePing02);
    gv_warpInZoneCleared02 = true;
    gv_objectiveClearWarpInZonesCount += 1;
    TriggerExecute(gt_ObjectiveClearWarpInZonesUpdate, true, true);
    if ((gv_warpInZoneCleared01 == true) && (gv_warpInZoneCleared02 == true) && (gv_warpInZoneCleared03 == true)) {
        TriggerExecute(gt_ObjectiveClearWarpInZonesComplete, true, false);
    }

    Wait(2.0, c_timeGame);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00152", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    if ((gv_warpInZoneCleared01 == true) && (gv_warpInZoneCleared02 == true) && (gv_warpInZoneCleared03 == true)) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00154", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }

    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionWarpInZoneCleared02Q_Init () {
    gt_TransmissionWarpInZoneCleared02Q = TriggerCreate("gt_TransmissionWarpInZoneCleared02Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Warp In Zone Cleared 03 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionWarpInZoneCleared03Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while ((UnitGroupCount(UnitGroup(null, gv_pLAYER_03_ZERG_BULLIES, RegionFromId(41), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        if ((libVCMI_gf_GameIsOver() == true)) {
            return true;
        }

        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_EstablishWarpInZone03, true, false);
    PingDestroy(gv_warpInZonePing03);
    gv_warpInZoneCleared03 = true;
    gv_objectiveClearWarpInZonesCount += 1;
    TriggerExecute(gt_ObjectiveClearWarpInZonesUpdate, true, true);
    if ((gv_warpInZoneCleared01 == true) && (gv_warpInZoneCleared02 == true) && (gv_warpInZoneCleared03 == true)) {
        TriggerExecute(gt_ObjectiveClearWarpInZonesComplete, true, false);
    }

    Wait(2.0, c_timeGame);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00153", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    if ((gv_warpInZoneCleared01 == true) && (gv_warpInZoneCleared02 == true) && (gv_warpInZoneCleared03 == true)) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00154", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }

    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionWarpInZoneCleared03Q_Init () {
    gt_TransmissionWarpInZoneCleared03Q = TriggerCreate("gt_TransmissionWarpInZoneCleared03Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Establish Warp In Zone 01
//--------------------------------------------------------------------------------------------------
bool gt_EstablishWarpInZone01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto3D4E3E89_n = 10;
    int auto3D4E3E89_i;
    const int auto0D5836C1_n = 8;
    int auto0D5836C1_i;
    const int auto358D9F45_n = 3;
    int auto358D9F45_i;
    const int autoE0587B79_n = 2;
    int autoE0587B79_i;
    const int autoCF1060C7_n = 4;
    int autoCF1060C7_i;
    const int autoF5950D0F_n = 3;
    int autoF5950D0F_i;
    const int auto5D313413_n = 1;
    int auto5D313413_i;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AIToggleBulliesInRegion(gv_pLAYER_08_NERAZIM, RegionFromId(12), true);
    AIToggleBulliesInRegion(gv_pLAYER_04_INFESTED_BULLIES, RegionFromId(12), false);
    gf_SetUpWarpPrism(PointFromId(1454), PointFromId(1477), gv_pLAYER_08_NERAZIM);
    Wait(2.0, c_timeAI);
    gf_SetUpWarpPrism(PointFromId(1454), PointFromId(1478), gv_pLAYER_08_NERAZIM);
    while (!((PowerLevel(gv_pLAYER_08_NERAZIM, PointFromId(1477), "PowerSource") > 0) && (PowerLevel(gv_pLAYER_08_NERAZIM, PointFromId(1478), "PowerSource") > 0))) {
        Wait(1.0, c_timeGame);
    }
    for (auto3D4E3E89_i = 1; auto3D4E3E89_i <= auto3D4E3E89_n; auto3D4E3E89_i += 1) {
        UnitIssueOrder(gv_warpInZoneSuperGateP08, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), RegionRandomPoint(RegionFromId(12))), c_orderQueueReplace);
        Wait(0.25, c_timeAI);
    }
    for (auto0D5836C1_i = 1; auto0D5836C1_i <= auto0D5836C1_n; auto0D5836C1_i += 1) {
        UnitIssueOrder(gv_warpInZoneSuperGateP08, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), RegionRandomPoint(RegionFromId(12))), c_orderQueueReplace);
        Wait(0.25, c_timeAI);
    }
    for (auto358D9F45_i = 1; auto358D9F45_i <= auto358D9F45_n; auto358D9F45_i += 1) {
        UnitIssueOrder(gv_warpInZoneSuperGateP08, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 3), RegionRandomPoint(RegionFromId(12))), c_orderQueueReplace);
        Wait(0.25, c_timeAI);
    }
    for (autoE0587B79_i = 1; autoE0587B79_i <= autoE0587B79_n; autoE0587B79_i += 1) {
        UnitIssueOrder(gv_warpInZoneSuperGateP08, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 17), RegionRandomPoint(RegionFromId(12))), c_orderQueueReplace);
        Wait(0.25, c_timeAI);
    }
    Wait(10.0, c_timeAI);
    AIAttackWaveSetGatherPoint(gv_pLAYER_08_NERAZIM, PlayerStartLocation(gv_pLAYER_08_NERAZIM));
    AIAttackWaveSetTargetPlayer(gv_pLAYER_08_NERAZIM, gv_enemyPlayerGroup_AmonForces);
    AIAttackWaveAddWaypoint(gv_pLAYER_08_NERAZIM, PointFromId(720), false);
    AIAttackWaveAddUnits4(8, 8, 8, 8, "ZealotShakuras");
    AIAttackWaveAddUnits4(6, 6, 6, 6, "StalkerShakuras");
    AIAttackWaveAddUnits4(2, 2, 2, 2, "DarkArchon");
    AIAttackWaveSend(gv_pLAYER_08_NERAZIM, 0, true);
    Wait(170.0, c_timeAI);
    while ((libVCMI_gf_GameIsOver() == false)) {
        for (autoCF1060C7_i = 1; autoCF1060C7_i <= autoCF1060C7_n; autoCF1060C7_i += 1) {
            UnitIssueOrder(gv_warpInZoneSuperGateP08, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), RegionRandomPoint(RegionFromId(12))), c_orderQueueReplace);
            Wait(0.25, c_timeAI);
        }
        for (autoF5950D0F_i = 1; autoF5950D0F_i <= autoF5950D0F_n; autoF5950D0F_i += 1) {
            UnitIssueOrder(gv_warpInZoneSuperGateP08, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), RegionRandomPoint(RegionFromId(12))), c_orderQueueReplace);
            Wait(0.25, c_timeAI);
        }
        for (auto5D313413_i = 1; auto5D313413_i <= auto5D313413_n; auto5D313413_i += 1) {
            UnitIssueOrder(gv_warpInZoneSuperGateP08, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 3), RegionRandomPoint(RegionFromId(12))), c_orderQueueReplace);
            Wait(0.25, c_timeAI);
        }
        Wait(10.0, c_timeAI);
        AIAttackWaveSetGatherPoint(gv_pLAYER_08_NERAZIM, PlayerStartLocation(gv_pLAYER_08_NERAZIM));
        AIAttackWaveSetTargetPlayer(gv_pLAYER_08_NERAZIM, gv_enemyPlayerGroup_AmonForces);
        AIAttackWaveAddWaypoint(gv_pLAYER_08_NERAZIM, PointFromId(720), false);
        AIAttackWaveAddUnits4(4, 4, 4, 4, "ZealotShakuras");
        AIAttackWaveAddUnits4(3, 3, 3, 3, "StalkerShakuras");
        AIAttackWaveAddUnits4(1, 1, 1, 1, "DarkArchon");
        AIAttackWaveSend(gv_pLAYER_08_NERAZIM, 0, true);
        Wait(170.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EstablishWarpInZone01_Init () {
    gt_EstablishWarpInZone01 = TriggerCreate("gt_EstablishWarpInZone01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Establish Warp In Zone 02
//--------------------------------------------------------------------------------------------------
bool gt_EstablishWarpInZone02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoAFD41552_n = 10;
    int autoAFD41552_i;
    const int autoF2D5CE8C_n = 8;
    int autoF2D5CE8C_i;
    const int auto7266624F_n = 3;
    int auto7266624F_i;
    const int autoD06D88F8_n = 2;
    int autoD06D88F8_i;
    const int auto1B941E86_n = 4;
    int auto1B941E86_i;
    const int autoAA1E14AD_n = 3;
    int autoAA1E14AD_i;
    const int auto1FA347FA_n = 2;
    int auto1FA347FA_i;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AIToggleBulliesInRegion(gv_pLAYER_09_TALDARIM, RegionFromId(42), true);
    AIToggleBulliesInRegion(gv_pLAYER_02_PROTOSS_BULLIES, RegionFromId(42), false);
    gf_SetUpWarpPrism(PointFromId(1455), PointFromId(1479), gv_pLAYER_09_TALDARIM);
    Wait(2.0, c_timeAI);
    gf_SetUpWarpPrism(PointFromId(1455), PointFromId(1480), gv_pLAYER_09_TALDARIM);
    while (!((PowerLevel(gv_pLAYER_09_TALDARIM, PointFromId(1479), "PowerSource") > 0) && (PowerLevel(gv_pLAYER_09_TALDARIM, PointFromId(1480), "PowerSource") > 0))) {
        Wait(1.0, c_timeGame);
    }
    for (autoAFD41552_i = 1; autoAFD41552_i <= autoAFD41552_n; autoAFD41552_i += 1) {
        UnitIssueOrder(gv_warpInZoneSuperGateP09, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 4), RegionRandomPoint(RegionFromId(42))), c_orderQueueReplace);
        Wait(0.25, c_timeAI);
    }
    for (autoF2D5CE8C_i = 1; autoF2D5CE8C_i <= autoF2D5CE8C_n; autoF2D5CE8C_i += 1) {
        UnitIssueOrder(gv_warpInZoneSuperGateP09, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 3), RegionRandomPoint(RegionFromId(42))), c_orderQueueReplace);
        Wait(0.25, c_timeAI);
    }
    for (auto7266624F_i = 1; auto7266624F_i <= auto7266624F_n; auto7266624F_i += 1) {
        UnitIssueOrder(gv_warpInZoneSuperGateP09, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 2), RegionRandomPoint(RegionFromId(42))), c_orderQueueReplace);
        Wait(0.25, c_timeAI);
    }
    for (autoD06D88F8_i = 1; autoD06D88F8_i <= autoD06D88F8_n; autoD06D88F8_i += 1) {
        UnitIssueOrder(gv_warpInZoneSuperGateP09, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 17), RegionRandomPoint(RegionFromId(42))), c_orderQueueReplace);
        Wait(0.25, c_timeAI);
    }
    Wait(10.0, c_timeAI);
    AIAttackWaveSetGatherPoint(gv_pLAYER_09_TALDARIM, PlayerStartLocation(gv_pLAYER_09_TALDARIM));
    AIAttackWaveSetTargetPlayer(gv_pLAYER_09_TALDARIM, gv_enemyPlayerGroup_AmonForces);
    AIAttackWaveAddUnits4(8, 8, 8, 8, "DarkTemplarTaldarim");
    AIAttackWaveAddUnits4(6, 6, 6, 6, "HighTemplarTaldarim");
    AIAttackWaveAddUnits4(2, 2, 2, 2, "ImmortalTaldarim");
    AIAttackWaveSend(gv_pLAYER_09_TALDARIM, 0, true);
    Wait(170.0, c_timeAI);
    while ((libVCMI_gf_GameIsOver() == false)) {
        for (auto1B941E86_i = 1; auto1B941E86_i <= auto1B941E86_n; auto1B941E86_i += 1) {
            UnitIssueOrder(gv_warpInZoneSuperGateP09, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 4), RegionRandomPoint(RegionFromId(42))), c_orderQueueReplace);
            Wait(0.25, c_timeAI);
        }
        for (autoAA1E14AD_i = 1; autoAA1E14AD_i <= autoAA1E14AD_n; autoAA1E14AD_i += 1) {
            UnitIssueOrder(gv_warpInZoneSuperGateP09, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 3), RegionRandomPoint(RegionFromId(42))), c_orderQueueReplace);
            Wait(0.25, c_timeAI);
        }
        for (auto1FA347FA_i = 1; auto1FA347FA_i <= auto1FA347FA_n; auto1FA347FA_i += 1) {
            UnitIssueOrder(gv_warpInZoneSuperGateP09, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 2), RegionRandomPoint(RegionFromId(42))), c_orderQueueReplace);
            Wait(0.25, c_timeAI);
        }
        Wait(10.0, c_timeAI);
        AIAttackWaveSetGatherPoint(gv_pLAYER_09_TALDARIM, PlayerStartLocation(gv_pLAYER_09_TALDARIM));
        AIAttackWaveSetTargetPlayer(gv_pLAYER_09_TALDARIM, gv_enemyPlayerGroup_AmonForces);
        AIAttackWaveAddUnits4(4, 4, 4, 4, "DarkTemplarTaldarim");
        AIAttackWaveAddUnits4(3, 3, 3, 3, "HighTemplarTaldarim");
        AIAttackWaveAddUnits4(2, 2, 2, 2, "ImmortalTaldarim");
        AIAttackWaveSend(gv_pLAYER_09_TALDARIM, 0, true);
        Wait(170.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EstablishWarpInZone02_Init () {
    gt_EstablishWarpInZone02 = TriggerCreate("gt_EstablishWarpInZone02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Establish Warp In Zone 03
//--------------------------------------------------------------------------------------------------
bool gt_EstablishWarpInZone03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto0328B9D8_n = 10;
    int auto0328B9D8_i;
    const int autoF7E6A1FE_n = 8;
    int autoF7E6A1FE_i;
    const int auto909234A8_n = 1;
    int auto909234A8_i;
    const int auto48DF372E_n = 2;
    int auto48DF372E_i;
    const int auto952A589B_n = 3;
    int auto952A589B_i;
    const int auto79DFB534_n = 3;
    int auto79DFB534_i;
    const int autoD30D147B_n = 1;
    int autoD30D147B_i;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AIToggleBulliesInRegion(gv_pLAYER_10_PURIFIER, RegionFromId(41), true);
    AIToggleBulliesInRegion(gv_pLAYER_03_ZERG_BULLIES, RegionFromId(41), false);
    gf_SetUpWarpPrism(PointFromId(1456), PointFromId(1481), gv_pLAYER_10_PURIFIER);
    Wait(2.0, c_timeAI);
    gf_SetUpWarpPrism(PointFromId(1456), PointFromId(1482), gv_pLAYER_10_PURIFIER);
    while (!((PowerLevel(gv_pLAYER_10_PURIFIER, PointFromId(1481), "PowerSource") > 0) && (PowerLevel(gv_pLAYER_10_PURIFIER, PointFromId(1482), "PowerSource") > 0))) {
        Wait(1.0, c_timeGame);
    }
    for (auto0328B9D8_i = 1; auto0328B9D8_i <= auto0328B9D8_n; auto0328B9D8_i += 1) {
        UnitIssueOrder(gv_warpInZoneSuperGateP10, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), RegionRandomPoint(RegionFromId(41))), c_orderQueueReplace);
        Wait(0.25, c_timeAI);
    }
    for (autoF7E6A1FE_i = 1; autoF7E6A1FE_i <= autoF7E6A1FE_n; autoF7E6A1FE_i += 1) {
        UnitIssueOrder(gv_warpInZoneSuperGateP10, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 5), RegionRandomPoint(RegionFromId(41))), c_orderQueueReplace);
        Wait(0.25, c_timeAI);
    }
    for (auto909234A8_i = 1; auto909234A8_i <= auto909234A8_n; auto909234A8_i += 1) {
        UnitIssueOrder(gv_warpInZoneSuperGateP10, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 15), RegionRandomPoint(RegionFromId(41))), c_orderQueueReplace);
        Wait(0.25, c_timeAI);
    }
    for (auto48DF372E_i = 1; auto48DF372E_i <= auto48DF372E_n; auto48DF372E_i += 1) {
        UnitIssueOrder(gv_warpInZoneSuperGateP10, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 17), RegionRandomPoint(RegionFromId(41))), c_orderQueueReplace);
        Wait(0.25, c_timeAI);
    }
    Wait(10.0, c_timeAI);
    AIAttackWaveSetGatherPoint(gv_pLAYER_10_PURIFIER, PlayerStartLocation(gv_pLAYER_10_PURIFIER));
    AIAttackWaveSetTargetPlayer(gv_pLAYER_10_PURIFIER, gv_enemyPlayerGroup_AmonForces);
    AIAttackWaveAddWaypoint(gv_pLAYER_08_NERAZIM, PointFromId(721), false);
    AIAttackWaveAddUnits4(8, 8, 8, 8, "ZealotPurifier");
    AIAttackWaveAddUnits4(6, 6, 6, 6, "SentryPurifier");
    AIAttackWaveAddUnits4(1, 1, 1, 1, "ColossusPurifier");
    AIAttackWaveSend(gv_pLAYER_10_PURIFIER, 0, true);
    Wait(170.0, c_timeAI);
    while ((libVCMI_gf_GameIsOver() == false)) {
        for (auto952A589B_i = 1; auto952A589B_i <= auto952A589B_n; auto952A589B_i += 1) {
            UnitIssueOrder(gv_warpInZoneSuperGateP10, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), RegionRandomPoint(RegionFromId(41))), c_orderQueueReplace);
            Wait(0.25, c_timeAI);
        }
        for (auto79DFB534_i = 1; auto79DFB534_i <= auto79DFB534_n; auto79DFB534_i += 1) {
            UnitIssueOrder(gv_warpInZoneSuperGateP10, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 5), RegionRandomPoint(RegionFromId(41))), c_orderQueueReplace);
            Wait(0.25, c_timeAI);
        }
        for (autoD30D147B_i = 1; autoD30D147B_i <= autoD30D147B_n; autoD30D147B_i += 1) {
            UnitIssueOrder(gv_warpInZoneSuperGateP10, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 15), RegionRandomPoint(RegionFromId(41))), c_orderQueueReplace);
            Wait(0.25, c_timeAI);
        }
        Wait(10.0, c_timeAI);
        AIAttackWaveSetGatherPoint(gv_pLAYER_10_PURIFIER, PlayerStartLocation(gv_pLAYER_10_PURIFIER));
        AIAttackWaveSetTargetPlayer(gv_pLAYER_10_PURIFIER, gv_enemyPlayerGroup_AmonForces);
        AIAttackWaveAddWaypoint(gv_pLAYER_10_PURIFIER, PointFromId(721), false);
        AIAttackWaveAddUnits4(3, 3, 3, 3, "ZealotPurifier");
        AIAttackWaveAddUnits4(3, 3, 3, 3, "SentryPurifier");
        AIAttackWaveAddUnits4(1, 1, 1, 1, "ColossusPurifier");
        AIAttackWaveSend(gv_pLAYER_10_PURIFIER, 0, true);
        Wait(170.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EstablishWarpInZone03_Init () {
    gt_EstablishWarpInZone03 = TriggerCreate("gt_EstablishWarpInZone03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Warp In Zone 01 Attack Wave Initial Battlecry Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionWarpInZone01AttackWaveInitialBattlecryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/2D150BE1"), null, UnitGroupCenterOfGroup(AIWaveGetUnits(EventPlayerWave())));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGroupCenterOfGroup(AIWaveGetUnits(EventPlayerWave())), 4.0, Color(100.00, 100.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(UnitGroupUnit(UnitGroupFilter("ZealotShakuras", c_playerAny, AIWaveGetUnits(EventPlayerWave()), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1), "pMission_Aiur05|Line00170", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    TriggerEnable(gt_TransmissionWarpInZone01AttackWaveRepeatBattlecryQ, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionWarpInZone01AttackWaveInitialBattlecryQ_Init () {
    gt_TransmissionWarpInZone01AttackWaveInitialBattlecryQ = TriggerCreate("gt_TransmissionWarpInZone01AttackWaveInitialBattlecryQ_Func");
    TriggerAddEventPlayerAIWave(gt_TransmissionWarpInZone01AttackWaveInitialBattlecryQ, gv_pLAYER_08_NERAZIM);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Warp In Zone 02 Attack Wave Initial Battlecry Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionWarpInZone02AttackWaveInitialBattlecryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/4570DAC0"), null, UnitGroupCenterOfGroup(AIWaveGetUnits(EventPlayerWave())));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGroupCenterOfGroup(AIWaveGetUnits(EventPlayerWave())), 4.0, Color(100.00, 100.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(UnitGroupUnit(UnitGroupFilter("HighTemplarTaldarim", c_playerAny, AIWaveGetUnits(EventPlayerWave()), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1), "pMission_Aiur05|Line00171", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    TriggerEnable(gt_TransmissionWarpInZone02AttackWaveRepeatBattlecryQ, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionWarpInZone02AttackWaveInitialBattlecryQ_Init () {
    gt_TransmissionWarpInZone02AttackWaveInitialBattlecryQ = TriggerCreate("gt_TransmissionWarpInZone02AttackWaveInitialBattlecryQ_Func");
    TriggerAddEventPlayerAIWave(gt_TransmissionWarpInZone02AttackWaveInitialBattlecryQ, gv_pLAYER_09_TALDARIM);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Warp In Zone 03 Attack Wave Initial Battlecry Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionWarpInZone03AttackWaveInitialBattlecryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/DADAF294"), null, UnitGroupCenterOfGroup(AIWaveGetUnits(EventPlayerWave())));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGroupCenterOfGroup(AIWaveGetUnits(EventPlayerWave())), 4.0, Color(100.00, 100.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(UnitGroupUnit(UnitGroupFilter("ZealotPurifier", c_playerAny, AIWaveGetUnits(EventPlayerWave()), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1), "pMission_Aiur05|Line00172", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    TriggerEnable(gt_TransmissionWarpInZone03AttackWaveRepeatBattlecryQ, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionWarpInZone03AttackWaveInitialBattlecryQ_Init () {
    gt_TransmissionWarpInZone03AttackWaveInitialBattlecryQ = TriggerCreate("gt_TransmissionWarpInZone03AttackWaveInitialBattlecryQ_Func");
    TriggerAddEventPlayerAIWave(gt_TransmissionWarpInZone03AttackWaveInitialBattlecryQ, gv_pLAYER_10_PURIFIER);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Warp In Zone 01 Attack Wave Repeat Battlecry Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionWarpInZone01AttackWaveRepeatBattlecryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto71043BD4_val;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/4007E1BE"), null, UnitGroupCenterOfGroup(AIWaveGetUnits(EventPlayerWave())));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGroupCenterOfGroup(AIWaveGetUnits(EventPlayerWave())), 4.0, Color(100.00, 100.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    if (gv_warpInZoneBattlecryCount01 >= 4) {
        gv_warpInZoneBattlecryCount01 = 1;
    }
    else {
        gv_warpInZoneBattlecryCount01 = gv_warpInZoneBattlecryCount01 + 1;
    }
    auto71043BD4_val = gv_warpInZoneBattlecryCount01;
    if (auto71043BD4_val == 1) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00173", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto71043BD4_val == 2) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00174", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto71043BD4_val == 3) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00175", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto71043BD4_val == 4) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00176", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionWarpInZone01AttackWaveRepeatBattlecryQ_Init () {
    gt_TransmissionWarpInZone01AttackWaveRepeatBattlecryQ = TriggerCreate("gt_TransmissionWarpInZone01AttackWaveRepeatBattlecryQ_Func");
    TriggerEnable(gt_TransmissionWarpInZone01AttackWaveRepeatBattlecryQ, false);
    TriggerAddEventPlayerAIWave(gt_TransmissionWarpInZone01AttackWaveRepeatBattlecryQ, gv_pLAYER_08_NERAZIM);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Warp In Zone 02 Attack Wave Repeat Battlecry Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionWarpInZone02AttackWaveRepeatBattlecryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoD5C97F7B_val;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/B2986A07"), null, UnitGroupCenterOfGroup(AIWaveGetUnits(EventPlayerWave())));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGroupCenterOfGroup(AIWaveGetUnits(EventPlayerWave())), 4.0, Color(100.00, 100.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    if (gv_warpInZoneBattlecryCount02 >= 4) {
        gv_warpInZoneBattlecryCount02 = 1;
    }
    else {
        gv_warpInZoneBattlecryCount02 = gv_warpInZoneBattlecryCount02 + 1;
    }
    autoD5C97F7B_val = gv_warpInZoneBattlecryCount02;
    if (autoD5C97F7B_val == 1) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00177", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoD5C97F7B_val == 2) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00178", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoD5C97F7B_val == 3) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00179", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoD5C97F7B_val == 4) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00180", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionWarpInZone02AttackWaveRepeatBattlecryQ_Init () {
    gt_TransmissionWarpInZone02AttackWaveRepeatBattlecryQ = TriggerCreate("gt_TransmissionWarpInZone02AttackWaveRepeatBattlecryQ_Func");
    TriggerEnable(gt_TransmissionWarpInZone02AttackWaveRepeatBattlecryQ, false);
    TriggerAddEventPlayerAIWave(gt_TransmissionWarpInZone02AttackWaveRepeatBattlecryQ, gv_pLAYER_09_TALDARIM);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Warp In Zone 03 Attack Wave Repeat Battlecry Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionWarpInZone03AttackWaveRepeatBattlecryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto74C1DB82_val;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/609E30DB"), null, UnitGroupCenterOfGroup(AIWaveGetUnits(EventPlayerWave())));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGroupCenterOfGroup(AIWaveGetUnits(EventPlayerWave())), 4.0, Color(100.00, 100.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    if (gv_warpInZoneBattlecryCount03 >= 4) {
        gv_warpInZoneBattlecryCount03 = 1;
    }
    else {
        gv_warpInZoneBattlecryCount03 = gv_warpInZoneBattlecryCount03 + 1;
    }
    auto74C1DB82_val = gv_warpInZoneBattlecryCount03;
    if (auto74C1DB82_val == 1) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00181", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto74C1DB82_val == 2) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00182", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto74C1DB82_val == 3) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00183", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto74C1DB82_val == 4) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00184", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionWarpInZone03AttackWaveRepeatBattlecryQ_Init () {
    gt_TransmissionWarpInZone03AttackWaveRepeatBattlecryQ = TriggerCreate("gt_TransmissionWarpInZone03AttackWaveRepeatBattlecryQ_Func");
    TriggerEnable(gt_TransmissionWarpInZone03AttackWaveRepeatBattlecryQ, false);
    TriggerAddEventPlayerAIWave(gt_TransmissionWarpInZone03AttackWaveRepeatBattlecryQ, gv_pLAYER_10_PURIFIER);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Turn On Rain
//--------------------------------------------------------------------------------------------------
bool gt_TurnOnRain_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_ShowHideDoodadsInRegion(true, RegionEntireMap(), "RainEmitterLarge");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TurnOnRain_Init () {
    gt_TurnOnRain = TriggerCreate("gt_TurnOnRain_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Turn On Lightning Strikes
//--------------------------------------------------------------------------------------------------
bool gt_TurnOnLightningStrikes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_ShowHideDoodadsInRegion(true, RegionEntireMap(), "LightningBolt");
    libNtve_gf_ShowHideDoodadsInRegion(true, RegionEntireMap(), "ThunderLightning");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TurnOnLightningStrikes_Init () {
    gt_TurnOnLightningStrikes = TriggerCreate("gt_TurnOnLightningStrikes_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Drop Gas
//--------------------------------------------------------------------------------------------------
bool gt_DropGas_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, "PalletGas", c_unitCreateIgnorePlacement, 0, UnitGetPosition(EventUnit()), 270.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DropGas_Init () {
    gt_DropGas = TriggerCreate("gt_DropGas_Func");
    TriggerAddEventUnitDied(gt_DropGas, UnitRefFromUnit(UnitFromId(75)));
    TriggerAddEventUnitDied(gt_DropGas, UnitRefFromUnit(UnitFromId(136)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kill Larva
//--------------------------------------------------------------------------------------------------
bool gt_KillLarva_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto51BB64DC_g;
    int auto51BB64DC_u;
    unit auto51BB64DC_var;
    unitgroup autoFF5AE0FE_g;
    int autoFF5AE0FE_u;
    unit autoFF5AE0FE_var;

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "Hatchery") || (UnitGetType(EventUnit()) == "Lair") || (UnitGetType(EventUnit()) == "Hive")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto51BB64DC_g = UnitGroup("Larva", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto51BB64DC_u = UnitGroupCount(auto51BB64DC_g, c_unitCountAll);
    for (;; auto51BB64DC_u -= 1) {
        auto51BB64DC_var = UnitGroupUnitFromEnd(auto51BB64DC_g, auto51BB64DC_u);
        if (auto51BB64DC_var == null) { break; }
        UnitKill(auto51BB64DC_var);
    }
    autoFF5AE0FE_g = UnitGroup("Egg", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFF5AE0FE_u = UnitGroupCount(autoFF5AE0FE_g, c_unitCountAll);
    for (;; autoFF5AE0FE_u -= 1) {
        autoFF5AE0FE_var = UnitGroupUnitFromEnd(autoFF5AE0FE_g, autoFF5AE0FE_u);
        if (autoFF5AE0FE_var == null) { break; }
        UnitKill(autoFF5AE0FE_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KillLarva_Init () {
    gt_KillLarva = TriggerCreate("gt_KillLarva_Func");
    TriggerAddEventUnitDied(gt_KillLarva, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto3201462C_ae = gv_voidShardsCount;
    const int auto3201462C_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    cai_startall();
    libVCMI_gf_EnableVoidCampaignAIBehaviorForAllPlayers();
    cai_runall();
    AINearestTownBullyRebuild(gv_pLAYER_02_PROTOSS_BULLIES, true);
    AINearestTownBullyRebuild(gv_pLAYER_03_ZERG_BULLIES, true);
    AINearestTownBullyRebuild(gv_pLAYER_04_INFESTED_BULLIES, true);
    AINearestTownBullyRebuild(gv_pLAYER_05_VOIDFORCES, true);
    AINearestTownBullyRebuild(gv_pLAYER_06_VOIDFORCES, true);
    AINearestTownBullyRebuild(gv_pLAYER_07_VOIDFORCES, true);
    libNtve_gf_DeclareNextTown(gv_pLAYER_02_PROTOSS_BULLIES, PointFromId(942));
    libNtve_gf_DeclareNextTown(gv_pLAYER_02_PROTOSS_BULLIES, PointFromId(947));
    libNtve_gf_DeclareNextTown(gv_pLAYER_02_PROTOSS_BULLIES, PointFromId(1297));
    libNtve_gf_DeclareNextTown(gv_pLAYER_02_PROTOSS_BULLIES, PointFromId(1298));
    libNtve_gf_DeclareNextTown(gv_pLAYER_02_PROTOSS_BULLIES, PointFromId(1650));
    libNtve_gf_DeclareNextTown(gv_pLAYER_02_PROTOSS_BULLIES, PointFromId(1681));
    libNtve_gf_DeclareNextTown(gv_pLAYER_04_INFESTED_BULLIES, PointFromId(1200));
    libNtve_gf_DeclareNextTown(gv_pLAYER_04_INFESTED_BULLIES, PointFromId(835));
    libNtve_gf_DeclareNextTown(gv_pLAYER_04_INFESTED_BULLIES, PointFromId(1146));
    lv_i = 1;
    for ( ; ( (auto3201462C_ai >= 0 && lv_i <= auto3201462C_ae) || (auto3201462C_ai < 0 && lv_i >= auto3201462C_ae) ) ; lv_i += auto3201462C_ai ) {
        libNtve_gf_DeclareNextTown(UnitGetOwner(gv_voidShards[lv_i]), UnitGetPosition(gv_voidShards[lv_i]));
    }
    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
        TriggerExecute(gt_AIUpgradesNormal, true, false);
    }
    else {
        TriggerExecute(gt_AIUpgradesHard, true, false);
    }
    TriggerExecute(gt_VoidSpawnsReinforcementsController, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrades - Normal
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradesNormal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoD8EA98B4_g;
    int autoD8EA98B4_var;
    playergroup autoA2B0ED5D_g;
    int autoA2B0ED5D_var;
    playergroup auto0C2F7383_g;
    int auto0C2F7383_var;
    playergroup autoBF30972E_g;
    int autoBF30972E_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(720.0, c_timeAI);
    autoD8EA98B4_g = gv_enemyPlayerGroup;
    autoD8EA98B4_var = -1;
    while (true) {
        autoD8EA98B4_var = PlayerGroupNextPlayer(autoD8EA98B4_g, autoD8EA98B4_var);
        if (autoD8EA98B4_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoD8EA98B4_var, "ProtossAirWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(autoD8EA98B4_var, "ProtossGroundWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(autoD8EA98B4_var, "TerranInfantryWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(autoD8EA98B4_var, "TerranVehicleAndShipWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(autoD8EA98B4_var, "ZergFlyerWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(autoD8EA98B4_var, "ZergMeleeWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(autoD8EA98B4_var, "ZergMissileWeaponsLevel1", 1);
    }
    autoA2B0ED5D_g = gv_allyPlayerGroup;
    autoA2B0ED5D_var = -1;
    while (true) {
        autoA2B0ED5D_var = PlayerGroupNextPlayer(autoA2B0ED5D_g, autoA2B0ED5D_var);
        if (autoA2B0ED5D_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoA2B0ED5D_var, "ProtossAirWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(autoA2B0ED5D_var, "ProtossGroundWeaponsLevel1", 1);
    }
    Wait(360.0, c_timeAI);
    auto0C2F7383_g = gv_enemyPlayerGroup;
    auto0C2F7383_var = -1;
    while (true) {
        auto0C2F7383_var = PlayerGroupNextPlayer(auto0C2F7383_g, auto0C2F7383_var);
        if (auto0C2F7383_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto0C2F7383_var, "ProtossAirArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(auto0C2F7383_var, "ProtossGroundArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(auto0C2F7383_var, "ProtossShieldsLevel1", 1);
        TechTreeUpgradeAddLevel(auto0C2F7383_var, "TerranInfantryArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(auto0C2F7383_var, "TerranVehicleAndShipArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(auto0C2F7383_var, "ZergFlyerArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(auto0C2F7383_var, "ZergGroundArmorsLevel1", 1);
    }
    autoBF30972E_g = gv_allyPlayerGroup;
    autoBF30972E_var = -1;
    while (true) {
        autoBF30972E_var = PlayerGroupNextPlayer(autoBF30972E_g, autoBF30972E_var);
        if (autoBF30972E_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoBF30972E_var, "ProtossAirArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(autoBF30972E_var, "ProtossGroundArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(autoBF30972E_var, "ProtossShieldsLevel1", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradesNormal_Init () {
    gt_AIUpgradesNormal = TriggerCreate("gt_AIUpgradesNormal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrades - Hard
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradesHard_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoA46865BE_g;
    int autoA46865BE_var;
    playergroup auto0C0B5FF0_g;
    int auto0C0B5FF0_var;
    playergroup auto75BF55D4_g;
    int auto75BF55D4_var;
    playergroup autoEA4999D9_g;
    int autoEA4999D9_var;
    playergroup auto65854C62_g;
    int auto65854C62_var;
    playergroup autoA14E6F82_g;
    int autoA14E6F82_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(480.0, c_timeAI);
    autoA46865BE_g = gv_enemyPlayerGroup;
    autoA46865BE_var = -1;
    while (true) {
        autoA46865BE_var = PlayerGroupNextPlayer(autoA46865BE_g, autoA46865BE_var);
        if (autoA46865BE_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoA46865BE_var, "ProtossAirWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(autoA46865BE_var, "ProtossGroundWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(autoA46865BE_var, "TerranInfantryWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(autoA46865BE_var, "TerranVehicleAndShipWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(autoA46865BE_var, "ZergFlyerWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(autoA46865BE_var, "ZergMeleeWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(autoA46865BE_var, "ZergMissileWeaponsLevel2", 1);
    }
    auto0C0B5FF0_g = gv_allyPlayerGroup;
    auto0C0B5FF0_var = -1;
    while (true) {
        auto0C0B5FF0_var = PlayerGroupNextPlayer(auto0C0B5FF0_g, auto0C0B5FF0_var);
        if (auto0C0B5FF0_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto0C0B5FF0_var, "ProtossAirWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(auto0C0B5FF0_var, "ProtossGroundWeaponsLevel2", 1);
    }
    Wait(480.0, c_timeAI);
    auto75BF55D4_g = gv_enemyPlayerGroup;
    auto75BF55D4_var = -1;
    while (true) {
        auto75BF55D4_var = PlayerGroupNextPlayer(auto75BF55D4_g, auto75BF55D4_var);
        if (auto75BF55D4_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto75BF55D4_var, "ProtossAirArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(auto75BF55D4_var, "ProtossGroundArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(auto75BF55D4_var, "ProtossShieldsLevel2", 1);
        TechTreeUpgradeAddLevel(auto75BF55D4_var, "TerranInfantryArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(auto75BF55D4_var, "TerranVehicleAndShipArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(auto75BF55D4_var, "ZergFlyerArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(auto75BF55D4_var, "ZergGroundArmorsLevel2", 1);
    }
    autoEA4999D9_g = gv_allyPlayerGroup;
    autoEA4999D9_var = -1;
    while (true) {
        autoEA4999D9_var = PlayerGroupNextPlayer(autoEA4999D9_g, autoEA4999D9_var);
        if (autoEA4999D9_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoEA4999D9_var, "ProtossAirArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(autoEA4999D9_var, "ProtossGroundArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(autoEA4999D9_var, "ProtossShieldsLevel2", 1);
    }
    Wait(480.0, c_timeAI);
    auto65854C62_g = gv_enemyPlayerGroup;
    auto65854C62_var = -1;
    while (true) {
        auto65854C62_var = PlayerGroupNextPlayer(auto65854C62_g, auto65854C62_var);
        if (auto65854C62_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto65854C62_var, "ProtossAirWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(auto65854C62_var, "ProtossGroundWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(auto65854C62_var, "TerranInfantryWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(auto65854C62_var, "TerranVehicleAndShipWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(auto65854C62_var, "ZergFlyerWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(auto65854C62_var, "ZergMeleeWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(auto65854C62_var, "ZergMissileWeaponsLevel3", 1);
    }
    autoA14E6F82_g = gv_allyPlayerGroup;
    autoA14E6F82_var = -1;
    while (true) {
        autoA14E6F82_var = PlayerGroupNextPlayer(autoA14E6F82_g, autoA14E6F82_var);
        if (autoA14E6F82_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoA14E6F82_var, "ProtossAirWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(autoA14E6F82_var, "ProtossGroundWeaponsLevel3", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradesHard_Init () {
    gt_AIUpgradesHard = TriggerCreate("gt_AIUpgradesHard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Spawns Reinforcements Controller
//--------------------------------------------------------------------------------------------------
bool gt_VoidSpawnsReinforcementsController_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(360.0, c_timeAI);
    TriggerExecute(gt_VoidSpawnsReinforcements01, true, false);
    Wait(libLotv_gf_DifficultyValueFixed2(360.0, 360.0, 240.0, 240.0), c_timeAI);
    TriggerExecute(gt_VoidSpawnsReinforcements02, true, false);
    Wait(libLotv_gf_DifficultyValueFixed2(360.0, 360.0, 240.0, 240.0), c_timeAI);
    TriggerExecute(gt_VoidSpawnsReinforcements03, true, false);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        Wait(240.0, c_timeAI);
        TriggerExecute(gt_VoidSpawnsReinforcements04Hard, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidSpawnsReinforcementsController_Init () {
    gt_VoidSpawnsReinforcementsController = TriggerCreate("gt_VoidSpawnsReinforcementsController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Spawns Reinforcements 01
//--------------------------------------------------------------------------------------------------
bool gt_VoidSpawnsReinforcements01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitIsAlive(gv_voidShards[1]) == true)) {
        AIToggleBulliesInRegion(gv_pLAYER_06_VOIDFORCES, RegionFromId(1), true);
    }

    if ((UnitIsAlive(gv_voidShards[2]) == true)) {
        AIToggleBulliesInRegion(gv_pLAYER_07_VOIDFORCES, RegionFromId(6), true);
    }

    if ((UnitIsAlive(gv_voidShards[3]) == true)) {
        AIToggleBulliesInRegion(gv_pLAYER_07_VOIDFORCES, RegionFromId(24), true);
    }

    if ((UnitIsAlive(gv_voidShards[4]) == true)) {
        AIToggleBulliesInRegion(gv_pLAYER_06_VOIDFORCES, RegionFromId(29), true);
    }

    if ((UnitIsAlive(gv_voidShards[5]) == true)) {
        AIToggleBulliesInRegion(gv_pLAYER_05_VOIDFORCES, RegionFromId(33), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidSpawnsReinforcements01_Init () {
    gt_VoidSpawnsReinforcements01 = TriggerCreate("gt_VoidSpawnsReinforcements01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Spawns Reinforcements 02
//--------------------------------------------------------------------------------------------------
bool gt_VoidSpawnsReinforcements02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitIsAlive(gv_voidShards[1]) == true)) {
        AIToggleBulliesInRegion(gv_pLAYER_06_VOIDFORCES, RegionFromId(3), true);
    }

    if ((UnitIsAlive(gv_voidShards[2]) == true)) {
        AIToggleBulliesInRegion(gv_pLAYER_07_VOIDFORCES, RegionFromId(14), true);
    }

    if ((UnitIsAlive(gv_voidShards[3]) == true)) {
        AIToggleBulliesInRegion(gv_pLAYER_07_VOIDFORCES, RegionFromId(25), true);
    }

    if ((UnitIsAlive(gv_voidShards[4]) == true)) {
        AIToggleBulliesInRegion(gv_pLAYER_06_VOIDFORCES, RegionFromId(30), true);
    }

    if ((UnitIsAlive(gv_voidShards[5]) == true)) {
        AIToggleBulliesInRegion(gv_pLAYER_05_VOIDFORCES, RegionFromId(34), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidSpawnsReinforcements02_Init () {
    gt_VoidSpawnsReinforcements02 = TriggerCreate("gt_VoidSpawnsReinforcements02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Spawns Reinforcements 03
//--------------------------------------------------------------------------------------------------
bool gt_VoidSpawnsReinforcements03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitIsAlive(gv_voidShards[1]) == true)) {
        AIToggleBulliesInRegion(gv_pLAYER_06_VOIDFORCES, RegionFromId(4), true);
    }

    if ((UnitIsAlive(gv_voidShards[2]) == true)) {
        AIToggleBulliesInRegion(gv_pLAYER_07_VOIDFORCES, RegionFromId(15), true);
    }

    if ((UnitIsAlive(gv_voidShards[3]) == true)) {
        AIToggleBulliesInRegion(gv_pLAYER_07_VOIDFORCES, RegionFromId(26), true);
    }

    if ((UnitIsAlive(gv_voidShards[4]) == true)) {
        AIToggleBulliesInRegion(gv_pLAYER_06_VOIDFORCES, RegionFromId(31), true);
    }

    if ((UnitIsAlive(gv_voidShards[5]) == true)) {
        AIToggleBulliesInRegion(gv_pLAYER_05_VOIDFORCES, RegionFromId(35), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidSpawnsReinforcements03_Init () {
    gt_VoidSpawnsReinforcements03 = TriggerCreate("gt_VoidSpawnsReinforcements03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Spawns Reinforcements 04 (Hard+)
//--------------------------------------------------------------------------------------------------
bool gt_VoidSpawnsReinforcements04Hard_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitIsAlive(gv_voidShards[1]) == true)) {
        AIToggleBulliesInRegion(gv_pLAYER_06_VOIDFORCES, RegionFromId(5), true);
    }

    if ((UnitIsAlive(gv_voidShards[2]) == true)) {
        AIToggleBulliesInRegion(gv_pLAYER_07_VOIDFORCES, RegionFromId(20), true);
    }

    if ((UnitIsAlive(gv_voidShards[3]) == true)) {
        AIToggleBulliesInRegion(gv_pLAYER_07_VOIDFORCES, RegionFromId(27), true);
    }

    if ((UnitIsAlive(gv_voidShards[4]) == true)) {
        AIToggleBulliesInRegion(gv_pLAYER_06_VOIDFORCES, RegionFromId(32), true);
    }

    if ((UnitIsAlive(gv_voidShards[5]) == true)) {
        AIToggleBulliesInRegion(gv_pLAYER_05_VOIDFORCES, RegionFromId(36), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidSpawnsReinforcements04Hard_Init () {
    gt_VoidSpawnsReinforcements04Hard = TriggerCreate("gt_VoidSpawnsReinforcements04Hard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Gets Ally Mind Control
//--------------------------------------------------------------------------------------------------
bool gt_UnitGetsAllyMindControl_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_08_NERAZIM))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AISetUnitSuicide(EventUnit(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitGetsAllyMindControl_Init () {
    gt_UnitGetsAllyMindControl = TriggerCreate("gt_UnitGetsAllyMindControl_Func");
    TriggerAddEventUnitBehaviorChange(gt_UnitGetsAllyMindControl, null, "DarkArchonMindControl", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - First Attack Wave Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionFirstAttackWaveQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00126", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00130", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionFirstAttackWaveQ_Init () {
    gt_TransmissionFirstAttackWaveQ = TriggerCreate("gt_TransmissionFirstAttackWaveQ_Func");
    TriggerAddEventPlayerAIWave(gt_TransmissionFirstAttackWaveQ, gv_pLAYER_05_VOIDFORCES);
    TriggerAddEventPlayerAIWave(gt_TransmissionFirstAttackWaveQ, gv_pLAYER_06_VOIDFORCES);
    TriggerAddEventPlayerAIWave(gt_TransmissionFirstAttackWaveQ, gv_pLAYER_07_VOIDFORCES);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Send Big Wave
//--------------------------------------------------------------------------------------------------
bool gt_SendBigWave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_voidShardIndex;
    int lv_attacker;
    int lv_attackVector;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_attackVector = ge_PRESETAttackWaveVector_TopRamp;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_bigWavesSent += 1;
    if ((gv_bigWavesSent > 7)) {
        gv_bigWavesSent = 5;
    }

    if ((ModI(gv_bigWavesSent, 2) == 1)) {
        lv_attackVector = ge_PRESETAttackWaveVector_TopRamp;
    }
    else {
        lv_attackVector = ge_PRESETAttackWaveVector_BottomLeftRamp;
    }
    lv_voidShardIndex = gf_GetBigWaveVoidShard();
    lv_attacker = UnitGetOwner(gv_voidShards[lv_voidShardIndex]);
    AIAttackWaveSetTargetPoint(lv_attacker, PointFromId(1521));
    gf_SetGatherAndWaypointsforBigWave(lv_voidShardIndex, lv_attackVector);
    gf_AddUnitsAndSendBigWave(gv_bigWavesSent, lv_attacker);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SendBigWave_Init () {
    gt_SendBigWave = TriggerCreate("gt_SendBigWave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Big Wave Transmission Controller
//--------------------------------------------------------------------------------------------------
bool gt_BigWaveTransmissionController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_unitsOfWave;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitsOfWave = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unitsOfWave = AIWaveGetUnits(EventPlayerWave());
    gv_bigWavesTransmission += 1;
    if ((gv_bigWavesSent > 9)) {
        gv_bigWavesTransmission = 7;
    }

    if ((UnitGroupCount(lv_unitsOfWave, c_unitCountAlive) > 0)) {
        gf_TransmissionBigWaveAmonBarkQ(gv_bigWavesTransmission);
    }

    if ((UnitGroupCount(lv_unitsOfWave, c_unitCountAlive) > 0)) {
        gf_TrackAttackWaveWithPing(lv_unitsOfWave);
    }

    if ((UnitGroupCount(lv_unitsOfWave, c_unitCountAlive) > 0)) {
        gf_TransmissionBigWaveKaraxWarningQ(gv_bigWavesTransmission);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BigWaveTransmissionController_Init () {
    gt_BigWaveTransmissionController = TriggerCreate("gt_BigWaveTransmissionController_Func");
    TriggerAddEventPlayerAIWave(gt_BigWaveTransmissionController, gv_pLAYER_05_VOIDFORCES);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libVCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libVCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/656A4EBF"), libVCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Void Shards Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryVoidShardsDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryVoidShardsDestroyed_Init () {
    gt_VictoryVoidShardsDestroyed = TriggerCreate("gt_VictoryVoidShardsDestroyed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        TimerPause(gv_mastery_SpeedRunTimer, true);
        TriggerExecute(gt_MasteryTimedRun, true, false);
    }

    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveDestroyVoidShardsComplete, true, true);
    TriggerQueueEnter();
    GameSetLighting("AiurTempleJungleAmonHostAlive", 6.0);
    CameraShake(1, "Medium", "Earthquake", 16.0, 0.0, 16.0);
    SoundPlayForPlayer(SoundLink("pAiur02_Cine_Amon_Quake", -1), c_maxPlayers, PlayerGroupAll(), 80.0, 0.0);
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00110", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    libVCMI_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVoiC_gf_CampaignAwardAchievement("PAiur05_1", gv_pLAYER_01_USER);
    VictoryPanelAddTrackedStatistic("UnitsTotalCount");
    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/05EA39B1"), IntToText(gv_victoryStat_UnitsLostToShard));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/D7CC915F"), IntToText(gv_victoryStat_VoidUnitsKilled));
    libVCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    libVCMI_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Stats For Units That Die
//--------------------------------------------------------------------------------------------------
bool gt_VictoryStatsForUnitsThatDie_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetType(libNtve_gf_KillingUnit()) == "VoidShard") || (UnitGetType(libNtve_gf_KillingUnit()) == "VoidTendrilUnstableEnergy")) && (UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER)) {
        gv_victoryStat_UnitsLostToShard += 1;
    }

    if ((libNtve_gf_KillingPlayer() == gv_pLAYER_01_USER) && ((UnitGetOwner(EventUnit()) == gv_pLAYER_05_VOIDFORCES) || (UnitGetOwner(EventUnit()) == gv_pLAYER_06_VOIDFORCES) || (UnitGetOwner(EventUnit()) == gv_pLAYER_07_VOIDFORCES)) && (UnitGetType(EventUnit()) != "VoidShard") && (UnitGetType(EventUnit()) != "VoidRiftUnselectable")) {
        gv_victoryStat_VoidUnitsKilled += 1;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryStatsForUnitsThatDie_Init () {
    gt_VictoryStatsForUnitsThatDie = TriggerCreate("gt_VictoryStatsForUnitsThatDie_Func");
    TriggerAddEventUnitDied(gt_VictoryStatsForUnitsThatDie, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - Shard Assist
//--------------------------------------------------------------------------------------------------
bool gt_AchievementShardAssist_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVoiC_gf_CampaignAwardAchievement("PAiur05_2", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementShardAssist_Init () {
    gt_AchievementShardAssist = TriggerCreate("gt_AchievementShardAssist_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - Shard Combo
//--------------------------------------------------------------------------------------------------
bool gt_AchievementShardCombo_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TimerGetRemaining(gv_achievement_ShardComboTimer) > 0.0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        libVoiC_gf_CampaignAwardAchievement("PAiur05_3", gv_pLAYER_01_USER);
    }
    else {
        TimerStart(gv_achievement_ShardComboTimer, 150.0, false, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementShardCombo_Init () {
    gt_AchievementShardCombo = TriggerCreate("gt_AchievementShardCombo_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mastery - Timed Run
//--------------------------------------------------------------------------------------------------
bool gt_MasteryTimedRun_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((TimerGetRemaining(gv_mastery_SpeedRunTimer) > 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVoiC_gf_CampaignAwardAchievement("Mastery_Aiur05", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MasteryTimedRun_Init () {
    gt_MasteryTimedRun = TriggerCreate("gt_MasteryTimedRun_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - Destroy 2 Void Shards before 9 minutes
//--------------------------------------------------------------------------------------------------
bool gt_AchievementDestroy2VoidShardsbefore9minutes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1))) {
            return false;
        }

        if (!((GameGetMissionTime() <= 540.0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "VoidShard"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_achievement_VoidShardKills += 1;
    if ((gv_achievement_VoidShardKills == 2)) {
        libVoiC_gf_CampaignAwardAchievement("Anniversary_PAiur05", gv_pLAYER_01_USER);
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementDestroy2VoidShardsbefore9minutes_Init () {
    gt_AchievementDestroy2VoidShardsbefore9minutes = TriggerCreate("gt_AchievementDestroy2VoidShardsbefore9minutes_Func");
    TriggerAddEventUnitDied(gt_AchievementDestroy2VoidShardsbefore9minutes, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Ready Q
//--------------------------------------------------------------------------------------------------
bool gt_TipReadyQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVCMI_gf_DisplayMissionTip();
    Wait(libVCMI_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipReadyQ_Init () {
    gt_TipReadyQ = TriggerCreate("gt_TipReadyQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Destroy Void Shards Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyVoidShardsCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateObjectiveCampaign("PAiur05Primary01");
    libVCMI_gf_SetMissionObjectiveProgress("PAiur05Primary01", gf_NumberofDestroyedVoidShards());
    gv_objectiveDestroyVoidShards = ObjectiveLastCreated();
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyVoidShardsCreate_Init () {
    gt_ObjectiveDestroyVoidShardsCreate = TriggerCreate("gt_ObjectiveDestroyVoidShardsCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Destroy Void Shards Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyVoidShardsComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveDestroyVoidShardsCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PAiur05Primary01", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyVoidShardsComplete_Init () {
    gt_ObjectiveDestroyVoidShardsComplete = TriggerCreate("gt_ObjectiveDestroyVoidShardsComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Destroy Void Shards Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyVoidShardsUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveDestroyVoidShardsCreate, true, false);
    libVCMI_gf_SetMissionObjectiveProgress("PAiur05Primary01", gf_NumberofDestroyedVoidShards());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyVoidShardsUpdate_Init () {
    gt_ObjectiveDestroyVoidShardsUpdate = TriggerCreate("gt_ObjectiveDestroyVoidShardsUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Destroy Void Shards Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyVoidShardsFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveDestroyVoidShardsCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PAiur05Primary01", libVoiC_ge_MissionObjectiveState_Failed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyVoidShardsFailed_Init () {
    gt_ObjectiveDestroyVoidShardsFailed = TriggerCreate("gt_ObjectiveDestroyVoidShardsFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Clear Warp In Zones Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveClearWarpInZonesCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    libVCMI_gf_CreateObjectiveCampaign("PAiur05Bonus01");
    libVCMI_gf_SetMissionObjectiveProgress("PAiur05Bonus01", gv_objectiveClearWarpInZonesCount);
    gv_objectiveRescueStalkers = ObjectiveLastCreated();
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveClearWarpInZonesCreate_Init () {
    gt_ObjectiveClearWarpInZonesCreate = TriggerCreate("gt_ObjectiveClearWarpInZonesCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Clear Warp In Zones Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveClearWarpInZonesComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveClearWarpInZonesCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PAiur05Bonus01", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveClearWarpInZonesComplete_Init () {
    gt_ObjectiveClearWarpInZonesComplete = TriggerCreate("gt_ObjectiveClearWarpInZonesComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Clear Warp In Zones Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveClearWarpInZonesUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveClearWarpInZonesCreate, true, false);
    libVCMI_gf_SetMissionObjectiveProgress("PAiur05Bonus01", gv_objectiveClearWarpInZonesCount);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveClearWarpInZonesUpdate_Init () {
    gt_ObjectiveClearWarpInZonesUpdate = TriggerCreate("gt_ObjectiveClearWarpInZonesUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Clear Warp In Zones Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveClearWarpInZonesFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveClearWarpInZonesCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PAiur05Bonus01", libVoiC_ge_MissionObjectiveState_Failed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveClearWarpInZonesFailed_Init () {
    gt_ObjectiveClearWarpInZonesFailed = TriggerCreate("gt_ObjectiveClearWarpInZonesFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_beamCaster;

    // Automatic Variable Declarations
    unitgroup auto730203C2_g;
    int auto730203C2_u;
    unit auto730203C2_var;
    unitgroup auto98BF334F_g;
    int auto98BF334F_u;
    unit auto98BF334F_var;
    playergroup autoFB4D4A28_g;
    int autoFB4D4A28_var;
    unitgroup autoA1A1640C_g;
    int autoA1A1640C_u;
    unit autoA1A1640C_var;
    unitgroup autoAB4FB3B9_g;
    int autoAB4FB3B9_u;
    unit autoAB4FB3B9_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, c_transitionDurationImmediate, true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    auto730203C2_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto730203C2_u = UnitGroupCount(auto730203C2_g, c_unitCountAll);
    for (;; auto730203C2_u -= 1) {
        auto730203C2_var = UnitGroupUnitFromEnd(auto730203C2_g, auto730203C2_u);
        if (auto730203C2_var == null) { break; }
        if ((libNtve_gf_UnitIsPaused(auto730203C2_var) == false) && (UnitGetType(auto730203C2_var) != "BeamCaster")) {
            UnitGroupAdd(gv_cinematicPausedUnits, auto730203C2_var);
            libNtve_gf_PauseUnit(auto730203C2_var, true);
        }

    }
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    auto98BF334F_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto98BF334F_u = UnitGroupCount(auto98BF334F_g, c_unitCountAll);
    for (;; auto98BF334F_u -= 1) {
        auto98BF334F_var = UnitGroupUnitFromEnd(auto98BF334F_g, auto98BF334F_u);
        if (auto98BF334F_var == null) { break; }
        if ((libNtve_gf_UnitIsHidden(auto98BF334F_var) == false) && (UnitGetType(auto98BF334F_var) != "BeamCaster")) {
            UnitGroupAdd(gv_cinematicHiddenUnits, auto98BF334F_var);
            libNtve_gf_ShowHideUnit(auto98BF334F_var, false);
        }

    }
    gv_cinematicTempUnits = UnitGroupEmpty();
    autoFB4D4A28_g = gv_enemyPlayerGroup;
    autoFB4D4A28_var = -1;
    while (true) {
        autoFB4D4A28_var = PlayerGroupNextPlayer(autoFB4D4A28_g, autoFB4D4A28_var);
        if (autoFB4D4A28_var < 0) { break; }
        CatalogFieldValueSet(c_gameCatalogBehavior, "ConsumeSearchTimedKill", "Duration", autoFB4D4A28_var, "6");
    }
    libNtve_gf_ShowHideUnit(gv_amonUnit, true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "VoidShard", c_unitCreateIgnorePlacement, gv_pLAYER_05_VOIDFORCES, UnitGetPosition(UnitFromId(19)));
    gv_cinematicVoidShard = UnitLastCreated();
    UnitBehaviorAdd(gv_cinematicVoidShard, "ConsumeSearchSmall", gv_cinematicVoidShard, 1);
    libNtve_gf_ChangeUnitDamage(gv_cinematicVoidShard, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    autoA1A1640C_g = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(17), UnitFilter((1 << c_targetFilterStructure), (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoA1A1640C_u = UnitGroupCount(autoA1A1640C_g, c_unitCountAll);
    for (;; autoA1A1640C_u -= 1) {
        autoA1A1640C_var = UnitGroupUnitFromEnd(autoA1A1640C_g, autoA1A1640C_u);
        if (autoA1A1640C_var == null) { break; }
        if ((UnitTypeTestAttribute(UnitGetType(autoA1A1640C_var), c_unitAttributeStructure) == true)) {
            libNtve_gf_ShowHideUnit(autoA1A1640C_var, true);
        }

    }
    autoAB4FB3B9_g = UnitGroup(null, 0, RegionFromId(17), UnitFilter((1 << c_targetFilterStructure), (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoAB4FB3B9_u = UnitGroupCount(autoAB4FB3B9_g, c_unitCountAll);
    for (;; autoAB4FB3B9_u -= 1) {
        autoAB4FB3B9_var = UnitGroupUnitFromEnd(autoAB4FB3B9_g, autoAB4FB3B9_u);
        if (autoAB4FB3B9_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoAB4FB3B9_var, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_beamCaster;
    unit lv_newUnitVariablez;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(270), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(91), 25.0, -1, 10, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PAiur05_Music_Intro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    SoundPlayForPlayer(SoundLink("Event_Aiur05_OpenCine_Amb", -1), c_maxPlayers, PlayerGroupAll(), 70.0, 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00140", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00053", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00141", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    SoundPlayForPlayer(SoundLink("Event_Aiur05_OpenCine_ShardReveal", -1), c_maxPlayers, PlayerGroupAll(), 80.0, 0.0);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_SendActorMessageToGameRegion(RegionFromId(3), "Signal TreeFire");
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1072), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(92), 12.0, -1, 10, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00142", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00143", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 3.0);
    SoundPlayForPlayer(SoundLink("Event_Aiur05_OpenCine_SkyBeam", -1), c_maxPlayers, PlayerGroupAll(), 80.0, 0.0);
    TriggerExecute(gt_IntroVoidRiftEvent, true, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1073), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1727), 12.0, -1, 10, true);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00144", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00145", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto248148A2_g;
    int auto248148A2_u;
    unit auto248148A2_var;
    unitgroup auto15DA5017_g;
    int auto15DA5017_u;
    unit auto15DA5017_var;
    unitgroup autoB5B828F5_g;
    int autoB5B828F5_u;
    unit autoB5B828F5_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_cinematicAIActive = false;
    libVCMI_gf_StopCinematicSounds();
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    auto248148A2_g = gv_cinematicTempUnits;
    auto248148A2_u = UnitGroupCount(auto248148A2_g, c_unitCountAll);
    for (;; auto248148A2_u -= 1) {
        auto248148A2_var = UnitGroupUnitFromEnd(auto248148A2_g, auto248148A2_u);
        if (auto248148A2_var == null) { break; }
        UnitRemove(auto248148A2_var);
    }
    auto15DA5017_g = gv_cinematicHiddenUnits;
    auto15DA5017_u = UnitGroupCount(auto15DA5017_g, c_unitCountAll);
    for (;; auto15DA5017_u -= 1) {
        auto15DA5017_var = UnitGroupUnitFromEnd(auto15DA5017_g, auto15DA5017_u);
        if (auto15DA5017_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto15DA5017_var, true);
    }
    autoB5B828F5_g = gv_cinematicPausedUnits;
    autoB5B828F5_u = UnitGroupCount(autoB5B828F5_g, c_unitCountAll);
    for (;; autoB5B828F5_u -= 1) {
        autoB5B828F5_var = UnitGroupUnitFromEnd(autoB5B828F5_g, autoB5B828F5_u);
        if (autoB5B828F5_var == null) { break; }
        libNtve_gf_PauseUnit(autoB5B828F5_var, false);
    }
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(13), true, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(16), true, false);
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(7), "ZergCarcasses");
    TriggerExecute(gt_StartAI, true, false);
    Wait(0.5, c_timeReal);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libVCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, false);
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PlayerStartLocation(gv_pLAYER_01_USER), lv_fadeDuration);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Void Rift Event
//--------------------------------------------------------------------------------------------------
bool gt_IntroVoidRiftEvent_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_angleIteration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_IntroUnitSpawned, true);
    UnitIssueOrder(gv_cinematicVoidShard, OrderTargetingPoint(AbilityCommand("VoidTendrilBuild", 0), UnitGetPosition(UnitFromId(1267))), c_orderQueueReplace);
    Wait(6.0, c_timeGame);
    gf_IntroVoidRiftEventSpawning("Marine");
    Wait(0.25, c_timeGame);
    gf_IntroVoidRiftEventSpawning("Marine");
    Wait(0.25, c_timeGame);
    gf_IntroVoidRiftEventSpawning("Hydralisk");
    Wait(0.125, c_timeGame);
    gf_IntroVoidRiftEventSpawning("Stalker");
    Wait(0.5, c_timeGame);
    gf_IntroVoidRiftEventSpawning("Zergling");
    Wait(0.25, c_timeGame);
    gf_IntroVoidRiftEventSpawning("Zergling");
    Wait(0.25, c_timeGame);
    gf_IntroVoidRiftEventSpawning("Zergling");
    Wait(0.125, c_timeGame);
    gf_IntroVoidRiftEventSpawning("Marine");
    Wait(0.125, c_timeGame);
    gf_IntroVoidRiftEventSpawning("Marine");
    Wait(0.5, c_timeGame);
    gf_IntroVoidRiftEventSpawning("Hydralisk");
    Wait(0.25, c_timeGame);
    gf_IntroVoidRiftEventSpawning("Stalker");
    Wait(0.5, c_timeGame);
    gf_IntroVoidRiftEventSpawning("Zergling");
    Wait(0.25, c_timeGame);
    gf_IntroVoidRiftEventSpawning("Zergling");
    Wait(0.25, c_timeGame);
    gf_IntroVoidRiftEventSpawning("Zergling");
    Wait(0.25, c_timeGame);
    gf_IntroVoidRiftEventSpawning("Marine");
    Wait(0.125, c_timeGame);
    gf_IntroVoidRiftEventSpawning("Marine");
    Wait(0.25, c_timeGame);
    gf_IntroVoidRiftEventSpawning("Zergling");
    Wait(0.5, c_timeGame);
    gf_IntroVoidRiftEventSpawning("Zergling");
    Wait(0.125, c_timeGame);
    gf_IntroVoidRiftEventSpawning("Zergling");
    Wait(0.25, c_timeGame);
    gf_IntroVoidRiftEventSpawning("Hydralisk");
    Wait(0.5, c_timeGame);
    gf_IntroVoidRiftEventSpawning("Stalker");
    Wait(0.25, c_timeGame);
    TriggerEnable(gt_IntroUnitSpawned, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroVoidRiftEvent_Init () {
    gt_IntroVoidRiftEvent = TriggerCreate("gt_IntroVoidRiftEvent_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Unit Spawned
//--------------------------------------------------------------------------------------------------
bool gt_IntroUnitSpawned_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_cinematicTempUnits, EventUnitProgressUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroUnitSpawned_Init () {
    gt_IntroUnitSpawned = TriggerCreate("gt_IntroUnitSpawned_Func");
    TriggerEnable(gt_IntroUnitSpawned, false);
    TriggerAddEventUnitConstructProgress(gt_IntroUnitSpawned, null, c_unitProgressStageStart);
    TriggerAddEventUnitTrainProgress(gt_IntroUnitSpawned, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoCAC6F6CB_g;
    int autoCAC6F6CB_u;
    unit autoCAC6F6CB_var;
    unitgroup auto18B21A71_g;
    int auto18B21A71_u;
    unit auto18B21A71_var;
    const int auto25450D87_ae = 5;
    int auto25450D87_var;
    unitgroup auto4C2D995B_g;
    int auto4C2D995B_u;
    unit auto4C2D995B_var;
    unitgroup auto76D2FFF9_g;
    int auto76D2FFF9_u;
    unit auto76D2FFF9_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, 1.0, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    libNtve_gf_ShowHideDoodadsInRegion(true, RegionEntireMap(), "RainEmitterLarge");
    libNtve_gf_ShowHideDoodadsInRegion(true, RegionEntireMap(), "LightningBolt");
    libNtve_gf_ShowHideDoodadsInRegion(true, RegionEntireMap(), "ThunderLightning");
    autoCAC6F6CB_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoCAC6F6CB_u = UnitGroupCount(autoCAC6F6CB_g, c_unitCountAll);
    for (;; autoCAC6F6CB_u -= 1) {
        autoCAC6F6CB_var = UnitGroupUnitFromEnd(autoCAC6F6CB_g, autoCAC6F6CB_u);
        if (autoCAC6F6CB_var == null) { break; }
        if ((libNtve_gf_UnitIsPaused(autoCAC6F6CB_var) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, autoCAC6F6CB_var);
            libNtve_gf_PauseUnit(autoCAC6F6CB_var, true);
        }

    }
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    auto18B21A71_g = gv_cinematicHiddenUnits;
    auto18B21A71_u = UnitGroupCount(auto18B21A71_g, c_unitCountAll);
    for (;; auto18B21A71_u -= 1) {
        auto18B21A71_var = UnitGroupUnitFromEnd(auto18B21A71_g, auto18B21A71_u);
        if (auto18B21A71_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto18B21A71_var, false);
    }
    libNtve_gf_ShowHideUnit(gv_amonUnit, true);
    libNtve_gf_PauseUnit(gv_amonUnit, false);
    VisRevealArea(UnitGetOwner(gv_amonUnit), RegionFromId(17), 0.0, false);
    auto25450D87_var = 1;
    for ( ; auto25450D87_var <= auto25450D87_ae; auto25450D87_var += 1 ) {
        libNtve_gf_ShowHideUnit(gv_voidShards[auto25450D87_var], false);
        UnitKill(gv_voidShards[auto25450D87_var]);
    }
    auto4C2D995B_g = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto4C2D995B_u = UnitGroupCount(auto4C2D995B_g, c_unitCountAll);
    for (;; auto4C2D995B_u -= 1) {
        auto4C2D995B_var = UnitGroupUnitFromEnd(auto4C2D995B_g, auto4C2D995B_u);
        if (auto4C2D995B_var == null) { break; }
        UnitCreate(1, UnitGetType(auto4C2D995B_var), 0, gv_pLAYER_01_USER, UnitGetPosition(auto4C2D995B_var), UnitGetFacing(auto4C2D995B_var));
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitGroupAdd(gv_victoryPlayerBase, UnitLastCreated());
    }
    auto76D2FFF9_g = UnitGroup(null, 0, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto76D2FFF9_u = UnitGroupCount(auto76D2FFF9_g, c_unitCountAll);
    for (;; auto76D2FFF9_u -= 1) {
        auto76D2FFF9_var = UnitGroupUnitFromEnd(auto76D2FFF9_g, auto76D2FFF9_u);
        if (auto76D2FFF9_var == null) { break; }
        UnitCreate(1, UnitGetType(auto76D2FFF9_var), 0, gv_pLAYER_01_USER, UnitGetPosition(auto76D2FFF9_var), UnitGetFacing(auto76D2FFF9_var));
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitGroupAdd(gv_victoryPlayerBase, UnitLastCreated());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2605), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(883), 12.0, -1, 10, true);
    SoundPlayForPlayer(SoundLink("Event_Aiur05Victory_AmonAwake", -1), c_maxPlayers, PlayerGroupAll(), 80.0, 0.0);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PAiur05_Music_Outro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    libNtve_gf_SendActorMessageToUnit(gv_amonUnit, "AnimGroupApply Work Stand,Work,Start Stand,Work,End");
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00146", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(5.0, c_timeGame);
    TransmissionWait(TransmissionLastSent(), 0.0);
    UnitIssueOrder(gv_amonUnit, OrderTargetingPoint(AbilityCommand("AmonHostDeathBeam", 0), PointFromId(2619)), c_orderQueueReplace);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(319), 0.0, -1, 10, true);
    Wait(1.0, c_timeGame);
    SoundPlayForPlayer(SoundLink("Event_Aiur05Victory_AmonShoots", -1), c_maxPlayers, PlayerGroupAll(), 90.0, 0.0);
    Wait(2.0, c_timeGame);
    CameraShake(gv_pLAYER_01_USER, "Light", "Earthquake", 0.0, 1.0, 8.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(771), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2661), 5.0, -1, 10, true);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00156", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(2.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1316), 0.5, -1, 10, true);
    CinematicFade(false, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, true, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAmbient, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDoodad, true);
    libVoiC_gf_CampaignPlayCutscene2("Cutscenes\\Cutscene_Aiur05Victory.SC2Cutscene", true, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAmbient, false);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDoodad, false);
    SoundPlayForPlayer(SoundLink("Event_Aiur05Victory_Post_CS", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("Event_Aiur05Victory_Post_CS_Vx", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, false, true);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00133", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1636), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1637), 0.5, -1, 10, true);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2706), 10.0, -1, 10, true);
    Wait(2.5, c_timeGame);
    UnitKill(gv_amonUnit);
    SoundPlayForPlayer(SoundLink("Event_Aiur05Victory_SoABeam1", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_ShowHideDoodadsInRegion(true, RegionEntireMap(), "SOA_Beam");
    ActorSend(ActorFromDoodad(DoodadFromId(2567)), "AnimPlay Birth Birth");
    Wait(1.0, c_timeGame);
    libVCMI_gf_SendActorMessageToDoodadsInRegion("Signal DoodadDeath", "XelNaga_Amon_Temple", RegionFromId(16));
    SoundPlayForPlayer(SoundLink("Event_Aiur05Victory_OrbitalStrikes", -1), c_maxPlayers, PlayerGroupAll(), 80.0, 0.0);
    TriggerExecute(gt_VictoryOrbitalStrikes, true, false);
    Wait(1.0, c_timeGame);
    libNtve_gf_ShowHideDoodadsInRegion(true, RegionEntireMap(), "Cybros_Beam");
    ActorSend(ActorFromDoodad(DoodadFromId(416)), "AnimPlay Birth Birth");
    CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 0.0, 2.0, 5.0);
    ActorSend(ActorFromDoodad(DoodadFromId(416)), "AnimPlay Spell Stand,Work,Start 0 -1.000000 -1.000000 10.000000 AsDuration");
    Wait(2.0, c_timeReal);
    SoundPlayForPlayer(SoundLink("Event_Aiur05Victory_SoABeam2", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    CameraShake(gv_pLAYER_01_USER, "Heavy", "Earthquake", 0.0, 2.0, 5.0);
    Wait(2.0, c_timeGame);
    CameraShake(gv_pLAYER_01_USER, "Massive", "Earthquake", 0.0, 0.0, 3.1);
    CinematicFade(false, 3.0, c_fadeStyleNormal, Color(100.00, 100.00, 100.00), 0.0, false);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00118", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(5.0, c_timeGame);
    TransmissionWait(TransmissionLastSent(), 0.0);
    SoundPlayForPlayer(SoundLink("Event_Aiur05Victory_White_to_Ashes", -1), c_maxPlayers, PlayerGroupAll(), 80.0, 0.0);
    libVCMI_gf_SendActorMessageToDoodadsInRegion("Signal DoodadDead", "XelNaga_Amon_Temple", RegionFromId(16));
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionEntireMap(), "SOA_Beam");
    ActorSend(ActorFromDoodad(DoodadFromId(416)), "SetHeight -8.000000");
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1639), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1128), ((SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Aiur05|Line00121", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Aiur05|Line00120", true), c_soundIndexAny))) + 3.0), -1, 10, true);
    CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 0.0, 4.0, 4.0);
    GameSetLighting("AiurNight", 0.0);
    CinematicFade(true, 2.0, c_fadeStyleNormal, Color(100.00, 100.00, 100.00), 0.0, false);
    Wait(1.5, c_timeGame);
    ActorSend(ActorFromDoodad(DoodadFromId(416)), "AnimPlay Spell Death PlayForever,NonLooping");
    Wait(0.5, c_timeGame);
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionEntireMap(), "Cybros_Beam");
    TransmissionWait(TransmissionLastSent(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00121", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00120", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_StopCinematicSounds();
    libVCMI_gf_CinematicModeCampaign(false, c_transitionDurationImmediate, false);
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Orbital Strikes
//--------------------------------------------------------------------------------------------------
bool gt_VictoryOrbitalStrikes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_orbitalStrikeIndex;
    int lv_pointIndex;

    // Automatic Variable Declarations
    const int auto772AA1D3_n = 6;
    int auto772AA1D3_i;
    const int auto5B7FD2BA_ae = 5;
    const int auto5B7FD2BA_ai = 1;
    const int autoED22E43C_ae = 5;
    const int autoED22E43C_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    for (auto772AA1D3_i = 1; auto772AA1D3_i <= auto772AA1D3_n; auto772AA1D3_i += 1) {
        lv_orbitalStrikeIndex = 1;
        for ( ; ( (auto5B7FD2BA_ai >= 0 && lv_orbitalStrikeIndex <= auto5B7FD2BA_ae) || (auto5B7FD2BA_ai < 0 && lv_orbitalStrikeIndex >= auto5B7FD2BA_ae) ) ; lv_orbitalStrikeIndex += auto5B7FD2BA_ai ) {
            if (lv_pointIndex >= 12) {
                lv_pointIndex = 1;
            }
            else {
                lv_pointIndex = lv_pointIndex + 1;
            }
            if ((lv_pointIndex < 10)) {
                libVCMI_gf_CreateOrbitalStrikeTarget(lv_orbitalStrikeIndex, PointFromName(("Victory - Orbital Strike 0" + IntToString(lv_pointIndex))));
            }
            else {
                libVCMI_gf_CreateOrbitalStrikeTarget(lv_orbitalStrikeIndex, PointFromName(("Victory - Orbital Strike " + IntToString(lv_pointIndex))));
            }
            Wait(0.125, c_timeGame);
        }
        Wait(0.25, c_timeGame);
        lv_orbitalStrikeIndex = 1;
        for ( ; ( (autoED22E43C_ai >= 0 && lv_orbitalStrikeIndex <= autoED22E43C_ae) || (autoED22E43C_ai < 0 && lv_orbitalStrikeIndex >= autoED22E43C_ae) ) ; lv_orbitalStrikeIndex += autoED22E43C_ai ) {
            libVCMI_gf_FireOrbitalStrikeAtTarget(lv_orbitalStrikeIndex);
            Wait(0.125, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryOrbitalStrikes_Init () {
    gt_VictoryOrbitalStrikes = TriggerCreate("gt_VictoryOrbitalStrikes_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Amon Beam Controller
//--------------------------------------------------------------------------------------------------
bool gt_VictoryAmonBeamController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_iter;
    point lv_currentPoint;
    unit lv_deathBeamTargetUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_iter = 2;
    lv_currentPoint = PointFromId(2620);
    lv_deathBeamTargetUnit = EventUnitCreatedUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.5, c_timeGame);
    while ((DistanceBetweenPoints(UnitGetPosition(lv_deathBeamTargetUnit), PointFromId(2660)) > 1) && (UnitIsAlive(lv_deathBeamTargetUnit) == true)) {
        if ((DistanceBetweenPoints(UnitGetPosition(lv_deathBeamTargetUnit), lv_currentPoint) < 1)) {
            lv_iter += 1;
            if ((lv_iter < 10)) {
                lv_currentPoint = PointFromName(("Victory - Amon Beam 0" + IntToString(lv_iter)));
            }
            else {
                lv_currentPoint = PointFromName(("Victory - Amon Beam " + IntToString(lv_iter)));
            }
        }

        UnitIssueOrder(lv_deathBeamTargetUnit, OrderTargetingPoint(AbilityCommand("move", 0), lv_currentPoint), c_orderQueueReplace);
        libNtve_gf_ShowHideDoodadsInRegion(true, RegionCircle(UnitGetPosition(lv_deathBeamTargetUnit), 1.0), "OrbitalMegaDeathBeam_ImpactTrail");
        libVCMI_gf_SendActorMessageToDoodadsInRegion("Signal PurifierBeamImpact", "OrbitalMegaDeathBeam_ImpactTrail", RegionCircle(UnitGetPosition(lv_deathBeamTargetUnit), 1.0));
        Wait(0.125, c_timeGame);
    }
    if ((UnitIsAlive(gv_amonUnit) == true)) {
        UnitIssueOrder(gv_amonUnit, Order(AbilityCommand("AmonHostDeathBeamCancel", 0)), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryAmonBeamController_Init () {
    gt_VictoryAmonBeamController = TriggerCreate("gt_VictoryAmonBeamController_Func");
    TriggerAddEventUnitCreated(gt_VictoryAmonBeamController, UnitRefFromVariable("gv_amonUnit"), "AmonHostDeathBeam", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04MusicSound_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_VoidEntitySpawned_Init();
    gt_AllyStructureWarpsIn_Init();
    gt_AllyUnitWarpsIn_Init();
    gt_StartGameQ_Init();
    gt_VoidShardDifficultySettings_Init();
    gt_VoidShardDies_Init();
    gt_TransmissionVoidShardDestroyedQ_Init();
    gt_VoidShardWarningController_Init();
    gt_TransmissionShardWarning1DestroyedQ_Init();
    gt_TransmissionShardWarning2DestroyedQ_Init();
    gt_TransmissionShardWarning3DestroyedQ_Init();
    gt_TransmissionShardWarning4DestroyedQ_Init();
    gt_UnitEntersBOReveal_Init();
    gt_TransmissionIntroBonusObjectiveQ_Init();
    gt_TransmissionWarpInZoneCleared01Q_Init();
    gt_TransmissionWarpInZoneCleared02Q_Init();
    gt_TransmissionWarpInZoneCleared03Q_Init();
    gt_EstablishWarpInZone01_Init();
    gt_EstablishWarpInZone02_Init();
    gt_EstablishWarpInZone03_Init();
    gt_TransmissionWarpInZone01AttackWaveInitialBattlecryQ_Init();
    gt_TransmissionWarpInZone02AttackWaveInitialBattlecryQ_Init();
    gt_TransmissionWarpInZone03AttackWaveInitialBattlecryQ_Init();
    gt_TransmissionWarpInZone01AttackWaveRepeatBattlecryQ_Init();
    gt_TransmissionWarpInZone02AttackWaveRepeatBattlecryQ_Init();
    gt_TransmissionWarpInZone03AttackWaveRepeatBattlecryQ_Init();
    gt_TurnOnRain_Init();
    gt_TurnOnLightningStrikes_Init();
    gt_DropGas_Init();
    gt_KillLarva_Init();
    gt_StartAI_Init();
    gt_AIUpgradesNormal_Init();
    gt_AIUpgradesHard_Init();
    gt_VoidSpawnsReinforcementsController_Init();
    gt_VoidSpawnsReinforcements01_Init();
    gt_VoidSpawnsReinforcements02_Init();
    gt_VoidSpawnsReinforcements03_Init();
    gt_VoidSpawnsReinforcements04Hard_Init();
    gt_UnitGetsAllyMindControl_Init();
    gt_TransmissionFirstAttackWaveQ_Init();
    gt_SendBigWave_Init();
    gt_BigWaveTransmissionController_Init();
    gt_DefeatBaseDead_Init();
    gt_VictoryVoidShardsDestroyed_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_VictoryStatsForUnitsThatDie_Init();
    gt_AchievementShardAssist_Init();
    gt_AchievementShardCombo_Init();
    gt_MasteryTimedRun_Init();
    gt_AchievementDestroy2VoidShardsbefore9minutes_Init();
    gt_TipReadyQ_Init();
    gt_ObjectiveDestroyVoidShardsCreate_Init();
    gt_ObjectiveDestroyVoidShardsComplete_Init();
    gt_ObjectiveDestroyVoidShardsUpdate_Init();
    gt_ObjectiveDestroyVoidShardsFailed_Init();
    gt_ObjectiveClearWarpInZonesCreate_Init();
    gt_ObjectiveClearWarpInZonesComplete_Init();
    gt_ObjectiveClearWarpInZonesUpdate_Init();
    gt_ObjectiveClearWarpInZonesFailed_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_IntroVoidRiftEvent_Init();
    gt_IntroUnitSpawned_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
    gt_VictoryOrbitalStrikes_Init();
    gt_VictoryAmonBeamController_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}
