//==================================================================================================
// 
// Generated Map Script
// 
// Name:   The Spear of Adun
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"
include "TriggerLibs/VoidLib"
include "TriggerLibs/VoidCampaignLib"
include "TriggerLibs/VoidCampaignMissionLib"
include "TriggerLibs/VoidCampaignUILib"
include "ai041954F3"
include "aiCC0499EA"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libHots_InitLib();
    libLotv_InitLib();
    libVoiC_InitLib();
    libVCMI_InitLib();
    libVCUI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_DOMINION = 2;
const int gv_pLAYER_02_DOMINION2 = 3;
const int gv_pLAYER_02_DOMINION3 = 4;
const int gv_pLAYER_02_DOMINION4 = 5;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
string gv_mapMusicTrack;
playergroup gv_enemyPlayerGroup;
unit gv_chosenGateway;
unit[6] gv_powerCells;
unit[6] gv_constrictions;
int[6] gv_powerCellPings;
int gv_powerCellActivated;
unit gv_warpGate01;
unit gv_warpGate02;
unit gv_warpGate03;
int gv_warpGatesPowered;
bool gv_warpGateTransmissionsEnabled;
bool gv_warpGateIntroForcedNotExplored;
unitgroup gv_enemyEventZerglings;
unitgroup gv_enemyEventHydralisks;
unitgroup gv_enemyEventZealots;
unitgroup gv_enemyEventStalkers;
int gv_nydusDelay;
unitgroup gv_critterGroup;
bool gv_leftZerglingsSent;
unitgroup gv_achievementWarpTourGroup;
bool gv_achievementStructureLost;
int gv_proxyPylonsWarpedIn;
int gv_unitsWarpedInByWarpGates;
fixed gv_shieldsRechargedByShieldBatteries;
int gv_objectiveDestroyZergBase;
int gv_objectiveRescueStalkers;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicPausedUnits;
unitgroup gv_cinematicTempUnits;
bool gv_cinematicCompleted;
actor gv_introReticle;
int gv_introTextTag;
actor gv_introPylonHelper;
int gv_introMinerals;
int gv_introGas;
fixed[8] gv_introResourceCounts;
unitgroup gv_introZerglings;
bool gv_launchComplete;
sound gv_loopSound;

void InitGlobals () {
    int init_i;

    gv_enemyPlayerGroup = PlayerGroupEmpty();
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_powerCellPings[init_i] = c_invalidPingId;
    }
    gv_powerCellActivated = 1;
    gv_enemyEventZerglings = UnitGroupEmpty();
    gv_enemyEventHydralisks = UnitGroupEmpty();
    gv_enemyEventZealots = UnitGroupEmpty();
    gv_enemyEventStalkers = UnitGroupEmpty();
    gv_critterGroup = UnitGroupEmpty();
    gv_achievementWarpTourGroup = UnitGroupEmpty();
    gv_objectiveDestroyZergBase = c_invalidObjectiveId;
    gv_objectiveRescueStalkers = c_invalidObjectiveId;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_introTextTag = c_textTagNone;
    gv_introZerglings = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_CreateInfoText (unit lp_cHOSEN_UNIT);
void gf_SpawnWarpPrism (point lp_spawnPoint, point lp_target);
void gf_SpawnNydusWorm (point lp_spawnPoint);
void gf_UnloadUnitsFromNydusWorm (int lp_count, string lp_unitType, unit lp_nydusWorm, int lp_maxCount);
void gf_VictorySpawnNydusWorm (point lp_cHOSEN_POINT);
void gf_VictoryWarpOutUnit (unit lp_unit);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04MusicSound;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_PlayerUnitCreated;
trigger gt_PlayerUnitTransforms;
trigger gt_PlayerRescuesUnit;
trigger gt_StartGameQ;
trigger gt_DeployPylonQ;
trigger gt_PlayerPressesDeployPylon;
trigger gt_DeployPylonUnitsPowered;
trigger gt_ExplainDefensesQ;
trigger gt_TeachWarpGatesQ;
trigger gt_GatewayConstructed;
trigger gt_WarpGateTransformed;
trigger gt_ActivatePowerCell2;
trigger gt_ActivatePowerCell3;
trigger gt_ActivatePowerCell4;
trigger gt_ActivatePowerCell5;
trigger gt_PowerCellActivatedQ;
trigger gt_PowerCell3SurpriseUltralisk;
trigger gt_PowerCell4Reinforcements1;
trigger gt_PowerCell4Reinforcements2;
trigger gt_IntroduceUnpoweredWarpGatesQ;
trigger gt_WarpGatePowered;
trigger gt_WarpGatePoweredUpQ;
trigger gt_BonusProximityTrigger;
trigger gt_RemindPlayerAboutWarpGatesQ;
trigger gt_EventWave1;
trigger gt_EventWave2;
trigger gt_EventWave3;
trigger gt_WarpInUnitBehaviorEnemies;
trigger gt_KillRain;
trigger gt_ActivateLights;
trigger gt_ZergKillsCritters;
trigger gt_StartAI;
trigger gt_FirstAttackWarningQ;
trigger gt_LeftAttackWarningQ;
trigger gt_AIGiveResources;
trigger gt_AIUpgradesNormal;
trigger gt_AIUpgradesHard;
trigger gt_PlayerNearProtossBaseWarningQ;
trigger gt_PlayerNearZergBaseWarningQ;
trigger gt_AmonTaunt1Q;
trigger gt_AmonTaunt2Q;
trigger gt_AmonTaunt3Q;
trigger gt_DefeatBaseDead;
trigger gt_VictoryActivatePowerCellsCompleted;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_AchievementNoStructuresLost;
trigger gt_AchievementWarpTour;
trigger gt_AchievementSprinterCell;
trigger gt_MasteryAllStructuresDestroyed;
trigger gt_ProxyPylonWarpedIn;
trigger gt_ShieldBatteryHealsUnit;
trigger gt_UnitWarpedInWithWarpGate;
trigger gt_TipReadyQ;
trigger gt_ObjectiveActivatePowerCellsCreate;
trigger gt_ObjectiveActivatePowerCellsUpdate;
trigger gt_ObjectiveActivatePowerCellsComplete;
trigger gt_ObjectivePowerUpWarpGatesCreate;
trigger gt_ObjectivePowerUpWarpGatesUpdate;
trigger gt_ObjectivePowerUpWarpGatesComplete;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_IntroBriefingPowerCell;
trigger gt_IntroZerglings;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;
trigger gt_VictoryZergSpawning;
trigger gt_VictoryLaunchSequence;
trigger gt_VictoryBatsFlyOut;
trigger gt_VictoryBridgeAnimations;
trigger gt_VictoryPlatformAnimations;
trigger gt_VictoryArmAnimations;
trigger gt_VictoryLaunchAnimations;
trigger gt_VictoryWarpOut;
trigger gt_VictoryNydusWorms;
trigger gt_VictoryMusic;

//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;

//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        cai_playerAI[init_i] = null;
    }
}

//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;

    if (cai_playerAI[p] == "ai041954F3") { ai041954F3_start(p); }
    if (cai_playerAI[p] == "aiCC0499EA") { aiCC0499EA_start(p); }
}

//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai041954F3") { ai041954F3_setDefGather(p, val); }
    if (cai_playerAI[p] == "aiCC0499EA") { aiCC0499EA_setDefGather(p, val); }
}

//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai041954F3") { return ai041954F3_getCustomData(p); }
    if (cai_playerAI[p] == "aiCC0499EA") { return aiCC0499EA_getCustomData(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai041954F3") { return ai041954F3_getLastWave(p); }
    if (cai_playerAI[p] == "aiCC0499EA") { return aiCC0499EA_getLastWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai041954F3") { ai041954F3_waves_run(p, target); }
    if (cai_playerAI[p] == "aiCC0499EA") { aiCC0499EA_waves_run(p, target); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai041954F3") { ai041954F3_waves_enable(p, val); }
    if (cai_playerAI[p] == "aiCC0499EA") { aiCC0499EA_waves_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "ai041954F3") { ai041954F3_waves_stop(); }
    if (ai == "aiCC0499EA") { aiCC0499EA_waves_stop(); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai041954F3") { ai041954F3_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "aiCC0499EA") { aiCC0499EA_wave_run(w, p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai041954F3") { ai041954F3_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "aiCC0499EA") { aiCC0499EA_wave_enable(w, p, val); }
}

//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "ai041954F3") { return ai041954F3_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "aiCC0499EA") { return aiCC0499EA_wave_isEnabled(w, p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai041954F3") { return ai041954F3_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "aiCC0499EA") { return aiCC0499EA_wave_createdUnits(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai041954F3") { return ai041954F3_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "aiCC0499EA") { return aiCC0499EA_wave_createdWave(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_startall () {
    cai_start("ai041954F3", 2);
    cai_start("aiCC0499EA", 3);
    AICampaignStart(4);
    AICampaignStart(5);
}

//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(2, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(3, target);
}

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_CreateInfoText (unit lp_cHOSEN_UNIT) {
    // Automatic Variable Declarations
    string auto1FADE1F7_val;

    // Implementation
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        return ;
    }

    auto1FADE1F7_val = UnitGetType(lp_cHOSEN_UNIT);
    if (auto1FADE1F7_val == "Zealot") {
        UnitSetInfoTip(lp_cHOSEN_UNIT, UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)));
    }
    else if (auto1FADE1F7_val == "Stalker") {
        UnitSetInfoTip(lp_cHOSEN_UNIT, UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)));
    }
    else if (auto1FADE1F7_val == "Nexus") {
        libVCMI_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/179E6B4A"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/035D3144"));
    }
    else if (auto1FADE1F7_val == "Pylon") {
        libVCMI_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/02CA946F"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/BCA482E6"));
    }
    else if (auto1FADE1F7_val == "Assimilator") {
        libVCMI_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, null, UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/10A38D3A"));
    }
    else if (auto1FADE1F7_val == "Gateway") {
        libVCMI_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/1E0A1C32"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/CF259D5A"));
    }
    else if (auto1FADE1F7_val == "WarpGate") {
        libVCMI_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/E14AA30C"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/A614E26F"));
    }
    else if (auto1FADE1F7_val == "CyberneticsCore") {
        libVCMI_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/0DB42253"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/0BEF01D8"));
    }
    else if (auto1FADE1F7_val == "Forge") {
        libVCMI_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/08C79B60"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/EB184D53"));
    }
    else if (auto1FADE1F7_val == "ShieldBattery") {
        libVCMI_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/F54EF793"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/18DB3C17"));
    }
    else if (auto1FADE1F7_val == "PhotonCannon") {
        libVCMI_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/EFBF005C"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/C8DB65AA"));
    }
    else if (auto1FADE1F7_val == "Probe") {
        libVCMI_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/17C76B7F"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/93923556"));
    }
    else if (auto1FADE1F7_val == "VespeneGeyser") {
        libVCMI_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/0259AF4B"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/73F6BA6B"));
    }
    else {
    }
    UnitSetState(lp_cHOSEN_UNIT, c_unitStateTooltipable, true);
}

trigger auto_gf_SpawnWarpPrism_Trigger = null;
point auto_gf_SpawnWarpPrism_lp_spawnPoint;
point auto_gf_SpawnWarpPrism_lp_target;

void gf_SpawnWarpPrism (point lp_spawnPoint, point lp_target) {
    auto_gf_SpawnWarpPrism_lp_spawnPoint = lp_spawnPoint;
    auto_gf_SpawnWarpPrism_lp_target = lp_target;

    if (auto_gf_SpawnWarpPrism_Trigger == null) {
        auto_gf_SpawnWarpPrism_Trigger = TriggerCreate("auto_gf_SpawnWarpPrism_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpawnWarpPrism_Trigger, false, false);
}

bool auto_gf_SpawnWarpPrism_TriggerFunc (bool testConds, bool runActions) {
    point lp_spawnPoint = auto_gf_SpawnWarpPrism_lp_spawnPoint;
    point lp_target = auto_gf_SpawnWarpPrism_lp_target;

    // Variable Declarations
    timer lv_rampUpTimer;
    unit lv_warpPrism;
    int lv_warpPrismPing;
    int lv_cooldown;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_rampUpTimer = TimerCreate();
    lv_warpPrismPing = c_invalidPingId;

    // Implementation
    if ((libVCMI_gf_GameIsOver() == true)) {
        return true;
    }

    libNtve_gf_UnitCreateFacingPoint(1, "WarpPrism", 0, gv_pLAYER_02_DOMINION, lp_spawnPoint, lp_target);
    lv_warpPrism = UnitLastCreated();
    libNtve_gf_ShareVisionofUnit(lv_warpPrism, true, gv_pLAYER_01_USER);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", UnitGetPosition(lv_warpPrism), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    lv_warpPrismPing = PingLastCreated();
    PingSetScale(lv_warpPrismPing, 0.7);
    PingSetTooltip(lv_warpPrismPing, StringExternal("Param/Value/B5257B7D"));
    PingSetUnit(lv_warpPrismPing, lv_warpPrism);
    while (true) {
        if ((libNtve_gf_UnitInRegion(lv_warpPrism, RegionCircle(lp_target, 1.0)) == false)) {
            UnitIssueOrder(lv_warpPrism, OrderTargetingPoint(AbilityCommand("move", 0), lp_target), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(lv_warpPrism, Order(AbilityCommand("PhasingMode", 0)), c_orderQueueReplace);
            break;
        }
        Wait(1.0, c_timeAI);
        if (((UnitIsAlive(lv_warpPrism) == false) || (libVCMI_gf_GameIsOver() == true) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true))) {
            PingDestroy(lv_warpPrismPing);
            return true;
        }

    }
    TimerStart(lv_rampUpTimer, libLotv_gf_DifficultyValueFixed2(180.0, 180.0, 120.0, 120.0), false, c_timeGame);
    lv_cooldown = 3;
    while ((TimerGetRemaining(lv_rampUpTimer) > 0.0)) {
        Wait(1.0, c_timeAI);
        if (((UnitIsAlive(lv_warpPrism) == false) || (libVCMI_gf_GameIsOver() == true) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true))) {
            PingDestroy(lv_warpPrismPing);
            return true;
        }

        if ((lv_cooldown == 0)) {
            if ((UnitGroupCount(gv_enemyEventZealots, c_unitCountAlive) < libLotv_gf_DifficultyValueInt2(6, 6, 9, 12))) {
                UnitIssueOrder(UnitFromId(784), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), lp_target), c_orderQueueReplace);
                lv_cooldown = libLotv_gf_DifficultyValueInt2(24, 24, 16, 16);
            }

        }
        else {
            lv_cooldown -= 1;
        }
    }
    while (true) {
        Wait(1.0, c_timeAI);
        if (((UnitIsAlive(lv_warpPrism) == false) || (libVCMI_gf_GameIsOver() == true) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true))) {
            PingDestroy(lv_warpPrismPing);
            return true;
        }

        if ((lv_cooldown == 0)) {
            if ((UnitGroupCount(gv_enemyEventZealots, c_unitCountAlive) < libLotv_gf_DifficultyValueInt2(6, 6, 9, 12))) {
                UnitIssueOrder(UnitFromId(784), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), lp_target), c_orderQueueReplace);
                lv_cooldown = libLotv_gf_DifficultyValueInt2(16, 16, 10, 10);
            }

        }
        else {
            lv_cooldown -= 1;
        }
    }
    return true;
}

trigger auto_gf_SpawnNydusWorm_Trigger = null;
point auto_gf_SpawnNydusWorm_lp_spawnPoint;

void gf_SpawnNydusWorm (point lp_spawnPoint) {
    auto_gf_SpawnNydusWorm_lp_spawnPoint = lp_spawnPoint;

    if (auto_gf_SpawnNydusWorm_Trigger == null) {
        auto_gf_SpawnNydusWorm_Trigger = TriggerCreate("auto_gf_SpawnNydusWorm_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpawnNydusWorm_Trigger, false, false);
}

bool auto_gf_SpawnNydusWorm_TriggerFunc (bool testConds, bool runActions) {
    point lp_spawnPoint = auto_gf_SpawnNydusWorm_lp_spawnPoint;

    // Variable Declarations
    timer lv_rampUpTimer;
    unit lv_nydusWorm;
    int lv_nydusWormPing;
    unitgroup lv_cargoUnits;
    int lv_cooldown;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_rampUpTimer = TimerCreate();
    lv_nydusWormPing = c_invalidPingId;
    lv_cargoUnits = UnitGroupEmpty();

    // Implementation
    if ((libVCMI_gf_GameIsOver() == true)) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, gv_pLAYER_02_DOMINION2, lp_spawnPoint);
    lv_nydusWorm = UnitLastCreated();
    libNtve_gf_ShareVisionofUnit(lv_nydusWorm, true, gv_pLAYER_01_USER);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", UnitGetPosition(lv_nydusWorm), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    lv_nydusWormPing = PingLastCreated();
    PingSetScale(lv_nydusWormPing, 0.7);
    PingSetTooltip(lv_nydusWormPing, StringExternal("Param/Value/E9B731CD"));
    PingSetUnit(lv_nydusWormPing, lv_nydusWorm);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_nydusWorm), c_animNameDefault, "Birth", 0, c_animTimeDefault);
    TimerStart(lv_rampUpTimer, libLotv_gf_DifficultyValueFixed2(180.0, 180.0, 120.0, 120.0), false, c_timeGame);
    lv_cooldown = 8;
    lv_cooldown += gv_nydusDelay;
    gv_nydusDelay += 2;
    while ((TimerGetRemaining(lv_rampUpTimer) > 0.0)) {
        Wait(1.0, c_timeAI);
        if (((UnitIsAlive(lv_nydusWorm) == false) || (libVCMI_gf_GameIsOver() == true) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true))) {
            PingDestroy(lv_nydusWormPing);
            return true;
        }

        if ((lv_cooldown == 0)) {
            gf_UnloadUnitsFromNydusWorm(libLotv_gf_DifficultyValueInt2(3, 3, 3, 6), "Zergling", lv_nydusWorm, libLotv_gf_DifficultyValueInt2(9, 9, 12, 15));
            gf_UnloadUnitsFromNydusWorm(libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), "Hydralisk", lv_nydusWorm, libLotv_gf_DifficultyValueInt2(2, 2, 3, 4));
            lv_cooldown = libLotv_gf_DifficultyValueInt2(36, 36, 24, 24);
        }
        else {
            lv_cooldown -= 1;
        }
    }
    while (true) {
        Wait(1.0, c_timeAI);
        if (((UnitIsAlive(lv_nydusWorm) == false) || (libVCMI_gf_GameIsOver() == true) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true))) {
            PingDestroy(lv_nydusWormPing);
            return true;
        }

        if ((lv_cooldown == 0)) {
            gf_UnloadUnitsFromNydusWorm(libLotv_gf_DifficultyValueInt2(3, 3, 3, 6), "Zergling", lv_nydusWorm, libLotv_gf_DifficultyValueInt2(9, 9, 12, 15));
            gf_UnloadUnitsFromNydusWorm(libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), "Hydralisk", lv_nydusWorm, libLotv_gf_DifficultyValueInt2(2, 2, 3, 4));
            lv_cooldown = libLotv_gf_DifficultyValueInt2(24, 24, 16, 16);
        }
        else {
            lv_cooldown -= 1;
        }
    }
    return true;
}

void gf_UnloadUnitsFromNydusWorm (int lp_count, string lp_unitType, unit lp_nydusWorm, int lp_maxCount) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int auto96406B80_ae;
    const int auto96406B80_ai = 1;
    string auto6CD80178_val;

    // Variable Initialization

    // Implementation
    auto96406B80_ae = lp_count;
    lv_i = 1;
    for ( ; ( (auto96406B80_ai >= 0 && lv_i <= auto96406B80_ae) || (auto96406B80_ai < 0 && lv_i >= auto96406B80_ae) ) ; lv_i += auto96406B80_ai ) {
        if ((UnitIsAlive(lp_nydusWorm) == true) && (((lp_unitType == "Zergling") && (UnitGroupCount(gv_enemyEventZerglings, c_unitCountAlive) < lp_maxCount)) || ((lp_unitType == "Hydralisk") && (UnitGroupCount(gv_enemyEventHydralisks, c_unitCountAlive) < lp_maxCount)))) {
            SoundPlayAtPointForPlayer(SoundLink("NydusWorm_Unload", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lp_nydusWorm), 0.0, 100.0, 0.0);
            libNtve_gf_SendActorMessageToUnit(lp_nydusWorm, "AnimPlay Spell Spell");
            libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_unitType, 0, gv_pLAYER_02_DOMINION2, PointWithOffset(UnitGetPosition(lp_nydusWorm), 0.0, -1.0));
            auto6CD80178_val = lp_unitType;
            if (auto6CD80178_val == "Zergling") {
                UnitGroupAddUnitGroup(gv_enemyEventZerglings, UnitLastCreatedGroup());
            }
            else if (auto6CD80178_val == "Hydralisk") {
                UnitGroupAddUnitGroup(gv_enemyEventHydralisks, UnitLastCreatedGroup());
            }
            else {
            }
            AISetUnitSuicide(UnitLastCreated(), true);
            libNtve_gf_AICast(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(11)));
            Wait(0.75, c_timeGame);
        }

    }
}

trigger auto_gf_VictorySpawnNydusWorm_Trigger = null;
point auto_gf_VictorySpawnNydusWorm_lp_cHOSEN_POINT;

void gf_VictorySpawnNydusWorm (point lp_cHOSEN_POINT) {
    auto_gf_VictorySpawnNydusWorm_lp_cHOSEN_POINT = lp_cHOSEN_POINT;

    if (auto_gf_VictorySpawnNydusWorm_Trigger == null) {
        auto_gf_VictorySpawnNydusWorm_Trigger = TriggerCreate("auto_gf_VictorySpawnNydusWorm_TriggerFunc");
    }

    TriggerExecute(auto_gf_VictorySpawnNydusWorm_Trigger, false, false);
}

bool auto_gf_VictorySpawnNydusWorm_TriggerFunc (bool testConds, bool runActions) {
    point lp_cHOSEN_POINT = auto_gf_VictorySpawnNydusWorm_lp_cHOSEN_POINT;

    // Variable Declarations
    unit lv_nydusWorm;

    // Automatic Variable Declarations
    const int auto1C0E4FD4_n = 6;
    int auto1C0E4FD4_i;
    const int auto8576FC73_n = 2;
    int auto8576FC73_i;

    // Variable Initialization

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, gv_pLAYER_02_DOMINION2, lp_cHOSEN_POINT);
    lv_nydusWorm = UnitLastCreated();
    SoundPlayForPlayer(SoundLink("Event_Aiur03_Victory_Nydus_01", -1), c_maxPlayers, PlayerGroupAll(), 120.0, 0.0);
    libNtve_gf_SendActorMessageToUnit(lv_nydusWorm, "AnimPlay Birth Birth");
    Wait(7.0, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(lv_nydusWorm, "AnimClear Birth");
    for (auto1C0E4FD4_i = 1; auto1C0E4FD4_i <= auto1C0E4FD4_n; auto1C0E4FD4_i += 1) {
        if ((UnitIsAlive(lv_nydusWorm) == true)) {
            SoundPlayAtPointForPlayer(SoundLink("NydusWorm_Unload", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lv_nydusWorm), 0.0, 100.0, 0.0);
            libNtve_gf_SendActorMessageToUnit(lv_nydusWorm, "AnimPlay Spell Spell");
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_02_DOMINION2, UnitGetPosition(lv_nydusWorm));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(11)), c_orderQueueReplace);
            Wait(0.75, c_timeGame);
        }

    }
    for (auto8576FC73_i = 1; auto8576FC73_i <= auto8576FC73_n; auto8576FC73_i += 1) {
        if ((UnitIsAlive(lv_nydusWorm) == true)) {
            SoundPlayAtPointForPlayer(SoundLink("NydusWorm_Unload", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lv_nydusWorm), 0.0, 120.0, 0.0);
            libNtve_gf_SendActorMessageToUnit(lv_nydusWorm, "AnimPlay Spell Spell");
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", 0, gv_pLAYER_02_DOMINION2, UnitGetPosition(lv_nydusWorm));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(11)), c_orderQueueReplace);
            Wait(0.75, c_timeGame);
        }

    }
    return true;
}

trigger auto_gf_VictoryWarpOutUnit_Trigger = null;
unit auto_gf_VictoryWarpOutUnit_lp_unit;

void gf_VictoryWarpOutUnit (unit lp_unit) {
    auto_gf_VictoryWarpOutUnit_lp_unit = lp_unit;

    if (auto_gf_VictoryWarpOutUnit_Trigger == null) {
        auto_gf_VictoryWarpOutUnit_Trigger = TriggerCreate("auto_gf_VictoryWarpOutUnit_TriggerFunc");
    }

    TriggerExecute(auto_gf_VictoryWarpOutUnit_Trigger, false, false);
}

bool auto_gf_VictoryWarpOutUnit_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_VictoryWarpOutUnit_lp_unit;

    // Variable Declarations
    actor lv_warpOutModel;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    UnitSetOwner(lp_unit, 0, false);
    UnitIssueOrder(lp_unit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    SoundPlayAtPointForPlayer(SoundLink("WarpGate_TrainStart", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lp_unit), 0.0, 100.0, 0.0);
    libNtve_gf_AttachModelToUnit(lp_unit, "ProtossGenericWarpInOut", "Ref_Origin");
    lv_warpOutModel = libNtve_gf_ActorLastCreated();
    Wait(1.7, c_timeGame);
    if ((UnitIsAlive(lp_unit) == false)) {
        return true;
    }

    libNtve_gf_KillModel(lv_warpOutModel);
    SoundPlayAtPointForPlayer(SoundLink("WarpGate_TrainFinish", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lp_unit), 0.0, 100.0, 0.0);
    Wait(0.0625, c_timeGame);
    libNtve_gf_ShowHideUnit(lp_unit, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_ULoadCampaignData("PAiur03");
    TriggerExecute(gt_Init01Technology, true, false);
    libVoiC_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init02Players, true, false);
    TriggerExecute(gt_Init03Units, true, false);
    TriggerExecute(gt_Init04MusicSound, true, false);
    TriggerExecute(gt_Init05Environment, true, false);
    TriggerExecute(gt_Init06Difficulties, true, false);
    TriggerExecute(gt_Init07Help, true, false);
    TriggerExecute(gt_IntroQ, true, true);
    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    libVoiC_gf_EnableCampaignTechUnit(true, "PhotonCannon", gv_pLAYER_01_USER);
    libVoiC_gf_EnableCampaignTechUnit(true, "ShieldBattery", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION3, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION4, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION, gv_pLAYER_02_DOMINION2, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION, gv_pLAYER_02_DOMINION3, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION, gv_pLAYER_02_DOMINION4, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION2, gv_pLAYER_02_DOMINION3, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION2, gv_pLAYER_02_DOMINION4, libNtve_ge_AllianceSetting_Neutral);
    PlayerGroupAdd(gv_enemyPlayerGroup, gv_pLAYER_02_DOMINION);
    PlayerGroupAdd(gv_enemyPlayerGroup, gv_pLAYER_02_DOMINION2);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 250);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 100);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION, c_playerPropSuppliesMade, c_playerPropOperSetTo, 200);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION2, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION2, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION2, c_playerPropSuppliesMade, c_playerPropOperSetTo, 200);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "HeroicShieldCleanUp", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION, "HeroicShieldCleanUp", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION3, "HeroicShieldCleanUp", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION4, "HeroicShieldCleanUp", 1);
    PlayerSetColorIndex(gv_pLAYER_02_DOMINION, 1, true);
    PlayerSetColorIndex(gv_pLAYER_02_DOMINION2, 1, true);
    libVCMI_gf_PM_DetectionUpgradesApply();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoDA3828FB_g;
    int autoDA3828FB_u;
    unit autoDA3828FB_var;
    unitgroup auto5DBFB9A1_g;
    int auto5DBFB9A1_u;
    unit auto5DBFB9A1_var;
    unitgroup auto31775418_g;
    int auto31775418_u;
    unit auto31775418_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_powerCells[1] = UnitFromId(437);
    gv_powerCells[2] = UnitFromId(438);
    gv_powerCells[3] = UnitFromId(912);
    gv_powerCells[4] = UnitFromId(894);
    gv_powerCells[5] = UnitFromId(8);
    gv_constrictions[2] = UnitFromId(357);
    gv_constrictions[3] = UnitFromId(355);
    gv_constrictions[4] = UnitFromId(358);
    gv_constrictions[5] = UnitFromId(435);
    gv_warpGate01 = UnitFromId(83);
    gv_warpGate02 = UnitFromId(81);
    gv_warpGate03 = UnitFromId(37);
    autoDA3828FB_g = UnitGroup("AdunGenerator", gv_pLAYER_02_DOMINION4, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDA3828FB_u = UnitGroupCount(autoDA3828FB_g, c_unitCountAll);
    for (;; autoDA3828FB_u -= 1) {
        autoDA3828FB_var = UnitGroupUnitFromEnd(autoDA3828FB_g, autoDA3828FB_u);
        if (autoDA3828FB_var == null) { break; }
        UnitSetState(autoDA3828FB_var, c_unitStateInvulnerable, true);
        UnitSetState(autoDA3828FB_var, c_unitStateStatusBar, false);
        UnitSetState(autoDA3828FB_var, c_unitStateTargetable, false);
        UnitSetState(autoDA3828FB_var, c_unitStateSelectable, false);
        UnitSetState(autoDA3828FB_var, c_unitStateHighlightable, false);
        UnitSetState(autoDA3828FB_var, c_unitStateTooltipable, false);
    }
    auto5DBFB9A1_g = UnitGroup(null, gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5DBFB9A1_u = UnitGroupCount(auto5DBFB9A1_g, c_unitCountAll);
    for (;; auto5DBFB9A1_u -= 1) {
        auto5DBFB9A1_var = UnitGroupUnitFromEnd(auto5DBFB9A1_g, auto5DBFB9A1_u);
        if (auto5DBFB9A1_var == null) { break; }
        gf_CreateInfoText(auto5DBFB9A1_var);
    }
    auto31775418_g = UnitGroup(null, 0, RegionPlayableMap(), UnitFilter((1 << c_targetFilterRawResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto31775418_u = UnitGroupCount(auto31775418_g, c_unitCountAll);
    for (;; auto31775418_u -= 1) {
        auto31775418_var = UnitGroupUnitFromEnd(auto31775418_g, auto31775418_u);
        if (auto31775418_var == null) { break; }
        gf_CreateInfoText(auto31775418_var);
    }
    libVCMI_gf_SetWorkerRallyPointsPlayersNexuses(gv_pLAYER_01_USER);
    UnitGroupAddUnitGroup(gv_critterGroup, UnitGroup("CarrionBird", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(gv_critterGroup, UnitGroup("Crabeetle", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(gv_critterGroup, UnitGroup("KarakFemale", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init04MusicSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mapMusicTrack = "PAiur03_Music_Main";
    PreloadSound("Assets\\Sounds\\Uni\\UI\\UI_Ping.wav", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04MusicSound_Init () {
    gt_Init04MusicSound = TriggerCreate("gt_Init04MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    libLbty_gf_AutoRevealRegion(RegionFromId(3), RegionFromId(4), gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto691E4A8C_ae = 5;
    int auto691E4A8C_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto691E4A8C_var = 2;
    for ( ; auto691E4A8C_var <= auto691E4A8C_ae; auto691E4A8C_var += 1 ) {
        UnitSetPropertyFixed(gv_constrictions[auto691E4A8C_var], c_unitPropLifeMax, libLotv_gf_DifficultyValueFixed2(500.0, 500.0, 750.0, 1000.0));
        UnitSetPropertyFixed(gv_constrictions[auto691E4A8C_var], c_unitPropLifePercent, 100.0);
    }
    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
        TechTreeAbilityAllow(gv_pLAYER_02_DOMINION2, AbilityCommand("FungalGrowth", 0), false);
    }

    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION2, "zerglingmovementspeed", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION2, "hydraliskspeed", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION, "ProtossAirWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION, "ProtossGroundWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION, "ProtossAirArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION, "ProtossGroundArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION, "ProtossShieldsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION2, "ZergFlyerWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION2, "ZergMeleeWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION2, "ZergMissileWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION2, "ZergGroundArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION2, "ZergFlyerArmorsLevel1", 1);
    }

    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION2, "zerglingattackspeed", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION, "ExtendedThermalLance", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_EnableDisableNeedPylonInfo(false);
    libVCMI_gf_AddMissionTipCampaign("Zealot");
    libVCMI_gf_AddMissionTipCampaign("Stalker");
    libVCMI_gf_AddMissionTipCampaign("PhotonCannon");
    libVCMI_gf_AddMissionTipCampaign("ShieldBattery");
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Zealot", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Dragoon", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Sentry", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Colossus", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Scout", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("PhotonCannon", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Zergling", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Baneling", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Hydralisk", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Roach", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("QueenClassic", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Mutalisk", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Guardian", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Ultralisk", false, gv_pLAYER_01_USER);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        libVoiC_gf_AddUnitTypeToUnitHelpPanel("Immortal", false, gv_pLAYER_01_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Unit Created
//--------------------------------------------------------------------------------------------------
bool gt_PlayerUnitCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_CreateInfoText(EventUnitProgressUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerUnitCreated_Init () {
    gt_PlayerUnitCreated = TriggerCreate("gt_PlayerUnitCreated_Func");
    TriggerAddEventUnitConstructProgress(gt_PlayerUnitCreated, null, c_unitProgressStageStart);
    TriggerAddEventUnitTrainProgress(gt_PlayerUnitCreated, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Unit Transforms
//--------------------------------------------------------------------------------------------------
bool gt_PlayerUnitTransforms_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_CreateInfoText(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerUnitTransforms_Init () {
    gt_PlayerUnitTransforms = TriggerCreate("gt_PlayerUnitTransforms_Func");
    TriggerAddEventUnitAbility(gt_PlayerUnitTransforms, null, AbilityCommand("UpgradeToWarpGate", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(gt_PlayerUnitTransforms, null, AbilityCommand("MorphBackToGateway", 0), c_abilMorphStageUnitEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Rescues Unit
//--------------------------------------------------------------------------------------------------
bool gt_PlayerRescuesUnit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_CreateInfoText(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerRescuesUnit_Init () {
    gt_PlayerRescuesUnit = TriggerCreate("gt_PlayerRescuesUnit_Func");
    TriggerAddEventUnitChangeOwner(gt_PlayerRescuesUnit, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    unitgroup autoEBF467D8_g;
    int autoEBF467D8_u;
    unit autoEBF467D8_var;
    const int autoA6187653_ae = 5;
    const int autoA6187653_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/DF96B858"), null, PointFromId(11));
    libVCMI_gf_SetSpearofAdunEnergy(75.0, libVCMI_ge_SpearofAdunEnergyType_Absolute);
    libVoiC_gf_EnableDisableSpearofAdunAbility(true, "GPTier1Power1");
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_powerCells[1]), 6.5), 0.0, false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisiblePylon", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, UnitGetPosition(gv_powerCells[1]));
    TriggerExecute(gt_ZergKillsCritters, true, false);
    autoEBF467D8_g = UnitGroup("AdunGenerator", gv_pLAYER_02_DOMINION4, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEBF467D8_u = UnitGroupCount(autoEBF467D8_g, c_unitCountAll);
    for (;; autoEBF467D8_u -= 1) {
        autoEBF467D8_var = UnitGroupUnitFromEnd(autoEBF467D8_g, autoEBF467D8_u);
        if (autoEBF467D8_var == null) { break; }
        VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(autoEBF467D8_var), 5.0), 0.5, false);
    }
    Wait(2.0, c_timeReal);
    TriggerQueueEnter();
    if ((libVCMI_gf_GameIsOver() == true)) {
        return true;
    }

    TriggerExecute(gt_ObjectiveActivatePowerCellsCreate, true, true);
    lv_i = 2;
    for ( ; ( (autoA6187653_ai >= 0 && lv_i <= autoA6187653_ae) || (autoA6187653_ai < 0 && lv_i >= autoA6187653_ae) ) ; lv_i += autoA6187653_ai ) {
        if ((UnitIsAlive(gv_constrictions[lv_i]) == true)) {
            libVCMI_gf_CreateObjectivePing(true, UnitGetPosition(gv_powerCells[lv_i]), StringExternal("Param/Value/01C43B9C"));
            gv_powerCellPings[lv_i] = PingLastCreated();
        }

        VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_powerCells[lv_i]), 6.5), 0.0, false);
    }
    TriggerQueueExit();
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_DeployPylonQ, true, false);
    Wait(104.0, c_timeAI);
    TriggerExecute(gt_TeachWarpGatesQ, true, false);
    Wait(200.0, c_timeAI);
    TriggerExecute(gt_IntroduceUnpoweredWarpGatesQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Deploy Pylon Q
//--------------------------------------------------------------------------------------------------
bool gt_DeployPylonQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVCUI_gf_ShowSpearofAdunUI(true, c_transitionDurationDefault);
    Wait(1.0, c_timeAI);
    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
        CameraPan(gv_pLAYER_01_USER, PointFromId(71), 2.0, -1, 10.0, true);
        Wait(1.0, c_timeAI);
        libVCMI_gf_PingMinimapCampaign(PlayerGroupSingle(gv_pLAYER_01_USER), PointFromId(71), 3.0, Color(0.00, 100.00, 0.00));
        UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/F99FD8EF"), null, PointFromId(71));
    }

    libVCUI_gf_TurnSpearofAdunSlotHighlightOnOff(1, true);
    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
        libVCMI_gf_CreateReticleEffectAndTextTagAtPoint(libVCMI_ge_CampaginReticleType_ProtossMainObjective, libVCMI_ge_CampaginReticleSize_Medium, StringExternal("Param/Value/2F2FCFB6"), PointFromId(71));
        gv_introReticle = libNtve_gf_ActorLastCreated();
        gv_introTextTag = TextTagLastCreated();
        TextTagSetPosition(gv_introTextTag, PointFromId(71), 0.0);
    }

    TriggerExecute(gt_DeployPylonUnitsPowered, true, false);
    Wait(1.0, c_timeAI);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur03|Line00056", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur03|Line00057", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DeployPylonQ_Init () {
    gt_DeployPylonQ = TriggerCreate("gt_DeployPylonQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Presses Deploy Pylon
//--------------------------------------------------------------------------------------------------
bool gt_PlayerPressesDeployPylon_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateModelAtPoint("PylonPlacement", PointFromId(71));
    gv_introPylonHelper = libNtve_gf_ActorLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerPressesDeployPylon_Init () {
    gt_PlayerPressesDeployPylon = TriggerCreate("gt_PlayerPressesDeployPylon_Func");
    TriggerAddEventButtonPressed(gt_PlayerPressesDeployPylon, gv_pLAYER_01_USER, "SOAProxyPylon");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Deploy Pylon Units Powered
//--------------------------------------------------------------------------------------------------
bool gt_DeployPylonUnitsPowered_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_proxyGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_proxyGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_proxyGroup = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(31), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    while (true) {
        Wait(0.5, c_timeAI);
        if ((libVCMI_gf_GameIsOver() == true)) {
            libVCUI_gf_TurnSpearofAdunSlotHighlightOnOff(1, false);
            if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
                libNtve_gf_KillModel(gv_introReticle);
                libNtve_gf_KillModel(gv_introPylonHelper);
                TextTagDestroy(gv_introTextTag);
            }

            TriggerEnable(TriggerGetCurrent(), false);
            return true;
        }

        if (((libNtve_gf_UnitGroupIsDead(lv_proxyGroup) == true) || (UnitGroupCount(UnitGroup("Pylon", gv_pLAYER_01_USER, RegionCircle(PointFromId(71), 2.4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || ((UnitIsAlive(UnitFromId(457)) == true) && (PowerLevel(gv_pLAYER_01_USER, UnitGetPosition(UnitFromId(457)), "PowerSource") > 0)) || ((UnitIsAlive(UnitFromId(439)) == true) && (PowerLevel(gv_pLAYER_01_USER, UnitGetPosition(UnitFromId(439)), "PowerSource") > 0)) || ((UnitIsAlive(UnitFromId(538)) == true) && (PowerLevel(gv_pLAYER_01_USER, UnitGetPosition(UnitFromId(538)), "PowerSource") > 0)))) {
            libVCUI_gf_TurnSpearofAdunSlotHighlightOnOff(1, false);
            libNtve_gf_KillModel(gv_introReticle);
            libNtve_gf_KillModel(gv_introPylonHelper);
            TextTagDestroy(gv_introTextTag);
            TriggerEnable(TriggerGetCurrent(), false);
            break;
        }

    }
    if ((libNtve_gf_UnitGroupIsDead(lv_proxyGroup) == true)) {
        return true;
    }
    else {
        Wait(2.0, c_timeAI);
        TriggerExecute(gt_ExplainDefensesQ, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DeployPylonUnitsPowered_Init () {
    gt_DeployPylonUnitsPowered = TriggerCreate("gt_DeployPylonUnitsPowered_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Explain Defenses Q
//--------------------------------------------------------------------------------------------------
bool gt_ExplainDefensesQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur03|Line00059", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur03|Line00058", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ExplainDefensesQ_Init () {
    gt_ExplainDefensesQ = TriggerCreate("gt_ExplainDefensesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Teach Warp Gates Q
//--------------------------------------------------------------------------------------------------
bool gt_TeachWarpGatesQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto91E1BDA4_g;
    int auto91E1BDA4_u;
    unit auto91E1BDA4_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("UpgradeToWarpGate", 0), true);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("UpgradeToWarpGate", 0), true);
    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
        auto91E1BDA4_g = UnitGroup("Gateway", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto91E1BDA4_u = UnitGroupCount(auto91E1BDA4_g, c_unitCountAll);
        for (;; auto91E1BDA4_u -= 1) {
            auto91E1BDA4_var = UnitGroupUnitFromEnd(auto91E1BDA4_g, auto91E1BDA4_u);
            if (auto91E1BDA4_var == null) { break; }
            libVCMI_gf_AttachReticleEffectAndTextTagOnUnit(libVCMI_ge_CampaginReticleType_ProtossMainObjective, libVCMI_ge_CampaginReticleSize_Medium, StringExternal("Param/Value/64732543"), auto91E1BDA4_var, "Ref_Center");
            libHots_gf_StoreActorForUnit(auto91E1BDA4_var, 1, libNtve_gf_ActorLastCreated());
            libHots_gf_StoreTextTagForUnit(auto91E1BDA4_var, 1, TextTagLastCreated());
        }
        TriggerEnable(gt_GatewayConstructed, true);
    }

    TriggerEnable(gt_WarpGateTransformed, true);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur03|Line00106", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TeachWarpGatesQ_Init () {
    gt_TeachWarpGatesQ = TriggerCreate("gt_TeachWarpGatesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gateway Constructed
//--------------------------------------------------------------------------------------------------
bool gt_GatewayConstructed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "Gateway"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_AttachReticleEffectAndTextTagOnUnit(libVCMI_ge_CampaginReticleType_ProtossMainObjective, libVCMI_ge_CampaginReticleSize_Medium, StringExternal("Param/Value/91F21499"), EventUnitProgressUnit(), "Ref_Center");
    libHots_gf_StoreActorForUnit(EventUnitProgressUnit(), 1, libNtve_gf_ActorLastCreated());
    libHots_gf_StoreTextTagForUnit(EventUnitProgressUnit(), 1, TextTagLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GatewayConstructed_Init () {
    gt_GatewayConstructed = TriggerCreate("gt_GatewayConstructed_Func");
    TriggerEnable(gt_GatewayConstructed, false);
    TriggerAddEventUnitConstructProgress(gt_GatewayConstructed, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warp Gate Transformed
//--------------------------------------------------------------------------------------------------
bool gt_WarpGateTransformed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("UpgradeToWarpGate", 0), false);
    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
        TextTagDestroy(libHots_gf_TextTagForUnit(EventUnit(), 1));
        libNtve_gf_KillModel(libHots_gf_ActorForUnit(EventUnit(), 1));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarpGateTransformed_Init () {
    gt_WarpGateTransformed = TriggerCreate("gt_WarpGateTransformed_Func");
    TriggerEnable(gt_WarpGateTransformed, false);
    TriggerAddEventUnitAbility(gt_WarpGateTransformed, null, AbilityCommand("UpgradeToWarpGate", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Power Cell 2
//--------------------------------------------------------------------------------------------------
bool gt_ActivatePowerCell2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_powerCellActivated += 1;
    if ((gv_powerCellActivated == 5)) {
        TriggerExecute(gt_AchievementSprinterCell, true, false);
    }

    TriggerExecute(gt_ObjectiveActivatePowerCellsUpdate, true, false);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(1), false);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/8B35F4AF"), null, UnitGetPosition(gv_powerCells[2]));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_powerCells[2]), 3.0, Color(0.00, 100.00, 0.00));
    PingDestroy(gv_powerCellPings[2]);
    Wait(2.0, c_timeGame);
    ActorSend(libNtve_gf_MainActorofUnit(gv_powerCells[2]), "Signal On");
    Wait(1.0, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisiblePylon", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, UnitGetPosition(gv_powerCells[2]));
    Wait(2.0, c_timeGame);
    SoundPlayForPlayer(SoundLink("SOAPylonPowerImpact", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(gt_PowerCellActivatedQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivatePowerCell2_Init () {
    gt_ActivatePowerCell2 = TriggerCreate("gt_ActivatePowerCell2_Func");
    TriggerAddEventUnitDied(gt_ActivatePowerCell2, UnitRefFromVariable("gv_constrictions[2]"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Power Cell 3
//--------------------------------------------------------------------------------------------------
bool gt_ActivatePowerCell3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_powerCellActivated += 1;
    if ((gv_powerCellActivated == 5)) {
        TriggerExecute(gt_AchievementSprinterCell, true, false);
    }

    TriggerExecute(gt_ObjectiveActivatePowerCellsUpdate, true, false);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(7), false);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/3527BFF7"), null, UnitGetPosition(gv_powerCells[3]));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_powerCells[3]), 3.0, Color(0.00, 100.00, 0.00));
    PingDestroy(gv_powerCellPings[3]);
    Wait(2.0, c_timeGame);
    ActorSend(libNtve_gf_MainActorofUnit(gv_powerCells[3]), "Signal On");
    Wait(1.0, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisiblePylon", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, UnitGetPosition(gv_powerCells[3]));
    Wait(2.0, c_timeGame);
    SoundPlayForPlayer(SoundLink("SOAPylonPowerImpact", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(gt_PowerCellActivatedQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivatePowerCell3_Init () {
    gt_ActivatePowerCell3 = TriggerCreate("gt_ActivatePowerCell3_Func");
    TriggerAddEventUnitDied(gt_ActivatePowerCell3, UnitRefFromVariable("gv_constrictions[3]"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Power Cell 4
//--------------------------------------------------------------------------------------------------
bool gt_ActivatePowerCell4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_powerCellActivated += 1;
    if ((gv_powerCellActivated == 5)) {
        TriggerExecute(gt_AchievementSprinterCell, true, false);
    }

    TriggerExecute(gt_ObjectiveActivatePowerCellsUpdate, true, false);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION, RegionFromId(8), false);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(8), false);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/FDFC791C"), null, UnitGetPosition(gv_powerCells[4]));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_powerCells[4]), 3.0, Color(0.00, 100.00, 0.00));
    PingDestroy(gv_powerCellPings[4]);
    Wait(2.0, c_timeGame);
    ActorSend(libNtve_gf_MainActorofUnit(gv_powerCells[4]), "Signal On");
    Wait(1.0, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisiblePylon", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, UnitGetPosition(gv_powerCells[4]));
    Wait(2.0, c_timeGame);
    SoundPlayForPlayer(SoundLink("SOAPylonPowerImpact", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(gt_PowerCellActivatedQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivatePowerCell4_Init () {
    gt_ActivatePowerCell4 = TriggerCreate("gt_ActivatePowerCell4_Func");
    TriggerAddEventUnitDied(gt_ActivatePowerCell4, UnitRefFromVariable("gv_constrictions[4]"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Power Cell 5
//--------------------------------------------------------------------------------------------------
bool gt_ActivatePowerCell5_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_powerCellActivated += 1;
    if ((gv_powerCellActivated == 5)) {
        TriggerExecute(gt_AchievementSprinterCell, true, false);
    }

    TriggerExecute(gt_ObjectiveActivatePowerCellsUpdate, true, false);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION, RegionFromId(5), false);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(5), false);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/6569B01F"), null, UnitGetPosition(gv_powerCells[5]));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_powerCells[5]), 3.0, Color(0.00, 100.00, 0.00));
    PingDestroy(gv_powerCellPings[5]);
    Wait(2.0, c_timeGame);
    ActorSend(libNtve_gf_MainActorofUnit(gv_powerCells[5]), "Signal On");
    Wait(1.0, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisiblePylon", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, UnitGetPosition(gv_powerCells[5]));
    Wait(2.0, c_timeGame);
    SoundPlayForPlayer(SoundLink("SOAPylonPowerImpact", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(gt_PowerCellActivatedQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivatePowerCell5_Init () {
    gt_ActivatePowerCell5 = TriggerCreate("gt_ActivatePowerCell5_Func");
    TriggerAddEventUnitDied(gt_ActivatePowerCell5, UnitRefFromVariable("gv_constrictions[5]"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Power Cell Activated Q
//--------------------------------------------------------------------------------------------------
bool gt_PowerCellActivatedQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_conduitsActivatedLocal;

    // Automatic Variable Declarations
    int autoA1B79FA0_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_conduitsActivatedLocal = gv_powerCellActivated;
    autoA1B79FA0_val = lv_conduitsActivatedLocal;
    if (autoA1B79FA0_val == 2) {
        libVCMI_gf_CreateMissionAutosavePoint(StringToText(""));
        TriggerQueueEnter();
        TriggerExecute(gt_KillRain, true, false);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur03|Line00061", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur03|Line00074", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        Wait(2.0, c_timeAI);
        TriggerExecute(gt_EventWave1, true, false);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur03|Line00076", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        if ((UnitGroupCount(UnitGroup("Stalker", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur03|Line00077", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else {
            libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur03|Line00089", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else if (autoA1B79FA0_val == 3) {
        libVCMI_gf_CreateMissionAutosavePoint(StringToText(""));
        TriggerQueueEnter();
        TriggerExecute(gt_ActivateLights, true, false);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur03|Line00078", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        Wait(2.0, c_timeAI);
        TriggerExecute(gt_EventWave2, true, false);
        SoundPlayForPlayer(SoundLink("PAiur03_NydusWorm_Birth", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        Wait(3.0, c_timeAI);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur03|Line00079", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else if (autoA1B79FA0_val == 4) {
        libVCMI_gf_CreateMissionAutosavePoint(StringToText(""));
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur03|Line00063", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur03|Line00080", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        Wait(2.0, c_timeAI);
        TriggerExecute(gt_EventWave3, true, false);
        SoundPlayForPlayer(SoundLink("PAiur03_NydusWorm_Birth", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PAiur03_Music_LastObjective", c_soundtrackCueAny, c_soundtrackIndexAny, true);
        TriggerQueueExit();
    }
    else if (autoA1B79FA0_val == 5) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_VictoryActivatePowerCellsCompleted, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PowerCellActivatedQ_Init () {
    gt_PowerCellActivatedQ = TriggerCreate("gt_PowerCellActivatedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Power Cell 3 - Surprise Ultralisk
//--------------------------------------------------------------------------------------------------
bool gt_PowerCell3SurpriseUltralisk_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_ultralisk;
    unitgroup lv_zerglings;

    // Automatic Variable Declarations
    const int auto0CB2BF45_n = 9;
    int auto0CB2BF45_i;
    unitgroup autoE248B36B_g;
    int autoE248B36B_u;
    unit autoE248B36B_var;

    // Variable Initialization
    lv_zerglings = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        libNtve_gf_CreateUnitsAtPoint2(1, "UltraliskBurrowed", 0, gv_pLAYER_02_DOMINION2, PointFromId(1685));
        lv_ultralisk = UnitLastCreated();
        UnitIssueOrder(lv_ultralisk, Order(AbilityCommand("BurrowUltraliskUp", 0)), c_orderQueueReplace);
        Wait(0.5, c_timeAI);
        SoundPlayAtPointForPlayer(SoundLink("Ultralisk_Roar", 0), c_maxPlayers, PlayerGroupAll(), PointFromId(1685), 0.0, 100.0, 0.0);
        Wait(1.5, c_timeAI);
        AISetUnitScriptControlled(lv_ultralisk, false);
        AISetUnitSuicide(lv_ultralisk, true);
        libNtve_gf_AICast(lv_ultralisk, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1933)));
    }
    else {
        return true;
    }
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        Wait(2.0, c_timeAI);
        SoundPlayAtPointForPlayer(SoundLink("Event_Lab01_ZerglingRelease", 1), c_maxPlayers, PlayerGroupAll(), PointFromId(1685), 0.0, 100.0, 0.0);
        for (auto0CB2BF45_i = 1; auto0CB2BF45_i <= auto0CB2BF45_n; auto0CB2BF45_i += 1) {
            libNtve_gf_CreateUnitsAtPoint2(1, "ZerglingBurrowed", 0, gv_pLAYER_02_DOMINION2, PointFromId(1685));
            UnitGroupAdd(lv_zerglings, UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
            AISetUnitScriptControlled(UnitLastCreated(), false);
            Wait(0.1, c_timeAI);
        }
        autoE248B36B_g = lv_zerglings;
        autoE248B36B_u = UnitGroupCount(autoE248B36B_g, c_unitCountAll);
        for (;; autoE248B36B_u -= 1) {
            autoE248B36B_var = UnitGroupUnitFromEnd(autoE248B36B_g, autoE248B36B_u);
            if (autoE248B36B_var == null) { break; }
            AISetUnitSuicide(autoE248B36B_var, true);
            libNtve_gf_AICast(autoE248B36B_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1933)));
        }
    }
    else {
        return true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PowerCell3SurpriseUltralisk_Init () {
    gt_PowerCell3SurpriseUltralisk = TriggerCreate("gt_PowerCell3SurpriseUltralisk_Func");
    TriggerAddEventUnitDied(gt_PowerCell3SurpriseUltralisk, UnitRefFromUnit(UnitFromId(879)));
    TriggerAddEventUnitDied(gt_PowerCell3SurpriseUltralisk, UnitRefFromUnit(UnitFromId(1330)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Power Cell 4 - Reinforcements 1
//--------------------------------------------------------------------------------------------------
bool gt_PowerCell4Reinforcements1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoBF5F188A_n;
    int autoBF5F188A_i;
    int autoBD0CFF70_n;
    int autoBD0CFF70_i;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_PowerCell4Reinforcements2, false);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        VisRevealArea(gv_pLAYER_01_USER, RegionFromId(19), 4.0, false);
        autoBF5F188A_n = libLotv_gf_DifficultyValueInt2(0, 0, 3, 5);
        for (autoBF5F188A_i = 1; autoBF5F188A_i <= autoBF5F188A_n; autoBF5F188A_i += 1) {
            if ((UnitIsAlive(UnitFromId(1061)) == true)) {
                UnitIssueOrder(UnitFromId(784), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), RegionRandomPoint(RegionFromId(19))), c_orderQueueReplace);
                Wait(0.1, c_timeAI);
            }
            else {
                return true;
            }
        }
        autoBD0CFF70_n = libLotv_gf_DifficultyValueInt2(0, 0, 1, 2);
        for (autoBD0CFF70_i = 1; autoBD0CFF70_i <= autoBD0CFF70_n; autoBD0CFF70_i += 1) {
            if ((UnitIsAlive(UnitFromId(1061)) == true)) {
                UnitIssueOrder(UnitFromId(784), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrainVoid", 3), RegionRandomPoint(RegionFromId(19))), c_orderQueueReplace);
                Wait(0.1, c_timeAI);
            }
            else {
                return true;
            }
        }
    }
    else {
        return true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PowerCell4Reinforcements1_Init () {
    gt_PowerCell4Reinforcements1 = TriggerCreate("gt_PowerCell4Reinforcements1_Func");
    TriggerAddEventUnitDied(gt_PowerCell4Reinforcements1, UnitRefFromUnit(UnitFromId(673)));
    TriggerAddEventUnitDied(gt_PowerCell4Reinforcements1, UnitRefFromUnit(UnitFromId(674)));
    TriggerAddEventUnitDied(gt_PowerCell4Reinforcements1, UnitRefFromUnit(UnitFromId(675)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Power Cell 4 - Reinforcements 2
//--------------------------------------------------------------------------------------------------
bool gt_PowerCell4Reinforcements2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto3EA7D2BA_n;
    int auto3EA7D2BA_i;
    int auto1C618970_n;
    int auto1C618970_i;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_PowerCell4Reinforcements1, false);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        VisRevealArea(gv_pLAYER_01_USER, RegionFromId(23), 4.0, false);
        auto3EA7D2BA_n = libLotv_gf_DifficultyValueInt2(0, 0, 3, 5);
        for (auto3EA7D2BA_i = 1; auto3EA7D2BA_i <= auto3EA7D2BA_n; auto3EA7D2BA_i += 1) {
            if ((UnitIsAlive(UnitFromId(1061)) == true)) {
                UnitIssueOrder(UnitFromId(784), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), RegionRandomPoint(RegionFromId(23))), c_orderQueueReplace);
                Wait(0.1, c_timeAI);
            }
            else {
                return true;
            }
        }
        auto1C618970_n = libLotv_gf_DifficultyValueInt2(0, 0, 1, 2);
        for (auto1C618970_i = 1; auto1C618970_i <= auto1C618970_n; auto1C618970_i += 1) {
            if ((UnitIsAlive(UnitFromId(1061)) == true)) {
                UnitIssueOrder(UnitFromId(784), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrainVoid", 3), RegionRandomPoint(RegionFromId(23))), c_orderQueueReplace);
                Wait(0.1, c_timeAI);
            }
            else {
                return true;
            }
        }
    }
    else {
        return true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PowerCell4Reinforcements2_Init () {
    gt_PowerCell4Reinforcements2 = TriggerCreate("gt_PowerCell4Reinforcements2_Func");
    TriggerAddEventUnitDied(gt_PowerCell4Reinforcements2, UnitRefFromUnit(UnitFromId(685)));
    TriggerAddEventUnitDied(gt_PowerCell4Reinforcements2, UnitRefFromUnit(UnitFromId(686)));
    TriggerAddEventUnitDied(gt_PowerCell4Reinforcements2, UnitRefFromUnit(UnitFromId(687)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Introduce Unpowered Warp Gates Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroduceUnpoweredWarpGatesQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((ObjectiveGetState(gv_objectiveRescueStalkers) != c_objectiveStateCompleted))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_warpGateTransmissionsEnabled = true;
    TriggerEnable(gt_WarpGatePowered, true);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(83)), 5.0), 6.0, false);
    libVCMI_gf_PingMinimapCampaign(PlayerGroupSingle(gv_pLAYER_01_USER), UnitGetPosition(UnitFromId(83)), 3.0, Color(100.00, 100.00, 0.00));
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/1B813F3D"), null, UnitFromId(83));
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectivePowerUpWarpGatesCreate, true, false);
    Wait(1.0, c_timeAI);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur03|Line00042", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur03|Line00043", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    if ((TriggerIsEnabled(gt_BonusProximityTrigger) == true)) {
        gv_warpGateIntroForcedNotExplored = true;
        TriggerEnable(gt_BonusProximityTrigger, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroduceUnpoweredWarpGatesQ_Init () {
    gt_IntroduceUnpoweredWarpGatesQ = TriggerCreate("gt_IntroduceUnpoweredWarpGatesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warp Gate Powered
//--------------------------------------------------------------------------------------------------
bool gt_WarpGatePowered_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_localWarpGatePoweredBool;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "Pylon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(gv_warpGate01) == true) && (PowerLevel(gv_pLAYER_01_USER, UnitGetPosition(gv_warpGate01), "PowerSource") > 0) && (UnitGetOwner(gv_warpGate01) != gv_pLAYER_01_USER)) {
        lv_localWarpGatePoweredBool = true;
        gv_warpGatesPowered += 1;
        libVCMI_gf_PingMinimapCampaign(PlayerGroupSingle(gv_pLAYER_01_USER), UnitGetPosition(gv_warpGate01), 3.0, Color(0.00, 100.00, 0.00));
        UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/E7F0C3E9"), null, gv_warpGate01);
        libNtve_gf_RescueUnit(gv_warpGate01, gv_pLAYER_01_USER, true);
    }

    if ((UnitIsAlive(gv_warpGate02) == true) && (PowerLevel(gv_pLAYER_01_USER, UnitGetPosition(gv_warpGate02), "PowerSource") > 0) && (UnitGetOwner(gv_warpGate02) != gv_pLAYER_01_USER)) {
        lv_localWarpGatePoweredBool = true;
        gv_warpGatesPowered += 1;
        libVCMI_gf_PingMinimapCampaign(PlayerGroupSingle(gv_pLAYER_01_USER), UnitGetPosition(gv_warpGate02), 3.0, Color(0.00, 100.00, 0.00));
        UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/F89685B3"), null, gv_warpGate02);
        libNtve_gf_RescueUnit(gv_warpGate02, gv_pLAYER_01_USER, true);
    }

    if ((UnitIsAlive(gv_warpGate03) == true) && (PowerLevel(gv_pLAYER_01_USER, UnitGetPosition(gv_warpGate03), "PowerSource") > 0) && (UnitGetOwner(gv_warpGate03) != gv_pLAYER_01_USER)) {
        lv_localWarpGatePoweredBool = true;
        gv_warpGatesPowered += 1;
        libVCMI_gf_PingMinimapCampaign(PlayerGroupSingle(gv_pLAYER_01_USER), UnitGetPosition(gv_warpGate03), 3.0, Color(0.00, 100.00, 0.00));
        UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/4CEFF78F"), null, gv_warpGate03);
        libNtve_gf_RescueUnit(gv_warpGate03, gv_pLAYER_01_USER, true);
    }

    if ((lv_localWarpGatePoweredBool == true)) {
        if ((gv_warpGatesPowered >= 3)) {
            TriggerEnable(TriggerGetCurrent(), false);
            TriggerExecute(gt_ObjectivePowerUpWarpGatesUpdate, true, false);
            TriggerExecute(gt_ObjectivePowerUpWarpGatesComplete, true, true);
        }
        else {
            TriggerExecute(gt_ObjectivePowerUpWarpGatesUpdate, true, true);
        }
        TriggerExecute(gt_WarpGatePoweredUpQ, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarpGatePowered_Init () {
    gt_WarpGatePowered = TriggerCreate("gt_WarpGatePowered_Func");
    TriggerEnable(gt_WarpGatePowered, false);
    TriggerAddEventUnitConstructProgress(gt_WarpGatePowered, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warp Gate Powered Up Q
//--------------------------------------------------------------------------------------------------
bool gt_WarpGatePoweredUpQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto8CEB57DF_val;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    auto8CEB57DF_val = gv_warpGatesPowered;
    if (auto8CEB57DF_val == 1) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur03|Line00064", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto8CEB57DF_val == 2) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur03|Line00065", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto8CEB57DF_val == 3) {
        TriggerEnable(TriggerGetCurrent(), false);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur03|Line00066", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarpGatePoweredUpQ_Init () {
    gt_WarpGatePoweredUpQ = TriggerCreate("gt_WarpGatePoweredUpQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Proximity Trigger
//--------------------------------------------------------------------------------------------------
bool gt_BonusProximityTrigger_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_IntroduceUnpoweredWarpGatesQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusProximityTrigger_Init () {
    gt_BonusProximityTrigger = TriggerCreate("gt_BonusProximityTrigger_Func");
    TriggerAddEventUnitRegion(gt_BonusProximityTrigger, null, RegionFromId(2), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remind Player About Warp Gates Q
//--------------------------------------------------------------------------------------------------
bool gt_RemindPlayerAboutWarpGatesQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_warpGateUnit;

    // Automatic Variable Declarations
    region auto7069A7BF_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((ObjectiveGetState(gv_objectiveRescueStalkers) != c_objectiveStateCompleted))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((gv_warpGateIntroForcedNotExplored == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto7069A7BF_val = EventUnitRegion();
    if (auto7069A7BF_val == RegionFromId(15)) {
        lv_warpGateUnit = gv_warpGate01;
    }
    else if (auto7069A7BF_val == RegionFromId(6)) {
        lv_warpGateUnit = gv_warpGate02;
    }
    else if (auto7069A7BF_val == RegionFromId(16)) {
        lv_warpGateUnit = gv_warpGate03;
    }
    else {
        return true;
    }
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/B920866B"), null, UnitGetPosition(lv_warpGateUnit));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupSingle(gv_pLAYER_01_USER), UnitGetPosition(lv_warpGateUnit), 3.0, Color(100.00, 100.00, 0.00));
    libVCMI_gf_AttachReticleEffectAndTextTagOnUnit(libVCMI_ge_CampaginReticleType_ProtossBonusObjective, libVCMI_ge_CampaginReticleSize_Medium, StringExternal("Param/Value/0C0387A1"), lv_warpGateUnit, "Ref_Center");
    libHots_gf_StoreActorForUnit(lv_warpGateUnit, 1, libNtve_gf_ActorLastCreated());
    libHots_gf_StoreTextTagForUnit(lv_warpGateUnit, 1, TextTagLastCreated());
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur03|Line00108", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(lv_warpGateUnit, 1));
    TextTagDestroy(libHots_gf_TextTagForUnit(lv_warpGateUnit, 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemindPlayerAboutWarpGatesQ_Init () {
    gt_RemindPlayerAboutWarpGatesQ = TriggerCreate("gt_RemindPlayerAboutWarpGatesQ_Func");
    TriggerAddEventUnitRegion(gt_RemindPlayerAboutWarpGatesQ, null, RegionFromId(15), true);
    TriggerAddEventUnitRegion(gt_RemindPlayerAboutWarpGatesQ, null, RegionFromId(6), true);
    TriggerAddEventUnitRegion(gt_RemindPlayerAboutWarpGatesQ, null, RegionFromId(16), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Event Wave 1
//--------------------------------------------------------------------------------------------------
bool gt_EventWave1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
        gf_SpawnWarpPrism(PointFromId(781), PointFromId(937));
        gf_SpawnWarpPrism(PointFromId(781), PointFromId(1055));
    }
    else {
        gf_SpawnWarpPrism(PointFromId(780), PointFromId(1126));
        gf_SpawnWarpPrism(PointFromId(780), PointFromId(1127));
        gf_SpawnWarpPrism(PointFromId(780), PointFromId(1128));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EventWave1_Init () {
    gt_EventWave1 = TriggerCreate("gt_EventWave1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Event Wave 2
//--------------------------------------------------------------------------------------------------
bool gt_EventWave2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_SpawnNydusWorm(PointFromId(1132));
    gf_SpawnNydusWorm(PointFromId(1133));
    if ((libLotv_gf_DifficultyValueInt2(0, 1, 1, 1) == 1)) {
        gf_SpawnNydusWorm(PointFromId(1135));
        gf_SpawnNydusWorm(PointFromId(1141));
    }

    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        gf_SpawnNydusWorm(PointFromId(1144));
        gf_SpawnNydusWorm(PointFromId(1146));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EventWave2_Init () {
    gt_EventWave2 = TriggerCreate("gt_EventWave2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Event Wave 3
//--------------------------------------------------------------------------------------------------
bool gt_EventWave3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_nydusDelay = 0;
    gf_SpawnWarpPrism(PointFromId(780), PointFromId(782));
    gf_SpawnWarpPrism(PointFromId(781), PointFromId(783));
    gf_SpawnWarpPrism(PointFromId(780), PointFromId(823));
    gf_SpawnWarpPrism(PointFromId(781), PointFromId(822));
    gf_SpawnNydusWorm(PointFromId(1056));
    gf_SpawnNydusWorm(PointFromId(1057));
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        gf_SpawnWarpPrism(PointFromId(780), PointFromId(824));
        gf_SpawnWarpPrism(PointFromId(781), PointFromId(825));
        gf_SpawnNydusWorm(PointFromId(1144));
        gf_SpawnNydusWorm(PointFromId(1146));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EventWave3_Init () {
    gt_EventWave3 = TriggerCreate("gt_EventWave3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warp In Unit Behavior (Enemies)
//--------------------------------------------------------------------------------------------------
bool gt_WarpInUnitBehaviorEnemies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto80DA9DC4_val;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_02_DOMINION))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroup("WarpPrismPhasing", gv_pLAYER_02_DOMINION, RegionCircle(UnitGetPosition(EventUnitProgressUnit()), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 1)) {
        auto80DA9DC4_val = libNtve_gf_TriggeringProgressUnitType();
        if (auto80DA9DC4_val == "Zealot") {
            UnitGroupAdd(gv_enemyEventZealots, EventUnitProgressUnit());
        }
        else if (auto80DA9DC4_val == "Stalker") {
            UnitGroupAdd(gv_enemyEventStalkers, EventUnitProgressUnit());
        }
        else {
        }
        AISetUnitSuicide(EventUnitProgressUnit(), true);
        libNtve_gf_AICast(EventUnitProgressUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(11)));
        return true;
    }

    if ((libNtve_gf_UnitInRegion(EventUnitProgressUnit(), RegionFromId(19)) == true)) {
        AISetUnitSuicide(EventUnitProgressUnit(), true);
        libNtve_gf_AICast(EventUnitProgressUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(19)));
        return true;
    }
    else if ((libNtve_gf_UnitInRegion(EventUnitProgressUnit(), RegionFromId(23)) == true)) {
        AISetUnitSuicide(EventUnitProgressUnit(), true);
        libNtve_gf_AICast(EventUnitProgressUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(832)));
        return true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarpInUnitBehaviorEnemies_Init () {
    gt_WarpInUnitBehaviorEnemies = TriggerCreate("gt_WarpInUnitBehaviorEnemies_Func");
    TriggerAddEventUnitConstructProgress(gt_WarpInUnitBehaviorEnemies, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kill Rain
//--------------------------------------------------------------------------------------------------
bool gt_KillRain_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "RainSprinkle", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(3.0, c_timeAI);
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionEntireMap(), "RainSprinkle");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KillRain_Init () {
    gt_KillRain = TriggerCreate("gt_KillRain_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Lights
//--------------------------------------------------------------------------------------------------
bool gt_ActivateLights_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "Aiur_Temple_GiantWalls", c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "Aiur_Temple_GiantWalls_Long", c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(6.666, c_timeAI);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "Aiur_Temple_GiantWalls", c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "Aiur_Temple_GiantWalls_Long", c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateLights_Init () {
    gt_ActivateLights = TriggerCreate("gt_ActivateLights_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Kills Critters
//--------------------------------------------------------------------------------------------------
bool gt_ZergKillsCritters_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_nearbyZergGroup;
    unit lv_iterUnit;

    // Automatic Variable Declarations
    unitgroup auto075978B0_g;
    int auto075978B0_u;
    unit auto075978B0_var;
    unitgroup autoCEEFF9AB_g;
    int autoCEEFF9AB_u;

    // Variable Initialization
    lv_nearbyZergGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    while ((libVCMI_gf_GameIsOver() == false) && (UnitGroupCount(gv_critterGroup, c_unitCountAlive) > 0)) {
        if ((libVCMI_gf_PlayerInCinematicModeCampaign() == false)) {
            auto075978B0_g = gv_critterGroup;
            auto075978B0_u = UnitGroupCount(auto075978B0_g, c_unitCountAll);
            for (;; auto075978B0_u -= 1) {
                auto075978B0_var = UnitGroupUnitFromEnd(auto075978B0_g, auto075978B0_u);
                if (auto075978B0_var == null) { break; }
                if ((libNtve_gf_UnitIsVisibleToPlayer(auto075978B0_var, gv_pLAYER_01_USER) == true) && (DistanceBetweenPoints(UnitGetPosition(auto075978B0_var), CameraGetTarget(gv_pLAYER_01_USER)) <= 20.0)) {
                    lv_nearbyZergGroup = UnitGroupEmpty();
                    lv_nearbyZergGroup = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionCircle(UnitGetPosition(auto075978B0_var), 12.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    autoCEEFF9AB_g = lv_nearbyZergGroup;
                    autoCEEFF9AB_u = UnitGroupCount(autoCEEFF9AB_g, c_unitCountAll);
                    for (;; autoCEEFF9AB_u -= 1) {
                        lv_iterUnit = UnitGroupUnitFromEnd(autoCEEFF9AB_g, autoCEEFF9AB_u);
                        if (lv_iterUnit == null) { break; }
                        if (((UnitGroupHasUnit(UnitGroupIdle(gv_pLAYER_02_DOMINION2, false), lv_iterUnit) == false) || (UnitCanAttackTarget(lv_iterUnit, auto075978B0_var) == false))) {
                            UnitGroupRemove(lv_nearbyZergGroup, lv_iterUnit);
                        }

                    }
                    if ((UnitGroupCount(lv_nearbyZergGroup, c_unitCountAlive) > 0)) {
                        libNtve_gf_AICast(UnitGroupClosestToPoint(lv_nearbyZergGroup, UnitGetPosition(auto075978B0_var)), OrderTargetingUnit(AbilityCommand("attack", 0), auto075978B0_var));
                    }

                }

            }
        }

        Wait(5.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergKillsCritters_Init () {
    gt_ZergKillsCritters = TriggerCreate("gt_ZergKillsCritters_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    cai_startall();
    libVCMI_gf_EnableVoidCampaignAIBehaviorForAllPlayers();
    cai_runall();
    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
        TriggerExecute(gt_AIUpgradesNormal, true, false);
    }
    else {
        TriggerExecute(gt_AIUpgradesHard, true, false);
    }
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION, RegionFromId(14), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Attack Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_FirstAttackWarningQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(80.0, c_timeAI);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/35E6D19B"), null, RegionGetCenter(RegionFromId(31)));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), RegionGetCenter(RegionFromId(31)), 3.0, Color(100.00, 0.00, 0.00));
    SoundPlayForPlayer(SoundLink("Event_Expedition03_ProtossAlarm", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeAI);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur03|Line00067", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstAttackWarningQ_Init () {
    gt_FirstAttackWarningQ = TriggerCreate("gt_FirstAttackWarningQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Left Attack Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_LeftAttackWarningQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(80.0, c_timeAI);
    gv_leftZerglingsSent = true;
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/86C48E0F"), null, PointFromId(1099));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(1099), 3.0, Color(100.00, 0.00, 0.00));
    SoundPlayForPlayer(SoundLink("Event_Expedition03_ProtossAlarm", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeAI);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur03|Line00109", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LeftAttackWarningQ_Init () {
    gt_LeftAttackWarningQ = TriggerCreate("gt_LeftAttackWarningQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Resources
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveResources_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION2, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION2, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveResources_Init () {
    gt_AIGiveResources = TriggerCreate("gt_AIGiveResources_Func");
    TriggerAddEventTimePeriodic(gt_AIGiveResources, 10.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrades (Normal)
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradesNormal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto8D1931B4_g;
    int auto8D1931B4_var;
    playergroup auto3BD13C9A_g;
    int auto3BD13C9A_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(720.0, c_timeAI);
    auto8D1931B4_g = gv_enemyPlayerGroup;
    auto8D1931B4_var = -1;
    while (true) {
        auto8D1931B4_var = PlayerGroupNextPlayer(auto8D1931B4_g, auto8D1931B4_var);
        if (auto8D1931B4_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto8D1931B4_var, "ProtossAirWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(auto8D1931B4_var, "ProtossGroundWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(auto8D1931B4_var, "ZergFlyerWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(auto8D1931B4_var, "ZergMeleeWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(auto8D1931B4_var, "ZergMissileWeaponsLevel1", 1);
    }
    Wait(360.0, c_timeAI);
    auto3BD13C9A_g = gv_enemyPlayerGroup;
    auto3BD13C9A_var = -1;
    while (true) {
        auto3BD13C9A_var = PlayerGroupNextPlayer(auto3BD13C9A_g, auto3BD13C9A_var);
        if (auto3BD13C9A_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto3BD13C9A_var, "ProtossAirArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(auto3BD13C9A_var, "ProtossGroundArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(auto3BD13C9A_var, "ProtossShieldsLevel1", 1);
        TechTreeUpgradeAddLevel(auto3BD13C9A_var, "ZergGroundArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(auto3BD13C9A_var, "ZergFlyerArmorsLevel1", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradesNormal_Init () {
    gt_AIUpgradesNormal = TriggerCreate("gt_AIUpgradesNormal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrades (Hard+)
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradesHard_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto2E9800BA_g;
    int auto2E9800BA_var;
    playergroup autoBEAFEA2E_g;
    int autoBEAFEA2E_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(720.0, c_timeAI);
    auto2E9800BA_g = gv_enemyPlayerGroup;
    auto2E9800BA_var = -1;
    while (true) {
        auto2E9800BA_var = PlayerGroupNextPlayer(auto2E9800BA_g, auto2E9800BA_var);
        if (auto2E9800BA_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto2E9800BA_var, "ProtossAirWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(auto2E9800BA_var, "ProtossGroundWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(auto2E9800BA_var, "ZergFlyerWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(auto2E9800BA_var, "ZergMeleeWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(auto2E9800BA_var, "ZergMissileWeaponsLevel2", 1);
    }
    Wait(360.0, c_timeAI);
    autoBEAFEA2E_g = gv_enemyPlayerGroup;
    autoBEAFEA2E_var = -1;
    while (true) {
        autoBEAFEA2E_var = PlayerGroupNextPlayer(autoBEAFEA2E_g, autoBEAFEA2E_var);
        if (autoBEAFEA2E_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoBEAFEA2E_var, "ProtossAirArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(autoBEAFEA2E_var, "ProtossGroundArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(autoBEAFEA2E_var, "ProtossShieldsLevel2", 1);
        TechTreeUpgradeAddLevel(autoBEAFEA2E_var, "ZergGroundArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(autoBEAFEA2E_var, "ZergFlyerArmorsLevel2", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradesHard_Init () {
    gt_AIUpgradesHard = TriggerCreate("gt_AIUpgradesHard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Near Protoss Base Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_PlayerNearProtossBaseWarningQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/F69D1F31"), null, PointFromId(465));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(465), 3.0, Color(100.00, 0.00, 0.00));
    Wait(1.0, c_timeAI);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur03|Line00110", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerNearProtossBaseWarningQ_Init () {
    gt_PlayerNearProtossBaseWarningQ = TriggerCreate("gt_PlayerNearProtossBaseWarningQ_Func");
    TriggerAddEventUnitRegion(gt_PlayerNearProtossBaseWarningQ, null, RegionFromId(17), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Near Zerg Base Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_PlayerNearZergBaseWarningQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/211CB477"), null, PointFromId(466));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(466), 3.0, Color(100.00, 0.00, 0.00));
    Wait(1.0, c_timeAI);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur03|Line00111", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerNearZergBaseWarningQ_Init () {
    gt_PlayerNearZergBaseWarningQ = TriggerCreate("gt_PlayerNearZergBaseWarningQ_Func");
    TriggerAddEventUnitRegion(gt_PlayerNearZergBaseWarningQ, null, RegionFromId(18), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Amon Taunt 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_AmonTaunt1Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur03|Line00071", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AmonTaunt1Q_Init () {
    gt_AmonTaunt1Q = TriggerCreate("gt_AmonTaunt1Q_Func");
    TriggerAddEventUnitRegion(gt_AmonTaunt1Q, null, RegionFromId(13), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Amon Taunt 2 Q
//--------------------------------------------------------------------------------------------------
bool gt_AmonTaunt2Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur03|Line00072", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AmonTaunt2Q_Init () {
    gt_AmonTaunt2Q = TriggerCreate("gt_AmonTaunt2Q_Func");
    TriggerAddEventUnitRegion(gt_AmonTaunt2Q, null, RegionFromId(10), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Amon Taunt 3 Q
//--------------------------------------------------------------------------------------------------
bool gt_AmonTaunt3Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur03|Line00073", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AmonTaunt3Q_Init () {
    gt_AmonTaunt3Q = TriggerCreate("gt_AmonTaunt3Q_Func");
    TriggerAddEventUnitRegion(gt_AmonTaunt3Q, null, RegionFromId(9), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libVCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libVCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/86C45FB7"), libVCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Activate Power Cells Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryActivatePowerCellsCompleted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto30CC0D33_g;
    int auto30CC0D33_u;
    unit auto30CC0D33_var;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_AchievementNoStructuresLost, false);
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_VictorySequence, true, false);
    auto30CC0D33_g = UnitGroup("AdunGenerator", gv_pLAYER_02_DOMINION4, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto30CC0D33_u = UnitGroupCount(auto30CC0D33_g, c_unitCountAll);
    for (;; auto30CC0D33_u -= 1) {
        auto30CC0D33_var = UnitGroupUnitFromEnd(auto30CC0D33_g, auto30CC0D33_u);
        if (auto30CC0D33_var == null) { break; }
        libNtve_gf_ChangeUnitDamage(auto30CC0D33_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryActivatePowerCellsCompleted_Init () {
    gt_VictoryActivatePowerCellsCompleted = TriggerCreate("gt_VictoryActivatePowerCellsCompleted_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveActivatePowerCellsComplete, true, true);
    libVCMI_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (gv_achievementStructureLost == false)) {
        libVoiC_gf_CampaignAwardAchievement("Anniversary_PAiur03", gv_pLAYER_01_USER);
        TriggerDebugOutput(1, StringExternal("Param/Value/331B7893"), false);
    }

    libVoiC_gf_CampaignAwardAchievement("PAiur03_1", gv_pLAYER_01_USER);
    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/F59538A4"), IntToText(gv_proxyPylonsWarpedIn));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/A9FE2F4A"), IntToText(gv_unitsWarpedInByWarpGates));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/54A9700A"), FixedToText(gv_shieldsRechargedByShieldBatteries, 0));
    libVCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    libVCMI_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: No Structures Lost
//--------------------------------------------------------------------------------------------------
bool gt_AchievementNoStructuresLost_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_achievementStructureLost = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementNoStructuresLost_Init () {
    gt_AchievementNoStructuresLost = TriggerCreate("gt_AchievementNoStructuresLost_Func");
    TriggerAddEventUnitDied(gt_AchievementNoStructuresLost, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Warp Tour
//--------------------------------------------------------------------------------------------------
bool gt_AchievementWarpTour_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto7A7EEE8F_g;
    int auto7A7EEE8F_u;
    unit auto7A7EEE8F_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitProgressUnit()) == "Zealot") || (UnitGetType(EventUnitProgressUnit()) == "Stalker")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto7A7EEE8F_g = gv_achievementWarpTourGroup;
    auto7A7EEE8F_u = UnitGroupCount(auto7A7EEE8F_g, c_unitCountAll);
    for (;; auto7A7EEE8F_u -= 1) {
        auto7A7EEE8F_var = UnitGroupUnitFromEnd(auto7A7EEE8F_g, auto7A7EEE8F_u);
        if (auto7A7EEE8F_var == null) { break; }
        if (((GameGetMissionTime() - UnitGetCustomValue(auto7A7EEE8F_var, 0)) > 10.0)) {
            UnitGroupRemove(gv_achievementWarpTourGroup, auto7A7EEE8F_var);
        }

    }
    UnitGroupAdd(gv_achievementWarpTourGroup, EventUnitProgressUnit());
    UnitSetCustomValue(EventUnitProgressUnit(), 0, GameGetMissionTime());
    if ((UnitGroupCount(gv_achievementWarpTourGroup, c_unitCountAlive) >= 5)) {
        TriggerEnable(TriggerGetCurrent(), false);
        libVoiC_gf_CampaignAwardAchievement("PAiur03_2", gv_pLAYER_01_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementWarpTour_Init () {
    gt_AchievementWarpTour = TriggerCreate("gt_AchievementWarpTour_Func");
    TriggerAddEventUnitConstructProgress(gt_AchievementWarpTour, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Sprinter Cell
//--------------------------------------------------------------------------------------------------
bool gt_AchievementSprinterCell_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((GameGetMissionTime() < 900.0) && (libLotv_gf_DifficultyValueInt2(0, 1, 1, 1) == 1)) {
        libVoiC_gf_CampaignAwardAchievement("PAiur03_3", gv_pLAYER_01_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementSprinterCell_Init () {
    gt_AchievementSprinterCell = TriggerCreate("gt_AchievementSprinterCell_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mastery: All Structures Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_MasteryAllStructuresDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION) || (UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION2)))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "CreepTumorBurrowed"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1) && (UnitGroupCount(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) == 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        libVoiC_gf_CampaignAwardAchievement("Mastery_Aiur03", gv_pLAYER_01_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MasteryAllStructuresDestroyed_Init () {
    gt_MasteryAllStructuresDestroyed = TriggerCreate("gt_MasteryAllStructuresDestroyed_Func");
    TriggerAddEventUnitDied(gt_MasteryAllStructuresDestroyed, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Proxy Pylon Warped In
//--------------------------------------------------------------------------------------------------
bool gt_ProxyPylonWarpedIn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_proxyPylonsWarpedIn += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProxyPylonWarpedIn_Init () {
    gt_ProxyPylonWarpedIn = TriggerCreate("gt_ProxyPylonWarpedIn_Func");
    TriggerAddEventUnitAbility(gt_ProxyPylonWarpedIn, null, AbilityCommand("SOAProxyPylon", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shield Battery Heals Unit
//--------------------------------------------------------------------------------------------------
bool gt_ShieldBatteryHealsUnit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_shieldsRechargedByShieldBatteries += EventUnitHealAmount();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShieldBatteryHealsUnit_Init () {
    gt_ShieldBatteryHealsUnit = TriggerCreate("gt_ShieldBatteryHealsUnit_Func");
    TriggerAddEventUnitHealed(gt_ShieldBatteryHealsUnit, null, c_unitVitalShields, "ShieldBatteryRechargeChanneled");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Warped In With Warp Gate
//--------------------------------------------------------------------------------------------------
bool gt_UnitWarpedInWithWarpGate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "WarpGate"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_unitsWarpedInByWarpGates += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitWarpedInWithWarpGate_Init () {
    gt_UnitWarpedInWithWarpGate = TriggerCreate("gt_UnitWarpedInWithWarpGate_Func");
    TriggerAddEventUnitConstructProgress(gt_UnitWarpedInWithWarpGate, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Ready Q
//--------------------------------------------------------------------------------------------------
bool gt_TipReadyQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVCMI_gf_DisplayMissionTip();
    Wait(libVCMI_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipReadyQ_Init () {
    gt_TipReadyQ = TriggerCreate("gt_TipReadyQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Activate Power Cells - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveActivatePowerCellsCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateObjectiveCampaign("PAiur03Primary01");
    gv_objectiveDestroyZergBase = ObjectiveLastCreated();
    libVCMI_gf_SetMissionObjectiveProgress("PAiur03Primary01", gv_powerCellActivated);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveActivatePowerCellsCreate_Init () {
    gt_ObjectiveActivatePowerCellsCreate = TriggerCreate("gt_ObjectiveActivatePowerCellsCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Activate Power Cells - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveActivatePowerCellsUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveActivatePowerCellsCreate, true, false);
    libVCMI_gf_SetMissionObjectiveProgress("PAiur03Primary01", gv_powerCellActivated);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveActivatePowerCellsUpdate_Init () {
    gt_ObjectiveActivatePowerCellsUpdate = TriggerCreate("gt_ObjectiveActivatePowerCellsUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Activate Power Cells - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveActivatePowerCellsComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveActivatePowerCellsCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PAiur03Primary01", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveActivatePowerCellsComplete_Init () {
    gt_ObjectiveActivatePowerCellsComplete = TriggerCreate("gt_ObjectiveActivatePowerCellsComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Power Up Warp Gates - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePowerUpWarpGatesCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateObjectiveCampaign("PAiur03Bonus01");
    gv_objectiveRescueStalkers = ObjectiveLastCreated();
    libVCMI_gf_SetMissionObjectiveProgress("PAiur03Bonus01", gv_warpGatesPowered);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePowerUpWarpGatesCreate_Init () {
    gt_ObjectivePowerUpWarpGatesCreate = TriggerCreate("gt_ObjectivePowerUpWarpGatesCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Power Up Warp Gates - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePowerUpWarpGatesUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectivePowerUpWarpGatesCreate, true, false);
    libVCMI_gf_SetMissionObjectiveProgress("PAiur03Bonus01", gv_warpGatesPowered);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePowerUpWarpGatesUpdate_Init () {
    gt_ObjectivePowerUpWarpGatesUpdate = TriggerCreate("gt_ObjectivePowerUpWarpGatesUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Power Up Warp Gates - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePowerUpWarpGatesComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectivePowerUpWarpGatesCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PAiur03Bonus01", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePowerUpWarpGatesComplete_Init () {
    gt_ObjectivePowerUpWarpGatesComplete = TriggerCreate("gt_ObjectivePowerUpWarpGatesComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoD2E8E87A_g;
    int autoD2E8E87A_u;
    unit autoD2E8E87A_var;
    unitgroup auto226A2B0C_g;
    int auto226A2B0C_u;
    unit auto226A2B0C_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, c_transitionDurationImmediate, true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    gv_introMinerals = PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals);
    gv_introGas = PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene);
    gv_introResourceCounts[0] = UnitGetPropertyFixed(UnitFromId(7), c_unitPropResources, c_unitPropCurrent);
    gv_introResourceCounts[1] = UnitGetPropertyFixed(UnitFromId(9), c_unitPropResources, c_unitPropCurrent);
    gv_introResourceCounts[2] = UnitGetPropertyFixed(UnitFromId(10), c_unitPropResources, c_unitPropCurrent);
    gv_introResourceCounts[3] = UnitGetPropertyFixed(UnitFromId(6), c_unitPropResources, c_unitPropCurrent);
    gv_introResourceCounts[4] = UnitGetPropertyFixed(UnitFromId(2), c_unitPropResources, c_unitPropCurrent);
    gv_introResourceCounts[5] = UnitGetPropertyFixed(UnitFromId(3), c_unitPropResources, c_unitPropCurrent);
    gv_introResourceCounts[6] = UnitGetPropertyFixed(UnitFromId(4), c_unitPropResources, c_unitPropCurrent);
    gv_introResourceCounts[7] = UnitGetPropertyFixed(UnitFromId(5), c_unitPropResources, c_unitPropCurrent);
    EnvironmentShow(c_environmentWater, false);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    autoD2E8E87A_g = UnitGroup(null, c_playerAny, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD2E8E87A_u = UnitGroupCount(autoD2E8E87A_g, c_unitCountAll);
    for (;; autoD2E8E87A_u -= 1) {
        autoD2E8E87A_var = UnitGroupUnitFromEnd(autoD2E8E87A_g, autoD2E8E87A_u);
        if (autoD2E8E87A_var == null) { break; }
        UnitGroupAdd(gv_cinematicHiddenUnits, autoD2E8E87A_var);
        libNtve_gf_ShowHideUnit(autoD2E8E87A_var, false);
    }
    auto226A2B0C_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto226A2B0C_u = UnitGroupCount(auto226A2B0C_g, c_unitCountAll);
    for (;; auto226A2B0C_u -= 1) {
        auto226A2B0C_var = UnitGroupUnitFromEnd(auto226A2B0C_g, auto226A2B0C_u);
        if (auto226A2B0C_var == null) { break; }
        UnitGroupAdd(gv_cinematicHiddenUnits, auto226A2B0C_var);
        libNtve_gf_ShowHideUnit(auto226A2B0C_var, false);
        UnitCreate(1, "Zergling", 0, gv_pLAYER_02_DOMINION2, UnitGetPosition(auto226A2B0C_var), UnitGetFacing(auto226A2B0C_var));
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitGroupAdd(gv_introZerglings, UnitLastCreated());
    }
    TriggerExecute(gt_IntroZerglings, true, false);
    Wait(0.0625, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(461), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(462), 10.0, -1, 10, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PAiur03_Music_Intro", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionEntireMap(), gv_pLAYER_01_USER);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 3.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur03|Line00082", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur03|Line00083", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_CreateUnitsAtPoint2(1, "Zealot", 0, gv_pLAYER_02_DOMINION, PointFromId(431));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitSetState(UnitLastCreated(), c_unitStateFidget, false);
    libNtve_gf_CreateUnitsAtPoint2(1, "Zealot", 0, gv_pLAYER_02_DOMINION, PointFromId(432));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitSetState(UnitLastCreated(), c_unitStateFidget, false);
    libNtve_gf_CreateUnitsAtPoint2(1, "Lasarra", 0, gv_pLAYER_02_DOMINION, PointFromId(433));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitSetState(UnitLastCreated(), c_unitStateFidget, false);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(UnitGetPosition(UnitLastCreated()), -4.0, 4.0)), c_orderQueueReplace);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(428), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(429), 6.0, -1, 10, true);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur03|Line00084", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(36), (SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Aiur03|Line00113", true), c_soundIndexAny)) - 1), -1, 10, true);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur03|Line00113", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    EnvironmentShow(c_environmentWater, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(463), 0.0, -1, 10, true);
    TriggerExecute(gt_IntroBriefingPowerCell, true, false);
    Wait(2.0, c_timeGame);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur03|Line00112", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(434), 0.0, -1, 10, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    SoundPlayForPlayer(SoundLink("Event_Purifier02_Zerg_Walla_01", -1), c_maxPlayers, PlayerGroupAll(), 300.0, 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur03|Line00086", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    SoundPlayForPlayer(SoundLink("Event_Purifier02_Zerg_Walla_02", -1), c_maxPlayers, PlayerGroupAll(), 400.0, 0.0);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(73), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(455), 8.0, -1, 10, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur03|Line00114", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur03|Line00115", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(4.0, c_timeReal);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(86), 4.0, -1, 10, true);
    libVCMI_gf_CreateReticleEffectAndTextTagAtPoint(libVCMI_ge_CampaginReticleType_ProtossMainObjective, libVCMI_ge_CampaginReticleSize_Medium, StringExternal("Param/Value/A4247E30"), PointFromId(71));
    gv_introReticle = libNtve_gf_ActorLastCreated();
    gv_introTextTag = TextTagLastCreated();
    TextTagSetPosition(gv_introTextTag, PointFromId(71), 0.0);
    libNtve_gf_CreateModelAtPoint("PylonPlacement", PointFromId(71));
    gv_introPylonHelper = libNtve_gf_ActorLastCreated();
    UnitIssueOrder(UnitFromId(123), OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(71)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(78), OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(71)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(39), OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(71)), c_orderQueueReplace);
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(2.0, c_timeReal);
    libNtve_gf_KillModel(gv_introReticle);
    TextTagDestroy(gv_introTextTag);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto99F1B18E_g;
    int auto99F1B18E_u;
    unit auto99F1B18E_var;
    unitgroup autoAB10D281_g;
    int autoAB10D281_u;
    unit autoAB10D281_var;
    unitgroup auto48B68733_g;
    int auto48B68733_u;
    unit auto48B68733_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_Silence", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    auto99F1B18E_g = gv_cinematicTempUnits;
    auto99F1B18E_u = UnitGroupCount(auto99F1B18E_g, c_unitCountAll);
    for (;; auto99F1B18E_u -= 1) {
        auto99F1B18E_var = UnitGroupUnitFromEnd(auto99F1B18E_g, auto99F1B18E_u);
        if (auto99F1B18E_var == null) { break; }
        UnitRemove(auto99F1B18E_var);
    }
    autoAB10D281_g = gv_cinematicHiddenUnits;
    autoAB10D281_u = UnitGroupCount(autoAB10D281_g, c_unitCountAll);
    for (;; autoAB10D281_u -= 1) {
        autoAB10D281_var = UnitGroupUnitFromEnd(autoAB10D281_g, autoAB10D281_u);
        if (autoAB10D281_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoAB10D281_var, true);
    }
    auto48B68733_g = gv_cinematicPausedUnits;
    auto48B68733_u = UnitGroupCount(auto48B68733_g, c_unitCountAll);
    for (;; auto48B68733_u -= 1) {
        auto48B68733_var = UnitGroupUnitFromEnd(auto48B68733_g, auto48B68733_u);
        if (auto48B68733_var == null) { break; }
        libNtve_gf_PauseUnit(auto48B68733_var, false);
    }
    if ((TriggerIsEnabled(gt_IntroBriefingPowerCell) == true)) {
        ActorSend(libNtve_gf_MainActorofUnit(gv_powerCells[1]), "Signal On");
    }

    UnitIssueOrder(UnitFromId(123), OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(71)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(78), OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(71)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(39), OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(71)), c_orderQueueReplace);
    TriggerStop(gt_IntroZerglings);
    EnvironmentShow(c_environmentWater, true);
    libNtve_gf_KillModel(gv_introReticle);
    libNtve_gf_KillModel(gv_introPylonHelper);
    TextTagDestroy(gv_introTextTag);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, gv_introMinerals);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, gv_introGas);
    UnitSetPropertyFixed(UnitFromId(7), c_unitPropResources, gv_introResourceCounts[0]);
    UnitSetPropertyFixed(UnitFromId(9), c_unitPropResources, gv_introResourceCounts[1]);
    UnitSetPropertyFixed(UnitFromId(10), c_unitPropResources, gv_introResourceCounts[2]);
    UnitSetPropertyFixed(UnitFromId(6), c_unitPropResources, gv_introResourceCounts[3]);
    UnitSetPropertyFixed(UnitFromId(2), c_unitPropResources, gv_introResourceCounts[4]);
    UnitSetPropertyFixed(UnitFromId(3), c_unitPropResources, gv_introResourceCounts[5]);
    UnitSetPropertyFixed(UnitFromId(4), c_unitPropResources, gv_introResourceCounts[6]);
    UnitSetPropertyFixed(UnitFromId(5), c_unitPropResources, gv_introResourceCounts[7]);
    UnitSetPropertyFixed(UnitFromId(1), c_unitPropEnergy, 0.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(12), true, false);
    TriggerExecute(gt_StartAI, true, false);
    Wait(0.5, c_timeReal);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libVCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, false);
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PlayerStartLocation(gv_pLAYER_01_USER), lv_fadeDuration);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Briefing Power Cell
//--------------------------------------------------------------------------------------------------
bool gt_IntroBriefingPowerCell_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ActorSend(libNtve_gf_MainActorofUnit(gv_powerCells[1]), "Signal On");
    Wait(1.0, c_timeGame);
    SoundPlayForPlayer(SoundLink("SOAPylonPowerImpact", 0), c_maxPlayers, PlayerGroupAll(), 40.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroBriefingPowerCell_Init () {
    gt_IntroBriefingPowerCell = TriggerCreate("gt_IntroBriefingPowerCell_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Zerglings
//--------------------------------------------------------------------------------------------------
bool gt_IntroZerglings_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto3C14713A_g;
    int auto3C14713A_u;
    unit auto3C14713A_var;

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeGame);
        auto3C14713A_g = gv_introZerglings;
        auto3C14713A_u = UnitGroupCount(auto3C14713A_g, c_unitCountAll);
        for (;; auto3C14713A_u -= 1) {
            auto3C14713A_var = UnitGroupUnitFromEnd(auto3C14713A_g, auto3C14713A_u);
            if (auto3C14713A_var == null) { break; }
            if ((RandomInt(1, 8) == 1)) {
                UnitIssueOrder(auto3C14713A_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(1))), c_orderQueueReplace);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroZerglings_Init () {
    gt_IntroZerglings = TriggerCreate("gt_IntroZerglings_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    unitgroup auto5FA536C3_g;
    int auto5FA536C3_u;
    unit auto5FA536C3_var;
    unitgroup autoDA575896_g;
    int autoDA575896_u;
    unit autoDA575896_var;
    unitgroup autoF96B4004_g;
    int autoF96B4004_u;
    unit autoF96B4004_var;
    unitgroup auto52602318_g;
    int auto52602318_u;
    unit auto52602318_var;
    unitgroup auto4C915169_g;
    int auto4C915169_u;
    unit auto4C915169_var;
    unitgroup auto8CC087CA_g;
    int auto8CC087CA_u;
    unit auto8CC087CA_var;
    unitgroup autoF9C1F688_g;
    int autoF9C1F688_u;
    unit autoF9C1F688_var;
    unitgroup auto7ABC03A8_g;
    int auto7ABC03A8_u;
    unit auto7ABC03A8_var;
    unitgroup autoB05850D8_g;
    int autoB05850D8_u;
    unit autoB05850D8_var;
    unitgroup auto5307D84C_g;
    int auto5307D84C_u;
    unit auto5307D84C_var;
    unitgroup auto6A100D74_g;
    int auto6A100D74_u;
    unit auto6A100D74_var;
    unitgroup auto59F19AB1_g;
    int auto59F19AB1_u;
    unit auto59F19AB1_var;
    unitgroup auto359E0C17_g;
    int auto359E0C17_u;
    unit auto359E0C17_var;
    unitgroup auto70240023_g;
    int auto70240023_u;
    unit auto70240023_var;
    const int auto7BB945B5_ae = 10;
    const int auto7BB945B5_ai = 1;
    const int auto785ACB2A_ae = 12;
    const int auto785ACB2A_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, 1.0, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    libNtve_gf_KillModel(gv_introReticle);
    TextTagDestroy(gv_introTextTag);
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionEntireMap(), "RainSprinkle");
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "Aiur_Temple_GiantWalls", c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "Aiur_Temple_GiantWalls_Long", c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    auto5FA536C3_g = UnitGroup("Gateway", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5FA536C3_u = UnitGroupCount(auto5FA536C3_g, c_unitCountAll);
    for (;; auto5FA536C3_u -= 1) {
        auto5FA536C3_var = UnitGroupUnitFromEnd(auto5FA536C3_g, auto5FA536C3_u);
        if (auto5FA536C3_var == null) { break; }
        TextTagDestroy(libHots_gf_TextTagForUnit(auto5FA536C3_var, 1));
        libNtve_gf_KillModel(libHots_gf_ActorForUnit(auto5FA536C3_var, 1));
    }
    TriggerEnable(gt_KillRain, false);
    TriggerEnable(gt_ActivateLights, false);
    EnvironmentShow(c_environmentWater, false);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    autoDA575896_g = UnitGroup("AdunGenerator", gv_pLAYER_02_DOMINION4, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDA575896_u = UnitGroupCount(autoDA575896_g, c_unitCountAll);
    for (;; autoDA575896_u -= 1) {
        autoDA575896_var = UnitGroupUnitFromEnd(autoDA575896_g, autoDA575896_u);
        if (autoDA575896_var == null) { break; }
        UnitSetState(autoDA575896_var, c_unitStateInvulnerable, true);
    }
    autoF96B4004_g = UnitGroup(null, c_playerAny, RegionFromId(28), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF96B4004_u = UnitGroupCount(autoF96B4004_g, c_unitCountAll);
    for (;; autoF96B4004_u -= 1) {
        autoF96B4004_var = UnitGroupUnitFromEnd(autoF96B4004_g, autoF96B4004_u);
        if (autoF96B4004_var == null) { break; }
        if ((autoF96B4004_var != UnitFromId(586))) {
            UnitRemove(autoF96B4004_var);
        }

    }
    auto52602318_g = UnitGroup(null, c_playerAny, RegionFromId(29), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto52602318_u = UnitGroupCount(auto52602318_g, c_unitCountAll);
    for (;; auto52602318_u -= 1) {
        auto52602318_var = UnitGroupUnitFromEnd(auto52602318_g, auto52602318_u);
        if (auto52602318_var == null) { break; }
        if ((auto52602318_var != UnitFromId(587))) {
            UnitRemove(auto52602318_var);
        }

    }
    auto4C915169_g = UnitGroup(null, c_playerAny, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4C915169_u = UnitGroupCount(auto4C915169_g, c_unitCountAll);
    for (;; auto4C915169_u -= 1) {
        auto4C915169_var = UnitGroupUnitFromEnd(auto4C915169_g, auto4C915169_u);
        if (auto4C915169_var == null) { break; }
        if ((auto4C915169_var != UnitFromId(587)) && (auto4C915169_var != UnitFromId(586))) {
            UnitRemove(auto4C915169_var);
        }

    }
    auto8CC087CA_g = UnitGroup(null, c_playerAny, RegionFromId(20), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8CC087CA_u = UnitGroupCount(auto8CC087CA_g, c_unitCountAll);
    for (;; auto8CC087CA_u -= 1) {
        auto8CC087CA_var = UnitGroupUnitFromEnd(auto8CC087CA_g, auto8CC087CA_u);
        if (auto8CC087CA_var == null) { break; }
        UnitRemove(auto8CC087CA_var);
    }
    autoF9C1F688_g = UnitGroup(null, c_playerAny, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF9C1F688_u = UnitGroupCount(autoF9C1F688_g, c_unitCountAll);
    for (;; autoF9C1F688_u -= 1) {
        autoF9C1F688_var = UnitGroupUnitFromEnd(autoF9C1F688_g, autoF9C1F688_u);
        if (autoF9C1F688_var == null) { break; }
        UnitRemove(autoF9C1F688_var);
    }
    auto7ABC03A8_g = UnitGroup(null, c_playerAny, RegionFromId(22), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7ABC03A8_u = UnitGroupCount(auto7ABC03A8_g, c_unitCountAll);
    for (;; auto7ABC03A8_u -= 1) {
        auto7ABC03A8_var = UnitGroupUnitFromEnd(auto7ABC03A8_g, auto7ABC03A8_u);
        if (auto7ABC03A8_var == null) { break; }
        UnitRemove(auto7ABC03A8_var);
    }
    autoB05850D8_g = UnitGroup("NydusCanal", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB05850D8_u = UnitGroupCount(autoB05850D8_g, c_unitCountAll);
    for (;; autoB05850D8_u -= 1) {
        autoB05850D8_var = UnitGroupUnitFromEnd(autoB05850D8_g, autoB05850D8_u);
        if (autoB05850D8_var == null) { break; }
        UnitRemove(autoB05850D8_var);
    }
    auto5307D84C_g = UnitGroup("WarpPrismPhasing", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5307D84C_u = UnitGroupCount(auto5307D84C_g, c_unitCountAll);
    for (;; auto5307D84C_u -= 1) {
        auto5307D84C_var = UnitGroupUnitFromEnd(auto5307D84C_g, auto5307D84C_u);
        if (auto5307D84C_var == null) { break; }
        UnitRemove(auto5307D84C_var);
    }
    auto6A100D74_g = UnitGroup("WarpPrism", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6A100D74_u = UnitGroupCount(auto6A100D74_g, c_unitCountAll);
    for (;; auto6A100D74_u -= 1) {
        auto6A100D74_var = UnitGroupUnitFromEnd(auto6A100D74_g, auto6A100D74_u);
        if (auto6A100D74_var == null) { break; }
        UnitRemove(auto6A100D74_var);
    }
    auto59F19AB1_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto59F19AB1_u = UnitGroupCount(auto59F19AB1_g, c_unitCountAll);
    for (;; auto59F19AB1_u -= 1) {
        auto59F19AB1_var = UnitGroupUnitFromEnd(auto59F19AB1_g, auto59F19AB1_u);
        if (auto59F19AB1_var == null) { break; }
        if ((libNtve_gf_UnitInRegion(auto59F19AB1_var, RegionFromId(12)) == false)) {
            UnitRemove(auto59F19AB1_var);
        }

    }
    auto359E0C17_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto359E0C17_u = UnitGroupCount(auto359E0C17_g, c_unitCountAll);
    for (;; auto359E0C17_u -= 1) {
        auto359E0C17_var = UnitGroupUnitFromEnd(auto359E0C17_g, auto359E0C17_u);
        if (auto359E0C17_var == null) { break; }
        UnitRemove(auto359E0C17_var);
    }
    auto70240023_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto70240023_u = UnitGroupCount(auto70240023_g, c_unitCountAll);
    for (;; auto70240023_u -= 1) {
        auto70240023_var = UnitGroupUnitFromEnd(auto70240023_g, auto70240023_u);
        if (auto70240023_var == null) { break; }
        UnitRemove(auto70240023_var);
    }
    lv_i = 1;
    for ( ; ( (auto7BB945B5_ai >= 0 && lv_i <= auto7BB945B5_ae) || (auto7BB945B5_ai < 0 && lv_i >= auto7BB945B5_ae) ) ; lv_i += auto7BB945B5_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathingBlocker4x4Diagonal", c_unitCreateIgnorePlacement, 0, PointFromName(("Victory Blocker " + IntToString(lv_i))));
    }
    lv_i = 1;
    for ( ; ( (auto785ACB2A_ai >= 0 && lv_i <= auto785ACB2A_ae) || (auto785ACB2A_ai < 0 && lv_i >= auto785ACB2A_ae) ) ; lv_i += auto785ACB2A_ai ) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Zealot", 0, gv_pLAYER_01_USER, PointFromName(("Victory Zealot " + IntToString(lv_i))));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(414), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(415), 12.0, -1, 10, true);
    TriggerExecute(gt_VictoryZergSpawning, true, false);
    TriggerExecute(gt_VictoryMusic, true, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_VictoryNydusWorms, true, false);
    TriggerExecute(gt_VictoryLaunchSequence, true, false);
    Wait(1.75, c_timeReal);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur03|Line00033", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TriggerExecute(gt_VictoryWarpOut, true, false);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur03|Line00034", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(0.25, c_timeReal);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur03|Line00035", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    while (!((gv_launchComplete == true))) {
        Wait(0.5, c_timeGame);
    }
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraShakeStop(gv_pLAYER_01_USER);
    libVCMI_gf_StopCinematicSounds();
    SoundStop(gv_loopSound, true);
    TriggerStop(gt_VictoryZergSpawning);
    TriggerStop(gt_VictoryNydusWorms);
    TriggerStop(gt_VictoryLaunchSequence);
    TriggerStop(gt_VictoryPlatformAnimations);
    TriggerStop(gt_VictoryArmAnimations);
    TriggerStop(gt_VictoryWarpOut);
    TriggerStop(gt_VictoryMusic);
    libVCMI_gf_CinematicModeCampaign(false, c_transitionDurationImmediate, false);
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Zerg Spawning
//--------------------------------------------------------------------------------------------------
bool gt_VictoryZergSpawning_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_enemiesLeft;
    unitgroup lv_enemiesRight;
    unitgroup lv_enemiesCenter;

    // Automatic Variable Declarations
    unitgroup auto445D3279_g;
    int auto445D3279_u;
    unit auto445D3279_var;
    const int autoF29EE8AC_n = 4;
    int autoF29EE8AC_i;
    unitgroup autoE7BC4D17_g;
    int autoE7BC4D17_u;
    unit autoE7BC4D17_var;
    const int autoB6D245DC_n = 4;
    int autoB6D245DC_i;
    unitgroup autoE9EB8CAF_g;
    int autoE9EB8CAF_u;
    unit autoE9EB8CAF_var;
    const int autoE65D6AB9_n = 4;
    int autoE65D6AB9_i;

    // Variable Initialization
    lv_enemiesLeft = UnitGroupEmpty();
    lv_enemiesRight = UnitGroupEmpty();
    lv_enemiesCenter = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        auto445D3279_g = lv_enemiesLeft;
        auto445D3279_u = UnitGroupCount(auto445D3279_g, c_unitCountAll);
        for (;; auto445D3279_u -= 1) {
            auto445D3279_var = UnitGroupUnitFromEnd(auto445D3279_g, auto445D3279_u);
            if (auto445D3279_var == null) { break; }
            if ((RandomInt(1, 4) == 1)) {
                UnitIssueOrder(auto445D3279_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(25))), c_orderQueueReplace);
            }

        }
        if ((UnitGroupCount(lv_enemiesLeft, c_unitCountAlive) < 8)) {
            for (autoF29EE8AC_i = 1; autoF29EE8AC_i <= autoF29EE8AC_n; autoF29EE8AC_i += 1) {
                if ((RandomInt(1, 5) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", 0, gv_pLAYER_02_DOMINION2, RegionRandomPoint(RegionFromId(20)));
                }
                else {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, gv_pLAYER_02_DOMINION, RegionRandomPoint(RegionFromId(20)));
                }
                UnitGroupAdd(lv_enemiesLeft, UnitLastCreated());
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(25))), c_orderQueueReplace);
                Wait(0.0625, c_timeGame);
            }
        }

        autoE7BC4D17_g = lv_enemiesRight;
        autoE7BC4D17_u = UnitGroupCount(autoE7BC4D17_g, c_unitCountAll);
        for (;; autoE7BC4D17_u -= 1) {
            autoE7BC4D17_var = UnitGroupUnitFromEnd(autoE7BC4D17_g, autoE7BC4D17_u);
            if (autoE7BC4D17_var == null) { break; }
            if ((RandomInt(1, 4) == 1)) {
                UnitIssueOrder(autoE7BC4D17_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(26))), c_orderQueueReplace);
            }

        }
        if ((UnitGroupCount(lv_enemiesRight, c_unitCountAlive) < 8)) {
            for (autoB6D245DC_i = 1; autoB6D245DC_i <= autoB6D245DC_n; autoB6D245DC_i += 1) {
                if ((RandomInt(1, 5) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", 0, gv_pLAYER_02_DOMINION2, RegionRandomPoint(RegionFromId(21)));
                }
                else {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, gv_pLAYER_02_DOMINION, RegionRandomPoint(RegionFromId(21)));
                }
                UnitGroupAdd(lv_enemiesRight, UnitLastCreated());
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(26))), c_orderQueueReplace);
                Wait(0.0625, c_timeGame);
            }
        }

        autoE9EB8CAF_g = lv_enemiesCenter;
        autoE9EB8CAF_u = UnitGroupCount(autoE9EB8CAF_g, c_unitCountAll);
        for (;; autoE9EB8CAF_u -= 1) {
            autoE9EB8CAF_var = UnitGroupUnitFromEnd(autoE9EB8CAF_g, autoE9EB8CAF_u);
            if (autoE9EB8CAF_var == null) { break; }
            if ((RandomInt(1, 4) == 1)) {
                UnitIssueOrder(autoE9EB8CAF_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(27))), c_orderQueueReplace);
            }

        }
        if ((UnitGroupCount(lv_enemiesCenter, c_unitCountAlive) < 8)) {
            for (autoE65D6AB9_i = 1; autoE65D6AB9_i <= autoE65D6AB9_n; autoE65D6AB9_i += 1) {
                if ((RandomInt(1, 5) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", 0, gv_pLAYER_02_DOMINION2, RegionRandomPoint(RegionFromId(22)));
                }
                else {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, gv_pLAYER_02_DOMINION, RegionRandomPoint(RegionFromId(22)));
                }
                UnitGroupAdd(lv_enemiesCenter, UnitLastCreated());
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(27))), c_orderQueueReplace);
                Wait(0.0625, c_timeGame);
            }
        }

        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryZergSpawning_Init () {
    gt_VictoryZergSpawning = TriggerCreate("gt_VictoryZergSpawning_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Launch Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictoryLaunchSequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_VictoryBatsFlyOut, true, false);
    TriggerExecute(gt_VictoryBridgeAnimations, true, false);
    TriggerExecute(gt_VictoryPlatformAnimations, true, false);
    Wait(15.0, c_timeGame);
    TriggerExecute(gt_VictoryArmAnimations, true, false);
    Wait(15.667, c_timeGame);
    TriggerExecute(gt_VictoryLaunchAnimations, true, false);
    Wait(6.0, c_timeGame);
    gv_launchComplete = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryLaunchSequence_Init () {
    gt_VictoryLaunchSequence = TriggerCreate("gt_VictoryLaunchSequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Bats Fly Out
//--------------------------------------------------------------------------------------------------
bool gt_VictoryBatsFlyOut_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(32), "AiurBat", c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(5.666, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(32), "AiurBat", c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryBatsFlyOut_Init () {
    gt_VictoryBatsFlyOut = TriggerCreate("gt_VictoryBatsFlyOut_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Bridge Animations
//--------------------------------------------------------------------------------------------------
bool gt_VictoryBridgeAnimations_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraShake(gv_pLAYER_01_USER, "Light", "Earthquake", 0.5, 0.5, 2.0);
    libNtve_gf_KillDoodadsInRegion(RegionFromId(32), "Aiur_Temple_CliffDoodads_Destructible");
    UnitKill(UnitFromId(586));
    UnitKill(UnitFromId(587));
    libVCMI_gf_PlaySoundCinematic(SoundLink("Event_Aiur03_End_Platform_Rock_Explo", -1), PlayerGroupAll(), 70.0, 0.0);
    libVCMI_gf_PlaySoundCinematic(SoundLink("Event_Aiur03_End_Platform_Ground_Explo", -1), PlayerGroupAll(), 70.0, 0.01);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryBridgeAnimations_Init () {
    gt_VictoryBridgeAnimations = TriggerCreate("gt_VictoryBridgeAnimations_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Platform Animations
//--------------------------------------------------------------------------------------------------
bool gt_VictoryPlatformAnimations_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(354)), c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.17, c_timeGame);
    libVCMI_gf_PlaySoundCinematic(SoundLink("Event_Aiur03_Victory_GroundDoor_Lower", -1), PlayerGroupAll(), 100.0, 0.0);
    libVCMI_gf_PlaySoundCinematic(SoundLink("PAiur03_PlatformEngage", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(3.3, c_timeGame);
    libVCMI_gf_PlaySoundCinematic(SoundLink("Event_Aiur03_Victory_GroundDoor_Retract", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_loopSound = SoundLastPlayed();
    Wait(7.5, c_timeGame);
    libVCMI_gf_PlaySoundCinematic(SoundLink("PAiur03_PlatformFinish", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(0.667, c_timeGame);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(354)), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryPlatformAnimations_Init () {
    gt_VictoryPlatformAnimations = TriggerCreate("gt_VictoryPlatformAnimations_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Arm Animations
//--------------------------------------------------------------------------------------------------
bool gt_VictoryArmAnimations_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(854), 6.0, -1, 10, true);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(126)), c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    libVCMI_gf_PlaySoundCinematic(SoundLink("Event_Aiur03_Victory_SoA_RollOut", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(0.5, c_timeGame);
    libVCMI_gf_PlaySoundCinematic(SoundLink("PAiur03_ArmsInitiate", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(1.5, c_timeGame);
    libVCMI_gf_PlaySoundCinematic(SoundLink("PAiur03_ArmsExtend1", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(4.5, c_timeGame);
    CameraShake(gv_pLAYER_01_USER, "Light", "Shake", 3.0, 0.0, 4.5);
    libVCMI_gf_PlaySoundCinematic(SoundLink("PAiur03_ArmsExtend2", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(4.5, c_timeGame);
    libVCMI_gf_PlaySoundCinematic(SoundLink("PAiur03_ArmsRetract", -1), PlayerGroupAll(), 100.0, 0.0);
    libVCMI_gf_PlaySoundCinematic(SoundLink("PAiur03_Event_Aiur03_Victory_Quake", -1), PlayerGroupAll(), 100.0, 0.0);
    CameraShake(gv_pLAYER_01_USER, "Medium", "Shake", 1.0, 0.0, 6.0);
    Wait(5.666, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryArmAnimations_Init () {
    gt_VictoryArmAnimations = TriggerCreate("gt_VictoryArmAnimations_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Launch Animations
//--------------------------------------------------------------------------------------------------
bool gt_VictoryLaunchAnimations_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_VictoryArmAnimations);
    CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 0.0, 5.0, 6.0);
    SoundPlayForPlayer(SoundLink("Korhal02_Quad_Amb_Camera_Shake", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("Event_Space02_CameraQuake", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(126)), c_animNameDefault, "Stand Work End", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryLaunchAnimations_Init () {
    gt_VictoryLaunchAnimations = TriggerCreate("gt_VictoryLaunchAnimations_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Warp Out
//--------------------------------------------------------------------------------------------------
bool gt_VictoryWarpOut_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_protossUnits;
    unit lv_currentUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_protossUnits = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_protossUnits = UnitGroup(null, gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    while (true) {
        Wait(0.125, c_timeGame);
        if ((libNtve_gf_UnitGroupIsDead(lv_protossUnits) == true)) {
            return true;
        }

        lv_currentUnit = UnitGroupRandomUnit(lv_protossUnits, c_unitCountAlive);
        gf_VictoryWarpOutUnit(lv_currentUnit);
        UnitGroupRemove(lv_protossUnits, lv_currentUnit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryWarpOut_Init () {
    gt_VictoryWarpOut = TriggerCreate("gt_VictoryWarpOut_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Nydus Worms
//--------------------------------------------------------------------------------------------------
bool gt_VictoryNydusWorms_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(6.0, c_timeGame);
    gf_VictorySpawnNydusWorm(PointFromId(303));
    Wait(4.0, c_timeGame);
    gf_VictorySpawnNydusWorm(PointFromId(758));
    Wait(4.0, c_timeGame);
    gf_VictorySpawnNydusWorm(PointFromId(786));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryNydusWorms_Init () {
    gt_VictoryNydusWorms = TriggerCreate("gt_VictoryNydusWorms_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Music
//--------------------------------------------------------------------------------------------------
bool gt_VictoryMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    lv_soundtrack = "PAiur03_Music_Outro";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_Silence", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryMusic_Init () {
    gt_VictoryMusic = TriggerCreate("gt_VictoryMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04MusicSound_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_PlayerUnitCreated_Init();
    gt_PlayerUnitTransforms_Init();
    gt_PlayerRescuesUnit_Init();
    gt_StartGameQ_Init();
    gt_DeployPylonQ_Init();
    gt_PlayerPressesDeployPylon_Init();
    gt_DeployPylonUnitsPowered_Init();
    gt_ExplainDefensesQ_Init();
    gt_TeachWarpGatesQ_Init();
    gt_GatewayConstructed_Init();
    gt_WarpGateTransformed_Init();
    gt_ActivatePowerCell2_Init();
    gt_ActivatePowerCell3_Init();
    gt_ActivatePowerCell4_Init();
    gt_ActivatePowerCell5_Init();
    gt_PowerCellActivatedQ_Init();
    gt_PowerCell3SurpriseUltralisk_Init();
    gt_PowerCell4Reinforcements1_Init();
    gt_PowerCell4Reinforcements2_Init();
    gt_IntroduceUnpoweredWarpGatesQ_Init();
    gt_WarpGatePowered_Init();
    gt_WarpGatePoweredUpQ_Init();
    gt_BonusProximityTrigger_Init();
    gt_RemindPlayerAboutWarpGatesQ_Init();
    gt_EventWave1_Init();
    gt_EventWave2_Init();
    gt_EventWave3_Init();
    gt_WarpInUnitBehaviorEnemies_Init();
    gt_KillRain_Init();
    gt_ActivateLights_Init();
    gt_ZergKillsCritters_Init();
    gt_StartAI_Init();
    gt_FirstAttackWarningQ_Init();
    gt_LeftAttackWarningQ_Init();
    gt_AIGiveResources_Init();
    gt_AIUpgradesNormal_Init();
    gt_AIUpgradesHard_Init();
    gt_PlayerNearProtossBaseWarningQ_Init();
    gt_PlayerNearZergBaseWarningQ_Init();
    gt_AmonTaunt1Q_Init();
    gt_AmonTaunt2Q_Init();
    gt_AmonTaunt3Q_Init();
    gt_DefeatBaseDead_Init();
    gt_VictoryActivatePowerCellsCompleted_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_AchievementNoStructuresLost_Init();
    gt_AchievementWarpTour_Init();
    gt_AchievementSprinterCell_Init();
    gt_MasteryAllStructuresDestroyed_Init();
    gt_ProxyPylonWarpedIn_Init();
    gt_ShieldBatteryHealsUnit_Init();
    gt_UnitWarpedInWithWarpGate_Init();
    gt_TipReadyQ_Init();
    gt_ObjectiveActivatePowerCellsCreate_Init();
    gt_ObjectiveActivatePowerCellsUpdate_Init();
    gt_ObjectiveActivatePowerCellsComplete_Init();
    gt_ObjectivePowerUpWarpGatesCreate_Init();
    gt_ObjectivePowerUpWarpGatesUpdate_Init();
    gt_ObjectivePowerUpWarpGatesComplete_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_IntroBriefingPowerCell_Init();
    gt_IntroZerglings_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
    gt_VictoryZergSpawning_Init();
    gt_VictoryLaunchSequence_Init();
    gt_VictoryBatsFlyOut_Init();
    gt_VictoryBridgeAnimations_Init();
    gt_VictoryPlatformAnimations_Init();
    gt_VictoryArmAnimations_Init();
    gt_VictoryLaunchAnimations_Init();
    gt_VictoryWarpOut_Init();
    gt_VictoryNydusWorms_Init();
    gt_VictoryMusic_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}
