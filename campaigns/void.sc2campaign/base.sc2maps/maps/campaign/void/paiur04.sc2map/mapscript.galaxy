//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Templar's Return
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"
include "TriggerLibs/VoidLib"
include "TriggerLibs/VoidCampaignLib"
include "TriggerLibs/VoidCampaignMissionLib"
include "TriggerLibs/VoidCampaignUILib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libHots_InitLib();
    libLotv_InitLib();
    libVoiC_InitLib();
    libVCMI_InitLib();
    libVCUI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_PROTOSS_NEUTRAL = 2;
const int gv_pLAYER_03_UNSTABLE_ENERGY = 3;
const int gv_pLAYER_04_PROTOSS_ALLY = 4;
const int gv_pLAYER_05_AMONS_FORCES = 5;
const int gv_pLAYER_06_AMONS_FORCES = 6;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
string gv_mapMusicTrack;
int gv_primaryObjectivePing;
int gv_currentEnvironment;
unitgroup gv_activePlayerUnits;
unitgroup gv_activeEnemyUnits;
bool gv_citadelComplete;
unit gv_alarak;
unit gv_vorazun;
actor gv_destructionWaveReticle;
int gv_destructionWaveTag;
actor gv_shadowDashReticle;
int gv_shadowDashTag;
revealer gv_shadowDashRevealer;
bool gv_shadowDashUsed;
unitgroup gv_overseerGroup;
unitgroup gv_bridgeNydusZerg;
unit gv_finalOverseer1;
unit gv_finalOverseer2;
unitgroup gv_gate1Zerg;
unit gv_alarakBeacon;
unit gv_alarakChannelEffect;
timer gv_protectAlarakTimer;
int gv_protectAlarakWindow;
actor gv_alarakBlastWave;
bool gv_alarakChanneling;
bool gv_templeComplete;
unit gv_karax;
unit gv_fenix;
actor gv_reclamationReticle;
int gv_reclamationTag;
unit gv_superWarpGateAmon;
unitgroup gv_templePatrolLeft;
unitgroup gv_templePatrolRight;
unitgroup gv_templePatrolMiddle;
unitgroup gv_hybridGroup;
bool gv_repeatedPatrolsActivated;
unit gv_templeBarrierBeacon;
bool gv_firstBarrierTransmissionIssued;
unit gv_artanis;
bool gv_artanisHealUsed;
unit gv_activeEnergyCloud;
fixed gv_energyCloudSpeed;
int gv_energyCloudPing;
int gv_unitsKilledByCloud;
unitgroup gv_purifierReinforcements;
unitgroup gv_hiveCluster1Buildings;
revealer gv_hiveCluster1Revealer;
unitgroup gv_darkTemplarReinforcements;
unitgroup gv_hiveCluster2Buildings;
revealer gv_hiveCluster2Revealer;
unitgroup gv_cavernsAntechamberEnemies;
unitgroup gv_cavernsAccessPointEnemies;
int gv_vorazunDetectedDuration;
fixed gv_vorazunDamageTaken;
int gv_karaxEnemiesReclaimed;
bool gv_reclaimAchievementGranted;
timer gv_achievementSectionOneTimer;
timer gv_achievementSectionTwoTimer;
timer gv_achievementSectionThreeTimer;
int gv_objective_CitadelPowerStructure;
int gv_objectiveAlarakMustSurvive;
int gv_objective_AssembleArmy;
int gv_objective_TemplePowerStructure;
int gv_objective_KaraxAndFenixMustSurvive;
int gv_objectiveArtanisMustSurvive3;
int gv_objectiveArtanisMustSurvive;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicPausedUnits;
unitgroup gv_cinematicTempUnits;
bool gv_cinematicCompleted;
sound gv_midStinger;
sound gv_midCrystalSound;
unitgroup gv_midImmortals;
bool gv_templeCrystalBroken;
unit gv_victoryTargetDummy;

void InitGlobals () {
    gv_primaryObjectivePing = c_invalidPingId;
    gv_currentEnvironment = 1;
    gv_activePlayerUnits = UnitGroupEmpty();
    gv_activeEnemyUnits = UnitGroupEmpty();
    gv_destructionWaveTag = c_textTagNone;
    gv_shadowDashTag = c_textTagNone;
    gv_overseerGroup = UnitGroupEmpty();
    gv_bridgeNydusZerg = UnitGroupEmpty();
    gv_gate1Zerg = UnitGroupEmpty();
    gv_protectAlarakTimer = TimerCreate();
    gv_protectAlarakWindow = c_timerWindowNone;
    gv_reclamationTag = c_textTagNone;
    gv_superWarpGateAmon = UnitFromId(413);
    gv_templePatrolLeft = UnitGroupEmpty();
    gv_templePatrolRight = UnitGroupEmpty();
    gv_templePatrolMiddle = UnitGroupEmpty();
    gv_hybridGroup = UnitGroupEmpty();
    gv_energyCloudSpeed = 1.0;
    gv_energyCloudPing = c_invalidPingId;
    gv_purifierReinforcements = UnitGroupEmpty();
    gv_hiveCluster1Buildings = UnitGroupEmpty();
    gv_darkTemplarReinforcements = UnitGroupEmpty();
    gv_hiveCluster2Buildings = UnitGroupEmpty();
    gv_cavernsAntechamberEnemies = UnitGroupEmpty();
    gv_cavernsAccessPointEnemies = UnitGroupEmpty();
    gv_achievementSectionOneTimer = TimerCreate();
    gv_achievementSectionTwoTimer = TimerCreate();
    gv_achievementSectionThreeTimer = TimerCreate();
    gv_objective_CitadelPowerStructure = c_invalidObjectiveId;
    gv_objectiveAlarakMustSurvive = c_invalidObjectiveId;
    gv_objective_AssembleArmy = c_invalidObjectiveId;
    gv_objective_TemplePowerStructure = c_invalidObjectiveId;
    gv_objective_KaraxAndFenixMustSurvive = c_invalidObjectiveId;
    gv_objectiveArtanisMustSurvive3 = c_invalidObjectiveId;
    gv_objectiveArtanisMustSurvive = c_invalidObjectiveId;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_midImmortals = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_EnvironmentCitadeloftheExecutor ();
void gf_CreateOverlordTransport (point lp_spawnPoint, point lp_targetPoint, point lp_despawnPoint, string lp_cargoUnitType, int lp_cargoCount, int lp_player);
void gf_EnvironmentAncientTempleGrounds ();
void gf_WarpInHybridReaver (point lp_point);
void gf_EnvironmentXelNagaCaverns ();
void gf_CreateStaticEnergyCloud (int lp_index);
void gf_InfestorAI (unit lp_infestor);
void gf_CreateNydusWormCaverns (fixed lp_spawnDelayRange1, fixed lp_spawnDelayRange2, bool lp_lOOP, bool lp_tRICKLE, string lp_unit1, int lp_unit1Qty, string lp_unit2, int lp_unit2Qty, string lp_unit3, int lp_unit3Qty, point lp_nydusCreationPoint);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04MusicSound;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_DebugStage02AncientTempleGrounds;
trigger gt_DebugStage03XelNagaCaverns;
trigger gt_DebugOpen1;
trigger gt_DebugOpen2;
trigger gt_CitadelInit;
trigger gt_CitadelStartingSequence;
trigger gt_CitadelVictory;
trigger gt_CitadelCleanup;
trigger gt_DestructionWaveQ;
trigger gt_DestructionWave2Q;
trigger gt_DestructionWavePan;
trigger gt_DestructionWaveProximityTrigger;
trigger gt_DestructionWaveCameraTrigger;
trigger gt_DestructionWaveUsed;
trigger gt_DestructionWaveApproachIntercept;
trigger gt_DestructionWaveTargetDies;
trigger gt_ShadowDashPing;
trigger gt_ShadowDashUsed;
trigger gt_DefeatAlarakDead;
trigger gt_DefeatVorazunDead;
trigger gt_CitadelPeriodicAttackCheck;
trigger gt_CitadelZerg1;
trigger gt_CitadelZerg1Unburrow;
trigger gt_CitadelZerg2;
trigger gt_CitadelZerg3;
trigger gt_CitadelZerg4;
trigger gt_CitadelZerg5;
trigger gt_BridgeBanelingsRight;
trigger gt_BridgeBanelings1;
trigger gt_BridgeBanelings2;
trigger gt_NydusGauntlet;
trigger gt_NydusUltra;
trigger gt_OverseerQ;
trigger gt_OverseerPatrols;
trigger gt_Overseer4;
trigger gt_Mutalisks;
trigger gt_ActivateSwarmHosts;
trigger gt_FinalOverseerPatrol1;
trigger gt_FinalOverseerPatrol2Brutal;
trigger gt_ProtectAlarakOverlords;
trigger gt_ProtectAlarakZerg;
trigger gt_Gate1Q;
trigger gt_Gate1Blocker;
trigger gt_AboutDoneQ;
trigger gt_Gate1OpenedQ;
trigger gt_Gate2HintQ;
trigger gt_Gate2Blocker;
trigger gt_Gate2OpenedQ;
trigger gt_MutalisksQ;
trigger gt_Gate3Q;
trigger gt_FinalGatePan;
trigger gt_ProtectAlarakTimer;
trigger gt_ProtectAlarakWarningQ;
trigger gt_ProtectAlarakAlmostDoneQ;
trigger gt_TempleInit;
trigger gt_TempleStartingSequence;
trigger gt_TempleVictory;
trigger gt_TempleCleanup;
trigger gt_ReclamationQ;
trigger gt_ReclamationPan;
trigger gt_ReclamationProximityTrigger;
trigger gt_ReclamationCameraTrigger;
trigger gt_ReclamationUsed;
trigger gt_ReclamationTargetDies;
trigger gt_ReclamationUnitGroupSwaps;
trigger gt_PhaseCannonQ;
trigger gt_PhaseCannonUsed;
trigger gt_DefeatKaraxDead;
trigger gt_DefeatFenixDead;
trigger gt_UnitTraining;
trigger gt_TemplePeriodicAttackCheck;
trigger gt_TempleInitialEncounter;
trigger gt_TempleBridgeEncounter;
trigger gt_PathProtossLeft;
trigger gt_TemplePatrolLeft;
trigger gt_ReaverGroup;
trigger gt_TemplePatrolMiddle;
trigger gt_PathProtossRight;
trigger gt_TemplePatrolRight;
trigger gt_ColossusGroup;
trigger gt_TemplePatrolWarpIn;
trigger gt_RepeatedPatrolActivation;
trigger gt_HybridFight;
trigger gt_HybridReaverSpawns;
trigger gt_TempleSupplyChanges;
trigger gt__60SupplyQ;
trigger gt_EarlyBarrierQ;
trigger gt_WayIsOpenQ;
trigger gt_HybridQ;
trigger gt_GatewayCloisterLeftQ;
trigger gt_GatewayCloisterRightQ;
trigger gt_PurifyFenixQ;
trigger gt_ReaverAreaQ;
trigger gt_ColossusAreaQ;
trigger gt_CavernsInit;
trigger gt_CavernsStartingSequence;
trigger gt_CavernsVictory;
trigger gt_CavernsCleanup;
trigger gt_ArtanisHealUsed;
trigger gt_ArtanisHealReminderQ;
trigger gt_DefeatArtanisDead;
trigger gt_EnergyCloudController;
trigger gt_StaticEnergyClouds;
trigger gt_EnergyCloudQ;
trigger gt_UnitsKilledbyCloud;
trigger gt_EnergyCloudDamageRamp;
trigger gt_PurifierReinforcements;
trigger gt_PurifierVulnerability;
trigger gt_Purifier1Q;
trigger gt_Purifier2Q;
trigger gt_TransmissionPurifierRescueQ;
trigger gt_PurifierNydusCanals;
trigger gt_PressForwardQ;
trigger gt_HatcheryLarvaKill;
trigger gt_DarkTemplarReinforcements;
trigger gt_DarkTemplarVulnerability;
trigger gt_DarkTemplar1Q;
trigger gt_DarkTemplar2Q;
trigger gt_CavernsPeriodicAttackCheck;
trigger gt_CavernsAntechamberBattle;
trigger gt_CavernsAntechamberZerg1;
trigger gt_CavernsAntechamberZerg2;
trigger gt_CavernsCentralPassageZerg;
trigger gt_CavernsCentralChamberBattle;
trigger gt_CavernsNydusChamberBattle;
trigger gt_CavernsAccessPointArrival;
trigger gt_CavernsAccessPointArrivalQ;
trigger gt_CavernsAccessPointBattle;
trigger gt_CavernsAccessPointCaveLeft;
trigger gt_CavernsAccessPointCaveRight;
trigger gt_CavernsAccessPointCaveHelpers;
trigger gt_CavernsRockTowerBehavior;
trigger gt_StartAI;
trigger gt_AIGiveResources;
trigger gt_StatVorazunDamageTaken;
trigger gt_AchievementVorazunDamageTaken;
trigger gt_StatAchievementReclaimedArmy;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_ObjectiveCitadelPowerStructureCreate;
trigger gt_ObjectiveCitadelPowerStructureComplete;
trigger gt_ObjectiveAlarakandVorazunMustSurviveCreate;
trigger gt_ObjectiveAlarakandVorazunMustSurviveComplete;
trigger gt_ObjectiveAlarakandVorazunMustSurviveFailed;
trigger gt_ObjectiveAssembleanArmyCreate;
trigger gt_ObjectiveAssembleanArmyComplete;
trigger gt_ObjectiveTemplePowerStructureCreate;
trigger gt_ObjectiveTemplePowerStructureComplete;
trigger gt_ObjectiveKaraxandFenixMustSurviveCreate;
trigger gt_ObjectiveKaraxandFenixMustSurviveComplete;
trigger gt_ObjectiveKaraxandFenixMustSurviveFailed;
trigger gt_ObjectiveCavernsPowerStructureCreate;
trigger gt_ObjectiveCavernsPowerStructureComplete;
trigger gt_ObjectiveArtanisMustSurviveCreate;
trigger gt_ObjectiveArtanisMustSurviveComplete;
trigger gt_ObjectiveArtanisMustSurviveFailed;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_MidCitadelTempleQ;
trigger gt_MidCitadelTempleSetup;
trigger gt_MidCitadelTempleCinematic;
trigger gt_MidCitadelTempleCinematicEnd;
trigger gt_MidCitadelTempleCleanup;
trigger gt_MidCitadelCrystalExplosion;
trigger gt_MidTempleCavernsQ;
trigger gt_MidTempleCavernsSetup;
trigger gt_MidTempleCavernsCinematic;
trigger gt_MidTempleCavernsCinematicEnd;
trigger gt_MidTempleCavernsCleanup;
trigger gt_MidTempleCrystalExplosion;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;
trigger gt_VictoryCrystalExplosion;
trigger gt_VictoryRecallPlayerUnits;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_EnvironmentCitadeloftheExecutor () {
    // Automatic Variable Declarations
    // Implementation
    gv_currentEnvironment = 1;
    FogSetColor(Color(17.65, 26.67, 33.73));
    FogSetStartHeight(-0.9);
    FogSetDensity(0.06);
    FogSetFallOff(0.2);
    GameSetLighting("Aiur4City", 0.0);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_AiurInfested_Quad", c_soundtrackCueAny, c_soundtrackIndexAny, true);
}

trigger auto_gf_CreateOverlordTransport_Trigger = null;
point auto_gf_CreateOverlordTransport_lp_spawnPoint;
point auto_gf_CreateOverlordTransport_lp_targetPoint;
point auto_gf_CreateOverlordTransport_lp_despawnPoint;
string auto_gf_CreateOverlordTransport_lp_cargoUnitType;
int auto_gf_CreateOverlordTransport_lp_cargoCount;
int auto_gf_CreateOverlordTransport_lp_player;

void gf_CreateOverlordTransport (point lp_spawnPoint, point lp_targetPoint, point lp_despawnPoint, string lp_cargoUnitType, int lp_cargoCount, int lp_player) {
    auto_gf_CreateOverlordTransport_lp_spawnPoint = lp_spawnPoint;
    auto_gf_CreateOverlordTransport_lp_targetPoint = lp_targetPoint;
    auto_gf_CreateOverlordTransport_lp_despawnPoint = lp_despawnPoint;
    auto_gf_CreateOverlordTransport_lp_cargoUnitType = lp_cargoUnitType;
    auto_gf_CreateOverlordTransport_lp_cargoCount = lp_cargoCount;
    auto_gf_CreateOverlordTransport_lp_player = lp_player;

    if (auto_gf_CreateOverlordTransport_Trigger == null) {
        auto_gf_CreateOverlordTransport_Trigger = TriggerCreate("auto_gf_CreateOverlordTransport_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateOverlordTransport_Trigger, false, false);
}

bool auto_gf_CreateOverlordTransport_TriggerFunc (bool testConds, bool runActions) {
    point lp_spawnPoint = auto_gf_CreateOverlordTransport_lp_spawnPoint;
    point lp_targetPoint = auto_gf_CreateOverlordTransport_lp_targetPoint;
    point lp_despawnPoint = auto_gf_CreateOverlordTransport_lp_despawnPoint;
    string lp_cargoUnitType = auto_gf_CreateOverlordTransport_lp_cargoUnitType;
    int lp_cargoCount = auto_gf_CreateOverlordTransport_lp_cargoCount;
    int lp_player = auto_gf_CreateOverlordTransport_lp_player;

    // Variable Declarations
    unit lv_overlord;

    // Automatic Variable Declarations
    unitgroup auto05A664EC_g;
    int auto05A664EC_u;
    unit auto05A664EC_var;

    // Variable Initialization

    // Implementation
    if (((gv_citadelComplete == true) || (libVCMI_gf_GameIsOver() == true) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true))) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Overlord", 0, gv_pLAYER_05_AMONS_FORCES, lp_spawnPoint);
    lv_overlord = UnitLastCreated();
    UnitCargoCreate(lv_overlord, lp_cargoUnitType, lp_cargoCount);
    auto05A664EC_g = UnitCargoLastCreatedGroup();
    auto05A664EC_u = UnitGroupCount(auto05A664EC_g, c_unitCountAll);
    for (;; auto05A664EC_u -= 1) {
        auto05A664EC_var = UnitGroupUnitFromEnd(auto05A664EC_g, auto05A664EC_u);
        if (auto05A664EC_var == null) { break; }
        UnitSetCustomValue(auto05A664EC_var, 0, PointGetX(lp_targetPoint));
        UnitSetCustomValue(auto05A664EC_var, 1, PointGetY(lp_targetPoint));
        UnitGroupAdd(gv_activeEnemyUnits, auto05A664EC_var);
    }
    while (true) {
        if (((UnitIsAlive(lv_overlord) == false) || (UnitIsAlive(gv_alarak) == false) || (gv_citadelComplete == true) || (libVCMI_gf_GameIsOver() == true) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true))) {
            UnitIssueOrder(lv_overlord, OrderTargetingPoint(AbilityCommand("move", 0), lp_despawnPoint), c_orderQueueAddToEnd);
            return true;
        }

        if ((UnitGroupCount(UnitCargoGroup(lv_overlord), c_unitCountAlive) > 0)) {
            UnitIssueOrder(lv_overlord, OrderTargetingPoint(AbilityCommand("OverlordTransport", 2), lp_targetPoint), c_orderQueueReplace);
        }
        else {
            if ((libNtve_gf_UnitInRegion(lv_overlord, RegionCircle(lp_despawnPoint, 1.0)) == true)) {
                UnitRemove(lv_overlord);
            }
            else {
                UnitIssueOrder(lv_overlord, OrderTargetingPoint(AbilityCommand("move", 0), lp_despawnPoint), c_orderQueueAddToEnd);
            }
        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

void gf_EnvironmentAncientTempleGrounds () {
    // Automatic Variable Declarations
    // Implementation
    gv_currentEnvironment = 2;
    FogSetColor(Color(46.67, 52.55, 74.90));
    FogSetStartHeight(-0.5);
    FogSetDensity(0.06);
    FogSetFallOff(0.2);
    GameSetLighting("Aiur4City", 0.0);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Aiur_Jungle_Quad", c_soundtrackCueAny, c_soundtrackIndexAny, true);
}

trigger auto_gf_WarpInHybridReaver_Trigger = null;
point auto_gf_WarpInHybridReaver_lp_point;

void gf_WarpInHybridReaver (point lp_point) {
    auto_gf_WarpInHybridReaver_lp_point = lp_point;

    if (auto_gf_WarpInHybridReaver_Trigger == null) {
        auto_gf_WarpInHybridReaver_Trigger = TriggerCreate("auto_gf_WarpInHybridReaver_TriggerFunc");
    }

    TriggerExecute(auto_gf_WarpInHybridReaver_Trigger, false, false);
}

bool auto_gf_WarpInHybridReaver_TriggerFunc (bool testConds, bool runActions) {
    point lp_point = auto_gf_WarpInHybridReaver_lp_point;

    // Variable Declarations
    unit lv_hybrid;
    point lv_hybridPoint;
    actor lv_warpEffect;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libNtve_gf_CreateUnitsAtPoint2(1, "HybridReaver", 0, gv_pLAYER_05_AMONS_FORCES, lp_point);
    lv_hybrid = UnitLastCreated();
    libNtve_gf_ShowHideUnit(lv_hybrid, false);
    libNtve_gf_PauseUnit(lv_hybrid, true);
    Wait(0.0625, c_timeGame);
    lv_hybridPoint = UnitGetPosition(lv_hybrid);
    PointSetFacing(lv_hybridPoint, UnitGetFacing(lv_hybrid));
    Wait(0.0625, c_timeGame);
    libNtve_gf_CreateModelWithPointFacing("Aiur_City_HybridWarp", lv_hybridPoint);
    lv_warpEffect = libNtve_gf_ActorLastCreated();
    libNtve_gf_PlayAnimation(lv_warpEffect, c_animNameDefault, "Birth", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    SoundPlayAtPointForPlayer(SoundLink("Hybrid_WarpIn", -1), c_maxPlayers, PlayerGroupAll(), lv_hybridPoint, 0.0, 100.0, 0.0);
    Wait(2.0, c_timeGame);
    libNtve_gf_ShowHideUnit(lv_hybrid, true);
    libNtve_gf_PauseUnit(lv_hybrid, false);
    UnitGroupAdd(gv_hybridGroup, lv_hybrid);
    UnitSetInfoText(lv_hybrid, StringToText(""), StringExternal("Param/Value/E4288085"), StringToText(""));
    SoundPlayAtPointForPlayer(SoundLink("WarpGate_TrainFinish", -1), c_maxPlayers, PlayerGroupAll(), lv_hybridPoint, 0.0, 100.0, 0.0);
    Wait(4.667, c_timeGame);
    libNtve_gf_KillModel(lv_warpEffect);
    return true;
}

void gf_EnvironmentXelNagaCaverns () {
    // Automatic Variable Declarations
    // Implementation
    gv_currentEnvironment = 3;
    FogSetColor(Color(21.18, 30.20, 39.61));
    FogSetStartHeight(4.0);
    FogSetDensity(0.35);
    FogSetFallOff(0.4);
    GameSetLighting("Aiur4Temple", 0.0);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    if ((gv_templeCrystalBroken == true)) {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Aiur_Caverns_Quad", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }
    else {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_IceWorld", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }
}

trigger auto_gf_CreateStaticEnergyCloud_Trigger = null;
int auto_gf_CreateStaticEnergyCloud_lp_index;

void gf_CreateStaticEnergyCloud (int lp_index) {
    auto_gf_CreateStaticEnergyCloud_lp_index = lp_index;

    if (auto_gf_CreateStaticEnergyCloud_Trigger == null) {
        auto_gf_CreateStaticEnergyCloud_Trigger = TriggerCreate("auto_gf_CreateStaticEnergyCloud_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateStaticEnergyCloud_Trigger, false, false);
}

bool auto_gf_CreateStaticEnergyCloud_TriggerFunc (bool testConds, bool runActions) {
    int lp_index = auto_gf_CreateStaticEnergyCloud_lp_index;

    // Variable Declarations
    point lv_originalArea;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_originalArea = UnitGetPosition(gv_activeEnergyCloud);
    while (true) {
        Wait(1.0, c_timeAI);
        if (((libVCMI_gf_GameIsOver() == true) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true))) {
            return true;
        }

        if ((libNtve_gf_UnitInRegion(gv_activeEnergyCloud, RegionCircle(lv_originalArea, 2.0)) == false)) {
            break;
        }

    }
    Wait(6.0, c_timeAI);
    if (((libVCMI_gf_GameIsOver() == true) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true))) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "UnstableEnergy", c_unitCreateIgnorePlacement, gv_pLAYER_03_UNSTABLE_ENERGY, PointFromName(("Static Cloud " + IntToString(lp_index))));
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetOpacity");
    libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, gv_pLAYER_01_USER);
    Wait(0.0625, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetOpacity 1.000000 4.000000");
    return true;
}

trigger auto_gf_InfestorAI_Trigger = null;
unit auto_gf_InfestorAI_lp_infestor;

void gf_InfestorAI (unit lp_infestor) {
    auto_gf_InfestorAI_lp_infestor = lp_infestor;

    if (auto_gf_InfestorAI_Trigger == null) {
        auto_gf_InfestorAI_Trigger = TriggerCreate("auto_gf_InfestorAI_TriggerFunc");
    }

    TriggerExecute(auto_gf_InfestorAI_Trigger, false, false);
}

bool auto_gf_InfestorAI_TriggerFunc (bool testConds, bool runActions) {
    unit lp_infestor = auto_gf_InfestorAI_lp_infestor;

    // Variable Declarations
    unitgroup lv_enemyGroup9;
    point lv_targetPoint;

    // Automatic Variable Declarations
    const int autoED636053_n = 4;
    int autoED636053_i;

    // Variable Initialization
    lv_enemyGroup9 = UnitGroupEmpty();

    // Implementation
    UnitIssueOrder(lp_infestor, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    while ((UnitIsAlive(lp_infestor) == true) && (libVCMI_gf_GameIsOver() == false)) {
        lv_enemyGroup9 = UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lp_infestor), 9.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        if ((UnitGroupCount(lv_enemyGroup9, c_unitCountAlive) > 0)) {
            for (autoED636053_i = 1; autoED636053_i <= autoED636053_n; autoED636053_i += 1) {
                if ((UnitIsAlive(lp_infestor) == true)) {
                    if ((UnitGroupCount(lv_enemyGroup9, c_unitCountAlive) > 0)) {
                        lv_targetPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(UnitGroupRandomUnit(lv_enemyGroup9, c_unitCountAlive)), RandomFixed(0.0, 4.0), UnitGetPosition(lp_infestor));
                    }
                    else {
                        break;
                    }
                    UnitIssueOrder(lp_infestor, OrderTargetingPoint(AbilityCommand("InfestedTerrans", 0), lv_targetPoint), c_orderQueueReplace);
                    UnitIssueOrder(lp_infestor, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
                    Wait(0.25, c_timeAI);
                }
                else {
                    return true;
                }
            }
            if ((UnitGetPropertyFixed(lp_infestor, c_unitPropEnergy, c_unitPropCurrent) < 100.0)) {
                Wait(2.0, c_timeAI);
                if ((UnitIsAlive(lp_infestor) == true)) {
                    UnitIssueOrder(lp_infestor, Order(AbilityCommand("BurrowInfestorDown", 0)), c_orderQueueReplace);
                }

                return true;
            }

            Wait(5.0, c_timeAI);
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_gf_CreateNydusWormCaverns_Trigger = null;
fixed auto_gf_CreateNydusWormCaverns_lp_spawnDelayRange1;
fixed auto_gf_CreateNydusWormCaverns_lp_spawnDelayRange2;
bool auto_gf_CreateNydusWormCaverns_lp_lOOP;
bool auto_gf_CreateNydusWormCaverns_lp_tRICKLE;
string auto_gf_CreateNydusWormCaverns_lp_unit1;
int auto_gf_CreateNydusWormCaverns_lp_unit1Qty;
string auto_gf_CreateNydusWormCaverns_lp_unit2;
int auto_gf_CreateNydusWormCaverns_lp_unit2Qty;
string auto_gf_CreateNydusWormCaverns_lp_unit3;
int auto_gf_CreateNydusWormCaverns_lp_unit3Qty;
point auto_gf_CreateNydusWormCaverns_lp_nydusCreationPoint;

void gf_CreateNydusWormCaverns (fixed lp_spawnDelayRange1, fixed lp_spawnDelayRange2, bool lp_lOOP, bool lp_tRICKLE, string lp_unit1, int lp_unit1Qty, string lp_unit2, int lp_unit2Qty, string lp_unit3, int lp_unit3Qty, point lp_nydusCreationPoint) {
    auto_gf_CreateNydusWormCaverns_lp_spawnDelayRange1 = lp_spawnDelayRange1;
    auto_gf_CreateNydusWormCaverns_lp_spawnDelayRange2 = lp_spawnDelayRange2;
    auto_gf_CreateNydusWormCaverns_lp_lOOP = lp_lOOP;
    auto_gf_CreateNydusWormCaverns_lp_tRICKLE = lp_tRICKLE;
    auto_gf_CreateNydusWormCaverns_lp_unit1 = lp_unit1;
    auto_gf_CreateNydusWormCaverns_lp_unit1Qty = lp_unit1Qty;
    auto_gf_CreateNydusWormCaverns_lp_unit2 = lp_unit2;
    auto_gf_CreateNydusWormCaverns_lp_unit2Qty = lp_unit2Qty;
    auto_gf_CreateNydusWormCaverns_lp_unit3 = lp_unit3;
    auto_gf_CreateNydusWormCaverns_lp_unit3Qty = lp_unit3Qty;
    auto_gf_CreateNydusWormCaverns_lp_nydusCreationPoint = lp_nydusCreationPoint;

    if (auto_gf_CreateNydusWormCaverns_Trigger == null) {
        auto_gf_CreateNydusWormCaverns_Trigger = TriggerCreate("auto_gf_CreateNydusWormCaverns_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateNydusWormCaverns_Trigger, false, false);
}

bool auto_gf_CreateNydusWormCaverns_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_spawnDelayRange1 = auto_gf_CreateNydusWormCaverns_lp_spawnDelayRange1;
    fixed lp_spawnDelayRange2 = auto_gf_CreateNydusWormCaverns_lp_spawnDelayRange2;
    bool lp_lOOP = auto_gf_CreateNydusWormCaverns_lp_lOOP;
    bool lp_tRICKLE = auto_gf_CreateNydusWormCaverns_lp_tRICKLE;
    string lp_unit1 = auto_gf_CreateNydusWormCaverns_lp_unit1;
    int lp_unit1Qty = auto_gf_CreateNydusWormCaverns_lp_unit1Qty;
    string lp_unit2 = auto_gf_CreateNydusWormCaverns_lp_unit2;
    int lp_unit2Qty = auto_gf_CreateNydusWormCaverns_lp_unit2Qty;
    string lp_unit3 = auto_gf_CreateNydusWormCaverns_lp_unit3;
    int lp_unit3Qty = auto_gf_CreateNydusWormCaverns_lp_unit3Qty;
    point lp_nydusCreationPoint = auto_gf_CreateNydusWormCaverns_lp_nydusCreationPoint;

    // Variable Declarations
    int lv_extraUnit;
    unit lv_nydusWorm;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", c_unitCreateIgnorePlacement, gv_pLAYER_05_AMONS_FORCES, lp_nydusCreationPoint);
    lv_nydusWorm = UnitLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_nydusWorm), c_animNameDefault, "Birth 02", c_animFlagNonLooping, c_animTimeDefault);
    SoundPlayAtPointForPlayer(SoundLink("NydusWorm_Birth", -1), c_maxPlayers, PlayerGroupAll(), lp_nydusCreationPoint, 0.0, 100.0, 0.0);
    Wait(3.734, c_timeAI);
    while ((UnitIsAlive(lv_nydusWorm) == true)) {
        UnitCargoCreate(lv_nydusWorm, lp_unit1, lp_unit1Qty);
        UnitGroupAddUnitGroup(gv_activeEnemyUnits, UnitCargoLastCreatedGroup());
        UnitIssueOrder(lv_nydusWorm, Order(AbilityCommand("NydusCanalTransport", 1)), c_orderQueueReplace);
        Wait(RandomFixed(lp_spawnDelayRange1, lp_spawnDelayRange2), c_timeAI);
        UnitCargoCreate(lv_nydusWorm, lp_unit2, lp_unit2Qty);
        UnitGroupAddUnitGroup(gv_activeEnemyUnits, UnitCargoLastCreatedGroup());
        UnitIssueOrder(lv_nydusWorm, Order(AbilityCommand("NydusCanalTransport", 1)), c_orderQueueReplace);
        Wait(RandomFixed(lp_spawnDelayRange1, lp_spawnDelayRange2), c_timeAI);
        UnitCargoCreate(lv_nydusWorm, lp_unit3, lp_unit3Qty);
        UnitGroupAddUnitGroup(gv_activeEnemyUnits, UnitCargoLastCreatedGroup());
        UnitIssueOrder(lv_nydusWorm, Order(AbilityCommand("NydusCanalTransport", 1)), c_orderQueueReplace);
        Wait(RandomFixed(lp_spawnDelayRange1, lp_spawnDelayRange2), c_timeAI);
        if ((lp_lOOP == false)) {
            break;
        }

        while (!((UnitGroupCount(gv_activeEnemyUnits, c_unitCountAlive) <= 100))) {
            Wait(1.0, c_timeAI);
        }
    }
    while ((UnitIsAlive(lv_nydusWorm) == true) && (lp_tRICKLE == true)) {
        UnitCargoCreate(lv_nydusWorm, "Zergling", RandomInt(1, 3));
        UnitGroupAddUnitGroup(gv_activeEnemyUnits, UnitCargoLastCreatedGroup());
        UnitIssueOrder(lv_nydusWorm, Order(AbilityCommand("NydusCanalTransport", 1)), c_orderQueueReplace);
        lv_extraUnit = RandomInt(1, 4);
        if ((lv_extraUnit == 1)) {
            UnitCargoCreate(lv_nydusWorm, "Hydralisk", 1);
            UnitGroupAddUnitGroup(gv_activeEnemyUnits, UnitCargoLastCreatedGroup());
            UnitIssueOrder(lv_nydusWorm, Order(AbilityCommand("NydusCanalTransport", 1)), c_orderQueueReplace);
        }

        Wait(RandomFixed((lp_spawnDelayRange1*2.5), (lp_spawnDelayRange2*2.5)), c_timeAI);
        while (!((UnitGroupCount(gv_activeEnemyUnits, c_unitCountAlive) <= 100))) {
            Wait(1.0, c_timeAI);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_ULoadCampaignData("PAiur04");
    TriggerExecute(gt_Init01Technology, true, false);
    libVoiC_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init02Players, true, false);
    TriggerExecute(gt_Init03Units, true, false);
    TriggerExecute(gt_Init04MusicSound, true, false);
    TriggerExecute(gt_Init05Environment, true, false);
    TriggerExecute(gt_Init06Difficulties, true, false);
    TriggerExecute(gt_Init07Help, true, false);
    TriggerExecute(gt_IntroQ, true, true);
    TriggerExecute(gt_CitadelStartingSequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    libVoiC_gf_EnableDisableSpearofAdunChosenAbilities(false);
    libVCUI_gf_ShowSpearofAdunUI(false, c_transitionDurationDefault);
    libVoiC_gf_EnableCampaignTechUnit(false, "ImmortalShakuras", gv_pLAYER_01_USER);
    libVoiC_gf_EnableCampaignTechUnit(false, "ImmortalTaldarim", gv_pLAYER_01_USER);
    libVoiC_gf_EnableCampaignTechUnit(true, "ImmortalAiur", gv_pLAYER_01_USER);
    libVoiC_gf_EnableCampaignTechUnit(false, "SentryPurifier", gv_pLAYER_01_USER);
    libVoiC_gf_EnableCampaignTechUnit(false, "SentryTalDarim", gv_pLAYER_01_USER);
    libVoiC_gf_EnableCampaignTechUnit(true, "SentryAiur", gv_pLAYER_01_USER);
    libVoiC_gf_EnableCampaignTechUnit(false, "Colossus", gv_pLAYER_01_USER);
    libVoiC_gf_EnableCampaignTechUnit(false, "ColossusPurifier", gv_pLAYER_01_USER);
    libVoiC_gf_EnableCampaignTechUnit(false, "ColossusAiur", gv_pLAYER_01_USER);
    libVoiC_gf_EnableCampaignTechUnit(false, "ColossusTaldarim", gv_pLAYER_01_USER);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("GatewayTrain", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("GatewayTrain", 1), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("GatewayTrain", 6), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("GatewayTrain", 3), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("GatewayTrain", 4), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("UpgradeToWarpGate", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("UpgradeToRoboticsFacilityWarp", 0), false);
    TechTreeUpgradeAddLevel(gv_pLAYER_05_AMONS_FORCES, "overlordtransport", 1);
    libVoiC_gf_EnableCampaignTechUnit(false, "ImmortalShakuras", gv_pLAYER_05_AMONS_FORCES);
    libVoiC_gf_EnableCampaignTechUnit(false, "ImmortalTaldarim", gv_pLAYER_05_AMONS_FORCES);
    libVoiC_gf_EnableCampaignTechUnit(true, "ImmortalAiur", gv_pLAYER_05_AMONS_FORCES);
    libVoiC_gf_EnableCampaignTechUnit(false, "SentryPurifier", gv_pLAYER_05_AMONS_FORCES);
    libVoiC_gf_EnableCampaignTechUnit(false, "SentryTalDarim", gv_pLAYER_05_AMONS_FORCES);
    libVoiC_gf_EnableCampaignTechUnit(true, "SentryAiur", gv_pLAYER_05_AMONS_FORCES);
    libVoiC_gf_EnableCampaignTechUnit(false, "HighTemplarTaldarim", gv_pLAYER_05_AMONS_FORCES);
    libVoiC_gf_EnableCampaignTechUnit(false, "HighTemplarShakuras", gv_pLAYER_05_AMONS_FORCES);
    libVoiC_gf_EnableCampaignTechUnit(true, "HighTemplarAiur", gv_pLAYER_05_AMONS_FORCES);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_PROTOSS_NEUTRAL, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_03_UNSTABLE_ENERGY, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_04_PROTOSS_ALLY, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_05_AMONS_FORCES, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_06_AMONS_FORCES, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_02_PROTOSS_NEUTRAL, gv_pLAYER_03_UNSTABLE_ENERGY, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_02_PROTOSS_NEUTRAL, gv_pLAYER_04_PROTOSS_ALLY, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_02_PROTOSS_NEUTRAL, gv_pLAYER_05_AMONS_FORCES, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_02_PROTOSS_NEUTRAL, gv_pLAYER_06_AMONS_FORCES, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_03_UNSTABLE_ENERGY, gv_pLAYER_04_PROTOSS_ALLY, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_03_UNSTABLE_ENERGY, gv_pLAYER_05_AMONS_FORCES, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_03_UNSTABLE_ENERGY, gv_pLAYER_06_AMONS_FORCES, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_04_PROTOSS_ALLY, gv_pLAYER_05_AMONS_FORCES, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_04_PROTOSS_ALLY, gv_pLAYER_06_AMONS_FORCES, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_05_AMONS_FORCES, gv_pLAYER_06_AMONS_FORCES, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_PROTOSS_NEUTRAL, "HeroicShieldCleanUp", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_03_UNSTABLE_ENERGY, "HeroicShieldCleanUp", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_05_AMONS_FORCES, "HeroicShieldCleanUp", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_06_AMONS_FORCES, "HeroicShieldCleanUp", 1);
    PlayerSetAlliance(gv_pLAYER_04_PROTOSS_ALLY, c_allianceIdPushable, gv_pLAYER_01_USER, true);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 0);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 0);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropSuppliesMade, c_playerPropOperSetTo, 100);
    PlayerSetState(gv_pLAYER_02_PROTOSS_NEUTRAL, c_playerStateFoodIgnored, true);
    PlayerSetState(gv_pLAYER_04_PROTOSS_ALLY, c_playerStateFoodIgnored, true);
    PlayerSetState(gv_pLAYER_05_AMONS_FORCES, c_playerStateFoodIgnored, true);
    PlayerSetState(gv_pLAYER_06_AMONS_FORCES, c_playerStateFoodIgnored, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    libVCMI_gf_PM_DetectionUpgradesApply();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_CitadelInit, true, false);
    TriggerExecute(gt_TempleInit, true, false);
    TriggerExecute(gt_CavernsInit, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init04MusicSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04MusicSound_Init () {
    gt_Init04MusicSound = TriggerCreate("gt_Init04MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    libLbty_gf_AutoRevealRegion(RegionFromId(6), RegionFromId(12), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(16), RegionFromId(16), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(19), RegionFromId(19), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(35), RegionFromId(35), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(60), RegionFromId(60), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(61), RegionFromId(61), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(68), RegionFromId(68), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(69), RegionFromId(69), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(71), RegionFromId(71), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(44), RegionFromId(44), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(86), RegionFromId(86), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(87), RegionFromId(87), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(88), RegionFromId(88), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(101), RegionFromId(101), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(113), RegionFromId(113), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(114), RegionFromId(114), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(110), RegionFromId(110), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(115), RegionFromId(115), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(116), RegionFromId(116), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(119), RegionFromId(119), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(138), RegionFromId(138), gv_pLAYER_01_USER);
    ActorSend(ActorFromDoodad(DoodadFromId(1464)), "SetOpacity");
    ActorSend(ActorFromDoodad(DoodadFromId(1463)), "SetOpacity");
    ActorSend(ActorFromDoodad(DoodadFromId(58)), "SetOpacity");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
        TechTreeAbilityAllow(gv_pLAYER_05_AMONS_FORCES, AbilityCommand("FungalGrowth", 0), false);
        TechTreeAbilityAllow(gv_pLAYER_06_AMONS_FORCES, AbilityCommand("FungalGrowth", 0), false);
    }

    TechTreeUpgradeAddLevel(gv_pLAYER_05_AMONS_FORCES, "CentrificalHooks", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_06_AMONS_FORCES, "CentrificalHooks", 1);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        TechTreeUpgradeAddLevel(gv_pLAYER_05_AMONS_FORCES, "zerglingmovementspeed", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_05_AMONS_FORCES, "hydraliskspeed", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_05_AMONS_FORCES, "ChitinousPlating", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_06_AMONS_FORCES, "zerglingmovementspeed", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_06_AMONS_FORCES, "hydraliskspeed", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_06_AMONS_FORCES, "ChitinousPlating", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Zergling", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("InfestedTerranCampaign", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("InfestedCivilian", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Infestor", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("InfestedAbomination", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Baneling", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Hydralisk", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Roach", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Ultralisk", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("SwarmHost", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("NydusCanal", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Overseer", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("SpineCrawler", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Zealot", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Stalker", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Immortal", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Sentry", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Colossus", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Reaver", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("HybridBehemoth", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("HybridDestroyer", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("HybridDominatorVoid", false, gv_pLAYER_01_USER);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        libVoiC_gf_AddUnitTypeToUnitHelpPanel("Mutalisk", false, gv_pLAYER_01_USER);
    }

    libVCMI_gf_AddMissionCheat("Open1", "Open the first door in Stage 1", gt_DebugOpen1, libVCMI_ge_MissionCheatType_Stage, libVCMI_ge_MissionCheatUIType_Button);
    libVCMI_gf_AddMissionCheat("Open2", "Open the second door in Stage 1", gt_DebugOpen2, libVCMI_ge_MissionCheatType_Stage, libVCMI_ge_MissionCheatUIType_Button);
    libVCMI_gf_AddMissionCheat("Stage2", "Skip to the second mission stage", gt_DebugStage02AncientTempleGrounds, libVCMI_ge_MissionCheatType_Stage, libVCMI_ge_MissionCheatUIType_Button);
    libVCMI_gf_AddMissionCheat("Stage3", "Skip to the third mission stage", gt_DebugStage03XelNagaCaverns, libVCMI_ge_MissionCheatType_Stage, libVCMI_ge_MissionCheatUIType_Button);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Stage02 - Ancient Temple Grounds
//--------------------------------------------------------------------------------------------------
bool gt_DebugStage02AncientTempleGrounds_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(gt_CitadelVictory) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_CitadelCleanup, true, false);
    TriggerExecute(gt_MidCitadelTempleQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugStage02AncientTempleGrounds_Init () {
    gt_DebugStage02AncientTempleGrounds = TriggerCreate("gt_DebugStage02AncientTempleGrounds_Func");
    TriggerAddEventChatMessage(gt_DebugStage02AncientTempleGrounds, c_playerAny, "s2", true);
    TriggerAddEventChatMessage(gt_DebugStage02AncientTempleGrounds, c_playerAny, "Stage2", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Stage03 - Xel'Naga Caverns
//--------------------------------------------------------------------------------------------------
bool gt_DebugStage03XelNagaCaverns_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(gt_TempleVictory) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_DebugStage02AncientTempleGrounds, false);
    TriggerExecute(gt_CitadelCleanup, true, false);
    TriggerExecute(gt_TempleCleanup, true, false);
    TriggerExecute(gt_MidTempleCavernsQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugStage03XelNagaCaverns_Init () {
    gt_DebugStage03XelNagaCaverns = TriggerCreate("gt_DebugStage03XelNagaCaverns_Func");
    TriggerAddEventChatMessage(gt_DebugStage03XelNagaCaverns, c_playerAny, "s3", true);
    TriggerAddEventChatMessage(gt_DebugStage03XelNagaCaverns, c_playerAny, "Stage3", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Open1
//--------------------------------------------------------------------------------------------------
bool gt_DebugOpen1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(gt_CitadelVictory) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_Gate1OpenedQ, true, false);
    TriggerExecute(gt_ShadowDashUsed, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugOpen1_Init () {
    gt_DebugOpen1 = TriggerCreate("gt_DebugOpen1_Func");
    TriggerAddEventChatMessage(gt_DebugOpen1, c_playerAny, "open1", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Open2
//--------------------------------------------------------------------------------------------------
bool gt_DebugOpen2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(gt_CitadelVictory) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_Gate2OpenedQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugOpen2_Init () {
    gt_DebugOpen2 = TriggerCreate("gt_DebugOpen2_Func");
    TriggerAddEventChatMessage(gt_DebugOpen2, c_playerAny, "open2", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Citadel Init
//--------------------------------------------------------------------------------------------------
bool gt_CitadelInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto03681CF6_g;
    int auto03681CF6_u;
    unit auto03681CF6_var;
    unitgroup auto103518D1_g;
    int auto103518D1_u;
    unit auto103518D1_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto03681CF6_g = UnitGroup("Overseer", gv_pLAYER_05_AMONS_FORCES, RegionFromId(10), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto03681CF6_u = UnitGroupCount(auto03681CF6_g, c_unitCountAll);
    for (;; auto03681CF6_u -= 1) {
        auto03681CF6_var = UnitGroupUnitFromEnd(auto03681CF6_g, auto03681CF6_u);
        if (auto03681CF6_var == null) { break; }
        UnitSetPropertyFixed(auto03681CF6_var, c_unitPropMovementSpeed, 1.5);
        UnitSetCustomValue(auto03681CF6_var, 0, PointGetX(UnitGetPosition(auto03681CF6_var)));
        UnitSetCustomValue(auto03681CF6_var, 1, PointGetY(UnitGetPosition(auto03681CF6_var)));
        UnitIssueOrder(auto03681CF6_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        UnitGroupAdd(gv_overseerGroup, auto03681CF6_var);
    }
    auto103518D1_g = UnitGroup("SwarmHost", gv_pLAYER_05_AMONS_FORCES, RegionFromId(86), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto103518D1_u = UnitGroupCount(auto103518D1_g, c_unitCountAll);
    for (;; auto103518D1_u -= 1) {
        auto103518D1_var = UnitGroupUnitFromEnd(auto103518D1_g, auto103518D1_u);
        if (auto103518D1_var == null) { break; }
        AISetUnitScriptControlled(auto103518D1_var, true);
    }
    libVCMI_gf_SetUnitInfoTextCampaign(UnitFromId(1385), StringExternal("Param/Value/30A8D7F5"), StringExternal("Param/Value/E95FE600"), null);
    libVCMI_gf_SetUnitInfoTextCampaign(UnitFromId(4169), StringExternal("Param/Value/4F01FFAC"), StringExternal("Param/Value/3CB64151"), null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CitadelInit_Init () {
    gt_CitadelInit = TriggerCreate("gt_CitadelInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Citadel Starting Sequence
//--------------------------------------------------------------------------------------------------
bool gt_CitadelStartingSequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_achievementSectionOneTimer, 361.0, false, c_timeGame);
    libVCMI_gf_AddMissionTipCampaign("Alarak");
    libVCMI_gf_AddMissionTipCampaign("Vorazun");
    UnitGroupAdd(gv_activePlayerUnits, gv_alarak);
    UnitGroupAdd(gv_activePlayerUnits, gv_vorazun);
    libVCUI_gf_SetHeroPanelUnit(1, gv_alarak);
    libVCUI_gf_SetHeroPanelUnit(2, gv_vorazun);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeHeroPanel, true);
    UnitSelect(gv_alarak, gv_pLAYER_01_USER, true);
    UnitSelect(gv_vorazun, gv_pLAYER_01_USER, true);
    TriggerEnable(gt_CitadelPeriodicAttackCheck, true);
    TriggerEnable(gt_DestructionWaveCameraTrigger, true);
    TriggerExecute(gt_CitadelZerg2, true, false);
    TriggerExecute(gt_CitadelZerg3, true, false);
    TriggerExecute(gt_CitadelZerg4, true, false);
    TriggerExecute(gt_CitadelZerg5, true, false);
    TriggerExecute(gt_BridgeBanelings1, true, false);
    TriggerExecute(gt_BridgeBanelings2, true, false);
    TriggerExecute(gt_NydusGauntlet, true, false);
    TriggerExecute(gt_NydusUltra, true, false);
    TriggerExecute(gt_Gate2HintQ, true, false);
    TriggerExecute(gt_OverseerPatrols, true, false);
    TriggerExecute(gt_Mutalisks, true, false);
    Wait(2.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveCitadelPowerStructureCreate, true, false);
    TriggerExecute(gt_ObjectiveAlarakandVorazunMustSurviveCreate, true, true);
    libVCMI_gf_CreateObjectivePing(true, PointFromId(1193), StringExternal("Param/Value/5AB20E74"));
    gv_primaryObjectivePing = PingLastCreated();
    Wait(2.0, c_timeReal);
    TriggerQueueExit();
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_DestructionWavePan, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CitadelStartingSequence_Init () {
    gt_CitadelStartingSequence = TriggerCreate("gt_CitadelStartingSequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Citadel Victory
//--------------------------------------------------------------------------------------------------
bool gt_CitadelVictory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_alarak) == true))) {
            return false;
        }

        if (!((UnitIsAlive(gv_vorazun) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_citadelComplete = true;
    TriggerEnable(gt_DefeatAlarakDead, false);
    TriggerEnable(gt_DefeatVorazunDead, false);
    libNtve_gf_ChangeUnitDamage(gv_vorazun, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    libNtve_gf_ChangeUnitDamage(gv_alarak, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    PingDestroy(gv_primaryObjectivePing);
    if ((gv_vorazunDamageTaken == 0.0) && (libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        TriggerExecute(gt_AchievementVorazunDamageTaken, true, false);
    }

    TriggerExecute(gt_ObjectiveCitadelPowerStructureComplete, true, true);
    TriggerExecute(gt_ObjectiveAlarakandVorazunMustSurviveComplete, true, true);
    TriggerExecute(gt_MidCitadelTempleQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CitadelVictory_Init () {
    gt_CitadelVictory = TriggerCreate("gt_CitadelVictory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Citadel Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_CitadelCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto4ECD4417_g;
    int auto4ECD4417_u;
    unit auto4ECD4417_var;
    unitgroup auto67E12CAA_g;
    int auto67E12CAA_u;
    unit auto67E12CAA_var;
    unitgroup autoD3715977_g;
    int autoD3715977_u;
    unit autoD3715977_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto4ECD4417_g = gv_activeEnemyUnits;
    auto4ECD4417_u = UnitGroupCount(auto4ECD4417_g, c_unitCountAll);
    for (;; auto4ECD4417_u -= 1) {
        auto4ECD4417_var = UnitGroupUnitFromEnd(auto4ECD4417_g, auto4ECD4417_u);
        if (auto4ECD4417_var == null) { break; }
        UnitRemove(auto4ECD4417_var);
    }
    auto67E12CAA_g = UnitGroup(null, gv_pLAYER_05_AMONS_FORCES, RegionFromId(97), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto67E12CAA_u = UnitGroupCount(auto67E12CAA_g, c_unitCountAll);
    for (;; auto67E12CAA_u -= 1) {
        auto67E12CAA_var = UnitGroupUnitFromEnd(auto67E12CAA_g, auto67E12CAA_u);
        if (auto67E12CAA_var == null) { break; }
        UnitRemove(auto67E12CAA_var);
    }
    autoD3715977_g = UnitGroup(null, gv_pLAYER_06_AMONS_FORCES, RegionFromId(97), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoD3715977_u = UnitGroupCount(autoD3715977_g, c_unitCountAll);
    for (;; autoD3715977_u -= 1) {
        autoD3715977_var = UnitGroupUnitFromEnd(autoD3715977_g, autoD3715977_u);
        if (autoD3715977_var == null) { break; }
        UnitRemove(autoD3715977_var);
    }
    PingDestroy(gv_primaryObjectivePing);
    TriggerExecute(gt_ObjectiveCitadelPowerStructureComplete, true, false);
    ObjectiveShow(gv_objective_CitadelPowerStructure, PlayerGroupAll(), false);
    TriggerExecute(gt_ObjectiveAlarakandVorazunMustSurviveComplete, true, false);
    ObjectiveShow(gv_objectiveAlarakMustSurvive, PlayerGroupAll(), false);
    TriggerEnable(gt_DefeatAlarakDead, false);
    TriggerEnable(gt_DefeatVorazunDead, false);
    TriggerEnable(gt_CitadelPeriodicAttackCheck, false);
    TriggerEnable(gt_DestructionWaveCameraTrigger, false);
    TriggerStop(gt_CitadelZerg1Unburrow);
    TriggerStop(gt_CitadelZerg2);
    TriggerStop(gt_NydusUltra);
    gv_citadelComplete = true;
    libNtve_gf_KillModel(gv_destructionWaveReticle);
    TextTagDestroy(gv_destructionWaveTag);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "AlarakKnockback", false);
    libNtve_gf_KillModel(gv_shadowDashReticle);
    TextTagDestroy(gv_shadowDashTag);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "VorazunBlink", false);
    VisRevealerEnable(gv_shadowDashRevealer, false);
    libNtve_gf_KillModel(gv_alarakBlastWave);
    TimerWindowShow(gv_protectAlarakWindow, PlayerGroupAll(), false);
    TimerPause(gv_achievementSectionOneTimer, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CitadelCleanup_Init () {
    gt_CitadelCleanup = TriggerCreate("gt_CitadelCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Destruction Wave Q
//--------------------------------------------------------------------------------------------------
bool gt_DestructionWaveQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_citadelComplete == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_DestructionWavePan, false);
    if ((UnitIsAlive(UnitFromId(830)) == true)) {
        VisRevealArea(gv_pLAYER_01_USER, RegionFromId(6), 8.0, false);
        libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(UnitFromId(830)), 5.0, Color(100.00, 0.00, 0.00));
        UISetButtonFaceHighlighted(PlayerGroupAll(), "AlarakKnockback", true);
        libVCMI_gf_AttachReticleEffectAndTextTagOnUnit(libVCMI_ge_CampaginReticleType_ProtossEnemy, libVCMI_ge_CampaginReticleSize_Large, StringExternal("Param/Value/8934DDDE"), UnitFromId(830), "Ref_Origin");
        gv_destructionWaveReticle = libNtve_gf_ActorLastCreated();
        gv_destructionWaveTag = TextTagLastCreated();
        TextTagSetPosition(gv_destructionWaveTag, UnitGetPosition(UnitFromId(830)), 0.0);
        UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/4803D80E"), null, UnitGetPosition(UnitFromId(830)));
        TriggerEnable(gt_DestructionWaveUsed, true);
        Wait(1.0, c_timeReal);
    }

    TriggerQueueEnter();
    if ((gv_citadelComplete == true)) {
        return true;
    }

    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_alarak, "pMission_Aiur04|Line00283", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DestructionWaveQ_Init () {
    gt_DestructionWaveQ = TriggerCreate("gt_DestructionWaveQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Destruction Wave 2 Q
//--------------------------------------------------------------------------------------------------
bool gt_DestructionWave2Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_citadelComplete == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((UnitGroupCount(gv_activeEnemyUnits, c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeAI);
    }
    TriggerQueueEnter();
    if ((gv_citadelComplete == true)) {
        return true;
    }

    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_alarak, "pMission_Aiur04|Line00284", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(gv_vorazun, "pMission_Aiur04|Line00285", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(gv_alarak, "pMission_Aiur04|Line00286", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DestructionWave2Q_Init () {
    gt_DestructionWave2Q = TriggerCreate("gt_DestructionWave2Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Destruction Wave Pan
//--------------------------------------------------------------------------------------------------
bool gt_DestructionWavePan_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_alarak) == true))) {
            return false;
        }

        if (!((gv_citadelComplete == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitIsSelected(gv_alarak, gv_pLAYER_01_USER) == true) && (libNtve_gf_UnitInRegion(gv_alarak, RegionFromId(22)) == true) && (RegionContainsPoint(RegionFromId(22), CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
        CameraLockInput(gv_pLAYER_01_USER, true);
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 2.0, -1, 10.0, false);
        CameraPan(gv_pLAYER_01_USER, PointFromId(1177), 2.0, -1, 10.0, false);
        Wait(2.0, c_timeGame);
        CameraLockInput(gv_pLAYER_01_USER, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DestructionWavePan_Init () {
    gt_DestructionWavePan = TriggerCreate("gt_DestructionWavePan_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Destruction Wave Proximity Trigger
//--------------------------------------------------------------------------------------------------
bool gt_DestructionWaveProximityTrigger_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_DestructionWaveQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DestructionWaveProximityTrigger_Init () {
    gt_DestructionWaveProximityTrigger = TriggerCreate("gt_DestructionWaveProximityTrigger_Func");
    TriggerAddEventUnitRegion(gt_DestructionWaveProximityTrigger, UnitRefFromVariable("gv_alarak"), RegionFromId(6), true);
    TriggerAddEventUnitRegion(gt_DestructionWaveProximityTrigger, UnitRefFromVariable("gv_vorazun"), RegionFromId(6), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Destruction Wave Camera Trigger
//--------------------------------------------------------------------------------------------------
bool gt_DestructionWaveCameraTrigger_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((RegionContainsPoint(RegionFromId(4), CameraGetTarget(gv_pLAYER_01_USER)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_DestructionWaveQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DestructionWaveCameraTrigger_Init () {
    gt_DestructionWaveCameraTrigger = TriggerCreate("gt_DestructionWaveCameraTrigger_Func");
    TriggerEnable(gt_DestructionWaveCameraTrigger, false);
    TriggerAddEventTimePeriodic(gt_DestructionWaveCameraTrigger, 0.1, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Destruction Wave Used
//--------------------------------------------------------------------------------------------------
bool gt_DestructionWaveUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(gv_destructionWaveReticle);
    TextTagDestroy(gv_destructionWaveTag);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "AlarakKnockback", false);
    UIAlertClear(gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DestructionWaveUsed_Init () {
    gt_DestructionWaveUsed = TriggerCreate("gt_DestructionWaveUsed_Func");
    TriggerEnable(gt_DestructionWaveUsed, false);
    TriggerAddEventUnitAbility(gt_DestructionWaveUsed, null, AbilityCommand("AlarakKnockback", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Destruction Wave Approach Intercept
//--------------------------------------------------------------------------------------------------
bool gt_DestructionWaveApproachIntercept_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((DistanceBetweenPoints(UnitGetPosition(gv_alarak), OrderGetTargetPoint(EventUnitOrder())) > 8.0) && ((UnitGroupCount(UnitGroup(null, gv_pLAYER_05_AMONS_FORCES, RegionCircle(PointWithOffsetPolar(UnitGetPosition(gv_alarak), 1.5, AngleBetweenPoints(UnitGetPosition(gv_alarak), OrderGetTargetPoint(EventUnitOrder()))), 2.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_06_AMONS_FORCES, RegionCircle(PointWithOffsetPolar(UnitGetPosition(gv_alarak), 1.5, AngleBetweenPoints(UnitGetPosition(gv_alarak), OrderGetTargetPoint(EventUnitOrder()))), 2.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            UnitIssueOrder(gv_alarak, OrderTargetingPoint(AbilityCommand("AlarakKnockback", 0), PointWithOffsetPolar(UnitGetPosition(gv_alarak), 3.0, AngleBetweenPoints(UnitGetPosition(gv_alarak), OrderGetTargetPoint(EventUnitOrder())))), c_orderQueueReplace);
        }

        Wait(0.5, c_timeAI);
        if (((libVCMI_gf_GameIsOver() == true) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true) || (UnitIsAlive(gv_alarak) == false) || (gv_citadelComplete == true) || (UnitOrder(gv_alarak, 0) != EventUnitOrder()))) {
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DestructionWaveApproachIntercept_Init () {
    gt_DestructionWaveApproachIntercept = TriggerCreate("gt_DestructionWaveApproachIntercept_Func");
    TriggerAddEventUnitOrder(gt_DestructionWaveApproachIntercept, UnitRefFromVariable("gv_alarak"), AbilityCommand("AlarakKnockback", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Destruction Wave Target Dies
//--------------------------------------------------------------------------------------------------
bool gt_DestructionWaveTargetDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_KillModel(gv_destructionWaveReticle);
    TextTagDestroy(gv_destructionWaveTag);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "AlarakKnockback", false);
    UIAlertClear(gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DestructionWaveTargetDies_Init () {
    gt_DestructionWaveTargetDies = TriggerCreate("gt_DestructionWaveTargetDies_Func");
    TriggerAddEventUnitDied(gt_DestructionWaveTargetDies, UnitRefFromUnit(UnitFromId(830)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shadow Dash Ping
//--------------------------------------------------------------------------------------------------
bool gt_ShadowDashPing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_shadowDashUsed == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(gt_AboutDoneQ) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(gt_Gate1OpenedQ) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UIAlertClear(gv_pLAYER_01_USER);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(20));
    gv_shadowDashRevealer = VisRevealerLastCreated();
    VisRevealerEnable(gv_shadowDashRevealer, true);
    if ((RegionContainsPoint(RegionFromId(107), CameraGetTarget(gv_pLAYER_01_USER)) == false)) {
        CameraLockInput(gv_pLAYER_01_USER, true);
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 2.0, -1, 10.0, false);
        CameraPan(gv_pLAYER_01_USER, PointFromId(1152), 2.0, -1, 10.0, false);
        Wait(2.0, c_timeGame);
        CameraLockInput(gv_pLAYER_01_USER, false);
    }

    if ((gv_shadowDashUsed == true)) {
        VisRevealerEnable(gv_shadowDashRevealer, false);
        return true;
    }

    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(1152), 5.0, Color(0.00, 100.00, 0.00));
    UISetButtonFaceHighlighted(PlayerGroupAll(), "VorazunBlink", true);
    libVCMI_gf_CreateReticleEffectAndTextTagAtPoint(libVCMI_ge_CampaginReticleType_ProtossMainObjective, libVCMI_ge_CampaginReticleSize_Large, StringExternal("Param/Value/999D08C8"), PointFromId(1152));
    gv_shadowDashReticle = libNtve_gf_ActorLastCreated();
    gv_shadowDashTag = TextTagLastCreated();
    TextTagSetPosition(gv_shadowDashTag, PointFromId(1152), 0.0);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/BE100F4E"), null, PointFromId(1152));
    Wait(1.0, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShadowDashPing_Init () {
    gt_ShadowDashPing = TriggerCreate("gt_ShadowDashPing_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shadow Dash Used
//--------------------------------------------------------------------------------------------------
bool gt_ShadowDashUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_shadowDashUsed = true;
    libNtve_gf_KillModel(gv_shadowDashReticle);
    TextTagDestroy(gv_shadowDashTag);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "VorazunBlink", false);
    VisRevealerEnable(gv_shadowDashRevealer, false);
    UIAlertClear(gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShadowDashUsed_Init () {
    gt_ShadowDashUsed = TriggerCreate("gt_ShadowDashUsed_Func");
    TriggerAddEventUnitRegion(gt_ShadowDashUsed, UnitRefFromVariable("gv_vorazun"), RegionFromId(107), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Alarak Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatAlarakDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libVCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libVCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/25885C27"), libVCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    TriggerExecute(gt_ObjectiveAlarakandVorazunMustSurviveFailed, true, true);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatAlarakDead_Init () {
    gt_DefeatAlarakDead = TriggerCreate("gt_DefeatAlarakDead_Func");
    TriggerAddEventUnitDied(gt_DefeatAlarakDead, UnitRefFromVariable("gv_alarak"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Vorazun Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatVorazunDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libVCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libVCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/7F61556B"), libVCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    TriggerExecute(gt_ObjectiveAlarakandVorazunMustSurviveFailed, true, true);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatVorazunDead_Init () {
    gt_DefeatVorazunDead = TriggerCreate("gt_DefeatVorazunDead_Func");
    TriggerAddEventUnitDied(gt_DefeatVorazunDead, UnitRefFromVariable("gv_vorazun"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Citadel Periodic Attack Check
//--------------------------------------------------------------------------------------------------
bool gt_CitadelPeriodicAttackCheck_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoFE5BBE4A_g;
    int autoFE5BBE4A_u;
    unit autoFE5BBE4A_var;
    unitgroup autoAFFD55DC_g;
    int autoAFFD55DC_u;
    unit autoAFFD55DC_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(gv_alarak) == false)) {
        return true;
    }

    autoFE5BBE4A_g = gv_activeEnemyUnits;
    autoFE5BBE4A_u = UnitGroupCount(autoFE5BBE4A_g, c_unitCountAll);
    for (;; autoFE5BBE4A_u -= 1) {
        autoFE5BBE4A_var = UnitGroupUnitFromEnd(autoFE5BBE4A_g, autoFE5BBE4A_u);
        if (autoFE5BBE4A_var == null) { break; }
        if ((DistanceBetweenPoints(UnitGetPosition(gv_alarak), UnitGetPosition(autoFE5BBE4A_var)) <= 16.0)) {
            libNtve_gf_AICast(autoFE5BBE4A_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_alarak)));
        }
        else {
            if ((RandomInt(1, 8) == 1)) {
                libNtve_gf_AICast(autoFE5BBE4A_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionCircle(Point(UnitGetCustomValue(autoFE5BBE4A_var, 0), UnitGetCustomValue(autoFE5BBE4A_var, 1)), 2.0))));
            }

        }
    }
    autoAFFD55DC_g = gv_overseerGroup;
    autoAFFD55DC_u = UnitGroupCount(autoAFFD55DC_g, c_unitCountAll);
    for (;; autoAFFD55DC_u -= 1) {
        autoAFFD55DC_var = UnitGroupUnitFromEnd(autoAFFD55DC_g, autoAFFD55DC_u);
        if (autoAFFD55DC_var == null) { break; }
        if ((DistanceBetweenPoints(UnitGetPosition(autoAFFD55DC_var), Point(UnitGetCustomValue(autoAFFD55DC_var, 0), UnitGetCustomValue(autoAFFD55DC_var, 1))) > 2.0)) {
            UnitIssueOrder(autoAFFD55DC_var, OrderTargetingPoint(AbilityCommand("move", 0), Point(UnitGetCustomValue(autoAFFD55DC_var, 0), UnitGetCustomValue(autoAFFD55DC_var, 1))), c_orderQueueReplace);
            UnitIssueOrder(autoAFFD55DC_var, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CitadelPeriodicAttackCheck_Init () {
    gt_CitadelPeriodicAttackCheck = TriggerCreate("gt_CitadelPeriodicAttackCheck_Func");
    TriggerEnable(gt_CitadelPeriodicAttackCheck, false);
    TriggerAddEventTimePeriodic(gt_CitadelPeriodicAttackCheck, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Citadel Zerg 1
//--------------------------------------------------------------------------------------------------
bool gt_CitadelZerg1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoDF5EF305_g;
    int autoDF5EF305_u;
    unit autoDF5EF305_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoDF5EF305_g = UnitGroup(null, gv_pLAYER_05_AMONS_FORCES, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDF5EF305_u = UnitGroupCount(autoDF5EF305_g, c_unitCountAll);
    for (;; autoDF5EF305_u -= 1) {
        autoDF5EF305_var = UnitGroupUnitFromEnd(autoDF5EF305_g, autoDF5EF305_u);
        if (autoDF5EF305_var == null) { break; }
        UnitSetCustomValue(autoDF5EF305_var, 0, PointGetX(UnitGetPosition(autoDF5EF305_var)));
        UnitSetCustomValue(autoDF5EF305_var, 1, PointGetY(UnitGetPosition(autoDF5EF305_var)));
        UnitGroupAdd(gv_activeEnemyUnits, autoDF5EF305_var);
    }
    TriggerExecute(gt_CitadelZerg1Unburrow, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CitadelZerg1_Init () {
    gt_CitadelZerg1 = TriggerCreate("gt_CitadelZerg1_Func");
    TriggerAddEventUnitRegion(gt_CitadelZerg1, UnitRefFromVariable("gv_alarak"), RegionFromId(4), true);
    TriggerAddEventUnitRegion(gt_CitadelZerg1, UnitRefFromVariable("gv_vorazun"), RegionFromId(4), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Citadel Zerg 1 Unburrow
//--------------------------------------------------------------------------------------------------
bool gt_CitadelZerg1Unburrow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoD76B1898_n;
    int autoD76B1898_i;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((UnitGroupCount(gv_activeEnemyUnits, c_unitCountAlive) < 5))) {
        Wait(1.0, c_timeAI);
    }
    while (!((libNtve_gf_UnitInRegion(gv_alarak, RegionFromId(6)) == true))) {
        Wait(1.0, c_timeAI);
    }
    autoD76B1898_n = libLotv_gf_DifficultyValueInt2(8, 8, 12, 16);
    for (autoD76B1898_i = 1; autoD76B1898_i <= autoD76B1898_n; autoD76B1898_i += 1) {
        if (((gv_citadelComplete == true) || (libVCMI_gf_GameIsOver() == true) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true))) {
            return true;
        }

        UnitCreate(1, "ZerglingBurrowed", 0, gv_pLAYER_05_AMONS_FORCES, RegionRandomPoint(RegionFromId(8)), libNtve_gf_RandomAngle());
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        UnitSetCustomValue(UnitLastCreated(), 0, PointGetX(UnitGetPosition(UnitLastCreated())));
        UnitSetCustomValue(UnitLastCreated(), 1, PointGetY(UnitGetPosition(UnitLastCreated())));
        UnitGroupAdd(gv_activeEnemyUnits, UnitLastCreated());
        Wait(libLotv_gf_DifficultyValueFixed2(0.2, 0.2, 0.15, 0.1), c_timeAI);
        AISetUnitScriptControlled(UnitLastCreated(), false);
    }
    TriggerExecute(gt_DestructionWave2Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CitadelZerg1Unburrow_Init () {
    gt_CitadelZerg1Unburrow = TriggerCreate("gt_CitadelZerg1Unburrow_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Citadel Zerg 2
//--------------------------------------------------------------------------------------------------
bool gt_CitadelZerg2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_breakOut;
    unitgroup lv_triggerZerg;

    // Automatic Variable Declarations
    int auto45F6AD91_n;
    int auto45F6AD91_i;
    unitgroup autoA2C1F237_g;
    int autoA2C1F237_u;
    unit autoA2C1F237_var;
    unitgroup autoDEED39F9_g;
    int autoDEED39F9_u;
    unit autoDEED39F9_var;
    unitgroup auto920736F7_g;
    int auto920736F7_u;
    unit auto920736F7_var;
    unitgroup auto86D20552_g;
    int auto86D20552_u;
    unit auto86D20552_var;
    unitgroup autoC3C8B628_g;
    int autoC3C8B628_u;
    unit autoC3C8B628_var;

    // Variable Initialization
    lv_triggerZerg = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto45F6AD91_n = libLotv_gf_DifficultyValueInt2(20, 20, 28, 36);
    for (auto45F6AD91_i = 1; auto45F6AD91_i <= auto45F6AD91_n; auto45F6AD91_i += 1) {
        UnitCreate(1, "Zergling", 0, gv_pLAYER_05_AMONS_FORCES, RegionRandomPoint(RegionFromId(15)), libNtve_gf_RandomAngle());
        UnitSetCustomValue(UnitLastCreated(), 0, PointGetX(UnitGetPosition(UnitLastCreated())));
        UnitSetCustomValue(UnitLastCreated(), 1, PointGetY(UnitGetPosition(UnitLastCreated())));
        AISetUnitScriptControlled(UnitLastCreated(), true);
        UnitGroupAdd(gv_gate1Zerg, UnitLastCreated());
    }
    autoA2C1F237_g = UnitGroup(null, gv_pLAYER_05_AMONS_FORCES, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA2C1F237_u = UnitGroupCount(autoA2C1F237_g, c_unitCountAll);
    for (;; autoA2C1F237_u -= 1) {
        autoA2C1F237_var = UnitGroupUnitFromEnd(autoA2C1F237_g, autoA2C1F237_u);
        if (autoA2C1F237_var == null) { break; }
        UnitGroupAdd(lv_triggerZerg, autoA2C1F237_var);
    }
    while (true) {
        Wait(1.0, c_timeAI);
        if (((gv_citadelComplete == true) || (libVCMI_gf_GameIsOver() == true) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true))) {
            return true;
        }

        if ((libNtve_gf_UnitGroupIsDead(lv_triggerZerg) == true)) {
            break;
        }

        autoDEED39F9_g = lv_triggerZerg;
        autoDEED39F9_u = UnitGroupCount(autoDEED39F9_g, c_unitCountAll);
        for (;; autoDEED39F9_u -= 1) {
            autoDEED39F9_var = UnitGroupUnitFromEnd(autoDEED39F9_g, autoDEED39F9_u);
            if (autoDEED39F9_var == null) { break; }
            if ((UnitGetPropertyFixed(autoDEED39F9_var, c_unitPropLifePercent, c_unitPropCurrent) < 99.0)) {
                lv_breakOut = true;
                break;
            }

        }
        if ((lv_breakOut == true)) {
            break;
        }

        auto920736F7_g = gv_gate1Zerg;
        auto920736F7_u = UnitGroupCount(auto920736F7_g, c_unitCountAll);
        for (;; auto920736F7_u -= 1) {
            auto920736F7_var = UnitGroupUnitFromEnd(auto920736F7_g, auto920736F7_u);
            if (auto920736F7_var == null) { break; }
            if ((RandomInt(1, 8) == 1)) {
                UnitIssueOrder(auto920736F7_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(15))), c_orderQueueReplace);
            }

        }
    }
    auto86D20552_g = gv_gate1Zerg;
    auto86D20552_u = UnitGroupCount(auto86D20552_g, c_unitCountAll);
    for (;; auto86D20552_u -= 1) {
        auto86D20552_var = UnitGroupUnitFromEnd(auto86D20552_g, auto86D20552_u);
        if (auto86D20552_var == null) { break; }
        AISetUnitScriptControlled(auto86D20552_var, false);
        UnitGroupAdd(gv_activeEnemyUnits, auto86D20552_var);
    }
    autoC3C8B628_g = lv_triggerZerg;
    autoC3C8B628_u = UnitGroupCount(autoC3C8B628_g, c_unitCountAll);
    for (;; autoC3C8B628_u -= 1) {
        autoC3C8B628_var = UnitGroupUnitFromEnd(autoC3C8B628_g, autoC3C8B628_u);
        if (autoC3C8B628_var == null) { break; }
        UnitGroupAdd(gv_gate1Zerg, autoC3C8B628_var);
        UnitGroupAdd(gv_activeEnemyUnits, autoC3C8B628_var);
    }
    TriggerExecute(gt_Gate1Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CitadelZerg2_Init () {
    gt_CitadelZerg2 = TriggerCreate("gt_CitadelZerg2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Citadel Zerg 3
//--------------------------------------------------------------------------------------------------
bool gt_CitadelZerg3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_zergGroup;

    // Automatic Variable Declarations
    unitgroup autoEC88BBBC_g;
    int autoEC88BBBC_u;
    unit autoEC88BBBC_var;
    unitgroup autoDEEF8D02_g;
    int autoDEEF8D02_u;
    unit autoDEEF8D02_var;

    // Variable Initialization
    lv_zergGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    autoEC88BBBC_g = UnitGroup(null, gv_pLAYER_05_AMONS_FORCES, RegionFromId(23), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEC88BBBC_u = UnitGroupCount(autoEC88BBBC_g, c_unitCountAll);
    for (;; autoEC88BBBC_u -= 1) {
        autoEC88BBBC_var = UnitGroupUnitFromEnd(autoEC88BBBC_g, autoEC88BBBC_u);
        if (autoEC88BBBC_var == null) { break; }
        UnitGroupAdd(lv_zergGroup, autoEC88BBBC_var);
    }
    while (true) {
        Wait(1.0, c_timeAI);
        if (((libNtve_gf_UnitGroupIsDead(lv_zergGroup) == true) || (gv_citadelComplete == true) || (libVCMI_gf_GameIsOver() == true) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true))) {
            return true;
        }

        autoDEEF8D02_g = lv_zergGroup;
        autoDEEF8D02_u = UnitGroupCount(autoDEEF8D02_g, c_unitCountAll);
        for (;; autoDEEF8D02_u -= 1) {
            autoDEEF8D02_var = UnitGroupUnitFromEnd(autoDEEF8D02_g, autoDEEF8D02_u);
            if (autoDEEF8D02_var == null) { break; }
            if ((RandomInt(1, 6) == 1)) {
                UnitIssueOrder(autoDEEF8D02_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(23))), c_orderQueueReplace);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CitadelZerg3_Init () {
    gt_CitadelZerg3 = TriggerCreate("gt_CitadelZerg3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Citadel Zerg 4
//--------------------------------------------------------------------------------------------------
bool gt_CitadelZerg4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_zergGroup;

    // Automatic Variable Declarations
    unitgroup auto0EACBA7B_g;
    int auto0EACBA7B_u;
    unit auto0EACBA7B_var;
    unitgroup auto117CBBB3_g;
    int auto117CBBB3_u;
    unit auto117CBBB3_var;

    // Variable Initialization
    lv_zergGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto0EACBA7B_g = UnitGroup(null, gv_pLAYER_05_AMONS_FORCES, RegionFromId(26), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0EACBA7B_u = UnitGroupCount(auto0EACBA7B_g, c_unitCountAll);
    for (;; auto0EACBA7B_u -= 1) {
        auto0EACBA7B_var = UnitGroupUnitFromEnd(auto0EACBA7B_g, auto0EACBA7B_u);
        if (auto0EACBA7B_var == null) { break; }
        UnitGroupAdd(lv_zergGroup, auto0EACBA7B_var);
    }
    while (true) {
        Wait(1.0, c_timeAI);
        if (((libNtve_gf_UnitGroupIsDead(lv_zergGroup) == true) || (gv_citadelComplete == true) || (libVCMI_gf_GameIsOver() == true) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true))) {
            return true;
        }

        auto117CBBB3_g = lv_zergGroup;
        auto117CBBB3_u = UnitGroupCount(auto117CBBB3_g, c_unitCountAll);
        for (;; auto117CBBB3_u -= 1) {
            auto117CBBB3_var = UnitGroupUnitFromEnd(auto117CBBB3_g, auto117CBBB3_u);
            if (auto117CBBB3_var == null) { break; }
            if ((RandomInt(1, 9) == 1)) {
                UnitIssueOrder(auto117CBBB3_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(26))), c_orderQueueReplace);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CitadelZerg4_Init () {
    gt_CitadelZerg4 = TriggerCreate("gt_CitadelZerg4_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Citadel Zerg 5
//--------------------------------------------------------------------------------------------------
bool gt_CitadelZerg5_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_breakOut;
    unitgroup lv_triggerZerg;

    // Automatic Variable Declarations
    unitgroup auto4F70F836_g;
    int auto4F70F836_u;
    unit auto4F70F836_var;
    unitgroup autoF49C4228_g;
    int autoF49C4228_u;
    unit autoF49C4228_var;
    unitgroup auto96DC1CFC_g;
    int auto96DC1CFC_u;
    unit auto96DC1CFC_var;
    int autoFE3319AD_n;
    int autoFE3319AD_i;
    int auto816083D5_n;
    int auto816083D5_i;

    // Variable Initialization
    lv_triggerZerg = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto4F70F836_g = UnitGroup(null, gv_pLAYER_05_AMONS_FORCES, RegionFromId(36), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4F70F836_u = UnitGroupCount(auto4F70F836_g, c_unitCountAll);
    for (;; auto4F70F836_u -= 1) {
        auto4F70F836_var = UnitGroupUnitFromEnd(auto4F70F836_g, auto4F70F836_u);
        if (auto4F70F836_var == null) { break; }
        UnitGroupAdd(lv_triggerZerg, auto4F70F836_var);
    }
    while (true) {
        Wait(1.0, c_timeAI);
        if (((gv_citadelComplete == true) || (libVCMI_gf_GameIsOver() == true) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true))) {
            return true;
        }

        if ((libNtve_gf_UnitGroupIsDead(lv_triggerZerg) == true)) {
            break;
        }

        autoF49C4228_g = lv_triggerZerg;
        autoF49C4228_u = UnitGroupCount(autoF49C4228_g, c_unitCountAll);
        for (;; autoF49C4228_u -= 1) {
            autoF49C4228_var = UnitGroupUnitFromEnd(autoF49C4228_g, autoF49C4228_u);
            if (autoF49C4228_var == null) { break; }
            if ((UnitGetPropertyFixed(autoF49C4228_var, c_unitPropLifePercent, c_unitPropCurrent) < 99.0)) {
                lv_breakOut = true;
                break;
            }

        }
        if ((lv_breakOut == true)) {
            break;
        }

    }
    auto96DC1CFC_g = lv_triggerZerg;
    auto96DC1CFC_u = UnitGroupCount(auto96DC1CFC_g, c_unitCountAll);
    for (;; auto96DC1CFC_u -= 1) {
        auto96DC1CFC_var = UnitGroupUnitFromEnd(auto96DC1CFC_g, auto96DC1CFC_u);
        if (auto96DC1CFC_var == null) { break; }
        UnitGroupAdd(gv_activeEnemyUnits, auto96DC1CFC_var);
    }
    Wait(2.0, c_timeAI);
    while (!((libNtve_gf_UnitInRegion(gv_alarak, RegionFromId(39)) == true))) {
        Wait(1.0, c_timeAI);
    }
    autoFE3319AD_n = libLotv_gf_DifficultyValueInt2(12, 12, 12, 16);
    for (autoFE3319AD_i = 1; autoFE3319AD_i <= autoFE3319AD_n; autoFE3319AD_i += 1) {
        if (((gv_citadelComplete == true) || (libVCMI_gf_GameIsOver() == true) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true))) {
            return true;
        }

        UnitCreate(1, "ZerglingBurrowed", 0, gv_pLAYER_05_AMONS_FORCES, RegionRandomPoint(RegionFromId(37)), libNtve_gf_RandomAngle());
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        UnitSetCustomValue(UnitLastCreated(), 0, PointGetX(UnitGetPosition(UnitLastCreated())));
        UnitSetCustomValue(UnitLastCreated(), 1, PointGetY(UnitGetPosition(UnitLastCreated())));
        UnitGroupAdd(gv_activeEnemyUnits, UnitLastCreated());
        Wait(0.1, c_timeAI);
        AISetUnitScriptControlled(UnitLastCreated(), false);
    }
    auto816083D5_n = libLotv_gf_DifficultyValueInt2(0, 0, 1, 3);
    for (auto816083D5_i = 1; auto816083D5_i <= auto816083D5_n; auto816083D5_i += 1) {
        if (((gv_citadelComplete == true) || (libVCMI_gf_GameIsOver() == true) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true))) {
            return true;
        }

        UnitCreate(1, "BanelingBurrowed", 0, gv_pLAYER_05_AMONS_FORCES, RegionRandomPoint(RegionFromId(38)), libNtve_gf_RandomAngle());
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowBanelingUp", 0)), c_orderQueueReplace);
        UnitSetCustomValue(UnitLastCreated(), 0, PointGetX(UnitGetPosition(UnitLastCreated())));
        UnitSetCustomValue(UnitLastCreated(), 1, PointGetY(UnitGetPosition(UnitLastCreated())));
        UnitGroupAdd(gv_activeEnemyUnits, UnitLastCreated());
        Wait(0.1, c_timeAI);
        AISetUnitScriptControlled(UnitLastCreated(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CitadelZerg5_Init () {
    gt_CitadelZerg5 = TriggerCreate("gt_CitadelZerg5_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bridge Banelings Right
//--------------------------------------------------------------------------------------------------
bool gt_BridgeBanelingsRight_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto3EFA36B5_g;
    int auto3EFA36B5_u;
    unit auto3EFA36B5_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto3EFA36B5_g = UnitGroup("Baneling", gv_pLAYER_05_AMONS_FORCES, RegionFromId(45), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3EFA36B5_u = UnitGroupCount(auto3EFA36B5_g, c_unitCountAll);
    for (;; auto3EFA36B5_u -= 1) {
        auto3EFA36B5_var = UnitGroupUnitFromEnd(auto3EFA36B5_g, auto3EFA36B5_u);
        if (auto3EFA36B5_var == null) { break; }
        if ((UnitGroupHasUnit(gv_bridgeNydusZerg, auto3EFA36B5_var) == false)) {
            UnitSetCustomValue(auto3EFA36B5_var, 0, PointGetX(UnitGetPosition(auto3EFA36B5_var)));
            UnitSetCustomValue(auto3EFA36B5_var, 1, PointGetY(UnitGetPosition(auto3EFA36B5_var)));
            UnitGroupAdd(gv_activeEnemyUnits, auto3EFA36B5_var);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeBanelingsRight_Init () {
    gt_BridgeBanelingsRight = TriggerCreate("gt_BridgeBanelingsRight_Func");
    TriggerAddEventUnitRegion(gt_BridgeBanelingsRight, UnitRefFromVariable("gv_alarak"), RegionFromId(45), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bridge Banelings 1
//--------------------------------------------------------------------------------------------------
bool gt_BridgeBanelings1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_zergGroup;

    // Automatic Variable Declarations
    unitgroup auto34384F65_g;
    int auto34384F65_u;
    unit auto34384F65_var;
    unitgroup auto40DFFA61_g;
    int auto40DFFA61_u;
    unit auto40DFFA61_var;
    unitgroup autoB27E9351_g;
    int autoB27E9351_u;
    unit autoB27E9351_var;

    // Variable Initialization
    lv_zergGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto34384F65_g = UnitGroup("BanelingBurrowed", gv_pLAYER_05_AMONS_FORCES, RegionFromId(46), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto34384F65_u = UnitGroupCount(auto34384F65_g, c_unitCountAll);
    for (;; auto34384F65_u -= 1) {
        auto34384F65_var = UnitGroupUnitFromEnd(auto34384F65_g, auto34384F65_u);
        if (auto34384F65_var == null) { break; }
        UnitGroupAdd(lv_zergGroup, auto34384F65_var);
        AISetUnitScriptControlled(auto34384F65_var, true);
    }
    while (true) {
        Wait(1.0, c_timeAI);
        if (((libNtve_gf_UnitGroupIsDead(lv_zergGroup) == true) || (gv_citadelComplete == true) || (libVCMI_gf_GameIsOver() == true) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true))) {
            return true;
        }

        if ((libNtve_gf_UnitInRegion(gv_alarak, RegionFromId(46)) == true)) {
            auto40DFFA61_g = lv_zergGroup;
            auto40DFFA61_u = UnitGroupCount(auto40DFFA61_g, c_unitCountAll);
            for (;; auto40DFFA61_u -= 1) {
                auto40DFFA61_var = UnitGroupUnitFromEnd(auto40DFFA61_g, auto40DFFA61_u);
                if (auto40DFFA61_var == null) { break; }
                UnitIssueOrder(auto40DFFA61_var, Order(AbilityCommand("BurrowBanelingUp", 0)), c_orderQueueReplace);
                UnitSetCustomValue(auto40DFFA61_var, 0, PointGetX(UnitGetPosition(auto40DFFA61_var)));
                UnitSetCustomValue(auto40DFFA61_var, 1, PointGetY(UnitGetPosition(auto40DFFA61_var)));
                UnitGroupAdd(gv_activeEnemyUnits, auto40DFFA61_var);
            }
            Wait(0.1, c_timeAI);
            autoB27E9351_g = lv_zergGroup;
            autoB27E9351_u = UnitGroupCount(autoB27E9351_g, c_unitCountAll);
            for (;; autoB27E9351_u -= 1) {
                autoB27E9351_var = UnitGroupUnitFromEnd(autoB27E9351_g, autoB27E9351_u);
                if (autoB27E9351_var == null) { break; }
                AISetUnitScriptControlled(autoB27E9351_var, false);
            }
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeBanelings1_Init () {
    gt_BridgeBanelings1 = TriggerCreate("gt_BridgeBanelings1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bridge Banelings 2
//--------------------------------------------------------------------------------------------------
bool gt_BridgeBanelings2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_zergGroup;

    // Automatic Variable Declarations
    unitgroup auto31162C93_g;
    int auto31162C93_u;
    unit auto31162C93_var;
    unitgroup auto3626E6C1_g;
    int auto3626E6C1_u;
    unit auto3626E6C1_var;
    unitgroup auto55D23561_g;
    int auto55D23561_u;
    unit auto55D23561_var;

    // Variable Initialization
    lv_zergGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto31162C93_g = UnitGroup("BanelingBurrowed", gv_pLAYER_05_AMONS_FORCES, RegionFromId(47), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto31162C93_u = UnitGroupCount(auto31162C93_g, c_unitCountAll);
    for (;; auto31162C93_u -= 1) {
        auto31162C93_var = UnitGroupUnitFromEnd(auto31162C93_g, auto31162C93_u);
        if (auto31162C93_var == null) { break; }
        UnitGroupAdd(lv_zergGroup, auto31162C93_var);
        AISetUnitScriptControlled(auto31162C93_var, true);
    }
    while (true) {
        Wait(1.0, c_timeAI);
        if (((libNtve_gf_UnitGroupIsDead(lv_zergGroup) == true) || (gv_citadelComplete == true) || (libVCMI_gf_GameIsOver() == true) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true))) {
            return true;
        }

        if ((libNtve_gf_UnitInRegion(gv_alarak, RegionFromId(47)) == true)) {
            auto3626E6C1_g = lv_zergGroup;
            auto3626E6C1_u = UnitGroupCount(auto3626E6C1_g, c_unitCountAll);
            for (;; auto3626E6C1_u -= 1) {
                auto3626E6C1_var = UnitGroupUnitFromEnd(auto3626E6C1_g, auto3626E6C1_u);
                if (auto3626E6C1_var == null) { break; }
                UnitIssueOrder(auto3626E6C1_var, Order(AbilityCommand("BurrowBanelingUp", 0)), c_orderQueueReplace);
                UnitSetCustomValue(auto3626E6C1_var, 0, PointGetX(UnitGetPosition(auto3626E6C1_var)));
                UnitSetCustomValue(auto3626E6C1_var, 1, PointGetY(UnitGetPosition(auto3626E6C1_var)));
                UnitGroupAdd(gv_activeEnemyUnits, auto3626E6C1_var);
            }
            Wait(0.1, c_timeAI);
            auto55D23561_g = lv_zergGroup;
            auto55D23561_u = UnitGroupCount(auto55D23561_g, c_unitCountAll);
            for (;; auto55D23561_u -= 1) {
                auto55D23561_var = UnitGroupUnitFromEnd(auto55D23561_g, auto55D23561_u);
                if (auto55D23561_var == null) { break; }
                AISetUnitScriptControlled(auto55D23561_var, false);
            }
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeBanelings2_Init () {
    gt_BridgeBanelings2 = TriggerCreate("gt_BridgeBanelings2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nydus Gauntlet
//--------------------------------------------------------------------------------------------------
bool gt_NydusGauntlet_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    unitgroup lv_nydusGroup1;
    unitgroup lv_nydusGroup2;
    int lv_zergCycle1;
    int lv_zergCycle2;
    unitgroup[5] lv_zergGroups;
    region[5] lv_zergRegions;
    timer lv_spawnCooldown;
    int lv_i;

    // Automatic Variable Declarations
    unitgroup auto1D923A41_g;
    int auto1D923A41_u;
    unit auto1D923A41_var;
    const int autoB94F5C54_ae = 3;
    const int autoB94F5C54_ai = 1;
    int auto4C3B85B9_val;
    unitgroup autoD6CF5576_g;
    int autoD6CF5576_u;
    unit autoD6CF5576_var;
    unitgroup auto4039A368_g;
    int auto4039A368_u;
    unit auto4039A368_var;
    const int auto1F7BB16C_ae = 4;
    const int auto1F7BB16C_ai = 1;
    int auto3623D6C5_val;
    unitgroup autoED035E78_g;
    int autoED035E78_u;
    unit autoED035E78_var;
    const int autoA71A5916_ae = 4;
    const int autoA71A5916_ai = 1;
    unitgroup auto208A1715_g;
    int auto208A1715_u;
    unit auto208A1715_var;

    // Variable Initialization
    lv_nydusGroup1 = UnitGroupEmpty();
    lv_nydusGroup2 = UnitGroupEmpty();
    for (init_i = 0; init_i <= 4; init_i += 1) {
        lv_zergGroups[init_i] = UnitGroupEmpty();
    }
    lv_spawnCooldown = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(lv_nydusGroup1, UnitFromId(1808));
    UnitGroupAdd(lv_nydusGroup1, UnitFromId(3624));
    UnitGroupAdd(lv_nydusGroup2, UnitFromId(3762));
    UnitGroupAdd(lv_nydusGroup2, UnitFromId(3761));
    UnitGroupAdd(lv_nydusGroup2, UnitFromId(3763));
    lv_zergRegions[1] = RegionFromId(48);
    lv_zergRegions[2] = RegionFromId(49);
    lv_zergRegions[3] = RegionFromId(50);
    lv_zergRegions[4] = RegionFromId(51);
    TimerStart(lv_spawnCooldown, libLotv_gf_DifficultyValueFixed2(15.0, 12.0, 10.0, 8.0), false, c_timeAI);
    while (true) {
        Wait(1.0, c_timeAI);
        if (((gv_citadelComplete == true) || (libVCMI_gf_GameIsOver() == true) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true))) {
            return true;
        }

        if ((libNtve_gf_UnitGroupIsDead(lv_nydusGroup1) == true) && (libNtve_gf_UnitGroupIsDead(lv_nydusGroup2) == true) && (libNtve_gf_UnitGroupIsDead(lv_zergGroups[1]) == true) && (libNtve_gf_UnitGroupIsDead(lv_zergGroups[2]) == true) && (libNtve_gf_UnitGroupIsDead(lv_zergGroups[3]) == true) && (libNtve_gf_UnitGroupIsDead(lv_zergGroups[4]) == true)) {
            return true;
        }

        if ((TimerGetRemaining(lv_spawnCooldown) < 0.2)) {
            TimerStart(lv_spawnCooldown, libLotv_gf_DifficultyValueFixed2(15.0, 12.0, 10.0, 8.0), false, c_timeAI);
            auto1D923A41_g = lv_nydusGroup1;
            auto1D923A41_u = UnitGroupCount(auto1D923A41_g, c_unitCountAll);
            for (;; auto1D923A41_u -= 1) {
                auto1D923A41_var = UnitGroupUnitFromEnd(auto1D923A41_g, auto1D923A41_u);
                if (auto1D923A41_var == null) { break; }
                lv_i = 1;
                for ( ; ( (autoB94F5C54_ai >= 0 && lv_i <= autoB94F5C54_ae) || (autoB94F5C54_ai < 0 && lv_i >= autoB94F5C54_ae) ) ; lv_i += autoB94F5C54_ai ) {
                    if ((UnitGroupCount(lv_zergGroups[lv_i], c_unitCountAlive) < libLotv_gf_DifficultyValueInt2(10, 10, 12, 16))) {
                        if (lv_zergCycle1 >= 4) {
                            lv_zergCycle1 = 1;
                        }
                        else {
                            lv_zergCycle1 = lv_zergCycle1 + 1;
                        }
                        auto4C3B85B9_val = lv_zergCycle1;
                        if (auto4C3B85B9_val == 1) {
                            UnitCargoCreate(auto1D923A41_var, "Zergling", 2);
                            UnitGroupAddUnitGroup(lv_zergGroups[lv_i], UnitCargoLastCreatedGroup());
                        }
                        else if (auto4C3B85B9_val == 2) {
                            UnitCargoCreate(auto1D923A41_var, "Zergling", 2);
                            UnitGroupAddUnitGroup(lv_zergGroups[lv_i], UnitCargoLastCreatedGroup());
                            UnitCargoCreate(auto1D923A41_var, "Baneling", 1);
                            UnitGroupAddUnitGroup(lv_zergGroups[lv_i], UnitCargoLastCreatedGroup());
                        }
                        else if (auto4C3B85B9_val == 3) {
                            UnitCargoCreate(auto1D923A41_var, "Zergling", 2);
                            UnitGroupAddUnitGroup(lv_zergGroups[lv_i], UnitCargoLastCreatedGroup());
                        }
                        else if (auto4C3B85B9_val == 4) {
                            UnitCargoCreate(auto1D923A41_var, "Hydralisk", 1);
                            UnitGroupAddUnitGroup(lv_zergGroups[lv_i], UnitCargoLastCreatedGroup());
                        }
                        else {
                        }
                    }

                }
            }
            autoD6CF5576_g = lv_nydusGroup1;
            autoD6CF5576_u = UnitGroupCount(autoD6CF5576_g, c_unitCountAll);
            for (;; autoD6CF5576_u -= 1) {
                autoD6CF5576_var = UnitGroupUnitFromEnd(autoD6CF5576_g, autoD6CF5576_u);
                if (autoD6CF5576_var == null) { break; }
                UnitIssueOrder(autoD6CF5576_var, Order(AbilityCommand("NydusWormTransport", 1)), c_orderQueueReplace);
            }
            auto4039A368_g = lv_nydusGroup2;
            auto4039A368_u = UnitGroupCount(auto4039A368_g, c_unitCountAll);
            for (;; auto4039A368_u -= 1) {
                auto4039A368_var = UnitGroupUnitFromEnd(auto4039A368_g, auto4039A368_u);
                if (auto4039A368_var == null) { break; }
                lv_i = 2;
                for ( ; ( (auto1F7BB16C_ai >= 0 && lv_i <= auto1F7BB16C_ae) || (auto1F7BB16C_ai < 0 && lv_i >= auto1F7BB16C_ae) ) ; lv_i += auto1F7BB16C_ai ) {
                    if ((UnitGroupCount(lv_zergGroups[lv_i], c_unitCountAlive) < libLotv_gf_DifficultyValueInt2(10, 10, 12, 16))) {
                        if (lv_zergCycle2 >= 4) {
                            lv_zergCycle2 = 1;
                        }
                        else {
                            lv_zergCycle2 = lv_zergCycle2 + 1;
                        }
                        auto3623D6C5_val = lv_zergCycle2;
                        if (auto3623D6C5_val == 1) {
                            UnitCargoCreate(auto4039A368_var, "Zergling", 2);
                            UnitGroupAddUnitGroup(lv_zergGroups[lv_i], UnitCargoLastCreatedGroup());
                        }
                        else if (auto3623D6C5_val == 2) {
                            UnitCargoCreate(auto4039A368_var, "Zergling", 2);
                            UnitGroupAddUnitGroup(lv_zergGroups[lv_i], UnitCargoLastCreatedGroup());
                            UnitCargoCreate(auto4039A368_var, "Baneling", 1);
                            UnitGroupAddUnitGroup(lv_zergGroups[lv_i], UnitCargoLastCreatedGroup());
                        }
                        else if (auto3623D6C5_val == 3) {
                            UnitCargoCreate(auto4039A368_var, "Zergling", 2);
                            UnitGroupAddUnitGroup(lv_zergGroups[lv_i], UnitCargoLastCreatedGroup());
                        }
                        else if (auto3623D6C5_val == 4) {
                            UnitCargoCreate(auto4039A368_var, "Hydralisk", 1);
                            UnitGroupAddUnitGroup(lv_zergGroups[lv_i], UnitCargoLastCreatedGroup());
                        }
                        else {
                        }
                    }

                }
            }
            autoED035E78_g = lv_nydusGroup2;
            autoED035E78_u = UnitGroupCount(autoED035E78_g, c_unitCountAll);
            for (;; autoED035E78_u -= 1) {
                autoED035E78_var = UnitGroupUnitFromEnd(autoED035E78_g, autoED035E78_u);
                if (autoED035E78_var == null) { break; }
                UnitIssueOrder(autoED035E78_var, Order(AbilityCommand("NydusWormTransport", 1)), c_orderQueueReplace);
            }
        }

        lv_i = 1;
        for ( ; ( (autoA71A5916_ai >= 0 && lv_i <= autoA71A5916_ae) || (autoA71A5916_ai < 0 && lv_i >= autoA71A5916_ae) ) ; lv_i += autoA71A5916_ai ) {
            auto208A1715_g = lv_zergGroups[lv_i];
            auto208A1715_u = UnitGroupCount(auto208A1715_g, c_unitCountAll);
            for (;; auto208A1715_u -= 1) {
                auto208A1715_var = UnitGroupUnitFromEnd(auto208A1715_g, auto208A1715_u);
                if (auto208A1715_var == null) { break; }
                if ((libNtve_gf_UnitInRegion(auto208A1715_var, lv_zergRegions[lv_i]) == false)) {
                    UnitIssueOrder(auto208A1715_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(lv_zergRegions[lv_i])), c_orderQueueReplace);
                }
                else {
                    if ((libNtve_gf_UnitInRegion(gv_alarak, lv_zergRegions[lv_i]) == true)) {
                        UnitIssueOrder(auto208A1715_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_alarak)), c_orderQueueReplace);
                    }
                    else {
                        if ((RandomInt(1, libLotv_gf_DifficultyValueInt2(8, 8, 8, 9)) == 1)) {
                            UnitIssueOrder(auto208A1715_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(lv_zergRegions[lv_i])), c_orderQueueReplace);
                        }

                    }
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NydusGauntlet_Init () {
    gt_NydusGauntlet = TriggerCreate("gt_NydusGauntlet_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nydus Ultra
//--------------------------------------------------------------------------------------------------
bool gt_NydusUltra_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(UnitFromId(3792), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    while (!((libNtve_gf_UnitInRegion(gv_alarak, RegionFromId(51)) == true))) {
        Wait(1.0, c_timeAI);
    }
    if (((UnitIsAlive(UnitFromId(3792)) == false) || (UnitIsAlive(gv_alarak) == false))) {
        return true;
    }

    UnitSetCustomValue(UnitFromId(3792), 0, PointGetX(UnitGetPosition(UnitFromId(3792))));
    UnitSetCustomValue(UnitFromId(3792), 1, PointGetY(UnitGetPosition(UnitFromId(3792))));
    UnitIssueOrder(UnitFromId(3792), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_alarak)), c_orderQueueReplace);
    Wait(0.1, c_timeAI);
    AISetUnitScriptControlled(UnitFromId(3792), false);
    UnitGroupAdd(gv_activeEnemyUnits, UnitFromId(3792));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NydusUltra_Init () {
    gt_NydusUltra = TriggerCreate("gt_NydusUltra_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overseer Q
//--------------------------------------------------------------------------------------------------
bool gt_OverseerQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_citadelComplete == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_citadelComplete == true)) {
        return true;
    }

    UIAlertClear(gv_pLAYER_01_USER);
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), RegionGetCenter(RegionFromId(14)), 5.0, Color(100.00, 0.00, 0.00));
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(71), 10.0, false);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/28762604"), null, RegionGetCenter(RegionFromId(14)));
    Wait(1.0, c_timeReal);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_vorazun, "pMission_Aiur04|Line00290", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OverseerQ_Init () {
    gt_OverseerQ = TriggerCreate("gt_OverseerQ_Func");
    TriggerAddEventUnitRegion(gt_OverseerQ, UnitRefFromVariable("gv_vorazun"), RegionFromId(24), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overseer Patrols
//--------------------------------------------------------------------------------------------------
bool gt_OverseerPatrols_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if (((gv_citadelComplete == true) || (libVCMI_gf_GameIsOver() == true) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true))) {
            return true;
        }

        UnitSetCustomValue(UnitFromId(4375), 0, PointGetX(PointFromId(4374)));
        UnitSetCustomValue(UnitFromId(4375), 1, PointGetY(PointFromId(4374)));
        if ((libNtve_gf_UnitInRegion(gv_vorazun, RegionFromId(83)) == true)) {
            UnitSetCustomValue(UnitFromId(4378), 0, PointGetX(PointFromId(4385)));
            UnitSetCustomValue(UnitFromId(4378), 1, PointGetY(PointFromId(4385)));
        }
        else {
            UnitSetCustomValue(UnitFromId(4378), 0, PointGetX(PointFromId(4376)));
            UnitSetCustomValue(UnitFromId(4378), 1, PointGetY(PointFromId(4376)));
        }
        Wait(7.0, c_timeAI);
        if (((gv_citadelComplete == true) || (libVCMI_gf_GameIsOver() == true) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true))) {
            return true;
        }

        UnitSetCustomValue(UnitFromId(3913), 0, PointGetX(PointFromId(4379)));
        UnitSetCustomValue(UnitFromId(3913), 1, PointGetY(PointFromId(4379)));
        if ((libNtve_gf_UnitInRegion(gv_vorazun, RegionFromId(77)) == true)) {
            UnitSetCustomValue(UnitFromId(4382), 0, PointGetX(PointFromId(4381)));
            UnitSetCustomValue(UnitFromId(4382), 1, PointGetY(PointFromId(4381)));
        }

        Wait(7.0, c_timeAI);
        UnitSetCustomValue(UnitFromId(4375), 0, PointGetX(PointFromId(4373)));
        UnitSetCustomValue(UnitFromId(4375), 1, PointGetY(PointFromId(4373)));
        UnitSetCustomValue(UnitFromId(4378), 0, PointGetX(PointFromId(4377)));
        UnitSetCustomValue(UnitFromId(4378), 1, PointGetY(PointFromId(4377)));
        Wait(3.0, c_timeAI);
        if (((gv_citadelComplete == true) || (libVCMI_gf_GameIsOver() == true) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true))) {
            return true;
        }

        if ((libNtve_gf_UnitInRegion(gv_vorazun, RegionFromId(43)) == true)) {
            UnitSetCustomValue(UnitFromId(3913), 0, PointGetX(PointFromId(4380)));
            UnitSetCustomValue(UnitFromId(3913), 1, PointGetY(PointFromId(4380)));
        }

        Wait(4.0, c_timeAI);
        UnitSetCustomValue(UnitFromId(4382), 0, PointGetX(PointFromId(4309)));
        UnitSetCustomValue(UnitFromId(4382), 1, PointGetY(PointFromId(4309)));
        Wait(7.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OverseerPatrols_Init () {
    gt_OverseerPatrols = TriggerCreate("gt_OverseerPatrols_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overseer 4
//--------------------------------------------------------------------------------------------------
bool gt_Overseer4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupRemove(gv_overseerGroup, UnitFromId(3913));
    UnitIssueOrder(UnitFromId(3913), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(4384)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(3913), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Overseer4_Init () {
    gt_Overseer4 = TriggerCreate("gt_Overseer4_Func");
    TriggerAddEventUnitRegion(gt_Overseer4, UnitRefFromVariable("gv_vorazun"), RegionFromId(78), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mutalisks
//--------------------------------------------------------------------------------------------------
bool gt_Mutalisks_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_mutalisks1;
    unitgroup lv_mutalisks2;
    unitgroup lv_mutalisks3;

    // Automatic Variable Declarations
    int autoD1EBD169_n;
    int autoD1EBD169_i;
    int autoDAC53696_n;
    int autoDAC53696_i;
    int auto4D2CCC36_n;
    int auto4D2CCC36_i;
    unitgroup auto82330BE7_g;
    int auto82330BE7_u;
    unit auto82330BE7_var;
    unitgroup auto5DA51078_g;
    int auto5DA51078_u;
    unit auto5DA51078_var;
    unitgroup auto978B149B_g;
    int auto978B149B_u;
    unit auto978B149B_var;

    // Variable Initialization
    lv_mutalisks1 = UnitGroupEmpty();
    lv_mutalisks2 = UnitGroupEmpty();
    lv_mutalisks3 = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    autoD1EBD169_n = libLotv_gf_DifficultyValueInt2(3, 3, 4, 6);
    for (autoD1EBD169_i = 1; autoD1EBD169_i <= autoD1EBD169_n; autoD1EBD169_i += 1) {
        UnitCreate(1, "Mutalisk", 0, gv_pLAYER_05_AMONS_FORCES, RegionRandomPoint(RegionFromId(79)), libNtve_gf_RandomAngle());
        AISetUnitScriptControlled(UnitLastCreated(), true);
        UnitGroupAdd(lv_mutalisks1, UnitLastCreated());
    }
    autoDAC53696_n = libLotv_gf_DifficultyValueInt2(4, 4, 6, 8);
    for (autoDAC53696_i = 1; autoDAC53696_i <= autoDAC53696_n; autoDAC53696_i += 1) {
        UnitCreate(1, "Mutalisk", 0, gv_pLAYER_05_AMONS_FORCES, RegionRandomPoint(RegionFromId(80)), libNtve_gf_RandomAngle());
        AISetUnitScriptControlled(UnitLastCreated(), true);
        UnitGroupAdd(lv_mutalisks2, UnitLastCreated());
    }
    auto4D2CCC36_n = libLotv_gf_DifficultyValueInt2(3, 3, 4, 6);
    for (auto4D2CCC36_i = 1; auto4D2CCC36_i <= auto4D2CCC36_n; auto4D2CCC36_i += 1) {
        UnitCreate(1, "Mutalisk", 0, gv_pLAYER_05_AMONS_FORCES, RegionRandomPoint(RegionFromId(81)), libNtve_gf_RandomAngle());
        AISetUnitScriptControlled(UnitLastCreated(), true);
        UnitGroupAdd(lv_mutalisks3, UnitLastCreated());
    }
    while (true) {
        Wait(1.0, c_timeAI);
        if (((gv_citadelComplete == true) || (libVCMI_gf_GameIsOver() == true) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true))) {
            return true;
        }

        if ((libNtve_gf_UnitGroupIsDead(lv_mutalisks1) == true) && (libNtve_gf_UnitGroupIsDead(lv_mutalisks2) == true) && (libNtve_gf_UnitGroupIsDead(lv_mutalisks3) == true)) {
            return true;
        }

        auto82330BE7_g = lv_mutalisks1;
        auto82330BE7_u = UnitGroupCount(auto82330BE7_g, c_unitCountAll);
        for (;; auto82330BE7_u -= 1) {
            auto82330BE7_var = UnitGroupUnitFromEnd(auto82330BE7_g, auto82330BE7_u);
            if (auto82330BE7_var == null) { break; }
            if ((libNtve_gf_UnitInRegion(auto82330BE7_var, RegionFromId(79)) == false)) {
                UnitIssueOrder(auto82330BE7_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(79))), c_orderQueueReplace);
            }
            else {
                if ((RandomInt(1, 8) == 1)) {
                    UnitIssueOrder(auto82330BE7_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(79))), c_orderQueueReplace);
                }

            }
        }
        auto5DA51078_g = lv_mutalisks2;
        auto5DA51078_u = UnitGroupCount(auto5DA51078_g, c_unitCountAll);
        for (;; auto5DA51078_u -= 1) {
            auto5DA51078_var = UnitGroupUnitFromEnd(auto5DA51078_g, auto5DA51078_u);
            if (auto5DA51078_var == null) { break; }
            if ((libNtve_gf_UnitInRegion(auto5DA51078_var, RegionFromId(80)) == false)) {
                UnitIssueOrder(auto5DA51078_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(80))), c_orderQueueReplace);
            }
            else {
                if ((RandomInt(1, 8) == 1)) {
                    UnitIssueOrder(auto5DA51078_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(80))), c_orderQueueReplace);
                }

            }
        }
        auto978B149B_g = lv_mutalisks3;
        auto978B149B_u = UnitGroupCount(auto978B149B_g, c_unitCountAll);
        for (;; auto978B149B_u -= 1) {
            auto978B149B_var = UnitGroupUnitFromEnd(auto978B149B_g, auto978B149B_u);
            if (auto978B149B_var == null) { break; }
            if ((libNtve_gf_UnitInRegion(auto978B149B_var, RegionFromId(81)) == false)) {
                UnitIssueOrder(auto978B149B_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(81))), c_orderQueueReplace);
            }
            else {
                if ((RandomInt(1, 8) == 1)) {
                    UnitIssueOrder(auto978B149B_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(81))), c_orderQueueReplace);
                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Mutalisks_Init () {
    gt_Mutalisks = TriggerCreate("gt_Mutalisks_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Swarm Hosts
//--------------------------------------------------------------------------------------------------
bool gt_ActivateSwarmHosts_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto635B78F2_g;
    int auto635B78F2_u;
    unit auto635B78F2_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto635B78F2_g = UnitGroup("SwarmHost", gv_pLAYER_05_AMONS_FORCES, RegionFromId(86), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto635B78F2_u = UnitGroupCount(auto635B78F2_g, c_unitCountAll);
    for (;; auto635B78F2_u -= 1) {
        auto635B78F2_var = UnitGroupUnitFromEnd(auto635B78F2_g, auto635B78F2_u);
        if (auto635B78F2_var == null) { break; }
        AISetUnitScriptControlled(auto635B78F2_var, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateSwarmHosts_Init () {
    gt_ActivateSwarmHosts = TriggerCreate("gt_ActivateSwarmHosts_Func");
    TriggerAddEventUnitRegion(gt_ActivateSwarmHosts, UnitRefFromVariable("gv_alarak"), RegionFromId(18), true);
    TriggerAddEventUnitRegion(gt_ActivateSwarmHosts, UnitRefFromVariable("gv_vorazun"), RegionFromId(18), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Final Overseer Patrol 1
//--------------------------------------------------------------------------------------------------
bool gt_FinalOverseerPatrol1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentPoint = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, "Overseer", 0, gv_pLAYER_05_AMONS_FORCES, PointFromId(4406), 180.0);
    gv_finalOverseer1 = UnitLastCreated();
    while (true) {
        Wait(1.0, c_timeAI);
        if (((UnitIsAlive(gv_finalOverseer1) == false) || (gv_citadelComplete == true) || (libVCMI_gf_GameIsOver() == true) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true))) {
            return true;
        }

        if ((libNtve_gf_UnitInRegion(gv_finalOverseer1, RegionCircle(PointFromName(("Final Overseer " + IntToString(lv_currentPoint))), 2.0)) == false)) {
            UnitIssueOrder(gv_finalOverseer1, OrderTargetingPoint(AbilityCommand("move", 0), PointFromName(("Final Overseer " + IntToString(lv_currentPoint)))), c_orderQueueReplace);
        }
        else {
            lv_currentPoint += 1;
            if ((lv_currentPoint > 5)) {
                lv_currentPoint = 1;
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FinalOverseerPatrol1_Init () {
    gt_FinalOverseerPatrol1 = TriggerCreate("gt_FinalOverseerPatrol1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Final Overseer Patrol 2 (Brutal)
//--------------------------------------------------------------------------------------------------
bool gt_FinalOverseerPatrol2Brutal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentPoint = 4;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, "Overseer", 0, gv_pLAYER_05_AMONS_FORCES, PointFromId(674), 180.0);
    gv_finalOverseer2 = UnitLastCreated();
    while (true) {
        Wait(1.0, c_timeAI);
        if (((UnitIsAlive(gv_finalOverseer2) == false) || (gv_citadelComplete == true) || (libVCMI_gf_GameIsOver() == true) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true))) {
            return true;
        }

        if ((libNtve_gf_UnitInRegion(gv_finalOverseer2, RegionCircle(PointFromName(("Final Overseer " + IntToString(lv_currentPoint))), 2.0)) == false)) {
            UnitIssueOrder(gv_finalOverseer2, OrderTargetingPoint(AbilityCommand("move", 0), PointFromName(("Final Overseer " + IntToString(lv_currentPoint)))), c_orderQueueReplace);
        }
        else {
            lv_currentPoint += 1;
            if ((lv_currentPoint > 5)) {
                lv_currentPoint = 1;
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FinalOverseerPatrol2Brutal_Init () {
    gt_FinalOverseerPatrol2Brutal = TriggerCreate("gt_FinalOverseerPatrol2Brutal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protect Alarak Overlords
//--------------------------------------------------------------------------------------------------
bool gt_ProtectAlarakOverlords_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_citadelComplete == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_CreateOverlordTransport(PointFromId(4415), PointFromId(4421), PointFromId(4415), "Zergling", libLotv_gf_DifficultyValueInt2(4, 4, 4, 5), 0);
    gf_CreateOverlordTransport(PointFromId(4416), PointFromId(4423), PointFromId(4416), libLotv_gf_DifficultyValueVoidUnitType("Zergling", "Zergling", "Hydralisk", "Hydralisk"), libLotv_gf_DifficultyValueInt2(4, 4, 1, 1), 0);
    Wait(11.0, c_timeAI);
    gf_CreateOverlordTransport(PointFromId(4414), PointFromId(4419), PointFromId(4414), "Zergling", libLotv_gf_DifficultyValueInt2(4, 4, 4, 5), 0);
    gf_CreateOverlordTransport(PointFromId(4418), PointFromId(4422), PointFromId(4418), "Zergling", libLotv_gf_DifficultyValueInt2(4, 4, 5, 6), 0);
    Wait(8.0, c_timeAI);
    gf_CreateOverlordTransport(PointFromId(4416), PointFromId(4423), PointFromId(4416), "Zergling", libLotv_gf_DifficultyValueInt2(4, 4, 5, 6), 0);
    Wait(2.0, c_timeAI);
    gf_CreateOverlordTransport(PointFromId(4417), PointFromId(4420), PointFromId(4417), libLotv_gf_DifficultyValueVoidUnitType("Zergling", "Zergling", "Zergling", "Hydralisk"), libLotv_gf_DifficultyValueInt2(4, 4, 4, 1), 0);
    Wait(3.0, c_timeAI);
    gf_CreateOverlordTransport(PointFromId(4418), PointFromId(4422), PointFromId(4418), "Zergling", libLotv_gf_DifficultyValueInt2(4, 4, 5, 6), 0);
    Wait(19.0, c_timeAI);
    gf_CreateOverlordTransport(PointFromId(4415), PointFromId(4421), PointFromId(4415), "Zergling", libLotv_gf_DifficultyValueInt2(4, 4, 4, 5), 0);
    gf_CreateOverlordTransport(PointFromId(4417), PointFromId(4420), PointFromId(4417), "Zergling", libLotv_gf_DifficultyValueInt2(4, 4, 4, 5), 0);
    Wait(1.0, c_timeAI);
    gf_CreateOverlordTransport(PointFromId(4414), PointFromId(4419), PointFromId(4414), libLotv_gf_DifficultyValueVoidUnitType("Zergling", "Zergling", "Hydralisk", "Hydralisk"), libLotv_gf_DifficultyValueInt2(4, 4, 1, 1), 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtectAlarakOverlords_Init () {
    gt_ProtectAlarakOverlords = TriggerCreate("gt_ProtectAlarakOverlords_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protect Alarak Zerg
//--------------------------------------------------------------------------------------------------
bool gt_ProtectAlarakZerg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto5126FBC2_n;
    int auto5126FBC2_i;
    int auto2D151859_n;
    int auto2D151859_i;

    // Conditions
    if (testConds) {
        if (!((gv_citadelComplete == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(3.0, c_timeAI);
    while (true) {
        auto5126FBC2_n = libLotv_gf_DifficultyValueInt2(3, 3, 3, 3);
        for (auto5126FBC2_i = 1; auto5126FBC2_i <= auto5126FBC2_n; auto5126FBC2_i += 1) {
            if (((gv_citadelComplete == true) || (libVCMI_gf_GameIsOver() == true) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true) || (UnitIsAlive(gv_alarak) == false))) {
                return true;
            }

            UnitCreate(1, "ZerglingBurrowed", 0, gv_pLAYER_05_AMONS_FORCES, RegionRandomPoint(RegionFromId(95)), libNtve_gf_RandomAngle());
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
            UnitSetCustomValue(UnitLastCreated(), 0, PointGetX(UnitGetPosition(UnitLastCreated())));
            UnitSetCustomValue(UnitLastCreated(), 1, PointGetY(UnitGetPosition(UnitLastCreated())));
            UnitGroupAdd(gv_activeEnemyUnits, UnitLastCreated());
            Wait(0.1, c_timeAI);
            AISetUnitScriptControlled(UnitLastCreated(), false);
        }
        Wait(libLotv_gf_DifficultyValueFixed2(7.0, 7.0, 6.0, 5.0), c_timeAI);
        auto2D151859_n = libLotv_gf_DifficultyValueInt2(1, 1, 1, 1);
        for (auto2D151859_i = 1; auto2D151859_i <= auto2D151859_n; auto2D151859_i += 1) {
            if (((gv_citadelComplete == true) || (libVCMI_gf_GameIsOver() == true) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true) || (UnitIsAlive(gv_alarak) == false))) {
                return true;
            }

            if ((UnitIsAlive(gv_finalOverseer1) == true)) {
                UnitCreate(1, "HydraliskBurrowed", 0, gv_pLAYER_05_AMONS_FORCES, RegionRandomPoint(RegionCircle(PointWithOffsetPolar(PointFromId(4404), -6.5, AngleBetweenPoints(UnitGetPosition(gv_alarak), UnitGetPosition(gv_finalOverseer1))), 4.0)), libNtve_gf_RandomAngle());
            }
            else {
                UnitCreate(1, "HydraliskBurrowed", 0, gv_pLAYER_05_AMONS_FORCES, RegionRandomPoint(RegionFromId(95)), libNtve_gf_RandomAngle());
            }
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
            UnitSetCustomValue(UnitLastCreated(), 0, PointGetX(UnitGetPosition(UnitLastCreated())));
            UnitSetCustomValue(UnitLastCreated(), 1, PointGetY(UnitGetPosition(UnitLastCreated())));
            UnitGroupAdd(gv_activeEnemyUnits, UnitLastCreated());
            Wait(0.1, c_timeAI);
            AISetUnitScriptControlled(UnitLastCreated(), false);
        }
        Wait(3.0, c_timeAI);
        while (!((UnitGroupCount(gv_activeEnemyUnits, c_unitCountAlive) < libLotv_gf_DifficultyValueInt2(12, 16, 20, 24)))) {
            Wait(1.0, c_timeAI);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtectAlarakZerg_Init () {
    gt_ProtectAlarakZerg = TriggerCreate("gt_ProtectAlarakZerg_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gate 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_Gate1Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_citadelComplete == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((UnitGroupCount(gv_gate1Zerg, c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeAI);
    }
    while (!(((gv_citadelComplete == true) || (libNtve_gf_UnitInRegion(gv_alarak, RegionFromId(21)) == true) || (libNtve_gf_UnitInRegion(gv_vorazun, RegionFromId(21)) == true)))) {
        Wait(1.0, c_timeAI);
    }
    TriggerQueueEnter();
    if (((gv_citadelComplete == true) || (TriggerIsEnabled(gt_AboutDoneQ) == false) || (TriggerIsEnabled(gt_Gate1OpenedQ) == false))) {
        return true;
    }

    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_alarak, "pMission_Aiur04|Line00287", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(19), 10.0, false);
    libVCMI_gf_SendTransmissionCampaign(gv_vorazun, "pMission_Aiur04|Line00288", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    TriggerExecute(gt_ShadowDashPing, true, true);
    TriggerQueueEnter();
    if (((gv_citadelComplete == true) || (TriggerIsEnabled(gt_AboutDoneQ) == false) || (TriggerIsEnabled(gt_Gate1OpenedQ) == false))) {
        return true;
    }

    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_alarak, "pMission_Aiur04|Line00289", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Gate1Q_Init () {
    gt_Gate1Q = TriggerCreate("gt_Gate1Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gate 1 Blocker
//--------------------------------------------------------------------------------------------------
bool gt_Gate1Blocker_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitRemove(UnitFromId(4413));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Gate1Blocker_Init () {
    gt_Gate1Blocker = TriggerCreate("gt_Gate1Blocker_Func");
    TriggerAddEventUnitRegion(gt_Gate1Blocker, UnitRefFromVariable("gv_vorazun"), RegionFromId(93), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: About Done Q
//--------------------------------------------------------------------------------------------------
bool gt_AboutDoneQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_citadelComplete == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if (((gv_citadelComplete == true) || (TriggerIsEnabled(gt_Gate1OpenedQ) == false))) {
        return true;
    }

    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_alarak, "pMission_Aiur04|Line00291", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AboutDoneQ_Init () {
    gt_AboutDoneQ = TriggerCreate("gt_AboutDoneQ_Func");
    TriggerAddEventUnitRegion(gt_AboutDoneQ, UnitRefFromVariable("gv_vorazun"), RegionFromId(29), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gate 1 Opened Q
//--------------------------------------------------------------------------------------------------
bool gt_Gate1OpenedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_citadelComplete == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitKill(UnitFromId(1385));
    UnitIssueOrder(UnitFromId(1194), Order(AbilityCommand("StarShipAdun_DoorNELowered", 0)), c_orderQueueReplace);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(31), 10.0, false);
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), RegionGetCenter(RegionFromId(31)), 5.0, Color(0.00, 100.00, 0.00));
    UIAlertClear(gv_pLAYER_01_USER);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/25288C8D"), null, RegionGetCenter(RegionFromId(31)));
    Wait(1.0, c_timeReal);
    libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/A4DC0400"));
    TriggerQueueEnter();
    if ((gv_citadelComplete == true)) {
        return true;
    }

    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_vorazun, "pMission_Aiur04|Line00293", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(gv_alarak, "pMission_Aiur04|Line00294", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Gate1OpenedQ_Init () {
    gt_Gate1OpenedQ = TriggerCreate("gt_Gate1OpenedQ_Func");
    TriggerAddEventUnitRegion(gt_Gate1OpenedQ, UnitRefFromVariable("gv_vorazun"), RegionFromId(27), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gate 2 Hint Q
//--------------------------------------------------------------------------------------------------
bool gt_Gate2HintQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_citadelComplete == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_05_AMONS_FORCES, RegionFromId(62), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && ((gv_citadelComplete == true) || (libNtve_gf_UnitInRegion(gv_alarak, RegionFromId(62)) == true) || (libNtve_gf_UnitInRegion(gv_vorazun, RegionFromId(62)) == true)))) {
        Wait(1.0, c_timeAI);
    }
    if ((gv_citadelComplete == true)) {
        return true;
    }

    UnitSetCustomValue(UnitFromId(3766), 0, PointGetX(PointFromId(3914)));
    UnitSetCustomValue(UnitFromId(3766), 1, PointGetY(PointFromId(3914)));
    UIAlertClear(gv_pLAYER_01_USER);
    TriggerQueueEnter();
    if (((gv_citadelComplete == true) || (TriggerIsEnabled(gt_Gate2OpenedQ) == false))) {
        return true;
    }

    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(63), 10.0, false);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_alarak, "pMission_Aiur04|Line00295", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Gate2HintQ_Init () {
    gt_Gate2HintQ = TriggerCreate("gt_Gate2HintQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gate 2 Blocker
//--------------------------------------------------------------------------------------------------
bool gt_Gate2Blocker_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitRemove(UnitFromId(4412));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Gate2Blocker_Init () {
    gt_Gate2Blocker = TriggerCreate("gt_Gate2Blocker_Func");
    TriggerAddEventUnitRegion(gt_Gate2Blocker, UnitRefFromVariable("gv_vorazun"), RegionFromId(94), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gate 2 Opened Q
//--------------------------------------------------------------------------------------------------
bool gt_Gate2OpenedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_citadelComplete == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitKill(UnitFromId(4169));
    UnitIssueOrder(UnitFromId(3639), Order(AbilityCommand("StarShipAdun_DoorNELowered", 0)), c_orderQueueReplace);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(63), 10.0, false);
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), RegionGetCenter(RegionFromId(63)), 5.0, Color(0.00, 100.00, 0.00));
    UIAlertClear(gv_pLAYER_01_USER);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/5856C9B5"), null, RegionGetCenter(RegionFromId(63)));
    Wait(1.0, c_timeReal);
    libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/9C0CE285"));
    TriggerQueueEnter();
    if ((gv_citadelComplete == true)) {
        return true;
    }

    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_vorazun, "pMission_Aiur04|Line00015", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(gv_alarak, "pMission_Aiur04|Line00259", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Gate2OpenedQ_Init () {
    gt_Gate2OpenedQ = TriggerCreate("gt_Gate2OpenedQ_Func");
    TriggerAddEventUnitRegion(gt_Gate2OpenedQ, UnitRefFromVariable("gv_vorazun"), RegionFromId(72), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mutalisks Q
//--------------------------------------------------------------------------------------------------
bool gt_MutalisksQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_citadelComplete == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_citadelComplete == true)) {
        return true;
    }

    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_alarak, "pMission_Aiur04|Line00296", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MutalisksQ_Init () {
    gt_MutalisksQ = TriggerCreate("gt_MutalisksQ_Func");
    TriggerAddEventUnitRegion(gt_MutalisksQ, UnitRefFromVariable("gv_vorazun"), RegionFromId(82), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gate 3 Q
//--------------------------------------------------------------------------------------------------
bool gt_Gate3Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_citadelComplete == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(gv_vorazun, RegionFromId(141)) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(gv_alarak, RegionFromId(141)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_citadelComplete == true)) {
        return true;
    }

    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(90), 10.0, false);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_vorazun, "pMission_Aiur04|Line00297", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(gv_vorazun, "pMission_Aiur04|Line00298", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(gv_vorazun, "pMission_Aiur04|Line00299", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    UIAlertClear(gv_pLAYER_01_USER);
    TriggerExecute(gt_FinalGatePan, true, true);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(PointFromId(4404), 8.0), 11.5, false);
    if ((gv_citadelComplete == true)) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Beacon_Protoss", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(4404));
    gv_alarakBeacon = UnitLastCreated();
    libVCMI_gf_SetUnitInfoTextCampaign(gv_alarakBeacon, StringExternal("Param/Value/833D9862"), StringExternal("Param/Value/1866603F"), null);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Beacon_Protoss", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(4404));
    UnitKill(UnitLastCreated());
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(4404), 5.0, Color(0.00, 100.00, 0.00));
    UIAlertClear(gv_pLAYER_01_USER);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/B8810D19"), null, PointFromId(4404));
    Wait(1.0, c_timeAI);
    while (!((libNtve_gf_UnitInRegion(gv_alarak, RegionFromId(91)) == true))) {
        Wait(1.0, c_timeAI);
    }
    if ((gv_citadelComplete == true)) {
        return true;
    }

    UnitKill(gv_alarakBeacon);
    UIAlertClear(gv_pLAYER_01_USER);
    TriggerExecute(gt_FinalOverseerPatrol1, true, false);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        TriggerExecute(gt_FinalOverseerPatrol2Brutal, true, false);
    }

    if ((UnitGroupHasUnit(UnitGroupSelected(gv_pLAYER_01_USER), gv_alarak) == true)) {
        UnitSelect(gv_alarak, gv_pLAYER_01_USER, false);
    }

    UnitSetState(gv_alarak, c_unitStateSelectable, false);
    UnitSetState(gv_alarak, c_unitStateFidget, false);
    UnitIssueOrder(gv_alarak, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(4404)), c_orderQueueReplace);
    UnitIssueOrder(gv_alarak, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(PointFromId(4404), 1.0, 135.0)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_alarak, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    Wait(0.5, c_timeAI);
    if ((gv_citadelComplete == true)) {
        return true;
    }

    UnitSetFacing(gv_alarak, 135.0, 0.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_alarak), c_animNameDefault, "Hover", c_animFlagPlayForever, c_animTimeDefault);
    UnitBehaviorAdd(gv_alarak, "GenericStunNoMovement", gv_alarak, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "VoidRiftUnselectable", c_unitCreateIgnorePlacement, 0, UnitGetPosition(gv_alarak));
    gv_alarakChannelEffect = UnitLastCreated();
    gv_alarakChanneling = true;
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PAiur04_Music_ProtectAlarak", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 2.0);
    TriggerExecute(gt_ProtectAlarakTimer, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Gate3Q_Init () {
    gt_Gate3Q = TriggerCreate("gt_Gate3Q_Func");
    TriggerAddEventUnitRegion(gt_Gate3Q, UnitRefFromVariable("gv_vorazun"), RegionFromId(89), true);
    TriggerAddEventUnitRegion(gt_Gate3Q, UnitRefFromVariable("gv_alarak"), RegionFromId(89), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Final Gate Pan
//--------------------------------------------------------------------------------------------------
bool gt_FinalGatePan_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_citadelComplete == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((RegionContainsPoint(RegionFromId(92), CameraGetTarget(gv_pLAYER_01_USER)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    CameraLockInput(gv_pLAYER_01_USER, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 1.5, -1, 10.0, false);
    CameraPan(gv_pLAYER_01_USER, PointFromId(4404), 1.5, -1, 10.0, false);
    Wait(1.5, c_timeGame);
    CameraLockInput(gv_pLAYER_01_USER, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FinalGatePan_Init () {
    gt_FinalGatePan = TriggerCreate("gt_FinalGatePan_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protect Alarak Timer
//--------------------------------------------------------------------------------------------------
bool gt_ProtectAlarakTimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto81F81720_g;
    int auto81F81720_u;
    unit auto81F81720_var;

    // Conditions
    if (testConds) {
        if (!((gv_citadelComplete == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TimerStart(gv_protectAlarakTimer, 60.0, false, c_timeAI);
    libVCUI_gf_TimerWindowCreate(gv_protectAlarakTimer, StringExternal("Param/Value/562CD866"), true, false);
    gv_protectAlarakWindow = TimerWindowLastCreated();
    libVCUI_gf_SetTimerWindowDangerThreshold(-1.0);
    TimerWindowSetFormat(gv_protectAlarakWindow, StringToText("<sectotal/>"));
    TriggerExecute(gt_ProtectAlarakOverlords, true, false);
    TriggerExecute(gt_ProtectAlarakZerg, true, false);
    TriggerExecute(gt_ProtectAlarakWarningQ, true, false);
    TriggerExecute(gt_ProtectAlarakAlmostDoneQ, true, false);
    libNtve_gf_WaitForTimer(gv_protectAlarakTimer, 0.0, false);
    if (((gv_citadelComplete == true) || (libVCMI_gf_GameIsOver() == true) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true))) {
        return true;
    }

    libNtve_gf_CreateModelAtPoint("SpearofAdunAOEBlastImpact", PointFromId(4404));
    gv_alarakBlastWave = libNtve_gf_ActorLastCreated();
    libNtve_gf_PlayAnimation(gv_alarakBlastWave, c_animNameDefault, "Birth", 0, c_animTimeDefault);
    CameraShake(gv_pLAYER_01_USER, "Heavy", "Earthquake", 0.0, 1.0, 3.0);
    SoundPlayForPlayer(SoundLink("PAiur04_Citadel_ShockWave", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(gt_CitadelVictory, true, false);
    Wait(0.5, c_timeGame);
    SoundPlayForPlayer(SoundLink("PAiur04_Citadel_ShockWave_RockDebris", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    auto81F81720_g = UnitGroup(null, gv_pLAYER_05_AMONS_FORCES, RegionFromId(88), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto81F81720_u = UnitGroupCount(auto81F81720_g, c_unitCountAll);
    for (;; auto81F81720_u -= 1) {
        auto81F81720_var = UnitGroupUnitFromEnd(auto81F81720_g, auto81F81720_u);
        if (auto81F81720_var == null) { break; }
        UnitKill(auto81F81720_var);
    }
    Wait(6.5, c_timeGame);
    libNtve_gf_KillModel(gv_alarakBlastWave);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtectAlarakTimer_Init () {
    gt_ProtectAlarakTimer = TriggerCreate("gt_ProtectAlarakTimer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protect Alarak Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtectAlarakWarningQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_citadelComplete == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!(((UnitGetPropertyFixed(gv_alarak, c_unitPropLifePercent, c_unitPropCurrent) < 90.0) || (gv_citadelComplete == true) || (libVCMI_gf_GameIsOver() == true) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true)))) {
        Wait(1.0, c_timeAI);
    }
    TriggerQueueEnter();
    if (((UnitIsAlive(gv_alarak) == false) || (gv_citadelComplete == true) || (libVCMI_gf_GameIsOver() == true) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true) || (TimerGetRemaining(gv_protectAlarakTimer) < 10.0))) {
        return true;
    }

    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_alarak, "pMission_Aiur04|Line00300", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtectAlarakWarningQ_Init () {
    gt_ProtectAlarakWarningQ = TriggerCreate("gt_ProtectAlarakWarningQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protect Alarak Almost Done Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtectAlarakAlmostDoneQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_citadelComplete == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!(((TimerGetRemaining(gv_protectAlarakTimer) < 20.0) || (gv_citadelComplete == true) || (libVCMI_gf_GameIsOver() == true) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true)))) {
        Wait(1.0, c_timeAI);
    }
    TriggerQueueEnter();
    if (((UnitIsAlive(gv_alarak) == false) || (gv_citadelComplete == true) || (libVCMI_gf_GameIsOver() == true) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true) || (TimerGetRemaining(gv_protectAlarakTimer) < 5.0))) {
        return true;
    }

    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_alarak, "pMission_Aiur04|Line00301", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtectAlarakAlmostDoneQ_Init () {
    gt_ProtectAlarakAlmostDoneQ = TriggerCreate("gt_ProtectAlarakAlmostDoneQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Temple Init
//--------------------------------------------------------------------------------------------------
bool gt_TempleInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoCBC8EB7D_g;
    int autoCBC8EB7D_u;
    unit autoCBC8EB7D_var;

    // Actions
    if (!runActions) {
        return true;
    }

    AISetUnitScriptControlled(gv_superWarpGateAmon, true);
    autoCBC8EB7D_g = UnitGroup(null, gv_pLAYER_05_AMONS_FORCES, RegionFromId(100), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoCBC8EB7D_u = UnitGroupCount(autoCBC8EB7D_g, c_unitCountAll);
    for (;; autoCBC8EB7D_u -= 1) {
        autoCBC8EB7D_var = UnitGroupUnitFromEnd(autoCBC8EB7D_g, autoCBC8EB7D_u);
        if (autoCBC8EB7D_var == null) { break; }
        UnitGroupAdd(gv_hybridGroup, autoCBC8EB7D_var);
        UnitSetInfoText(autoCBC8EB7D_var, StringToText(""), StringExternal("Param/Value/98171FC4"), StringToText(""));
    }
    libVCMI_gf_SetUnitInfoTextCampaign(UnitFromId(1280), null, StringExternal("Param/Value/C077698E"), StringExternal("Param/Value/0ADD4E92"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TempleInit_Init () {
    gt_TempleInit = TriggerCreate("gt_TempleInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Temple Starting Sequence
//--------------------------------------------------------------------------------------------------
bool gt_TempleStartingSequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_achievementSectionTwoTimer, 361.0, false, c_timeGame);
    libVCMI_gf_AddMissionTipCampaign("Fenix");
    libVCMI_gf_AddMissionTipCampaign("Karax");
    UnitGroupAdd(gv_activePlayerUnits, gv_karax);
    UnitGroupAdd(gv_activePlayerUnits, gv_fenix);
    UnitGroupSelect(gv_activePlayerUnits, gv_pLAYER_01_USER, true);
    TriggerEnable(gt_DefeatKaraxDead, true);
    TriggerEnable(gt_DefeatFenixDead, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, true);
    UIAlertClear(gv_pLAYER_01_USER);
    ObjectiveShow(gv_objective_CitadelPowerStructure, PlayerGroupAll(), false);
    ObjectiveShow(gv_objectiveAlarakMustSurvive, PlayerGroupAll(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathingBlocker16x16Diagonal", c_unitCreateIgnorePlacement, 0, PointFromId(3303));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathingBlocker16x16Diagonal", c_unitCreateIgnorePlacement, 0, PointFromId(3304));
    TriggerEnable(gt_TemplePeriodicAttackCheck, true);
    TriggerEnable(gt_ReclamationCameraTrigger, true);
    TriggerExecute(gt_TempleInitialEncounter, true, false);
    TriggerExecute(gt_PathProtossLeft, true, false);
    TriggerExecute(gt_ReaverGroup, true, false);
    TriggerExecute(gt_PathProtossRight, true, false);
    TriggerExecute(gt_ColossusGroup, true, false);
    TriggerExecute(gt_PurifyFenixQ, true, false);
    TriggerExecute(gt_TemplePatrolMiddle, true, false);
    TriggerExecute(gt_RepeatedPatrolActivation, true, false);
    Wait(2.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveAssembleanArmyCreate, true, false);
    TriggerEnable(gt_TempleSupplyChanges, true);
    TriggerExecute(gt_ObjectiveTemplePowerStructureCreate, true, false);
    TriggerExecute(gt_ObjectiveKaraxandFenixMustSurviveCreate, true, true);
    libVCMI_gf_CreateObjectivePing(true, PointFromId(191), StringExternal("Param/Value/6B6B0CFD"));
    gv_primaryObjectivePing = PingLastCreated();
    libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/D5C9D0FA"));
    Wait(2.0, c_timeReal);
    TriggerQueueExit();
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ReclamationPan, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TempleStartingSequence_Init () {
    gt_TempleStartingSequence = TriggerCreate("gt_TempleStartingSequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Temple Victory
//--------------------------------------------------------------------------------------------------
bool gt_TempleVictory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_karax) == true))) {
            return false;
        }

        if (!((UnitIsAlive(gv_fenix) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_templeComplete = true;
    TriggerEnable(gt_DefeatKaraxDead, false);
    TriggerEnable(gt_DefeatFenixDead, false);
    libNtve_gf_ChangeUnitDamage(gv_karax, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    libNtve_gf_ChangeUnitDamage(gv_fenix, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    PingDestroy(gv_primaryObjectivePing);
    TriggerExecute(gt_ObjectiveAssembleanArmyComplete, true, true);
    TriggerExecute(gt_ObjectiveTemplePowerStructureComplete, true, true);
    TriggerExecute(gt_ObjectiveKaraxandFenixMustSurviveComplete, true, true);
    TriggerExecute(gt_MidTempleCavernsQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TempleVictory_Init () {
    gt_TempleVictory = TriggerCreate("gt_TempleVictory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Temple Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_TempleCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto0A59A6D8_g;
    int auto0A59A6D8_u;
    unit auto0A59A6D8_var;
    unitgroup autoEB0D239D_g;
    int autoEB0D239D_u;
    unit autoEB0D239D_var;
    unitgroup auto13EB6047_g;
    int auto13EB6047_u;
    unit auto13EB6047_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto0A59A6D8_g = gv_activeEnemyUnits;
    auto0A59A6D8_u = UnitGroupCount(auto0A59A6D8_g, c_unitCountAll);
    for (;; auto0A59A6D8_u -= 1) {
        auto0A59A6D8_var = UnitGroupUnitFromEnd(auto0A59A6D8_g, auto0A59A6D8_u);
        if (auto0A59A6D8_var == null) { break; }
        UnitRemove(auto0A59A6D8_var);
    }
    autoEB0D239D_g = UnitGroup(null, gv_pLAYER_05_AMONS_FORCES, RegionFromId(98), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoEB0D239D_u = UnitGroupCount(autoEB0D239D_g, c_unitCountAll);
    for (;; autoEB0D239D_u -= 1) {
        autoEB0D239D_var = UnitGroupUnitFromEnd(autoEB0D239D_g, autoEB0D239D_u);
        if (autoEB0D239D_var == null) { break; }
        UnitRemove(autoEB0D239D_var);
    }
    auto13EB6047_g = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(98), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto13EB6047_u = UnitGroupCount(auto13EB6047_g, c_unitCountAll);
    for (;; auto13EB6047_u -= 1) {
        auto13EB6047_var = UnitGroupUnitFromEnd(auto13EB6047_g, auto13EB6047_u);
        if (auto13EB6047_var == null) { break; }
        UnitRemove(auto13EB6047_var);
    }
    PingDestroy(gv_primaryObjectivePing);
    ObjectiveShow(gv_objective_AssembleArmy, PlayerGroupAll(), false);
    TriggerExecute(gt_ObjectiveTemplePowerStructureComplete, true, false);
    ObjectiveShow(gv_objective_TemplePowerStructure, PlayerGroupAll(), false);
    TriggerExecute(gt_ObjectiveKaraxandFenixMustSurviveComplete, true, false);
    ObjectiveShow(gv_objective_KaraxAndFenixMustSurvive, PlayerGroupAll(), false);
    TriggerEnable(gt_DefeatKaraxDead, false);
    TriggerEnable(gt_DefeatFenixDead, false);
    TriggerEnable(gt_TemplePeriodicAttackCheck, false);
    TriggerEnable(gt_ReclamationCameraTrigger, false);
    TriggerStop(gt_HybridReaverSpawns);
    gv_templeComplete = true;
    libNtve_gf_KillModel(gv_reclamationReticle);
    TextTagDestroy(gv_reclamationTag);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Reclamation", false);
    TimerPause(gv_achievementSectionTwoTimer, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TempleCleanup_Init () {
    gt_TempleCleanup = TriggerCreate("gt_TempleCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reclamation Q
//--------------------------------------------------------------------------------------------------
bool gt_ReclamationQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_templeComplete == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_ReclamationPan, false);
    if ((UnitIsAlive(UnitFromId(299)) == true) && (UnitGetOwner(UnitFromId(299)) == gv_pLAYER_05_AMONS_FORCES)) {
        VisRevealArea(gv_pLAYER_01_USER, RegionFromId(105), 8.0, false);
        libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(UnitFromId(299)), 5.0, Color(100.00, 0.00, 0.00));
        UISetButtonFaceHighlighted(PlayerGroupAll(), "Reclamation", true);
        libVCMI_gf_AttachReticleEffectAndTextTagOnUnit(libVCMI_ge_CampaginReticleType_ProtossEnemy, libVCMI_ge_CampaginReticleSize_Large, StringExternal("Param/Value/AF40382A"), UnitFromId(299), "Ref_Origin");
        gv_reclamationReticle = libNtve_gf_ActorLastCreated();
        gv_reclamationTag = TextTagLastCreated();
        TextTagSetPosition(gv_reclamationTag, UnitGetPosition(UnitFromId(299)), 0.0);
        UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/28E7787C"), null, UnitGetPosition(UnitFromId(299)));
        TriggerEnable(gt_ReclamationUsed, true);
        Wait(1.0, c_timeReal);
    }

    TriggerQueueEnter();
    if ((gv_templeComplete == true)) {
        return true;
    }

    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_karax, "pMission_Aiur04|Line00309", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReclamationQ_Init () {
    gt_ReclamationQ = TriggerCreate("gt_ReclamationQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reclamation Pan
//--------------------------------------------------------------------------------------------------
bool gt_ReclamationPan_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_karax) == true))) {
            return false;
        }

        if (!((gv_templeComplete == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitIsSelected(gv_karax, gv_pLAYER_01_USER) == true) && (libNtve_gf_UnitInRegion(gv_karax, RegionFromId(103)) == true) && (RegionContainsPoint(RegionFromId(103), CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
        CameraLockInput(gv_pLAYER_01_USER, true);
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 2.0, -1, 10.0, false);
        CameraPan(gv_pLAYER_01_USER, PointFromId(302), 2.0, -1, 10.0, false);
        Wait(2.0, c_timeGame);
        CameraLockInput(gv_pLAYER_01_USER, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReclamationPan_Init () {
    gt_ReclamationPan = TriggerCreate("gt_ReclamationPan_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reclamation Proximity Trigger
//--------------------------------------------------------------------------------------------------
bool gt_ReclamationProximityTrigger_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ReclamationQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReclamationProximityTrigger_Init () {
    gt_ReclamationProximityTrigger = TriggerCreate("gt_ReclamationProximityTrigger_Func");
    TriggerAddEventUnitRegion(gt_ReclamationProximityTrigger, UnitRefFromVariable("gv_karax"), RegionFromId(104), true);
    TriggerAddEventUnitRegion(gt_ReclamationProximityTrigger, UnitRefFromVariable("gv_fenix"), RegionFromId(104), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reclamation Camera Trigger
//--------------------------------------------------------------------------------------------------
bool gt_ReclamationCameraTrigger_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((RegionContainsPoint(RegionFromId(105), CameraGetTarget(gv_pLAYER_01_USER)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ReclamationQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReclamationCameraTrigger_Init () {
    gt_ReclamationCameraTrigger = TriggerCreate("gt_ReclamationCameraTrigger_Func");
    TriggerEnable(gt_ReclamationCameraTrigger, false);
    TriggerAddEventTimePeriodic(gt_ReclamationCameraTrigger, 0.1, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reclamation Used
//--------------------------------------------------------------------------------------------------
bool gt_ReclamationUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(gv_reclamationReticle);
    TextTagDestroy(gv_reclamationTag);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Reclamation", false);
    UIAlertClear(gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReclamationUsed_Init () {
    gt_ReclamationUsed = TriggerCreate("gt_ReclamationUsed_Func");
    TriggerEnable(gt_ReclamationUsed, false);
    TriggerAddEventUnitAbility(gt_ReclamationUsed, null, AbilityCommand("Reclamation", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reclamation Target Dies
//--------------------------------------------------------------------------------------------------
bool gt_ReclamationTargetDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_KillModel(gv_reclamationReticle);
    TextTagDestroy(gv_reclamationTag);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Reclamation", false);
    UIAlertClear(gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReclamationTargetDies_Init () {
    gt_ReclamationTargetDies = TriggerCreate("gt_ReclamationTargetDies_Func");
    TriggerAddEventUnitDied(gt_ReclamationTargetDies, UnitRefFromUnit(UnitFromId(299)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reclamation Unit Group Swaps
//--------------------------------------------------------------------------------------------------
bool gt_ReclamationUnitGroupSwaps_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(gv_activeEnemyUnits, EventUnitTargetUnit());
    UnitGroupRemove(gv_templePatrolLeft, EventUnitTargetUnit());
    UnitGroupRemove(gv_templePatrolMiddle, EventUnitTargetUnit());
    UnitGroupRemove(gv_templePatrolRight, EventUnitTargetUnit());
    UnitGroupAdd(gv_activePlayerUnits, EventUnitTargetUnit());
    if ((EventUnitTargetUnit() == UnitFromId(2844))) {
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "HaveColossusBase", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "HaveColossusBase", 1);
        libVoiC_gf_EnableCampaignTechUnit(true, "Colossus", gv_pLAYER_01_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReclamationUnitGroupSwaps_Init () {
    gt_ReclamationUnitGroupSwaps = TriggerCreate("gt_ReclamationUnitGroupSwaps_Func");
    TriggerAddEventUnitAbility(gt_ReclamationUnitGroupSwaps, null, AbilityCommand("Reclamation", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Phase Cannon Q
//--------------------------------------------------------------------------------------------------
bool gt_PhaseCannonQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_enemyProtoss;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemyProtoss = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_templeComplete == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_enemyProtoss = UnitGroup(null, gv_pLAYER_05_AMONS_FORCES, RegionFromId(110), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    TriggerQueueEnter();
    if (((gv_templeComplete == true) || (libNtve_gf_UnitGroupIsDead(lv_enemyProtoss) == true))) {
        return true;
    }

    UISetButtonFaceHighlighted(PlayerGroupAll(), "PhaseCannon", true);
    TriggerEnable(gt_PhaseCannonUsed, true);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_karax, "pMission_Aiur04|Line00312", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    while (!((libNtve_gf_UnitGroupIsDead(lv_enemyProtoss) == true))) {
        Wait(1.0, c_timeAI);
    }
    UISetButtonFaceHighlighted(PlayerGroupAll(), "PhaseCannon", false);
    TriggerQueueEnter();
    if (((gv_templeComplete == true) || (ObjectiveGetState(gv_objective_AssembleArmy) == c_objectiveStateCompleted))) {
        return true;
    }

    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_fenix, "pMission_Aiur04|Line00313", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(gv_karax, "pMission_Aiur04|Line00314", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PhaseCannonQ_Init () {
    gt_PhaseCannonQ = TriggerCreate("gt_PhaseCannonQ_Func");
    TriggerAddEventUnitRegion(gt_PhaseCannonQ, UnitRefFromVariable("gv_karax"), RegionFromId(110), true);
    TriggerAddEventUnitRegion(gt_PhaseCannonQ, UnitRefFromVariable("gv_fenix"), RegionFromId(110), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Phase Cannon Used
//--------------------------------------------------------------------------------------------------
bool gt_PhaseCannonUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "PhaseCannon", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PhaseCannonUsed_Init () {
    gt_PhaseCannonUsed = TriggerCreate("gt_PhaseCannonUsed_Func");
    TriggerEnable(gt_PhaseCannonUsed, false);
    TriggerAddEventUnitAbility(gt_PhaseCannonUsed, null, AbilityCommand("PhaseCannon", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Karax Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatKaraxDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libVCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libVCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/00B8D802"), libVCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    TriggerExecute(gt_ObjectiveKaraxandFenixMustSurviveFailed, true, true);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatKaraxDead_Init () {
    gt_DefeatKaraxDead = TriggerCreate("gt_DefeatKaraxDead_Func");
    TriggerEnable(gt_DefeatKaraxDead, false);
    TriggerAddEventUnitDied(gt_DefeatKaraxDead, UnitRefFromVariable("gv_karax"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Fenix Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatFenixDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libVCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libVCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/B01D1656"), libVCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    TriggerExecute(gt_ObjectiveKaraxandFenixMustSurviveFailed, true, true);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatFenixDead_Init () {
    gt_DefeatFenixDead = TriggerCreate("gt_DefeatFenixDead_Func");
    TriggerEnable(gt_DefeatFenixDead, false);
    TriggerAddEventUnitDied(gt_DefeatFenixDead, UnitRefFromVariable("gv_fenix"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Training
//--------------------------------------------------------------------------------------------------
bool gt_UnitTraining_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Gateway") || (UnitGetType(EventUnit()) == "RoboticsFacility")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_activePlayerUnits, EventUnitProgressUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitTraining_Init () {
    gt_UnitTraining = TriggerCreate("gt_UnitTraining_Func");
    TriggerAddEventUnitTrainProgress(gt_UnitTraining, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Temple Periodic Attack Check
//--------------------------------------------------------------------------------------------------
bool gt_TemplePeriodicAttackCheck_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto27FF145D_g;
    int auto27FF145D_u;
    unit auto27FF145D_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitGroupIsDead(gv_activePlayerUnits) == true)) {
        return true;
    }

    auto27FF145D_g = gv_activeEnemyUnits;
    auto27FF145D_u = UnitGroupCount(auto27FF145D_g, c_unitCountAll);
    for (;; auto27FF145D_u -= 1) {
        auto27FF145D_var = UnitGroupUnitFromEnd(auto27FF145D_g, auto27FF145D_u);
        if (auto27FF145D_var == null) { break; }
        libNtve_gf_AICast(auto27FF145D_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(gv_activePlayerUnits, UnitGetPosition(auto27FF145D_var)))));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TemplePeriodicAttackCheck_Init () {
    gt_TemplePeriodicAttackCheck = TriggerCreate("gt_TemplePeriodicAttackCheck_Func");
    TriggerEnable(gt_TemplePeriodicAttackCheck, false);
    TriggerAddEventTimePeriodic(gt_TemplePeriodicAttackCheck, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Temple Initial Encounter
//--------------------------------------------------------------------------------------------------
bool gt_TempleInitialEncounter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_enemies;

    // Automatic Variable Declarations
    unitgroup autoBCB45C48_g;
    int autoBCB45C48_u;
    unit autoBCB45C48_var;
    unitgroup autoE4D16CEB_g;
    int autoE4D16CEB_u;
    unit autoE4D16CEB_var;

    // Variable Initialization
    lv_enemies = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_templeComplete == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoBCB45C48_g = UnitGroup(null, gv_pLAYER_05_AMONS_FORCES, RegionFromId(102), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBCB45C48_u = UnitGroupCount(autoBCB45C48_g, c_unitCountAll);
    for (;; autoBCB45C48_u -= 1) {
        autoBCB45C48_var = UnitGroupUnitFromEnd(autoBCB45C48_g, autoBCB45C48_u);
        if (autoBCB45C48_var == null) { break; }
        UnitGroupAdd(lv_enemies, autoBCB45C48_var);
        UnitIssueOrder(autoBCB45C48_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(autoBCB45C48_var), 6.0, 225.0)), c_orderQueueReplace);
    }
    while (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(106), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
        Wait(1.0, c_timeAI);
    }
    autoE4D16CEB_g = lv_enemies;
    autoE4D16CEB_u = UnitGroupCount(autoE4D16CEB_g, c_unitCountAll);
    for (;; autoE4D16CEB_u -= 1) {
        autoE4D16CEB_var = UnitGroupUnitFromEnd(autoE4D16CEB_g, autoE4D16CEB_u);
        if (autoE4D16CEB_var == null) { break; }
        if ((UnitGetOwner(autoE4D16CEB_var) == gv_pLAYER_05_AMONS_FORCES)) {
            AISetUnitScriptControlled(autoE4D16CEB_var, false);
            UnitGroupAdd(gv_activeEnemyUnits, autoE4D16CEB_var);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TempleInitialEncounter_Init () {
    gt_TempleInitialEncounter = TriggerCreate("gt_TempleInitialEncounter_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Temple Bridge Encounter
//--------------------------------------------------------------------------------------------------
bool gt_TempleBridgeEncounter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoE00FE38D_g;
    int autoE00FE38D_u;
    unit autoE00FE38D_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_templeComplete == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoE00FE38D_g = UnitGroup(null, gv_pLAYER_05_AMONS_FORCES, RegionFromId(111), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE00FE38D_u = UnitGroupCount(autoE00FE38D_g, c_unitCountAll);
    for (;; autoE00FE38D_u -= 1) {
        autoE00FE38D_var = UnitGroupUnitFromEnd(autoE00FE38D_g, autoE00FE38D_u);
        if (autoE00FE38D_var == null) { break; }
        if ((UnitGetOwner(autoE00FE38D_var) == gv_pLAYER_05_AMONS_FORCES)) {
            UnitGroupAdd(gv_activeEnemyUnits, autoE00FE38D_var);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TempleBridgeEncounter_Init () {
    gt_TempleBridgeEncounter = TriggerCreate("gt_TempleBridgeEncounter_Func");
    TriggerAddEventUnitRegion(gt_TempleBridgeEncounter, UnitRefFromVariable("gv_karax"), RegionFromId(111), true);
    TriggerAddEventUnitRegion(gt_TempleBridgeEncounter, UnitRefFromVariable("gv_fenix"), RegionFromId(111), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Path Protoss Left
//--------------------------------------------------------------------------------------------------
bool gt_PathProtossLeft_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_breakOut;
    unitgroup lv_enemyProtoss;

    // Automatic Variable Declarations
    unitgroup auto55F37B89_g;
    int auto55F37B89_u;
    unit auto55F37B89_var;
    unitgroup autoE9CAAB33_g;
    int autoE9CAAB33_u;
    unit autoE9CAAB33_var;
    unitgroup autoB8205AB9_g;
    int autoB8205AB9_u;
    unit autoB8205AB9_var;

    // Variable Initialization
    lv_enemyProtoss = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto55F37B89_g = UnitGroup(null, gv_pLAYER_05_AMONS_FORCES, RegionFromId(117), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto55F37B89_u = UnitGroupCount(auto55F37B89_g, c_unitCountAll);
    for (;; auto55F37B89_u -= 1) {
        auto55F37B89_var = UnitGroupUnitFromEnd(auto55F37B89_g, auto55F37B89_u);
        if (auto55F37B89_var == null) { break; }
        UnitGroupAdd(lv_enemyProtoss, auto55F37B89_var);
    }
    while (true) {
        Wait(1.0, c_timeAI);
        if (((gv_templeComplete == true) || (libVCMI_gf_GameIsOver() == true) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true))) {
            return true;
        }

        if ((libNtve_gf_UnitGroupIsDead(lv_enemyProtoss) == true)) {
            break;
        }

        autoE9CAAB33_g = lv_enemyProtoss;
        autoE9CAAB33_u = UnitGroupCount(autoE9CAAB33_g, c_unitCountAll);
        for (;; autoE9CAAB33_u -= 1) {
            autoE9CAAB33_var = UnitGroupUnitFromEnd(autoE9CAAB33_g, autoE9CAAB33_u);
            if (autoE9CAAB33_var == null) { break; }
            if ((UnitGetPropertyFixed(autoE9CAAB33_var, c_unitPropShieldsPercent, c_unitPropCurrent) < 99.0)) {
                lv_breakOut = true;
                break;
            }

        }
        if ((lv_breakOut == true)) {
            break;
        }

    }
    autoB8205AB9_g = lv_enemyProtoss;
    autoB8205AB9_u = UnitGroupCount(autoB8205AB9_g, c_unitCountAll);
    for (;; autoB8205AB9_u -= 1) {
        autoB8205AB9_var = UnitGroupUnitFromEnd(autoB8205AB9_g, autoB8205AB9_u);
        if (autoB8205AB9_var == null) { break; }
        if ((UnitGetOwner(autoB8205AB9_var) == gv_pLAYER_05_AMONS_FORCES)) {
            UnitGroupAdd(gv_activeEnemyUnits, autoB8205AB9_var);
        }

    }
    TriggerExecute(gt_TemplePatrolLeft, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PathProtossLeft_Init () {
    gt_PathProtossLeft = TriggerCreate("gt_PathProtossLeft_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Temple Patrol Left
//--------------------------------------------------------------------------------------------------
bool gt_TemplePatrolLeft_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_firstPatrol;

    // Automatic Variable Declarations
    fixed auto8D4E37D4_at;
    int autoC9C8C09A_n;
    int autoC9C8C09A_i;
    const int auto39F632F9_n = 2;
    int auto39F632F9_i;
    fixed auto2D1E3422_at;

    // Variable Initialization
    lv_firstPatrol = true;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_templeComplete == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        Wait(25.0, c_timeAI);
        auto8D4E37D4_at = 0;
        while (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(121), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) && auto8D4E37D4_at <= 30.0) {
            Wait(1.0, c_timeAI);
            auto8D4E37D4_at = auto8D4E37D4_at + 1.0;
        }
        if (((gv_templeComplete == true) || (libVCMI_gf_GameIsOver() == true) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true))) {
            return true;
        }

        VisRevealArea(gv_pLAYER_05_AMONS_FORCES, RegionFromId(118), 10.0, false);
        Wait(0.1, c_timeGame);
        autoC9C8C09A_n = libLotv_gf_DifficultyValueInt2(2, 2, 3, 4);
        for (autoC9C8C09A_i = 1; autoC9C8C09A_i <= autoC9C8C09A_n; autoC9C8C09A_i += 1) {
            UnitIssueOrder(gv_superWarpGateAmon, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), RegionRandomPoint(RegionFromId(122))), c_orderQueueAddToEnd);
        }
        UnitIssueOrder(gv_superWarpGateAmon, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 2), RegionRandomPoint(RegionFromId(123))), c_orderQueueAddToEnd);
        for (auto39F632F9_i = 1; auto39F632F9_i <= auto39F632F9_n; auto39F632F9_i += 1) {
            UnitIssueOrder(gv_superWarpGateAmon, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 5), RegionRandomPoint(RegionFromId(124))), c_orderQueueAddToEnd);
        }
        auto2D1E3422_at = 0;
        while (!((UnitGroupCount(gv_templePatrolLeft, c_unitCountAlive) > 0)) && auto2D1E3422_at <= 10.0) {
            Wait(1.0, c_timeAI);
            auto2D1E3422_at = auto2D1E3422_at + 1.0;
        }
        if ((libNtve_gf_UnitGroupIsDead(gv_templePatrolLeft) == false)) {
            AIAttackWaveSetGatherPoint(gv_pLAYER_05_AMONS_FORCES, PointFromId(2661));
            AIAttackWaveSetTargetPatrol(gv_pLAYER_05_AMONS_FORCES, 0);
            if ((lv_firstPatrol == true)) {
                lv_firstPatrol = false;
                AIAttackWaveAddWaypoint(gv_pLAYER_05_AMONS_FORCES, PointFromId(2660), false);
                AIAttackWaveAddWaypoint(gv_pLAYER_05_AMONS_FORCES, PointFromId(2879), false);
            }
            else {
                AIAttackWaveAddWaypoint(gv_pLAYER_05_AMONS_FORCES, PointFromId(2660), false);
                AIAttackWaveAddWaypoint(gv_pLAYER_05_AMONS_FORCES, PointFromId(2662), false);
                AIAttackWaveAddWaypoint(gv_pLAYER_05_AMONS_FORCES, PointFromId(2663), false);
                AIAttackWaveAddWaypoint(gv_pLAYER_05_AMONS_FORCES, PointFromId(2662), false);
                AIAttackWaveAddWaypoint(gv_pLAYER_05_AMONS_FORCES, PointFromId(2660), false);
                AIAttackWaveAddWaypoint(gv_pLAYER_05_AMONS_FORCES, PointFromId(2661), false);
            }
            AIAttackWaveUseGroup(gv_pLAYER_05_AMONS_FORCES, gv_templePatrolLeft);
            AIAttackWaveSend(gv_pLAYER_05_AMONS_FORCES, 0, false);
        }

        while (!((libNtve_gf_UnitGroupIsDead(gv_templePatrolLeft) == true) && (gv_repeatedPatrolsActivated == true))) {
            Wait(1.0, c_timeAI);
        }
        if ((ObjectiveGetState(gv_objective_AssembleArmy) == c_objectiveStateCompleted)) {
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TemplePatrolLeft_Init () {
    gt_TemplePatrolLeft = TriggerCreate("gt_TemplePatrolLeft_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reaver Group
//--------------------------------------------------------------------------------------------------
bool gt_ReaverGroup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_breakOut;
    unitgroup lv_enemyProtoss;

    // Automatic Variable Declarations
    unitgroup auto901055A5_g;
    int auto901055A5_u;
    unit auto901055A5_var;
    unitgroup auto7F1C517E_g;
    int auto7F1C517E_u;
    unit auto7F1C517E_var;
    unitgroup auto90AD11FC_g;
    int auto90AD11FC_u;
    unit auto90AD11FC_var;

    // Variable Initialization
    lv_enemyProtoss = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto901055A5_g = UnitGroup(null, gv_pLAYER_05_AMONS_FORCES, RegionFromId(120), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto901055A5_u = UnitGroupCount(auto901055A5_g, c_unitCountAll);
    for (;; auto901055A5_u -= 1) {
        auto901055A5_var = UnitGroupUnitFromEnd(auto901055A5_g, auto901055A5_u);
        if (auto901055A5_var == null) { break; }
        UnitGroupAdd(lv_enemyProtoss, auto901055A5_var);
    }
    while (true) {
        Wait(1.0, c_timeAI);
        if (((gv_templeComplete == true) || (libVCMI_gf_GameIsOver() == true) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true))) {
            return true;
        }

        if (((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(120), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (libNtve_gf_UnitGroupIsDead(lv_enemyProtoss) == true))) {
            break;
        }

        auto7F1C517E_g = lv_enemyProtoss;
        auto7F1C517E_u = UnitGroupCount(auto7F1C517E_g, c_unitCountAll);
        for (;; auto7F1C517E_u -= 1) {
            auto7F1C517E_var = UnitGroupUnitFromEnd(auto7F1C517E_g, auto7F1C517E_u);
            if (auto7F1C517E_var == null) { break; }
            if ((UnitGetPropertyFixed(auto7F1C517E_var, c_unitPropShieldsPercent, c_unitPropCurrent) < 99.0)) {
                lv_breakOut = true;
                break;
            }

        }
        if ((lv_breakOut == true)) {
            break;
        }

    }
    auto90AD11FC_g = lv_enemyProtoss;
    auto90AD11FC_u = UnitGroupCount(auto90AD11FC_g, c_unitCountAll);
    for (;; auto90AD11FC_u -= 1) {
        auto90AD11FC_var = UnitGroupUnitFromEnd(auto90AD11FC_g, auto90AD11FC_u);
        if (auto90AD11FC_var == null) { break; }
        if ((UnitGetOwner(auto90AD11FC_var) == gv_pLAYER_05_AMONS_FORCES)) {
            UnitGroupAdd(gv_activeEnemyUnits, auto90AD11FC_var);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReaverGroup_Init () {
    gt_ReaverGroup = TriggerCreate("gt_ReaverGroup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Temple Patrol Middle
//--------------------------------------------------------------------------------------------------
bool gt_TemplePatrolMiddle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_left1;
    bool lv_left2;
    bool lv_right1;
    bool lv_right2;

    // Automatic Variable Declarations
    fixed auto570C5E10_at;
    int auto423D12EC_n;
    int auto423D12EC_i;
    int autoBA7A2999_n;
    int autoBA7A2999_i;
    const int auto33DF1100_n = 2;
    int auto33DF1100_i;
    fixed autoD16C2B06_at;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_templeComplete == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        Wait(25.0, c_timeAI);
        while (!((gv_repeatedPatrolsActivated == true))) {
            Wait(1.0, c_timeAI);
        }
        auto570C5E10_at = 0;
        while (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(125), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) && auto570C5E10_at <= 30.0) {
            Wait(1.0, c_timeAI);
            auto570C5E10_at = auto570C5E10_at + 1.0;
        }
        if (((gv_templeComplete == true) || (libVCMI_gf_GameIsOver() == true) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true))) {
            return true;
        }

        VisRevealArea(gv_pLAYER_05_AMONS_FORCES, RegionFromId(139), 10.0, false);
        Wait(0.1, c_timeGame);
        auto423D12EC_n = libLotv_gf_DifficultyValueInt2(4, 4, 6, 6);
        for (auto423D12EC_i = 1; auto423D12EC_i <= auto423D12EC_n; auto423D12EC_i += 1) {
            UnitIssueOrder(gv_superWarpGateAmon, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), RegionRandomPoint(RegionFromId(126))), c_orderQueueAddToEnd);
        }
        autoBA7A2999_n = libLotv_gf_DifficultyValueInt2(1, 1, 1, 2);
        for (autoBA7A2999_i = 1; autoBA7A2999_i <= autoBA7A2999_n; autoBA7A2999_i += 1) {
            UnitIssueOrder(gv_superWarpGateAmon, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 15), RegionRandomPoint(RegionFromId(129))), c_orderQueueAddToEnd);
        }
        for (auto33DF1100_i = 1; auto33DF1100_i <= auto33DF1100_n; auto33DF1100_i += 1) {
            UnitIssueOrder(gv_superWarpGateAmon, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 5), RegionRandomPoint(RegionFromId(130))), c_orderQueueAddToEnd);
        }
        autoD16C2B06_at = 0;
        while (!((UnitGroupCount(gv_templePatrolMiddle, c_unitCountAlive) > 0)) && autoD16C2B06_at <= 10.0) {
            Wait(1.0, c_timeAI);
            autoD16C2B06_at = autoD16C2B06_at + 1.0;
        }
        if ((libNtve_gf_UnitGroupIsDead(gv_templePatrolMiddle) == false)) {
            AIAttackWaveSetGatherPoint(gv_pLAYER_05_AMONS_FORCES, RegionGetCenter(RegionFromId(129)));
            AIAttackWaveSetTargetPatrol(gv_pLAYER_05_AMONS_FORCES, 0);
            AIAttackWaveAddWaypoint(gv_pLAYER_05_AMONS_FORCES, PointFromId(2655), false);
            AIAttackWaveAddWaypoint(gv_pLAYER_05_AMONS_FORCES, PointFromId(2664), false);
            AIAttackWaveUseGroup(gv_pLAYER_05_AMONS_FORCES, gv_templePatrolMiddle);
            AIAttackWaveSend(gv_pLAYER_05_AMONS_FORCES, 0, false);
        }

        while (!((libNtve_gf_UnitGroupIsDead(gv_templePatrolMiddle) == true))) {
            Wait(1.0, c_timeAI);
        }
        if ((ObjectiveGetState(gv_objective_AssembleArmy) == c_objectiveStateCompleted)) {
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TemplePatrolMiddle_Init () {
    gt_TemplePatrolMiddle = TriggerCreate("gt_TemplePatrolMiddle_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Path Protoss Right
//--------------------------------------------------------------------------------------------------
bool gt_PathProtossRight_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_breakOut;
    unitgroup lv_enemyProtoss;

    // Automatic Variable Declarations
    unitgroup auto7F8F118F_g;
    int auto7F8F118F_u;
    unit auto7F8F118F_var;
    unitgroup autoA6D18E60_g;
    int autoA6D18E60_u;
    unit autoA6D18E60_var;
    unitgroup autoEA50D8C4_g;
    int autoEA50D8C4_u;
    unit autoEA50D8C4_var;

    // Variable Initialization
    lv_enemyProtoss = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto7F8F118F_g = UnitGroup(null, gv_pLAYER_05_AMONS_FORCES, RegionFromId(132), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7F8F118F_u = UnitGroupCount(auto7F8F118F_g, c_unitCountAll);
    for (;; auto7F8F118F_u -= 1) {
        auto7F8F118F_var = UnitGroupUnitFromEnd(auto7F8F118F_g, auto7F8F118F_u);
        if (auto7F8F118F_var == null) { break; }
        UnitGroupAdd(lv_enemyProtoss, auto7F8F118F_var);
    }
    while (true) {
        Wait(1.0, c_timeAI);
        if (((gv_templeComplete == true) || (libVCMI_gf_GameIsOver() == true) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true))) {
            return true;
        }

        if ((libNtve_gf_UnitGroupIsDead(lv_enemyProtoss) == true)) {
            break;
        }

        autoA6D18E60_g = lv_enemyProtoss;
        autoA6D18E60_u = UnitGroupCount(autoA6D18E60_g, c_unitCountAll);
        for (;; autoA6D18E60_u -= 1) {
            autoA6D18E60_var = UnitGroupUnitFromEnd(autoA6D18E60_g, autoA6D18E60_u);
            if (autoA6D18E60_var == null) { break; }
            if ((UnitGetPropertyFixed(autoA6D18E60_var, c_unitPropShieldsPercent, c_unitPropCurrent) < 99.0)) {
                lv_breakOut = true;
                break;
            }

        }
        if ((lv_breakOut == true)) {
            break;
        }

    }
    autoEA50D8C4_g = lv_enemyProtoss;
    autoEA50D8C4_u = UnitGroupCount(autoEA50D8C4_g, c_unitCountAll);
    for (;; autoEA50D8C4_u -= 1) {
        autoEA50D8C4_var = UnitGroupUnitFromEnd(autoEA50D8C4_g, autoEA50D8C4_u);
        if (autoEA50D8C4_var == null) { break; }
        if ((UnitGetOwner(autoEA50D8C4_var) == gv_pLAYER_05_AMONS_FORCES)) {
            UnitGroupAdd(gv_activeEnemyUnits, autoEA50D8C4_var);
        }

    }
    TriggerExecute(gt_TemplePatrolRight, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PathProtossRight_Init () {
    gt_PathProtossRight = TriggerCreate("gt_PathProtossRight_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Temple Patrol Right
//--------------------------------------------------------------------------------------------------
bool gt_TemplePatrolRight_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_firstPatrol;

    // Automatic Variable Declarations
    fixed auto8DA0540B_at;
    int auto5159888C_n;
    int auto5159888C_i;
    const int autoB4CA9BA5_n = 2;
    int autoB4CA9BA5_i;
    fixed auto28A30FC5_at;

    // Variable Initialization
    lv_firstPatrol = true;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_templeComplete == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        Wait(25.0, c_timeAI);
        auto8DA0540B_at = 0;
        while (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(133), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) && auto8DA0540B_at <= 30.0) {
            Wait(1.0, c_timeAI);
            auto8DA0540B_at = auto8DA0540B_at + 1.0;
        }
        if (((gv_templeComplete == true) || (libVCMI_gf_GameIsOver() == true) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true))) {
            return true;
        }

        VisRevealArea(gv_pLAYER_05_AMONS_FORCES, RegionFromId(131), 10.0, false);
        Wait(0.1, c_timeGame);
        auto5159888C_n = libLotv_gf_DifficultyValueInt2(2, 2, 3, 4);
        for (auto5159888C_i = 1; auto5159888C_i <= auto5159888C_n; auto5159888C_i += 1) {
            UnitIssueOrder(gv_superWarpGateAmon, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), RegionRandomPoint(RegionFromId(134))), c_orderQueueAddToEnd);
        }
        UnitIssueOrder(gv_superWarpGateAmon, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 2), RegionRandomPoint(RegionFromId(135))), c_orderQueueAddToEnd);
        for (autoB4CA9BA5_i = 1; autoB4CA9BA5_i <= autoB4CA9BA5_n; autoB4CA9BA5_i += 1) {
            UnitIssueOrder(gv_superWarpGateAmon, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 5), RegionRandomPoint(RegionFromId(136))), c_orderQueueAddToEnd);
        }
        auto28A30FC5_at = 0;
        while (!((UnitGroupCount(gv_templePatrolRight, c_unitCountAlive) > 0)) && auto28A30FC5_at <= 10.0) {
            Wait(1.0, c_timeAI);
            auto28A30FC5_at = auto28A30FC5_at + 1.0;
        }
        if ((libNtve_gf_UnitGroupIsDead(gv_templePatrolRight) == false)) {
            AIAttackWaveSetGatherPoint(gv_pLAYER_05_AMONS_FORCES, PointFromId(2810));
            AIAttackWaveSetTargetPatrol(gv_pLAYER_05_AMONS_FORCES, 0);
            if ((lv_firstPatrol == true)) {
                lv_firstPatrol = false;
                AIAttackWaveAddWaypoint(gv_pLAYER_05_AMONS_FORCES, PointFromId(2880), false);
                AIAttackWaveAddWaypoint(gv_pLAYER_05_AMONS_FORCES, PointFromId(2811), false);
            }
            else {
                AIAttackWaveAddWaypoint(gv_pLAYER_05_AMONS_FORCES, PointFromId(2811), false);
                AIAttackWaveAddWaypoint(gv_pLAYER_05_AMONS_FORCES, PointFromId(2812), false);
                AIAttackWaveAddWaypoint(gv_pLAYER_05_AMONS_FORCES, PointFromId(2813), false);
                AIAttackWaveAddWaypoint(gv_pLAYER_05_AMONS_FORCES, PointFromId(2812), false);
                AIAttackWaveAddWaypoint(gv_pLAYER_05_AMONS_FORCES, PointFromId(2811), false);
                AIAttackWaveAddWaypoint(gv_pLAYER_05_AMONS_FORCES, PointFromId(2810), false);
            }
            AIAttackWaveUseGroup(gv_pLAYER_05_AMONS_FORCES, gv_templePatrolRight);
            AIAttackWaveSend(gv_pLAYER_05_AMONS_FORCES, 0, false);
        }

        while (!((libNtve_gf_UnitGroupIsDead(gv_templePatrolRight) == true) && (gv_repeatedPatrolsActivated == true))) {
            Wait(1.0, c_timeAI);
        }
        if ((ObjectiveGetState(gv_objective_AssembleArmy) == c_objectiveStateCompleted)) {
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TemplePatrolRight_Init () {
    gt_TemplePatrolRight = TriggerCreate("gt_TemplePatrolRight_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Colossus Group
//--------------------------------------------------------------------------------------------------
bool gt_ColossusGroup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_breakOut;
    unitgroup lv_enemyProtoss;

    // Automatic Variable Declarations
    unitgroup auto6705BAE9_g;
    int auto6705BAE9_u;
    unit auto6705BAE9_var;
    unitgroup autoB5AD429A_g;
    int autoB5AD429A_u;
    unit autoB5AD429A_var;
    unitgroup auto92211EF5_g;
    int auto92211EF5_u;
    unit auto92211EF5_var;

    // Variable Initialization
    lv_enemyProtoss = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto6705BAE9_g = UnitGroup(null, gv_pLAYER_05_AMONS_FORCES, RegionFromId(137), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6705BAE9_u = UnitGroupCount(auto6705BAE9_g, c_unitCountAll);
    for (;; auto6705BAE9_u -= 1) {
        auto6705BAE9_var = UnitGroupUnitFromEnd(auto6705BAE9_g, auto6705BAE9_u);
        if (auto6705BAE9_var == null) { break; }
        UnitGroupAdd(lv_enemyProtoss, auto6705BAE9_var);
    }
    while (true) {
        Wait(1.0, c_timeAI);
        if (((gv_templeComplete == true) || (libVCMI_gf_GameIsOver() == true) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true))) {
            return true;
        }

        if (((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(137), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (libNtve_gf_UnitGroupIsDead(lv_enemyProtoss) == true))) {
            break;
        }

        autoB5AD429A_g = lv_enemyProtoss;
        autoB5AD429A_u = UnitGroupCount(autoB5AD429A_g, c_unitCountAll);
        for (;; autoB5AD429A_u -= 1) {
            autoB5AD429A_var = UnitGroupUnitFromEnd(autoB5AD429A_g, autoB5AD429A_u);
            if (autoB5AD429A_var == null) { break; }
            if ((UnitGetPropertyFixed(autoB5AD429A_var, c_unitPropShieldsPercent, c_unitPropCurrent) < 99.0)) {
                lv_breakOut = true;
                break;
            }

        }
        if ((lv_breakOut == true)) {
            break;
        }

    }
    auto92211EF5_g = lv_enemyProtoss;
    auto92211EF5_u = UnitGroupCount(auto92211EF5_g, c_unitCountAll);
    for (;; auto92211EF5_u -= 1) {
        auto92211EF5_var = UnitGroupUnitFromEnd(auto92211EF5_g, auto92211EF5_u);
        if (auto92211EF5_var == null) { break; }
        if ((UnitGetOwner(auto92211EF5_var) == gv_pLAYER_05_AMONS_FORCES)) {
            UnitGroupAdd(gv_activeEnemyUnits, auto92211EF5_var);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ColossusGroup_Init () {
    gt_ColossusGroup = TriggerCreate("gt_ColossusGroup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Temple Patrol Warp In
//--------------------------------------------------------------------------------------------------
bool gt_TemplePatrolWarpIn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_superWarpGateAmon))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitInRegion(EventUnitProgressUnit(), RegionFromId(121)) == true)) {
        UnitGroupAdd(gv_templePatrolLeft, EventUnitProgressUnit());
    }

    if ((libNtve_gf_UnitInRegion(EventUnitProgressUnit(), RegionFromId(125)) == true)) {
        UnitGroupAdd(gv_templePatrolMiddle, EventUnitProgressUnit());
    }

    if ((libNtve_gf_UnitInRegion(EventUnitProgressUnit(), RegionFromId(133)) == true)) {
        UnitGroupAdd(gv_templePatrolRight, EventUnitProgressUnit());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TemplePatrolWarpIn_Init () {
    gt_TemplePatrolWarpIn = TriggerCreate("gt_TemplePatrolWarpIn_Func");
    TriggerAddEventUnitConstructProgress(gt_TemplePatrolWarpIn, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Repeated Patrol Activation
//--------------------------------------------------------------------------------------------------
bool gt_RepeatedPatrolActivation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_left1;
    bool lv_left2;
    bool lv_right1;
    bool lv_right2;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_templeComplete == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        Wait(1.0, c_timeAI);
        if (((gv_templeComplete == true) || (libVCMI_gf_GameIsOver() == true) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true))) {
            return true;
        }

        if ((lv_left1 == false) && ((UnitIsAlive(UnitFromId(2564)) == false) || (UnitGetOwner(UnitFromId(2564)) == gv_pLAYER_01_USER))) {
            lv_left1 = true;
        }

        if ((lv_left2 == false) && ((UnitIsAlive(UnitFromId(2643)) == false) || (UnitGetOwner(UnitFromId(2643)) == gv_pLAYER_01_USER))) {
            lv_left2 = true;
        }

        if ((lv_right1 == false) && ((UnitIsAlive(UnitFromId(2821)) == false) || (UnitGetOwner(UnitFromId(2821)) == gv_pLAYER_01_USER))) {
            lv_right1 = true;
        }

        if ((lv_right2 == false) && ((UnitIsAlive(UnitFromId(2845)) == false) || (UnitGetOwner(UnitFromId(2845)) == gv_pLAYER_01_USER))) {
            lv_right2 = true;
        }

        if ((lv_left1 == true) && (lv_left2 == true) && (lv_right1 == true) && (lv_right2 == true)) {
            gv_repeatedPatrolsActivated = true;
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RepeatedPatrolActivation_Init () {
    gt_RepeatedPatrolActivation = TriggerCreate("gt_RepeatedPatrolActivation_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Fight
//--------------------------------------------------------------------------------------------------
bool gt_HybridFight_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_playerUnits;

    // Automatic Variable Declarations
    unitgroup auto48BB8574_g;
    int auto48BB8574_u;
    unit auto48BB8574_var;
    unitgroup auto3B9535E5_g;
    int auto3B9535E5_u;
    unit auto3B9535E5_var;

    // Variable Initialization
    lv_playerUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_templeComplete == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto48BB8574_g = UnitGroup("PathingBlocker16x16Diagonal", 0, RegionFromId(108), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto48BB8574_u = UnitGroupCount(auto48BB8574_g, c_unitCountAll);
    for (;; auto48BB8574_u -= 1) {
        auto48BB8574_var = UnitGroupUnitFromEnd(auto48BB8574_g, auto48BB8574_u);
        if (auto48BB8574_var == null) { break; }
        UnitRemove(auto48BB8574_var);
    }
    TriggerExecute(gt_HybridQ, true, false);
    TriggerExecute(gt_HybridReaverSpawns, true, false);
    UnitGroupAdd(lv_playerUnits, gv_karax);
    UnitGroupAdd(lv_playerUnits, gv_fenix);
    while (true) {
        if (((gv_templeComplete == true) || (libVCMI_gf_GameIsOver() == true) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true))) {
            return true;
        }

        if ((libNtve_gf_UnitGroupIsDead(gv_hybridGroup) == true)) {
            break;
        }

        if (((UnitIsAlive(gv_karax) == false) || (UnitIsAlive(gv_fenix) == false))) {
            return true;
        }

        auto3B9535E5_g = gv_hybridGroup;
        auto3B9535E5_u = UnitGroupCount(auto3B9535E5_g, c_unitCountAll);
        for (;; auto3B9535E5_u -= 1) {
            auto3B9535E5_var = UnitGroupUnitFromEnd(auto3B9535E5_g, auto3B9535E5_u);
            if (auto3B9535E5_var == null) { break; }
            libNtve_gf_AICast(auto3B9535E5_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(lv_playerUnits, UnitGetPosition(auto3B9535E5_var)))));
        }
        Wait(1.0, c_timeAI);
    }
    TriggerExecute(gt_TempleVictory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridFight_Init () {
    gt_HybridFight = TriggerCreate("gt_HybridFight_Func");
    TriggerAddEventUnitRegion(gt_HybridFight, null, RegionFromId(100), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Reaver Spawns
//--------------------------------------------------------------------------------------------------
bool gt_HybridReaverSpawns_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_templeComplete == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(5.0, c_timeAI);
    gf_WarpInHybridReaver(PointFromId(2433));
    gf_WarpInHybridReaver(PointFromId(2652));
    Wait(5.0, c_timeAI);
    gf_WarpInHybridReaver(PointFromId(2434));
    gf_WarpInHybridReaver(PointFromId(2653));
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        Wait(0.5, c_timeAI);
        gf_WarpInHybridReaver(PointFromId(2645));
        gf_WarpInHybridReaver(PointFromId(3305));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridReaverSpawns_Init () {
    gt_HybridReaverSpawns = TriggerCreate("gt_HybridReaverSpawns_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Temple Supply Changes
//--------------------------------------------------------------------------------------------------
bool gt_TempleSupplyChanges_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_citadelComplete == true))) {
            return false;
        }

        if (!((gv_templeComplete == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((ObjectiveGetState(gv_objective_AssembleArmy) == c_objectiveStateActive)) {
        if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropSuppliesUsed) >= 60)) {
            libVCMI_gf_SetMissionObjectiveProgress("PAiur04Primary01", 60);
            TriggerExecute(gt_ObjectiveAssembleanArmyComplete, true, true);
            TriggerExecute(gt__60SupplyQ, true, false);
        }
        else {
            libVCMI_gf_SetMissionObjectiveProgress("PAiur04Primary01", PlayerGetPropertyInt(EventPlayer(), c_playerPropSuppliesUsed));
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TempleSupplyChanges_Init () {
    gt_TempleSupplyChanges = TriggerCreate("gt_TempleSupplyChanges_Func");
    TriggerEnable(gt_TempleSupplyChanges, false);
    TriggerAddEventPlayerPropChange(gt_TempleSupplyChanges, gv_pLAYER_01_USER, c_playerPropSuppliesUsed);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 60 Supply Q
//--------------------------------------------------------------------------------------------------
bool gt__60SupplyQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto5A8F49C3_g;
    int auto5A8F49C3_u;
    unit auto5A8F49C3_var;
    unitgroup auto80D4F4D2_g;
    int auto80D4F4D2_u;
    unit auto80D4F4D2_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_templeComplete == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UIAlertClear(gv_pLAYER_01_USER);
    TriggerQueueEnter();
    if ((gv_templeComplete == true)) {
        return true;
    }

    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_fenix, "pMission_Aiur04|Line00323", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(gv_karax, "pMission_Aiur04|Line00324", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(2448), 5.0, Color(0.00, 100.00, 0.00));
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(PointFromId(2448), 8.0), 10.0, false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Beacon_Protoss", c_unitCreateIgnorePlacement, 0, PointFromId(2448));
    gv_templeBarrierBeacon = UnitLastCreated();
    libVCMI_gf_SetUnitInfoTextCampaign(gv_templeBarrierBeacon, StringExternal("Param/Value/DC7E415D"), StringExternal("Param/Value/E2A76A26"), null);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Beacon_Protoss", c_unitCreateIgnorePlacement, 0, PointFromId(2448));
    UnitKill(UnitLastCreated());
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/CFFFDE73"), null, PointFromId(2448));
    libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/51F0C240"));
    while (!((libNtve_gf_UnitInRegion(gv_karax, RegionFromId(109)) == true))) {
        Wait(1.0, c_timeAI);
    }
    if ((gv_templeComplete == true)) {
        return true;
    }

    UnitKill(gv_templeBarrierBeacon);
    SoundPlayForPlayer(SoundLink("PAiur04_BarrierDisipate", 0), c_maxPlayers, PlayerGroupAll(), 80.0, 0.0);
    UIAlertClear(gv_pLAYER_01_USER);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(264)), c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    ActorSend(ActorFromDoodad(DoodadFromId(264)), "Signal stoppurplesound");
    Wait(4.0, c_timeGame);
    auto5A8F49C3_g = UnitGroup("PathingBlocker4x4Diagonal", 0, RegionFromId(108), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto5A8F49C3_u = UnitGroupCount(auto5A8F49C3_g, c_unitCountAll);
    for (;; auto5A8F49C3_u -= 1) {
        auto5A8F49C3_var = UnitGroupUnitFromEnd(auto5A8F49C3_g, auto5A8F49C3_u);
        if (auto5A8F49C3_var == null) { break; }
        UnitRemove(auto5A8F49C3_var);
    }
    auto80D4F4D2_g = UnitGroup("PathingBlocker16x16Diagonal", 0, RegionFromId(108), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto80D4F4D2_u = UnitGroupCount(auto80D4F4D2_g, c_unitCountAll);
    for (;; auto80D4F4D2_u -= 1) {
        auto80D4F4D2_var = UnitGroupUnitFromEnd(auto80D4F4D2_g, auto80D4F4D2_u);
        if (auto80D4F4D2_var == null) { break; }
        UnitRemove(auto80D4F4D2_var);
    }
    TriggerExecute(gt_WayIsOpenQ, true, false);
    Wait(9.334, c_timeGame);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(264)), c_animNameDefault, "Dead", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__60SupplyQ_Init () {
    gt__60SupplyQ = TriggerCreate("gt__60SupplyQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Early Barrier Q
//--------------------------------------------------------------------------------------------------
bool gt_EarlyBarrierQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoDB350FF8_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_templeComplete == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((ObjectiveGetState(gv_objective_AssembleArmy) != c_objectiveStateCompleted))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if (((gv_templeComplete == true) || (ObjectiveGetState(gv_objective_AssembleArmy) == c_objectiveStateCompleted))) {
        return true;
    }

    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    if ((gv_firstBarrierTransmissionIssued == false)) {
        gv_firstBarrierTransmissionIssued = true;
        libVCMI_gf_SendTransmissionCampaign(gv_fenix, "pMission_Aiur04|Line00320", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVCMI_gf_SendTransmissionCampaign(gv_karax, "pMission_Aiur04|Line00319", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        autoDB350FF8_val = RandomInt(1, 3);
        if (autoDB350FF8_val == 1) {
            libVCMI_gf_SendTransmissionCampaign(gv_karax, "pMission_Aiur04|Line00328", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (autoDB350FF8_val == 2) {
            libVCMI_gf_SendTransmissionCampaign(gv_karax, "pMission_Aiur04|Line00329", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (autoDB350FF8_val == 3) {
            libVCMI_gf_SendTransmissionCampaign(gv_karax, "pMission_Aiur04|Line00330", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else {
        }
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(60.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EarlyBarrierQ_Init () {
    gt_EarlyBarrierQ = TriggerCreate("gt_EarlyBarrierQ_Func");
    TriggerAddEventUnitRegion(gt_EarlyBarrierQ, UnitRefFromVariable("gv_karax"), RegionFromId(112), true);
    TriggerAddEventUnitRegion(gt_EarlyBarrierQ, UnitRefFromVariable("gv_fenix"), RegionFromId(112), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Way Is Open Q
//--------------------------------------------------------------------------------------------------
bool gt_WayIsOpenQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_templeComplete == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_templeComplete == true)) {
        return true;
    }

    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_karax, "pMission_Aiur04|Line00325", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WayIsOpenQ_Init () {
    gt_WayIsOpenQ = TriggerCreate("gt_WayIsOpenQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Q
//--------------------------------------------------------------------------------------------------
bool gt_HybridQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_templeComplete == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_templeComplete == true)) {
        return true;
    }

    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(UnitFromId(2431), "pMission_Aiur04|Line00149", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridQ_Init () {
    gt_HybridQ = TriggerCreate("gt_HybridQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gateway Cloister Left Q
//--------------------------------------------------------------------------------------------------
bool gt_GatewayCloisterLeftQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_templeComplete == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_GatewayCloisterRightQ, false);
    while (!((UnitGroupCount(gv_activeEnemyUnits, c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeAI);
    }
    TriggerQueueEnter();
    if ((gv_templeComplete == true)) {
        return true;
    }

    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_karax, "pMission_Aiur04|Line00315", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(gv_fenix, "pMission_Aiur04|Line00316", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GatewayCloisterLeftQ_Init () {
    gt_GatewayCloisterLeftQ = TriggerCreate("gt_GatewayCloisterLeftQ_Func");
    TriggerAddEventUnitRegion(gt_GatewayCloisterLeftQ, null, RegionFromId(115), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gateway Cloister Right Q
//--------------------------------------------------------------------------------------------------
bool gt_GatewayCloisterRightQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_templeComplete == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_GatewayCloisterLeftQ, false);
    while (!((UnitGroupCount(gv_activeEnemyUnits, c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeAI);
    }
    TriggerQueueEnter();
    if ((gv_templeComplete == true)) {
        return true;
    }

    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_karax, "pMission_Aiur04|Line00315", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(gv_fenix, "pMission_Aiur04|Line00316", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GatewayCloisterRightQ_Init () {
    gt_GatewayCloisterRightQ = TriggerCreate("gt_GatewayCloisterRightQ_Func");
    TriggerAddEventUnitRegion(gt_GatewayCloisterRightQ, null, RegionFromId(116), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purify Fenix Q
//--------------------------------------------------------------------------------------------------
bool gt_PurifyFenixQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_templeComplete == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(115), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_05_AMONS_FORCES, RegionFromId(115), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) || ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(116), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_05_AMONS_FORCES, RegionFromId(116), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))))) {
        Wait(1.0, c_timeAI);
    }
    TriggerQueueEnter();
    if ((gv_templeComplete == true)) {
        return true;
    }

    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_fenix, "pMission_Aiur04|Line00310", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(gv_karax, "pMission_Aiur04|Line00311", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurifyFenixQ_Init () {
    gt_PurifyFenixQ = TriggerCreate("gt_PurifyFenixQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reaver Area Q
//--------------------------------------------------------------------------------------------------
bool gt_ReaverAreaQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_templeComplete == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((ObjectiveGetState(gv_objective_AssembleArmy) == c_objectiveStateActive)) {
        libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/0929B02D"));
    }

    TriggerQueueEnter();
    if ((gv_templeComplete == true)) {
        return true;
    }

    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_karax, "pMission_Aiur04|Line00318", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReaverAreaQ_Init () {
    gt_ReaverAreaQ = TriggerCreate("gt_ReaverAreaQ_Func");
    TriggerAddEventUnitRegion(gt_ReaverAreaQ, null, RegionFromId(119), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Colossus Area Q
//--------------------------------------------------------------------------------------------------
bool gt_ColossusAreaQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_templeComplete == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((ObjectiveGetState(gv_objective_AssembleArmy) == c_objectiveStateActive)) {
        libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/67439297"));
    }

    TriggerQueueEnter();
    if ((gv_templeComplete == true)) {
        return true;
    }

    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_karax, "pMission_Aiur04|Line00317", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ColossusAreaQ_Init () {
    gt_ColossusAreaQ = TriggerCreate("gt_ColossusAreaQ_Func");
    TriggerAddEventUnitRegion(gt_ColossusAreaQ, null, RegionFromId(138), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Caverns Init
//--------------------------------------------------------------------------------------------------
bool gt_CavernsInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto51EC6924_g;
    int auto51EC6924_u;
    unit auto51EC6924_var;
    unitgroup autoA678851F_g;
    int autoA678851F_u;
    unit autoA678851F_var;
    unitgroup auto5348D836_g;
    int auto5348D836_u;
    unit auto5348D836_var;
    unitgroup autoAD653D3D_g;
    int autoAD653D3D_u;
    unit autoAD653D3D_var;
    unitgroup auto6F6ED070_g;
    int auto6F6ED070_u;
    unit auto6F6ED070_var;
    unitgroup autoDF8ADE22_g;
    int autoDF8ADE22_u;
    unit autoDF8ADE22_var;
    unitgroup auto6DFB672E_g;
    int auto6DFB672E_u;
    unit auto6DFB672E_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto51EC6924_g = UnitGroup(null, gv_pLAYER_04_PROTOSS_ALLY, RegionFromId(13), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto51EC6924_u = UnitGroupCount(auto51EC6924_g, c_unitCountAll);
    for (;; auto51EC6924_u -= 1) {
        auto51EC6924_var = UnitGroupUnitFromEnd(auto51EC6924_g, auto51EC6924_u);
        if (auto51EC6924_var == null) { break; }
        libVCMI_gf_SetUnitInfoTextCampaign(auto51EC6924_var, null, StringExternal("Param/Value/7CC36857"), null);
        if ((UnitFilterMatch(auto51EC6924_var, gv_pLAYER_04_PROTOSS_ALLY, UnitFilter((1 << c_targetFilterGround), 0, 0, 0)) == true)) {
            UnitGroupAdd(gv_purifierReinforcements, auto51EC6924_var);
            if ((UnitGetType(auto51EC6924_var) == "SentryPurifier")) {
                UnitSetPropertyFixed(auto51EC6924_var, c_unitPropEnergyPercent, 100.0);
                UnitAbilityEnable(auto51EC6924_var, "VoidSentryChronoBeam", false);
            }

        }

    }
    autoA678851F_g = UnitGroup(null, gv_pLAYER_04_PROTOSS_ALLY, RegionFromId(30), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA678851F_u = UnitGroupCount(autoA678851F_g, c_unitCountAll);
    for (;; autoA678851F_u -= 1) {
        autoA678851F_var = UnitGroupUnitFromEnd(autoA678851F_g, autoA678851F_u);
        if (autoA678851F_var == null) { break; }
        libVCMI_gf_SetUnitInfoTextCampaign(autoA678851F_var, null, StringExternal("Param/Value/A85C4F84"), null);
        UnitGroupAdd(gv_darkTemplarReinforcements, autoA678851F_var);
    }
    UnitGroupAddUnitGroup(gv_cavernsAntechamberEnemies, UnitGroup(null, gv_pLAYER_05_AMONS_FORCES, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(gv_hiveCluster1Buildings, UnitGroup(null, gv_pLAYER_05_AMONS_FORCES, RegionFromId(13), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    auto5348D836_g = gv_hiveCluster1Buildings;
    auto5348D836_u = UnitGroupCount(auto5348D836_g, c_unitCountAll);
    for (;; auto5348D836_u -= 1) {
        auto5348D836_var = UnitGroupUnitFromEnd(auto5348D836_g, auto5348D836_u);
        if (auto5348D836_var == null) { break; }
        UnitSetPropertyFixed(auto5348D836_var, c_unitPropLifePercent, 80.0);
        libNtve_gf_ChangeUnitDamage(auto5348D836_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    }
    UnitGroupAddUnitGroup(gv_hiveCluster2Buildings, UnitGroup(null, gv_pLAYER_05_AMONS_FORCES, RegionFromId(30), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    autoAD653D3D_g = gv_hiveCluster2Buildings;
    autoAD653D3D_u = UnitGroupCount(autoAD653D3D_g, c_unitCountAll);
    for (;; autoAD653D3D_u -= 1) {
        autoAD653D3D_var = UnitGroupUnitFromEnd(autoAD653D3D_g, autoAD653D3D_u);
        if (autoAD653D3D_var == null) { break; }
        UnitSetPropertyFixed(autoAD653D3D_var, c_unitPropLifePercent, 80.0);
        libNtve_gf_ChangeUnitDamage(autoAD653D3D_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    }
    auto6F6ED070_g = UnitGroup(null, gv_pLAYER_05_AMONS_FORCES, RegionFromId(67), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6F6ED070_u = UnitGroupCount(auto6F6ED070_g, c_unitCountAll);
    for (;; auto6F6ED070_u -= 1) {
        auto6F6ED070_var = UnitGroupUnitFromEnd(auto6F6ED070_g, auto6F6ED070_u);
        if (auto6F6ED070_var == null) { break; }
        UnitGroupAdd(gv_cavernsAccessPointEnemies, auto6F6ED070_var);
    }
    autoDF8ADE22_g = UnitGroup("InfestationSpire", gv_pLAYER_05_AMONS_FORCES, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDF8ADE22_u = UnitGroupCount(autoDF8ADE22_g, c_unitCountAll);
    for (;; autoDF8ADE22_u -= 1) {
        autoDF8ADE22_var = UnitGroupUnitFromEnd(autoDF8ADE22_g, autoDF8ADE22_u);
        if (autoDF8ADE22_var == null) { break; }
        UnitBehaviorAddPlayer(autoDF8ADE22_var, "Harmless", gv_pLAYER_01_USER, 1);
    }
    auto6DFB672E_g = UnitGroup("InfestedCivilian", gv_pLAYER_05_AMONS_FORCES, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6DFB672E_u = UnitGroupCount(auto6DFB672E_g, c_unitCountAll);
    for (;; auto6DFB672E_u -= 1) {
        auto6DFB672E_var = UnitGroupUnitFromEnd(auto6DFB672E_g, auto6DFB672E_u);
        if (auto6DFB672E_var == null) { break; }
        UnitBehaviorAddPlayer(auto6DFB672E_var, "CritterWanderLeashShort", gv_pLAYER_01_USER, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CavernsInit_Init () {
    gt_CavernsInit = TriggerCreate("gt_CavernsInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Caverns Starting Sequence
//--------------------------------------------------------------------------------------------------
bool gt_CavernsStartingSequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoF1C3C031_g;
    int autoF1C3C031_u;
    unit autoF1C3C031_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_achievementSectionThreeTimer, 361.0, false, c_timeGame);
    libVCMI_gf_AddMissionTipCampaign("Artanis");
    UnitGroupSelect(gv_activePlayerUnits, gv_pLAYER_01_USER, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    UIAlertClear(gv_pLAYER_01_USER);
    ObjectiveShow(gv_objective_AssembleArmy, PlayerGroupAll(), false);
    ObjectiveShow(gv_objective_TemplePowerStructure, PlayerGroupAll(), false);
    ObjectiveShow(gv_objective_KaraxAndFenixMustSurvive, PlayerGroupAll(), false);
    TriggerExecute(gt_EnergyCloudController, true, false);
    TriggerEnable(gt_UnitsKilledbyCloud, true);
    TriggerEnable(gt_ArtanisHealReminderQ, true);
    TriggerEnable(gt_DefeatArtanisDead, true);
    TriggerEnable(gt_CavernsAntechamberBattle, true);
    TriggerEnable(gt_CavernsCentralPassageZerg, true);
    TriggerEnable(gt_PurifierVulnerability, true);
    TriggerEnable(gt_PurifierReinforcements, true);
    TriggerEnable(gt_DarkTemplarVulnerability, true);
    TriggerEnable(gt_DarkTemplarReinforcements, true);
    TriggerEnable(gt_CavernsAccessPointArrival, true);
    TriggerEnable(gt_CavernsPeriodicAttackCheck, true);
    TriggerExecute(gt_EnergyCloudDamageRamp, true, false);
    autoF1C3C031_g = UnitGroup("Infestor", gv_pLAYER_05_AMONS_FORCES, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF1C3C031_u = UnitGroupCount(autoF1C3C031_g, c_unitCountAll);
    for (;; autoF1C3C031_u -= 1) {
        autoF1C3C031_var = UnitGroupUnitFromEnd(autoF1C3C031_g, autoF1C3C031_u);
        if (autoF1C3C031_var == null) { break; }
        gf_InfestorAI(autoF1C3C031_var);
    }
    UnitIssueOrder(UnitFromId(3608), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    Wait(2.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveCavernsPowerStructureCreate, true, false);
    TriggerExecute(gt_ObjectiveArtanisMustSurviveCreate, true, true);
    libVCMI_gf_CreateObjectivePing(true, PointFromId(123), StringExternal("Param/Value/47921BB5"));
    gv_primaryObjectivePing = PingLastCreated();
    libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/DF807CC0"));
    Wait(2.0, c_timeReal);
    TriggerQueueExit();
    TriggerExecute(gt_EnergyCloudQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CavernsStartingSequence_Init () {
    gt_CavernsStartingSequence = TriggerCreate("gt_CavernsStartingSequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Caverns Victory
//--------------------------------------------------------------------------------------------------
bool gt_CavernsVictory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_artanis) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_DefeatArtanisDead, false);
    libNtve_gf_ChangeUnitDamage(gv_artanis, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    PingDestroy(gv_primaryObjectivePing);
    if ((gv_unitsKilledByCloud == 0)) {
        libVoiC_gf_CampaignAwardAchievement("PAiur04_2", gv_pLAYER_01_USER);
    }

    TriggerExecute(gt_ObjectiveCavernsPowerStructureComplete, true, true);
    TriggerExecute(gt_ObjectiveArtanisMustSurviveComplete, true, true);
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CavernsVictory_Init () {
    gt_CavernsVictory = TriggerCreate("gt_CavernsVictory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Caverns Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_CavernsCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto8D249747_g;
    int auto8D249747_u;
    unit auto8D249747_var;
    unitgroup autoBADD1780_g;
    int autoBADD1780_u;
    unit autoBADD1780_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto8D249747_g = gv_activeEnemyUnits;
    auto8D249747_u = UnitGroupCount(auto8D249747_g, c_unitCountAll);
    for (;; auto8D249747_u -= 1) {
        auto8D249747_var = UnitGroupUnitFromEnd(auto8D249747_g, auto8D249747_u);
        if (auto8D249747_var == null) { break; }
        UnitRemove(auto8D249747_var);
    }
    autoBADD1780_g = UnitGroup(null, gv_pLAYER_05_AMONS_FORCES, RegionFromId(99), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoBADD1780_u = UnitGroupCount(autoBADD1780_g, c_unitCountAll);
    for (;; autoBADD1780_u -= 1) {
        autoBADD1780_var = UnitGroupUnitFromEnd(autoBADD1780_g, autoBADD1780_u);
        if (autoBADD1780_var == null) { break; }
        UnitRemove(autoBADD1780_var);
    }
    UnitKill(UnitFromId(1263));
    UnitKill(UnitFromId(1267));
    TriggerEnable(gt_CavernsPeriodicAttackCheck, false);
    TriggerStop(gt_EnergyCloudController);
    TriggerStop(gt_StaticEnergyClouds);
    TriggerStop(gt_CavernsAccessPointCaveLeft);
    TriggerStop(gt_CavernsAccessPointCaveRight);
    TimerPause(gv_achievementSectionThreeTimer, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CavernsCleanup_Init () {
    gt_CavernsCleanup = TriggerCreate("gt_CavernsCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Artanis Heal Used
//--------------------------------------------------------------------------------------------------
bool gt_ArtanisHealUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_artanisHealUsed = true;
    TriggerEnable(gt_ArtanisHealReminderQ, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArtanisHealUsed_Init () {
    gt_ArtanisHealUsed = TriggerCreate("gt_ArtanisHealUsed_Func");
    TriggerAddEventUnitAbility(gt_ArtanisHealUsed, null, AbilityCommand("ArtanisAstralWind", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Artanis Heal Reminder Q
//--------------------------------------------------------------------------------------------------
bool gt_ArtanisHealReminderQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < 90.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_artanis, "pMission_Aiur04|Line00212", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArtanisHealReminderQ_Init () {
    gt_ArtanisHealReminderQ = TriggerCreate("gt_ArtanisHealReminderQ_Func");
    TriggerEnable(gt_ArtanisHealReminderQ, false);
    TriggerAddEventUnitDamaged(gt_ArtanisHealReminderQ, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Artanis Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatArtanisDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libVCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libVCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/E5638336"), libVCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    TriggerExecute(gt_ObjectiveArtanisMustSurviveFailed, true, true);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatArtanisDead_Init () {
    gt_DefeatArtanisDead = TriggerCreate("gt_DefeatArtanisDead_Func");
    TriggerEnable(gt_DefeatArtanisDead, false);
    TriggerAddEventUnitDied(gt_DefeatArtanisDead, UnitRefFromVariable("gv_artanis"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Energy Cloud Controller
//--------------------------------------------------------------------------------------------------
bool gt_EnergyCloudController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto8F262F15_ae = 25;
    const int auto8F262F15_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "UnstableEnergy", c_unitCreateIgnorePlacement, gv_pLAYER_03_UNSTABLE_ENERGY, PointFromId(110));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "UnstableEnergy", c_unitCreateIgnorePlacement, gv_pLAYER_03_UNSTABLE_ENERGY, PointFromId(117));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "UnstableEnergy", c_unitCreateIgnorePlacement, gv_pLAYER_03_UNSTABLE_ENERGY, PointFromId(118));
    libNtve_gf_CreateUnitsAtPoint2(1, "UnstableEnergy", c_unitCreateIgnorePlacement, gv_pLAYER_03_UNSTABLE_ENERGY, PointFromId(46));
    gv_activeEnergyCloud = UnitLastCreated();
    UnitSetPropertyFixed(gv_activeEnergyCloud, c_unitPropMovementSpeed, gv_energyCloudSpeed);
    while (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(53), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0))) {
        Wait(1.0, c_timeAI);
    }
    TriggerExecute(gt_StaticEnergyClouds, true, false);
    lv_i = 2;
    for ( ; ( (auto8F262F15_ai >= 0 && lv_i <= auto8F262F15_ae) || (auto8F262F15_ai < 0 && lv_i >= auto8F262F15_ae) ) ; lv_i += auto8F262F15_ai ) {
        UnitIssueOrder(gv_activeEnergyCloud, OrderTargetingPoint(AbilityCommand("move", 0), PointFromName(("Energy Cloud Path " + IntToString(lv_i)))), c_orderQueueAddToEnd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnergyCloudController_Init () {
    gt_EnergyCloudController = TriggerCreate("gt_EnergyCloudController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Static Energy Clouds
//--------------------------------------------------------------------------------------------------
bool gt_StaticEnergyClouds_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int autoDE4B3722_ae = 20;
    const int autoDE4B3722_ai = 1;
    const int autoC5AE53A9_ae = 57;
    const int autoC5AE53A9_ai = 1;
    const int autoD1CF8EB9_ae = 53;
    const int autoD1CF8EB9_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 1;
    for ( ; ( (autoDE4B3722_ai >= 0 && lv_i <= autoDE4B3722_ae) || (autoDE4B3722_ai < 0 && lv_i >= autoDE4B3722_ae) ) ; lv_i += autoDE4B3722_ai ) {
        while (!((libNtve_gf_UnitInRegion(gv_activeEnergyCloud, RegionCircle(PointFromName(("Static Cloud " + IntToString(lv_i))), 8.0)) == true))) {
            Wait(1.0, c_timeAI);
        }
        gf_CreateStaticEnergyCloud(lv_i);
    }
    lv_i = 54;
    for ( ; ( (autoC5AE53A9_ai >= 0 && lv_i <= autoC5AE53A9_ae) || (autoC5AE53A9_ai < 0 && lv_i >= autoC5AE53A9_ae) ) ; lv_i += autoC5AE53A9_ai ) {
        while (!((libNtve_gf_UnitInRegion(gv_activeEnergyCloud, RegionCircle(PointFromName(("Static Cloud " + IntToString(lv_i))), 8.0)) == true))) {
            Wait(1.0, c_timeAI);
        }
        gf_CreateStaticEnergyCloud(lv_i);
    }
    lv_i = 21;
    for ( ; ( (autoD1CF8EB9_ai >= 0 && lv_i <= autoD1CF8EB9_ae) || (autoD1CF8EB9_ai < 0 && lv_i >= autoD1CF8EB9_ae) ) ; lv_i += autoD1CF8EB9_ai ) {
        while (!((libNtve_gf_UnitInRegion(gv_activeEnergyCloud, RegionCircle(PointFromName(("Static Cloud " + IntToString(lv_i))), 8.0)) == true))) {
            Wait(1.0, c_timeAI);
        }
        gf_CreateStaticEnergyCloud(lv_i);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StaticEnergyClouds_Init () {
    gt_StaticEnergyClouds = TriggerCreate("gt_StaticEnergyClouds_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Energy Cloud Q
//--------------------------------------------------------------------------------------------------
bool gt_EnergyCloudQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libNtve_gf_ShareVisionofUnit(gv_activeEnergyCloud, true, gv_pLAYER_01_USER);
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_activeEnergyCloud), 5.0, Color(100.00, 0.00, 0.00));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", UnitGetPosition(gv_activeEnergyCloud), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    gv_energyCloudPing = PingLastCreated();
    PingSetUnit(PingLastCreated(), gv_activeEnergyCloud);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/E94DFFF3"));
    PingSetScale(PingLastCreated(), 0.9);
    Wait(1.0, c_timeReal);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_artanis, "pMission_Aiur04|Line00241", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnergyCloudQ_Init () {
    gt_EnergyCloudQ = TriggerCreate("gt_EnergyCloudQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Units Killed by Cloud
//--------------------------------------------------------------------------------------------------
bool gt_UnitsKilledbyCloud_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) == gv_pLAYER_03_UNSTABLE_ENERGY))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_unitsKilledByCloud += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitsKilledbyCloud_Init () {
    gt_UnitsKilledbyCloud = TriggerCreate("gt_UnitsKilledbyCloud_Func");
    TriggerEnable(gt_UnitsKilledbyCloud, false);
    TriggerAddEventUnitDied(gt_UnitsKilledbyCloud, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Energy Cloud Damage Ramp
//--------------------------------------------------------------------------------------------------
bool gt_EnergyCloudDamageRamp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto19E3EDD0_g;
    int auto19E3EDD0_u;
    unit auto19E3EDD0_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        Wait(1.0, c_timeAI);
        if (((libVCMI_gf_GameIsOver() == true) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true))) {
            return true;
        }

        auto19E3EDD0_g = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto19E3EDD0_u = UnitGroupCount(auto19E3EDD0_g, c_unitCountAll);
        for (;; auto19E3EDD0_u -= 1) {
            auto19E3EDD0_var = UnitGroupUnitFromEnd(auto19E3EDD0_g, auto19E3EDD0_u);
            if (auto19E3EDD0_var == null) { break; }
            if ((UnitGetCustomValue(auto19E3EDD0_var, 0) < 1)) {
                if ((UnitHasBehavior2(auto19E3EDD0_var, "UnstableEnergyDamage") == true)) {
                    UnitSetCustomValue(auto19E3EDD0_var, 0, (UnitGetCustomValue(auto19E3EDD0_var, 0) + 2.0));
                }

            }
            else {
                if ((UnitHasBehavior2(auto19E3EDD0_var, "UnstableEnergyDamage") == true)) {
                    if ((UnitGetCustomValue(auto19E3EDD0_var, 0) < 10.0)) {
                        UnitSetCustomValue(auto19E3EDD0_var, 0, (UnitGetCustomValue(auto19E3EDD0_var, 0) + 1.0));
                        if ((UnitGetCustomValue(auto19E3EDD0_var, 0) >= 10.0)) {
                            libNtve_gf_ChangeUnitDamage(auto19E3EDD0_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Mega2);
                        }

                    }

                }
                else {
                    UnitSetCustomValue(auto19E3EDD0_var, 0, 0.0);
                    libNtve_gf_ChangeUnitDamage(auto19E3EDD0_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnergyCloudDamageRamp_Init () {
    gt_EnergyCloudDamageRamp = TriggerCreate("gt_EnergyCloudDamageRamp_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purifier Reinforcements
//--------------------------------------------------------------------------------------------------
bool gt_PurifierReinforcements_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_warpPrisms;

    // Automatic Variable Declarations
    unitgroup auto5359FB81_g;
    int auto5359FB81_u;
    unit auto5359FB81_var;
    unitgroup auto0F38E914_g;
    int auto0F38E914_u;
    unit auto0F38E914_var;

    // Variable Initialization
    lv_warpPrisms = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(13), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto5359FB81_g = gv_purifierReinforcements;
    auto5359FB81_u = UnitGroupCount(auto5359FB81_g, c_unitCountAll);
    for (;; auto5359FB81_u -= 1) {
        auto5359FB81_var = UnitGroupUnitFromEnd(auto5359FB81_g, auto5359FB81_u);
        if (auto5359FB81_var == null) { break; }
        if ((UnitGetType(auto5359FB81_var) == "SentryPurifier")) {
            UnitAbilityEnable(auto5359FB81_var, "VoidSentryChronoBeam", true);
        }

        if ((UnitGetType(auto5359FB81_var) == "Reaver")) {
            UnitMagazineArm(auto5359FB81_var, AbilityCommand("ReaverHangar", 0), 5);
        }

    }
    UnitGroupAddUnitGroup(gv_activePlayerUnits, gv_purifierReinforcements);
    libNtve_gf_RescueUnit2(gv_purifierReinforcements, gv_pLAYER_01_USER, true);
    VisRevealerEnable(gv_hiveCluster1Revealer, false);
    Wait(1.5, c_timeReal);
    TriggerExecute(gt_Purifier2Q, true, false);
    lv_warpPrisms = UnitGroup("WarpPrismPhasing", gv_pLAYER_04_PROTOSS_ALLY, RegionFromId(59), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    while (true) {
        if ((libNtve_gf_UnitGroupIsDead(lv_warpPrisms) == true)) {
            return true;
        }

        auto0F38E914_g = lv_warpPrisms;
        auto0F38E914_u = UnitGroupCount(auto0F38E914_g, c_unitCountAll);
        for (;; auto0F38E914_u -= 1) {
            auto0F38E914_var = UnitGroupUnitFromEnd(auto0F38E914_g, auto0F38E914_u);
            if (auto0F38E914_var == null) { break; }
            if ((UnitGetType(auto0F38E914_var) == "WarpPrismPhasing")) {
                UnitIssueOrder(auto0F38E914_var, Order(AbilityCommand("TransportMode", 0)), c_orderQueueReplace);
            }
            else {
                if ((libNtve_gf_UnitInRegion(auto0F38E914_var, RegionFromId(57)) == true)) {
                    UnitRemove(auto0F38E914_var);
                }
                else {
                    UnitIssueOrder(auto0F38E914_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(57))), c_orderQueueReplace);
                }
            }
        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurifierReinforcements_Init () {
    gt_PurifierReinforcements = TriggerCreate("gt_PurifierReinforcements_Func");
    TriggerEnable(gt_PurifierReinforcements, false);
    TriggerAddEventTimePeriodic(gt_PurifierReinforcements, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purifier Vulnerability
//--------------------------------------------------------------------------------------------------
bool gt_PurifierVulnerability_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto1E6A1D52_g;
    int auto1E6A1D52_u;
    unit auto1E6A1D52_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((VisIsVisibleForPlayer(gv_pLAYER_01_USER, RegionGetCenter(RegionFromId(13))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto1E6A1D52_g = gv_hiveCluster1Buildings;
    auto1E6A1D52_u = UnitGroupCount(auto1E6A1D52_g, c_unitCountAll);
    for (;; auto1E6A1D52_u -= 1) {
        auto1E6A1D52_var = UnitGroupUnitFromEnd(auto1E6A1D52_g, auto1E6A1D52_u);
        if (auto1E6A1D52_var == null) { break; }
        libNtve_gf_ChangeUnitDamage(auto1E6A1D52_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    }
    UnitIssueOrder(UnitFromId(727), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(743)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(862), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(745)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurifierVulnerability_Init () {
    gt_PurifierVulnerability = TriggerCreate("gt_PurifierVulnerability_Func");
    TriggerEnable(gt_PurifierVulnerability, false);
    TriggerAddEventTimePeriodic(gt_PurifierVulnerability, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purifier 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_Purifier1Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if (((TriggerIsEnabled(gt_PurifierReinforcements) == false) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_04_PROTOSS_ALLY, RegionFromId(13), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
        return true;
    }

    UIAlertClear(gv_pLAYER_01_USER);
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), RegionGetCenter(RegionFromId(13)), 5.0, Color(0.00, 100.00, 0.00));
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(13));
    gv_hiveCluster1Revealer = VisRevealerLastCreated();
    VisRevealerEnable(gv_hiveCluster1Revealer, true);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/E893A8F0"), null, RegionGetCenter(RegionFromId(13)));
    Wait(1.0, c_timeReal);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur04|Line00270", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), RegionGetCenter(RegionFromId(13)), 5.0, Color(0.00, 100.00, 0.00));
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Purifier1Q_Init () {
    gt_Purifier1Q = TriggerCreate("gt_Purifier1Q_Func");
    TriggerAddEventUnitRegion(gt_Purifier1Q, null, RegionFromId(52), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purifier 2 Q
//--------------------------------------------------------------------------------------------------
bool gt_Purifier2Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionPurifierRescueQ, true, false);
    Wait(3.0, c_timeGame);
    TriggerExecute(gt_PurifierNydusCanals, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Purifier2Q_Init () {
    gt_Purifier2Q = TriggerCreate("gt_Purifier2Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Purifier Rescue Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionPurifierRescueQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_speaker;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    lv_speaker = UnitGroupClosestToPoint(UnitGroupFilter("ZealotPurifier", gv_pLAYER_01_USER, gv_activePlayerUnits, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(gv_artanis));
    if ((UnitIsAlive(lv_speaker) == false)) {
        return true;
    }

    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(lv_speaker, "pMission_Aiur04|Line00244", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionPurifierRescueQ_Init () {
    gt_TransmissionPurifierRescueQ = TriggerCreate("gt_TransmissionPurifierRescueQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purifier Nydus Canals
//--------------------------------------------------------------------------------------------------
bool gt_PurifierNydusCanals_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_CreateNydusWormCaverns(2.0, 2.5, true, false, "Zergling", libLotv_gf_DifficultyValueInt2(3, 3, 5, 5), null, 0, "Roach", libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), PointFromId(738));
    Wait(1.0, c_timeAI);
    gf_CreateNydusWormCaverns(2.0, 2.5, true, false, "Zergling", libLotv_gf_DifficultyValueInt2(3, 3, 5, 5), "Roach", libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), null, 0, PointFromId(739));
    Wait(1.0, c_timeAI);
    UnitSetPropertyFixed(gv_activeEnergyCloud, c_unitPropMovementSpeed, (gv_energyCloudSpeed * libNtve_gf_DifficultyValueFixed(1.0, 1.15, 1.2, 1.25)));
    while (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_05_AMONS_FORCES, RegionFromId(13), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeAI);
    }
    TriggerExecute(gt_PressForwardQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurifierNydusCanals_Init () {
    gt_PurifierNydusCanals = TriggerCreate("gt_PurifierNydusCanals_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Press Forward Q
//--------------------------------------------------------------------------------------------------
bool gt_PressForwardQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_artanis, "pMission_Aiur04|Line00271", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PressForwardQ_Init () {
    gt_PressForwardQ = TriggerCreate("gt_PressForwardQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hatchery Larva Kill
//--------------------------------------------------------------------------------------------------
bool gt_HatcheryLarvaKill_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_triggeringPoint;

    // Automatic Variable Declarations
    unitgroup autoB9A27B5C_g;
    int autoB9A27B5C_u;
    unit autoB9A27B5C_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_triggeringPoint = UnitGetPosition(EventUnit());
    Wait(1.0, c_timeGame);
    autoB9A27B5C_g = UnitGroup("Larva", c_playerAny, RegionCircle(lv_triggeringPoint, 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB9A27B5C_u = UnitGroupCount(autoB9A27B5C_g, c_unitCountAll);
    for (;; autoB9A27B5C_u -= 1) {
        autoB9A27B5C_var = UnitGroupUnitFromEnd(autoB9A27B5C_g, autoB9A27B5C_u);
        if (autoB9A27B5C_var == null) { break; }
        UnitKill(autoB9A27B5C_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HatcheryLarvaKill_Init () {
    gt_HatcheryLarvaKill = TriggerCreate("gt_HatcheryLarvaKill_Func");
    TriggerAddEventUnitDied(gt_HatcheryLarvaKill, UnitRefFromUnit(UnitFromId(2138)));
    TriggerAddEventUnitDied(gt_HatcheryLarvaKill, UnitRefFromUnit(UnitFromId(3515)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dark Templar Reinforcements
//--------------------------------------------------------------------------------------------------
bool gt_DarkTemplarReinforcements_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(30), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupAddUnitGroup(gv_activePlayerUnits, gv_darkTemplarReinforcements);
    libNtve_gf_RescueUnit2(gv_darkTemplarReinforcements, gv_pLAYER_01_USER, true);
    VisRevealerEnable(gv_hiveCluster2Revealer, false);
    Wait(1.5, c_timeReal);
    TriggerExecute(gt_DarkTemplar2Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DarkTemplarReinforcements_Init () {
    gt_DarkTemplarReinforcements = TriggerCreate("gt_DarkTemplarReinforcements_Func");
    TriggerEnable(gt_DarkTemplarReinforcements, false);
    TriggerAddEventTimePeriodic(gt_DarkTemplarReinforcements, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dark Templar Vulnerability
//--------------------------------------------------------------------------------------------------
bool gt_DarkTemplarVulnerability_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto9C3000A1_g;
    int auto9C3000A1_u;
    unit auto9C3000A1_var;
    unitgroup autoCA4CBDB4_g;
    int autoCA4CBDB4_u;
    unit autoCA4CBDB4_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((VisIsVisibleForPlayer(gv_pLAYER_01_USER, RegionGetCenter(RegionFromId(30))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto9C3000A1_g = UnitGroup(null, gv_pLAYER_04_PROTOSS_ALLY, RegionFromId(30), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9C3000A1_u = UnitGroupCount(auto9C3000A1_g, c_unitCountAll);
    for (;; auto9C3000A1_u -= 1) {
        auto9C3000A1_var = UnitGroupUnitFromEnd(auto9C3000A1_g, auto9C3000A1_u);
        if (auto9C3000A1_var == null) { break; }
        libNtve_gf_ShareVisionofUnit(auto9C3000A1_var, true, gv_pLAYER_01_USER);
    }
    autoCA4CBDB4_g = gv_hiveCluster2Buildings;
    autoCA4CBDB4_u = UnitGroupCount(autoCA4CBDB4_g, c_unitCountAll);
    for (;; autoCA4CBDB4_u -= 1) {
        autoCA4CBDB4_var = UnitGroupUnitFromEnd(autoCA4CBDB4_g, autoCA4CBDB4_u);
        if (autoCA4CBDB4_var == null) { break; }
        libNtve_gf_ChangeUnitDamage(autoCA4CBDB4_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DarkTemplarVulnerability_Init () {
    gt_DarkTemplarVulnerability = TriggerCreate("gt_DarkTemplarVulnerability_Func");
    TriggerEnable(gt_DarkTemplarVulnerability, false);
    TriggerAddEventTimePeriodic(gt_DarkTemplarVulnerability, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dark Templar 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_DarkTemplar1Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if (((TriggerIsEnabled(gt_DarkTemplarReinforcements) == false) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_04_PROTOSS_ALLY, RegionFromId(30), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
        return true;
    }

    UIAlertClear(gv_pLAYER_01_USER);
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), RegionGetCenter(RegionFromId(30)), 5.0, Color(0.00, 100.00, 0.00));
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(30));
    gv_hiveCluster2Revealer = VisRevealerLastCreated();
    VisRevealerEnable(gv_hiveCluster2Revealer, true);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/5D4CA5F1"), null, RegionGetCenter(RegionFromId(30)));
    Wait(1.0, c_timeReal);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur04|Line00272", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), RegionGetCenter(RegionFromId(30)), 5.0, Color(0.00, 100.00, 0.00));
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DarkTemplar1Q_Init () {
    gt_DarkTemplar1Q = TriggerCreate("gt_DarkTemplar1Q_Func");
    TriggerAddEventUnitRegion(gt_DarkTemplar1Q, null, RegionFromId(7), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dark Templar 2 Q
//--------------------------------------------------------------------------------------------------
bool gt_DarkTemplar2Q_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_speaker;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    lv_speaker = UnitGroupClosestToPoint(UnitGroupFilter("DarkTemplarShakuras", gv_pLAYER_01_USER, gv_activePlayerUnits, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(gv_artanis));
    if ((UnitIsAlive(lv_speaker) == false)) {
        return true;
    }

    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_artanis, "pMission_Aiur04|Line00273", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur04|Line00274", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DarkTemplar2Q_Init () {
    gt_DarkTemplar2Q = TriggerCreate("gt_DarkTemplar2Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Caverns Periodic Attack Check
//--------------------------------------------------------------------------------------------------
bool gt_CavernsPeriodicAttackCheck_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto84CFA311_g;
    int auto84CFA311_u;
    unit auto84CFA311_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(gv_artanis) == false)) {
        return true;
    }

    auto84CFA311_g = gv_activeEnemyUnits;
    auto84CFA311_u = UnitGroupCount(auto84CFA311_g, c_unitCountAll);
    for (;; auto84CFA311_u -= 1) {
        auto84CFA311_var = UnitGroupUnitFromEnd(auto84CFA311_g, auto84CFA311_u);
        if (auto84CFA311_var == null) { break; }
        libNtve_gf_AICast(auto84CFA311_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_artanis)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CavernsPeriodicAttackCheck_Init () {
    gt_CavernsPeriodicAttackCheck = TriggerCreate("gt_CavernsPeriodicAttackCheck_Func");
    TriggerEnable(gt_CavernsPeriodicAttackCheck, false);
    TriggerAddEventTimePeriodic(gt_CavernsPeriodicAttackCheck, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Caverns Antechamber Battle
//--------------------------------------------------------------------------------------------------
bool gt_CavernsAntechamberBattle_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto7A34258D_g;
    int auto7A34258D_u;
    unit auto7A34258D_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(73), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libLbty_gf_AutoRevealRegion(RegionFromId(5), RegionFromId(5), gv_pLAYER_01_USER);
    auto7A34258D_g = gv_cavernsAntechamberEnemies;
    auto7A34258D_u = UnitGroupCount(auto7A34258D_g, c_unitCountAll);
    for (;; auto7A34258D_u -= 1) {
        auto7A34258D_var = UnitGroupUnitFromEnd(auto7A34258D_g, auto7A34258D_u);
        if (auto7A34258D_var == null) { break; }
        UnitGroupAdd(gv_activeEnemyUnits, auto7A34258D_var);
    }
    Wait(4.0, c_timeAI);
    TriggerExecute(gt_CavernsAntechamberZerg1, true, false);
    Wait(1.5, c_timeAI);
    TriggerExecute(gt_CavernsAntechamberZerg2, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CavernsAntechamberBattle_Init () {
    gt_CavernsAntechamberBattle = TriggerCreate("gt_CavernsAntechamberBattle_Func");
    TriggerEnable(gt_CavernsAntechamberBattle, false);
    TriggerAddEventTimePeriodic(gt_CavernsAntechamberBattle, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Caverns Antechamber Zerg 1
//--------------------------------------------------------------------------------------------------
bool gt_CavernsAntechamberZerg1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoAA44B913_g;
    int autoAA44B913_u;
    unit autoAA44B913_var;
    unitgroup autoC9F8A0DD_g;
    int autoC9F8A0DD_u;
    unit autoC9F8A0DD_var;
    unitgroup auto86823B5C_g;
    int auto86823B5C_u;
    unit auto86823B5C_var;
    unitgroup autoB2D4C1E9_g;
    int autoB2D4C1E9_u;
    unit autoB2D4C1E9_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(73), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
        libNtve_gf_CreateUnitsAtPoint2(4, "Zergling", 0, gv_pLAYER_05_AMONS_FORCES, PointFromId(260));
        auto86823B5C_g = UnitLastCreatedGroup();
        auto86823B5C_u = UnitGroupCount(auto86823B5C_g, c_unitCountAll);
        for (;; auto86823B5C_u -= 1) {
            auto86823B5C_var = UnitGroupUnitFromEnd(auto86823B5C_g, auto86823B5C_u);
            if (auto86823B5C_var == null) { break; }
            libNtve_gf_AICast(auto86823B5C_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(5))));
            UnitGroupAdd(gv_activeEnemyUnits, auto86823B5C_var);
        }
        Wait(3.0, c_timeGame);
        libNtve_gf_CreateUnitsAtPoint2(1, "Roach", 0, gv_pLAYER_05_AMONS_FORCES, PointFromId(260));
        autoB2D4C1E9_g = UnitLastCreatedGroup();
        autoB2D4C1E9_u = UnitGroupCount(autoB2D4C1E9_g, c_unitCountAll);
        for (;; autoB2D4C1E9_u -= 1) {
            autoB2D4C1E9_var = UnitGroupUnitFromEnd(autoB2D4C1E9_g, autoB2D4C1E9_u);
            if (autoB2D4C1E9_var == null) { break; }
            libNtve_gf_AICast(autoB2D4C1E9_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(5))));
            UnitGroupAdd(gv_activeEnemyUnits, autoB2D4C1E9_var);
        }
    }
    else {
        libNtve_gf_CreateUnitsAtPoint2(1, "Ultralisk", 0, gv_pLAYER_05_AMONS_FORCES, PointFromId(260));
        autoAA44B913_g = UnitLastCreatedGroup();
        autoAA44B913_u = UnitGroupCount(autoAA44B913_g, c_unitCountAll);
        for (;; autoAA44B913_u -= 1) {
            autoAA44B913_var = UnitGroupUnitFromEnd(autoAA44B913_g, autoAA44B913_u);
            if (autoAA44B913_var == null) { break; }
            libNtve_gf_AICast(autoAA44B913_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(5))));
            UnitGroupAdd(gv_activeEnemyUnits, autoAA44B913_var);
        }
        Wait(3.0, c_timeGame);
        libNtve_gf_CreateUnitsAtPoint2(5, "Zergling", 0, gv_pLAYER_05_AMONS_FORCES, PointFromId(260));
        autoC9F8A0DD_g = UnitLastCreatedGroup();
        autoC9F8A0DD_u = UnitGroupCount(autoC9F8A0DD_g, c_unitCountAll);
        for (;; autoC9F8A0DD_u -= 1) {
            autoC9F8A0DD_var = UnitGroupUnitFromEnd(autoC9F8A0DD_g, autoC9F8A0DD_u);
            if (autoC9F8A0DD_var == null) { break; }
            libNtve_gf_AICast(autoC9F8A0DD_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(5))));
            UnitGroupAdd(gv_activeEnemyUnits, autoC9F8A0DD_var);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CavernsAntechamberZerg1_Init () {
    gt_CavernsAntechamberZerg1 = TriggerCreate("gt_CavernsAntechamberZerg1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Caverns Antechamber Zerg 2
//--------------------------------------------------------------------------------------------------
bool gt_CavernsAntechamberZerg2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoA7B84FB5_g;
    int autoA7B84FB5_u;
    unit autoA7B84FB5_var;
    unitgroup auto29F0BA38_g;
    int auto29F0BA38_u;
    unit auto29F0BA38_var;
    unitgroup auto0B614B4E_g;
    int auto0B614B4E_u;
    unit auto0B614B4E_var;
    unitgroup auto0F440833_g;
    int auto0F440833_u;
    unit auto0F440833_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(73), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
        libNtve_gf_CreateUnitsAtPoint2(4, "Zergling", 0, gv_pLAYER_05_AMONS_FORCES, PointFromId(267));
        auto0B614B4E_g = UnitLastCreatedGroup();
        auto0B614B4E_u = UnitGroupCount(auto0B614B4E_g, c_unitCountAll);
        for (;; auto0B614B4E_u -= 1) {
            auto0B614B4E_var = UnitGroupUnitFromEnd(auto0B614B4E_g, auto0B614B4E_u);
            if (auto0B614B4E_var == null) { break; }
            libNtve_gf_AICast(auto0B614B4E_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(5))));
            UnitGroupAdd(gv_activeEnemyUnits, auto0B614B4E_var);
        }
        Wait(2.5, c_timeGame);
        libNtve_gf_CreateUnitsAtPoint2(1, "Roach", 0, gv_pLAYER_05_AMONS_FORCES, PointFromId(267));
        auto0F440833_g = UnitLastCreatedGroup();
        auto0F440833_u = UnitGroupCount(auto0F440833_g, c_unitCountAll);
        for (;; auto0F440833_u -= 1) {
            auto0F440833_var = UnitGroupUnitFromEnd(auto0F440833_g, auto0F440833_u);
            if (auto0F440833_var == null) { break; }
            libNtve_gf_AICast(auto0F440833_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(5))));
            UnitGroupAdd(gv_activeEnemyUnits, auto0F440833_var);
        }
    }
    else {
        libNtve_gf_CreateUnitsAtPoint2(5, "Zergling", 0, gv_pLAYER_05_AMONS_FORCES, PointFromId(267));
        autoA7B84FB5_g = UnitLastCreatedGroup();
        autoA7B84FB5_u = UnitGroupCount(autoA7B84FB5_g, c_unitCountAll);
        for (;; autoA7B84FB5_u -= 1) {
            autoA7B84FB5_var = UnitGroupUnitFromEnd(autoA7B84FB5_g, autoA7B84FB5_u);
            if (autoA7B84FB5_var == null) { break; }
            libNtve_gf_AICast(autoA7B84FB5_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(5))));
            UnitGroupAdd(gv_activeEnemyUnits, autoA7B84FB5_var);
        }
        Wait(2.5, c_timeGame);
        libNtve_gf_CreateUnitsAtPoint2(2, "Hydralisk", 0, gv_pLAYER_05_AMONS_FORCES, PointFromId(267));
        auto29F0BA38_g = UnitLastCreatedGroup();
        auto29F0BA38_u = UnitGroupCount(auto29F0BA38_g, c_unitCountAll);
        for (;; auto29F0BA38_u -= 1) {
            auto29F0BA38_var = UnitGroupUnitFromEnd(auto29F0BA38_g, auto29F0BA38_u);
            if (auto29F0BA38_var == null) { break; }
            libNtve_gf_AICast(auto29F0BA38_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(5))));
            UnitGroupAdd(gv_activeEnemyUnits, auto29F0BA38_var);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CavernsAntechamberZerg2_Init () {
    gt_CavernsAntechamberZerg2 = TriggerCreate("gt_CavernsAntechamberZerg2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Caverns Central Passage Zerg
//--------------------------------------------------------------------------------------------------
bool gt_CavernsCentralPassageZerg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(54), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libLbty_gf_AutoRevealRegion(RegionFromId(33), RegionFromId(33), gv_pLAYER_01_USER);
    SoundPlayAtPointForPlayer(SoundLink("Event_Lab01_ZerglingRelease", 0), c_maxPlayers, PlayerGroupAll(), RegionGetCenter(RegionFromId(54)), 0.0, 100.0, 0.0);
    UnitGroupIssueOrder(UnitGroup(null, gv_pLAYER_05_AMONS_FORCES, RegionFromId(56), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_artanis)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CavernsCentralPassageZerg_Init () {
    gt_CavernsCentralPassageZerg = TriggerCreate("gt_CavernsCentralPassageZerg_Func");
    TriggerEnable(gt_CavernsCentralPassageZerg, false);
    TriggerAddEventTimePeriodic(gt_CavernsCentralPassageZerg, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Caverns Central Chamber Battle
//--------------------------------------------------------------------------------------------------
bool gt_CavernsCentralChamberBattle_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto81A7DCF5_g;
    int auto81A7DCF5_u;
    unit auto81A7DCF5_var;
    unitgroup auto65F1947D_g;
    int auto65F1947D_u;
    unit auto65F1947D_var;
    unitgroup autoF3EFA539_g;
    int autoF3EFA539_u;
    unit autoF3EFA539_var;
    unitgroup auto89CE36CD_g;
    int auto89CE36CD_u;
    unit auto89CE36CD_var;
    unitgroup auto6036947D_g;
    int auto6036947D_u;
    unit auto6036947D_var;
    unitgroup auto86151230_g;
    int auto86151230_u;
    unit auto86151230_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(55), 8.0, false);
    auto81A7DCF5_g = UnitGroup("ZerglingBurrowed", gv_pLAYER_05_AMONS_FORCES, RegionFromId(55), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto81A7DCF5_u = UnitGroupCount(auto81A7DCF5_g, c_unitCountAll);
    for (;; auto81A7DCF5_u -= 1) {
        auto81A7DCF5_var = UnitGroupUnitFromEnd(auto81A7DCF5_g, auto81A7DCF5_u);
        if (auto81A7DCF5_var == null) { break; }
        UnitIssueOrder(auto81A7DCF5_var, Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        Wait(0.0625, c_timeAI);
    }
    Wait(1.5, c_timeAI);
    auto65F1947D_g = UnitGroup("Zergling", gv_pLAYER_05_AMONS_FORCES, RegionFromId(55), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto65F1947D_u = UnitGroupCount(auto65F1947D_g, c_unitCountAll);
    for (;; auto65F1947D_u -= 1) {
        auto65F1947D_var = UnitGroupUnitFromEnd(auto65F1947D_g, auto65F1947D_u);
        if (auto65F1947D_var == null) { break; }
        AISetUnitScriptControlled(auto65F1947D_var, false);
        UnitGroupAdd(gv_activeEnemyUnits, auto65F1947D_var);
    }
    autoF3EFA539_g = UnitGroup("BanelingBurrowed", gv_pLAYER_05_AMONS_FORCES, RegionFromId(55), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF3EFA539_u = UnitGroupCount(autoF3EFA539_g, c_unitCountAll);
    for (;; autoF3EFA539_u -= 1) {
        autoF3EFA539_var = UnitGroupUnitFromEnd(autoF3EFA539_g, autoF3EFA539_u);
        if (autoF3EFA539_var == null) { break; }
        UnitIssueOrder(autoF3EFA539_var, Order(AbilityCommand("BurrowBanelingUp", 0)), c_orderQueueReplace);
    }
    Wait(1.5, c_timeAI);
    auto89CE36CD_g = UnitGroup("Baneling", gv_pLAYER_05_AMONS_FORCES, RegionFromId(55), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto89CE36CD_u = UnitGroupCount(auto89CE36CD_g, c_unitCountAll);
    for (;; auto89CE36CD_u -= 1) {
        auto89CE36CD_var = UnitGroupUnitFromEnd(auto89CE36CD_g, auto89CE36CD_u);
        if (auto89CE36CD_var == null) { break; }
        AISetUnitScriptControlled(auto89CE36CD_var, false);
        UnitGroupAdd(gv_activeEnemyUnits, auto89CE36CD_var);
    }
    auto6036947D_g = UnitGroup("UltraliskBurrowed", gv_pLAYER_05_AMONS_FORCES, RegionFromId(55), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6036947D_u = UnitGroupCount(auto6036947D_g, c_unitCountAll);
    for (;; auto6036947D_u -= 1) {
        auto6036947D_var = UnitGroupUnitFromEnd(auto6036947D_g, auto6036947D_u);
        if (auto6036947D_var == null) { break; }
        UnitIssueOrder(auto6036947D_var, Order(AbilityCommand("BurrowUltraliskUp", 0)), c_orderQueueReplace);
    }
    Wait(1.5, c_timeAI);
    auto86151230_g = UnitGroup("Ultralisk", gv_pLAYER_05_AMONS_FORCES, RegionFromId(55), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto86151230_u = UnitGroupCount(auto86151230_g, c_unitCountAll);
    for (;; auto86151230_u -= 1) {
        auto86151230_var = UnitGroupUnitFromEnd(auto86151230_g, auto86151230_u);
        if (auto86151230_var == null) { break; }
        AISetUnitScriptControlled(auto86151230_var, false);
        UnitGroupAdd(gv_activeEnemyUnits, auto86151230_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CavernsCentralChamberBattle_Init () {
    gt_CavernsCentralChamberBattle = TriggerCreate("gt_CavernsCentralChamberBattle_Func");
    TriggerAddEventUnitRegion(gt_CavernsCentralChamberBattle, null, RegionFromId(55), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Caverns Nydus Chamber Battle
//--------------------------------------------------------------------------------------------------
bool gt_CavernsNydusChamberBattle_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoB5F79FF9_g;
    int autoB5F79FF9_u;
    unit autoB5F79FF9_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(58), 8.0, false);
    autoB5F79FF9_g = UnitGroup(null, gv_pLAYER_05_AMONS_FORCES, RegionFromId(58), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB5F79FF9_u = UnitGroupCount(autoB5F79FF9_g, c_unitCountAll);
    for (;; autoB5F79FF9_u -= 1) {
        autoB5F79FF9_var = UnitGroupUnitFromEnd(autoB5F79FF9_g, autoB5F79FF9_u);
        if (autoB5F79FF9_var == null) { break; }
        UnitGroupAdd(gv_activeEnemyUnits, autoB5F79FF9_var);
    }
    Wait(1.0, c_timeAI);
    SoundPlayForPlayer(SoundLink("NydusWorm_Birth", 0), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
    CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 0.5, 1.0, 3.0);
    gf_CreateNydusWormCaverns(5.0, 5.0, true, false, "Roach", 2, "Hydralisk", libLotv_gf_DifficultyValueInt2(1, 1, 1, 2), "Zergling", 4, PointFromId(1368));
    Wait(0.75, c_timeAI);
    gf_CreateNydusWormCaverns(6.0, 6.0, true, false, "Zergling", 8, "Hydralisk", libLotv_gf_DifficultyValueInt2(1, 1, 1, 2), "Zergling", 4, PointFromId(1369));
    Wait(0.75, c_timeAI);
    gf_CreateNydusWormCaverns(6.0, 6.0, true, false, "Zergling", 8, "Hydralisk", libLotv_gf_DifficultyValueInt2(1, 1, 1, 2), "Zergling", 4, PointFromId(1370));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CavernsNydusChamberBattle_Init () {
    gt_CavernsNydusChamberBattle = TriggerCreate("gt_CavernsNydusChamberBattle_Func");
    TriggerAddEventUnitRegion(gt_CavernsNydusChamberBattle, null, RegionFromId(58), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Caverns Access Point Arrival
//--------------------------------------------------------------------------------------------------
bool gt_CavernsAccessPointArrival_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(70), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(67), 0.0, false);
    TriggerExecute(gt_CavernsAccessPointArrivalQ, true, false);
    TriggerExecute(gt_CavernsAccessPointBattle, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CavernsAccessPointArrival_Init () {
    gt_CavernsAccessPointArrival = TriggerCreate("gt_CavernsAccessPointArrival_Func");
    TriggerEnable(gt_CavernsAccessPointArrival, false);
    TriggerAddEventTimePeriodic(gt_CavernsAccessPointArrival, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Caverns Access Point Arrival Q
//--------------------------------------------------------------------------------------------------
bool gt_CavernsAccessPointArrivalQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_artanis, "pMission_Aiur04|Line00164", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CavernsAccessPointArrivalQ_Init () {
    gt_CavernsAccessPointArrivalQ = TriggerCreate("gt_CavernsAccessPointArrivalQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Caverns Access Point Battle
//--------------------------------------------------------------------------------------------------
bool gt_CavernsAccessPointBattle_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoB60A9F5D_g;
    int autoB60A9F5D_u;
    unit autoB60A9F5D_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(5.0, c_timeAI);
    autoB60A9F5D_g = UnitGroup(null, gv_pLAYER_05_AMONS_FORCES, RegionFromId(67), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB60A9F5D_u = UnitGroupCount(autoB60A9F5D_g, c_unitCountAll);
    for (;; autoB60A9F5D_u -= 1) {
        autoB60A9F5D_var = UnitGroupUnitFromEnd(autoB60A9F5D_g, autoB60A9F5D_u);
        if (autoB60A9F5D_var == null) { break; }
        if ((UnitGetType(autoB60A9F5D_var) != "Infestor")) {
            UnitGroupAdd(gv_activeEnemyUnits, autoB60A9F5D_var);
        }

    }
    TriggerExecute(gt_CavernsAccessPointCaveLeft, true, false);
    TriggerExecute(gt_CavernsAccessPointCaveRight, true, false);
    Wait(5.0, c_timeAI);
    SoundPlayForPlayer(SoundLink("NydusWorm_Birth", 0), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
    CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 0.5, 1.0, 3.0);
    gf_CreateNydusWormCaverns(5.0, 5.0, true, false, "Roach", 2, "Hydralisk", 1, "Zergling", libLotv_gf_DifficultyValueInt2(4, 4, 4, 6), PointFromId(1262));
    Wait(0.75, c_timeAI);
    gf_CreateNydusWormCaverns(6.0, 6.0, true, false, "Zergling", 8, "Hydralisk", libLotv_gf_DifficultyValueInt2(1, 1, 1, 2), "Zergling", 4, PointFromId(1265));
    while (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_05_AMONS_FORCES, RegionFromId(67), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
        Wait(0.5, c_timeAI);
    }
    TriggerStop(gt_CavernsAccessPointCaveLeft);
    TriggerStop(gt_CavernsAccessPointCaveRight);
    TriggerExecute(gt_CavernsVictory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CavernsAccessPointBattle_Init () {
    gt_CavernsAccessPointBattle = TriggerCreate("gt_CavernsAccessPointBattle_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Caverns Access Point Cave Left
//--------------------------------------------------------------------------------------------------
bool gt_CavernsAccessPointCaveLeft_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto38851F9A_g;
    int auto38851F9A_u;
    unit auto38851F9A_var;
    unitgroup autoF39F4FDF_g;
    int autoF39F4FDF_u;
    unit autoF39F4FDF_var;
    unitgroup autoB242D41F_g;
    int autoB242D41F_u;
    unit autoB242D41F_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitIsAlive(UnitFromId(1263)) == true)) {
        libVCMI_gf_AttachReticleEffectAndTextTagOnUnit(libVCMI_ge_CampaginReticleType_ProtossMainObjective, libVCMI_ge_CampaginReticleSize_Large, StringExternal("Param/Value/C91E0568"), UnitFromId(1263), "Ref_Center");
        libHots_gf_StoreActorForUnit(UnitFromId(1263), 1, libNtve_gf_ActorLastCreated());
        libHots_gf_StoreTextTagForUnit(UnitFromId(1263), 1, TextTagLastCreated());
    }
    else {
        return true;
    }
    libNtve_gf_CreateUnitsAtPoint2(libLotv_gf_DifficultyValueInt2(12, 12, 12, 12), "Zergling", 0, gv_pLAYER_05_AMONS_FORCES, PointFromId(1108));
    auto38851F9A_g = UnitLastCreatedGroup();
    auto38851F9A_u = UnitGroupCount(auto38851F9A_g, c_unitCountAll);
    for (;; auto38851F9A_u -= 1) {
        auto38851F9A_var = UnitGroupUnitFromEnd(auto38851F9A_g, auto38851F9A_u);
        if (auto38851F9A_var == null) { break; }
        libNtve_gf_AICast(auto38851F9A_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(67))));
        UnitGroupAdd(gv_activeEnemyUnits, auto38851F9A_var);
    }
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        libNtve_gf_CreateUnitsAtPoint2(libLotv_gf_DifficultyValueInt2(0, 0, 1, 2), "Baneling", 0, gv_pLAYER_05_AMONS_FORCES, PointFromId(1108));
        autoF39F4FDF_g = UnitLastCreatedGroup();
        autoF39F4FDF_u = UnitGroupCount(autoF39F4FDF_g, c_unitCountAll);
        for (;; autoF39F4FDF_u -= 1) {
            autoF39F4FDF_var = UnitGroupUnitFromEnd(autoF39F4FDF_g, autoF39F4FDF_u);
            if (autoF39F4FDF_var == null) { break; }
            libNtve_gf_AICast(autoF39F4FDF_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(67))));
            UnitGroupAdd(gv_activeEnemyUnits, autoF39F4FDF_var);
        }
    }

    Wait(libLotv_gf_DifficultyValueFixed2(6.0, 6.0, 5.0, 4.0), c_timeAI);
    while ((UnitIsAlive(UnitFromId(1263)) == true)) {
        libNtve_gf_CreateUnitsAtPoint2(libLotv_gf_DifficultyValueInt2(6, 6, 6, 6), "Zergling", 0, gv_pLAYER_05_AMONS_FORCES, PointFromId(1108));
        autoB242D41F_g = UnitLastCreatedGroup();
        autoB242D41F_u = UnitGroupCount(autoB242D41F_g, c_unitCountAll);
        for (;; autoB242D41F_u -= 1) {
            autoB242D41F_var = UnitGroupUnitFromEnd(autoB242D41F_g, autoB242D41F_u);
            if (autoB242D41F_var == null) { break; }
            libNtve_gf_AICast(autoB242D41F_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(67))));
            UnitGroupAdd(gv_activeEnemyUnits, autoB242D41F_var);
        }
        Wait(libLotv_gf_DifficultyValueFixed2(6.0, 6.0, 5.0, 4.0), c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CavernsAccessPointCaveLeft_Init () {
    gt_CavernsAccessPointCaveLeft = TriggerCreate("gt_CavernsAccessPointCaveLeft_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Caverns Access Point Cave Right
//--------------------------------------------------------------------------------------------------
bool gt_CavernsAccessPointCaveRight_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_linkedRockTower;

    // Automatic Variable Declarations
    unitgroup auto962D16A5_g;
    int auto962D16A5_u;
    unit auto962D16A5_var;
    unitgroup auto5888224B_g;
    int auto5888224B_u;
    unit auto5888224B_var;
    unitgroup auto7E9AB3C3_g;
    int auto7E9AB3C3_u;
    unit auto7E9AB3C3_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitIsAlive(UnitFromId(1267)) == true)) {
        libVCMI_gf_AttachReticleEffectAndTextTagOnUnit(libVCMI_ge_CampaginReticleType_ProtossMainObjective, libVCMI_ge_CampaginReticleSize_Large, StringExternal("Param/Value/4839351C"), UnitFromId(1267), "Ref_Center");
        libHots_gf_StoreActorForUnit(UnitFromId(1267), 1, libNtve_gf_ActorLastCreated());
        libHots_gf_StoreTextTagForUnit(UnitFromId(1267), 1, TextTagLastCreated());
    }
    else {
        return true;
    }
    libNtve_gf_CreateUnitsAtPoint2(libLotv_gf_DifficultyValueInt2(12, 12, 12, 12), "Zergling", 0, gv_pLAYER_05_AMONS_FORCES, PointFromId(1109));
    auto962D16A5_g = UnitLastCreatedGroup();
    auto962D16A5_u = UnitGroupCount(auto962D16A5_g, c_unitCountAll);
    for (;; auto962D16A5_u -= 1) {
        auto962D16A5_var = UnitGroupUnitFromEnd(auto962D16A5_g, auto962D16A5_u);
        if (auto962D16A5_var == null) { break; }
        libNtve_gf_AICast(auto962D16A5_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(67))));
        UnitGroupAdd(gv_activeEnemyUnits, auto962D16A5_var);
    }
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        libNtve_gf_CreateUnitsAtPoint2(libLotv_gf_DifficultyValueInt2(0, 0, 1, 2), "Baneling", 0, gv_pLAYER_05_AMONS_FORCES, PointFromId(1109));
        auto5888224B_g = UnitLastCreatedGroup();
        auto5888224B_u = UnitGroupCount(auto5888224B_g, c_unitCountAll);
        for (;; auto5888224B_u -= 1) {
            auto5888224B_var = UnitGroupUnitFromEnd(auto5888224B_g, auto5888224B_u);
            if (auto5888224B_var == null) { break; }
            libNtve_gf_AICast(auto5888224B_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(67))));
            UnitGroupAdd(gv_activeEnemyUnits, auto5888224B_var);
        }
    }

    Wait(libLotv_gf_DifficultyValueFixed2(8.0, 8.0, 7.0, 6.0), c_timeAI);
    while ((UnitIsAlive(UnitFromId(1267)) == true)) {
        libNtve_gf_CreateUnitsAtPoint2(libLotv_gf_DifficultyValueInt2(6, 6, 6, 6), "Zergling", 0, gv_pLAYER_05_AMONS_FORCES, PointFromId(1109));
        auto7E9AB3C3_g = UnitLastCreatedGroup();
        auto7E9AB3C3_u = UnitGroupCount(auto7E9AB3C3_g, c_unitCountAll);
        for (;; auto7E9AB3C3_u -= 1) {
            auto7E9AB3C3_var = UnitGroupUnitFromEnd(auto7E9AB3C3_g, auto7E9AB3C3_u);
            if (auto7E9AB3C3_var == null) { break; }
            libNtve_gf_AICast(auto7E9AB3C3_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(67))));
            UnitGroupAdd(gv_activeEnemyUnits, auto7E9AB3C3_var);
        }
        Wait(libLotv_gf_DifficultyValueFixed2(6.0, 6.0, 5.0, 4.0), c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CavernsAccessPointCaveRight_Init () {
    gt_CavernsAccessPointCaveRight = TriggerCreate("gt_CavernsAccessPointCaveRight_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Caverns Access Point Cave Helpers
//--------------------------------------------------------------------------------------------------
bool gt_CavernsAccessPointCaveHelpers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_KillModel(libHots_gf_ActorForUnit(EventUnit(), 1));
    TextTagDestroy(libHots_gf_TextTagForUnit(EventUnit(), 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CavernsAccessPointCaveHelpers_Init () {
    gt_CavernsAccessPointCaveHelpers = TriggerCreate("gt_CavernsAccessPointCaveHelpers_Func");
    TriggerAddEventUnitDied(gt_CavernsAccessPointCaveHelpers, UnitRefFromUnit(UnitFromId(1263)));
    TriggerAddEventUnitDied(gt_CavernsAccessPointCaveHelpers, UnitRefFromUnit(UnitFromId(1267)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Caverns Rock Tower Behavior
//--------------------------------------------------------------------------------------------------
bool gt_CavernsRockTowerBehavior_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_KillModel(libHots_gf_ActorForUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), 1));
    TextTagDestroy(libHots_gf_TextTagForUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), 1));
    libNtve_gf_MakeUnitInvulnerable(EventPlayerEffectUsedUnit(c_effectUnitCaster), true);
    UnitSetState(EventPlayerEffectUsedUnit(c_effectUnitCaster), c_unitStateHighlightable, false);
    UnitSetState(EventPlayerEffectUsedUnit(c_effectUnitCaster), c_unitStateTargetable, false);
    UnitSetState(EventPlayerEffectUsedUnit(c_effectUnitCaster), c_unitStateSelectable, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CavernsRockTowerBehavior_Init () {
    gt_CavernsRockTowerBehavior = TriggerCreate("gt_CavernsRockTowerBehavior_Func");
    TriggerAddEventPlayerEffectUsed(gt_CavernsRockTowerBehavior, 0, "RockCrushSearch");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CampaignInitAI();
    libVCMI_gf_EnableVoidCampaignAIBehaviorForAllPlayers();
    AIToggleBulliesInRegion(gv_pLAYER_05_AMONS_FORCES, RegionEntireMap(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Resources
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveResources_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(gv_pLAYER_02_PROTOSS_NEUTRAL, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_02_PROTOSS_NEUTRAL, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_04_PROTOSS_ALLY, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_04_PROTOSS_ALLY, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_05_AMONS_FORCES, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_05_AMONS_FORCES, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveResources_Init () {
    gt_AIGiveResources = TriggerCreate("gt_AIGiveResources_Func");
    TriggerAddEventTimePeriodic(gt_AIGiveResources, 10.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stat - Vorazun Damage Taken
//--------------------------------------------------------------------------------------------------
bool gt_StatVorazunDamageTaken_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_citadelComplete == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_vorazun) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_vorazunDamageTaken += EventUnitDamageAmount();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatVorazunDamageTaken_Init () {
    gt_StatVorazunDamageTaken = TriggerCreate("gt_StatVorazunDamageTaken_Func");
    TriggerAddEventUnitDamaged(gt_StatVorazunDamageTaken, UnitRefFromVariable("gv_vorazun"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - Vorazun Damage Taken
//--------------------------------------------------------------------------------------------------
bool gt_AchievementVorazunDamageTaken_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVoiC_gf_CampaignAwardAchievement("Mastery_Aiur04", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementVorazunDamageTaken_Init () {
    gt_AchievementVorazunDamageTaken = TriggerCreate("gt_AchievementVorazunDamageTaken_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stat/Achievement - Reclaimed Army
//--------------------------------------------------------------------------------------------------
bool gt_StatAchievementReclaimedArmy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitTargetUnit()) == gv_pLAYER_05_AMONS_FORCES))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_karaxEnemiesReclaimed += 1;
    if ((libLotv_gf_DifficultyValueInt2(0, 1, 1, 1) == 1) && (gv_karaxEnemiesReclaimed >= 15) && (gv_reclaimAchievementGranted == false)) {
        gv_reclaimAchievementGranted = true;
        libVoiC_gf_CampaignAwardAchievement("PAiur04_3", gv_pLAYER_01_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatAchievementReclaimedArmy_Init () {
    gt_StatAchievementReclaimedArmy = TriggerCreate("gt_StatAchievementReclaimedArmy_Func");
    TriggerAddEventUnitAbility(gt_StatAchievementReclaimedArmy, null, AbilityCommand("Reclamation", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    libVCMI_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (TimerGetElapsed(gv_achievementSectionOneTimer) <= 480.0) && (TimerGetElapsed(gv_achievementSectionTwoTimer) <= 480.0) && (TimerGetElapsed(gv_achievementSectionThreeTimer) <= 480.0)) {
        libVoiC_gf_CampaignAwardAchievement("Anniversary_PAiur04", gv_pLAYER_01_USER);
    }

    libVoiC_gf_CampaignAwardAchievement("PAiur04_1", gv_pLAYER_01_USER);
    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/5C200D35"), FixedToText(gv_vorazunDamageTaken, 0));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/856A1D35"), IntToText(gv_karaxEnemiesReclaimed));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/ED109940"), IntToText(gv_unitsKilledByCloud));
    libVCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    libVCMI_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Citadel Power Structure - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCitadelPowerStructureCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateObjectiveCampaign("PAiur04Primary02");
    gv_objective_CitadelPowerStructure = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 2);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCitadelPowerStructureCreate_Init () {
    gt_ObjectiveCitadelPowerStructureCreate = TriggerCreate("gt_ObjectiveCitadelPowerStructureCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Citadel Power Structure - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCitadelPowerStructureComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveCitadelPowerStructureCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PAiur04Primary02", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCitadelPowerStructureComplete_Init () {
    gt_ObjectiveCitadelPowerStructureComplete = TriggerCreate("gt_ObjectiveCitadelPowerStructureComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Alarak and Vorazun Must Survive - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveAlarakandVorazunMustSurviveCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateObjectiveCampaign("PAiur04Primary03");
    gv_objectiveAlarakMustSurvive = ObjectiveLastCreated();
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveAlarakandVorazunMustSurviveCreate_Init () {
    gt_ObjectiveAlarakandVorazunMustSurviveCreate = TriggerCreate("gt_ObjectiveAlarakandVorazunMustSurviveCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Alarak and Vorazun Must Survive - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveAlarakandVorazunMustSurviveComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveAlarakandVorazunMustSurviveCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PAiur04Primary03", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveAlarakandVorazunMustSurviveComplete_Init () {
    gt_ObjectiveAlarakandVorazunMustSurviveComplete = TriggerCreate("gt_ObjectiveAlarakandVorazunMustSurviveComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Alarak and Vorazun Must Survive - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveAlarakandVorazunMustSurviveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveAlarakandVorazunMustSurviveCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PAiur04Primary03", libVoiC_ge_MissionObjectiveState_Failed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveAlarakandVorazunMustSurviveFailed_Init () {
    gt_ObjectiveAlarakandVorazunMustSurviveFailed = TriggerCreate("gt_ObjectiveAlarakandVorazunMustSurviveFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Assemble an Army - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveAssembleanArmyCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateObjectiveCampaign("PAiur04Primary01");
    ObjectiveSetPriority(ObjectiveLastCreated(), 3);
    gv_objective_AssembleArmy = ObjectiveLastCreated();
    libVCMI_gf_SetMissionObjectiveProgress("PAiur04Primary01", PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropSuppliesUsed));
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveAssembleanArmyCreate_Init () {
    gt_ObjectiveAssembleanArmyCreate = TriggerCreate("gt_ObjectiveAssembleanArmyCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Assemble an Army - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveAssembleanArmyComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveAssembleanArmyCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PAiur04Primary01", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveAssembleanArmyComplete_Init () {
    gt_ObjectiveAssembleanArmyComplete = TriggerCreate("gt_ObjectiveAssembleanArmyComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Temple Power Structure - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveTemplePowerStructureCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateObjectiveCampaign("PAiur04Primary04");
    ObjectiveSetPriority(ObjectiveLastCreated(), 2);
    gv_objective_TemplePowerStructure = ObjectiveLastCreated();
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveTemplePowerStructureCreate_Init () {
    gt_ObjectiveTemplePowerStructureCreate = TriggerCreate("gt_ObjectiveTemplePowerStructureCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Temple Power Structure - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveTemplePowerStructureComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveTemplePowerStructureCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PAiur04Primary04", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveTemplePowerStructureComplete_Init () {
    gt_ObjectiveTemplePowerStructureComplete = TriggerCreate("gt_ObjectiveTemplePowerStructureComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Karax and Fenix Must Survive - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKaraxandFenixMustSurviveCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateObjectiveCampaign("PAiur04Primary05");
    gv_objective_KaraxAndFenixMustSurvive = ObjectiveLastCreated();
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKaraxandFenixMustSurviveCreate_Init () {
    gt_ObjectiveKaraxandFenixMustSurviveCreate = TriggerCreate("gt_ObjectiveKaraxandFenixMustSurviveCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Karax and Fenix Must Survive - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKaraxandFenixMustSurviveComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveKaraxandFenixMustSurviveCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PAiur04Primary05", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKaraxandFenixMustSurviveComplete_Init () {
    gt_ObjectiveKaraxandFenixMustSurviveComplete = TriggerCreate("gt_ObjectiveKaraxandFenixMustSurviveComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Karax and Fenix Must Survive - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKaraxandFenixMustSurviveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveKaraxandFenixMustSurviveCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PAiur04Primary05", libVoiC_ge_MissionObjectiveState_Failed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKaraxandFenixMustSurviveFailed_Init () {
    gt_ObjectiveKaraxandFenixMustSurviveFailed = TriggerCreate("gt_ObjectiveKaraxandFenixMustSurviveFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Caverns Power Structure - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCavernsPowerStructureCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateObjectiveCampaign("PAiur04Primary06");
    gv_objectiveArtanisMustSurvive3 = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 2);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCavernsPowerStructureCreate_Init () {
    gt_ObjectiveCavernsPowerStructureCreate = TriggerCreate("gt_ObjectiveCavernsPowerStructureCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Caverns Power Structure - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCavernsPowerStructureComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveCavernsPowerStructureCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PAiur04Primary06", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCavernsPowerStructureComplete_Init () {
    gt_ObjectiveCavernsPowerStructureComplete = TriggerCreate("gt_ObjectiveCavernsPowerStructureComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Artanis Must Survive - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveArtanisMustSurviveCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateObjectiveCampaign("PAiur04Primary07");
    gv_objectiveArtanisMustSurvive = ObjectiveLastCreated();
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveArtanisMustSurviveCreate_Init () {
    gt_ObjectiveArtanisMustSurviveCreate = TriggerCreate("gt_ObjectiveArtanisMustSurviveCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Artanis Must Survive - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveArtanisMustSurviveComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveArtanisMustSurviveCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PAiur04Primary07", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveArtanisMustSurviveComplete_Init () {
    gt_ObjectiveArtanisMustSurviveComplete = TriggerCreate("gt_ObjectiveArtanisMustSurviveComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Artanis Must Survive - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveArtanisMustSurviveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveArtanisMustSurviveCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PAiur04Primary07", libVoiC_ge_MissionObjectiveState_Failed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveArtanisMustSurviveFailed_Init () {
    gt_ObjectiveArtanisMustSurviveFailed = TriggerCreate("gt_ObjectiveArtanisMustSurviveFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto1306E1F7_g;
    int auto1306E1F7_u;
    unit auto1306E1F7_var;
    unitgroup auto02959983_g;
    int auto02959983_u;
    unit auto02959983_var;
    unitgroup auto0408D594_g;
    int auto0408D594_u;
    unit auto0408D594_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, c_transitionDurationImmediate, true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    auto1306E1F7_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto1306E1F7_u = UnitGroupCount(auto1306E1F7_g, c_unitCountAll);
    for (;; auto1306E1F7_u -= 1) {
        auto1306E1F7_var = UnitGroupUnitFromEnd(auto1306E1F7_g, auto1306E1F7_u);
        if (auto1306E1F7_var == null) { break; }
        if ((libNtve_gf_UnitIsPaused(auto1306E1F7_var) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, auto1306E1F7_var);
            libNtve_gf_PauseUnit(auto1306E1F7_var, true);
        }

    }
    auto02959983_g = UnitGroup(null, gv_pLAYER_05_AMONS_FORCES, RegionFromId(100), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto02959983_u = UnitGroupCount(auto02959983_g, c_unitCountAll);
    for (;; auto02959983_u -= 1) {
        auto02959983_var = UnitGroupUnitFromEnd(auto02959983_g, auto02959983_u);
        if (auto02959983_var == null) { break; }
        UnitGroupAdd(gv_cinematicHiddenUnits, auto02959983_var);
        libNtve_gf_ShowHideUnit(auto02959983_var, false);
    }
    auto0408D594_g = UnitGroup(null, gv_pLAYER_05_AMONS_FORCES, RegionFromId(67), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0408D594_u = UnitGroupCount(auto0408D594_g, c_unitCountAll);
    for (;; auto0408D594_u -= 1) {
        auto0408D594_var = UnitGroupUnitFromEnd(auto0408D594_g, auto0408D594_u);
        if (auto0408D594_var == null) { break; }
        UnitGroupAdd(gv_cinematicHiddenUnits, auto0408D594_var);
        libNtve_gf_ShowHideUnit(auto0408D594_var, false);
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "AlarakChampion", 0, gv_pLAYER_01_USER, PointFromId(732));
    gv_alarak = UnitLastCreated();
    UnitSetState(gv_alarak, c_unitStateFidget, false);
    UnitBehaviorAdd(gv_alarak, "AlarakKnockbackTriggerOverride", gv_alarak, 1);
    libNtve_gf_CreateUnitsAtPoint2(1, "VorazunChampion", 0, gv_pLAYER_01_USER, PointFromId(714));
    gv_vorazun = UnitLastCreated();
    UnitSetState(gv_vorazun, c_unitStateFidget, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(3188), 0.0, -1, 10, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PAiur04_Music_Intro", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    gf_EnvironmentCitadeloftheExecutor();
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur04|Line00133", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(161), 0.0, -1, 10, true);
    gf_EnvironmentAncientTempleGrounds();
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur04|Line00134", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(3154), 0.0, -1, 10, true);
    gf_EnvironmentXelNagaCaverns();
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur04|Line00135", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1408), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(3311), 6.0, -1, 10, true);
    gf_EnvironmentCitadeloftheExecutor();
    UnitIssueOrder(gv_alarak, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(42)), c_orderQueueReplace);
    UnitIssueOrder(gv_vorazun, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(19)), c_orderQueueReplace);
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    UIShowTextCrawl(PlayerGroupAll(), StringExternal("Param/Value/37EFB928"), StringExternal("Param/Value/7CD26FB0"), 8.0, SoundLink("TextCrawlType", -1), SoundLink("UI_ObjectiveText", -1));
    Wait(5.0, c_timeGame);
    UIHideTextCrawl(PlayerGroupAll());
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur04|Line00281", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(3332), 8.0, -1, 10.0, true);
    libVCMI_gf_SendTransmissionCampaign(gv_vorazun, "pMission_Aiur04|Line00282", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(gv_alarak, "pMission_Aiur04|Line00199", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto151D2EBA_g;
    int auto151D2EBA_u;
    unit auto151D2EBA_var;
    unitgroup auto316211AF_g;
    int auto316211AF_u;
    unit auto316211AF_var;
    unitgroup auto41F2FDFB_g;
    int auto41F2FDFB_u;
    unit auto41F2FDFB_var;
    unitgroup autoF65E851C_g;
    int autoF65E851C_u;
    unit autoF65E851C_var;
    unitgroup auto3676F93A_g;
    int auto3676F93A_u;
    unit auto3676F93A_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PAiur04_Musc_Section1", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    auto151D2EBA_g = gv_cinematicTempUnits;
    auto151D2EBA_u = UnitGroupCount(auto151D2EBA_g, c_unitCountAll);
    for (;; auto151D2EBA_u -= 1) {
        auto151D2EBA_var = UnitGroupUnitFromEnd(auto151D2EBA_g, auto151D2EBA_u);
        if (auto151D2EBA_var == null) { break; }
        UnitRemove(auto151D2EBA_var);
    }
    auto316211AF_g = gv_cinematicHiddenUnits;
    auto316211AF_u = UnitGroupCount(auto316211AF_g, c_unitCountAll);
    for (;; auto316211AF_u -= 1) {
        auto316211AF_var = UnitGroupUnitFromEnd(auto316211AF_g, auto316211AF_u);
        if (auto316211AF_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto316211AF_var, true);
    }
    auto41F2FDFB_g = gv_cinematicPausedUnits;
    auto41F2FDFB_u = UnitGroupCount(auto41F2FDFB_g, c_unitCountAll);
    for (;; auto41F2FDFB_u -= 1) {
        auto41F2FDFB_var = UnitGroupUnitFromEnd(auto41F2FDFB_g, auto41F2FDFB_u);
        if (auto41F2FDFB_var == null) { break; }
        libNtve_gf_PauseUnit(auto41F2FDFB_var, false);
    }
    autoF65E851C_g = UnitGroup(null, c_playerAny, RegionFromId(98), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF65E851C_u = UnitGroupCount(autoF65E851C_g, c_unitCountAll);
    for (;; autoF65E851C_u -= 1) {
        autoF65E851C_var = UnitGroupUnitFromEnd(autoF65E851C_g, autoF65E851C_u);
        if (autoF65E851C_var == null) { break; }
        libNtve_gf_PauseUnit(autoF65E851C_var, true);
        libNtve_gf_ShowHideUnit(autoF65E851C_var, false);
    }
    auto3676F93A_g = UnitGroup(null, c_playerAny, RegionFromId(99), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3676F93A_u = UnitGroupCount(auto3676F93A_g, c_unitCountAll);
    for (;; auto3676F93A_u -= 1) {
        auto3676F93A_var = UnitGroupUnitFromEnd(auto3676F93A_g, auto3676F93A_u);
        if (auto3676F93A_var == null) { break; }
        libNtve_gf_PauseUnit(auto3676F93A_var, true);
        libNtve_gf_ShowHideUnit(auto3676F93A_var, false);
    }
    if ((gv_cinematicCompleted == false)) {
        UnitIssueOrder(gv_alarak, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitSetPosition(gv_alarak, PointFromId(42), false);
        UnitSetFacing(gv_alarak, PointGetFacing(PointFromId(42)), 0.0);
        UnitIssueOrder(gv_vorazun, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitSetPosition(gv_vorazun, PointFromId(19), false);
        UnitSetFacing(gv_vorazun, PointGetFacing(PointFromId(19)), 0.0);
    }

    UnitSetState(gv_alarak, c_unitStateFidget, true);
    UnitSetState(gv_vorazun, c_unitStateFidget, true);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    RegionPlayableMapSet(RegionFromId(10));
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(9), true, false);
    libNtve_gf_SetAllianceOneWay(gv_pLAYER_02_PROTOSS_NEUTRAL, gv_pLAYER_05_AMONS_FORCES, libNtve_ge_AllianceSetting_Neutral);
    if ((gv_currentEnvironment != 1)) {
        gf_EnvironmentCitadeloftheExecutor();
    }

    if ((gv_cinematicCompleted == false)) {
        UIHideTextCrawl(PlayerGroupAll());
        libVCMI_gf_HidePlanetPortrait();
    }

    TriggerExecute(gt_StartAI, true, false);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), lv_fadeDuration, -1, 10, false);
        CameraPan(gv_pLAYER_01_USER, PointFromId(477), lv_fadeDuration, -1, 10.0, false);
        libVCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, true);
    }
    else {
        lv_fadeDuration = 1.0;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
        libVCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, false);
        libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PointFromId(477), lv_fadeDuration);
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Citadel -> Temple - Q
//--------------------------------------------------------------------------------------------------
bool gt_MidCitadelTempleQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_MidCitadelTempleSetup, true, true);
    TriggerExecute(gt_MidCitadelTempleCinematic, true, true);
    TriggerExecute(gt_MidCitadelTempleCinematicEnd, true, true);
    TriggerExecute(gt_MidCitadelTempleCleanup, true, true);
    TriggerExecute(gt_TempleStartingSequence, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCitadelTempleQ_Init () {
    gt_MidCitadelTempleQ = TriggerCreate("gt_MidCitadelTempleQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Citadel -> Temple - Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidCitadelTempleSetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    unitgroup auto88DB2267_g;
    int auto88DB2267_u;
    unit auto88DB2267_var;
    unitgroup auto232D96B7_g;
    int auto232D96B7_u;
    unit auto232D96B7_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CameraLockInput(gv_pLAYER_01_USER, false);
    TriggerStop(gt_DestructionWavePan);
    TriggerStop(gt_ShadowDashPing);
    TriggerStop(gt_FinalGatePan);
    CinematicFade(false, 1.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libVCMI_gf_CinematicModeCampaign(true, c_transitionDurationImmediate, true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    RegionPlayableMapSet(RegionFromId(127));
    UnitClearSelection(gv_pLAYER_01_USER);
    TriggerExecute(gt_CitadelCleanup, true, false);
    CameraShakeStop(gv_pLAYER_01_USER);
    ObjectiveShow(gv_objective_CitadelPowerStructure, PlayerGroupAll(), false);
    ObjectiveShow(gv_objectiveAlarakMustSurvive, PlayerGroupAll(), false);
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    auto88DB2267_g = gv_cinematicHiddenUnits;
    auto88DB2267_u = UnitGroupCount(auto88DB2267_g, c_unitCountAll);
    for (;; auto88DB2267_u -= 1) {
        auto88DB2267_var = UnitGroupUnitFromEnd(auto88DB2267_g, auto88DB2267_u);
        if (auto88DB2267_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto88DB2267_var, false);
    }
    UnitRemove(UnitFromId(4405));
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(35)), c_animNameDefault, "Stand A", c_animFlagPlayForever, c_animTimeDefault);
    UnitSetPropertyFixed(UnitFromId(1251), c_unitPropHeight, 11.0);
    UnitSetState(gv_vorazun, c_unitStateFidget, false);
    UnitSetPosition(gv_vorazun, PointFromId(1192), false);
    UnitIssueOrder(gv_vorazun, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_vorazun, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(4404)), c_orderQueueAddToEnd);
    if ((gv_alarakChanneling == false)) {
        UnitIssueOrder(gv_alarak, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitSetState(gv_alarak, c_unitStateFidget, false);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_alarak), c_animNameDefault, "Hover", c_animFlagPlayForever, c_animTimeDefault);
    }

    UnitSetPosition(gv_alarak, PointFromId(4404), false);
    UnitSetFacing(gv_alarak, 135.0, 0.0);
    if ((UnitIsAlive(gv_alarakChannelEffect) == false)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "VoidRiftUnselectable", c_unitCreateIgnorePlacement, 0, UnitGetPosition(gv_alarak));
        gv_alarakChannelEffect = UnitLastCreated();
    }

    auto232D96B7_g = UnitGroup(null, c_playerAny, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto232D96B7_u = UnitGroupCount(auto232D96B7_g, c_unitCountAll);
    for (;; auto232D96B7_u -= 1) {
        auto232D96B7_var = UnitGroupUnitFromEnd(auto232D96B7_g, auto232D96B7_u);
        if (auto232D96B7_var == null) { break; }
        if ((libNtve_gf_UnitIsHidden(auto232D96B7_var) == true)) {
            libNtve_gf_ShowHideUnit(auto232D96B7_var, true);
        }

        if ((libNtve_gf_UnitIsPaused(auto232D96B7_var) == true)) {
            libNtve_gf_PauseUnit(auto232D96B7_var, false);
        }

    }
    libNtve_gf_CreateUnitsAtPoint2(1, "KaraxChampion", 0, gv_pLAYER_01_USER, PointFromId(903));
    gv_karax = UnitLastCreated();
    UnitSetState(gv_karax, c_unitStateFidget, false);
    libNtve_gf_CreateUnitsAtPoint2(1, "FenixChampion", 0, gv_pLAYER_01_USER, PointFromId(284));
    gv_fenix = UnitLastCreated();
    UnitSetState(gv_fenix, c_unitStateFidget, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCitadelTempleSetup_Init () {
    gt_MidCitadelTempleSetup = TriggerCreate("gt_MidCitadelTempleSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Citadel -> Temple - Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidCitadelTempleCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto4FC94F91_n = 5;
    int auto4FC94F91_i;
    const int auto838941CE_n = 5;
    int auto838941CE_i;
    const int auto8B202113_n = 10;
    int auto8B202113_i;
    unitgroup autoAC998BEF_g;
    int autoAC998BEF_u;
    unit autoAC998BEF_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1040), 0.0, -1, 10, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PAiur04_Music_MidTransition", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundPlayForPlayer(SoundLink("PAiur04_Music_MidTransitionAlarakStinger", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gv_midStinger = SoundLastPlayed();
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(374), 2.5, -1, 10, true);
    UnitIssueOrder(gv_vorazun, OrderTargetingPoint(AbilityCommand("move", 4), RegionGetCenter(RegionFromId(96))), c_orderQueueReplace);
    UnitCreate(1, "BeamCaster", c_unitCreateIgnorePlacement, 0, PointWithOffsetPolar(UnitGetPosition(gv_alarak), 0.65, 115.0), UnitGetFacing(gv_alarak));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitSetHeight(UnitLastCreated(), 2.1, 0.0);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("BeamCaster2", 0), UnitFromId(1251)), c_orderQueueReplace);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_alarak), c_animNameDefault, "Hover Superior", c_animFlagPlayForever, c_animTimeDefault);
    SoundPlayForPlayer(SoundLink("PAiur04_Alarak_Destroys_PowerPoint", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gv_midCrystalSound = SoundLastPlayed();
    for (auto4FC94F91_i = 1; auto4FC94F91_i <= auto4FC94F91_n; auto4FC94F91_i += 1) {
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Protoss, RegionRandomPoint(RegionFromId(96)));
        Wait(0.1, c_timeGame);
    }
    SoundPlayForPlayer(SoundLink("PAiur04_GateExplosion", 0), c_maxPlayers, PlayerGroupAll(), 80.0, 0.0);
    for (auto838941CE_i = 1; auto838941CE_i <= auto838941CE_n; auto838941CE_i += 1) {
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Protoss, RegionRandomPoint(RegionFromId(96)));
        Wait(0.1, c_timeGame);
    }
    UnitKill(UnitFromId(4028));
    for (auto8B202113_i = 1; auto8B202113_i <= auto8B202113_n; auto8B202113_i += 1) {
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Protoss, RegionRandomPoint(RegionFromId(96)));
        Wait(0.1, c_timeGame);
    }
    Wait(1.0, c_timeGame);
    UnitKill(UnitLastCreated());
    UnitKill(gv_alarakChannelEffect);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_alarak), c_animNameDefault);
    TriggerExecute(gt_MidCitadelCrystalExplosion, true, false);
    Wait(4.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2436), (SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Aiur04|Line00302", true), c_soundIndexAny)) - 1), -1, 10, true);
    libVCMI_gf_SendTransmissionCampaign(gv_vorazun, "pMission_Aiur04|Line00302", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    UnitBehaviorRemove(gv_alarak, "GenericStunNoMovement", 1);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(451), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1191), 10.0, -1, 10, true);
    UnitIssueOrder(gv_alarak, OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_vorazun)), c_orderQueueReplace);
    libVCMI_gf_SendTransmissionCampaign(gv_alarak, "pMission_Aiur04|Line00303", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(0.5, c_timeGame);
    UnitIssueOrder(gv_vorazun, OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_alarak)), c_orderQueueReplace);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(gv_vorazun, "pMission_Aiur04|Line00142", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CinematicFade(false, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    gf_EnvironmentAncientTempleGrounds();
    autoAC998BEF_g = UnitGroup(null, gv_pLAYER_05_AMONS_FORCES, RegionFromId(100), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoAC998BEF_u = UnitGroupCount(autoAC998BEF_g, c_unitCountAll);
    for (;; autoAC998BEF_u -= 1) {
        autoAC998BEF_var = UnitGroupUnitFromEnd(autoAC998BEF_g, autoAC998BEF_u);
        if (autoAC998BEF_var == null) { break; }
        UnitGroupAdd(gv_cinematicHiddenUnits, autoAC998BEF_var);
        libNtve_gf_ShowHideUnit(autoAC998BEF_var, false);
    }
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(752), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(911), 5.0, -1, 10, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    UIShowTextCrawl(PlayerGroupAll(), StringExternal("Param/Value/9D1081B9"), StringExternal("Param/Value/9E9AF8AB"), 8.0, SoundLink("TextCrawlType", -1), SoundLink("UI_ObjectiveText", -1));
    Wait(5.0, c_timeGame);
    UIHideTextCrawl(PlayerGroupAll());
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur04|Line00304", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(4.0, c_timeReal);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CreateUnitsAtPoint2(1, "HybridBehemoth", 0, gv_pLAYER_05_AMONS_FORCES, PointFromId(1892));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1889)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "HybridDominatorVoid", 0, gv_pLAYER_05_AMONS_FORCES, PointFromId(1893));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1890)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "HybridDominatorVoid", 0, gv_pLAYER_05_AMONS_FORCES, PointFromId(1894));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1891)), c_orderQueueReplace);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(967), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1895), 10.0, -1, 10, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(gv_fenix, "pMission_Aiur04|Line00305", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(gv_karax, "pMission_Aiur04|Line00306", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(3333), 0.0, -1, 10, true);
    UnitIssueOrder(gv_karax, OrderTargetingUnit(AbilityCommand("move", 4), gv_fenix), c_orderQueueReplace);
    libVCMI_gf_SendTransmissionCampaign(gv_karax, "pMission_Aiur04|Line00307", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(0.5, c_timeGame);
    UnitIssueOrder(gv_fenix, OrderTargetingUnit(AbilityCommand("move", 4), gv_karax), c_orderQueueReplace);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(gv_fenix, "pMission_Aiur04|Line00308", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCitadelTempleCinematic_Init () {
    gt_MidCitadelTempleCinematic = TriggerCreate("gt_MidCitadelTempleCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Citadel -> Temple - Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MidCitadelTempleCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCitadelTempleCinematicEnd_Init () {
    gt_MidCitadelTempleCinematicEnd = TriggerCreate("gt_MidCitadelTempleCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Citadel -> Temple - Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidCitadelTempleCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto88901A4B_g;
    int auto88901A4B_u;
    unit auto88901A4B_var;
    unitgroup auto28A8742B_g;
    int auto28A8742B_u;
    unit auto28A8742B_var;
    unitgroup autoDAD07278_g;
    int autoDAD07278_u;
    unit autoDAD07278_var;
    unitgroup autoCBEF8061_g;
    int autoCBEF8061_u;
    unit autoCBEF8061_var;
    unitgroup auto71FF639B_g;
    int auto71FF639B_u;
    unit auto71FF639B_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_MidCitadelCrystalExplosion);
    SoundStop(gv_midStinger, true);
    SoundStop(gv_midCrystalSound, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PAiur04_Music_Section2", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    CameraShakeStop(gv_pLAYER_01_USER);
    auto88901A4B_g = gv_cinematicTempUnits;
    auto88901A4B_u = UnitGroupCount(auto88901A4B_g, c_unitCountAll);
    for (;; auto88901A4B_u -= 1) {
        auto88901A4B_var = UnitGroupUnitFromEnd(auto88901A4B_g, auto88901A4B_u);
        if (auto88901A4B_var == null) { break; }
        UnitRemove(auto88901A4B_var);
    }
    auto28A8742B_g = gv_cinematicHiddenUnits;
    auto28A8742B_u = UnitGroupCount(auto28A8742B_g, c_unitCountAll);
    for (;; auto28A8742B_u -= 1) {
        auto28A8742B_var = UnitGroupUnitFromEnd(auto28A8742B_g, auto28A8742B_u);
        if (auto28A8742B_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto28A8742B_var, true);
    }
    autoDAD07278_g = gv_cinematicPausedUnits;
    autoDAD07278_u = UnitGroupCount(autoDAD07278_g, c_unitCountAll);
    for (;; autoDAD07278_u -= 1) {
        autoDAD07278_var = UnitGroupUnitFromEnd(autoDAD07278_g, autoDAD07278_u);
        if (autoDAD07278_var == null) { break; }
        libNtve_gf_PauseUnit(autoDAD07278_var, false);
    }
    autoCBEF8061_g = gv_activePlayerUnits;
    autoCBEF8061_u = UnitGroupCount(autoCBEF8061_g, c_unitCountAll);
    for (;; autoCBEF8061_u -= 1) {
        autoCBEF8061_var = UnitGroupUnitFromEnd(autoCBEF8061_g, autoCBEF8061_u);
        if (autoCBEF8061_var == null) { break; }
        UnitRemove(autoCBEF8061_var);
    }
    auto71FF639B_g = UnitGroup(null, c_playerAny, RegionFromId(99), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto71FF639B_u = UnitGroupCount(auto71FF639B_g, c_unitCountAll);
    for (;; auto71FF639B_u -= 1) {
        auto71FF639B_var = UnitGroupUnitFromEnd(auto71FF639B_g, auto71FF639B_u);
        if (auto71FF639B_var == null) { break; }
        libNtve_gf_PauseUnit(auto71FF639B_var, true);
        libNtve_gf_ShowHideUnit(auto71FF639B_var, false);
    }
    UnitSetState(gv_karax, c_unitStateFidget, true);
    UnitSetState(gv_fenix, c_unitStateFidget, true);
    UnitIssueOrder(gv_karax, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(2435)), c_orderQueueReplace);
    UnitIssueOrder(gv_fenix, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(2435)), c_orderQueueReplace);
    CameraShakeStop(gv_pLAYER_01_USER);
    RegionPlayableMapSet(RegionFromId(1));
    if ((gv_currentEnvironment != 2)) {
        gf_EnvironmentAncientTempleGrounds();
    }

    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    UIHideTextCrawl(PlayerGroupAll());
    libVCUI_gf_SetHeroPanelUnit(1, gv_karax);
    libVCUI_gf_SetHeroPanelUnit(2, gv_fenix);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
        VisRevealArea(gv_pLAYER_01_USER, RegionFromId(2), lv_fadeDuration, false);
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), lv_fadeDuration, -1, 10, false);
        CameraPan(gv_pLAYER_01_USER, CameraInfoGetTarget(CameraInfoFromId(3498)), lv_fadeDuration, -1, 10.0, false);
        libVCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, true);
    }
    else {
        lv_fadeDuration = 1.0;
        VisRevealArea(gv_pLAYER_01_USER, RegionFromId(2), lv_fadeDuration, false);
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
        libVCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, false);
        libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(3498)), lv_fadeDuration);
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCitadelTempleCleanup_Init () {
    gt_MidCitadelTempleCleanup = TriggerCreate("gt_MidCitadelTempleCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Citadel - Crystal Explosion
//--------------------------------------------------------------------------------------------------
bool gt_MidCitadelCrystalExplosion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraShake(gv_pLAYER_01_USER, "Heavy", "Earthquake", 0.0, 1.0, 3.0);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(756)), c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    SoundPlayForPlayer(SoundLink("Aiur_PowerPoint_Death", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(0.5, c_timeGame);
    Wait(9.5, c_timeGame);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(756)), c_animNameDefault, "Dead", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCitadelCrystalExplosion_Init () {
    gt_MidCitadelCrystalExplosion = TriggerCreate("gt_MidCitadelCrystalExplosion_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Temple -> Caverns - Q
//--------------------------------------------------------------------------------------------------
bool gt_MidTempleCavernsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_MidTempleCavernsSetup, true, true);
    TriggerExecute(gt_MidTempleCavernsCinematic, true, true);
    TriggerExecute(gt_MidTempleCavernsCinematicEnd, true, true);
    TriggerExecute(gt_MidTempleCavernsCleanup, true, true);
    TriggerExecute(gt_CavernsStartingSequence, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidTempleCavernsQ_Init () {
    gt_MidTempleCavernsQ = TriggerCreate("gt_MidTempleCavernsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Temple -> Caverns - Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidTempleCavernsSetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    unitgroup auto3D1C464D_g;
    int auto3D1C464D_u;
    unit auto3D1C464D_var;
    unitgroup auto554130F8_g;
    int auto554130F8_u;
    unit auto554130F8_var;
    unitgroup auto9B0D6331_g;
    int auto9B0D6331_u;
    unit auto9B0D6331_var;
    unitgroup autoAF4BF258_g;
    int autoAF4BF258_u;
    unit autoAF4BF258_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CameraLockInput(gv_pLAYER_01_USER, false);
    TriggerStop(gt_DestructionWavePan);
    TriggerStop(gt_ShadowDashPing);
    TriggerStop(gt_FinalGatePan);
    TriggerStop(gt_ReclamationPan);
    CinematicFade(false, 1.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libVCMI_gf_CinematicModeCampaign(true, c_transitionDurationImmediate, true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    RegionPlayableMapSet(RegionFromId(127));
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitRemove(gv_alarak);
    UnitRemove(gv_vorazun);
    TriggerExecute(gt_CitadelCleanup, true, false);
    TriggerExecute(gt_TempleCleanup, true, false);
    ObjectiveShow(gv_objective_AssembleArmy, PlayerGroupAll(), false);
    ObjectiveShow(gv_objective_TemplePowerStructure, PlayerGroupAll(), false);
    ObjectiveShow(gv_objective_KaraxAndFenixMustSurvive, PlayerGroupAll(), false);
    CameraShakeStop(gv_pLAYER_01_USER);
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    auto3D1C464D_g = UnitGroup("PathingBlocker16x16Diagonal", 0, RegionFromId(108), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto3D1C464D_u = UnitGroupCount(auto3D1C464D_g, c_unitCountAll);
    for (;; auto3D1C464D_u -= 1) {
        auto3D1C464D_var = UnitGroupUnitFromEnd(auto3D1C464D_g, auto3D1C464D_u);
        if (auto3D1C464D_var == null) { break; }
        UnitRemove(auto3D1C464D_var);
    }
    ActorSend(ActorFromDoodad(DoodadFromId(264)), "SetOpacity");
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(3)), c_animNameDefault, "Stand B", c_animFlagPlayForever, c_animTimeDefault);
    if ((gv_currentEnvironment != 2)) {
        gf_EnvironmentAncientTempleGrounds();
    }

    libNtve_gf_PauseUnit(UnitFromId(201), false);
    libNtve_gf_ShowHideUnit(UnitFromId(201), true);
    UnitSetPropertyFixed(UnitFromId(201), c_unitPropHeight, 12.0);
    auto554130F8_g = gv_activePlayerUnits;
    auto554130F8_u = UnitGroupCount(auto554130F8_g, c_unitCountAll);
    for (;; auto554130F8_u -= 1) {
        auto554130F8_var = UnitGroupUnitFromEnd(auto554130F8_g, auto554130F8_u);
        if (auto554130F8_var == null) { break; }
        UnitSetPropertyFixed(auto554130F8_var, c_unitPropShieldsPercent, 100.0);
        if ((auto554130F8_var != gv_karax) && (auto554130F8_var != gv_fenix)) {
            UnitIssueOrder(auto554130F8_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            UnitSetPosition(auto554130F8_var, RegionRandomPoint(RegionFromId(128)), false);
            libNtve_gf_MakeUnitFacePoint(auto554130F8_var, PointFromId(191), 0.0);
        }

    }
    if ((UnitIsAlive(gv_karax) == false)) {
        libNtve_gf_CreateUnitsAtPoint2(1, "KaraxChampion", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(41));
        gv_karax = UnitLastCreated();
        UnitGroupAdd(gv_cinematicTempUnits, gv_karax);
    }
    else {
        UnitSetPosition(gv_karax, PointFromId(41), false);
        UnitIssueOrder(gv_karax, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitIssueOrder(gv_karax, OrderTargetingUnit(AbilityCommand("move", 4), gv_fenix), c_orderQueueAddToEnd);
        UnitSetPropertyFixed(gv_karax, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(gv_karax, c_unitPropEnergyPercent, 100.0);
    }
    UnitSetState(gv_karax, c_unitStateFidget, false);
    if ((UnitIsAlive(gv_fenix) == false)) {
        libNtve_gf_CreateUnitsAtPoint2(1, "FenixChampion", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(45));
        gv_fenix = UnitLastCreated();
        UnitGroupAdd(gv_cinematicTempUnits, gv_fenix);
    }
    else {
        UnitSetPosition(gv_fenix, PointFromId(45), false);
        UnitIssueOrder(gv_fenix, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitIssueOrder(gv_fenix, OrderTargetingUnit(AbilityCommand("move", 4), gv_karax), c_orderQueueAddToEnd);
        UnitSetPropertyFixed(gv_fenix, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(gv_fenix, c_unitPropEnergyPercent, 100.0);
    }
    UnitSetState(gv_fenix, c_unitStateFidget, false);
    ActorSend(ActorFromDoodad(DoodadFromId(1463)), "SetOpacity 1.000000");
    ActorSend(ActorFromDoodad(DoodadFromId(58)), "SetOpacity 1.000000");
    libNtve_gf_CreateUnitsAtPoint2(1, "ArtanisVoid", 0, gv_pLAYER_01_USER, PointFromId(57));
    gv_artanis = UnitLastCreated();
    libVCUI_gf_SetHeroPanelUnit(1, gv_artanis);
    libVCUI_gf_SetHeroPanelUnit(2, null);
    UnitSetState(gv_artanis, c_unitStateFidget, false);
    auto9B0D6331_g = UnitGroup(null, c_playerAny, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto9B0D6331_u = UnitGroupCount(auto9B0D6331_g, c_unitCountAll);
    for (;; auto9B0D6331_u -= 1) {
        auto9B0D6331_var = UnitGroupUnitFromEnd(auto9B0D6331_g, auto9B0D6331_u);
        if (auto9B0D6331_var == null) { break; }
        if ((libNtve_gf_UnitIsHidden(auto9B0D6331_var) == true) && (UnitGroupHasUnit(gv_cavernsAntechamberEnemies, auto9B0D6331_var) == false) && (UnitGroupHasUnit(gv_cavernsAccessPointEnemies, auto9B0D6331_var) == false)) {
            libNtve_gf_ShowHideUnit(auto9B0D6331_var, true);
        }

        if ((libNtve_gf_UnitIsPaused(auto9B0D6331_var) == true) && (UnitGroupHasUnit(gv_cavernsAntechamberEnemies, auto9B0D6331_var) == false) && (UnitGroupHasUnit(gv_cavernsAccessPointEnemies, auto9B0D6331_var) == false)) {
            libNtve_gf_PauseUnit(auto9B0D6331_var, false);
        }

    }
    libNtve_gf_CreateUnitsAtPoint2(1, "ZealotAiur", 0, gv_pLAYER_01_USER, PointFromId(2437));
    libNtve_gf_CreateUnitsAtPoint2(1, "ZealotAiur", 0, gv_pLAYER_01_USER, PointFromId(2438));
    libNtve_gf_CreateUnitsAtPoint2(1, "ZealotAiur", 0, gv_pLAYER_01_USER, PointFromId(2439));
    libNtve_gf_CreateUnitsAtPoint2(1, "ZealotAiur", 0, gv_pLAYER_01_USER, PointFromId(2440));
    libNtve_gf_CreateUnitsAtPoint2(1, "ZealotAiur", 0, gv_pLAYER_01_USER, PointFromId(2441));
    libNtve_gf_CreateUnitsAtPoint2(1, "ZealotAiur", 0, gv_pLAYER_01_USER, PointFromId(2442));
    autoAF4BF258_g = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(32), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoAF4BF258_u = UnitGroupCount(autoAF4BF258_g, c_unitCountAll);
    for (;; autoAF4BF258_u -= 1) {
        autoAF4BF258_var = UnitGroupUnitFromEnd(autoAF4BF258_g, autoAF4BF258_u);
        if (autoAF4BF258_var == null) { break; }
        UnitIssueOrder(autoAF4BF258_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidTempleCavernsSetup_Init () {
    gt_MidTempleCavernsSetup = TriggerCreate("gt_MidTempleCavernsSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Temple -> Caverns - Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidTempleCavernsCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto54C3C62E_ae = 5;
    const int auto54C3C62E_ai = 2;
    unitgroup autoA8C15CC1_g;
    int autoA8C15CC1_u;
    unit autoA8C15CC1_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(195), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(425), (SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Aiur04|Line00326", true), c_soundIndexAny)) + 1), -1, 10, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libVCMI_gf_SendTransmissionCampaign(gv_karax, "pMission_Aiur04|Line00326", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    UnitIssueOrder(gv_karax, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(191)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(535), 3.0, -1, 10, true);
    UnitIssueOrder(gv_fenix, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(191)), c_orderQueueReplace);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_karax), c_animNameDefault, "Cover Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(1.0, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_karax), c_animNameDefault, "Spell A", c_animFlagPlayForever, c_animTimeDefault);
    UnitCreate(1, "BeamCaster", c_unitCreateIgnorePlacement, 0, PointWithOffsetPolar(UnitGetPosition(gv_karax), 1.0, 80.0), UnitGetFacing(gv_karax));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropHeight, 0.5);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("BeamCaster8", 0), UnitFromId(201)), c_orderQueueReplace);
    SoundPlayForPlayer(SoundLink("PAiur04_Karax_PowerPoint_KillShot", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gv_midCrystalSound = SoundLastPlayed();
    Wait(0.5, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_karax, "AnimSetPausedAll");
    Wait(2.5, c_timeGame);
    UnitKill(UnitLastCreated());
    gv_templeCrystalBroken = true;
    GameSetLighting("Aiur4Temple", 3.0);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PAiur04_Music_MidTransitionDark", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 100.0, 2.0);
    ActorSend(ActorFromDoodad(DoodadFromId(1464)), "SetOpacity 1.000000 2.000000");
    TriggerExecute(gt_MidTempleCrystalExplosion, true, false);
    libNtve_gf_SendActorMessageToUnit(gv_karax, "AnimSetPausedAll 0");
    Wait(0.5, c_timeGame);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_karax), c_animNameDefault);
    Wait(3.5, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(425), 4.0, -1, 10, true);
    libVCMI_gf_SendTransmissionCampaign(gv_karax, "pMission_Aiur04|Line00327", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    UnitIssueOrder(gv_karax, OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_fenix)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    UnitIssueOrder(gv_fenix, OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_karax)), c_orderQueueReplace);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(gv_karax, "pMission_Aiur04|Line00264", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CinematicFade(false, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    gf_EnvironmentXelNagaCaverns();
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1196), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(3500), 5.0, -1, 10, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    UIShowTextCrawl(PlayerGroupAll(), StringExternal("Param/Value/E4EF3779"), StringExternal("Param/Value/49B58E8D"), 8.0, SoundLink("TextCrawlType", -1), SoundLink("UI_ObjectiveText", -1));
    Wait(5.0, c_timeReal);
    UIHideTextCrawl(PlayerGroupAll());
    libVCMI_gf_SendTransmissionCampaign(gv_karax, "pMission_Aiur04|Line00265", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(4.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(34), 0.0, -1, 10, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(gv_artanis, "pMission_Aiur04|Line00266", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(3.0, c_timeGame);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(3500), 0.0, -1, 10, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1092), 8.0, -1, 10, true);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur04|Line00267", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    lv_i = 1;
    for ( ; ( (auto54C3C62E_ai >= 0 && lv_i <= auto54C3C62E_ae) || (auto54C3C62E_ai < 0 && lv_i >= auto54C3C62E_ae) ) ; lv_i += auto54C3C62E_ai ) {
        UnitCreate(1, "DarkTemplarShakuras", 0, gv_pLAYER_01_USER, PointFromName(("Dark Templar Intro Spawn " + IntToString(lv_i))), 270.0);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1353)), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1425)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1449)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(394)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(28))), c_orderQueueAddToEnd);
        UnitCreate(1, "DarkTemplarShakuras", 0, gv_pLAYER_01_USER, PointFromName(("Dark Templar Intro Spawn " + IntToString((lv_i + 1)))), 270.0);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1209)), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1253)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1336)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(304)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(28))), c_orderQueueAddToEnd);
        Wait(0.75, c_timeGame);
    }
    TransmissionWait(TransmissionLastSent(), 1.0);
    UnitCreate(1, "WarpPrism", 0, gv_pLAYER_01_USER, PointFromId(741), 300.0);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1012)), c_orderQueueReplace);
    UnitCreate(1, "WarpPrism", 0, gv_pLAYER_01_USER, PointFromId(1007), 300.0);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1066)), c_orderQueueReplace);
    UnitCreate(1, "WarpPrism", 0, gv_pLAYER_01_USER, PointFromId(1011), 300.0);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1067)), c_orderQueueReplace);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur04|Line00268", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 1.5);
    autoA8C15CC1_g = UnitGroup(null, c_playerAny, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoA8C15CC1_u = UnitGroupCount(autoA8C15CC1_g, c_unitCountAll);
    for (;; autoA8C15CC1_u -= 1) {
        autoA8C15CC1_var = UnitGroupUnitFromEnd(autoA8C15CC1_g, autoA8C15CC1_u);
        if (autoA8C15CC1_var == null) { break; }
        if ((libNtve_gf_UnitInRegion(autoA8C15CC1_var, RegionFromId(67)) == false)) {
            UnitRemove(autoA8C15CC1_var);
        }

    }
    UnitCreate(1, "ImmortalTaldarim", 0, gv_pLAYER_01_USER, PointFromId(290), 300.0);
    UnitGroupAdd(gv_midImmortals, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(736)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    UnitCreate(1, "ImmortalTaldarim", 0, gv_pLAYER_01_USER, PointFromId(290), 300.0);
    UnitGroupAdd(gv_midImmortals, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(740)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    UnitCreate(1, "ImmortalTaldarim", 0, gv_pLAYER_01_USER, PointFromId(290), 300.0);
    UnitGroupAdd(gv_midImmortals, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(751)), c_orderQueueReplace);
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(3561), 4.0, -1, 10, true);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur04|Line00269", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidTempleCavernsCinematic_Init () {
    gt_MidTempleCavernsCinematic = TriggerCreate("gt_MidTempleCavernsCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Temple -> Caverns - Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MidTempleCavernsCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidTempleCavernsCinematicEnd_Init () {
    gt_MidTempleCavernsCinematicEnd = TriggerCreate("gt_MidTempleCavernsCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Temple -> Caverns - Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidTempleCavernsCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup autoB48424A0_g;
    int autoB48424A0_u;
    unit autoB48424A0_var;
    unitgroup autoFE697F2F_g;
    int autoFE697F2F_u;
    unit autoFE697F2F_var;
    unitgroup autoCB70E6C5_g;
    int autoCB70E6C5_u;
    unit autoCB70E6C5_var;
    unitgroup autoD0076B91_g;
    int autoD0076B91_u;
    unit autoD0076B91_var;
    unitgroup autoCABD46C9_g;
    int autoCABD46C9_u;
    unit autoCABD46C9_var;
    unitgroup auto6DDA83FD_g;
    int auto6DDA83FD_u;
    unit auto6DDA83FD_var;
    unitgroup autoB8A0662C_g;
    int autoB8A0662C_u;
    unit autoB8A0662C_var;
    unitgroup auto50A2AD49_g;
    int auto50A2AD49_u;
    unit auto50A2AD49_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_MidTempleCrystalExplosion);
    SoundStop(gv_midCrystalSound, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PAiur04_Music_Section3", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    CameraShakeStop(gv_pLAYER_01_USER);
    autoB48424A0_g = gv_cinematicTempUnits;
    autoB48424A0_u = UnitGroupCount(autoB48424A0_g, c_unitCountAll);
    for (;; autoB48424A0_u -= 1) {
        autoB48424A0_var = UnitGroupUnitFromEnd(autoB48424A0_g, autoB48424A0_u);
        if (autoB48424A0_var == null) { break; }
        UnitRemove(autoB48424A0_var);
    }
    autoFE697F2F_g = gv_cinematicHiddenUnits;
    autoFE697F2F_u = UnitGroupCount(autoFE697F2F_g, c_unitCountAll);
    for (;; autoFE697F2F_u -= 1) {
        autoFE697F2F_var = UnitGroupUnitFromEnd(autoFE697F2F_g, autoFE697F2F_u);
        if (autoFE697F2F_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoFE697F2F_var, true);
    }
    autoCB70E6C5_g = gv_cinematicPausedUnits;
    autoCB70E6C5_u = UnitGroupCount(autoCB70E6C5_g, c_unitCountAll);
    for (;; autoCB70E6C5_u -= 1) {
        autoCB70E6C5_var = UnitGroupUnitFromEnd(autoCB70E6C5_g, autoCB70E6C5_u);
        if (autoCB70E6C5_var == null) { break; }
        libNtve_gf_PauseUnit(autoCB70E6C5_var, false);
    }
    autoD0076B91_g = gv_cavernsAntechamberEnemies;
    autoD0076B91_u = UnitGroupCount(autoD0076B91_g, c_unitCountAll);
    for (;; autoD0076B91_u -= 1) {
        autoD0076B91_var = UnitGroupUnitFromEnd(autoD0076B91_g, autoD0076B91_u);
        if (autoD0076B91_var == null) { break; }
        libNtve_gf_PauseUnit(autoD0076B91_var, false);
        libNtve_gf_ShowHideUnit(autoD0076B91_var, true);
    }
    autoCABD46C9_g = gv_cavernsAccessPointEnemies;
    autoCABD46C9_u = UnitGroupCount(autoCABD46C9_g, c_unitCountAll);
    for (;; autoCABD46C9_u -= 1) {
        autoCABD46C9_var = UnitGroupUnitFromEnd(autoCABD46C9_g, autoCABD46C9_u);
        if (autoCABD46C9_var == null) { break; }
        libNtve_gf_PauseUnit(autoCABD46C9_var, false);
        libNtve_gf_ShowHideUnit(autoCABD46C9_var, true);
    }
    if ((gv_cinematicCompleted == false)) {
        auto6DDA83FD_g = gv_midImmortals;
        auto6DDA83FD_u = UnitGroupCount(auto6DDA83FD_g, c_unitCountAll);
        for (;; auto6DDA83FD_u -= 1) {
            auto6DDA83FD_var = UnitGroupUnitFromEnd(auto6DDA83FD_g, auto6DDA83FD_u);
            if (auto6DDA83FD_var == null) { break; }
            UnitRemove(auto6DDA83FD_var);
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ImmortalTaldarim", 0, gv_pLAYER_01_USER, PointFromId(736));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ImmortalTaldarim", 0, gv_pLAYER_01_USER, PointFromId(740));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ImmortalTaldarim", 0, gv_pLAYER_01_USER, PointFromId(751));
    }

    autoB8A0662C_g = gv_activePlayerUnits;
    autoB8A0662C_u = UnitGroupCount(autoB8A0662C_g, c_unitCountAll);
    for (;; autoB8A0662C_u -= 1) {
        autoB8A0662C_var = UnitGroupUnitFromEnd(autoB8A0662C_g, autoB8A0662C_u);
        if (autoB8A0662C_var == null) { break; }
        UnitRemove(autoB8A0662C_var);
    }
    auto50A2AD49_g = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(32), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto50A2AD49_u = UnitGroupCount(auto50A2AD49_g, c_unitCountAll);
    for (;; auto50A2AD49_u -= 1) {
        auto50A2AD49_var = UnitGroupUnitFromEnd(auto50A2AD49_g, auto50A2AD49_u);
        if (auto50A2AD49_var == null) { break; }
        UnitGroupAdd(gv_activePlayerUnits, auto50A2AD49_var);
    }
    UnitSetState(gv_artanis, c_unitStateFidget, true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathingBlocker12x12Diagonal", c_unitCreateIgnorePlacement, 0, PointFromId(121));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathingBlocker12x12Diagonal", c_unitCreateIgnorePlacement, 0, PointFromId(122));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathingBlocker12x12Diagonal", c_unitCreateIgnorePlacement, 0, PointFromId(2828));
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    UIHideTextCrawl(PlayerGroupAll());
    RegionPlayableMapSet(RegionFromId(3));
    if ((gv_currentEnvironment != 3)) {
        gf_EnvironmentXelNagaCaverns();
    }

    if ((gv_cinematicCompleted == false)) {
        Wait(1.0625, c_timeGame);
    }

    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1094), lv_fadeDuration, -1, 10.0, true);
        libVCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, true);
    }
    else {
        lv_fadeDuration = 1.0;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
        libVCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, false);
        libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(1094)), lv_fadeDuration);
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidTempleCavernsCleanup_Init () {
    gt_MidTempleCavernsCleanup = TriggerCreate("gt_MidTempleCavernsCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Temple - Crystal Explosion
//--------------------------------------------------------------------------------------------------
bool gt_MidTempleCrystalExplosion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraShake(gv_pLAYER_01_USER, "Heavy", "Earthquake", 0.0, 1.0, 3.0);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(35)), c_animNameDefault, "Death A", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    SoundPlayForPlayer(SoundLink("PAiur04_Karax_PowerPoint_Death", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(0.5, c_timeGame);
    SoundPlayForPlayer(SoundLink("PAiur04_Citadel_ShockWave_RockDebris", -1), c_maxPlayers, PlayerGroupAll(), 60.0, 0.0);
    Wait(9.5, c_timeGame);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(35)), c_animNameDefault, "Dead A", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidTempleCrystalExplosion_Init () {
    gt_MidTempleCrystalExplosion = TriggerCreate("gt_MidTempleCrystalExplosion_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoFF8D44BE_g;
    int autoFF8D44BE_u;
    unit autoFF8D44BE_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CameraLockInput(gv_pLAYER_01_USER, false);
    TriggerStop(gt_DestructionWavePan);
    TriggerStop(gt_ShadowDashPing);
    TriggerStop(gt_FinalGatePan);
    TriggerStop(gt_ReclamationPan);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, 1.0, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UnitClearSelection(gv_pLAYER_01_USER);
    RegionPlayableMapSet(RegionFromId(127));
    UnitRemove(gv_alarak);
    UnitRemove(gv_vorazun);
    UnitRemove(gv_karax);
    UnitRemove(gv_fenix);
    TriggerExecute(gt_CitadelCleanup, true, false);
    TriggerExecute(gt_TempleCleanup, true, false);
    TriggerExecute(gt_CavernsCleanup, true, false);
    CameraShakeStop(gv_pLAYER_01_USER);
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_templeCrystalBroken = true;
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(3)), c_animNameDefault, "Stand B", c_animFlagPlayForever, c_animTimeDefault);
    ActorSend(ActorFromDoodad(DoodadFromId(1463)), "SetOpacity 1.000000");
    if ((gv_currentEnvironment != 3)) {
        gf_EnvironmentXelNagaCaverns();
    }

    autoFF8D44BE_g = gv_activePlayerUnits;
    autoFF8D44BE_u = UnitGroupCount(autoFF8D44BE_g, c_unitCountAll);
    for (;; autoFF8D44BE_u -= 1) {
        autoFF8D44BE_var = UnitGroupUnitFromEnd(autoFF8D44BE_g, autoFF8D44BE_u);
        if (autoFF8D44BE_var == null) { break; }
        if ((autoFF8D44BE_var != gv_artanis)) {
            UnitSetPosition(autoFF8D44BE_var, RegionRandomPoint(RegionFromId(65)), false);
            UnitIssueOrder(autoFF8D44BE_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            UnitIssueOrder(autoFF8D44BE_var, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(123)), c_orderQueueAddToEnd);
            UnitIssueOrder(autoFF8D44BE_var, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
            libNtve_gf_ChangeUnitDamage(autoFF8D44BE_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        }

    }
    if ((UnitIsAlive(gv_artanis) == false)) {
        libNtve_gf_CreateUnitsAtPoint2(1, "ArtanisVoid", 0, gv_pLAYER_01_USER, PointFromId(1100));
        gv_artanis = UnitLastCreated();
    }

    UnitSetState(gv_artanis, c_unitStateFidget, false);
    libNtve_gf_ChangeUnitDamage(gv_artanis, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitSetPosition(gv_artanis, PointFromId(1100), false);
    UnitIssueOrder(gv_artanis, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_artanis, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(123)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_activeEnergyCloud, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitSetPosition(gv_activeEnergyCloud, PointFromId(1089), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleTargetDummy", c_unitCreateIgnorePlacement, 0, PointFromId(123));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropHeight, 5.0);
    gv_victoryTargetDummy = UnitLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(100), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1126), (SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Aiur04|Line00078", true), c_soundIndexAny)) + 1), -1, 10, true);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 100.0, 2.0);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PAiur04_Music_Outro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libVCMI_gf_SendTransmissionCampaign(gv_karax, "pMission_Aiur04|Line00078", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1129), 3.0, -1, 10, true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_artanis), c_animNameDefault, "Attack Superior", c_animFlagPlayForever, c_animTimeDefault);
    Wait(0.3, c_timeGame);
    UnitCreate(1, "BeamCaster", c_unitCreateIgnorePlacement, 0, PointWithOffsetPolar(UnitGetPosition(gv_artanis), 0.2, 55.0), UnitGetFacing(gv_artanis));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitSetHeight(UnitLastCreated(), 1.6, 0.0);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("BeamCaster8", 0), gv_victoryTargetDummy), c_orderQueueReplace);
    SoundPlayForPlayer(SoundLink("PAiur04_Artanis_PowerPoint_KillShot", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gv_midCrystalSound = SoundLastPlayed();
    Wait(3.0, c_timeGame);
    UnitKill(UnitLastCreated());
    ActorSend(ActorFromDoodad(DoodadFromId(1463)), "SetOpacity 0.000000 2.000000");
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_IceWorld", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    TriggerExecute(gt_VictoryCrystalExplosion, true, false);
    Wait(1.0, c_timeGame);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_artanis), c_animNameDefault);
    Wait(3.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1126), 4.0, -1, 10, true);
    libVCMI_gf_SendTransmissionCampaign(gv_karax, "pMission_Aiur04|Line00172", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(gv_karax, "pMission_Aiur04|Line00275", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    SoundPlayForPlayer(SoundLink("PAiur04_Dimentional_Recall", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(gt_VictoryRecallPlayerUnits, true, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto0C036AF7_g;
    int auto0C036AF7_u;
    unit auto0C036AF7_var;

    // Actions
    if (!runActions) {
        return true;
    }

    SoundStop(gv_midCrystalSound, true);
    CameraShakeStop(gv_pLAYER_01_USER);
    TriggerStop(gt_VictoryCrystalExplosion);
    auto0C036AF7_g = gv_cinematicTempUnits;
    auto0C036AF7_u = UnitGroupCount(auto0C036AF7_g, c_unitCountAll);
    for (;; auto0C036AF7_u -= 1) {
        auto0C036AF7_var = UnitGroupUnitFromEnd(auto0C036AF7_g, auto0C036AF7_u);
        if (auto0C036AF7_var == null) { break; }
        UnitRemove(auto0C036AF7_var);
    }
    libVCMI_gf_CinematicModeCampaign(false, c_transitionDurationImmediate, false);
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Crystal Explosion
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCrystalExplosion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraShake(gv_pLAYER_01_USER, "Heavy", "Earthquake", 0.0, 1.0, 3.0);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(3)), c_animNameDefault, "Death B", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    SoundPlayForPlayer(SoundLink("PAiur04_Artanis_PowerPoint_Death", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(0.5, c_timeGame);
    Wait(9.5, c_timeGame);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(3)), c_animNameDefault, "Dead B", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCrystalExplosion_Init () {
    gt_VictoryCrystalExplosion = TriggerCreate("gt_VictoryCrystalExplosion_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Recall Player Units
//--------------------------------------------------------------------------------------------------
bool gt_VictoryRecallPlayerUnits_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto99EDD70D_g;
    int auto99EDD70D_u;
    unit auto99EDD70D_var;
    unitgroup autoE0B6A5A9_g;
    int autoE0B6A5A9_u;
    unit autoE0B6A5A9_var;
    unitgroup autoDEC86693_g;
    int autoDEC86693_u;
    unit autoDEC86693_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto99EDD70D_g = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(67), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto99EDD70D_u = UnitGroupCount(auto99EDD70D_g, c_unitCountAll);
    for (;; auto99EDD70D_u -= 1) {
        auto99EDD70D_var = UnitGroupUnitFromEnd(auto99EDD70D_g, auto99EDD70D_u);
        if (auto99EDD70D_var == null) { break; }
        UnitBehaviorAddPlayer(auto99EDD70D_var, "ProtossGenericWarpInOut", gv_pLAYER_01_USER, 1);
        Wait(0.0625, c_timeGame);
    }
    Wait(2.0, c_timeGame);
    autoE0B6A5A9_g = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(67), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE0B6A5A9_u = UnitGroupCount(autoE0B6A5A9_g, c_unitCountAll);
    for (;; autoE0B6A5A9_u -= 1) {
        autoE0B6A5A9_var = UnitGroupUnitFromEnd(autoE0B6A5A9_g, autoE0B6A5A9_u);
        if (autoE0B6A5A9_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(autoE0B6A5A9_var, "SetOpacity 0.000000 1.000000");
    }
    Wait(1.0, c_timeGame);
    autoDEC86693_g = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(67), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDEC86693_u = UnitGroupCount(autoDEC86693_g, c_unitCountAll);
    for (;; autoDEC86693_u -= 1) {
        autoDEC86693_var = UnitGroupUnitFromEnd(autoDEC86693_g, autoDEC86693_u);
        if (autoDEC86693_var == null) { break; }
        UnitRemove(autoDEC86693_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryRecallPlayerUnits_Init () {
    gt_VictoryRecallPlayerUnits = TriggerCreate("gt_VictoryRecallPlayerUnits_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04MusicSound_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_DebugStage02AncientTempleGrounds_Init();
    gt_DebugStage03XelNagaCaverns_Init();
    gt_DebugOpen1_Init();
    gt_DebugOpen2_Init();
    gt_CitadelInit_Init();
    gt_CitadelStartingSequence_Init();
    gt_CitadelVictory_Init();
    gt_CitadelCleanup_Init();
    gt_DestructionWaveQ_Init();
    gt_DestructionWave2Q_Init();
    gt_DestructionWavePan_Init();
    gt_DestructionWaveProximityTrigger_Init();
    gt_DestructionWaveCameraTrigger_Init();
    gt_DestructionWaveUsed_Init();
    gt_DestructionWaveApproachIntercept_Init();
    gt_DestructionWaveTargetDies_Init();
    gt_ShadowDashPing_Init();
    gt_ShadowDashUsed_Init();
    gt_DefeatAlarakDead_Init();
    gt_DefeatVorazunDead_Init();
    gt_CitadelPeriodicAttackCheck_Init();
    gt_CitadelZerg1_Init();
    gt_CitadelZerg1Unburrow_Init();
    gt_CitadelZerg2_Init();
    gt_CitadelZerg3_Init();
    gt_CitadelZerg4_Init();
    gt_CitadelZerg5_Init();
    gt_BridgeBanelingsRight_Init();
    gt_BridgeBanelings1_Init();
    gt_BridgeBanelings2_Init();
    gt_NydusGauntlet_Init();
    gt_NydusUltra_Init();
    gt_OverseerQ_Init();
    gt_OverseerPatrols_Init();
    gt_Overseer4_Init();
    gt_Mutalisks_Init();
    gt_ActivateSwarmHosts_Init();
    gt_FinalOverseerPatrol1_Init();
    gt_FinalOverseerPatrol2Brutal_Init();
    gt_ProtectAlarakOverlords_Init();
    gt_ProtectAlarakZerg_Init();
    gt_Gate1Q_Init();
    gt_Gate1Blocker_Init();
    gt_AboutDoneQ_Init();
    gt_Gate1OpenedQ_Init();
    gt_Gate2HintQ_Init();
    gt_Gate2Blocker_Init();
    gt_Gate2OpenedQ_Init();
    gt_MutalisksQ_Init();
    gt_Gate3Q_Init();
    gt_FinalGatePan_Init();
    gt_ProtectAlarakTimer_Init();
    gt_ProtectAlarakWarningQ_Init();
    gt_ProtectAlarakAlmostDoneQ_Init();
    gt_TempleInit_Init();
    gt_TempleStartingSequence_Init();
    gt_TempleVictory_Init();
    gt_TempleCleanup_Init();
    gt_ReclamationQ_Init();
    gt_ReclamationPan_Init();
    gt_ReclamationProximityTrigger_Init();
    gt_ReclamationCameraTrigger_Init();
    gt_ReclamationUsed_Init();
    gt_ReclamationTargetDies_Init();
    gt_ReclamationUnitGroupSwaps_Init();
    gt_PhaseCannonQ_Init();
    gt_PhaseCannonUsed_Init();
    gt_DefeatKaraxDead_Init();
    gt_DefeatFenixDead_Init();
    gt_UnitTraining_Init();
    gt_TemplePeriodicAttackCheck_Init();
    gt_TempleInitialEncounter_Init();
    gt_TempleBridgeEncounter_Init();
    gt_PathProtossLeft_Init();
    gt_TemplePatrolLeft_Init();
    gt_ReaverGroup_Init();
    gt_TemplePatrolMiddle_Init();
    gt_PathProtossRight_Init();
    gt_TemplePatrolRight_Init();
    gt_ColossusGroup_Init();
    gt_TemplePatrolWarpIn_Init();
    gt_RepeatedPatrolActivation_Init();
    gt_HybridFight_Init();
    gt_HybridReaverSpawns_Init();
    gt_TempleSupplyChanges_Init();
    gt__60SupplyQ_Init();
    gt_EarlyBarrierQ_Init();
    gt_WayIsOpenQ_Init();
    gt_HybridQ_Init();
    gt_GatewayCloisterLeftQ_Init();
    gt_GatewayCloisterRightQ_Init();
    gt_PurifyFenixQ_Init();
    gt_ReaverAreaQ_Init();
    gt_ColossusAreaQ_Init();
    gt_CavernsInit_Init();
    gt_CavernsStartingSequence_Init();
    gt_CavernsVictory_Init();
    gt_CavernsCleanup_Init();
    gt_ArtanisHealUsed_Init();
    gt_ArtanisHealReminderQ_Init();
    gt_DefeatArtanisDead_Init();
    gt_EnergyCloudController_Init();
    gt_StaticEnergyClouds_Init();
    gt_EnergyCloudQ_Init();
    gt_UnitsKilledbyCloud_Init();
    gt_EnergyCloudDamageRamp_Init();
    gt_PurifierReinforcements_Init();
    gt_PurifierVulnerability_Init();
    gt_Purifier1Q_Init();
    gt_Purifier2Q_Init();
    gt_TransmissionPurifierRescueQ_Init();
    gt_PurifierNydusCanals_Init();
    gt_PressForwardQ_Init();
    gt_HatcheryLarvaKill_Init();
    gt_DarkTemplarReinforcements_Init();
    gt_DarkTemplarVulnerability_Init();
    gt_DarkTemplar1Q_Init();
    gt_DarkTemplar2Q_Init();
    gt_CavernsPeriodicAttackCheck_Init();
    gt_CavernsAntechamberBattle_Init();
    gt_CavernsAntechamberZerg1_Init();
    gt_CavernsAntechamberZerg2_Init();
    gt_CavernsCentralPassageZerg_Init();
    gt_CavernsCentralChamberBattle_Init();
    gt_CavernsNydusChamberBattle_Init();
    gt_CavernsAccessPointArrival_Init();
    gt_CavernsAccessPointArrivalQ_Init();
    gt_CavernsAccessPointBattle_Init();
    gt_CavernsAccessPointCaveLeft_Init();
    gt_CavernsAccessPointCaveRight_Init();
    gt_CavernsAccessPointCaveHelpers_Init();
    gt_CavernsRockTowerBehavior_Init();
    gt_StartAI_Init();
    gt_AIGiveResources_Init();
    gt_StatVorazunDamageTaken_Init();
    gt_AchievementVorazunDamageTaken_Init();
    gt_StatAchievementReclaimedArmy_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_ObjectiveCitadelPowerStructureCreate_Init();
    gt_ObjectiveCitadelPowerStructureComplete_Init();
    gt_ObjectiveAlarakandVorazunMustSurviveCreate_Init();
    gt_ObjectiveAlarakandVorazunMustSurviveComplete_Init();
    gt_ObjectiveAlarakandVorazunMustSurviveFailed_Init();
    gt_ObjectiveAssembleanArmyCreate_Init();
    gt_ObjectiveAssembleanArmyComplete_Init();
    gt_ObjectiveTemplePowerStructureCreate_Init();
    gt_ObjectiveTemplePowerStructureComplete_Init();
    gt_ObjectiveKaraxandFenixMustSurviveCreate_Init();
    gt_ObjectiveKaraxandFenixMustSurviveComplete_Init();
    gt_ObjectiveKaraxandFenixMustSurviveFailed_Init();
    gt_ObjectiveCavernsPowerStructureCreate_Init();
    gt_ObjectiveCavernsPowerStructureComplete_Init();
    gt_ObjectiveArtanisMustSurviveCreate_Init();
    gt_ObjectiveArtanisMustSurviveComplete_Init();
    gt_ObjectiveArtanisMustSurviveFailed_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_MidCitadelTempleQ_Init();
    gt_MidCitadelTempleSetup_Init();
    gt_MidCitadelTempleCinematic_Init();
    gt_MidCitadelTempleCinematicEnd_Init();
    gt_MidCitadelTempleCleanup_Init();
    gt_MidCitadelCrystalExplosion_Init();
    gt_MidTempleCavernsQ_Init();
    gt_MidTempleCavernsSetup_Init();
    gt_MidTempleCavernsCinematic_Init();
    gt_MidTempleCavernsCinematicEnd_Init();
    gt_MidTempleCavernsCleanup_Init();
    gt_MidTempleCrystalExplosion_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
    gt_VictoryCrystalExplosion_Init();
    gt_VictoryRecallPlayerUnits_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
