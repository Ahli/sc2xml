//==================================================================================================
// 
// Generated AI Script
// 
// AI Name: P09 Void Rift West
// 
//==================================================================================================
include "TriggerLibs/natives"
include "TriggerLibs/AI"
include "TriggerLibs/Computer"

//--------------------------------------------------------------------------------------------------
// Globals
//--------------------------------------------------------------------------------------------------
point[17] ai8487A584_defGather;
string[17] ai8487A584_customData;
wave[17] ai8487A584_lastWave;

//--------------------------------------------------------------------------------------------------
// Attack Wave: Night 2 - Wave 4 - West
//--------------------------------------------------------------------------------------------------
bool[17] ai8487A584_wave1_enabled;
unitgroup[17] ai8487A584_wave1_lastUnits;
wave[17] ai8487A584_wave1_lastWave;
trigger ai8487A584_wave1_trigger = null;
int ai8487A584_wave1_runPlayer;
playergroup ai8487A584_wave1_runTarget;

//--------------------------------------------------------------------------------------------------
void ai8487A584_wave1_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai8487A584_wave1_enabled[init_i] = true;
        ai8487A584_wave1_lastUnits[init_i] = null;
        ai8487A584_wave1_lastWave[init_i] = null;
    }

    ai8487A584_wave1_trigger = TriggerCreate("ai8487A584_wave1_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai8487A584_wave1_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai8487A584_wave1_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai8487A584_wave1_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai8487A584_wave1_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup ai8487A584_wave1_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai8487A584_wave1_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave ai8487A584_wave1_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai8487A584_wave1_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai8487A584_wave1_runFunc (bool c, bool a) {
    int p = ai8487A584_wave1_runPlayer;
    playergroup target = ai8487A584_wave1_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai8487A584_wave1_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai8487A584_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 570; }
    if (d == 2) { ta = 570; }
    if (d == 3) { ta = 540; }
    if (d == 4) { ta = 540; }
    tg = 0;
    if (d == 1) { tg = 45; }
    if (d == 2) { tg = 45; }
    if (d == 3) { tg = 45; }
    if (d == 4) { tg = 45; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(955));

    gatherPoint = ai8487A584_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    gatherPoint = PointFromId(957);
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(939), false);
    AIAttackWaveAddWaypoint(p, PointFromId(954), false);

    createPoint = gatherPoint;
    createPoint = PointFromId(935);

    ai8487A584_wave1_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 5; }
    if (d == 2) { createCount = 5; }
    if (d == 3) { createCount = 6; }
    if (d == 4) { createCount = 6; }
    if (createCount > 0) {
        UnitCreate(createCount, "Hydralisk", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8487A584_wave1_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 1; }
    if (d == 2) { createCount = 1; }
    if (d == 3) { createCount = 2; }
    if (d == 4) { createCount = 3; }
    if (createCount > 0) {
        UnitCreate(createCount, "Colossus", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8487A584_wave1_lastUnits[p], UnitLastCreatedGroup());
    }

    AIAttackWaveSend(p, ts, false);
    ai8487A584_wave1_lastWave[p] = WaveLastCreated();
    ai8487A584_lastWave[p] = ai8487A584_wave1_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai8487A584_wave1_run (int p, playergroup target, bool wait) {
    ai8487A584_wave1_runPlayer = p;
    ai8487A584_wave1_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai8487A584_wave1_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: Night 3 - Wave 6 - West
//--------------------------------------------------------------------------------------------------
bool[17] ai8487A584_wave2_enabled;
unitgroup[17] ai8487A584_wave2_lastUnits;
wave[17] ai8487A584_wave2_lastWave;
trigger ai8487A584_wave2_trigger = null;
int ai8487A584_wave2_runPlayer;
playergroup ai8487A584_wave2_runTarget;

//--------------------------------------------------------------------------------------------------
void ai8487A584_wave2_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai8487A584_wave2_enabled[init_i] = true;
        ai8487A584_wave2_lastUnits[init_i] = null;
        ai8487A584_wave2_lastWave[init_i] = null;
    }

    ai8487A584_wave2_trigger = TriggerCreate("ai8487A584_wave2_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai8487A584_wave2_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai8487A584_wave2_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai8487A584_wave2_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai8487A584_wave2_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup ai8487A584_wave2_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai8487A584_wave2_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave ai8487A584_wave2_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai8487A584_wave2_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai8487A584_wave2_runFunc (bool c, bool a) {
    int p = ai8487A584_wave2_runPlayer;
    playergroup target = ai8487A584_wave2_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai8487A584_wave2_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai8487A584_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 445; }
    if (d == 2) { ta = 445; }
    if (d == 3) { ta = 415; }
    if (d == 4) { ta = 415; }
    tg = 0;
    if (d == 1) { tg = 55; }
    if (d == 2) { tg = 55; }
    if (d == 3) { tg = 55; }
    if (d == 4) { tg = 55; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(955));

    gatherPoint = ai8487A584_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    gatherPoint = PointFromId(957);
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(939), false);
    AIAttackWaveAddWaypoint(p, PointFromId(954), false);

    createPoint = gatherPoint;
    createPoint = PointFromId(935);

    ai8487A584_wave2_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 3; }
    if (d == 2) { createCount = 3; }
    if (d == 3) { createCount = 3; }
    if (d == 4) { createCount = 4; }
    if (createCount > 0) {
        UnitCreate(createCount, "Ultralisk", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8487A584_wave2_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 3; }
    if (d == 2) { createCount = 3; }
    if (d == 3) { createCount = 3; }
    if (d == 4) { createCount = 4; }
    if (createCount > 0) {
        UnitCreate(createCount, "Medivac", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8487A584_wave2_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 3) { createCount = 3; }
    if (d == 4) { createCount = 4; }
    if (createCount > 0) {
        UnitCreate(createCount, "BroodLord", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8487A584_wave2_lastUnits[p], UnitLastCreatedGroup());
    }

    AIAttackWaveSend(p, ts, false);
    ai8487A584_wave2_lastWave[p] = WaveLastCreated();
    ai8487A584_lastWave[p] = ai8487A584_wave2_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai8487A584_wave2_run (int p, playergroup target, bool wait) {
    ai8487A584_wave2_runPlayer = p;
    ai8487A584_wave2_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai8487A584_wave2_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: Night 4 - Wave 3 - West
//--------------------------------------------------------------------------------------------------
bool[17] ai8487A584_wave3_enabled;
unitgroup[17] ai8487A584_wave3_lastUnits;
wave[17] ai8487A584_wave3_lastWave;
trigger ai8487A584_wave3_trigger = null;
int ai8487A584_wave3_runPlayer;
playergroup ai8487A584_wave3_runTarget;

//--------------------------------------------------------------------------------------------------
void ai8487A584_wave3_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai8487A584_wave3_enabled[init_i] = true;
        ai8487A584_wave3_lastUnits[init_i] = null;
        ai8487A584_wave3_lastWave[init_i] = null;
    }

    ai8487A584_wave3_trigger = TriggerCreate("ai8487A584_wave3_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai8487A584_wave3_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai8487A584_wave3_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai8487A584_wave3_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai8487A584_wave3_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup ai8487A584_wave3_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai8487A584_wave3_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave ai8487A584_wave3_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai8487A584_wave3_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai8487A584_wave3_runFunc (bool c, bool a) {
    int p = ai8487A584_wave3_runPlayer;
    playergroup target = ai8487A584_wave3_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai8487A584_wave3_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai8487A584_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 380; }
    if (d == 2) { ta = 380; }
    if (d == 3) { ta = 350; }
    if (d == 4) { ta = 350; }
    tg = 0;
    if (d == 1) { tg = 50; }
    if (d == 2) { tg = 50; }
    if (d == 3) { tg = 50; }
    if (d == 4) { tg = 50; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(955));

    gatherPoint = ai8487A584_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    gatherPoint = PointFromId(957);
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(939), false);
    AIAttackWaveAddWaypoint(p, PointFromId(954), false);

    createPoint = gatherPoint;
    createPoint = PointFromId(935);

    ai8487A584_wave3_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 2; }
    if (d == 2) { createCount = 2; }
    if (d == 3) { createCount = 4; }
    if (d == 4) { createCount = 6; }
    if (createCount > 0) {
        UnitCreate(createCount, "Scout", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8487A584_wave3_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 4; }
    if (d == 2) { createCount = 4; }
    if (d == 3) { createCount = 6; }
    if (d == 4) { createCount = 6; }
    if (createCount > 0) {
        UnitCreate(createCount, "Banshee", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8487A584_wave3_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 2; }
    if (d == 2) { createCount = 2; }
    if (d == 3) { createCount = 3; }
    if (d == 4) { createCount = 4; }
    if (createCount > 0) {
        UnitCreate(createCount, "BroodLord", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8487A584_wave3_lastUnits[p], UnitLastCreatedGroup());
    }

    AIAttackWaveSend(p, ts, false);
    ai8487A584_wave3_lastWave[p] = WaveLastCreated();
    ai8487A584_lastWave[p] = ai8487A584_wave3_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai8487A584_wave3_run (int p, playergroup target, bool wait) {
    ai8487A584_wave3_runPlayer = p;
    ai8487A584_wave3_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai8487A584_wave3_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: Night 5 - Wave 3 - West
//--------------------------------------------------------------------------------------------------
bool[17] ai8487A584_wave4_enabled;
unitgroup[17] ai8487A584_wave4_lastUnits;
wave[17] ai8487A584_wave4_lastWave;
trigger ai8487A584_wave4_trigger = null;
int ai8487A584_wave4_runPlayer;
playergroup ai8487A584_wave4_runTarget;

//--------------------------------------------------------------------------------------------------
void ai8487A584_wave4_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai8487A584_wave4_enabled[init_i] = true;
        ai8487A584_wave4_lastUnits[init_i] = null;
        ai8487A584_wave4_lastWave[init_i] = null;
    }

    ai8487A584_wave4_trigger = TriggerCreate("ai8487A584_wave4_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai8487A584_wave4_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai8487A584_wave4_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai8487A584_wave4_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai8487A584_wave4_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup ai8487A584_wave4_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai8487A584_wave4_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave ai8487A584_wave4_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai8487A584_wave4_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai8487A584_wave4_runFunc (bool c, bool a) {
    int p = ai8487A584_wave4_runPlayer;
    playergroup target = ai8487A584_wave4_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai8487A584_wave4_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai8487A584_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 420; }
    if (d == 2) { ta = 420; }
    if (d == 3) { ta = 390; }
    if (d == 4) { ta = 390; }
    tg = 0;
    if (d == 1) { tg = 50; }
    if (d == 2) { tg = 50; }
    if (d == 3) { tg = 50; }
    if (d == 4) { tg = 50; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(955));

    gatherPoint = ai8487A584_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    gatherPoint = PointFromId(957);
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(939), false);
    AIAttackWaveAddWaypoint(p, PointFromId(954), false);

    createPoint = gatherPoint;
    createPoint = PointFromId(935);

    ai8487A584_wave4_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 10; }
    if (d == 2) { createCount = 10; }
    if (d == 3) { createCount = 12; }
    if (d == 4) { createCount = 12; }
    if (createCount > 0) {
        UnitCreate(createCount, "Firebat", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8487A584_wave4_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 1; }
    if (d == 2) { createCount = 1; }
    if (d == 3) { createCount = 3; }
    if (d == 4) { createCount = 4; }
    if (createCount > 0) {
        UnitCreate(createCount, "Colossus", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8487A584_wave4_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 4; }
    if (d == 2) { createCount = 4; }
    if (d == 3) { createCount = 6; }
    if (d == 4) { createCount = 8; }
    if (createCount > 0) {
        UnitCreate(createCount, "Hydralisk", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8487A584_wave4_lastUnits[p], UnitLastCreatedGroup());
    }

    AIAttackWaveSend(p, ts, false);
    ai8487A584_wave4_lastWave[p] = WaveLastCreated();
    ai8487A584_lastWave[p] = ai8487A584_wave4_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai8487A584_wave4_run (int p, playergroup target, bool wait) {
    ai8487A584_wave4_runPlayer = p;
    ai8487A584_wave4_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai8487A584_wave4_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave Wrappers
//--------------------------------------------------------------------------------------------------
void ai8487A584_wave_enable (int w, int p, bool val) {
    if (w == 1) { ai8487A584_wave1_enable(p, val); }
    if (w == 2) { ai8487A584_wave2_enable(p, val); }
    if (w == 3) { ai8487A584_wave3_enable(p, val); }
    if (w == 4) { ai8487A584_wave4_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
bool ai8487A584_wave_isEnabled (int w, int p) {
    if (w == 1) { return ai8487A584_wave1_isEnabled(p); }
    if (w == 2) { return ai8487A584_wave2_isEnabled(p); }
    if (w == 3) { return ai8487A584_wave3_isEnabled(p); }
    if (w == 4) { return ai8487A584_wave4_isEnabled(p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup ai8487A584_wave_createdUnits (int w, int p) {
    if (w == 1) { return ai8487A584_wave1_createdUnits(p); }
    if (w == 2) { return ai8487A584_wave2_createdUnits(p); }
    if (w == 3) { return ai8487A584_wave3_createdUnits(p); }
    if (w == 4) { return ai8487A584_wave4_createdUnits(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave ai8487A584_wave_createdWave (int w, int p) {
    if (w == 1) { return ai8487A584_wave1_createdWave(p); }
    if (w == 2) { return ai8487A584_wave2_createdWave(p); }
    if (w == 3) { return ai8487A584_wave3_createdWave(p); }
    if (w == 4) { return ai8487A584_wave4_createdWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void ai8487A584_wave_run (int w, int p, playergroup target, bool wait) {
    if (w == 1) { ai8487A584_wave1_run(p, target, wait); }
    if (w == 2) { ai8487A584_wave2_run(p, target, wait); }
    if (w == 3) { ai8487A584_wave3_run(p, target, wait); }
    if (w == 4) { ai8487A584_wave4_run(p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
// Attack Wave Sequence
//--------------------------------------------------------------------------------------------------
trigger ai8487A584_waves_trigger = null;
int ai8487A584_waves_runPlayer;
playergroup ai8487A584_waves_runTarget;

//--------------------------------------------------------------------------------------------------
void ai8487A584_waves_init () {
    ai8487A584_waves_trigger = TriggerCreate("ai8487A584_waves_runFunc");
}

//--------------------------------------------------------------------------------------------------
bool ai8487A584_waves_runFunc (bool c, bool a) {
    int p = ai8487A584_waves_runPlayer;
    playergroup target = ai8487A584_waves_runTarget;

    if (p < 0 || p >= 16) {
        return false;
    }

    ai8487A584_wave1_run(p, target, true);
    ai8487A584_wave2_run(p, target, true);
    ai8487A584_wave3_run(p, target, true);
    ai8487A584_wave4_run(p, target, true);

    while (true) {
        ai8487A584_wave4_run(p, target, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai8487A584_waves_run (int p, playergroup target) {
    ai8487A584_waves_runPlayer = p;
    ai8487A584_waves_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai8487A584_waves_trigger, false, false);
}

//--------------------------------------------------------------------------------------------------
void ai8487A584_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }

    ai8487A584_wave1_enable(p, val);
    ai8487A584_wave2_enable(p, val);
    ai8487A584_wave3_enable(p, val);
    ai8487A584_wave4_enable(p, val);
}

//--------------------------------------------------------------------------------------------------
void ai8487A584_waves_stop () {
    TriggerStop(ai8487A584_waves_trigger);

    TriggerStop(ai8487A584_wave1_trigger);
    TriggerStop(ai8487A584_wave2_trigger);
    TriggerStop(ai8487A584_wave3_trigger);
    TriggerStop(ai8487A584_wave4_trigger);
}

//--------------------------------------------------------------------------------------------------
// Configuration
//--------------------------------------------------------------------------------------------------
void ai8487A584_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai8487A584_defGather[p] = val;
}

//--------------------------------------------------------------------------------------------------
string ai8487A584_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai8487A584_customData[p];
}

//--------------------------------------------------------------------------------------------------
wave ai8487A584_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai8487A584_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
// Start
//--------------------------------------------------------------------------------------------------
bool ai8487A584_initialized = false;

//--------------------------------------------------------------------------------------------------
void ai8487A584_start (int p) {
    int init_i;

    if (p < 0 || p >= 16) {
        return;
    }
    if (!ai8487A584_initialized) {
        ai8487A584_wave1_init();
        ai8487A584_wave2_init();
        ai8487A584_wave3_init();
        ai8487A584_wave4_init();
        ai8487A584_waves_init();

        for (init_i = 0; init_i <= 16; init_i += 1) {
            ai8487A584_defGather[init_i] = PointFromId(957);
        }

        ai8487A584_initialized = true;
    }

    AICampaignStart(p);
}
