//==================================================================================================
// 
// Generated AI Script
// 
// AI Name: P07 Void Rift East
// 
//==================================================================================================
include "TriggerLibs/natives"
include "TriggerLibs/AI"
include "TriggerLibs/Computer"

//--------------------------------------------------------------------------------------------------
// Globals
//--------------------------------------------------------------------------------------------------
point[17] ai7AEF50D9_defGather;
string[17] ai7AEF50D9_customData;
wave[17] ai7AEF50D9_lastWave;

//--------------------------------------------------------------------------------------------------
// Attack Wave: Night 1 - Wave 1 - East
//--------------------------------------------------------------------------------------------------
bool[17] ai7AEF50D9_wave6_enabled;
unitgroup[17] ai7AEF50D9_wave6_lastUnits;
wave[17] ai7AEF50D9_wave6_lastWave;
trigger ai7AEF50D9_wave6_trigger = null;
int ai7AEF50D9_wave6_runPlayer;
playergroup ai7AEF50D9_wave6_runTarget;

//--------------------------------------------------------------------------------------------------
void ai7AEF50D9_wave6_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai7AEF50D9_wave6_enabled[init_i] = true;
        ai7AEF50D9_wave6_lastUnits[init_i] = null;
        ai7AEF50D9_wave6_lastWave[init_i] = null;
    }

    ai7AEF50D9_wave6_trigger = TriggerCreate("ai7AEF50D9_wave6_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai7AEF50D9_wave6_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai7AEF50D9_wave6_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai7AEF50D9_wave6_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai7AEF50D9_wave6_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup ai7AEF50D9_wave6_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai7AEF50D9_wave6_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave ai7AEF50D9_wave6_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai7AEF50D9_wave6_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai7AEF50D9_wave6_runFunc (bool c, bool a) {
    int p = ai7AEF50D9_wave6_runPlayer;
    playergroup target = ai7AEF50D9_wave6_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai7AEF50D9_wave6_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai7AEF50D9_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 85; }
    if (d == 2) { ta = 85; }
    if (d == 3) { ta = 85; }
    if (d == 4) { ta = 85; }
    tg = 0;
    if (d == 1) { tg = 25; }
    if (d == 2) { tg = 25; }
    if (d == 3) { tg = 25; }
    if (d == 4) { tg = 25; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(953));

    gatherPoint = ai7AEF50D9_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    gatherPoint = PointFromId(98);
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(940), false);

    createPoint = gatherPoint;
    createPoint = PointFromId(234);

    ai7AEF50D9_wave6_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 8; }
    if (d == 2) { createCount = 8; }
    if (d == 3) { createCount = 8; }
    if (d == 4) { createCount = 8; }
    if (createCount > 0) {
        UnitCreate(createCount, "Marine", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai7AEF50D9_wave6_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 1; }
    if (d == 2) { createCount = 1; }
    if (d == 3) { createCount = 2; }
    if (d == 4) { createCount = 3; }
    if (createCount > 0) {
        UnitCreate(createCount, "Colossus", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai7AEF50D9_wave6_lastUnits[p], UnitLastCreatedGroup());
    }

    AIAttackWaveSend(p, ts, false);
    ai7AEF50D9_wave6_lastWave[p] = WaveLastCreated();
    ai7AEF50D9_lastWave[p] = ai7AEF50D9_wave6_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai7AEF50D9_wave6_run (int p, playergroup target, bool wait) {
    ai7AEF50D9_wave6_runPlayer = p;
    ai7AEF50D9_wave6_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai7AEF50D9_wave6_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: Night 1 - Wave 2 - East
//--------------------------------------------------------------------------------------------------
bool[17] ai7AEF50D9_wave7_enabled;
unitgroup[17] ai7AEF50D9_wave7_lastUnits;
wave[17] ai7AEF50D9_wave7_lastWave;
trigger ai7AEF50D9_wave7_trigger = null;
int ai7AEF50D9_wave7_runPlayer;
playergroup ai7AEF50D9_wave7_runTarget;

//--------------------------------------------------------------------------------------------------
void ai7AEF50D9_wave7_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai7AEF50D9_wave7_enabled[init_i] = true;
        ai7AEF50D9_wave7_lastUnits[init_i] = null;
        ai7AEF50D9_wave7_lastWave[init_i] = null;
    }

    ai7AEF50D9_wave7_trigger = TriggerCreate("ai7AEF50D9_wave7_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai7AEF50D9_wave7_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai7AEF50D9_wave7_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai7AEF50D9_wave7_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai7AEF50D9_wave7_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup ai7AEF50D9_wave7_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai7AEF50D9_wave7_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave ai7AEF50D9_wave7_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai7AEF50D9_wave7_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai7AEF50D9_wave7_runFunc (bool c, bool a) {
    int p = ai7AEF50D9_wave7_runPlayer;
    playergroup target = ai7AEF50D9_wave7_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai7AEF50D9_wave7_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai7AEF50D9_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 25; }
    if (d == 2) { ta = 25; }
    if (d == 3) { ta = 25; }
    if (d == 4) { ta = 25; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(953));

    gatherPoint = ai7AEF50D9_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    gatherPoint = PointFromId(98);
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(940), false);

    createPoint = gatherPoint;
    createPoint = PointFromId(234);

    ai7AEF50D9_wave7_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 5; }
    if (d == 2) { createCount = 5; }
    if (d == 3) { createCount = 7; }
    if (d == 4) { createCount = 7; }
    if (createCount > 0) {
        UnitCreate(createCount, "Zealot", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai7AEF50D9_wave7_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 3) { createCount = 2; }
    if (d == 4) { createCount = 4; }
    if (createCount > 0) {
        UnitCreate(createCount, "Marauder", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai7AEF50D9_wave7_lastUnits[p], UnitLastCreatedGroup());
    }

    AIAttackWaveSend(p, ts, false);
    ai7AEF50D9_wave7_lastWave[p] = WaveLastCreated();
    ai7AEF50D9_lastWave[p] = ai7AEF50D9_wave7_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai7AEF50D9_wave7_run (int p, playergroup target, bool wait) {
    ai7AEF50D9_wave7_runPlayer = p;
    ai7AEF50D9_wave7_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai7AEF50D9_wave7_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: Night 1 - Wave 3 - East
//--------------------------------------------------------------------------------------------------
bool[17] ai7AEF50D9_wave8_enabled;
unitgroup[17] ai7AEF50D9_wave8_lastUnits;
wave[17] ai7AEF50D9_wave8_lastWave;
trigger ai7AEF50D9_wave8_trigger = null;
int ai7AEF50D9_wave8_runPlayer;
playergroup ai7AEF50D9_wave8_runTarget;

//--------------------------------------------------------------------------------------------------
void ai7AEF50D9_wave8_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai7AEF50D9_wave8_enabled[init_i] = true;
        ai7AEF50D9_wave8_lastUnits[init_i] = null;
        ai7AEF50D9_wave8_lastWave[init_i] = null;
    }

    ai7AEF50D9_wave8_trigger = TriggerCreate("ai7AEF50D9_wave8_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai7AEF50D9_wave8_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai7AEF50D9_wave8_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai7AEF50D9_wave8_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai7AEF50D9_wave8_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup ai7AEF50D9_wave8_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai7AEF50D9_wave8_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave ai7AEF50D9_wave8_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai7AEF50D9_wave8_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai7AEF50D9_wave8_runFunc (bool c, bool a) {
    int p = ai7AEF50D9_wave8_runPlayer;
    playergroup target = ai7AEF50D9_wave8_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai7AEF50D9_wave8_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai7AEF50D9_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 30; }
    if (d == 2) { ta = 30; }
    if (d == 3) { ta = 30; }
    if (d == 4) { ta = 30; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(953));

    gatherPoint = ai7AEF50D9_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    gatherPoint = PointFromId(98);
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(940), false);

    createPoint = gatherPoint;
    createPoint = PointFromId(234);

    ai7AEF50D9_wave8_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 4; }
    if (d == 2) { createCount = 4; }
    if (d == 3) { createCount = 4; }
    if (d == 4) { createCount = 4; }
    if (createCount > 0) {
        UnitCreate(createCount, "Roach", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai7AEF50D9_wave8_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 1; }
    if (d == 2) { createCount = 1; }
    if (d == 3) { createCount = 2; }
    if (d == 4) { createCount = 2; }
    if (createCount > 0) {
        UnitCreate(createCount, "Archon", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai7AEF50D9_wave8_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 3) { createCount = 1; }
    if (d == 4) { createCount = 2; }
    if (createCount > 0) {
        UnitCreate(createCount, "SiegeTank", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai7AEF50D9_wave8_lastUnits[p], UnitLastCreatedGroup());
    }

    AIAttackWaveSend(p, ts, false);
    ai7AEF50D9_wave8_lastWave[p] = WaveLastCreated();
    ai7AEF50D9_lastWave[p] = ai7AEF50D9_wave8_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai7AEF50D9_wave8_run (int p, playergroup target, bool wait) {
    ai7AEF50D9_wave8_runPlayer = p;
    ai7AEF50D9_wave8_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai7AEF50D9_wave8_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: Night 1 - Wave 4 - East
//--------------------------------------------------------------------------------------------------
bool[17] ai7AEF50D9_wave9_enabled;
unitgroup[17] ai7AEF50D9_wave9_lastUnits;
wave[17] ai7AEF50D9_wave9_lastWave;
trigger ai7AEF50D9_wave9_trigger = null;
int ai7AEF50D9_wave9_runPlayer;
playergroup ai7AEF50D9_wave9_runTarget;

//--------------------------------------------------------------------------------------------------
void ai7AEF50D9_wave9_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai7AEF50D9_wave9_enabled[init_i] = true;
        ai7AEF50D9_wave9_lastUnits[init_i] = null;
        ai7AEF50D9_wave9_lastWave[init_i] = null;
    }

    ai7AEF50D9_wave9_trigger = TriggerCreate("ai7AEF50D9_wave9_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai7AEF50D9_wave9_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai7AEF50D9_wave9_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai7AEF50D9_wave9_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai7AEF50D9_wave9_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup ai7AEF50D9_wave9_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai7AEF50D9_wave9_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave ai7AEF50D9_wave9_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai7AEF50D9_wave9_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai7AEF50D9_wave9_runFunc (bool c, bool a) {
    int p = ai7AEF50D9_wave9_runPlayer;
    playergroup target = ai7AEF50D9_wave9_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai7AEF50D9_wave9_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai7AEF50D9_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 25; }
    if (d == 2) { ta = 25; }
    if (d == 3) { ta = 25; }
    if (d == 4) { ta = 25; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(953));

    gatherPoint = ai7AEF50D9_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    gatherPoint = PointFromId(98);
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(940), false);

    createPoint = gatherPoint;
    createPoint = PointFromId(234);

    ai7AEF50D9_wave9_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 2; }
    if (d == 2) { createCount = 2; }
    if (d == 3) { createCount = 2; }
    if (d == 4) { createCount = 2; }
    if (createCount > 0) {
        UnitCreate(createCount, "WarHound", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai7AEF50D9_wave9_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 4) { createCount = 1; }
    if (createCount > 0) {
        UnitCreate(createCount, "Colossus", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai7AEF50D9_wave9_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 1; }
    if (d == 2) { createCount = 1; }
    if (d == 3) { createCount = 2; }
    if (d == 4) { createCount = 2; }
    if (createCount > 0) {
        UnitCreate(createCount, "Immortal", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai7AEF50D9_wave9_lastUnits[p], UnitLastCreatedGroup());
    }

    AIAttackWaveSend(p, ts, false);
    ai7AEF50D9_wave9_lastWave[p] = WaveLastCreated();
    ai7AEF50D9_lastWave[p] = ai7AEF50D9_wave9_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai7AEF50D9_wave9_run (int p, playergroup target, bool wait) {
    ai7AEF50D9_wave9_runPlayer = p;
    ai7AEF50D9_wave9_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai7AEF50D9_wave9_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: Night 2 - Wave 2 - East
//--------------------------------------------------------------------------------------------------
bool[17] ai7AEF50D9_wave11_enabled;
unitgroup[17] ai7AEF50D9_wave11_lastUnits;
wave[17] ai7AEF50D9_wave11_lastWave;
trigger ai7AEF50D9_wave11_trigger = null;
int ai7AEF50D9_wave11_runPlayer;
playergroup ai7AEF50D9_wave11_runTarget;

//--------------------------------------------------------------------------------------------------
void ai7AEF50D9_wave11_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai7AEF50D9_wave11_enabled[init_i] = true;
        ai7AEF50D9_wave11_lastUnits[init_i] = null;
        ai7AEF50D9_wave11_lastWave[init_i] = null;
    }

    ai7AEF50D9_wave11_trigger = TriggerCreate("ai7AEF50D9_wave11_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai7AEF50D9_wave11_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai7AEF50D9_wave11_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai7AEF50D9_wave11_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai7AEF50D9_wave11_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup ai7AEF50D9_wave11_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai7AEF50D9_wave11_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave ai7AEF50D9_wave11_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai7AEF50D9_wave11_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai7AEF50D9_wave11_runFunc (bool c, bool a) {
    int p = ai7AEF50D9_wave11_runPlayer;
    playergroup target = ai7AEF50D9_wave11_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai7AEF50D9_wave11_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai7AEF50D9_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 365; }
    if (d == 2) { ta = 365; }
    if (d == 3) { ta = 335; }
    if (d == 4) { ta = 335; }
    tg = 0;
    if (d == 1) { tg = 25; }
    if (d == 2) { tg = 25; }
    if (d == 3) { tg = 25; }
    if (d == 4) { tg = 25; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(953));

    gatherPoint = ai7AEF50D9_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    gatherPoint = PointFromId(98);
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(940), false);

    createPoint = gatherPoint;
    createPoint = PointFromId(234);

    ai7AEF50D9_wave11_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 4; }
    if (d == 2) { createCount = 4; }
    if (d == 3) { createCount = 4; }
    if (d == 4) { createCount = 6; }
    if (createCount > 0) {
        UnitCreate(createCount, "Roach", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai7AEF50D9_wave11_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 1; }
    if (d == 2) { createCount = 1; }
    if (d == 3) { createCount = 2; }
    if (d == 4) { createCount = 2; }
    if (createCount > 0) {
        UnitCreate(createCount, "Immortal", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai7AEF50D9_wave11_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 3) { createCount = 2; }
    if (d == 4) { createCount = 3; }
    if (createCount > 0) {
        UnitCreate(createCount, "Battlecruiser", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai7AEF50D9_wave11_lastUnits[p], UnitLastCreatedGroup());
    }

    AIAttackWaveSend(p, ts, false);
    ai7AEF50D9_wave11_lastWave[p] = WaveLastCreated();
    ai7AEF50D9_lastWave[p] = ai7AEF50D9_wave11_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai7AEF50D9_wave11_run (int p, playergroup target, bool wait) {
    ai7AEF50D9_wave11_runPlayer = p;
    ai7AEF50D9_wave11_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai7AEF50D9_wave11_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: Night 2 - Wave 7 - East
//--------------------------------------------------------------------------------------------------
bool[17] ai7AEF50D9_wave14_enabled;
unitgroup[17] ai7AEF50D9_wave14_lastUnits;
wave[17] ai7AEF50D9_wave14_lastWave;
trigger ai7AEF50D9_wave14_trigger = null;
int ai7AEF50D9_wave14_runPlayer;
playergroup ai7AEF50D9_wave14_runTarget;

//--------------------------------------------------------------------------------------------------
void ai7AEF50D9_wave14_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai7AEF50D9_wave14_enabled[init_i] = true;
        ai7AEF50D9_wave14_lastUnits[init_i] = null;
        ai7AEF50D9_wave14_lastWave[init_i] = null;
    }

    ai7AEF50D9_wave14_trigger = TriggerCreate("ai7AEF50D9_wave14_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai7AEF50D9_wave14_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai7AEF50D9_wave14_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai7AEF50D9_wave14_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai7AEF50D9_wave14_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup ai7AEF50D9_wave14_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai7AEF50D9_wave14_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave ai7AEF50D9_wave14_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai7AEF50D9_wave14_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai7AEF50D9_wave14_runFunc (bool c, bool a) {
    int p = ai7AEF50D9_wave14_runPlayer;
    playergroup target = ai7AEF50D9_wave14_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai7AEF50D9_wave14_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai7AEF50D9_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 90; }
    if (d == 2) { ta = 90; }
    if (d == 3) { ta = 90; }
    if (d == 4) { ta = 90; }
    tg = 0;
    if (d == 1) { tg = 25; }
    if (d == 2) { tg = 25; }
    if (d == 3) { tg = 25; }
    if (d == 4) { tg = 25; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(953));

    gatherPoint = ai7AEF50D9_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    gatherPoint = PointFromId(98);
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(940), false);

    createPoint = gatherPoint;
    createPoint = PointFromId(234);

    ai7AEF50D9_wave14_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 4; }
    if (d == 2) { createCount = 4; }
    if (d == 3) { createCount = 6; }
    if (d == 4) { createCount = 8; }
    if (createCount > 0) {
        UnitCreate(createCount, "Mutalisk", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai7AEF50D9_wave14_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 12; }
    if (d == 2) { createCount = 12; }
    if (d == 3) { createCount = 16; }
    if (d == 4) { createCount = 20; }
    if (createCount > 0) {
        UnitCreate(createCount, "Zergling", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai7AEF50D9_wave14_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 3) { createCount = 4; }
    if (d == 4) { createCount = 8; }
    if (createCount > 0) {
        UnitCreate(createCount, "Baneling", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai7AEF50D9_wave14_lastUnits[p], UnitLastCreatedGroup());
    }

    AIAttackWaveSend(p, ts, false);
    ai7AEF50D9_wave14_lastWave[p] = WaveLastCreated();
    ai7AEF50D9_lastWave[p] = ai7AEF50D9_wave14_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai7AEF50D9_wave14_run (int p, playergroup target, bool wait) {
    ai7AEF50D9_wave14_runPlayer = p;
    ai7AEF50D9_wave14_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai7AEF50D9_wave14_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: Night 3 - Wave 1 - East
//--------------------------------------------------------------------------------------------------
bool[17] ai7AEF50D9_wave15_enabled;
unitgroup[17] ai7AEF50D9_wave15_lastUnits;
wave[17] ai7AEF50D9_wave15_lastWave;
trigger ai7AEF50D9_wave15_trigger = null;
int ai7AEF50D9_wave15_runPlayer;
playergroup ai7AEF50D9_wave15_runTarget;

//--------------------------------------------------------------------------------------------------
void ai7AEF50D9_wave15_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai7AEF50D9_wave15_enabled[init_i] = true;
        ai7AEF50D9_wave15_lastUnits[init_i] = null;
        ai7AEF50D9_wave15_lastWave[init_i] = null;
    }

    ai7AEF50D9_wave15_trigger = TriggerCreate("ai7AEF50D9_wave15_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai7AEF50D9_wave15_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai7AEF50D9_wave15_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai7AEF50D9_wave15_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai7AEF50D9_wave15_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup ai7AEF50D9_wave15_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai7AEF50D9_wave15_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave ai7AEF50D9_wave15_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai7AEF50D9_wave15_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai7AEF50D9_wave15_runFunc (bool c, bool a) {
    int p = ai7AEF50D9_wave15_runPlayer;
    playergroup target = ai7AEF50D9_wave15_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai7AEF50D9_wave15_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai7AEF50D9_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 305; }
    if (d == 2) { ta = 305; }
    if (d == 3) { ta = 275; }
    if (d == 4) { ta = 275; }
    tg = 0;
    if (d == 1) { tg = 25; }
    if (d == 2) { tg = 25; }
    if (d == 3) { tg = 25; }
    if (d == 4) { tg = 25; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(953));

    gatherPoint = ai7AEF50D9_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    gatherPoint = PointFromId(98);
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(940), false);

    createPoint = gatherPoint;
    createPoint = PointFromId(234);

    ai7AEF50D9_wave15_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 4; }
    if (d == 2) { createCount = 4; }
    if (d == 3) { createCount = 5; }
    if (d == 4) { createCount = 6; }
    if (createCount > 0) {
        UnitCreate(createCount, "Scout", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai7AEF50D9_wave15_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 2; }
    if (d == 2) { createCount = 2; }
    if (d == 3) { createCount = 4; }
    if (d == 4) { createCount = 4; }
    if (createCount > 0) {
        UnitCreate(createCount, "InfestedAbomination", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai7AEF50D9_wave15_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 3) { createCount = 8; }
    if (d == 4) { createCount = 12; }
    if (createCount > 0) {
        UnitCreate(createCount, "Reaper", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai7AEF50D9_wave15_lastUnits[p], UnitLastCreatedGroup());
    }

    AIAttackWaveSend(p, ts, false);
    ai7AEF50D9_wave15_lastWave[p] = WaveLastCreated();
    ai7AEF50D9_lastWave[p] = ai7AEF50D9_wave15_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai7AEF50D9_wave15_run (int p, playergroup target, bool wait) {
    ai7AEF50D9_wave15_runPlayer = p;
    ai7AEF50D9_wave15_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai7AEF50D9_wave15_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: Night 3 - Wave 3 - East
//--------------------------------------------------------------------------------------------------
bool[17] ai7AEF50D9_wave16_enabled;
unitgroup[17] ai7AEF50D9_wave16_lastUnits;
wave[17] ai7AEF50D9_wave16_lastWave;
trigger ai7AEF50D9_wave16_trigger = null;
int ai7AEF50D9_wave16_runPlayer;
playergroup ai7AEF50D9_wave16_runTarget;

//--------------------------------------------------------------------------------------------------
void ai7AEF50D9_wave16_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai7AEF50D9_wave16_enabled[init_i] = true;
        ai7AEF50D9_wave16_lastUnits[init_i] = null;
        ai7AEF50D9_wave16_lastWave[init_i] = null;
    }

    ai7AEF50D9_wave16_trigger = TriggerCreate("ai7AEF50D9_wave16_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai7AEF50D9_wave16_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai7AEF50D9_wave16_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai7AEF50D9_wave16_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai7AEF50D9_wave16_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup ai7AEF50D9_wave16_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai7AEF50D9_wave16_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave ai7AEF50D9_wave16_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai7AEF50D9_wave16_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai7AEF50D9_wave16_runFunc (bool c, bool a) {
    int p = ai7AEF50D9_wave16_runPlayer;
    playergroup target = ai7AEF50D9_wave16_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai7AEF50D9_wave16_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai7AEF50D9_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 30; }
    if (d == 2) { ta = 30; }
    if (d == 3) { ta = 30; }
    if (d == 4) { ta = 30; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(953));

    gatherPoint = ai7AEF50D9_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    gatherPoint = PointFromId(98);
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(940), false);

    createPoint = gatherPoint;
    createPoint = PointFromId(234);

    ai7AEF50D9_wave16_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 2; }
    if (d == 2) { createCount = 2; }
    if (d == 3) { createCount = 3; }
    if (d == 4) { createCount = 4; }
    if (createCount > 0) {
        UnitCreate(createCount, "Colossus", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai7AEF50D9_wave16_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 12; }
    if (d == 2) { createCount = 12; }
    if (d == 3) { createCount = 14; }
    if (d == 4) { createCount = 16; }
    if (createCount > 0) {
        UnitCreate(createCount, "Zergling", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai7AEF50D9_wave16_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 8; }
    if (d == 2) { createCount = 8; }
    if (d == 3) { createCount = 10; }
    if (d == 4) { createCount = 12; }
    if (createCount > 0) {
        UnitCreate(createCount, "Marine", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai7AEF50D9_wave16_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 3) { createCount = 6; }
    if (d == 4) { createCount = 8; }
    if (createCount > 0) {
        UnitCreate(createCount, "Zealot", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai7AEF50D9_wave16_lastUnits[p], UnitLastCreatedGroup());
    }

    AIAttackWaveSend(p, ts, false);
    ai7AEF50D9_wave16_lastWave[p] = WaveLastCreated();
    ai7AEF50D9_lastWave[p] = ai7AEF50D9_wave16_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai7AEF50D9_wave16_run (int p, playergroup target, bool wait) {
    ai7AEF50D9_wave16_runPlayer = p;
    ai7AEF50D9_wave16_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai7AEF50D9_wave16_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: Night 3 - Wave 7 - East
//--------------------------------------------------------------------------------------------------
bool[17] ai7AEF50D9_wave1_enabled;
unitgroup[17] ai7AEF50D9_wave1_lastUnits;
wave[17] ai7AEF50D9_wave1_lastWave;
trigger ai7AEF50D9_wave1_trigger = null;
int ai7AEF50D9_wave1_runPlayer;
playergroup ai7AEF50D9_wave1_runTarget;

//--------------------------------------------------------------------------------------------------
void ai7AEF50D9_wave1_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai7AEF50D9_wave1_enabled[init_i] = true;
        ai7AEF50D9_wave1_lastUnits[init_i] = null;
        ai7AEF50D9_wave1_lastWave[init_i] = null;
    }

    ai7AEF50D9_wave1_trigger = TriggerCreate("ai7AEF50D9_wave1_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai7AEF50D9_wave1_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai7AEF50D9_wave1_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai7AEF50D9_wave1_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai7AEF50D9_wave1_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup ai7AEF50D9_wave1_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai7AEF50D9_wave1_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave ai7AEF50D9_wave1_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai7AEF50D9_wave1_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai7AEF50D9_wave1_runFunc (bool c, bool a) {
    int p = ai7AEF50D9_wave1_runPlayer;
    playergroup target = ai7AEF50D9_wave1_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai7AEF50D9_wave1_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai7AEF50D9_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 80; }
    if (d == 2) { ta = 80; }
    if (d == 3) { ta = 80; }
    if (d == 4) { ta = 80; }
    tg = 0;
    if (d == 1) { tg = 25; }
    if (d == 2) { tg = 25; }
    if (d == 3) { tg = 25; }
    if (d == 4) { tg = 25; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(953));

    gatherPoint = ai7AEF50D9_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    gatherPoint = PointFromId(98);
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(940), false);

    createPoint = gatherPoint;
    createPoint = PointFromId(234);

    ai7AEF50D9_wave1_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 18; }
    if (d == 2) { createCount = 18; }
    if (d == 3) { createCount = 18; }
    if (d == 4) { createCount = 24; }
    if (createCount > 0) {
        UnitCreate(createCount, "Zealot", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai7AEF50D9_wave1_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 3) { createCount = 2; }
    if (d == 4) { createCount = 3; }
    if (createCount > 0) {
        UnitCreate(createCount, "Carrier", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai7AEF50D9_wave1_lastUnits[p], UnitLastCreatedGroup());
    }

    AIAttackWaveSend(p, ts, false);
    ai7AEF50D9_wave1_lastWave[p] = WaveLastCreated();
    ai7AEF50D9_lastWave[p] = ai7AEF50D9_wave1_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai7AEF50D9_wave1_run (int p, playergroup target, bool wait) {
    ai7AEF50D9_wave1_runPlayer = p;
    ai7AEF50D9_wave1_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai7AEF50D9_wave1_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: Night 4 - Wave 1 - East
//--------------------------------------------------------------------------------------------------
bool[17] ai7AEF50D9_wave24_enabled;
unitgroup[17] ai7AEF50D9_wave24_lastUnits;
wave[17] ai7AEF50D9_wave24_lastWave;
trigger ai7AEF50D9_wave24_trigger = null;
int ai7AEF50D9_wave24_runPlayer;
playergroup ai7AEF50D9_wave24_runTarget;

//--------------------------------------------------------------------------------------------------
void ai7AEF50D9_wave24_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai7AEF50D9_wave24_enabled[init_i] = true;
        ai7AEF50D9_wave24_lastUnits[init_i] = null;
        ai7AEF50D9_wave24_lastWave[init_i] = null;
    }

    ai7AEF50D9_wave24_trigger = TriggerCreate("ai7AEF50D9_wave24_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai7AEF50D9_wave24_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai7AEF50D9_wave24_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai7AEF50D9_wave24_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai7AEF50D9_wave24_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup ai7AEF50D9_wave24_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai7AEF50D9_wave24_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave ai7AEF50D9_wave24_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai7AEF50D9_wave24_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai7AEF50D9_wave24_runFunc (bool c, bool a) {
    int p = ai7AEF50D9_wave24_runPlayer;
    playergroup target = ai7AEF50D9_wave24_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai7AEF50D9_wave24_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai7AEF50D9_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 310; }
    if (d == 2) { ta = 310; }
    if (d == 3) { ta = 280; }
    if (d == 4) { ta = 280; }
    tg = 0;
    if (d == 1) { tg = 25; }
    if (d == 2) { tg = 25; }
    if (d == 3) { tg = 25; }
    if (d == 4) { tg = 25; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(953));

    gatherPoint = ai7AEF50D9_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    gatherPoint = PointFromId(98);
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(940), false);

    createPoint = gatherPoint;
    createPoint = PointFromId(234);

    ai7AEF50D9_wave24_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 24; }
    if (d == 2) { createCount = 24; }
    if (d == 3) { createCount = 30; }
    if (d == 4) { createCount = 30; }
    if (createCount > 0) {
        UnitCreate(createCount, "Zergling", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai7AEF50D9_wave24_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 3; }
    if (d == 2) { createCount = 3; }
    if (d == 3) { createCount = 6; }
    if (d == 4) { createCount = 8; }
    if (createCount > 0) {
        UnitCreate(createCount, "Mutalisk", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai7AEF50D9_wave24_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 3) { createCount = 6; }
    if (d == 4) { createCount = 9; }
    if (createCount > 0) {
        UnitCreate(createCount, "Baneling", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai7AEF50D9_wave24_lastUnits[p], UnitLastCreatedGroup());
    }

    AIAttackWaveSend(p, ts, false);
    ai7AEF50D9_wave24_lastWave[p] = WaveLastCreated();
    ai7AEF50D9_lastWave[p] = ai7AEF50D9_wave24_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai7AEF50D9_wave24_run (int p, playergroup target, bool wait) {
    ai7AEF50D9_wave24_runPlayer = p;
    ai7AEF50D9_wave24_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai7AEF50D9_wave24_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: Night 4 - Wave 5 - East
//--------------------------------------------------------------------------------------------------
bool[17] ai7AEF50D9_wave23_enabled;
unitgroup[17] ai7AEF50D9_wave23_lastUnits;
wave[17] ai7AEF50D9_wave23_lastWave;
trigger ai7AEF50D9_wave23_trigger = null;
int ai7AEF50D9_wave23_runPlayer;
playergroup ai7AEF50D9_wave23_runTarget;

//--------------------------------------------------------------------------------------------------
void ai7AEF50D9_wave23_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai7AEF50D9_wave23_enabled[init_i] = true;
        ai7AEF50D9_wave23_lastUnits[init_i] = null;
        ai7AEF50D9_wave23_lastWave[init_i] = null;
    }

    ai7AEF50D9_wave23_trigger = TriggerCreate("ai7AEF50D9_wave23_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai7AEF50D9_wave23_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai7AEF50D9_wave23_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai7AEF50D9_wave23_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai7AEF50D9_wave23_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup ai7AEF50D9_wave23_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai7AEF50D9_wave23_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave ai7AEF50D9_wave23_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai7AEF50D9_wave23_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai7AEF50D9_wave23_runFunc (bool c, bool a) {
    int p = ai7AEF50D9_wave23_runPlayer;
    playergroup target = ai7AEF50D9_wave23_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai7AEF50D9_wave23_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai7AEF50D9_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 90; }
    if (d == 2) { ta = 90; }
    if (d == 3) { ta = 90; }
    if (d == 4) { ta = 90; }
    tg = 0;
    if (d == 1) { tg = 30; }
    if (d == 2) { tg = 30; }
    if (d == 3) { tg = 30; }
    if (d == 4) { tg = 30; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(953));

    gatherPoint = ai7AEF50D9_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    gatherPoint = PointFromId(98);
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(940), false);

    createPoint = gatherPoint;
    createPoint = PointFromId(234);

    ai7AEF50D9_wave23_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 5; }
    if (d == 2) { createCount = 5; }
    if (d == 3) { createCount = 6; }
    if (d == 4) { createCount = 8; }
    if (createCount > 0) {
        UnitCreate(createCount, "Hydralisk", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai7AEF50D9_wave23_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 2; }
    if (d == 2) { createCount = 2; }
    if (d == 3) { createCount = 3; }
    if (d == 4) { createCount = 3; }
    if (createCount > 0) {
        UnitCreate(createCount, "Battlecruiser", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai7AEF50D9_wave23_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 2; }
    if (d == 2) { createCount = 2; }
    if (d == 3) { createCount = 3; }
    if (d == 4) { createCount = 5; }
    if (createCount > 0) {
        UnitCreate(createCount, "SiegeTank", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai7AEF50D9_wave23_lastUnits[p], UnitLastCreatedGroup());
    }

    AIAttackWaveSend(p, ts, false);
    ai7AEF50D9_wave23_lastWave[p] = WaveLastCreated();
    ai7AEF50D9_lastWave[p] = ai7AEF50D9_wave23_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai7AEF50D9_wave23_run (int p, playergroup target, bool wait) {
    ai7AEF50D9_wave23_runPlayer = p;
    ai7AEF50D9_wave23_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai7AEF50D9_wave23_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: Night 5 - Wave 1 - East
//--------------------------------------------------------------------------------------------------
bool[17] ai7AEF50D9_wave22_enabled;
unitgroup[17] ai7AEF50D9_wave22_lastUnits;
wave[17] ai7AEF50D9_wave22_lastWave;
trigger ai7AEF50D9_wave22_trigger = null;
int ai7AEF50D9_wave22_runPlayer;
playergroup ai7AEF50D9_wave22_runTarget;

//--------------------------------------------------------------------------------------------------
void ai7AEF50D9_wave22_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai7AEF50D9_wave22_enabled[init_i] = true;
        ai7AEF50D9_wave22_lastUnits[init_i] = null;
        ai7AEF50D9_wave22_lastWave[init_i] = null;
    }

    ai7AEF50D9_wave22_trigger = TriggerCreate("ai7AEF50D9_wave22_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai7AEF50D9_wave22_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai7AEF50D9_wave22_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai7AEF50D9_wave22_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai7AEF50D9_wave22_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup ai7AEF50D9_wave22_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai7AEF50D9_wave22_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave ai7AEF50D9_wave22_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai7AEF50D9_wave22_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai7AEF50D9_wave22_runFunc (bool c, bool a) {
    int p = ai7AEF50D9_wave22_runPlayer;
    playergroup target = ai7AEF50D9_wave22_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai7AEF50D9_wave22_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai7AEF50D9_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 330; }
    if (d == 2) { ta = 330; }
    if (d == 3) { ta = 300; }
    if (d == 4) { ta = 300; }
    tg = 0;
    if (d == 1) { tg = 25; }
    if (d == 2) { tg = 25; }
    if (d == 3) { tg = 25; }
    if (d == 4) { tg = 25; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(953));

    gatherPoint = ai7AEF50D9_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    gatherPoint = PointFromId(98);
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(940), false);

    createPoint = gatherPoint;
    createPoint = PointFromId(234);

    ai7AEF50D9_wave22_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 6; }
    if (d == 2) { createCount = 6; }
    if (d == 3) { createCount = 8; }
    if (d == 4) { createCount = 10; }
    if (createCount > 0) {
        UnitCreate(createCount, "Roach", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai7AEF50D9_wave22_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 3; }
    if (d == 2) { createCount = 3; }
    if (d == 3) { createCount = 4; }
    if (d == 4) { createCount = 4; }
    if (createCount > 0) {
        UnitCreate(createCount, "Colossus", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai7AEF50D9_wave22_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 2; }
    if (d == 2) { createCount = 2; }
    if (d == 3) { createCount = 3; }
    if (d == 4) { createCount = 3; }
    if (createCount > 0) {
        UnitCreate(createCount, "Raven", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai7AEF50D9_wave22_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 3) { createCount = 3; }
    if (d == 4) { createCount = 5; }
    if (createCount > 0) {
        UnitCreate(createCount, "Banshee", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai7AEF50D9_wave22_lastUnits[p], UnitLastCreatedGroup());
    }

    AIAttackWaveSend(p, ts, false);
    ai7AEF50D9_wave22_lastWave[p] = WaveLastCreated();
    ai7AEF50D9_lastWave[p] = ai7AEF50D9_wave22_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai7AEF50D9_wave22_run (int p, playergroup target, bool wait) {
    ai7AEF50D9_wave22_runPlayer = p;
    ai7AEF50D9_wave22_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai7AEF50D9_wave22_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: Night 5 - Wave 5 - East
//--------------------------------------------------------------------------------------------------
bool[17] ai7AEF50D9_wave25_enabled;
unitgroup[17] ai7AEF50D9_wave25_lastUnits;
wave[17] ai7AEF50D9_wave25_lastWave;
trigger ai7AEF50D9_wave25_trigger = null;
int ai7AEF50D9_wave25_runPlayer;
playergroup ai7AEF50D9_wave25_runTarget;

//--------------------------------------------------------------------------------------------------
void ai7AEF50D9_wave25_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai7AEF50D9_wave25_enabled[init_i] = true;
        ai7AEF50D9_wave25_lastUnits[init_i] = null;
        ai7AEF50D9_wave25_lastWave[init_i] = null;
    }

    ai7AEF50D9_wave25_trigger = TriggerCreate("ai7AEF50D9_wave25_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai7AEF50D9_wave25_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai7AEF50D9_wave25_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai7AEF50D9_wave25_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai7AEF50D9_wave25_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup ai7AEF50D9_wave25_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai7AEF50D9_wave25_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave ai7AEF50D9_wave25_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai7AEF50D9_wave25_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai7AEF50D9_wave25_runFunc (bool c, bool a) {
    int p = ai7AEF50D9_wave25_runPlayer;
    playergroup target = ai7AEF50D9_wave25_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai7AEF50D9_wave25_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai7AEF50D9_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 90; }
    if (d == 2) { ta = 90; }
    if (d == 3) { ta = 90; }
    if (d == 4) { ta = 90; }
    tg = 0;
    if (d == 1) { tg = 30; }
    if (d == 2) { tg = 30; }
    if (d == 3) { tg = 30; }
    if (d == 4) { tg = 30; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(953));

    gatherPoint = ai7AEF50D9_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    gatherPoint = PointFromId(98);
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(940), false);

    createPoint = gatherPoint;
    createPoint = PointFromId(234);

    ai7AEF50D9_wave25_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 5; }
    if (d == 2) { createCount = 5; }
    if (d == 3) { createCount = 7; }
    if (d == 4) { createCount = 9; }
    if (createCount > 0) {
        UnitCreate(createCount, "Stalker", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai7AEF50D9_wave25_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 3; }
    if (d == 2) { createCount = 3; }
    if (d == 3) { createCount = 5; }
    if (d == 4) { createCount = 6; }
    if (createCount > 0) {
        UnitCreate(createCount, "Banshee", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai7AEF50D9_wave25_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 2; }
    if (d == 2) { createCount = 2; }
    if (d == 3) { createCount = 4; }
    if (d == 4) { createCount = 6; }
    if (createCount > 0) {
        UnitCreate(createCount, "Immortal", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai7AEF50D9_wave25_lastUnits[p], UnitLastCreatedGroup());
    }

    AIAttackWaveSend(p, ts, false);
    ai7AEF50D9_wave25_lastWave[p] = WaveLastCreated();
    ai7AEF50D9_lastWave[p] = ai7AEF50D9_wave25_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai7AEF50D9_wave25_run (int p, playergroup target, bool wait) {
    ai7AEF50D9_wave25_runPlayer = p;
    ai7AEF50D9_wave25_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai7AEF50D9_wave25_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave Wrappers
//--------------------------------------------------------------------------------------------------
void ai7AEF50D9_wave_enable (int w, int p, bool val) {
    if (w == 6) { ai7AEF50D9_wave6_enable(p, val); }
    if (w == 7) { ai7AEF50D9_wave7_enable(p, val); }
    if (w == 8) { ai7AEF50D9_wave8_enable(p, val); }
    if (w == 9) { ai7AEF50D9_wave9_enable(p, val); }
    if (w == 11) { ai7AEF50D9_wave11_enable(p, val); }
    if (w == 14) { ai7AEF50D9_wave14_enable(p, val); }
    if (w == 15) { ai7AEF50D9_wave15_enable(p, val); }
    if (w == 16) { ai7AEF50D9_wave16_enable(p, val); }
    if (w == 1) { ai7AEF50D9_wave1_enable(p, val); }
    if (w == 24) { ai7AEF50D9_wave24_enable(p, val); }
    if (w == 23) { ai7AEF50D9_wave23_enable(p, val); }
    if (w == 22) { ai7AEF50D9_wave22_enable(p, val); }
    if (w == 25) { ai7AEF50D9_wave25_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
bool ai7AEF50D9_wave_isEnabled (int w, int p) {
    if (w == 6) { return ai7AEF50D9_wave6_isEnabled(p); }
    if (w == 7) { return ai7AEF50D9_wave7_isEnabled(p); }
    if (w == 8) { return ai7AEF50D9_wave8_isEnabled(p); }
    if (w == 9) { return ai7AEF50D9_wave9_isEnabled(p); }
    if (w == 11) { return ai7AEF50D9_wave11_isEnabled(p); }
    if (w == 14) { return ai7AEF50D9_wave14_isEnabled(p); }
    if (w == 15) { return ai7AEF50D9_wave15_isEnabled(p); }
    if (w == 16) { return ai7AEF50D9_wave16_isEnabled(p); }
    if (w == 1) { return ai7AEF50D9_wave1_isEnabled(p); }
    if (w == 24) { return ai7AEF50D9_wave24_isEnabled(p); }
    if (w == 23) { return ai7AEF50D9_wave23_isEnabled(p); }
    if (w == 22) { return ai7AEF50D9_wave22_isEnabled(p); }
    if (w == 25) { return ai7AEF50D9_wave25_isEnabled(p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup ai7AEF50D9_wave_createdUnits (int w, int p) {
    if (w == 6) { return ai7AEF50D9_wave6_createdUnits(p); }
    if (w == 7) { return ai7AEF50D9_wave7_createdUnits(p); }
    if (w == 8) { return ai7AEF50D9_wave8_createdUnits(p); }
    if (w == 9) { return ai7AEF50D9_wave9_createdUnits(p); }
    if (w == 11) { return ai7AEF50D9_wave11_createdUnits(p); }
    if (w == 14) { return ai7AEF50D9_wave14_createdUnits(p); }
    if (w == 15) { return ai7AEF50D9_wave15_createdUnits(p); }
    if (w == 16) { return ai7AEF50D9_wave16_createdUnits(p); }
    if (w == 1) { return ai7AEF50D9_wave1_createdUnits(p); }
    if (w == 24) { return ai7AEF50D9_wave24_createdUnits(p); }
    if (w == 23) { return ai7AEF50D9_wave23_createdUnits(p); }
    if (w == 22) { return ai7AEF50D9_wave22_createdUnits(p); }
    if (w == 25) { return ai7AEF50D9_wave25_createdUnits(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave ai7AEF50D9_wave_createdWave (int w, int p) {
    if (w == 6) { return ai7AEF50D9_wave6_createdWave(p); }
    if (w == 7) { return ai7AEF50D9_wave7_createdWave(p); }
    if (w == 8) { return ai7AEF50D9_wave8_createdWave(p); }
    if (w == 9) { return ai7AEF50D9_wave9_createdWave(p); }
    if (w == 11) { return ai7AEF50D9_wave11_createdWave(p); }
    if (w == 14) { return ai7AEF50D9_wave14_createdWave(p); }
    if (w == 15) { return ai7AEF50D9_wave15_createdWave(p); }
    if (w == 16) { return ai7AEF50D9_wave16_createdWave(p); }
    if (w == 1) { return ai7AEF50D9_wave1_createdWave(p); }
    if (w == 24) { return ai7AEF50D9_wave24_createdWave(p); }
    if (w == 23) { return ai7AEF50D9_wave23_createdWave(p); }
    if (w == 22) { return ai7AEF50D9_wave22_createdWave(p); }
    if (w == 25) { return ai7AEF50D9_wave25_createdWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void ai7AEF50D9_wave_run (int w, int p, playergroup target, bool wait) {
    if (w == 6) { ai7AEF50D9_wave6_run(p, target, wait); }
    if (w == 7) { ai7AEF50D9_wave7_run(p, target, wait); }
    if (w == 8) { ai7AEF50D9_wave8_run(p, target, wait); }
    if (w == 9) { ai7AEF50D9_wave9_run(p, target, wait); }
    if (w == 11) { ai7AEF50D9_wave11_run(p, target, wait); }
    if (w == 14) { ai7AEF50D9_wave14_run(p, target, wait); }
    if (w == 15) { ai7AEF50D9_wave15_run(p, target, wait); }
    if (w == 16) { ai7AEF50D9_wave16_run(p, target, wait); }
    if (w == 1) { ai7AEF50D9_wave1_run(p, target, wait); }
    if (w == 24) { ai7AEF50D9_wave24_run(p, target, wait); }
    if (w == 23) { ai7AEF50D9_wave23_run(p, target, wait); }
    if (w == 22) { ai7AEF50D9_wave22_run(p, target, wait); }
    if (w == 25) { ai7AEF50D9_wave25_run(p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
// Attack Wave Sequence
//--------------------------------------------------------------------------------------------------
trigger ai7AEF50D9_waves_trigger = null;
int ai7AEF50D9_waves_runPlayer;
playergroup ai7AEF50D9_waves_runTarget;

//--------------------------------------------------------------------------------------------------
void ai7AEF50D9_waves_init () {
    ai7AEF50D9_waves_trigger = TriggerCreate("ai7AEF50D9_waves_runFunc");
}

//--------------------------------------------------------------------------------------------------
bool ai7AEF50D9_waves_runFunc (bool c, bool a) {
    int p = ai7AEF50D9_waves_runPlayer;
    playergroup target = ai7AEF50D9_waves_runTarget;

    if (p < 0 || p >= 16) {
        return false;
    }

    // Night 1 @ 60/60/60/60
    ai7AEF50D9_wave6_run(p, target, true);
    ai7AEF50D9_wave7_run(p, target, true);
    ai7AEF50D9_wave8_run(p, target, true);
    ai7AEF50D9_wave9_run(p, target, true);
    ai7AEF50D9_wave11_run(p, target, true);
    ai7AEF50D9_wave14_run(p, target, true);
    // Night 3 @ 900/900/840/840
    ai7AEF50D9_wave15_run(p, target, true);
    ai7AEF50D9_wave16_run(p, target, true);
    ai7AEF50D9_wave1_run(p, target, true);
    // Night 4 @ 1320/1320/1230/1230
    ai7AEF50D9_wave24_run(p, target, true);
    ai7AEF50D9_wave23_run(p, target, true);
    ai7AEF50D9_wave22_run(p, target, true);
    ai7AEF50D9_wave25_run(p, target, true);

    while (true) {
        ai7AEF50D9_wave22_run(p, target, true);
        ai7AEF50D9_wave25_run(p, target, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai7AEF50D9_waves_run (int p, playergroup target) {
    ai7AEF50D9_waves_runPlayer = p;
    ai7AEF50D9_waves_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai7AEF50D9_waves_trigger, false, false);
}

//--------------------------------------------------------------------------------------------------
void ai7AEF50D9_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }

    ai7AEF50D9_wave6_enable(p, val);
    ai7AEF50D9_wave7_enable(p, val);
    ai7AEF50D9_wave8_enable(p, val);
    ai7AEF50D9_wave9_enable(p, val);
    ai7AEF50D9_wave11_enable(p, val);
    ai7AEF50D9_wave14_enable(p, val);
    ai7AEF50D9_wave15_enable(p, val);
    ai7AEF50D9_wave16_enable(p, val);
    ai7AEF50D9_wave1_enable(p, val);
    ai7AEF50D9_wave24_enable(p, val);
    ai7AEF50D9_wave23_enable(p, val);
    ai7AEF50D9_wave22_enable(p, val);
    ai7AEF50D9_wave25_enable(p, val);
}

//--------------------------------------------------------------------------------------------------
void ai7AEF50D9_waves_stop () {
    TriggerStop(ai7AEF50D9_waves_trigger);

    TriggerStop(ai7AEF50D9_wave6_trigger);
    TriggerStop(ai7AEF50D9_wave7_trigger);
    TriggerStop(ai7AEF50D9_wave8_trigger);
    TriggerStop(ai7AEF50D9_wave9_trigger);
    TriggerStop(ai7AEF50D9_wave11_trigger);
    TriggerStop(ai7AEF50D9_wave14_trigger);
    TriggerStop(ai7AEF50D9_wave15_trigger);
    TriggerStop(ai7AEF50D9_wave16_trigger);
    TriggerStop(ai7AEF50D9_wave1_trigger);
    TriggerStop(ai7AEF50D9_wave24_trigger);
    TriggerStop(ai7AEF50D9_wave23_trigger);
    TriggerStop(ai7AEF50D9_wave22_trigger);
    TriggerStop(ai7AEF50D9_wave25_trigger);
}

//--------------------------------------------------------------------------------------------------
// Configuration
//--------------------------------------------------------------------------------------------------
void ai7AEF50D9_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai7AEF50D9_defGather[p] = val;
}

//--------------------------------------------------------------------------------------------------
string ai7AEF50D9_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai7AEF50D9_customData[p];
}

//--------------------------------------------------------------------------------------------------
wave ai7AEF50D9_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai7AEF50D9_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
// Start
//--------------------------------------------------------------------------------------------------
bool ai7AEF50D9_initialized = false;

//--------------------------------------------------------------------------------------------------
void ai7AEF50D9_start (int p) {
    int init_i;

    if (p < 0 || p >= 16) {
        return;
    }
    if (!ai7AEF50D9_initialized) {
        ai7AEF50D9_wave6_init();
        ai7AEF50D9_wave7_init();
        ai7AEF50D9_wave8_init();
        ai7AEF50D9_wave9_init();
        ai7AEF50D9_wave11_init();
        ai7AEF50D9_wave14_init();
        ai7AEF50D9_wave15_init();
        ai7AEF50D9_wave16_init();
        ai7AEF50D9_wave1_init();
        ai7AEF50D9_wave24_init();
        ai7AEF50D9_wave23_init();
        ai7AEF50D9_wave22_init();
        ai7AEF50D9_wave25_init();
        ai7AEF50D9_waves_init();

        for (init_i = 0; init_i <= 16; init_i += 1) {
            ai7AEF50D9_defGather[init_i] = PointFromId(98);
        }

        ai7AEF50D9_initialized = true;
    }

    AICampaignStart(p);
}
