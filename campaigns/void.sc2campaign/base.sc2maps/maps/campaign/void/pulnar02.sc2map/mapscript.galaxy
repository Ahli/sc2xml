//==================================================================================================
// 
// Generated Map Script
// 
// Name:   The Infinite Cycle
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"
include "TriggerLibs/VoidLib"
include "TriggerLibs/VoidCampaignLib"
include "TriggerLibs/VoidCampaignMissionLib"
include "TriggerLibs/VoidCampaignUILib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libHots_InitLib();
    libLotv_InitLib();
    libVoiC_InitLib();
    libVCMI_InitLib();
    libVCUI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_DOMINION = 2;
const int gv_pLAYER_02_DOMINION4 = 3;
const int gv_pLAYER_02_DOMINION2 = 4;
const int gv_pLAYER_02_DOMINION3 = 5;
const int gv_pLAYER_02_DOMINION5 = 6;
const int gv_pLAYER_02_DOMINION7 = 8;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_RECORD_XelNagaGate {
    int lv_state;
    unit lv_gateUnit;
    region lv_gateRegion;
};

struct gs_RECORD_Autorevealer {
    region lv_region;
    revealer lv_revealer;
    bool lv_active;
};

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_PRESET_GateState_Open = 0;
const int ge_PRESET_GateState_Closed = 1;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
string gv_mapMusicTrack;
unit gv_speaker;
unitgroup gv_skyReavers;
unitgroup gv_skyDestroyers;
unitgroup gv_globalEnemyUnits;
int gv_hallsReached;
int gv_currentStage;
int gv_mainObjectivePing;
gs_RECORD_XelNagaGate[16] gv_xelNagaGates;
int gv_numberOfGates;
int gv_s1FirstEncounterTransmission;
unitgroup gv_s1FirstEncounterGroup;
int gv_s1FirstEncounterReticleTextTag;
actor gv_s1FirstEncounterReticleActor;
bool gv_s1LightningDashUsed;
unitgroup gv_s1HoldOutUnitGroup;
unit gv_s1HoldOutInvisiblePylon;
timer gv_holdoutTimer;
int gv_holdoutTimerWindow;
unit gv_s1DoubleDoorSphere;
unit gv_s1DoubleDoorCube;
point gv_s1DoubleDoorSphereTarget;
point gv_s1DoubleDoorCubeTarget;
unit gv_s2WarpPrismLeft;
unit gv_s2WarpPrismRight;
unitgroup gv_s2TaldarimAttackGroup;
unit gv_s2DoubleConstructCube;
unit gv_s2DoubleConstructSphere;
point gv_s2DoubleConstructCubeTarget;
point gv_s2DoubleConstructSphereTarget;
unitgroup gv_s2HallAttackGroup;
fixed gv_s3TimeLimit;
timer gv_s3Timer;
int gv_s3TimerWindow;
unitgroup gv_s3HybridGroup01;
unitgroup gv_s3FinalRoomShrineAttackGroup;
unit gv_s3FinalRoomRangedTarget;
unit gv_s3FinalRoomMeleeTarget01;
unit gv_s3FinalRoomMeleeTarget02;
unit gv_s3FinalRoomMeleeTarget03;
unitgroup gv_s3FinalRoomNonShrineAttackGroup;
unit gv_aRTANIS;
unit gv_kERRIGAN;
revealer gv_lightningDashRevealer;
bool gv_initialLightningDashUsed;
int gv_lightningDashTransmission;
int gv_devicesCollected;
int gv_bonusObjectivePing1;
int gv_bonusObjectivePing2;
int gv_bonusObjectivePing3;
revealer gv_bonusObjectiveRevealer1;
revealer gv_bonusObjectiveRevealer2;
revealer gv_bonusObjectiveRevealer3;
gs_RECORD_Autorevealer[16] gv_autorevealers;
int gv_numberOfAutorevealers;
unit gv_firstConstruct;
int gv_banelingKillCount;
int gv_lightningDashDamage;
int gv_loadedMedivacKillCount;
int gv_resurgenceActivationCount;
bool gv__10thAnniversaryAchievementEnemyWarpPrismwarpedinunits;
int gv_objectiveDestroyZergBase;
int gv_objectiveDestroyZergBase2;
int gv_objectiveRescueStalkers;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicPausedUnits;
unitgroup gv_cinematicTempUnits;
bool gv_cinematicCompleted;
sound gv_cinematicSound1;
unit gv_introHybrid;
sound gv_midSound;
bool gv_midHoldoutUnitsSpawned;
bool gv_midSeamlessIntro;
sound gv_victorySound;
bool gv_victoryAmbienceComplete;

void InitGlobals () {
    int init_i;

    gv_skyReavers = UnitGroupEmpty();
    gv_skyDestroyers = UnitGroupEmpty();
    gv_globalEnemyUnits = UnitGroupEmpty();
    gv_mainObjectivePing = c_invalidPingId;
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_xelNagaGates[init_i].lv_state = ge_PRESET_GateState_Closed;
    }
    gv_s1FirstEncounterTransmission = c_invalidTransmissionId;
    gv_s1FirstEncounterGroup = UnitGroupEmpty();
    gv_s1FirstEncounterReticleTextTag = c_textTagNone;
    gv_s1HoldOutUnitGroup = UnitGroupEmpty();
    gv_holdoutTimer = TimerCreate();
    gv_holdoutTimerWindow = c_timerWindowNone;
    gv_s2TaldarimAttackGroup = UnitGroupEmpty();
    gv_s2HallAttackGroup = UnitGroupEmpty();
    gv_s3Timer = TimerCreate();
    gv_s3TimerWindow = c_timerWindowNone;
    gv_s3HybridGroup01 = UnitGroupEmpty();
    gv_s3FinalRoomShrineAttackGroup = UnitGroupEmpty();
    gv_s3FinalRoomNonShrineAttackGroup = UnitGroupEmpty();
    gv_lightningDashTransmission = c_invalidTransmissionId;
    gv_bonusObjectivePing1 = c_invalidPingId;
    gv_bonusObjectivePing2 = c_invalidPingId;
    gv_bonusObjectivePing3 = c_invalidPingId;
    gv_objectiveDestroyZergBase = c_invalidObjectiveId;
    gv_objectiveDestroyZergBase2 = c_invalidObjectiveId;
    gv_objectiveRescueStalkers = c_invalidObjectiveId;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_SendMedivacDrop (point lp_sPAWN, point lp_dESPAWN, point lp_tARGET, int lp_cARGO_AMOUNT, string lp_cARGO_TYPE);
void gf_SpawnSkyReaver (point lp_pOINT);
void gf_SpawnSkyDestroyer (point lp_cHOSEN_POINT);
void gf_PingandMonitorConstructGroup (unitgroup lp_constructGroup);
void gf_AwakenConstruct (unit lp_construct, bool lp_awakenInstantly);
void gf_MonitorConstructVisibility (unit lp_construct);
void gf_CreateXelnagaDoorPing (unit lp_doorKey);
void gf_SpawnSideStalker (point lp_spawnPoint, point lp_movePoint, point lp_blinkPoint);
void gf_SpawnS1HoldoutProtoss (string lp_type, point lp_location);
void gf_CreatePlanetCrackerBreach (point lp_point);
void gf_FlyInWarpPrism (point lp_point);
void gf_ActivateHybridDominatorAI (unit lp_hybrid);
void gf_CreatePlanetCrackerPath (point lp_startPoint, point lp_endPoint);
void gf_MakeHybridStopAttackingShrine (unit lp_hybridUnit);
void gf_AstralWindHighlight (unitgroup lp_attackGroup);
void gf_ActivateXelNagaConstructAI (unit lp_construct);
void gf_ActivateChargedCrystalAI (unit lp_crystal);
void gf_ActivateHybridBehemothAI (unit lp_hybrid);
void gf_ActivateStalkerBlinkAI (unit lp_stalker, point lp_centralPoint);
void gf_ActivateGenericEnemyAI (unit lp_enemyUnit);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04MusicSound;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_DebugHoldout1;
trigger gt_DebugStage2;
trigger gt_DebugHoldout2;
trigger gt_DebugStage3;
trigger gt_DebugCleanupGeneral;
trigger gt_DebugCleanupStage1;
trigger gt_DebugCleanupHoldout1;
trigger gt_DebugCleanupStage2;
trigger gt_DebugCleanupStage3;
trigger gt_InitGates;
trigger gt_StartGameStage01Q;
trigger gt_S1AnimateXelNagaPillarwall;
trigger gt_S1ReachedFirstDoorQ;
trigger gt_S1FirstEncounterTargetsDead;
trigger gt_S1LightningDashUsed;
trigger gt_S1AwakenOrangeConstruct01Q;
trigger gt_S1OrangeConstruct01DeadQ;
trigger gt_S1SkyHybrid;
trigger gt_S1SkyHybridQ;
trigger gt_S1AwakenBlueConstruct01;
trigger gt_S1BlueConstruct01Q;
trigger gt_S1Room2BlueConstructDead;
trigger gt_S1AwakenOrangeConstruct02;
trigger gt_S1OrangeConstruct02ShadowStepQ;
trigger gt_S1OrangeConstruct02Dead;
trigger gt_S1OpenSecondDoor;
trigger gt_S1HallReached;
trigger gt_S1HallReachedQ;
trigger gt_S1Holdout;
trigger gt_S1HoldoutEndQ;
trigger gt_S1ProtossUnitWarpedIn;
trigger gt_StartGameStage02Q;
trigger gt_S2TaldarimAttack;
trigger gt_S2TaldarimAttackQ;
trigger gt_S2TalDarimUnitsWarpIn;
trigger gt_S2DoorIsClosedQ;
trigger gt_S2SkyDestroyers;
trigger gt_S2DiscoverDoubleConstructsFight;
trigger gt_S2DoubleConstructsQ;
trigger gt_S2DoubleOrangeConstruct01Dead;
trigger gt_S2DoubleBlueConstruct01Dead;
trigger gt_S2OpenFirstDoor;
trigger gt_S2PrepShadowCorpsAmbush01;
trigger gt_S2ShadowCorpsAmbush01;
trigger gt_S2ShadowCorpsAmbush01Q;
trigger gt_S2ShadowCorpsMedivacDropOff;
trigger gt_S2ProgressSave;
trigger gt_S1AnimateXelNagaCratesLarge;
trigger gt_S2SeeSecondGateQ;
trigger gt_S2SpawnSkyHybrid;
trigger gt_S2PrepShadowCorpsAmbush02;
trigger gt_S2ShadowCorpsAmbush02;
trigger gt_S2ShadowCorpsAmbush02Q;
trigger gt_S2AwakenBlueConstruct02;
trigger gt_S2BlueConstruct02Q;
trigger gt_S2BlueConstruct02Dead;
trigger gt_S2StartHallDefenseEvents;
trigger gt_S2HallDefenseBreach;
trigger gt_S2HallDefenseBreachQ;
trigger gt_S2HallDefenseFlyInWarpPrismsAndMedivacs;
trigger gt_S2HallDefenseDropInHybrids;
trigger gt_S2HallDefenseFinishedQ;
trigger gt_S2HallBeaconReached;
trigger gt_S2HallDefenseAttackGroupUnitsWarpIn;
trigger gt_StartGameStage03Q;
trigger gt_S3TimerStart;
trigger gt_S3TimerFirstWarningQ;
trigger gt_S3TimerSecondWarningQ;
trigger gt_S3PlanetCrackerPath01;
trigger gt_S3PlanetCrackerPath02;
trigger gt_S3UnitUnloadedFromDropship;
trigger gt_S3HybridAttack;
trigger gt_S3SeeDestroyedDoorframeQ;
trigger gt_S3StalkerAttackQ;
trigger gt_S3PrepareSpectreAndReaperAmbushes;
trigger gt_S3ActivateAmbushonArtanis01Q;
trigger gt_S3DropshipsAttackKerrigan;
trigger gt_S3ActivateAmbushonKerrigan01Q;
trigger gt_S3ReaperJumpsDown;
trigger gt_S3PlanetCrackConstruct;
trigger gt_S3DropshipAttackAtConstruct;
trigger gt_S3SpectreAmbushQ;
trigger gt_S3BonusObjectiveTalDarim;
trigger gt_S3ShadowandTalDarimMechAttack;
trigger gt_S3ReachFinalRoom;
trigger gt_S3HybridAttackingShrineGetsStunned;
trigger gt_S3StopShrineTimer;
trigger gt_S3ReachFinalRoomTransmissionQ;
trigger gt_S3AllEnemiesAtFinalRoomDeadQ;
trigger gt_S3HallReached;
trigger gt_InitHeroes;
trigger gt_InitialLightningDashUsed;
trigger gt_IntroLightningDashQ;
trigger gt_TeachLightningDash;
trigger gt_TeachAstralWindQ;
trigger gt_AstralWindHighlight;
trigger gt_S1BonusObjectiveDiscoverQ;
trigger gt_S2BonusObjectiveDiscover;
trigger gt_S3BonusObjectiveDiscover;
trigger gt_RelicPickupQ;
trigger gt_Autorevealers;
trigger gt_DefeatPrimaryObjectiveFailed;
trigger gt_DefeatS3PrimaryObjectiveFailed;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_GroundSlamSpawnAdds;
trigger gt_EntropicBlastSpawnAdds;
trigger gt_StartAI;
trigger gt_TaldarimResources;
trigger gt_StatsMedivacUnloads;
trigger gt_StatsUnitDies;
trigger gt_StatsLightningDashDamage;
trigger gt_StatsResurgenceActivated;
trigger gt_AchievementBanelingKills;
trigger gt_AchievementLightningDashDamage;
trigger gt_AchievementTheBiggerTheyAre;
trigger gt__10thAnniversaryAchievementPreventenemyWarpPrismfromwarpinginunits;
trigger gt_ObjectiveHallsofRevelationCreate;
trigger gt_ObjectiveHallsofRevelationComplete;
trigger gt_ObjectiveHallsofRevelationUpdate;
trigger gt_ObjectiveHallsofRevelationFailed;
trigger gt_ObjectiveSurviveCreate;
trigger gt_ObjectiveSurviveComplete;
trigger gt_ObjectiveSurviveFailed;
trigger gt_ObjectiveXelNagaDevicesCreate;
trigger gt_ObjectiveXelNagaDevicesComplete;
trigger gt_ObjectiveXelNagaDevicesUpdate;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_IntroMoveHybrids;
trigger gt_MidHoldoutQ;
trigger gt_MidHoldoutSetup;
trigger gt_MidHoldoutCinematic;
trigger gt_MidHoldoutCinematicEnd;
trigger gt_MidHoldoutCleanup;
trigger gt_MidHoldoutArtanisBeginsChanneling;
trigger gt_MidHoldoutSpawnEnemies;
trigger gt_MidShrine1Q;
trigger gt_MidShrine1Setup;
trigger gt_MidShrine1Cinematic;
trigger gt_MidShrine1CinematicEnd;
trigger gt_MidShrine1Cleanup;
trigger gt_MidShrine1Transition;
trigger gt_MidShrine1BridgeRise;
trigger gt_MidShrine2Q;
trigger gt_MidShrine2Setup;
trigger gt_MidShrine2Cinematic;
trigger gt_MidShrine2CinematicEnd;
trigger gt_MidShrine2Cleanup;
trigger gt_MidShrine2ArtanisBeginsChanneling;
trigger gt_MidShrine2Transition;
trigger gt_MidShrine2BridgeRise;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;
trigger gt_VictoryArtanisBeginsChanneling;
trigger gt_VictoryShrineTransition;
trigger gt_VictoryDoorOpen;

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
trigger auto_gf_SendMedivacDrop_Trigger = null;
point auto_gf_SendMedivacDrop_lp_sPAWN;
point auto_gf_SendMedivacDrop_lp_dESPAWN;
point auto_gf_SendMedivacDrop_lp_tARGET;
int auto_gf_SendMedivacDrop_lp_cARGO_AMOUNT;
string auto_gf_SendMedivacDrop_lp_cARGO_TYPE;

void gf_SendMedivacDrop (point lp_sPAWN, point lp_dESPAWN, point lp_tARGET, int lp_cARGO_AMOUNT, string lp_cARGO_TYPE) {
    auto_gf_SendMedivacDrop_lp_sPAWN = lp_sPAWN;
    auto_gf_SendMedivacDrop_lp_dESPAWN = lp_dESPAWN;
    auto_gf_SendMedivacDrop_lp_tARGET = lp_tARGET;
    auto_gf_SendMedivacDrop_lp_cARGO_AMOUNT = lp_cARGO_AMOUNT;
    auto_gf_SendMedivacDrop_lp_cARGO_TYPE = lp_cARGO_TYPE;

    if (auto_gf_SendMedivacDrop_Trigger == null) {
        auto_gf_SendMedivacDrop_Trigger = TriggerCreate("auto_gf_SendMedivacDrop_TriggerFunc");
    }

    TriggerExecute(auto_gf_SendMedivacDrop_Trigger, false, false);
}

bool auto_gf_SendMedivacDrop_TriggerFunc (bool testConds, bool runActions) {
    point lp_sPAWN = auto_gf_SendMedivacDrop_lp_sPAWN;
    point lp_dESPAWN = auto_gf_SendMedivacDrop_lp_dESPAWN;
    point lp_tARGET = auto_gf_SendMedivacDrop_lp_tARGET;
    int lp_cARGO_AMOUNT = auto_gf_SendMedivacDrop_lp_cARGO_AMOUNT;
    string lp_cARGO_TYPE = auto_gf_SendMedivacDrop_lp_cARGO_TYPE;

    // Variable Declarations
    point lv_spawnPoint;
    unit lv_medivac;

    // Automatic Variable Declarations
    unitgroup autoF3DA0E02_g;
    int autoF3DA0E02_u;
    unit autoF3DA0E02_var;

    // Variable Initialization

    // Implementation
    libNtve_gf_CreateUnitsAtPoint2(1, "Medivac", 0, gv_pLAYER_02_DOMINION7, lp_sPAWN);
    lv_medivac = UnitLastCreated();
    if ((gv_currentStage == 2)) {
        UnitGroupAdd(gv_s2HallAttackGroup, lv_medivac);
    }

    UnitCargoCreate(lv_medivac, lp_cARGO_TYPE, lp_cARGO_AMOUNT);
    autoF3DA0E02_g = UnitCargoLastCreatedGroup();
    autoF3DA0E02_u = UnitGroupCount(autoF3DA0E02_g, c_unitCountAll);
    for (;; autoF3DA0E02_u -= 1) {
        autoF3DA0E02_var = UnitGroupUnitFromEnd(autoF3DA0E02_g, autoF3DA0E02_u);
        if (autoF3DA0E02_var == null) { break; }
        UnitSetPropertyFixed(autoF3DA0E02_var, c_unitPropEnergyPercent, 100.0);
        if ((gv_currentStage == 2)) {
            UnitGroupAdd(gv_s2HallAttackGroup, autoF3DA0E02_var);
        }

    }
    UnitAbilityEnable(lv_medivac, "move", false);
    UnitSetHeight(lv_medivac, 10.0, 0.0);
    UnitSetHeight(lv_medivac, 4.0, 2.0);
    UnitIssueOrder(lv_medivac, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    UnitAbilityEnable(lv_medivac, "move", true);
    libLbty_gf_OrderTransporttoUnloadAllthenDespawn(lv_medivac, lp_tARGET, lp_dESPAWN);
    return true;
}

trigger auto_gf_SpawnSkyReaver_Trigger = null;
point auto_gf_SpawnSkyReaver_lp_pOINT;

void gf_SpawnSkyReaver (point lp_pOINT) {
    auto_gf_SpawnSkyReaver_lp_pOINT = lp_pOINT;

    if (auto_gf_SpawnSkyReaver_Trigger == null) {
        auto_gf_SpawnSkyReaver_Trigger = TriggerCreate("auto_gf_SpawnSkyReaver_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpawnSkyReaver_Trigger, false, false);
}

bool auto_gf_SpawnSkyReaver_TriggerFunc (bool testConds, bool runActions) {
    point lp_pOINT = auto_gf_SpawnSkyReaver_lp_pOINT;

    // Automatic Variable Declarations
    // Implementation
    UnitCreate(1, "HybridReaver", 0, 0, lp_pOINT, 270.0);
    UnitGroupAdd(gv_skyReavers, UnitLastCreated());
    UnitGroupAdd(gv_globalEnemyUnits, UnitLastCreated());
    UnitSetTeamColorIndex(UnitLastCreated(), 1);
    UnitSetHeight(UnitLastCreated(), 12.0, 0.0);
    UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
    UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
    UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
    UnitSetState(UnitLastCreated(), c_unitStateTooltipable, false);
    UnitSetState(UnitLastCreated(), c_unitStateCursorable, false);
    UnitSetState(UnitLastCreated(), c_unitStateInvulnerable, true);
    Wait(0.0625, c_timeGame);
    UnitSetHeight(UnitLastCreated(), UnitGetPropertyFixed(UnitLastCreated(), c_unitPropHeight, c_unitPropNormal), 0.5);
    Wait(0.5, c_timeGame);
    UnitSetState(UnitLastCreated(), c_unitStateStatusBar, true);
    UnitSetState(UnitLastCreated(), c_unitStateTargetable, true);
    UnitSetState(UnitLastCreated(), c_unitStateSelectable, true);
    UnitSetState(UnitLastCreated(), c_unitStateTooltipable, true);
    UnitSetState(UnitLastCreated(), c_unitStateCursorable, true);
    UnitSetState(UnitLastCreated(), c_unitStateInvulnerable, false);
    UnitSetOwner(UnitLastCreated(), gv_pLAYER_02_DOMINION4, true);
    libVCMI_gf_SetUnitInfoTextCampaign(UnitLastCreated(), null, StringExternal("Param/Value/21990689"), null);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault);
    gf_ActivateGenericEnemyAI(UnitLastCreated());
    return true;
}

trigger auto_gf_SpawnSkyDestroyer_Trigger = null;
point auto_gf_SpawnSkyDestroyer_lp_cHOSEN_POINT;

void gf_SpawnSkyDestroyer (point lp_cHOSEN_POINT) {
    auto_gf_SpawnSkyDestroyer_lp_cHOSEN_POINT = lp_cHOSEN_POINT;

    if (auto_gf_SpawnSkyDestroyer_Trigger == null) {
        auto_gf_SpawnSkyDestroyer_Trigger = TriggerCreate("auto_gf_SpawnSkyDestroyer_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpawnSkyDestroyer_Trigger, false, false);
}

bool auto_gf_SpawnSkyDestroyer_TriggerFunc (bool testConds, bool runActions) {
    point lp_cHOSEN_POINT = auto_gf_SpawnSkyDestroyer_lp_cHOSEN_POINT;

    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateUnitsAtPoint2(1, "HybridDestroyer", 0, 0, lp_cHOSEN_POINT);
    UnitGroupAdd(gv_skyDestroyers, UnitLastCreated());
    UnitGroupAdd(gv_globalEnemyUnits, UnitLastCreated());
    UnitSetTeamColorIndex(UnitLastCreated(), 1);
    UnitSetHeight(UnitLastCreated(), 12.0, 0.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Stand Angry", c_animFlagPlayForever, c_animTimeDefault);
    UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
    UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
    UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
    UnitSetState(UnitLastCreated(), c_unitStateTooltipable, false);
    UnitSetState(UnitLastCreated(), c_unitStateCursorable, false);
    UnitSetState(UnitLastCreated(), c_unitStateInvulnerable, true);
    Wait(0.0625, c_timeGame);
    UnitSetHeight(UnitLastCreated(), UnitGetPropertyFixed(UnitLastCreated(), c_unitPropHeight, c_unitPropNormal), 2.0);
    Wait(2.0, c_timeGame);
    UnitSetState(UnitLastCreated(), c_unitStateStatusBar, true);
    UnitSetState(UnitLastCreated(), c_unitStateTargetable, true);
    UnitSetState(UnitLastCreated(), c_unitStateSelectable, true);
    UnitSetState(UnitLastCreated(), c_unitStateTooltipable, true);
    UnitSetState(UnitLastCreated(), c_unitStateCursorable, true);
    UnitSetState(UnitLastCreated(), c_unitStateInvulnerable, false);
    UnitSetOwner(UnitLastCreated(), gv_pLAYER_02_DOMINION4, true);
    libVCMI_gf_SetUnitInfoTextCampaign(UnitLastCreated(), null, StringExternal("Param/Value/729C9625"), null);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault);
    gf_ActivateGenericEnemyAI(UnitLastCreated());
    return true;
}

trigger auto_gf_PingandMonitorConstructGroup_Trigger = null;
unitgroup auto_gf_PingandMonitorConstructGroup_lp_constructGroup;

void gf_PingandMonitorConstructGroup (unitgroup lp_constructGroup) {
    auto_gf_PingandMonitorConstructGroup_lp_constructGroup = lp_constructGroup;

    if (auto_gf_PingandMonitorConstructGroup_Trigger == null) {
        auto_gf_PingandMonitorConstructGroup_Trigger = TriggerCreate("auto_gf_PingandMonitorConstructGroup_TriggerFunc");
    }

    TriggerExecute(auto_gf_PingandMonitorConstructGroup_Trigger, false, false);
}

bool auto_gf_PingandMonitorConstructGroup_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_constructGroup = auto_gf_PingandMonitorConstructGroup_lp_constructGroup;

    // Automatic Variable Declarations
    // Implementation
    if ((libNtve_gf_UnitGroupIsDead(lp_constructGroup) == true)) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", UnitGroupCenterOfGroup(lp_constructGroup), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetScale(PingLastCreated(), 0.7);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/F23A22BD"));
    while (true) {
        Wait(0.1, c_timeAI);
        if ((libVCMI_gf_GameIsOver() == true)) {
            PingDestroy(PingLastCreated());
            return true;
        }

        if ((libNtve_gf_UnitGroupIsDead(lp_constructGroup) == true)) {
            PingDestroy(PingLastCreated());
            return true;
        }

        PingSetPosition(PingLastCreated(), UnitGroupCenterOfGroup(lp_constructGroup));
    }
    return true;
}

trigger auto_gf_AwakenConstruct_Trigger = null;
unit auto_gf_AwakenConstruct_lp_construct;
bool auto_gf_AwakenConstruct_lp_awakenInstantly;

void gf_AwakenConstruct (unit lp_construct, bool lp_awakenInstantly) {
    auto_gf_AwakenConstruct_lp_construct = lp_construct;
    auto_gf_AwakenConstruct_lp_awakenInstantly = lp_awakenInstantly;

    if (auto_gf_AwakenConstruct_Trigger == null) {
        auto_gf_AwakenConstruct_Trigger = TriggerCreate("auto_gf_AwakenConstruct_TriggerFunc");
    }

    TriggerExecute(auto_gf_AwakenConstruct_Trigger, false, false);
}

bool auto_gf_AwakenConstruct_TriggerFunc (bool testConds, bool runActions) {
    unit lp_construct = auto_gf_AwakenConstruct_lp_construct;
    bool lp_awakenInstantly = auto_gf_AwakenConstruct_lp_awakenInstantly;

    // Automatic Variable Declarations
    // Implementation
    SoundPlayOnUnitForPlayer(SoundLink("StoneZealot_Birth", -1), c_maxPlayers, PlayerGroupAll(), lp_construct, 0.0, 100.0, 0.0);
    SoundPlayAtPoint(SoundLink("Thor_Movement", -1), PlayerGroupAll(), UnitGetPosition(lp_construct), 0.0, 100.0, 0.0);
    UnitSetTeamColorIndex(lp_construct, 10);
    libNtve_gf_SendActorMessageToUnit(lp_construct, "Signal Activate");
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(lp_construct), c_animNameDefault);
    libNtve_gf_TurnAllAnimationPropertiesOff(libNtve_gf_MainActorofUnit(lp_construct));
    if ((lp_awakenInstantly == false)) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_construct), c_animNameDefault, "Stand Work End", c_animFlagNonLooping, c_animTimeDefault);
        Wait(5.0, c_timeGame);
    }

    libNtve_gf_PauseUnit(lp_construct, false);
    UnitSetState(lp_construct, c_unitStateInvulnerable, false);
    UnitSetState(lp_construct, c_unitStateTargetable, true);
    UnitSetState(lp_construct, c_unitStateSelectable, true);
    UnitSetState(lp_construct, c_unitStateStatusBar, true);
    libVCMI_gf_SetUnitInfoTextCampaign(lp_construct, null, StringExternal("Param/Value/E2F3B983"), null);
    gf_PingandMonitorConstructGroup(libNtve_gf_ConvertUnitToUnitGroup(lp_construct));
    return true;
}

trigger auto_gf_MonitorConstructVisibility_Trigger = null;
unit auto_gf_MonitorConstructVisibility_lp_construct;

void gf_MonitorConstructVisibility (unit lp_construct) {
    auto_gf_MonitorConstructVisibility_lp_construct = lp_construct;

    if (auto_gf_MonitorConstructVisibility_Trigger == null) {
        auto_gf_MonitorConstructVisibility_Trigger = TriggerCreate("auto_gf_MonitorConstructVisibility_TriggerFunc");
    }

    TriggerExecute(auto_gf_MonitorConstructVisibility_Trigger, false, false);
}

bool auto_gf_MonitorConstructVisibility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_construct = auto_gf_MonitorConstructVisibility_lp_construct;

    // Automatic Variable Declarations
    // Implementation
    Wait(1.0, c_timeGame);
    while (!((VisIsVisibleForPlayer(gv_pLAYER_01_USER, UnitGetPosition(lp_construct)) == true))) {
        Wait(0.0625, c_timeGame);
    }
    libNtve_gf_ShowHideUnit(lp_construct, true);
    return true;
}

void gf_CreateXelnagaDoorPing (unit lp_doorKey) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingCircle", UnitGetPosition(lp_doorKey), ColorWithAlpha(0.00, 100.00, 100.00, 0.00), 0.0, 270.0);
    libHots_gf_StorePingForUnit(lp_doorKey, 1, PingLastCreated());
    PingSetUnit(PingLastCreated(), lp_doorKey);
    PingSetScale(PingLastCreated(), 0.3);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/9F2BDE9D"));
    if ((UnitGetType(lp_doorKey) == "ArtifactUlnarB")) {
        PingSetColor(PingLastCreated(), Color(100.00, 50.20, 0.00));
    }

}

trigger auto_gf_SpawnSideStalker_Trigger = null;
point auto_gf_SpawnSideStalker_lp_spawnPoint;
point auto_gf_SpawnSideStalker_lp_movePoint;
point auto_gf_SpawnSideStalker_lp_blinkPoint;

void gf_SpawnSideStalker (point lp_spawnPoint, point lp_movePoint, point lp_blinkPoint) {
    auto_gf_SpawnSideStalker_lp_spawnPoint = lp_spawnPoint;
    auto_gf_SpawnSideStalker_lp_movePoint = lp_movePoint;
    auto_gf_SpawnSideStalker_lp_blinkPoint = lp_blinkPoint;

    if (auto_gf_SpawnSideStalker_Trigger == null) {
        auto_gf_SpawnSideStalker_Trigger = TriggerCreate("auto_gf_SpawnSideStalker_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpawnSideStalker_Trigger, false, false);
}

bool auto_gf_SpawnSideStalker_TriggerFunc (bool testConds, bool runActions) {
    point lp_spawnPoint = auto_gf_SpawnSideStalker_lp_spawnPoint;
    point lp_movePoint = auto_gf_SpawnSideStalker_lp_movePoint;
    point lp_blinkPoint = auto_gf_SpawnSideStalker_lp_blinkPoint;

    // Variable Declarations
    unit lv_stalker;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Stalker", 0, gv_pLAYER_02_DOMINION2, lp_spawnPoint);
    lv_stalker = UnitLastCreated();
    UnitGroupAdd(gv_globalEnemyUnits, lv_stalker);
    while (true) {
        if ((libNtve_gf_UnitInRegion(lv_stalker, RegionCircle(lp_blinkPoint, 6.0)) == true)) {
            gf_ActivateStalkerBlinkAI(lv_stalker, PointFromId(664));
            break;
        }

        if ((libNtve_gf_UnitInRegion(lv_stalker, RegionCircle(lp_movePoint, 0.5)) == true)) {
            UnitIssueOrder(lv_stalker, OrderTargetingPoint(AbilityCommand("Blink", 0), lp_blinkPoint), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(lv_stalker, OrderTargetingPoint(AbilityCommand("move", 0), lp_movePoint), c_orderQueueReplace);
        }
        Wait(1.0, c_timeGame);
        if (((libVCMI_gf_GameIsOver() == true) || (UnitIsAlive(lv_stalker) == false))) {
            return true;
        }

    }
    return true;
}

trigger auto_gf_SpawnS1HoldoutProtoss_Trigger = null;
string auto_gf_SpawnS1HoldoutProtoss_lp_type;
point auto_gf_SpawnS1HoldoutProtoss_lp_location;

void gf_SpawnS1HoldoutProtoss (string lp_type, point lp_location) {
    auto_gf_SpawnS1HoldoutProtoss_lp_type = lp_type;
    auto_gf_SpawnS1HoldoutProtoss_lp_location = lp_location;

    if (auto_gf_SpawnS1HoldoutProtoss_Trigger == null) {
        auto_gf_SpawnS1HoldoutProtoss_Trigger = TriggerCreate("auto_gf_SpawnS1HoldoutProtoss_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpawnS1HoldoutProtoss_Trigger, false, false);
}

bool auto_gf_SpawnS1HoldoutProtoss_TriggerFunc (bool testConds, bool runActions) {
    string lp_type = auto_gf_SpawnS1HoldoutProtoss_lp_type;
    point lp_location = auto_gf_SpawnS1HoldoutProtoss_lp_location;

    // Automatic Variable Declarations
    string autoD98D8D7F_val;

    // Implementation
    autoD98D8D7F_val = lp_type;
    if (autoD98D8D7F_val == "Zealot") {
        UnitIssueOrder(UnitFromId(938), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), lp_location), c_orderQueueReplace);
    }
    else if (autoD98D8D7F_val == "Stalker") {
        UnitIssueOrder(UnitFromId(938), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), lp_location), c_orderQueueReplace);
    }
    else if (autoD98D8D7F_val == "Colossus") {
        UnitIssueOrder(UnitFromId(938), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 15), lp_location), c_orderQueueReplace);
    }
    else {
    }
    return true;
}

trigger auto_gf_CreatePlanetCrackerBreach_Trigger = null;
point auto_gf_CreatePlanetCrackerBreach_lp_point;

void gf_CreatePlanetCrackerBreach (point lp_point) {
    auto_gf_CreatePlanetCrackerBreach_lp_point = lp_point;

    if (auto_gf_CreatePlanetCrackerBreach_Trigger == null) {
        auto_gf_CreatePlanetCrackerBreach_Trigger = TriggerCreate("auto_gf_CreatePlanetCrackerBreach_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreatePlanetCrackerBreach_Trigger, false, false);
}

bool auto_gf_CreatePlanetCrackerBreach_TriggerFunc (bool testConds, bool runActions) {
    point lp_point = auto_gf_CreatePlanetCrackerBreach_lp_point;

    // Variable Declarations
    unit lv_planetCracker;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libNtve_gf_ShowHideDoodadsInRegion(true, RegionCircle(lp_point, 1.0), "SpaceFallingDebris");
    SoundPlayForPlayer(SoundLink("Ambience_HeavyRockCrumbles", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    CameraShake(gv_pLAYER_01_USER, "Light", "Earthquake", 0.25, 0.0, 2.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PlanetCrackerUlnarUnit", c_unitCreateIgnorePlacement, 15, lp_point);
    lv_planetCracker = UnitLastCreated();
    libNtve_gf_MakeUnitInvulnerable(lv_planetCracker, true);
    UnitSetState(lv_planetCracker, c_unitStateHighlightable, false);
    UnitSetState(lv_planetCracker, c_unitStateTargetable, false);
    UnitSetState(lv_planetCracker, c_unitStateSelectable, false);
    libNtve_gf_ShareVisionofUnit(lv_planetCracker, true, gv_pLAYER_01_USER);
    Wait(2.0, c_timeGame);
    CameraShake(gv_pLAYER_01_USER, "Heavy", "Earthquake", 0.25, 0.5, 2.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "DestructibleRock6x6Weak", c_unitCreateIgnorePlacement, 0, lp_point);
    UnitSetHeight(UnitLastCreated(), 15.0, 0.0);
    UnitKill(UnitLastCreated());
    Wait(1.0, c_timeGame);
    libNtve_gf_ShowHideDoodadsInRegion(true, RegionCircle(lp_point, 1.0), "Sunrays");
    libNtve_gf_ShowHideDoodadsInRegion(true, RegionCircle(lp_point, 1.0), "Blast_Craters_Big");
    Wait(3.0, c_timeGame);
    UnitRemove(lv_planetCracker);
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionCircle(lp_point, 1.0), "SpaceFallingDebris");
    Wait(10.0, c_timeGame);
    libVCMI_gf_SendActorMessageToDoodadsInRegion("AnimBracketStart Spell Death Dead", "Blast_Craters_Big", RegionCircle(lp_point, 1.0));
    return true;
}

trigger auto_gf_FlyInWarpPrism_Trigger = null;
point auto_gf_FlyInWarpPrism_lp_point;

void gf_FlyInWarpPrism (point lp_point) {
    auto_gf_FlyInWarpPrism_lp_point = lp_point;

    if (auto_gf_FlyInWarpPrism_Trigger == null) {
        auto_gf_FlyInWarpPrism_Trigger = TriggerCreate("auto_gf_FlyInWarpPrism_TriggerFunc");
    }

    TriggerExecute(auto_gf_FlyInWarpPrism_Trigger, false, false);
}

bool auto_gf_FlyInWarpPrism_TriggerFunc (bool testConds, bool runActions) {
    point lp_point = auto_gf_FlyInWarpPrism_lp_point;

    // Variable Declarations
    unit lv_warpPrism;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libNtve_gf_CreateUnitsAtPoint2(1, "WarpPrism", 0, gv_pLAYER_02_DOMINION2, lp_point);
    lv_warpPrism = UnitLastCreated();
    UnitAbilityEnable(lv_warpPrism, "move", false);
    UnitSetHeight(lv_warpPrism, 10.0, 0.0);
    UnitSetHeight(lv_warpPrism, 4.0, 2.0);
    UnitIssueOrder(lv_warpPrism, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(lv_warpPrism, Order(AbilityCommand("PhasingMode", 0)), c_orderQueueReplace);
    return true;
}

trigger auto_gf_ActivateHybridDominatorAI_Trigger = null;
unit auto_gf_ActivateHybridDominatorAI_lp_hybrid;

void gf_ActivateHybridDominatorAI (unit lp_hybrid) {
    auto_gf_ActivateHybridDominatorAI_lp_hybrid = lp_hybrid;

    if (auto_gf_ActivateHybridDominatorAI_Trigger == null) {
        auto_gf_ActivateHybridDominatorAI_Trigger = TriggerCreate("auto_gf_ActivateHybridDominatorAI_TriggerFunc");
    }

    TriggerExecute(auto_gf_ActivateHybridDominatorAI_Trigger, false, false);
}

bool auto_gf_ActivateHybridDominatorAI_TriggerFunc (bool testConds, bool runActions) {
    unit lp_hybrid = auto_gf_ActivateHybridDominatorAI_lp_hybrid;

    // Variable Declarations
    unitgroup lv_enemyTargets;

    // Automatic Variable Declarations
    unitgroup auto9519CFA7_g;
    int auto9519CFA7_u;
    unit auto9519CFA7_var;

    // Variable Initialization
    lv_enemyTargets = UnitGroupEmpty();

    // Implementation
    while (true) {
        lv_enemyTargets = UnitGroupEmpty();
        auto9519CFA7_g = UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lp_hybrid), 9.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 0);
        auto9519CFA7_u = UnitGroupCount(auto9519CFA7_g, c_unitCountAll);
        for (;; auto9519CFA7_u -= 1) {
            auto9519CFA7_var = UnitGroupUnitFromEnd(auto9519CFA7_g, auto9519CFA7_u);
            if (auto9519CFA7_var == null) { break; }
            if ((UnitIsAlive(lp_hybrid) == true) && (DistanceBetweenPoints(UnitGetPosition(lp_hybrid), UnitGetPosition(auto9519CFA7_var)) > 3.0)) {
                UnitGroupAdd(lv_enemyTargets, auto9519CFA7_var);
            }

        }
        if ((UnitIsAlive(lp_hybrid) == true) && (UnitGroupCount(lv_enemyTargets, c_unitCountAlive) >= 1)) {
            UnitIssueOrder(lp_hybrid, OrderTargetingPoint(AbilityCommand("HybridDominatorVoidPsiStorm", 0), UnitGetPosition(UnitGroupRandomUnit(lv_enemyTargets, c_unitCountAlive))), c_orderQueueReplace);
        }

        Wait(0.8, c_timeAI);
        if ((UnitIsAlive(lp_hybrid) == true) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lp_hybrid), 3.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 0), c_unitCountAlive) >= 1)) {
            UnitIssueOrder(lp_hybrid, OrderTargetingUnit(AbilityCommand("HybridDominatorVoidPlasmaBlast", 0), UnitGroupRandomUnit(lv_enemyTargets, c_unitCountAlive)), c_orderQueueReplace);
        }

        Wait(0.8, c_timeAI);
        if (((UnitIsAlive(lp_hybrid) == false) || (libVCMI_gf_GameIsOver() == true))) {
            return true;
        }

    }
    return true;
}

trigger auto_gf_CreatePlanetCrackerPath_Trigger = null;
point auto_gf_CreatePlanetCrackerPath_lp_startPoint;
point auto_gf_CreatePlanetCrackerPath_lp_endPoint;

void gf_CreatePlanetCrackerPath (point lp_startPoint, point lp_endPoint) {
    auto_gf_CreatePlanetCrackerPath_lp_startPoint = lp_startPoint;
    auto_gf_CreatePlanetCrackerPath_lp_endPoint = lp_endPoint;

    if (auto_gf_CreatePlanetCrackerPath_Trigger == null) {
        auto_gf_CreatePlanetCrackerPath_Trigger = TriggerCreate("auto_gf_CreatePlanetCrackerPath_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreatePlanetCrackerPath_Trigger, false, false);
}

bool auto_gf_CreatePlanetCrackerPath_TriggerFunc (bool testConds, bool runActions) {
    point lp_startPoint = auto_gf_CreatePlanetCrackerPath_lp_startPoint;
    point lp_endPoint = auto_gf_CreatePlanetCrackerPath_lp_endPoint;

    // Variable Declarations
    unit lv_planetCracker;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libNtve_gf_ShowHideDoodadsInRegion(true, RegionCircle(lp_startPoint, 1.0), "SpaceFallingDebris");
    SoundPlayForPlayer(SoundLink("Ambience_HeavyRockCrumbles", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    CameraShake(gv_pLAYER_01_USER, "Light", "Earthquake", 0.25, 0.0, 2.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PlanetCrackerUlnarUnit", c_unitCreateIgnorePlacement, 15, lp_startPoint);
    lv_planetCracker = UnitLastCreated();
    libNtve_gf_MakeUnitInvulnerable(lv_planetCracker, true);
    UnitSetState(lv_planetCracker, c_unitStateHighlightable, false);
    UnitSetState(lv_planetCracker, c_unitStateTargetable, false);
    UnitSetState(lv_planetCracker, c_unitStateSelectable, false);
    UnitSetPropertyFixed(lv_planetCracker, c_unitPropMovementSpeed, libLotv_gf_DifficultyValueFixed2(1.0, 1.0, 2.0, 2.0));
    libNtve_gf_ShareVisionofUnit(lv_planetCracker, true, gv_pLAYER_01_USER);
    Wait(3.0, c_timeGame);
    CameraShake(gv_pLAYER_01_USER, "Heavy", "Earthquake", 0.25, 0.5, 2.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "DestructibleRock6x6Weak", c_unitCreateIgnorePlacement, 0, lp_startPoint);
    UnitSetHeight(UnitLastCreated(), 15.0, 0.0);
    UnitKill(UnitLastCreated());
    Wait(2.0, c_timeGame);
    while ((libVCMI_gf_GameIsOver() == false) && (UnitIsAlive(lv_planetCracker) == true) && (DistanceBetweenPoints(UnitGetPosition(lv_planetCracker), lp_endPoint) > 1)) {
        libNtve_gf_ShowHideDoodadsInRegion(true, RegionCircle(UnitGetPosition(lv_planetCracker), 1.0), "SpaceFallingDebris");
        libNtve_gf_ShowHideDoodadsInRegion(true, RegionCircle(UnitGetPosition(lv_planetCracker), 1.0), "Sunrays");
        UnitIssueOrder(lv_planetCracker, OrderTargetingPoint(AbilityCommand("move", 0), lp_endPoint), c_orderQueueReplace);
        Wait(1.0, c_timeGame);
    }
    UnitRemove(lv_planetCracker);
    return true;
}

void gf_MakeHybridStopAttackingShrine (unit lp_hybridUnit) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitGroupHasUnit(gv_s3FinalRoomShrineAttackGroup, lp_hybridUnit) == true)) {
        UnitGroupRemove(gv_s3FinalRoomShrineAttackGroup, lp_hybridUnit);
        UnitGroupAdd(gv_s3FinalRoomNonShrineAttackGroup, lp_hybridUnit);
        UnitGroupAdd(gv_globalEnemyUnits, lp_hybridUnit);
        UnitIssueOrder(lp_hybridUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(UnitGetPosition(lp_hybridUnit), -2.0, -2.0)), c_orderQueueReplace);
        Wait(2.0, c_timeGame);
        gf_ActivateGenericEnemyAI(lp_hybridUnit);
        if ((UnitGetType(lp_hybridUnit) == "HybridBehemoth")) {
            gf_ActivateHybridBehemothAI(lp_hybridUnit);
        }

        if ((UnitGetType(lp_hybridUnit) == "HybridDominatorVoid")) {
            gf_ActivateHybridDominatorAI(lp_hybridUnit);
        }

    }

}

trigger auto_gf_AstralWindHighlight_Trigger = null;
unitgroup auto_gf_AstralWindHighlight_lp_attackGroup;

void gf_AstralWindHighlight (unitgroup lp_attackGroup) {
    auto_gf_AstralWindHighlight_lp_attackGroup = lp_attackGroup;

    if (auto_gf_AstralWindHighlight_Trigger == null) {
        auto_gf_AstralWindHighlight_Trigger = TriggerCreate("auto_gf_AstralWindHighlight_TriggerFunc");
    }

    TriggerExecute(auto_gf_AstralWindHighlight_Trigger, false, false);
}

bool auto_gf_AstralWindHighlight_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_attackGroup = auto_gf_AstralWindHighlight_lp_attackGroup;

    // Automatic Variable Declarations
    // Implementation
    UISetButtonFaceHighlighted(PlayerGroupAll(), "ArtanisAstralWind", true);
    while (!(((libNtve_gf_UnitGroupIsDead(lp_attackGroup) == true) || (gv_hallsReached > 0)))) {
        Wait(1.0, c_timeGame);
    }
    UISetButtonFaceHighlighted(PlayerGroupAll(), "ArtanisAstralWind", false);
    return true;
}

trigger auto_gf_ActivateXelNagaConstructAI_Trigger = null;
unit auto_gf_ActivateXelNagaConstructAI_lp_construct;

void gf_ActivateXelNagaConstructAI (unit lp_construct) {
    auto_gf_ActivateXelNagaConstructAI_lp_construct = lp_construct;

    if (auto_gf_ActivateXelNagaConstructAI_Trigger == null) {
        auto_gf_ActivateXelNagaConstructAI_Trigger = TriggerCreate("auto_gf_ActivateXelNagaConstructAI_TriggerFunc");
    }

    TriggerExecute(auto_gf_ActivateXelNagaConstructAI_Trigger, false, false);
}

bool auto_gf_ActivateXelNagaConstructAI_TriggerFunc (bool testConds, bool runActions) {
    unit lp_construct = auto_gf_ActivateXelNagaConstructAI_lp_construct;

    // Variable Declarations
    unitgroup lv_splashTargets;
    unit lv_beamTarget;
    unitgroup lv_attackTargets;
    unitgroup lv_heroTargets;
    timer lv_splashCooldown;
    timer lv_beamCooldown;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_splashTargets = UnitGroupEmpty();
    lv_attackTargets = UnitGroupEmpty();
    lv_heroTargets = UnitGroupEmpty();
    lv_splashCooldown = TimerCreate();
    lv_beamCooldown = TimerCreate();

    // Implementation
    if ((lp_construct == gv_firstConstruct)) {
        TimerStart(lv_splashCooldown, 2.0, false, c_timeAI);
    }

    TimerStart(lv_beamCooldown, 4.0, false, c_timeAI);
    while ((UnitIsAlive(lp_construct) == true) && (libVCMI_gf_GameIsOver() == false)) {
        if ((TimerGetRemaining(lv_splashCooldown) == 0.0)) {
            lv_splashTargets = UnitGroupAlliance(gv_pLAYER_02_DOMINION, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_construct), 4.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            if ((UnitGroupCount(lv_splashTargets, c_unitCountAlive) >= 1)) {
                libNtve_gf_AICast(lp_construct, OrderTargetingUnit(AbilityCommand("XelNagaConstructSmash", 0), UnitGroupClosestToPoint(lv_splashTargets, UnitGetPosition(lp_construct))));
                TimerStart(lv_splashCooldown, libLotv_gf_DifficultyValueFixed2(11.0, 11.0, 9.0, 9.0), false, c_timeAI);
                Wait(3.0, c_timeAI);
            }
            else {
                lv_splashTargets = UnitGroupAlliance(gv_pLAYER_02_DOMINION, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_construct), 10.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                if ((UnitGroupCount(lv_splashTargets, c_unitCountAlive) >= 1)) {
                    libNtve_gf_AICast(lp_construct, OrderTargetingPoint(AbilityCommand("EntropicBlast", 0), UnitGetPosition(UnitGroupClosestToPoint(lv_splashTargets, UnitGetPosition(lp_construct)))));
                    TimerStart(lv_splashCooldown, libLotv_gf_DifficultyValueFixed2(11.0, 11.0, 9.0, 9.0), false, c_timeAI);
                    Wait(4.5, c_timeAI);
                }

            }
        }

        if (((UnitIsAlive(lp_construct) == false) || (libVCMI_gf_GameIsOver() == true))) {
            return true;
        }

        if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1) && (lp_construct != gv_firstConstruct) && (TimerGetRemaining(lv_beamCooldown) == 0.0) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionCircle(UnitGetPosition(lp_construct), 10.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION7, RegionCircle(UnitGetPosition(lp_construct), 10.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0)) {
            lv_beamTarget = null;
            if ((DistanceBetweenPoints(UnitGetPosition(gv_kERRIGAN), UnitGetPosition(lp_construct)) >= 4.0) && (DistanceBetweenPoints(UnitGetPosition(gv_kERRIGAN), UnitGetPosition(lp_construct)) <= 10.0)) {
                lv_beamTarget = gv_kERRIGAN;
            }

            if ((lv_beamTarget == null) && (DistanceBetweenPoints(UnitGetPosition(gv_aRTANIS), UnitGetPosition(lp_construct)) >= 4.0) && (DistanceBetweenPoints(UnitGetPosition(gv_aRTANIS), UnitGetPosition(lp_construct)) <= 10.0)) {
                lv_beamTarget = gv_aRTANIS;
            }

            if ((lv_beamTarget != null)) {
                libNtve_gf_AICast(lp_construct, OrderTargetingUnit(AbilityCommand("XelNagaConstructChaseBeam", 0), lv_beamTarget));
                TimerStart(lv_beamCooldown, libLotv_gf_DifficultyValueFixed2(0.0, 0.0, 30.0, 20.0), false, c_timeAI);
                Wait(8.0, c_timeAI);
            }

        }

        if (((UnitIsAlive(lp_construct) == false) || (libVCMI_gf_GameIsOver() == true))) {
            return true;
        }

        lv_attackTargets = UnitGroupAlliance(gv_pLAYER_02_DOMINION, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_construct), 10.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        if ((UnitGroupCount(lv_attackTargets, c_unitCountAlive) >= 1)) {
            libNtve_gf_AICast(lp_construct, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupClosestToPoint(lv_attackTargets, UnitGetPosition(lp_construct))));
        }
        else {
            UnitGroupAdd(lv_attackTargets, gv_aRTANIS);
            UnitGroupAdd(lv_attackTargets, gv_kERRIGAN);
            if ((UnitPathableToUnit(lp_construct, gv_aRTANIS, 0.0, 1000.0) == false)) {
                UnitGroupRemove(lv_attackTargets, gv_aRTANIS);
            }

            if ((UnitPathableToUnit(lp_construct, gv_kERRIGAN, 0.0, 1000.0) == false)) {
                UnitGroupRemove(lv_attackTargets, gv_kERRIGAN);
            }

            if ((UnitGroupCount(lv_attackTargets, c_unitCountAlive) >= 1)) {
                libNtve_gf_AICast(lp_construct, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupClosestToPoint(lv_attackTargets, UnitGetPosition(lp_construct))));
            }

        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_gf_ActivateChargedCrystalAI_Trigger = null;
unit auto_gf_ActivateChargedCrystalAI_lp_crystal;

void gf_ActivateChargedCrystalAI (unit lp_crystal) {
    auto_gf_ActivateChargedCrystalAI_lp_crystal = lp_crystal;

    if (auto_gf_ActivateChargedCrystalAI_Trigger == null) {
        auto_gf_ActivateChargedCrystalAI_Trigger = TriggerCreate("auto_gf_ActivateChargedCrystalAI_TriggerFunc");
    }

    TriggerExecute(auto_gf_ActivateChargedCrystalAI_Trigger, false, false);
}

bool auto_gf_ActivateChargedCrystalAI_TriggerFunc (bool testConds, bool runActions) {
    unit lp_crystal = auto_gf_ActivateChargedCrystalAI_lp_crystal;

    // Variable Declarations
    unitgroup lv_attackTargets;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_attackTargets = UnitGroupEmpty();

    // Implementation
    AISetUnitScriptControlled(lp_crystal, false);
    while ((UnitIsAlive(lp_crystal) == true) && (libVCMI_gf_GameIsOver() == false)) {
        lv_attackTargets = UnitGroupAlliance(gv_pLAYER_02_DOMINION, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_crystal), 10.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        if ((UnitGroupCount(lv_attackTargets, c_unitCountAlive) >= 1)) {
            libNtve_gf_AICast(lp_crystal, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupClosestToPoint(lv_attackTargets, UnitGetPosition(lp_crystal))));
        }
        else {
            UnitGroupAdd(lv_attackTargets, gv_aRTANIS);
            UnitGroupAdd(lv_attackTargets, gv_kERRIGAN);
            if ((UnitPathableToUnit(lp_crystal, gv_aRTANIS, 0.0, 1000.0) == false)) {
                UnitGroupRemove(lv_attackTargets, gv_aRTANIS);
            }

            if ((UnitPathableToUnit(lp_crystal, gv_kERRIGAN, 0.0, 1000.0) == false)) {
                UnitGroupRemove(lv_attackTargets, gv_kERRIGAN);
            }

            if ((UnitGroupCount(lv_attackTargets, c_unitCountAlive) >= 1)) {
                libNtve_gf_AICast(lp_crystal, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupClosestToPoint(lv_attackTargets, UnitGetPosition(lp_crystal))));
            }

        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_gf_ActivateHybridBehemothAI_Trigger = null;
unit auto_gf_ActivateHybridBehemothAI_lp_hybrid;

void gf_ActivateHybridBehemothAI (unit lp_hybrid) {
    auto_gf_ActivateHybridBehemothAI_lp_hybrid = lp_hybrid;

    if (auto_gf_ActivateHybridBehemothAI_Trigger == null) {
        auto_gf_ActivateHybridBehemothAI_Trigger = TriggerCreate("auto_gf_ActivateHybridBehemothAI_TriggerFunc");
    }

    TriggerExecute(auto_gf_ActivateHybridBehemothAI_Trigger, false, false);
}

bool auto_gf_ActivateHybridBehemothAI_TriggerFunc (bool testConds, bool runActions) {
    unit lp_hybrid = auto_gf_ActivateHybridBehemothAI_lp_hybrid;

    // Variable Declarations
    unitgroup lv_consumeDNATargets;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_consumeDNATargets = UnitGroupEmpty();

    // Implementation
    while (true) {
        lv_consumeDNATargets = UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lp_hybrid), 6.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        if ((UnitIsAlive(lp_hybrid) == true) && (UnitGroupCount(lv_consumeDNATargets, c_unitCountAlive) >= 1)) {
            UnitIssueOrder(lp_hybrid, OrderTargetingUnit(AbilityCommand("ConsumeDNA", 0), UnitGroupClosestToPoint(lv_consumeDNATargets, UnitGetPosition(lp_hybrid))), c_orderQueueReplace);
        }

        Wait(1.0, c_timeAI);
        if ((UnitIsAlive(lp_hybrid) == true) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lp_hybrid), 7.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 1)) {
            UnitIssueOrder(lp_hybrid, Order(AbilityCommand("HybridFAoEStun", 0)), c_orderQueueReplace);
        }

        Wait(1.0, c_timeAI);
        if (((UnitIsAlive(lp_hybrid) == false) || (libVCMI_gf_GameIsOver() == true))) {
            return true;
        }

    }
    return true;
}

trigger auto_gf_ActivateStalkerBlinkAI_Trigger = null;
unit auto_gf_ActivateStalkerBlinkAI_lp_stalker;
point auto_gf_ActivateStalkerBlinkAI_lp_centralPoint;

void gf_ActivateStalkerBlinkAI (unit lp_stalker, point lp_centralPoint) {
    auto_gf_ActivateStalkerBlinkAI_lp_stalker = lp_stalker;
    auto_gf_ActivateStalkerBlinkAI_lp_centralPoint = lp_centralPoint;

    if (auto_gf_ActivateStalkerBlinkAI_Trigger == null) {
        auto_gf_ActivateStalkerBlinkAI_Trigger = TriggerCreate("auto_gf_ActivateStalkerBlinkAI_TriggerFunc");
    }

    TriggerExecute(auto_gf_ActivateStalkerBlinkAI_Trigger, false, false);
}

bool auto_gf_ActivateStalkerBlinkAI_TriggerFunc (bool testConds, bool runActions) {
    unit lp_stalker = auto_gf_ActivateStalkerBlinkAI_lp_stalker;
    point lp_centralPoint = auto_gf_ActivateStalkerBlinkAI_lp_centralPoint;

    // Automatic Variable Declarations
    // Implementation
    gf_ActivateGenericEnemyAI(lp_stalker);
    while (true) {
        if (((UnitIsAlive(lp_stalker) == false) || (libVCMI_gf_GameIsOver() == true))) {
            return true;
        }

        if (((DistanceBetweenPoints(UnitGetPosition(lp_stalker), UnitGetPosition(gv_kERRIGAN)) < 3.5) || (DistanceBetweenPoints(UnitGetPosition(lp_stalker), UnitGetPosition(gv_aRTANIS)) < 2.0))) {
            UnitIssueOrder(lp_stalker, OrderTargetingPoint(AbilityCommand("Blink", 0), PointWithOffsetPolar(UnitGetPosition(lp_stalker), 8.0, AngleBetweenPoints(UnitGetPosition(lp_stalker), lp_centralPoint))), c_orderQueueReplace);
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_gf_ActivateGenericEnemyAI_Trigger = null;
unit auto_gf_ActivateGenericEnemyAI_lp_enemyUnit;

void gf_ActivateGenericEnemyAI (unit lp_enemyUnit) {
    auto_gf_ActivateGenericEnemyAI_lp_enemyUnit = lp_enemyUnit;

    if (auto_gf_ActivateGenericEnemyAI_Trigger == null) {
        auto_gf_ActivateGenericEnemyAI_Trigger = TriggerCreate("auto_gf_ActivateGenericEnemyAI_TriggerFunc");
    }

    TriggerExecute(auto_gf_ActivateGenericEnemyAI_Trigger, false, false);
}

bool auto_gf_ActivateGenericEnemyAI_TriggerFunc (bool testConds, bool runActions) {
    unit lp_enemyUnit = auto_gf_ActivateGenericEnemyAI_lp_enemyUnit;

    // Variable Declarations
    bool lv_kerriganValid;
    bool lv_artanisValid;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while (true) {
        if (((UnitIsAlive(lp_enemyUnit) == false) || (libVCMI_gf_GameIsOver() == true))) {
            return true;
        }

        if ((UnitPathableToUnit(lp_enemyUnit, gv_kERRIGAN, 0.0, 1000.0) == true)) {
            lv_kerriganValid = true;
        }
        else {
            lv_kerriganValid = false;
        }
        if ((UnitPathableToUnit(lp_enemyUnit, gv_aRTANIS, 0.0, 1000.0) == true)) {
            lv_artanisValid = true;
        }
        else {
            lv_artanisValid = false;
        }
        if ((lv_kerriganValid == true) && (lv_artanisValid == true)) {
            if ((DistanceBetweenPoints(UnitGetPosition(lp_enemyUnit), UnitGetPosition(gv_kERRIGAN)) <= DistanceBetweenPoints(UnitGetPosition(lp_enemyUnit), UnitGetPosition(gv_aRTANIS)))) {
                UnitIssueOrder(lp_enemyUnit, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_kERRIGAN)), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(lp_enemyUnit, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_aRTANIS)), c_orderQueueReplace);
            }
        }
        else {
            if ((lv_kerriganValid == true)) {
                UnitIssueOrder(lp_enemyUnit, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_kERRIGAN)), c_orderQueueReplace);
            }

            if ((lv_artanisValid == true)) {
                UnitIssueOrder(lp_enemyUnit, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_aRTANIS)), c_orderQueueReplace);
            }

        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_ULoadCampaignData("PUlnar02");
    TriggerExecute(gt_Init01Technology, true, false);
    libVoiC_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init02Players, true, false);
    TriggerExecute(gt_Init03Units, true, false);
    TriggerExecute(gt_Init04MusicSound, true, false);
    TriggerExecute(gt_Init05Environment, true, false);
    TriggerExecute(gt_Init06Difficulties, true, false);
    TriggerExecute(gt_Init07Help, true, false);
    TriggerExecute(gt_IntroQ, true, true);
    TriggerExecute(gt_StartGameStage01Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    libVoiC_gf_EnableDisableSpearofAdunChosenAbilities(false);
    libVCUI_gf_ShowSpearofAdunUI(false, c_transitionDurationImmediate);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("KerriganVoidApocalypse", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_02_DOMINION7, AbilityCommand("250mmStrikeCannons", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_02_DOMINION7, AbilityCommand("MengskThor250mmStrikeCannons", 0), false);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION2, "DarkProtoss", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION2, "StalkerExtraBlinkRange", 1);
    TechTreeUnitAllow(gv_pLAYER_01_USER, "HotSHunter", true);
    TechTreeUpgradeAddLevel(gv_pLAYER_01_USER, "HotSHunter", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_01_USER, "HotsCentrifugalHooks", 1);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("MorphZerglingToHunter", 0), true);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION7, "DarkMarineArmor", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION4, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION2, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION3, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION5, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION7, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION, gv_pLAYER_02_DOMINION4, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION, gv_pLAYER_02_DOMINION2, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION, gv_pLAYER_02_DOMINION3, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION, gv_pLAYER_02_DOMINION5, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION, gv_pLAYER_02_DOMINION7, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION4, gv_pLAYER_02_DOMINION2, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION4, gv_pLAYER_02_DOMINION3, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION4, gv_pLAYER_02_DOMINION5, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION4, gv_pLAYER_02_DOMINION7, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION2, gv_pLAYER_02_DOMINION3, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION2, gv_pLAYER_02_DOMINION5, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION2, gv_pLAYER_02_DOMINION7, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION3, gv_pLAYER_02_DOMINION5, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION3, gv_pLAYER_02_DOMINION7, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION5, gv_pLAYER_02_DOMINION7, libNtve_ge_AllianceSetting_Neutral);
    PlayerSetColorIndex(gv_pLAYER_02_DOMINION2, 1, true);
    PlayerSetColorIndex(gv_pLAYER_02_DOMINION7, 1, true);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "HeroicShieldCleanUp", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION, "HeroicShieldCleanUp", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION4, "HeroicShieldCleanUp", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION2, "HeroicShieldCleanUp", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION3, "HeroicShieldCleanUp", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION5, "HeroicShieldCleanUp", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION7, "HeroicShieldCleanUp", 1);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION2, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION2, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    libVCMI_gf_PM_DetectionUpgradesApply();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto824F88D6_g;
    int auto824F88D6_u;
    unit auto824F88D6_var;
    unitgroup auto55A240EF_g;
    int auto55A240EF_u;
    unit auto55A240EF_var;
    unitgroup auto1E91D962_g;
    int auto1E91D962_u;
    unit auto1E91D962_var;
    unitgroup auto67818B46_g;
    int auto67818B46_u;
    unit auto67818B46_var;
    unitgroup autoADBFD89D_g;
    int autoADBFD89D_u;
    unit autoADBFD89D_var;
    unitgroup auto06E1DF2A_g;
    int auto06E1DF2A_u;
    unit auto06E1DF2A_var;
    unitgroup auto4EB06A46_g;
    int auto4EB06A46_u;
    unit auto4EB06A46_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "ArtanisVoid", 0, gv_pLAYER_01_USER, PointFromId(462));
    gv_aRTANIS = UnitLastCreated();
    UnitStatusBarOverride(gv_aRTANIS, c_unitStatusGroupOwner);
    UnitSetState(gv_aRTANIS, c_unitStateFidget, false);
    libNtve_gf_CreateUnitsAtPoint2(1, "KerriganVoidUlnar02", 0, gv_pLAYER_01_USER, PointFromId(463));
    gv_kERRIGAN = UnitLastCreated();
    UnitStatusBarOverride(gv_kERRIGAN, c_unitStatusGroupOwner);
    UnitSetState(gv_kERRIGAN, c_unitStateFidget, false);
    libVCMI_gf_SetUnitInfoTextCampaign(UnitFromId(662), StringExternal("Param/Value/A701222B"), StringExternal("Param/Value/A226E50B"), null);
    libVCMI_gf_SetUnitInfoTextCampaign(UnitFromId(423), StringExternal("Param/Value/ACAA8579"), StringExternal("Param/Value/F3FF7E79"), null);
    libVCMI_gf_SetUnitInfoTextCampaign(UnitFromId(1326), StringExternal("Param/Value/B1C69703"), StringExternal("Param/Value/B1FBC4FB"), null);
    auto824F88D6_g = UnitGroup(null, gv_pLAYER_02_DOMINION4, RegionFromId(81), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto824F88D6_u = UnitGroupCount(auto824F88D6_g, c_unitCountAll);
    for (;; auto824F88D6_u -= 1) {
        auto824F88D6_var = UnitGroupUnitFromEnd(auto824F88D6_g, auto824F88D6_u);
        if (auto824F88D6_var == null) { break; }
        UnitGroupAdd(gv_s3HybridGroup01, auto824F88D6_var);
    }
    auto55A240EF_g = UnitGroup(null, gv_pLAYER_02_DOMINION4, RegionFromId(32), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto55A240EF_u = UnitGroupCount(auto55A240EF_g, c_unitCountAll);
    for (;; auto55A240EF_u -= 1) {
        auto55A240EF_var = UnitGroupUnitFromEnd(auto55A240EF_g, auto55A240EF_u);
        if (auto55A240EF_var == null) { break; }
        UnitGroupAdd(gv_s3FinalRoomShrineAttackGroup, auto55A240EF_var);
        UnitIssueOrder(auto55A240EF_var, Order(AbilityCommand("HybridChannelStart", 0)), c_orderQueueReplace);
    }
    auto1E91D962_g = UnitGroup(null, gv_pLAYER_02_DOMINION7, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1E91D962_u = UnitGroupCount(auto1E91D962_g, c_unitCountAll);
    for (;; auto1E91D962_u -= 1) {
        auto1E91D962_var = UnitGroupUnitFromEnd(auto1E91D962_g, auto1E91D962_u);
        if (auto1E91D962_var == null) { break; }
        libNtve_gf_PauseUnit(auto1E91D962_var, true);
    }
    auto67818B46_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionFromId(32), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto67818B46_u = UnitGroupCount(auto67818B46_g, c_unitCountAll);
    for (;; auto67818B46_u -= 1) {
        auto67818B46_var = UnitGroupUnitFromEnd(auto67818B46_g, auto67818B46_u);
        if (auto67818B46_var == null) { break; }
        UnitGroupAdd(gv_s3FinalRoomNonShrineAttackGroup, auto67818B46_var);
    }
    autoADBFD89D_g = UnitGroup(null, gv_pLAYER_02_DOMINION7, RegionFromId(32), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoADBFD89D_u = UnitGroupCount(autoADBFD89D_g, c_unitCountAll);
    for (;; autoADBFD89D_u -= 1) {
        autoADBFD89D_var = UnitGroupUnitFromEnd(autoADBFD89D_g, autoADBFD89D_u);
        if (autoADBFD89D_var == null) { break; }
        UnitGroupAdd(gv_s3FinalRoomNonShrineAttackGroup, autoADBFD89D_var);
    }
    UnitGroupAdd(gv_s1FirstEncounterGroup, UnitFromId(1333));
    UnitGroupAdd(gv_s1FirstEncounterGroup, UnitFromId(1152));
    UnitGroupAdd(gv_s1FirstEncounterGroup, UnitFromId(1504));
    UnitGroupAdd(gv_s1FirstEncounterGroup, UnitFromId(1503));
    auto06E1DF2A_g = gv_s1FirstEncounterGroup;
    auto06E1DF2A_u = UnitGroupCount(auto06E1DF2A_g, c_unitCountAll);
    for (;; auto06E1DF2A_u -= 1) {
        auto06E1DF2A_var = UnitGroupUnitFromEnd(auto06E1DF2A_g, auto06E1DF2A_u);
        if (auto06E1DF2A_var == null) { break; }
        UnitGroupAdd(gv_globalEnemyUnits, auto06E1DF2A_var);
    }
    UnitKill(UnitFromId(25));
    UnitKill(UnitFromId(1405));
    UnitKill(UnitFromId(1406));
    UnitKill(UnitFromId(1407));
    UnitKill(UnitFromId(1408));
    UnitKill(UnitFromId(1144));
    UnitKill(UnitFromId(27));
    UnitKill(UnitFromId(26));
    gv_firstConstruct = UnitFromId(233);
    auto4EB06A46_g = UnitGroup("XelNagaConstruct", gv_pLAYER_02_DOMINION, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4EB06A46_u = UnitGroupCount(auto4EB06A46_g, c_unitCountAll);
    for (;; auto4EB06A46_u -= 1) {
        auto4EB06A46_var = UnitGroupUnitFromEnd(auto4EB06A46_g, auto4EB06A46_u);
        if (auto4EB06A46_var == null) { break; }
        UnitSetTeamColorIndex(auto4EB06A46_var, 14);
        libNtve_gf_PauseUnit(auto4EB06A46_var, true);
        UnitSetState(auto4EB06A46_var, c_unitStateTargetable, false);
        UnitSetState(auto4EB06A46_var, c_unitStateSelectable, false);
        UnitSetState(auto4EB06A46_var, c_unitStateInvulnerable, true);
        UnitSetState(auto4EB06A46_var, c_unitStateStatusBar, false);
        UnitSetState(auto4EB06A46_var, c_unitStateFidget, false);
        libNtve_gf_ShowHideUnit(auto4EB06A46_var, false);
        gf_MonitorConstructVisibility(auto4EB06A46_var);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(auto4EB06A46_var), c_animNameDefault, "Stand Work", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    }
    libNtve_gf_SendActorMessageToUnit(UnitFromId(625), "Signal StartInstant");
    libNtve_gf_SendActorMessageToUnit(UnitFromId(1199), "Signal StartInstant");
    libNtve_gf_SendActorMessageToUnit(UnitFromId(276), "Signal StartInstant");
    libNtve_gf_SendActorMessageToUnit(UnitFromId(1198), "Signal StartInstant");
    libNtve_gf_SendActorMessageToUnit(UnitFromId(1367), "Signal StartInstant");
    libNtve_gf_SendActorMessageToUnit(UnitFromId(1365), "Signal StartInstant");
    libNtve_gf_SendActorMessageToUnit(UnitFromId(1366), "Signal StartInstant");
    libNtve_gf_SendActorMessageToUnit(UnitFromId(1364), "Signal StartInstant");
    libNtve_gf_SendActorMessageToUnit(UnitFromId(38), "Signal StartInstant");
    libNtve_gf_SendActorMessageToUnit(UnitFromId(1410), "Signal StartInstant");
    libNtve_gf_SendActorMessageToUnit(UnitFromId(1252), "Signal StartInstant");
    libNtve_gf_SendActorMessageToUnit(UnitFromId(494), "Signal StartInstant");
    libNtve_gf_SendActorMessageToUnit(UnitFromId(73), "Signal StartInstant");
    libNtve_gf_SendActorMessageToUnit(UnitFromId(74), "Signal StartInstant");
    libNtve_gf_SendActorMessageToUnit(UnitFromId(168), "Signal StartInstant");
    libNtve_gf_SendActorMessageToUnit(UnitFromId(182), "Signal StartInstant");
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleTargetDummy", c_unitCreateIgnorePlacement, 0, PointFromId(385));
    gv_s3FinalRoomRangedTarget = UnitLastCreated();
    UnitSetHeight(gv_s3FinalRoomRangedTarget, 4.0, 0.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleTargetDummy", c_unitCreateIgnorePlacement, 0, PointFromId(1509));
    gv_s3FinalRoomMeleeTarget01 = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleTargetDummy", c_unitCreateIgnorePlacement, 0, PointFromId(1510));
    gv_s3FinalRoomMeleeTarget02 = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleTargetDummy", c_unitCreateIgnorePlacement, 0, PointFromId(1511));
    gv_s3FinalRoomMeleeTarget03 = UnitLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init04MusicSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04MusicSound_Init () {
    gt_Init04MusicSound = TriggerCreate("gt_Init04MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    ActorSend(ActorFromDoodad(DoodadFromId(1606)), "SetOpacity");
    ActorSend(ActorFromDoodad(DoodadFromId(1363)), "SetOpacity");
    ActorSend(ActorFromDoodad(DoodadFromId(757)), "SetOpacity");
    ActorSend(ActorFromDoodad(DoodadFromId(756)), "SetOpacity");
    ActorSend(ActorFromDoodad(DoodadFromId(1647)), "SetOpacity");
    ActorSend(ActorFromDoodad(DoodadFromId(434)), "SetOpacity");
    TriggerExecute(gt_Autorevealers, true, false);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(71));
    VisRevealerEnable(VisRevealerLastCreated(), false);
    gv_bonusObjectiveRevealer1 = VisRevealerLastCreated();
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(60));
    VisRevealerEnable(VisRevealerLastCreated(), false);
    gv_bonusObjectiveRevealer2 = VisRevealerLastCreated();
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(48));
    VisRevealerEnable(VisRevealerLastCreated(), false);
    gv_bonusObjectiveRevealer3 = VisRevealerLastCreated();
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(8), "Blast_Craters_Big");
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(8), "Sunrays");
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(8), "SpaceFallingDebris");
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(97), "Blast_Craters_Big");
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(97), "Sunrays");
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(97), "SpaceFallingDebris");
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(26), "Blast_Craters_Big");
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(26), "Sunrays");
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(26), "SpaceFallingDebris");
    ActorSend(ActorFromDoodad(DoodadFromId(611)), "AnimGroupApply Work Stand,Work,Start Stand,Work,End");
    ActorSend(ActorFromDoodad(DoodadFromId(84)), "AnimGroupApply Work Stand,Work,Start Stand,Work,End");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto2AE6C631_g;
    int auto2AE6C631_u;
    unit auto2AE6C631_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_s3TimeLimit = libLotv_gf_DifficultyValueFixed2(390.0, 390.0, 300.0, 240.0);
    auto2AE6C631_g = UnitGroup("XelNagaConstruct", gv_pLAYER_02_DOMINION, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto2AE6C631_u = UnitGroupCount(auto2AE6C631_g, c_unitCountAll);
    for (;; auto2AE6C631_u -= 1) {
        auto2AE6C631_var = UnitGroupUnitFromEnd(auto2AE6C631_g, auto2AE6C631_u);
        if (auto2AE6C631_var == null) { break; }
        UnitSetPropertyFixed(auto2AE6C631_var, c_unitPropLifeMax, libLotv_gf_DifficultyValueFixed2(1500.0, 1500.0, 2200.0, 2800.0));
        UnitSetPropertyFixed(auto2AE6C631_var, c_unitPropLifePercent, 100.0);
    }
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION7, "TerranInfantryWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION7, "TerranInfantryArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION7, "TerranVehicleAndShipWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION7, "TerranVehicleAndShipArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION2, "ProtossGroundWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION2, "ProtossGroundArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION2, "ProtossAirWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION2, "ProtossAirArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION2, "ProtossShieldsLevel1", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_AddMissionTipCampaign("Artanis");
    libVCMI_gf_AddMissionTipCampaign("Kerrigan");
    libVCMI_gf_AddMissionTipCampaign("HybridBehemoth");
    libVCMI_gf_AddMissionTipCampaign("XelNagaConstruct");
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Marine", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Marauder", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Reaper", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Spectre", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Hellion", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("HellionTank", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Goliath", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("SiegeTank", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("SiegeTankSieged", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("WarHound", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("ThorAP", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Medivac", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Zealot", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Stalker", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Immortal", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Colossus", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("WarpPrismPhasing", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("WarpPrism", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("XelNagaConstruct", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("HybridReaver", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("HybridDestroyer", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("HybridBehemoth", false, gv_pLAYER_01_USER);
    libVCMI_gf_AddMissionCheat("Holdout 1", "Skip to the first holdout", gt_DebugHoldout1, libVCMI_ge_MissionCheatType_Stage, libVCMI_ge_MissionCheatUIType_Button);
    libVCMI_gf_AddMissionCheat("Stage 2", "Skip to the second mission stage", gt_DebugStage2, libVCMI_ge_MissionCheatType_Stage, libVCMI_ge_MissionCheatUIType_Button);
    libVCMI_gf_AddMissionCheat("Holdout 2", "Skip to the second holdout", gt_DebugHoldout2, libVCMI_ge_MissionCheatType_Stage, libVCMI_ge_MissionCheatUIType_Button);
    libVCMI_gf_AddMissionCheat("Stage 3", "Skip to the third mission stage", gt_DebugStage3, libVCMI_ge_MissionCheatType_Stage, libVCMI_ge_MissionCheatUIType_Button);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Holdout 1
//--------------------------------------------------------------------------------------------------
bool gt_DebugHoldout1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(gt_S1HallReached) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_DebugCleanupGeneral, true, false);
    TriggerExecute(gt_DebugCleanupStage1, true, false);
    TriggerExecute(gt_MidHoldoutQ, true, true);
    TriggerExecute(gt_S1Holdout, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugHoldout1_Init () {
    gt_DebugHoldout1 = TriggerCreate("gt_DebugHoldout1_Func");
    TriggerAddEventChatMessage(gt_DebugHoldout1, c_playerAny, "h1", true);
    TriggerAddEventChatMessage(gt_DebugHoldout1, c_playerAny, "holdout1", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Stage 2
//--------------------------------------------------------------------------------------------------
bool gt_DebugStage2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(gt_MidShrine1Q) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_DebugCleanupGeneral, true, false);
    TriggerExecute(gt_DebugCleanupStage1, true, false);
    TriggerExecute(gt_DebugCleanupHoldout1, true, false);
    TriggerExecute(gt_MidShrine1Q, true, true);
    TriggerExecute(gt_StartGameStage02Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugStage2_Init () {
    gt_DebugStage2 = TriggerCreate("gt_DebugStage2_Func");
    TriggerAddEventChatMessage(gt_DebugStage2, c_playerAny, "s2", true);
    TriggerAddEventChatMessage(gt_DebugStage2, c_playerAny, "stage2", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Holdout 2
//--------------------------------------------------------------------------------------------------
bool gt_DebugHoldout2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(gt_S2HallBeaconReached) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_DebugCleanupGeneral, true, false);
    TriggerExecute(gt_DebugCleanupStage1, true, false);
    TriggerExecute(gt_DebugCleanupHoldout1, true, false);
    TriggerExecute(gt_DebugCleanupStage2, true, false);
    TriggerExecute(gt_MidShrine2Q, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugHoldout2_Init () {
    gt_DebugHoldout2 = TriggerCreate("gt_DebugHoldout2_Func");
    TriggerAddEventChatMessage(gt_DebugHoldout2, c_playerAny, "h2", true);
    TriggerAddEventChatMessage(gt_DebugHoldout2, c_playerAny, "holdout2", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Stage 3
//--------------------------------------------------------------------------------------------------
bool gt_DebugStage3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(gt_MidShrine2Q) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_DebugCleanupGeneral, true, false);
    TriggerExecute(gt_DebugCleanupStage1, true, false);
    TriggerExecute(gt_DebugCleanupHoldout1, true, false);
    TriggerExecute(gt_DebugCleanupStage2, true, false);
    TriggerExecute(gt_MidShrine2Q, true, true);
    TriggerExecute(gt_StartGameStage03Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugStage3_Init () {
    gt_DebugStage3 = TriggerCreate("gt_DebugStage3_Func");
    TriggerAddEventChatMessage(gt_DebugStage3, c_playerAny, "s3", true);
    TriggerAddEventChatMessage(gt_DebugStage3, c_playerAny, "stage3", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Cleanup General
//--------------------------------------------------------------------------------------------------
bool gt_DebugCleanupGeneral_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto688E1730_g;
    int auto688E1730_u;
    unit auto688E1730_var;

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TransmissionClearAll();
    TriggerQueueClear(c_triggerQueueRetain);
    PingDestroy(gv_mainObjectivePing);
    PingDestroy(gv_bonusObjectivePing1);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeObjectivePanel, true);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    auto688E1730_g = gv_globalEnemyUnits;
    auto688E1730_u = UnitGroupCount(auto688E1730_g, c_unitCountAll);
    for (;; auto688E1730_u -= 1) {
        auto688E1730_var = UnitGroupUnitFromEnd(auto688E1730_g, auto688E1730_u);
        if (auto688E1730_var == null) { break; }
        UnitKill(auto688E1730_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugCleanupGeneral_Init () {
    gt_DebugCleanupGeneral = TriggerCreate("gt_DebugCleanupGeneral_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Cleanup Stage 1
//--------------------------------------------------------------------------------------------------
bool gt_DebugCleanupStage1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_S1ReachedFirstDoorQ, false);
    TriggerEnable(gt_S1AwakenOrangeConstruct01Q, false);
    TriggerEnable(gt_S1LightningDashUsed, false);
    TriggerEnable(gt_S1FirstEncounterTargetsDead, false);
    TriggerEnable(gt_IntroLightningDashQ, false);
    TriggerEnable(gt_TeachAstralWindQ, false);
    TriggerEnable(gt_S1BonusObjectiveDiscoverQ, false);
    TriggerEnable(gt_S1HallReached, false);
    TriggerStop(gt_S1AwakenOrangeConstruct01Q);
    TriggerStop(gt_S1FirstEncounterTargetsDead);
    TriggerStop(gt_S1LightningDashUsed);
    TriggerStop(gt_S1HallReached);
    TriggerStop(gt_StartGameStage01Q);
    TriggerExecute(gt_ObjectiveHallsofRevelationCreate, true, false);
    TriggerExecute(gt_ObjectiveSurviveCreate, true, false);
    gv_hallsReached = 1;
    UnitKill(UnitFromId(662));
    UnitKill(UnitFromId(239));
    UnitIssueOrder(UnitFromId(522), Order(AbilityCommand("XelNagaTempleDoorLargeNELowered", 0)), c_orderQueueReplace);
    UnitRemove(UnitFromId(1156));
    UnitRemove(UnitFromId(1157));
    UnitRemove(UnitFromId(1159));
    TriggerExecute(gt_ObjectiveHallsofRevelationUpdate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugCleanupStage1_Init () {
    gt_DebugCleanupStage1 = TriggerCreate("gt_DebugCleanupStage1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Cleanup Holdout 1
//--------------------------------------------------------------------------------------------------
bool gt_DebugCleanupHoldout1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_S1HoldoutEndQ, false);
    TriggerStop(gt_S1Holdout);
    TimerWindowDestroy(gv_holdoutTimerWindow);
    UnitIssueOrder(gv_aRTANIS, Order(AbilityCommand("ArtanisChannel", 1)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugCleanupHoldout1_Init () {
    gt_DebugCleanupHoldout1 = TriggerCreate("gt_DebugCleanupHoldout1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Cleanup Stage 2
//--------------------------------------------------------------------------------------------------
bool gt_DebugCleanupStage2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    unitgroup auto3BBE7CE6_g;
    int auto3BBE7CE6_u;
    unit auto3BBE7CE6_var;
    unitgroup auto1FE7ADFA_g;
    int auto1FE7ADFA_u;
    unit auto1FE7ADFA_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_S2StartHallDefenseEvents, false);
    TriggerEnable(gt_S2HallDefenseBreach, false);
    TriggerEnable(gt_S2HallDefenseDropInHybrids, false);
    TriggerEnable(gt_S2HallDefenseFlyInWarpPrismsAndMedivacs, false);
    TriggerStop(gt_S2StartHallDefenseEvents);
    TriggerStop(gt_S2HallDefenseBreach);
    TriggerStop(gt_S2HallDefenseDropInHybrids);
    TriggerStop(gt_S2HallDefenseFlyInWarpPrismsAndMedivacs);
    TriggerStop(gt_S2HallBeaconReached);
    TriggerStop(gt_StartGameStage02Q);
    gv_hallsReached = 2;
    UnitKill(UnitFromId(1326));
    UnitKill(UnitFromId(791));
    UnitIssueOrder(gv_aRTANIS, Order(AbilityCommand("ArtanisChannel", 1)), c_orderQueueReplace);
    TriggerExecute(gt_ObjectiveHallsofRevelationUpdate, true, false);
    auto3BBE7CE6_g = UnitGroup("WarpPrismPhasing", c_playerAny, RegionFromId(50), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3BBE7CE6_u = UnitGroupCount(auto3BBE7CE6_g, c_unitCountAll);
    for (;; auto3BBE7CE6_u -= 1) {
        auto3BBE7CE6_var = UnitGroupUnitFromEnd(auto3BBE7CE6_g, auto3BBE7CE6_u);
        if (auto3BBE7CE6_var == null) { break; }
        UnitRemove(auto3BBE7CE6_var);
    }
    auto1FE7ADFA_g = UnitGroup("WarpPrism", c_playerAny, RegionFromId(50), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1FE7ADFA_u = UnitGroupCount(auto1FE7ADFA_g, c_unitCountAll);
    for (;; auto1FE7ADFA_u -= 1) {
        auto1FE7ADFA_var = UnitGroupUnitFromEnd(auto1FE7ADFA_g, auto1FE7ADFA_u);
        if (auto1FE7ADFA_var == null) { break; }
        UnitRemove(auto1FE7ADFA_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugCleanupStage2_Init () {
    gt_DebugCleanupStage2 = TriggerCreate("gt_DebugCleanupStage2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Cleanup Stage 3
//--------------------------------------------------------------------------------------------------
bool gt_DebugCleanupStage3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    unitgroup auto728298F5_g;
    int auto728298F5_u;
    unit auto728298F5_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_S3SpectreAmbushQ, false);
    TriggerStop(gt_StartGameStage03Q);
    auto728298F5_g = gv_s3HybridGroup01;
    auto728298F5_u = UnitGroupCount(auto728298F5_g, c_unitCountAll);
    for (;; auto728298F5_u -= 1) {
        auto728298F5_var = UnitGroupUnitFromEnd(auto728298F5_g, auto728298F5_u);
        if (auto728298F5_var == null) { break; }
        UnitKill(auto728298F5_var);
    }
    UnitKill(UnitFromId(312));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugCleanupStage3_Init () {
    gt_DebugCleanupStage3 = TriggerCreate("gt_DebugCleanupStage3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Gates
//--------------------------------------------------------------------------------------------------
bool gt_InitGates_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unit lv_tempUnit;

    // Automatic Variable Declarations
    int autoB37DCC4F_ae;
    const int autoB37DCC4F_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_numberOfGates = 11;
    autoB37DCC4F_ae = gv_numberOfGates;
    lv_i = 1;
    for ( ; ( (autoB37DCC4F_ai >= 0 && lv_i <= autoB37DCC4F_ae) || (autoB37DCC4F_ai < 0 && lv_i >= autoB37DCC4F_ae) ) ; lv_i += autoB37DCC4F_ai ) {
        gv_xelNagaGates[0].lv_gateRegion = RegionFromName(("Gate " + IntToString(lv_i)));
        RegionAddRegion(RegionFromId(6), gv_xelNagaGates[0].lv_gateRegion);
        gv_xelNagaGates[0].lv_gateUnit = UnitGroupUnit(UnitGroup("XelNagaTempleDoor", 0, gv_xelNagaGates[0].lv_gateRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32))), 0), 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitGates_Init () {
    gt_InitGates = TriggerCreate("gt_InitGates_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game - Stage 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameStage01Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_currentStage = 1;
    TriggerExecute(gt_InitHeroes, true, false);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(PointFromId(664), 5.0), 0.1, false);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(PointFromId(664), 3.0), 0.0, false);
    Wait(2.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveHallsofRevelationCreate, true, false);
    TriggerExecute(gt_ObjectiveSurviveCreate, true, true);
    libVCMI_gf_CreateObjectivePing(true, PointFromId(664), StringExternal("Param/Value/9CF6532A"));
    gv_mainObjectivePing = PingLastCreated();
    Wait(1.5, c_timeReal);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_aRTANIS, "pMission_Ulnar02|Line00180", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameStage01Q_Init () {
    gt_StartGameStage01Q = TriggerCreate("gt_StartGameStage01Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Animate Xel'Naga Pillarwall
//--------------------------------------------------------------------------------------------------
bool gt_S1AnimateXelNagaPillarwall_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(89), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ActorSend(ActorFromDoodad(DoodadFromId(705)), "Signal Work");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1AnimateXelNagaPillarwall_Init () {
    gt_S1AnimateXelNagaPillarwall = TriggerCreate("gt_S1AnimateXelNagaPillarwall_Func");
    TriggerAddEventTimePeriodic(gt_S1AnimateXelNagaPillarwall, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Reached First Door Q
//--------------------------------------------------------------------------------------------------
bool gt_S1ReachedFirstDoorQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(54), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_S1FirstEncounterTargetsDead, true);
    TriggerEnable(gt_S1LightningDashUsed, true);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(54), 6.0, false);
    UnitIssueOrder(gv_aRTANIS, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1507)), c_orderQueueReplace);
    UnitIssueOrder(gv_aRTANIS, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(PointFromId(1507), 1.0, 45.0)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_kERRIGAN, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1508)), c_orderQueueReplace);
    UnitIssueOrder(gv_kERRIGAN, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(PointFromId(1508), 1.0, 45.0)), c_orderQueueAddToEnd);
    UnitGroupIssueOrder(UnitGroup("HotSHunter", gv_pLAYER_01_USER, RegionFromId(53), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1658)), c_orderQueueReplace);
    CameraPan(gv_pLAYER_01_USER, CameraInfoGetTarget(CameraInfoFromId(1506)), 2.0, -1, 10.0, false);
    Wait(1.0, c_timeReal);
    if (((gv_s1LightningDashUsed == true) || (UnitGroupCount(gv_s1FirstEncounterGroup, c_unitCountAlive) == 0))) {
        return true;
    }

    UISetButtonFaceHighlighted(PlayerGroupAll(), "ArtanisLightningDash", true);
    libVCMI_gf_CreateReticleEffectAndTextTagAtPoint(libVCMI_ge_CampaginReticleType_ProtossEnemy, libVCMI_ge_CampaginReticleSize_Medium, StringExternal("Param/Value/2E778A86"), PointFromId(1505));
    gv_s1FirstEncounterReticleActor = libNtve_gf_ActorLastCreated();
    gv_s1FirstEncounterReticleTextTag = TextTagLastCreated();
    TriggerQueueEnter();
    if ((gv_s1LightningDashUsed == false) && (UnitGroupCount(gv_s1FirstEncounterGroup, c_unitCountAlive) > 0)) {
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(gv_aRTANIS, "pMission_Ulnar02|Line00185", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        gv_s1FirstEncounterTransmission = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1ReachedFirstDoorQ_Init () {
    gt_S1ReachedFirstDoorQ = TriggerCreate("gt_S1ReachedFirstDoorQ_Func");
    TriggerAddEventTimePeriodic(gt_S1ReachedFirstDoorQ, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - First Encounter Targets Dead
//--------------------------------------------------------------------------------------------------
bool gt_S1FirstEncounterTargetsDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(gv_s1FirstEncounterGroup, c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(gv_s1FirstEncounterReticleActor);
    TextTagDestroy(gv_s1FirstEncounterReticleTextTag);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "ArtanisLightningDash", false);
    TransmissionClear(gv_s1FirstEncounterTransmission);
    TriggerExecute(gt_S1AwakenOrangeConstruct01Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1FirstEncounterTargetsDead_Init () {
    gt_S1FirstEncounterTargetsDead = TriggerCreate("gt_S1FirstEncounterTargetsDead_Func");
    TriggerEnable(gt_S1FirstEncounterTargetsDead, false);
    TriggerAddEventTimePeriodic(gt_S1FirstEncounterTargetsDead, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Lightning Dash Used
//--------------------------------------------------------------------------------------------------
bool gt_S1LightningDashUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_s1LightningDashUsed = true;
    libNtve_gf_KillModel(gv_s1FirstEncounterReticleActor);
    TextTagDestroy(gv_s1FirstEncounterReticleTextTag);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "ArtanisLightningDash", false);
    TransmissionClear(gv_s1FirstEncounterTransmission);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1LightningDashUsed_Init () {
    gt_S1LightningDashUsed = TriggerCreate("gt_S1LightningDashUsed_Func");
    TriggerEnable(gt_S1LightningDashUsed, false);
    TriggerAddEventUnitAbility(gt_S1LightningDashUsed, UnitRefFromVariable("gv_aRTANIS"), AbilityCommand("ArtanisLightningDash", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Awaken Orange Construct 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_S1AwakenOrangeConstruct01Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(54), 6.0, false);
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_aRTANIS, "pMission_Ulnar02|Line00009", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(4.0, c_timeGame);
    gf_AwakenConstruct(UnitFromId(233), false);
    Wait(3.6, c_timeGame);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(UnitFromId(233), "pMission_Ulnar02|Line00010", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gf_ActivateXelNagaConstructAI(UnitFromId(233));
    TransmissionWait(TransmissionLastSent(), 0.0);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1AwakenOrangeConstruct01Q_Init () {
    gt_S1AwakenOrangeConstruct01Q = TriggerCreate("gt_S1AwakenOrangeConstruct01Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Orange Construct 01 Dead Q
//--------------------------------------------------------------------------------------------------
bool gt_S1OrangeConstruct01DeadQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_constructPoint;
    unit lv_localCube;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_constructPoint = UnitGetPosition(EventUnit());

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventUnit() == UnitFromId(233)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(1.8, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ArtifactUlnarB", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION5, lv_constructPoint);
    lv_localCube = UnitLastCreated();
    libNtve_gf_ShareVisionofUnit(lv_localCube, true, gv_pLAYER_01_USER);
    gf_CreateXelnagaDoorPing(lv_localCube);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(lv_localCube, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(516)), c_orderQueueReplace);
    while (!((DistanceBetweenPoints(UnitGetPosition(lv_localCube), PointFromId(516)) <= 1.0))) {
        Wait(1.0, c_timeGame);
    }
    UnitIssueOrder(lv_localCube, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffset(UnitGetPosition(lv_localCube), 1.0, 1.0)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(lv_localCube, "Signal Start");
    libNtve_gf_SendActorMessageToUnit(UnitFromId(1253), "Signal Start");
    Wait(2.0, c_timeGame);
    libVCMI_gf_CreateMissionAutosavePoint(StringToText(""));
    UnitRemove(UnitFromId(1156));
    UnitRemove(UnitFromId(1157));
    libNtve_gf_ShareVisionofUnit(lv_localCube, false, gv_pLAYER_01_USER);
    PingDestroy(libHots_gf_PingStoredForUnit(lv_localCube, 1));
    UnitIssueOrder(UnitFromId(226), Order(AbilityCommand("XelNagaTempleDoorLargeNELowered", 0)), c_orderQueueReplace);
    SoundPlayAtPointForPlayer(SoundLink("PUlnar02_GateOpenSound", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(UnitFromId(226)), 0.0, 100.0, 0.0);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_kERRIGAN, "pMission_Ulnar02|Line00202", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(gv_aRTANIS, "pMission_Ulnar02|Line00203", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1OrangeConstruct01DeadQ_Init () {
    gt_S1OrangeConstruct01DeadQ = TriggerCreate("gt_S1OrangeConstruct01DeadQ_Func");
    TriggerAddEventUnitDied(gt_S1OrangeConstruct01DeadQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Sky Hybrid
//--------------------------------------------------------------------------------------------------
bool gt_S1SkyHybrid_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(18), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(18), 12.0, false);
    TriggerExecute(gt_S1SkyHybridQ, true, false);
    gf_SpawnSkyReaver(PointFromId(614));
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        Wait(0.5, c_timeGame);
        gf_SpawnSkyDestroyer(PointFromId(681));
        gf_SpawnSkyDestroyer(PointFromId(1657));
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1)) {
        Wait(0.5, c_timeGame);
        gf_SpawnSkyReaver(PointFromId(365));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1SkyHybrid_Init () {
    gt_S1SkyHybrid = TriggerCreate("gt_S1SkyHybrid_Func");
    TriggerAddEventTimePeriodic(gt_S1SkyHybrid, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Sky Hybrid Q
//--------------------------------------------------------------------------------------------------
bool gt_S1SkyHybridQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_kERRIGAN, "pMission_Ulnar02|Line00074", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1SkyHybridQ_Init () {
    gt_S1SkyHybridQ = TriggerCreate("gt_S1SkyHybridQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Awaken Blue Construct 01
//--------------------------------------------------------------------------------------------------
bool gt_S1AwakenBlueConstruct01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(25), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(25), 12.0, false);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(UnitFromId(454)), 3.0, Color(100.00, 0.00, 0.00));
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/9A7FDD5D"), null, UnitFromId(454));
    TriggerExecute(gt_S1BlueConstruct01Q, true, false);
    gf_AwakenConstruct(UnitFromId(454), false);
    Wait(3.6, c_timeGame);
    gf_ActivateXelNagaConstructAI(UnitFromId(454));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1AwakenBlueConstruct01_Init () {
    gt_S1AwakenBlueConstruct01 = TriggerCreate("gt_S1AwakenBlueConstruct01_Func");
    TriggerAddEventTimePeriodic(gt_S1AwakenBlueConstruct01, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Blue Construct 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_S1BlueConstruct01Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_kERRIGAN, "pMission_Ulnar02|Line00011", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1BlueConstruct01Q_Init () {
    gt_S1BlueConstruct01Q = TriggerCreate("gt_S1BlueConstruct01Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Room 2 Blue Construct Dead
//--------------------------------------------------------------------------------------------------
bool gt_S1Room2BlueConstructDead_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_constructPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_constructPoint = UnitGetPosition(EventUnit());

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventUnit() == UnitFromId(454)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_s1DoubleDoorSphereTarget = PointFromId(518);
    Wait(1.8, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ArtifactUlnarA", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION3, lv_constructPoint);
    gv_s1DoubleDoorSphere = UnitLastCreated();
    libNtve_gf_ShareVisionofUnit(gv_s1DoubleDoorSphere, true, gv_pLAYER_01_USER);
    gf_CreateXelnagaDoorPing(gv_s1DoubleDoorSphere);
    Wait(1.5, c_timeGame);
    UnitIssueOrder(gv_s1DoubleDoorSphere, OrderTargetingPoint(AbilityCommand("move", 0), gv_s1DoubleDoorSphereTarget), c_orderQueueReplace);
    while (!((DistanceBetweenPoints(UnitGetPosition(gv_s1DoubleDoorSphere), gv_s1DoubleDoorSphereTarget) <= 1.0))) {
        Wait(1.0, c_timeGame);
    }
    UnitIssueOrder(gv_s1DoubleDoorSphere, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffset(UnitGetPosition(gv_s1DoubleDoorSphere), 1.0, 1.0)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_s1DoubleDoorSphere, "Signal Start");
    libNtve_gf_SendActorMessageToUnit(UnitFromId(493), "Signal Start");
    Wait(2.0, c_timeGame);
    libNtve_gf_ShareVisionofUnit(gv_s1DoubleDoorSphere, false, gv_pLAYER_01_USER);
    PingDestroy(libHots_gf_PingStoredForUnit(gv_s1DoubleDoorSphere, 1));
    TriggerExecute(gt_IntroLightningDashQ, true, false);
    TriggerExecute(gt_S1OpenSecondDoor, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1Room2BlueConstructDead_Init () {
    gt_S1Room2BlueConstructDead = TriggerCreate("gt_S1Room2BlueConstructDead_Func");
    TriggerAddEventUnitDied(gt_S1Room2BlueConstructDead, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Awaken Orange Construct 02
//--------------------------------------------------------------------------------------------------
bool gt_S1AwakenOrangeConstruct02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(gv_aRTANIS, RegionFromId(37)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_IntroLightningDashQ, false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(37), 12.0, false);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(UnitFromId(455)), 3.0, Color(100.00, 0.00, 0.00));
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/F32FFD48"), null, UnitFromId(455));
    gf_AwakenConstruct(UnitFromId(455), false);
    Wait(3.6, c_timeGame);
    UnitIssueOrder(UnitFromId(455), OrderTargetingPoint(AbilityCommand("XelNagaShadowStep", 0), PointFromId(576)), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_S1OrangeConstruct02ShadowStepQ, true, false);
    while (!(((UnitIsAlive(UnitFromId(455)) == false) || (DistanceBetweenPoints(UnitGetPosition(UnitFromId(455)), PointFromId(576)) <= 1)))) {
        Wait(0.5, c_timeGame);
    }
    Wait(1.0, c_timeGame);
    if ((UnitIsAlive(UnitFromId(455)) == false)) {
        return true;
    }

    AISetUnitScriptControlled(UnitFromId(455), false);
    gf_ActivateXelNagaConstructAI(UnitFromId(455));
    if ((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1)) {
        while (!((UnitGetPropertyFixed(UnitFromId(455), c_unitPropLifePercent, c_unitPropCurrent) <= 65.0))) {
            Wait(1.0, c_timeGame);
        }
        gf_SpawnSkyReaver(PointFromId(615));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1AwakenOrangeConstruct02_Init () {
    gt_S1AwakenOrangeConstruct02 = TriggerCreate("gt_S1AwakenOrangeConstruct02_Func");
    TriggerAddEventTimePeriodic(gt_S1AwakenOrangeConstruct02, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Orange Construct 02 Shadow Step Q
//--------------------------------------------------------------------------------------------------
bool gt_S1OrangeConstruct02ShadowStepQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_aRTANIS, "pMission_Ulnar02|Line00014", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1OrangeConstruct02ShadowStepQ_Init () {
    gt_S1OrangeConstruct02ShadowStepQ = TriggerCreate("gt_S1OrangeConstruct02ShadowStepQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Orange Construct 02 Dead
//--------------------------------------------------------------------------------------------------
bool gt_S1OrangeConstruct02Dead_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_constructPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_constructPoint = UnitGetPosition(EventUnit());

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventUnit() == UnitFromId(455)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_s1DoubleDoorCubeTarget = PointFromId(401);
    Wait(1.8, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ArtifactUlnarB", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION5, lv_constructPoint);
    gv_s1DoubleDoorCube = UnitLastCreated();
    libNtve_gf_ShareVisionofUnit(gv_s1DoubleDoorCube, true, gv_pLAYER_01_USER);
    gf_CreateXelnagaDoorPing(gv_s1DoubleDoorCube);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(gv_s1DoubleDoorCube, OrderTargetingPoint(AbilityCommand("move", 0), gv_s1DoubleDoorCubeTarget), c_orderQueueReplace);
    while (!((DistanceBetweenPoints(UnitGetPosition(gv_s1DoubleDoorCube), gv_s1DoubleDoorCubeTarget) <= 1.0))) {
        Wait(1.0, c_timeGame);
    }
    UnitIssueOrder(gv_s1DoubleDoorCube, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffset(UnitGetPosition(gv_s1DoubleDoorCube), 1.0, 1.0)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_s1DoubleDoorCube, "Signal Start");
    libNtve_gf_SendActorMessageToUnit(UnitFromId(612), "Signal Start");
    Wait(2.0, c_timeGame);
    libNtve_gf_ShareVisionofUnit(gv_s1DoubleDoorCube, false, gv_pLAYER_01_USER);
    PingDestroy(libHots_gf_PingStoredForUnit(gv_s1DoubleDoorCube, 1));
    TriggerExecute(gt_S1OpenSecondDoor, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1OrangeConstruct02Dead_Init () {
    gt_S1OrangeConstruct02Dead = TriggerCreate("gt_S1OrangeConstruct02Dead_Func");
    TriggerAddEventUnitDied(gt_S1OrangeConstruct02Dead, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Open Second Door
//--------------------------------------------------------------------------------------------------
bool gt_S1OpenSecondDoor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(454)) == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(455)) == false))) {
            return false;
        }

        if (!((DistanceBetweenPoints(UnitGetPosition(gv_s1DoubleDoorSphere), gv_s1DoubleDoorSphereTarget) <= 1.0))) {
            return false;
        }

        if (!((DistanceBetweenPoints(UnitGetPosition(gv_s1DoubleDoorCube), gv_s1DoubleDoorCubeTarget) <= 1.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateMissionAutosavePoint(StringToText(""));
    UnitRemove(UnitFromId(1159));
    UnitIssueOrder(UnitFromId(522), Order(AbilityCommand("XelNagaTempleDoorLargeNELowered", 0)), c_orderQueueReplace);
    SoundPlayAtPointForPlayer(SoundLink("PUlnar02_GateOpenSound", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(UnitFromId(522)), 0.0, 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1OpenSecondDoor_Init () {
    gt_S1OpenSecondDoor = TriggerCreate("gt_S1OpenSecondDoor_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Hall Reached
//--------------------------------------------------------------------------------------------------
bool gt_S1HallReached_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_hallsReached > 0)) {
        return true;
    }

    gv_hallsReached = 1;
    UnitKill(UnitFromId(662));
    TriggerExecute(gt_ObjectiveHallsofRevelationUpdate, true, false);
    Wait(2.0, c_timeReal);
    libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/B02C8F89"));
    TriggerExecute(gt_S1HallReachedQ, true, true);
    TriggerExecute(gt_MidHoldoutQ, true, true);
    TriggerExecute(gt_S1Holdout, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1HallReached_Init () {
    gt_S1HallReached = TriggerCreate("gt_S1HallReached_Func");
    TriggerAddEventUnitRegion(gt_S1HallReached, UnitRefFromVariable("gv_aRTANIS"), RegionFromId(70), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Hall Reached Q
//--------------------------------------------------------------------------------------------------
bool gt_S1HallReachedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_aRTANIS, "pMission_Ulnar02|Line00021", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1HallReachedQ_Init () {
    gt_S1HallReachedQ = TriggerCreate("gt_S1HallReachedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Holdout
//--------------------------------------------------------------------------------------------------
bool gt_S1Holdout_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_hybridPointIterator;

    // Automatic Variable Declarations
    unitgroup autoE9B85986_g;
    int autoE9B85986_u;
    unit autoE9B85986_var;
    string auto10D943F4_val;
    int auto0BDF7146_n;
    int auto0BDF7146_i;
    int auto0B34FDF8_n;
    int auto0B34FDF8_i;
    const int auto3FDE9C34_n = 2;
    int auto3FDE9C34_i;
    int auto83648932_n;
    int auto83648932_i;
    int auto76086D0A_n;
    int auto76086D0A_i;
    int auto64B12F03_n;
    int auto64B12F03_i;
    int auto9468B423_n;
    int auto9468B423_i;
    int autoEFE82D42_n;
    int autoEFE82D42_i;
    int auto4A74E05F_n;
    int auto4A74E05F_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_S1ProtossUnitWarpedIn, true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisiblePylon", 0, gv_pLAYER_02_DOMINION2, PointFromId(1688));
    gv_s1HoldOutInvisiblePylon = UnitLastCreated();
    VisRevealArea(gv_pLAYER_02_DOMINION2, RegionFromId(79), 0.0, false);
    autoE9B85986_g = gv_s1HoldOutUnitGroup;
    autoE9B85986_u = UnitGroupCount(autoE9B85986_g, c_unitCountAll);
    for (;; autoE9B85986_u -= 1) {
        autoE9B85986_var = UnitGroupUnitFromEnd(autoE9B85986_g, autoE9B85986_u);
        if (autoE9B85986_var == null) { break; }
        auto10D943F4_val = UnitGetType(autoE9B85986_var);
        if (auto10D943F4_val == "Zealot") {
            UnitSetOwner(autoE9B85986_var, gv_pLAYER_02_DOMINION2, true);
        }
        else if (auto10D943F4_val == "Reaper") {
            UnitSetOwner(autoE9B85986_var, gv_pLAYER_02_DOMINION7, true);
        }
        else {
        }
        gf_ActivateGenericEnemyAI(autoE9B85986_var);
    }
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 2.0);
    TimerStart(gv_holdoutTimer, 60.0, false, c_timeAI);
    libVCUI_gf_TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/2062F35A"), true, false);
    TimerWindowSetFormat(TimerWindowLastCreated(), StringToText("<mintotal/>:<sec2/>"));
    libVCUI_gf_SetTimerWindowDangerThreshold(-1.0);
    gv_holdoutTimerWindow = TimerWindowLastCreated();
    gf_SendMedivacDrop(PointFromId(1309), PointFromId(1687), PointFromId(1180), libLotv_gf_DifficultyValueInt2(2, 2, 1, 1), libLotv_gf_DifficultyValueVoidUnitType("Goliath", "Goliath", "WarHound", "WarHound"));
    gf_SpawnSideStalker(PointFromId(970), PointFromId(979), PointFromId(985));
    gf_SpawnSideStalker(PointFromId(972), PointFromId(981), PointFromId(987));
    auto0BDF7146_n = libLotv_gf_DifficultyValueInt2(0, 0, 1, 1);
    for (auto0BDF7146_i = 1; auto0BDF7146_i <= auto0BDF7146_n; auto0BDF7146_i += 1) {
        gf_SpawnSideStalker(PointFromId(967), PointFromId(973), PointFromId(982));
        gf_SpawnSideStalker(PointFromId(971), PointFromId(980), PointFromId(986));
    }
    Wait(2.0, c_timeAI);
    auto0B34FDF8_n = libLotv_gf_DifficultyValueInt2(0, 0, 0, 1);
    for (auto0B34FDF8_i = 1; auto0B34FDF8_i <= auto0B34FDF8_n; auto0B34FDF8_i += 1) {
        gf_SpawnSideStalker(PointFromId(969), PointFromId(978), PointFromId(984));
        gf_SpawnSideStalker(PointFromId(971), PointFromId(980), PointFromId(986));
    }
    Wait(8.0, c_timeAI);
    gf_SendMedivacDrop(PointFromId(1310), PointFromId(1687), PointFromId(1181), libLotv_gf_DifficultyValueInt2(4, 4, 6, 6), "Reaper");
    for (auto3FDE9C34_i = 1; auto3FDE9C34_i <= auto3FDE9C34_n; auto3FDE9C34_i += 1) {
        auto83648932_n = libLotv_gf_DifficultyValueInt2(3, 3, 5, 8);
        for (auto83648932_i = 1; auto83648932_i <= auto83648932_n; auto83648932_i += 1) {
            gf_SpawnS1HoldoutProtoss("Zealot", RegionRandomPoint(RegionFromId(79)));
            Wait(0.1, c_timeAI);
        }
        Wait(5.0, c_timeAI);
    }
    auto76086D0A_n = libLotv_gf_DifficultyValueInt2(1, 1, 0, 0);
    for (auto76086D0A_i = 1; auto76086D0A_i <= auto76086D0A_n; auto76086D0A_i += 1) {
        if (lv_hybridPointIterator >= 3) {
            lv_hybridPointIterator = 1;
        }
        else {
            lv_hybridPointIterator = lv_hybridPointIterator + 1;
        }
        gf_SpawnSkyDestroyer(PointFromName(("S1 - Holdout Hybrid 0" + IntToString(lv_hybridPointIterator))));
        Wait(1.0, c_timeAI);
    }
    auto64B12F03_n = libLotv_gf_DifficultyValueInt2(0, 0, 1, 2);
    for (auto64B12F03_i = 1; auto64B12F03_i <= auto64B12F03_n; auto64B12F03_i += 1) {
        if (lv_hybridPointIterator >= 3) {
            lv_hybridPointIterator = 1;
        }
        else {
            lv_hybridPointIterator = lv_hybridPointIterator + 1;
        }
        gf_SpawnSkyReaver(PointFromName(("S1 - Holdout Hybrid 0" + IntToString(lv_hybridPointIterator))));
        Wait(1.0, c_timeAI);
    }
    Wait(5.0, c_timeAI);
    gf_SpawnSideStalker(PointFromId(967), PointFromId(973), PointFromId(982));
    gf_SpawnSideStalker(PointFromId(969), PointFromId(978), PointFromId(984));
    gf_SpawnSideStalker(PointFromId(971), PointFromId(980), PointFromId(986));
    Wait(5.0, c_timeAI);
    gf_SendMedivacDrop(PointFromId(1309), PointFromId(1687), PointFromId(1180), libLotv_gf_DifficultyValueInt2(3, 3, 4, 4), "Spectre");
    gf_SendMedivacDrop(PointFromId(1310), PointFromId(1687), PointFromId(1181), 2, "HellionTank");
    Wait(10.0, c_timeAI);
    gf_SpawnS1HoldoutProtoss("Colossus", PointFromId(689));
    gf_SpawnS1HoldoutProtoss("Colossus", PointFromId(691));
    auto9468B423_n = libLotv_gf_DifficultyValueInt2(0, 0, 0, 1);
    for (auto9468B423_i = 1; auto9468B423_i <= auto9468B423_n; auto9468B423_i += 1) {
        gf_SpawnS1HoldoutProtoss("Colossus", PointFromId(917));
    }
    Wait(10.0, c_timeAI);
    autoEFE82D42_n = libLotv_gf_DifficultyValueInt2(2, 2, 2, 1);
    for (autoEFE82D42_i = 1; autoEFE82D42_i <= autoEFE82D42_n; autoEFE82D42_i += 1) {
        if (lv_hybridPointIterator >= 3) {
            lv_hybridPointIterator = 1;
        }
        else {
            lv_hybridPointIterator = lv_hybridPointIterator + 1;
        }
        gf_SpawnSkyDestroyer(PointFromName(("S1 - Holdout Hybrid 0" + IntToString(lv_hybridPointIterator))));
        Wait(1.0, c_timeAI);
    }
    auto4A74E05F_n = libLotv_gf_DifficultyValueInt2(0, 0, 1, 2);
    for (auto4A74E05F_i = 1; auto4A74E05F_i <= auto4A74E05F_n; auto4A74E05F_i += 1) {
        if (lv_hybridPointIterator >= 3) {
            lv_hybridPointIterator = 1;
        }
        else {
            lv_hybridPointIterator = lv_hybridPointIterator + 1;
        }
        gf_SpawnSkyReaver(PointFromName(("S1 - Holdout Hybrid 0" + IntToString(lv_hybridPointIterator))));
        Wait(1.0, c_timeAI);
    }
    while (!((TimerGetRemaining(gv_holdoutTimer) < 0.1))) {
        Wait(1.0, c_timeAI);
    }
    TimerWindowDestroy(gv_holdoutTimerWindow);
    TriggerExecute(gt_S1HoldoutEndQ, true, false);
    while (!((libNtve_gf_UnitGroupIsDead(gv_globalEnemyUnits) == true))) {
        Wait(1.0, c_timeAI);
    }
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
    TriggerEnable(gt_S1ProtossUnitWarpedIn, false);
    UnitRemove(gv_s1HoldOutInvisiblePylon);
    Wait(2.0, c_timeAI);
    gv_midSeamlessIntro = true;
    TriggerExecute(gt_MidShrine1Q, true, true);
    TriggerExecute(gt_StartGameStage02Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1Holdout_Init () {
    gt_S1Holdout = TriggerCreate("gt_S1Holdout_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Holdout End Q
//--------------------------------------------------------------------------------------------------
bool gt_S1HoldoutEndQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    if ((libNtve_gf_UnitGroupIsDead(gv_globalEnemyUnits) == true)) {
        libVCMI_gf_SendTransmissionCampaign(gv_aRTANIS, "pMission_Ulnar02|Line00092", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        libVCMI_gf_SendTransmissionCampaign(gv_kERRIGAN, "pMission_Ulnar02|Line00201", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    if ((libNtve_gf_UnitGroupIsDead(gv_globalEnemyUnits) == false)) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 2.0);
    }

    Wait(1.0, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1HoldoutEndQ_Init () {
    gt_S1HoldoutEndQ = TriggerCreate("gt_S1HoldoutEndQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Protoss Unit Warped In
//--------------------------------------------------------------------------------------------------
bool gt_S1ProtossUnitWarpedIn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    fixed auto600D0BCE_at;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_02_DOMINION2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.125, c_timeGame);
    UnitBehaviorAdd(EventUnitProgressUnit(), "QuickWarp", EventUnitProgressUnit(), 1);
    auto600D0BCE_at = 0;
    while (!((libNtve_gf_UnitIsUnderConstruction(EventUnitProgressUnit()) == false)) && auto600D0BCE_at <= 2.5) {
        Wait(0.0625, c_timeGame);
        auto600D0BCE_at = auto600D0BCE_at + 0.0625;
    }
    gf_ActivateGenericEnemyAI(EventUnitProgressUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1ProtossUnitWarpedIn_Init () {
    gt_S1ProtossUnitWarpedIn = TriggerCreate("gt_S1ProtossUnitWarpedIn_Func");
    TriggerEnable(gt_S1ProtossUnitWarpedIn, false);
    TriggerAddEventUnitConstructProgress(gt_S1ProtossUnitWarpedIn, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game - Stage 02 Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameStage02Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_currentStage = 2;
    TriggerExecute(gt_S2PrepShadowCorpsAmbush01, true, false);
    TriggerExecute(gt_S2PrepShadowCorpsAmbush02, true, false);
    Wait(1.0, c_timeReal);
    TriggerQueueEnter();
    libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/CB6C7D9F"));
    TriggerExecute(gt_ObjectiveHallsofRevelationCreate, true, false);
    TriggerExecute(gt_ObjectiveSurviveCreate, true, false);
    TriggerExecute(gt_ObjectiveXelNagaDevicesCreate, true, false);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(PointFromId(790), 5.0), 0.1, false);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(PointFromId(790), 3.0), 0.0, false);
    libVCMI_gf_CreateObjectivePing(true, PointFromId(790), StringExternal("Param/Value/38CEA4F2"));
    gv_mainObjectivePing = PingLastCreated();
    Wait(2.0, c_timeReal);
    if ((TriggerIsEnabled(gt_S2TaldarimAttack) == true)) {
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(gv_kERRIGAN, "pMission_Ulnar02|Line00043", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameStage02Q_Init () {
    gt_StartGameStage02Q = TriggerCreate("gt_StartGameStage02Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Tal'darim Attack
//--------------------------------------------------------------------------------------------------
bool gt_S2TaldarimAttack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto1E9A7F13_n;
    int auto1E9A7F13_i;
    int auto2DC51B22_n;
    int auto2DC51B22_i;
    int autoA8AE25A4_n;
    int autoA8AE25A4_i;
    fixed auto6E1CE9FA_at;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(8), 12.0, false);
    MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(8)), 3.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/110B2236"), null, RegionGetCenter(RegionFromId(8)));
    gf_CreatePlanetCrackerBreach(RegionGetCenter(RegionFromId(8)));
    Wait(5.0, c_timeGame);
    TriggerExecute(gt_S2TaldarimAttackQ, true, false);
    gf_FlyInWarpPrism(PointFromId(1182));
    Wait(0.125, c_timeGame);
    gf_FlyInWarpPrism(PointFromId(1183));
    Wait(4.0, c_timeGame);
    gf_FlyInWarpPrism(PointFromId(1190));
    Wait(0.125, c_timeGame);
    gf_FlyInWarpPrism(PointFromId(1054));
    TriggerEnable(gt_S2TalDarimUnitsWarpIn, true);
    auto1E9A7F13_n = libLotv_gf_DifficultyValueInt2(8, 8, 10, 12);
    for (auto1E9A7F13_i = 1; auto1E9A7F13_i <= auto1E9A7F13_n; auto1E9A7F13_i += 1) {
        if ((UnitGroupCount(UnitGroup("WarpPrismPhasing", gv_pLAYER_02_DOMINION2, RegionFromId(8), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            UnitIssueOrder(UnitFromId(938), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), RegionRandomPoint(RegionFromId(8))), c_orderQueueReplace);
        }

        Wait(0.125, c_timeGame);
    }
    Wait(3.0, c_timeGame);
    auto2DC51B22_n = libLotv_gf_DifficultyValueInt2(4, 4, 6, 8);
    for (auto2DC51B22_i = 1; auto2DC51B22_i <= auto2DC51B22_n; auto2DC51B22_i += 1) {
        if ((UnitGroupCount(UnitGroup("WarpPrismPhasing", gv_pLAYER_02_DOMINION2, RegionFromId(8), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            UnitIssueOrder(UnitFromId(938), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), RegionRandomPoint(RegionFromId(8))), c_orderQueueReplace);
        }

        Wait(0.125, c_timeGame);
    }
    autoA8AE25A4_n = libLotv_gf_DifficultyValueInt2(2, 2, 3, 4);
    for (autoA8AE25A4_i = 1; autoA8AE25A4_i <= autoA8AE25A4_n; autoA8AE25A4_i += 1) {
        if ((UnitGroupCount(UnitGroup("WarpPrismPhasing", gv_pLAYER_02_DOMINION2, RegionFromId(8), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            UnitIssueOrder(UnitFromId(938), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 2), RegionRandomPoint(RegionFromId(8))), c_orderQueueReplace);
        }

        Wait(0.125, c_timeGame);
    }
    TriggerEnable(gt_S2TalDarimUnitsWarpIn, false);
    auto6E1CE9FA_at = 0;
    while (!((UnitGroupCount(gv_s2TaldarimAttackGroup, c_unitCountAlive) <= 3)) && auto6E1CE9FA_at <= 8.0) {
        Wait(0.5, c_timeGame);
        auto6E1CE9FA_at = auto6E1CE9FA_at + 0.5;
    }
    TriggerExecute(gt_S2SkyDestroyers, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2TaldarimAttack_Init () {
    gt_S2TaldarimAttack = TriggerCreate("gt_S2TaldarimAttack_Func");
    TriggerAddEventTimePeriodic(gt_S2TaldarimAttack, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Tal'darim Attack Q
//--------------------------------------------------------------------------------------------------
bool gt_S2TaldarimAttackQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    Wait(1.0, c_timeReal);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_aRTANIS, "pMission_Ulnar02|Line00128", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(gv_kERRIGAN, "pMission_Ulnar02|Line00159", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2TaldarimAttackQ_Init () {
    gt_S2TaldarimAttackQ = TriggerCreate("gt_S2TaldarimAttackQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Tal'Darim Units Warp In
//--------------------------------------------------------------------------------------------------
bool gt_S2TalDarimUnitsWarpIn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_02_DOMINION2))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnitProgressUnit(), RegionFromId(8)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_s2TaldarimAttackGroup, EventUnitProgressUnit());
    UnitGroupAdd(gv_globalEnemyUnits, EventUnitProgressUnit());
    gf_ActivateGenericEnemyAI(EventUnitProgressUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2TalDarimUnitsWarpIn_Init () {
    gt_S2TalDarimUnitsWarpIn = TriggerCreate("gt_S2TalDarimUnitsWarpIn_Func");
    TriggerEnable(gt_S2TalDarimUnitsWarpIn, false);
    TriggerAddEventUnitConstructProgress(gt_S2TalDarimUnitsWarpIn, UnitRefFromUnit(UnitFromId(718)), c_unitProgressStageStart);
    TriggerAddEventUnitConstructProgress(gt_S2TalDarimUnitsWarpIn, UnitRefFromUnit(UnitFromId(938)), c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Door Is Closed Q
//--------------------------------------------------------------------------------------------------
bool gt_S2DoorIsClosedQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(12), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_aRTANIS, "pMission_Ulnar02|Line00044", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2DoorIsClosedQ_Init () {
    gt_S2DoorIsClosedQ = TriggerCreate("gt_S2DoorIsClosedQ_Func");
    TriggerAddEventTimePeriodic(gt_S2DoorIsClosedQ, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Sky Destroyers
//--------------------------------------------------------------------------------------------------
bool gt_S2SkyDestroyers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int auto74528080_n;
    int auto74528080_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto74528080_n = libNtve_gf_DifficultyValueInt(3, 3, 4, 5);
    for (auto74528080_i = 1; auto74528080_i <= auto74528080_n; auto74528080_i += 1) {
        if (((libVCMI_gf_GameIsOver() == true) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true) || (gv_hallsReached > 1))) {
            return true;
        }

        lv_i += 1;
        gf_SpawnSkyDestroyer(PointFromName(("Sky Destroyer " + IntToString(lv_i))));
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2SkyDestroyers_Init () {
    gt_S2SkyDestroyers = TriggerCreate("gt_S2SkyDestroyers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Discover Double Constructs Fight
//--------------------------------------------------------------------------------------------------
bool gt_S2DiscoverDoubleConstructsFight_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoFC9386A9_g;
    int autoFC9386A9_u;
    unit autoFC9386A9_var;
    unitgroup auto248D344D_g;
    int auto248D344D_u;
    unit auto248D344D_var;
    int auto7C509ED5_n;
    int auto7C509ED5_i;
    int autoADABE5FE_n;
    int autoADABE5FE_i;
    int autoD00D0793_n;
    int autoD00D0793_i;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(1), 12.0, false);
    MinimapPing(PlayerGroupAll(), PointFromId(1039), 3.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringToText(""), null, PointFromId(1039));
    gf_AwakenConstruct(UnitFromId(61), true);
    gf_AwakenConstruct(UnitFromId(197), true);
    UnitSetPropertyFixed(UnitFromId(61), c_unitPropLifePercent, 50.0);
    UnitSetPropertyFixed(UnitFromId(197), c_unitPropLifePercent, 50.0);
    gf_ActivateXelNagaConstructAI(UnitFromId(61));
    gf_ActivateXelNagaConstructAI(UnitFromId(197));
    autoFC9386A9_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionFromId(92), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFC9386A9_u = UnitGroupCount(autoFC9386A9_g, c_unitCountAll);
    for (;; autoFC9386A9_u -= 1) {
        autoFC9386A9_var = UnitGroupUnitFromEnd(autoFC9386A9_g, autoFC9386A9_u);
        if (autoFC9386A9_var == null) { break; }
        UnitIssueOrder(autoFC9386A9_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitFromId(61))), c_orderQueueReplace);
    }
    auto248D344D_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionFromId(93), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto248D344D_u = UnitGroupCount(auto248D344D_g, c_unitCountAll);
    for (;; auto248D344D_u -= 1) {
        auto248D344D_var = UnitGroupUnitFromEnd(auto248D344D_g, auto248D344D_u);
        if (auto248D344D_var == null) { break; }
        UnitIssueOrder(auto248D344D_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitFromId(197))), c_orderQueueReplace);
    }
    TriggerExecute(gt_S2DoubleConstructsQ, true, false);
    Wait(2.0, c_timeGame);
    if ((libLotv_gf_DifficultyValueVoidBoolean(false, false, true, true) == true)) {
        TriggerEnable(gt_S2TalDarimUnitsWarpIn, true);
        auto7C509ED5_n = libLotv_gf_DifficultyValueInt2(2, 2, 4, 6);
        for (auto7C509ED5_i = 1; auto7C509ED5_i <= auto7C509ED5_n; auto7C509ED5_i += 1) {
            if ((UnitGroupCount(UnitGroup("WarpPrismPhasing", gv_pLAYER_02_DOMINION2, RegionFromId(83), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
                UnitIssueOrder(UnitFromId(938), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), RegionRandomPoint(RegionFromId(83))), c_orderQueueReplace);
            }

            Wait(0.125, c_timeGame);
        }
        Wait(3.0, c_timeGame);
        autoADABE5FE_n = libLotv_gf_DifficultyValueInt2(1, 1, 2, 3);
        for (autoADABE5FE_i = 1; autoADABE5FE_i <= autoADABE5FE_n; autoADABE5FE_i += 1) {
            if ((UnitGroupCount(UnitGroup("WarpPrismPhasing", gv_pLAYER_02_DOMINION2, RegionFromId(83), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
                UnitIssueOrder(UnitFromId(938), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), RegionRandomPoint(RegionFromId(83))), c_orderQueueReplace);
            }

            Wait(0.125, c_timeGame);
        }
        autoD00D0793_n = libLotv_gf_DifficultyValueInt2(0, 0, 1, 2);
        for (autoD00D0793_i = 1; autoD00D0793_i <= autoD00D0793_n; autoD00D0793_i += 1) {
            if ((UnitGroupCount(UnitGroup("WarpPrismPhasing", gv_pLAYER_02_DOMINION2, RegionFromId(83), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
                UnitIssueOrder(UnitFromId(938), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 2), RegionRandomPoint(RegionFromId(83))), c_orderQueueReplace);
            }

            Wait(0.125, c_timeGame);
        }
        TriggerEnable(gt_S2TalDarimUnitsWarpIn, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2DiscoverDoubleConstructsFight_Init () {
    gt_S2DiscoverDoubleConstructsFight = TriggerCreate("gt_S2DiscoverDoubleConstructsFight_Func");
    TriggerAddEventTimePeriodic(gt_S2DiscoverDoubleConstructsFight, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Double Constructs Q
//--------------------------------------------------------------------------------------------------
bool gt_S2DoubleConstructsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_aRTANIS, "pMission_Ulnar02|Line00126", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2DoubleConstructsQ_Init () {
    gt_S2DoubleConstructsQ = TriggerCreate("gt_S2DoubleConstructsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Double Orange Construct 01 Dead
//--------------------------------------------------------------------------------------------------
bool gt_S2DoubleOrangeConstruct01Dead_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_constructPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_constructPoint = UnitGetPosition(EventUnit());

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventUnit() == UnitFromId(197)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitIsAlive(UnitFromId(61)) == false) && (UnitIsAlive(UnitFromId(197)) == false)) {
        TriggerEnable(gt_S2ShadowCorpsAmbush01, true);
    }

    gv_s2DoubleConstructCubeTarget = PointFromId(223);
    Wait(1.8, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ArtifactUlnarB", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION5, lv_constructPoint);
    gv_s2DoubleConstructCube = UnitLastCreated();
    libNtve_gf_ShareVisionofUnit(gv_s2DoubleConstructCube, true, gv_pLAYER_01_USER);
    gf_CreateXelnagaDoorPing(gv_s2DoubleConstructCube);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(gv_s2DoubleConstructCube, OrderTargetingPoint(AbilityCommand("move", 0), gv_s2DoubleConstructCubeTarget), c_orderQueueAddToEnd);
    while (!((DistanceBetweenPoints(UnitGetPosition(gv_s2DoubleConstructCube), gv_s2DoubleConstructCubeTarget) <= 1.0))) {
        Wait(1.0, c_timeGame);
    }
    UnitIssueOrder(gv_s2DoubleConstructCube, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffset(UnitGetPosition(gv_s2DoubleConstructCube), -1.0, 1.0)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_s2DoubleConstructCube, "Signal Start");
    libNtve_gf_SendActorMessageToUnit(UnitFromId(520), "Signal Start");
    Wait(2.0, c_timeGame);
    libNtve_gf_ShareVisionofUnit(gv_s2DoubleConstructCube, false, gv_pLAYER_01_USER);
    PingDestroy(libHots_gf_PingStoredForUnit(gv_s2DoubleConstructCube, 1));
    TriggerExecute(gt_S2OpenFirstDoor, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2DoubleOrangeConstruct01Dead_Init () {
    gt_S2DoubleOrangeConstruct01Dead = TriggerCreate("gt_S2DoubleOrangeConstruct01Dead_Func");
    TriggerAddEventUnitDied(gt_S2DoubleOrangeConstruct01Dead, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Double Blue Construct 01 Dead
//--------------------------------------------------------------------------------------------------
bool gt_S2DoubleBlueConstruct01Dead_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_constructPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_constructPoint = UnitGetPosition(EventUnit());

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventUnit() == UnitFromId(61)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitIsAlive(UnitFromId(61)) == false) && (UnitIsAlive(UnitFromId(197)) == false)) {
        TriggerEnable(gt_S2ShadowCorpsAmbush01, true);
    }

    gv_s2DoubleConstructSphereTarget = PointFromId(1010);
    Wait(1.8, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ArtifactUlnarA", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION3, lv_constructPoint);
    gv_s2DoubleConstructSphere = UnitLastCreated();
    libNtve_gf_ShareVisionofUnit(gv_s2DoubleConstructSphere, true, gv_pLAYER_01_USER);
    gf_CreateXelnagaDoorPing(gv_s2DoubleConstructSphere);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(gv_s2DoubleConstructSphere, OrderTargetingPoint(AbilityCommand("move", 0), gv_s2DoubleConstructSphereTarget), c_orderQueueReplace);
    while (!((DistanceBetweenPoints(UnitGetPosition(gv_s2DoubleConstructSphere), gv_s2DoubleConstructSphereTarget) <= 1.0))) {
        Wait(1.0, c_timeGame);
    }
    UnitIssueOrder(gv_s2DoubleConstructSphere, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffset(UnitGetPosition(gv_s2DoubleConstructSphere), -1.0, 1.0)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_s2DoubleConstructSphere, "Signal Start");
    libNtve_gf_SendActorMessageToUnit(UnitFromId(517), "Signal Start");
    Wait(2.0, c_timeGame);
    libNtve_gf_ShareVisionofUnit(gv_s2DoubleConstructSphere, false, gv_pLAYER_01_USER);
    PingDestroy(libHots_gf_PingStoredForUnit(gv_s2DoubleConstructSphere, 1));
    TriggerExecute(gt_S2OpenFirstDoor, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2DoubleBlueConstruct01Dead_Init () {
    gt_S2DoubleBlueConstruct01Dead = TriggerCreate("gt_S2DoubleBlueConstruct01Dead_Func");
    TriggerAddEventUnitDied(gt_S2DoubleBlueConstruct01Dead, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Open First Door
//--------------------------------------------------------------------------------------------------
bool gt_S2OpenFirstDoor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(61)) == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(197)) == false))) {
            return false;
        }

        if (!((DistanceBetweenPoints(UnitGetPosition(gv_s2DoubleConstructCube), gv_s2DoubleConstructCubeTarget) <= 1.0))) {
            return false;
        }

        if (!((DistanceBetweenPoints(UnitGetPosition(gv_s2DoubleConstructSphere), gv_s2DoubleConstructSphereTarget) <= 1.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_S2DoorIsClosedQ, false);
    TriggerEnable(gt_S2SeeSecondGateQ, true);
    UnitRemove(UnitFromId(1158));
    UnitIssueOrder(UnitFromId(222), Order(AbilityCommand("XelNagaTempleDoorLargeNWLowered", 0)), c_orderQueueReplace);
    SoundPlayAtPointForPlayer(SoundLink("PUlnar02_GateOpenSound", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(UnitFromId(222)), 0.0, 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2OpenFirstDoor_Init () {
    gt_S2OpenFirstDoor = TriggerCreate("gt_S2OpenFirstDoor_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Prep Shadow Corps Ambush 01
//--------------------------------------------------------------------------------------------------
bool gt_S2PrepShadowCorpsAmbush01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto0A551B11_g;
    int auto0A551B11_u;
    unit auto0A551B11_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto0A551B11_g = UnitGroup("Spectre", gv_pLAYER_02_DOMINION7, RegionFromId(85), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0A551B11_u = UnitGroupCount(auto0A551B11_g, c_unitCountAll);
    for (;; auto0A551B11_u -= 1) {
        auto0A551B11_var = UnitGroupUnitFromEnd(auto0A551B11_g, auto0A551B11_u);
        if (auto0A551B11_var == null) { break; }
        UnitIssueOrder(auto0A551B11_var, Order(AbilityCommand("RogueGhostCloak", 0)), c_orderQueueReplace);
        libNtve_gf_PauseUnit(auto0A551B11_var, true);
        libNtve_gf_ShowHideUnit(auto0A551B11_var, false);
        libNtve_gf_MakeUnitInvulnerable(auto0A551B11_var, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2PrepShadowCorpsAmbush01_Init () {
    gt_S2PrepShadowCorpsAmbush01 = TriggerCreate("gt_S2PrepShadowCorpsAmbush01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Shadow Corps Ambush 01
//--------------------------------------------------------------------------------------------------
bool gt_S2ShadowCorpsAmbush01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto0F98D699_g;
    int auto0F98D699_u;
    unit auto0F98D699_var;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_S2ShadowCorpsAmbush01Q, true, false);
    auto0F98D699_g = UnitGroup("Spectre", gv_pLAYER_02_DOMINION7, RegionFromId(85), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto0F98D699_u = UnitGroupCount(auto0F98D699_g, c_unitCountAll);
    for (;; auto0F98D699_u -= 1) {
        auto0F98D699_var = UnitGroupUnitFromEnd(auto0F98D699_g, auto0F98D699_u);
        if (auto0F98D699_var == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(auto0F98D699_var, false);
        libNtve_gf_ShowHideUnit(auto0F98D699_var, true);
        libNtve_gf_PauseUnit(auto0F98D699_var, false);
        UnitIssueOrder(auto0F98D699_var, Order(AbilityCommand("RogueGhostCloak", 1)), c_orderQueueReplace);
        gf_ActivateGenericEnemyAI(auto0F98D699_var);
    }
    Wait(4.0, c_timeGame);
    TriggerExecute(gt_S2ShadowCorpsMedivacDropOff, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2ShadowCorpsAmbush01_Init () {
    gt_S2ShadowCorpsAmbush01 = TriggerCreate("gt_S2ShadowCorpsAmbush01_Func");
    TriggerEnable(gt_S2ShadowCorpsAmbush01, false);
    TriggerAddEventUnitRegion(gt_S2ShadowCorpsAmbush01, null, RegionFromId(85), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Shadow Corps Ambush 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_S2ShadowCorpsAmbush01Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_hallsReached == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlayForPlayer(SoundLink("PUlnar02_Music_HybridStinger", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    Wait(1.0, c_timeGame);
    libVCMI_gf_SendTransmissionCampaign(gv_kERRIGAN, "pMission_Ulnar02|Line00138", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2ShadowCorpsAmbush01Q_Init () {
    gt_S2ShadowCorpsAmbush01Q = TriggerCreate("gt_S2ShadowCorpsAmbush01Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Shadow Corps Medivac Drop Off
//--------------------------------------------------------------------------------------------------
bool gt_S2ShadowCorpsMedivacDropOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_medivac01;
    unit lv_medivac02;
    unit lv_medivac03;
    unit lv_medivac04;

    // Automatic Variable Declarations
    int auto64ED7E9D_n;
    int auto64ED7E9D_i;
    int auto1CD1B568_n;
    int auto1CD1B568_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsAtPoint2(1, "Medivac", 0, gv_pLAYER_02_DOMINION7, PointFromId(170));
    lv_medivac01 = UnitLastCreated();
    UnitCargoCreate(lv_medivac01, "Goliath", 2);
    UnitAbilityEnable(lv_medivac01, "move", false);
    UnitSetHeight(lv_medivac01, 10.0, 0.0);
    UnitSetHeight(lv_medivac01, 4.0, 2.0);
    UnitIssueOrder(lv_medivac01, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    UnitAbilityEnable(lv_medivac01, "move", true);
    UnitIssueOrder(lv_medivac01, Order(AbilityCommand("MedivacSpeedBoost", 0)), c_orderQueueReplace);
    libLbty_gf_OrderTransporttoUnloadAllthenDespawn(lv_medivac01, PointFromId(492), PointFromId(304));
    Wait(0.25, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "Medivac", 0, gv_pLAYER_02_DOMINION7, PointFromId(174));
    lv_medivac02 = UnitLastCreated();
    UnitCargoCreate(lv_medivac02, "Reaper", 4);
    UnitAbilityEnable(lv_medivac02, "move", false);
    UnitSetHeight(lv_medivac02, 10.0, 0.0);
    UnitSetHeight(lv_medivac02, 4.0, 2.0);
    UnitIssueOrder(lv_medivac02, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    UnitAbilityEnable(lv_medivac02, "move", true);
    UnitIssueOrder(lv_medivac02, Order(AbilityCommand("MedivacSpeedBoost", 0)), c_orderQueueReplace);
    libLbty_gf_OrderTransporttoUnloadAllthenDespawn(lv_medivac02, PointFromId(523), PointFromId(304));
    Wait(0.25, c_timeGame);
    Wait(2.0, c_timeGame);
    auto64ED7E9D_n = libLotv_gf_DifficultyValueInt2(0, 0, 1, 1);
    for (auto64ED7E9D_i = 1; auto64ED7E9D_i <= auto64ED7E9D_n; auto64ED7E9D_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Medivac", 0, gv_pLAYER_02_DOMINION7, PointFromId(170));
        lv_medivac03 = UnitLastCreated();
        UnitCargoCreate(lv_medivac03, "Reaper", 6);
        UnitAbilityEnable(lv_medivac03, "move", false);
        UnitSetHeight(lv_medivac03, 10.0, 0.0);
        UnitSetHeight(lv_medivac03, 4.0, 2.0);
        UnitIssueOrder(lv_medivac03, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        Wait(1.0, c_timeGame);
        UnitAbilityEnable(lv_medivac03, "move", true);
        UnitIssueOrder(lv_medivac03, Order(AbilityCommand("MedivacSpeedBoost", 0)), c_orderQueueReplace);
        libLbty_gf_OrderTransporttoUnloadAllthenDespawn(lv_medivac03, PointFromId(492), PointFromId(304));
        Wait(0.25, c_timeGame);
    }
    auto1CD1B568_n = libLotv_gf_DifficultyValueInt2(0, 0, 1, 1);
    for (auto1CD1B568_i = 1; auto1CD1B568_i <= auto1CD1B568_n; auto1CD1B568_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Medivac", 0, gv_pLAYER_02_DOMINION7, PointFromId(174));
        lv_medivac04 = UnitLastCreated();
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ThorAP", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION7, UnitGetPosition(lv_medivac04));
        UnitIssueOrder(lv_medivac04, OrderTargetingUnit(AbilityCommand("MedivacTransport", 0), UnitLastCreated()), c_orderQueueReplace);
        UnitAbilityEnable(lv_medivac04, "move", false);
        UnitSetHeight(lv_medivac04, 10.0, 0.0);
        UnitSetHeight(lv_medivac04, 4.0, 2.0);
        UnitIssueOrder(lv_medivac04, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        Wait(1.0, c_timeGame);
        UnitAbilityEnable(lv_medivac04, "move", true);
        UnitIssueOrder(lv_medivac04, Order(AbilityCommand("MedivacSpeedBoost", 0)), c_orderQueueReplace);
        libLbty_gf_OrderTransporttoUnloadAllthenDespawn(lv_medivac04, PointFromId(523), PointFromId(304));
        Wait(0.25, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2ShadowCorpsMedivacDropOff_Init () {
    gt_S2ShadowCorpsMedivacDropOff = TriggerCreate("gt_S2ShadowCorpsMedivacDropOff_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Progress Save
//--------------------------------------------------------------------------------------------------
bool gt_S2ProgressSave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateMissionAutosavePoint(StringToText(""));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2ProgressSave_Init () {
    gt_S2ProgressSave = TriggerCreate("gt_S2ProgressSave_Func");
    TriggerAddEventUnitRegion(gt_S2ProgressSave, null, RegionFromId(2), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Animate Xel'Naga Crates Large
//--------------------------------------------------------------------------------------------------
bool gt_S1AnimateXelNagaCratesLarge_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(90), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ActorSend(ActorFromDoodad(DoodadFromId(611)), "AnimGroupRemove Work");
    Wait(0.125, c_timeGame);
    ActorSend(ActorFromDoodad(DoodadFromId(84)), "AnimGroupRemove Work");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1AnimateXelNagaCratesLarge_Init () {
    gt_S1AnimateXelNagaCratesLarge = TriggerCreate("gt_S1AnimateXelNagaCratesLarge_Func");
    TriggerAddEventTimePeriodic(gt_S1AnimateXelNagaCratesLarge, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - See Second Gate Q
//--------------------------------------------------------------------------------------------------
bool gt_S2SeeSecondGateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(13), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(13), 12.0, false);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(UnitFromId(1215)), 3.0, Color(0.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/4047E814"), null, UnitGetPosition(UnitFromId(1215)));
    TriggerExecute(gt_S2SpawnSkyHybrid, true, false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_aRTANIS, "pMission_Ulnar02|Line00127", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2SeeSecondGateQ_Init () {
    gt_S2SeeSecondGateQ = TriggerCreate("gt_S2SeeSecondGateQ_Func");
    TriggerEnable(gt_S2SeeSecondGateQ, false);
    TriggerAddEventTimePeriodic(gt_S2SeeSecondGateQ, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Spawn Sky Hybrid
//--------------------------------------------------------------------------------------------------
bool gt_S2SpawnSkyHybrid_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(4.0, c_timeGame);
    gf_SpawnSkyReaver(PointFromId(485));
    Wait(0.125, c_timeGame);
    gf_SpawnSkyDestroyer(PointFromId(491));
    if ((libLotv_gf_DifficultyValueVoidBoolean(false, false, true, true) == true)) {
        Wait(0.125, c_timeGame);
        gf_SpawnSkyReaver(PointFromId(722));
    }

    if ((libLotv_gf_DifficultyValueVoidBoolean(false, false, false, true) == true)) {
        Wait(0.125, c_timeGame);
        gf_SpawnSkyDestroyer(PointFromId(764));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2SpawnSkyHybrid_Init () {
    gt_S2SpawnSkyHybrid = TriggerCreate("gt_S2SpawnSkyHybrid_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Prep Shadow Corps Ambush 02
//--------------------------------------------------------------------------------------------------
bool gt_S2PrepShadowCorpsAmbush02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto2A582BB2_g;
    int auto2A582BB2_u;
    unit auto2A582BB2_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto2A582BB2_g = UnitGroup("Reaper", gv_pLAYER_02_DOMINION7, RegionFromId(14), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2A582BB2_u = UnitGroupCount(auto2A582BB2_g, c_unitCountAll);
    for (;; auto2A582BB2_u -= 1) {
        auto2A582BB2_var = UnitGroupUnitFromEnd(auto2A582BB2_g, auto2A582BB2_u);
        if (auto2A582BB2_var == null) { break; }
        libNtve_gf_PauseUnit(auto2A582BB2_var, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2PrepShadowCorpsAmbush02_Init () {
    gt_S2PrepShadowCorpsAmbush02 = TriggerCreate("gt_S2PrepShadowCorpsAmbush02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Shadow Corps Ambush 02
//--------------------------------------------------------------------------------------------------
bool gt_S2ShadowCorpsAmbush02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto10877A4A_g;
    int auto10877A4A_u;
    unit auto10877A4A_var;
    unitgroup autoE63D49EF_g;
    int autoE63D49EF_u;
    unit autoE63D49EF_var;
    unitgroup autoFF5B0F34_g;
    int autoFF5B0F34_u;
    unit autoFF5B0F34_var;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_S2ShadowCorpsAmbush02Q, true, false);
    auto10877A4A_g = UnitGroup(null, gv_pLAYER_02_DOMINION7, RegionFromId(14), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto10877A4A_u = UnitGroupCount(auto10877A4A_g, c_unitCountAll);
    for (;; auto10877A4A_u -= 1) {
        auto10877A4A_var = UnitGroupUnitFromEnd(auto10877A4A_g, auto10877A4A_u);
        if (auto10877A4A_var == null) { break; }
        if ((libNtve_gf_UnitInRegion(auto10877A4A_var, RegionFromId(72)) == false) && (libNtve_gf_UnitInRegion(auto10877A4A_var, RegionFromId(65)) == false)) {
            gf_ActivateGenericEnemyAI(auto10877A4A_var);
        }

    }
    Wait(4.0, c_timeGame);
    autoE63D49EF_g = UnitGroup(null, gv_pLAYER_02_DOMINION7, RegionFromId(14), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE63D49EF_u = UnitGroupCount(autoE63D49EF_g, c_unitCountAll);
    for (;; autoE63D49EF_u -= 1) {
        autoE63D49EF_var = UnitGroupUnitFromEnd(autoE63D49EF_g, autoE63D49EF_u);
        if (autoE63D49EF_var == null) { break; }
        if (((libNtve_gf_UnitInRegion(autoE63D49EF_var, RegionFromId(72)) == true) || (libNtve_gf_UnitInRegion(autoE63D49EF_var, RegionFromId(65)) == true))) {
            libNtve_gf_PauseUnit(autoE63D49EF_var, false);
        }

    }
    UnitGroupIssueOrder(UnitGroup(null, gv_pLAYER_02_DOMINION7, RegionFromId(72), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(225)), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitGroup(null, gv_pLAYER_02_DOMINION7, RegionFromId(65), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(227)), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    autoFF5B0F34_g = UnitGroup(null, gv_pLAYER_02_DOMINION7, RegionFromId(14), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFF5B0F34_u = UnitGroupCount(autoFF5B0F34_g, c_unitCountAll);
    for (;; autoFF5B0F34_u -= 1) {
        autoFF5B0F34_var = UnitGroupUnitFromEnd(autoFF5B0F34_g, autoFF5B0F34_u);
        if (autoFF5B0F34_var == null) { break; }
        if ((UnitGetType(autoFF5B0F34_var) == "Reaper")) {
            gf_ActivateGenericEnemyAI(autoFF5B0F34_var);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2ShadowCorpsAmbush02_Init () {
    gt_S2ShadowCorpsAmbush02 = TriggerCreate("gt_S2ShadowCorpsAmbush02_Func");
    TriggerAddEventUnitRegion(gt_S2ShadowCorpsAmbush02, null, RegionFromId(14), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Shadow Corps Ambush 02 Q
//--------------------------------------------------------------------------------------------------
bool gt_S2ShadowCorpsAmbush02Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_hallsReached == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlayForPlayer(SoundLink("PUlnar02_Music_HybridStinger", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    Wait(1.0, c_timeGame);
    libVCMI_gf_SendTransmissionCampaign(UnitGroupRandomUnit(UnitGroup("Spectre", gv_pLAYER_02_DOMINION7, RegionFromId(14), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive), "pMission_Ulnar02|Line00143", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2ShadowCorpsAmbush02Q_Init () {
    gt_S2ShadowCorpsAmbush02Q = TriggerCreate("gt_S2ShadowCorpsAmbush02Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Awaken Blue Construct 02
//--------------------------------------------------------------------------------------------------
bool gt_S2AwakenBlueConstruct02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_blueConstruct;

    // Automatic Variable Declarations
    unitgroup auto896CE23D_g;
    int auto896CE23D_u;
    unit auto896CE23D_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_blueConstruct = UnitFromId(1003);
    gf_AwakenConstruct(lv_blueConstruct, true);
    UnitSetPropertyFixed(lv_blueConstruct, c_unitPropLifePercent, 75.0);
    UnitSetPosition(lv_blueConstruct, PointFromId(1409), false);
    UnitSetFacing(lv_blueConstruct, PointGetFacing(PointFromId(1409)), 0.0);
    AISetUnitScriptControlled(UnitFromId(1003), false);
    gf_ActivateXelNagaConstructAI(UnitFromId(1003));
    auto896CE23D_g = UnitGroup(null, gv_pLAYER_02_DOMINION7, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto896CE23D_u = UnitGroupCount(auto896CE23D_g, c_unitCountAll);
    for (;; auto896CE23D_u -= 1) {
        auto896CE23D_var = UnitGroupUnitFromEnd(auto896CE23D_g, auto896CE23D_u);
        if (auto896CE23D_var == null) { break; }
        libNtve_gf_PauseUnit(auto896CE23D_var, false);
        gf_ActivateGenericEnemyAI(auto896CE23D_var);
    }
    Wait(1.0, c_timeGame);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(11), 12.0, false);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(lv_blueConstruct), 3.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/2B2F3753"), null, UnitGetPosition(lv_blueConstruct));
    TriggerExecute(gt_S2BlueConstruct02Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2AwakenBlueConstruct02_Init () {
    gt_S2AwakenBlueConstruct02 = TriggerCreate("gt_S2AwakenBlueConstruct02_Func");
    TriggerAddEventTimePeriodic(gt_S2AwakenBlueConstruct02, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Blue Construct 02 Q
//--------------------------------------------------------------------------------------------------
bool gt_S2BlueConstruct02Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_kERRIGAN, "pMission_Ulnar02|Line00129", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2BlueConstruct02Q_Init () {
    gt_S2BlueConstruct02Q = TriggerCreate("gt_S2BlueConstruct02Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Blue Construct 02 Dead
//--------------------------------------------------------------------------------------------------
bool gt_S2BlueConstruct02Dead_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_localCube;
    point lv_constructPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_constructPoint = UnitGetPosition(EventUnit());

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventUnit() == UnitFromId(1003)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(1.8, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ArtifactUlnarB", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION3, lv_constructPoint);
    lv_localCube = UnitLastCreated();
    libNtve_gf_ShareVisionofUnit(lv_localCube, true, gv_pLAYER_01_USER);
    gf_CreateXelnagaDoorPing(lv_localCube);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(lv_localCube, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1011)), c_orderQueueAddToEnd);
    while (!((DistanceBetweenPoints(UnitGetPosition(lv_localCube), PointFromId(1011)) <= 1.0))) {
        Wait(1.0, c_timeGame);
    }
    UnitIssueOrder(lv_localCube, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffset(UnitGetPosition(lv_localCube), -1.0, 1.0)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(lv_localCube, "Signal Start");
    libNtve_gf_SendActorMessageToUnit(UnitFromId(40), "Signal Start");
    Wait(2.0, c_timeGame);
    libNtve_gf_ShareVisionofUnit(lv_localCube, false, gv_pLAYER_01_USER);
    PingDestroy(libHots_gf_PingStoredForUnit(lv_localCube, 1));
    libVCMI_gf_CreateMissionAutosavePoint(StringToText(""));
    UnitRemove(UnitFromId(1067));
    UnitIssueOrder(UnitFromId(1082), Order(AbilityCommand("XelNagaTempleDoorLargeNELowered", 0)), c_orderQueueReplace);
    SoundPlayAtPointForPlayer(SoundLink("PUlnar02_GateOpenSound", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(UnitFromId(1082)), 0.0, 100.0, 0.0);
    TriggerEnable(gt_S2StartHallDefenseEvents, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2BlueConstruct02Dead_Init () {
    gt_S2BlueConstruct02Dead = TriggerCreate("gt_S2BlueConstruct02Dead_Func");
    TriggerAddEventUnitDied(gt_S2BlueConstruct02Dead, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Start Hall Defense Events
//--------------------------------------------------------------------------------------------------
bool gt_S2StartHallDefenseEvents_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(97), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_S2HallDefenseBreach, true, false);
    TriggerExecute(gt_S2HallDefenseBreachQ, true, false);
    Wait(5.0, c_timeGame);
    TriggerExecute(gt_S2HallDefenseFlyInWarpPrismsAndMedivacs, true, true);
    while (!((UnitGroupCount(gv_s2HallAttackGroup, c_unitCountAlive) <= 3))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_S2HallDefenseDropInHybrids, true, true);
    Wait(5.0, c_timeGame);
    while (!((UnitGroupCount(gv_s2HallAttackGroup, c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeGame);
    }
    TriggerEnable(gt_S2HallBeaconReached, true);
    libNtve_gf_ShowHideUnit(UnitFromId(1326), true);
    ActorScopeSend(ActorScopeFromUnit(UnitFromId(1326)), "AnimPlay Birth Birth");
    TriggerExecute(gt_S2HallDefenseFinishedQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2StartHallDefenseEvents_Init () {
    gt_S2StartHallDefenseEvents = TriggerCreate("gt_S2StartHallDefenseEvents_Func");
    TriggerEnable(gt_S2StartHallDefenseEvents, false);
    TriggerAddEventTimePeriodic(gt_S2StartHallDefenseEvents, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Hall Defense Breach
//--------------------------------------------------------------------------------------------------
bool gt_S2HallDefenseBreach_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_CreatePlanetCrackerBreach(PointFromId(1323));
    Wait(0.5, c_timeGame);
    gf_CreatePlanetCrackerBreach(PointFromId(1324));
    Wait(1.0, c_timeGame);
    gf_CreatePlanetCrackerBreach(PointFromId(1325));
    Wait(0.25, c_timeGame);
    gf_CreatePlanetCrackerBreach(PointFromId(1335));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2HallDefenseBreach_Init () {
    gt_S2HallDefenseBreach = TriggerCreate("gt_S2HallDefenseBreach_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Hall Defense Breach Q
//--------------------------------------------------------------------------------------------------
bool gt_S2HallDefenseBreachQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/FA6DE7E1"), null, PointFromId(1323));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(1323), 2.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_kERRIGAN, "pMission_Ulnar02|Line00181", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(gv_kERRIGAN, "pMission_Ulnar02|Line00182", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2HallDefenseBreachQ_Init () {
    gt_S2HallDefenseBreachQ = TriggerCreate("gt_S2HallDefenseBreachQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Hall Defense Fly In Warp Prisms And Medivacs
//--------------------------------------------------------------------------------------------------
bool gt_S2HallDefenseFlyInWarpPrismsAndMedivacs_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto2E1FB247_n;
    int auto2E1FB247_i;
    int autoB5322106_n;
    int autoB5322106_i;
    int auto64C32BA4_n;
    int auto64C32BA4_i;
    int autoCA843DC1_n;
    int autoCA843DC1_i;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_S2HallDefenseAttackGroupUnitsWarpIn, true);
    gf_FlyInWarpPrism(PointFromId(716));
    Wait(0.125, c_timeGame);
    gf_FlyInWarpPrism(PointFromId(717));
    Wait(4.0, c_timeGame);
    gf_FlyInWarpPrism(PointFromId(720));
    Wait(0.125, c_timeGame);
    gf_FlyInWarpPrism(PointFromId(721));
    auto2E1FB247_n = libLotv_gf_DifficultyValueInt2(3, 3, 6, 8);
    for (auto2E1FB247_i = 1; auto2E1FB247_i <= auto2E1FB247_n; auto2E1FB247_i += 1) {
        if ((UnitGroupCount(UnitGroup("WarpPrismPhasing", gv_pLAYER_02_DOMINION2, RegionFromId(64), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            UnitIssueOrder(UnitFromId(938), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), RegionRandomPoint(RegionFromId(64))), c_orderQueueReplace);
        }

        Wait(0.125, c_timeGame);
    }
    autoB5322106_n = libLotv_gf_DifficultyValueInt2(4, 4, 6, 6);
    for (autoB5322106_i = 1; autoB5322106_i <= autoB5322106_n; autoB5322106_i += 1) {
        if ((UnitGroupCount(UnitGroup("WarpPrismPhasing", gv_pLAYER_02_DOMINION2, RegionFromId(64), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            UnitIssueOrder(UnitFromId(938), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), RegionRandomPoint(RegionFromId(64))), c_orderQueueReplace);
        }

        Wait(0.125, c_timeGame);
    }
    Wait(4.0, c_timeGame);
    gf_SendMedivacDrop(PointFromId(1335), PointFromId(1271), PointFromId(723), libLotv_gf_DifficultyValueInt2(2, 2, 4, 6), "Reaper");
    Wait(0.125, c_timeGame);
    gf_SendMedivacDrop(PointFromId(1335), PointFromId(1271), PointFromId(724), libLotv_gf_DifficultyValueInt2(2, 2, 3, 4), "Spectre");
    Wait(0.125, c_timeGame);
    gf_SendMedivacDrop(PointFromId(1335), PointFromId(1271), PointFromId(724), libLotv_gf_DifficultyValueInt2(0, 0, 0, 1), "ThorAP");
    Wait(3.0, c_timeGame);
    auto64C32BA4_n = libLotv_gf_DifficultyValueInt2(2, 2, 4, 6);
    for (auto64C32BA4_i = 1; auto64C32BA4_i <= auto64C32BA4_n; auto64C32BA4_i += 1) {
        if ((UnitGroupCount(UnitGroup("WarpPrismPhasing", gv_pLAYER_02_DOMINION2, RegionFromId(64), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            UnitIssueOrder(UnitFromId(938), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), RegionRandomPoint(RegionFromId(64))), c_orderQueueReplace);
        }

        Wait(0.125, c_timeGame);
    }
    autoCA843DC1_n = libLotv_gf_DifficultyValueInt2(1, 1, 2, 3);
    for (autoCA843DC1_i = 1; autoCA843DC1_i <= autoCA843DC1_n; autoCA843DC1_i += 1) {
        if ((UnitGroupCount(UnitGroup("WarpPrismPhasing", gv_pLAYER_02_DOMINION2, RegionFromId(64), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            UnitIssueOrder(UnitFromId(938), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 2), RegionRandomPoint(RegionFromId(64))), c_orderQueueReplace);
        }

        Wait(0.125, c_timeGame);
    }
    Wait(4.0, c_timeGame);
    gf_SendMedivacDrop(PointFromId(1335), PointFromId(1271), PointFromId(725), libLotv_gf_DifficultyValueInt2(2, 2, 4, 4), "Goliath");
    Wait(0.125, c_timeGame);
    gf_SendMedivacDrop(PointFromId(1335), PointFromId(1271), PointFromId(918), libLotv_gf_DifficultyValueInt2(2, 2, 4, 4), "HellionTank");
    Wait(0.125, c_timeGame);
    gf_SendMedivacDrop(PointFromId(1335), PointFromId(1271), PointFromId(724), libLotv_gf_DifficultyValueInt2(0, 0, 0, 1), "ThorAP");
    Wait(4.0, c_timeGame);
    TriggerEnable(gt_S2HallDefenseAttackGroupUnitsWarpIn, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2HallDefenseFlyInWarpPrismsAndMedivacs_Init () {
    gt_S2HallDefenseFlyInWarpPrismsAndMedivacs = TriggerCreate("gt_S2HallDefenseFlyInWarpPrismsAndMedivacs_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Hall Defense Drop In Hybrids
//--------------------------------------------------------------------------------------------------
bool gt_S2HallDefenseDropInHybrids_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoA23877FA_n;
    int autoA23877FA_i;
    int autoEC7E47C7_n;
    int autoEC7E47C7_i;
    int auto9C6DD5F6_n;
    int auto9C6DD5F6_i;
    unitgroup autoE0437508_g;
    int autoE0437508_u;
    unit autoE0437508_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_SpawnSkyReaver(PointFromId(72));
    Wait(0.25, c_timeGame);
    autoA23877FA_n = libLotv_gf_DifficultyValueInt2(0, 0, 1, 1);
    for (autoA23877FA_i = 1; autoA23877FA_i <= autoA23877FA_n; autoA23877FA_i += 1) {
        gf_SpawnSkyDestroyer(PointFromId(1321));
        gf_SpawnSkyDestroyer(PointFromId(1337));
    }
    Wait(0.5, c_timeGame);
    autoEC7E47C7_n = libLotv_gf_DifficultyValueInt2(0, 0, 1, 0);
    for (autoEC7E47C7_i = 1; autoEC7E47C7_i <= autoEC7E47C7_n; autoEC7E47C7_i += 1) {
        gf_SpawnSkyDestroyer(PointFromId(1659));
        gf_SpawnSkyDestroyer(PointFromId(1660));
    }
    auto9C6DD5F6_n = libLotv_gf_DifficultyValueInt2(0, 0, 0, 1);
    for (auto9C6DD5F6_i = 1; auto9C6DD5F6_i <= auto9C6DD5F6_n; auto9C6DD5F6_i += 1) {
        gf_SpawnSkyReaver(PointFromId(1659));
        gf_SpawnSkyReaver(PointFromId(1660));
    }
    Wait(3.0, c_timeGame);
    autoE0437508_g = UnitGroup(null, gv_pLAYER_02_DOMINION4, RegionFromId(97), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE0437508_u = UnitGroupCount(autoE0437508_g, c_unitCountAll);
    for (;; autoE0437508_u -= 1) {
        autoE0437508_var = UnitGroupUnitFromEnd(autoE0437508_g, autoE0437508_u);
        if (autoE0437508_var == null) { break; }
        UnitGroupAdd(gv_s2HallAttackGroup, autoE0437508_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2HallDefenseDropInHybrids_Init () {
    gt_S2HallDefenseDropInHybrids = TriggerCreate("gt_S2HallDefenseDropInHybrids_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Hall Defense Finished Q
//--------------------------------------------------------------------------------------------------
bool gt_S2HallDefenseFinishedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/E0227EC3"), null, UnitGetPosition(UnitFromId(1326)));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(1323), 2.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_kERRIGAN, "pMission_Ulnar02|Line00183", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2HallDefenseFinishedQ_Init () {
    gt_S2HallDefenseFinishedQ = TriggerCreate("gt_S2HallDefenseFinishedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Hall Beacon Reached
//--------------------------------------------------------------------------------------------------
bool gt_S2HallBeaconReached_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitKill(UnitFromId(1326));
    gv_hallsReached = 2;
    TriggerExecute(gt_ObjectiveHallsofRevelationUpdate, true, false);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_MidShrine2Q, true, true);
    TriggerExecute(gt_StartGameStage03Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2HallBeaconReached_Init () {
    gt_S2HallBeaconReached = TriggerCreate("gt_S2HallBeaconReached_Func");
    TriggerEnable(gt_S2HallBeaconReached, false);
    TriggerAddEventUnitRegion(gt_S2HallBeaconReached, UnitRefFromVariable("gv_aRTANIS"), RegionFromId(137), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Hall Defense Attack Group Units Warp In
//--------------------------------------------------------------------------------------------------
bool gt_S2HallDefenseAttackGroupUnitsWarpIn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_s2HallAttackGroup, EventUnitProgressUnit());
    UnitGroupAdd(gv_globalEnemyUnits, EventUnitProgressUnit());
    gf_ActivateGenericEnemyAI(EventUnitProgressUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2HallDefenseAttackGroupUnitsWarpIn_Init () {
    gt_S2HallDefenseAttackGroupUnitsWarpIn = TriggerCreate("gt_S2HallDefenseAttackGroupUnitsWarpIn_Func");
    TriggerEnable(gt_S2HallDefenseAttackGroupUnitsWarpIn, false);
    TriggerAddEventUnitConstructProgress(gt_S2HallDefenseAttackGroupUnitsWarpIn, UnitRefFromUnit(UnitFromId(718)), c_unitProgressStageComplete);
    TriggerAddEventUnitConstructProgress(gt_S2HallDefenseAttackGroupUnitsWarpIn, UnitRefFromUnit(UnitFromId(938)), c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game - Stage 03 Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameStage03Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_currentStage = 3;
    TriggerExecute(gt_S3PrepareSpectreAndReaperAmbushes, true, false);
    UnitIssueOrder(UnitFromId(1063), OrderTargetingUnit(AbilityCommand("attack", 0), gv_s3FinalRoomMeleeTarget01), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1162), OrderTargetingUnit(AbilityCommand("attack", 0), gv_s3FinalRoomMeleeTarget03), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1161), OrderTargetingUnit(AbilityCommand("attack", 0), gv_s3FinalRoomRangedTarget), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1062), OrderTargetingUnit(AbilityCommand("attack", 0), gv_s3FinalRoomRangedTarget), c_orderQueueReplace);
    Wait(1.0, c_timeReal);
    TriggerQueueEnter();
    libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/993D2D6F"));
    TriggerExecute(gt_ObjectiveHallsofRevelationCreate, true, false);
    TriggerExecute(gt_ObjectiveSurviveCreate, true, false);
    TriggerExecute(gt_ObjectiveXelNagaDevicesCreate, true, false);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(PointFromId(358), 10.0), 0.1, false);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(PointFromId(358), 7.0), 0.0, false);
    libVCMI_gf_CreateObjectivePing(true, PointFromId(358), StringExternal("Param/Value/E50FEFB1"));
    gv_mainObjectivePing = PingLastCreated();
    TriggerExecute(gt_S3TimerStart, true, false);
    Wait(2.0, c_timeReal);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_kERRIGAN, "pMission_Ulnar02|Line00157", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameStage03Q_Init () {
    gt_StartGameStage03Q = TriggerCreate("gt_StartGameStage03Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Timer Start
//--------------------------------------------------------------------------------------------------
bool gt_S3TimerStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_timeWarning01;
    fixed lv_timeWarning02;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TimerStart(gv_s3Timer, gv_s3TimeLimit, false, c_timeGame);
    libVCUI_gf_TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/85DF027B"), true, false);
    gv_s3TimerWindow = TimerWindowLastCreated();
    libNtve_gf_WaitForTimer(gv_s3Timer, 120.0, false);
    TriggerExecute(gt_S3TimerFirstWarningQ, true, false);
    libNtve_gf_WaitForTimer(gv_s3Timer, 60.0, false);
    TriggerExecute(gt_S3TimerSecondWarningQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3TimerStart_Init () {
    gt_S3TimerStart = TriggerCreate("gt_S3TimerStart_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Timer First Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_S3TimerFirstWarningQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((TriggerIsEnabled(gt_S3StopShrineTimer) == true)) {
        SoundPlayForPlayer(SoundLink("ZSpace02MusicEvent13_InterstitialVO", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        libVCUI_gf_FlashTimerWindow(6.0, false);
        Wait(2.0, c_timeGame);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(gv_aRTANIS, "pMission_Ulnar02|Line00172", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3TimerFirstWarningQ_Init () {
    gt_S3TimerFirstWarningQ = TriggerCreate("gt_S3TimerFirstWarningQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Timer Second Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_S3TimerSecondWarningQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((TriggerIsEnabled(gt_S3StopShrineTimer) == true)) {
        SoundPlayForPlayer(SoundLink("ZSpace02MusicEvent17_InterstitialVO", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        libVCUI_gf_FlashTimerWindow(6.0, false);
        Wait(2.0, c_timeGame);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(gv_aRTANIS, "pMission_Ulnar02|Line00171", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3TimerSecondWarningQ_Init () {
    gt_S3TimerSecondWarningQ = TriggerCreate("gt_S3TimerSecondWarningQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Planet Cracker Path 01
//--------------------------------------------------------------------------------------------------
bool gt_S3PlanetCrackerPath01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_attackGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_attackGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_CreatePlanetCrackerPath(PointFromId(1202), PointFromId(1203));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3PlanetCrackerPath01_Init () {
    gt_S3PlanetCrackerPath01 = TriggerCreate("gt_S3PlanetCrackerPath01_Func");
    TriggerAddEventUnitRegion(gt_S3PlanetCrackerPath01, null, RegionFromId(36), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Planet Cracker Path 02
//--------------------------------------------------------------------------------------------------
bool gt_S3PlanetCrackerPath02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_attackGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_attackGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_CreatePlanetCrackerPath(PointFromId(1204), PointFromId(1205));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3PlanetCrackerPath02_Init () {
    gt_S3PlanetCrackerPath02 = TriggerCreate("gt_S3PlanetCrackerPath02_Func");
    TriggerAddEventUnitRegion(gt_S3PlanetCrackerPath02, null, RegionFromId(42), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Unit Unloaded From Dropship
//--------------------------------------------------------------------------------------------------
bool gt_S3UnitUnloadedFromDropship_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION7))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ActivateGenericEnemyAI(EventUnitCargo());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3UnitUnloadedFromDropship_Init () {
    gt_S3UnitUnloadedFromDropship = TriggerCreate("gt_S3UnitUnloadedFromDropship_Func");
    TriggerAddEventUnitCargo(gt_S3UnitUnloadedFromDropship, null, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Hybrid Attack
//--------------------------------------------------------------------------------------------------
bool gt_S3HybridAttack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_attackGroup;

    // Automatic Variable Declarations
    unitgroup auto96F29EBF_g;
    int auto96F29EBF_u;
    unit auto96F29EBF_var;

    // Variable Initialization
    lv_attackGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_S3SeeDestroyedDoorframeQ, true);
    auto96F29EBF_g = gv_s3HybridGroup01;
    auto96F29EBF_u = UnitGroupCount(auto96F29EBF_g, c_unitCountAll);
    for (;; auto96F29EBF_u -= 1) {
        auto96F29EBF_var = UnitGroupUnitFromEnd(auto96F29EBF_g, auto96F29EBF_u);
        if (auto96F29EBF_var == null) { break; }
        UnitGroupAdd(gv_globalEnemyUnits, auto96F29EBF_var);
        gf_ActivateGenericEnemyAI(auto96F29EBF_var);
    }
    libNtve_gf_ShareVisionofUnit(UnitFromId(693), true, gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3HybridAttack_Init () {
    gt_S3HybridAttack = TriggerCreate("gt_S3HybridAttack_Func");
    TriggerAddEventUnitRegion(gt_S3HybridAttack, null, RegionFromId(82), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - See Destroyed Doorframe Q
//--------------------------------------------------------------------------------------------------
bool gt_S3SeeDestroyedDoorframeQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(31), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(31), 12.0, false);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(UnitFromId(189)), 3.0, Color(0.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/F3D77697"), null, UnitGetPosition(UnitFromId(189)));
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_aRTANIS, "pMission_Ulnar02|Line00164", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3SeeDestroyedDoorframeQ_Init () {
    gt_S3SeeDestroyedDoorframeQ = TriggerCreate("gt_S3SeeDestroyedDoorframeQ_Func");
    TriggerEnable(gt_S3SeeDestroyedDoorframeQ, false);
    TriggerAddEventTimePeriodic(gt_S3SeeDestroyedDoorframeQ, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Stalker Attack Q
//--------------------------------------------------------------------------------------------------
bool gt_S3StalkerAttackQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto514B559B_g;
    int auto514B559B_u;
    unit auto514B559B_var;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_S3ActivateAmbushonArtanis01Q, true);
    TriggerEnable(gt_S3ActivateAmbushonKerrigan01Q, true);
    TriggerEnable(gt_S3DropshipsAttackKerrigan, true);
    TriggerEnable(gt_S3ReaperJumpsDown, true);
    auto514B559B_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionFromId(52), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto514B559B_u = UnitGroupCount(auto514B559B_g, c_unitCountAll);
    for (;; auto514B559B_u -= 1) {
        auto514B559B_var = UnitGroupUnitFromEnd(auto514B559B_g, auto514B559B_u);
        if (auto514B559B_var == null) { break; }
        if ((UnitGetType(auto514B559B_var) != "WarpPrismPhasing")) {
            gf_ActivateGenericEnemyAI(auto514B559B_var);
        }

    }
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Ulnar02|Line00139", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    UnitIssueOrder(UnitFromId(237), Order(AbilityCommand("TransportMode", 0)), c_orderQueueReplace);
    while ((UnitIsAlive(UnitFromId(237)) == true) && (DistanceBetweenPoints(UnitGetPosition(UnitFromId(237)), PointFromId(346)) > 1)) {
        UnitIssueOrder(UnitFromId(237), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(346)), c_orderQueueReplace);
        Wait(1.0, c_timeAI);
    }
    UnitRemove(UnitFromId(237));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3StalkerAttackQ_Init () {
    gt_S3StalkerAttackQ = TriggerCreate("gt_S3StalkerAttackQ_Func");
    TriggerAddEventUnitRegion(gt_S3StalkerAttackQ, null, RegionFromId(43), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Prepare Spectre And Reaper Ambushes
//--------------------------------------------------------------------------------------------------
bool gt_S3PrepareSpectreAndReaperAmbushes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto146A11C0_g;
    int auto146A11C0_u;
    unit auto146A11C0_var;
    unitgroup auto4BC298BF_g;
    int auto4BC298BF_u;
    unit auto4BC298BF_var;
    unitgroup auto520201A6_g;
    int auto520201A6_u;
    unit auto520201A6_var;
    unitgroup auto1E612FCF_g;
    int auto1E612FCF_u;
    unit auto1E612FCF_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto146A11C0_g = UnitGroup("Spectre", gv_pLAYER_02_DOMINION7, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto146A11C0_u = UnitGroupCount(auto146A11C0_g, c_unitCountAll);
    for (;; auto146A11C0_u -= 1) {
        auto146A11C0_var = UnitGroupUnitFromEnd(auto146A11C0_g, auto146A11C0_u);
        if (auto146A11C0_var == null) { break; }
        UnitIssueOrder(auto146A11C0_var, Order(AbilityCommand("RogueGhostCloak", 0)), c_orderQueueReplace);
        libNtve_gf_PauseUnit(auto146A11C0_var, true);
    }
    auto4BC298BF_g = UnitGroup("Spectre", gv_pLAYER_02_DOMINION7, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4BC298BF_u = UnitGroupCount(auto4BC298BF_g, c_unitCountAll);
    for (;; auto4BC298BF_u -= 1) {
        auto4BC298BF_var = UnitGroupUnitFromEnd(auto4BC298BF_g, auto4BC298BF_u);
        if (auto4BC298BF_var == null) { break; }
        UnitIssueOrder(auto4BC298BF_var, Order(AbilityCommand("RogueGhostCloak", 0)), c_orderQueueReplace);
        libNtve_gf_PauseUnit(auto4BC298BF_var, true);
    }
    auto520201A6_g = UnitGroup("Reaper", gv_pLAYER_02_DOMINION7, RegionFromId(51), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto520201A6_u = UnitGroupCount(auto520201A6_g, c_unitCountAll);
    for (;; auto520201A6_u -= 1) {
        auto520201A6_var = UnitGroupUnitFromEnd(auto520201A6_g, auto520201A6_u);
        if (auto520201A6_var == null) { break; }
        libNtve_gf_PauseUnit(auto520201A6_var, true);
    }
    auto1E612FCF_g = UnitGroup("Reaper", gv_pLAYER_02_DOMINION7, RegionFromId(56), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1E612FCF_u = UnitGroupCount(auto1E612FCF_g, c_unitCountAll);
    for (;; auto1E612FCF_u -= 1) {
        auto1E612FCF_var = UnitGroupUnitFromEnd(auto1E612FCF_g, auto1E612FCF_u);
        if (auto1E612FCF_var == null) { break; }
        libNtve_gf_PauseUnit(auto1E612FCF_var, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3PrepareSpectreAndReaperAmbushes_Init () {
    gt_S3PrepareSpectreAndReaperAmbushes = TriggerCreate("gt_S3PrepareSpectreAndReaperAmbushes_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Activate Ambush on Artanis 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_S3ActivateAmbushonArtanis01Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto170D2B18_g;
    int auto170D2B18_u;
    unit auto170D2B18_var;
    unitgroup auto12579B24_g;
    int auto12579B24_u;
    unit auto12579B24_var;
    unitgroup autoCF496A76_g;
    int autoCF496A76_u;
    unit autoCF496A76_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(59), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_S3SpectreAmbushQ, true);
    auto170D2B18_g = UnitGroup("Reaper", gv_pLAYER_02_DOMINION7, RegionFromId(49), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto170D2B18_u = UnitGroupCount(auto170D2B18_g, c_unitCountAll);
    for (;; auto170D2B18_u -= 1) {
        auto170D2B18_var = UnitGroupUnitFromEnd(auto170D2B18_g, auto170D2B18_u);
        if (auto170D2B18_var == null) { break; }
        UnitIssueOrder(auto170D2B18_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(739)), c_orderQueueReplace);
        Wait(0.25, c_timeGame);
    }
    Wait(1.5, c_timeGame);
    auto12579B24_g = UnitGroup("Spectre", gv_pLAYER_02_DOMINION7, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto12579B24_u = UnitGroupCount(auto12579B24_g, c_unitCountAll);
    for (;; auto12579B24_u -= 1) {
        auto12579B24_var = UnitGroupUnitFromEnd(auto12579B24_g, auto12579B24_u);
        if (auto12579B24_var == null) { break; }
        libNtve_gf_PauseUnit(auto12579B24_var, false);
        UnitIssueOrder(auto12579B24_var, Order(AbilityCommand("RogueGhostCloak", 1)), c_orderQueueReplace);
        gf_ActivateGenericEnemyAI(auto12579B24_var);
    }
    autoCF496A76_g = UnitGroup("Spectre", gv_pLAYER_02_DOMINION7, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCF496A76_u = UnitGroupCount(autoCF496A76_g, c_unitCountAll);
    for (;; autoCF496A76_u -= 1) {
        autoCF496A76_var = UnitGroupUnitFromEnd(autoCF496A76_g, autoCF496A76_u);
        if (autoCF496A76_var == null) { break; }
        libNtve_gf_PauseUnit(autoCF496A76_var, false);
        UnitIssueOrder(autoCF496A76_var, Order(AbilityCommand("RogueGhostCloak", 1)), c_orderQueueReplace);
        gf_ActivateGenericEnemyAI(autoCF496A76_var);
    }
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(UnitFromId(1142), "pMission_Ulnar02|Line00155", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    Wait(1.0, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3ActivateAmbushonArtanis01Q_Init () {
    gt_S3ActivateAmbushonArtanis01Q = TriggerCreate("gt_S3ActivateAmbushonArtanis01Q_Func");
    TriggerEnable(gt_S3ActivateAmbushonArtanis01Q, false);
    TriggerAddEventTimePeriodic(gt_S3ActivateAmbushonArtanis01Q, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Dropships Attack Kerrigan
//--------------------------------------------------------------------------------------------------
bool gt_S3DropshipsAttackKerrigan_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_medivac01;
    unit lv_medivac02;
    unit lv_medivac03;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(63), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsAtPoint2(1, "Medivac", 0, gv_pLAYER_02_DOMINION7, PointFromId(346));
    lv_medivac01 = UnitLastCreated();
    UnitCargoCreate(lv_medivac01, "Spectre", 4);
    Wait(0.25, c_timeGame);
    libLbty_gf_OrderTransporttoUnloadAllthenDespawn(lv_medivac01, PointFromId(935), PointFromId(346));
    Wait(0.25, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "Medivac", 0, gv_pLAYER_02_DOMINION7, PointFromId(347));
    lv_medivac02 = UnitLastCreated();
    UnitCargoCreate(lv_medivac02, "Reaper", 8);
    Wait(0.25, c_timeGame);
    libLbty_gf_OrderTransporttoUnloadAllthenDespawn(lv_medivac02, PointFromId(939), PointFromId(347));
    Wait(0.25, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "Medivac", 0, gv_pLAYER_02_DOMINION7, PointFromId(350));
    lv_medivac03 = UnitLastCreated();
    UnitCargoCreate(lv_medivac03, "Spectre", 4);
    Wait(0.25, c_timeGame);
    libLbty_gf_OrderTransporttoUnloadAllthenDespawn(lv_medivac03, PointFromId(940), PointFromId(350));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3DropshipsAttackKerrigan_Init () {
    gt_S3DropshipsAttackKerrigan = TriggerCreate("gt_S3DropshipsAttackKerrigan_Func");
    TriggerEnable(gt_S3DropshipsAttackKerrigan, false);
    TriggerAddEventTimePeriodic(gt_S3DropshipsAttackKerrigan, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Activate Ambush on Kerrigan 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_S3ActivateAmbushonKerrigan01Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto4A2C61B3_g;
    int auto4A2C61B3_u;
    unit auto4A2C61B3_var;
    unitgroup autoEC46A877_g;
    int autoEC46A877_u;
    unit autoEC46A877_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(57), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto4A2C61B3_g = UnitGroup("Reaper", gv_pLAYER_02_DOMINION7, RegionFromId(51), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4A2C61B3_u = UnitGroupCount(auto4A2C61B3_g, c_unitCountAll);
    for (;; auto4A2C61B3_u -= 1) {
        auto4A2C61B3_var = UnitGroupUnitFromEnd(auto4A2C61B3_g, auto4A2C61B3_u);
        if (auto4A2C61B3_var == null) { break; }
        libNtve_gf_PauseUnit(auto4A2C61B3_var, false);
        UnitIssueOrder(auto4A2C61B3_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(737)), c_orderQueueReplace);
        Wait(0.25, c_timeGame);
    }
    Wait(1.0, c_timeGame);
    autoEC46A877_g = UnitGroup("Reaper", gv_pLAYER_02_DOMINION7, RegionFromId(56), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEC46A877_u = UnitGroupCount(autoEC46A877_g, c_unitCountAll);
    for (;; autoEC46A877_u -= 1) {
        autoEC46A877_var = UnitGroupUnitFromEnd(autoEC46A877_g, autoEC46A877_u);
        if (autoEC46A877_var == null) { break; }
        libNtve_gf_PauseUnit(autoEC46A877_var, false);
        UnitIssueOrder(autoEC46A877_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(738)), c_orderQueueReplace);
        Wait(0.25, c_timeGame);
    }
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Ulnar02|Line00140", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(gv_kERRIGAN, "pMission_Ulnar02|Line00177", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3ActivateAmbushonKerrigan01Q_Init () {
    gt_S3ActivateAmbushonKerrigan01Q = TriggerCreate("gt_S3ActivateAmbushonKerrigan01Q_Func");
    TriggerEnable(gt_S3ActivateAmbushonKerrigan01Q, false);
    TriggerAddEventTimePeriodic(gt_S3ActivateAmbushonKerrigan01Q, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Reaper Jumps Down
//--------------------------------------------------------------------------------------------------
bool gt_S3ReaperJumpsDown_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION7))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Reaper"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ActivateGenericEnemyAI(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3ReaperJumpsDown_Init () {
    gt_S3ReaperJumpsDown = TriggerCreate("gt_S3ReaperJumpsDown_Func");
    TriggerEnable(gt_S3ReaperJumpsDown, false);
    TriggerAddEventUnitRegion(gt_S3ReaperJumpsDown, null, RegionFromId(30), true);
    TriggerAddEventUnitRegion(gt_S3ReaperJumpsDown, null, RegionFromId(28), true);
    TriggerAddEventUnitRegion(gt_S3ReaperJumpsDown, null, RegionFromId(29), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Planet Crack Construct
//--------------------------------------------------------------------------------------------------
bool gt_S3PlanetCrackConstruct_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_CreatePlanetCrackerPath(PointFromId(64), PointFromId(1483));
    Wait(3.0, c_timeGame);
    UnitKill(UnitFromId(187));
    Wait(1.0, c_timeGame);
    TriggerExecute(gt_S3DropshipAttackAtConstruct, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3PlanetCrackConstruct_Init () {
    gt_S3PlanetCrackConstruct = TriggerCreate("gt_S3PlanetCrackConstruct_Func");
    TriggerAddEventUnitRegion(gt_S3PlanetCrackConstruct, null, RegionFromId(35), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Dropship Attack At Construct
//--------------------------------------------------------------------------------------------------
bool gt_S3DropshipAttackAtConstruct_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_medivac01;
    unit lv_medivac02;
    unit lv_medivac03;
    unit lv_medivac04;

    // Automatic Variable Declarations
    unitgroup auto7A201140_g;
    int auto7A201140_u;
    unit auto7A201140_var;
    unitgroup auto24A7DA41_g;
    int auto24A7DA41_u;
    unit auto24A7DA41_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsAtPoint2(1, "Medivac", 0, gv_pLAYER_02_DOMINION7, PointFromId(955));
    lv_medivac01 = UnitLastCreated();
    UnitSetHeight(UnitLastCreated(), 10.0, 0.0);
    UnitSetHeight(UnitLastCreated(), 4.0, 2.0);
    UnitSetPropertyFixed(lv_medivac01, c_unitPropEnergyPercent, 100.0);
    UnitCargoCreate(lv_medivac01, "Spectre", libNtve_gf_DifficultyValueInt(3, 3, 4, 4));
    UnitGroupAddUnitGroup(gv_globalEnemyUnits, UnitCargoLastCreatedGroup());
    auto7A201140_g = UnitCargoGroup(lv_medivac01);
    auto7A201140_u = UnitGroupCount(auto7A201140_g, c_unitCountAll);
    for (;; auto7A201140_u -= 1) {
        auto7A201140_var = UnitGroupUnitFromEnd(auto7A201140_g, auto7A201140_u);
        if (auto7A201140_var == null) { break; }
        UnitSetPropertyFixed(auto7A201140_var, c_unitPropEnergyPercent, 100.0);
    }
    Wait(0.0625, c_timeGame);
    libLbty_gf_OrderTransporttoUnloadAllthenDespawn(lv_medivac01, PointFromId(961), PointFromId(955));
    Wait(1.5, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "Medivac", 0, gv_pLAYER_02_DOMINION7, PointFromId(960));
    lv_medivac02 = UnitLastCreated();
    UnitSetHeight(UnitLastCreated(), 10.0, 0.0);
    UnitSetHeight(UnitLastCreated(), 4.0, 2.0);
    UnitSetPropertyFixed(lv_medivac02, c_unitPropEnergyPercent, 100.0);
    UnitCargoCreate(lv_medivac02, "Spectre", libNtve_gf_DifficultyValueInt(3, 3, 4, 4));
    UnitGroupAddUnitGroup(gv_globalEnemyUnits, UnitCargoLastCreatedGroup());
    auto24A7DA41_g = UnitCargoGroup(lv_medivac02);
    auto24A7DA41_u = UnitGroupCount(auto24A7DA41_g, c_unitCountAll);
    for (;; auto24A7DA41_u -= 1) {
        auto24A7DA41_var = UnitGroupUnitFromEnd(auto24A7DA41_g, auto24A7DA41_u);
        if (auto24A7DA41_var == null) { break; }
        UnitSetPropertyFixed(auto24A7DA41_var, c_unitPropEnergyPercent, 100.0);
    }
    Wait(0.0625, c_timeGame);
    libLbty_gf_OrderTransporttoUnloadAllthenDespawn(lv_medivac02, PointFromId(964), PointFromId(960));
    Wait(1.5, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "Medivac", 0, gv_pLAYER_02_DOMINION7, PointFromId(1124));
    lv_medivac03 = UnitLastCreated();
    UnitSetHeight(UnitLastCreated(), 10.0, 0.0);
    UnitSetHeight(UnitLastCreated(), 4.0, 2.0);
    UnitSetPropertyFixed(lv_medivac03, c_unitPropEnergyPercent, 100.0);
    UnitCargoCreate(lv_medivac03, "WarHound", libNtve_gf_DifficultyValueInt(1, 1, 2, 2));
    UnitGroupAddUnitGroup(gv_globalEnemyUnits, UnitCargoLastCreatedGroup());
    Wait(0.0625, c_timeGame);
    libLbty_gf_OrderTransporttoUnloadAllthenDespawn(lv_medivac03, PointFromId(1126), PointFromId(1124));
    Wait(3.5, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "Medivac", 0, gv_pLAYER_02_DOMINION7, PointFromId(1125));
    lv_medivac04 = UnitLastCreated();
    UnitSetHeight(UnitLastCreated(), 10.0, 0.0);
    UnitSetHeight(UnitLastCreated(), 4.0, 2.0);
    UnitSetPropertyFixed(lv_medivac04, c_unitPropEnergyPercent, 100.0);
    UnitCargoCreate(lv_medivac04, "Goliath", libLotv_gf_DifficultyValueInt2(2, 2, 0, 0));
    UnitGroupAddUnitGroup(gv_globalEnemyUnits, UnitCargoLastCreatedGroup());
    UnitCargoCreate(lv_medivac04, "ThorAP", libLotv_gf_DifficultyValueInt2(0, 0, 1, 1));
    UnitGroupAddUnitGroup(gv_globalEnemyUnits, UnitCargoLastCreatedGroup());
    Wait(0.0625, c_timeGame);
    libLbty_gf_OrderTransporttoUnloadAllthenDespawn(lv_medivac04, PointFromId(1127), PointFromId(1125));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3DropshipAttackAtConstruct_Init () {
    gt_S3DropshipAttackAtConstruct = TriggerCreate("gt_S3DropshipAttackAtConstruct_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Spectre Ambush Q
//--------------------------------------------------------------------------------------------------
bool gt_S3SpectreAmbushQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_spectreGroup;

    // Automatic Variable Declarations
    int auto53C3FD9E_n;
    int auto53C3FD9E_i;
    unitgroup auto6663D240_g;
    int auto6663D240_u;
    unit auto6663D240_var;
    unitgroup auto92E524C5_g;
    int auto92E524C5_u;
    unit auto92E524C5_var;

    // Variable Initialization
    lv_spectreGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(24), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto53C3FD9E_n = libLotv_gf_DifficultyValueInt2(8, 8, 10, 12);
    for (auto53C3FD9E_i = 1; auto53C3FD9E_i <= auto53C3FD9E_n; auto53C3FD9E_i += 1) {
        UnitCreate(1, "Spectre", 0, gv_pLAYER_02_DOMINION7, RegionRandomPoint(RegionFromId(41)), 45.0);
        UnitGroupAdd(gv_globalEnemyUnits, UnitLastCreated());
        UnitGroupAdd(lv_spectreGroup, UnitLastCreated());
    }
    auto6663D240_g = lv_spectreGroup;
    auto6663D240_u = UnitGroupCount(auto6663D240_g, c_unitCountAll);
    for (;; auto6663D240_u -= 1) {
        auto6663D240_var = UnitGroupUnitFromEnd(auto6663D240_g, auto6663D240_u);
        if (auto6663D240_var == null) { break; }
        UnitSetPosition(auto6663D240_var, RegionRandomPoint(RegionFromId(22)), false);
        UnitSetFacing(auto6663D240_var, RandomFixed(300.0, 330.0), 0.0);
        UnitIssueOrder(auto6663D240_var, Order(AbilityCommand("RogueGhostCloak", 0)), c_orderQueueReplace);
        gf_ActivateGenericEnemyAI(auto6663D240_var);
    }
    Wait(0.0625, c_timeAI);
    auto92E524C5_g = lv_spectreGroup;
    auto92E524C5_u = UnitGroupCount(auto92E524C5_g, c_unitCountAll);
    for (;; auto92E524C5_u -= 1) {
        auto92E524C5_var = UnitGroupUnitFromEnd(auto92E524C5_g, auto92E524C5_u);
        if (auto92E524C5_var == null) { break; }
        UnitIssueOrder(auto92E524C5_var, Order(AbilityCommand("RogueGhostCloak", 1)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3SpectreAmbushQ_Init () {
    gt_S3SpectreAmbushQ = TriggerCreate("gt_S3SpectreAmbushQ_Func");
    TriggerEnable(gt_S3SpectreAmbushQ, false);
    TriggerAddEventTimePeriodic(gt_S3SpectreAmbushQ, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Bonus Objective Tal'Darim
//--------------------------------------------------------------------------------------------------
bool gt_S3BonusObjectiveTalDarim_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoCD49897A_g;
    int autoCD49897A_u;
    unit autoCD49897A_var;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoCD49897A_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionFromId(27), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCD49897A_u = UnitGroupCount(autoCD49897A_g, c_unitCountAll);
    for (;; autoCD49897A_u -= 1) {
        autoCD49897A_var = UnitGroupUnitFromEnd(autoCD49897A_g, autoCD49897A_u);
        if (autoCD49897A_var == null) { break; }
        if ((UnitGetType(autoCD49897A_var) != "WarpPrismPhasing")) {
            gf_ActivateGenericEnemyAI(autoCD49897A_var);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3BonusObjectiveTalDarim_Init () {
    gt_S3BonusObjectiveTalDarim = TriggerCreate("gt_S3BonusObjectiveTalDarim_Func");
    TriggerAddEventUnitRegion(gt_S3BonusObjectiveTalDarim, null, RegionFromId(27), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Shadow and TalDarim Mech Attack
//--------------------------------------------------------------------------------------------------
bool gt_S3ShadowandTalDarimMechAttack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto40FCB7DD_g;
    int auto40FCB7DD_u;
    unit auto40FCB7DD_var;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_S3ReachFinalRoom, true);
    TriggerEnable(gt_S3HybridAttackingShrineGetsStunned, true);
    auto40FCB7DD_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionFromId(50), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto40FCB7DD_u = UnitGroupCount(auto40FCB7DD_g, c_unitCountAll);
    for (;; auto40FCB7DD_u -= 1) {
        auto40FCB7DD_var = UnitGroupUnitFromEnd(auto40FCB7DD_g, auto40FCB7DD_u);
        if (auto40FCB7DD_var == null) { break; }
        if ((UnitGetType(auto40FCB7DD_var) != "WarpPrismPhasing")) {
            gf_ActivateGenericEnemyAI(auto40FCB7DD_var);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3ShadowandTalDarimMechAttack_Init () {
    gt_S3ShadowandTalDarimMechAttack = TriggerCreate("gt_S3ShadowandTalDarimMechAttack_Func");
    TriggerAddEventUnitRegion(gt_S3ShadowandTalDarimMechAttack, null, RegionFromId(50), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Reach Final Room
//--------------------------------------------------------------------------------------------------
bool gt_S3ReachFinalRoom_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hybridUnit;

    // Automatic Variable Declarations
    unitgroup autoF64679D1_g;
    int autoF64679D1_u;
    unit autoF64679D1_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(32), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(32), 12.0, false);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(UnitFromId(423)), 3.0, Color(100.00, 0.00, 0.00));
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/CCF35733"), null, UnitFromId(423));
    libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/5730A5FB"));
    TriggerExecute(gt_S3ReachFinalRoomTransmissionQ, true, false);
    TriggerExecute(gt_S3StopShrineTimer, true, false);
    TriggerEnable(gt_S3AllEnemiesAtFinalRoomDeadQ, true);
    Wait(1.0, c_timeGame);
    autoF64679D1_g = gv_s3FinalRoomNonShrineAttackGroup;
    autoF64679D1_u = UnitGroupCount(autoF64679D1_g, c_unitCountAll);
    for (;; autoF64679D1_u -= 1) {
        autoF64679D1_var = UnitGroupUnitFromEnd(autoF64679D1_g, autoF64679D1_u);
        if (autoF64679D1_var == null) { break; }
        gf_ActivateGenericEnemyAI(autoF64679D1_var);
    }
    Wait(1.0, c_timeGame);
    gf_MakeHybridStopAttackingShrine(UnitFromId(1161));
    Wait(8.0, c_timeGame);
    gf_MakeHybridStopAttackingShrine(UnitFromId(1162));
    if ((libLotv_gf_DifficultyValueVoidBoolean(false, false, true, true) == true)) {
        gf_MakeHybridStopAttackingShrine(UnitFromId(1062));
    }

    Wait(8.0, c_timeGame);
    gf_MakeHybridStopAttackingShrine(UnitFromId(1063));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3ReachFinalRoom_Init () {
    gt_S3ReachFinalRoom = TriggerCreate("gt_S3ReachFinalRoom_Func");
    TriggerEnable(gt_S3ReachFinalRoom, false);
    TriggerAddEventTimePeriodic(gt_S3ReachFinalRoom, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Hybrid Attacking Shrine Gets Stunned
//--------------------------------------------------------------------------------------------------
bool gt_S3HybridAttackingShrineGetsStunned_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto7F64CE95_g;
    int auto7F64CE95_u;
    unit auto7F64CE95_var;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto7F64CE95_g = gv_s3FinalRoomShrineAttackGroup;
    auto7F64CE95_u = UnitGroupCount(auto7F64CE95_g, c_unitCountAll);
    for (;; auto7F64CE95_u -= 1) {
        auto7F64CE95_var = UnitGroupUnitFromEnd(auto7F64CE95_g, auto7F64CE95_u);
        if (auto7F64CE95_var == null) { break; }
        if ((UnitFilterMatch(auto7F64CE95_var, gv_pLAYER_01_USER, UnitFilter(0, (1 << (c_targetFilterStunned - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
            gf_MakeHybridStopAttackingShrine(auto7F64CE95_var);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3HybridAttackingShrineGetsStunned_Init () {
    gt_S3HybridAttackingShrineGetsStunned = TriggerCreate("gt_S3HybridAttackingShrineGetsStunned_Func");
    TriggerEnable(gt_S3HybridAttackingShrineGetsStunned, false);
    TriggerAddEventTimePeriodic(gt_S3HybridAttackingShrineGetsStunned, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Stop Shrine Timer
//--------------------------------------------------------------------------------------------------
bool gt_S3StopShrineTimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TimerPause(gv_s3Timer, true);
    TimerWindowDestroy(gv_s3TimerWindow);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3StopShrineTimer_Init () {
    gt_S3StopShrineTimer = TriggerCreate("gt_S3StopShrineTimer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Reach Final Room Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_S3ReachFinalRoomTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_aRTANIS, "pMission_Ulnar02|Line00147", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Ulnar02|Line00167", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    Wait(1.0, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3ReachFinalRoomTransmissionQ_Init () {
    gt_S3ReachFinalRoomTransmissionQ = TriggerCreate("gt_S3ReachFinalRoomTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - All Enemies At Final Room Dead Q
//--------------------------------------------------------------------------------------------------
bool gt_S3AllEnemiesAtFinalRoomDeadQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(gv_s3FinalRoomNonShrineAttackGroup, c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((UnitGroupCount(gv_s3FinalRoomShrineAttackGroup, c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitRemove(gv_s3FinalRoomRangedTarget);
    UnitRemove(gv_s3FinalRoomMeleeTarget01);
    UnitRemove(gv_s3FinalRoomMeleeTarget02);
    UnitRemove(gv_s3FinalRoomMeleeTarget03);
    Wait(0.5, c_timeGame);
    libNtve_gf_ShowHideUnit(UnitFromId(423), true);
    ActorScopeSend(ActorScopeFromUnit(UnitFromId(423)), "AnimPlay Birth Birth");
    TriggerEnable(gt_S3HallReached, true);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_kERRIGAN, "pMission_Ulnar02|Line00078", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    Wait(1.0, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3AllEnemiesAtFinalRoomDeadQ_Init () {
    gt_S3AllEnemiesAtFinalRoomDeadQ = TriggerCreate("gt_S3AllEnemiesAtFinalRoomDeadQ_Func");
    TriggerEnable(gt_S3AllEnemiesAtFinalRoomDeadQ, false);
    TriggerAddEventTimePeriodic(gt_S3AllEnemiesAtFinalRoomDeadQ, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Hall Reached
//--------------------------------------------------------------------------------------------------
bool gt_S3HallReached_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_hallsReached > 2)) {
        return true;
    }

    gv_hallsReached = 3;
    UnitKill(UnitFromId(423));
    TriggerExecute(gt_ObjectiveHallsofRevelationUpdate, true, false);
    TriggerExecute(gt_ObjectiveHallsofRevelationComplete, true, false);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_VictorySequence, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3HallReached_Init () {
    gt_S3HallReached = TriggerCreate("gt_S3HallReached_Func");
    TriggerEnable(gt_S3HallReached, false);
    TriggerAddEventUnitRegion(gt_S3HallReached, UnitRefFromVariable("gv_aRTANIS"), RegionFromId(39), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Heroes
//--------------------------------------------------------------------------------------------------
bool gt_InitHeroes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCUI_gf_SetHeroPanelUnit(1, gv_aRTANIS);
    libVCUI_gf_SetHeroPanelUnit(2, gv_kERRIGAN);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeHeroPanel, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitHeroes_Init () {
    gt_InitHeroes = TriggerCreate("gt_InitHeroes_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initial Lightning Dash Used
//--------------------------------------------------------------------------------------------------
bool gt_InitialLightningDashUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_initialLightningDashUsed = true;
    VisRevealerDestroy(gv_lightningDashRevealer);
    TransmissionClear(gv_lightningDashTransmission);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitialLightningDashUsed_Init () {
    gt_InitialLightningDashUsed = TriggerCreate("gt_InitialLightningDashUsed_Func");
    TriggerAddEventUnitRegion(gt_InitialLightningDashUsed, UnitRefFromVariable("gv_aRTANIS"), RegionFromId(37), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Lightning Dash Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroLightningDashQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(37), 6.0, false);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(131));
    gv_lightningDashRevealer = VisRevealerLastCreated();
    MinimapPing(PlayerGroupAll(), UnitGetPosition(UnitFromId(455)), 5.0, Color(0.00, 100.00, 0.00));
    Wait(1.0, c_timeReal);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeObjectivePanel, false);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    if ((gv_initialLightningDashUsed == false)) {
        TriggerExecute(gt_TeachLightningDash, true, false);
        if ((RegionContainsPoint(RegionCircle(PointFromId(422), 16.0), CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
            SoundPlayForPlayer(SoundLink("PUlnar02_ReticuleAppears", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        }

    }

    libVCMI_gf_SendTransmissionCampaign(gv_aRTANIS, "pMission_Ulnar02|Line00123", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_lightningDashTransmission = TransmissionLastSent();
    TransmissionWait(gv_lightningDashTransmission, 0.0);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    Wait(1.0, c_timeGame);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeObjectivePanel, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroLightningDashQ_Init () {
    gt_IntroLightningDashQ = TriggerCreate("gt_IntroLightningDashQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Teach Lightning Dash
//--------------------------------------------------------------------------------------------------
bool gt_TeachLightningDash_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_CreateReticleEffectAndTextTagAtPoint(libVCMI_ge_CampaginReticleType_ProtossMainObjective, libVCMI_ge_CampaginReticleSize_Medium, StringExternal("Param/Value/18F0DFB9"), PointFromId(422));
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("ArtanisLightningDash", 0), true);
    while (!(((gv_initialLightningDashUsed == true) || (gv_hallsReached > 0)))) {
        Wait(1.0, c_timeGame);
    }
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("ArtanisLightningDash", 0), false);
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    TextTagDestroy(TextTagLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TeachLightningDash_Init () {
    gt_TeachLightningDash = TriggerCreate("gt_TeachLightningDash_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Teach Astral Wind Q
//--------------------------------------------------------------------------------------------------
bool gt_TeachAstralWindQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((((EventUnit() == gv_kERRIGAN) && (UnitGetPropertyFixed(gv_kERRIGAN, c_unitPropLife, c_unitPropCurrent) < 400.0)) || ((EventUnit() == gv_aRTANIS) && (UnitGetPropertyFixed(gv_aRTANIS, c_unitPropShields, c_unitPropCurrent) < 150.0)))) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_AstralWindHighlight, true, false);
        TriggerQueueEnter();
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeObjectivePanel, false);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(gv_aRTANIS, "pMission_Ulnar02|Line00020", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        Wait(1.0, c_timeGame);
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeObjectivePanel, true);
        TriggerQueueExit();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TeachAstralWindQ_Init () {
    gt_TeachAstralWindQ = TriggerCreate("gt_TeachAstralWindQ_Func");
    TriggerAddEventUnitProperty(gt_TeachAstralWindQ, UnitRefFromVariable("gv_kERRIGAN"), c_unitPropLife);
    TriggerAddEventUnitProperty(gt_TeachAstralWindQ, UnitRefFromVariable("gv_aRTANIS"), c_unitPropShields);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Astral Wind Highlight
//--------------------------------------------------------------------------------------------------
bool gt_AstralWindHighlight_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("ArtanisAstralWind", 0), true);
    while (!((UnitGetPropertyFixed(gv_kERRIGAN, c_unitPropLife, c_unitPropCurrent) > 500.0) && (UnitGetPropertyFixed(gv_aRTANIS, c_unitPropLifePercent, c_unitPropCurrent) > 95.0) && (UnitGetPropertyFixed(gv_aRTANIS, c_unitPropShields, c_unitPropCurrent) > 100.0))) {
        Wait(1.0, c_timeGame);
    }
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("ArtanisAstralWind", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AstralWindHighlight_Init () {
    gt_AstralWindHighlight = TriggerCreate("gt_AstralWindHighlight_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Bonus Objective Discover Q
//--------------------------------------------------------------------------------------------------
bool gt_S1BonusObjectiveDiscoverQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(71), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/8AF6E018"), null, UnitFromId(239));
    TriggerExecute(gt_ObjectiveXelNagaDevicesCreate, true, false);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(239)), 8.0), 10.0, false);
    VisRevealerEnable(gv_bonusObjectiveRevealer1, true);
    libVCMI_gf_CreateObjectivePing(false, UnitGetPosition(UnitFromId(239)), StringExternal("Param/Value/EBFE9663"));
    gv_bonusObjectivePing1 = PingLastCreated();
    libVCMI_gf_AttachReticleEffectAndTextTagOnUnit(libVCMI_ge_CampaginReticleType_ProtossMainObjective, libVCMI_ge_CampaginReticleSize_Medium, StringExternal("Param/Value/70FC53CB"), UnitFromId(239), "Ref_Center");
    libHots_gf_StoreActorForUnit(UnitFromId(239), 1, libNtve_gf_ActorLastCreated());
    libHots_gf_StoreTextTagForUnit(UnitFromId(239), 1, TextTagLastCreated());
    Wait(1.0, c_timeReal);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_aRTANIS, "pMission_Ulnar02|Line00017", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1BonusObjectiveDiscoverQ_Init () {
    gt_S1BonusObjectiveDiscoverQ = TriggerCreate("gt_S1BonusObjectiveDiscoverQ_Func");
    TriggerAddEventTimePeriodic(gt_S1BonusObjectiveDiscoverQ, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Bonus Objective Discover
//--------------------------------------------------------------------------------------------------
bool gt_S2BonusObjectiveDiscover_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(60), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveXelNagaDevicesCreate, true, false);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(791)), 4.0), 10.0, false);
    VisRevealerEnable(gv_bonusObjectiveRevealer2, true);
    libVCMI_gf_CreateObjectivePing(false, UnitGetPosition(UnitFromId(791)), StringExternal("Param/Value/604DAFD8"));
    gv_bonusObjectivePing2 = PingLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2BonusObjectiveDiscover_Init () {
    gt_S2BonusObjectiveDiscover = TriggerCreate("gt_S2BonusObjectiveDiscover_Func");
    TriggerAddEventTimePeriodic(gt_S2BonusObjectiveDiscover, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Bonus Objective Discover
//--------------------------------------------------------------------------------------------------
bool gt_S3BonusObjectiveDiscover_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(48), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveXelNagaDevicesCreate, true, false);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(312)), 8.0), 10.0, false);
    VisRevealerEnable(gv_bonusObjectiveRevealer3, true);
    libVCMI_gf_CreateObjectivePing(false, UnitGetPosition(UnitFromId(312)), StringExternal("Param/Value/3E3B7427"));
    gv_bonusObjectivePing3 = PingLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3BonusObjectiveDiscover_Init () {
    gt_S3BonusObjectiveDiscover = TriggerCreate("gt_S3BonusObjectiveDiscover_Func");
    TriggerAddEventTimePeriodic(gt_S3BonusObjectiveDiscover, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Relic Pickup Q
//--------------------------------------------------------------------------------------------------
bool gt_RelicPickupQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto4633B913_val;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnit() == UnitFromId(239))) {
        libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitFromId(239), 1));
        TextTagDestroy(libHots_gf_TextTagForUnit(UnitFromId(239), 1));
    }

    libVCMI_gf_DisplayMissionObjectiveRewardFloatingText(UnitGetPosition(EventUnit()), "PUlnar02Bonus01");
    UnitKill(EventUnit());
    SoundPlayForPlayer(SoundLink("UI_ResourcePickup", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gv_devicesCollected += 1;
    UnitSetPropertyFixed(gv_aRTANIS, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_aRTANIS, c_unitPropShieldsPercent, 100.0);
    UnitSetPropertyFixed(gv_kERRIGAN, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_kERRIGAN, c_unitPropEnergyPercent, 100.0);
    TriggerExecute(gt_ObjectiveXelNagaDevicesUpdate, true, false);
    if ((gv_devicesCollected == 3)) {
        TriggerExecute(gt_ObjectiveXelNagaDevicesComplete, true, false);
    }

    PingDestroy(gv_bonusObjectivePing1);
    PingDestroy(gv_bonusObjectivePing2);
    PingDestroy(gv_bonusObjectivePing3);
    VisRevealerEnable(gv_bonusObjectiveRevealer1, false);
    VisRevealerEnable(gv_bonusObjectiveRevealer2, false);
    VisRevealerEnable(gv_bonusObjectiveRevealer3, false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    auto4633B913_val = gv_devicesCollected;
    if (auto4633B913_val == 1) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Ulnar02|Line00168", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto4633B913_val == 2) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Ulnar02|Line00169", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto4633B913_val == 3) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Ulnar02|Line00170", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RelicPickupQ_Init () {
    gt_RelicPickupQ = TriggerCreate("gt_RelicPickupQ_Func");
    TriggerAddEventUnitAbility(gt_RelicPickupQ, UnitRefFromUnit(UnitFromId(239)), AbilityCommand("Pickup", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_RelicPickupQ, UnitRefFromUnit(UnitFromId(312)), AbilityCommand("Pickup", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_RelicPickupQ, UnitRefFromUnit(UnitFromId(791)), AbilityCommand("Pickup", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Autorevealers
//--------------------------------------------------------------------------------------------------
bool gt_Autorevealers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int auto8BE7D1BE_ae;
    const int auto8BE7D1BE_ai = 1;
    int auto8112FC46_ae;
    const int auto8112FC46_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libLbty_gf_AutoRevealRegion(RegionFromId(131), RegionFromId(37), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(88), RegionFromId(88), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(33), RegionFromId(33), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(34), RegionFromId(34), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(50), RegionFromId(50), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(15), RegionFromId(15), gv_pLAYER_01_USER);
    gv_numberOfAutorevealers = 14;
    auto8BE7D1BE_ae = gv_numberOfAutorevealers;
    lv_i = 1;
    for ( ; ( (auto8BE7D1BE_ai >= 0 && lv_i <= auto8BE7D1BE_ae) || (auto8BE7D1BE_ai < 0 && lv_i >= auto8BE7D1BE_ae) ) ; lv_i += auto8BE7D1BE_ai ) {
        gv_autorevealers[lv_i].lv_region = RegionFromName(("Autoreveal " + IntToString(lv_i)));
        VisRevealerCreate(gv_pLAYER_01_USER, gv_autorevealers[lv_i].lv_region);
        VisRevealerEnable(VisRevealerLastCreated(), false);
        gv_autorevealers[lv_i].lv_revealer = VisRevealerLastCreated();
    }
    while (true) {
        Wait(1.0, c_timeGame);
        if ((libVCMI_gf_GameIsOver() == true)) {
            return true;
        }

        auto8112FC46_ae = gv_numberOfAutorevealers;
        lv_i = 1;
        for ( ; ( (auto8112FC46_ai >= 0 && lv_i <= auto8112FC46_ae) || (auto8112FC46_ai < 0 && lv_i >= auto8112FC46_ae) ) ; lv_i += auto8112FC46_ai ) {
            if ((gv_autorevealers[lv_i].lv_active == true)) {
                if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, gv_autorevealers[lv_i].lv_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0)) {
                    gv_autorevealers[lv_i].lv_active = false;
                    VisRevealerEnable(gv_autorevealers[lv_i].lv_revealer, false);
                }

            }
            else {
                if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, gv_autorevealers[lv_i].lv_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
                    gv_autorevealers[lv_i].lv_active = true;
                    VisRevealerEnable(gv_autorevealers[lv_i].lv_revealer, true);
                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Autorevealers_Init () {
    gt_Autorevealers = TriggerCreate("gt_Autorevealers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Primary Objective Failed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatPrimaryObjectiveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveSurviveFailed, true, false);
    if ((EventUnit() == gv_aRTANIS)) {
        libVCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libVCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/3F8252B2"), libVCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    }
    else {
        libVCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libVCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/8C808A91"), libVCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    }
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatPrimaryObjectiveFailed_Init () {
    gt_DefeatPrimaryObjectiveFailed = TriggerCreate("gt_DefeatPrimaryObjectiveFailed_Func");
    TriggerAddEventUnitDied(gt_DefeatPrimaryObjectiveFailed, UnitRefFromVariable("gv_aRTANIS"));
    TriggerAddEventUnitDied(gt_DefeatPrimaryObjectiveFailed, UnitRefFromVariable("gv_kERRIGAN"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat S3 Primary Objective Failed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatS3PrimaryObjectiveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveHallsofRevelationFailed, true, false);
    libVCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libVCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/48E204E7"), libVCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatS3PrimaryObjectiveFailed_Init () {
    gt_DefeatS3PrimaryObjectiveFailed = TriggerCreate("gt_DefeatS3PrimaryObjectiveFailed_Func");
    TriggerAddEventTimer(gt_DefeatS3PrimaryObjectiveFailed, gv_s3Timer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_ChangeUnitDamage(gv_kERRIGAN, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    libNtve_gf_ChangeUnitDamage(gv_aRTANIS, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveHallsofRevelationComplete, true, false);
    TriggerExecute(gt_ObjectiveSurviveComplete, true, true);
    libVCMI_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (gv__10thAnniversaryAchievementEnemyWarpPrismwarpedinunits == false)) {
        libVoiC_gf_CampaignAwardAchievement("Anniversary_PUlnar02", gv_pLAYER_01_USER);
    }

    libVoiC_gf_CampaignAwardAchievement("PUlnar02_1", gv_pLAYER_01_USER);
    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/8B1D79AF"), IntToText(gv_banelingKillCount));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/56C8F8D1"), IntToText(gv_lightningDashDamage));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/7AEA55E5"), IntToText(gv_loadedMedivacKillCount));
    TextExpressionSetToken("Param/Expression/90D51A76", "A", IntToText(gv_resurgenceActivationCount));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/48ED507F"), TextExpressionAssemble("Param/Expression/90D51A76"));
    libVCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    libVCMI_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ground Slam - Spawn Adds
//--------------------------------------------------------------------------------------------------
bool gt_GroundSlamSpawnAdds_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    fixed lv_casterFacing;
    fixed lv_spawnAngleMin;
    fixed lv_spawnArc;
    int lv_spawnCount;
    fixed lv_spawnAngleInterval;
    fixed lv_spawnAngle;

    // Automatic Variable Declarations
    int auto5DC8EC39_ae;
    int auto5DC8EC39_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CameraShake(gv_pLAYER_01_USER, "Light", "Tremor", 0.0, 1.0, 1.0);
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_casterFacing = UnitGetFacing(lv_caster);
    lv_spawnArc = libLotv_gf_DifficultyValueFixed2(120.0, 120.0, 180.0, 240.0);
    lv_spawnAngleMin = (UnitGetFacing(lv_caster) - (lv_spawnArc / 2.0));
    lv_spawnCount = libLotv_gf_DifficultyValueInt2(4, 4, 6, 8);
    lv_spawnAngleInterval = (lv_spawnArc / (lv_spawnCount - 1));
    auto5DC8EC39_ae = (lv_spawnCount - 1);
    auto5DC8EC39_var = 0;
    for ( ; auto5DC8EC39_var <= auto5DC8EC39_ae; auto5DC8EC39_var += 1 ) {
        lv_spawnAngle = (lv_spawnAngleMin + (lv_spawnAngleInterval * auto5DC8EC39_var));
        lv_spawnAngle = (lv_spawnAngle + RandomFixed(-7.5, 7.5));
        UnitCreate(1, "XelNagaChargedCrystalInert", 0, gv_pLAYER_02_DOMINION, PointWithOffsetPolar(UnitGetPosition(lv_caster), RandomFixed(2.0, 3.5), lv_spawnAngle), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_globalEnemyUnits, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("XelNagaChargedCrystalMorph", 0)), c_orderQueueReplace);
        gf_ActivateChargedCrystalAI(UnitLastCreated());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GroundSlamSpawnAdds_Init () {
    gt_GroundSlamSpawnAdds = TriggerCreate("gt_GroundSlamSpawnAdds_Func");
    TriggerAddEventPlayerEffectUsed(gt_GroundSlamSpawnAdds, gv_pLAYER_02_DOMINION, "XelNagaConstructSearch");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Entropic Blast - Spawn Adds
//--------------------------------------------------------------------------------------------------
bool gt_EntropicBlastSpawnAdds_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    point lv_target;
    int lv_spawnCount;

    // Automatic Variable Declarations
    int auto6AE51B1D_ae;
    int auto6AE51B1D_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_spawnCount = libLotv_gf_DifficultyValueInt2(4, 4, 6, 8);
    auto6AE51B1D_ae = lv_spawnCount;
    auto6AE51B1D_var = 1;
    for ( ; auto6AE51B1D_var <= auto6AE51B1D_ae; auto6AE51B1D_var += 1 ) {
        UnitCreate(1, "XelNagaChargedCrystalInert", 0, gv_pLAYER_02_DOMINION, RegionRandomPoint(RegionCircle(lv_target, libLotv_gf_DifficultyValueFixed2(1.5, 1.5, 3.0, 4.0))), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_globalEnemyUnits, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("XelNagaChargedCrystalMorph", 0)), c_orderQueueReplace);
        gf_ActivateChargedCrystalAI(UnitLastCreated());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EntropicBlastSpawnAdds_Init () {
    gt_EntropicBlastSpawnAdds = TriggerCreate("gt_EntropicBlastSpawnAdds_Func");
    TriggerAddEventPlayerEffectUsed(gt_EntropicBlastSpawnAdds, gv_pLAYER_02_DOMINION, "EntropicBlastSearch");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CampaignInitAI();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Taldarim Resources
//--------------------------------------------------------------------------------------------------
bool gt_TaldarimResources_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION2, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION2, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TaldarimResources_Init () {
    gt_TaldarimResources = TriggerCreate("gt_TaldarimResources_Func");
    TriggerAddEventTimePeriodic(gt_TaldarimResources, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stats - Medivac Unloads
//--------------------------------------------------------------------------------------------------
bool gt_StatsMedivacUnloads_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION7))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Medivac"))) {
            return false;
        }

        if (!((UnitGroupCount(UnitCargoGroup(EventUnit()), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetCustomValue(EventUnit(), 0, 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatsMedivacUnloads_Init () {
    gt_StatsMedivacUnloads = TriggerCreate("gt_StatsMedivacUnloads_Func");
    TriggerAddEventUnitCargo(gt_StatsMedivacUnloads, null, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stats - Unit Dies
//--------------------------------------------------------------------------------------------------
bool gt_StatsUnitDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION) || (UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION4) || (UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION2) || (UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetType(libNtve_gf_KillingUnit()) == "HotSHunter") || (UnitGetType(libNtve_gf_KillingUnit()) == "HotSHunterBurrowed"))) {
        gv_banelingKillCount += 1;
        if ((libLotv_gf_DifficultyValueInt2(0, 1, 1, 1) == 1) && (gv_banelingKillCount >= 20)) {
            TriggerExecute(gt_AchievementBanelingKills, true, false);
        }

    }

    if ((UnitGetType(EventUnit()) == "Medivac") && (UnitGetCustomValue(EventUnit(), 0) != 1)) {
        gv_loadedMedivacKillCount += 1;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatsUnitDies_Init () {
    gt_StatsUnitDies = TriggerCreate("gt_StatsUnitDies_Func");
    TriggerAddEventUnitDied(gt_StatsUnitDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stats - Lightning Dash Damage
//--------------------------------------------------------------------------------------------------
bool gt_StatsLightningDashDamage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_lightningDashDamage += FixedToInt(EventUnitDamageAmount());
    if ((gv_lightningDashDamage >= 7500)) {
        TriggerExecute(gt_AchievementLightningDashDamage, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatsLightningDashDamage_Init () {
    gt_StatsLightningDashDamage = TriggerCreate("gt_StatsLightningDashDamage_Func");
    TriggerAddEventUnitDamaged(gt_StatsLightningDashDamage, null, c_unitDamageTypeAny, c_unitDamageEither, "ArtanisLightningDashDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stats - Resurgence Activated
//--------------------------------------------------------------------------------------------------
bool gt_StatsResurgenceActivated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_resurgenceActivationCount += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatsResurgenceActivated_Init () {
    gt_StatsResurgenceActivated = TriggerCreate("gt_StatsResurgenceActivated_Func");
    TriggerAddEventPlayerEffectUsed(gt_StatsResurgenceActivated, gv_pLAYER_01_USER, "ArtanisResurgenceSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Baneling Kills
//--------------------------------------------------------------------------------------------------
bool gt_AchievementBanelingKills_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVoiC_gf_CampaignAwardAchievement("PUlnar02_3", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementBanelingKills_Init () {
    gt_AchievementBanelingKills = TriggerCreate("gt_AchievementBanelingKills_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Lightning Dash Damage
//--------------------------------------------------------------------------------------------------
bool gt_AchievementLightningDashDamage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVoiC_gf_CampaignAwardAchievement("PUlnar02_2", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementLightningDashDamage_Init () {
    gt_AchievementLightningDashDamage = TriggerCreate("gt_AchievementLightningDashDamage_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: The Bigger They Are
//--------------------------------------------------------------------------------------------------
bool gt_AchievementTheBiggerTheyAre_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((GameGetMissionTime() < 720.0))) {
            return false;
        }

        if (!((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVoiC_gf_CampaignAwardAchievement("Mastery_Ulnar02", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementTheBiggerTheyAre_Init () {
    gt_AchievementTheBiggerTheyAre = TriggerCreate("gt_AchievementTheBiggerTheyAre_Func");
    TriggerAddEventUnitDied(gt_AchievementTheBiggerTheyAre, UnitRefFromUnit(UnitFromId(1063)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: 10th Anniversary Achievement - Prevent enemy Warp Prism from warping in units
//--------------------------------------------------------------------------------------------------
bool gt__10thAnniversaryAchievementPreventenemyWarpPrismfromwarpinginunits_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_02_DOMINION2))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "SuperWarpGate"))) {
            return false;
        }

        if (!((gv_currentStage >= 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv__10thAnniversaryAchievementEnemyWarpPrismwarpedinunits = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__10thAnniversaryAchievementPreventenemyWarpPrismfromwarpinginunits_Init () {
    gt__10thAnniversaryAchievementPreventenemyWarpPrismfromwarpinginunits = TriggerCreate("gt__10thAnniversaryAchievementPreventenemyWarpPrismfromwarpinginunits_Func");
    TriggerAddEventUnitConstructProgress(gt__10thAnniversaryAchievementPreventenemyWarpPrismfromwarpinginunits, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Halls of Revelation - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveHallsofRevelationCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateObjectiveCampaign("PUlnar02Primary01");
    libVCMI_gf_SetMissionObjectiveProgress("PUlnar02Primary01", gv_hallsReached);
    gv_objectiveDestroyZergBase = ObjectiveLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveHallsofRevelationCreate_Init () {
    gt_ObjectiveHallsofRevelationCreate = TriggerCreate("gt_ObjectiveHallsofRevelationCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Halls of Revelation - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveHallsofRevelationComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveHallsofRevelationCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PUlnar02Primary01", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveHallsofRevelationComplete_Init () {
    gt_ObjectiveHallsofRevelationComplete = TriggerCreate("gt_ObjectiveHallsofRevelationComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Halls of Revelation - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveHallsofRevelationUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveHallsofRevelationCreate, true, false);
    libVCMI_gf_SetMissionObjectiveProgress("PUlnar02Primary01", gv_hallsReached);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveHallsofRevelationUpdate_Init () {
    gt_ObjectiveHallsofRevelationUpdate = TriggerCreate("gt_ObjectiveHallsofRevelationUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Halls of Revelation - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveHallsofRevelationFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveHallsofRevelationCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PUlnar02Primary01", libVoiC_ge_MissionObjectiveState_Failed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveHallsofRevelationFailed_Init () {
    gt_ObjectiveHallsofRevelationFailed = TriggerCreate("gt_ObjectiveHallsofRevelationFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Survive - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSurviveCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateObjectiveCampaign("PUlnar02Primary02");
    gv_objectiveDestroyZergBase2 = ObjectiveLastCreated();
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSurviveCreate_Init () {
    gt_ObjectiveSurviveCreate = TriggerCreate("gt_ObjectiveSurviveCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Survive - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSurviveComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveSurviveCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PUlnar02Primary02", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSurviveComplete_Init () {
    gt_ObjectiveSurviveComplete = TriggerCreate("gt_ObjectiveSurviveComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Survive - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSurviveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveSurviveCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PUlnar02Primary02", libVoiC_ge_MissionObjectiveState_Failed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSurviveFailed_Init () {
    gt_ObjectiveSurviveFailed = TriggerCreate("gt_ObjectiveSurviveFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Xel'Naga Devices - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveXelNagaDevicesCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    libVCMI_gf_CreateObjectiveCampaign("PUlnar02Bonus01");
    gv_objectiveRescueStalkers = ObjectiveLastCreated();
    libVCMI_gf_SetMissionObjectiveProgress("PUlnar02Bonus01", gv_devicesCollected);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveXelNagaDevicesCreate_Init () {
    gt_ObjectiveXelNagaDevicesCreate = TriggerCreate("gt_ObjectiveXelNagaDevicesCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Xel'Naga Devices - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveXelNagaDevicesComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveXelNagaDevicesCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PUlnar02Bonus01", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveXelNagaDevicesComplete_Init () {
    gt_ObjectiveXelNagaDevicesComplete = TriggerCreate("gt_ObjectiveXelNagaDevicesComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Xel'Naga Devices - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveXelNagaDevicesUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveXelNagaDevicesCreate, true, false);
    libVCMI_gf_SetMissionObjectiveProgress("PUlnar02Bonus01", gv_devicesCollected);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveXelNagaDevicesUpdate_Init () {
    gt_ObjectiveXelNagaDevicesUpdate = TriggerCreate("gt_ObjectiveXelNagaDevicesUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libNtve_gf_GlobalCinematicSetting(true);
    libVoiC_gf_PlayCinematic("KerriganIntro", false);
    libNtve_gf_GlobalCinematicSetting(false);
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto5F41B672_g;
    int auto5F41B672_u;
    unit auto5F41B672_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, c_transitionDurationImmediate, true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    UnitGroupAdd(gv_cinematicHiddenUnits, UnitFromId(662));
    auto5F41B672_g = gv_cinematicHiddenUnits;
    auto5F41B672_u = UnitGroupCount(auto5F41B672_g, c_unitCountAll);
    for (;; auto5F41B672_u -= 1) {
        auto5F41B672_var = UnitGroupUnitFromEnd(auto5F41B672_g, auto5F41B672_u);
        if (auto5F41B672_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto5F41B672_var, false);
    }
    UnitSetState(gv_kERRIGAN, c_unitStateFidget, false);
    UnitSetState(gv_aRTANIS, c_unitStateFidget, false);
    UnitBehaviorAdd(gv_kERRIGAN, "KerriganWalk", gv_kERRIGAN, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1670), 0.0, -1, 10, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PUlnar02_Music_Intro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    UnitSetPosition(gv_kERRIGAN, PointFromId(931), false);
    UnitIssueOrder(gv_kERRIGAN, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(463)), c_orderQueueReplace);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libVCMI_gf_SendTransmissionCampaign(gv_aRTANIS, "pMission_Ulnar02|Line00001", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1200), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1646), (SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Ulnar02|Line00002", true), c_soundIndexAny)) - 1), -1, 10, true);
    SoundPlayForPlayer(SoundLink("Event_Ulnar02_StartCine_CutToHybrid", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libVCMI_gf_SendTransmissionCampaign(gv_kERRIGAN, "pMission_Ulnar02|Line00002", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1671), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1672), 10.0, -1, 10, true);
    libVCMI_gf_SendTransmissionCampaign(gv_aRTANIS, "pMission_Ulnar02|Line00096", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(gv_aRTANIS, "pMission_Ulnar02|Line00005", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1670), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1201), (SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Ulnar02|Line00003", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Ulnar02|Line00004", true), c_soundIndexAny)) - 1), -1, 10, true);
    libVCMI_gf_SendTransmissionCampaign(gv_kERRIGAN, "pMission_Ulnar02|Line00003", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(gv_aRTANIS, "pMission_Ulnar02|Line00004", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup autoFE5B63D9_g;
    int autoFE5B63D9_u;
    unit autoFE5B63D9_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoFE5B63D9_g = gv_cinematicHiddenUnits;
    autoFE5B63D9_u = UnitGroupCount(autoFE5B63D9_g, c_unitCountAll);
    for (;; autoFE5B63D9_u -= 1) {
        autoFE5B63D9_var = UnitGroupUnitFromEnd(autoFE5B63D9_g, autoFE5B63D9_u);
        if (autoFE5B63D9_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoFE5B63D9_var, true);
    }
    if ((gv_cinematicCompleted == false)) {
        UnitIssueOrder(gv_kERRIGAN, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitSetPosition(gv_kERRIGAN, PointFromId(463), false);
        UnitSetFacing(gv_kERRIGAN, PointGetFacing(PointFromId(463)), 0.0);
    }

    UnitSetState(gv_kERRIGAN, c_unitStateFidget, true);
    UnitSetState(gv_aRTANIS, c_unitStateFidget, true);
    UnitSetPropertyFixed(gv_aRTANIS, c_unitPropEnergyPercent, 100.0);
    UnitBehaviorRemove(gv_kERRIGAN, "KerriganWalk", 1);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundStopAllTriggerSounds(true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PUlnar02_Music_Main", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    RegionPlayableMapSet(RegionFromId(53));
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    UnitSelect(gv_aRTANIS, gv_pLAYER_01_USER, true);
    UnitSelect(gv_kERRIGAN, gv_pLAYER_01_USER, true);
    UnitControlGroupAddUnit(gv_pLAYER_01_USER, 1, gv_aRTANIS);
    UnitControlGroupAddUnit(gv_pLAYER_01_USER, 2, gv_kERRIGAN);
    TriggerExecute(gt_StartAI, true, false);
    Wait(0.5, c_timeReal);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), lv_fadeDuration, -1, 10, false);
        CameraPan(gv_pLAYER_01_USER, PlayerStartLocation(gv_pLAYER_01_USER), lv_fadeDuration, -1, 10.0, false);
        libVCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, true);
    }
    else {
        lv_fadeDuration = 1.0;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
        libVCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, false);
        libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, 38.0, 30.0, PlayerStartLocation(gv_pLAYER_01_USER), lv_fadeDuration);
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Move Hybrids
//--------------------------------------------------------------------------------------------------
bool gt_IntroMoveHybrids_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroMoveHybrids_Init () {
    gt_IntroMoveHybrids = TriggerCreate("gt_IntroMoveHybrids_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Holdout Q
//--------------------------------------------------------------------------------------------------
bool gt_MidHoldoutQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_MidHoldoutSetup, true, true);
    TriggerExecute(gt_MidHoldoutCinematic, true, true);
    TriggerExecute(gt_MidHoldoutCinematicEnd, true, true);
    TriggerExecute(gt_MidHoldoutCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidHoldoutQ_Init () {
    gt_MidHoldoutQ = TriggerCreate("gt_MidHoldoutQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Holdout Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidHoldoutSetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    unitgroup autoEBCF7167_g;
    int autoEBCF7167_u;
    unit autoEBCF7167_var;
    unitgroup auto848ECB29_g;
    int auto848ECB29_u;
    unit auto848ECB29_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, 1.0, true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    RegionPlayableMapSet(RegionFromId(76));
    UnitClearSelection(gv_pLAYER_01_USER);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    autoEBCF7167_g = gv_globalEnemyUnits;
    autoEBCF7167_u = UnitGroupCount(autoEBCF7167_g, c_unitCountAll);
    for (;; autoEBCF7167_u -= 1) {
        autoEBCF7167_var = UnitGroupUnitFromEnd(autoEBCF7167_g, autoEBCF7167_u);
        if (autoEBCF7167_var == null) { break; }
        UnitRemove(autoEBCF7167_var);
    }
    auto848ECB29_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto848ECB29_u = UnitGroupCount(auto848ECB29_g, c_unitCountAll);
    for (;; auto848ECB29_u -= 1) {
        auto848ECB29_var = UnitGroupUnitFromEnd(auto848ECB29_g, auto848ECB29_u);
        if (auto848ECB29_var == null) { break; }
        if ((auto848ECB29_var != gv_aRTANIS) && (auto848ECB29_var != gv_kERRIGAN)) {
            UnitRemove(auto848ECB29_var);
        }

    }
    UnitBehaviorRemove(gv_aRTANIS, "ArtanisResurgenceDisable", 1);
    UnitBehaviorRemove(gv_aRTANIS, "ArtanisResurgenceInvulnerable", 1);
    UnitBehaviorRemove(gv_aRTANIS, "ArtanisResurgenceRegen", 1);
    UnitBehaviorRemove(gv_aRTANIS, "ArtanisResurgenceStun", 1);
    UnitSetPropertyFixed(gv_kERRIGAN, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_kERRIGAN, c_unitPropEnergyPercent, 100.0);
    UnitSetPropertyFixed(gv_aRTANIS, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_aRTANIS, c_unitPropShieldsPercent, 100.0);
    UnitSetState(gv_kERRIGAN, c_unitStateFidget, false);
    UnitSetState(gv_aRTANIS, c_unitStateFidget, false);
    PingDestroy(gv_mainObjectivePing);
    PingDestroy(gv_bonusObjectivePing1);
    UnitRemove(UnitFromId(239));
    UnitIssueOrder(gv_aRTANIS, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitSetPosition(gv_aRTANIS, PointFromId(914), false);
    UnitSetFacing(gv_aRTANIS, 45.0, 0.0);
    UnitIssueOrder(gv_kERRIGAN, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitSetPosition(gv_kERRIGAN, PointFromId(673), false);
    UnitSetFacing(gv_kERRIGAN, PointGetFacing(PointFromId(670)), 0.0);
    UnitBehaviorAdd(gv_kERRIGAN, "KerriganWalk", gv_kERRIGAN, 1);
    UnitIssueOrder(gv_kERRIGAN, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(670)), c_orderQueueReplace);
    UnitRemove(UnitFromId(1159));
    UnitIssueOrder(UnitFromId(522), Order(AbilityCommand("XelNagaTempleDoorLargeNELowered", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidHoldoutSetup_Init () {
    gt_MidHoldoutSetup = TriggerCreate("gt_MidHoldoutSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Holdout Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidHoldoutCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(674), 0.0, -1, 10, true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PUlnar02_Music_ShrineActivation", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(675), 5.0, -1, 10, true);
    TriggerExecute(gt_MidHoldoutArtanisBeginsChanneling, true, false);
    Wait(8.333, c_timeGame);
    libVCMI_gf_SendTransmissionCampaign(gv_aRTANIS, "pMission_Ulnar02|Line00200", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(680), 5.0, -1, 10, true);
    Wait(1.0, c_timeGame);
    TriggerExecute(gt_MidHoldoutSpawnEnemies, true, false);
    Wait(1.5, c_timeGame);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PUlnar02_Music_ShrineUnderAttack", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    UnitIssueOrder(gv_kERRIGAN, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(671)), c_orderQueueReplace);
    Wait(1.5, c_timeGame);
    UnitIssueOrder(gv_kERRIGAN, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(671)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    libVCMI_gf_SendTransmissionCampaign(gv_kERRIGAN, "pMission_Ulnar02|Line00158", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(0.5, c_timeGame);
    UnitIssueOrder(gv_aRTANIS, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(1172)), c_orderQueueReplace);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(gv_aRTANIS, "pMission_Ulnar02|Line00022", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    UnitIssueOrder(gv_kERRIGAN, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(672)), c_orderQueueReplace);
    UnitIssueOrder(gv_aRTANIS, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1195)), c_orderQueueReplace);
    UnitIssueOrder(gv_aRTANIS, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(1172)), c_orderQueueAddToEnd);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1645), 3.0, -1, 10, true);
    libVCMI_gf_SendTransmissionCampaign(gv_kERRIGAN, "pMission_Ulnar02|Line00023", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(1.0, c_timeGame);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidHoldoutCinematic_Init () {
    gt_MidHoldoutCinematic = TriggerCreate("gt_MidHoldoutCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Holdout Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MidHoldoutCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidHoldoutCinematicEnd_Init () {
    gt_MidHoldoutCinematicEnd = TriggerCreate("gt_MidHoldoutCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Holdout Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidHoldoutCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup autoB68D637B_g;
    int autoB68D637B_u;
    unit autoB68D637B_var;
    unitgroup autoC70D120B_g;
    int autoC70D120B_u;
    unit autoC70D120B_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_MidHoldoutArtanisBeginsChanneling);
    autoB68D637B_g = gv_cinematicTempUnits;
    autoB68D637B_u = UnitGroupCount(autoB68D637B_g, c_unitCountAll);
    for (;; autoB68D637B_u -= 1) {
        autoB68D637B_var = UnitGroupUnitFromEnd(autoB68D637B_g, autoB68D637B_u);
        if (autoB68D637B_var == null) { break; }
        UnitRemove(autoB68D637B_var);
    }
    if ((gv_midHoldoutUnitsSpawned == false)) {
        gv_midHoldoutUnitsSpawned = true;
        libNtve_gf_CreateUnitsAtPoint2(1, "Reaper", 0, gv_pLAYER_02_DOMINION7, PointFromId(402));
        UnitGroupAdd(gv_s1HoldOutUnitGroup, UnitLastCreated());
        libNtve_gf_CreateUnitsAtPoint2(1, "Reaper", 0, gv_pLAYER_02_DOMINION7, PointFromId(1171));
        UnitGroupAdd(gv_s1HoldOutUnitGroup, UnitLastCreated());
        libNtve_gf_CreateUnitsAtPoint2(1, "Reaper", 0, gv_pLAYER_02_DOMINION7, PointFromId(1172));
        UnitGroupAdd(gv_s1HoldOutUnitGroup, UnitLastCreated());
        libNtve_gf_CreateUnitsAtPoint2(1, "Reaper", 0, gv_pLAYER_02_DOMINION7, PointFromId(1173));
        UnitGroupAdd(gv_s1HoldOutUnitGroup, UnitLastCreated());
        libNtve_gf_CreateUnitsAtPoint2(1, "Zealot", 0, gv_pLAYER_02_DOMINION2, PointFromId(403));
        UnitGroupAdd(gv_s1HoldOutUnitGroup, UnitLastCreated());
        libNtve_gf_CreateUnitsAtPoint2(1, "Zealot", 0, gv_pLAYER_02_DOMINION2, PointFromId(1177));
        UnitGroupAdd(gv_s1HoldOutUnitGroup, UnitLastCreated());
        libNtve_gf_CreateUnitsAtPoint2(1, "Zealot", 0, gv_pLAYER_02_DOMINION2, PointFromId(1178));
        UnitGroupAdd(gv_s1HoldOutUnitGroup, UnitLastCreated());
        libNtve_gf_CreateUnitsAtPoint2(1, "Zealot", 0, gv_pLAYER_02_DOMINION2, PointFromId(1179));
        UnitGroupAdd(gv_s1HoldOutUnitGroup, UnitLastCreated());
        autoC70D120B_g = gv_s1HoldOutUnitGroup;
        autoC70D120B_u = UnitGroupCount(autoC70D120B_g, c_unitCountAll);
        for (;; autoC70D120B_u -= 1) {
            autoC70D120B_var = UnitGroupUnitFromEnd(autoC70D120B_g, autoC70D120B_u);
            if (autoC70D120B_var == null) { break; }
            UnitSetOwner(UnitLastCreated(), 0, false);
        }
    }

    if ((gv_cinematicCompleted == false)) {
        UnitIssueOrder(gv_aRTANIS, Order(AbilityCommand("ArtanisChannel", 1)), c_orderQueueReplace);
        UnitSetPosition(gv_aRTANIS, PointFromId(1195), false);
        UnitSetFacing(gv_aRTANIS, PointGetFacing(PointFromId(1195)), 0.0);
        UnitIssueOrder(gv_kERRIGAN, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitSetPosition(gv_kERRIGAN, PointFromId(672), false);
        UnitSetFacing(gv_kERRIGAN, PointGetFacing(PointFromId(672)), 0.0);
    }

    UnitBehaviorRemove(gv_kERRIGAN, "KerriganWalk", 1);
    UnitSetState(gv_kERRIGAN, c_unitStateFidget, true);
    UnitSetState(gv_aRTANIS, c_unitStateFidget, true);
    UnitClearCooldowns(gv_aRTANIS, true);
    UnitClearCooldowns(gv_kERRIGAN, true);
    SoundStop(gv_midSound, true);
    SoundStopAllTriggerSounds(true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PUlnar02_Music_Holdout", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    UnitSelect(gv_aRTANIS, gv_pLAYER_01_USER, true);
    UnitSelect(gv_kERRIGAN, gv_pLAYER_01_USER, true);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(377)), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(676), lv_fadeDuration, -1, 10.0, true);
        libVCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, true);
    }
    else {
        lv_fadeDuration = 1.0;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
        libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, 38.0, 30.0, CameraInfoGetTarget(CameraInfoFromId(676)), lv_fadeDuration);
        libVCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, false);
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidHoldoutCleanup_Init () {
    gt_MidHoldoutCleanup = TriggerCreate("gt_MidHoldoutCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Holdout Artanis Begins Channeling
//--------------------------------------------------------------------------------------------------
bool gt_MidHoldoutArtanisBeginsChanneling_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(gv_aRTANIS, Order(AbilityCommand("ArtanisChannel", 0)), c_orderQueueReplace);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(377)), c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.75, c_timeGame);
    SoundPlayForPlayer(SoundLink("PUlnar02_ShrineRises", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gv_midSound = SoundLastPlayed();
    Wait(1.25, c_timeGame);
    SoundPlayForPlayer(SoundLink("PUlnar02_ShrineLights", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeGame);
    SoundPlayForPlayer(SoundLink("PUlnar02_ShrineExpands", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gv_midSound = SoundLastPlayed();
    Wait(3.0, c_timeGame);
    UnitIssueOrder(gv_aRTANIS, Order(AbilityCommand("ArtanisChannel", 1)), c_orderQueueReplace);
    Wait(1.333, c_timeGame);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(377)), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidHoldoutArtanisBeginsChanneling_Init () {
    gt_MidHoldoutArtanisBeginsChanneling = TriggerCreate("gt_MidHoldoutArtanisBeginsChanneling_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Holdout Spawn Enemies
//--------------------------------------------------------------------------------------------------
bool gt_MidHoldoutSpawnEnemies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_midHoldoutUnitsSpawned = true;
    libNtve_gf_CreateUnitsAtPoint2(1, "Reaper", 0, gv_pLAYER_02_DOMINION7, PointFromId(413));
    UnitGroupAdd(gv_s1HoldOutUnitGroup, UnitLastCreated());
    UnitSetOwner(UnitLastCreated(), 0, false);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(402)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Reaper", 0, gv_pLAYER_02_DOMINION7, PointFromId(1168));
    UnitGroupAdd(gv_s1HoldOutUnitGroup, UnitLastCreated());
    UnitSetOwner(UnitLastCreated(), 0, false);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1171)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Reaper", 0, gv_pLAYER_02_DOMINION7, PointFromId(1169));
    UnitGroupAdd(gv_s1HoldOutUnitGroup, UnitLastCreated());
    UnitSetOwner(UnitLastCreated(), 0, false);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1172)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Reaper", 0, gv_pLAYER_02_DOMINION7, PointFromId(1170));
    UnitGroupAdd(gv_s1HoldOutUnitGroup, UnitLastCreated());
    UnitSetOwner(UnitLastCreated(), 0, false);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1173)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Zealot", 0, gv_pLAYER_02_DOMINION2, PointFromId(414));
    UnitGroupAdd(gv_s1HoldOutUnitGroup, UnitLastCreated());
    UnitSetOwner(UnitLastCreated(), 0, false);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(403)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Zealot", 0, gv_pLAYER_02_DOMINION2, PointFromId(1174));
    UnitGroupAdd(gv_s1HoldOutUnitGroup, UnitLastCreated());
    UnitSetOwner(UnitLastCreated(), 0, false);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1177)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Zealot", 0, gv_pLAYER_02_DOMINION2, PointFromId(1175));
    UnitGroupAdd(gv_s1HoldOutUnitGroup, UnitLastCreated());
    UnitSetOwner(UnitLastCreated(), 0, false);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1178)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Zealot", 0, gv_pLAYER_02_DOMINION2, PointFromId(1176));
    UnitGroupAdd(gv_s1HoldOutUnitGroup, UnitLastCreated());
    UnitSetOwner(UnitLastCreated(), 0, false);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1179)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidHoldoutSpawnEnemies_Init () {
    gt_MidHoldoutSpawnEnemies = TriggerCreate("gt_MidHoldoutSpawnEnemies_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Shrine 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_MidShrine1Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_MidShrine1Setup, true, true);
    TriggerExecute(gt_MidShrine1Cinematic, true, true);
    TriggerExecute(gt_MidShrine1CinematicEnd, true, true);
    TriggerExecute(gt_MidShrine1Cleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidShrine1Q_Init () {
    gt_MidShrine1Q = TriggerCreate("gt_MidShrine1Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Shrine 1 Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidShrine1Setup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    unitgroup auto98726CC1_g;
    int auto98726CC1_u;
    unit auto98726CC1_var;
    unitgroup autoA2BDD77F_g;
    int autoA2BDD77F_u;
    unit autoA2BDD77F_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_midSeamlessIntro == true)) {
        UnitClearSelection(gv_pLAYER_01_USER);
        UnitSetState(gv_aRTANIS, c_unitStateSelectable, false);
        UnitSetState(gv_kERRIGAN, c_unitStateSelectable, false);
        UnitBehaviorRemove(gv_aRTANIS, "ArtanisResurgenceDisable", 1);
        UnitBehaviorRemove(gv_aRTANIS, "ArtanisResurgenceInvulnerable", 1);
        UnitBehaviorRemove(gv_aRTANIS, "ArtanisResurgenceRegen", 1);
        UnitBehaviorRemove(gv_aRTANIS, "ArtanisResurgenceStun", 1);
        if ((libNtve_gf_UnitInRegion(gv_aRTANIS, RegionFromId(62)) == true)) {
            UnitSetPosition(gv_aRTANIS, PointFromId(679), false);
        }

        UnitIssueOrder(gv_aRTANIS, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(697)), c_orderQueueReplace);
        UnitIssueOrder(gv_aRTANIS, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(669)), c_orderQueueAddToEnd);
        UnitIssueOrder(gv_kERRIGAN, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(698)), c_orderQueueReplace);
        UnitIssueOrder(gv_kERRIGAN, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(669)), c_orderQueueAddToEnd);
        TriggerExecute(gt_MidShrine1Transition, true, false);
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(677), 3.0, -1, 10, true);
        libVCMI_gf_CinematicModeCampaign(true, 1.0, true);
    }
    else {
        CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
        libVCMI_gf_CinematicModeCampaign(true, 1.0, true);
    }
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    RegionPlayableMapSet(RegionFromId(53));
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    auto98726CC1_g = gv_globalEnemyUnits;
    auto98726CC1_u = UnitGroupCount(auto98726CC1_g, c_unitCountAll);
    for (;; auto98726CC1_u -= 1) {
        auto98726CC1_var = UnitGroupUnitFromEnd(auto98726CC1_g, auto98726CC1_u);
        if (auto98726CC1_var == null) { break; }
        UnitRemove(auto98726CC1_var);
    }
    autoA2BDD77F_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA2BDD77F_u = UnitGroupCount(autoA2BDD77F_g, c_unitCountAll);
    for (;; autoA2BDD77F_u -= 1) {
        autoA2BDD77F_var = UnitGroupUnitFromEnd(autoA2BDD77F_g, autoA2BDD77F_u);
        if (autoA2BDD77F_var == null) { break; }
        if ((autoA2BDD77F_var != gv_aRTANIS) && (autoA2BDD77F_var != gv_kERRIGAN)) {
            UnitRemove(autoA2BDD77F_var);
        }

    }
    UnitSetPropertyFixed(gv_kERRIGAN, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_kERRIGAN, c_unitPropEnergyPercent, 100.0);
    UnitSetPropertyFixed(gv_aRTANIS, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_aRTANIS, c_unitPropShieldsPercent, 100.0);
    UnitSetState(gv_kERRIGAN, c_unitStateFidget, false);
    UnitSetState(gv_aRTANIS, c_unitStateFidget, false);
    if ((gv_midSeamlessIntro == false)) {
        UnitClearSelection(gv_pLAYER_01_USER);
        UnitBehaviorRemove(gv_aRTANIS, "ArtanisResurgenceDisable", 1);
        UnitBehaviorRemove(gv_aRTANIS, "ArtanisResurgenceInvulnerable", 1);
        UnitBehaviorRemove(gv_aRTANIS, "ArtanisResurgenceRegen", 1);
        UnitBehaviorRemove(gv_aRTANIS, "ArtanisResurgenceStun", 1);
        UnitIssueOrder(gv_aRTANIS, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitSetPosition(gv_aRTANIS, PointFromId(697), false);
        UnitIssueOrder(gv_aRTANIS, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(669)), c_orderQueueReplace);
        UnitIssueOrder(gv_kERRIGAN, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitSetPosition(gv_kERRIGAN, PointFromId(698), false);
        UnitIssueOrder(gv_kERRIGAN, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(669)), c_orderQueueReplace);
        libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(377)), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    }

    UnitRemove(UnitFromId(662));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidShrine1Setup_Init () {
    gt_MidShrine1Setup = TriggerCreate("gt_MidShrine1Setup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Shrine 1 Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidShrine1Cinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_midSeamlessIntro == false)) {
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(674), 0.0, -1, 10, true);
    }

    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    if ((gv_midSeamlessIntro == false)) {
        CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
        TriggerExecute(gt_MidShrine1Transition, true, false);
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(677), 3.0, -1, 10, true);
        Wait(3.0, c_timeGame);
    }
    else {
        Wait(2.0, c_timeGame);
    }
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDoodad, true);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 0.0, 2.5);
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(100.00, 100.00, 100.00), 0.0, true);
    libVoiC_gf_CampaignPlayCutscene2("Cutscenes\\Mission_Ulnar_Vision_01.SC2Cutscene", true, true);
    SoundPlayForPlayer(SoundLink("Event_Ulnar02_MidCine_B_TransOut", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 2.5);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDoodad, false);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
    GameSetLighting("UlnarInner", 0.0);
    ActorSend(ActorFromDoodad(DoodadFromId(1647)), "SetOpacity");
    ActorSend(ActorFromDoodad(DoodadFromId(434)), "SetOpacity");
    UnitSetPosition(gv_kERRIGAN, PointFromId(1649), false);
    UnitSetFacing(gv_kERRIGAN, PointGetFacing(PointFromId(1649)), 0.0);
    UnitSetPosition(gv_aRTANIS, PointFromId(1648), false);
    UnitSetFacing(gv_aRTANIS, PointGetFacing(PointFromId(1648)), 0.0);
    TriggerExecute(gt_MidShrine1BridgeRise, true, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(692), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(690), (SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Ulnar02|Line00025", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Ulnar02|Line00102", true), c_soundIndexAny)) + 2), -1, 10, true);
    CinematicFade(true, 2.0, c_fadeStyleNormal, Color(100.00, 100.00, 100.00), 0.0, true);
    libVCMI_gf_SendTransmissionCampaign(gv_aRTANIS, "pMission_Ulnar02|Line00025", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    UnitIssueOrder(gv_aRTANIS, OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_kERRIGAN)), c_orderQueueReplace);
    libVCMI_gf_SendTransmissionCampaign(gv_aRTANIS, "pMission_Ulnar02|Line00102", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(gv_kERRIGAN, "pMission_Ulnar02|Line00103", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    UnitIssueOrder(gv_aRTANIS, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(UnitGetPosition(gv_aRTANIS), 1.0, 135.0)), c_orderQueueReplace);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidShrine1Cinematic_Init () {
    gt_MidShrine1Cinematic = TriggerCreate("gt_MidShrine1Cinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Shrine 1 Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MidShrine1CinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidShrine1CinematicEnd_Init () {
    gt_MidShrine1CinematicEnd = TriggerCreate("gt_MidShrine1CinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Shrine 1 Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidShrine1Cleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup autoAAAE8A9B_g;
    int autoAAAE8A9B_u;
    unit autoAAAE8A9B_var;
    unitgroup auto2F0923C8_g;
    int auto2F0923C8_u;
    unit auto2F0923C8_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoAAAE8A9B_g = gv_cinematicTempUnits;
    autoAAAE8A9B_u = UnitGroupCount(autoAAAE8A9B_g, c_unitCountAll);
    for (;; autoAAAE8A9B_u -= 1) {
        autoAAAE8A9B_var = UnitGroupUnitFromEnd(autoAAAE8A9B_g, autoAAAE8A9B_u);
        if (autoAAAE8A9B_var == null) { break; }
        UnitRemove(autoAAAE8A9B_var);
    }
    auto2F0923C8_g = gv_cinematicHiddenUnits;
    auto2F0923C8_u = UnitGroupCount(auto2F0923C8_g, c_unitCountAll);
    for (;; auto2F0923C8_u -= 1) {
        auto2F0923C8_var = UnitGroupUnitFromEnd(auto2F0923C8_g, auto2F0923C8_u);
        if (auto2F0923C8_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto2F0923C8_var, true);
    }
    UnitIssueOrder(gv_kERRIGAN, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitSetPosition(gv_kERRIGAN, PointFromId(789), false);
    UnitSetFacing(gv_kERRIGAN, PointGetFacing(PointFromId(789)), 0.0);
    UnitIssueOrder(gv_aRTANIS, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitSetPosition(gv_aRTANIS, PointFromId(788), false);
    UnitSetFacing(gv_aRTANIS, PointGetFacing(PointFromId(788)), 0.0);
    UnitSetState(gv_kERRIGAN, c_unitStateFidget, true);
    UnitSetState(gv_aRTANIS, c_unitStateFidget, true);
    UnitSetState(gv_aRTANIS, c_unitStateSelectable, true);
    UnitSetState(gv_kERRIGAN, c_unitStateSelectable, true);
    UnitClearCooldowns(gv_aRTANIS, true);
    UnitClearCooldowns(gv_kERRIGAN, true);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 1.0);
    SoundStop(gv_midSound, true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
    SoundStopAllTriggerSounds(true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PUlnar02_Music_Main", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    TriggerStop(gt_MidShrine1Transition);
    TriggerStop(gt_MidShrine1BridgeRise);
    RegionPlayableMapSet(RegionFromId(58));
    CameraShakeStop(gv_pLAYER_01_USER);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    GameSetLighting("UlnarInner", 0.0);
    UnitSelect(gv_aRTANIS, gv_pLAYER_01_USER, true);
    UnitSelect(gv_kERRIGAN, gv_pLAYER_01_USER, true);
    ActorSend(ActorFromDoodad(DoodadFromId(1647)), "SetOpacity");
    ActorSend(ActorFromDoodad(DoodadFromId(434)), "SetOpacity");
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(567)), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    libVCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, false);
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, 38.0, 30.0, CameraInfoGetTarget(CameraInfoFromId(787)), lv_fadeDuration);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidShrine1Cleanup_Init () {
    gt_MidShrine1Cleanup = TriggerCreate("gt_MidShrine1Cleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Shrine 1 Transition
//--------------------------------------------------------------------------------------------------
bool gt_MidShrine1Transition_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    GameSetLighting("THorner05SSecurityCam", 3.0);
    CameraShake(gv_pLAYER_01_USER, "Massive", "Earthquake", 0.0, 2.0, 3.0);
    SoundPlayForPlayer(SoundLink("PUlnar02_ShrineTransitionHit", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("Event_Ulnar02_MidCine_A_TransIn", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("PUlnar02_ShrineTransitionWhoosh", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gv_midSound = SoundLastPlayed();
    ActorSend(ActorFromDoodad(DoodadFromId(1647)), "SetOpacity 1.000000 3.000000");
    ActorSend(ActorFromDoodad(DoodadFromId(434)), "SetOpacity 1.000000 3.000000");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidShrine1Transition_Init () {
    gt_MidShrine1Transition = TriggerCreate("gt_MidShrine1Transition_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Shrine 1 Bridge Rise
//--------------------------------------------------------------------------------------------------
bool gt_MidShrine1BridgeRise_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(567)), c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    SoundPlayForPlayer(SoundLink("PUlnar02_XelNagaBridgeAmbientMovement", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gv_midSound = SoundLastPlayed();
    Wait(0.686, c_timeGame);
    SoundPlayForPlayer(SoundLink("Event_Ulnar02_MidCine_FloatingBridge_A", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(2.783, c_timeGame);
    SoundPlayForPlayer(SoundLink("Event_Ulnar02_MidCine_FloatingBridge_B", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(2.191, c_timeGame);
    SoundPlayForPlayer(SoundLink("Event_Ulnar02_MidCine_FloatingBridge_C", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(1.777, c_timeGame);
    SoundPlayForPlayer(SoundLink("Event_Ulnar02_MidCine_FloatingBridge_D", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(1.664, c_timeGame);
    SoundPlayForPlayer(SoundLink("Event_Ulnar02_MidCine_FloatingBridge_E", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(1.289, c_timeGame);
    SoundPlayForPlayer(SoundLink("Event_Ulnar02_MidCine_FloatingBridge_F", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(1.5, c_timeGame);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(567)), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    SoundStop(gv_midSound, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidShrine1BridgeRise_Init () {
    gt_MidShrine1BridgeRise = TriggerCreate("gt_MidShrine1BridgeRise_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Shrine 2 Q
//--------------------------------------------------------------------------------------------------
bool gt_MidShrine2Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_MidShrine2Setup, true, true);
    TriggerExecute(gt_MidShrine2Cinematic, true, true);
    TriggerExecute(gt_MidShrine2CinematicEnd, true, true);
    TriggerExecute(gt_MidShrine2Cleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidShrine2Q_Init () {
    gt_MidShrine2Q = TriggerCreate("gt_MidShrine2Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Shrine 2 Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidShrine2Setup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    unitgroup autoF3A5D9DB_g;
    int autoF3A5D9DB_u;
    unit autoF3A5D9DB_var;
    unitgroup auto67A56FC3_g;
    int auto67A56FC3_u;
    unit auto67A56FC3_var;
    unitgroup autoC990F077_g;
    int autoC990F077_u;
    unit autoC990F077_var;
    unitgroup autoE542B6E1_g;
    int autoE542B6E1_u;
    unit autoE542B6E1_var;
    unitgroup auto4CB92903_g;
    int auto4CB92903_u;
    unit auto4CB92903_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, 1.0, true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    RegionPlayableMapSet(RegionFromId(58));
    UnitClearSelection(gv_pLAYER_01_USER);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    autoF3A5D9DB_g = gv_globalEnemyUnits;
    autoF3A5D9DB_u = UnitGroupCount(autoF3A5D9DB_g, c_unitCountAll);
    for (;; autoF3A5D9DB_u -= 1) {
        autoF3A5D9DB_var = UnitGroupUnitFromEnd(autoF3A5D9DB_g, autoF3A5D9DB_u);
        if (autoF3A5D9DB_var == null) { break; }
        UnitRemove(autoF3A5D9DB_var);
    }
    auto67A56FC3_g = UnitGroup("WarpPrismPhasing", c_playerAny, RegionFromId(97), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto67A56FC3_u = UnitGroupCount(auto67A56FC3_g, c_unitCountAll);
    for (;; auto67A56FC3_u -= 1) {
        auto67A56FC3_var = UnitGroupUnitFromEnd(auto67A56FC3_g, auto67A56FC3_u);
        if (auto67A56FC3_var == null) { break; }
        UnitRemove(auto67A56FC3_var);
    }
    autoC990F077_g = UnitGroup("WarpPrism", c_playerAny, RegionFromId(97), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC990F077_u = UnitGroupCount(autoC990F077_g, c_unitCountAll);
    for (;; autoC990F077_u -= 1) {
        autoC990F077_var = UnitGroupUnitFromEnd(autoC990F077_g, autoC990F077_u);
        if (autoC990F077_var == null) { break; }
        UnitRemove(autoC990F077_var);
    }
    autoE542B6E1_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE542B6E1_u = UnitGroupCount(autoE542B6E1_g, c_unitCountAll);
    for (;; autoE542B6E1_u -= 1) {
        autoE542B6E1_var = UnitGroupUnitFromEnd(autoE542B6E1_g, autoE542B6E1_u);
        if (autoE542B6E1_var == null) { break; }
        if ((autoE542B6E1_var != gv_aRTANIS) && (autoE542B6E1_var != gv_kERRIGAN)) {
            UnitRemove(autoE542B6E1_var);
        }

    }
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionFromId(40), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    auto4CB92903_g = gv_cinematicHiddenUnits;
    auto4CB92903_u = UnitGroupCount(auto4CB92903_g, c_unitCountAll);
    for (;; auto4CB92903_u -= 1) {
        auto4CB92903_var = UnitGroupUnitFromEnd(auto4CB92903_g, auto4CB92903_u);
        if (auto4CB92903_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto4CB92903_var, false);
    }
    UnitBehaviorRemove(gv_aRTANIS, "ArtanisResurgenceDisable", 1);
    UnitBehaviorRemove(gv_aRTANIS, "ArtanisResurgenceInvulnerable", 1);
    UnitBehaviorRemove(gv_aRTANIS, "ArtanisResurgenceRegen", 1);
    UnitBehaviorRemove(gv_aRTANIS, "ArtanisResurgenceStun", 1);
    UnitSetPropertyFixed(gv_kERRIGAN, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_kERRIGAN, c_unitPropEnergyPercent, 100.0);
    UnitSetPropertyFixed(gv_aRTANIS, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_aRTANIS, c_unitPropShieldsPercent, 100.0);
    UnitSetState(gv_kERRIGAN, c_unitStateFidget, false);
    UnitSetState(gv_aRTANIS, c_unitStateFidget, false);
    UnitIssueOrder(gv_aRTANIS, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitSetPosition(gv_aRTANIS, PointFromId(1650), false);
    UnitIssueOrder(gv_aRTANIS, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(1619)), c_orderQueueReplace);
    UnitIssueOrder(gv_kERRIGAN, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitSetPosition(gv_kERRIGAN, PointFromId(1083), false);
    UnitSetFacing(gv_kERRIGAN, 135.0, 0.0);
    UnitBehaviorAdd(gv_kERRIGAN, "KerriganWalk", gv_kERRIGAN, 1);
    UnitIssueOrder(gv_kERRIGAN, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1651)), c_orderQueueReplace);
    UnitIssueOrder(gv_kERRIGAN, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(1619)), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidShrine2Setup_Init () {
    gt_MidShrine2Setup = TriggerCreate("gt_MidShrine2Setup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Shrine 2 Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidShrine2Cinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1665), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1085), 8.0, -1, 10, true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PUlnar02_Music_ShrineActivation", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libVCMI_gf_SendTransmissionCampaign(gv_kERRIGAN, "pMission_Ulnar02|Line00204", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    UnitIssueOrder(gv_aRTANIS, OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_kERRIGAN)), c_orderQueueReplace);
    libVCMI_gf_SendTransmissionCampaign(gv_aRTANIS, "pMission_Ulnar02|Line00176", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(((SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Ulnar02|Line00176", true), c_soundIndexAny))/2) - 1), c_timeGame);
    UnitIssueOrder(gv_aRTANIS, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(1619)), c_orderQueueReplace);
    TransmissionWait(TransmissionLastSent(), 0.0);
    TriggerExecute(gt_MidShrine2ArtanisBeginsChanneling, true, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1227), 5.0, -1, 10, true);
    Wait(8.333, c_timeGame);
    TriggerExecute(gt_MidShrine2Transition, true, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1666), 3.0, -1, 10, true);
    Wait(3.0, c_timeGame);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDoodad, true);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 0.0, 2.5);
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(100.00, 100.00, 100.00), 0.0, true);
    libVoiC_gf_CampaignPlayCutscene2("Cutscenes\\Mission_Ulnar_Vision_02.SC2Cutscene", true, true);
    SoundPlayForPlayer(SoundLink("Event_Ulnar02_MidCine_B_TransOut", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 2.5);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDoodad, false);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
    GameSetLighting("UlnarInner", 0.0);
    ActorSend(ActorFromDoodad(DoodadFromId(1606)), "SetOpacity");
    ActorSend(ActorFromDoodad(DoodadFromId(1363)), "SetOpacity");
    UnitSetPosition(gv_kERRIGAN, PointFromId(1608), false);
    UnitSetFacing(gv_kERRIGAN, PointGetFacing(PointFromId(1608)), 0.0);
    UnitSetPosition(gv_aRTANIS, PointFromId(1607), false);
    UnitSetFacing(gv_aRTANIS, PointGetFacing(PointFromId(1607)), 0.0);
    TriggerExecute(gt_MidShrine2BridgeRise, true, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1669), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1668), (SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Ulnar02|Line00062", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Ulnar02|Line00107", true), c_soundIndexAny)) + 2), -1, 10, true);
    CinematicFade(true, 2.0, c_fadeStyleNormal, Color(100.00, 100.00, 100.00), 0.0, true);
    libVCMI_gf_SendTransmissionCampaign(gv_aRTANIS, "pMission_Ulnar02|Line00062", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    UnitIssueOrder(gv_aRTANIS, OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_kERRIGAN)), c_orderQueueReplace);
    libVCMI_gf_SendTransmissionCampaign(gv_aRTANIS, "pMission_Ulnar02|Line00107", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(gv_kERRIGAN, "pMission_Ulnar02|Line00108", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    UnitIssueOrder(gv_aRTANIS, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(UnitGetPosition(gv_aRTANIS), 1.0, 45.0)), c_orderQueueReplace);
    CinematicFade(false, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    RegionPlayableMapSet(RegionFromId(26));
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(701), 0.0, -1, 10, true);
    UnitSetPosition(gv_kERRIGAN, PointFromId(1609), false);
    UnitIssueOrder(gv_kERRIGAN, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(244)), c_orderQueueReplace);
    UnitSetPosition(gv_aRTANIS, PointFromId(1610), false);
    UnitIssueOrder(gv_aRTANIS, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(12)), c_orderQueueReplace);
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libVCMI_gf_SendTransmissionCampaign(gv_aRTANIS, "pMission_Ulnar02|Line00163", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(gv_kERRIGAN, "pMission_Ulnar02|Line00160", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(1.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1193), 0.0, -1, 10, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PUlnar02_Music_ShrineUnderAttack", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1192), 2.0, -1, 10, true);
    UnitIssueOrder(UnitFromId(1063), OrderTargetingUnit(AbilityCommand("attack", 0), gv_s3FinalRoomMeleeTarget01), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1162), OrderTargetingUnit(AbilityCommand("attack", 0), gv_s3FinalRoomMeleeTarget03), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1161), OrderTargetingUnit(AbilityCommand("attack", 0), gv_s3FinalRoomRangedTarget), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1062), OrderTargetingUnit(AbilityCommand("attack", 0), gv_s3FinalRoomRangedTarget), c_orderQueueReplace);
    libVCMI_gf_SendTransmissionCampaign(gv_aRTANIS, "pMission_Ulnar02|Line00173", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(gv_kERRIGAN, "pMission_Ulnar02|Line00161", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(79), (SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Ulnar02|Line00162", true), c_soundIndexAny))), -1, 10, true);
    libVCMI_gf_SendTransmissionCampaign(gv_aRTANIS, "pMission_Ulnar02|Line00162", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidShrine2Cinematic_Init () {
    gt_MidShrine2Cinematic = TriggerCreate("gt_MidShrine2Cinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Shrine 2 Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MidShrine2CinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidShrine2CinematicEnd_Init () {
    gt_MidShrine2CinematicEnd = TriggerCreate("gt_MidShrine2CinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Shrine 2 Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidShrine2Cleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto604C1177_g;
    int auto604C1177_u;
    unit auto604C1177_var;
    unitgroup auto6793DE30_g;
    int auto6793DE30_u;
    unit auto6793DE30_var;
    unitgroup auto71D2BE67_g;
    int auto71D2BE67_u;
    unit auto71D2BE67_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_MidShrine2ArtanisBeginsChanneling);
    TriggerStop(gt_MidShrine2Transition);
    TriggerStop(gt_MidShrine2BridgeRise);
    CameraShakeStop(gv_pLAYER_01_USER);
    auto604C1177_g = gv_cinematicTempUnits;
    auto604C1177_u = UnitGroupCount(auto604C1177_g, c_unitCountAll);
    for (;; auto604C1177_u -= 1) {
        auto604C1177_var = UnitGroupUnitFromEnd(auto604C1177_g, auto604C1177_u);
        if (auto604C1177_var == null) { break; }
        UnitRemove(auto604C1177_var);
    }
    auto6793DE30_g = gv_cinematicHiddenUnits;
    auto6793DE30_u = UnitGroupCount(auto6793DE30_g, c_unitCountAll);
    for (;; auto6793DE30_u -= 1) {
        auto6793DE30_var = UnitGroupUnitFromEnd(auto6793DE30_g, auto6793DE30_u);
        if (auto6793DE30_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto6793DE30_var, true);
    }
    auto71D2BE67_g = gv_cinematicPausedUnits;
    auto71D2BE67_u = UnitGroupCount(auto71D2BE67_g, c_unitCountAll);
    for (;; auto71D2BE67_u -= 1) {
        auto71D2BE67_var = UnitGroupUnitFromEnd(auto71D2BE67_g, auto71D2BE67_u);
        if (auto71D2BE67_var == null) { break; }
        libNtve_gf_PauseUnit(auto71D2BE67_var, false);
    }
    RegionPlayableMapSet(RegionFromId(26));
    UnitIssueOrder(gv_kERRIGAN, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitSetPosition(gv_kERRIGAN, PointFromId(244), false);
    UnitSetFacing(gv_kERRIGAN, PointGetFacing(PointFromId(244)), 0.0);
    UnitIssueOrder(gv_aRTANIS, Order(AbilityCommand("ArtanisChannel", 1)), c_orderQueueReplace);
    UnitIssueOrder(gv_aRTANIS, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitSetPosition(gv_aRTANIS, PointFromId(12), false);
    UnitSetFacing(gv_aRTANIS, PointGetFacing(PointFromId(12)), 0.0);
    UnitSetState(gv_kERRIGAN, c_unitStateFidget, true);
    UnitSetState(gv_aRTANIS, c_unitStateFidget, true);
    UnitBehaviorRemove(gv_kERRIGAN, "KerriganWalk", 1);
    SoundStop(gv_midSound, true);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 1.0);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
    SoundStopAllTriggerSounds(true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PUlnar02_Music_Main", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    ActorSend(ActorFromDoodad(DoodadFromId(1606)), "SetOpacity");
    ActorSend(ActorFromDoodad(DoodadFromId(1363)), "SetOpacity");
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(1281)), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(872)), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    GameSetLighting("UlnarInner", 0.0);
    UnitSelect(gv_aRTANIS, gv_pLAYER_01_USER, true);
    UnitSelect(gv_kERRIGAN, gv_pLAYER_01_USER, true);
    UnitClearCooldowns(gv_aRTANIS, true);
    UnitClearCooldowns(gv_kERRIGAN, true);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    libVCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, false);
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, 38.0, 30.0, CameraInfoGetTarget(CameraInfoFromId(701)), lv_fadeDuration);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidShrine2Cleanup_Init () {
    gt_MidShrine2Cleanup = TriggerCreate("gt_MidShrine2Cleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Shrine 2 Artanis Begins Channeling
//--------------------------------------------------------------------------------------------------
bool gt_MidShrine2ArtanisBeginsChanneling_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(gv_aRTANIS, Order(AbilityCommand("ArtanisChannel", 0)), c_orderQueueReplace);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(872)), c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.75, c_timeGame);
    SoundPlayForPlayer(SoundLink("PUlnar02_ShrineRises", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gv_midSound = SoundLastPlayed();
    Wait(1.25, c_timeGame);
    SoundPlayForPlayer(SoundLink("PUlnar02_ShrineLights", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeGame);
    SoundPlayForPlayer(SoundLink("PUlnar02_ShrineExpands", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gv_midSound = SoundLastPlayed();
    Wait(3.0, c_timeGame);
    UnitIssueOrder(gv_aRTANIS, Order(AbilityCommand("ArtanisChannel", 1)), c_orderQueueReplace);
    Wait(1.333, c_timeGame);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(872)), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidShrine2ArtanisBeginsChanneling_Init () {
    gt_MidShrine2ArtanisBeginsChanneling = TriggerCreate("gt_MidShrine2ArtanisBeginsChanneling_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Shrine 2 Transition
//--------------------------------------------------------------------------------------------------
bool gt_MidShrine2Transition_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameSetLighting("THorner05SSecurityCam", 3.0);
    CameraShake(gv_pLAYER_01_USER, "Massive", "Earthquake", 0.0, 2.0, 3.0);
    SoundPlayForPlayer(SoundLink("PUlnar02_ShrineTransitionHit", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("Event_Ulnar02_MidCine_A_TransIn", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("PUlnar02_ShrineTransitionWhoosh", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gv_midSound = SoundLastPlayed();
    ActorSend(ActorFromDoodad(DoodadFromId(1606)), "SetOpacity 1.000000 3.000000");
    ActorSend(ActorFromDoodad(DoodadFromId(1363)), "SetOpacity 1.000000 3.000000");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidShrine2Transition_Init () {
    gt_MidShrine2Transition = TriggerCreate("gt_MidShrine2Transition_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Shrine 2 Bridge Rise
//--------------------------------------------------------------------------------------------------
bool gt_MidShrine2BridgeRise_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(1281)), c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    SoundPlayForPlayer(SoundLink("PUlnar02_XelNagaBridgeAmbientMovement", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gv_midSound = SoundLastPlayed();
    Wait(0.686, c_timeGame);
    SoundPlayForPlayer(SoundLink("Event_Ulnar02_MidCine_FloatingBridge_A", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(2.783, c_timeGame);
    SoundPlayForPlayer(SoundLink("Event_Ulnar02_MidCine_FloatingBridge_B", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(2.191, c_timeGame);
    SoundPlayForPlayer(SoundLink("Event_Ulnar02_MidCine_FloatingBridge_C", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(1.777, c_timeGame);
    SoundPlayForPlayer(SoundLink("Event_Ulnar02_MidCine_FloatingBridge_D", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(1.664, c_timeGame);
    SoundPlayForPlayer(SoundLink("Event_Ulnar02_MidCine_FloatingBridge_E", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(1.289, c_timeGame);
    SoundPlayForPlayer(SoundLink("Event_Ulnar02_MidCine_FloatingBridge_F", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(1.5, c_timeGame);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(1281)), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    SoundStop(gv_midSound, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidShrine2BridgeRise_Init () {
    gt_MidShrine2BridgeRise = TriggerCreate("gt_MidShrine2BridgeRise_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    libVoiC_gf_PlayCinematic("Protoss06", false);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto8FB196CB_g;
    int auto8FB196CB_u;
    unit auto8FB196CB_var;
    unitgroup autoC7A60F27_g;
    int autoC7A60F27_u;
    unit autoC7A60F27_var;
    unitgroup auto3BFE12FC_g;
    int auto3BFE12FC_u;
    unit auto3BFE12FC_var;
    unitgroup autoF7F7AE0C_g;
    int autoF7F7AE0C_u;
    unit autoF7F7AE0C_var;
    unitgroup auto2D4605A8_g;
    int auto2D4605A8_u;
    unit auto2D4605A8_var;
    unitgroup auto19C9D771_g;
    int auto19C9D771_u;
    unit auto19C9D771_var;
    unitgroup autoD44A79B7_g;
    int autoD44A79B7_u;
    unit autoD44A79B7_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, 1.0, true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    RegionPlayableMapSet(RegionFromId(26));
    UnitClearSelection(gv_pLAYER_01_USER);
    TimerWindowDestroy(gv_holdoutTimerWindow);
    TriggerStop(gt_S1Holdout);
    TriggerStop(gt_S2StartHallDefenseEvents);
    TriggerStop(gt_S2HallDefenseBreach);
    TriggerStop(gt_S2HallDefenseDropInHybrids);
    TriggerStop(gt_S2HallDefenseFlyInWarpPrismsAndMedivacs);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    auto8FB196CB_g = gv_globalEnemyUnits;
    auto8FB196CB_u = UnitGroupCount(auto8FB196CB_g, c_unitCountAll);
    for (;; auto8FB196CB_u -= 1) {
        auto8FB196CB_var = UnitGroupUnitFromEnd(auto8FB196CB_g, auto8FB196CB_u);
        if (auto8FB196CB_var == null) { break; }
        UnitRemove(auto8FB196CB_var);
    }
    autoC7A60F27_g = UnitGroup(null, gv_pLAYER_02_DOMINION4, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC7A60F27_u = UnitGroupCount(autoC7A60F27_g, c_unitCountAll);
    for (;; autoC7A60F27_u -= 1) {
        autoC7A60F27_var = UnitGroupUnitFromEnd(autoC7A60F27_g, autoC7A60F27_u);
        if (autoC7A60F27_var == null) { break; }
        UnitRemove(autoC7A60F27_var);
    }
    auto3BFE12FC_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3BFE12FC_u = UnitGroupCount(auto3BFE12FC_g, c_unitCountAll);
    for (;; auto3BFE12FC_u -= 1) {
        auto3BFE12FC_var = UnitGroupUnitFromEnd(auto3BFE12FC_g, auto3BFE12FC_u);
        if (auto3BFE12FC_var == null) { break; }
        UnitRemove(auto3BFE12FC_var);
    }
    autoF7F7AE0C_g = UnitGroup(null, gv_pLAYER_02_DOMINION7, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF7F7AE0C_u = UnitGroupCount(autoF7F7AE0C_g, c_unitCountAll);
    for (;; autoF7F7AE0C_u -= 1) {
        autoF7F7AE0C_var = UnitGroupUnitFromEnd(autoF7F7AE0C_g, autoF7F7AE0C_u);
        if (autoF7F7AE0C_var == null) { break; }
        UnitRemove(autoF7F7AE0C_var);
    }
    auto2D4605A8_g = UnitGroup("WarpPrismPhasing", c_playerAny, RegionFromId(97), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2D4605A8_u = UnitGroupCount(auto2D4605A8_g, c_unitCountAll);
    for (;; auto2D4605A8_u -= 1) {
        auto2D4605A8_var = UnitGroupUnitFromEnd(auto2D4605A8_g, auto2D4605A8_u);
        if (auto2D4605A8_var == null) { break; }
        UnitRemove(auto2D4605A8_var);
    }
    auto19C9D771_g = UnitGroup("WarpPrism", c_playerAny, RegionFromId(97), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto19C9D771_u = UnitGroupCount(auto19C9D771_g, c_unitCountAll);
    for (;; auto19C9D771_u -= 1) {
        auto19C9D771_var = UnitGroupUnitFromEnd(auto19C9D771_g, auto19C9D771_u);
        if (auto19C9D771_var == null) { break; }
        UnitRemove(auto19C9D771_var);
    }
    autoD44A79B7_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD44A79B7_u = UnitGroupCount(autoD44A79B7_g, c_unitCountAll);
    for (;; autoD44A79B7_u -= 1) {
        autoD44A79B7_var = UnitGroupUnitFromEnd(autoD44A79B7_g, autoD44A79B7_u);
        if (autoD44A79B7_var == null) { break; }
        if ((autoD44A79B7_var != gv_aRTANIS) && (autoD44A79B7_var != gv_kERRIGAN)) {
            UnitRemove(autoD44A79B7_var);
        }

    }
    UnitBehaviorRemove(gv_aRTANIS, "ArtanisResurgenceDisable", 1);
    UnitBehaviorRemove(gv_aRTANIS, "ArtanisResurgenceInvulnerable", 1);
    UnitBehaviorRemove(gv_aRTANIS, "ArtanisResurgenceRegen", 1);
    UnitBehaviorRemove(gv_aRTANIS, "ArtanisResurgenceStun", 1);
    UnitSetPropertyFixed(gv_kERRIGAN, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_kERRIGAN, c_unitPropEnergyPercent, 100.0);
    UnitSetPropertyFixed(gv_aRTANIS, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_aRTANIS, c_unitPropShieldsPercent, 100.0);
    UnitSetState(gv_kERRIGAN, c_unitStateFidget, false);
    UnitSetState(gv_aRTANIS, c_unitStateFidget, false);
    UnitIssueOrder(gv_aRTANIS, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitSetPosition(gv_aRTANIS, PointFromId(750), false);
    UnitSetFacing(gv_aRTANIS, 45.0, 0.0);
    UnitIssueOrder(gv_kERRIGAN, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitSetPosition(gv_kERRIGAN, PointFromId(751), false);
    UnitSetFacing(gv_kERRIGAN, 45.0, 0.0);
    UnitBehaviorAdd(gv_kERRIGAN, "KerriganWalk", gv_kERRIGAN, 1);
    UnitIssueOrder(gv_kERRIGAN, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1566)), c_orderQueueReplace);
    UnitIssueOrder(gv_kERRIGAN, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(750)), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1568), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1569), 10.333, -1, 10, true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PUlnar02_Music_ShrineActivation", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_VictoryArtanisBeginsChanneling, true, false);
    Wait(8.333, c_timeGame);
    UnitIssueOrder(gv_aRTANIS, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1565)), c_orderQueueReplace);
    UnitIssueOrder(gv_aRTANIS, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(385)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_kERRIGAN, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1567)), c_orderQueueReplace);
    UnitIssueOrder(gv_kERRIGAN, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(385)), c_orderQueueAddToEnd);
    TriggerExecute(gt_VictoryShrineTransition, true, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(443), 3.0, -1, 10, true);
    Wait(3.0, c_timeGame);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDoodad, true);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 0.0, 2.5);
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(100.00, 100.00, 100.00), 0.0, true);
    libVoiC_gf_CampaignPlayCutscene2("Cutscenes\\Mission_Ulnar_Vision_03.SC2Cutscene", true, true);
    libVCMI_gf_PlaySoundCinematic(SoundLink("Event_Ulnar02_EndCine_B_TransOut", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 2.5);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDoodad, false);
    UnitSetPosition(gv_aRTANIS, PointFromId(432), false);
    UnitSetFacing(gv_aRTANIS, 45.0, 0.0);
    UnitSetPosition(gv_kERRIGAN, PointFromId(433), false);
    UnitSetFacing(gv_kERRIGAN, 45.0, 0.0);
    GameSetLighting("UlnarInner", 0.0);
    ActorSend(ActorFromDoodad(DoodadFromId(757)), "SetOpacity");
    ActorSend(ActorFromDoodad(DoodadFromId(756)), "SetOpacity");
    UnitSetPropertyFixed(gv_aRTANIS, c_unitPropMovementSpeed, (UnitGetPropertyFixed(gv_aRTANIS, c_unitPropMovementSpeed, c_unitPropNormal) / 1.7));
    UnitSetPropertyFixed(gv_kERRIGAN, c_unitPropMovementSpeed, (UnitGetPropertyFixed(gv_kERRIGAN, c_unitPropMovementSpeed, c_unitPropNormal) / 1.7));
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(445), 0.0, -1, 10, true);
    TriggerExecute(gt_VictoryDoorOpen, true, false);
    CinematicFade(true, 2.0, c_fadeStyleNormal, Color(100.00, 100.00, 100.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1570), (SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Ulnar02|Line00110", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Ulnar02|Line00080", true), c_soundIndexAny)) - 2), -1, 10, true);
    libVCMI_gf_SendTransmissionCampaign(gv_kERRIGAN, "pMission_Ulnar02|Line00110", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(gv_aRTANIS, "pMission_Ulnar02|Line00080", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    UnitIssueOrder(gv_aRTANIS, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2388)), c_orderQueueReplace);
    UnitIssueOrder(gv_kERRIGAN, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2389)), c_orderQueueReplace);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 3.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_VictoryArtanisBeginsChanneling);
    TriggerStop(gt_VictoryShrineTransition);
    TriggerStop(gt_VictoryDoorOpen);
    libVCMI_gf_StopCinematicSounds();
    SoundStop(gv_victorySound, false);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 0.0);
    SoundStopAllTriggerSounds(false);
    SoundChannelStop(PlayerGroupAll(), c_soundCategoryOther);
    GameSetLighting("UlnarInner", 0.0);
    ActorSend(ActorFromDoodad(DoodadFromId(757)), "SetOpacity");
    ActorSend(ActorFromDoodad(DoodadFromId(756)), "SetOpacity");
    CameraShakeStop(gv_pLAYER_01_USER);
    libVCMI_gf_CinematicModeCampaign(false, c_transitionDurationImmediate, false);
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Artanis Begins Channeling
//--------------------------------------------------------------------------------------------------
bool gt_VictoryArtanisBeginsChanneling_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(gv_aRTANIS, Order(AbilityCommand("ArtanisChannel", 0)), c_orderQueueReplace);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(775)), c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.75, c_timeGame);
    libVCMI_gf_PlaySoundCinematic(SoundLink("PUlnar02_ShrineRises", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_victorySound = SoundLastPlayed();
    Wait(1.25, c_timeGame);
    libVCMI_gf_PlaySoundCinematic(SoundLink("PUlnar02_ShrineLights", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeGame);
    libVCMI_gf_PlaySoundCinematic(SoundLink("PUlnar02_ShrineExpands", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_victorySound = SoundLastPlayed();
    Wait(3.0, c_timeGame);
    UnitIssueOrder(gv_aRTANIS, Order(AbilityCommand("ArtanisChannel", 1)), c_orderQueueReplace);
    Wait(1.333, c_timeGame);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(775)), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryArtanisBeginsChanneling_Init () {
    gt_VictoryArtanisBeginsChanneling = TriggerCreate("gt_VictoryArtanisBeginsChanneling_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Shrine Transition
//--------------------------------------------------------------------------------------------------
bool gt_VictoryShrineTransition_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameSetLighting("THorner05SSecurityCam", 3.0);
    CameraShake(gv_pLAYER_01_USER, "Massive", "Earthquake", 0.0, 2.0, 3.0);
    libVCMI_gf_PlaySoundCinematic(SoundLink("PUlnar02_ShrineTransitionHit", -1), PlayerGroupAll(), 100.0, 0.0);
    libVCMI_gf_PlaySoundCinematic(SoundLink("Event_Ulnar02_EndCine_A_TransIn", -1), PlayerGroupAll(), 100.0, 0.0);
    libVCMI_gf_PlaySoundCinematic(SoundLink("PUlnar02_ShrineTransitionWhoosh", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_victorySound = SoundLastPlayed();
    ActorSend(ActorFromDoodad(DoodadFromId(757)), "SetOpacity 1.000000 3.000000");
    ActorSend(ActorFromDoodad(DoodadFromId(756)), "SetOpacity 1.000000 3.000000");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryShrineTransition_Init () {
    gt_VictoryShrineTransition = TriggerCreate("gt_VictoryShrineTransition_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Door Open
//--------------------------------------------------------------------------------------------------
bool gt_VictoryDoorOpen_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(203)), c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(2.5, c_timeGame);
    libVCMI_gf_PlaySoundCinematic(SoundLink("PUlnar02_VictoryDoorOpen", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_victorySound = SoundLastPlayed();
    Wait(0.287, c_timeGame);
    libVCMI_gf_PlaySoundCinematic(SoundLink("Event_Ulnar01_EndCine_GateOpen_A", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(3.0, c_timeGame);
    libVCMI_gf_PlaySoundCinematic(SoundLink("PUlnar02_VictoryDoorOpenWhoosh", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(1.816, c_timeGame);
    libVCMI_gf_PlaySoundCinematic(SoundLink("Event_Ulnar01_EndCine_GateOpen_B", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeGame);
    libVCMI_gf_PlaySoundCinematic(SoundLink("PUlnar02_VictoryDoorOpenStoneSound", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(0.5, c_timeGame);
    libVCMI_gf_PlaySoundCinematic(SoundLink("Event_Ulnar01_EndCine_GateOpen_C", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(2.5, c_timeGame);
    Wait(4.5, c_timeGame);
    SoundStop(gv_victorySound, true);
    libVCMI_gf_PlaySoundCinematic(SoundLink("PUlnar02_VictoryDoorOpenStoneSound2", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(6.833, c_timeGame);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(203)), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryDoorOpen_Init () {
    gt_VictoryDoorOpen = TriggerCreate("gt_VictoryDoorOpen_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04MusicSound_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_DebugHoldout1_Init();
    gt_DebugStage2_Init();
    gt_DebugHoldout2_Init();
    gt_DebugStage3_Init();
    gt_DebugCleanupGeneral_Init();
    gt_DebugCleanupStage1_Init();
    gt_DebugCleanupHoldout1_Init();
    gt_DebugCleanupStage2_Init();
    gt_DebugCleanupStage3_Init();
    gt_InitGates_Init();
    gt_StartGameStage01Q_Init();
    gt_S1AnimateXelNagaPillarwall_Init();
    gt_S1ReachedFirstDoorQ_Init();
    gt_S1FirstEncounterTargetsDead_Init();
    gt_S1LightningDashUsed_Init();
    gt_S1AwakenOrangeConstruct01Q_Init();
    gt_S1OrangeConstruct01DeadQ_Init();
    gt_S1SkyHybrid_Init();
    gt_S1SkyHybridQ_Init();
    gt_S1AwakenBlueConstruct01_Init();
    gt_S1BlueConstruct01Q_Init();
    gt_S1Room2BlueConstructDead_Init();
    gt_S1AwakenOrangeConstruct02_Init();
    gt_S1OrangeConstruct02ShadowStepQ_Init();
    gt_S1OrangeConstruct02Dead_Init();
    gt_S1OpenSecondDoor_Init();
    gt_S1HallReached_Init();
    gt_S1HallReachedQ_Init();
    gt_S1Holdout_Init();
    gt_S1HoldoutEndQ_Init();
    gt_S1ProtossUnitWarpedIn_Init();
    gt_StartGameStage02Q_Init();
    gt_S2TaldarimAttack_Init();
    gt_S2TaldarimAttackQ_Init();
    gt_S2TalDarimUnitsWarpIn_Init();
    gt_S2DoorIsClosedQ_Init();
    gt_S2SkyDestroyers_Init();
    gt_S2DiscoverDoubleConstructsFight_Init();
    gt_S2DoubleConstructsQ_Init();
    gt_S2DoubleOrangeConstruct01Dead_Init();
    gt_S2DoubleBlueConstruct01Dead_Init();
    gt_S2OpenFirstDoor_Init();
    gt_S2PrepShadowCorpsAmbush01_Init();
    gt_S2ShadowCorpsAmbush01_Init();
    gt_S2ShadowCorpsAmbush01Q_Init();
    gt_S2ShadowCorpsMedivacDropOff_Init();
    gt_S2ProgressSave_Init();
    gt_S1AnimateXelNagaCratesLarge_Init();
    gt_S2SeeSecondGateQ_Init();
    gt_S2SpawnSkyHybrid_Init();
    gt_S2PrepShadowCorpsAmbush02_Init();
    gt_S2ShadowCorpsAmbush02_Init();
    gt_S2ShadowCorpsAmbush02Q_Init();
    gt_S2AwakenBlueConstruct02_Init();
    gt_S2BlueConstruct02Q_Init();
    gt_S2BlueConstruct02Dead_Init();
    gt_S2StartHallDefenseEvents_Init();
    gt_S2HallDefenseBreach_Init();
    gt_S2HallDefenseBreachQ_Init();
    gt_S2HallDefenseFlyInWarpPrismsAndMedivacs_Init();
    gt_S2HallDefenseDropInHybrids_Init();
    gt_S2HallDefenseFinishedQ_Init();
    gt_S2HallBeaconReached_Init();
    gt_S2HallDefenseAttackGroupUnitsWarpIn_Init();
    gt_StartGameStage03Q_Init();
    gt_S3TimerStart_Init();
    gt_S3TimerFirstWarningQ_Init();
    gt_S3TimerSecondWarningQ_Init();
    gt_S3PlanetCrackerPath01_Init();
    gt_S3PlanetCrackerPath02_Init();
    gt_S3UnitUnloadedFromDropship_Init();
    gt_S3HybridAttack_Init();
    gt_S3SeeDestroyedDoorframeQ_Init();
    gt_S3StalkerAttackQ_Init();
    gt_S3PrepareSpectreAndReaperAmbushes_Init();
    gt_S3ActivateAmbushonArtanis01Q_Init();
    gt_S3DropshipsAttackKerrigan_Init();
    gt_S3ActivateAmbushonKerrigan01Q_Init();
    gt_S3ReaperJumpsDown_Init();
    gt_S3PlanetCrackConstruct_Init();
    gt_S3DropshipAttackAtConstruct_Init();
    gt_S3SpectreAmbushQ_Init();
    gt_S3BonusObjectiveTalDarim_Init();
    gt_S3ShadowandTalDarimMechAttack_Init();
    gt_S3ReachFinalRoom_Init();
    gt_S3HybridAttackingShrineGetsStunned_Init();
    gt_S3StopShrineTimer_Init();
    gt_S3ReachFinalRoomTransmissionQ_Init();
    gt_S3AllEnemiesAtFinalRoomDeadQ_Init();
    gt_S3HallReached_Init();
    gt_InitHeroes_Init();
    gt_InitialLightningDashUsed_Init();
    gt_IntroLightningDashQ_Init();
    gt_TeachLightningDash_Init();
    gt_TeachAstralWindQ_Init();
    gt_AstralWindHighlight_Init();
    gt_S1BonusObjectiveDiscoverQ_Init();
    gt_S2BonusObjectiveDiscover_Init();
    gt_S3BonusObjectiveDiscover_Init();
    gt_RelicPickupQ_Init();
    gt_Autorevealers_Init();
    gt_DefeatPrimaryObjectiveFailed_Init();
    gt_DefeatS3PrimaryObjectiveFailed_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_GroundSlamSpawnAdds_Init();
    gt_EntropicBlastSpawnAdds_Init();
    gt_StartAI_Init();
    gt_TaldarimResources_Init();
    gt_StatsMedivacUnloads_Init();
    gt_StatsUnitDies_Init();
    gt_StatsLightningDashDamage_Init();
    gt_StatsResurgenceActivated_Init();
    gt_AchievementBanelingKills_Init();
    gt_AchievementLightningDashDamage_Init();
    gt_AchievementTheBiggerTheyAre_Init();
    gt__10thAnniversaryAchievementPreventenemyWarpPrismfromwarpinginunits_Init();
    gt_ObjectiveHallsofRevelationCreate_Init();
    gt_ObjectiveHallsofRevelationComplete_Init();
    gt_ObjectiveHallsofRevelationUpdate_Init();
    gt_ObjectiveHallsofRevelationFailed_Init();
    gt_ObjectiveSurviveCreate_Init();
    gt_ObjectiveSurviveComplete_Init();
    gt_ObjectiveSurviveFailed_Init();
    gt_ObjectiveXelNagaDevicesCreate_Init();
    gt_ObjectiveXelNagaDevicesComplete_Init();
    gt_ObjectiveXelNagaDevicesUpdate_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_IntroMoveHybrids_Init();
    gt_MidHoldoutQ_Init();
    gt_MidHoldoutSetup_Init();
    gt_MidHoldoutCinematic_Init();
    gt_MidHoldoutCinematicEnd_Init();
    gt_MidHoldoutCleanup_Init();
    gt_MidHoldoutArtanisBeginsChanneling_Init();
    gt_MidHoldoutSpawnEnemies_Init();
    gt_MidShrine1Q_Init();
    gt_MidShrine1Setup_Init();
    gt_MidShrine1Cinematic_Init();
    gt_MidShrine1CinematicEnd_Init();
    gt_MidShrine1Cleanup_Init();
    gt_MidShrine1Transition_Init();
    gt_MidShrine1BridgeRise_Init();
    gt_MidShrine2Q_Init();
    gt_MidShrine2Setup_Init();
    gt_MidShrine2Cinematic_Init();
    gt_MidShrine2CinematicEnd_Init();
    gt_MidShrine2Cleanup_Init();
    gt_MidShrine2ArtanisBeginsChanneling_Init();
    gt_MidShrine2Transition_Init();
    gt_MidShrine2BridgeRise_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
    gt_VictoryArtanisBeginsChanneling_Init();
    gt_VictoryShrineTransition_Init();
    gt_VictoryDoorOpen_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
