//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Unsealing the Past
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"
include "TriggerLibs/VoidLib"
include "TriggerLibs/VoidCampaignLib"
include "TriggerLibs/VoidCampaignMissionLib"
include "TriggerLibs/VoidCampaignUILib"
include "ai850099F6"
include "ai28880A46"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libHots_InitLib();
    libLotv_InitLib();
    libVoiC_InitLib();
    libVCMI_InitLib();
    libVCUI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_ZERG_RED = 2;
const int gv_pLAYER_03_ZERG_BULLIES = 3;
const int gv_pLAYER_04_ZERG_GREEN = 4;
const int gv_pLAYER_05_PROTOSS_ALLY = 5;
const int gv_pLAYER_06_POWER_CORE = 6;
const int gv_pLAYER_07_MEGALITH = 7;
const int gv_pLAYER_08_ZERG_AMBIENCE = 8;
const int gv_objectiveDestroyPowerCoreHousingMax = 2;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
string gv_mapMusicTrack;
playergroup gv_enemyPlayers;
unit[6] gv_stasisLocks;
revealer gv_stasisLockRevealer;
unit gv_megalithUnit;
fixed gv_megalithLifeMax;
fixed gv_megalithShieldMax;
int gv_introSection_Ping;
unit gv_introColossus01;
unit gv_introColossus02;
unit gv_introColossus03;
unit gv_introNydus;
unit gv_introCaveRocks;
unitgroup gv_introCaveUnits;
revealer gv_introCaveRevealer;
fixed gv_megalithStartUpTime;
color gv_megalithLockPingColour;
timer gv_megalithActivateTimer;
bool gv_roboBayClicked;
timer gv_stasisUnlockTimer;
fixed gv_stasisUnlockTime;
fixed gv_stasisUnlockTimeFirstInstance;
int gv_nextTargetReticleTextTag;
int gv_nextTargetPing;
actor gv_nextTargetReticleActor;
unit gv_megalithUnitDummy;
int gv_trackWaypointCount;
int gv_trackWaypointCurrent;
bool gv_trackPaused;
bool gv_megalithUnlocking;
int[6] gv_nextPathHighlightBegin;
int[6] gv_nextPathHighlightEnd;
int gv_cycleDamageTransmission;
int gv_cycleDamageOffCameraTransmission;
unitgroup gv_caveZergGroup;
unit gv_nydusWorm01;
unit gv_nydusWorm02;
unit gv_nydusWorm03;
unit gv_nydusWorm04;
unit gv_nydusWorm05;
int gv_contextShouts;
unit gv_bonus_PowerCoreHousing01;
unit gv_bonus_PowerCoreHousing02;
fixed gv_megalithDamageTaken;
int gv_zergStructuresRemaining;
int gv_achievementZergCavesSealed;
bool gv_masteryAchievementWindowClosed;
bool gv_achievementNonProbesorColossusBuilt;
int gv_objectiveDestroyZergBase3;
int gv_objectiveDestroyZergBase4;
int gv_objectiveStasisLocksMax;
int gv_objectiveStasisLocksCurrent;
int gv_objectiveDestroyZergBase;
int gv_objectiveRescueStalkers;
int gv_objectiveDestroyPowerCoreHousingCount;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicPausedUnits;
unitgroup gv_cinematicTempUnits;
bool gv_cinematicCompleted;
unit gv_cinematicColossus1;
unit gv_cinematicColossus2;
unit gv_cinematicColossus3;
actor gv_introReticle;
int gv_introTextTag;
bool gv_midFade;
unitgroup gv_victoryPlayerUnits;

void InitGlobals () {
    gv_enemyPlayers = PlayerGroupEmpty();
    gv_megalithUnit = UnitFromId(973);
    gv_introSection_Ping = c_invalidPingId;
    gv_introColossus01 = UnitFromId(398);
    gv_introColossus02 = UnitFromId(472);
    gv_introColossus03 = UnitFromId(11);
    gv_introCaveRocks = UnitFromId(703);
    gv_introCaveUnits = UnitGroupEmpty();
    gv_megalithLockPingColour = Color(100.00, 66.67, 33.33);
    gv_megalithActivateTimer = TimerCreate();
    gv_stasisUnlockTimer = TimerCreate();
    gv_nextTargetReticleTextTag = c_textTagNone;
    gv_nextTargetPing = c_invalidPingId;
    gv_trackWaypointCount = 65;
    gv_caveZergGroup = UnitGroupEmpty();
    gv_bonus_PowerCoreHousing01 = UnitFromId(154);
    gv_bonus_PowerCoreHousing02 = UnitFromId(163);
    gv_objectiveDestroyZergBase3 = c_invalidObjectiveId;
    gv_objectiveDestroyZergBase4 = c_invalidObjectiveId;
    gv_objectiveStasisLocksMax = 5;
    gv_objectiveDestroyZergBase = c_invalidObjectiveId;
    gv_objectiveRescueStalkers = c_invalidObjectiveId;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_introTextTag = c_textTagNone;
    gv_victoryPlayerUnits = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
point gf_GetMegalithLinePoint (int lp_waypointIndex);
void gf_PingMegalith ();
void gf_DrawLineBetweenLocks (int lp_startWaypointIndex, int lp_endWaypointIndex, unit lp_lock);
void gf_MegalithEnterStasisLock ();
void gf_MegalithCompletesStasisLock ();
void gf_MegalithExitingStasisLock ();
void gf_SpawnUnitsAtPointandAttack (int lp_qty, string lp_unitType, unit lp_linkedRockTower, int lp_player, point lp_position, fixed lp_delay);
void gf_SpawnNydusUnitsandAttackPlayer (int lp_qty, string lp_unitType, int lp_player, unit lp_nydus, fixed lp_delay);
void gf_ZergCaveAchievementTracking (unit lp_zergCave);
void gf_VictoryWarpOutUnit (unit lp_unit);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04MusicSound;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_DebugStage2;
trigger gt_DebugStage3;
trigger gt_DebugEndTimer;
trigger gt_StartStage01Q;
trigger gt_RevealPlayerBaseLocation;
trigger gt_IntroBaseRegionUnitsDie;
trigger gt_ExplodeyThings;
trigger gt_IntroduceCavesQ;
trigger gt_SpawnZergIntroCave01;
trigger gt_ZergIntroCaveWanderers;
trigger gt_IntroCaveTakesDamage;
trigger gt_StartStage02Q;
trigger gt_MegalithInitiation;
trigger gt_MegalithPreparingToMoveQ;
trigger gt_MegalithStartsMovingQ;
trigger gt_PlayerClicksOnRoboticsFacility;
trigger gt_MoveMegalithTrackUnit;
trigger gt_MegalithIsDamagedQ;
trigger gt_DestabilizingStasisLockProgressBar;
trigger gt_MegalithCompletesDestabilization;
trigger gt_MegalithReachesFinalLocation;
trigger gt_MegalithNearsStasisLock;
trigger gt_StasisLockAlmostDestabilizedQ;
trigger gt_StasisLockCompleteQ;
trigger gt_MegalithReachesStasisLock01Q;
trigger gt_MegalithReachesStasisLock02Q;
trigger gt_MegalithReachesStasisLock03Q;
trigger gt_MegalithReachesStasisLock04Q;
trigger gt_WarnOfCanyonPlayerEntersQ;
trigger gt_CrawlersRootInCanyon;
trigger gt_ActivateZergCanyonRush01;
trigger gt_ActivateZergCanyonRush02;
trigger gt_ActivateFirstCaves;
trigger gt_WarnOfCavesQ;
trigger gt_SpawnZergCave01;
trigger gt_SpawnZergCave02;
trigger gt_ActivateSecondCaves;
trigger gt_MoreCavesOfZergQ;
trigger gt_SpawnZergCave03;
trigger gt_SpawnZergCave04;
trigger gt_MakeRockTowerInvulnAfterFalling;
trigger gt_WarnOfZergBaseQ;
trigger gt_WarnOfNydusWormsQ;
trigger gt_NydusWormWave01;
trigger gt_NydusWormWave02;
trigger gt_NydusWormWave03;
trigger gt_ActivateFinalWorms;
trigger gt_NydusWormWave04;
trigger gt_NydusWormWave05;
trigger gt_SpawnNydusWorm01;
trigger gt_SpawnNydusWorm02;
trigger gt_SpawnNydusWorm03;
trigger gt_SpawnNydusWorm04;
trigger gt_SpawnNydusWorm05;
trigger gt_MonitorFenixSoAPresence;
trigger gt_FenixArrivesonEndionQ;
trigger gt_UnitEntersBonusCreateProximityActivation;
trigger gt_BonusObjectiveCreateQ;
trigger gt_PowerCoreHousingDestroyedQ;
trigger gt_PowerCoreHousingTakesDamage;
trigger gt_StartAI;
trigger gt_AIGiveResources;
trigger gt_AIUpgradesNormal;
trigger gt_AIUpgradesHard;
trigger gt_AttackWave01TransmissionQ;
trigger gt_HatcheryDies;
trigger gt_ZergWander;
trigger gt_DefeatUnitsDead;
trigger gt_DefeatBaseDead;
trigger gt_DefeatPrimaryObjectiveFailed;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_StatMegalithDamageTaken;
trigger gt_AchievementDestroyZergStructures;
trigger gt_AchievementZergCaveSealed;
trigger gt_AchievementLairHunting;
trigger gt_AchievementVictorywithonlyProbesandColossus;
trigger gt_ColossusTipQ;
trigger gt_ObjectiveClearOutZergCreate;
trigger gt_ObjectiveClearOutZergComplete;
trigger gt_ObjectiveClearOutZergFailed;
trigger gt_ObjectiveDecryptStasisLocksCreate;
trigger gt_ObjectiveDecryptStasisLocksComplete;
trigger gt_ObjectiveDecryptStasisLocksUpdate;
trigger gt_ObjectiveDecryptStasisLocksFailed;
trigger gt_ObjectiveMegalithMustSurviveCreate;
trigger gt_ObjectiveMegalithMustSurviveComplete;
trigger gt_ObjectiveMegalithMustSurviveFailed;
trigger gt_ObjectiveDestroyPowerCoreHousingCreate;
trigger gt_ObjectiveDestroyPowerCoreHousingComplete;
trigger gt_ObjectiveDestroyPowerCoreHousingUpdate;
trigger gt_ObjectiveDestroyPowerCoreHousingFailed;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_IntroZerg;
trigger gt_MidQ;
trigger gt_MidSetup;
trigger gt_MidCinematic;
trigger gt_MidCinematicEnd;
trigger gt_MidCleanup;
trigger gt_MidCreateNexus;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;

//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;

//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        cai_playerAI[init_i] = null;
    }
}

//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;

    if (cai_playerAI[p] == "ai850099F6") { ai850099F6_start(p); }
    if (cai_playerAI[p] == "ai28880A46") { ai28880A46_start(p); }
}

//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai850099F6") { ai850099F6_setDefGather(p, val); }
    if (cai_playerAI[p] == "ai28880A46") { ai28880A46_setDefGather(p, val); }
}

//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai850099F6") { return ai850099F6_getCustomData(p); }
    if (cai_playerAI[p] == "ai28880A46") { return ai28880A46_getCustomData(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai850099F6") { return ai850099F6_getLastWave(p); }
    if (cai_playerAI[p] == "ai28880A46") { return ai28880A46_getLastWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai850099F6") { ai850099F6_waves_run(p, target); }
    if (cai_playerAI[p] == "ai28880A46") { ai28880A46_waves_run(p, target); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai850099F6") { ai850099F6_waves_enable(p, val); }
    if (cai_playerAI[p] == "ai28880A46") { ai28880A46_waves_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "ai850099F6") { ai850099F6_waves_stop(); }
    if (ai == "ai28880A46") { ai28880A46_waves_stop(); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai850099F6") { ai850099F6_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "ai28880A46") { ai28880A46_wave_run(w, p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai850099F6") { ai850099F6_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "ai28880A46") { ai28880A46_wave_enable(w, p, val); }
}

//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "ai850099F6") { return ai850099F6_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "ai28880A46") { return ai28880A46_wave_isEnabled(w, p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai850099F6") { return ai850099F6_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "ai28880A46") { return ai28880A46_wave_createdUnits(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai850099F6") { return ai850099F6_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "ai28880A46") { return ai28880A46_wave_createdWave(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_startall () {
    cai_start("ai850099F6", 2);
    cai_start("ai28880A46", 4);
    AICampaignStart(3);
    AICampaignStart(5);
    AICampaignStart(6);
    AICampaignStart(7);
    AICampaignStart(8);
}

//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    PlayerGroupAdd(target, 7);
    cai_waves_run(2, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    PlayerGroupAdd(target, 7);
    cai_waves_run(4, target);
}

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
point gf_GetMegalithLinePoint (int lp_waypointIndex) {
    // Variable Declarations
    string lv_waypointIndexString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waypointIndexString = "";

    // Implementation
    lv_waypointIndexString = IntToString(lp_waypointIndex);
    return PointFromName(("RobotLine_" + lv_waypointIndexString));
}

void gf_PingMegalith () {
    // Automatic Variable Declarations
    // Implementation
    if ((libHots_gf_PingStoredForUnit(gv_megalithUnit, 1) != c_invalidPingId)) {
        PingDestroy(libHots_gf_PingStoredForUnit(gv_megalithUnit, 1));
    }

    SoundPlayForPlayer(SoundLink("UI_MiniMapPing", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingCircleImportant", UnitGetPosition(gv_megalithUnit), gv_megalithLockPingColour, 0.0, 270.0);
    libHots_gf_StorePingForUnit(gv_megalithUnit, 1, PingLastCreated());
    PingSetUnit(PingLastCreated(), gv_megalithUnit);
    PingSetScale(PingLastCreated(), 0.5);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/7D5144EA"));
}

void gf_DrawLineBetweenLocks (int lp_startWaypointIndex, int lp_endWaypointIndex, unit lp_lock) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int auto5D29A728_ae;
    const int auto5D29A728_ai = 1;

    // Variable Initialization

    // Implementation
    auto5D29A728_ae = lp_endWaypointIndex;
    lv_i = lp_startWaypointIndex;
    for ( ; ( (auto5D29A728_ai >= 0 && lv_i <= auto5D29A728_ae) || (auto5D29A728_ai < 0 && lv_i >= auto5D29A728_ae) ) ; lv_i += auto5D29A728_ai ) {
        if ((PointFromName(("RobotLine_" + IntToString(lv_i))) != null)) {
            PingCreate(PlayerGroupAll(), "PingArrow", PointFromName(("RobotLine_" + IntToString(lv_i))), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 8.0);
            PingSetScale(PingLastCreated(), 0.5);
        }

        Wait(0.35, c_timeGame);
    }
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/47588CE2"), null, UnitGetPosition(lp_lock));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingDiamond", UnitGetPosition(lp_lock), gv_megalithLockPingColour, 0.0, 270.0);
    gv_nextTargetPing = PingLastCreated();
    PingSetScale(PingLastCreated(), 0.4);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/22DF612B"));
}

void gf_MegalithEnterStasisLock () {
    // Variable Declarations
    fixed lv_unlockDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gv_objectiveStasisLocksCurrent += 1;
    if ((gv_objectiveStasisLocksCurrent == 1)) {
        lv_unlockDuration = gv_stasisUnlockTimeFirstInstance;
    }
    else {
        lv_unlockDuration = gv_stasisUnlockTime;
    }
    TriggerExecute(gt_ObjectiveDecryptStasisLocksUpdate, true, false);
    PingDestroy(gv_nextTargetPing);
    gv_trackPaused = true;
    gv_megalithUnlocking = true;
    while ((UnitHasBehavior2(gv_megalithUnit, "MegalithCutterDockHide") == false)) {
        UnitIssueOrder(gv_megalithUnit, OrderTargetingUnit(AbilityCommand("MegalithCutterDock", 0), gv_stasisLocks[gv_objectiveStasisLocksCurrent]), c_orderQueueReplace);
        Wait(0.0625, c_timeGame);
    }
    VisRevealerCreate(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_stasisLocks[gv_objectiveStasisLocksCurrent]), 4.5));
    gv_stasisLockRevealer = VisRevealerLastCreated();
    PingDestroy(libHots_gf_PingStoredForUnit(gv_megalithUnit, 1));
    libVCUI_gf_ShowHideSingularBossBarVoidCampaign(false);
    Wait(10.0, c_timeAI);
    TimerStart(gv_stasisUnlockTimer, lv_unlockDuration, false, c_timeAI);
    Wait(0.0625, c_timeAI);
    if ((gv_objectiveStasisLocksCurrent < gv_objectiveStasisLocksMax)) {
        TriggerExecute(gt_DestabilizingStasisLockProgressBar, true, false);
        TriggerExecute(gt_StasisLockAlmostDestabilizedQ, true, false);
    }

}

void gf_MegalithCompletesStasisLock () {
    // Automatic Variable Declarations
    // Implementation
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/54B3B99F"), null, UnitGetPosition(gv_megalithUnit));
    gf_MegalithExitingStasisLock();
    gf_PingMegalith();
    libVCUI_gf_ShowHideSingularBossBarVoidCampaign(true);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromName(("Cybros Lock Area 0" + IntToString((gv_objectiveStasisLocksCurrent + 1)))), 6.0, false);
    gf_DrawLineBetweenLocks(gv_nextPathHighlightBegin[gv_objectiveStasisLocksCurrent], gv_nextPathHighlightEnd[gv_objectiveStasisLocksCurrent], gv_stasisLocks[(gv_objectiveStasisLocksCurrent + 1)]);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/C5686EFB"), null, UnitGetPosition(gv_stasisLocks[(gv_objectiveStasisLocksCurrent + 1)]));
}

void gf_MegalithExitingStasisLock () {
    // Automatic Variable Declarations
    // Implementation
    libVCMI_gf_CreateMissionAutosavePoint(StringToText(""));
    gv_megalithUnlocking = false;
    UnitSetPropertyFixed(gv_megalithUnit, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_megalithUnit, c_unitPropShieldsPercent, 100.0);
    UnitBehaviorAdd(gv_stasisLocks[gv_objectiveStasisLocksCurrent], "MegalithDockComplete", gv_megalithUnit, 1);
    Wait(10.0, c_timeAI);
    VisRevealerDestroy(gv_stasisLockRevealer);
}

void gf_SpawnUnitsAtPointandAttack (int lp_qty, string lp_unitType, unit lp_linkedRockTower, int lp_player, point lp_position, fixed lp_delay) {
    // Variable Declarations
    region lv_defendRegion;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libVCMI_gf_GameIsOver() == false) && (UnitIsAlive(lp_linkedRockTower) == true) && (UnitGroupCount(gv_caveZergGroup, c_unitCountAlive) <= libLotv_gf_DifficultyValueInt2(35, 35, 50, 60))) {
        libNtve_gf_CreateUnitsAtPoint2(lp_qty, lp_unitType, 0, lp_player, lp_position);
        UnitGroupAddUnitGroup(gv_caveZergGroup, UnitLastCreatedGroup());
        if ((RegionContainsPoint(RegionFromId(19), lp_position) == true)) {
            lv_defendRegion = RegionFromId(19);
        }
        else {
            lv_defendRegion = RegionFromId(20);
        }
        AIAttackWaveSetTargetRegion(lp_player, lv_defendRegion, 0);
        AIAttackWaveSetGatherPoint(lp_player, lp_position);
        AIAttackWaveUseGroup(lp_player, gv_caveZergGroup);
        AIAttackWaveSend(lp_player, 0, false);
    }

    Wait(lp_delay, c_timeAI);
}

void gf_SpawnNydusUnitsandAttackPlayer (int lp_qty, string lp_unitType, int lp_player, unit lp_nydus, fixed lp_delay) {
    // Automatic Variable Declarations
    // Implementation
    if ((libVCMI_gf_GameIsOver() == false) && (UnitIsAlive(lp_nydus) == true)) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_nydus), c_animNameDefault, "Spell", c_animFlagNonLooping, c_animTimeDefault);
        SoundPlayOnUnit(SoundLink("NydusWorm_Unload", -1), PlayerGroupAll(), lp_nydus, 0.0, 100.0, 0.0);
        UnitCreate(lp_qty, lp_unitType, 0, lp_player, UnitGetPosition(lp_nydus), libNtve_gf_RandomAngle());
        AISetGroupSuicide(UnitLastCreatedGroup(), true);
        Wait(lp_delay, c_timeAI);
    }

}

trigger auto_gf_ZergCaveAchievementTracking_Trigger = null;
unit auto_gf_ZergCaveAchievementTracking_lp_zergCave;

void gf_ZergCaveAchievementTracking (unit lp_zergCave) {
    auto_gf_ZergCaveAchievementTracking_lp_zergCave = lp_zergCave;

    if (auto_gf_ZergCaveAchievementTracking_Trigger == null) {
        auto_gf_ZergCaveAchievementTracking_Trigger = TriggerCreate("auto_gf_ZergCaveAchievementTracking_TriggerFunc");
    }

    TriggerExecute(auto_gf_ZergCaveAchievementTracking_Trigger, false, false);
}

bool auto_gf_ZergCaveAchievementTracking_TriggerFunc (bool testConds, bool runActions) {
    unit lp_zergCave = auto_gf_ZergCaveAchievementTracking_lp_zergCave;

    // Automatic Variable Declarations
    // Implementation
    UnitSetCustomValue(lp_zergCave, 1, 1.0);
    UnitSetCustomValue(lp_zergCave, 0, 40.0);
    Wait(1.0, c_timeAI);
    while ((UnitIsAlive(lp_zergCave) == true) && (UnitGetCustomValue(lp_zergCave, 0) > 0.0)) {
        UnitSetCustomValue(lp_zergCave, 0, (UnitGetCustomValue(lp_zergCave, 0) - 1.0));
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_gf_VictoryWarpOutUnit_Trigger = null;
unit auto_gf_VictoryWarpOutUnit_lp_unit;

void gf_VictoryWarpOutUnit (unit lp_unit) {
    auto_gf_VictoryWarpOutUnit_lp_unit = lp_unit;

    if (auto_gf_VictoryWarpOutUnit_Trigger == null) {
        auto_gf_VictoryWarpOutUnit_Trigger = TriggerCreate("auto_gf_VictoryWarpOutUnit_TriggerFunc");
    }

    TriggerExecute(auto_gf_VictoryWarpOutUnit_Trigger, false, false);
}

bool auto_gf_VictoryWarpOutUnit_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_VictoryWarpOutUnit_lp_unit;

    // Automatic Variable Declarations
    // Implementation
    UnitSetOwner(lp_unit, 0, false);
    UnitIssueOrder(lp_unit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    SoundPlayAtPointForPlayer(SoundLink("WarpGate_TrainStart", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lp_unit), 0.0, 100.0, 0.0);
    libNtve_gf_AttachModelToUnit(lp_unit, "ProtossGenericWarpInOut", "Ref_Origin");
    Wait(2.5, c_timeGame);
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    if ((UnitIsAlive(lp_unit) == false)) {
        return true;
    }

    SoundPlayAtPointForPlayer(SoundLink("WarpGate_TrainFinish", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lp_unit), 0.0, 100.0, 0.0);
    Wait(0.0625, c_timeGame);
    libNtve_gf_ShowHideUnit(lp_unit, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_ULoadCampaignData("PPurifier02");
    TriggerExecute(gt_Init01Technology, true, false);
    libVoiC_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init02Players, true, false);
    TriggerExecute(gt_Init03Units, true, false);
    TriggerExecute(gt_Init04MusicSound, true, false);
    TriggerExecute(gt_Init05Environment, true, false);
    TriggerExecute(gt_Init06Difficulties, true, false);
    TriggerExecute(gt_Init07Help, true, false);
    TriggerExecute(gt_IntroQ, true, true);
    TriggerExecute(gt_StartStage01Q, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    libVoiC_gf_EnableCampaignTechUnit(true, "Colossus", gv_pLAYER_01_USER);
    TechTreeUpgradeAllow(gv_pLAYER_03_ZERG_BULLIES, "overlordtransport", true);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_ZERG_BULLIES, "overlordtransport", 1);
    TechTreeUpgradeAllow(gv_pLAYER_03_ZERG_BULLIES, "overlordspeed", true);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_ZERG_BULLIES, "overlordspeed", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto3C26F027_g;
    int auto3C26F027_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_ZERG_RED, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_03_ZERG_BULLIES, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_04_ZERG_GREEN, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_05_PROTOSS_ALLY, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_06_POWER_CORE, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_07_MEGALITH, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_08_ZERG_AMBIENCE, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_05_PROTOSS_ALLY, gv_pLAYER_07_MEGALITH, libNtve_ge_AllianceSetting_Neutral);
    PlayerGroupAdd(gv_enemyPlayers, gv_pLAYER_02_ZERG_RED);
    PlayerGroupAdd(gv_enemyPlayers, gv_pLAYER_03_ZERG_BULLIES);
    PlayerGroupAdd(gv_enemyPlayers, gv_pLAYER_04_ZERG_GREEN);
    PlayerGroupAdd(gv_enemyPlayers, gv_pLAYER_08_ZERG_AMBIENCE);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 300);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 200);
    auto3C26F027_g = gv_enemyPlayers;
    auto3C26F027_var = -1;
    while (true) {
        auto3C26F027_var = PlayerGroupNextPlayer(auto3C26F027_g, auto3C26F027_var);
        if (auto3C26F027_var < 0) { break; }
        libNtve_gf_SetAlliance(auto3C26F027_var, gv_pLAYER_03_ZERG_BULLIES, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        libNtve_gf_SetAlliance(auto3C26F027_var, gv_pLAYER_04_ZERG_GREEN, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        libNtve_gf_SetAlliance(auto3C26F027_var, gv_pLAYER_05_PROTOSS_ALLY, libNtve_ge_AllianceSetting_Neutral);
        libNtve_gf_SetAlliance(auto3C26F027_var, gv_pLAYER_06_POWER_CORE, libNtve_ge_AllianceSetting_Neutral);
        libNtve_gf_SetAlliance(auto3C26F027_var, gv_pLAYER_07_MEGALITH, libNtve_ge_AllianceSetting_Enemy);
        PlayerModifyPropertyInt(auto3C26F027_var, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
        PlayerModifyPropertyInt(auto3C26F027_var, c_playerPropVespene, c_playerPropOperSetTo, 5000);
        PlayerModifyPropertyInt(auto3C26F027_var, c_playerPropSuppliesMade, c_playerPropOperSetTo, 200);
        PlayerModifyPropertyInt(auto3C26F027_var, c_playerPropSuppliesLimit, c_playerPropOperSetTo, 200);
        PlayerSetColorIndex(auto3C26F027_var, 1, true);
    }
    libVCMI_gf_PM_DetectionUpgradesApply();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unitIter;
    int lv_iter;

    // Automatic Variable Declarations
    unitgroup autoBDEE317A_g;
    int autoBDEE317A_u;
    unitgroup auto20B9AC3D_g;
    int auto20B9AC3D_u;
    unitgroup auto81DF6EDA_g;
    int auto81DF6EDA_u;
    unitgroup auto65017736_g;
    int auto65017736_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_SetWorkerRallyPointsPlayersNexuses(gv_pLAYER_01_USER);
    UnitSetPropertyFixed(gv_megalithUnit, c_unitPropLifePercent, 1.0);
    UnitSetPropertyFixed(gv_megalithUnit, c_unitPropShieldsPercent, 1.0);
    UnitSetPropertyFixed(gv_megalithUnit, c_unitPropShieldsRegen, 0.0);
    UnitIssueOrder(gv_megalithUnit, OrderTargetingUnit(AbilityCommand("MegalithCutterDockInstant", 0), UnitFromId(361)), c_orderQueueReplace);
    UnitSetPropertyFixed(UnitFromId(703), c_unitPropLifeMax, 200.0);
    autoBDEE317A_g = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(37), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBDEE317A_u = UnitGroupCount(autoBDEE317A_g, c_unitCountAll);
    for (;; autoBDEE317A_u -= 1) {
        lv_unitIter = UnitGroupUnitFromEnd(autoBDEE317A_g, autoBDEE317A_u);
        if (lv_unitIter == null) { break; }
        libNtve_gf_ShowHideUnit(lv_unitIter, false);
        libNtve_gf_PauseUnit(lv_unitIter, true);
    }
    auto20B9AC3D_g = UnitGroup("PowerCoreHousing", gv_pLAYER_06_POWER_CORE, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto20B9AC3D_u = UnitGroupCount(auto20B9AC3D_g, c_unitCountAll);
    for (;; auto20B9AC3D_u -= 1) {
        lv_unitIter = UnitGroupUnitFromEnd(auto20B9AC3D_g, auto20B9AC3D_u);
        if (lv_unitIter == null) { break; }
        UnitSetPropertyFixed(lv_unitIter, c_unitPropLifeMax, 400.0);
        UnitSetPropertyFixed(lv_unitIter, c_unitPropLifePercent, 100.0);
    }
    auto81DF6EDA_g = UnitGroup("BanelingEggNestVoid", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto81DF6EDA_u = UnitGroupCount(auto81DF6EDA_g, c_unitCountAll);
    for (;; auto81DF6EDA_u -= 1) {
        lv_unitIter = UnitGroupUnitFromEnd(auto81DF6EDA_g, auto81DF6EDA_u);
        if (lv_unitIter == null) { break; }
        libNtve_gf_SendActorMessageToUnit(lv_unitIter, "SetMinimapVisibility");
        UnitBehaviorAddPlayer(lv_unitIter, "Harmless", gv_pLAYER_03_ZERG_BULLIES, 1);
    }
    auto65017736_g = UnitGroup("InfestationSpire", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto65017736_u = UnitGroupCount(auto65017736_g, c_unitCountAll);
    for (;; auto65017736_u -= 1) {
        lv_unitIter = UnitGroupUnitFromEnd(auto65017736_g, auto65017736_u);
        if (lv_unitIter == null) { break; }
        libNtve_gf_SendActorMessageToUnit(lv_unitIter, "SetMinimapVisibility");
        UnitBehaviorAddPlayer(lv_unitIter, "Harmless", gv_pLAYER_03_ZERG_BULLIES, 1);
    }
    gv_stasisLocks[1] = UnitFromId(8);
    gv_stasisLocks[2] = UnitFromId(12);
    gv_stasisLocks[3] = UnitFromId(24);
    gv_stasisLocks[4] = UnitFromId(504);
    gv_stasisLocks[5] = UnitFromId(584);
    libVCMI_gf_SetUnitInfoTextCampaign(UnitFromId(2484), StringExternal("Param/Value/2E4F53C0"), StringExternal("Param/Value/F74C7DFD"), StringExternal("Param/Value/6D7BD72E"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init04MusicSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mapMusicTrack = "PPurifier02_Music_Main";
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04MusicSound_Init () {
    gt_Init04MusicSound = TriggerCreate("gt_Init04MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    libLbty_gf_AutoRevealRegion(RegionFromId(66), RegionFromId(66), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(35), RegionFromId(35), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(47), RegionFromId(47), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(60), RegionFromId(60), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(61), RegionFromId(61), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(30), RegionFromId(30), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(31), RegionFromId(31), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(1), RegionFromId(1), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(8), RegionFromId(8), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(17), RegionFromId(17), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(29), RegionFromId(29), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(39), RegionFromId(39), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(22), RegionFromId(22), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(9), RegionFromId(9), gv_pLAYER_01_USER);
    libVCMI_gf_SendActorMessageToDoodadsInRegion("Signal WorkStart", "Purifier_Energy_Generator", RegionFromId(68));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoC1577609_g;
    int autoC1577609_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_megalithStartUpTime = libLotv_gf_DifficultyValueFixed2(120.0, 120.0, 90.0, 90.0);
    gv_stasisUnlockTimeFirstInstance = libLotv_gf_DifficultyValueFixed2(120.0, 120.0, 90.0, 90.0);
    gv_stasisUnlockTime = libLotv_gf_DifficultyValueFixed2(135.0, 135.0, 90.0, 90.0);
    gv_megalithLifeMax = libLotv_gf_DifficultyValueFixed2(1500.0, 1500.0, 1500.0, 1250.0);
    gv_megalithShieldMax = libLotv_gf_DifficultyValueFixed2(1500.0, 1500.0, 1500.0, 1250.0);
    UnitSetPropertyFixed(gv_megalithUnit, c_unitPropLifeMax, gv_megalithLifeMax);
    UnitSetPropertyFixed(gv_megalithUnit, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_megalithUnit, c_unitPropShieldsMax, gv_megalithShieldMax);
    UnitSetPropertyFixed(gv_megalithUnit, c_unitPropShieldsPercent, 100.0);
    UnitSetPropertyFixed(gv_megalithUnit, c_unitPropMovementSpeed, 1.25);
    autoC1577609_g = gv_enemyPlayers;
    autoC1577609_var = -1;
    while (true) {
        autoC1577609_var = PlayerGroupNextPlayer(autoC1577609_g, autoC1577609_var);
        if (autoC1577609_var < 0) { break; }
        if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
            TechTreeUpgradeAddLevel(autoC1577609_var, "zerglingmovementspeed", 1);
            TechTreeUpgradeAddLevel(autoC1577609_var, "hydraliskspeed", 1);
            TechTreeUpgradeAddLevel(autoC1577609_var, "ZergFlyerWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(autoC1577609_var, "ZergMeleeWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(autoC1577609_var, "ZergMissileWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(autoC1577609_var, "ZergGroundArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(autoC1577609_var, "ZergFlyerArmorsLevel1", 1);
        }

        if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
            TechTreeUpgradeAddLevel(autoC1577609_var, "zerglingattackspeed", 1);
            TechTreeAbilityAllow(autoC1577609_var, AbilityCommand("FungalGrowth", 0), true);
            TechTreeAbilityAllow(autoC1577609_var, AbilityCommand("UltraliskCavernResearch", 2), true);
        }

    }
    if ((TechTreeUpgradeCount(gv_pLAYER_01_USER, "SOASuperShield", c_techCountQueuedOrBetter) == 1)) {
        TechTreeUpgradeAddLevel(gv_pLAYER_07_MEGALITH, "SOASuperShield", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_AddMissionTipCampaign("Colossus");
    libVCMI_gf_AddMissionTipCampaign("PurifierMegalith");
    libVCMI_gf_AddMissionTipCampaign("CybrosLocks");
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Zergling", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Baneling", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Roach", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Hydralisk", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Infestor", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Ultralisk", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Mutalisk", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("QueenClassic", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Overlord", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Overseer", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("SpineCrawler", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("SporeCrawler", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("NydusCanal", false, gv_pLAYER_01_USER);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        libVoiC_gf_AddUnitTypeToUnitHelpPanel("Guardian", false, gv_pLAYER_01_USER);
    }

    libVCMI_gf_AddMissionCheat("Stage2", "Skip to the second mission stage", gt_DebugStage2, libVCMI_ge_MissionCheatType_Stage, libVCMI_ge_MissionCheatUIType_Button);
    libVCMI_gf_AddMissionCheat("Stage3", "Skip to the third mission stage", gt_DebugStage3, libVCMI_ge_MissionCheatType_Stage, libVCMI_ge_MissionCheatUIType_Button);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Stage 2
//--------------------------------------------------------------------------------------------------
bool gt_DebugStage2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoFEB9C497_g;
    int autoFEB9C497_u;
    unit autoFEB9C497_var;
    unitgroup autoC83D1088_g;
    int autoC83D1088_u;
    unit autoC83D1088_var;

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitKill(UnitFromId(703));
    TransmissionClearAll();
    TriggerQueueClear(c_triggerQueueRetain);
    autoFEB9C497_g = UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionFromId(32), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFEB9C497_u = UnitGroupCount(autoFEB9C497_g, c_unitCountAll);
    for (;; autoFEB9C497_u -= 1) {
        autoFEB9C497_var = UnitGroupUnitFromEnd(autoFEB9C497_g, autoFEB9C497_u);
        if (autoFEB9C497_var == null) { break; }
        UnitRemove(autoFEB9C497_var);
    }
    autoC83D1088_g = UnitGroup(null, gv_pLAYER_02_ZERG_RED, RegionFromId(15), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC83D1088_u = UnitGroupCount(autoC83D1088_g, c_unitCountAll);
    for (;; autoC83D1088_u -= 1) {
        autoC83D1088_var = UnitGroupUnitFromEnd(autoC83D1088_g, autoC83D1088_u);
        if (autoC83D1088_var == null) { break; }
        UnitRemove(autoC83D1088_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugStage2_Init () {
    gt_DebugStage2 = TriggerCreate("gt_DebugStage2_Func");
    TriggerAddEventChatMessage(gt_DebugStage2, c_playerAny, "S2", true);
    TriggerAddEventChatMessage(gt_DebugStage2, c_playerAny, "Stage2", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Stage 3
//--------------------------------------------------------------------------------------------------
bool gt_DebugStage3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto1ABDCFF6_g;
    int auto1ABDCFF6_u;
    unit auto1ABDCFF6_var;
    unitgroup auto34873962_g;
    int auto34873962_u;
    unit auto34873962_var;
    unitgroup autoFEDF6DAC_g;
    int autoFEDF6DAC_u;
    unit autoFEDF6DAC_var;

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(gt_IntroBaseRegionUnitsDie) == false)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerStop(gt_StartStage02Q);
        TriggerQueueClear(c_triggerQueueRemove);
        libNtve_gf_CreateUnitsAtPoint2(6, "Zealot", 0, gv_pLAYER_01_USER, PointFromId(377));
        libNtve_gf_CreateUnitsAtPoint2(5, "Colossus", 0, gv_pLAYER_01_USER, PointFromId(377));
        libNtve_gf_CreateUnitsAtPoint2(4, "Stalker", 0, gv_pLAYER_01_USER, PointFromId(377));
        libNtve_gf_CreateUnitsAtPoint2(2, "Immortal", 0, gv_pLAYER_01_USER, PointFromId(377));
        UnitSetPosition(gv_megalithUnit, PointFromId(377), false);
        UnitSetHeight(gv_megalithUnit, 4.0, 4.0);
        gv_trackWaypointCurrent = 30;
        TimerPause(gv_stasisUnlockTimer, true);
        TriggerEnable(gt_MegalithStartsMovingQ, false);
        auto1ABDCFF6_g = UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionFromId(30), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto1ABDCFF6_u = UnitGroupCount(auto1ABDCFF6_g, c_unitCountAll);
        for (;; auto1ABDCFF6_u -= 1) {
            auto1ABDCFF6_var = UnitGroupUnitFromEnd(auto1ABDCFF6_g, auto1ABDCFF6_u);
            if (auto1ABDCFF6_var == null) { break; }
            UnitKill(auto1ABDCFF6_var);
        }
        auto34873962_g = UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionFromId(31), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto34873962_u = UnitGroupCount(auto34873962_g, c_unitCountAll);
        for (;; auto34873962_u -= 1) {
            auto34873962_var = UnitGroupUnitFromEnd(auto34873962_g, auto34873962_u);
            if (auto34873962_var == null) { break; }
            UnitKill(auto34873962_var);
        }
        autoFEDF6DAC_g = UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionFromId(39), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoFEDF6DAC_u = UnitGroupCount(autoFEDF6DAC_g, c_unitCountAll);
        for (;; autoFEDF6DAC_u -= 1) {
            autoFEDF6DAC_var = UnitGroupUnitFromEnd(autoFEDF6DAC_g, autoFEDF6DAC_u);
            if (autoFEDF6DAC_var == null) { break; }
            UnitKill(autoFEDF6DAC_var);
        }
        gv_trackPaused = false;
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/3B64DCF0"), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugStage3_Init () {
    gt_DebugStage3 = TriggerCreate("gt_DebugStage3_Func");
    TriggerAddEventChatMessage(gt_DebugStage3, c_playerAny, "S3", true);
    TriggerAddEventChatMessage(gt_DebugStage3, c_playerAny, "Stage3", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - End Timer
//--------------------------------------------------------------------------------------------------
bool gt_DebugEndTimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_stasisUnlockTimer, 1.0, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugEndTimer_Init () {
    gt_DebugEndTimer = TriggerCreate("gt_DebugEndTimer_Func");
    TriggerAddEventChatMessage(gt_DebugEndTimer, c_playerAny, "timesup", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Stage 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_StartStage01Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(gv_megalithUnit, UnitGetPosition(UnitFromId(361)), false);
    UnitSelect(gv_introColossus01, gv_pLAYER_01_USER, true);
    UnitSelect(gv_introColossus02, gv_pLAYER_01_USER, true);
    UnitSelect(gv_introColossus03, gv_pLAYER_01_USER, true);
    libNtve_gf_MakeUnitInvulnerable(gv_introCaveRocks, true);
    UnitSetState(gv_introCaveRocks, c_unitStateTargetable, false);
    UnitSetState(gv_introCaveRocks, c_unitStateHighlightable, false);
    UnitSetState(gv_introCaveRocks, c_unitStateTooltipable, false);
    UnitSetPropertyFixed(UnitFromId(621), c_unitPropLifePercent, 60.0);
    UnitSetPropertyFixed(UnitFromId(621), c_unitPropLifeRegen, 0.0);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        TriggerEnable(gt_AchievementLairHunting, true);
    }

    Wait(2.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveClearOutZergCreate, true, true);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/D1C5AC36"), null, UnitGetPosition(gv_introColossus02));
    libVCMI_gf_CreateObjectivePing(true, PointFromId(159), StringExternal("Param/Value/34E612CA"));
    gv_introSection_Ping = PingLastCreated();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartStage01Q_Init () {
    gt_StartStage01Q = TriggerCreate("gt_StartStage01Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reveal Player Base Location
//--------------------------------------------------------------------------------------------------
bool gt_RevealPlayerBaseLocation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto97574DAD_g;
    int auto97574DAD_u;
    unit auto97574DAD_var;
    const int autoD9D84CC3_n = 2;
    int autoD9D84CC3_i;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(gt_IntroBaseRegionUnitsDie) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto97574DAD_g = UnitGroup("Hydralisk", gv_pLAYER_02_ZERG_RED, RegionFromId(37), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto97574DAD_u = UnitGroupCount(auto97574DAD_g, c_unitCountAll);
    for (;; auto97574DAD_u -= 1) {
        auto97574DAD_var = UnitGroupUnitFromEnd(auto97574DAD_g, auto97574DAD_u);
        if (auto97574DAD_var == null) { break; }
        UnitIssueOrder(auto97574DAD_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1527)), c_orderQueueReplace);
    }
    Wait(4.0, c_timeGame);
    if ((TriggerIsEnabled(gt_IntroBaseRegionUnitsDie) == true)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", c_unitCreateIgnorePlacement, gv_pLAYER_02_ZERG_RED, PointFromId(156));
        gv_introNydus = UnitLastCreated();
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_introNydus), c_animNameDefault, "Birth 01", 0, c_animTimeDefault);
        SoundPlayAtPointForPlayer(SoundLink("NydusWorm_Birth", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(gv_introNydus), 0.0, 100.0, 0.0);
        Wait(4.0, c_timeGame);
        for (autoD9D84CC3_i = 1; autoD9D84CC3_i <= autoD9D84CC3_n; autoD9D84CC3_i += 1) {
            if ((UnitIsAlive(gv_introNydus) == true)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", 0, gv_pLAYER_02_ZERG_RED, PointWithOffset(UnitGetPosition(gv_introNydus), -1.5, -1.5));
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(668)), c_orderQueueReplace);
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_introNydus), c_animNameDefault, "Spell", 0, c_animTimeDefault);
                SoundPlayAtPointForPlayer(SoundLink("NydusWorm_Unload", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(gv_introNydus), 0.0, 100.0, 0.0);
                Wait(0.5, c_timeGame);
            }

        }
    }

    AIToggleBulliesInRegion(gv_pLAYER_02_ZERG_RED, RegionFromId(32), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RevealPlayerBaseLocation_Init () {
    gt_RevealPlayerBaseLocation = TriggerCreate("gt_RevealPlayerBaseLocation_Func");
    TriggerAddEventUnitRegion(gt_RevealPlayerBaseLocation, null, RegionFromId(34), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Base Region Units Die
//--------------------------------------------------------------------------------------------------
bool gt_IntroBaseRegionUnitsDie_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_ZERG_RED, RegionFromId(15), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/262B3438"));
    UnitBehaviorRemove(UnitFromId(606), "ZergBuildingNotOnCreep", 1);
    UnitBehaviorRemove(UnitFromId(607), "ZergBuildingNotOnCreep", 1);
    Wait(2.0, c_timeGame);
    PingDestroy(gv_introSection_Ping);
    TriggerQueueClear(c_triggerQueueKill);
    TriggerExecute(gt_ObjectiveClearOutZergComplete, true, true);
    TriggerExecute(gt_MidQ, true, true);
    TriggerExecute(gt_StartStage02Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroBaseRegionUnitsDie_Init () {
    gt_IntroBaseRegionUnitsDie = TriggerCreate("gt_IntroBaseRegionUnitsDie_Func");
    TriggerAddEventTimePeriodic(gt_IntroBaseRegionUnitsDie, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Explodey Things
//--------------------------------------------------------------------------------------------------
bool gt_ExplodeyThings_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libNtve_gf_KillingPlayer() == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "InfestationSpire") || (UnitGetType(EventUnit()) == "BanelingEggNestVoid")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Zerg, UnitGetPosition(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ExplodeyThings_Init () {
    gt_ExplodeyThings = TriggerCreate("gt_ExplodeyThings_Func");
    TriggerAddEventUnitDied(gt_ExplodeyThings, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Introduce Caves Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroduceCavesQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_MakeUnitInvulnerable(gv_introCaveRocks, false);
    UnitSetState(gv_introCaveRocks, c_unitStateTargetable, true);
    UnitSetState(gv_introCaveRocks, c_unitStateHighlightable, true);
    UnitSetState(gv_introCaveRocks, c_unitStateTooltipable, true);
    TriggerExecute(gt_SpawnZergIntroCave01, true, false);
    TriggerExecute(gt_ZergIntroCaveWanderers, true, false);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionCircle(PointFromId(705), 6.0));
    gv_introCaveRevealer = VisRevealerLastCreated();
    if ((UnitIsAlive(gv_introCaveRocks) == true)) {
        libVCMI_gf_CreateReticleEffectAndTextTagAtPoint(libVCMI_ge_CampaginReticleType_ProtossEnemy, libVCMI_ge_CampaginReticleSize_Large, StringExternal("Param/Value/C5EBB270"), UnitGetPosition(gv_introCaveRocks));
        libHots_gf_StoreActorForUnit(gv_introCaveRocks, 1, libNtve_gf_ActorLastCreated());
        libHots_gf_StoreTextTagForUnit(gv_introCaveRocks, 1, TextTagLastCreated());
        libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(705), 2.0, Color(100.00, 0.00, 0.00));
        UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/774848F4"), null, PointFromId(705));
        Wait(1.0, c_timeReal);
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier02|Line00129", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroduceCavesQ_Init () {
    gt_IntroduceCavesQ = TriggerCreate("gt_IntroduceCavesQ_Func");
    TriggerAddEventUnitRegion(gt_IntroduceCavesQ, null, RegionFromId(62), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Zerg Intro Cave 01
//--------------------------------------------------------------------------------------------------
bool gt_SpawnZergIntroCave01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_unitTypeCycle;
    unit lv_u;

    // Automatic Variable Declarations
    const int auto332DAD86_n = 3;
    int auto332DAD86_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ZergCaveAchievementTracking(gv_introCaveRocks);
    for (auto332DAD86_i = 1; auto332DAD86_i <= auto332DAD86_n; auto332DAD86_i += 1) {
        if (((UnitIsAlive(gv_introCaveRocks) == false) || (ObjectiveGetState(gv_objectiveDestroyZergBase3) == c_objectiveStateCompleted) || (libVCMI_gf_GameIsOver() == true))) {
            TriggerEnable(TriggerGetCurrent(), false);
            libNtve_gf_KillModel(libHots_gf_ActorForUnit(gv_introCaveRocks, 1));
            TextTagDestroy(libHots_gf_TextTagForUnit(gv_introCaveRocks, 1));
            Wait(4.0, c_timeGame);
            VisRevealerDestroy(gv_introCaveRevealer);
            break;
        }

        if (lv_unitTypeCycle >= 4) {
            lv_unitTypeCycle = 1;
        }
        else {
            lv_unitTypeCycle = lv_unitTypeCycle + 1;
        }
        if ((lv_unitTypeCycle == 4)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", 0, gv_pLAYER_03_ZERG_BULLIES, PointFromId(705));
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_03_ZERG_BULLIES, PointFromId(705));
        }
        UnitGroupAdd(gv_introCaveUnits, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(63))), c_orderQueueReplace);
        Wait(1.2, c_timeAI);
        while (!(((UnitGroupCount(gv_introCaveUnits, c_unitCountAlive) < 8) || (UnitIsAlive(gv_introCaveRocks) == false)))) {
            Wait(0.5, c_timeAI);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnZergIntroCave01_Init () {
    gt_SpawnZergIntroCave01 = TriggerCreate("gt_SpawnZergIntroCave01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Intro Cave Wanderers
//--------------------------------------------------------------------------------------------------
bool gt_ZergIntroCaveWanderers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto6701D7EA_g;
    int auto6701D7EA_u;
    unit auto6701D7EA_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((((UnitIsAlive(gv_introCaveRocks) == false) && (libNtve_gf_UnitGroupIsDead(gv_introCaveUnits) == true)) || (ObjectiveGetState(gv_objectiveDestroyZergBase3) == c_objectiveStateCompleted) || (libVCMI_gf_GameIsOver() == true))) {
            return true;
        }

        if ((UnitGroupCount(gv_introCaveUnits, c_unitCountAlive) >= 1)) {
            auto6701D7EA_g = gv_introCaveUnits;
            auto6701D7EA_u = UnitGroupCount(auto6701D7EA_g, c_unitCountAll);
            for (;; auto6701D7EA_u -= 1) {
                auto6701D7EA_var = UnitGroupUnitFromEnd(auto6701D7EA_g, auto6701D7EA_u);
                if (auto6701D7EA_var == null) { break; }
                if ((RandomInt(1, 6) == 1)) {
                    UnitIssueOrder(auto6701D7EA_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(63))), c_orderQueueReplace);
                }

            }
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergIntroCaveWanderers_Init () {
    gt_ZergIntroCaveWanderers = TriggerCreate("gt_ZergIntroCaveWanderers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cave Takes Damage
//--------------------------------------------------------------------------------------------------
bool gt_IntroCaveTakesDamage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(EventUnit(), 1));
    TextTagDestroy(libHots_gf_TextTagForUnit(EventUnit(), 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCaveTakesDamage_Init () {
    gt_IntroCaveTakesDamage = TriggerCreate("gt_IntroCaveTakesDamage_Func");
    TriggerAddEventUnitDamaged(gt_IntroCaveTakesDamage, UnitRefFromUnit(UnitFromId(703)), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Stage 02 Q
//--------------------------------------------------------------------------------------------------
bool gt_StartStage02Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, true);
    libVCMI_gf_StartingWorkersAutoHarvest(RegionFromId(14), null);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/9C4408E4"), null, PlayerStartLocation(gv_pLAYER_01_USER));
    TriggerExecute(gt_MegalithInitiation, true, false);
    TriggerExecute(gt_MonitorFenixSoAPresence, true, false);
    libVCMI_gf_SetWorkerRallyPointsPlayersNexuses(gv_pLAYER_01_USER);
    TriggerExecute(gt_ZergWander, true, false);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveDecryptStasisLocksCreate, true, true);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier02|Line00084", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier02|Line00085", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1) && (gv_roboBayClicked == false)) {
        libVCMI_gf_AttachReticleEffectAndTextTagOnUnit(libVCMI_ge_CampaginReticleType_ProtossMainObjective, libVCMI_ge_CampaginReticleSize_Medium, StringExternal("Param/Value/B40DAAA6"), UnitFromId(123), "Ref_Center");
        libHots_gf_StoreActorForUnit(UnitFromId(123), 1, libNtve_gf_ActorLastCreated());
        libHots_gf_StoreTextTagForUnit(UnitFromId(123), 1, TextTagLastCreated());
    }

    TriggerQueueExit();
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ColossusTipQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartStage02Q_Init () {
    gt_StartStage02Q = TriggerCreate("gt_StartStage02Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Megalith Initiation
//--------------------------------------------------------------------------------------------------
bool gt_MegalithInitiation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoA867F319_n = 30;
    int autoA867F319_i;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsAtPoint2(1, "Colossus", c_unitCreateIgnorePlacement, gv_pLAYER_07_MEGALITH, PointFromId(388));
    gv_megalithUnitDummy = UnitLastCreated();
    libNtve_gf_SendActorMessageToUnit(gv_megalithUnitDummy, "ModelSwap Invisible");
    libNtve_gf_SendActorMessageToUnit(gv_megalithUnitDummy, "SetMinimapVisibility");
    UnitSetState(gv_megalithUnitDummy, c_unitStateHighlightable, false);
    UnitSetState(gv_megalithUnitDummy, c_unitStateTargetable, false);
    UnitSetState(gv_megalithUnitDummy, c_unitStateSelectable, false);
    UnitSetState(gv_megalithUnitDummy, c_unitStateStatusBar, false);
    UnitSetState(gv_megalithUnitDummy, c_unitStateInvulnerable, true);
    UnitAbilityEnable(gv_megalithUnitDummy, "attack", false);
    libNtve_gf_PauseUnit(gv_megalithUnitDummy, true);
    UnitSetState(gv_megalithUnit, c_unitStateStatusBar, true);
    UnitSetOwner(gv_megalithUnit, gv_pLAYER_07_MEGALITH, true);
    UnitSetPosition(gv_megalithUnit, PointFromId(388), false);
    libNtve_gf_MakeUnitFacePoint(gv_megalithUnit, UnitGetPosition(UnitFromId(361)), 0.0);
    gv_nextPathHighlightBegin[0] = 0;
    gv_nextPathHighlightEnd[0] = 7;
    gv_nextPathHighlightBegin[1] = 9;
    gv_nextPathHighlightEnd[1] = 17;
    gv_nextPathHighlightBegin[2] = 19;
    gv_nextPathHighlightEnd[2] = 31;
    gv_nextPathHighlightBegin[3] = 32;
    gv_nextPathHighlightEnd[3] = 44;
    gv_nextPathHighlightBegin[4] = 46;
    gv_nextPathHighlightEnd[4] = 64;
    gv_trackPaused = true;
    TriggerExecute(gt_MoveMegalithTrackUnit, true, false);
    Wait(3.0, c_timeAI);
    TimerStart(gv_megalithActivateTimer, gv_megalithStartUpTime, false, c_timeAI);
    while (!((TimerGetRemaining(gv_megalithActivateTimer) <= 30.0))) {
        Wait(1.0, c_timeAI);
    }
    TriggerExecute(gt_MegalithPreparingToMoveQ, true, false);
    while (!((TimerGetRemaining(gv_megalithActivateTimer) <= 5.0))) {
        Wait(1.0, c_timeAI);
    }
    gf_PingMegalith();
    libVCUI_gf_DisplaySingularBossBarVoidCampaign("Assets\\Textures\\wireframe-protoss-purifiermegalith.dds", StringExternal("Param/Value/4A94B898"), FixedToInt(UnitGetPropertyFixed(gv_megalithUnit, c_unitPropLifeMax, c_unitPropCurrent)));
    libVCUI_gf_SetSingularBossBarBossVoidCampaign(gv_megalithUnit, true);
    for (autoA867F319_i = 1; autoA867F319_i <= autoA867F319_n; autoA867F319_i += 1) {
        Wait(0.125, c_timeGame);
        UnitSetPropertyFixed(gv_megalithUnit, c_unitPropLifePercent, (UnitGetPropertyFixed(gv_megalithUnit, c_unitPropLifePercent, c_unitPropCurrent) + 3.34));
        UnitSetPropertyFixed(gv_megalithUnit, c_unitPropShieldsPercent, (UnitGetPropertyFixed(gv_megalithUnit, c_unitPropShieldsPercent, c_unitPropCurrent) + 3.34));
    }
    UnitSetPropertyFixed(gv_megalithUnit, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_megalithUnit, c_unitPropShieldsPercent, 100.0);
    UnitSetPropertyFixed(gv_megalithUnit, c_unitPropShieldsRegen, UnitGetPropertyFixed(gv_megalithUnit, c_unitPropShieldsRegen, c_unitPropNormal));
    while (!((TimerGetRemaining(gv_megalithActivateTimer) <= 0.0))) {
        Wait(1.0, c_timeAI);
    }
    UnitBehaviorAdd(UnitFromId(361), "MegalithDockComplete", UnitFromId(361), 1);
    Wait(4.0, c_timeAI);
    TriggerExecute(gt_MegalithStartsMovingQ, true, false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(23), 0.0625, false);
    gf_DrawLineBetweenLocks(gv_nextPathHighlightBegin[gv_objectiveDestroyPowerCoreHousingCount], gv_nextPathHighlightEnd[gv_objectiveDestroyPowerCoreHousingCount], gv_stasisLocks[1]);
    Wait(4.0, c_timeAI);
    gv_trackPaused = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MegalithInitiation_Init () {
    gt_MegalithInitiation = TriggerCreate("gt_MegalithInitiation_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Megalith Preparing To Move Q
//--------------------------------------------------------------------------------------------------
bool gt_MegalithPreparingToMoveQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier02|Line00126", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MegalithPreparingToMoveQ_Init () {
    gt_MegalithPreparingToMoveQ = TriggerCreate("gt_MegalithPreparingToMoveQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Megalith Starts Moving Q
//--------------------------------------------------------------------------------------------------
bool gt_MegalithStartsMovingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveMegalithMustSurviveCreate, true, true);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier02|Line00086", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MegalithStartsMovingQ_Init () {
    gt_MegalithStartsMovingQ = TriggerCreate("gt_MegalithStartsMovingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Clicks On Robotics Facility
//--------------------------------------------------------------------------------------------------
bool gt_PlayerClicksOnRoboticsFacility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_roboBayClicked = true;
    if ((libHots_gf_ActorForUnit(UnitFromId(123), 1) != null)) {
        libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitFromId(123), 1));
    }

    if ((libHots_gf_TextTagForUnit(UnitFromId(123), 1) != c_textTagNone)) {
        TextTagDestroy(libHots_gf_TextTagForUnit(UnitFromId(123), 1));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerClicksOnRoboticsFacility_Init () {
    gt_PlayerClicksOnRoboticsFacility = TriggerCreate("gt_PlayerClicksOnRoboticsFacility_Func");
    TriggerAddEventUnitSelected(gt_PlayerClicksOnRoboticsFacility, UnitRefFromUnit(UnitFromId(123)), gv_pLAYER_01_USER, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Move Megalith Track Unit
//--------------------------------------------------------------------------------------------------
bool gt_MoveMegalithTrackUnit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while ((libVCMI_gf_GameIsOver() == false) && (UnitIsAlive(gv_megalithUnit) == true)) {
        if ((libVCMI_gf_PlayerInCinematicModeCampaign() == false)) {
            UnitSetPosition(gv_megalithUnitDummy, UnitGetPosition(gv_megalithUnit), false);
            if ((gv_megalithUnlocking == false)) {
                if ((gv_trackPaused == false)) {
                    if ((DistanceBetweenPoints(UnitGetPosition(gv_megalithUnit), gf_GetMegalithLinePoint(gv_trackWaypointCurrent)) < 0.25) && (gv_trackWaypointCurrent < gv_trackWaypointCount)) {
                        gv_trackWaypointCurrent += 1;
                    }

                    UnitIssueOrder(gv_megalithUnit, OrderTargetingPoint(AbilityCommand("attack", 0), gf_GetMegalithLinePoint(gv_trackWaypointCurrent)), c_orderQueueReplace);
                }
                else {
                    UnitIssueOrder(gv_megalithUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                }
            }

        }

        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoveMegalithTrackUnit_Init () {
    gt_MoveMegalithTrackUnit = TriggerCreate("gt_MoveMegalithTrackUnit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Megalith Is Damaged Q
//--------------------------------------------------------------------------------------------------
bool gt_MegalithIsDamagedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto64FF14C4_val;
    int autoC6BABF1E_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventUnit() == gv_megalithUnit))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_megalithUnit, c_unitPropLifePercent, c_unitPropCurrent) <= 50.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((RegionContainsPoint(RegionCircle(UnitGetPosition(gv_megalithUnit), 20.0), CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
        TriggerQueueEnter();
        UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/7B77EA38"), null, UnitGetPosition(gv_megalithUnit));
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        if (gv_cycleDamageTransmission >= 5) {
            gv_cycleDamageTransmission = 1;
        }
        else {
            gv_cycleDamageTransmission = gv_cycleDamageTransmission + 1;
        }
        autoC6BABF1E_val = gv_cycleDamageTransmission;
        if (autoC6BABF1E_val == 1) {
            libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier02|Line00114", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (autoC6BABF1E_val == 2) {
            libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier02|Line00110", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (autoC6BABF1E_val == 3) {
            libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier02|Line00112", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (autoC6BABF1E_val == 4) {
            libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier02|Line00113", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (autoC6BABF1E_val == 5) {
            libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier02|Line00072", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else {
        }
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else {
        TriggerQueueEnter();
        UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/5D97C31E"), null, UnitGetPosition(gv_megalithUnit));
        libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_megalithUnit), 4.0, Color(100.00, 0.00, 0.00));
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        if (gv_cycleDamageOffCameraTransmission >= 4) {
            gv_cycleDamageOffCameraTransmission = 1;
        }
        else {
            gv_cycleDamageOffCameraTransmission = gv_cycleDamageOffCameraTransmission + 1;
        }
        auto64FF14C4_val = gv_cycleDamageOffCameraTransmission;
        if (auto64FF14C4_val == 1) {
            libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier02|Line00034", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto64FF14C4_val == 2) {
            libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier02|Line00115", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto64FF14C4_val == 3) {
            libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier02|Line00116", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto64FF14C4_val == 4) {
            libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier02|Line00117", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else {
        }
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    Wait(60.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MegalithIsDamagedQ_Init () {
    gt_MegalithIsDamagedQ = TriggerCreate("gt_MegalithIsDamagedQ_Func");
    TriggerAddEventUnitDamaged(gt_MegalithIsDamagedQ, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Destabilizing Stasis Lock Progress Bar
//--------------------------------------------------------------------------------------------------
bool gt_DestabilizingStasisLockProgressBar_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_decryptingDialog;
    int lv_iter;
    int lv_progressMaxValue;
    fixed lv_percentComplete;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_decryptingDialog = c_invalidDialogId;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_objectiveStasisLocksCurrent == 1)) {
        lv_progressMaxValue = FixedToInt(gv_stasisUnlockTimeFirstInstance);
    }
    else {
        lv_progressMaxValue = FixedToInt(gv_stasisUnlockTime);
    }
    libVCUI_gf_DisplayProgressBar(StringExternal("Param/Value/DE5303E7"), 0, lv_progressMaxValue);
    TextExpressionSetToken("Param/Expression/A0605015", "A", StringExternal("Param/Value/692A9F9D"));
    libVCUI_gf_SetProgressBarLabel(TextExpressionAssemble("Param/Expression/A0605015"));
    libVCUI_gf_ShowHideProgressBar(true);
    while ((TimerGetRemaining(gv_stasisUnlockTimer) >= 1)) {
        if ((gv_objectiveStasisLocksCurrent == 1)) {
            lv_percentComplete = (((TimerGetRemaining(gv_stasisUnlockTimer) / gv_stasisUnlockTimeFirstInstance)) * 100.0);
        }
        else {
            lv_percentComplete = (((TimerGetRemaining(gv_stasisUnlockTimer) / gv_stasisUnlockTime)) * 100.0);
        }
        TextExpressionSetToken("Param/Expression/A1CE2150", "A", FixedToText((100.0 - lv_percentComplete), 1));
        libVCUI_gf_SetProgressBarLabel(TextExpressionAssemble("Param/Expression/A1CE2150"));
        libVCUI_gf_SetProgressBarProgress(FixedToInt(TimerGetElapsed(gv_stasisUnlockTimer)));
        Wait(1.0, c_timeAI);
    }
    TextExpressionSetToken("Param/Expression/590526B8", "A", StringExternal("Param/Value/A942753E"));
    libVCUI_gf_SetProgressBarLabel(TextExpressionAssemble("Param/Expression/590526B8"));
    libVCUI_gf_SetProgressBarProgress(FixedToInt(lv_progressMaxValue));
    Wait(3.0, c_timeAI);
    libVCUI_gf_ShowHideProgressBar(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DestabilizingStasisLockProgressBar_Init () {
    gt_DestabilizingStasisLockProgressBar = TriggerCreate("gt_DestabilizingStasisLockProgressBar_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Megalith Completes Destabilization
//--------------------------------------------------------------------------------------------------
bool gt_MegalithCompletesDestabilization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(4.0, c_timeAI);
    gf_MegalithCompletesStasisLock();
    TriggerExecute(gt_StasisLockCompleteQ, true, false);
    Wait(5.0, c_timeAI);
    gv_trackPaused = false;
    if ((gv_objectiveStasisLocksCurrent == 4)) {
        GameSetLighting("DesertWorldNight", 120.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MegalithCompletesDestabilization_Init () {
    gt_MegalithCompletesDestabilization = TriggerCreate("gt_MegalithCompletesDestabilization_Func");
    TriggerAddEventTimer(gt_MegalithCompletesDestabilization, gv_stasisUnlockTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Megalith Reaches Final Location
//--------------------------------------------------------------------------------------------------
bool gt_MegalithReachesFinalLocation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_megalithUnit))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_ChangeUnitDamage(gv_megalithUnit, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeAI);
    }
    PingDestroy(gv_nextTargetPing);
    gv_objectiveStasisLocksCurrent = (gv_objectiveStasisLocksMax - 1);
    gf_MegalithEnterStasisLock();
    TriggerExecute(gt_ObjectiveDecryptStasisLocksUpdate, true, false);
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MegalithReachesFinalLocation_Init () {
    gt_MegalithReachesFinalLocation = TriggerCreate("gt_MegalithReachesFinalLocation_Func");
    TriggerAddEventUnitRegion(gt_MegalithReachesFinalLocation, null, RegionFromId(40), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Megalith Nears Stasis Lock
//--------------------------------------------------------------------------------------------------
bool gt_MegalithNearsStasisLock_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    region autoE4E1F02C_val;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoE4E1F02C_val = EventUnitRegion();
    if (autoE4E1F02C_val == RegionFromId(69)) {
        libNtve_gf_SendActorMessageToUnit(gv_stasisLocks[1], "AnimPlay Birth Birth PlayForever");
    }
    else if (autoE4E1F02C_val == RegionFromId(70)) {
        libNtve_gf_SendActorMessageToUnit(gv_stasisLocks[2], "AnimPlay Birth Birth PlayForever");
    }
    else if (autoE4E1F02C_val == RegionFromId(71)) {
        libNtve_gf_SendActorMessageToUnit(gv_stasisLocks[3], "AnimPlay Birth Birth PlayForever");
    }
    else if (autoE4E1F02C_val == RegionFromId(72)) {
        libNtve_gf_SendActorMessageToUnit(gv_stasisLocks[4], "AnimPlay Birth Birth PlayForever");
    }
    else if (autoE4E1F02C_val == RegionFromId(73)) {
        libNtve_gf_SendActorMessageToUnit(gv_stasisLocks[5], "AnimPlay Birth Birth PlayForever");
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MegalithNearsStasisLock_Init () {
    gt_MegalithNearsStasisLock = TriggerCreate("gt_MegalithNearsStasisLock_Func");
    TriggerAddEventUnitRegion(gt_MegalithNearsStasisLock, UnitRefFromVariable("gv_megalithUnit"), RegionFromId(69), true);
    TriggerAddEventUnitRegion(gt_MegalithNearsStasisLock, UnitRefFromVariable("gv_megalithUnit"), RegionFromId(70), true);
    TriggerAddEventUnitRegion(gt_MegalithNearsStasisLock, UnitRefFromVariable("gv_megalithUnit"), RegionFromId(71), true);
    TriggerAddEventUnitRegion(gt_MegalithNearsStasisLock, UnitRefFromVariable("gv_megalithUnit"), RegionFromId(72), true);
    TriggerAddEventUnitRegion(gt_MegalithNearsStasisLock, UnitRefFromVariable("gv_megalithUnit"), RegionFromId(73), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stasis Lock Almost Destabilized Q
//--------------------------------------------------------------------------------------------------
bool gt_StasisLockAlmostDestabilizedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto1B682A31_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventUnit() == gv_megalithUnit))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((TimerGetRemaining(gv_stasisUnlockTimer) <= 25.0))) {
        Wait(1.0, c_timeAI);
    }
    TriggerQueueEnter();
    if ((TimerGetRemaining(gv_stasisUnlockTimer) >= 15.0)) {
        auto1B682A31_val = gv_objectiveStasisLocksCurrent;
        if (auto1B682A31_val == 1) {
            libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
            libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier02|Line00119", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        }
        else if (auto1B682A31_val == 2) {
            libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
            libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier02|Line00120", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        }
        else if (auto1B682A31_val == 3) {
            libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
            libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier02|Line00133", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        }
        else if (auto1B682A31_val == 4) {
            libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
            libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier02|Line00122", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        }
        else {
        }
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StasisLockAlmostDestabilizedQ_Init () {
    gt_StasisLockAlmostDestabilizedQ = TriggerCreate("gt_StasisLockAlmostDestabilizedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stasis Lock Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_StasisLockCompleteQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto68089BB5_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/4A812C77"), null, UnitGetPosition(gv_megalithUnit));
    gf_PingMegalith();
    Wait(2.0, c_timeAI);
    auto68089BB5_val = gv_objectiveStasisLocksCurrent;
    if (auto68089BB5_val == 1) {
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier02|Line00097", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    }
    else if (auto68089BB5_val == 2) {
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier02|Line00132", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    }
    else if (auto68089BB5_val == 3) {
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier02|Line00099", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    }
    else if (auto68089BB5_val == 4) {
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier02|Line00100", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StasisLockCompleteQ_Init () {
    gt_StasisLockCompleteQ = TriggerCreate("gt_StasisLockCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Megalith Reaches Stasis Lock 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_MegalithReachesStasisLock01Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventUnit() == gv_megalithUnit))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.5, c_timeAI);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeAI);
    }
    gf_MegalithEnterStasisLock();
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/8BCB66CD"), null, UnitGetPosition(gv_megalithUnit));
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier02|Line00093", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MegalithReachesStasisLock01Q_Init () {
    gt_MegalithReachesStasisLock01Q = TriggerCreate("gt_MegalithReachesStasisLock01Q_Func");
    TriggerAddEventUnitRegion(gt_MegalithReachesStasisLock01Q, UnitRefFromVariable("gv_megalithUnit"), RegionFromId(4), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Megalith Reaches Stasis Lock 02 Q
//--------------------------------------------------------------------------------------------------
bool gt_MegalithReachesStasisLock02Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventUnit() == gv_megalithUnit))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.5, c_timeAI);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeAI);
    }
    gf_MegalithEnterStasisLock();
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/9FB9C8C1"), null, UnitGetPosition(gv_megalithUnit));
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier02|Line00094", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    TriggerExecute(gt_BonusObjectiveCreateQ, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MegalithReachesStasisLock02Q_Init () {
    gt_MegalithReachesStasisLock02Q = TriggerCreate("gt_MegalithReachesStasisLock02Q_Func");
    TriggerAddEventUnitRegion(gt_MegalithReachesStasisLock02Q, UnitRefFromVariable("gv_megalithUnit"), RegionFromId(5), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Megalith Reaches Stasis Lock 03 Q
//--------------------------------------------------------------------------------------------------
bool gt_MegalithReachesStasisLock03Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventUnit() == gv_megalithUnit))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.5, c_timeAI);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeAI);
    }
    gf_MegalithEnterStasisLock();
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/AC648E0D"), null, UnitGetPosition(gv_megalithUnit));
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier02|Line00095", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MegalithReachesStasisLock03Q_Init () {
    gt_MegalithReachesStasisLock03Q = TriggerCreate("gt_MegalithReachesStasisLock03Q_Func");
    TriggerAddEventUnitRegion(gt_MegalithReachesStasisLock03Q, null, RegionFromId(6), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Megalith Reaches Stasis Lock 04 Q
//--------------------------------------------------------------------------------------------------
bool gt_MegalithReachesStasisLock04Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventUnit() == gv_megalithUnit))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_masteryAchievementWindowClosed = true;
    Wait(0.5, c_timeAI);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeAI);
    }
    gf_MegalithEnterStasisLock();
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/BF7855FE"), null, UnitGetPosition(gv_megalithUnit));
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier02|Line00096", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MegalithReachesStasisLock04Q_Init () {
    gt_MegalithReachesStasisLock04Q = TriggerCreate("gt_MegalithReachesStasisLock04Q_Func");
    TriggerAddEventUnitRegion(gt_MegalithReachesStasisLock04Q, null, RegionFromId(7), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warn Of Canyon -- Player Enters Q
//--------------------------------------------------------------------------------------------------
bool gt_WarnOfCanyonPlayerEntersQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_sendPlayerFocusedTransmission;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!(((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(29), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("MegalithCutter", c_playerAny, RegionFromId(29), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_CrawlersRootInCanyon, true, false);
    TriggerQueueEnter();
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(29), 12.0, false);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/BF968137"), null, PointFromId(365));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(365), 2.0, Color(100.00, 0.00, 0.00));
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(29), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier02|Line00087", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier02|Line00127", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarnOfCanyonPlayerEntersQ_Init () {
    gt_WarnOfCanyonPlayerEntersQ = TriggerCreate("gt_WarnOfCanyonPlayerEntersQ_Func");
    TriggerAddEventTimePeriodic(gt_WarnOfCanyonPlayerEntersQ, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Crawlers Root In Canyon
//--------------------------------------------------------------------------------------------------
bool gt_CrawlersRootInCanyon_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(988), OrderTargetingPoint(AbilityCommand("SpineCrawlerRoot", 0), PointFromId(992)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(989), OrderTargetingPoint(AbilityCommand("SpineCrawlerRoot", 0), PointFromId(993)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(991), OrderTargetingPoint(AbilityCommand("SporeCrawlerRoot", 0), PointFromId(994)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(990), OrderTargetingPoint(AbilityCommand("SpineCrawlerRoot", 0), PointFromId(995)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CrawlersRootInCanyon_Init () {
    gt_CrawlersRootInCanyon = TriggerCreate("gt_CrawlersRootInCanyon_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Zerg Canyon Rush 01
//--------------------------------------------------------------------------------------------------
bool gt_ActivateZergCanyonRush01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupIssueOrder(UnitGroup(null, gv_pLAYER_03_ZERG_BULLIES, RegionFromId(42), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(21))), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateZergCanyonRush01_Init () {
    gt_ActivateZergCanyonRush01 = TriggerCreate("gt_ActivateZergCanyonRush01_Func");
    TriggerAddEventTimePeriodic(gt_ActivateZergCanyonRush01, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Zerg Canyon Rush 02
//--------------------------------------------------------------------------------------------------
bool gt_ActivateZergCanyonRush02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(41), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupIssueOrder(UnitGroup(null, gv_pLAYER_03_ZERG_BULLIES, RegionFromId(43), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(41))), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateZergCanyonRush02_Init () {
    gt_ActivateZergCanyonRush02 = TriggerCreate("gt_ActivateZergCanyonRush02_Func");
    TriggerAddEventTimePeriodic(gt_ActivateZergCanyonRush02, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate First Caves
//--------------------------------------------------------------------------------------------------
bool gt_ActivateFirstCaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(19), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitKill(UnitFromId(256));
    TriggerExecute(gt_WarnOfCavesQ, true, false);
    Wait(6.0, c_timeAI);
    TriggerExecute(gt_SpawnZergCave01, true, false);
    Wait(8.0, c_timeAI);
    TriggerExecute(gt_SpawnZergCave02, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateFirstCaves_Init () {
    gt_ActivateFirstCaves = TriggerCreate("gt_ActivateFirstCaves_Func");
    TriggerAddEventTimePeriodic(gt_ActivateFirstCaves, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warn Of Caves Q
//--------------------------------------------------------------------------------------------------
bool gt_WarnOfCavesQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(PointFromId(560), 6.0), 5.0, false);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(PointFromId(559), 6.0), 5.0, false);
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(560), 2.0, Color(100.00, 0.00, 0.00));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(559), 2.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/1447D964"), null, PointFromId(560));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/23CD35D5"), null, PointFromId(559));
    Wait(2.0, c_timeAI);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier02|Line00088", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier02|Line00089", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarnOfCavesQ_Init () {
    gt_WarnOfCavesQ = TriggerCreate("gt_WarnOfCavesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Zerg Cave 01
//--------------------------------------------------------------------------------------------------
bool gt_SpawnZergCave01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_linkedRockTower;

    // Automatic Variable Declarations
    int auto99259540_n;
    int auto99259540_i;
    int auto925AC08E_n;
    int auto925AC08E_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitIsAlive(UnitFromId(252)) == false)) {
        return true;
    }

    lv_linkedRockTower = UnitFromId(252);
    gf_ZergCaveAchievementTracking(lv_linkedRockTower);
    auto99259540_n = libLotv_gf_DifficultyValueInt2(2, 2, 3, 4);
    for (auto99259540_i = 1; auto99259540_i <= auto99259540_n; auto99259540_i += 1) {
        if ((UnitIsAlive(lv_linkedRockTower) == false)) {
            TriggerEnable(TriggerGetCurrent(), false);
            return true;
        }

        gf_SpawnUnitsAtPointandAttack(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Zergling", lv_linkedRockTower, gv_pLAYER_03_ZERG_BULLIES, PointFromId(560), 2.0);
        gf_SpawnUnitsAtPointandAttack(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "Zergling", lv_linkedRockTower, gv_pLAYER_03_ZERG_BULLIES, PointFromId(560), 2.0);
        gf_SpawnUnitsAtPointandAttack(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Zergling", lv_linkedRockTower, gv_pLAYER_03_ZERG_BULLIES, PointFromId(560), 2.0);
        gf_SpawnUnitsAtPointandAttack(libLotv_gf_DifficultyValueInt2(1, 1, 1, 3), "Hydralisk", lv_linkedRockTower, gv_pLAYER_03_ZERG_BULLIES, PointFromId(560), 3.0);
        gf_SpawnUnitsAtPointandAttack(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "Zergling", lv_linkedRockTower, gv_pLAYER_03_ZERG_BULLIES, PointFromId(560), 2.0);
        gf_SpawnUnitsAtPointandAttack(libLotv_gf_DifficultyValueInt2(2, 2, 3, 4), "Zergling", lv_linkedRockTower, gv_pLAYER_03_ZERG_BULLIES, PointFromId(560), 2.0);
        gf_SpawnUnitsAtPointandAttack(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "Zergling", lv_linkedRockTower, gv_pLAYER_03_ZERG_BULLIES, PointFromId(560), 2.0);
        gf_SpawnUnitsAtPointandAttack(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Zergling", lv_linkedRockTower, gv_pLAYER_03_ZERG_BULLIES, PointFromId(560), 2.0);
        gf_SpawnUnitsAtPointandAttack(libLotv_gf_DifficultyValueInt2(1, 1, 1, 3), "Hydralisk", lv_linkedRockTower, gv_pLAYER_03_ZERG_BULLIES, PointFromId(560), 10.0);
    }
    auto925AC08E_n = libLotv_gf_DifficultyValueInt2(6, 6, 999, 999);
    for (auto925AC08E_i = 1; auto925AC08E_i <= auto925AC08E_n; auto925AC08E_i += 1) {
        if ((UnitIsAlive(lv_linkedRockTower) == false)) {
            TriggerEnable(TriggerGetCurrent(), false);
            return true;
        }

        gf_SpawnUnitsAtPointandAttack(libLotv_gf_DifficultyValueInt2(2, 2, 3, 4), "Zergling", lv_linkedRockTower, gv_pLAYER_03_ZERG_BULLIES, PointFromId(560), 6.0);
        gf_SpawnUnitsAtPointandAttack(libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), "Roach", lv_linkedRockTower, gv_pLAYER_03_ZERG_BULLIES, PointFromId(560), 7.0);
        gf_SpawnUnitsAtPointandAttack(libLotv_gf_DifficultyValueInt2(2, 2, 3, 4), "Zergling", lv_linkedRockTower, gv_pLAYER_03_ZERG_BULLIES, PointFromId(560), 8.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnZergCave01_Init () {
    gt_SpawnZergCave01 = TriggerCreate("gt_SpawnZergCave01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Zerg Cave 02
//--------------------------------------------------------------------------------------------------
bool gt_SpawnZergCave02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_linkedRockTower;

    // Automatic Variable Declarations
    int auto2581B830_n;
    int auto2581B830_i;
    int autoD07CD036_n;
    int autoD07CD036_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitIsAlive(UnitFromId(22)) == false)) {
        return true;
    }

    lv_linkedRockTower = UnitFromId(22);
    gf_ZergCaveAchievementTracking(lv_linkedRockTower);
    auto2581B830_n = libLotv_gf_DifficultyValueInt2(2, 2, 3, 4);
    for (auto2581B830_i = 1; auto2581B830_i <= auto2581B830_n; auto2581B830_i += 1) {
        if ((UnitIsAlive(lv_linkedRockTower) == false)) {
            TriggerEnable(TriggerGetCurrent(), false);
            return true;
        }

        gf_SpawnUnitsAtPointandAttack(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Zergling", lv_linkedRockTower, gv_pLAYER_03_ZERG_BULLIES, PointFromId(559), 2.0);
        gf_SpawnUnitsAtPointandAttack(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "Zergling", lv_linkedRockTower, gv_pLAYER_03_ZERG_BULLIES, PointFromId(559), 2.0);
        gf_SpawnUnitsAtPointandAttack(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Zergling", lv_linkedRockTower, gv_pLAYER_03_ZERG_BULLIES, PointFromId(559), 2.0);
        gf_SpawnUnitsAtPointandAttack(libLotv_gf_DifficultyValueInt2(1, 1, 1, 3), "Hydralisk", lv_linkedRockTower, gv_pLAYER_03_ZERG_BULLIES, PointFromId(559), 3.0);
        gf_SpawnUnitsAtPointandAttack(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "Zergling", lv_linkedRockTower, gv_pLAYER_03_ZERG_BULLIES, PointFromId(559), 2.0);
        gf_SpawnUnitsAtPointandAttack(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Zergling", lv_linkedRockTower, gv_pLAYER_03_ZERG_BULLIES, PointFromId(559), 2.0);
        gf_SpawnUnitsAtPointandAttack(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "Zergling", lv_linkedRockTower, gv_pLAYER_03_ZERG_BULLIES, PointFromId(559), 2.0);
        gf_SpawnUnitsAtPointandAttack(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Zergling", lv_linkedRockTower, gv_pLAYER_03_ZERG_BULLIES, PointFromId(559), 2.0);
        gf_SpawnUnitsAtPointandAttack(libLotv_gf_DifficultyValueInt2(1, 1, 1, 3), "Hydralisk", lv_linkedRockTower, gv_pLAYER_03_ZERG_BULLIES, PointFromId(559), 8.0);
    }
    autoD07CD036_n = libLotv_gf_DifficultyValueInt2(6, 6, 999, 999);
    for (autoD07CD036_i = 1; autoD07CD036_i <= autoD07CD036_n; autoD07CD036_i += 1) {
        if ((UnitIsAlive(lv_linkedRockTower) == false)) {
            TriggerEnable(TriggerGetCurrent(), false);
            return true;
        }

        gf_SpawnUnitsAtPointandAttack(libLotv_gf_DifficultyValueInt2(2, 2, 3, 4), "Zergling", lv_linkedRockTower, gv_pLAYER_03_ZERG_BULLIES, PointFromId(559), 6.0);
        gf_SpawnUnitsAtPointandAttack(libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), "Hydralisk", lv_linkedRockTower, gv_pLAYER_03_ZERG_BULLIES, PointFromId(559), 7.0);
        gf_SpawnUnitsAtPointandAttack(libLotv_gf_DifficultyValueInt2(2, 2, 3, 4), "Zergling", lv_linkedRockTower, gv_pLAYER_03_ZERG_BULLIES, PointFromId(559), 8.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnZergCave02_Init () {
    gt_SpawnZergCave02 = TriggerCreate("gt_SpawnZergCave02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Second Caves
//--------------------------------------------------------------------------------------------------
bool gt_ActivateSecondCaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(20), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_MoreCavesOfZergQ, true, false);
    Wait(5.0, c_timeAI);
    TriggerExecute(gt_SpawnZergCave04, true, false);
    Wait(2.0, c_timeAI);
    TriggerExecute(gt_SpawnZergCave03, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateSecondCaves_Init () {
    gt_ActivateSecondCaves = TriggerCreate("gt_ActivateSecondCaves_Func");
    TriggerAddEventTimePeriodic(gt_ActivateSecondCaves, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: More Caves Of Zerg! Q
//--------------------------------------------------------------------------------------------------
bool gt_MoreCavesOfZergQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(PointFromId(901), 6.0), 5.0, false);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(PointFromId(562), 6.0), 5.0, false);
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(901), 2.0, Color(100.00, 0.00, 0.00));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(562), 2.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/1672A972"), null, PointFromId(901));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/880514A7"), null, PointFromId(562));
    Wait(2.0, c_timeAI);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier02|Line00090", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoreCavesOfZergQ_Init () {
    gt_MoreCavesOfZergQ = TriggerCreate("gt_MoreCavesOfZergQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Zerg Cave 03
//--------------------------------------------------------------------------------------------------
bool gt_SpawnZergCave03_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_linkedRockTower;

    // Automatic Variable Declarations
    int auto097DD004_n;
    int auto097DD004_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitIsAlive(UnitFromId(358)) == false)) {
        return true;
    }

    lv_linkedRockTower = UnitFromId(358);
    gf_ZergCaveAchievementTracking(lv_linkedRockTower);
    auto097DD004_n = libLotv_gf_DifficultyValueInt2(3, 3, 5, 7);
    for (auto097DD004_i = 1; auto097DD004_i <= auto097DD004_n; auto097DD004_i += 1) {
        if ((UnitIsAlive(lv_linkedRockTower) == false)) {
            TriggerEnable(TriggerGetCurrent(), false);
            return true;
        }

        gf_SpawnUnitsAtPointandAttack(libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), "Zergling", lv_linkedRockTower, gv_pLAYER_03_ZERG_BULLIES, PointFromId(901), 3.0);
        gf_SpawnUnitsAtPointandAttack(libLotv_gf_DifficultyValueInt2(2, 2, 3, 4), "Zergling", lv_linkedRockTower, gv_pLAYER_03_ZERG_BULLIES, PointFromId(901), 4.0);
        gf_SpawnUnitsAtPointandAttack(libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), "Zergling", lv_linkedRockTower, gv_pLAYER_03_ZERG_BULLIES, PointFromId(901), 3.0);
        gf_SpawnUnitsAtPointandAttack(libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), "Hydralisk", lv_linkedRockTower, gv_pLAYER_03_ZERG_BULLIES, PointFromId(901), 6.0);
        gf_SpawnUnitsAtPointandAttack(libLotv_gf_DifficultyValueInt2(2, 2, 3, 4), "Zergling", lv_linkedRockTower, gv_pLAYER_03_ZERG_BULLIES, PointFromId(901), 4.0);
        gf_SpawnUnitsAtPointandAttack(libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), "Zergling", lv_linkedRockTower, gv_pLAYER_03_ZERG_BULLIES, PointFromId(901), 3.0);
        gf_SpawnUnitsAtPointandAttack(libLotv_gf_DifficultyValueInt2(2, 2, 3, 4), "Zergling", lv_linkedRockTower, gv_pLAYER_03_ZERG_BULLIES, PointFromId(901), 4.0);
        gf_SpawnUnitsAtPointandAttack(libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), "Zergling", lv_linkedRockTower, gv_pLAYER_03_ZERG_BULLIES, PointFromId(901), 3.0);
        gf_SpawnUnitsAtPointandAttack(libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), "Hydralisk", lv_linkedRockTower, gv_pLAYER_03_ZERG_BULLIES, PointFromId(901), 12.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnZergCave03_Init () {
    gt_SpawnZergCave03 = TriggerCreate("gt_SpawnZergCave03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Zerg Cave 04
//--------------------------------------------------------------------------------------------------
bool gt_SpawnZergCave04_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_linkedRockTower;

    // Automatic Variable Declarations
    int auto952F36E9_n;
    int auto952F36E9_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitIsAlive(UnitFromId(1004)) == false)) {
        return true;
    }

    lv_linkedRockTower = UnitFromId(1004);
    gf_ZergCaveAchievementTracking(lv_linkedRockTower);
    auto952F36E9_n = libLotv_gf_DifficultyValueInt2(3, 3, 5, 7);
    for (auto952F36E9_i = 1; auto952F36E9_i <= auto952F36E9_n; auto952F36E9_i += 1) {
        if ((UnitIsAlive(lv_linkedRockTower) == false)) {
            TriggerEnable(TriggerGetCurrent(), false);
            return true;
        }

        gf_SpawnUnitsAtPointandAttack(libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), "Zergling", lv_linkedRockTower, gv_pLAYER_03_ZERG_BULLIES, PointFromId(562), 3.0);
        gf_SpawnUnitsAtPointandAttack(libLotv_gf_DifficultyValueInt2(2, 2, 3, 4), "Zergling", lv_linkedRockTower, gv_pLAYER_03_ZERG_BULLIES, PointFromId(562), 4.0);
        gf_SpawnUnitsAtPointandAttack(libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), "Zergling", lv_linkedRockTower, gv_pLAYER_03_ZERG_BULLIES, PointFromId(562), 3.0);
        gf_SpawnUnitsAtPointandAttack(libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), "Hydralisk", lv_linkedRockTower, gv_pLAYER_03_ZERG_BULLIES, PointFromId(562), 6.0);
        gf_SpawnUnitsAtPointandAttack(libLotv_gf_DifficultyValueInt2(2, 2, 3, 4), "Zergling", lv_linkedRockTower, gv_pLAYER_03_ZERG_BULLIES, PointFromId(562), 4.0);
        gf_SpawnUnitsAtPointandAttack(libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), "Zergling", lv_linkedRockTower, gv_pLAYER_03_ZERG_BULLIES, PointFromId(562), 3.0);
        gf_SpawnUnitsAtPointandAttack(libLotv_gf_DifficultyValueInt2(2, 2, 3, 4), "Zergling", lv_linkedRockTower, gv_pLAYER_03_ZERG_BULLIES, PointFromId(562), 4.0);
        gf_SpawnUnitsAtPointandAttack(libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), "Zergling", lv_linkedRockTower, gv_pLAYER_03_ZERG_BULLIES, PointFromId(562), 3.0);
        gf_SpawnUnitsAtPointandAttack(libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), "Hydralisk", lv_linkedRockTower, gv_pLAYER_03_ZERG_BULLIES, PointFromId(562), 12.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnZergCave04_Init () {
    gt_SpawnZergCave04 = TriggerCreate("gt_SpawnZergCave04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Make Rock Tower Invuln After Falling
//--------------------------------------------------------------------------------------------------
bool gt_MakeRockTowerInvulnAfterFalling_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitInvulnerable(EventPlayerEffectUsedUnit(c_effectUnitCaster), true);
    UnitSetState(EventPlayerEffectUsedUnit(c_effectUnitCaster), c_unitStateHighlightable, false);
    UnitSetState(EventPlayerEffectUsedUnit(c_effectUnitCaster), c_unitStateTargetable, false);
    UnitSetState(EventPlayerEffectUsedUnit(c_effectUnitCaster), c_unitStateSelectable, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MakeRockTowerInvulnAfterFalling_Init () {
    gt_MakeRockTowerInvulnAfterFalling = TriggerCreate("gt_MakeRockTowerInvulnAfterFalling_Func");
    TriggerAddEventPlayerEffectUsed(gt_MakeRockTowerInvulnAfterFalling, 0, "RockCrushSearch");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warn Of Zerg Base Q
//--------------------------------------------------------------------------------------------------
bool gt_WarnOfZergBaseQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(33)) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/3D46BC0D"), null, UnitGetPosition(UnitFromId(33)));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(UnitFromId(33)), 12.0, Color(100.00, 0.00, 0.00));
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier02|Line00091", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarnOfZergBaseQ_Init () {
    gt_WarnOfZergBaseQ = TriggerCreate("gt_WarnOfZergBaseQ_Func");
    TriggerAddEventTimePeriodic(gt_WarnOfZergBaseQ, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warn Of Nydus Worms Q
//--------------------------------------------------------------------------------------------------
bool gt_WarnOfNydusWormsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(38), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier02|Line00092", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarnOfNydusWormsQ_Init () {
    gt_WarnOfNydusWormsQ = TriggerCreate("gt_WarnOfNydusWormsQ_Func");
    TriggerAddEventTimePeriodic(gt_WarnOfNydusWormsQ, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nydus Worm Wave 01
//--------------------------------------------------------------------------------------------------
bool gt_NydusWormWave01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(44), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_SpawnNydusWorm01, true, false);
    Wait(3.7, c_timeAI);
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(3, 3, 3, 3), "Zergling", gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm01, libNtve_gf_DifficultyValueFixed(1.5, 1.5, 1.0, 1.0));
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(1, 1, 2, 2), "Zergling", gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm01, libNtve_gf_DifficultyValueFixed(1.5, 1.5, 1.0, 1.0));
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(2, 2, 2, 2), "Zergling", gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm01, 2.0);
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(1, 1, 2, 2), "Zergling", gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm01, libNtve_gf_DifficultyValueFixed(1.5, 1.5, 1.0, 1.0));
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(1, 1, 2, 2), "Zergling", gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm01, 2.0);
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "Zergling", gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm01, libNtve_gf_DifficultyValueFixed(1.5, 1.5, 1.0, 1.0));
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(1, 1, 1, 2), libNtve_gf_DifficultyValueUnitType("Zergling", "Zergling", "Roach", "Roach"), gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm01, libNtve_gf_DifficultyValueFixed(1.5, 1.0, 1.0, 1.0));
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), libNtve_gf_DifficultyValueUnitType("Zergling", "Hydralisk", "Hydralisk", "Hydralisk"), gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm01, 1.0);
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(2, 2, 2, 1), "Zergling", gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm01, 2.0);
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(2, 2, 2, 2), "Zergling", gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm01, 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NydusWormWave01_Init () {
    gt_NydusWormWave01 = TriggerCreate("gt_NydusWormWave01_Func");
    TriggerAddEventTimePeriodic(gt_NydusWormWave01, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nydus Worm Wave 02
//--------------------------------------------------------------------------------------------------
bool gt_NydusWormWave02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(12), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_SpawnNydusWorm02, true, false);
    Wait(3.7, c_timeAI);
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(2, 3, 3, 4), "Zergling", gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm02, libNtve_gf_DifficultyValueFixed(1.5, 1.5, 1.0, 1.0));
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(1, 2, 2, 3), "Zergling", gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm02, 1.0);
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(3, 3, 3, 4), "Zergling", gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm02, 2.0);
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(1, 1, 1, 2), "Zergling", gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm02, libNtve_gf_DifficultyValueFixed(1.5, 1.5, 1.0, 1.0));
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(2, 2, 1, 1), libNtve_gf_DifficultyValueUnitType("Zergling", "Zergling", "Roach", "Baneling"), gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm02, 2.0);
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(1, 2, 3, 3), "Zergling", gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm02, 1.0);
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(1, 1, 2, 1), "Zergling", gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm02, 1.0);
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(1, 1, 1, 2), "Hydralisk", gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm02, libNtve_gf_DifficultyValueFixed(1.5, 1.5, 1.0, 1.0));
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(1, 1, 3, 1), "Zergling", gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm02, 2.0);
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(2, 2, 2, 3), "Zergling", gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm02, libNtve_gf_DifficultyValueFixed(1.5, 1.5, 1.0, 1.0));
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), libNtve_gf_DifficultyValueUnitType("Zergling", "Zergling", "Hydralisk", "Roach"), gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm02, 1.0);
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(2, 2, 1, 2), "Zergling", gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm02, 1.0);
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(1, 1, 1, 2), "Zergling", gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm02, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NydusWormWave02_Init () {
    gt_NydusWormWave02 = TriggerCreate("gt_NydusWormWave02_Func");
    TriggerAddEventTimePeriodic(gt_NydusWormWave02, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nydus Worm Wave 03
//--------------------------------------------------------------------------------------------------
bool gt_NydusWormWave03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(13), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_SpawnNydusWorm03, true, false);
    Wait(3.7, c_timeAI);
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(2, 3, 3, 4), "Zergling", gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm03, libNtve_gf_DifficultyValueFixed(1.5, 1.5, 1.0, 1.0));
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(1, 2, 2, 3), "Zergling", gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm03, 1.0);
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(3, 3, 3, 4), "Zergling", gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm03, 2.0);
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(1, 1, 1, 2), "Zergling", gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm03, libNtve_gf_DifficultyValueFixed(1.5, 1.5, 1.0, 1.0));
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(2, 2, 1, 1), libNtve_gf_DifficultyValueUnitType("Zergling", "Zergling", "Roach", "Baneling"), gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm03, 2.0);
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(1, 2, 3, 3), "Zergling", gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm03, 1.0);
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(1, 1, 2, 1), "Zergling", gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm03, 1.0);
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(1, 1, 1, 2), "Hydralisk", gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm03, libNtve_gf_DifficultyValueFixed(1.5, 1.5, 1.0, 1.0));
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(1, 1, 3, 1), "Zergling", gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm03, 2.0);
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(2, 2, 2, 3), "Zergling", gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm03, libNtve_gf_DifficultyValueFixed(1.5, 1.5, 1.0, 1.0));
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), libNtve_gf_DifficultyValueUnitType("Zergling", "Zergling", "Hydralisk", "Roach"), gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm03, 1.0);
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(2, 2, 1, 2), "Zergling", gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm03, 1.0);
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(1, 1, 1, 2), "Zergling", gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm03, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NydusWormWave03_Init () {
    gt_NydusWormWave03 = TriggerCreate("gt_NydusWormWave03_Func");
    TriggerAddEventTimePeriodic(gt_NydusWormWave03, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Final Worms
//--------------------------------------------------------------------------------------------------
bool gt_ActivateFinalWorms_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(46), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_NydusWormWave04, true, false);
    TriggerExecute(gt_NydusWormWave05, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateFinalWorms_Init () {
    gt_ActivateFinalWorms = TriggerCreate("gt_ActivateFinalWorms_Func");
    TriggerAddEventTimePeriodic(gt_ActivateFinalWorms, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nydus Worm Wave 04
//--------------------------------------------------------------------------------------------------
bool gt_NydusWormWave04_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_SpawnNydusWorm04, true, false);
    Wait(3.7, c_timeAI);
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(2, 3, 3, 4), "Zergling", gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm04, libNtve_gf_DifficultyValueFixed(1.5, 1.5, 1.0, 1.0));
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(1, 2, 2, 3), "Zergling", gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm04, 1.0);
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(3, 3, 3, 4), "Zergling", gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm04, 2.0);
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(1, 1, 1, 2), "Zergling", gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm04, libNtve_gf_DifficultyValueFixed(1.5, 1.5, 1.0, 1.0));
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(2, 2, 1, 1), libNtve_gf_DifficultyValueUnitType("Zergling", "Zergling", "Roach", "Baneling"), gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm04, 2.0);
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(1, 2, 3, 3), "Zergling", gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm04, 1.0);
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(1, 1, 2, 1), "Zergling", gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm04, 1.0);
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(1, 1, 1, 2), "Hydralisk", gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm04, libNtve_gf_DifficultyValueFixed(1.5, 1.5, 1.0, 1.0));
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(1, 1, 3, 1), "Zergling", gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm04, 2.0);
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(2, 2, 2, 3), "Zergling", gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm04, libNtve_gf_DifficultyValueFixed(1.5, 1.5, 1.0, 1.0));
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), libNtve_gf_DifficultyValueUnitType("Zergling", "Zergling", "Hydralisk", "Roach"), gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm04, 1.0);
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(2, 2, 1, 2), "Zergling", gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm04, 1.0);
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(1, 1, 1, 2), "Zergling", gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm04, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NydusWormWave04_Init () {
    gt_NydusWormWave04 = TriggerCreate("gt_NydusWormWave04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nydus Worm Wave 05
//--------------------------------------------------------------------------------------------------
bool gt_NydusWormWave05_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_SpawnNydusWorm05, true, false);
    Wait(3.7, c_timeAI);
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(2, 3, 3, 4), "Zergling", gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm05, libNtve_gf_DifficultyValueFixed(1.5, 1.5, 1.0, 1.0));
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(1, 2, 2, 3), "Zergling", gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm05, 1.0);
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(3, 3, 3, 4), "Zergling", gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm05, 2.0);
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(1, 1, 1, 2), "Zergling", gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm05, libNtve_gf_DifficultyValueFixed(1.5, 1.5, 1.0, 1.0));
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(2, 2, 1, 1), libNtve_gf_DifficultyValueUnitType("Zergling", "Zergling", "Roach", "Baneling"), gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm05, 2.0);
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(1, 2, 3, 3), "Zergling", gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm05, 1.0);
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(1, 1, 2, 1), "Zergling", gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm05, 1.0);
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(1, 1, 1, 2), "Hydralisk", gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm05, libNtve_gf_DifficultyValueFixed(1.5, 1.5, 1.0, 1.0));
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(1, 1, 3, 1), "Zergling", gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm05, 2.0);
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(2, 2, 2, 3), "Zergling", gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm05, libNtve_gf_DifficultyValueFixed(1.5, 1.5, 1.0, 1.0));
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), libNtve_gf_DifficultyValueUnitType("Zergling", "Zergling", "Hydralisk", "Roach"), gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm05, 1.0);
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(2, 2, 1, 2), "Zergling", gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm05, 1.0);
    gf_SpawnNydusUnitsandAttackPlayer(libNtve_gf_DifficultyValueInt(1, 1, 1, 2), "Zergling", gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorm05, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NydusWormWave05_Init () {
    gt_NydusWormWave05 = TriggerCreate("gt_NydusWormWave05_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Nydus Worm 01
//--------------------------------------------------------------------------------------------------
bool gt_SpawnNydusWorm01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_nydusWorm01) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_point = RegionGetCenter(RegionFromId(28));
    if ((RegionContainsPoint(RegionCircle(lv_point, 10.0), CameraGetTarget(gv_pLAYER_01_USER)) == true) && (libVCMI_gf_GameIsOver() == false)) {
        CameraShakeStart(gv_pLAYER_01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.07, 2.0, 100.0, 3.0);
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, gv_pLAYER_03_ZERG_BULLIES, lv_point);
    gv_nydusWorm01 = UnitLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_nydusWorm01), c_animNameDefault, "Birth 02", c_animFlagNonLooping, c_animTimeDefault);
    SoundPlayOnUnit(SoundLink("NydusWorm_Birth", -1), PlayerGroupAll(), gv_nydusWorm01, 0.0, 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnNydusWorm01_Init () {
    gt_SpawnNydusWorm01 = TriggerCreate("gt_SpawnNydusWorm01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Nydus Worm 02
//--------------------------------------------------------------------------------------------------
bool gt_SpawnNydusWorm02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_nydusWorm02) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_point = RegionGetCenter(RegionFromId(10));
    if ((RegionContainsPoint(RegionCircle(lv_point, 10.0), CameraGetTarget(gv_pLAYER_01_USER)) == true) && (libVCMI_gf_GameIsOver() == false)) {
        CameraShakeStart(gv_pLAYER_01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.07, 2.0, 100.0, 3.0);
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, gv_pLAYER_03_ZERG_BULLIES, lv_point);
    gv_nydusWorm02 = UnitLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_nydusWorm02), c_animNameDefault, "Birth 02", c_animFlagNonLooping, c_animTimeDefault);
    SoundPlayOnUnit(SoundLink("NydusWorm_Birth", -1), PlayerGroupAll(), gv_nydusWorm02, 0.0, 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnNydusWorm02_Init () {
    gt_SpawnNydusWorm02 = TriggerCreate("gt_SpawnNydusWorm02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Nydus Worm 03
//--------------------------------------------------------------------------------------------------
bool gt_SpawnNydusWorm03_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_nydusWorm03) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_point = RegionGetCenter(RegionFromId(16));
    if ((RegionContainsPoint(RegionCircle(lv_point, 10.0), CameraGetTarget(gv_pLAYER_01_USER)) == true) && (libVCMI_gf_GameIsOver() == false)) {
        CameraShakeStart(gv_pLAYER_01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.07, 2.0, 100.0, 3.0);
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, gv_pLAYER_03_ZERG_BULLIES, lv_point);
    gv_nydusWorm03 = UnitLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_nydusWorm03), c_animNameDefault, "Birth 02", c_animFlagNonLooping, c_animTimeDefault);
    SoundPlayOnUnit(SoundLink("NydusWorm_Birth", -1), PlayerGroupAll(), gv_nydusWorm03, 0.0, 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnNydusWorm03_Init () {
    gt_SpawnNydusWorm03 = TriggerCreate("gt_SpawnNydusWorm03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Nydus Worm 04
//--------------------------------------------------------------------------------------------------
bool gt_SpawnNydusWorm04_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_nydusWorm04) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_point = RegionGetCenter(RegionFromId(45));
    if ((RegionContainsPoint(RegionCircle(lv_point, 10.0), CameraGetTarget(gv_pLAYER_01_USER)) == true) && (libVCMI_gf_GameIsOver() == false)) {
        CameraShakeStart(gv_pLAYER_01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.07, 2.0, 100.0, 3.0);
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, gv_pLAYER_03_ZERG_BULLIES, lv_point);
    gv_nydusWorm04 = UnitLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_nydusWorm04), c_animNameDefault, "Birth 02", c_animFlagNonLooping, c_animTimeDefault);
    SoundPlayOnUnit(SoundLink("NydusWorm_Birth", -1), PlayerGroupAll(), gv_nydusWorm04, 0.0, 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnNydusWorm04_Init () {
    gt_SpawnNydusWorm04 = TriggerCreate("gt_SpawnNydusWorm04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Nydus Worm 05
//--------------------------------------------------------------------------------------------------
bool gt_SpawnNydusWorm05_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_nydusWorm05) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_point = RegionGetCenter(RegionFromId(48));
    if ((RegionContainsPoint(RegionCircle(lv_point, 10.0), CameraGetTarget(gv_pLAYER_01_USER)) == true) && (libVCMI_gf_GameIsOver() == false)) {
        CameraShakeStart(gv_pLAYER_01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.07, 2.0, 100.0, 3.0);
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, gv_pLAYER_03_ZERG_BULLIES, lv_point);
    gv_nydusWorm05 = UnitLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_nydusWorm05), c_animNameDefault, "Birth 02", c_animFlagNonLooping, c_animTimeDefault);
    SoundPlayOnUnit(SoundLink("NydusWorm_Birth", -1), PlayerGroupAll(), gv_nydusWorm05, 0.0, 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnNydusWorm05_Init () {
    gt_SpawnNydusWorm05 = TriggerCreate("gt_SpawnNydusWorm05_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Monitor Fenix SoA Presence
//--------------------------------------------------------------------------------------------------
bool gt_MonitorFenixSoAPresence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libVoiC_gf_SpearofAdunAbilityIsEnabled("GPTier4Power3") == false)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    else {
        while (!((UnitGroupCount(UnitGroup("FenixSOA", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1))) {
            Wait(1.0, c_timeGame);
        }
        Wait(5.0, c_timeGame);
        TriggerExecute(gt_FenixArrivesonEndionQ, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MonitorFenixSoAPresence_Init () {
    gt_MonitorFenixSoAPresence = TriggerCreate("gt_MonitorFenixSoAPresence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fenix Arrives on Endion Q
//--------------------------------------------------------------------------------------------------
bool gt_FenixArrivesonEndionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto67A5EBC4_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_contextShouts += 1;
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    auto67A5EBC4_val = gv_contextShouts;
    if (auto67A5EBC4_val == 1) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier02|Line00033", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto67A5EBC4_val == 2) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier02|Line00035", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    if ((gv_contextShouts == 1)) {
        Wait(60.0, c_timeGame);
        TriggerEnable(gt_MonitorFenixSoAPresence, true);
        TriggerExecute(gt_MonitorFenixSoAPresence, true, false);
    }
    else {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FenixArrivesonEndionQ_Init () {
    gt_FenixArrivesonEndionQ = TriggerCreate("gt_FenixArrivesonEndionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Enters Bonus Create (Proximity Activation)
//--------------------------------------------------------------------------------------------------
bool gt_UnitEntersBonusCreateProximityActivation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!(((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(53), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(54), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_BonusObjectiveCreateQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitEntersBonusCreateProximityActivation_Init () {
    gt_UnitEntersBonusCreateProximityActivation = TriggerCreate("gt_UnitEntersBonusCreateProximityActivation_Func");
    TriggerAddEventTimePeriodic(gt_UnitEntersBonusCreateProximityActivation, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective Create Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveCreateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveDestroyPowerCoreHousingCreate, true, true);
    libVCMI_gf_CreateObjectivePing(false, UnitGetPosition(gv_bonus_PowerCoreHousing01), StringExternal("Param/Value/92CCF44E"));
    libHots_gf_StorePingForUnit(gv_bonus_PowerCoreHousing01, 1, PingLastCreated());
    libVCMI_gf_AttachReticleEffectAndTextTagOnUnit(libVCMI_ge_CampaginReticleType_ProtossBonusObjective, libVCMI_ge_CampaginReticleSize_Medium, StringExternal("Param/Value/24043184"), gv_bonus_PowerCoreHousing01, "Ref_Center");
    libHots_gf_StoreActorForUnit(gv_bonus_PowerCoreHousing01, 1, libNtve_gf_ActorLastCreated());
    libHots_gf_StoreTextTagForUnit(gv_bonus_PowerCoreHousing01, 1, TextTagLastCreated());
    Wait(0.5, c_timeGame);
    libVCMI_gf_CreateObjectivePing(false, UnitGetPosition(gv_bonus_PowerCoreHousing02), StringExternal("Param/Value/BDACF348"));
    libHots_gf_StorePingForUnit(gv_bonus_PowerCoreHousing02, 1, PingLastCreated());
    libVCMI_gf_AttachReticleEffectAndTextTagOnUnit(libVCMI_ge_CampaginReticleType_ProtossBonusObjective, libVCMI_ge_CampaginReticleSize_Medium, StringExternal("Param/Value/948E663F"), gv_bonus_PowerCoreHousing02, "Ref_Center");
    libHots_gf_StoreActorForUnit(gv_bonus_PowerCoreHousing02, 1, libNtve_gf_ActorLastCreated());
    libHots_gf_StoreTextTagForUnit(gv_bonus_PowerCoreHousing02, 1, TextTagLastCreated());
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier02|Line00040", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier02|Line00063", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveCreateQ_Init () {
    gt_BonusObjectiveCreateQ = TriggerCreate("gt_BonusObjectiveCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Power Core Housing Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_PowerCoreHousingDestroyedQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_triggeringUnitLoc;

    // Automatic Variable Declarations
    unit auto2E11B1EE_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_triggeringUnitLoc = UnitGetPosition(EventUnit());
    gv_objectiveDestroyPowerCoreHousingCount += 1;
    TriggerExecute(gt_ObjectiveDestroyPowerCoreHousingUpdate, true, false);
    auto2E11B1EE_val = EventUnit();
    if (auto2E11B1EE_val == gv_bonus_PowerCoreHousing01) {
        libVCMI_gf_DisplayMissionObjectiveRewardFloatingText(UnitGetPosition(EventUnit()), "PPurifier02Bonus01");
        VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(EventUnit()), 6.0), 6.0, false);
        PingDestroy(libHots_gf_PingStoredForUnit(gv_bonus_PowerCoreHousing01, 1));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "RawSolarite", c_unitCreateIgnorePlacement, gv_pLAYER_06_POWER_CORE, UnitGetPosition(EventUnit()));
        UnitBehaviorAddPlayer(UnitLastCreated(), "ObjectiveCollectionBeam", gv_pLAYER_06_POWER_CORE, 1);
    }
    else if (auto2E11B1EE_val == gv_bonus_PowerCoreHousing02) {
        libVCMI_gf_DisplayMissionObjectiveRewardFloatingText(UnitGetPosition(EventUnit()), "PPurifier02Bonus01");
        VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(EventUnit()), 6.0), 6.0, false);
        PingDestroy(libHots_gf_PingStoredForUnit(gv_bonus_PowerCoreHousing02, 1));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "RawSolarite", c_unitCreateIgnorePlacement, gv_pLAYER_06_POWER_CORE, UnitGetPosition(EventUnit()));
        UnitBehaviorAddPlayer(UnitLastCreated(), "ObjectiveCollectionBeam", gv_pLAYER_06_POWER_CORE, 1);
    }
    else {
    }
    if ((gv_objectiveDestroyPowerCoreHousingCount < gv_objectiveDestroyPowerCoreHousingMax)) {
        TriggerQueueEnter();
        if ((RegionContainsPoint(RegionCircle(lv_triggeringUnitLoc, 20.0), CameraGetTarget(gv_pLAYER_01_USER)) == false)) {
            MinimapPing(PlayerGroupAll(), lv_triggeringUnitLoc, 2.0, Color(0.00, 100.00, 0.00));
        }

        UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/D8C8951D"), null, lv_triggeringUnitLoc);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier02|Line00064", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_ObjectiveDestroyPowerCoreHousingComplete, true, false);
        TriggerQueueEnter();
        if ((RegionContainsPoint(RegionCircle(lv_triggeringUnitLoc, 20.0), CameraGetTarget(gv_pLAYER_01_USER)) == false)) {
            MinimapPing(PlayerGroupAll(), lv_triggeringUnitLoc, 2.0, Color(0.00, 100.00, 0.00));
        }

        UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/995360AB"), null, lv_triggeringUnitLoc);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier02|Line00065", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PowerCoreHousingDestroyedQ_Init () {
    gt_PowerCoreHousingDestroyedQ = TriggerCreate("gt_PowerCoreHousingDestroyedQ_Func");
    TriggerAddEventUnitDied(gt_PowerCoreHousingDestroyedQ, UnitRefFromVariable("gv_bonus_PowerCoreHousing01"));
    TriggerAddEventUnitDied(gt_PowerCoreHousingDestroyedQ, UnitRefFromVariable("gv_bonus_PowerCoreHousing02"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Power Core Housing Takes Damage
//--------------------------------------------------------------------------------------------------
bool gt_PowerCoreHousingTakesDamage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_KillModel(libHots_gf_ActorForUnit(EventUnit(), 1));
    TextTagDestroy(libHots_gf_TextTagForUnit(EventUnit(), 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PowerCoreHousingTakesDamage_Init () {
    gt_PowerCoreHousingTakesDamage = TriggerCreate("gt_PowerCoreHousingTakesDamage_Func");
    TriggerAddEventUnitDamaged(gt_PowerCoreHousingTakesDamage, UnitRefFromVariable("gv_bonus_PowerCoreHousing01"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(gt_PowerCoreHousingTakesDamage, UnitRefFromVariable("gv_bonus_PowerCoreHousing02"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    cai_startall();
    cai_runall();
    libVCMI_gf_EnableVoidCampaignAIBehaviorForAllPlayers();
    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
        TriggerExecute(gt_AIUpgradesNormal, true, false);
    }
    else {
        TriggerExecute(gt_AIUpgradesHard, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Resources
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveResources_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto85041668_g;
    int auto85041668_var;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto85041668_g = gv_enemyPlayers;
    auto85041668_var = -1;
    while (true) {
        auto85041668_var = PlayerGroupNextPlayer(auto85041668_g, auto85041668_var);
        if (auto85041668_var < 0) { break; }
        PlayerModifyPropertyInt(auto85041668_var, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
        PlayerModifyPropertyInt(auto85041668_var, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveResources_Init () {
    gt_AIGiveResources = TriggerCreate("gt_AIGiveResources_Func");
    TriggerAddEventTimePeriodic(gt_AIGiveResources, 10.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrades (Normal)
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradesNormal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoE7BEC9E5_g;
    int autoE7BEC9E5_var;
    playergroup autoC4D6572C_g;
    int autoC4D6572C_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(720.0, c_timeAI);
    autoE7BEC9E5_g = gv_enemyPlayers;
    autoE7BEC9E5_var = -1;
    while (true) {
        autoE7BEC9E5_var = PlayerGroupNextPlayer(autoE7BEC9E5_g, autoE7BEC9E5_var);
        if (autoE7BEC9E5_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoE7BEC9E5_var, "ZergFlyerWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(autoE7BEC9E5_var, "ZergMeleeWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(autoE7BEC9E5_var, "ZergMissileWeaponsLevel1", 1);
    }
    Wait(360.0, c_timeAI);
    autoC4D6572C_g = gv_enemyPlayers;
    autoC4D6572C_var = -1;
    while (true) {
        autoC4D6572C_var = PlayerGroupNextPlayer(autoC4D6572C_g, autoC4D6572C_var);
        if (autoC4D6572C_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoC4D6572C_var, "ZergGroundArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(autoC4D6572C_var, "ZergFlyerArmorsLevel1", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradesNormal_Init () {
    gt_AIUpgradesNormal = TriggerCreate("gt_AIUpgradesNormal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrades (Hard)
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradesHard_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto482000CC_g;
    int auto482000CC_var;
    playergroup auto3D91B63E_g;
    int auto3D91B63E_var;
    playergroup auto2F160AD9_g;
    int auto2F160AD9_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(360.0, c_timeAI);
    auto482000CC_g = gv_enemyPlayers;
    auto482000CC_var = -1;
    while (true) {
        auto482000CC_var = PlayerGroupNextPlayer(auto482000CC_g, auto482000CC_var);
        if (auto482000CC_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto482000CC_var, "ZergFlyerWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(auto482000CC_var, "ZergMeleeWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(auto482000CC_var, "ZergMissileWeaponsLevel2", 1);
    }
    Wait(360.0, c_timeAI);
    auto3D91B63E_g = gv_enemyPlayers;
    auto3D91B63E_var = -1;
    while (true) {
        auto3D91B63E_var = PlayerGroupNextPlayer(auto3D91B63E_g, auto3D91B63E_var);
        if (auto3D91B63E_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto3D91B63E_var, "ZergGroundArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(auto3D91B63E_var, "ZergFlyerArmorsLevel2", 1);
    }
    Wait(360.0, c_timeAI);
    auto2F160AD9_g = gv_enemyPlayers;
    auto2F160AD9_var = -1;
    while (true) {
        auto2F160AD9_var = PlayerGroupNextPlayer(auto2F160AD9_g, auto2F160AD9_var);
        if (auto2F160AD9_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto2F160AD9_var, "ZergFlyerWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(auto2F160AD9_var, "ZergMeleeWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(auto2F160AD9_var, "ZergMissileWeaponsLevel3", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradesHard_Init () {
    gt_AIUpgradesHard = TriggerCreate("gt_AIUpgradesHard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 01 Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave01TransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/85939519"), null, PointFromId(593));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(593), 3.0, Color(100.00, 0.00, 0.00));
    SoundPlayForPlayer(SoundLink("Event_Expedition03_ProtossAlarm", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeAI);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier02|Line00101", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave01TransmissionQ_Init () {
    gt_AttackWave01TransmissionQ = TriggerCreate("gt_AttackWave01TransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hatchery Dies
//--------------------------------------------------------------------------------------------------
bool gt_HatcheryDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto6B751CCC_g;
    int auto6B751CCC_u;
    unit auto6B751CCC_var;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Hatchery") || (UnitGetType(EventUnit()) == "Lair") || (UnitGetType(EventUnit()) == "Hive")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto6B751CCC_g = UnitGroup("Larva", UnitGetOwner(EventUnit()), RegionCircle(UnitGetPosition(EventUnit()), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6B751CCC_u = UnitGroupCount(auto6B751CCC_g, c_unitCountAll);
    for (;; auto6B751CCC_u -= 1) {
        auto6B751CCC_var = UnitGroupUnitFromEnd(auto6B751CCC_g, auto6B751CCC_u);
        if (auto6B751CCC_var == null) { break; }
        UnitKill(auto6B751CCC_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HatcheryDies_Init () {
    gt_HatcheryDies = TriggerCreate("gt_HatcheryDies_Func");
    TriggerAddEventUnitDied(gt_HatcheryDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Wander
//--------------------------------------------------------------------------------------------------
bool gt_ZergWander_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_region;
    int lv_i;

    // Automatic Variable Declarations
    const int autoC800B24A_ae = 9;
    const int autoC800B24A_ai = 1;
    unitgroup auto44AAC7FE_g;
    int auto44AAC7FE_u;
    unit auto44AAC7FE_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while ((libVCMI_gf_GameIsOver() == false)) {
        if ((libVCMI_gf_PlayerInCinematicModeCampaign() == false)) {
            lv_i = 1;
            for ( ; ( (autoC800B24A_ai >= 0 && lv_i <= autoC800B24A_ae) || (autoC800B24A_ai < 0 && lv_i >= autoC800B24A_ae) ) ; lv_i += autoC800B24A_ai ) {
                lv_region = RegionFromName(("Zerg Wander Region 0" + IntToString(lv_i)));
                auto44AAC7FE_g = UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, lv_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto44AAC7FE_u = UnitGroupCount(auto44AAC7FE_g, c_unitCountAll);
                for (;; auto44AAC7FE_u -= 1) {
                    auto44AAC7FE_var = UnitGroupUnitFromEnd(auto44AAC7FE_g, auto44AAC7FE_u);
                    if (auto44AAC7FE_var == null) { break; }
                    if ((RandomInt(1, 8) == 1) && (UnitGetType(auto44AAC7FE_var) == "Zergling") && (UnitGroupHasUnit(UnitGroupIdle(UnitGetOwner(auto44AAC7FE_var), false), auto44AAC7FE_var) == true)) {
                        libNtve_gf_AICast(auto44AAC7FE_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(lv_region)));
                    }

                }
            }
        }

        Wait(4.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergWander_Init () {
    gt_ZergWander = TriggerCreate("gt_ZergWander_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Units Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatUnitsDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_introColossus01) == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_introColossus02) == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_introColossus03) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libVCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libVCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/1FE89109"), libVCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatUnitsDead_Init () {
    gt_DefeatUnitsDead = TriggerCreate("gt_DefeatUnitsDead_Func");
    TriggerAddEventTimePeriodic(gt_DefeatUnitsDead, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libVCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libVCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/32F73C2C"), libVCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerEnable(gt_DefeatBaseDead, false);
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Primary Objective Failed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatPrimaryObjectiveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((EventUnit() == gv_megalithUnit))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveMegalithMustSurviveFailed, true, false);
    TriggerExecute(gt_ObjectiveDecryptStasisLocksFailed, true, false);
    libVCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libVCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/527504F2"), libVCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatPrimaryObjectiveFailed_Init () {
    gt_DefeatPrimaryObjectiveFailed = TriggerCreate("gt_DefeatPrimaryObjectiveFailed_Func");
    TriggerAddEventUnitDied(gt_DefeatPrimaryObjectiveFailed, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveDecryptStasisLocksComplete, true, false);
    TriggerExecute(gt_ObjectiveMegalithMustSurviveComplete, true, false);
    Wait(5.0, c_timeGame);
    libVCMI_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (gv_achievementNonProbesorColossusBuilt == false)) {
        libVoiC_gf_CampaignAwardAchievement("Anniversary_PPurifier02", gv_pLAYER_01_USER);
    }

    libVoiC_gf_CampaignAwardAchievement("PPurifier02_1", gv_pLAYER_01_USER);
    VictoryPanelAddTrackedStatistic("UnitsTotalCount");
    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/D5AAED53"), IntToText(FixedToInt(gv_megalithDamageTaken)));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/735DB81F"), IntToText(gv_zergStructuresRemaining));
    libVCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    libVCMI_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stat: Megalith Damage Taken
//--------------------------------------------------------------------------------------------------
bool gt_StatMegalithDamageTaken_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_megalithUnit))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_megalithDamageTaken += EventUnitDamageAmount();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatMegalithDamageTaken_Init () {
    gt_StatMegalithDamageTaken = TriggerCreate("gt_StatMegalithDamageTaken_Func");
    TriggerAddEventUnitDamaged(gt_StatMegalithDamageTaken, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Destroy Zerg Structures
//--------------------------------------------------------------------------------------------------
bool gt_AchievementDestroyZergStructures_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_zergStructureGroup;

    // Automatic Variable Declarations
    unitgroup auto0258A7AA_g;
    int auto0258A7AA_u;
    unit auto0258A7AA_var;

    // Variable Initialization
    lv_zergStructureGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(gv_enemyPlayers, UnitGetOwner(EventUnit())) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto0258A7AA_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0258A7AA_u = UnitGroupCount(auto0258A7AA_g, c_unitCountAll);
    for (;; auto0258A7AA_u -= 1) {
        auto0258A7AA_var = UnitGroupUnitFromEnd(auto0258A7AA_g, auto0258A7AA_u);
        if (auto0258A7AA_var == null) { break; }
        if ((PlayerGroupHasPlayer(gv_enemyPlayers, UnitGetOwner(auto0258A7AA_var)) == true) && (UnitGetType(auto0258A7AA_var) != "InfestationSpire") && (UnitGetType(auto0258A7AA_var) != "CreepPodsUnit") && (UnitGetType(auto0258A7AA_var) != "BanelingEggNestVoid")) {
            UnitGroupAdd(lv_zergStructureGroup, auto0258A7AA_var);
        }

    }
    gv_zergStructuresRemaining = UnitGroupCount(lv_zergStructureGroup, c_unitCountAlive);
    if ((gv_zergStructuresRemaining == 0) && (libLotv_gf_DifficultyValueInt2(0, 1, 1, 1) == 1)) {
        TriggerEnable(TriggerGetCurrent(), false);
        libVoiC_gf_CampaignAwardAchievement("PPurifier02_3", gv_pLAYER_01_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementDestroyZergStructures_Init () {
    gt_AchievementDestroyZergStructures = TriggerCreate("gt_AchievementDestroyZergStructures_Func");
    TriggerAddEventUnitDied(gt_AchievementDestroyZergStructures, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Zerg Cave Sealed
//--------------------------------------------------------------------------------------------------
bool gt_AchievementZergCaveSealed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetCustomValue(EventUnit(), 0) > 0.0) || (UnitGetCustomValue(EventUnit(), 1) == 0.0))) {
        gv_achievementZergCavesSealed += 1;
        if ((gv_achievementZergCavesSealed >= 5)) {
            libVoiC_gf_CampaignAwardAchievement("PPurifier02_2", 1);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementZergCaveSealed_Init () {
    gt_AchievementZergCaveSealed = TriggerCreate("gt_AchievementZergCaveSealed_Func");
    TriggerAddEventUnitDied(gt_AchievementZergCaveSealed, UnitRefFromUnit(UnitFromId(703)));
    TriggerAddEventUnitDied(gt_AchievementZergCaveSealed, UnitRefFromUnit(UnitFromId(252)));
    TriggerAddEventUnitDied(gt_AchievementZergCaveSealed, UnitRefFromUnit(UnitFromId(22)));
    TriggerAddEventUnitDied(gt_AchievementZergCaveSealed, UnitRefFromUnit(UnitFromId(1004)));
    TriggerAddEventUnitDied(gt_AchievementZergCaveSealed, UnitRefFromUnit(UnitFromId(358)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Lair Hunting
//--------------------------------------------------------------------------------------------------
bool gt_AchievementLairHunting_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup("Lair", gv_pLAYER_02_ZERG_RED, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("Lair", gv_pLAYER_03_ZERG_BULLIES, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("Lair", gv_pLAYER_04_ZERG_GREEN, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1) && (gv_masteryAchievementWindowClosed == false)) {
        libVoiC_gf_CampaignAwardAchievement("Mastery_Purifier02", gv_pLAYER_01_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementLairHunting_Init () {
    gt_AchievementLairHunting = TriggerCreate("gt_AchievementLairHunting_Func");
    TriggerEnable(gt_AchievementLairHunting, false);
    TriggerAddEventUnitDied(gt_AchievementLairHunting, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - Victory with only Probes and Colossus
//--------------------------------------------------------------------------------------------------
bool gt_AchievementVictorywithonlyProbesandColossus_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) != "Probe"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) != "Colossus"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_achievementNonProbesorColossusBuilt = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementVictorywithonlyProbesandColossus_Init () {
    gt_AchievementVictorywithonlyProbesandColossus = TriggerCreate("gt_AchievementVictorywithonlyProbesandColossus_Func");
    TriggerAddEventUnitTrainProgress(gt_AchievementVictorywithonlyProbesandColossus, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Colossus Tip Q
//--------------------------------------------------------------------------------------------------
bool gt_ColossusTipQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/6B7818A3"), libNtve_ge_TipType_NewUnit), StringExternal("Param/Value/9773AB86"), StringExternal("Param/Value/0B117EE5"), "Assets\\Textures\\btn-unit-protoss-colossus.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ColossusTipQ_Init () {
    gt_ColossusTipQ = TriggerCreate("gt_ColossusTipQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Clear Out Zerg Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveClearOutZergCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateObjectiveCampaign("PPurifier02Primary01");
    gv_objectiveDestroyZergBase3 = ObjectiveLastCreated();
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveClearOutZergCreate_Init () {
    gt_ObjectiveClearOutZergCreate = TriggerCreate("gt_ObjectiveClearOutZergCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Clear Out Zerg Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveClearOutZergComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveClearOutZergCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PPurifier02Primary01", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveClearOutZergComplete_Init () {
    gt_ObjectiveClearOutZergComplete = TriggerCreate("gt_ObjectiveClearOutZergComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Clear Out Zerg Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveClearOutZergFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveClearOutZergCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PPurifier02Primary01", libVoiC_ge_MissionObjectiveState_Failed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveClearOutZergFailed_Init () {
    gt_ObjectiveClearOutZergFailed = TriggerCreate("gt_ObjectiveClearOutZergFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Decrypt Stasis Locks Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDecryptStasisLocksCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateObjectiveCampaign("PPurifier02Primary02");
    libVCMI_gf_SetMissionObjectiveProgress("PPurifier02Primary02", gv_objectiveStasisLocksCurrent);
    gv_objectiveDestroyZergBase4 = ObjectiveLastCreated();
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDecryptStasisLocksCreate_Init () {
    gt_ObjectiveDecryptStasisLocksCreate = TriggerCreate("gt_ObjectiveDecryptStasisLocksCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Decrypt Stasis Locks Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDecryptStasisLocksComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveDecryptStasisLocksCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PPurifier02Primary02", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDecryptStasisLocksComplete_Init () {
    gt_ObjectiveDecryptStasisLocksComplete = TriggerCreate("gt_ObjectiveDecryptStasisLocksComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Decrypt Stasis Locks Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDecryptStasisLocksUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveDecryptStasisLocksCreate, true, false);
    libVCMI_gf_SetMissionObjectiveProgress("PPurifier02Primary02", gv_objectiveStasisLocksCurrent);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDecryptStasisLocksUpdate_Init () {
    gt_ObjectiveDecryptStasisLocksUpdate = TriggerCreate("gt_ObjectiveDecryptStasisLocksUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Decrypt Stasis Locks Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDecryptStasisLocksFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveDecryptStasisLocksCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PPurifier02Primary02", libVoiC_ge_MissionObjectiveState_Failed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDecryptStasisLocksFailed_Init () {
    gt_ObjectiveDecryptStasisLocksFailed = TriggerCreate("gt_ObjectiveDecryptStasisLocksFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Megalith Must Survive Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveMegalithMustSurviveCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateObjectiveCampaign("PPurifier02Primary03");
    gv_objectiveDestroyZergBase = ObjectiveLastCreated();
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveMegalithMustSurviveCreate_Init () {
    gt_ObjectiveMegalithMustSurviveCreate = TriggerCreate("gt_ObjectiveMegalithMustSurviveCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Megalith Must Survive Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveMegalithMustSurviveComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveMegalithMustSurviveCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PPurifier02Primary03", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveMegalithMustSurviveComplete_Init () {
    gt_ObjectiveMegalithMustSurviveComplete = TriggerCreate("gt_ObjectiveMegalithMustSurviveComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Megalith Must Survive Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveMegalithMustSurviveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveMegalithMustSurviveCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PPurifier02Primary03", libVoiC_ge_MissionObjectiveState_Failed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveMegalithMustSurviveFailed_Init () {
    gt_ObjectiveMegalithMustSurviveFailed = TriggerCreate("gt_ObjectiveMegalithMustSurviveFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Power Core Housing Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyPowerCoreHousingCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    libVCMI_gf_CreateObjectiveCampaign("PPurifier02Bonus01");
    gv_objectiveRescueStalkers = ObjectiveLastCreated();
    libVCMI_gf_SetMissionObjectiveProgress("PPurifier02Bonus01", gv_objectiveDestroyPowerCoreHousingCount);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyPowerCoreHousingCreate_Init () {
    gt_ObjectiveDestroyPowerCoreHousingCreate = TriggerCreate("gt_ObjectiveDestroyPowerCoreHousingCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Power Core Housing Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyPowerCoreHousingComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyPowerCoreHousingCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PPurifier02Bonus01", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyPowerCoreHousingComplete_Init () {
    gt_ObjectiveDestroyPowerCoreHousingComplete = TriggerCreate("gt_ObjectiveDestroyPowerCoreHousingComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Power Core Housing Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyPowerCoreHousingUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveDestroyPowerCoreHousingCreate, true, false);
    libVCMI_gf_SetMissionObjectiveProgress("PPurifier02Bonus01", gv_objectiveDestroyPowerCoreHousingCount);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyPowerCoreHousingUpdate_Init () {
    gt_ObjectiveDestroyPowerCoreHousingUpdate = TriggerCreate("gt_ObjectiveDestroyPowerCoreHousingUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Power Core Housing Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyPowerCoreHousingFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveDestroyPowerCoreHousingCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PPurifier02Bonus01", libVoiC_ge_MissionObjectiveState_Failed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyPowerCoreHousingFailed_Init () {
    gt_ObjectiveDestroyPowerCoreHousingFailed = TriggerCreate("gt_ObjectiveDestroyPowerCoreHousingFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto828054FC_g;
    int auto828054FC_u;
    unit auto828054FC_var;
    unitgroup auto32B90A36_g;
    int auto32B90A36_u;
    unit auto32B90A36_var;
    unitgroup autoB4C0BF29_g;
    int autoB4C0BF29_u;
    unit autoB4C0BF29_var;
    unitgroup auto9AB03677_g;
    int auto9AB03677_u;
    unit auto9AB03677_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, c_transitionDurationImmediate, true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    auto828054FC_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto828054FC_u = UnitGroupCount(auto828054FC_g, c_unitCountAll);
    for (;; auto828054FC_u -= 1) {
        auto828054FC_var = UnitGroupUnitFromEnd(auto828054FC_g, auto828054FC_u);
        if (auto828054FC_var == null) { break; }
        if ((libNtve_gf_UnitIsPaused(auto828054FC_var) == false) && (auto828054FC_var != gv_megalithUnit) && (auto828054FC_var != UnitFromId(361))) {
            UnitGroupAdd(gv_cinematicPausedUnits, auto828054FC_var);
            libNtve_gf_PauseUnit(auto828054FC_var, true);
        }

    }
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    UnitGroupRemove(gv_cinematicHiddenUnits, gv_megalithUnit);
    UnitGroupRemove(gv_cinematicHiddenUnits, UnitFromId(361));
    UnitGroupRemove(gv_cinematicHiddenUnits, UnitFromId(584));
    auto32B90A36_g = gv_cinematicHiddenUnits;
    auto32B90A36_u = UnitGroupCount(auto32B90A36_g, c_unitCountAll);
    for (;; auto32B90A36_u -= 1) {
        auto32B90A36_var = UnitGroupUnitFromEnd(auto32B90A36_g, auto32B90A36_u);
        if (auto32B90A36_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto32B90A36_var, false);
    }
    autoB4C0BF29_g = UnitGroup(null, gv_pLAYER_02_ZERG_RED, null, UnitFilter((1 << c_targetFilterStructure), (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoB4C0BF29_u = UnitGroupCount(autoB4C0BF29_g, c_unitCountAll);
    for (;; autoB4C0BF29_u -= 1) {
        autoB4C0BF29_var = UnitGroupUnitFromEnd(autoB4C0BF29_g, autoB4C0BF29_u);
        if (autoB4C0BF29_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoB4C0BF29_var, true);
    }
    auto9AB03677_g = UnitGroup(null, gv_pLAYER_03_ZERG_BULLIES, null, UnitFilter((1 << c_targetFilterStructure), (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto9AB03677_u = UnitGroupCount(auto9AB03677_g, c_unitCountAll);
    for (;; auto9AB03677_u -= 1) {
        auto9AB03677_var = UnitGroupUnitFromEnd(auto9AB03677_g, auto9AB03677_u);
        if (auto9AB03677_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto9AB03677_var, true);
    }
    libNtve_gf_ShowHideDoodadsInRegion(true, RegionFromId(75), "PurifierStasisPadFlat");
    libNtve_gf_CreateUnitsAtPoint2(1, "Colossus", c_unitCreateIgnorePlacement, gv_pLAYER_07_MEGALITH, PointFromId(273));
    gv_cinematicColossus1 = UnitLastCreated();
    UnitBehaviorAdd(UnitLastCreated(), "PurifierStasisLongTerm", UnitLastCreated(), 1);
    libNtve_gf_CreateUnitsAtPoint2(1, "Colossus", c_unitCreateIgnorePlacement, gv_pLAYER_07_MEGALITH, PointFromId(629));
    gv_cinematicColossus2 = UnitLastCreated();
    UnitBehaviorAdd(UnitLastCreated(), "PurifierStasisLongTerm", UnitLastCreated(), 1);
    libNtve_gf_CreateUnitsAtPoint2(1, "Colossus", c_unitCreateIgnorePlacement, gv_pLAYER_07_MEGALITH, PointFromId(658));
    gv_cinematicColossus3 = UnitLastCreated();
    UnitBehaviorAdd(UnitLastCreated(), "PurifierStasisLongTerm", UnitLastCreated(), 1);
    UnitCreate(1, "CybrosLock", c_unitCreateIgnorePlacement, 0, UnitGetPosition(UnitFromId(8)), UnitGetFacing(UnitFromId(8)));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(499), 0.0, -1, 10, true);
    TriggerExecute(gt_IntroZerg, true, false);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 1.0);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PPurifier02_Music_Intro", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_BraxisAlpha", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    libNtve_gf_StoryMode(PlayerGroupAll(), true);
    CutsceneFade(false, 0.0, Color(0,0,0), 100.0, PlayerGroupAll(), true);
    Wait(0.0625, c_timeGame);
    libVoiC_gf_CampaignPlayCutscene2("Cutscenes\\Cutscene_Purifier02Intro.SC2Cutscene", false, true);
    Wait(0.0625, c_timeGame);
    CutsceneFade(true, 2.0, Color(0,0,0), 100.0, PlayerGroupAll(), true);
    Wait(2.0, c_timeGame);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier02|Line00073", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CutsceneFade(false, 1.0, Color(0,0,0), 100.0, PlayerGroupAll(), true);
    Wait(1.0, c_timeGame);
    libVoiC_gf_CampaignStopCutscene();
    libNtve_gf_StoryMode(PlayerGroupAll(), false);
    SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_PPurifier02_Quad", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    CutsceneFade(true, 1.0, Color(0,0,0), 100.0, PlayerGroupAll(), true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2634), SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Purifier02|Line00130", true), c_soundIndexAny)), -1, 10, true);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier02|Line00130", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier02|Line00135", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(1.0, c_timeGame);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(470), 0.0, -1, 10, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    SoundPlayForPlayer(SoundLink("Event_CS_Purifier02_Megalith_Up", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    SoundPlayForPlayer(SoundLink("Event_CS_Purifier02_CybrosCore", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    Wait(5.0, c_timeGame);
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(466), SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Purifier02|Line00131", true), c_soundIndexAny)), -1, 10, true);
    SoundPlayForPlayer(SoundLink("Event_Purifier02_Zerg_Walla_01", -1), c_maxPlayers, PlayerGroupAll(), 80.0, 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier02|Line00131", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    SoundPlayForPlayer(SoundLink("Event_Purifier02_Zerg_Walla_02", -1), c_maxPlayers, PlayerGroupAll(), 85.0, 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier02|Line00077", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 70.0, 3.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(651), 0.0, -1, 10, true);
    SoundPlayForPlayer(SoundLink("Event_Purifier02_StartCine_ColossusSpawn", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier02|Line00106", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(1.0, c_timeGame);
    UnitBehaviorAdd(gv_cinematicColossus1, "PurifierStasisEnding", gv_cinematicColossus1, 1);
    UnitBehaviorAdd(gv_cinematicColossus2, "PurifierStasisEnding", gv_cinematicColossus2, 1);
    UnitBehaviorAdd(gv_cinematicColossus3, "PurifierStasisEnding", gv_cinematicColossus3, 1);
    Wait(2.5, c_timeGame);
    UnitBehaviorRemove(gv_cinematicColossus1, "PurifierStasisLongTerm", 1);
    UnitBehaviorRemove(gv_cinematicColossus2, "PurifierStasisLongTerm", 1);
    UnitBehaviorRemove(gv_cinematicColossus3, "PurifierStasisLongTerm", 1);
    UnitBehaviorRemove(gv_cinematicColossus1, "PurifierStasisEnding", 1);
    UnitBehaviorRemove(gv_cinematicColossus2, "PurifierStasisEnding", 1);
    UnitBehaviorRemove(gv_cinematicColossus3, "PurifierStasisEnding", 1);
    Wait(1.0, c_timeGame);
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(182), 4.0, -1, 10, true);
    SoundPlayForPlayer(SoundLink("Event_CS_Purifier02_ColossusReady", -1), c_maxPlayers, PlayerGroupAll(), 80.0, 0.0);
    UnitIssueOrder(gv_cinematicColossus1, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(UnitGetPosition(gv_introColossus01), -1.0, 1.0)), c_orderQueueReplace);
    UnitIssueOrder(gv_cinematicColossus2, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(UnitGetPosition(gv_introColossus02), -1.0, 1.0)), c_orderQueueReplace);
    UnitIssueOrder(gv_cinematicColossus3, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(UnitGetPosition(gv_introColossus03), -1.5, 1.5)), c_orderQueueReplace);
    UnitIssueOrder(gv_cinematicColossus1, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(gv_introColossus01)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_cinematicColossus2, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(gv_introColossus02)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_cinematicColossus3, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(gv_introColossus03)), c_orderQueueAddToEnd);
    libVCMI_gf_SendActorMessageToDoodadsInRegion("SetOpacity 0.000000 3.000000", "PurifierStasisPadFlat", RegionFromId(75));
    libVCMI_gf_SendActorMessageToDoodadsInRegion("SetScale 0.100000 3.000000", "PurifierStasisPadFlat", RegionFromId(75));
    Wait(1.0, c_timeGame);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier02|Line00005", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier02|Line00006", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_RescueUnit(gv_cinematicColossus1, gv_pLAYER_01_USER, true);
    libNtve_gf_RescueUnit(gv_cinematicColossus2, gv_pLAYER_01_USER, true);
    libNtve_gf_RescueUnit(gv_cinematicColossus3, gv_pLAYER_01_USER, true);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup autoFDC8C05F_g;
    int autoFDC8C05F_u;
    unit autoFDC8C05F_var;
    unitgroup auto9F10215E_g;
    int auto9F10215E_u;
    unit auto9F10215E_var;
    unitgroup auto7D29D465_g;
    int auto7D29D465_u;
    unit auto7D29D465_var;
    unitgroup auto4FB11418_g;
    int auto4FB11418_u;
    unit auto4FB11418_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_IntroZerg);
    SoundStopAllTriggerSounds(true);
    SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_PPurifier02_Quad", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 2.0);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    autoFDC8C05F_g = gv_cinematicTempUnits;
    autoFDC8C05F_u = UnitGroupCount(autoFDC8C05F_g, c_unitCountAll);
    for (;; autoFDC8C05F_u -= 1) {
        autoFDC8C05F_var = UnitGroupUnitFromEnd(autoFDC8C05F_g, autoFDC8C05F_u);
        if (autoFDC8C05F_var == null) { break; }
        UnitRemove(autoFDC8C05F_var);
    }
    if ((gv_cinematicCompleted == true)) {
        UnitRemove(gv_introColossus01);
        UnitRemove(gv_introColossus02);
        UnitRemove(gv_introColossus03);
        gv_introColossus01 = gv_cinematicColossus1;
        gv_introColossus02 = gv_cinematicColossus2;
        gv_introColossus03 = gv_cinematicColossus3;
    }
    else {
        UnitRemove(gv_cinematicColossus1);
        UnitRemove(gv_cinematicColossus2);
        UnitRemove(gv_cinematicColossus3);
    }
    auto9F10215E_g = gv_cinematicHiddenUnits;
    auto9F10215E_u = UnitGroupCount(auto9F10215E_g, c_unitCountAll);
    for (;; auto9F10215E_u -= 1) {
        auto9F10215E_var = UnitGroupUnitFromEnd(auto9F10215E_g, auto9F10215E_u);
        if (auto9F10215E_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto9F10215E_var, true);
    }
    auto7D29D465_g = gv_cinematicPausedUnits;
    auto7D29D465_u = UnitGroupCount(auto7D29D465_g, c_unitCountAll);
    for (;; auto7D29D465_u -= 1) {
        auto7D29D465_var = UnitGroupUnitFromEnd(auto7D29D465_g, auto7D29D465_u);
        if (auto7D29D465_var == null) { break; }
        libNtve_gf_PauseUnit(auto7D29D465_var, false);
    }
    UnitRemove(UnitFromId(155));
    libNtve_gf_StoryMode(PlayerGroupAll(), false);
    libNtve_gf_KillModel(gv_introReticle);
    TextTagDestroy(gv_introTextTag);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(66), 5.0, false);
    libVCUI_gf_ShowSpearofAdunUI(false, c_transitionDurationImmediate);
    RegionPlayableMapSet(RegionFromId(32));
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(75), "PurifierStasisPadFlat");
    UnitPauseAll(true);
    auto4FB11418_g = UnitGroup(null, c_playerAny, RegionFromId(32), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4FB11418_u = UnitGroupCount(auto4FB11418_g, c_unitCountAll);
    for (;; auto4FB11418_u -= 1) {
        auto4FB11418_var = UnitGroupUnitFromEnd(auto4FB11418_g, auto4FB11418_u);
        if (auto4FB11418_var == null) { break; }
        libNtve_gf_PauseUnit(auto4FB11418_var, false);
    }
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(68), lv_fadeDuration, -1, 10, true);
        libVCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, true);
    }
    else {
        lv_fadeDuration = 1.0;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
        libVCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, false);
        libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(68)), lv_fadeDuration);
        CutsceneFade(true, 1.0, Color(0,0,0), 100.0, PlayerGroupAll(), true);
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Zerg
//--------------------------------------------------------------------------------------------------
bool gt_IntroZerg_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_zergGroup;
    unitgroup lv_zergGroup2;

    // Automatic Variable Declarations
    const int auto234078A3_n = 3;
    int auto234078A3_i;
    const int autoB8FE27D0_n = 9;
    int autoB8FE27D0_i;
    const int auto6514FAAF_n = 3;
    int auto6514FAAF_i;
    const int autoD4114598_n = 9;
    int autoD4114598_i;
    unitgroup autoD157628A_g;
    int autoD157628A_u;
    unit autoD157628A_var;
    unitgroup auto43FB694F_g;
    int auto43FB694F_u;
    unit auto43FB694F_var;

    // Variable Initialization
    lv_zergGroup = UnitGroupEmpty();
    lv_zergGroup2 = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    for (auto234078A3_i = 1; auto234078A3_i <= auto234078A3_n; auto234078A3_i += 1) {
        UnitCreate(1, "Hydralisk", 0, gv_pLAYER_02_ZERG_RED, RegionRandomPoint(RegionFromId(65)), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_zergGroup, UnitLastCreated());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    }
    for (autoB8FE27D0_i = 1; autoB8FE27D0_i <= autoB8FE27D0_n; autoB8FE27D0_i += 1) {
        UnitCreate(1, "Zergling", 0, gv_pLAYER_02_ZERG_RED, RegionRandomPoint(RegionFromId(65)), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_zergGroup, UnitLastCreated());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    }
    for (auto6514FAAF_i = 1; auto6514FAAF_i <= auto6514FAAF_n; auto6514FAAF_i += 1) {
        UnitCreate(1, "Hydralisk", 0, gv_pLAYER_02_ZERG_RED, RegionRandomPoint(RegionFromId(76)), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_zergGroup2, UnitLastCreated());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    }
    for (autoD4114598_i = 1; autoD4114598_i <= autoD4114598_n; autoD4114598_i += 1) {
        UnitCreate(1, "Zergling", 0, gv_pLAYER_02_ZERG_RED, RegionRandomPoint(RegionFromId(76)), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_zergGroup2, UnitLastCreated());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    }
    while (true) {
        Wait(1.0, c_timeGame);
        autoD157628A_g = lv_zergGroup;
        autoD157628A_u = UnitGroupCount(autoD157628A_g, c_unitCountAll);
        for (;; autoD157628A_u -= 1) {
            autoD157628A_var = UnitGroupUnitFromEnd(autoD157628A_g, autoD157628A_u);
            if (autoD157628A_var == null) { break; }
            if ((RandomInt(1, 9) == 1)) {
                UnitIssueOrder(autoD157628A_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(65))), c_orderQueueReplace);
            }

        }
        auto43FB694F_g = lv_zergGroup2;
        auto43FB694F_u = UnitGroupCount(auto43FB694F_g, c_unitCountAll);
        for (;; auto43FB694F_u -= 1) {
            auto43FB694F_var = UnitGroupUnitFromEnd(auto43FB694F_g, auto43FB694F_u);
            if (auto43FB694F_var == null) { break; }
            if ((RandomInt(1, 9) == 1)) {
                UnitIssueOrder(auto43FB694F_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(76))), c_orderQueueReplace);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroZerg_Init () {
    gt_IntroZerg = TriggerCreate("gt_IntroZerg_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Q
//--------------------------------------------------------------------------------------------------
bool gt_MidQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_MidSetup, true, true);
    TriggerExecute(gt_MidCinematic, true, true);
    TriggerExecute(gt_MidCinematicEnd, true, true);
    TriggerExecute(gt_MidCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidQ_Init () {
    gt_MidQ = TriggerCreate("gt_MidQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidSetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_colossusUnit;
    unitgroup lv_colossusGroup;
    unit lv_currentColossus;

    // Automatic Variable Declarations
    unitgroup auto8EE25FD0_g;
    int auto8EE25FD0_u;
    unit auto8EE25FD0_var;
    unitgroup autoBB822183_g;
    int autoBB822183_u;
    unit autoBB822183_var;
    unitgroup autoFFEFE7D6_g;
    int autoFFEFE7D6_u;
    unit autoFFEFE7D6_var;
    const int auto3E268358_ae = 3;
    const int auto3E268358_ai = 1;
    unitgroup autoB36E44C8_g;
    int autoB36E44C8_u;
    unit autoB36E44C8_var;

    // Variable Initialization
    lv_colossusGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((RegionContainsPoint(RegionFromId(33), CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(96), 3.0, -1, 10.0, true);
    }
    else {
        gv_midFade = true;
        CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    }
    libVCMI_gf_CinematicModeCampaign(true, 1.0, true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UnitClearSelection(gv_pLAYER_01_USER);
    auto8EE25FD0_g = UnitGroup(null, gv_pLAYER_02_ZERG_RED, RegionFromId(15), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8EE25FD0_u = UnitGroupCount(auto8EE25FD0_g, c_unitCountAll);
    for (;; auto8EE25FD0_u -= 1) {
        auto8EE25FD0_var = UnitGroupUnitFromEnd(auto8EE25FD0_g, auto8EE25FD0_u);
        if (auto8EE25FD0_var == null) { break; }
        UnitRemove(auto8EE25FD0_var);
    }
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    autoBB822183_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoBB822183_u = UnitGroupCount(autoBB822183_g, c_unitCountAll);
    for (;; autoBB822183_u -= 1) {
        autoBB822183_var = UnitGroupUnitFromEnd(autoBB822183_g, autoBB822183_u);
        if (autoBB822183_var == null) { break; }
        UnitGroupAdd(gv_cinematicPausedUnits, autoBB822183_var);
        libNtve_gf_PauseUnit(autoBB822183_var, true);
    }
    libNtve_gf_PauseUnit(gv_introColossus01, false);
    libNtve_gf_PauseUnit(gv_introColossus02, false);
    libNtve_gf_PauseUnit(gv_introColossus03, false);
    if ((gv_midFade == true)) {
        autoB36E44C8_g = UnitGroup("Colossus", gv_pLAYER_01_USER, RegionFromId(32), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        autoB36E44C8_u = UnitGroupCount(autoB36E44C8_g, c_unitCountAll);
        for (;; autoB36E44C8_u -= 1) {
            autoB36E44C8_var = UnitGroupUnitFromEnd(autoB36E44C8_g, autoB36E44C8_u);
            if (autoB36E44C8_var == null) { break; }
            lv_colossusUnit += 1;
            UnitIssueOrder(autoB36E44C8_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            UnitSetPosition(autoB36E44C8_var, PointFromName(("Mid Colossus " + IntToString(lv_colossusUnit) + "-1")), false);
        }
    }
    else {
        autoFFEFE7D6_g = UnitGroup("Colossus", gv_pLAYER_01_USER, RegionFromId(32), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        autoFFEFE7D6_u = UnitGroupCount(autoFFEFE7D6_g, c_unitCountAll);
        for (;; autoFFEFE7D6_u -= 1) {
            autoFFEFE7D6_var = UnitGroupUnitFromEnd(autoFFEFE7D6_g, autoFFEFE7D6_u);
            if (autoFFEFE7D6_var == null) { break; }
            UnitGroupAdd(lv_colossusGroup, autoFFEFE7D6_var);
        }
        lv_colossusUnit = 1;
        for ( ; ( (auto3E268358_ai >= 0 && lv_colossusUnit <= auto3E268358_ae) || (auto3E268358_ai < 0 && lv_colossusUnit >= auto3E268358_ae) ) ; lv_colossusUnit += auto3E268358_ai ) {
            if ((UnitGroupCount(lv_colossusGroup, c_unitCountAlive) > 0)) {
                lv_currentColossus = UnitGroupClosestToPoint(lv_colossusGroup, PointFromName(("Mid Colossus " + IntToString(lv_colossusUnit) + "-1")));
                UnitIssueOrder(lv_currentColossus, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Mid Colossus " + IntToString(lv_colossusUnit) + "-1"))), c_orderQueueReplace);
                UnitIssueOrder(lv_currentColossus, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
                UnitGroupRemove(lv_colossusGroup, lv_currentColossus);
            }
            else {
                break;
            }
        }
    }
    RegionPlayableMapSet(RegionFromId(18));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidSetup_Init () {
    gt_MidSetup = TriggerCreate("gt_MidSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_midFade == true)) {
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(96), 0.0, -1, 10, true);
    }

    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PPurifier02_Music_Mid", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    if ((gv_midFade == true)) {
        CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
        Wait(1.0, c_timeGame);
    }

    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier02|Line00079", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(((SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Purifier02|Line00079", true), c_soundIndexAny))/2) + 0), c_timeGame);
    TriggerExecute(gt_MidCreateNexus, true, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier02|Line00080", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1526), 3.0, -1, 10, true);
    Wait(4.0, c_timeGame);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier02|Line00081", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier02|Line00125", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematic_Init () {
    gt_MidCinematic = TriggerCreate("gt_MidCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematicEnd_Init () {
    gt_MidCinematicEnd = TriggerCreate("gt_MidCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;
    int lv_colossusUnit;
    point lv_vespenePoint;

    // Automatic Variable Declarations
    unitgroup auto50194F09_g;
    int auto50194F09_u;
    unit auto50194F09_var;
    unitgroup autoCB5B62B9_g;
    int autoCB5B62B9_u;
    unit autoCB5B62B9_var;
    unitgroup auto44A70818_g;
    int auto44A70818_u;
    unit auto44A70818_var;
    unitgroup auto120CB82E_g;
    int auto120CB82E_u;
    unit auto120CB82E_var;
    unitgroup autoD25B762C_g;
    int autoD25B762C_u;
    unit autoD25B762C_var;
    unitgroup auto38569591_g;
    int auto38569591_u;
    unit auto38569591_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_DefeatUnitsDead, false);
    TriggerEnable(gt_DefeatBaseDead, true);
    TriggerStop(gt_MidCreateNexus);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    UnitRemove(UnitFromId(606));
    UnitRemove(UnitFromId(607));
    auto50194F09_g = gv_cinematicTempUnits;
    auto50194F09_u = UnitGroupCount(auto50194F09_g, c_unitCountAll);
    for (;; auto50194F09_u -= 1) {
        auto50194F09_var = UnitGroupUnitFromEnd(auto50194F09_g, auto50194F09_u);
        if (auto50194F09_var == null) { break; }
        UnitRemove(auto50194F09_var);
    }
    autoCB5B62B9_g = gv_cinematicHiddenUnits;
    autoCB5B62B9_u = UnitGroupCount(autoCB5B62B9_g, c_unitCountAll);
    for (;; autoCB5B62B9_u -= 1) {
        autoCB5B62B9_var = UnitGroupUnitFromEnd(autoCB5B62B9_g, autoCB5B62B9_u);
        if (autoCB5B62B9_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoCB5B62B9_var, true);
    }
    auto44A70818_g = gv_cinematicPausedUnits;
    auto44A70818_u = UnitGroupCount(auto44A70818_g, c_unitCountAll);
    for (;; auto44A70818_u -= 1) {
        auto44A70818_var = UnitGroupUnitFromEnd(auto44A70818_g, auto44A70818_u);
        if (auto44A70818_var == null) { break; }
        libNtve_gf_PauseUnit(auto44A70818_var, false);
    }
    auto120CB82E_g = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(37), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto120CB82E_u = UnitGroupCount(auto120CB82E_g, c_unitCountAll);
    for (;; auto120CB82E_u -= 1) {
        auto120CB82E_var = UnitGroupUnitFromEnd(auto120CB82E_g, auto120CB82E_u);
        if (auto120CB82E_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto120CB82E_var, true);
        libNtve_gf_PauseUnit(auto120CB82E_var, false);
    }
    autoD25B762C_g = UnitGroup(null, gv_pLAYER_03_ZERG_BULLIES, RegionFromId(15), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD25B762C_u = UnitGroupCount(autoD25B762C_g, c_unitCountAll);
    for (;; autoD25B762C_u -= 1) {
        autoD25B762C_var = UnitGroupUnitFromEnd(autoD25B762C_g, autoD25B762C_u);
        if (autoD25B762C_var == null) { break; }
        UnitRemove(autoD25B762C_var);
    }
    auto38569591_g = UnitGroup("Colossus", gv_pLAYER_01_USER, RegionFromId(32), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto38569591_u = UnitGroupCount(auto38569591_g, c_unitCountAll);
    for (;; auto38569591_u -= 1) {
        auto38569591_var = UnitGroupUnitFromEnd(auto38569591_g, auto38569591_u);
        if (auto38569591_var == null) { break; }
        lv_colossusUnit += 1;
        UnitIssueOrder(auto38569591_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitSetPosition(auto38569591_var, PointFromName(("Mid Colossus " + IntToString(lv_colossusUnit) + "-3")), false);
        UnitSetPropertyFixed(auto38569591_var, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(auto38569591_var, c_unitPropShieldsPercent, 100.0);
    }
    libNtve_gf_ShowHideUnit(UnitFromId(648), true);
    libNtve_gf_ShowHideUnit(UnitFromId(649), true);
    libNtve_gf_ShowHideUnit(UnitFromId(650), true);
    lv_vespenePoint = UnitGetPosition(UnitFromId(126));
    UnitRemove(UnitFromId(126));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Assimilator", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, lv_vespenePoint);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropResources, 3000.0);
    CreepModify(UnitGetPosition(UnitFromId(6)), 18.0, false, false);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    libVCUI_gf_ShowSpearofAdunUI(true, c_transitionDurationDefault);
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(36), true, false);
    ObjectiveShow(gv_objectiveDestroyZergBase3, PlayerGroupAll(), false);
    TriggerExecute(gt_StartAI, true, false);
    Wait(0.5, c_timeReal);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    libVCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, false);
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(859)), lv_fadeDuration);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCleanup_Init () {
    gt_MidCleanup = TriggerCreate("gt_MidCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Create Nexus
//--------------------------------------------------------------------------------------------------
bool gt_MidCreateNexus_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (!((UnitGroupCount(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(UnitFromId(6)), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
        Wait(0.5, c_timeGame);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Nexus", c_unitCreateConstruct, gv_pLAYER_01_USER, UnitGetPosition(UnitFromId(6)));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCreateNexus_Init () {
    gt_MidCreateNexus = TriggerCreate("gt_MidCreateNexus_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto9A0BE736_g;
    int auto9A0BE736_u;
    unit auto9A0BE736_var;
    unitgroup auto8301B77D_g;
    int auto8301B77D_u;
    unit auto8301B77D_var;
    unitgroup auto00DB70CB_g;
    int auto00DB70CB_u;
    unit auto00DB70CB_var;
    unitgroup auto1FAF5A31_g;
    int auto1FAF5A31_u;
    unit auto1FAF5A31_var;
    unitgroup autoFE98E3F4_g;
    int autoFE98E3F4_u;
    unit autoFE98E3F4_var;
    unitgroup autoF716B22F_g;
    int autoF716B22F_u;
    unit autoF716B22F_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, 1.0, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    RegionPlayableMapSet(RegionFromId(18));
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_cinematicPausedUnits = UnitGroupEmpty();
    auto9A0BE736_g = UnitGroup("SOAPurifierBeamUnit", gv_pLAYER_01_USER, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto9A0BE736_u = UnitGroupCount(auto9A0BE736_g, c_unitCountAll);
    for (;; auto9A0BE736_u -= 1) {
        auto9A0BE736_var = UnitGroupUnitFromEnd(auto9A0BE736_g, auto9A0BE736_u);
        if (auto9A0BE736_var == null) { break; }
        UnitRemove(auto9A0BE736_var);
    }
    auto8301B77D_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto8301B77D_u = UnitGroupCount(auto8301B77D_g, c_unitCountAll);
    for (;; auto8301B77D_u -= 1) {
        auto8301B77D_var = UnitGroupUnitFromEnd(auto8301B77D_g, auto8301B77D_u);
        if (auto8301B77D_var == null) { break; }
        if ((libNtve_gf_UnitIsPaused(auto8301B77D_var) == false) && (auto8301B77D_var != gv_megalithUnit) && (auto8301B77D_var != UnitFromId(584))) {
            UnitGroupAdd(gv_cinematicPausedUnits, auto8301B77D_var);
            libNtve_gf_PauseUnit(auto8301B77D_var, true);
        }

        if (((UnitGetType(auto8301B77D_var) == libVoiC_gf_EnabledUnitTypeforArmyCategory("VoidRay")) || (UnitGetType(auto8301B77D_var) == libVoiC_gf_EnabledUnitTypeforArmyCategory("Sentry")) || (UnitGetType(auto8301B77D_var) == "VoidRay") || (UnitGetType(auto8301B77D_var) == "VoidRayTaldarim") || (UnitGetType(auto8301B77D_var) == "Sentry") || (UnitGetType(auto8301B77D_var) == "Monitor"))) {
            UnitCreate(1, UnitGetType(auto8301B77D_var), 0, UnitGetOwner(auto8301B77D_var), UnitGetPosition(auto8301B77D_var), UnitGetFacing(auto8301B77D_var));
            UnitGroupAdd(gv_cinematicPausedUnits, UnitLastCreated());
            libNtve_gf_PauseUnit(UnitLastCreated(), true);
            UnitRemove(auto8301B77D_var);
        }

    }
    auto00DB70CB_g = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(67), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto00DB70CB_u = UnitGroupCount(auto00DB70CB_g, c_unitCountAll);
    for (;; auto00DB70CB_u -= 1) {
        auto00DB70CB_var = UnitGroupUnitFromEnd(auto00DB70CB_g, auto00DB70CB_u);
        if (auto00DB70CB_var == null) { break; }
        if ((UnitHasBehavior2(auto00DB70CB_var, "QueenMPEnsnare") == true)) {
            UnitBehaviorRemove(auto00DB70CB_var, "QueenMPEnsnare", 1);
        }

        UnitGroupAdd(gv_victoryPlayerUnits, auto00DB70CB_var);
    }
    auto1FAF5A31_g = UnitGroup(null, gv_pLAYER_02_ZERG_RED, RegionFromId(67), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1FAF5A31_u = UnitGroupCount(auto1FAF5A31_g, c_unitCountAll);
    for (;; auto1FAF5A31_u -= 1) {
        auto1FAF5A31_var = UnitGroupUnitFromEnd(auto1FAF5A31_g, auto1FAF5A31_u);
        if (auto1FAF5A31_var == null) { break; }
        UnitRemove(auto1FAF5A31_var);
    }
    autoFE98E3F4_g = UnitGroup(null, gv_pLAYER_03_ZERG_BULLIES, RegionFromId(67), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFE98E3F4_u = UnitGroupCount(autoFE98E3F4_g, c_unitCountAll);
    for (;; autoFE98E3F4_u -= 1) {
        autoFE98E3F4_var = UnitGroupUnitFromEnd(autoFE98E3F4_g, autoFE98E3F4_u);
        if (autoFE98E3F4_var == null) { break; }
        UnitRemove(autoFE98E3F4_var);
    }
    autoF716B22F_g = UnitGroup(null, gv_pLAYER_04_ZERG_GREEN, RegionFromId(67), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF716B22F_u = UnitGroupCount(autoF716B22F_g, c_unitCountAll);
    for (;; autoF716B22F_u -= 1) {
        autoF716B22F_var = UnitGroupUnitFromEnd(autoF716B22F_g, autoF716B22F_u);
        if (autoF716B22F_var == null) { break; }
        UnitBehaviorRemove(autoF716B22F_var, "ZergBuildingDies9", 1);
        UnitRemove(autoF716B22F_var);
    }
    Wait(0.0625, c_timeGame);
    if ((libNtve_gf_UnitInRegion(gv_megalithUnit, RegionFromId(40)) == false)) {
        libNtve_gf_PauseUnit(gv_megalithUnit, true);
        libNtve_gf_ShowHideUnit(gv_megalithUnit, false);
        PingDestroy(libHots_gf_PingStoredForUnit(gv_megalithUnit, 1));
        libVCUI_gf_ShowHideSingularBossBarVoidCampaign(false);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_stasisLocks[5]), c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
        libNtve_gf_UnitCreateFacingPoint(1, "MegalithCutter", 0, gv_pLAYER_07_MEGALITH, PointFromId(670), UnitGetPosition(UnitFromId(584)));
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("MegalithCutterDockInstant", 0), UnitFromId(584)), c_orderQueueReplace);
    }

    if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(74), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(4, "Zealot", 0, gv_pLAYER_01_USER, PointFromId(2629));
        UnitGroupAddUnitGroup(gv_victoryPlayerUnits, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(2, "Stalker", 0, gv_pLAYER_01_USER, PointFromId(2630));
        UnitGroupAddUnitGroup(gv_victoryPlayerUnits, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(2, "Stalker", 0, gv_pLAYER_01_USER, PointFromId(2631));
        UnitGroupAddUnitGroup(gv_victoryPlayerUnits, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Colossus", 0, gv_pLAYER_01_USER, PointFromId(2632));
        UnitGroupAddUnitGroup(gv_victoryPlayerUnits, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Colossus", 0, gv_pLAYER_01_USER, PointFromId(2633));
        UnitGroupAddUnitGroup(gv_victoryPlayerUnits, UnitLastCreatedGroup());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto940623C8_g;
    int auto940623C8_u;
    unit auto940623C8_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(366), 0.0, -1, 10, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PPurifier02_Music_Outro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    libVCMI_gf_SendActorMessageToDoodadsInRegion("Signal WorkStop", "Purifier_Energy_Generator", RegionFromId(68));
    SoundPlayForPlayer(SoundLink("PPurifier02_FinalLockDeactivate", -1), c_maxPlayers, PlayerGroupAll(), 90.0, 0.0);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1528), 8.0, -1, 10, true);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier02|Line00102", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(2.0, c_timeGame);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier02|Line00103", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2284), 6.0, -1, 10, true);
    Wait(3.0, c_timeGame);
    auto940623C8_g = gv_victoryPlayerUnits;
    auto940623C8_u = UnitGroupCount(auto940623C8_g, c_unitCountAll);
    for (;; auto940623C8_u -= 1) {
        auto940623C8_var = UnitGroupUnitFromEnd(auto940623C8_g, auto940623C8_u);
        if (auto940623C8_var == null) { break; }
        gf_VictoryWarpOutUnit(auto940623C8_var);
        SoundPlayForPlayer(SoundLink("PPurifier01_VictoryWarp", -1), c_maxPlayers, PlayerGroupAll(), 80.0, 0.0);
        Wait(0.0625, c_timeGame);
    }
    TransmissionWait(TransmissionLastSent(), 0.0);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_CinematicModeCampaign(false, c_transitionDurationImmediate, false);
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04MusicSound_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_DebugStage2_Init();
    gt_DebugStage3_Init();
    gt_DebugEndTimer_Init();
    gt_StartStage01Q_Init();
    gt_RevealPlayerBaseLocation_Init();
    gt_IntroBaseRegionUnitsDie_Init();
    gt_ExplodeyThings_Init();
    gt_IntroduceCavesQ_Init();
    gt_SpawnZergIntroCave01_Init();
    gt_ZergIntroCaveWanderers_Init();
    gt_IntroCaveTakesDamage_Init();
    gt_StartStage02Q_Init();
    gt_MegalithInitiation_Init();
    gt_MegalithPreparingToMoveQ_Init();
    gt_MegalithStartsMovingQ_Init();
    gt_PlayerClicksOnRoboticsFacility_Init();
    gt_MoveMegalithTrackUnit_Init();
    gt_MegalithIsDamagedQ_Init();
    gt_DestabilizingStasisLockProgressBar_Init();
    gt_MegalithCompletesDestabilization_Init();
    gt_MegalithReachesFinalLocation_Init();
    gt_MegalithNearsStasisLock_Init();
    gt_StasisLockAlmostDestabilizedQ_Init();
    gt_StasisLockCompleteQ_Init();
    gt_MegalithReachesStasisLock01Q_Init();
    gt_MegalithReachesStasisLock02Q_Init();
    gt_MegalithReachesStasisLock03Q_Init();
    gt_MegalithReachesStasisLock04Q_Init();
    gt_WarnOfCanyonPlayerEntersQ_Init();
    gt_CrawlersRootInCanyon_Init();
    gt_ActivateZergCanyonRush01_Init();
    gt_ActivateZergCanyonRush02_Init();
    gt_ActivateFirstCaves_Init();
    gt_WarnOfCavesQ_Init();
    gt_SpawnZergCave01_Init();
    gt_SpawnZergCave02_Init();
    gt_ActivateSecondCaves_Init();
    gt_MoreCavesOfZergQ_Init();
    gt_SpawnZergCave03_Init();
    gt_SpawnZergCave04_Init();
    gt_MakeRockTowerInvulnAfterFalling_Init();
    gt_WarnOfZergBaseQ_Init();
    gt_WarnOfNydusWormsQ_Init();
    gt_NydusWormWave01_Init();
    gt_NydusWormWave02_Init();
    gt_NydusWormWave03_Init();
    gt_ActivateFinalWorms_Init();
    gt_NydusWormWave04_Init();
    gt_NydusWormWave05_Init();
    gt_SpawnNydusWorm01_Init();
    gt_SpawnNydusWorm02_Init();
    gt_SpawnNydusWorm03_Init();
    gt_SpawnNydusWorm04_Init();
    gt_SpawnNydusWorm05_Init();
    gt_MonitorFenixSoAPresence_Init();
    gt_FenixArrivesonEndionQ_Init();
    gt_UnitEntersBonusCreateProximityActivation_Init();
    gt_BonusObjectiveCreateQ_Init();
    gt_PowerCoreHousingDestroyedQ_Init();
    gt_PowerCoreHousingTakesDamage_Init();
    gt_StartAI_Init();
    gt_AIGiveResources_Init();
    gt_AIUpgradesNormal_Init();
    gt_AIUpgradesHard_Init();
    gt_AttackWave01TransmissionQ_Init();
    gt_HatcheryDies_Init();
    gt_ZergWander_Init();
    gt_DefeatUnitsDead_Init();
    gt_DefeatBaseDead_Init();
    gt_DefeatPrimaryObjectiveFailed_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_StatMegalithDamageTaken_Init();
    gt_AchievementDestroyZergStructures_Init();
    gt_AchievementZergCaveSealed_Init();
    gt_AchievementLairHunting_Init();
    gt_AchievementVictorywithonlyProbesandColossus_Init();
    gt_ColossusTipQ_Init();
    gt_ObjectiveClearOutZergCreate_Init();
    gt_ObjectiveClearOutZergComplete_Init();
    gt_ObjectiveClearOutZergFailed_Init();
    gt_ObjectiveDecryptStasisLocksCreate_Init();
    gt_ObjectiveDecryptStasisLocksComplete_Init();
    gt_ObjectiveDecryptStasisLocksUpdate_Init();
    gt_ObjectiveDecryptStasisLocksFailed_Init();
    gt_ObjectiveMegalithMustSurviveCreate_Init();
    gt_ObjectiveMegalithMustSurviveComplete_Init();
    gt_ObjectiveMegalithMustSurviveFailed_Init();
    gt_ObjectiveDestroyPowerCoreHousingCreate_Init();
    gt_ObjectiveDestroyPowerCoreHousingComplete_Init();
    gt_ObjectiveDestroyPowerCoreHousingUpdate_Init();
    gt_ObjectiveDestroyPowerCoreHousingFailed_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_IntroZerg_Init();
    gt_MidQ_Init();
    gt_MidSetup_Init();
    gt_MidCinematic_Init();
    gt_MidCinematicEnd_Init();
    gt_MidCleanup_Init();
    gt_MidCreateNexus_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}
