//==================================================================================================
// 
// Generated AI Script
// 
// AI Name: P04 Amon Zerg PUR
// 
//==================================================================================================
include "TriggerLibs/natives"
include "TriggerLibs/AI"
include "TriggerLibs/Computer"

//--------------------------------------------------------------------------------------------------
// Globals
//--------------------------------------------------------------------------------------------------
point[17] aiE29F8996_defGather;
string[17] aiE29F8996_customData;
wave[17] aiE29F8996_lastWave;

//--------------------------------------------------------------------------------------------------
// Attack Wave: Wave 1 - Initial Attack Q
//--------------------------------------------------------------------------------------------------
bool[17] aiE29F8996_wave1_enabled;
unitgroup[17] aiE29F8996_wave1_lastUnits;
wave[17] aiE29F8996_wave1_lastWave;
trigger aiE29F8996_wave1_trigger = null;
int aiE29F8996_wave1_runPlayer;
playergroup aiE29F8996_wave1_runTarget;

//--------------------------------------------------------------------------------------------------
void aiE29F8996_wave1_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiE29F8996_wave1_enabled[init_i] = true;
        aiE29F8996_wave1_lastUnits[init_i] = null;
        aiE29F8996_wave1_lastWave[init_i] = null;
    }

    aiE29F8996_wave1_trigger = TriggerCreate("aiE29F8996_wave1_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiE29F8996_wave1_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiE29F8996_wave1_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiE29F8996_wave1_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiE29F8996_wave1_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup aiE29F8996_wave1_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiE29F8996_wave1_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave aiE29F8996_wave1_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiE29F8996_wave1_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiE29F8996_wave1_runFunc (bool c, bool a) {
    int p = aiE29F8996_wave1_runPlayer;
    playergroup target = aiE29F8996_wave1_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiE29F8996_wave1_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiE29F8996_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 220; }
    if (d == 2) { ta = 220; }
    if (d == 3) { ta = 220; }
    if (d == 4) { ta = 220; }
    tg = 0;
    if (d == 1) { tg = 50; }
    if (d == 2) { tg = 50; }
    if (d == 3) { tg = 50; }
    if (d == 4) { tg = 50; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    TriggerExecute(TriggerFind("gt_KaraxInitialAttack01Q_Func"), true, false);
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(272));

    gatherPoint = aiE29F8996_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    gatherPoint = PointFromId(246);
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    createPoint = gatherPoint;
    createPoint = PointFromId(294);

    aiE29F8996_wave1_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 16; }
    if (d == 2) { createCount = 16; }
    if (d == 3) { createCount = 16; }
    if (d == 4) { createCount = 16; }
    if (createCount > 0) {
        UnitCreate(createCount, "Zergling", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiE29F8996_wave1_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 3; }
    if (d == 2) { createCount = 3; }
    if (d == 3) { createCount = 4; }
    if (d == 4) { createCount = 5; }
    if (createCount > 0) {
        UnitCreate(createCount, "Mutalisk", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiE29F8996_wave1_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 4; }
    if (d == 2) { createCount = 4; }
    if (d == 3) { createCount = 5; }
    if (d == 4) { createCount = 6; }
    if (createCount > 0) {
        UnitCreate(createCount, "Roach", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiE29F8996_wave1_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 4; }
    if (d == 2) { createCount = 4; }
    if (d == 3) { createCount = 5; }
    if (d == 4) { createCount = 6; }
    if (createCount > 0) {
        UnitCreate(createCount, "Hydralisk", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiE29F8996_wave1_lastUnits[p], UnitLastCreatedGroup());
    }

    AIAttackWaveSend(p, ts, false);
    aiE29F8996_wave1_lastWave[p] = WaveLastCreated();
    aiE29F8996_lastWave[p] = aiE29F8996_wave1_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiE29F8996_wave1_run (int p, playergroup target, bool wait) {
    aiE29F8996_wave1_runPlayer = p;
    aiE29F8996_wave1_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiE29F8996_wave1_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiE29F8996_wave5_enabled;
unitgroup[17] aiE29F8996_wave5_lastUnits;
wave[17] aiE29F8996_wave5_lastWave;
trigger aiE29F8996_wave5_trigger = null;
int aiE29F8996_wave5_runPlayer;
playergroup aiE29F8996_wave5_runTarget;

//--------------------------------------------------------------------------------------------------
void aiE29F8996_wave5_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiE29F8996_wave5_enabled[init_i] = true;
        aiE29F8996_wave5_lastUnits[init_i] = null;
        aiE29F8996_wave5_lastWave[init_i] = null;
    }

    aiE29F8996_wave5_trigger = TriggerCreate("aiE29F8996_wave5_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiE29F8996_wave5_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiE29F8996_wave5_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiE29F8996_wave5_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiE29F8996_wave5_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup aiE29F8996_wave5_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiE29F8996_wave5_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave aiE29F8996_wave5_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiE29F8996_wave5_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiE29F8996_wave5_runFunc (bool c, bool a) {
    int p = aiE29F8996_wave5_runPlayer;
    playergroup target = aiE29F8996_wave5_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiE29F8996_wave5_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiE29F8996_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 180; }
    if (d == 2) { ta = 180; }
    if (d == 3) { ta = 180; }
    if (d == 4) { ta = 180; }
    tg = 0;
    if (d == 1) { tg = 45; }
    if (d == 2) { tg = 45; }
    if (d == 3) { tg = 45; }
    if (d == 4) { tg = 45; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(272));

    gatherPoint = aiE29F8996_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    gatherPoint = PointFromId(246);
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    createPoint = gatherPoint;
    createPoint = PointFromId(294);

    aiE29F8996_wave5_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 24; }
    if (d == 2) { createCount = 24; }
    if (d == 3) { createCount = 32; }
    if (d == 4) { createCount = 32; }
    if (createCount > 0) {
        UnitCreate(createCount, "Zergling", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiE29F8996_wave5_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 2; }
    if (d == 2) { createCount = 2; }
    if (d == 3) { createCount = 2; }
    if (d == 4) { createCount = 3; }
    if (createCount > 0) {
        UnitCreate(createCount, "Ultralisk", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiE29F8996_wave5_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 6; }
    if (d == 2) { createCount = 6; }
    if (d == 3) { createCount = 8; }
    if (d == 4) { createCount = 8; }
    if (createCount > 0) {
        UnitCreate(createCount, "Mutalisk", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiE29F8996_wave5_lastUnits[p], UnitLastCreatedGroup());
    }

    AIAttackWaveSend(p, ts, false);
    aiE29F8996_wave5_lastWave[p] = WaveLastCreated();
    aiE29F8996_lastWave[p] = aiE29F8996_wave5_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiE29F8996_wave5_run (int p, playergroup target, bool wait) {
    aiE29F8996_wave5_runPlayer = p;
    aiE29F8996_wave5_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiE29F8996_wave5_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiE29F8996_wave2_enabled;
unitgroup[17] aiE29F8996_wave2_lastUnits;
wave[17] aiE29F8996_wave2_lastWave;
trigger aiE29F8996_wave2_trigger = null;
int aiE29F8996_wave2_runPlayer;
playergroup aiE29F8996_wave2_runTarget;

//--------------------------------------------------------------------------------------------------
void aiE29F8996_wave2_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiE29F8996_wave2_enabled[init_i] = true;
        aiE29F8996_wave2_lastUnits[init_i] = null;
        aiE29F8996_wave2_lastWave[init_i] = null;
    }

    aiE29F8996_wave2_trigger = TriggerCreate("aiE29F8996_wave2_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiE29F8996_wave2_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiE29F8996_wave2_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiE29F8996_wave2_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiE29F8996_wave2_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup aiE29F8996_wave2_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiE29F8996_wave2_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave aiE29F8996_wave2_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiE29F8996_wave2_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiE29F8996_wave2_runFunc (bool c, bool a) {
    int p = aiE29F8996_wave2_runPlayer;
    playergroup target = aiE29F8996_wave2_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiE29F8996_wave2_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiE29F8996_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 140; }
    if (d == 2) { ta = 140; }
    if (d == 3) { ta = 140; }
    if (d == 4) { ta = 140; }
    tg = 0;
    if (d == 1) { tg = 40; }
    if (d == 2) { tg = 40; }
    if (d == 3) { tg = 40; }
    if (d == 4) { tg = 40; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(272));

    gatherPoint = aiE29F8996_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    gatherPoint = PointFromId(246);
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    createPoint = gatherPoint;
    createPoint = PointFromId(294);

    aiE29F8996_wave2_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 3; }
    if (d == 2) { createCount = 3; }
    if (d == 3) { createCount = 3; }
    if (d == 4) { createCount = 4; }
    if (createCount > 0) {
        UnitCreate(createCount, "Ultralisk", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiE29F8996_wave2_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 9; }
    if (d == 2) { createCount = 9; }
    if (d == 3) { createCount = 9; }
    if (d == 4) { createCount = 9; }
    if (createCount > 0) {
        UnitCreate(createCount, "Hydralisk", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiE29F8996_wave2_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 6; }
    if (d == 2) { createCount = 6; }
    if (d == 3) { createCount = 6; }
    if (d == 4) { createCount = 6; }
    if (createCount > 0) {
        UnitCreate(createCount, "Roach", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiE29F8996_wave2_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 6; }
    if (d == 2) { createCount = 6; }
    if (d == 3) { createCount = 6; }
    if (d == 4) { createCount = 6; }
    if (createCount > 0) {
        UnitCreate(createCount, "Mutalisk", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiE29F8996_wave2_lastUnits[p], UnitLastCreatedGroup());
    }

    AIAttackWaveSend(p, ts, false);
    aiE29F8996_wave2_lastWave[p] = WaveLastCreated();
    aiE29F8996_lastWave[p] = aiE29F8996_wave2_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiE29F8996_wave2_run (int p, playergroup target, bool wait) {
    aiE29F8996_wave2_runPlayer = p;
    aiE29F8996_wave2_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiE29F8996_wave2_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiE29F8996_wave3_enabled;
unitgroup[17] aiE29F8996_wave3_lastUnits;
wave[17] aiE29F8996_wave3_lastWave;
trigger aiE29F8996_wave3_trigger = null;
int aiE29F8996_wave3_runPlayer;
playergroup aiE29F8996_wave3_runTarget;

//--------------------------------------------------------------------------------------------------
void aiE29F8996_wave3_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiE29F8996_wave3_enabled[init_i] = true;
        aiE29F8996_wave3_lastUnits[init_i] = null;
        aiE29F8996_wave3_lastWave[init_i] = null;
    }

    aiE29F8996_wave3_trigger = TriggerCreate("aiE29F8996_wave3_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiE29F8996_wave3_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiE29F8996_wave3_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiE29F8996_wave3_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiE29F8996_wave3_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup aiE29F8996_wave3_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiE29F8996_wave3_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave aiE29F8996_wave3_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiE29F8996_wave3_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiE29F8996_wave3_runFunc (bool c, bool a) {
    int p = aiE29F8996_wave3_runPlayer;
    playergroup target = aiE29F8996_wave3_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiE29F8996_wave3_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiE29F8996_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 320; }
    if (d == 2) { ta = 320; }
    if (d == 3) { ta = 320; }
    if (d == 4) { ta = 320; }
    tg = 0;
    if (d == 1) { tg = 45; }
    if (d == 2) { tg = 45; }
    if (d == 3) { tg = 45; }
    if (d == 4) { tg = 45; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(272));

    gatherPoint = aiE29F8996_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    gatherPoint = PointFromId(246);
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    createPoint = gatherPoint;
    createPoint = PointFromId(294);

    aiE29F8996_wave3_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 24; }
    if (d == 2) { createCount = 24; }
    if (d == 3) { createCount = 24; }
    if (d == 4) { createCount = 24; }
    if (createCount > 0) {
        UnitCreate(createCount, "Zergling", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiE29F8996_wave3_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 4; }
    if (d == 2) { createCount = 4; }
    if (d == 3) { createCount = 6; }
    if (d == 4) { createCount = 6; }
    if (createCount > 0) {
        UnitCreate(createCount, "Baneling", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiE29F8996_wave3_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 3; }
    if (d == 2) { createCount = 3; }
    if (d == 3) { createCount = 4; }
    if (d == 4) { createCount = 4; }
    if (createCount > 0) {
        UnitCreate(createCount, "InfestedAbomination", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiE29F8996_wave3_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 5; }
    if (d == 2) { createCount = 5; }
    if (d == 3) { createCount = 5; }
    if (d == 4) { createCount = 6; }
    if (createCount > 0) {
        UnitCreate(createCount, "Guardian", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiE29F8996_wave3_lastUnits[p], UnitLastCreatedGroup());
    }

    AIAttackWaveSend(p, ts, false);
    aiE29F8996_wave3_lastWave[p] = WaveLastCreated();
    aiE29F8996_lastWave[p] = aiE29F8996_wave3_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiE29F8996_wave3_run (int p, playergroup target, bool wait) {
    aiE29F8996_wave3_runPlayer = p;
    aiE29F8996_wave3_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiE29F8996_wave3_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: Wave 5 - Streaming Wave 4
//--------------------------------------------------------------------------------------------------
bool[17] aiE29F8996_wave4_enabled;
unitgroup[17] aiE29F8996_wave4_lastUnits;
wave[17] aiE29F8996_wave4_lastWave;
trigger aiE29F8996_wave4_trigger = null;
int aiE29F8996_wave4_runPlayer;
playergroup aiE29F8996_wave4_runTarget;

//--------------------------------------------------------------------------------------------------
void aiE29F8996_wave4_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiE29F8996_wave4_enabled[init_i] = true;
        aiE29F8996_wave4_lastUnits[init_i] = null;
        aiE29F8996_wave4_lastWave[init_i] = null;
    }

    aiE29F8996_wave4_trigger = TriggerCreate("aiE29F8996_wave4_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiE29F8996_wave4_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiE29F8996_wave4_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiE29F8996_wave4_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiE29F8996_wave4_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup aiE29F8996_wave4_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiE29F8996_wave4_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave aiE29F8996_wave4_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiE29F8996_wave4_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiE29F8996_wave4_runFunc (bool c, bool a) {
    int p = aiE29F8996_wave4_runPlayer;
    playergroup target = aiE29F8996_wave4_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiE29F8996_wave4_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiE29F8996_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 60; }
    if (d == 2) { ta = 60; }
    if (d == 3) { ta = 60; }
    if (d == 4) { ta = 60; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiE29F8996_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    createPoint = gatherPoint;

    aiE29F8996_wave4_lastUnits[p] = UnitGroupEmpty();

    Wait(ts, c_timeAI);
    TriggerExecute(TriggerFind("gt_StreamingWave04PUR_Func"), true, false);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiE29F8996_wave4_run (int p, playergroup target, bool wait) {
    aiE29F8996_wave4_runPlayer = p;
    aiE29F8996_wave4_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiE29F8996_wave4_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiE29F8996_wave8_enabled;
unitgroup[17] aiE29F8996_wave8_lastUnits;
wave[17] aiE29F8996_wave8_lastWave;
trigger aiE29F8996_wave8_trigger = null;
int aiE29F8996_wave8_runPlayer;
playergroup aiE29F8996_wave8_runTarget;

//--------------------------------------------------------------------------------------------------
void aiE29F8996_wave8_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiE29F8996_wave8_enabled[init_i] = true;
        aiE29F8996_wave8_lastUnits[init_i] = null;
        aiE29F8996_wave8_lastWave[init_i] = null;
    }

    aiE29F8996_wave8_trigger = TriggerCreate("aiE29F8996_wave8_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiE29F8996_wave8_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiE29F8996_wave8_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiE29F8996_wave8_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiE29F8996_wave8_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup aiE29F8996_wave8_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiE29F8996_wave8_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave aiE29F8996_wave8_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiE29F8996_wave8_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiE29F8996_wave8_runFunc (bool c, bool a) {
    int p = aiE29F8996_wave8_runPlayer;
    playergroup target = aiE29F8996_wave8_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiE29F8996_wave8_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiE29F8996_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 270; }
    if (d == 2) { ta = 270; }
    if (d == 3) { ta = 270; }
    if (d == 4) { ta = 270; }
    tg = 0;
    if (d == 1) { tg = 50; }
    if (d == 2) { tg = 50; }
    if (d == 3) { tg = 50; }
    if (d == 4) { tg = 50; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(272));

    gatherPoint = aiE29F8996_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    gatherPoint = PointFromId(246);
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    createPoint = gatherPoint;
    createPoint = PointFromId(294);

    aiE29F8996_wave8_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 18; }
    if (d == 2) { createCount = 18; }
    if (d == 3) { createCount = 18; }
    if (d == 4) { createCount = 24; }
    if (createCount > 0) {
        UnitCreate(createCount, "Zergling", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiE29F8996_wave8_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 8; }
    if (d == 2) { createCount = 8; }
    if (d == 3) { createCount = 8; }
    if (d == 4) { createCount = 12; }
    if (createCount > 0) {
        UnitCreate(createCount, "Roach", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiE29F8996_wave8_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 3; }
    if (d == 2) { createCount = 3; }
    if (d == 3) { createCount = 4; }
    if (d == 4) { createCount = 4; }
    if (createCount > 0) {
        UnitCreate(createCount, "Guardian", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiE29F8996_wave8_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 6; }
    if (d == 2) { createCount = 6; }
    if (d == 3) { createCount = 8; }
    if (d == 4) { createCount = 8; }
    if (createCount > 0) {
        UnitCreate(createCount, "Mutalisk", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiE29F8996_wave8_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 1; }
    if (d == 2) { createCount = 1; }
    if (d == 3) { createCount = 1; }
    if (d == 4) { createCount = 1; }
    if (createCount > 0) {
        UnitCreate(createCount, "Overseer", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiE29F8996_wave8_lastUnits[p], UnitLastCreatedGroup());
    }

    AIAttackWaveSend(p, ts, false);
    aiE29F8996_wave8_lastWave[p] = WaveLastCreated();
    aiE29F8996_lastWave[p] = aiE29F8996_wave8_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiE29F8996_wave8_run (int p, playergroup target, bool wait) {
    aiE29F8996_wave8_runPlayer = p;
    aiE29F8996_wave8_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiE29F8996_wave8_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: Wave 6 - Streaming Wave 5 Q
//--------------------------------------------------------------------------------------------------
bool[17] aiE29F8996_wave6_enabled;
unitgroup[17] aiE29F8996_wave6_lastUnits;
wave[17] aiE29F8996_wave6_lastWave;
trigger aiE29F8996_wave6_trigger = null;
int aiE29F8996_wave6_runPlayer;
playergroup aiE29F8996_wave6_runTarget;

//--------------------------------------------------------------------------------------------------
void aiE29F8996_wave6_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiE29F8996_wave6_enabled[init_i] = true;
        aiE29F8996_wave6_lastUnits[init_i] = null;
        aiE29F8996_wave6_lastWave[init_i] = null;
    }

    aiE29F8996_wave6_trigger = TriggerCreate("aiE29F8996_wave6_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiE29F8996_wave6_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiE29F8996_wave6_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiE29F8996_wave6_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiE29F8996_wave6_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup aiE29F8996_wave6_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiE29F8996_wave6_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave aiE29F8996_wave6_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiE29F8996_wave6_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiE29F8996_wave6_runFunc (bool c, bool a) {
    int p = aiE29F8996_wave6_runPlayer;
    playergroup target = aiE29F8996_wave6_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiE29F8996_wave6_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiE29F8996_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 70; }
    if (d == 2) { ta = 70; }
    if (d == 3) { ta = 70; }
    if (d == 4) { ta = 70; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiE29F8996_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    createPoint = gatherPoint;

    aiE29F8996_wave6_lastUnits[p] = UnitGroupEmpty();

    Wait(ts, c_timeAI);
    TriggerExecute(TriggerFind("gt_StreamingWave05PUR_Func"), true, false);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiE29F8996_wave6_run (int p, playergroup target, bool wait) {
    aiE29F8996_wave6_runPlayer = p;
    aiE29F8996_wave6_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiE29F8996_wave6_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiE29F8996_wave9_enabled;
unitgroup[17] aiE29F8996_wave9_lastUnits;
wave[17] aiE29F8996_wave9_lastWave;
trigger aiE29F8996_wave9_trigger = null;
int aiE29F8996_wave9_runPlayer;
playergroup aiE29F8996_wave9_runTarget;

//--------------------------------------------------------------------------------------------------
void aiE29F8996_wave9_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiE29F8996_wave9_enabled[init_i] = true;
        aiE29F8996_wave9_lastUnits[init_i] = null;
        aiE29F8996_wave9_lastWave[init_i] = null;
    }

    aiE29F8996_wave9_trigger = TriggerCreate("aiE29F8996_wave9_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiE29F8996_wave9_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiE29F8996_wave9_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiE29F8996_wave9_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiE29F8996_wave9_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup aiE29F8996_wave9_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiE29F8996_wave9_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave aiE29F8996_wave9_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiE29F8996_wave9_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiE29F8996_wave9_runFunc (bool c, bool a) {
    int p = aiE29F8996_wave9_runPlayer;
    playergroup target = aiE29F8996_wave9_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiE29F8996_wave9_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiE29F8996_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 120; }
    if (d == 2) { ta = 120; }
    if (d == 3) { ta = 120; }
    if (d == 4) { ta = 120; }
    tg = 0;
    if (d == 1) { tg = 45; }
    if (d == 2) { tg = 45; }
    if (d == 3) { tg = 45; }
    if (d == 4) { tg = 45; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(272));

    gatherPoint = aiE29F8996_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    gatherPoint = PointFromId(246);
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    createPoint = gatherPoint;
    createPoint = PointFromId(294);

    aiE29F8996_wave9_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 32; }
    if (d == 2) { createCount = 32; }
    if (d == 3) { createCount = 32; }
    if (d == 4) { createCount = 32; }
    if (createCount > 0) {
        UnitCreate(createCount, "Zergling", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiE29F8996_wave9_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 12; }
    if (d == 2) { createCount = 12; }
    if (d == 3) { createCount = 12; }
    if (d == 4) { createCount = 12; }
    if (createCount > 0) {
        UnitCreate(createCount, "Hydralisk", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiE29F8996_wave9_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 6; }
    if (d == 2) { createCount = 6; }
    if (d == 3) { createCount = 6; }
    if (d == 4) { createCount = 8; }
    if (createCount > 0) {
        UnitCreate(createCount, "InfestedAbomination", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiE29F8996_wave9_lastUnits[p], UnitLastCreatedGroup());
    }

    AIAttackWaveSend(p, ts, false);
    aiE29F8996_wave9_lastWave[p] = WaveLastCreated();
    aiE29F8996_lastWave[p] = aiE29F8996_wave9_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiE29F8996_wave9_run (int p, playergroup target, bool wait) {
    aiE29F8996_wave9_runPlayer = p;
    aiE29F8996_wave9_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiE29F8996_wave9_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiE29F8996_wave7_enabled;
unitgroup[17] aiE29F8996_wave7_lastUnits;
wave[17] aiE29F8996_wave7_lastWave;
trigger aiE29F8996_wave7_trigger = null;
int aiE29F8996_wave7_runPlayer;
playergroup aiE29F8996_wave7_runTarget;

//--------------------------------------------------------------------------------------------------
void aiE29F8996_wave7_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiE29F8996_wave7_enabled[init_i] = true;
        aiE29F8996_wave7_lastUnits[init_i] = null;
        aiE29F8996_wave7_lastWave[init_i] = null;
    }

    aiE29F8996_wave7_trigger = TriggerCreate("aiE29F8996_wave7_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiE29F8996_wave7_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiE29F8996_wave7_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiE29F8996_wave7_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiE29F8996_wave7_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup aiE29F8996_wave7_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiE29F8996_wave7_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave aiE29F8996_wave7_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiE29F8996_wave7_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiE29F8996_wave7_runFunc (bool c, bool a) {
    int p = aiE29F8996_wave7_runPlayer;
    playergroup target = aiE29F8996_wave7_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiE29F8996_wave7_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiE29F8996_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 200; }
    if (d == 2) { ta = 200; }
    if (d == 3) { ta = 200; }
    if (d == 4) { ta = 200; }
    tg = 0;
    if (d == 1) { tg = 45; }
    if (d == 2) { tg = 45; }
    if (d == 3) { tg = 45; }
    if (d == 4) { tg = 45; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(272));

    gatherPoint = aiE29F8996_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    gatherPoint = PointFromId(246);
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    createPoint = gatherPoint;
    createPoint = PointFromId(294);

    aiE29F8996_wave7_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 32; }
    if (d == 2) { createCount = 32; }
    if (d == 3) { createCount = 32; }
    if (d == 4) { createCount = 32; }
    if (createCount > 0) {
        UnitCreate(createCount, "Zergling", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiE29F8996_wave7_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 6; }
    if (d == 2) { createCount = 6; }
    if (d == 3) { createCount = 6; }
    if (d == 4) { createCount = 8; }
    if (createCount > 0) {
        UnitCreate(createCount, "Baneling", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiE29F8996_wave7_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 3; }
    if (d == 2) { createCount = 3; }
    if (d == 3) { createCount = 4; }
    if (d == 4) { createCount = 4; }
    if (createCount > 0) {
        UnitCreate(createCount, "Ultralisk", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiE29F8996_wave7_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 10; }
    if (d == 2) { createCount = 10; }
    if (d == 3) { createCount = 10; }
    if (d == 4) { createCount = 12; }
    if (createCount > 0) {
        UnitCreate(createCount, "Mutalisk", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiE29F8996_wave7_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 1; }
    if (d == 2) { createCount = 1; }
    if (d == 3) { createCount = 1; }
    if (d == 4) { createCount = 2; }
    if (createCount > 0) {
        UnitCreate(createCount, "Overseer", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiE29F8996_wave7_lastUnits[p], UnitLastCreatedGroup());
    }

    AIAttackWaveSend(p, ts, false);
    aiE29F8996_wave7_lastWave[p] = WaveLastCreated();
    aiE29F8996_lastWave[p] = aiE29F8996_wave7_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiE29F8996_wave7_run (int p, playergroup target, bool wait) {
    aiE29F8996_wave7_runPlayer = p;
    aiE29F8996_wave7_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiE29F8996_wave7_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave Wrappers
//--------------------------------------------------------------------------------------------------
void aiE29F8996_wave_enable (int w, int p, bool val) {
    if (w == 1) { aiE29F8996_wave1_enable(p, val); }
    if (w == 5) { aiE29F8996_wave5_enable(p, val); }
    if (w == 2) { aiE29F8996_wave2_enable(p, val); }
    if (w == 3) { aiE29F8996_wave3_enable(p, val); }
    if (w == 4) { aiE29F8996_wave4_enable(p, val); }
    if (w == 8) { aiE29F8996_wave8_enable(p, val); }
    if (w == 6) { aiE29F8996_wave6_enable(p, val); }
    if (w == 9) { aiE29F8996_wave9_enable(p, val); }
    if (w == 7) { aiE29F8996_wave7_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
bool aiE29F8996_wave_isEnabled (int w, int p) {
    if (w == 1) { return aiE29F8996_wave1_isEnabled(p); }
    if (w == 5) { return aiE29F8996_wave5_isEnabled(p); }
    if (w == 2) { return aiE29F8996_wave2_isEnabled(p); }
    if (w == 3) { return aiE29F8996_wave3_isEnabled(p); }
    if (w == 4) { return aiE29F8996_wave4_isEnabled(p); }
    if (w == 8) { return aiE29F8996_wave8_isEnabled(p); }
    if (w == 6) { return aiE29F8996_wave6_isEnabled(p); }
    if (w == 9) { return aiE29F8996_wave9_isEnabled(p); }
    if (w == 7) { return aiE29F8996_wave7_isEnabled(p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup aiE29F8996_wave_createdUnits (int w, int p) {
    if (w == 1) { return aiE29F8996_wave1_createdUnits(p); }
    if (w == 5) { return aiE29F8996_wave5_createdUnits(p); }
    if (w == 2) { return aiE29F8996_wave2_createdUnits(p); }
    if (w == 3) { return aiE29F8996_wave3_createdUnits(p); }
    if (w == 4) { return aiE29F8996_wave4_createdUnits(p); }
    if (w == 8) { return aiE29F8996_wave8_createdUnits(p); }
    if (w == 6) { return aiE29F8996_wave6_createdUnits(p); }
    if (w == 9) { return aiE29F8996_wave9_createdUnits(p); }
    if (w == 7) { return aiE29F8996_wave7_createdUnits(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave aiE29F8996_wave_createdWave (int w, int p) {
    if (w == 1) { return aiE29F8996_wave1_createdWave(p); }
    if (w == 5) { return aiE29F8996_wave5_createdWave(p); }
    if (w == 2) { return aiE29F8996_wave2_createdWave(p); }
    if (w == 3) { return aiE29F8996_wave3_createdWave(p); }
    if (w == 4) { return aiE29F8996_wave4_createdWave(p); }
    if (w == 8) { return aiE29F8996_wave8_createdWave(p); }
    if (w == 6) { return aiE29F8996_wave6_createdWave(p); }
    if (w == 9) { return aiE29F8996_wave9_createdWave(p); }
    if (w == 7) { return aiE29F8996_wave7_createdWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void aiE29F8996_wave_run (int w, int p, playergroup target, bool wait) {
    if (w == 1) { aiE29F8996_wave1_run(p, target, wait); }
    if (w == 5) { aiE29F8996_wave5_run(p, target, wait); }
    if (w == 2) { aiE29F8996_wave2_run(p, target, wait); }
    if (w == 3) { aiE29F8996_wave3_run(p, target, wait); }
    if (w == 4) { aiE29F8996_wave4_run(p, target, wait); }
    if (w == 8) { aiE29F8996_wave8_run(p, target, wait); }
    if (w == 6) { aiE29F8996_wave6_run(p, target, wait); }
    if (w == 9) { aiE29F8996_wave9_run(p, target, wait); }
    if (w == 7) { aiE29F8996_wave7_run(p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
// Attack Wave Sequence
//--------------------------------------------------------------------------------------------------
trigger aiE29F8996_waves_trigger = null;
int aiE29F8996_waves_runPlayer;
playergroup aiE29F8996_waves_runTarget;

//--------------------------------------------------------------------------------------------------
void aiE29F8996_waves_init () {
    aiE29F8996_waves_trigger = TriggerCreate("aiE29F8996_waves_runFunc");
}

//--------------------------------------------------------------------------------------------------
bool aiE29F8996_waves_runFunc (bool c, bool a) {
    int p = aiE29F8996_waves_runPlayer;
    playergroup target = aiE29F8996_waves_runTarget;

    if (p < 0 || p >= 16) {
        return false;
    }

    aiE29F8996_wave1_run(p, target, true);
    aiE29F8996_wave5_run(p, target, true);
    aiE29F8996_wave2_run(p, target, true);
    aiE29F8996_wave3_run(p, target, true);
    aiE29F8996_wave4_run(p, target, true);
    aiE29F8996_wave8_run(p, target, true);
    aiE29F8996_wave6_run(p, target, true);
    aiE29F8996_wave9_run(p, target, true);
    aiE29F8996_wave7_run(p, target, true);

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiE29F8996_waves_run (int p, playergroup target) {
    aiE29F8996_waves_runPlayer = p;
    aiE29F8996_waves_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiE29F8996_waves_trigger, false, false);
}

//--------------------------------------------------------------------------------------------------
void aiE29F8996_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }

    aiE29F8996_wave1_enable(p, val);
    aiE29F8996_wave5_enable(p, val);
    aiE29F8996_wave2_enable(p, val);
    aiE29F8996_wave3_enable(p, val);
    aiE29F8996_wave4_enable(p, val);
    aiE29F8996_wave8_enable(p, val);
    aiE29F8996_wave6_enable(p, val);
    aiE29F8996_wave9_enable(p, val);
    aiE29F8996_wave7_enable(p, val);
}

//--------------------------------------------------------------------------------------------------
void aiE29F8996_waves_stop () {
    TriggerStop(aiE29F8996_waves_trigger);

    TriggerStop(aiE29F8996_wave1_trigger);
    TriggerStop(aiE29F8996_wave5_trigger);
    TriggerStop(aiE29F8996_wave2_trigger);
    TriggerStop(aiE29F8996_wave3_trigger);
    TriggerStop(aiE29F8996_wave4_trigger);
    TriggerStop(aiE29F8996_wave8_trigger);
    TriggerStop(aiE29F8996_wave6_trigger);
    TriggerStop(aiE29F8996_wave9_trigger);
    TriggerStop(aiE29F8996_wave7_trigger);
}

//--------------------------------------------------------------------------------------------------
// Configuration
//--------------------------------------------------------------------------------------------------
void aiE29F8996_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiE29F8996_defGather[p] = val;
}

//--------------------------------------------------------------------------------------------------
string aiE29F8996_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiE29F8996_customData[p];
}

//--------------------------------------------------------------------------------------------------
wave aiE29F8996_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiE29F8996_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
// Start
//--------------------------------------------------------------------------------------------------
bool aiE29F8996_initialized = false;

//--------------------------------------------------------------------------------------------------
void aiE29F8996_start (int p) {
    int init_i;

    if (p < 0 || p >= 16) {
        return;
    }
    if (!aiE29F8996_initialized) {
        aiE29F8996_wave1_init();
        aiE29F8996_wave5_init();
        aiE29F8996_wave2_init();
        aiE29F8996_wave3_init();
        aiE29F8996_wave4_init();
        aiE29F8996_wave8_init();
        aiE29F8996_wave6_init();
        aiE29F8996_wave9_init();
        aiE29F8996_wave7_init();
        aiE29F8996_waves_init();

        for (init_i = 0; init_i <= 16; init_i += 1) {
            aiE29F8996_defGather[init_i] = PointFromId(0);
        }

        aiE29F8996_initialized = true;
    }

    AICampaignStart(p);
}
