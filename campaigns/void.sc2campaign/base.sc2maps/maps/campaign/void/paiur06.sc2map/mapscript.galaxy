//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Salvation
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/VoidLib"
include "TriggerLibs/VoidCampaignLib"
include "TriggerLibs/VoidCampaignMissionLib"
include "TriggerLibs/VoidCampaignUILib"
include "ai5D126363"
include "ai4D3D7702"
include "aiE29F8996"
include "ai6E1E1700"
include "ai36ECF245"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libLotv_InitLib();
    libVoiC_InitLib();
    libVCMI_InitLib();
    libVCUI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_ZERG_GREEN = 2;
const int gv_pLAYER_03_ZERG_RED = 3;
const int gv_pLAYER_04_ZERG_PINK = 4;
const int gv_pLAYER_05_PROTOSS_ARMADA = 5;
const int gv_pLAYER_06_KEYSTONE = 6;
const int gv_pLAYER_07_TALDARIM = 7;
const int gv_pLAYER_08_NERAZIM = 8;
const int gv_pLAYER_09_PURIFIER = 9;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
playergroup gv_enemyPlayerGroup;
playergroup gv_friendlyPlayerGroup;
string gv_mapMusicTrack;
unit gv_keystone;
unit gv_vorazun;
unit gv_karax;
unit gv_alarak;
unit gv_nerazimNexus;
unit gv_taldarimNexus;
unit gv_purifierNexus;
unit gv_theBrutalisk;
unitgroup gv_performanceUnitsNW;
unitgroup gv_performanceUnitsSE;
unitgroup gv_performanceUnitsSW;
fixed gv_keystoneChargeIncrement;
fixed gv_keystoneChargeMax;
fixed gv_keystoneChargeCurrent;
int gv_keystoneBoard;
revealer gv_keystoneRevealer;
int gv_energyQPendingCount;
int gv_recentBuildingDeaths;
int[11] gv_recentBuildingDeathHistory;
bool[5] gv_spearTierState;
int[5] gv_disableDialog;
point[8] gv_prismDeployPoints;
unitgroup gv_armadaUnitGroup;
int gv_armadaUpgradeCounter;
int gv_alliedNexusesLost;
int gv_armadaUnitsHitBySOA;
bool gv_achievement_UsedSpearofAdunAbilities;
int gv_objectiveDestroyZergBase2;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicPausedUnits;
unitgroup gv_cinematicTempUnits;
bool gv_cinematicCompleted;
unit gv_introSuperWarpGate;
bool gv_introMusicCompleted;
int[9] gv_introMinerals;
int[3] gv_introGas;
unitgroup gv_introNerazimUnits;
unitgroup gv_introPurifierUnits;
unitgroup gv_introTaldarimUnits;
unitgroup gv_introPrePlacedPlayerUnits;
unitgroup gv_introWarpedInPlayerUnits;
unit gv_introAlarak;
unit gv_introVorazun;
unit gv_introKarax;
unit gv_victoryArtanis;
unit gv_victoryAlarak;
unit gv_victoryVorazun;
unit gv_victoryKarax;
unit gv_victoryFenix;

void InitGlobals () {
    int init_i;

    gv_enemyPlayerGroup = PlayerGroupEmpty();
    gv_friendlyPlayerGroup = PlayerGroupEmpty();
    gv_keystone = UnitFromId(418);
    gv_vorazun = UnitFromId(21);
    gv_karax = UnitFromId(55);
    gv_alarak = UnitFromId(230);
    gv_nerazimNexus = UnitFromId(38);
    gv_taldarimNexus = UnitFromId(26);
    gv_purifierNexus = UnitFromId(37);
    gv_performanceUnitsNW = UnitGroupEmpty();
    gv_performanceUnitsSE = UnitGroupEmpty();
    gv_performanceUnitsSW = UnitGroupEmpty();
    gv_keystoneChargeIncrement = 1.0;
    gv_keystoneChargeMax = 1800.0;
    gv_keystoneBoard = c_boardNone;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_spearTierState[init_i] = true;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_disableDialog[init_i] = c_invalidDialogId;
    }
    gv_armadaUnitGroup = UnitGroupEmpty();
    gv_objectiveDestroyZergBase2 = c_invalidObjectiveId;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_introNerazimUnits = UnitGroupEmpty();
    gv_introPurifierUnits = UnitGroupEmpty();
    gv_introTaldarimUnits = UnitGroupEmpty();
    gv_introPrePlacedPlayerUnits = UnitGroupEmpty();
    gv_introWarpedInPlayerUnits = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_MovingRevealers (region lp_movingRegion);
fixed gf_KeystoneChargePercent ();
void gf_DisableSpearPowerQ (int lp_index);
void gf_EnableDisableTier1Power (bool lp_enableDisable);
void gf_EnableDisableTier2Power (bool lp_enableDisable);
void gf_EnableDisableTier3Power (bool lp_enableDisable);
void gf_EnableDisableTier4Power (bool lp_enableDisable);
void gf_EnableDisableSpearTier (bool lp_enableDisable, string lp_powerSlot);
void gf_CreateDisableImage (int lp_dialog);
void gf_DisableAllActiveSpearPowers ();
void gf_AIWarpPrism (int lp_owner, unit lp_warpPrism, unitgroup lp_nearbyUnits);
void gf_AINerazimStalker (int lp_owner, unit lp_blinkStalker, unitgroup lp_nearbyUnits);
void gf_AIOverseer (int lp_owner, unit lp_overseer, unitgroup lp_nearbyUnits);
void gf_AIKarax (int lp_owner, unit lp_karax, unitgroup lp_nearbyUnits);
void gf_AIAlarak (int lp_owner, unit lp_alarak, unitgroup lp_nearbyUnits);
void gf_AIVorazun (int lp_owner, unit lp_vorazun, unitgroup lp_nearbyUnits);
void gf_SpawnStreamingWaveUnit (int lp_count, string lp_unitType, int lp_player, point lp_spawnPoint, fixed lp_delay);
void gf_SuperWarpGateLogic (unit lp_transport);
void gf_TurnWarpedInUnit (unit lp_unit);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04MusicSound;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_PerformanceInit;
trigger gt_PerformancePauseAll;
trigger gt_PerformanceUnpauseSE;
trigger gt_PerformanceUnpauseNW;
trigger gt_PerformanceUnpauseSW;
trigger gt_PerformanceRepauseAfterSoA;
trigger gt_PerformanceHandleTimeStopApply;
trigger gt_StartGameQ;
trigger gt_CreepExpansion1TimeBased;
trigger gt_CreepExpansion2AlliedNexusFalls;
trigger gt_KeystoneStatus;
trigger gt_KeystoneCharging;
trigger gt_KeystoneQuarterSave;
trigger gt_KeystoneHalfQ;
trigger gt_KeystoneAlmostDoneQ;
trigger gt_BuildingDeathHistoryUpdate;
trigger gt_VorazunRetreatTransmissionQ;
trigger gt_KaraxRetreatTransmissionQ;
trigger gt_AlarakRetreatTransmissionQ;
trigger gt_VorazunNexusTransmission01Q;
trigger gt_KaraxNexusTransmission01Q;
trigger gt_AlarakNexusTransmission01Q;
trigger gt_AlarakTripwireTransmission01Q;
trigger gt_VorazunTripwireTransmission01Q;
trigger gt_PurifierTripwireTransmission01Q;
trigger gt_DisableSpearPower1;
trigger gt_DisableSpearPower2;
trigger gt_DisableSpearPower3;
trigger gt_DisableSpearPower4;
trigger gt_SpearAttackTransmission01Q;
trigger gt_StartAI;
trigger gt_AIUpgradesCasualNormal;
trigger gt_AIUpgradesHardBrutal;
trigger gt_TurnOnBulliesOverTime;
trigger gt_TurnOnBulllies01;
trigger gt_TurnOnBulllies02;
trigger gt_TurnOnBulllies03;
trigger gt_TurnOnBulllies04;
trigger gt_ZergBaseRebuild;
trigger gt_AlliedMindControlCancelSuicide;
trigger gt_OverseerDespawn;
trigger gt_ProtossChampionRevived;
trigger gt_VorazunInitialAttack01Q;
trigger gt_KaraxInitialAttack01Q;
trigger gt_AlarakInitialAttack01Q;
trigger gt_StreamingAttack01Q;
trigger gt_StreamingAttack02Q;
trigger gt_StreamingAttack0304Q;
trigger gt_StreamingAttack050607Q;
trigger gt_StreamingWave01TAL;
trigger gt_StreamingWave02TAL;
trigger gt_StreamingWave03NER;
trigger gt_StreamingWave04PUR;
trigger gt_StreamingWave05PUR;
trigger gt_StreamingWave06NER;
trigger gt_StreamingWave07TAL;
trigger gt_ProtossStreamingWavesQ;
trigger gt_StreamingWave08NER;
trigger gt_StreamingWave09TAL;
trigger gt_StreamingWave10PUR;
trigger gt_ArmadaAttack1Mid;
trigger gt_ArmadaAttack2TopMid;
trigger gt_ArmadaAttack3BotMid;
trigger gt_ArmadaAttack4Bot;
trigger gt_ArmadaAttack5Mid;
trigger gt_ArmadaAttack6BotMid;
trigger gt_ArmadaAttack7Mid;
trigger gt_ArmadaAttack8TopMid;
trigger gt_ArmadaAttack9Top;
trigger gt_ArmadaAttack10Mid;
trigger gt_ArmadaAttack11Top;
trigger gt_ArmadaAttack12Mid;
trigger gt_ArmadaAttack13Bot;
trigger gt_ArmadaTransmissionWave1Q;
trigger gt_ArmadaTransmissionWave2Q;
trigger gt_ArmadaTransmissionWave6Q;
trigger gt_ArmadaTransmissionWave9Q;
trigger gt_AmonTransmission1Q;
trigger gt_AmonTransmission2Q;
trigger gt_AmonTransmission3Q;
trigger gt_SuperWarpGateSpawns;
trigger gt_DefeatBaseDead;
trigger gt_DefeatKeystoneDestroyed;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_StatSoAHitsonGoldenArmada;
trigger gt_AchievementSoAHitsonGoldenArmada;
trigger gt_AchievementVictorywithoutusingSpearofAdun;
trigger gt_MasteryKilltheBrutalisk;
trigger gt_TipReadyQ;
trigger gt_ObjectiveKeystoneMustSurviveCreate;
trigger gt_ObjectiveKeystoneMustSurviveComplete;
trigger gt_ObjectiveKeystoneMustSurviveFailed;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_IntroCatchWarpedUnits;
trigger gt_IntroMusic;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;
trigger gt_VictoryMusic;

//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;

//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        cai_playerAI[init_i] = null;
    }
}

//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;

    if (cai_playerAI[p] == "ai5D126363") { ai5D126363_start(p); }
    if (cai_playerAI[p] == "ai4D3D7702") { ai4D3D7702_start(p); }
    if (cai_playerAI[p] == "aiE29F8996") { aiE29F8996_start(p); }
    if (cai_playerAI[p] == "ai6E1E1700") { ai6E1E1700_start(p); }
    if (cai_playerAI[p] == "ai36ECF245") { ai36ECF245_start(p); }
}

//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai5D126363") { ai5D126363_setDefGather(p, val); }
    if (cai_playerAI[p] == "ai4D3D7702") { ai4D3D7702_setDefGather(p, val); }
    if (cai_playerAI[p] == "aiE29F8996") { aiE29F8996_setDefGather(p, val); }
    if (cai_playerAI[p] == "ai6E1E1700") { ai6E1E1700_setDefGather(p, val); }
    if (cai_playerAI[p] == "ai36ECF245") { ai36ECF245_setDefGather(p, val); }
}

//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai5D126363") { return ai5D126363_getCustomData(p); }
    if (cai_playerAI[p] == "ai4D3D7702") { return ai4D3D7702_getCustomData(p); }
    if (cai_playerAI[p] == "aiE29F8996") { return aiE29F8996_getCustomData(p); }
    if (cai_playerAI[p] == "ai6E1E1700") { return ai6E1E1700_getCustomData(p); }
    if (cai_playerAI[p] == "ai36ECF245") { return ai36ECF245_getCustomData(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai5D126363") { return ai5D126363_getLastWave(p); }
    if (cai_playerAI[p] == "ai4D3D7702") { return ai4D3D7702_getLastWave(p); }
    if (cai_playerAI[p] == "aiE29F8996") { return aiE29F8996_getLastWave(p); }
    if (cai_playerAI[p] == "ai6E1E1700") { return ai6E1E1700_getLastWave(p); }
    if (cai_playerAI[p] == "ai36ECF245") { return ai36ECF245_getLastWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai5D126363") { ai5D126363_waves_run(p, target); }
    if (cai_playerAI[p] == "ai4D3D7702") { ai4D3D7702_waves_run(p, target); }
    if (cai_playerAI[p] == "aiE29F8996") { aiE29F8996_waves_run(p, target); }
    if (cai_playerAI[p] == "ai6E1E1700") { ai6E1E1700_waves_run(p, target); }
    if (cai_playerAI[p] == "ai36ECF245") { ai36ECF245_waves_run(p, target); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai5D126363") { ai5D126363_waves_enable(p, val); }
    if (cai_playerAI[p] == "ai4D3D7702") { ai4D3D7702_waves_enable(p, val); }
    if (cai_playerAI[p] == "aiE29F8996") { aiE29F8996_waves_enable(p, val); }
    if (cai_playerAI[p] == "ai6E1E1700") { ai6E1E1700_waves_enable(p, val); }
    if (cai_playerAI[p] == "ai36ECF245") { ai36ECF245_waves_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "ai5D126363") { ai5D126363_waves_stop(); }
    if (ai == "ai4D3D7702") { ai4D3D7702_waves_stop(); }
    if (ai == "aiE29F8996") { aiE29F8996_waves_stop(); }
    if (ai == "ai6E1E1700") { ai6E1E1700_waves_stop(); }
    if (ai == "ai36ECF245") { ai36ECF245_waves_stop(); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai5D126363") { ai5D126363_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "ai4D3D7702") { ai4D3D7702_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "aiE29F8996") { aiE29F8996_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "ai6E1E1700") { ai6E1E1700_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "ai36ECF245") { ai36ECF245_wave_run(w, p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai5D126363") { ai5D126363_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "ai4D3D7702") { ai4D3D7702_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "aiE29F8996") { aiE29F8996_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "ai6E1E1700") { ai6E1E1700_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "ai36ECF245") { ai36ECF245_wave_enable(w, p, val); }
}

//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "ai5D126363") { return ai5D126363_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "ai4D3D7702") { return ai4D3D7702_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "aiE29F8996") { return aiE29F8996_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "ai6E1E1700") { return ai6E1E1700_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "ai36ECF245") { return ai36ECF245_wave_isEnabled(w, p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai5D126363") { return ai5D126363_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "ai4D3D7702") { return ai4D3D7702_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "aiE29F8996") { return aiE29F8996_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "ai6E1E1700") { return ai6E1E1700_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "ai36ECF245") { return ai36ECF245_wave_createdUnits(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai5D126363") { return ai5D126363_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "ai4D3D7702") { return ai4D3D7702_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "aiE29F8996") { return aiE29F8996_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "ai6E1E1700") { return ai6E1E1700_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "ai36ECF245") { return ai36ECF245_wave_createdWave(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_startall () {
    cai_start("ai5D126363", 2);
    cai_start("ai4D3D7702", 3);
    cai_start("aiE29F8996", 4);
    cai_start("ai6E1E1700", 5);
    cai_start("ai36ECF245", 6);
    AICampaignStart(7);
    AICampaignStart(8);
    AICampaignStart(9);
}

//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    PlayerGroupAdd(target, 6);
    PlayerGroupAdd(target, 7);
    PlayerGroupAdd(target, 8);
    PlayerGroupAdd(target, 9);
    cai_waves_run(2, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    PlayerGroupAdd(target, 6);
    PlayerGroupAdd(target, 7);
    PlayerGroupAdd(target, 8);
    PlayerGroupAdd(target, 9);
    cai_waves_run(3, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    PlayerGroupAdd(target, 6);
    PlayerGroupAdd(target, 7);
    PlayerGroupAdd(target, 8);
    PlayerGroupAdd(target, 9);
    cai_waves_run(4, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    PlayerGroupAdd(target, 6);
    PlayerGroupAdd(target, 7);
    PlayerGroupAdd(target, 8);
    PlayerGroupAdd(target, 9);
    cai_waves_run(5, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 2);
    PlayerGroupAdd(target, 3);
    PlayerGroupAdd(target, 4);
    PlayerGroupAdd(target, 5);
    cai_waves_run(6, target);
}

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
trigger auto_gf_MovingRevealers_Trigger = null;
region auto_gf_MovingRevealers_lp_movingRegion;

void gf_MovingRevealers (region lp_movingRegion) {
    auto_gf_MovingRevealers_lp_movingRegion = lp_movingRegion;

    if (auto_gf_MovingRevealers_Trigger == null) {
        auto_gf_MovingRevealers_Trigger = TriggerCreate("auto_gf_MovingRevealers_TriggerFunc");
    }

    TriggerExecute(auto_gf_MovingRevealers_Trigger, false, false);
}

bool auto_gf_MovingRevealers_TriggerFunc (bool testConds, bool runActions) {
    region lp_movingRegion = auto_gf_MovingRevealers_lp_movingRegion;

    // Variable Declarations
    revealer lv_movingRevealer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    VisRevealerCreate(gv_pLAYER_01_USER, lp_movingRegion);
    lv_movingRevealer = VisRevealerLastCreated();
    Wait(600.0, c_timeAI);
    while (true) {
        if ((DistanceBetweenPoints(RegionGetCenter(lp_movingRegion), RegionGetCenter(RegionEntireMap())) <= 1)) {
            VisRevealerDestroy(lv_movingRevealer);
            break;
        }
        else {
            RegionSetCenter(lp_movingRegion, libNtve_gf_PointOffsetTowardsPoint(RegionGetCenter(lp_movingRegion), 0.01, RegionGetCenter(RegionEntireMap())));
            VisRevealerUpdate(lv_movingRevealer);
            Wait(0.25, c_timeGame);
        }
    }
    return true;
}

fixed gf_KeystoneChargePercent () {
    // Automatic Variable Declarations
    // Implementation
    return (100.0 * (gv_keystoneChargeCurrent / gv_keystoneChargeMax));
}

void gf_DisableSpearPowerQ (int lp_index) {
    // Automatic Variable Declarations
    int autoB0B0CB21_val;
    const int autoF130F3D0_ae = 10;
    int autoF130F3D0_var;
    int auto0AC234E3_val;

    // Implementation
    while (!((TriggerQueueIsEmpty() == true))) {
        Wait(0.5, c_timeGame);
    }
    if ((gv_spearTierState[lp_index] == false)) {
        return ;
    }

    autoB0B0CB21_val = lp_index;
    if (autoB0B0CB21_val == 1) {
        gf_EnableDisableTier1Power(false);
    }
    else if (autoB0B0CB21_val == 2) {
        gf_EnableDisableTier2Power(false);
    }
    else if (autoB0B0CB21_val == 3) {
        gf_EnableDisableTier3Power(false);
    }
    else if (autoB0B0CB21_val == 4) {
        gf_EnableDisableTier4Power(false);
    }
    else {
        return ;
    }
    gv_spearTierState[lp_index] = false;
    TriggerQueueEnter();
    SoundPlayForPlayer(SoundLink("Event_SoA_Damage", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    CameraShake(gv_pLAYER_01_USER, "Heavy", "Earthquake", 0.0, 0.75, 2.25);
    autoF130F3D0_var = 1;
    for ( ; autoF130F3D0_var <= autoF130F3D0_ae; autoF130F3D0_var += 1 ) {
        libNtve_gf_CreateActorAtPoint("Aiur_CrashingDebris", PointWithOffsetPolar(CameraGetTarget(gv_pLAYER_01_USER), RandomFixed(5.0, 10.0), libNtve_gf_RandomAngle()));
        libNtve_gf_MakeModelFaceAngle(libNtve_gf_ActorLastCreated(), 225.0);
        Wait(RandomFixed(0.25, 0.75), c_timeReal);
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 18.0, 0.25);
    auto0AC234E3_val = lp_index;
    if (auto0AC234E3_val == 1) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00120", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        SoundPlayForPlayer(SoundLink("Alarm_SoA_Protoss", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00114", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto0AC234E3_val == 2) {
        SoundPlayForPlayer(SoundLink("Alarm_SoA_Protoss", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00115", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto0AC234E3_val == 3) {
        SoundPlayForPlayer(SoundLink("Alarm_SoA_Protoss", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00116", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto0AC234E3_val == 4) {
        SoundPlayForPlayer(SoundLink("Alarm_SoA_Protoss", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00121", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00122", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
}

void gf_EnableDisableTier1Power (bool lp_enableDisable) {
    // Automatic Variable Declarations
    // Implementation
    gf_EnableDisableSpearTier(lp_enableDisable, "GPType1");
    if ((lp_enableDisable == false)) {
        if ((gv_disableDialog[1] == c_invalidDialogId)) {
            TechTreeUpgradeAddLevel(1, "SOADisabled1", 1);
            gv_disableDialog[1] = DialogLastCreated();
        }

    }
    else {
        DialogDestroy(gv_disableDialog[1]);
    }
}

void gf_EnableDisableTier2Power (bool lp_enableDisable) {
    // Automatic Variable Declarations
    // Implementation
    gf_EnableDisableSpearTier(lp_enableDisable, "GPType2");
    if ((lp_enableDisable == false)) {
        if ((gv_disableDialog[2] == c_invalidDialogId)) {
            TechTreeUpgradeAddLevel(1, "SOADisabled2", 1);
            gv_disableDialog[2] = DialogLastCreated();
        }

    }
    else {
        DialogDestroy(gv_disableDialog[2]);
    }
}

void gf_EnableDisableTier3Power (bool lp_enableDisable) {
    // Automatic Variable Declarations
    // Implementation
    gf_EnableDisableSpearTier(lp_enableDisable, "GPType4");
    if ((lp_enableDisable == false)) {
        if ((gv_disableDialog[3] == c_invalidDialogId)) {
            TechTreeUpgradeAddLevel(1, "SOADisabled3", 1);
            gv_disableDialog[3] = DialogLastCreated();
        }

    }
    else {
        DialogDestroy(gv_disableDialog[3]);
    }
    Wait(10.0, c_timeAI);
    libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/932A5AE8"));
}

void gf_EnableDisableTier4Power (bool lp_enableDisable) {
    // Automatic Variable Declarations
    // Implementation
    gf_EnableDisableSpearTier(lp_enableDisable, "GPType6");
    if ((lp_enableDisable == false)) {
        if ((gv_disableDialog[4] == c_invalidDialogId)) {
            TechTreeUpgradeAddLevel(1, "SOADisabled4", 1);
            gv_disableDialog[4] = DialogLastCreated();
        }

    }
    else {
        DialogDestroy(gv_disableDialog[4]);
    }
}

void gf_EnableDisableSpearTier (bool lp_enableDisable, string lp_powerSlot) {
    // Variable Declarations
    string lv_indexPower;

    // Automatic Variable Declarations
    int autoB586D847_ai;
    int autoB586D847_ae;

    // Variable Initialization

    // Implementation
    autoB586D847_ai = 1;
    autoB586D847_ae = UserDataInstanceCount("CampaignPerk")+1;
    while (autoB586D847_ai < autoB586D847_ae) {    
        lv_indexPower = UserDataInstance("CampaignPerk", autoB586D847_ai);
        autoB586D847_ai = autoB586D847_ai+1;
        if( libVoiC_gf_PC_PerkGroupOfPerk(lv_indexPower) == lp_powerSlot ) {
            if ((libVoiC_gf_PC_PerkStateCheck(lv_indexPower, libVoiC_ge_PC_PerkState_Active) == true)) {
                libVoiC_gf_EnableDisableSpearofAdunAbility(lp_enableDisable, lv_indexPower);
            }

        }    
    }
}

void gf_CreateDisableImage (int lp_dialog) {
    // Variable Declarations
    int lv_backgroundPanel;
    int lv_label;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_backgroundPanel = c_invalidDialogControlId;
    lv_label = c_invalidDialogControlId;

    // Implementation
    DialogSetVisible(lp_dialog, PlayerGroupAll(), true);
    DialogControlCreate(lp_dialog, c_triggerControlTypePanel);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    lv_backgroundPanel = DialogControlLastCreated();
    DialogControlCreateInPanel(lv_backgroundPanel, c_triggerControlTypeImage);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\static1.dds", PlayerGroupAll());
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlCreateInPanel(lv_backgroundPanel, c_triggerControlTypeLabel);
    lv_label = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/69571204"), PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
}

void gf_DisableAllActiveSpearPowers () {
    // Variable Declarations
    string lv_indexType;

    // Automatic Variable Declarations
    int auto85715C34_ai;
    int auto85715C34_ae;

    // Variable Initialization

    // Implementation
    auto85715C34_ai = 1;
    auto85715C34_ae = UserDataInstanceCount("CampaignPerkGroup")+1;
    while (auto85715C34_ai < auto85715C34_ae) {
        lv_indexType = UserDataInstance("CampaignPerkGroup", auto85715C34_ai);
        auto85715C34_ai = auto85715C34_ai+1;
        if ((lv_indexType != "GPType3") && (lv_indexType != "GPType5")) {
            gf_EnableDisableSpearTier(false, lv_indexType);
        }

    }
}

void gf_AIWarpPrism (int lp_owner, unit lp_warpPrism, unitgroup lp_nearbyUnits) {
    // Variable Declarations
    int lv_deployIndex;

    // Automatic Variable Declarations
    const int auto9A25BDBE_ae = 7;
    const int auto9A25BDBE_ai = 1;

    // Variable Initialization

    // Implementation
    if ((UnitCountAlliance(UnitGetOwner(lp_warpPrism), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_warpPrism), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 1) == 1) && (PointPathingPassable(UnitGetPosition(lp_warpPrism)) == true)) {
        UnitIssueOrder(lp_warpPrism, Order(AbilityCommand("PhasingMode", 0)), c_orderQueueReplace);
    }
    else {
        lv_deployIndex = 1;
        for ( ; ( (auto9A25BDBE_ai >= 0 && lv_deployIndex <= auto9A25BDBE_ae) || (auto9A25BDBE_ai < 0 && lv_deployIndex >= auto9A25BDBE_ae) ) ; lv_deployIndex += auto9A25BDBE_ai ) {
            if ((DistanceBetweenPoints(UnitGetPosition(lp_warpPrism), gv_prismDeployPoints[lv_deployIndex]) <= 15.0)) {
                UnitIssueOrder(lp_warpPrism, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(gv_prismDeployPoints[lv_deployIndex], 1.5))), c_orderQueueReplace);
                UnitIssueOrder(lp_warpPrism, Order(AbilityCommand("PhasingMode", 0)), c_orderQueueAddToEnd);
                return ;
            }

        }
        libNtve_gf_AICast(lp_warpPrism, Order(AbilityCommand("TransportMode", 0)));
    }
}

void gf_AINerazimStalker (int lp_owner, unit lp_blinkStalker, unitgroup lp_nearbyUnits) {
    // Variable Declarations
    int lv_deployIndex;
    point lv_targetPoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UnitGetPropertyFixed(lp_blinkStalker, c_unitPropShields, c_unitPropCurrent) == 0.0) && (UnitCheckAbilCmdState(lp_blinkStalker, AbilityCommand("BlinkShieldRestore", 0), c_cmdStateCooldown) == false)) {
        lv_targetPoint = PointWithOffsetPolar(UnitGetPosition(lp_blinkStalker), -2.0, UnitGetFacing(lp_blinkStalker));
        libNtve_gf_AICast(lp_blinkStalker, OrderTargetingPoint(AbilityCommand("BlinkShieldRestore", 0), lv_targetPoint));
    }

}

void gf_AIOverseer (int lp_owner, unit lp_overseer, unitgroup lp_nearbyUnits) {
    // Automatic Variable Declarations
    int autoBB1BD4E0_val;

    // Implementation
    if ((UnitCountAlliance(UnitGetOwner(lp_overseer), c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_overseer), 15.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterHasEnergy - 32))), 0) == 0)) {
        AISetUnitScriptControlled(lp_overseer, true);
        autoBB1BD4E0_val = UnitGetOwner(lp_overseer);
        if (autoBB1BD4E0_val == gv_pLAYER_02_ZERG_GREEN) {
            UnitIssueOrder(lp_overseer, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(54))), c_orderQueueReplace);
        }
        else if (autoBB1BD4E0_val == gv_pLAYER_03_ZERG_RED) {
            UnitIssueOrder(lp_overseer, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(55))), c_orderQueueReplace);
        }
        else if (autoBB1BD4E0_val == gv_pLAYER_04_ZERG_PINK) {
            UnitIssueOrder(lp_overseer, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(56))), c_orderQueueReplace);
        }
        else {
        }
    }

}

void gf_AIKarax (int lp_owner, unit lp_karax, unitgroup lp_nearbyUnits) {
    // Variable Declarations
    unitgroup lv_enemyGroup10;
    point lv_targetPoint;
    unit lv_currentUnit;

    // Automatic Variable Declarations
    unitgroup auto70237CCA_g;
    int auto70237CCA_u;

    // Variable Initialization
    lv_enemyGroup10 = UnitGroupEmpty();

    // Implementation
    lv_enemyGroup10 = libVCMI_gf_AITacticalEnemiesWithinRange(lp_karax, 10.0, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))));
    if ((UnitGroupCount(lv_enemyGroup10, c_unitCountAlive) > 0)) {
        if ((UnitCheckAbilCmdState(lp_karax, AbilityCommand("PhaseCannon", 0), c_cmdStateCooldown) == false)) {
            lv_targetPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_karax), 4.0, UnitGetPosition(UnitGroupRandomUnit(lv_enemyGroup10, c_unitCountAlive)));
            libNtve_gf_AICast(lp_karax, OrderTargetingPoint(AbilityCommand("PhaseCannon", 0), lv_targetPoint));
        }
        else if ((UnitCheckAbilCmdState(lp_karax, AbilityCommand("Reclamation", 0), c_cmdStateCooldown) == false)) {
            auto70237CCA_g = lv_enemyGroup10;
            auto70237CCA_u = UnitGroupCount(auto70237CCA_g, c_unitCountAll);
            for (;; auto70237CCA_u -= 1) {
                lv_currentUnit = UnitGroupUnitFromEnd(auto70237CCA_g, auto70237CCA_u);
                if (lv_currentUnit == null) { break; }
                if (((UnitGetType(lv_currentUnit) == "Sentry") || (UnitGetType(lv_currentUnit) == "Immortal") || (UnitGetType(lv_currentUnit) == "Colossus") || (UnitGetType(lv_currentUnit) == "Reaver"))) {
                    libNtve_gf_AICast(lp_karax, OrderTargetingUnit(AbilityCommand("Reclamation", 0), lv_currentUnit));
                    break;
                }

            }
        }
    }

}

void gf_AIAlarak (int lp_owner, unit lp_alarak, unitgroup lp_nearbyUnits) {
    // Variable Declarations
    unitgroup lv_enemyGroup8;
    point lv_targetPoint;
    unit lv_currentUnit;

    // Automatic Variable Declarations
    unitgroup autoB06CCC77_g;
    int autoB06CCC77_u;

    // Variable Initialization
    lv_enemyGroup8 = UnitGroupEmpty();

    // Implementation
    lv_enemyGroup8 = libVCMI_gf_AITacticalEnemiesWithinRange(lp_alarak, 8.0, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))));
    autoB06CCC77_g = lv_enemyGroup8;
    autoB06CCC77_u = UnitGroupCount(autoB06CCC77_g, c_unitCountAll);
    for (;; autoB06CCC77_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(autoB06CCC77_g, autoB06CCC77_u);
        if (lv_currentUnit == null) { break; }
        if ((UnitGetType(lv_currentUnit) == "Interceptor")) {
            UnitGroupRemove(lv_enemyGroup8, lv_currentUnit);
        }

    }
    if ((UnitGroupCount(lv_enemyGroup8, c_unitCountAlive) > 0)) {
        if ((UnitHasBehavior2(lp_alarak, "AlarakDeadlyCharging") == false) && (UnitCheckAbilCmdState(lp_alarak, AbilityCommand("AlarakKnockback", 0), c_cmdStateCooldown) == false)) {
            if ((DistanceBetweenPoints(UnitGetPosition(lp_alarak), UnitGetPosition(UnitGroupClosestToPoint(lv_enemyGroup8, UnitGetPosition(lp_alarak)))) <= 4.0)) {
                lv_targetPoint = UnitGetPosition(UnitGroupClosestToPoint(lv_enemyGroup8, UnitGetPosition(lp_alarak)));
            }
            else {
                lv_targetPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_alarak), 4.0, UnitGetPosition(UnitGroupClosestToPoint(lv_enemyGroup8, UnitGetPosition(lp_alarak))));
            }
            libNtve_gf_AICast(lp_alarak, OrderTargetingPoint(AbilityCommand("AlarakKnockback", 0), lv_targetPoint));
        }

    }

}

void gf_AIVorazun (int lp_owner, unit lp_vorazun, unitgroup lp_nearbyUnits) {
    // Variable Declarations
    unitgroup lv_enemyGroup8;
    point lv_targetPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemyGroup8 = UnitGroupEmpty();

    // Implementation
    lv_enemyGroup8 = libVCMI_gf_AITacticalEnemiesWithinRange(lp_vorazun, 8.0, UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))));
    if ((UnitGroupCount(lv_enemyGroup8, c_unitCountAlive) > 0)) {
        if ((UnitCheckAbilCmdState(lp_vorazun, AbilityCommand("VorazunShadowFury", 0), c_cmdStateCooldown) == true) && (UnitCheckAbilCmdState(lp_vorazun, AbilityCommand("VorazunShadowDash", 0), c_cmdStateCooldown) == false)) {
            if ((DistanceBetweenPoints(UnitGetPosition(lp_vorazun), UnitGetPosition(UnitGroupClosestToPoint(lv_enemyGroup8, UnitGetPosition(lp_vorazun)))) <= 5.0)) {
                lv_targetPoint = UnitGetPosition(UnitGroupClosestToPoint(lv_enemyGroup8, UnitGetPosition(lp_vorazun)));
            }
            else {
                lv_targetPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_vorazun), 5.0, UnitGetPosition(UnitGroupClosestToPoint(lv_enemyGroup8, UnitGetPosition(lp_vorazun))));
            }
            libNtve_gf_AICast(lp_vorazun, OrderTargetingPoint(AbilityCommand("VorazunShadowDash", 0), lv_targetPoint));
        }

    }

}

void gf_SpawnStreamingWaveUnit (int lp_count, string lp_unitType, int lp_player, point lp_spawnPoint, fixed lp_delay) {
    // Automatic Variable Declarations
    unitgroup auto0FB03E72_g;
    int auto0FB03E72_u;
    unit auto0FB03E72_var;

    // Implementation
    if ((libVCMI_gf_GameIsOver() == false)) {
        libNtve_gf_CreateUnitsAtPoint2(lp_count, lp_unitType, 0, lp_player, lp_spawnPoint);
        auto0FB03E72_g = UnitLastCreatedGroup();
        auto0FB03E72_u = UnitGroupCount(auto0FB03E72_g, c_unitCountAll);
        for (;; auto0FB03E72_u -= 1) {
            auto0FB03E72_var = UnitGroupUnitFromEnd(auto0FB03E72_g, auto0FB03E72_u);
            if (auto0FB03E72_var == null) { break; }
            AISetUnitScriptControlled(auto0FB03E72_var, false);
            libNtve_gf_AICast(auto0FB03E72_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_keystone)));
        }
        AISetGroupSuicide(UnitLastCreatedGroup(), true);
        Wait(lp_delay, c_timeAI);
    }

}

trigger auto_gf_SuperWarpGateLogic_Trigger = null;
unit auto_gf_SuperWarpGateLogic_lp_transport;

void gf_SuperWarpGateLogic (unit lp_transport) {
    auto_gf_SuperWarpGateLogic_lp_transport = lp_transport;

    if (auto_gf_SuperWarpGateLogic_Trigger == null) {
        auto_gf_SuperWarpGateLogic_Trigger = TriggerCreate("auto_gf_SuperWarpGateLogic_TriggerFunc");
    }

    TriggerExecute(auto_gf_SuperWarpGateLogic_Trigger, false, false);
}

bool auto_gf_SuperWarpGateLogic_TriggerFunc (bool testConds, bool runActions) {
    unit lp_transport = auto_gf_SuperWarpGateLogic_lp_transport;

    // Automatic Variable Declarations
    int auto6ED1AF62_n;
    int auto6ED1AF62_i;
    int auto7B206701_val;

    // Implementation
    while ((UnitIsAlive(lp_transport) == true) && (UnitGetOwner(lp_transport) == gv_pLAYER_05_PROTOSS_ARMADA)) {
        if ((UnitGetType(lp_transport) == "WarpPrismPhasing")) {
            Wait(2.0, c_timeAI);
            auto6ED1AF62_n = libLotv_gf_DifficultyValueInt2(1, 1, 1, 2);
            for (auto6ED1AF62_i = 1; auto6ED1AF62_i <= auto6ED1AF62_n; auto6ED1AF62_i += 1) {
                if ((UnitIsAlive(lp_transport) == true) && (UnitGetOwner(lp_transport) == gv_pLAYER_05_PROTOSS_ARMADA)) {
                    auto7B206701_val = gv_armadaUpgradeCounter;
                    if (auto7B206701_val == 0) {
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 5), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
                            UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrainVoid", 3), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        }

                    }
                    else if (auto7B206701_val == 1) {
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 5), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
                            UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrainVoid", 3), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        }

                    }
                    else if (auto7B206701_val == 2) {
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrainVoid", 3), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 5), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
                            UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                            UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrainVoid", 3), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        }

                    }
                    else if (auto7B206701_val == 3) {
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrainVoid", 3), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 5), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
                            UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 2), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        }

                    }
                    else if (auto7B206701_val == 4) {
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrainVoid", 3), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrainVoid", 3), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 5), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
                            UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 15), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        }

                    }
                    else if (auto7B206701_val == 5) {
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrainVoid", 3), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrainVoid", 3), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrainVoid", 3), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
                            UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                            UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 15), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        }

                    }
                    else {
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrainVoid", 3), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrainVoid", 3), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrainVoid", 3), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                    }
                }

                Wait(libLotv_gf_DifficultyValueFixed2(15.0, 15.0, 15.0, 15.0), c_timeAI);
            }
            if ((UnitIsAlive(lp_transport) == true) && (UnitGetOwner(lp_transport) == gv_pLAYER_05_PROTOSS_ARMADA)) {
                UnitIssueOrder(lp_transport, Order(AbilityCommand("TransportMode", 0)), c_orderQueueReplace);
                libLbty_gf_OrderTransporttoUnloadAllthenDespawn(lp_transport, UnitGetPosition(lp_transport), PointFromId(41));
            }
            else {
                return true;
            }
        }
        else {
            Wait(2.0, c_timeAI);
        }
    }
    return true;
}

trigger auto_gf_TurnWarpedInUnit_Trigger = null;
unit auto_gf_TurnWarpedInUnit_lp_unit;

void gf_TurnWarpedInUnit (unit lp_unit) {
    auto_gf_TurnWarpedInUnit_lp_unit = lp_unit;

    if (auto_gf_TurnWarpedInUnit_Trigger == null) {
        auto_gf_TurnWarpedInUnit_Trigger = TriggerCreate("auto_gf_TurnWarpedInUnit_TriggerFunc");
    }

    TriggerExecute(auto_gf_TurnWarpedInUnit_Trigger, false, false);
}

bool auto_gf_TurnWarpedInUnit_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_TurnWarpedInUnit_lp_unit;

    // Automatic Variable Declarations
    // Implementation
    UnitGroupAdd(gv_introWarpedInPlayerUnits, lp_unit);
    Wait(5.1, c_timeGame);
    if ((UnitGetType(lp_unit) != libVoiC_gf_EnabledUnitTypeforArmyCategory("Immortal"))) {
        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_keystone)), c_orderQueueReplace);
    }
    else {
        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lp_unit), 1.0, 45.0)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_ULoadCampaignData("PAiur06");
    TriggerExecute(gt_Init01Technology, true, false);
    libVoiC_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init02Players, true, false);
    TriggerExecute(gt_Init03Units, true, false);
    TriggerExecute(gt_Init04MusicSound, true, false);
    TriggerExecute(gt_Init05Environment, true, false);
    TriggerExecute(gt_Init06Difficulties, true, false);
    TriggerExecute(gt_Init07Help, true, false);
    TriggerExecute(gt_IntroQ, true, true);
    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_ZERG_GREEN, "overlordspeed", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_03_ZERG_RED, "overlordspeed", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_04_ZERG_PINK, "overlordspeed", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_ZERG_GREEN, "overlordtransport", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_03_ZERG_RED, "overlordtransport", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_04_ZERG_PINK, "overlordtransport", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_07_TALDARIM, "DarkProtoss", 1);
    libVoiC_gf_EnableCampaignTechUnit(true, "DarkTemplarTaldarim", gv_pLAYER_07_TALDARIM);
    libVoiC_gf_EnableCampaignTechUnit(true, "HighTemplarTaldarim", gv_pLAYER_07_TALDARIM);
    libVoiC_gf_EnableCampaignTechUnit(true, "SentryTalDarim", gv_pLAYER_07_TALDARIM);
    libVoiC_gf_EnableCampaignTechUnit(true, "ImmortalTaldarim", gv_pLAYER_07_TALDARIM);
    libVoiC_gf_EnableCampaignTechUnit(true, "ColossusTaldarim", gv_pLAYER_07_TALDARIM);
    libVoiC_gf_EnableCampaignTechUnit(true, "VoidRayTaldarim", gv_pLAYER_07_TALDARIM);
    libVoiC_gf_EnableCampaignTechUnit(true, "CarrierTaldarim", gv_pLAYER_07_TALDARIM);
    libVoiC_gf_EnableCampaignTechUnit(true, "ZealotShakuras", gv_pLAYER_08_NERAZIM);
    libVoiC_gf_EnableCampaignTechUnit(true, "DarkTemplarShakuras", gv_pLAYER_08_NERAZIM);
    libVoiC_gf_EnableCampaignTechUnit(true, "StalkerShakuras", gv_pLAYER_08_NERAZIM);
    libVoiC_gf_EnableCampaignTechUnit(true, "HighTemplarShakuras", gv_pLAYER_08_NERAZIM);
    libVoiC_gf_EnableCampaignTechUnit(true, "ImmortalShakuras", gv_pLAYER_08_NERAZIM);
    libVoiC_gf_EnableCampaignTechUnit(true, "PhoenixShakuras", gv_pLAYER_08_NERAZIM);
    libVoiC_gf_EnableCampaignTechUnit(true, "VoidRayShakuras", gv_pLAYER_08_NERAZIM);
    libVoiC_gf_EnableCampaignTechUnit(true, "ZealotPurifier", gv_pLAYER_09_PURIFIER);
    libVoiC_gf_EnableCampaignTechUnit(true, "StalkerPurifier", gv_pLAYER_09_PURIFIER);
    libVoiC_gf_EnableCampaignTechUnit(true, "SentryPurifier", gv_pLAYER_09_PURIFIER);
    libVoiC_gf_EnableCampaignTechUnit(true, "CarrierPurifier", gv_pLAYER_09_PURIFIER);
    libVoiC_gf_EnableCampaignTechUnit(true, "ColossusPurifier", gv_pLAYER_09_PURIFIER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto72BCC57E_g;
    int auto72BCC57E_var;
    playergroup autoC358BCAF_g;
    int autoC358BCAF_var;
    playergroup auto330D0A47_g;
    int auto330D0A47_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UISetAlertTypeVisible(PlayerGroupAll(), "AttackUnitAlly", false);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackUnitAlly_Prot", false);
    libNtve_gf_AddPlayerGroupToPlayerGroup(PlayerGroupSingle(gv_pLAYER_07_TALDARIM), gv_friendlyPlayerGroup);
    libNtve_gf_AddPlayerGroupToPlayerGroup(PlayerGroupSingle(gv_pLAYER_08_NERAZIM), gv_friendlyPlayerGroup);
    libNtve_gf_AddPlayerGroupToPlayerGroup(PlayerGroupSingle(gv_pLAYER_09_PURIFIER), gv_friendlyPlayerGroup);
    libNtve_gf_AddPlayerGroupToPlayerGroup(PlayerGroupSingle(gv_pLAYER_02_ZERG_GREEN), gv_enemyPlayerGroup);
    libNtve_gf_AddPlayerGroupToPlayerGroup(PlayerGroupSingle(gv_pLAYER_03_ZERG_RED), gv_enemyPlayerGroup);
    libNtve_gf_AddPlayerGroupToPlayerGroup(PlayerGroupSingle(gv_pLAYER_04_ZERG_PINK), gv_enemyPlayerGroup);
    libNtve_gf_AddPlayerGroupToPlayerGroup(PlayerGroupSingle(gv_pLAYER_05_PROTOSS_ARMADA), gv_enemyPlayerGroup);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_07_TALDARIM, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_08_NERAZIM, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_09_PURIFIER, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetPlayerGroupAlliance(gv_friendlyPlayerGroup, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetPlayerGroupAlliance(gv_enemyPlayerGroup, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    auto72BCC57E_g = gv_enemyPlayerGroup;
    auto72BCC57E_var = -1;
    while (true) {
        auto72BCC57E_var = PlayerGroupNextPlayer(auto72BCC57E_g, auto72BCC57E_var);
        if (auto72BCC57E_var < 0) { break; }
        libNtve_gf_SetAlliance(auto72BCC57E_var, gv_pLAYER_01_USER, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(auto72BCC57E_var, gv_pLAYER_07_TALDARIM, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(auto72BCC57E_var, gv_pLAYER_08_NERAZIM, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(auto72BCC57E_var, gv_pLAYER_09_PURIFIER, libNtve_ge_AllianceSetting_Enemy);
    }
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_05_PROTOSS_ARMADA, "HeroicShieldCleanUp", 1);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 300);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 100);
    autoC358BCAF_g = gv_enemyPlayerGroup;
    autoC358BCAF_var = -1;
    while (true) {
        autoC358BCAF_var = PlayerGroupNextPlayer(autoC358BCAF_g, autoC358BCAF_var);
        if (autoC358BCAF_var < 0) { break; }
        PlayerSetState(autoC358BCAF_var, c_playerStateMineralCostIgnored, true);
        PlayerSetState(autoC358BCAF_var, c_playerStateVespeneCostIgnored, true);
        PlayerSetState(autoC358BCAF_var, c_playerStateFoodIgnored, true);
        PlayerSetColorIndex(autoC358BCAF_var, 1, true);
    }
    auto330D0A47_g = gv_friendlyPlayerGroup;
    auto330D0A47_var = -1;
    while (true) {
        auto330D0A47_var = PlayerGroupNextPlayer(auto330D0A47_g, auto330D0A47_var);
        if (auto330D0A47_var < 0) { break; }
        PlayerSetState(auto330D0A47_var, c_playerStateMineralCostIgnored, true);
        PlayerSetState(auto330D0A47_var, c_playerStateVespeneCostIgnored, true);
        PlayerSetState(auto330D0A47_var, c_playerStateFoodIgnored, true);
    }
    libVCMI_gf_PM_DetectionUpgradesApply();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto2E61EF9C_ae = 7;
    int auto2E61EF9C_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitUncommandable(gv_keystone, true);
    UnitSetState(gv_keystone, c_unitStateTargetable, false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("EnergyNovaAiur06", 0), false);
    auto2E61EF9C_var = 1;
    for ( ; auto2E61EF9C_var <= auto2E61EF9C_ae; auto2E61EF9C_var += 1 ) {
        gv_prismDeployPoints[auto2E61EF9C_var] = PointFromName(("Prism Deploy " + IntToString(auto2E61EF9C_var)));
    }
    UnitBehaviorAddPlayer(gv_alarak, "AlarakKnockbackTriggerOverride", gv_pLAYER_07_TALDARIM, 1);
    libVCMI_gf_SetWorkerRallyPointsPlayersNexuses(gv_pLAYER_01_USER);
    gv_theBrutalisk = UnitFromId(77);
    TriggerExecute(gt_PerformanceInit, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init04MusicSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mapMusicTrack = "PAiur06_Music_Main";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04MusicSound_Init () {
    gt_Init04MusicSound = TriggerCreate("gt_Init04MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(15), 0.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoF0CFB556_g;
    int autoF0CFB556_var;
    playergroup auto430AE95C_g;
    int auto430AE95C_var;
    playergroup auto238B425D_g;
    int auto238B425D_var;
    playergroup auto0682DB5B_g;
    int auto0682DB5B_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(gv_keystone, c_unitPropLifeMax, libLotv_gf_DifficultyValueFixed2(6000.0, 6000.0, 3000.0, 3000.0));
    UnitSetPropertyFixed(gv_keystone, c_unitPropLifePercent, 100.0);
    CatalogFieldValueSet(c_gameCatalogAbil, "ChampionWarpTrain", "InfoArray[" + IntToString(1) + "].Cooldown.TimeUse", gv_pLAYER_08_NERAZIM, "10");
    CatalogFieldValueSet(c_gameCatalogAbil, "ChampionWarpTrain", "InfoArray[" + IntToString(3) + "].Cooldown.TimeUse", gv_pLAYER_07_TALDARIM, "10");
    CatalogFieldValueSet(c_gameCatalogAbil, "ChampionWarpTrain", "InfoArray[" + IntToString(5) + "].Cooldown.TimeUse", gv_pLAYER_09_PURIFIER, "10");
    autoF0CFB556_g = gv_friendlyPlayerGroup;
    autoF0CFB556_var = -1;
    while (true) {
        autoF0CFB556_var = PlayerGroupNextPlayer(autoF0CFB556_g, autoF0CFB556_var);
        if (autoF0CFB556_var < 0) { break; }
        PlayerSetDifficulty(autoF0CFB556_var, 4);
        AISetAPM(autoF0CFB556_var, 3000);
        TechTreeUpgradeAddLevel(autoF0CFB556_var, "ExtendedThermalLance", 1);
        if ((TechTreeUpgradeCount(gv_pLAYER_01_USER, "SOASuperShield", c_techCountQueuedOrBetter) >= 1)) {
            TechTreeUpgradeAddLevel(autoF0CFB556_var, "SOASuperShield", 1);
        }

    }
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        auto430AE95C_g = gv_enemyPlayerGroup;
        auto430AE95C_var = -1;
        while (true) {
            auto430AE95C_var = PlayerGroupNextPlayer(auto430AE95C_g, auto430AE95C_var);
            if (auto430AE95C_var < 0) { break; }
            TechTreeUpgradeAddLevel(auto430AE95C_var, "zerglingmovementspeed", 1);
            TechTreeUpgradeAddLevel(auto430AE95C_var, "hydraliskspeed", 1);
            TechTreeUpgradeAddLevel(auto430AE95C_var, "ExtendedThermalLance", 1);
            TechTreeUpgradeAddLevel(auto430AE95C_var, "ProtossAirWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto430AE95C_var, "ProtossGroundWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto430AE95C_var, "ProtossAirArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(auto430AE95C_var, "ProtossGroundArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(auto430AE95C_var, "ProtossShieldsLevel1", 1);
            TechTreeUpgradeAddLevel(auto430AE95C_var, "ZergFlyerWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto430AE95C_var, "ZergMeleeWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto430AE95C_var, "ZergMissileWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto430AE95C_var, "ZergGroundArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(auto430AE95C_var, "ZergFlyerArmorsLevel1", 1);
        }
        auto238B425D_g = gv_friendlyPlayerGroup;
        auto238B425D_var = -1;
        while (true) {
            auto238B425D_var = PlayerGroupNextPlayer(auto238B425D_g, auto238B425D_var);
            if (auto238B425D_var < 0) { break; }
            TechTreeUpgradeAddLevel(auto238B425D_var, "ProtossAirWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto238B425D_var, "ProtossGroundWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto238B425D_var, "ProtossAirArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(auto238B425D_var, "ProtossGroundArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(auto238B425D_var, "ProtossShieldsLevel1", 1);
        }
    }

    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        auto0682DB5B_g = gv_enemyPlayerGroup;
        auto0682DB5B_var = -1;
        while (true) {
            auto0682DB5B_var = PlayerGroupNextPlayer(auto0682DB5B_g, auto0682DB5B_var);
            if (auto0682DB5B_var < 0) { break; }
            TechTreeUpgradeAddLevel(auto0682DB5B_var, "zerglingattackspeed", 1);
            TechTreeUpgradeAddLevel(auto0682DB5B_var, "CarrierLaunchSpeedUpgrade", 1);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_AddMissionTipCampaign("AlliedProtoss");
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Zealot", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Dragoon", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Reaver", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Colossus", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Scout", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Phoenix", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Carrier", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("MothershipAiur06", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Observer", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Probe", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Zergling", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Baneling", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Roach", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Hydralisk", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Infestor", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Ultralisk", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("InfestedAbomination", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Mutalisk", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Guardian", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Overseer", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Drone", false, gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Performance - Init
//--------------------------------------------------------------------------------------------------
bool gt_PerformanceInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const int lv_numTrackedTypes = 9;
    string[lv_numTrackedTypes + 1] lv_trackedTypes;
    int lv_indexType;

    // Automatic Variable Declarations
    const int auto42733788_ae = lv_numTrackedTypes;
    const int auto42733788_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_trackedTypes[1] = "Hydralisk";
    lv_trackedTypes[2] = "QueenClassic";
    lv_trackedTypes[3] = "SpineCrawler";
    lv_trackedTypes[4] = "SporeCrawler";
    lv_trackedTypes[5] = "Zergling";
    lv_trackedTypes[6] = "Ultralisk";
    lv_trackedTypes[7] = "Roach";
    lv_trackedTypes[8] = "Mutalisk";
    lv_trackedTypes[9] = "Baneling";
    lv_indexType = 1;
    for ( ; ( (auto42733788_ai >= 0 && lv_indexType <= auto42733788_ae) || (auto42733788_ai < 0 && lv_indexType >= auto42733788_ae) ) ; lv_indexType += auto42733788_ai ) {
        UnitGroupAddUnitGroup(gv_performanceUnitsSW, UnitGroup(lv_trackedTypes[lv_indexType], c_playerAny, RegionFromId(61), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(gv_performanceUnitsSW, UnitGroup(lv_trackedTypes[lv_indexType], c_playerAny, RegionFromId(59), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(gv_performanceUnitsNW, UnitGroup(lv_trackedTypes[lv_indexType], c_playerAny, RegionFromId(58), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(gv_performanceUnitsSE, UnitGroup(lv_trackedTypes[lv_indexType], c_playerAny, RegionFromId(57), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }
    TriggerExecute(gt_PerformancePauseAll, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PerformanceInit_Init () {
    gt_PerformanceInit = TriggerCreate("gt_PerformanceInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Performance - Pause All
//--------------------------------------------------------------------------------------------------
bool gt_PerformancePauseAll_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupPauseAll(gv_performanceUnitsNW, true);
    UnitGroupPauseAll(gv_performanceUnitsSE, true);
    UnitGroupPauseAll(gv_performanceUnitsSW, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PerformancePauseAll_Init () {
    gt_PerformancePauseAll = TriggerCreate("gt_PerformancePauseAll_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Performance - Unpause SE
//--------------------------------------------------------------------------------------------------
bool gt_PerformanceUnpauseSE_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupPauseAll(gv_performanceUnitsSE, false);
    gv_performanceUnitsSE = UnitGroupEmpty();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PerformanceUnpauseSE_Init () {
    gt_PerformanceUnpauseSE = TriggerCreate("gt_PerformanceUnpauseSE_Func");
    TriggerAddEventUnitRegion(gt_PerformanceUnpauseSE, null, RegionFromId(57), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Performance - Unpause NW
//--------------------------------------------------------------------------------------------------
bool gt_PerformanceUnpauseNW_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupPauseAll(gv_performanceUnitsNW, false);
    gv_performanceUnitsNW = UnitGroupEmpty();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PerformanceUnpauseNW_Init () {
    gt_PerformanceUnpauseNW = TriggerCreate("gt_PerformanceUnpauseNW_Func");
    TriggerAddEventUnitRegion(gt_PerformanceUnpauseNW, null, RegionFromId(58), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Performance - Unpause SW
//--------------------------------------------------------------------------------------------------
bool gt_PerformanceUnpauseSW_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupPauseAll(gv_performanceUnitsSW, false);
    gv_performanceUnitsSW = UnitGroupEmpty();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PerformanceUnpauseSW_Init () {
    gt_PerformanceUnpauseSW = TriggerCreate("gt_PerformanceUnpauseSW_Func");
    TriggerAddEventUnitRegion(gt_PerformanceUnpauseSW, null, RegionFromId(59), true);
    TriggerAddEventUnitRegion(gt_PerformanceUnpauseSW, null, RegionFromId(61), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Performance - Repause After SoA
//--------------------------------------------------------------------------------------------------
bool gt_PerformanceRepauseAfterSoA_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_PerformancePauseAll, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PerformanceRepauseAfterSoA_Init () {
    gt_PerformanceRepauseAfterSoA = TriggerCreate("gt_PerformanceRepauseAfterSoA_Func");
    libVCMI_gf_SpearofAdunTargetingModeExited(gt_PerformanceRepauseAfterSoA, libVCMI_ge_SpearofAdunTargetingExitType_ByFiring);
    libVCMI_gf_SpearofAdunTargetingModeExited(gt_PerformanceRepauseAfterSoA, libVCMI_ge_SpearofAdunTargetingExitType_ByCanceling);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Performance - Handle Time Stop Apply
//--------------------------------------------------------------------------------------------------
bool gt_PerformanceHandleTimeStopApply_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupPauseAll(gv_performanceUnitsSE, false);
    UnitGroupPauseAll(gv_performanceUnitsNW, false);
    UnitGroupPauseAll(gv_performanceUnitsSW, false);
    Wait(IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "SOATimeFreeze", "Duration", c_playerAny)), c_timeGame);
    Wait(3.0, c_timeGame);
    TriggerExecute(gt_PerformancePauseAll, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PerformanceHandleTimeStopApply_Init () {
    gt_PerformanceHandleTimeStopApply = TriggerCreate("gt_PerformanceHandleTimeStopApply_Func");
    TriggerAddEventPlayerEffectUsed(gt_PerformanceHandleTimeStopApply, 1, "SOATimeFreeze");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto80F9DE0E_ae = 9;
    const int auto80F9DE0E_ai = 1;
    const int auto924DEAB5_ae = 28;
    const int auto924DEAB5_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(5), 0.25, false);
    lv_i = 1;
    for ( ; ( (auto80F9DE0E_ai >= 0 && lv_i <= auto80F9DE0E_ae) || (auto80F9DE0E_ai < 0 && lv_i >= auto80F9DE0E_ae) ) ; lv_i += auto80F9DE0E_ai ) {
        gf_MovingRevealers(RegionFromName(("MoveRegion 0" + IntToString(lv_i))));
    }
    lv_i = 10;
    for ( ; ( (auto924DEAB5_ai >= 0 && lv_i <= auto924DEAB5_ae) || (auto924DEAB5_ai < 0 && lv_i >= auto924DEAB5_ae) ) ; lv_i += auto924DEAB5_ai ) {
        gf_MovingRevealers(RegionFromName(("MoveRegion " + IntToString(lv_i))));
    }
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/ADA11C5C"), null, PointFromId(122));
    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
        TriggerEnable(gt_MasteryKilltheBrutalisk, false);
    }

    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionFromId(12), gv_pLAYER_01_USER);
    TriggerExecute(gt_ObjectiveKeystoneMustSurviveCreate, true, false);
    Wait(3.0, c_timeReal);
    TriggerExecute(gt_KeystoneStatus, true, false);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveKeystoneMustSurviveCreate, true, true);
    Wait(2.0, c_timeAI);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00064", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_TipReadyQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Creep Expansion 1 - Time Based
//--------------------------------------------------------------------------------------------------
bool gt_CreepExpansion1TimeBased_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AIToggleBulliesInRegion(gv_pLAYER_03_ZERG_RED, RegionFromId(26), true);
    Wait(60.0, c_timeAI);
    AIToggleBulliesInRegion(gv_pLAYER_02_ZERG_GREEN, RegionFromId(25), true);
    Wait(30.0, c_timeAI);
    AIToggleBulliesInRegion(gv_pLAYER_04_ZERG_PINK, RegionFromId(27), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreepExpansion1TimeBased_Init () {
    gt_CreepExpansion1TimeBased = TriggerCreate("gt_CreepExpansion1TimeBased_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Creep Expansion 2 - Allied Nexus Falls
//--------------------------------------------------------------------------------------------------
bool gt_CreepExpansion2AlliedNexusFalls_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unit autoA07A5437_val;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_alliedNexusesLost += 1;
    autoA07A5437_val = EventUnit();
    if (autoA07A5437_val == gv_nerazimNexus) {
        AIToggleBulliesInRegion(gv_pLAYER_02_ZERG_GREEN, RegionFromId(17), true);
    }
    else if (autoA07A5437_val == gv_taldarimNexus) {
        AIToggleBulliesInRegion(gv_pLAYER_03_ZERG_RED, RegionFromId(52), true);
    }
    else if (autoA07A5437_val == gv_purifierNexus) {
        AIToggleBulliesInRegion(gv_pLAYER_04_ZERG_PINK, RegionFromId(53), true);
    }
    else {
    }
    if ((gv_alliedNexusesLost >= 3)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreepExpansion2AlliedNexusFalls_Init () {
    gt_CreepExpansion2AlliedNexusFalls = TriggerCreate("gt_CreepExpansion2AlliedNexusFalls_Func");
    TriggerAddEventUnitDied(gt_CreepExpansion2AlliedNexusFalls, UnitRefFromVariable("gv_nerazimNexus"));
    TriggerAddEventUnitDied(gt_CreepExpansion2AlliedNexusFalls, UnitRefFromVariable("gv_taldarimNexus"));
    TriggerAddEventUnitDied(gt_CreepExpansion2AlliedNexusFalls, UnitRefFromVariable("gv_purifierNexus"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Keystone Status
//--------------------------------------------------------------------------------------------------
bool gt_KeystoneStatus_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_energyNovaButtonText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_KeystoneCharging, true, false);
    VisRevealerEnable(gv_keystoneRevealer, true);
    libVCUI_gf_DisplayProgressBar(StringExternal("Param/Value/059447A6"), 0, FixedToInt(gv_keystoneChargeMax));
    libVCUI_gf_SetProgressBarProgress(FixedToInt(gv_keystoneChargeCurrent));
    libVCUI_gf_SetProgressBarLabel((StringExternal("Param/Value/561E4317") + FixedToText(gf_KeystoneChargePercent(), 1) + StringExternal("Param/Value/E181E660")));
    SoundPlay(SoundLink("UI_DropdownListSelect", -1), PlayerGroupAll(), 100.0, 0.0);
    while (true) {
        Wait(1.0, c_timeGame);
        libVCUI_gf_SetProgressBarProgress(FixedToInt(gv_keystoneChargeCurrent));
        libVCUI_gf_SetProgressBarLabel((StringExternal("Param/Value/90F293FE") + FixedToText(gf_KeystoneChargePercent(), 1) + StringExternal("Param/Value/9D53264F")));
        if ((libVCMI_gf_GameIsOver() == true)) {
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KeystoneStatus_Init () {
    gt_KeystoneStatus = TriggerCreate("gt_KeystoneStatus_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Keystone Charging
//--------------------------------------------------------------------------------------------------
bool gt_KeystoneCharging_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv__80percentreached;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeAI);
        if ((UnitIsAlive(gv_keystone) == false)) {
            return true;
        }

        gv_keystoneChargeCurrent += gv_keystoneChargeIncrement;
        if ((gv_keystoneChargeCurrent >= gv_keystoneChargeMax)) {
            libNtve_gf_ChangeUnitDamage(gv_keystone, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
            gv_keystoneChargeCurrent = gv_keystoneChargeMax;
            TransmissionClearAll();
            Wait(0.0625, c_timeAI);
            TriggerQueueClear(c_triggerQueueKill);
            TriggerExecute(gt_VictorySequence, true, false);
            return true;
        }

        if ((gv_keystoneChargeCurrent >= (gv_keystoneChargeMax * 0.95)) && (TriggerIsEnabled(gt_KeystoneAlmostDoneQ) == true)) {
            TriggerExecute(gt_KeystoneAlmostDoneQ, true, false);
        }

        if ((gv_keystoneChargeCurrent >= (gv_keystoneChargeMax * 0.8)) && (lv__80percentreached == false)) {
            lv__80percentreached = true;
            libNtve_gf_SendActorMessageToUnit(gv_keystone, "AnimClear SpellA");
            libNtve_gf_SendActorMessageToUnit(gv_keystone, "AnimPlay SpellB Stand,Work,B PlayForever");
            libNtve_gf_SendActorMessageToUnit(gv_keystone, "Signal PlaySoundB");
        }

        if ((gv_keystoneChargeCurrent >= (gv_keystoneChargeMax * 0.5)) && (TriggerIsEnabled(gt_KeystoneHalfQ) == true)) {
            TriggerExecute(gt_KeystoneHalfQ, true, false);
            libNtve_gf_SendActorMessageToUnit(gv_keystone, "AnimPlay SpellA Stand,Work,A PlayForever");
            libNtve_gf_SendActorMessageToUnit(gv_keystone, "Signal PlaySoundA");
        }

        if ((gv_keystoneChargeCurrent >= (gv_keystoneChargeMax * 0.25)) && (TriggerIsEnabled(gt_KeystoneQuarterSave) == true)) {
            TriggerExecute(gt_KeystoneQuarterSave, true, false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KeystoneCharging_Init () {
    gt_KeystoneCharging = TriggerCreate("gt_KeystoneCharging_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Keystone Quarter Save
//--------------------------------------------------------------------------------------------------
bool gt_KeystoneQuarterSave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/9DE3C2CB"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KeystoneQuarterSave_Init () {
    gt_KeystoneQuarterSave = TriggerCreate("gt_KeystoneQuarterSave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Keystone Half Q
//--------------------------------------------------------------------------------------------------
bool gt_KeystoneHalfQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/7FB81797"));
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00186", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KeystoneHalfQ_Init () {
    gt_KeystoneHalfQ = TriggerCreate("gt_KeystoneHalfQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Keystone Almost Done Q
//--------------------------------------------------------------------------------------------------
bool gt_KeystoneAlmostDoneQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/5F7689D9"));
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00187", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KeystoneAlmostDoneQ_Init () {
    gt_KeystoneAlmostDoneQ = TriggerCreate("gt_KeystoneAlmostDoneQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Building Death History Update
//--------------------------------------------------------------------------------------------------
bool gt_BuildingDeathHistoryUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int autoA3F62510_ae = 9;
    const int autoA3F62510_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_recentBuildingDeaths = (gv_recentBuildingDeaths - gv_recentBuildingDeathHistory[1]);
    gv_recentBuildingDeaths = MaxI(gv_recentBuildingDeaths, 0);
    lv_i = 1;
    for ( ; ( (autoA3F62510_ai >= 0 && lv_i <= autoA3F62510_ae) || (autoA3F62510_ai < 0 && lv_i >= autoA3F62510_ae) ) ; lv_i += autoA3F62510_ai ) {
        gv_recentBuildingDeathHistory[lv_i] = gv_recentBuildingDeathHistory[(lv_i + 1)];
    }
    gv_recentBuildingDeathHistory[10] = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuildingDeathHistoryUpdate_Init () {
    gt_BuildingDeathHistoryUpdate = TriggerCreate("gt_BuildingDeathHistoryUpdate_Func");
    TriggerAddEventTimePeriodic(gt_BuildingDeathHistoryUpdate, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vorazun Retreat Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_VorazunRetreatTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_vorazun) == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_nerazimNexus) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/B7E0B998"), null, PointFromId(280));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(280), 2.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_vorazun, "pMission_Aiur06|Line00106", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SetHeroIsAliveStatus(false, "Vorazun");
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VorazunRetreatTransmissionQ_Init () {
    gt_VorazunRetreatTransmissionQ = TriggerCreate("gt_VorazunRetreatTransmissionQ_Func");
    TriggerAddEventTimePeriodic(gt_VorazunRetreatTransmissionQ, 5.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Karax Retreat Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_KaraxRetreatTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_karax) == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_purifierNexus) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/F93A4566"), null, PointFromId(282));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(282), 2.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_karax, "pMission_Aiur06|Line00107", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SetHeroIsAliveStatus(false, "Karax");
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KaraxRetreatTransmissionQ_Init () {
    gt_KaraxRetreatTransmissionQ = TriggerCreate("gt_KaraxRetreatTransmissionQ_Func");
    TriggerAddEventTimePeriodic(gt_KaraxRetreatTransmissionQ, 5.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Alarak Retreat Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_AlarakRetreatTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_alarak) == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_taldarimNexus) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/2CAC789E"), null, PointFromId(279));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(279), 2.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_alarak, "pMission_Aiur06|Line00108", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AlarakRetreatTransmissionQ_Init () {
    gt_AlarakRetreatTransmissionQ = TriggerCreate("gt_AlarakRetreatTransmissionQ_Func");
    TriggerAddEventTimePeriodic(gt_AlarakRetreatTransmissionQ, 5.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vorazun Nexus Transmission 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_VorazunNexusTransmission01Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_vorazun) == true))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_nerazimNexus, c_unitPropShieldsPercent, c_unitPropCurrent) <= 10.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/D3194A27"), null, PointFromId(280));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(280), 2.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_vorazun, "pMission_Aiur06|Line00109", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VorazunNexusTransmission01Q_Init () {
    gt_VorazunNexusTransmission01Q = TriggerCreate("gt_VorazunNexusTransmission01Q_Func");
    TriggerAddEventTimePeriodic(gt_VorazunNexusTransmission01Q, 2.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Karax Nexus Transmission 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_KaraxNexusTransmission01Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_karax) == true))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_purifierNexus, c_unitPropShieldsPercent, c_unitPropCurrent) <= 10.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/7ECE5A9A"), null, PointFromId(282));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(282), 2.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_karax, "pMission_Aiur06|Line00110", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KaraxNexusTransmission01Q_Init () {
    gt_KaraxNexusTransmission01Q = TriggerCreate("gt_KaraxNexusTransmission01Q_Func");
    TriggerAddEventTimePeriodic(gt_KaraxNexusTransmission01Q, 2.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Alarak Nexus Transmission 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_AlarakNexusTransmission01Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_alarak) == false))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_taldarimNexus, c_unitPropShieldsPercent, c_unitPropCurrent) <= 10.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(UnitFromId(26)), 2.0, Color(100.00, 0.00, 0.00));
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/E861FE1B"), null, PointFromId(279));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(279), 2.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_alarak, "pMission_Aiur06|Line00111", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AlarakNexusTransmission01Q_Init () {
    gt_AlarakNexusTransmission01Q = TriggerCreate("gt_AlarakNexusTransmission01Q_Func");
    TriggerAddEventTimePeriodic(gt_AlarakNexusTransmission01Q, 2.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Alarak Tripwire Transmission 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_AlarakTripwireTransmission01Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_taldarimNexus) == true))) {
            return false;
        }

        if (!((UnitCount(null, gv_pLAYER_07_TALDARIM, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/A3B825F2"), null, RegionGetCenter(RegionFromId(2)));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), RegionGetCenter(RegionFromId(2)), 2.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00099", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AlarakTripwireTransmission01Q_Init () {
    gt_AlarakTripwireTransmission01Q = TriggerCreate("gt_AlarakTripwireTransmission01Q_Func");
    TriggerAddEventTimePeriodic(gt_AlarakTripwireTransmission01Q, 2.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vorazun Tripwire Transmission 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_VorazunTripwireTransmission01Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_nerazimNexus) == true))) {
            return false;
        }

        if (!((UnitCount(null, gv_pLAYER_08_NERAZIM, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/804EA8CF"), null, RegionGetCenter(RegionFromId(3)));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), RegionGetCenter(RegionFromId(3)), 2.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00100", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VorazunTripwireTransmission01Q_Init () {
    gt_VorazunTripwireTransmission01Q = TriggerCreate("gt_VorazunTripwireTransmission01Q_Func");
    TriggerAddEventTimePeriodic(gt_VorazunTripwireTransmission01Q, 2.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purifier Tripwire Transmission 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_PurifierTripwireTransmission01Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_purifierNexus) == true))) {
            return false;
        }

        if (!((UnitCount(null, gv_pLAYER_09_PURIFIER, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/731B62E1"), null, RegionGetCenter(RegionFromId(4)));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), RegionGetCenter(RegionFromId(4)), 2.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00101", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurifierTripwireTransmission01Q_Init () {
    gt_PurifierTripwireTransmission01Q = TriggerCreate("gt_PurifierTripwireTransmission01Q_Func");
    TriggerAddEventTimePeriodic(gt_PurifierTripwireTransmission01Q, 2.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disable Spear Power 1
//--------------------------------------------------------------------------------------------------
bool gt_DisableSpearPower1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_DisableSpearPowerQ(1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisableSpearPower1_Init () {
    gt_DisableSpearPower1 = TriggerCreate("gt_DisableSpearPower1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disable Spear Power 2
//--------------------------------------------------------------------------------------------------
bool gt_DisableSpearPower2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_DisableSpearPowerQ(2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisableSpearPower2_Init () {
    gt_DisableSpearPower2 = TriggerCreate("gt_DisableSpearPower2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disable Spear Power 3
//--------------------------------------------------------------------------------------------------
bool gt_DisableSpearPower3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_SetSpearofAdunEnergy(-5.0, libVCMI_ge_SpearofAdunEnergyType_Regeneration);
    gf_DisableSpearPowerQ(3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisableSpearPower3_Init () {
    gt_DisableSpearPower3 = TriggerCreate("gt_DisableSpearPower3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disable Spear Power 4
//--------------------------------------------------------------------------------------------------
bool gt_DisableSpearPower4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_DisableSpearPowerQ(4);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisableSpearPower4_Init () {
    gt_DisableSpearPower4 = TriggerCreate("gt_DisableSpearPower4_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spear Attack Transmission 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_SpearAttackTransmission01Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00102", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00112", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpearAttackTransmission01Q_Init () {
    gt_SpearAttackTransmission01Q = TriggerCreate("gt_SpearAttackTransmission01Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    cai_startall();
    libVCMI_gf_EnableVoidCampaignAIBehaviorForAllPlayers();
    cai_runall();
    AISetDefenseRadii(1, 15.0, 10.0, 12.0);
    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
        TriggerExecute(gt_AIUpgradesCasualNormal, true, false);
    }
    else {
        TriggerExecute(gt_AIUpgradesHardBrutal, true, false);
    }
    libNtve_gf_SetTacticalAIThink(gv_pLAYER_05_PROTOSS_ARMADA, "WarpPrism", "AIWarpPrism", false);
    libNtve_gf_SetTacticalAIThink(gv_pLAYER_02_ZERG_GREEN, "Overseer", "AIOverseer", false);
    libNtve_gf_SetTacticalAIThink(gv_pLAYER_03_ZERG_RED, "Overseer", "AIOverseer", false);
    libNtve_gf_SetTacticalAIThink(gv_pLAYER_04_ZERG_PINK, "Overseer", "AIOverseer", false);
    libNtve_gf_SetTacticalAIThink(gv_pLAYER_07_TALDARIM, "AlarakChampion", "AIAlarak", false);
    libNtve_gf_SetTacticalAIThink(gv_pLAYER_08_NERAZIM, "StalkerShakuras", "AINerazimStalker", false);
    libNtve_gf_SetTacticalAIThink(gv_pLAYER_08_NERAZIM, "VorazunChampion", "AIVorazun", false);
    libNtve_gf_SetTacticalAIThink(gv_pLAYER_09_PURIFIER, "KaraxChampion", "AIKarax", false);
    AISetDefenseRadii(gv_pLAYER_07_TALDARIM, 6.0, 10.0, 12.0);
    AISetDefenseRadii(gv_pLAYER_08_NERAZIM, 6.0, 10.0, 12.0);
    AISetDefenseRadii(gv_pLAYER_09_PURIFIER, 6.0, 10.0, 12.0);
    TriggerExecute(gt_TurnOnBulliesOverTime, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrades - Casual/Normal
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradesCasualNormal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto31A19415_g;
    int auto31A19415_var;
    playergroup autoAEA53353_g;
    int autoAEA53353_var;
    playergroup auto0BDBBC78_g;
    int auto0BDBBC78_var;
    playergroup auto7EB58F5A_g;
    int auto7EB58F5A_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(600.0, c_timeAI);
    auto31A19415_g = gv_enemyPlayerGroup;
    auto31A19415_var = -1;
    while (true) {
        auto31A19415_var = PlayerGroupNextPlayer(auto31A19415_g, auto31A19415_var);
        if (auto31A19415_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto31A19415_var, "ProtossAirWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(auto31A19415_var, "ProtossGroundWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(auto31A19415_var, "ZergFlyerWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(auto31A19415_var, "ZergMeleeWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(auto31A19415_var, "ZergMissileWeaponsLevel1", 1);
    }
    autoAEA53353_g = gv_friendlyPlayerGroup;
    autoAEA53353_var = -1;
    while (true) {
        autoAEA53353_var = PlayerGroupNextPlayer(autoAEA53353_g, autoAEA53353_var);
        if (autoAEA53353_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoAEA53353_var, "ProtossAirWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(autoAEA53353_var, "ProtossGroundWeaponsLevel1", 1);
    }
    Wait(360.0, c_timeAI);
    auto0BDBBC78_g = gv_enemyPlayerGroup;
    auto0BDBBC78_var = -1;
    while (true) {
        auto0BDBBC78_var = PlayerGroupNextPlayer(auto0BDBBC78_g, auto0BDBBC78_var);
        if (auto0BDBBC78_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto0BDBBC78_var, "ProtossAirArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(auto0BDBBC78_var, "ProtossGroundArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(auto0BDBBC78_var, "ProtossShieldsLevel1", 1);
        TechTreeUpgradeAddLevel(auto0BDBBC78_var, "ZergGroundArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(auto0BDBBC78_var, "ZergFlyerArmorsLevel1", 1);
    }
    auto7EB58F5A_g = gv_friendlyPlayerGroup;
    auto7EB58F5A_var = -1;
    while (true) {
        auto7EB58F5A_var = PlayerGroupNextPlayer(auto7EB58F5A_g, auto7EB58F5A_var);
        if (auto7EB58F5A_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto7EB58F5A_var, "ProtossAirArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(auto7EB58F5A_var, "ProtossGroundArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(auto7EB58F5A_var, "ProtossShieldsLevel1", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradesCasualNormal_Init () {
    gt_AIUpgradesCasualNormal = TriggerCreate("gt_AIUpgradesCasualNormal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrades - Hard/Brutal
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradesHardBrutal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto2C9B6E84_g;
    int auto2C9B6E84_var;
    playergroup auto0BF72C14_g;
    int auto0BF72C14_var;
    playergroup autoCCEB8D31_g;
    int autoCCEB8D31_var;
    playergroup auto648FB175_g;
    int auto648FB175_var;
    playergroup auto38F6C363_g;
    int auto38F6C363_var;
    playergroup auto6C6669A4_g;
    int auto6C6669A4_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(600.0, c_timeAI);
    auto2C9B6E84_g = gv_enemyPlayerGroup;
    auto2C9B6E84_var = -1;
    while (true) {
        auto2C9B6E84_var = PlayerGroupNextPlayer(auto2C9B6E84_g, auto2C9B6E84_var);
        if (auto2C9B6E84_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto2C9B6E84_var, "ProtossAirWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(auto2C9B6E84_var, "ProtossGroundWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(auto2C9B6E84_var, "ZergFlyerWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(auto2C9B6E84_var, "ZergMeleeWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(auto2C9B6E84_var, "ZergMissileWeaponsLevel2", 1);
    }
    auto0BF72C14_g = gv_friendlyPlayerGroup;
    auto0BF72C14_var = -1;
    while (true) {
        auto0BF72C14_var = PlayerGroupNextPlayer(auto0BF72C14_g, auto0BF72C14_var);
        if (auto0BF72C14_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto0BF72C14_var, "ProtossAirWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(auto0BF72C14_var, "ProtossGroundWeaponsLevel2", 1);
    }
    Wait(360.0, c_timeAI);
    autoCCEB8D31_g = gv_enemyPlayerGroup;
    autoCCEB8D31_var = -1;
    while (true) {
        autoCCEB8D31_var = PlayerGroupNextPlayer(autoCCEB8D31_g, autoCCEB8D31_var);
        if (autoCCEB8D31_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoCCEB8D31_var, "ProtossAirArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(autoCCEB8D31_var, "ProtossGroundArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(autoCCEB8D31_var, "ProtossShieldsLevel2", 1);
        TechTreeUpgradeAddLevel(autoCCEB8D31_var, "ZergGroundArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(autoCCEB8D31_var, "ZergFlyerArmorsLevel2", 1);
    }
    auto648FB175_g = gv_friendlyPlayerGroup;
    auto648FB175_var = -1;
    while (true) {
        auto648FB175_var = PlayerGroupNextPlayer(auto648FB175_g, auto648FB175_var);
        if (auto648FB175_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto648FB175_var, "ProtossAirArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(auto648FB175_var, "ProtossGroundArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(auto648FB175_var, "ProtossShieldsLevel2", 1);
    }
    Wait(360.0, c_timeAI);
    auto38F6C363_g = gv_enemyPlayerGroup;
    auto38F6C363_var = -1;
    while (true) {
        auto38F6C363_var = PlayerGroupNextPlayer(auto38F6C363_g, auto38F6C363_var);
        if (auto38F6C363_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto38F6C363_var, "ProtossAirWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(auto38F6C363_var, "ProtossGroundWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(auto38F6C363_var, "ZergFlyerWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(auto38F6C363_var, "ZergMeleeWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(auto38F6C363_var, "ZergMissileWeaponsLevel3", 1);
    }
    auto6C6669A4_g = gv_friendlyPlayerGroup;
    auto6C6669A4_var = -1;
    while (true) {
        auto6C6669A4_var = PlayerGroupNextPlayer(auto6C6669A4_g, auto6C6669A4_var);
        if (auto6C6669A4_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto6C6669A4_var, "ProtossAirWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(auto6C6669A4_var, "ProtossGroundWeaponsLevel3", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradesHardBrutal_Init () {
    gt_AIUpgradesHardBrutal = TriggerCreate("gt_AIUpgradesHardBrutal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Turn On Bullies Over Time
//--------------------------------------------------------------------------------------------------
bool gt_TurnOnBulliesOverTime_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(60.0, c_timeAI);
    TriggerExecute(gt_TurnOnBulllies01, true, false);
    Wait(360.0, c_timeAI);
    TriggerExecute(gt_TurnOnBulllies02, true, false);
    Wait(360.0, c_timeAI);
    TriggerExecute(gt_TurnOnBulllies03, true, false);
    Wait(360.0, c_timeAI);
    TriggerExecute(gt_TurnOnBulllies04, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TurnOnBulliesOverTime_Init () {
    gt_TurnOnBulliesOverTime = TriggerCreate("gt_TurnOnBulliesOverTime_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Turn On Bulllies 01
//--------------------------------------------------------------------------------------------------
bool gt_TurnOnBulllies01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AIToggleBulliesInRegion(gv_pLAYER_07_TALDARIM, RegionFromId(60), true);
    AIToggleBulliesInRegion(gv_pLAYER_08_NERAZIM, RegionFromId(1), true);
    AIToggleBulliesInRegion(gv_pLAYER_09_PURIFIER, RegionFromId(69), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TurnOnBulllies01_Init () {
    gt_TurnOnBulllies01 = TriggerCreate("gt_TurnOnBulllies01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Turn On Bulllies 02
//--------------------------------------------------------------------------------------------------
bool gt_TurnOnBulllies02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AIToggleBulliesInRegion(gv_pLAYER_07_TALDARIM, RegionFromId(62), true);
    AIToggleBulliesInRegion(gv_pLAYER_08_NERAZIM, RegionFromId(9), true);
    AIToggleBulliesInRegion(gv_pLAYER_09_PURIFIER, RegionFromId(75), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TurnOnBulllies02_Init () {
    gt_TurnOnBulllies02 = TriggerCreate("gt_TurnOnBulllies02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Turn On Bulllies 03
//--------------------------------------------------------------------------------------------------
bool gt_TurnOnBulllies03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AIToggleBulliesInRegion(gv_pLAYER_07_TALDARIM, RegionFromId(10), true);
    AIToggleBulliesInRegion(gv_pLAYER_08_NERAZIM, RegionFromId(11), true);
    AIToggleBulliesInRegion(gv_pLAYER_09_PURIFIER, RegionFromId(70), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TurnOnBulllies03_Init () {
    gt_TurnOnBulllies03 = TriggerCreate("gt_TurnOnBulllies03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Turn On Bulllies 04
//--------------------------------------------------------------------------------------------------
bool gt_TurnOnBulllies04_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AIToggleBulliesInRegion(gv_pLAYER_07_TALDARIM, RegionFromId(67), true);
    AIToggleBulliesInRegion(gv_pLAYER_08_NERAZIM, RegionFromId(18), true);
    AIToggleBulliesInRegion(gv_pLAYER_09_PURIFIER, RegionFromId(73), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TurnOnBulllies04_Init () {
    gt_TurnOnBulllies04 = TriggerCreate("gt_TurnOnBulllies04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Base Rebuild
//--------------------------------------------------------------------------------------------------
bool gt_ZergBaseRebuild_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoB04DA6FA_ae = 4;
    int autoB04DA6FA_var;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoB04DA6FA_var = 2;
    for ( ; autoB04DA6FA_var <= autoB04DA6FA_ae; autoB04DA6FA_var += 1 ) {
        if ((UnitGroupCount(UnitGroup("Drone", autoB04DA6FA_var, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("Larva", autoB04DA6FA_var, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Drone", 0, autoB04DA6FA_var, PointFromName(("P" + IntToString(autoB04DA6FA_var) + " Spawn")));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergBaseRebuild_Init () {
    gt_ZergBaseRebuild = TriggerCreate("gt_ZergBaseRebuild_Func");
    TriggerAddEventTimePeriodic(gt_ZergBaseRebuild, 15.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Allied Mind Control - Cancel Suicide
//--------------------------------------------------------------------------------------------------
bool gt_AlliedMindControlCancelSuicide_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitOwnerNew() == gv_pLAYER_08_NERAZIM))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AISetUnitScriptControlled(EventUnit(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AlliedMindControlCancelSuicide_Init () {
    gt_AlliedMindControlCancelSuicide = TriggerCreate("gt_AlliedMindControlCancelSuicide_Func");
    TriggerAddEventUnitChangeOwner(gt_AlliedMindControlCancelSuicide, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overseer Despawn
//--------------------------------------------------------------------------------------------------
bool gt_OverseerDespawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Overseer"))) {
            return false;
        }

        if (!((AIIsScriptControlled(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_02_ZERG_GREEN) || (UnitGetOwner(EventUnit()) == gv_pLAYER_03_ZERG_RED) || (UnitGetOwner(EventUnit()) == gv_pLAYER_04_ZERG_PINK)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OverseerDespawn_Init () {
    gt_OverseerDespawn = TriggerCreate("gt_OverseerDespawn_Func");
    TriggerAddEventUnitRegion(gt_OverseerDespawn, null, RegionFromId(54), true);
    TriggerAddEventUnitRegion(gt_OverseerDespawn, null, RegionFromId(55), true);
    TriggerAddEventUnitRegion(gt_OverseerDespawn, null, RegionFromId(56), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Champion Revived
//--------------------------------------------------------------------------------------------------
bool gt_ProtossChampionRevived_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto2D817A2D_val;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_07_TALDARIM) || (UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_08_NERAZIM) || (UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_09_PURIFIER)))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitProgressUnit()) == "AlarakChampion") || (UnitGetType(EventUnitProgressUnit()) == "VorazunChampion") || (UnitGetType(EventUnitProgressUnit()) == "KaraxChampion")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto2D817A2D_val = EventPlayer();
    if (auto2D817A2D_val == gv_pLAYER_07_TALDARIM) {
        gv_alarak = EventUnitProgressUnit();
        UnitBehaviorAddPlayer(gv_alarak, "AlarakKnockbackTriggerOverride", gv_pLAYER_07_TALDARIM, 1);
    }
    else if (auto2D817A2D_val == gv_pLAYER_08_NERAZIM) {
        gv_vorazun = EventUnitProgressUnit();
    }
    else if (auto2D817A2D_val == gv_pLAYER_09_PURIFIER) {
        gv_karax = EventUnitProgressUnit();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossChampionRevived_Init () {
    gt_ProtossChampionRevived = TriggerCreate("gt_ProtossChampionRevived_Func");
    TriggerAddEventUnitConstructProgress(gt_ProtossChampionRevived, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vorazun Initial Attack 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_VorazunInitialAttack01Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_vorazun) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(20.0, c_timeAI);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/304E5041"), null, PointFromId(244));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(244), 2.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_vorazun, "pMission_Aiur06|Line00103", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VorazunInitialAttack01Q_Init () {
    gt_VorazunInitialAttack01Q = TriggerCreate("gt_VorazunInitialAttack01Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Karax Initial Attack 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_KaraxInitialAttack01Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_karax) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(20.0, c_timeAI);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/2BF699CB"), null, PointFromId(246));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(246), 2.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_karax, "pMission_Aiur06|Line00104", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KaraxInitialAttack01Q_Init () {
    gt_KaraxInitialAttack01Q = TriggerCreate("gt_KaraxInitialAttack01Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Alarak Initial Attack 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_AlarakInitialAttack01Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_alarak) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(20.0, c_timeAI);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/D5C0115F"), null, PointFromId(245));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(245), 2.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_alarak, "pMission_Aiur06|Line00105", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AlarakInitialAttack01Q_Init () {
    gt_AlarakInitialAttack01Q = TriggerCreate("gt_AlarakInitialAttack01Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Streaming Attack 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_StreamingAttack01Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/75D2940C"), null, PointFromId(245));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(245), 6.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00098", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StreamingAttack01Q_Init () {
    gt_StreamingAttack01Q = TriggerCreate("gt_StreamingAttack01Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Streaming Attack 02 Q
//--------------------------------------------------------------------------------------------------
bool gt_StreamingAttack02Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/EFFAA027"), null, PointFromId(245));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(245), 6.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00195", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StreamingAttack02Q_Init () {
    gt_StreamingAttack02Q = TriggerCreate("gt_StreamingAttack02Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Streaming Attack 03/04 Q
//--------------------------------------------------------------------------------------------------
bool gt_StreamingAttack0304Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/FF53E780"), null, PointFromId(244));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/C7FD0E7F"), null, PointFromId(246));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(244), 6.0, Color(100.00, 0.00, 0.00));
    Wait(0.25, c_timeGame);
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(246), 6.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00196", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StreamingAttack0304Q_Init () {
    gt_StreamingAttack0304Q = TriggerCreate("gt_StreamingAttack0304Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Streaming Attack 05/06/07 Q
//--------------------------------------------------------------------------------------------------
bool gt_StreamingAttack050607Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/8BBABA07"), null, PointFromId(244));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/5827A97D"), null, PointFromId(245));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/CA184E46"), null, PointFromId(246));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(244), 6.0, Color(100.00, 0.00, 0.00));
    Wait(0.25, c_timeGame);
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(245), 6.0, Color(100.00, 0.00, 0.00));
    Wait(0.25, c_timeGame);
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(246), 6.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00198", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StreamingAttack050607Q_Init () {
    gt_StreamingAttack050607Q = TriggerCreate("gt_StreamingAttack050607Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Streaming Wave 01 (TAL)
//--------------------------------------------------------------------------------------------------
bool gt_StreamingWave01TAL_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_StreamingAttack01Q, true, false);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 2, 3), "Ultralisk", gv_pLAYER_03_ZERG_RED, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(16, 16, 16, 16), "Zergling", gv_pLAYER_03_ZERG_RED, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 5, 5), "Roach", gv_pLAYER_03_ZERG_RED, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 5, 5), "Hydralisk", gv_pLAYER_03_ZERG_RED, PointFromId(513), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(16, 16, 16, 16), "Zergling", gv_pLAYER_03_ZERG_RED, PointFromId(513), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 4, 4), "Hydralisk", gv_pLAYER_03_ZERG_RED, PointFromId(513), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 5, 5), "Roach", gv_pLAYER_03_ZERG_RED, PointFromId(513), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 4, 4), "Mutalisk", gv_pLAYER_03_ZERG_RED, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 2), "Ultralisk", gv_pLAYER_03_ZERG_RED, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(16, 16, 16, 16), "Zergling", gv_pLAYER_03_ZERG_RED, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 4, 4), "Roach", gv_pLAYER_03_ZERG_RED, PointFromId(513), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(16, 16, 16, 16), "Zergling", gv_pLAYER_03_ZERG_RED, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 4, 4), "Mutalisk", gv_pLAYER_03_ZERG_RED, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 2), "Ultralisk", gv_pLAYER_03_ZERG_RED, PointFromId(513), 2.0);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 2, 3), "InfestedAbomination", gv_pLAYER_03_ZERG_RED, PointFromId(513), 1.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 4, 4), "Roach", gv_pLAYER_03_ZERG_RED, PointFromId(513), 1.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(16, 16, 16, 16), "Zergling", gv_pLAYER_03_ZERG_RED, PointFromId(513), 1.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 4, 4), "Mutalisk", gv_pLAYER_03_ZERG_RED, PointFromId(513), 1.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 2), "Ultralisk", gv_pLAYER_03_ZERG_RED, PointFromId(513), 1.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StreamingWave01TAL_Init () {
    gt_StreamingWave01TAL = TriggerCreate("gt_StreamingWave01TAL_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Streaming Wave 02 (TAL)
//--------------------------------------------------------------------------------------------------
bool gt_StreamingWave02TAL_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_StreamingAttack02Q, true, false);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(16, 16, 16, 16), "Zergling", gv_pLAYER_03_ZERG_RED, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 2, 3), "Ultralisk", gv_pLAYER_03_ZERG_RED, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(16, 16, 16, 16), "Zergling", gv_pLAYER_03_ZERG_RED, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 5, 5), "Hydralisk", gv_pLAYER_03_ZERG_RED, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 5, 5), "Roach", gv_pLAYER_03_ZERG_RED, PointFromId(513), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 2, 2), "InfestedAbomination", gv_pLAYER_03_ZERG_RED, PointFromId(513), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(16, 16, 16, 16), "Zergling", gv_pLAYER_03_ZERG_RED, PointFromId(513), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Overseer", gv_pLAYER_03_ZERG_RED, PointFromId(513), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 5, 5), "Hydralisk", gv_pLAYER_03_ZERG_RED, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 3), "Guardian", gv_pLAYER_03_ZERG_RED, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 2, 2), "Ultralisk", gv_pLAYER_03_ZERG_RED, PointFromId(513), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(16, 16, 16, 16), "Zergling", gv_pLAYER_03_ZERG_RED, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 5, 5), "Roach", gv_pLAYER_03_ZERG_RED, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(16, 16, 16, 16), "Zergling", gv_pLAYER_03_ZERG_RED, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 4, 4), "Mutalisk", gv_pLAYER_03_ZERG_RED, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 4, 4), "Hydralisk", gv_pLAYER_03_ZERG_RED, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Overseer", gv_pLAYER_03_ZERG_RED, PointFromId(513), 2.0);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "Guardian", gv_pLAYER_03_ZERG_RED, PointFromId(513), 1.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 4, 4), "Mutalisk", gv_pLAYER_03_ZERG_RED, PointFromId(513), 1.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 4, 4), "Roach", gv_pLAYER_03_ZERG_RED, PointFromId(513), 1.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(16, 16, 16, 16), "Zergling", gv_pLAYER_03_ZERG_RED, PointFromId(513), 1.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 4, 4), "Mutalisk", gv_pLAYER_03_ZERG_RED, PointFromId(513), 1.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 2, 3), "Ultralisk", gv_pLAYER_03_ZERG_RED, PointFromId(513), 1.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StreamingWave02TAL_Init () {
    gt_StreamingWave02TAL = TriggerCreate("gt_StreamingWave02TAL_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Streaming Wave 03 (NER)
//--------------------------------------------------------------------------------------------------
bool gt_StreamingWave03NER_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_StreamingAttack0304Q, true, false);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(14, 14, 14, 14), "Zergling", gv_pLAYER_02_ZERG_GREEN, PointFromId(512), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "Roach", gv_pLAYER_02_ZERG_GREEN, PointFromId(512), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(14, 14, 14, 14), "Zergling", gv_pLAYER_02_ZERG_GREEN, PointFromId(512), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "Hydralisk", gv_pLAYER_02_ZERG_GREEN, PointFromId(512), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 2), "Overseer", gv_pLAYER_02_ZERG_GREEN, PointFromId(512), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "Roach", gv_pLAYER_02_ZERG_GREEN, PointFromId(512), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(14, 14, 14, 14), "Zergling", gv_pLAYER_02_ZERG_GREEN, PointFromId(512), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "Hydralisk", gv_pLAYER_02_ZERG_GREEN, PointFromId(512), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(14, 14, 14, 14), "Zergling", gv_pLAYER_02_ZERG_GREEN, PointFromId(512), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 2, 2), "Ultralisk", gv_pLAYER_02_ZERG_GREEN, PointFromId(512), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 2), "Overseer", gv_pLAYER_02_ZERG_GREEN, PointFromId(512), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "Mutalisk", gv_pLAYER_02_ZERG_GREEN, PointFromId(512), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 2), "Overseer", gv_pLAYER_02_ZERG_GREEN, PointFromId(512), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(14, 14, 14, 14), "Zergling", gv_pLAYER_02_ZERG_GREEN, PointFromId(512), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 2, 2), "Ultralisk", gv_pLAYER_02_ZERG_GREEN, PointFromId(512), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "Hydralisk", gv_pLAYER_02_ZERG_GREEN, PointFromId(512), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "Roach", gv_pLAYER_02_ZERG_GREEN, PointFromId(512), 3.0);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "Mutalisk", gv_pLAYER_02_ZERG_GREEN, PointFromId(512), 2.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Overseer", gv_pLAYER_02_ZERG_GREEN, PointFromId(512), 2.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(14, 14, 14, 14), "Zergling", gv_pLAYER_02_ZERG_GREEN, PointFromId(512), 1.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "Hydralisk", gv_pLAYER_02_ZERG_GREEN, PointFromId(512), 1.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(14, 14, 14, 14), "Zergling", gv_pLAYER_02_ZERG_GREEN, PointFromId(512), 1.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "Mutalisk", gv_pLAYER_02_ZERG_GREEN, PointFromId(512), 2.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Overseer", gv_pLAYER_02_ZERG_GREEN, PointFromId(512), 2.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "Roach", gv_pLAYER_02_ZERG_GREEN, PointFromId(512), 1.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 2, 2), "Ultralisk", gv_pLAYER_02_ZERG_GREEN, PointFromId(512), 1.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StreamingWave03NER_Init () {
    gt_StreamingWave03NER = TriggerCreate("gt_StreamingWave03NER_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Streaming Wave 04 (PUR)
//--------------------------------------------------------------------------------------------------
bool gt_StreamingWave04PUR_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(12, 12, 12, 12), "Zergling", gv_pLAYER_04_ZERG_PINK, PointFromId(294), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "Roach", gv_pLAYER_04_ZERG_PINK, PointFromId(294), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 3), "InfestedAbomination", gv_pLAYER_04_ZERG_PINK, PointFromId(294), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "Hydralisk", gv_pLAYER_04_ZERG_PINK, PointFromId(294), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(12, 12, 12, 12), "Zergling", gv_pLAYER_04_ZERG_PINK, PointFromId(294), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 2), "Overseer", gv_pLAYER_04_ZERG_PINK, PointFromId(294), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(12, 12, 12, 12), "Zergling", gv_pLAYER_04_ZERG_PINK, PointFromId(294), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "Mutalisk", gv_pLAYER_04_ZERG_PINK, PointFromId(294), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 3), "InfestedAbomination", gv_pLAYER_04_ZERG_PINK, PointFromId(294), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(12, 12, 12, 12), "Zergling", gv_pLAYER_04_ZERG_PINK, PointFromId(294), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "Mutalisk", gv_pLAYER_04_ZERG_PINK, PointFromId(294), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 2), "Overseer", gv_pLAYER_04_ZERG_PINK, PointFromId(294), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "Roach", gv_pLAYER_04_ZERG_PINK, PointFromId(294), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(12, 12, 12, 12), "Zergling", gv_pLAYER_04_ZERG_PINK, PointFromId(294), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "Hydralisk", gv_pLAYER_04_ZERG_PINK, PointFromId(294), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 3), "InfestedAbomination", gv_pLAYER_04_ZERG_PINK, PointFromId(294), 3.0);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(12, 12, 12, 12), "Zergling", gv_pLAYER_04_ZERG_PINK, PointFromId(294), 2.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "Roach", gv_pLAYER_04_ZERG_PINK, PointFromId(294), 2.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "Mutalisk", gv_pLAYER_04_ZERG_PINK, PointFromId(294), 2.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(12, 12, 12, 12), "Zergling", gv_pLAYER_04_ZERG_PINK, PointFromId(294), 1.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "Hydralisk", gv_pLAYER_04_ZERG_PINK, PointFromId(294), 1.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Overseer", gv_pLAYER_04_ZERG_PINK, PointFromId(294), 2.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 4, 4), "InfestedAbomination", gv_pLAYER_04_ZERG_PINK, PointFromId(294), 1.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(12, 12, 12, 12), "Zergling", gv_pLAYER_04_ZERG_PINK, PointFromId(294), 1.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StreamingWave04PUR_Init () {
    gt_StreamingWave04PUR = TriggerCreate("gt_StreamingWave04PUR_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Streaming Wave 05 (PUR)
//--------------------------------------------------------------------------------------------------
bool gt_StreamingWave05PUR_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_StreamingAttack050607Q, true, false);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(12, 12, 12, 12), "Zergling", gv_pLAYER_04_ZERG_PINK, PointFromId(294), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 3), "Roach", gv_pLAYER_04_ZERG_PINK, PointFromId(294), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 2), "Ultralisk", gv_pLAYER_04_ZERG_PINK, PointFromId(294), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 2), "Overseer", gv_pLAYER_04_ZERG_PINK, PointFromId(294), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(12, 12, 12, 12), "Zergling", gv_pLAYER_04_ZERG_PINK, PointFromId(294), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 3), "Hydralisk", gv_pLAYER_04_ZERG_PINK, PointFromId(294), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 3), "Roach", gv_pLAYER_04_ZERG_PINK, PointFromId(294), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(12, 12, 12, 12), "Zergling", gv_pLAYER_04_ZERG_PINK, PointFromId(294), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 3), "Mutalisk", gv_pLAYER_04_ZERG_PINK, PointFromId(294), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 2, 2), "Guardian", gv_pLAYER_04_ZERG_PINK, PointFromId(294), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Ultralisk", gv_pLAYER_04_ZERG_PINK, PointFromId(294), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(12, 12, 12, 12), "Zergling", gv_pLAYER_04_ZERG_PINK, PointFromId(294), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 2), "Overseer", gv_pLAYER_04_ZERG_PINK, PointFromId(294), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 3), "Mutalisk", gv_pLAYER_04_ZERG_PINK, PointFromId(294), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(12, 12, 12, 12), "Zergling", gv_pLAYER_04_ZERG_PINK, PointFromId(294), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 3), "Roach", gv_pLAYER_04_ZERG_PINK, PointFromId(294), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 2, 3), "Ultralisk", gv_pLAYER_04_ZERG_PINK, PointFromId(294), 2.0);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(12, 12, 12, 12), "Zergling", gv_pLAYER_04_ZERG_PINK, PointFromId(294), 2.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 3), "Roach", gv_pLAYER_04_ZERG_PINK, PointFromId(294), 1.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 2, 3), "Ultralisk", gv_pLAYER_04_ZERG_PINK, PointFromId(294), 2.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Overseer", gv_pLAYER_04_ZERG_PINK, PointFromId(294), 3.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(12, 12, 12, 12), "Zergling", gv_pLAYER_04_ZERG_PINK, PointFromId(294), 2.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 3), "Mutalisk", gv_pLAYER_04_ZERG_PINK, PointFromId(294), 1.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 3), "Hydralisk", gv_pLAYER_04_ZERG_PINK, PointFromId(294), 1.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(12, 12, 12, 12), "Zergling", gv_pLAYER_04_ZERG_PINK, PointFromId(294), 2.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StreamingWave05PUR_Init () {
    gt_StreamingWave05PUR = TriggerCreate("gt_StreamingWave05PUR_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Streaming Wave 06 (NER)
//--------------------------------------------------------------------------------------------------
bool gt_StreamingWave06NER_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(14, 14, 14, 14), "Zergling", gv_pLAYER_02_ZERG_GREEN, PointFromId(512), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 3), "Roach", gv_pLAYER_02_ZERG_GREEN, PointFromId(512), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 3), "Hydralisk", gv_pLAYER_02_ZERG_GREEN, PointFromId(512), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 2, 3), "Guardian", gv_pLAYER_02_ZERG_GREEN, PointFromId(512), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 2), "Overseer", gv_pLAYER_02_ZERG_GREEN, PointFromId(512), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(14, 14, 14, 14), "Zergling", gv_pLAYER_02_ZERG_GREEN, PointFromId(512), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "InfestedAbomination", gv_pLAYER_02_ZERG_GREEN, PointFromId(512), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(14, 14, 14, 14), "Zergling", gv_pLAYER_02_ZERG_GREEN, PointFromId(512), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "Hydralisk", gv_pLAYER_02_ZERG_GREEN, PointFromId(512), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 3), "Roach", gv_pLAYER_02_ZERG_GREEN, PointFromId(512), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(14, 14, 14, 14), "Zergling", gv_pLAYER_02_ZERG_GREEN, PointFromId(512), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 2), "Overseer", gv_pLAYER_02_ZERG_GREEN, PointFromId(512), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 3), "Roach", gv_pLAYER_02_ZERG_GREEN, PointFromId(512), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "Mutalisk", gv_pLAYER_02_ZERG_GREEN, PointFromId(512), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(14, 14, 14, 14), "Zergling", gv_pLAYER_02_ZERG_GREEN, PointFromId(512), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 3), "Hydralisk", gv_pLAYER_02_ZERG_GREEN, PointFromId(512), 2.0);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 2, 3), "Guardian", gv_pLAYER_02_ZERG_GREEN, PointFromId(512), 2.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 3), "Roach", gv_pLAYER_02_ZERG_GREEN, PointFromId(512), 1.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(14, 14, 14, 14), "Zergling", gv_pLAYER_02_ZERG_GREEN, PointFromId(512), 1.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Overseer", gv_pLAYER_02_ZERG_GREEN, PointFromId(512), 3.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 3), "Mutalisk", gv_pLAYER_02_ZERG_GREEN, PointFromId(512), 1.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(14, 14, 14, 14), "Zergling", gv_pLAYER_02_ZERG_GREEN, PointFromId(512), 2.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "InfestedAbomination", gv_pLAYER_02_ZERG_GREEN, PointFromId(512), 2.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 3), "Hydralisk", gv_pLAYER_02_ZERG_GREEN, PointFromId(512), 2.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StreamingWave06NER_Init () {
    gt_StreamingWave06NER = TriggerCreate("gt_StreamingWave06NER_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Streaming Wave 07 (TAL)
//--------------------------------------------------------------------------------------------------
bool gt_StreamingWave07TAL_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(16, 16, 16, 16), "Zergling", gv_pLAYER_03_ZERG_RED, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 5, 5), "Roach", gv_pLAYER_03_ZERG_RED, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 2, 3), "Ultralisk", gv_pLAYER_03_ZERG_RED, PointFromId(513), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 5, 5), "Hydralisk", gv_pLAYER_03_ZERG_RED, PointFromId(513), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 2), "Overseer", gv_pLAYER_03_ZERG_RED, PointFromId(513), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(16, 16, 16, 16), "Zergling", gv_pLAYER_03_ZERG_RED, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 2, 2), "Ultralisk", gv_pLAYER_03_ZERG_RED, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 5, 5), "Mutalisk", gv_pLAYER_03_ZERG_RED, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(16, 16, 16, 16), "Zergling", gv_pLAYER_03_ZERG_RED, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 5, 5), "Roach", gv_pLAYER_03_ZERG_RED, PointFromId(513), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 5, 5), "Mutalisk", gv_pLAYER_03_ZERG_RED, PointFromId(513), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 2), "Overseer", gv_pLAYER_03_ZERG_RED, PointFromId(513), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(16, 16, 16, 16), "Zergling", gv_pLAYER_03_ZERG_RED, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 2, 2), "Ultralisk", gv_pLAYER_03_ZERG_RED, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 5, 5), "Roach", gv_pLAYER_03_ZERG_RED, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 5, 5), "Mutalisk", gv_pLAYER_03_ZERG_RED, PointFromId(513), 2.0);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(16, 16, 16, 16), "Zergling", gv_pLAYER_03_ZERG_RED, PointFromId(513), 1.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 5, 5), "Hydralisk", gv_pLAYER_03_ZERG_RED, PointFromId(513), 1.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 2, 3), "Ultralisk", gv_pLAYER_03_ZERG_RED, PointFromId(513), 1.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 5, 5), "Mutalisk", gv_pLAYER_03_ZERG_RED, PointFromId(513), 2.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Overseer", gv_pLAYER_03_ZERG_RED, PointFromId(513), 2.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(16, 16, 16, 16), "Zergling", gv_pLAYER_03_ZERG_RED, PointFromId(513), 1.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 5, 5), "Hydralisk", gv_pLAYER_03_ZERG_RED, PointFromId(513), 1.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 2, 3), "Ultralisk", gv_pLAYER_03_ZERG_RED, PointFromId(513), 1.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StreamingWave07TAL_Init () {
    gt_StreamingWave07TAL = TriggerCreate("gt_StreamingWave07TAL_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Streaming Waves Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossStreamingWavesQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00118", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00151", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00119", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossStreamingWavesQ_Init () {
    gt_ProtossStreamingWavesQ = TriggerCreate("gt_ProtossStreamingWavesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Streaming Wave 08 (NER)
//--------------------------------------------------------------------------------------------------
bool gt_StreamingWave08NER_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ProtossStreamingWavesQ, true, false);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 6, 7), "Zealot", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(512), 5.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 6, 7), "Zealot", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(512), 5.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 5, 6), "Dragoon", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(512), 5.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Oracle", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(512), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 6, 7), "Zealot", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(512), 5.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 5, 6), "Dragoon", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(512), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 3, 4), "Scout", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(512), 4.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 6, 7), "Zealot", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(512), 4.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 5, 6), "Dragoon", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(512), 4.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 6, 7), "Zealot", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(512), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 3, 4), "Scout", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(512), 4.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Oracle", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(512), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 5, 6), "Dragoon", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(512), 4.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 6, 7), "Zealot", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(512), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 3, 4), "Scout", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(512), 4.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 5, 6), "Dragoon", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(512), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 6, 7), "Zealot", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(512), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 3, 4), "Scout", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(512), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 6, 7), "Zealot", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(512), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Oracle", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(512), 3.0);
    while ((libVCMI_gf_GameIsOver() == false) && (libVCMI_gf_PlayerInCinematicModeCampaign() == false)) {
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Scout", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(512), 3.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 4, 4), "Zealot", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(512), 6.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 4, 4), "Dragoon", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(512), 3.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 4, 4), "Zealot", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(512), 6.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Scout", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(512), 3.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 4, 4), "Dragoon", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(512), 3.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StreamingWave08NER_Init () {
    gt_StreamingWave08NER = TriggerCreate("gt_StreamingWave08NER_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Streaming Wave 09 (TAL)
//--------------------------------------------------------------------------------------------------
bool gt_StreamingWave09TAL_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(6, 6, 7, 8), "Zealot", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(513), 5.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(6, 6, 7, 8), "Zealot", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(513), 5.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 5, 6), "Dragoon", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(513), 5.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 2), "Oracle", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 4, 5), "Immortal", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(513), 4.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(6, 6, 7, 8), "Zealot", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(513), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Sentry", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(513), 4.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 5, 6), "Dragoon", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(513), 4.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 4, 4), "Scout", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(513), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(6, 6, 7, 8), "Zealot", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(513), 4.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 5, 6), "Dragoon", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(513), 4.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 4, 5), "Immortal", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(513), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 4, 4), "Scout", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(513), 4.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(6, 6, 7, 8), "Zealot", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(513), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Sentry", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(513), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 5, 6), "Dragoon", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(513), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(6, 6, 7, 8), "Zealot", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(513), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 4, 4), "Scout", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(513), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 2), "Oracle", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 4, 5), "Immortal", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(513), 3.0);
    while ((libVCMI_gf_GameIsOver() == false) && (libVCMI_gf_PlayerInCinematicModeCampaign() == false)) {
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 7, 7), "Zealot", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(513), 3.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Immortal", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(513), 6.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 5, 6), "Dragoon", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(513), 3.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 7, 7), "Zealot", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(513), 6.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 4, 4), "Scout", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(513), 3.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Oracle", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(513), 1.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Immortal", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(513), 8.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StreamingWave09TAL_Init () {
    gt_StreamingWave09TAL = TriggerCreate("gt_StreamingWave09TAL_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Streaming Wave 10 (PUR)
//--------------------------------------------------------------------------------------------------
bool gt_StreamingWave10PUR_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 6, 7), "Zealot", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(294), 5.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 6, 7), "Zealot", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(294), 5.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 5, 6), "Dragoon", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(294), 5.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 3, 4), "Immortal", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(294), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 6, 7), "Zealot", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(294), 5.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 4, 4), "Sentry", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(294), 4.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 5, 6), "Dragoon", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(294), 4.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 3, 4), "Immortal", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(294), 4.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 6, 7), "Zealot", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(294), 4.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 3, 4), "Immortal", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(294), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 5, 6), "Dragoon", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(294), 4.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 4, 4), "Sentry", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(294), 4.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 6, 7), "Zealot", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(294), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 3, 4), "Immortal", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(294), 4.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 4, 4), "Sentry", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(294), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 5, 6), "Dragoon", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(294), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 3, 4), "Immortal", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(294), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 6, 7), "Zealot", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(294), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 4, 4), "Sentry", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(294), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 3, 4), "Immortal", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(294), 3.0);
    while ((libVCMI_gf_GameIsOver() == false) && (libVCMI_gf_PlayerInCinematicModeCampaign() == false)) {
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 4, 4), "Zealot", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(294), 3.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 4, 4), "Dragoon", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(294), 6.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Sentry", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(294), 3.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Immortal", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(294), 6.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 4, 5), "Zealot", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(294), 3.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Sentry", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(294), 3.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Immortal", gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(294), 8.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StreamingWave10PUR_Init () {
    gt_StreamingWave10PUR = TriggerCreate("gt_StreamingWave10PUR_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Armada Attack 1 (Mid)
//--------------------------------------------------------------------------------------------------
bool gt_ArmadaAttack1Mid_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_lv_EscortTargetUnit;
    int lv_lv_BossPing;
    point lv_lv_SpawnPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_lv_BossPing = c_invalidPingId;
    lv_lv_SpawnPoint = PointFromId(41);

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ArmadaTransmissionWave1Q, true, false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Tempest", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    lv_lv_EscortTargetUnit = UnitLastCreated();
    UnitGroupAdd(gv_armadaUnitGroup, lv_lv_EscortTargetUnit);
    AIAttackWaveSetTargetEscort(gv_pLAYER_05_PROTOSS_ARMADA, libNtve_gf_ConvertUnitToUnitGroup(lv_lv_EscortTargetUnit), 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.0, 45.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.0, 315.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, libLotv_gf_DifficultyValueFixed2(4.0, 4.0, 4.0, 3.0), libLotv_gf_DifficultyValueFixed2(105.0, 105.0, 105.0, 135.0));
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, libLotv_gf_DifficultyValueFixed2(4.0, 4.0, 4.0, 3.0), libLotv_gf_DifficultyValueFixed2(255.0, 255.0, 255.0, 225.0));
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Phoenix", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.0, 270.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Phoenix", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.0, 90.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WarpPrism", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 3.0, 180.0);
    gf_SuperWarpGateLogic(UnitLastCreated());
    AIAttackWaveSend(gv_pLAYER_05_PROTOSS_ARMADA, 0, false);
    AIAttackWaveUseUnit(gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_EscortTargetUnit);
    AIAttackWaveSetTargetPoint(gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(489));
    AIAttackWaveSend(gv_pLAYER_05_PROTOSS_ARMADA, 0, false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(lv_lv_EscortTargetUnit), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/BC4F7656"));
    PingSetScale(PingLastCreated(), 0.8);
    lv_lv_BossPing = PingLastCreated();
    PingSetUnit(lv_lv_BossPing, lv_lv_EscortTargetUnit);
    while (!(((UnitIsAlive(lv_lv_EscortTargetUnit) == false) || (UnitGetOwner(lv_lv_EscortTargetUnit) == gv_pLAYER_01_USER)))) {
        Wait(1.0, c_timeAI);
    }
    PingDestroy(PingLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmadaAttack1Mid_Init () {
    gt_ArmadaAttack1Mid = TriggerCreate("gt_ArmadaAttack1Mid_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Armada Attack 2 (Top Mid)
//--------------------------------------------------------------------------------------------------
bool gt_ArmadaAttack2TopMid_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_lv_EscortTargetUnit;
    int lv_lv_BossPing;
    point lv_lv_SpawnPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_lv_BossPing = c_invalidPingId;
    lv_lv_SpawnPoint = PointFromId(778);

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_armadaUpgradeCounter += 1;
    TriggerExecute(gt_ArmadaTransmissionWave2Q, true, false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Tempest", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    lv_lv_EscortTargetUnit = UnitLastCreated();
    UnitGroupAdd(gv_armadaUnitGroup, lv_lv_EscortTargetUnit);
    AIAttackWaveSetTargetEscort(gv_pLAYER_05_PROTOSS_ARMADA, libNtve_gf_ConvertUnitToUnitGroup(lv_lv_EscortTargetUnit), 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.0, 45.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.0, 315.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, libLotv_gf_DifficultyValueFixed2(4.0, 4.0, 4.0, 3.0), libLotv_gf_DifficultyValueFixed2(105.0, 105.0, 105.0, 135.0));
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, libLotv_gf_DifficultyValueFixed2(4.0, 4.0, 4.0, 3.0), libLotv_gf_DifficultyValueFixed2(255.0, 255.0, 255.0, 225.0));
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.0, 270.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.0, 90.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    }

    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Oracle", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 2.0, 180.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WarpPrism", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, libLotv_gf_DifficultyValueFixed2(3.0, 3.0, 3.0, 4.5), 180.0);
    gf_SuperWarpGateLogic(UnitLastCreated());
    AIAttackWaveSend(gv_pLAYER_05_PROTOSS_ARMADA, 0, false);
    AIAttackWaveUseUnit(gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_EscortTargetUnit);
    AIAttackWaveSetTargetPoint(gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(489));
    AIAttackWaveSend(gv_pLAYER_05_PROTOSS_ARMADA, 0, false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(lv_lv_EscortTargetUnit), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/F696110E"));
    PingSetScale(PingLastCreated(), 0.8);
    lv_lv_BossPing = PingLastCreated();
    PingSetUnit(lv_lv_BossPing, lv_lv_EscortTargetUnit);
    while (!(((UnitIsAlive(lv_lv_EscortTargetUnit) == false) || (UnitGetOwner(lv_lv_EscortTargetUnit) == gv_pLAYER_01_USER)))) {
        Wait(1.0, c_timeAI);
    }
    PingDestroy(PingLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmadaAttack2TopMid_Init () {
    gt_ArmadaAttack2TopMid = TriggerCreate("gt_ArmadaAttack2TopMid_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Armada Attack 3 (Bot Mid)
//--------------------------------------------------------------------------------------------------
bool gt_ArmadaAttack3BotMid_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_lv_EscortTargetUnit;
    int lv_lv_BossPing;
    point lv_lv_SpawnPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_lv_BossPing = c_invalidPingId;
    lv_lv_SpawnPoint = PointFromId(779);

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Tempest", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    lv_lv_EscortTargetUnit = UnitLastCreated();
    UnitGroupAdd(gv_armadaUnitGroup, lv_lv_EscortTargetUnit);
    AIAttackWaveSetTargetEscort(gv_pLAYER_05_PROTOSS_ARMADA, libNtve_gf_ConvertUnitToUnitGroup(lv_lv_EscortTargetUnit), 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.0, 45.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.0, 315.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, libLotv_gf_DifficultyValueFixed2(4.0, 4.0, 4.0, 3.0), libLotv_gf_DifficultyValueFixed2(105.0, 105.0, 105.0, 135.0));
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, libLotv_gf_DifficultyValueFixed2(4.0, 4.0, 4.0, 3.0), libLotv_gf_DifficultyValueFixed2(255.0, 255.0, 255.0, 225.0));
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.0, 270.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.0, 90.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    }

    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Oracle", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 2.0, 180.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WarpPrism", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, libLotv_gf_DifficultyValueFixed2(3.0, 3.0, 3.0, 4.5), 180.0);
    gf_SuperWarpGateLogic(UnitLastCreated());
    AIAttackWaveSend(gv_pLAYER_05_PROTOSS_ARMADA, 0, false);
    AIAttackWaveUseUnit(gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_EscortTargetUnit);
    AIAttackWaveSetTargetPoint(gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(489));
    AIAttackWaveSend(gv_pLAYER_05_PROTOSS_ARMADA, 0, false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(lv_lv_EscortTargetUnit), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/FB883A0A"));
    PingSetScale(PingLastCreated(), 0.8);
    lv_lv_BossPing = PingLastCreated();
    PingSetUnit(lv_lv_BossPing, lv_lv_EscortTargetUnit);
    while (!(((UnitIsAlive(lv_lv_EscortTargetUnit) == false) || (UnitGetOwner(lv_lv_EscortTargetUnit) == gv_pLAYER_01_USER)))) {
        Wait(1.0, c_timeAI);
    }
    PingDestroy(PingLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmadaAttack3BotMid_Init () {
    gt_ArmadaAttack3BotMid = TriggerCreate("gt_ArmadaAttack3BotMid_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Armada Attack 4 (Bot)
//--------------------------------------------------------------------------------------------------
bool gt_ArmadaAttack4Bot_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_lv_EscortTargetUnit;
    int lv_lv_BossPing;
    point lv_lv_SpawnPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_lv_BossPing = c_invalidPingId;
    lv_lv_SpawnPoint = PointFromId(43);

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_armadaUpgradeCounter += 1;
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    lv_lv_EscortTargetUnit = UnitLastCreated();
    UnitGroupAdd(gv_armadaUnitGroup, lv_lv_EscortTargetUnit);
    AIAttackWaveSetTargetEscort(gv_pLAYER_05_PROTOSS_ARMADA, libNtve_gf_ConvertUnitToUnitGroup(lv_lv_EscortTargetUnit), 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.0, 45.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.0, 315.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 3.0, 135.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 3.0, 225.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.5, 270.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.5, 90.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Phoenix", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.0, 270.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Phoenix", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.0, 90.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Oracle", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 2.0, 180.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WarpPrism", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.5, 180.0);
    gf_SuperWarpGateLogic(UnitLastCreated());
    AIAttackWaveSend(gv_pLAYER_05_PROTOSS_ARMADA, 0, false);
    AIAttackWaveUseUnit(gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_EscortTargetUnit);
    AIAttackWaveSetTargetPoint(gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(489));
    AIAttackWaveSend(gv_pLAYER_05_PROTOSS_ARMADA, 0, false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(lv_lv_EscortTargetUnit), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/643CCFC8"));
    PingSetScale(PingLastCreated(), 0.8);
    lv_lv_BossPing = PingLastCreated();
    PingSetUnit(lv_lv_BossPing, lv_lv_EscortTargetUnit);
    while (!(((UnitIsAlive(lv_lv_EscortTargetUnit) == false) || (UnitGetOwner(lv_lv_EscortTargetUnit) == gv_pLAYER_01_USER)))) {
        Wait(1.0, c_timeAI);
    }
    PingDestroy(PingLastCreated());
    while (!((libNtve_gf_UnitGroupIsDead(gv_armadaUnitGroup) == true))) {
        Wait(1.0, c_timeAI);
    }
    TriggerExecute(gt_AmonTransmission2Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmadaAttack4Bot_Init () {
    gt_ArmadaAttack4Bot = TriggerCreate("gt_ArmadaAttack4Bot_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Armada Attack 5 (Mid)
//--------------------------------------------------------------------------------------------------
bool gt_ArmadaAttack5Mid_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_lv_EscortTargetUnit;
    int lv_lv_BossPing;
    point lv_lv_SpawnPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_lv_BossPing = c_invalidPingId;
    lv_lv_SpawnPoint = PointFromId(41);

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    lv_lv_EscortTargetUnit = UnitLastCreated();
    UnitGroupAdd(gv_armadaUnitGroup, lv_lv_EscortTargetUnit);
    AIAttackWaveSetTargetEscort(gv_pLAYER_05_PROTOSS_ARMADA, libNtve_gf_ConvertUnitToUnitGroup(lv_lv_EscortTargetUnit), 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.0, 45.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.0, 315.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 3.0, 135.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 3.0, 225.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.5, 270.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.5, 90.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Phoenix", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.0, 270.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Phoenix", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.0, 90.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Oracle", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 2.0, 180.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WarpPrism", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.5, 180.0);
    gf_SuperWarpGateLogic(UnitLastCreated());
    AIAttackWaveSend(gv_pLAYER_05_PROTOSS_ARMADA, 0, false);
    AIAttackWaveUseUnit(gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_EscortTargetUnit);
    AIAttackWaveSetTargetPoint(gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(489));
    AIAttackWaveSend(gv_pLAYER_05_PROTOSS_ARMADA, 0, false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(lv_lv_EscortTargetUnit), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/E7C1621C"));
    PingSetScale(PingLastCreated(), 0.8);
    lv_lv_BossPing = PingLastCreated();
    PingSetUnit(lv_lv_BossPing, lv_lv_EscortTargetUnit);
    while (!(((UnitIsAlive(lv_lv_EscortTargetUnit) == false) || (UnitGetOwner(lv_lv_EscortTargetUnit) == gv_pLAYER_01_USER)))) {
        Wait(1.0, c_timeAI);
    }
    PingDestroy(PingLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmadaAttack5Mid_Init () {
    gt_ArmadaAttack5Mid = TriggerCreate("gt_ArmadaAttack5Mid_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Armada Attack 6 (Bot Mid)
//--------------------------------------------------------------------------------------------------
bool gt_ArmadaAttack6BotMid_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_lv_EscortTargetUnit;
    int lv_lv_BossPing;
    point lv_lv_SpawnPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_lv_BossPing = c_invalidPingId;
    lv_lv_SpawnPoint = PointFromId(779);

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_armadaUpgradeCounter += 1;
    TriggerExecute(gt_ArmadaTransmissionWave6Q, true, false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    lv_lv_EscortTargetUnit = UnitLastCreated();
    UnitGroupAdd(gv_armadaUnitGroup, lv_lv_EscortTargetUnit);
    AIAttackWaveSetTargetEscort(gv_pLAYER_05_PROTOSS_ARMADA, libNtve_gf_ConvertUnitToUnitGroup(lv_lv_EscortTargetUnit), 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.5, 15.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.5, 345.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.5, 45.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.5, 315.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Oracle", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 3.5, 80.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Oracle", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 3.5, 280.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Tempest", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 6.0, 90.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Tempest", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 6.0, 270.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MothershipAiur06", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.5, 180.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WarpPrism", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.0, 240.0);
    gf_SuperWarpGateLogic(UnitLastCreated());
    AIAttackWaveSend(gv_pLAYER_05_PROTOSS_ARMADA, 0, false);
    AIAttackWaveUseUnit(gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_EscortTargetUnit);
    AIAttackWaveSetTargetPoint(gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(489));
    AIAttackWaveSend(gv_pLAYER_05_PROTOSS_ARMADA, 0, false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(lv_lv_EscortTargetUnit), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/9FB21BAB"));
    PingSetScale(PingLastCreated(), 0.8);
    lv_lv_BossPing = PingLastCreated();
    PingSetUnit(lv_lv_BossPing, lv_lv_EscortTargetUnit);
    while (!(((UnitIsAlive(lv_lv_EscortTargetUnit) == false) || (UnitGetOwner(lv_lv_EscortTargetUnit) == gv_pLAYER_01_USER)))) {
        Wait(1.0, c_timeAI);
    }
    PingDestroy(PingLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmadaAttack6BotMid_Init () {
    gt_ArmadaAttack6BotMid = TriggerCreate("gt_ArmadaAttack6BotMid_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Armada Attack 7 (Mid)
//--------------------------------------------------------------------------------------------------
bool gt_ArmadaAttack7Mid_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_lv_EscortTargetUnit;
    int lv_lv_BossPing;
    point lv_lv_SpawnPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_lv_BossPing = c_invalidPingId;
    lv_lv_SpawnPoint = PointFromId(41);

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    lv_lv_EscortTargetUnit = UnitLastCreated();
    UnitGroupAdd(gv_armadaUnitGroup, lv_lv_EscortTargetUnit);
    AIAttackWaveSetTargetEscort(gv_pLAYER_05_PROTOSS_ARMADA, libNtve_gf_ConvertUnitToUnitGroup(lv_lv_EscortTargetUnit), 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.5, 15.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.5, 345.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.5, 45.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.5, 315.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Oracle", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 3.5, 80.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Oracle", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 3.5, 280.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Tempest", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 6.0, 90.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Tempest", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 6.0, 270.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MothershipAiur06", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.5, 180.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WarpPrism", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.5, 240.0);
    gf_SuperWarpGateLogic(UnitLastCreated());
    AIAttackWaveSend(gv_pLAYER_05_PROTOSS_ARMADA, 0, false);
    AIAttackWaveUseUnit(gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_EscortTargetUnit);
    AIAttackWaveSetTargetPoint(gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(489));
    AIAttackWaveSend(gv_pLAYER_05_PROTOSS_ARMADA, 0, false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(lv_lv_EscortTargetUnit), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/E25C730C"));
    PingSetScale(PingLastCreated(), 0.8);
    lv_lv_BossPing = PingLastCreated();
    PingSetUnit(lv_lv_BossPing, lv_lv_EscortTargetUnit);
    while (!(((UnitIsAlive(lv_lv_EscortTargetUnit) == false) || (UnitGetOwner(lv_lv_EscortTargetUnit) == gv_pLAYER_01_USER)))) {
        Wait(1.0, c_timeAI);
    }
    PingDestroy(PingLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmadaAttack7Mid_Init () {
    gt_ArmadaAttack7Mid = TriggerCreate("gt_ArmadaAttack7Mid_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Armada Attack 8 (Top Mid)
//--------------------------------------------------------------------------------------------------
bool gt_ArmadaAttack8TopMid_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_lv_EscortTargetUnit;
    int lv_lv_BossPing;
    point lv_lv_SpawnPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_lv_BossPing = c_invalidPingId;
    lv_lv_SpawnPoint = PointFromId(778);

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    lv_lv_EscortTargetUnit = UnitLastCreated();
    UnitGroupAdd(gv_armadaUnitGroup, lv_lv_EscortTargetUnit);
    AIAttackWaveSetTargetEscort(gv_pLAYER_05_PROTOSS_ARMADA, libNtve_gf_ConvertUnitToUnitGroup(lv_lv_EscortTargetUnit), 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.5, 15.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.5, 345.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.5, 45.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.5, 315.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Oracle", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 3.5, 80.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Oracle", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 3.5, 280.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Tempest", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 6.0, 90.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Tempest", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 6.0, 270.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MothershipAiur06", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.5, 180.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WarpPrism", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.5, 240.0);
    gf_SuperWarpGateLogic(UnitLastCreated());
    AIAttackWaveSend(gv_pLAYER_05_PROTOSS_ARMADA, 0, false);
    AIAttackWaveUseUnit(gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_EscortTargetUnit);
    AIAttackWaveSetTargetPoint(gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(489));
    AIAttackWaveSend(gv_pLAYER_05_PROTOSS_ARMADA, 0, false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(lv_lv_EscortTargetUnit), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/37C81A02"));
    PingSetScale(PingLastCreated(), 0.8);
    lv_lv_BossPing = PingLastCreated();
    PingSetUnit(lv_lv_BossPing, lv_lv_EscortTargetUnit);
    while (!(((UnitIsAlive(lv_lv_EscortTargetUnit) == false) || (UnitGetOwner(lv_lv_EscortTargetUnit) == gv_pLAYER_01_USER)))) {
        Wait(1.0, c_timeAI);
    }
    PingDestroy(PingLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmadaAttack8TopMid_Init () {
    gt_ArmadaAttack8TopMid = TriggerCreate("gt_ArmadaAttack8TopMid_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Armada Attack 9 (Top)
//--------------------------------------------------------------------------------------------------
bool gt_ArmadaAttack9Top_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_lv_EscortTargetUnit;
    int lv_lv_BossPing;
    point lv_lv_SpawnPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_lv_BossPing = c_invalidPingId;
    lv_lv_SpawnPoint = PointFromId(40);

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_armadaUpgradeCounter += 1;
    TriggerExecute(gt_ArmadaTransmissionWave9Q, true, false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Tempest", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    lv_lv_EscortTargetUnit = UnitLastCreated();
    UnitGroupAdd(gv_armadaUnitGroup, lv_lv_EscortTargetUnit);
    AIAttackWaveSetTargetEscort(gv_pLAYER_05_PROTOSS_ARMADA, libNtve_gf_ConvertUnitToUnitGroup(lv_lv_EscortTargetUnit), 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 5.0, 15.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 5.0, 345.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 5.0, 45.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 5.0, 315.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 6.5, 30.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 6.5, 330.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Oracle", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 3.5, 80.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Oracle", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 3.5, 280.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 6.0, 70.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 6.0, 290.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 7.5, 135.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 7.5, 225.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MothershipAiur06", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.5, 180.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WarpPrism", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.5, 240.0);
    gf_SuperWarpGateLogic(UnitLastCreated());
    AIAttackWaveSend(gv_pLAYER_05_PROTOSS_ARMADA, 0, false);
    AIAttackWaveUseUnit(gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_EscortTargetUnit);
    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
        AIAttackWaveSetTargetPoint(gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(489));
    }
    else {
        AIAttackWaveSetTargetPoint(gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(122));
    }
    AIAttackWaveSend(gv_pLAYER_05_PROTOSS_ARMADA, 0, false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(lv_lv_EscortTargetUnit), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/1F08D578"));
    PingSetScale(PingLastCreated(), 0.8);
    lv_lv_BossPing = PingLastCreated();
    PingSetUnit(lv_lv_BossPing, lv_lv_EscortTargetUnit);
    while (!(((UnitIsAlive(lv_lv_EscortTargetUnit) == false) || (UnitGetOwner(lv_lv_EscortTargetUnit) == gv_pLAYER_01_USER)))) {
        Wait(1.0, c_timeAI);
    }
    PingDestroy(PingLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmadaAttack9Top_Init () {
    gt_ArmadaAttack9Top = TriggerCreate("gt_ArmadaAttack9Top_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Armada Attack 10 (Mid)
//--------------------------------------------------------------------------------------------------
bool gt_ArmadaAttack10Mid_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_lv_EscortTargetUnit;
    int lv_lv_BossPing;
    point lv_lv_SpawnPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_lv_BossPing = c_invalidPingId;
    lv_lv_SpawnPoint = PointFromId(41);

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Tempest", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    lv_lv_EscortTargetUnit = UnitLastCreated();
    UnitGroupAdd(gv_armadaUnitGroup, lv_lv_EscortTargetUnit);
    AIAttackWaveSetTargetEscort(gv_pLAYER_05_PROTOSS_ARMADA, libNtve_gf_ConvertUnitToUnitGroup(lv_lv_EscortTargetUnit), 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 5.0, 15.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 5.0, 345.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 5.0, 45.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 5.0, 315.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 6.5, 30.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 6.5, 330.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Oracle", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 3.5, 80.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Oracle", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 3.5, 280.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 6.0, 70.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 6.0, 290.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 7.5, 135.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 7.5, 225.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MothershipAiur06", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.5, 180.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WarpPrism", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.5, 240.0);
    gf_SuperWarpGateLogic(UnitLastCreated());
    AIAttackWaveSend(gv_pLAYER_05_PROTOSS_ARMADA, 0, false);
    AIAttackWaveUseUnit(gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_EscortTargetUnit);
    AIAttackWaveSetTargetPoint(gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(489));
    AIAttackWaveSend(gv_pLAYER_05_PROTOSS_ARMADA, 0, false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(lv_lv_EscortTargetUnit), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/14BF079D"));
    PingSetScale(PingLastCreated(), 0.8);
    lv_lv_BossPing = PingLastCreated();
    PingSetUnit(lv_lv_BossPing, lv_lv_EscortTargetUnit);
    while (!(((UnitIsAlive(lv_lv_EscortTargetUnit) == false) || (UnitGetOwner(lv_lv_EscortTargetUnit) == gv_pLAYER_01_USER)))) {
        Wait(1.0, c_timeAI);
    }
    PingDestroy(PingLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmadaAttack10Mid_Init () {
    gt_ArmadaAttack10Mid = TriggerCreate("gt_ArmadaAttack10Mid_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Armada Attack 11 (Top)
//--------------------------------------------------------------------------------------------------
bool gt_ArmadaAttack11Top_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_lv_EscortTargetUnit;
    int lv_lv_BossPing;
    point lv_lv_SpawnPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_lv_BossPing = c_invalidPingId;
    lv_lv_SpawnPoint = PointFromId(40);

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_armadaUpgradeCounter += 1;
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    lv_lv_EscortTargetUnit = UnitLastCreated();
    UnitGroupAdd(gv_armadaUnitGroup, lv_lv_EscortTargetUnit);
    AIAttackWaveSetTargetEscort(gv_pLAYER_05_PROTOSS_ARMADA, libNtve_gf_ConvertUnitToUnitGroup(lv_lv_EscortTargetUnit), 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Tempest", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 6.0, 30.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Tempest", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 6.0, 330.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Tempest", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 7.5, 135.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Tempest", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 7.5, 225.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 6.0, 60.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 6.0, 300.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Oracle", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 3.5, 90.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Oracle", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 3.5, 270.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 2.5, 180.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MothershipAiur06", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, libLotv_gf_DifficultyValueFixed2(4.5, 4.5, 4.5, 6.5), 180.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WarpPrism", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 5.0, 220.0);
    gf_SuperWarpGateLogic(UnitLastCreated());
    AIAttackWaveSend(gv_pLAYER_05_PROTOSS_ARMADA, 0, false);
    AIAttackWaveUseUnit(gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_EscortTargetUnit);
    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
        AIAttackWaveSetTargetPoint(gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(489));
    }
    else {
        AIAttackWaveSetTargetPoint(gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(122));
    }
    AIAttackWaveSend(gv_pLAYER_05_PROTOSS_ARMADA, 0, false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(lv_lv_EscortTargetUnit), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/29F476F2"));
    PingSetScale(PingLastCreated(), 0.8);
    lv_lv_BossPing = PingLastCreated();
    PingSetUnit(lv_lv_BossPing, lv_lv_EscortTargetUnit);
    while (!(((UnitIsAlive(lv_lv_EscortTargetUnit) == false) || (UnitGetOwner(lv_lv_EscortTargetUnit) == gv_pLAYER_01_USER)))) {
        Wait(1.0, c_timeAI);
    }
    PingDestroy(PingLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmadaAttack11Top_Init () {
    gt_ArmadaAttack11Top = TriggerCreate("gt_ArmadaAttack11Top_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Armada Attack 12 (Mid)
//--------------------------------------------------------------------------------------------------
bool gt_ArmadaAttack12Mid_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_lv_EscortTargetUnit;
    int lv_lv_BossPing;
    point lv_lv_SpawnPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_lv_BossPing = c_invalidPingId;
    lv_lv_SpawnPoint = PointFromId(41);

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    lv_lv_EscortTargetUnit = UnitLastCreated();
    UnitGroupAdd(gv_armadaUnitGroup, lv_lv_EscortTargetUnit);
    AIAttackWaveSetTargetEscort(gv_pLAYER_05_PROTOSS_ARMADA, libNtve_gf_ConvertUnitToUnitGroup(lv_lv_EscortTargetUnit), 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Tempest", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 6.0, 30.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Tempest", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 6.0, 330.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Tempest", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 7.5, 135.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Tempest", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 7.5, 225.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 6.0, 60.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 6.0, 300.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Oracle", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 3.5, 90.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Oracle", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 3.5, 270.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 2.5, 180.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MothershipAiur06", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, libLotv_gf_DifficultyValueFixed2(4.5, 4.5, 4.5, 6.5), 180.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WarpPrism", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 5.0, 220.0);
    gf_SuperWarpGateLogic(UnitLastCreated());
    AIAttackWaveSend(gv_pLAYER_05_PROTOSS_ARMADA, 0, false);
    AIAttackWaveUseUnit(gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_EscortTargetUnit);
    AIAttackWaveSetTargetPoint(gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(489));
    AIAttackWaveSend(gv_pLAYER_05_PROTOSS_ARMADA, 0, false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(lv_lv_EscortTargetUnit), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/C8ABA9C5"));
    PingSetScale(PingLastCreated(), 0.8);
    lv_lv_BossPing = PingLastCreated();
    PingSetUnit(lv_lv_BossPing, lv_lv_EscortTargetUnit);
    while (!(((UnitIsAlive(lv_lv_EscortTargetUnit) == false) || (UnitGetOwner(lv_lv_EscortTargetUnit) == gv_pLAYER_01_USER)))) {
        Wait(1.0, c_timeAI);
    }
    PingDestroy(PingLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmadaAttack12Mid_Init () {
    gt_ArmadaAttack12Mid = TriggerCreate("gt_ArmadaAttack12Mid_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Armada Attack 13 (Bot)
//--------------------------------------------------------------------------------------------------
bool gt_ArmadaAttack13Bot_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_lv_EscortTargetUnit;
    int lv_lv_BossPing;
    point lv_lv_SpawnPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_lv_BossPing = c_invalidPingId;
    lv_lv_SpawnPoint = PointFromId(43);

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    lv_lv_EscortTargetUnit = UnitLastCreated();
    UnitGroupAdd(gv_armadaUnitGroup, lv_lv_EscortTargetUnit);
    AIAttackWaveSetTargetEscort(gv_pLAYER_05_PROTOSS_ARMADA, libNtve_gf_ConvertUnitToUnitGroup(lv_lv_EscortTargetUnit), 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Tempest", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 6.0, 30.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Tempest", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 6.0, 330.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Tempest", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 7.5, 135.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Tempest", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 7.5, 225.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 6.0, 60.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 6.0, 300.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Oracle", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 3.5, 90.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Oracle", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 3.5, 270.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 2.5, 180.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MothershipAiur06", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, libLotv_gf_DifficultyValueFixed2(4.5, 4.5, 4.5, 6.5), 180.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WarpPrism", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_pLAYER_05_PROTOSS_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 5.0, 220.0);
    gf_SuperWarpGateLogic(UnitLastCreated());
    AIAttackWaveSend(gv_pLAYER_05_PROTOSS_ARMADA, 0, false);
    AIAttackWaveUseUnit(gv_pLAYER_05_PROTOSS_ARMADA, lv_lv_EscortTargetUnit);
    AIAttackWaveSetTargetPoint(gv_pLAYER_05_PROTOSS_ARMADA, PointFromId(489));
    AIAttackWaveSend(gv_pLAYER_05_PROTOSS_ARMADA, 0, false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(lv_lv_EscortTargetUnit), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/509CEEDD"));
    PingSetScale(PingLastCreated(), 0.8);
    lv_lv_BossPing = PingLastCreated();
    PingSetUnit(lv_lv_BossPing, lv_lv_EscortTargetUnit);
    while (!(((UnitIsAlive(lv_lv_EscortTargetUnit) == false) || (UnitGetOwner(lv_lv_EscortTargetUnit) == gv_pLAYER_01_USER)))) {
        Wait(1.0, c_timeAI);
    }
    PingDestroy(PingLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmadaAttack13Bot_Init () {
    gt_ArmadaAttack13Bot = TriggerCreate("gt_ArmadaAttack13Bot_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Armada Transmission - Wave 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_ArmadaTransmissionWave1Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00069", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmadaTransmissionWave1Q_Init () {
    gt_ArmadaTransmissionWave1Q = TriggerCreate("gt_ArmadaTransmissionWave1Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Armada Transmission - Wave 2 Q
//--------------------------------------------------------------------------------------------------
bool gt_ArmadaTransmissionWave2Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00070", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmadaTransmissionWave2Q_Init () {
    gt_ArmadaTransmissionWave2Q = TriggerCreate("gt_ArmadaTransmissionWave2Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Armada Transmission - Wave 6 Q
//--------------------------------------------------------------------------------------------------
bool gt_ArmadaTransmissionWave6Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00071", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmadaTransmissionWave6Q_Init () {
    gt_ArmadaTransmissionWave6Q = TriggerCreate("gt_ArmadaTransmissionWave6Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Armada Transmission - Wave 9 Q
//--------------------------------------------------------------------------------------------------
bool gt_ArmadaTransmissionWave9Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00072", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmadaTransmissionWave9Q_Init () {
    gt_ArmadaTransmissionWave9Q = TriggerCreate("gt_ArmadaTransmissionWave9Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Amon Transmission 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_AmonTransmission1Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00076", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AmonTransmission1Q_Init () {
    gt_AmonTransmission1Q = TriggerCreate("gt_AmonTransmission1Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Amon Transmission 2 Q
//--------------------------------------------------------------------------------------------------
bool gt_AmonTransmission2Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00077", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AmonTransmission2Q_Init () {
    gt_AmonTransmission2Q = TriggerCreate("gt_AmonTransmission2Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Amon Transmission 3 Q
//--------------------------------------------------------------------------------------------------
bool gt_AmonTransmission3Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00078", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AmonTransmission3Q_Init () {
    gt_AmonTransmission3Q = TriggerCreate("gt_AmonTransmission3Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: SuperWarpGateSpawns
//--------------------------------------------------------------------------------------------------
bool gt_SuperWarpGateSpawns_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_05_PROTOSS_ARMADA))) {
            return false;
        }

        if (!((EventUnit() == UnitFromId(223)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AISetUnitSuicide(EventUnitProgressUnit(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SuperWarpGateSpawns_Init () {
    gt_SuperWarpGateSpawns = TriggerCreate("gt_SuperWarpGateSpawns_Func");
    TriggerAddEventUnitConstructProgress(gt_SuperWarpGateSpawns, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libVCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libVCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/7EAA217C"), libVCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Keystone Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatKeystoneDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_keystone) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveKeystoneMustSurviveFailed, true, false);
    TriggerEnable(gt_ObjectiveKeystoneMustSurviveComplete, false);
    libVCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libVCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/EA0332E3"), libVCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatKeystoneDestroyed_Init () {
    gt_DefeatKeystoneDestroyed = TriggerCreate("gt_DefeatKeystoneDestroyed_Func");
    TriggerAddEventTimePeriodic(gt_DefeatKeystoneDestroyed, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TransmissionClearAll();
    libNtve_gf_ChangeUnitDamage(gv_keystone, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    libNtve_gf_ChangeUnitDamage(gv_nerazimNexus, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    libNtve_gf_ChangeUnitDamage(gv_taldarimNexus, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    libNtve_gf_ChangeUnitDamage(gv_purifierNexus, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveKeystoneMustSurviveComplete, true, true);
    libVCMI_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (gv_achievement_UsedSpearofAdunAbilities == false)) {
        libVoiC_gf_CampaignAwardAchievement("Anniversary_PAiur06", gv_pLAYER_01_USER);
    }

    libVoiC_gf_CampaignAwardAchievement("PAiur06_1", gv_pLAYER_01_USER);
    if ((libLotv_gf_DifficultyValueInt2(0, 1, 1, 1) == 1) && (gv_alliedNexusesLost == 0)) {
        libVoiC_gf_CampaignAwardAchievement("PAiur06_3", gv_pLAYER_01_USER);
    }

    VictoryPanelAddTrackedStatistic("UnitsTotalCount");
    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    TextExpressionSetToken("Param/Expression/720A81E0", "A", IntToText(gv_armadaUnitsHitBySOA));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/07D8DB2B"), TextExpressionAssemble("Param/Expression/720A81E0"));
    TextExpressionSetToken("Param/Expression/F7A1EAD8", "A", IntToText(gv_alliedNexusesLost));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/17A7F50A"), TextExpressionAssemble("Param/Expression/F7A1EAD8"));
    libVCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    libVCMI_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stat - SoA Hits on Golden Armada
//--------------------------------------------------------------------------------------------------
bool gt_StatSoAHitsonGoldenArmada_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetCustomValue(EventUnit(), 0) != 9.0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_05_PROTOSS_ARMADA))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_05_PROTOSS_ARMADA, UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Interceptor"))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetCustomValue(EventUnit(), 0, 9.0);
    gv_armadaUnitsHitBySOA += 1;
    if ((gv_armadaUnitsHitBySOA >= 20)) {
        TriggerExecute(gt_AchievementSoAHitsonGoldenArmada, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatSoAHitsonGoldenArmada_Init () {
    gt_StatSoAHitsonGoldenArmada = TriggerCreate("gt_StatSoAHitsonGoldenArmada_Func");
    TriggerAddEventUnitDamaged(gt_StatSoAHitsonGoldenArmada, null, c_unitDamageTypeAny, c_unitDamageEither, "SOAOrbitalStrikeDamage");
    TriggerAddEventUnitDamaged(gt_StatSoAHitsonGoldenArmada, null, c_unitDamageTypeAny, c_unitDamageEither, "SOAThermalLanceDamage");
    TriggerAddEventUnitDamaged(gt_StatSoAHitsonGoldenArmada, null, c_unitDamageTypeAny, c_unitDamageEither, "SOAPurifierBeamDamage");
    TriggerAddEventUnitDamaged(gt_StatSoAHitsonGoldenArmada, null, c_unitDamageTypeAny, c_unitDamageEither, "SOAStrafeAttackDamage");
    TriggerAddEventUnitBehaviorChange(gt_StatSoAHitsonGoldenArmada, null, "SOAGravitonBomb", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(gt_StatSoAHitsonGoldenArmada, null, "SOAGravitonBombHeroicUnit", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(gt_StatSoAHitsonGoldenArmada, null, "SOATimeFreeze", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - SoA Hits on Golden Armada
//--------------------------------------------------------------------------------------------------
bool gt_AchievementSoAHitsonGoldenArmada_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVoiC_gf_CampaignAwardAchievement("PAiur06_2", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementSoAHitsonGoldenArmada_Init () {
    gt_AchievementSoAHitsonGoldenArmada = TriggerCreate("gt_AchievementSoAHitsonGoldenArmada_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - Victory without using Spear of Adun
//--------------------------------------------------------------------------------------------------
bool gt_AchievementVictorywithoutusingSpearofAdun_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "SoACaster"))) {
            return false;
        }

        if (!((EventUnitAbility() != AbilityCommand("SOARepairBeam", 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_achievement_UsedSpearofAdunAbilities = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementVictorywithoutusingSpearofAdun_Init () {
    gt_AchievementVictorywithoutusingSpearofAdun = TriggerCreate("gt_AchievementVictorywithoutusingSpearofAdun_Func");
    TriggerAddEventUnitAbility(gt_AchievementVictorywithoutusingSpearofAdun, null, null, c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mastery - Kill the Brutalisk
//--------------------------------------------------------------------------------------------------
bool gt_MasteryKilltheBrutalisk_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVoiC_gf_CampaignAwardAchievement("Mastery_Aiur06", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MasteryKilltheBrutalisk_Init () {
    gt_MasteryKilltheBrutalisk = TriggerCreate("gt_MasteryKilltheBrutalisk_Func");
    TriggerAddEventUnitDied(gt_MasteryKilltheBrutalisk, UnitRefFromVariable("gv_theBrutalisk"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Ready Q
//--------------------------------------------------------------------------------------------------
bool gt_TipReadyQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVCMI_gf_DisplayMissionTip();
    Wait(libVCMI_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipReadyQ_Init () {
    gt_TipReadyQ = TriggerCreate("gt_TipReadyQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Keystone Must Survive Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKeystoneMustSurviveCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateObjectiveCampaign("PAiur06Primary01");
    gv_objectiveDestroyZergBase2 = ObjectiveLastCreated();
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKeystoneMustSurviveCreate_Init () {
    gt_ObjectiveKeystoneMustSurviveCreate = TriggerCreate("gt_ObjectiveKeystoneMustSurviveCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Keystone Must Survive Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKeystoneMustSurviveComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveKeystoneMustSurviveCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PAiur06Primary01", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKeystoneMustSurviveComplete_Init () {
    gt_ObjectiveKeystoneMustSurviveComplete = TriggerCreate("gt_ObjectiveKeystoneMustSurviveComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Keystone Must Survive Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKeystoneMustSurviveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveKeystoneMustSurviveCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PAiur06Primary01", libVoiC_ge_MissionObjectiveState_Failed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_DefeatKeystoneDestroyed, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKeystoneMustSurviveFailed_Init () {
    gt_ObjectiveKeystoneMustSurviveFailed = TriggerCreate("gt_ObjectiveKeystoneMustSurviveFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoA01A6EAC_g;
    int autoA01A6EAC_u;
    unit autoA01A6EAC_var;
    unitgroup auto9367951B_g;
    int auto9367951B_u;
    unit auto9367951B_var;
    unitgroup auto79C680B1_g;
    int auto79C680B1_u;
    unit auto79C680B1_var;
    unitgroup auto6A52A88F_g;
    int auto6A52A88F_u;
    unit auto6A52A88F_var;
    unitgroup auto077E54EA_g;
    int auto077E54EA_u;
    unit auto077E54EA_var;
    unitgroup auto0E2E7914_g;
    int auto0E2E7914_u;
    unit auto0E2E7914_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, c_transitionDurationImmediate, true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    libNtve_gf_PauseUnit(UnitFromId(22), true);
    if ((libVoiC_gf_SpearofAdunAbilityIsEnabled("GPTier5Power1") == true)) {
        autoA01A6EAC_g = UnitGroup("Pylon", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoA01A6EAC_u = UnitGroupCount(autoA01A6EAC_g, c_unitCountAll);
        for (;; autoA01A6EAC_u -= 1) {
            autoA01A6EAC_var = UnitGroupUnitFromEnd(autoA01A6EAC_g, autoA01A6EAC_u);
            if (autoA01A6EAC_var == null) { break; }
            UnitBehaviorRemove(autoA01A6EAC_var, "MatrixOverload", 1);
        }
    }

    auto9367951B_g = UnitGroup(null, gv_pLAYER_08_NERAZIM, RegionCircle(PointFromId(293), 8.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9367951B_u = UnitGroupCount(auto9367951B_g, c_unitCountAll);
    for (;; auto9367951B_u -= 1) {
        auto9367951B_var = UnitGroupUnitFromEnd(auto9367951B_g, auto9367951B_u);
        if (auto9367951B_var == null) { break; }
        UnitGroupAdd(gv_cinematicHiddenUnits, auto9367951B_var);
        libNtve_gf_PauseUnit(auto9367951B_var, true);
        libNtve_gf_ShowHideUnit(auto9367951B_var, false);
        UnitCreate(1, UnitGetType(auto9367951B_var), c_unitCreateIgnorePlacement, UnitGetOwner(auto9367951B_var), UnitGetPosition(auto9367951B_var), UnitGetFacing(auto9367951B_var));
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitGroupAdd(gv_introNerazimUnits, UnitLastCreated());
        if ((UnitGetType(UnitLastCreated()) == "VorazunChampion")) {
            gv_introVorazun = UnitLastCreated();
        }

    }
    auto79C680B1_g = UnitGroup(null, gv_pLAYER_09_PURIFIER, RegionCircle(PointFromId(272), 8.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto79C680B1_u = UnitGroupCount(auto79C680B1_g, c_unitCountAll);
    for (;; auto79C680B1_u -= 1) {
        auto79C680B1_var = UnitGroupUnitFromEnd(auto79C680B1_g, auto79C680B1_u);
        if (auto79C680B1_var == null) { break; }
        UnitGroupAdd(gv_cinematicHiddenUnits, auto79C680B1_var);
        libNtve_gf_PauseUnit(auto79C680B1_var, true);
        libNtve_gf_ShowHideUnit(auto79C680B1_var, false);
        UnitCreate(1, UnitGetType(auto79C680B1_var), c_unitCreateIgnorePlacement, UnitGetOwner(auto79C680B1_var), UnitGetPosition(auto79C680B1_var), UnitGetFacing(auto79C680B1_var));
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitGroupAdd(gv_introPurifierUnits, UnitLastCreated());
        if ((UnitGetType(UnitLastCreated()) == "KaraxChampion")) {
            gv_introKarax = UnitLastCreated();
        }

    }
    auto6A52A88F_g = UnitGroup(null, gv_pLAYER_07_TALDARIM, RegionCircle(PointFromId(275), 8.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6A52A88F_u = UnitGroupCount(auto6A52A88F_g, c_unitCountAll);
    for (;; auto6A52A88F_u -= 1) {
        auto6A52A88F_var = UnitGroupUnitFromEnd(auto6A52A88F_g, auto6A52A88F_u);
        if (auto6A52A88F_var == null) { break; }
        UnitGroupAdd(gv_cinematicHiddenUnits, auto6A52A88F_var);
        libNtve_gf_PauseUnit(auto6A52A88F_var, true);
        libNtve_gf_ShowHideUnit(auto6A52A88F_var, false);
        UnitCreate(1, UnitGetType(auto6A52A88F_var), c_unitCreateIgnorePlacement, UnitGetOwner(auto6A52A88F_var), UnitGetPosition(auto6A52A88F_var), UnitGetFacing(auto6A52A88F_var));
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitGroupAdd(gv_introTaldarimUnits, UnitLastCreated());
        if ((UnitGetType(UnitLastCreated()) == "AlarakChampion")) {
            gv_introAlarak = UnitLastCreated();
        }

    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SuperWarpGate", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, Point(0.0, 0.0));
    gv_introSuperWarpGate = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, gv_introSuperWarpGate);
    libNtve_gf_ShowHideUnit(gv_introSuperWarpGate, false);
    UnitGroupAdd(gv_cinematicTempUnits, UnitFromId(1749));
    auto077E54EA_g = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(77), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto077E54EA_u = UnitGroupCount(auto077E54EA_g, c_unitCountAll);
    for (;; auto077E54EA_u -= 1) {
        auto077E54EA_var = UnitGroupUnitFromEnd(auto077E54EA_g, auto077E54EA_u);
        if (auto077E54EA_var == null) { break; }
        UnitGroupAdd(gv_introPrePlacedPlayerUnits, auto077E54EA_var);
        libNtve_gf_ShowHideUnit(auto077E54EA_var, false);
        libNtve_gf_PauseUnit(auto077E54EA_var, true);
    }
    auto0E2E7914_g = UnitGroup(null, 0, RegionFromId(78), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto0E2E7914_u = UnitGroupCount(auto0E2E7914_g, c_unitCountAll);
    for (;; auto0E2E7914_u -= 1) {
        auto0E2E7914_var = UnitGroupUnitFromEnd(auto0E2E7914_g, auto0E2E7914_u);
        if (auto0E2E7914_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto0E2E7914_var, false);
        libNtve_gf_PauseUnit(auto0E2E7914_var, true);
        UnitGroupAdd(gv_cinematicTempUnits, auto0E2E7914_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_iter;
    string lv_soundtrack;

    // Automatic Variable Declarations
    unitgroup autoA436463F_g;
    int autoA436463F_u;
    unit autoA436463F_var;
    unitgroup auto5D6E6D05_g;
    int auto5D6E6D05_u;
    unit auto5D6E6D05_var;
    unitgroup autoA3749FB8_g;
    int autoA3749FB8_u;
    unit autoA3749FB8_var;
    const int autoF762F12B_ae = 4;
    const int autoF762F12B_ai = 1;
    const int auto526998C0_ae = 2;
    const int auto526998C0_ai = 1;
    const int autoC2B6C56D_ae = 2;
    const int autoC2B6C56D_ai = 1;
    unitgroup auto0937284E_g;
    int auto0937284E_u;
    unit auto0937284E_var;
    unitgroup autoE3B05A02_g;
    int autoE3B05A02_u;
    unit autoE3B05A02_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_IntroMusic, true, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1731), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(490), SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Aiur06|Line00001", true), c_soundIndexAny)), -1, 10, true);
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionFromId(12), gv_pLAYER_01_USER);
    gv_introMinerals[0] = PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals);
    gv_introMinerals[1] = FixedToInt(UnitGetPropertyFixed(UnitFromId(104), c_unitPropResources, c_unitPropCurrent));
    gv_introMinerals[2] = FixedToInt(UnitGetPropertyFixed(UnitFromId(62), c_unitPropResources, c_unitPropCurrent));
    gv_introMinerals[3] = FixedToInt(UnitGetPropertyFixed(UnitFromId(34), c_unitPropResources, c_unitPropCurrent));
    gv_introMinerals[4] = FixedToInt(UnitGetPropertyFixed(UnitFromId(49), c_unitPropResources, c_unitPropCurrent));
    gv_introMinerals[5] = FixedToInt(UnitGetPropertyFixed(UnitFromId(1), c_unitPropResources, c_unitPropCurrent));
    gv_introMinerals[6] = FixedToInt(UnitGetPropertyFixed(UnitFromId(85), c_unitPropResources, c_unitPropCurrent));
    gv_introMinerals[7] = FixedToInt(UnitGetPropertyFixed(UnitFromId(422), c_unitPropResources, c_unitPropCurrent));
    gv_introMinerals[8] = FixedToInt(UnitGetPropertyFixed(UnitFromId(2), c_unitPropResources, c_unitPropCurrent));
    gv_introGas[0] = PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene);
    gv_introGas[1] = FixedToInt(UnitGetPropertyFixed(UnitFromId(12), c_unitPropResources, c_unitPropCurrent));
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    SoundPlayAtPointForPlayer(SoundLink("Event_PAiur06_KeystoneIntro", 0), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(UnitFromId(418)), 0.0, 100.0, 0.0);
    Wait(1.5, c_timeGame);
    Wait(0.5, c_timeGame);
    libVCMI_gf_SendTransmissionCampaign(gv_introKarax, "pMission_Aiur06|Line00001", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(310), 0.0, -1, 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(110), 4.0, -1, 10.0, true);
    autoA436463F_g = gv_introNerazimUnits;
    autoA436463F_u = UnitGroupCount(autoA436463F_g, c_unitCountAll);
    for (;; autoA436463F_u -= 1) {
        autoA436463F_var = UnitGroupUnitFromEnd(autoA436463F_g, autoA436463F_u);
        if (autoA436463F_var == null) { break; }
        UnitSetPosition(autoA436463F_var, PointWithOffsetPolar(UnitGetPosition(autoA436463F_var), 3.0, 315.0), false);
        UnitSetPropertyFixed(autoA436463F_var, c_unitPropMovementSpeed, 1.7);
        UnitIssueOrder(autoA436463F_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(autoA436463F_var), 4.0, 135.0)), c_orderQueueReplace);
    }
    libVCMI_gf_SendTransmissionCampaign(gv_introVorazun, "pMission_Aiur06|Line00059", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 0.0);
    auto5D6E6D05_g = gv_introPurifierUnits;
    auto5D6E6D05_u = UnitGroupCount(auto5D6E6D05_g, c_unitCountAll);
    for (;; auto5D6E6D05_u -= 1) {
        auto5D6E6D05_var = UnitGroupUnitFromEnd(auto5D6E6D05_g, auto5D6E6D05_u);
        if (auto5D6E6D05_var == null) { break; }
        UnitSetPosition(auto5D6E6D05_var, PointWithOffsetPolar(UnitGetPosition(auto5D6E6D05_var), 5.0, 135.0), false);
        UnitSetPropertyFixed(auto5D6E6D05_var, c_unitPropMovementSpeed, 1.7);
        UnitIssueOrder(auto5D6E6D05_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(auto5D6E6D05_var), 4.0, 315.0)), c_orderQueueReplace);
    }
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(209), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(312), 4.0, 100.0, 10.0, true);
    libVCMI_gf_SendTransmissionCampaign(gv_introKarax, "pMission_Aiur06|Line00060", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 0.0);
    autoA3749FB8_g = gv_introTaldarimUnits;
    autoA3749FB8_u = UnitGroupCount(autoA3749FB8_g, c_unitCountAll);
    for (;; autoA3749FB8_u -= 1) {
        autoA3749FB8_var = UnitGroupUnitFromEnd(autoA3749FB8_g, autoA3749FB8_u);
        if (autoA3749FB8_var == null) { break; }
        UnitSetPosition(autoA3749FB8_var, PointWithOffsetPolar(UnitGetPosition(autoA3749FB8_var), 2.0, 45.0), false);
        if ((UnitGetType(autoA3749FB8_var) != "AlarakChampion")) {
            UnitSetPropertyFixed(autoA3749FB8_var, c_unitPropMovementSpeed, 1.7);
        }

        UnitIssueOrder(autoA3749FB8_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(autoA3749FB8_var), 8.0, 225.0)), c_orderQueueReplace);
    }
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(157), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(319), 5.8, 100.0, 10.0, true);
    libVCMI_gf_SendTransmissionCampaign(gv_introAlarak, "pMission_Aiur06|Line00061", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(458), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(251), (SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Aiur06|Line00094", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Aiur06|Line00095", true), c_soundIndexAny))), -1, 10, true);
    SoundPlayAtPointForPlayer(SoundLink("Event_PAiur06_KeystoneIntro", 0), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(UnitFromId(418)), 0.0, 100.0, 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00094", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    lv_iter = 1;
    for ( ; ( (autoF762F12B_ai >= 0 && lv_iter <= autoF762F12B_ae) || (autoF762F12B_ai < 0 && lv_iter >= autoF762F12B_ae) ) ; lv_iter += autoF762F12B_ai ) {
        UnitIssueOrder(gv_introSuperWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointFromName(("Intro Zealot " + IntToString(lv_iter)))), c_orderQueueReplace);
        Wait(0.125, c_timeGame);
    }
    lv_iter = 1;
    for ( ; ( (auto526998C0_ai >= 0 && lv_iter <= auto526998C0_ae) || (auto526998C0_ai < 0 && lv_iter >= auto526998C0_ae) ) ; lv_iter += auto526998C0_ai ) {
        UnitIssueOrder(gv_introSuperWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointFromName(("Intro Stalker " + IntToString(lv_iter)))), c_orderQueueReplace);
        Wait(0.125, c_timeGame);
    }
    lv_iter = 1;
    for ( ; ( (autoC2B6C56D_ai >= 0 && lv_iter <= autoC2B6C56D_ae) || (autoC2B6C56D_ai < 0 && lv_iter >= autoC2B6C56D_ae) ) ; lv_iter += autoC2B6C56D_ai ) {
        UnitIssueOrder(gv_introSuperWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 2), PointFromName(("Intro Immortal " + IntToString(lv_iter)))), c_orderQueueReplace);
        Wait(0.125, c_timeGame);
    }
    TransmissionWait(TransmissionLastSent(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(gv_introKarax, "pMission_Aiur06|Line00095", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_StoryMode(PlayerGroupAll(), true);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00005", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_LeavePortraitVisibleAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_CampaignPlayCutscene2("Cutscenes\\Cutscene_MissionAiur06Intro.SC2Cutscene", true, true);
    libNtve_gf_StoryMode(PlayerGroupAll(), false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1748), 0.0, -1, 0.0, true);
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1733), (SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Aiur06|Line00143", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Aiur06|Line00124", true), c_soundIndexAny))), -1, 10.0, true);
    auto0937284E_g = gv_introWarpedInPlayerUnits;
    auto0937284E_u = UnitGroupCount(auto0937284E_g, c_unitCountAll);
    for (;; auto0937284E_u -= 1) {
        auto0937284E_var = UnitGroupUnitFromEnd(auto0937284E_g, auto0937284E_u);
        if (auto0937284E_var == null) { break; }
        UnitIssueOrder(auto0937284E_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(auto0937284E_var), 14.0, 45.0)), c_orderQueueReplace);
        UnitIssueOrder(auto0937284E_var, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(UnitGetPosition(auto0937284E_var), 12.0, 45.0)), c_orderQueueAddToEnd);
    }
    TransmissionWait(TransmissionLastSent(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00143", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    autoE3B05A02_g = gv_introWarpedInPlayerUnits;
    autoE3B05A02_u = UnitGroupCount(autoE3B05A02_g, c_unitCountAll);
    for (;; autoE3B05A02_u -= 1) {
        autoE3B05A02_var = UnitGroupUnitFromEnd(autoE3B05A02_g, autoE3B05A02_u);
        if (autoE3B05A02_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(autoE3B05A02_var, "AnimPlay StandVictory Stand,Victory");
    }
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00124", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 4.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(385), 4.0, -1, 10.0, true);
    Wait(4.0, c_timeGame);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto582C7F5D_g;
    int auto582C7F5D_u;
    unit auto582C7F5D_var;
    unitgroup autoF8EC7A0A_g;
    int autoF8EC7A0A_u;
    unit autoF8EC7A0A_var;
    unitgroup auto9D7B9CA7_g;
    int auto9D7B9CA7_u;
    unit auto9D7B9CA7_var;
    unitgroup autoE659AD67_g;
    int autoE659AD67_u;
    unit autoE659AD67_var;
    unitgroup auto1E5B383C_g;
    int auto1E5B383C_u;
    unit auto1E5B383C_var;
    unitgroup auto6D95DFAB_g;
    int auto6D95DFAB_u;
    unit auto6D95DFAB_var;
    unitgroup auto3BB9497E_g;
    int auto3BB9497E_u;
    unit auto3BB9497E_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_StopCinematicSounds();
    EnvironmentShow(c_environmentTerrain, true);
    EnvironmentShow(c_environmentWater, true);
    EnvironmentShow(c_environmentDoodads, true);
    GameSetBackground(c_backgroundFixed, "AiurSkybox", 100.0);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_AiurInfested_Quad", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    UnitRemove(UnitFromId(1749));
    auto582C7F5D_g = gv_cinematicTempUnits;
    auto582C7F5D_u = UnitGroupCount(auto582C7F5D_g, c_unitCountAll);
    for (;; auto582C7F5D_u -= 1) {
        auto582C7F5D_var = UnitGroupUnitFromEnd(auto582C7F5D_g, auto582C7F5D_u);
        if (auto582C7F5D_var == null) { break; }
        UnitRemove(auto582C7F5D_var);
    }
    Wait(0.1, c_timeGame);
    autoF8EC7A0A_g = gv_cinematicHiddenUnits;
    autoF8EC7A0A_u = UnitGroupCount(autoF8EC7A0A_g, c_unitCountAll);
    for (;; autoF8EC7A0A_u -= 1) {
        autoF8EC7A0A_var = UnitGroupUnitFromEnd(autoF8EC7A0A_g, autoF8EC7A0A_u);
        if (autoF8EC7A0A_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoF8EC7A0A_var, true);
        libNtve_gf_PauseUnit(autoF8EC7A0A_var, false);
    }
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    UnitSetPropertyFixed(UnitFromId(104), c_unitPropResources, gv_introMinerals[1]);
    UnitSetPropertyFixed(UnitFromId(62), c_unitPropResources, gv_introMinerals[2]);
    UnitSetPropertyFixed(UnitFromId(34), c_unitPropResources, gv_introMinerals[3]);
    UnitSetPropertyFixed(UnitFromId(49), c_unitPropResources, gv_introMinerals[4]);
    UnitSetPropertyFixed(UnitFromId(1), c_unitPropResources, gv_introMinerals[5]);
    UnitSetPropertyFixed(UnitFromId(85), c_unitPropResources, gv_introMinerals[6]);
    UnitSetPropertyFixed(UnitFromId(422), c_unitPropResources, gv_introMinerals[7]);
    UnitSetPropertyFixed(UnitFromId(2), c_unitPropResources, gv_introMinerals[8]);
    UnitSetPropertyFixed(UnitFromId(12), c_unitPropResources, gv_introGas[1]);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, gv_introMinerals[0]);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, gv_introGas[0]);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    libVCMI_gf_SetSpearofAdunEnergy(0.0, libVCMI_ge_SpearofAdunEnergyType_Percent);
    libNtve_gf_PauseUnit(UnitFromId(22), false);
    UnitSetPropertyFixed(UnitFromId(22), c_unitPropEnergyPercent, 0.0);
    if ((libVoiC_gf_SpearofAdunAbilityIsEnabled("GPTier5Power1") == true)) {
        auto9D7B9CA7_g = UnitGroup("Pylon", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto9D7B9CA7_u = UnitGroupCount(auto9D7B9CA7_g, c_unitCountAll);
        for (;; auto9D7B9CA7_u -= 1) {
            auto9D7B9CA7_var = UnitGroupUnitFromEnd(auto9D7B9CA7_g, auto9D7B9CA7_u);
            if (auto9D7B9CA7_var == null) { break; }
            UnitBehaviorAdd(auto9D7B9CA7_var, "MatrixOverload", auto9D7B9CA7_var, 1);
        }
    }

    if ((gv_cinematicCompleted == false)) {
        auto1E5B383C_g = gv_introPrePlacedPlayerUnits;
        auto1E5B383C_u = UnitGroupCount(auto1E5B383C_g, c_unitCountAll);
        for (;; auto1E5B383C_u -= 1) {
            auto1E5B383C_var = UnitGroupUnitFromEnd(auto1E5B383C_g, auto1E5B383C_u);
            if (auto1E5B383C_var == null) { break; }
            libNtve_gf_ShowHideUnit(auto1E5B383C_var, true);
            libNtve_gf_PauseUnit(auto1E5B383C_var, false);
        }
        if ((gv_introWarpedInPlayerUnits != UnitGroupEmpty())) {
            auto6D95DFAB_g = gv_introWarpedInPlayerUnits;
            auto6D95DFAB_u = UnitGroupCount(auto6D95DFAB_g, c_unitCountAll);
            for (;; auto6D95DFAB_u -= 1) {
                auto6D95DFAB_var = UnitGroupUnitFromEnd(auto6D95DFAB_g, auto6D95DFAB_u);
                if (auto6D95DFAB_var == null) { break; }
                UnitRemove(auto6D95DFAB_var);
            }
        }

    }
    else {
        autoE659AD67_g = gv_introPrePlacedPlayerUnits;
        autoE659AD67_u = UnitGroupCount(autoE659AD67_g, c_unitCountAll);
        for (;; autoE659AD67_u -= 1) {
            autoE659AD67_var = UnitGroupUnitFromEnd(autoE659AD67_g, autoE659AD67_u);
            if (autoE659AD67_var == null) { break; }
            UnitRemove(autoE659AD67_var);
        }
    }
    TriggerStop(gt_IntroMusic);
    TriggerEnable(gt_IntroCatchWarpedUnits, false);
    TriggerExecute(gt_StartAI, true, false);
    Wait(0.5, c_timeReal);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
        libVCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, true);
        auto3BB9497E_g = gv_introWarpedInPlayerUnits;
        auto3BB9497E_u = UnitGroupCount(auto3BB9497E_g, c_unitCountAll);
        for (;; auto3BB9497E_u -= 1) {
            auto3BB9497E_var = UnitGroupUnitFromEnd(auto3BB9497E_g, auto3BB9497E_u);
            if (auto3BB9497E_var == null) { break; }
            libNtve_gf_SendActorMessageToUnit(auto3BB9497E_var, "AnimClear StandVictory");
            if ((UnitGetType(auto3BB9497E_var) != libVoiC_gf_EnabledUnitTypeforArmyCategory("Immortal"))) {
                UnitIssueOrder(auto3BB9497E_var, OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_keystone)), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(auto3BB9497E_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(auto3BB9497E_var), 1.0, 225.0)), c_orderQueueReplace);
            }
        }
    }
    else {
        lv_fadeDuration = 1.0;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
        libVCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, false);
        libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(1733)), lv_fadeDuration);
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Catch Warped Units
//--------------------------------------------------------------------------------------------------
bool gt_IntroCatchWarpedUnits_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_TurnWarpedInUnit(EventUnitProgressUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCatchWarpedUnits_Init () {
    gt_IntroCatchWarpedUnits = TriggerCreate("gt_IntroCatchWarpedUnits_Func");
    TriggerAddEventUnitConstructProgress(gt_IntroCatchWarpedUnits, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Music
//--------------------------------------------------------------------------------------------------
bool gt_IntroMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    lv_soundtrack = "PAiur06_Music_Intro";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroMusic_Init () {
    gt_IntroMusic = TriggerCreate("gt_IntroMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    libVoiC_gf_PlayCinematic("Liberation", false);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_randomSpawnPoint;
    int lv_iter;

    // Automatic Variable Declarations
    unitgroup auto0105474F_g;
    int auto0105474F_u;
    unit auto0105474F_var;
    const int autoFCCE092D_ae = 4;
    const int autoFCCE092D_ai = 1;
    const int auto31C83641_ae = 3;
    const int auto31C83641_ai = 1;
    const int autoBFB2748D_ae = 4;
    const int autoBFB2748D_ai = 1;
    const int auto519066CB_ae = 4;
    const int auto519066CB_ai = 1;
    const int auto44905FFE_ae = 4;
    const int auto44905FFE_ai = 1;
    const int autoC799C311_ae = 4;
    const int autoC799C311_ai = 1;
    const int autoDC6FB2CD_ae = 4;
    const int autoDC6FB2CD_ai = 1;
    const int auto834E03B9_ae = 5;
    const int auto834E03B9_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, 1.0, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    auto0105474F_g = gv_cinematicHiddenUnits;
    auto0105474F_u = UnitGroupCount(auto0105474F_g, c_unitCountAll);
    for (;; auto0105474F_u -= 1) {
        auto0105474F_var = UnitGroupUnitFromEnd(auto0105474F_g, auto0105474F_u);
        if (auto0105474F_var == null) { break; }
        if ((auto0105474F_var != gv_keystone)) {
            UnitRemove(auto0105474F_var);
        }

    }
    UnitPauseAll(true);
    libNtve_gf_SendActorMessageToUnit(gv_keystone, "AnimClear SpellA");
    libNtve_gf_SendActorMessageToUnit(gv_keystone, "AnimPlay SpellB Stand,Work,B PlayForever");
    libNtve_gf_SendActorMessageToUnit(gv_keystone, "Signal PlaySoundB");
    libNtve_gf_CreateUnitsAtPoint2(1, "AlarakChampion", 0, gv_pLAYER_01_USER, PointFromId(2207));
    gv_victoryAlarak = UnitLastCreated();
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Zealot", 0, gv_pLAYER_05_PROTOSS_ARMADA, PointWithOffsetPolar(PointFromId(2207), 2.0, PointGetFacing(PointFromId(2207))));
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 0.0);
    UnitIssueOrder(gv_victoryAlarak, OrderTargetingUnit(AbilityCommand("attack", 0), UnitLastCreated()), c_orderQueueReplace);
    lv_iter = 1;
    for ( ; ( (autoFCCE092D_ai >= 0 && lv_iter <= autoFCCE092D_ae) || (autoFCCE092D_ai < 0 && lv_iter >= autoFCCE092D_ae) ) ; lv_iter += autoFCCE092D_ai ) {
        lv_randomSpawnPoint = RegionRandomPoint(RegionFromId(20));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "DarkTemplarTaldarim", 0, gv_pLAYER_07_TALDARIM, lv_randomSpawnPoint);
        UnitBehaviorAdd(UnitLastCreated(), "SuppressCloak", UnitLastCreated(), 1);
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_randomSpawnPoint);
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_randomSpawnPoint);
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "ArtanisVoid", 0, gv_pLAYER_01_USER, PointFromId(2205));
    gv_victoryArtanis = UnitLastCreated();
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Zealot", 0, gv_pLAYER_05_PROTOSS_ARMADA, PointWithOffsetPolar(PointFromId(2205), 2.0, PointGetFacing(PointFromId(2205))));
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 0.0);
    UnitIssueOrder(gv_victoryArtanis, OrderTargetingUnit(AbilityCommand("attack", 0), UnitLastCreated()), c_orderQueueReplace);
    lv_iter = 1;
    for ( ; ( (auto31C83641_ai >= 0 && lv_iter <= auto31C83641_ae) || (auto31C83641_ai < 0 && lv_iter >= auto31C83641_ae) ) ; lv_iter += auto31C83641_ai ) {
        lv_randomSpawnPoint = RegionRandomPoint(RegionFromId(22));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZealotAiur", 0, gv_pLAYER_01_USER, lv_randomSpawnPoint);
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitAbilityEnable(UnitLastCreated(), "VoidZealotWhirlwind", false);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_randomSpawnPoint);
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_randomSpawnPoint);
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "FenixChampion", 0, gv_pLAYER_01_USER, PointFromId(2209));
    gv_victoryFenix = UnitLastCreated();
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Zealot", 0, gv_pLAYER_05_PROTOSS_ARMADA, PointWithOffsetPolar(PointFromId(2209), 2.0, PointGetFacing(PointFromId(2209))));
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 0.0);
    UnitIssueOrder(gv_victoryFenix, OrderTargetingUnit(AbilityCommand("attack", 0), UnitLastCreated()), c_orderQueueReplace);
    lv_iter = 1;
    for ( ; ( (autoBFB2748D_ai >= 0 && lv_iter <= autoBFB2748D_ae) || (autoBFB2748D_ai < 0 && lv_iter >= autoBFB2748D_ae) ) ; lv_iter += autoBFB2748D_ai ) {
        lv_randomSpawnPoint = RegionRandomPoint(RegionFromId(28));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZealotPurifier", 0, gv_pLAYER_09_PURIFIER, lv_randomSpawnPoint);
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_randomSpawnPoint);
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_randomSpawnPoint);
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "KaraxChampion", 0, gv_pLAYER_01_USER, PointFromId(2208));
    gv_victoryFenix = UnitLastCreated();
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    lv_iter = 1;
    for ( ; ( (auto519066CB_ai >= 0 && lv_iter <= auto519066CB_ae) || (auto519066CB_ai < 0 && lv_iter >= auto519066CB_ae) ) ; lv_iter += auto519066CB_ai ) {
        lv_randomSpawnPoint = RegionRandomPoint(RegionFromId(19));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Adept", 0, gv_pLAYER_09_PURIFIER, lv_randomSpawnPoint);
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_randomSpawnPoint);
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_randomSpawnPoint);
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "VorazunChampion", 0, gv_pLAYER_01_USER, PointFromId(2206));
    gv_victoryVorazun = UnitLastCreated();
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitBehaviorAdd(gv_victoryVorazun, "SuppressCloak", gv_victoryVorazun, 1);
    UnitAbilityEnable(gv_victoryVorazun, "VorazunShadowDash", false);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Zealot", 0, gv_pLAYER_05_PROTOSS_ARMADA, PointWithOffsetPolar(PointFromId(2206), 2.0, PointGetFacing(PointFromId(2206))));
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 0.0);
    UnitIssueOrder(gv_victoryVorazun, OrderTargetingUnit(AbilityCommand("attack", 0), UnitLastCreated()), c_orderQueueReplace);
    lv_iter = 1;
    for ( ; ( (auto44905FFE_ai >= 0 && lv_iter <= auto44905FFE_ae) || (auto44905FFE_ai < 0 && lv_iter >= auto44905FFE_ae) ) ; lv_iter += auto44905FFE_ai ) {
        lv_randomSpawnPoint = RegionRandomPoint(RegionFromId(16));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZealotShakuras", 0, gv_pLAYER_08_NERAZIM, lv_randomSpawnPoint);
        UnitAbilityEnable(UnitLastCreated(), "ShadowCharge", false);
        UnitAbilityEnable(UnitLastCreated(), "ShadowChargeStun", false);
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_randomSpawnPoint);
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_randomSpawnPoint);
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    }
    lv_iter = 1;
    for ( ; ( (autoC799C311_ai >= 0 && lv_iter <= autoC799C311_ae) || (autoC799C311_ai < 0 && lv_iter >= autoC799C311_ae) ) ; lv_iter += autoC799C311_ai ) {
        lv_randomSpawnPoint = RegionRandomPoint(RegionFromId(21));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZealotAiur", 0, gv_pLAYER_01_USER, lv_randomSpawnPoint);
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitAbilityEnable(UnitLastCreated(), "VoidZealotWhirlwind", false);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_randomSpawnPoint);
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_randomSpawnPoint);
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    }
    lv_iter = 1;
    for ( ; ( (autoDC6FB2CD_ai >= 0 && lv_iter <= autoDC6FB2CD_ae) || (autoDC6FB2CD_ai < 0 && lv_iter >= autoDC6FB2CD_ae) ) ; lv_iter += autoDC6FB2CD_ai ) {
        lv_randomSpawnPoint = RegionRandomPoint(RegionFromId(23));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZealotAiur", 0, gv_pLAYER_01_USER, lv_randomSpawnPoint);
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitAbilityEnable(UnitLastCreated(), "VoidZealotWhirlwind", false);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_randomSpawnPoint);
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_randomSpawnPoint);
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    }
    lv_iter = 1;
    for ( ; ( (auto834E03B9_ai >= 0 && lv_iter <= auto834E03B9_ae) || (auto834E03B9_ai < 0 && lv_iter >= auto834E03B9_ae) ) ; lv_iter += auto834E03B9_ai ) {
        lv_randomSpawnPoint = RegionRandomPoint(RegionFromId(51));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZealotAiur", 0, gv_pLAYER_01_USER, lv_randomSpawnPoint);
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitAbilityEnable(UnitLastCreated(), "VoidZealotWhirlwind", false);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_randomSpawnPoint);
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, gv_pLAYER_05_PROTOSS_ARMADA, lv_randomSpawnPoint);
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(415), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(391), 8.0, -1, 10, true);
    TriggerExecute(gt_VictoryMusic, true, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libVCMI_gf_SendTransmissionCampaign(gv_victoryFenix, "pMission_Aiur06|Line00185", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SendActorMessageToUnit(gv_keystone, "AnimClear SpellA");
    libNtve_gf_SendActorMessageToUnit(gv_keystone, "AnimClear SpellB");
    libNtve_gf_SendActorMessageToUnit(gv_keystone, "AnimPlay SpellC Stand,Work,C PlayForever,NonLooping");
    Wait(3.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(753), 6.0, -1, 10, true);
    libVCMI_gf_SendTransmissionCampaign(gv_victoryArtanis, "pMission_Aiur06|Line00152", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_StopCinematicSounds();
    TriggerStop(gt_VictoryMusic);
    libVCMI_gf_CinematicModeCampaign(false, c_transitionDurationImmediate, false);
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Music
//--------------------------------------------------------------------------------------------------
bool gt_VictoryMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    lv_soundtrack = "PAiur06_Music_Outro";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryMusic_Init () {
    gt_VictoryMusic = TriggerCreate("gt_VictoryMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04MusicSound_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_PerformanceInit_Init();
    gt_PerformancePauseAll_Init();
    gt_PerformanceUnpauseSE_Init();
    gt_PerformanceUnpauseNW_Init();
    gt_PerformanceUnpauseSW_Init();
    gt_PerformanceRepauseAfterSoA_Init();
    gt_PerformanceHandleTimeStopApply_Init();
    gt_StartGameQ_Init();
    gt_CreepExpansion1TimeBased_Init();
    gt_CreepExpansion2AlliedNexusFalls_Init();
    gt_KeystoneStatus_Init();
    gt_KeystoneCharging_Init();
    gt_KeystoneQuarterSave_Init();
    gt_KeystoneHalfQ_Init();
    gt_KeystoneAlmostDoneQ_Init();
    gt_BuildingDeathHistoryUpdate_Init();
    gt_VorazunRetreatTransmissionQ_Init();
    gt_KaraxRetreatTransmissionQ_Init();
    gt_AlarakRetreatTransmissionQ_Init();
    gt_VorazunNexusTransmission01Q_Init();
    gt_KaraxNexusTransmission01Q_Init();
    gt_AlarakNexusTransmission01Q_Init();
    gt_AlarakTripwireTransmission01Q_Init();
    gt_VorazunTripwireTransmission01Q_Init();
    gt_PurifierTripwireTransmission01Q_Init();
    gt_DisableSpearPower1_Init();
    gt_DisableSpearPower2_Init();
    gt_DisableSpearPower3_Init();
    gt_DisableSpearPower4_Init();
    gt_SpearAttackTransmission01Q_Init();
    gt_StartAI_Init();
    gt_AIUpgradesCasualNormal_Init();
    gt_AIUpgradesHardBrutal_Init();
    gt_TurnOnBulliesOverTime_Init();
    gt_TurnOnBulllies01_Init();
    gt_TurnOnBulllies02_Init();
    gt_TurnOnBulllies03_Init();
    gt_TurnOnBulllies04_Init();
    gt_ZergBaseRebuild_Init();
    gt_AlliedMindControlCancelSuicide_Init();
    gt_OverseerDespawn_Init();
    gt_ProtossChampionRevived_Init();
    gt_VorazunInitialAttack01Q_Init();
    gt_KaraxInitialAttack01Q_Init();
    gt_AlarakInitialAttack01Q_Init();
    gt_StreamingAttack01Q_Init();
    gt_StreamingAttack02Q_Init();
    gt_StreamingAttack0304Q_Init();
    gt_StreamingAttack050607Q_Init();
    gt_StreamingWave01TAL_Init();
    gt_StreamingWave02TAL_Init();
    gt_StreamingWave03NER_Init();
    gt_StreamingWave04PUR_Init();
    gt_StreamingWave05PUR_Init();
    gt_StreamingWave06NER_Init();
    gt_StreamingWave07TAL_Init();
    gt_ProtossStreamingWavesQ_Init();
    gt_StreamingWave08NER_Init();
    gt_StreamingWave09TAL_Init();
    gt_StreamingWave10PUR_Init();
    gt_ArmadaAttack1Mid_Init();
    gt_ArmadaAttack2TopMid_Init();
    gt_ArmadaAttack3BotMid_Init();
    gt_ArmadaAttack4Bot_Init();
    gt_ArmadaAttack5Mid_Init();
    gt_ArmadaAttack6BotMid_Init();
    gt_ArmadaAttack7Mid_Init();
    gt_ArmadaAttack8TopMid_Init();
    gt_ArmadaAttack9Top_Init();
    gt_ArmadaAttack10Mid_Init();
    gt_ArmadaAttack11Top_Init();
    gt_ArmadaAttack12Mid_Init();
    gt_ArmadaAttack13Bot_Init();
    gt_ArmadaTransmissionWave1Q_Init();
    gt_ArmadaTransmissionWave2Q_Init();
    gt_ArmadaTransmissionWave6Q_Init();
    gt_ArmadaTransmissionWave9Q_Init();
    gt_AmonTransmission1Q_Init();
    gt_AmonTransmission2Q_Init();
    gt_AmonTransmission3Q_Init();
    gt_SuperWarpGateSpawns_Init();
    gt_DefeatBaseDead_Init();
    gt_DefeatKeystoneDestroyed_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_StatSoAHitsonGoldenArmada_Init();
    gt_AchievementSoAHitsonGoldenArmada_Init();
    gt_AchievementVictorywithoutusingSpearofAdun_Init();
    gt_MasteryKilltheBrutalisk_Init();
    gt_TipReadyQ_Init();
    gt_ObjectiveKeystoneMustSurviveCreate_Init();
    gt_ObjectiveKeystoneMustSurviveComplete_Init();
    gt_ObjectiveKeystoneMustSurviveFailed_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_IntroCatchWarpedUnits_Init();
    gt_IntroMusic_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
    gt_VictoryMusic_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}
