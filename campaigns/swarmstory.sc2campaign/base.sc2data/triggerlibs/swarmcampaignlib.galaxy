include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"

include "TriggerLibs/SwarmCampaignLib_h"

//--------------------------------------------------------------------------------------------------
// Library: Campaign (Swarm)
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libSwaC_InitLibraries () {
    libNtve_InitVariables();
    libLbty_InitVariables();
    libHots_InitVariables();
}

// Variable Initialization
bool libSwaC_InitVariables_completed = false;

void libSwaC_InitVariables () {
    int init_i;
    int init_j;
    int init_k;

    if (libSwaC_InitVariables_completed) {
        return;
    }

    libSwaC_InitVariables_completed = true;

    for (init_i = 0; init_i <= 50; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            libSwaC_gv_zS_EventParameter[init_i][init_j] = "";
        }
    }
    libSwaC_gv_zS_WorldCoverDlg = c_invalidDialogId;
    for (init_i = 0; init_i <= libSwaC_gv_zS_RePing_MAX; init_i += 1) {
        libSwaC_gv_zS_RePingArray[init_i] = c_invalidPingId;
    }
    libSwaC_gv_zS_SendTransmissionCampaignPortrait = c_invalidPortraitId;
    libSwaC_gv_zS_SendTransmissionCampaignPlayingTick = 3;
    libSwaC_gv_zS_SendTransmissionCampaignChatBubbleOn = true;
    libSwaC_gv__TP_DropPod_Units = UnitGroupEmpty();
    libSwaC_gv__FadeDialog = c_invalidDialogId;
    libSwaC_gv__FadeImage = c_invalidDialogControlId;
    libSwaC_gv_zS_PlanetPortrait = c_invalidPortraitId;
    libSwaC_gv_zS_ObjectivePanel = c_invalidDialogControlId;
    libSwaC_gv_zS_ErrorPanel = c_invalidDialogControlId;
    libSwaC_gv_zS_MissionUIContainer = c_invalidDialogControlId;
    libSwaC_gv_zS_NeedOverlordEnabled = true;
    libSwaC_gv_zS_NeedOverlordFoodRequired = 1;
    libSwaC_gv_zS_KerriganLowHPUIDlg = c_invalidDialogId;
    libSwaC_gv_zS_KerriganLowHPUIImage = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 20; init_i += 1) {
        libSwaC_gv_zS_MissionTipType[init_i] = libNtve_ge_TipType_NormalTip;
    }
    libSwaC_gv_zS_MissionHelpButton = c_invalidDialogControlId;
    libSwaC_gv_zS_MissionHelpButtonTipPanel = c_invalidDialogControlId;
    libSwaC_gv_zS_ArmyButton = c_invalidDialogControlId;
    libSwaC_gv_zS_ArmyButtonTipPanel = c_invalidDialogControlId;
    libSwaC_gv_zS_VictoryStatDlg = c_invalidDialogId;
    libSwaC_gv_zS_ProgressBarPanel = c_invalidDialogControlId;
    libSwaC_gv_zS_ProgressBarLabelTitle = c_invalidDialogControlId;
    libSwaC_gv_zS_ProgressBarLabelBarLeft = c_invalidDialogControlId;
    libSwaC_gv_zS_ProgressBarLabelBarRight = c_invalidDialogControlId;
    libSwaC_gv_zS_ProgressBarImageBar = c_invalidDialogControlId;
    libSwaC_gv_zS_ProgressBarMax = 100;
    libSwaC_gv_zSC_ProgressBarWidth = 401;
    libSwaC_gv_zSC_ProgressBarHeight = 27;
    libSwaC_gv_zS_BB_Race = libSwaC_ge_BossBarRaceSwarmCampaign_Terran;
    libSwaC_gv_zS_BB_Panel = c_invalidDialogControlId;
    libSwaC_gv_zS_BB_PortraitImage = c_invalidDialogControlId;
    libSwaC_gv_zS_BB_TitleLabel = c_invalidDialogControlId;
    libSwaC_gv_zS_BB_HpLabel = c_invalidDialogControlId;
    libSwaC_gv_zS_BB_HpFullImage = c_invalidDialogControlId;
    libSwaC_gv_zS_BB_HpCurrentImage = c_invalidDialogControlId;
    libSwaC_gv_zS_BB_BorderImage = c_invalidDialogControlId;
    libSwaC_gv_zS_BB_HpBackground = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libSwaC_gv_zS_SwarmHeroUIType[init_i] = libSwaC_ge_CampaignHeroes_None;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libSwaC_gv_zS_SwarmHeroUIPositionX[init_i] = 20;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libSwaC_gv_zS_SwarmHeroUIPositionY[init_i] = 30;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libSwaC_gv_zS_SwarmHeroUIShowLevel[init_i] = true;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libSwaC_gv_zS_SwarmHeroUIPanel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libSwaC_gv_zS_SwarmHeroUIDialogBorderImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libSwaC_gv_zS_SwarmHeroUIDialogBorderImageNoEnergy[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libSwaC_gv_zS_SwarmHeroUIDialogIconImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libSwaC_gv_zS_SwarmHeroUIDialogCooldownImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libSwaC_gv_zS_SwarmHeroUIDialogDamageTakenImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libSwaC_gv_zS_SwarmHeroUIDialogDamageTakenLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libSwaC_gv_zS_SwarmHeroUIDialogNameLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libSwaC_gv_zS_SwarmHeroUIDialogLevelLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libSwaC_gv_zS_SwarmHeroUIDialogHealthBarImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libSwaC_gv_zS_SwarmHeroUIDialogHealthBarBackground[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libSwaC_gv_zS_SwarmHeroUIDialogEnergyBarImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libSwaC_gv_zS_SwarmHeroUIDialogEnergyBarBackground[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libSwaC_gv_zS_SwarmHeroUIDialogHealthLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libSwaC_gv_zS_SwarmHeroUIDialogEnergyLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libSwaC_gv_zS_SwarmHeroUIDialogButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libSwaC_gv_zS_SwarmHeroUIDialogLevelBox[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libSwaC_gv_zS_SwarmHeroUIDialogLevelupPortrait[init_i] = c_invalidDialogControlId;
    }
    libSwaC_gv_zS_SwarmHeroUIKerriganRevivable = true;
    libSwaC_gv_zSX_CamStatsMisisonOrder = "";
    for (init_i = 0; init_i <= 40; init_i += 1) {
        for (init_j = 0; init_j <= 5; init_j += 1) {
            for (init_k = 0; init_k <= libSwaC_gv_zSC_CamStatsTechMaxCount; init_k += 1) {
                libSwaC_gv_zSX_CamStatsArmyUpgrades[init_i][init_j][init_k] = "";
            }
        }
    }
    for (init_i = 0; init_i <= 40; init_i += 1) {
        for (init_j = 0; init_j <= 5; init_j += 1) {
            for (init_k = 0; init_k <= libSwaC_gv_zSC_CamStatsTechMaxCount; init_k += 1) {
                libSwaC_gv_zSX_CamStatsEvolutions[init_i][init_j][init_k] = "";
            }
        }
    }
    for (init_i = 0; init_i <= 40; init_i += 1) {
        for (init_j = 0; init_j <= 5; init_j += 1) {
            for (init_k = 0; init_k <= libSwaC_gv_zSC_CamStatsTechMaxCount; init_k += 1) {
                libSwaC_gv_zSX_CamStatsKerrigan[init_i][init_j][init_k] = "";
            }
        }
    }
    libSwaC_gv_zSX_CamStatsWeaponArmorUpgrades = "";
    libSwaC_gv_zS_AchievementDebugEnabled = true;
    libSwaC_gv_zSX_CampaignDifficulty = 2;
    libSwaC_gv_zS_CurrentCampaignCutscene = c_cutsceneNone;
    libSwaC_gv_zS_CampaignCutsceneDialog = c_invalidDialogId;
    libSwaC_gv_zS_MorphedUnitsLabel = c_invalidDialogControlId;
    libSwaC_gv_zS_MorphedUnitsImage = c_invalidDialogControlId;
    libSwaC_gv_zSC_ANIMLIGHTING = "ANIM_LIGHTING";
    libSwaC_gv_zSC_ANIMRAWRING = "ANIM_RAWRING";
    libSwaC_gv_zS_ArmyCustomCurrentUI = libSwaC_ge_ArmyUIScreen_None;
    for (init_i = 0; init_i <= 10; init_i += 1) {
        libSwaC_gv_zS_ArmyCustomEggCalloutFlash[init_i] = c_invalidDialogControlId;
    }
    libSwaC_gv_zS_ArmyEvoCalloutFlash = c_invalidDialogControlId;
    libSwaC_gv_zS_ArmyEvoCalloutSubtitle = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 10; init_i += 1) {
        libSwaC_gv_zS_ArmyCustomEggLightScenes[init_i] = c_cutsceneNone;
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        libSwaC_gv_zS_ArmyCustomEggLightStates[init_i] = "Inactive";
    }
    libSwaC_gv_zS_ArmyCustomEggRoomSetLightScene = c_cutsceneNone;
    libSwaC_gv_zS_ArmyCustomEggRoomEvoLightScene = c_cutsceneNone;
    libSwaC_gv_zS_ArmyCustomEggUnits = UnitGroupEmpty();
    libSwaC_gv_zS_ArmyCustomEggRoomDialog = c_invalidDialogId;
    libSwaC_gv_zS_ArmyCustomEggRoomPanel = c_invalidDialogControlId;
    libSwaC_gv_zS_ArmyCustomEggRoomBackButton = c_invalidDialogControlId;
    libSwaC_gv_zS_ArmyCustomEggRoomEvolutionMissionButton = c_invalidDialogControlId;
    libSwaC_gv_zS_ArmyCustomEggRoomEvolutionButtonHighlight = c_invalidDialogControlId;
    libSwaC_gv_zS_ArmyEvoPlayBirth = true;
    libSwaC_gv_zS_ArmyCustomUpgradeInfoFrame = c_invalidDialogControlId;
    libSwaC_gv_zS_ArmyCustomUpgradeDialog = c_invalidDialogId;
    libSwaC_gv_zS_ArmyCustomUpgradePanel = c_invalidDialogControlId;
    libSwaC_gv_zS_ArmyCustomUpgradeBackButton = c_invalidDialogControlId;
    libSwaC_gv_zS_ArmyCustomUpgradeTitleLabel = c_invalidDialogControlId;
    libSwaC_gv_zS_ArmyCustomUpgradeTitlePanel = c_invalidDialogControlId;
    libSwaC_gv_zS_ArmyCustomUpgradeTitlePanel3 = c_invalidDialogControlId;
    libSwaC_gv_zS_ArmyCustomSelectedUpgradeMovie = c_invalidDialogControlId;
    libSwaC_gv_zS_ArmyCustomSelectedUpgradeNameLabel = c_invalidDialogControlId;
    libSwaC_gv_zS_ArmyCustomSelectedUpgradeDescriptionLabel = c_invalidDialogControlId;
    libSwaC_gv_zS_ArmyCustomUpgradeSelectUpgradeLabel = c_invalidDialogControlId;
    libSwaC_gv_zS_ArmyCustomUpgradeUnitNameLabel = c_invalidDialogControlId;
    libSwaC_gv_zS_ArmyCustomUpgradeUnitStrainInfoIcon = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        libSwaC_gv_zS_ArmyCustomUpgradeIcons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        libSwaC_gv_zS_ArmyCustomUpgradeButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        libSwaC_gv_zS_ArmyCustomUpgradeButtons2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        libSwaC_gv_zS_ArmyCustomUpgradeNameLabels[init_i] = c_invalidDialogControlId;
    }
    libSwaC_gv_zS_ArmyCustomUpgradeSelectedDescriptionResultsLabel = c_invalidDialogControlId;
    libSwaC_gv_zS_ArmyCustomUpgradeSelectedDescriptionResultsTitleLabel = c_invalidDialogControlId;
    libSwaC_gv_zS_ArmyCustomEvolutionDialog = c_invalidDialogId;
    libSwaC_gv_zS_ArmyCustomEvolutionPanel = c_invalidDialogControlId;
    libSwaC_gv_zS_ArmyCustomEvolutionInfoFrame = c_invalidDialogControlId;
    libSwaC_gv_zS_ArmyCustomEvolutionAcceptButton1 = c_invalidDialogControlId;
    libSwaC_gv_zS_ArmyCustomEvolutionAcceptButton2 = c_invalidDialogControlId;
    libSwaC_gv_zS_ArmyCustomEvolutionBackButton = c_invalidDialogControlId;
    libSwaC_gv_zS_ArmyCustomEvolutionTitleLabel5 = c_invalidDialogControlId;
    libSwaC_gv_zS_ArmyCustomEvolutionTitleLabel6 = c_invalidDialogControlId;
    libSwaC_gv_zS_ArmyCustomEvolutionTitleLabel2 = c_invalidDialogControlId;
    libSwaC_gv_zS_ArmyCustomEvolutionTitleLabel3 = c_invalidDialogControlId;
    libSwaC_gv_zS_ArmyCustomEvolutionTitleLabel4 = c_invalidDialogControlId;
    libSwaC_gv_zS_ArmyCustomEvolutionSelectedUnitMovie = c_invalidDialogControlId;
    libSwaC_gv_zS_ArmyCustomEvolutionSelectedUnitNameLabel = c_invalidDialogControlId;
    libSwaC_gv_zS_ArmyCustomEvolutionSelectedUnitDescriptionLabel = c_invalidDialogControlId;
    libSwaC_gv_zS_ArmyCustomEvolutionSelectedUnitDescriptionResultsLabel = c_invalidDialogControlId;
    libSwaC_gv_zS_ArmyCustomEvolutionSelectedUnitDescriptionResultsTitleLabel = c_invalidDialogControlId;
    libSwaC_gv_zS_ArmyCustomEvolutionSetLightScene = c_cutsceneNone;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libSwaC_gv_zS_ArmyCustomEvolutionUnitLightScene[init_i] = c_cutsceneNone;
    }
    libSwaC_gv_zS_ArmyCustomEvolutionFanfareCutscene = c_cutsceneNone;
    libSwaC_gv_zS_ArmyCustomEvolutionFanfareText = c_invalidDialogControlId;
    libSwaC_gv_center = Point(32.0, 32.0);
    libSwaC_gv_zS_ArmyCustomMissionDialog = c_invalidDialogId;
    libSwaC_gv_zS_ArmyCustomMissionPanel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        libSwaC_gv_zS_ArmyCustomMissionUnits[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        libSwaC_gv_zS_ArmyCustomMissionUnitFrames[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        libSwaC_gv_zS_ArmyCustomMissionUnitFrameLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        libSwaC_gv_zS_ArmyCustomMissionUnitFrameBackground[init_i] = c_invalidDialogControlId;
    }
    libSwaC_gv_zS_ArmyCustomMissionCloseButton = c_invalidDialogControlId;
    libSwaC_gv_zS_ArmyCustomMissionPlayButton = c_invalidDialogControlId;
    libSwaC_gv_zS_ArmyCustomMissionTitleLabel = c_invalidDialogControlId;
    libSwaC_gv_zS_ArmyCustomMissionObjectiveTextLabel = c_invalidDialogControlId;
    libSwaC_gv_zS_ArmyCustomMissionBonusTextLabel = c_invalidDialogControlId;
    libSwaC_gv_zS_ArmyCustomMissionContactPortrait = c_invalidDialogControlId;
    libSwaC_gv_zS_ArmyCustomMissionContactPlayButton = c_invalidDialogControlId;
    libSwaC_gv_zS_ArmyCustomMissionContactStopButton = c_invalidDialogControlId;
    libSwaC_gv_zS_ArmyCustomMissionSubtitleAnchor = c_invalidDialogControlId;
    libSwaC_gv_zS_ArmyCustomArchivesDialog = c_invalidDialogId;
    libSwaC_gv_zS_ArmyCustomArchivesPanel = c_invalidDialogControlId;
    libSwaC_gv_zS_ArmyCustomArchivesOKButton = c_invalidDialogControlId;
    libSwaC_gv_zS_ArmyCustomArchivesCancelButton = c_invalidDialogControlId;
    libSwaC_gv_zS_ArmyCustomArchivesSectionBG = c_invalidDialogControlId;
    libSwaC_gv_zS_ArmyCustomArchivesUpgradeBorder = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libSwaC_gv_zSC_ArmyCustomCategoryCount; init_i += 1) {
        for (init_j = 0; init_j <= 3; init_j += 1) {
            libSwaC_gv_zS_ArmyCustomArchivesUpgradeCheck[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= libSwaC_gv_zSC_ArmyCustomCategoryCount; init_i += 1) {
        for (init_j = 0; init_j <= 3; init_j += 1) {
            libSwaC_gv_zS_ArmyCustomArchivesUpgradeLabel[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= libSwaC_gv_zSC_ArmyCustomCategoryCount; init_i += 1) {
        libSwaC_gv_zS_ArmyCustomArchivesUpgradeDivider[init_i] = c_invalidDialogControlId;
    }
    libSwaC_gv_zS_ArmyCustomArchivesEvolutionBorder = c_invalidDialogControlId;
    libSwaC_gv_zS_ArmyCustomArchivesEvolutionBorderTitle = c_invalidDialogControlId;
    libSwaC_gv_zS_ArmyCustomArchivesEvolutionBorderBG = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libSwaC_gv_zSC_ArmyCustomCategoryCount; init_i += 1) {
        for (init_j = 0; init_j <= 3; init_j += 1) {
            libSwaC_gv_zS_ArmyCustomArchivesEvolutionCheck[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= libSwaC_gv_zSC_ArmyCustomCategoryCount; init_i += 1) {
        for (init_j = 0; init_j <= 3; init_j += 1) {
            libSwaC_gv_zS_ArmyCustomArchivesEvolutionLabel[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= libSwaC_gv_zSC_ArmyCustomCategoryCount; init_i += 1) {
        libSwaC_gv_zS_ArmyCustomArchivesEvolutionDivider[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libSwaC_gv_zSC_ArmyCustomCategoryCount; init_i += 1) {
        libSwaC_gv_zS_ArmyCustomArchivesUnitLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libSwaC_gv_zSC_ArmyCustomCategoryCount; init_i += 1) {
        libSwaC_gv_zS_ArmyCustomArchivesUnitPanel[init_i] = c_invalidDialogControlId;
    }
    libSwaC_gv_zS_ReviveCooldownTimeKerrigan = 60.0;
    libSwaC_gv_zS_ReviveCooldownTimeStukov = 60.0;
    libSwaC_gv_zS_ReviveCooldownTimeDehaka = 30.0;
    libSwaC_gv_zS_KerriganCustomWindow = c_invalidDialogId;
    libSwaC_gv_zS_KerriganCustomWindowBG = c_invalidDialogControlId;
    libSwaC_gv_zS_KerriganUITierCloseButton = c_invalidDialogControlId;
    libSwaC_gv_zS_KerriganUITierSubTitleAnchor = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libSwaC_gv_zSC_KerriganAbilityTiers; init_i += 1) {
        for (init_j = 0; init_j <= libSwaC_gv_zSC_KerriganAbilityTierItems; init_j += 1) {
            libSwaC_gv_zS_KerriganUITierButtons[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= libSwaC_gv_zSC_KerriganAbilityTiers; init_i += 1) {
        for (init_j = 0; init_j <= libSwaC_gv_zSC_KerriganAbilityTierItems; init_j += 1) {
            libSwaC_gv_zS_KerriganUITierButtons2[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= libSwaC_gv_zSC_KerriganAbilityTiers; init_i += 1) {
        for (init_j = 0; init_j <= libSwaC_gv_zSC_KerriganAbilityTierItems; init_j += 1) {
            libSwaC_gv_zS_KerriganUITierButtonIcons[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= libSwaC_gv_zSC_KerriganAbilityTiers; init_i += 1) {
        for (init_j = 0; init_j <= libSwaC_gv_zSC_KerriganAbilityTierItems; init_j += 1) {
            libSwaC_gv_zS_KerriganUITierButtonLabel[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    libSwaC_gv_zS_KerriganUITierTemplate = c_invalidDialogControlId;
    libSwaC_gv_zS_KerriganUITierTemplate2 = c_invalidDialogControlId;
    libSwaC_gv_zS_KerriganUITierTemplate3 = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 5; init_i += 1) {
        libSwaC_gv_zS_KerriganUITierAbilityFrame[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        libSwaC_gv_zS_KerriganUITierAbilityFrame2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        libSwaC_gv_zS_KerriganUITierAbilityFrame3[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        libSwaC_gv_zS_KerriganUITierAbilityFrame4[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        libSwaC_gv_zS_KerriganUITierAbilityFrameLabel[init_i] = c_invalidDialogControlId;
    }
    libSwaC_gv_zS_KerriganUITierPowerLevelLabel = c_invalidDialogControlId;
    libSwaC_gv_zS_KerriganUITierPowerBar = c_invalidDialogControlId;
    libSwaC_gv_zS_KerriganUITierPowerBar2 = c_invalidDialogControlId;
    libSwaC_gv_zS_KerriganUITierPowerBar3 = c_invalidDialogControlId;
    libSwaC_gv_zS_KerriganUITierHeroStatHealthLabel = c_invalidDialogControlId;
    libSwaC_gv_zS_KerriganUITierHeroStatEnergyLabel = c_invalidDialogControlId;
    libSwaC_gv_zS_KerriganUITierHeroStatArmorLabel = c_invalidDialogControlId;
    libSwaC_gv_zS_KerriganUITierHeroStatDamageLabel = c_invalidDialogControlId;
    libSwaC_gv_zS_KerriganUITierHeroStatHealthValue = c_invalidDialogControlId;
    libSwaC_gv_zS_KerriganUITierHeroStatEnergyValue = c_invalidDialogControlId;
    libSwaC_gv_zS_KerriganUITierHeroStatArmorValue = c_invalidDialogControlId;
    libSwaC_gv_zS_KerriganUITierHeroStatDamageValue = c_invalidDialogControlId;
    libSwaC_gv_zS_KerriganUITierLevelUpFlash = c_invalidDialogControlId;
    libSwaC_gv_zS_KerriganCheatXP = 1;
    libSwaC_gv_zS_KerriganLevel = 1;
    libSwaC_gv_zS_KerriganActualLevel = 1;
    libSwaC_gv_zS_KerriganPing = c_invalidPingId;
    libSwaC_gv_zS_KerriganPhase = libSwaC_ge_KerriganPhase_KerriganPhaseGhost;
    libSwaC_gv_zS_KerriganLevelLabel = c_invalidDialogControlId;
    libSwaC_gv_zS_ArchiveBankName = "ZArchive";
    libSwaC_gv_zS_CampaignBankName = "ZCampaign";
    libSwaC_gv_zS_VSDialog = c_invalidDialogId;
    libSwaC_gv_zS_VSPanel = c_invalidDialogControlId;
    libSwaC_gv_zS_VSMainPanel = c_invalidDialogControlId;
    libSwaC_gv_zS_VSBackgroundImage = c_invalidDialogControlId;
    libSwaC_gv_zS_VSLabelMissionTitle = c_invalidDialogControlId;
    libSwaC_gv_zS_VSLabelTime = c_invalidDialogControlId;
    libSwaC_gv_zS_VSBtnContinue = c_invalidDialogControlId;
    libSwaC_gv_zS_VSBtnPlayAgain = c_invalidDialogControlId;
    libSwaC_gv_zS_VSRestartPanel = c_invalidDialogControlId;
    libSwaC_gv_zS_VSRestartDifficultyPulldown = c_invalidDialogControlId;
    libSwaC_gv_zS_VSRestartRestartButton = c_invalidDialogControlId;
    libSwaC_gv_zS_VSRestartCancelButton = c_invalidDialogControlId;
    libSwaC_gv_zS_VSBackgroundCover = c_invalidDialogControlId;
    libSwaC_gv_zS_VSRewardBonusLevelPanel = c_invalidDialogControlId;
    libSwaC_gv_zS_VSRewardBonusLevelTextLabel = c_invalidDialogControlId;
    libSwaC_gv_zS_VSRewardLevelPanel = c_invalidDialogControlId;
    libSwaC_gv_zS_VSRewardLevelTextLabel = c_invalidDialogControlId;
    libSwaC_gv_zS_VSRewardLevelPanel2 = c_invalidDialogControlId;
    libSwaC_gv_zS_VSRewardLevelTextLabel2 = c_invalidDialogControlId;
    libSwaC_gv_zS_VSRewardLevelPanel3 = c_invalidDialogControlId;
    libSwaC_gv_zS_VSRewardLevelTextLabel3 = c_invalidDialogControlId;
    libSwaC_gv_zS_VSRewardLevelTextLabel4 = c_invalidDialogControlId;
    libSwaC_gv_zS_VSAchievementTitle = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        libSwaC_gv_zS_VSAchievementTitle2[init_i] = c_invalidDialogControlId;
    }
    libSwaC_gv_zS_DebugProgressDialog = c_invalidDialogId;
    libSwaC_gv_zS_DebugProgressButtonOK = c_invalidDialogControlId;
    libSwaC_gv_zS_DebugProgressButtonCancel = c_invalidDialogControlId;
    libSwaC_gv_zS_DebugProgressButtonReset = c_invalidDialogControlId;
    libSwaC_gv_zS_DebugProgressLabelInfo = c_invalidDialogControlId;
    libSwaC_gv_zS_DebugProgressLabelExpeditionReq = c_invalidDialogControlId;
    libSwaC_gv_zS_DebugProgressLabelCharReq = c_invalidDialogControlId;
    libSwaC_gv_zS_DebugProgressLabelPurifierReq = c_invalidDialogControlId;
    libSwaC_gv_zS_DebugProgressLabelHybridReq = c_invalidDialogControlId;
    libSwaC_gv_zS_DebugProgressLabelZerusReq = c_invalidDialogControlId;
    libSwaC_gv_zS_DebugProgressLabelValerianReq = c_invalidDialogControlId;
    libSwaC_gv_zS_DebugProgressLabelKohalReq = c_invalidDialogControlId;
    libSwaC_gv_zS_DebugStoryTechDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 20; init_i += 1) {
        libSwaC_gv_zS_DebugStoryTechArmyCategoryCheck[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 20; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            libSwaC_gv_zS_DebugStoryTechArmyUnitCheck[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 20; init_i += 1) {
        libSwaC_gv_zS_DebugStoryTechArmyUpgradeButtons[init_i] = c_invalidDialogControlId;
    }
    libSwaC_gv_zS_DebugStoryTechOK = c_invalidDialogControlId;
    libSwaC_gv_zS_DebugStoryTechCancel = c_invalidDialogControlId;
    libSwaC_gv_zS_DebugStoryTechUpgradeDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 10; init_i += 1) {
        libSwaC_gv_zS_DebugStoryTechUpgradeDlgUpgrades[init_i] = c_invalidDialogControlId;
    }
    libSwaC_gv_zS_DebugStoryTechUpgradeDlgOK = c_invalidDialogControlId;
    libSwaC_gv_zS_DebugStoryTechUpgradeDlgCancel = c_invalidDialogControlId;
    libSwaC_gv_zS_DebugTechArmyCustomDialog = c_invalidDialogId;
    libSwaC_gv_zS_DebugTechArmyCustomResetButton = c_invalidDialogControlId;
    libSwaC_gv_zS_DebugKerriganDialog = c_invalidDialogId;
    libSwaC_gv_zS_DebugKerriganLevel = c_invalidDialogControlId;
    libSwaC_gv_zS_DebugKerriganLevelPlusButton = c_invalidDialogControlId;
    libSwaC_gv_zS_DebugKerriganLevelMinusButton = c_invalidDialogControlId;
    libSwaC_gv_zS_DebugKerriganLevelMaxButton = c_invalidDialogControlId;
    libSwaC_gv_zS_CampaignProgressButtonParent = c_invalidDialogId;
    libSwaC_gv_zS_CampaignProgressButton = c_invalidDialogControlId;
    libSwaC_gv_zS_CampaignProgressTechButton = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 5; init_i += 1) {
        libSwaC_gv_zS_DebugCutscenes[init_i] = c_cutsceneNone;
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        libSwaC_gv_zS_DebugCutsceneNames[init_i] = "";
    }
    libSwaC_gv_zS_DebugWatchBookmark = "";
    libSwaC_gv_zS_DebugCutsceneCin = true;
}

// Presets
// Functions
text libSwaC_gf_FormatTimeCampaign (int lp_second) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_second < 3600)) {
        return TextTimeFormat(StringExternal("Param/Value/lib_SwaC_2015A005"), lp_second);
    }
    else {
        return TextTimeFormat(StringExternal("Param/Value/lib_SwaC_BB62DA99"), lp_second);
    }
}

string libSwaC_gf_ZS_StoryDataTableName (int lp_type, string lp_name) {
    // Automatic Variable Declarations
    // Implementation
    return ("SS_" + IntToString((lp_type)) + libSwaC_gv_zS_GameUIDataTableConnector + lp_name);
}

void libSwaC_gf_ZS_StoreDataUIIDIntoDataTable (int lp_type, string lp_dataID, int lp_uIItemID) {
    // Variable Declarations
    string lv_name;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_name = "";

    // Implementation
    lv_name = libSwaC_gf_ZS_StoryDataTableName(lp_type, ("D" + lp_dataID));
    DataTableSetInt(true, lv_name, lp_uIItemID);
    lv_name = libSwaC_gf_ZS_StoryDataTableName(lp_type, ("U" + IntToString(lp_uIItemID)));
    DataTableSetString(true, lv_name, lp_dataID);
}

int libSwaC_gf_ZS_GetUIIDFromDataID (int lp_type, string lp_dataID) {
    // Variable Declarations
    string lv_name;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_name = "";

    // Implementation
    lv_name = libSwaC_gf_ZS_StoryDataTableName(lp_type, ("D" + lp_dataID));
    return DataTableGetInt(true, lv_name);
}

string libSwaC_gf_ZS_GetDataIDFromUIID (int lp_type, int lp_uIItemID) {
    // Variable Declarations
    string lv_name;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_name = "";

    // Implementation
    lv_name = libSwaC_gf_ZS_StoryDataTableName(lp_type, ("U" + IntToString(lp_uIItemID)));
    return DataTableGetString(true, lv_name);
}

string libSwaC_gf_ZS_CatalogGetFieldArrayValue (int lp_catalog, string lp_entry, string lp_field, int lp_index, int lp_player) {
    // Variable Declarations
    string lv_fieldPath;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_fieldPath = "";

    // Implementation
    lv_fieldPath = (lp_field + "[" + IntToString((lp_index - 1)) + "]");
    return CatalogFieldValueGet(lp_catalog, lp_entry, lv_fieldPath, lp_player);
}

void libSwaC_gf_ClearAnimationwithblendtime (string lp_identifier, unit lp_unit, fixed lp_blendTime) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SendActorMessageToUnit(lp_unit, libNtve_gf_AnimClear(lp_identifier, lp_blendTime));
}

void libSwaC_gf_DispatchStoryEvent (int lp_event, string lp_param1, string lp_param2, bool lp_waitOption) {
    // Automatic Variable Declarations
    // Implementation
    if ((libSwaC_gv_zS_EventCallback[(lp_event)] != null)) {
        libSwaC_gv_zS_EventParameter[(lp_event)][1] = lp_param1;
        libSwaC_gv_zS_EventParameter[(lp_event)][2] = lp_param2;
        libSwaC_gv_zS_EventIsRunning = true;
        TriggerExecute(libSwaC_gv_zS_EventCallback[(lp_event)], true, lp_waitOption);
        libSwaC_gv_zS_EventIsRunning = false;
    }

}

void libSwaC_gf_RegisterStoryEvent (int lp_event, trigger lp_callback) {
    // Automatic Variable Declarations
    // Implementation
    libSwaC_gv_zS_EventCallback[(lp_event)] = lp_callback;
}

string libSwaC_gf_StoryEventParameter (int lp_event, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_index < 1) || (lp_index > 2))) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_SwaC_19C132DD"), true);
        return "<Error>";
    }

    return libSwaC_gv_zS_EventParameter[(lp_event)][lp_index];
}

void libSwaC_gf_ShowHideWorldCover (bool lp_showHide, fixed lp_transparency) {
    // Automatic Variable Declarations
    // Implementation
    if ((libSwaC_gv_zS_WorldCoverDlg == c_invalidDialogId)) {
        if ((lp_showHide == true)) {
            DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
            libSwaC_gv_zS_WorldCoverDlg = DialogLastCreated();
            DialogSetFullscreen(DialogLastCreated(), true);
            DialogSetImageVisible(DialogLastCreated(), false);
            DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
            libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
            DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\white32.dds", PlayerGroupAll());
            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 0.00, 0.00), PlayerGroupAll());
        }
        else {
            return ;
        }
    }

    if ((lp_showHide == true)) {
        DialogSetTransparency(libSwaC_gv_zS_WorldCoverDlg, lp_transparency);
    }

    DialogSetVisible(libSwaC_gv_zS_WorldCoverDlg, PlayerGroupAll(), lp_showHide);
}

void libSwaC_gf_ZS_SwarmCampaignMissionInit () {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    int auto32E424C2_val;
    unitgroup autoE66D2854_g;
    int autoE66D2854_u;

    // Variable Initialization

    // Implementation
    if ((libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindStory) == true)) {
        return ;
    }

    libSwaC_gv_zS_CombatTimer = TimerCreate();
    TimerStart(libSwaC_gv_zS_CombatTimer, 86400.0, false, c_timeGame);
    UnitEventSetNullVariableInvalid(true);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer");
    libSwaC_gv_zS_MissionUIContainer = DialogControlLastCreated();
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTipAlertPanel, false);
    auto32E424C2_val = PlayerDifficulty(1);
    if (auto32E424C2_val == 4) {
        GameSetSpeedValueMinimum(c_gameSpeedFaster);
    }
    else if (auto32E424C2_val == 3) {
        GameSetSpeedValueMinimum(c_gameSpeedFast);
    }
    else if (auto32E424C2_val == 2) {
        GameSetSpeedValueMinimum(c_gameSpeedSlow);
    }
    else if (auto32E424C2_val == 1) {
        GameSetSpeedValueMinimum(c_gameSpeedSlow);
    }
    else {
    }
    libSwaC_gf_ZS_InitFeaturedZergStructureTypes();
    if ((libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindUpgrade) == false)) {
        UISetGameMenuItemVisible(PlayerGroupSingle(1), c_gameMenuDialogRestartDifficultyPulldown, true);
    }

    libSwaC_gf_ZS_ApplyKerriganZergColor();
    libSwaC_gf_SetZerglingRespawnPrimarytoclosestHatcheryLairHive(PlayerStartLocation(1));
    autoE66D2854_g = UnitGroup(null, 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoE66D2854_u = UnitGroupCount(autoE66D2854_g, c_unitCountAll);
    for (;; autoE66D2854_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(autoE66D2854_g, autoE66D2854_u);
        if (lv_indexUnit == null) { break; }
        UnitSetPropertyFixed(lv_indexUnit, c_unitPropEnergyPercent, 100.0);
    }
    if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1) && (libSwaC_gf_MissionStatusCheck("ZChar3", libSwaC_ge_MissionStatus_Completed) == false) && (libSwaC_gf_MissionStatusCheck("ZExpedition3", libSwaC_ge_MissionStatus_Completed) == false)) {
        TriggerExecute(libSwaC_gt_ZS_PlayerNeedOverlord, true, false);
    }

    TriggerExecute(libSwaC_gt_ZS_CampaignUnit, true, false);
    TriggerExecute(libSwaC_gt_ZS_BaseUnderAttackInit, true, false);
    TriggerExecute(libSwaC_gt_ZS_ArmyButtonMissionInit, true, false);
    if ((libHots_gf_DifficultyValueInt2(1, 0, 0) == 1)) {
        CatalogFieldValueSet(c_gameCatalogAbil, "RallyHatchery", "SmartPriority", 1, IntToString(0));
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/ObjectivePanel");
    libSwaC_gv_zS_ObjectivePanel = DialogControlLastCreated();
    libSwaC_gf_ZS_UpdateObjectivePanelMask();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/ErrorDisplay");
    libSwaC_gv_zS_ErrorPanel = DialogControlLastCreated();
    libSwaC_gf_ZS_UpdateErrorPanelMask();
    DialogControlHookupStandard(c_triggerControlTypeFlash, "UIContainer/ConsoleUIContainer/HelpTipEffects");
    libSwaC_gv_zS_MissionHelpButtonTipPanel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/MenuBar/HelpButton");
    libSwaC_gv_zS_MissionHelpButton = DialogControlLastCreated();
    libSwaC_gf_DifficultySetting(PlayerDifficulty(1));
    if ((libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindMission) == true)) {
        TriggerEnable(libSwaC_gt_ZS_CampaignStatsUnitCreated, true);
        TriggerEnable(libSwaC_gt_ZS_CampaignStatsWeaponArmorUpgrades, true);
    }

}

trigger auto_libSwaC_gf_AddRemoveObjectiveRePing_Trigger = null;
int auto_libSwaC_gf_AddRemoveObjectiveRePing_lp_ping;
bool auto_libSwaC_gf_AddRemoveObjectiveRePing_lp_addRemove;
fixed auto_libSwaC_gf_AddRemoveObjectiveRePing_lp_wait;
fixed auto_libSwaC_gf_AddRemoveObjectiveRePing_lp_interval;

void libSwaC_gf_AddRemoveObjectiveRePing (int lp_ping, bool lp_addRemove, fixed lp_wait, fixed lp_interval) {
    auto_libSwaC_gf_AddRemoveObjectiveRePing_lp_ping = lp_ping;
    auto_libSwaC_gf_AddRemoveObjectiveRePing_lp_addRemove = lp_addRemove;
    auto_libSwaC_gf_AddRemoveObjectiveRePing_lp_wait = lp_wait;
    auto_libSwaC_gf_AddRemoveObjectiveRePing_lp_interval = lp_interval;

    if (auto_libSwaC_gf_AddRemoveObjectiveRePing_Trigger == null) {
        auto_libSwaC_gf_AddRemoveObjectiveRePing_Trigger = TriggerCreate("auto_libSwaC_gf_AddRemoveObjectiveRePing_TriggerFunc");
    }

    TriggerExecute(auto_libSwaC_gf_AddRemoveObjectiveRePing_Trigger, false, false);
}

bool auto_libSwaC_gf_AddRemoveObjectiveRePing_TriggerFunc (bool testConds, bool runActions) {
    int lp_ping = auto_libSwaC_gf_AddRemoveObjectiveRePing_lp_ping;
    bool lp_addRemove = auto_libSwaC_gf_AddRemoveObjectiveRePing_lp_addRemove;
    fixed lp_wait = auto_libSwaC_gf_AddRemoveObjectiveRePing_lp_wait;
    fixed lp_interval = auto_libSwaC_gf_AddRemoveObjectiveRePing_lp_interval;

    // Automatic Variable Declarations
    bool auto25C55E13_val;
    int autoBBBCBC10_ae;
    int autoBBBCBC10_var;

    // Implementation
    auto25C55E13_val = lp_addRemove;
    if (auto25C55E13_val == true) {
        if ((libSwaC_gv_zS_RePingCount >= libSwaC_gv_zS_RePing_MAX)) {
            return true;
        }

        libSwaC_gv_zS_RePingInterval = lp_interval;
        TriggerExecute(libSwaC_gt_ZS_ObjectiveRePingController, true, false);
        Wait(lp_wait, c_timeGame);
        libSwaC_gf_ObjectiveRePing(lp_ping);
        libSwaC_gv_zS_RePingArray[libSwaC_gv_zS_RePingCount] = lp_ping;
        libSwaC_gv_zS_RePingCount += 1;
    }
    else if (auto25C55E13_val == false) {
        autoBBBCBC10_ae = (libSwaC_gv_zS_RePing_MAX - 1);
        autoBBBCBC10_var = 0;
        for ( ; autoBBBCBC10_var <= autoBBBCBC10_ae; autoBBBCBC10_var += 1 ) {
            if ((libSwaC_gv_zS_RePingArray[autoBBBCBC10_var] == lp_ping)) {
                libSwaC_gv_zS_RePingArray[autoBBBCBC10_var] = c_invalidPingId;
                return true;
            }

        }
    }
    else {
    }
    return true;
}

void libSwaC_gf_ObjectiveRePing (int lp_ping) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_ping != c_invalidPingId)) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", PingGetPosition(lp_ping), PingGetColor(lp_ping), 0.6, 270.0);
        PingSetScale(PingLastCreated(), 3.0);
        SoundPlay(SoundLink("UI_BriefingUnitSelect", -1), PlayerGroupAll(), 100.0, 0.0);
    }

}

void libSwaC_gf_DisplayCampaignMessage (playergroup lp_toPlayerGroup, int lp_messageType, text lp_message, int lp_formatOrNot) {
    // Automatic Variable Declarations
    int auto4C3F9166_val;

    // Implementation
    if ((lp_formatOrNot == libSwaC_ge_CampaignMessageFormatNotFormat_FormatMessage)) {
        auto4C3F9166_val = lp_messageType;
        if (auto4C3F9166_val == libSwaC_ge_CampaignMessageType_Hint) {
            TextExpressionSetToken("Param/Expression/lib_SwaC_05E157D1", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_SwaC_05E157D1"));
            SoundPlay(SoundLink("UI_TerranHint", 0), lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto4C3F9166_val == libSwaC_ge_CampaignMessageType_SimpleHint) {
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, lp_message);
            SoundPlay(SoundLink("UI_TerranHint", 0), lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto4C3F9166_val == libSwaC_ge_CampaignMessageType_Secret) {
            TextExpressionSetToken("Param/Expression/lib_SwaC_ED480A7B", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_SwaC_ED480A7B"));
            SoundPlay(SoundLink("TUISecret", 0), lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto4C3F9166_val == libSwaC_ge_CampaignMessageType_NewUnitAcquired) {
            TextExpressionSetToken("Param/Expression/lib_SwaC_A67804BB", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_SwaC_A67804BB"));
            SoundPlay(SoundLink("UI_TerranNewUnitAcquired", 0), lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto4C3F9166_val == libSwaC_ge_CampaignMessageType_NewUnitAvailable) {
            TextExpressionSetToken("Param/Expression/lib_SwaC_F1AA9791", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_SwaC_F1AA9791"));
            SoundPlay(SoundLink("UI_TerranNewUnitAvailable", 0), lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto4C3F9166_val == libSwaC_ge_CampaignMessageType_NewTechAvailable) {
            TextExpressionSetToken("Param/Expression/lib_SwaC_36788E6C", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_SwaC_36788E6C"));
            SoundPlay(SoundLink("UI_TerranNewTechAvailable", 0), lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto4C3F9166_val == libSwaC_ge_CampaignMessageType_NewUnitAvailable2) {
            TextExpressionSetToken("Param/Expression/lib_SwaC_A269CF22", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_SwaC_A269CF22"));
            SoundPlay(SoundLink("UI_TerranNewTechAvailable", 0), lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto4C3F9166_val == libSwaC_ge_CampaignMessageType_Warning) {
            TextExpressionSetToken("Param/Expression/lib_SwaC_E5BD385E", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_SwaC_E5BD385E"));
            SoundPlay(SoundLink("UI_ZergWarning", 0), lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto4C3F9166_val == libSwaC_ge_CampaignMessageType_MissionFailed) {
            TextExpressionSetToken("Param/Expression/lib_SwaC_D04E5B32", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_SwaC_D04E5B32"));
            SoundPlay(SoundLink("UI_TerranMissionFailed", 1), lp_toPlayerGroup, 100.0, 0.0);
        }
        else {
        }
    }
    else {
        UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, lp_message);
    }
}

void libSwaC_gf_SendTransmissionCampaign (unit lp_unit, string lp_conversationLine, int lp_durationType, fixed lp_duration, bool lp_waitUntilDone, int lp_keepPortraitVisible, int lp_cueSoundOption) {
    // Variable Declarations
    soundlink lv_sound;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);

    // Implementation
    lv_sound = SoundLink(ConversationDataGetSound(lp_conversationLine, true), c_soundIndexAny);
    if ((lv_sound == null)) {
        return ;
    }

    libSwaC_gf_ZS_SendTransmissionCampaignInternal(false, lp_unit, null, lv_sound, null, null, lp_durationType, lp_duration, lp_waitUntilDone, lp_keepPortraitVisible, lp_cueSoundOption, CatalogFieldValueGet(c_gameCatalogSound, ConversationDataGetSound(lp_conversationLine, true), "AssetArray[" + IntToString(0) + "].PortraitActor", c_playerAny));
}

void libSwaC_gf_TurnTransmissionOptionsOnOffCampaign (int lp_option, bool lp_onOff) {
    // Automatic Variable Declarations
    int autoE475B4E1_val;

    // Implementation
    autoE475B4E1_val = lp_option;
    if (autoE475B4E1_val == libSwaC_ge_CampaignTransmissionOptions_ChatBubble) {
        libSwaC_gv_zS_SendTransmissionCampaignChatBubbleOn = lp_onOff;
    }
    else {
    }
}

void libSwaC_gf_ZS_SendTransmissionCampaignInternal (bool lp_isPlaceHolder, unit lp_unit, string lp_model, soundlink lp_sound, text lp_speaker, text lp_message, int lp_durationType, fixed lp_duration, bool lp_waitUntilDone, int lp_keepPortraitVisible, int lp_cueSoundOption, string lp_portraitActor) {
    // Variable Declarations
    int lv_portrait;
    transmissionsource lv_source;
    int lv_localIndex;
    unit lv_oldSpeaker;
    trigger lv_oldTrigger;
    actor lv_talkBubble;
    actor lv_talkRing;
    int lv_ping;
    bool lv_flashOption;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_portrait = c_invalidPortraitId;
    lv_source = TransmissionSource();
    lv_ping = c_invalidPingId;
    lv_flashOption = true;

    // Implementation
    if ((lp_sound == null)) {
        return ;
    }

    libSwaC_gv_zS_SendTransmissionCampaignIndex += 1;
    lv_localIndex = libSwaC_gv_zS_SendTransmissionCampaignIndex;
    lv_oldSpeaker = libSwaC_gv_zS_SendTransmissionCampaignSpeaker;
    libSwaC_gv_zS_SendTransmissionCampaignSpeaker = lp_unit;
    lv_oldTrigger = libSwaC_gv_zS_SendTransmissionCampaignTrigger;
    libSwaC_gv_zS_SendTransmissionCampaignTrigger = TriggerGetCurrent();
    if ((lp_keepPortraitVisible != libSwaC_ge_CampaignTransmissionPortraitOptioins_DontShowPortrait) && ((lp_model != null) || ((lp_model == null) && (SoundPortraitModel(lp_sound) != null)) || ((lp_isPlaceHolder == true) && (lp_unit != null)))) {
        if ((libNtve_gf_PlayerInCinematicMode(1) == false) && (libNtve_gf_PlayerInStoryMode(1) == false)) {
            lv_portrait = libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft);
        }
        else {
            lv_portrait = libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_BottomLeft);
        }
    }
    else {
        lv_portrait = c_invalidPortraitId;
    }
    if (((lp_cueSoundOption == libSwaC_ge_CampaignTransmissionCueSoundOptions_PlayCueSound) || ((lp_cueSoundOption == libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior) && (libNtve_gf_PlayerInCinematicMode(1) == false) && (lv_portrait != c_invalidPortraitId) && (PortraitVisible(libSwaC_gv_zS_SendTransmissionCampaignPortrait, 1) == false)))) {
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    }

    libSwaC_gv_zS_SendTransmissionCampaignPortrait = lv_portrait;
    if ((libSwaC_gv_zS_SendTransmissionCampaignPortrait != c_invalidPortraitId)) {
        PortraitSetVisible(libSwaC_gv_zS_SendTransmissionCampaignPortrait, PlayerGroupAll(), true, false);
        libSwaC_gf_ZS_UpdateErrorPanelMaskSingle();
    }

    libSwaC_gv_zS_SendTransmissionCampaignPlayingTick = 3;
    if ((lp_unit == null)) {
        if ((lv_portrait == c_invalidPortraitId)) {
            lv_source = TransmissionSource();
        }
        else {
            if ((lp_model == null)) {
                lv_source = TransmissionSourceFromModel(null);
            }
            else {
                lv_source = TransmissionSourceFromModel(lp_model);
            }
        }
    }
    else {
        if ((libNtve_gf_PlayerInCinematicMode(1) == true)) {
            lv_flashOption = false;
        }
        else {
            lv_flashOption = true;
        }
        if ((lp_isPlaceHolder == false)) {
            lv_source = TransmissionSourceFromUnit(lp_unit, lv_flashOption, false, "Talk");
        }
        else {
            if ((lp_model == null)) {
                if ((UnitGetOwner(EventUnit()) == 1)) {
                    lv_source = TransmissionSourceFromUnit(lp_unit, lv_flashOption, false, "Talk");
                }

            }
            else {
                lv_source = TransmissionSourceFromModel(lp_model);
            }
            lv_source = TransmissionSourceFromModel(lp_model);
        }
    }
    if ((lp_unit != null) && (lp_unit != lv_oldSpeaker) && (UnitIsAlive(lp_unit) == true)) {
        if ((libSwaC_gv_zS_SendTransmissionCampaignChatBubbleOn == true)) {
            if ((libSwaC_gf_CurrentMap() == "ZLab1") && (UnitGetType(lp_unit) == "ValerianLab")) {
                ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "AttachModelOffset ModelAdditionHarness TalkIconBubble {Overhead 0} 0.000000,0.000000,0.300000");
            }
            else if (((UnitGetType(lp_unit) == "K5Kerrigan") || (UnitGetType(lp_unit) == "KerriganGhostLabUnarmed") || (UnitGetType(lp_unit) == "KerriganGhostLab") || (UnitGetType(lp_unit) == "RaynorLab") || (UnitGetType(lp_unit) == "ValerianLab") || (UnitGetType(lp_unit) == "Nova") || (UnitGetType(lp_unit) == "InfestedStukov") || (UnitGetType(lp_unit) == "Marine") || (UnitGetType(lp_unit) == "WarPig") || (UnitGetType(lp_unit) == "MengskMarine") || (UnitGetType(lp_unit) == "Medic") || (UnitGetType(lp_unit) == "Firebat") || (UnitGetType(lp_unit) == "Marauder")) && (libNtve_gf_PlayerInCinematicMode(1) == true)) {
                ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "AttachModelOffset ModelAdditionHarness TalkIconBubble {Overhead 0} 0.000000,0.000000,0.500000");
            }
            else if ((UnitGetType(lp_unit) == "Brakk")) {
                if ((libNtve_gf_PlayerInCinematicMode(1) == true)) {
                    ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "AttachModelOffset ModelAdditionHarness TalkIconBubble {Overhead 0} 0.000000,0.000000,-0.100000");
                }
                else {
                    ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "AttachModelOffset ModelAdditionHarness TalkIconBubble {Overhead 0} 0.000000,0.000000,0.300000");
                }
                ActorSend(ActorFrom("::LastCreatedActual"), "SetScale 0.700000");
            }
            else if ((UnitGetType(lp_unit) == "NarudXelNaga") && (libNtve_gf_PlayerInCinematicMode(1) == true)) {
                ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "AttachModelOffset ModelAdditionHarness TalkIconBubble {Overhead 0} 0.000000,0.000000,-3.800000");
            }
            else if (true) {
                ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "AttachModelOffset ModelAdditionHarness TalkIconBubble {Overhead 0} 0.000000,0.000000,0.600000");
            }
            lv_talkBubble = ActorFrom("::LastCreatedActual");
            libNtve_gf_AttachModelToUnit(lp_unit, "TalkIconRing", "Ref_Origin");
            lv_talkRing = libNtve_gf_ActorLastCreated();
        }

        if ((libNtve_gf_UnitIsVisibleToPlayer(lp_unit, 1) == true)) {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "TalkIcon", UnitGetPosition(lp_unit), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 2.0, 270.0);
            lv_ping = PingLastCreated();
            PingSetScale(PingLastCreated(), 0.3);
        }

    }

    TransmissionSendAdvanced(PlayerGroupAll(), lv_source, lv_portrait, lp_portraitActor, "Talk", lp_sound, lp_speaker, lp_message, lp_duration, lp_durationType, lp_waitUntilDone);
    if ((lp_waitUntilDone == false)) {
        libSwaC_gf_ZS_SendTransmissionCampaignCleanUp(TransmissionLastSent(), lp_keepPortraitVisible, lv_portrait, lv_talkBubble, lv_talkRing, lv_ping, lv_localIndex);
    }
    else {
        libSwaC_gf_ZS_SendTransmissionCampaignCleanUp(c_invalidTransmissionId, lp_keepPortraitVisible, lv_portrait, lv_talkBubble, lv_talkRing, lv_ping, lv_localIndex);
    }
}

trigger auto_libSwaC_gf_ZS_SendTransmissionCampaignCleanUp_Trigger = null;
int auto_libSwaC_gf_ZS_SendTransmissionCampaignCleanUp_lp_transmission;
int auto_libSwaC_gf_ZS_SendTransmissionCampaignCleanUp_lp_keepPortraitVisible;
int auto_libSwaC_gf_ZS_SendTransmissionCampaignCleanUp_lp_portrait;
actor auto_libSwaC_gf_ZS_SendTransmissionCampaignCleanUp_lp_talkIcon;
actor auto_libSwaC_gf_ZS_SendTransmissionCampaignCleanUp_lp_talkRing;
int auto_libSwaC_gf_ZS_SendTransmissionCampaignCleanUp_lp_ping;
int auto_libSwaC_gf_ZS_SendTransmissionCampaignCleanUp_lp_localIndex;

void libSwaC_gf_ZS_SendTransmissionCampaignCleanUp (int lp_transmission, int lp_keepPortraitVisible, int lp_portrait, actor lp_talkIcon, actor lp_talkRing, int lp_ping, int lp_localIndex) {
    auto_libSwaC_gf_ZS_SendTransmissionCampaignCleanUp_lp_transmission = lp_transmission;
    auto_libSwaC_gf_ZS_SendTransmissionCampaignCleanUp_lp_keepPortraitVisible = lp_keepPortraitVisible;
    auto_libSwaC_gf_ZS_SendTransmissionCampaignCleanUp_lp_portrait = lp_portrait;
    auto_libSwaC_gf_ZS_SendTransmissionCampaignCleanUp_lp_talkIcon = lp_talkIcon;
    auto_libSwaC_gf_ZS_SendTransmissionCampaignCleanUp_lp_talkRing = lp_talkRing;
    auto_libSwaC_gf_ZS_SendTransmissionCampaignCleanUp_lp_ping = lp_ping;
    auto_libSwaC_gf_ZS_SendTransmissionCampaignCleanUp_lp_localIndex = lp_localIndex;

    if (auto_libSwaC_gf_ZS_SendTransmissionCampaignCleanUp_Trigger == null) {
        auto_libSwaC_gf_ZS_SendTransmissionCampaignCleanUp_Trigger = TriggerCreate("auto_libSwaC_gf_ZS_SendTransmissionCampaignCleanUp_TriggerFunc");
    }

    TriggerExecute(auto_libSwaC_gf_ZS_SendTransmissionCampaignCleanUp_Trigger, false, false);
}

bool auto_libSwaC_gf_ZS_SendTransmissionCampaignCleanUp_TriggerFunc (bool testConds, bool runActions) {
    int lp_transmission = auto_libSwaC_gf_ZS_SendTransmissionCampaignCleanUp_lp_transmission;
    int lp_keepPortraitVisible = auto_libSwaC_gf_ZS_SendTransmissionCampaignCleanUp_lp_keepPortraitVisible;
    int lp_portrait = auto_libSwaC_gf_ZS_SendTransmissionCampaignCleanUp_lp_portrait;
    actor lp_talkIcon = auto_libSwaC_gf_ZS_SendTransmissionCampaignCleanUp_lp_talkIcon;
    actor lp_talkRing = auto_libSwaC_gf_ZS_SendTransmissionCampaignCleanUp_lp_talkRing;
    int lp_ping = auto_libSwaC_gf_ZS_SendTransmissionCampaignCleanUp_lp_ping;
    int lp_localIndex = auto_libSwaC_gf_ZS_SendTransmissionCampaignCleanUp_lp_localIndex;

    // Automatic Variable Declarations
    // Implementation
    if ((lp_transmission != c_invalidTransmissionId)) {
        TransmissionWait(lp_transmission, 0.0);
    }

    Wait(0.75, c_timeReal);
    if ((lp_localIndex != libSwaC_gv_zS_SendTransmissionCampaignIndex)) {
        if ((libSwaC_gv_zS_SendTransmissionCampaignPortrait != lp_portrait) && (lp_portrait != c_invalidPortraitId) && (lp_keepPortraitVisible == libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter)) {
            PortraitSetModel(lp_portrait, "StaticPortrait", false);
            PortraitSetVisible(lp_portrait, PlayerGroupAll(), false, false);
            libSwaC_gf_ZS_UpdateErrorPanelMaskSingle();
        }

        return true;
    }

    libSwaC_gv_zS_SendTransmissionCampaignIndex = 0;
    libSwaC_gv_zS_SendTransmissionCampaignSpeaker = null;
    TriggerExecute(libSwaC_gt_ZS_SendTransmissionCampaignTick, true, false);
    if ((lp_keepPortraitVisible == libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter) && (lp_portrait != c_invalidPortraitId)) {
        PortraitSetModel(lp_portrait, "StaticPortrait", false);
        PortraitSetVisible(lp_portrait, PlayerGroupAll(), false, false);
    }

    if ((lp_talkIcon != null)) {
        libNtve_gf_KillModel(lp_talkIcon);
    }

    if ((lp_talkRing != null)) {
        libNtve_gf_KillModel(lp_talkRing);
    }

    if ((lp_ping != c_invalidPingId)) {
        PingDestroy(lp_ping);
    }

    return true;
}

void libSwaC_gf_HideCampaignTransmissionPortrait () {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_HideAllCinematicPortraits(PlayerGroupAll());
}

fixed libSwaC_gf_ConvesationLineDuration (string lp_conversationLine) {
    // Variable Declarations
    soundlink lv_sound;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);

    // Implementation
    lv_sound = SoundLink(ConversationDataGetSound(lp_conversationLine, true), c_soundIndexAny);
    return SoundLengthSync(lv_sound);
}

void libSwaC_gf__ZergDropPod (point lp_location, unitgroup lp_units, int lp_player) {
    // Variable Declarations
    unit lv_chosenUnit;
    unit lv_dropPod;
    point lv_dropPodLocation;
    fixed lv_angle;
    point lv_dropLocation;
    unit lv_creep;

    // Automatic Variable Declarations
    unitgroup auto2D3B3E6A_g;
    int auto2D3B3E6A_u;
    unitgroup auto50A89478_g;
    int auto50A89478_u;

    // Variable Initialization

    // Implementation
    auto2D3B3E6A_g = lp_units;
    auto2D3B3E6A_u = UnitGroupCount(auto2D3B3E6A_g, c_unitCountAll);
    for (;; auto2D3B3E6A_u -= 1) {
        lv_chosenUnit = UnitGroupUnitFromEnd(auto2D3B3E6A_g, auto2D3B3E6A_u);
        if (lv_chosenUnit == null) { break; }
        libNtve_gf_ShowHideUnit(lv_chosenUnit, false);
        libNtve_gf_PauseUnit(lv_chosenUnit, true);
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "ZergDropPod", c_unitCreateIgnorePlacement, lp_player, lp_location);
    lv_dropPod = UnitLastCreated();
    Wait(2.5, c_timeGame);
    lv_dropPodLocation = UnitGetPosition(lv_dropPod);
    libNtve_gf_CreateUnitsAtPoint2(1, "ZergDropPodCreep", c_unitCreateIgnorePlacement, lp_player, lv_dropPodLocation);
    lv_creep = UnitLastCreated();
    Wait(1.0, c_timeGame);
    lv_angle = 0.0;
    auto50A89478_g = lp_units;
    auto50A89478_u = UnitGroupCount(auto50A89478_g, c_unitCountAll);
    for (;; auto50A89478_u -= 1) {
        lv_chosenUnit = UnitGroupUnitFromEnd(auto50A89478_g, auto50A89478_u);
        if (lv_chosenUnit == null) { break; }
        lv_dropLocation = PointWithOffsetPolar(lv_dropPodLocation, RandomFixed(0.5, 2.0), lv_angle);
        UnitSetPosition(lv_chosenUnit, lv_dropLocation, false);
        libNtve_gf_ShowHideUnit(lv_chosenUnit, true);
        libNtve_gf_PauseUnit(lv_chosenUnit, false);
        Wait(0.125, c_timeGame);
        lv_angle = (lv_angle + 77.0);
    }
    libNtve_gf_PauseUnit(lv_creep, true);
    Wait(3.0, c_timeGame);
    UnitRemove(lv_creep);
    Wait(4.0, c_timeGame);
    UnitKill(lv_dropPod);
}

void libSwaC_gf__TerranDropPod (point lp_location, unitgroup lp_units, int lp_player) {
    // Variable Declarations
    unit lv_indexUnit;
    unit lv_dropPod;
    point lv_dropPodLocation;
    fixed lv_angle;
    fixed lv_angleStart;
    point lv_dropLocation;
    fixed lv_distance;
    int lv_subIndex;
    point lv_moveLocation;
    int lv_countPerLine;

    // Automatic Variable Declarations
    unitgroup auto30BA83D4_g;
    int auto30BA83D4_u;
    unitgroup autoACF11699_g;
    int autoACF11699_u;

    // Variable Initialization

    // Implementation
    auto30BA83D4_g = lp_units;
    auto30BA83D4_u = UnitGroupCount(auto30BA83D4_g, c_unitCountAll);
    for (;; auto30BA83D4_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(auto30BA83D4_g, auto30BA83D4_u);
        if (lv_indexUnit == null) { break; }
        libNtve_gf_ShowHideUnit(lv_indexUnit, false);
        libNtve_gf_PauseUnit(lv_indexUnit, true);
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "TerranDropPod", c_unitCreateIgnorePlacement, lp_player, lp_location);
    lv_dropPod = UnitLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_dropPod), c_animNameDefault, "Birth", c_animFlagNonLooping, c_animTimeDefault);
    Wait(3.5, c_timeGame);
    lv_countPerLine = 4;
    if ((UnitGroupCount(lp_units, c_unitCountAlive) > 16)) {
        lv_countPerLine = ((UnitGroupCount(lp_units, c_unitCountAlive) + 3) / 4);
    }

    lv_dropPodLocation = UnitGetPosition(lv_dropPod);
    lv_distance = (0.8 + ((IntToFixed((UnitGroupCount(lp_units, c_unitCountAlive) + 3)) / IntToFixed(lv_countPerLine)) * 0.8));
    lv_subIndex = 1;
    lv_angleStart = 225.0;
    lv_angle = lv_angleStart;
    autoACF11699_g = lp_units;
    autoACF11699_u = UnitGroupCount(autoACF11699_g, c_unitCountAll);
    for (;; autoACF11699_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(autoACF11699_g, autoACF11699_u);
        if (lv_indexUnit == null) { break; }
        lv_dropLocation = PointWithOffsetPolar(lv_dropPodLocation, 1.0, lv_angle);
        SoundPlayAtPoint(SoundLink("Medivac_Unload", 0), PlayerGroupAll(), lv_dropLocation, 0.0, 100.0, 0.0);
        Wait(0.125, c_timeGame);
        UnitSetPosition(lv_indexUnit, lv_dropLocation, false);
        libNtve_gf_ShowHideUnit(lv_indexUnit, true);
        libNtve_gf_PauseUnit(lv_indexUnit, false);
        lv_moveLocation = PointWithOffsetPolar(lv_dropPodLocation, lv_distance, lv_angle);
        UnitIssueOrder(lv_indexUnit, OrderTargetingPoint(AbilityCommand("move", 0), lv_moveLocation), c_orderQueueReplace);
        if ((lv_subIndex == lv_countPerLine)) {
            lv_subIndex = 1;
            lv_angle = lv_angleStart;
            lv_distance -= 0.8;
        }
        else {
            lv_subIndex += 1;
            lv_angle += 10.0;
        }
    }
    UnitKill(lv_dropPod);
}

void libSwaC_gf_CreateDropPod (int lp_race, point lp_location, unitgroup lp_units, bool lp_waitDontWait, int lp_player) {
    // Variable Declarations
    point lv_dropLocation;
    unitgroup lv_dropUnits;

    // Automatic Variable Declarations
    int autoAA5D5DC6_val;

    // Variable Initialization
    lv_dropUnits = UnitGroupEmpty();

    // Implementation
    lv_dropLocation = Point(PointGetX(lp_location), PointGetY(lp_location));
    PointSetFacing(lv_dropLocation, PointGetFacing(lp_location));
    lv_dropUnits = UnitGroupCopy(lp_units);
    DataTableSetUnitGroup(false, libSwaC_gf__LastDroppedUnitsDataTableName(), lv_dropUnits);
    autoAA5D5DC6_val = lp_race;
    if (autoAA5D5DC6_val == libSwaC_ge_DropPodRace_Terran) {
        if ((lp_waitDontWait == true)) {
            libSwaC_gf__TerranDropPod(lv_dropLocation, lv_dropUnits, lp_player);
        }
        else {
            libSwaC_gv__TP_DropPod_Location = lv_dropLocation;
            libSwaC_gv__TP_DropPod_Units = lv_dropUnits;
            libSwaC_gv__TP_DropPod_Player = lp_player;
            TriggerExecute(libSwaC_gt__TerranDropPod, true, false);
        }
    }
    else if (autoAA5D5DC6_val == libSwaC_ge_DropPodRace_Zerg) {
        if ((lp_waitDontWait == true)) {
            libSwaC_gf__ZergDropPod(lv_dropLocation, lv_dropUnits, lp_player);
        }
        else {
            libSwaC_gv__TP_DropPod_Location = lv_dropLocation;
            libSwaC_gv__TP_DropPod_Units = lv_dropUnits;
            libSwaC_gv__TP_DropPod_Player = lp_player;
            TriggerExecute(libSwaC_gt__ZergDropPod, true, false);
        }
    }
    else {
    }
}

void libSwaC_gf_CreateDropPodForZergBuilding (string lp_buildingType, point lp_landingPoint, int lp_player, bool lp_waitDontWait) {
    // Automatic Variable Declarations
    bool auto0E9D82BE_val;

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_buildingType, c_unitCreateIgnorePlacement, lp_player, lp_landingPoint);
    libSwaC_gv__TP_ZergDropPod_Building = UnitLastCreated();
    libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
    DataTableSetUnitGroup(false, libSwaC_gf__LastDroppedUnitsDataTableName(), UnitLastCreatedGroup());
    auto0E9D82BE_val = lp_waitDontWait;
    if (auto0E9D82BE_val == true) {
        libSwaC_gf__CreateDropPodForBuildingWait(lp_buildingType, lp_landingPoint, lp_player);
    }
    else if (auto0E9D82BE_val == false) {
        libSwaC_gf__CreateDropPodForBuildingDontWait(lp_buildingType, lp_landingPoint, lp_player);
    }
    else {
    }
}

trigger auto_libSwaC_gf__CreateDropPodForBuildingDontWait_Trigger = null;
string auto_libSwaC_gf__CreateDropPodForBuildingDontWait_lp_buildingType;
point auto_libSwaC_gf__CreateDropPodForBuildingDontWait_lp_landingPoint;
int auto_libSwaC_gf__CreateDropPodForBuildingDontWait_lp_player;

void libSwaC_gf__CreateDropPodForBuildingDontWait (string lp_buildingType, point lp_landingPoint, int lp_player) {
    auto_libSwaC_gf__CreateDropPodForBuildingDontWait_lp_buildingType = lp_buildingType;
    auto_libSwaC_gf__CreateDropPodForBuildingDontWait_lp_landingPoint = lp_landingPoint;
    auto_libSwaC_gf__CreateDropPodForBuildingDontWait_lp_player = lp_player;

    if (auto_libSwaC_gf__CreateDropPodForBuildingDontWait_Trigger == null) {
        auto_libSwaC_gf__CreateDropPodForBuildingDontWait_Trigger = TriggerCreate("auto_libSwaC_gf__CreateDropPodForBuildingDontWait_TriggerFunc");
    }

    TriggerExecute(auto_libSwaC_gf__CreateDropPodForBuildingDontWait_Trigger, false, false);
}

bool auto_libSwaC_gf__CreateDropPodForBuildingDontWait_TriggerFunc (bool testConds, bool runActions) {
    string lp_buildingType = auto_libSwaC_gf__CreateDropPodForBuildingDontWait_lp_buildingType;
    point lp_landingPoint = auto_libSwaC_gf__CreateDropPodForBuildingDontWait_lp_landingPoint;
    int lp_player = auto_libSwaC_gf__CreateDropPodForBuildingDontWait_lp_player;

    // Automatic Variable Declarations
    // Implementation
    libSwaC_gf__CreateDropPodForBuildingWait(lp_buildingType, lp_landingPoint, lp_player);
    return true;
}

void libSwaC_gf__CreateDropPodForBuildingWait (string lp_buildingType, point lp_landingPoint, int lp_player) {
    // Variable Declarations
    unit lv_droppod;

    // Automatic Variable Declarations
    unitgroup autoEFB1326A_g;
    int autoEFB1326A_u;
    unit autoEFB1326A_var;

    // Variable Initialization

    // Implementation
    UnitCreate(1, "ZergDropPod", c_unitCreateIgnorePlacement, lp_player, lp_landingPoint, 270.0);
    lv_droppod = UnitLastCreated();
    Wait(2.0, c_timeReal);
    UnitTypeMoveBlockersFromPoint(lp_buildingType, lp_player, lp_landingPoint, 0.0);
    Wait(1.25, c_timeReal);
    autoEFB1326A_g = UnitGroup(null, c_playerAny, RegionCircle(lp_landingPoint, 2.5), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEFB1326A_u = UnitGroupCount(autoEFB1326A_g, c_unitCountAll);
    for (;; autoEFB1326A_u -= 1) {
        autoEFB1326A_var = UnitGroupUnitFromEnd(autoEFB1326A_g, autoEFB1326A_u);
        if (autoEFB1326A_var == null) { break; }
        if ((UnitGetType(autoEFB1326A_var) != "ZergDropPodLarge") && (autoEFB1326A_var != UnitLastCreated())) {
            if (((UnitGetOwner(autoEFB1326A_var) == lp_player) || (libNtve_gf_PlayerIsEnemy(lp_player, UnitGetOwner(autoEFB1326A_var), libNtve_ge_PlayerRelation_Ally) == true))) {
                UnitSetPosition(autoEFB1326A_var, UnitTypePlacementFromPoint(lp_buildingType, UnitGetOwner(autoEFB1326A_var), lp_landingPoint, 4.0), true);
            }
            else {
                UnitKill(autoEFB1326A_var);
            }
        }

    }
    libNtve_gf_ShowHideUnit(libSwaC_gv__TP_ZergDropPod_Building, true);
    Wait(5.0, c_timeReal);
    UnitKill(lv_droppod);
}

string libSwaC_gf__LastDroppedUnitsDataTableName () {
    // Automatic Variable Declarations
    // Implementation
    return "LASTDROPPODEDUNITS";
}

unitgroup libSwaC_gf_LastDroppedUnits () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnitGroup(false, libSwaC_gf__LastDroppedUnitsDataTableName());
}

void libSwaC_gf_ZS_SaveMissionCompletion () {
    // Variable Declarations
    int lv_difficulty;
    int lv_bestTime;
    string lv_indexObjective;
    int lv_finalProgress;

    // Automatic Variable Declarations
    int auto42E19D8A_ae;
    int auto42E19D8A_ai;

    // Variable Initialization
    lv_difficulty = 1;

    // Implementation
    if ((libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindStory) == true)) {
        return ;
    }

    lv_difficulty = PlayerDifficulty(1);
    libSwaC_gv_zS_MissionCompleteTime = FixedToInt(libNtve_gf_GamePlayTime(1));
    lv_bestTime = libSwaC_gf_MissionCompleteBestTime(libSwaC_gf_CurrentMap(), lv_difficulty);
    if (((lv_bestTime <= 0) || (libSwaC_gv_zS_MissionCompleteTime < lv_bestTime))) {
        libSwaC_gf_ZS_SetMissionCompletionBestTime(libSwaC_gf_CurrentMap(), lv_difficulty, libSwaC_gv_zS_MissionCompleteTime);
    }

    auto42E19D8A_ae = CatalogFieldValueCount(c_gameCatalogMap, libSwaC_gf_CurrentMap(), "ObjectiveArray", 1);
    auto42E19D8A_ai = 1;
    while (auto42E19D8A_ai <= auto42E19D8A_ae) {
        lv_indexObjective = CatalogFieldValueGet(c_gameCatalogMap, libSwaC_gf_CurrentMap(), "ObjectiveArray["+IntToString(auto42E19D8A_ai-1)+"]", 1);
        if ((libSwaC_gf_MissionObjectiveIsPrimary(lv_indexObjective) == false)) {
            lv_finalProgress = libSwaC_gf_MissionObjectiveProgress(lv_indexObjective);
            if ((lv_finalProgress > libSwaC_gf_ZS_MissionObjectiveBestProgress(lv_indexObjective))) {
                libSwaC_gf_ZS_MissionObjectiveBestProgressSet(lv_indexObjective, lv_finalProgress);
            }

        }

        auto42E19D8A_ai = auto42E19D8A_ai + 1;
    }
}

void libSwaC_gf_ZS_GameOver () {
    // Automatic Variable Declarations
    // Implementation
    libSwaC_gv_zS_GameOver = true;
}

void libSwaC_gf_EndCampaignMission (int lp_player, int lp_type) {
    // Automatic Variable Declarations
    // Implementation
    PerfTestStop();
    TriggerQueueClear(c_triggerQueueRetain);
    TriggerQueuePause(true);
    if ((lp_type == c_gameOverVictory)) {
        TriggerExecute(libSwaC_gt_ZS_CollectCampaignStatsDataMisisonVictory, true, false);
        libSwaC_gf_DisplayCampaignVictoryScoreScreen(libSwaC_gf_CurrentMap());
    }
    else {
        TriggerExecute(libSwaC_gt_ZS_CollectCampaignStatsDataMisisonDefeat, true, false);
        TriggerExecute(libSwaC_gt_ZS_SaveCampaignStatsData, true, false);
        GameOver(lp_player, lp_type, true, false);
    }
}

void libSwaC_gf_RunMissionVictorySequence (trigger lp_victoryCinematic) {
    // Automatic Variable Declarations
    // Implementation
    if ((libSwaC_gv_zS_GameOver == true)) {
        return ;
    }

    if ((libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindStory) == true)) {
        return ;
    }

    libSwaC_gf_ZS_GameOver();
    libSwaC_gf_ZS_SaveMissionCompletion();
    TriggerQueueClear(c_triggerQueueRetain);
    TriggerQueuePause(false);
    libSwaC_gv_zS_MissionVictoryActionQueyeEmpty = false;
    TriggerExecute(libSwaC_gt_ZS_MissionVictoryCallbackBlockActionQueueOneMinute, true, false);
    while (!((libSwaC_gv_zS_MissionVictoryActionQueyeEmpty == true))) {
        Wait(1.0, c_timeGame);
    }
    TriggerQueueClear(c_triggerQueueKill);
    TriggerExecute(lp_victoryCinematic, true, false);
    TriggerExecute(libSwaC_gt_ZS_MissionVictoryCallbackBlockActionQueue, true, false);
}

void libSwaC_gf_CinematicFade (bool lp_fadeIn, fixed lp_duration, color lp_color, bool lp_waitUntilDone) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_waitUntilDone == true)) {
        libSwaC_gf_CinematicFade3(lp_fadeIn, lp_duration, lp_color);
    }
    else {
        libSwaC_gf_CinematicFade4(lp_fadeIn, lp_duration, lp_color);
    }
}

void libSwaC_gf_CinematicFade3 (bool lp_fadeIn, fixed lp_duration, color lp_color) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_fadeIn == true)) {
        if ((libSwaC_gv__FadeImage != c_invalidDialogControlId)) {
            libNtve_gf_SetDialogItemColor(libSwaC_gv__FadeImage, lp_color, PlayerGroupAll());
            DialogControlFadeTransparency(libSwaC_gv__FadeImage, PlayerGroupAll(), lp_duration, 100.0);
        }

    }
    else {
        libSwaC_gf__FadeCreateDialog();
        libNtve_gf_SetDialogItemColor(libSwaC_gv__FadeImage, lp_color, PlayerGroupAll());
        DialogControlFadeTransparency(libSwaC_gv__FadeImage, PlayerGroupAll(), 0.0, 100.0);
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
        DialogControlFadeTransparency(libSwaC_gv__FadeImage, PlayerGroupAll(), lp_duration, 0.0);
    }
    if ((lp_duration > 0.0)) {
        Wait(lp_duration, c_timeGame);
    }

}

trigger auto_libSwaC_gf_CinematicFade4_Trigger = null;
bool auto_libSwaC_gf_CinematicFade4_lp_fadeIn;
fixed auto_libSwaC_gf_CinematicFade4_lp_duration;
color auto_libSwaC_gf_CinematicFade4_lp_color;

void libSwaC_gf_CinematicFade4 (bool lp_fadeIn, fixed lp_duration, color lp_color) {
    auto_libSwaC_gf_CinematicFade4_lp_fadeIn = lp_fadeIn;
    auto_libSwaC_gf_CinematicFade4_lp_duration = lp_duration;
    auto_libSwaC_gf_CinematicFade4_lp_color = lp_color;

    if (auto_libSwaC_gf_CinematicFade4_Trigger == null) {
        auto_libSwaC_gf_CinematicFade4_Trigger = TriggerCreate("auto_libSwaC_gf_CinematicFade4_TriggerFunc");
    }

    TriggerExecute(auto_libSwaC_gf_CinematicFade4_Trigger, false, false);
}

bool auto_libSwaC_gf_CinematicFade4_TriggerFunc (bool testConds, bool runActions) {
    bool lp_fadeIn = auto_libSwaC_gf_CinematicFade4_lp_fadeIn;
    fixed lp_duration = auto_libSwaC_gf_CinematicFade4_lp_duration;
    color lp_color = auto_libSwaC_gf_CinematicFade4_lp_color;

    // Automatic Variable Declarations
    // Implementation
    libSwaC_gf_CinematicFade3(lp_fadeIn, lp_duration, lp_color);
    return true;
}

void libSwaC_gf__FadeCreateDialog () {
    // Automatic Variable Declarations
    // Implementation
    if ((libSwaC_gv__FadeDialog != c_invalidDialogId)) {
        DialogDestroy(libSwaC_gv__FadeDialog);
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    libSwaC_gv__FadeDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetFullscreen(DialogLastCreated(), true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 200, 50, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libSwaC_gv__FadeImage = DialogControlLastCreated();
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
}

void libSwaC_gf_PreparePlanetPortraitZoomIn (string lp_model, camerainfo lp_camera, string lp_light) {
    // Variable Declarations
    string lv_light;

    // Automatic Variable Declarations
    string autoE476883A_val;

    // Variable Initialization

    // Implementation
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDoodad, true);
    if ((libSwaC_gv_zS_PlanetPortrait == c_invalidPortraitId)) {
        PortraitCreate(0, 0, c_anchorTopLeft, 50, 50, lp_model, "", "Default", false, false);
        libSwaC_gv_zS_PlanetPortrait = PortraitLastCreated();
        PortraitSetOffscreen(libSwaC_gv_zS_PlanetPortrait, true);
        PortraitSetBackgroundVisible(libSwaC_gv_zS_PlanetPortrait, false);
        PortraitSetBorderVisible(libSwaC_gv_zS_PlanetPortrait, false);
        PortraitUseTransition(PortraitLastCreated(), false);
        PortraitWaitForLoad(libSwaC_gv_zS_PlanetPortrait);
    }
    else {
        PortraitSetModel(libSwaC_gv_zS_PlanetPortrait, lp_model, true);
    }
    autoE476883A_val = lp_model;
    if (autoE476883A_val == "EvolutionPlanetZerglingA") {
        lv_light = "EvolutionPlanetZerglingA";
    }
    else if (autoE476883A_val == "EvolutionPlanetZerglingB") {
        lv_light = "EvolutionPlanetZerglingB";
    }
    else if (autoE476883A_val == "EvolutionPlanetBanelingA") {
        lv_light = "EvolutionPlanetBanelingA";
    }
    else if (autoE476883A_val == "EvolutionPlanetBanelingB") {
        lv_light = "EvolutionPlanetBanelingB";
    }
    else if (autoE476883A_val == "EvolutionPlanetHydraliskA") {
        lv_light = "EvolutionPlanetHydraliskA";
    }
    else if (autoE476883A_val == "EvolutionPlanetHydraliskB") {
        lv_light = "EvolutionPlanetHydraliskB";
    }
    else if (autoE476883A_val == "EvolutionPlanetMutaliskA") {
        lv_light = "EvolutionPlanetMutaliskA";
    }
    else if (autoE476883A_val == "EvolutionPlanetMutaliskB") {
        lv_light = "EvolutionPlanetMutaliskB";
    }
    else if (autoE476883A_val == "EvolutionPlanetRoachA") {
        lv_light = "EvolutionPlanetRoachA";
    }
    else if (autoE476883A_val == "EvolutionPlanetRoachB") {
        lv_light = "EvolutionPlanetRoachB";
    }
    else if (autoE476883A_val == "EvolutionPlanetSwarmHostA") {
        lv_light = "EvolutionPlanetSwarmHostA";
    }
    else if (autoE476883A_val == "EvolutionPlanetSwarmHostB") {
        lv_light = "EvolutionPlanetSwarmHostB";
    }
    else if (autoE476883A_val == "EvolutionPlanetUltraliskA") {
        lv_light = "EvolutionPlanetUltraliskA";
    }
    else if (autoE476883A_val == "EvolutionPlanetUltraliskB") {
        lv_light = "EvolutionPlanetUltraliskB";
    }
    else if (autoE476883A_val == "SMX1_Korhal1_Cutscene") {
        lv_light = "PlanetViewKorhalEX1";
    }
    else {
    }
    PortraitSetLight(libSwaC_gv_zS_PlanetPortrait, lv_light);
    GameSetLighting(lv_light, 0.0);
    libSwaC_gv_zS_PlanetPortraitEvoMissionLight = lp_light;
    PortraitSetPosition(libSwaC_gv_zS_PlanetPortrait, c_anchorTopLeft, 0, 0);
    PortraitSetFullscreen(libSwaC_gv_zS_PlanetPortrait, true);
    PortraitSetOffscreen(libSwaC_gv_zS_PlanetPortrait, false);
    PortraitSetVisible(libSwaC_gv_zS_PlanetPortrait, PlayerGroupAll(), true, true);
    libSwaC_gf_CinematicFade(false, 0.0, Color(0.00, 0.00, 0.00), true);
    libSwaC_gf_CinematicFade(true, 2.0, Color(0.00, 0.00, 0.00), true);
    libSwaC_gv_zS_PlanetPortraitPlayerCamera = lp_camera;
    CameraApplyInfo(1, lp_camera, 0.0, -1, 10, true);
    CameraSetValue(1, c_cameraValueDistance, (CameraInfoGetValue(lp_camera, c_cameraValueDistance) + 100.0), 0.0, -1, 20.0);
    CinematicFade(true, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
}

void libSwaC_gf_ZoomInPlanetPortrait () {
    // Automatic Variable Declarations
    // Implementation
    SoundPlay(SoundLink("UI_Evolutions_PlanetaryZoom", -1), PlayerGroupAll(), 100.0, 0.0);
    ActorSend(ActorFromPortrait(libSwaC_gv_zS_PlanetPortrait), "AnimPlay Custom Spell PlayForever,NonLooping");
    Wait(3.0, c_timeGame);
    CameraSetValue(1, c_cameraValueDistance, CameraInfoGetValue(libSwaC_gv_zS_PlanetPortraitPlayerCamera, c_cameraValueDistance), 2.0, 100.0, 10.0);
    Wait(0.5, c_timeGame);
    if ((libSwaC_gv_zS_PlanetPortraitEvoMissionLight != null)) {
        GameSetLighting(libSwaC_gv_zS_PlanetPortraitEvoMissionLight, 1.0);
    }

    Wait(1.5, c_timeGame);
}

trigger auto_libSwaC_gf_HidePlanetPortrait_Trigger = null;

void libSwaC_gf_HidePlanetPortrait () {
    if (auto_libSwaC_gf_HidePlanetPortrait_Trigger == null) {
        auto_libSwaC_gf_HidePlanetPortrait_Trigger = TriggerCreate("auto_libSwaC_gf_HidePlanetPortrait_TriggerFunc");
    }

    TriggerExecute(auto_libSwaC_gf_HidePlanetPortrait_Trigger, false, false);
}

bool auto_libSwaC_gf_HidePlanetPortrait_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDoodad, false);
    PortraitSetOffscreen(libSwaC_gv_zS_PlanetPortrait, true);
    PortraitSetVisible(libSwaC_gv_zS_PlanetPortrait, PlayerGroupAll(), false, false);
    if ((libSwaC_gv_zS_PlanetPortraitEvoMissionLight != null)) {
        GameSetLighting(libSwaC_gv_zS_PlanetPortraitEvoMissionLight, 0.0);
    }

    return true;
}

void libSwaC_gf_ZS_UseUnitNameAsUnitTip (unit lp_unit) {
    // Variable Declarations
    text lv_tip;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((UnitGetType(lp_unit) == "ZergDropPod") || (UnitGetType(lp_unit) == "ZergDropPodLarge") || (UnitGetType(lp_unit) == "TerranDropPod") || (UnitGetType(lp_unit) == "ZergDropPodCreep"))) {
        return ;
    }

    if ((UnitGetType(lp_unit) == "CreepTumorUsed")) {
        TextExpressionSetToken("Param/Expression/lib_SwaC_5442EF4D", "A", UnitTypeGetName(UnitGetType(lp_unit)));
        lv_tip = TextExpressionAssemble("Param/Expression/lib_SwaC_5442EF4D");
    }
    else if ((UnitGetType(lp_unit) == "SpineCrawlerUprooted")) {
        TextExpressionSetToken("Param/Expression/lib_SwaC_E34D7A9B", "A", UnitTypeGetName(UnitGetType(lp_unit)));
        lv_tip = TextExpressionAssemble("Param/Expression/lib_SwaC_E34D7A9B");
    }
    else if ((UnitGetType(lp_unit) == "SporeCrawlerUprooted")) {
        TextExpressionSetToken("Param/Expression/lib_SwaC_DAF5AC8A", "A", UnitTypeGetName(UnitGetType(lp_unit)));
        lv_tip = TextExpressionAssemble("Param/Expression/lib_SwaC_DAF5AC8A");
    }
    else if (true) {
        lv_tip = UnitTypeGetName(UnitGetType(lp_unit));
    }
    TextExpressionSetToken("Param/Expression/lib_SwaC_889FD6C6", "A", lv_tip);
    UnitSetInfoTip(lp_unit, TextExpressionAssemble("Param/Expression/lib_SwaC_889FD6C6"));
    UnitSetState(lp_unit, c_unitStateTooltipable, true);
}

void libSwaC_gf_SetUnitInfoTextCampaign (unit lp_unit, text lp_info, text lp_tip, text lp_subTip) {
    // Variable Declarations
    text lv_tipStyled;
    text lv_subTipStyled;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_tip != null)) {
        TextExpressionSetToken("Param/Expression/lib_SwaC_8A9543B1", "A", lp_tip);
        lv_tipStyled = TextExpressionAssemble("Param/Expression/lib_SwaC_8A9543B1");
    }
    else {
        lv_tipStyled = lp_tip;
    }
    if ((lp_subTip != null)) {
        TextExpressionSetToken("Param/Expression/lib_SwaC_4AD982DB", "A", lp_subTip);
        lv_subTipStyled = TextExpressionAssemble("Param/Expression/lib_SwaC_4AD982DB");
    }
    else {
        lv_subTipStyled = lp_subTip;
    }
    UnitSetInfoText(lp_unit, lp_info, lv_tipStyled, lv_subTipStyled);
    UnitSetState(lp_unit, c_unitStateTooltipable, true);
}

void libSwaC_gf_SetUnitInfoTextCampaignDetailed (unit lp_unit, text lp_info, text lp_tip, text lp_subTip) {
    // Variable Declarations
    text lv_tipStyled;
    text lv_subTipStyled;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_tip != null)) {
        TextExpressionSetToken("Param/Expression/lib_SwaC_FDF0DFC6", "A", lp_tip);
        lv_tipStyled = TextExpressionAssemble("Param/Expression/lib_SwaC_FDF0DFC6");
    }
    else {
        lv_tipStyled = lp_tip;
    }
    if ((lp_subTip != null)) {
        TextExpressionSetToken("Param/Expression/lib_SwaC_F5E6F81E", "A", lp_subTip);
        lv_subTipStyled = TextExpressionAssemble("Param/Expression/lib_SwaC_F5E6F81E");
    }
    else {
        lv_subTipStyled = lp_subTip;
    }
    UnitSetInfoText(lp_unit, lp_info, lv_tipStyled, lv_subTipStyled);
    UnitSetState(lp_unit, c_unitStateTooltipable, true);
}

void libSwaC_gf_EnableDisableNeedOverlordInfo (bool lp_enableDisable) {
    // Automatic Variable Declarations
    // Implementation
    libSwaC_gv_zS_NeedOverlordEnabled = lp_enableDisable;
    if ((libSwaC_gv_zS_NeedOverlordEnabled == false)) {
        if ((libSwaC_gv_zS_NeedOverlordAbilityHighlightOn == true)) {
            libSwaC_gv_zS_NeedOverlordAbilityHighlightOn = false;
            UIClearMessages(PlayerGroupSingle(1), c_messageAreaDirective);
            UISetButtonHighlighted(PlayerGroupSingle(1), AbilityCommand("LarvaTrain", 2), false);
            libSwaC_gf_TurnSelectLarvaButtonHighlightOnOff(false);
            CatalogFieldValueSet(c_gameCatalogButton, "Overlord", "Tooltip", 1, "Button/Tooltip/Overlord");
        }

    }

}

bool libSwaC_gf_NeedOverlordHighlightOn () {
    // Automatic Variable Declarations
    // Implementation
    return libSwaC_gv_zS_NeedOverlordAbilityHighlightOn;
}

bool libSwaC_gf_ZS_DisplayResourcePickupInfo () {
    // Automatic Variable Declarations
    // Implementation
    if ((UserDataGetInt("StoryStates", "(Mission)ResourcePickedTipPlayed", "value", 1) == 0) && ((libSwaC_gf_CurrentMap() == "ZLab3") || (libSwaC_gf_CurrentMap() == "ZChar1") || (libSwaC_gf_CurrentMap() == "ZChar2") || (libSwaC_gf_CurrentMap() == "ZChar3") || (libSwaC_gf_CurrentMap() == "ZExpedition1") || (libSwaC_gf_CurrentMap() == "ZExpedition2") || (libSwaC_gf_CurrentMap() == "ZZerus1") || (libSwaC_gf_CurrentMap() == "ZHybrid1") || (libSwaC_gf_CurrentMap() == "ZHybrid2") || (libSwaC_gf_CurrentMap() == "ZHybrid3") || (libSwaC_gf_CurrentMap() == "ZKorhal2"))) {
        return true;
    }
    else {
        return false;
    }
}

bool libSwaC_gf_ZS_ResourcePickupUnit (unit lp_resource) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGetType(lp_resource) == "PalletMinerals") || (UnitGetType(lp_resource) == "NaturalMineralsRed") || (UnitGetType(lp_resource) == "NaturalMinerals") || (UnitGetType(lp_resource) == "PalletGas") || (UnitGetType(lp_resource) == "NaturalGas"))) {
        return true;
    }
    else {
        return false;
    }
}

void libSwaC_gf_ZS_InitFeaturedZergStructureTypes () {
    // Variable Declarations
    string lv_categoryUnlock;
    int lv_index;

    // Automatic Variable Declarations
    string auto87E95266_val;
    int auto1B27D0F1_ae;
    const int auto1B27D0F1_ai = 1;
    string auto8824D10D_val;

    // Variable Initialization

    // Implementation
    if ((libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindUpgrade) == true)) {
        return ;
    }

    lv_categoryUnlock = libSwaC_gf_MissionArmyCategoryUnlocked(libSwaC_gf_CurrentMap());
    libSwaC_gv_zS_FeaturedZergStructureCount = 0;
    auto87E95266_val = lv_categoryUnlock;
    if (auto87E95266_val == "Zergling") {
        libSwaC_gv_zS_FeaturedZergStructureCount += 1;
        libSwaC_gv_zS_FeaturedZergStructures[libSwaC_gv_zS_FeaturedZergStructureCount] = "SpawningPool";
    }
    else if (auto87E95266_val == "Queen") {
        libSwaC_gv_zS_FeaturedZergStructureCount += 1;
        libSwaC_gv_zS_FeaturedZergStructures[libSwaC_gv_zS_FeaturedZergStructureCount] = "SpawningPool";
    }
    else if (auto87E95266_val == "Baneling") {
        libSwaC_gv_zS_FeaturedZergStructureCount += 1;
        libSwaC_gv_zS_FeaturedZergStructures[libSwaC_gv_zS_FeaturedZergStructureCount] = "BanelingNest";
        libSwaC_gv_zS_FeaturedZergStructureCount += 1;
        libSwaC_gv_zS_FeaturedZergStructures[libSwaC_gv_zS_FeaturedZergStructureCount] = "SpawningPool";
    }
    else if (auto87E95266_val == "Roach") {
        libSwaC_gv_zS_FeaturedZergStructureCount += 1;
        libSwaC_gv_zS_FeaturedZergStructures[libSwaC_gv_zS_FeaturedZergStructureCount] = "RoachWarren";
        libSwaC_gv_zS_FeaturedZergStructureCount += 1;
        libSwaC_gv_zS_FeaturedZergStructures[libSwaC_gv_zS_FeaturedZergStructureCount] = "SpawningPool";
    }
    else if (auto87E95266_val == "Hydralisk") {
        libSwaC_gv_zS_FeaturedZergStructureCount += 1;
        libSwaC_gv_zS_FeaturedZergStructures[libSwaC_gv_zS_FeaturedZergStructureCount] = "HydraliskDen";
        libSwaC_gv_zS_FeaturedZergStructureCount += 1;
        libSwaC_gv_zS_FeaturedZergStructures[libSwaC_gv_zS_FeaturedZergStructureCount] = "Lair";
        libSwaC_gv_zS_FeaturedZergStructureCount += 1;
        libSwaC_gv_zS_FeaturedZergStructures[libSwaC_gv_zS_FeaturedZergStructureCount] = "Hatchery";
        libSwaC_gv_zS_FeaturedZergStructureCount += 1;
        libSwaC_gv_zS_FeaturedZergStructures[libSwaC_gv_zS_FeaturedZergStructureCount] = "SpawningPool";
    }
    else if (auto87E95266_val == "Ultralisk") {
        libSwaC_gv_zS_FeaturedZergStructureCount += 1;
        libSwaC_gv_zS_FeaturedZergStructures[libSwaC_gv_zS_FeaturedZergStructureCount] = "UltraliskCavern";
        libSwaC_gv_zS_FeaturedZergStructureCount += 1;
        libSwaC_gv_zS_FeaturedZergStructures[libSwaC_gv_zS_FeaturedZergStructureCount] = "Hive";
        libSwaC_gv_zS_FeaturedZergStructureCount += 1;
        libSwaC_gv_zS_FeaturedZergStructures[libSwaC_gv_zS_FeaturedZergStructureCount] = "Lair";
        libSwaC_gv_zS_FeaturedZergStructureCount += 1;
        libSwaC_gv_zS_FeaturedZergStructures[libSwaC_gv_zS_FeaturedZergStructureCount] = "Hatchery";
        libSwaC_gv_zS_FeaturedZergStructureCount += 1;
        libSwaC_gv_zS_FeaturedZergStructures[libSwaC_gv_zS_FeaturedZergStructureCount] = "SpawningPool";
    }
    else if (auto87E95266_val == "Mutalisk") {
        libSwaC_gv_zS_FeaturedZergStructureCount += 1;
        libSwaC_gv_zS_FeaturedZergStructures[libSwaC_gv_zS_FeaturedZergStructureCount] = "Spire";
        libSwaC_gv_zS_FeaturedZergStructureCount += 1;
        libSwaC_gv_zS_FeaturedZergStructures[libSwaC_gv_zS_FeaturedZergStructureCount] = "Lair";
        libSwaC_gv_zS_FeaturedZergStructureCount += 1;
        libSwaC_gv_zS_FeaturedZergStructures[libSwaC_gv_zS_FeaturedZergStructureCount] = "Hatchery";
        libSwaC_gv_zS_FeaturedZergStructureCount += 1;
        libSwaC_gv_zS_FeaturedZergStructures[libSwaC_gv_zS_FeaturedZergStructureCount] = "SpawningPool";
    }
    else if (auto87E95266_val == "Infestor") {
        libSwaC_gv_zS_FeaturedZergStructureCount += 1;
        libSwaC_gv_zS_FeaturedZergStructures[libSwaC_gv_zS_FeaturedZergStructureCount] = "InfestationPit";
        libSwaC_gv_zS_FeaturedZergStructureCount += 1;
        libSwaC_gv_zS_FeaturedZergStructures[libSwaC_gv_zS_FeaturedZergStructureCount] = "Lair";
        libSwaC_gv_zS_FeaturedZergStructureCount += 1;
        libSwaC_gv_zS_FeaturedZergStructures[libSwaC_gv_zS_FeaturedZergStructureCount] = "Hatchery";
        libSwaC_gv_zS_FeaturedZergStructureCount += 1;
        libSwaC_gv_zS_FeaturedZergStructures[libSwaC_gv_zS_FeaturedZergStructureCount] = "SpawningPool";
    }
    else if (auto87E95266_val == "Aberration") {
        libSwaC_gv_zS_FeaturedZergStructureCount += 1;
        libSwaC_gv_zS_FeaturedZergStructures[libSwaC_gv_zS_FeaturedZergStructureCount] = "EvolutionChamber";
        libSwaC_gv_zS_FeaturedZergStructureCount += 1;
        libSwaC_gv_zS_FeaturedZergStructures[libSwaC_gv_zS_FeaturedZergStructureCount] = "Lair";
        libSwaC_gv_zS_FeaturedZergStructureCount += 1;
        libSwaC_gv_zS_FeaturedZergStructures[libSwaC_gv_zS_FeaturedZergStructureCount] = "Hatchery";
    }
    else {
    }
    auto1B27D0F1_ae = libSwaC_gv_zS_FeaturedZergStructureCount;
    lv_index = 1;
    for ( ; ( (auto1B27D0F1_ai >= 0 && lv_index <= auto1B27D0F1_ae) || (auto1B27D0F1_ai < 0 && lv_index >= auto1B27D0F1_ae) ) ; lv_index += auto1B27D0F1_ai ) {
        auto8824D10D_val = libSwaC_gv_zS_FeaturedZergStructures[lv_index];
        if (auto8824D10D_val == "SpawningPool") {
            libSwaC_gv_zS_FeaturedZergStructureAbilities[lv_index] = AbilityCommand("ZergBuild", 3);
        }
        else if (auto8824D10D_val == "BanelingNest") {
            libSwaC_gv_zS_FeaturedZergStructureAbilities[lv_index] = AbilityCommand("ZergBuild", 10);
        }
        else if (auto8824D10D_val == "RoachWarren") {
            libSwaC_gv_zS_FeaturedZergStructureAbilities[lv_index] = AbilityCommand("ZergBuild", 13);
        }
        else if (auto8824D10D_val == "HydraliskDen") {
            libSwaC_gv_zS_FeaturedZergStructureAbilities[lv_index] = AbilityCommand("ZergBuild", 5);
        }
        else if (auto8824D10D_val == "UltraliskCavern") {
            libSwaC_gv_zS_FeaturedZergStructureAbilities[lv_index] = AbilityCommand("ZergBuild", 7);
        }
        else if (auto8824D10D_val == "Spire") {
            libSwaC_gv_zS_FeaturedZergStructureAbilities[lv_index] = AbilityCommand("ZergBuild", 6);
        }
        else if (auto8824D10D_val == "InfestationPit") {
            libSwaC_gv_zS_FeaturedZergStructureAbilities[lv_index] = AbilityCommand("ZergBuild", 8);
        }
        else if (auto8824D10D_val == "EvolutionChamber") {
            libSwaC_gv_zS_FeaturedZergStructureAbilities[lv_index] = AbilityCommand("ZergBuild", 4);
        }
        else if (auto8824D10D_val == "Hive") {
            libSwaC_gv_zS_FeaturedZergStructureAbilities[lv_index] = AbilityCommand("UpgradeToHive", 0);
        }
        else if (auto8824D10D_val == "Lair") {
            libSwaC_gv_zS_FeaturedZergStructureAbilities[lv_index] = AbilityCommand("UpgradeToLair", 0);
        }
        else if (auto8824D10D_val == "Hatchery") {
            libSwaC_gv_zS_FeaturedZergStructureAbilities[lv_index] = AbilityCommand("ZergBuild", 0);
        }
        else {
        }
    }
}

trigger auto_libSwaC_gf_ZS_StartFlashFeaturedZergStructure_Trigger = null;
point auto_libSwaC_gf_ZS_StartFlashFeaturedZergStructure_lp_position;
int auto_libSwaC_gf_ZS_StartFlashFeaturedZergStructure_lp_structureIndex;

void libSwaC_gf_ZS_StartFlashFeaturedZergStructure (point lp_position, int lp_structureIndex) {
    auto_libSwaC_gf_ZS_StartFlashFeaturedZergStructure_lp_position = lp_position;
    auto_libSwaC_gf_ZS_StartFlashFeaturedZergStructure_lp_structureIndex = lp_structureIndex;

    if (auto_libSwaC_gf_ZS_StartFlashFeaturedZergStructure_Trigger == null) {
        auto_libSwaC_gf_ZS_StartFlashFeaturedZergStructure_Trigger = TriggerCreate("auto_libSwaC_gf_ZS_StartFlashFeaturedZergStructure_TriggerFunc");
    }

    TriggerExecute(auto_libSwaC_gf_ZS_StartFlashFeaturedZergStructure_Trigger, false, false);
}

bool auto_libSwaC_gf_ZS_StartFlashFeaturedZergStructure_TriggerFunc (bool testConds, bool runActions) {
    point lp_position = auto_libSwaC_gf_ZS_StartFlashFeaturedZergStructure_lp_position;
    int lp_structureIndex = auto_libSwaC_gf_ZS_StartFlashFeaturedZergStructure_lp_structureIndex;

    // Variable Declarations
    int lv_flashStatusBak;

    // Automatic Variable Declarations
    string auto25A41607_val;

    // Variable Initialization

    // Implementation
    if ((libSwaC_gv_zS_FeaturedZergStructureFlashing == lp_structureIndex)) {
        return true;
    }

    if ((libSwaC_gv_zS_FeaturedZergStructureFlashing > 0)) {
        libSwaC_gf_ZS_StoptFlashFeaturedZergStructure();
    }

    if ((libSwaC_gv_zS_FeaturedZergStructureFlashStatus[lp_structureIndex] > 1)) {
        return true;
    }

    lv_flashStatusBak = libSwaC_gv_zS_FeaturedZergStructureFlashStatus[lp_structureIndex];
    libSwaC_gv_zS_FeaturedZergStructureFlashing = lp_structureIndex;
    libSwaC_gv_zS_FeaturedZergStructureFlashStatus[lp_structureIndex] = 1;
    UISetButtonHighlighted(PlayerGroupSingle(1), libSwaC_gv_zS_FeaturedZergStructureAbilities[lp_structureIndex], true);
    if ((lp_structureIndex == 1) && (lv_flashStatusBak == 0)) {
        TriggerQueueEnter();
        UIAlertPoint("SwarmKeyStructureDestoryed", 1, StringExternal("Param/Value/lib_SwaC_B44AB3DB"), "Assets\\Textures\\btn-ability-zerg-attackstructure-color.dds", lp_position);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", lp_position, ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 4.0, 270.0);
        auto25A41607_val = libSwaC_gf_MissionArmyCategoryUnlocked(libSwaC_gf_CurrentMap());
        if (auto25A41607_val == "Roach") {
            TextExpressionSetToken("Param/Expression/lib_SwaC_CC972AD0", "A", UnitTypeGetName(libSwaC_gv_zS_FeaturedZergStructures[lp_structureIndex]));
            TextExpressionSetToken("Param/Expression/lib_SwaC_CC972AD0", "A", UnitTypeGetName(libSwaC_gv_zS_FeaturedZergStructures[lp_structureIndex]));
            libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), libSwaC_ge_CampaignMessageType_Warning, TextExpressionAssemble("Param/Expression/lib_SwaC_CC972AD0"), libSwaC_ge_CampaignMessageFormatNotFormat_FormatMessage);
        }
        else if (auto25A41607_val == "Ultralisk") {
            TextExpressionSetToken("Param/Expression/lib_SwaC_DA60194D", "A", UnitTypeGetName(libSwaC_gv_zS_FeaturedZergStructures[lp_structureIndex]));
            TextExpressionSetToken("Param/Expression/lib_SwaC_DA60194D", "B", libSwaC_gf_StoryArmyCategoryName(libSwaC_gf_MissionArmyCategoryUnlocked(libSwaC_gf_CurrentMap())));
            TextExpressionSetToken("Param/Expression/lib_SwaC_DA60194D", "A", UnitTypeGetName(libSwaC_gv_zS_FeaturedZergStructures[lp_structureIndex]));
            libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), libSwaC_ge_CampaignMessageType_Warning, TextExpressionAssemble("Param/Expression/lib_SwaC_DA60194D"), libSwaC_ge_CampaignMessageFormatNotFormat_FormatMessage);
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_SwaC_35F71163", "A", UnitTypeGetName(libSwaC_gv_zS_FeaturedZergStructures[lp_structureIndex]));
            TextExpressionSetToken("Param/Expression/lib_SwaC_35F71163", "B", libSwaC_gf_StoryArmyCategoryName(libSwaC_gf_MissionArmyCategoryUnlocked(libSwaC_gf_CurrentMap())));
            TextExpressionSetToken("Param/Expression/lib_SwaC_35F71163", "A", UnitTypeGetName(libSwaC_gv_zS_FeaturedZergStructures[lp_structureIndex]));
            libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), libSwaC_ge_CampaignMessageType_Warning, TextExpressionAssemble("Param/Expression/lib_SwaC_35F71163"), libSwaC_ge_CampaignMessageFormatNotFormat_FormatMessage);
        }
        Wait(1.5, c_timeGame);
        TriggerExecute(libSwaC_gt_ZS_FeaturedZergStructureDiesReminder, true, false);
        TriggerQueueExit();
    }

    return true;
}

void libSwaC_gf_ZS_StoptFlashFeaturedZergStructure () {
    // Automatic Variable Declarations
    // Implementation
    if ((libSwaC_gv_zS_FeaturedZergStructureFlashing <= 0)) {
        return ;
    }

    UISetButtonHighlighted(PlayerGroupSingle(1), libSwaC_gv_zS_FeaturedZergStructureAbilities[libSwaC_gv_zS_FeaturedZergStructureFlashing], false);
    libSwaC_gv_zS_FeaturedZergStructureFlashing = 0;
}

void libSwaC_gf_EnableDisableZerglingRespawn (bool lp_enableDisable) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_enableDisable == true)) {
        TechTreeAbilityAllow(1, AbilityCommand("ZerglingRespawn", 0), true);
        TechTreeAbilityAllow(1, AbilityCommand("ZerglingRespawnPrimary", 0), true);
        TechTreeAbilityAllow(1, AbilityCommand("ZerglingRespawnDeath", 0), true);
        TriggerEnable(libSwaC_gt_ZS_HatcheryPrimarySearch, true);
    }
    else {
        TechTreeAbilityAllow(1, AbilityCommand("ZerglingRespawn", 0), false);
        TechTreeAbilityAllow(1, AbilityCommand("ZerglingRespawnPrimary", 0), false);
        TechTreeAbilityAllow(1, AbilityCommand("ZerglingRespawnDeath", 0), false);
        TriggerEnable(libSwaC_gt_ZS_HatcheryPrimarySearch, false);
    }
}

void libSwaC_gf_ZerglingRespawnSetPrimaryHatchery (unit lp_hatchery) {
    // Automatic Variable Declarations
    // Implementation
    UnitCreateEffectUnit(lp_hatchery, "ZerglingRespawnPrimaryRemoveOthers", lp_hatchery);
    UnitBehaviorAdd(lp_hatchery, "ZerglingRespawnPrimary", lp_hatchery, 1);
    libSwaC_gv_zS_PrimaryHatchery = lp_hatchery;
}

void libSwaC_gf_SetZerglingRespawnPrimarytoclosestHatcheryLairHive (point lp_point) {
    // Variable Declarations
    fixed lv_distance;
    unitgroup lv_hatcheryGroup;
    unit lv_closestHatchery;
    unit lv_indexHatchery;

    // Automatic Variable Declarations
    unitgroup auto0AC2CBF2_g;
    int auto0AC2CBF2_u;

    // Variable Initialization
    lv_distance = 500.0;
    lv_hatcheryGroup = UnitGroupEmpty();

    // Implementation
    lv_hatcheryGroup = UnitGroup("Hive", 1, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupAddUnitGroup(lv_hatcheryGroup, UnitGroup("Lair", 1, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_hatcheryGroup, UnitGroup("Hatchery", 1, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    auto0AC2CBF2_g = lv_hatcheryGroup;
    auto0AC2CBF2_u = UnitGroupCount(auto0AC2CBF2_g, c_unitCountAll);
    for (;; auto0AC2CBF2_u -= 1) {
        lv_indexHatchery = UnitGroupUnitFromEnd(auto0AC2CBF2_g, auto0AC2CBF2_u);
        if (lv_indexHatchery == null) { break; }
        if ((DistanceBetweenPoints(PlayerStartLocation(1), UnitGetPosition(lv_indexHatchery)) < lv_distance)) {
            lv_distance = DistanceBetweenPoints(PlayerStartLocation(1), UnitGetPosition(lv_indexHatchery));
            lv_closestHatchery = lv_indexHatchery;
        }

    }
    if ((lv_closestHatchery != null)) {
        libSwaC_gf_ZerglingRespawnSetPrimaryHatchery(lv_closestHatchery);
        libSwaC_gv_zS_PrimaryHatchery = lv_closestHatchery;
    }

}

void libSwaC_gf_ZS_CreateKerriganLowHPUI () {
    // Automatic Variable Declarations
    // Implementation
    if ((libSwaC_gv_zS_KerriganLowHPUIDlg != c_invalidDialogId)) {
        return ;
    }

    DialogCreate(1600, 1200, c_anchorCenter, 0, 0, false);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetFullscreen(DialogLastCreated(), true);
    libSwaC_gv_zS_KerriganLowHPUIDlg = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1600, 1200, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_ingame_effects_splash2.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libSwaC_gv_zS_KerriganLowHPUIImage = DialogControlLastCreated();
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
}

bool libSwaC_gf_ZS_KerriganHPTooLow () {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitGetPropertyFixed(libSwaC_gv_zS_Kerrigan, c_unitPropLifePercent, c_unitPropCurrent) <= (libSwaC_gv_zSC_KerriganHPThreshold * 100.0))) {
        return true;
    }
    else {
        return false;
    }
}

void libSwaC_gf_ZS_StopKerriganLowHPSound () {
    // Automatic Variable Declarations
    // Implementation
    TriggerStop(libSwaC_gt_ZS_KerriganLowHPSoundBreathLoop);
    TriggerStop(libSwaC_gt_ZS_KerriganLowHPSoundHeartLoop);
    if ((libSwaC_gv_zS_SoundKerriganLowHealthStart != null)) {
        SoundStop(libSwaC_gv_zS_SoundKerriganLowHealthStart, true);
        libSwaC_gv_zS_SoundKerriganLowHealthStart = null;
    }

    if ((libSwaC_gv_zS_SoundKerriganLowHealthBreath != null)) {
        SoundStop(libSwaC_gv_zS_SoundKerriganLowHealthBreath, true);
        libSwaC_gv_zS_SoundKerriganLowHealthBreath = null;
    }

    if ((libSwaC_gv_zS_SoundKerriganLowHealthHeartBeat != null)) {
        SoundStop(libSwaC_gv_zS_SoundKerriganLowHealthHeartBeat, true);
        libSwaC_gv_zS_SoundKerriganLowHealthHeartBeat = null;
    }

    TriggerEnable(libSwaC_gt_ZS_StartKerriganLowHPSound, true);
    TriggerEnable(libSwaC_gt_ZS_KerriganLowHPSoundBreathLoop, true);
    TriggerEnable(libSwaC_gt_ZS_KerriganLowHPSoundHeartLoop, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_LowHealthEnd);
}

trigger auto_libSwaC_gf_AddMissionTipUserData_Trigger = null;
string auto_libSwaC_gf_AddMissionTipUserData_lp_tipData;

void libSwaC_gf_AddMissionTipUserData (string lp_tipData) {
    auto_libSwaC_gf_AddMissionTipUserData_lp_tipData = lp_tipData;

    if (auto_libSwaC_gf_AddMissionTipUserData_Trigger == null) {
        auto_libSwaC_gf_AddMissionTipUserData_Trigger = TriggerCreate("auto_libSwaC_gf_AddMissionTipUserData_TriggerFunc");
    }

    TriggerExecute(auto_libSwaC_gf_AddMissionTipUserData_Trigger, false, false);
}

bool auto_libSwaC_gf_AddMissionTipUserData_TriggerFunc (bool testConds, bool runActions) {
    string lp_tipData = auto_libSwaC_gf_AddMissionTipUserData_lp_tipData;

    // Variable Declarations
    int lv_createdCountDown;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UserDataGetInt("CampaignTips", lp_tipData, "Created", 1) <= 0)) {
        return true;
    }

    libSwaC_gv_zS_MissionTipCount += 1;
    libSwaC_gv_zS_MissionTip[libSwaC_gv_zS_MissionTipCount] = lp_tipData;
    lv_createdCountDown = UserDataGetInt("CampaignTips", lp_tipData, "Created", 1);
    UserDataSetInt("CampaignTips", lp_tipData, "Created", 1, (lv_createdCountDown - 1));
    libSwaC_gf_ZS_RefreshTip();
    return true;
}

trigger auto_libSwaC_gf_DisplayMissionTip_Trigger = null;
text auto_libSwaC_gf_DisplayMissionTip_lp_buttonText;

void libSwaC_gf_DisplayMissionTip (text lp_buttonText) {
    auto_libSwaC_gf_DisplayMissionTip_lp_buttonText = lp_buttonText;

    if (auto_libSwaC_gf_DisplayMissionTip_Trigger == null) {
        auto_libSwaC_gf_DisplayMissionTip_Trigger = TriggerCreate("auto_libSwaC_gf_DisplayMissionTip_TriggerFunc");
    }

    TriggerExecute(auto_libSwaC_gf_DisplayMissionTip_Trigger, false, false);
}

bool auto_libSwaC_gf_DisplayMissionTip_TriggerFunc (bool testConds, bool runActions) {
    text lp_buttonText = auto_libSwaC_gf_DisplayMissionTip_lp_buttonText;

    // Automatic Variable Declarations
    // Implementation
    if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
        if (((libSwaC_gf_CurrentMap() == "ZLab1") || (libSwaC_gf_CurrentMap() == "ZLab2") || (libSwaC_gf_CurrentMap() == "ZSpace1"))) {
            TextExpressionSetToken("Param/Expression/lib_SwaC_903D3715", "A", StringExternal("Param/Value/lib_SwaC_E59ABB37"));
            DialogControlInvokeAsText(libSwaC_gv_zS_MissionHelpButtonTipPanel, PlayerGroupAll(), "PlayTip_Terr", TextExpressionAssemble("Param/Expression/lib_SwaC_903D3715"), StringExternal("Param/Value/lib_SwaC_0567AF67"), null, null);
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_SwaC_EAD00EF2", "A", StringExternal("Param/Value/lib_SwaC_39CFFFD1"));
            DialogControlInvokeAsText(libSwaC_gv_zS_MissionHelpButtonTipPanel, PlayerGroupAll(), "PlayTip_Zerg", TextExpressionAssemble("Param/Expression/lib_SwaC_EAD00EF2"), null, null, null);
        }
        TriggerEnable(libSwaC_gt_ZS_MissionTipClicked, true);
    }

    if ((libSwaC_gv_zS_ArmyButtonTipReady == true)) {
        Wait(0.25, c_timeReal);
        TriggerExecute(libSwaC_gt_ZS_FlashArmyButtonHelpTip, true, false);
    }

    return true;
}

trigger auto_libSwaC_gf_ShowHideMissionTip_Trigger = null;
bool auto_libSwaC_gf_ShowHideMissionTip_lp_showHide;

void libSwaC_gf_ShowHideMissionTip (bool lp_showHide) {
    auto_libSwaC_gf_ShowHideMissionTip_lp_showHide = lp_showHide;

    if (auto_libSwaC_gf_ShowHideMissionTip_Trigger == null) {
        auto_libSwaC_gf_ShowHideMissionTip_Trigger = TriggerCreate("auto_libSwaC_gf_ShowHideMissionTip_TriggerFunc");
    }

    TriggerExecute(auto_libSwaC_gf_ShowHideMissionTip_Trigger, false, false);
}

bool auto_libSwaC_gf_ShowHideMissionTip_TriggerFunc (bool testConds, bool runActions) {
    bool lp_showHide = auto_libSwaC_gf_ShowHideMissionTip_lp_showHide;

    // Automatic Variable Declarations
    // Implementation
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        return true;
    }

    if ((libSwaC_gv_zS_MissionHelpButton != c_invalidDialogControlId)) {
        DialogControlSetVisible(libSwaC_gv_zS_MissionHelpButton, PlayerGroupAll(), lp_showHide);
    }

    return true;
}

void libSwaC_gf_ZS_RefreshTip () {
    // Variable Declarations
    int lv_index;
    text lv_tip;

    // Automatic Variable Declarations
    const int auto01EE6C5A_ae = 1;
    const int auto01EE6C5A_ai = -1;

    // Variable Initialization

    // Implementation
    HelpPanelDestroyAllTips();
    TriggerExecute(libSwaC_gt_ZS_ResourcePickupTip, true, false);
    lv_index = libSwaC_gv_zS_MissionTipCount;
    for ( ; ( (auto01EE6C5A_ai >= 0 && lv_index <= auto01EE6C5A_ae) || (auto01EE6C5A_ai < 0 && lv_index >= auto01EE6C5A_ae) ) ; lv_index += auto01EE6C5A_ai ) {
        HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(UserDataGetText("CampaignTips", libSwaC_gv_zS_MissionTip[lv_index], "Name", 1), libNtve_ge_TipType_NormalTip), UserDataGetText("CampaignTips", libSwaC_gv_zS_MissionTip[lv_index], "Description", 1), UserDataGetText("CampaignTips", libSwaC_gv_zS_MissionTip[lv_index], "Name", 1), UserDataGetImagePath("CampaignTips", libSwaC_gv_zS_MissionTip[lv_index], "Icon", 1));
        HelpPanelSetHelpItemDarkenedWhenViewed(HelpPanelLastCreatedHelpItem(), false);
    }
}

void libSwaC_gf_TurnSelectLarvaButtonHighlightOnOff (bool lp_highlighted) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_highlighted == true)) {
        libSwaC_gv_zS_SelectLarvaHighlight = true;
    }
    else {
        libSwaC_gv_zS_SelectLarvaHighlight = false;
    }
    TriggerExecute(libSwaC_gt_ZS_SelectLarvaButtonHighlightUpdate, true, false);
}

bool libSwaC_gf_ValidAntiAirUnitIsNearUnit (int lp_player, unit lp_unit) {
    // Variable Declarations
    bool lv_validAttackerFound;
    point lv_unitPosition;

    // Automatic Variable Declarations
    unitgroup auto8858001F_g;
    int auto8858001F_u;
    unit auto8858001F_var;
    unitgroup auto89807BFA_g;
    int auto89807BFA_u;
    unit auto89807BFA_var;

    // Variable Initialization

    // Implementation
    lv_unitPosition = UnitGetPosition(lp_unit);
    auto8858001F_g = UnitGroup(null, lp_player, RegionCircle(lv_unitPosition, 16.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8858001F_u = UnitGroupCount(auto8858001F_g, c_unitCountAll);
    for (;; auto8858001F_u -= 1) {
        auto8858001F_var = UnitGroupUnitFromEnd(auto8858001F_g, auto8858001F_u);
        if (auto8858001F_var == null) { break; }
        if ((UnitCanAttackTarget(auto8858001F_var, lp_unit) == true)) {
            lv_validAttackerFound = true;
            break;
        }

    }
    if ((lv_validAttackerFound == false)) {
        auto89807BFA_g = UnitGroup(null, lp_player, RegionCircle(lv_unitPosition, 8.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto89807BFA_u = UnitGroupCount(auto89807BFA_g, c_unitCountAll);
        for (;; auto89807BFA_u -= 1) {
            auto89807BFA_var = UnitGroupUnitFromEnd(auto89807BFA_g, auto89807BFA_u);
            if (auto89807BFA_var == null) { break; }
            if ((UnitCanAttackTarget(auto89807BFA_var, lp_unit) == true)) {
                lv_validAttackerFound = true;
                break;
            }

        }
    }

    return lv_validAttackerFound;
}

trigger auto_libSwaC_gf_RemindPlayertoCreateAntiAirUnits_Trigger = null;

void libSwaC_gf_RemindPlayertoCreateAntiAirUnits () {
    if (auto_libSwaC_gf_RemindPlayertoCreateAntiAirUnits_Trigger == null) {
        auto_libSwaC_gf_RemindPlayertoCreateAntiAirUnits_Trigger = TriggerCreate("auto_libSwaC_gf_RemindPlayertoCreateAntiAirUnits_TriggerFunc");
    }

    TriggerExecute(auto_libSwaC_gf_RemindPlayertoCreateAntiAirUnits_Trigger, false, false);
}

bool auto_libSwaC_gf_RemindPlayertoCreateAntiAirUnits_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_currentUnit;
    bool lv_sendTransmission;

    // Automatic Variable Declarations
    unitgroup autoA6A88345_g;
    int autoA6A88345_u;

    // Variable Initialization

    // Implementation
    while (true) {
        autoA6A88345_g = UnitGroupAlliance(1, c_unitAllianceEnemy, RegionPlayableMap(), UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32)) | (1 << (c_targetFilterPassive - 32))), 0);
        autoA6A88345_u = UnitGroupCount(autoA6A88345_g, c_unitCountAll);
        for (;; autoA6A88345_u -= 1) {
            lv_currentUnit = UnitGroupUnitFromEnd(autoA6A88345_g, autoA6A88345_u);
            if (lv_currentUnit == null) { break; }
            if ((UnitGroupCount(UnitGroup(null, 1, RegionCircle(UnitGetPosition(lv_currentUnit), 4.0), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
                if ((libSwaC_gf_ValidAntiAirUnitIsNearUnit(1, lv_currentUnit) == false)) {
                    Wait(5.0, c_timeAI);
                    if ((UnitIsAlive(lv_currentUnit) == true)) {
                        if ((UnitGroupCount(UnitGroup(null, 1, RegionCircle(UnitGetPosition(lv_currentUnit), 4.0), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0) && (libSwaC_gf_ValidAntiAirUnitIsNearUnit(1, lv_currentUnit) == false)) {
                            lv_sendTransmission = true;
                        }

                    }

                }

                break;
            }

            Wait(0.1, c_timeAI);
        }
        if ((lv_sendTransmission == true)) {
            break;
        }

        Wait(1.0, c_timeAI);
    }
    TriggerQueueEnter();
    if ((libSwaC_gv_zS_GameOver == true)) {
        return true;
    }

    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_MultiMissionCallouts|Line00043", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_MultiMissionCallouts|Line00041", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

trigger auto_libSwaC_gf_RemindPlayertoCompleteBonusObjective_Trigger = null;
string auto_libSwaC_gf_RemindPlayertoCompleteBonusObjective_lp_bonusObjective;
fixed auto_libSwaC_gf_RemindPlayertoCompleteBonusObjective_lp_delay;

void libSwaC_gf_RemindPlayertoCompleteBonusObjective (string lp_bonusObjective, fixed lp_delay) {
    auto_libSwaC_gf_RemindPlayertoCompleteBonusObjective_lp_bonusObjective = lp_bonusObjective;
    auto_libSwaC_gf_RemindPlayertoCompleteBonusObjective_lp_delay = lp_delay;

    if (auto_libSwaC_gf_RemindPlayertoCompleteBonusObjective_Trigger == null) {
        auto_libSwaC_gf_RemindPlayertoCompleteBonusObjective_Trigger = TriggerCreate("auto_libSwaC_gf_RemindPlayertoCompleteBonusObjective_TriggerFunc");
    }

    TriggerExecute(auto_libSwaC_gf_RemindPlayertoCompleteBonusObjective_Trigger, false, false);
}

bool auto_libSwaC_gf_RemindPlayertoCompleteBonusObjective_TriggerFunc (bool testConds, bool runActions) {
    string lp_bonusObjective = auto_libSwaC_gf_RemindPlayertoCompleteBonusObjective_lp_bonusObjective;
    fixed lp_delay = auto_libSwaC_gf_RemindPlayertoCompleteBonusObjective_lp_delay;

    // Automatic Variable Declarations
    // Implementation
    Wait(lp_delay, c_timeAI);
    if ((libSwaC_gf_MissionObjectiveProgress(lp_bonusObjective) == 0)) {
        TriggerQueueEnter();
        if ((libSwaC_gv_zS_GameOver == true)) {
            return true;
        }

        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_MultiMissionCallouts|Line00029", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }

    return true;
}

trigger auto_libSwaC_gf_RemindPlayertoSpawnDrones_Trigger = null;
fixed auto_libSwaC_gf_RemindPlayertoSpawnDrones_lp_delay;
int auto_libSwaC_gf_RemindPlayertoSpawnDrones_lp_amount;

void libSwaC_gf_RemindPlayertoSpawnDrones (fixed lp_delay, int lp_amount) {
    auto_libSwaC_gf_RemindPlayertoSpawnDrones_lp_delay = lp_delay;
    auto_libSwaC_gf_RemindPlayertoSpawnDrones_lp_amount = lp_amount;

    if (auto_libSwaC_gf_RemindPlayertoSpawnDrones_Trigger == null) {
        auto_libSwaC_gf_RemindPlayertoSpawnDrones_Trigger = TriggerCreate("auto_libSwaC_gf_RemindPlayertoSpawnDrones_TriggerFunc");
    }

    TriggerExecute(auto_libSwaC_gf_RemindPlayertoSpawnDrones_Trigger, false, false);
}

bool auto_libSwaC_gf_RemindPlayertoSpawnDrones_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_delay = auto_libSwaC_gf_RemindPlayertoSpawnDrones_lp_delay;
    int lp_amount = auto_libSwaC_gf_RemindPlayertoSpawnDrones_lp_amount;

    // Variable Declarations
    int lv_droneCount;
    order lv_currentOrder;

    // Automatic Variable Declarations
    unitgroup auto26F8CB2D_g;
    int auto26F8CB2D_u;
    unit auto26F8CB2D_var;

    // Variable Initialization

    // Implementation
    Wait(lp_delay, c_timeAI);
    auto26F8CB2D_g = UnitGroup("Drone", 1, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto26F8CB2D_u = UnitGroupCount(auto26F8CB2D_g, c_unitCountAll);
    for (;; auto26F8CB2D_u -= 1) {
        auto26F8CB2D_var = UnitGroupUnitFromEnd(auto26F8CB2D_g, auto26F8CB2D_u);
        if (auto26F8CB2D_var == null) { break; }
        lv_currentOrder = UnitOrder(auto26F8CB2D_var, 0);
        if ((((OrderGetAbilityCommand(lv_currentOrder) == AbilityCommand("DroneHarvest", 0)) && ((UnitGetType(OrderGetTargetUnit(lv_currentOrder)) == "MineralField") || (UnitGetType(OrderGetTargetUnit(lv_currentOrder)) == "RichMineralField"))) || ((OrderGetAbilityCommand(lv_currentOrder) == AbilityCommand("DroneHarvest", 1)) && ((UnitHasBehavior(auto26F8CB2D_var, "CarryMineralFieldMinerals") == true) || (UnitHasBehavior(auto26F8CB2D_var, "CarryHighYieldMineralFieldMinerals") == true))))) {
            lv_droneCount += 1;
        }

    }
    if ((lv_droneCount <= lp_amount)) {
        TriggerQueueEnter();
        if ((libSwaC_gv_zS_GameOver == true)) {
            return true;
        }

        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_MultiMissionCallouts|Line00034", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }

    return true;
}

trigger auto_libSwaC_gf_RemindPlayertoAssign3DronestoExtractor_Trigger = null;
unit auto_libSwaC_gf_RemindPlayertoAssign3DronestoExtractor_lp_extractor;
fixed auto_libSwaC_gf_RemindPlayertoAssign3DronestoExtractor_lp_delay;

void libSwaC_gf_RemindPlayertoAssign3DronestoExtractor (unit lp_extractor, fixed lp_delay) {
    auto_libSwaC_gf_RemindPlayertoAssign3DronestoExtractor_lp_extractor = lp_extractor;
    auto_libSwaC_gf_RemindPlayertoAssign3DronestoExtractor_lp_delay = lp_delay;

    if (auto_libSwaC_gf_RemindPlayertoAssign3DronestoExtractor_Trigger == null) {
        auto_libSwaC_gf_RemindPlayertoAssign3DronestoExtractor_Trigger = TriggerCreate("auto_libSwaC_gf_RemindPlayertoAssign3DronestoExtractor_TriggerFunc");
    }

    TriggerExecute(auto_libSwaC_gf_RemindPlayertoAssign3DronestoExtractor_Trigger, false, false);
}

bool auto_libSwaC_gf_RemindPlayertoAssign3DronestoExtractor_TriggerFunc (bool testConds, bool runActions) {
    unit lp_extractor = auto_libSwaC_gf_RemindPlayertoAssign3DronestoExtractor_lp_extractor;
    fixed lp_delay = auto_libSwaC_gf_RemindPlayertoAssign3DronestoExtractor_lp_delay;

    // Variable Declarations
    int lv_droneCount;
    order lv_currentOrder;

    // Automatic Variable Declarations
    const int auto15014F24_n = 3;
    int auto15014F24_i;
    unitgroup auto6B3B066C_g;
    int auto6B3B066C_u;
    unit auto6B3B066C_var;
    unitgroup auto4D844F3D_g;
    int auto4D844F3D_u;
    unit auto4D844F3D_var;

    // Variable Initialization

    // Implementation
    if ((UnitGetType(lp_extractor) != "Extractor") && (UnitGetType(lp_extractor) != "ExtractorPipes")) {
        return true;
    }

    Wait(lp_delay, c_timeAI);
    if ((UnitIsAlive(lp_extractor) == false)) {
        return true;
    }

    for (auto15014F24_i = 1; auto15014F24_i <= auto15014F24_n; auto15014F24_i += 1) {
        auto6B3B066C_g = UnitGroup("Drone", 1, RegionCircle(UnitGetPosition(lp_extractor), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto6B3B066C_u = UnitGroupCount(auto6B3B066C_g, c_unitCountAll);
        for (;; auto6B3B066C_u -= 1) {
            auto6B3B066C_var = UnitGroupUnitFromEnd(auto6B3B066C_g, auto6B3B066C_u);
            if (auto6B3B066C_var == null) { break; }
            lv_currentOrder = UnitOrder(auto6B3B066C_var, 0);
            if ((((OrderGetAbilityCommand(lv_currentOrder) == AbilityCommand("DroneHarvest", 0)) && (OrderGetTargetUnit(lv_currentOrder) == lp_extractor)) || ((OrderGetAbilityCommand(lv_currentOrder) == AbilityCommand("DroneHarvest", 1)) && (UnitHasBehavior(auto6B3B066C_var, "CarryHarvestableVespeneGeyserGasZerg") == true)))) {
                lv_droneCount += 1;
            }

        }
        auto4D844F3D_g = UnitGroup("Drone", 1, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32))), 0);
        auto4D844F3D_u = UnitGroupCount(auto4D844F3D_g, c_unitCountAll);
        for (;; auto4D844F3D_u -= 1) {
            auto4D844F3D_var = UnitGroupUnitFromEnd(auto4D844F3D_g, auto4D844F3D_u);
            if (auto4D844F3D_var == null) { break; }
            lv_currentOrder = UnitOrder(auto4D844F3D_var, 0);
            if ((OrderGetAbilityCommand(lv_currentOrder) == AbilityCommand("DroneHarvest", 0)) && (OrderGetTargetUnit(lv_currentOrder) == lp_extractor)) {
                lv_droneCount += 1;
            }

        }
        if ((lv_droneCount >= 3)) {
            return true;
        }
        else {
            lv_droneCount = 0;
            Wait(0.5, c_timeAI);
        }
    }
    TriggerQueueEnter();
    if (((libSwaC_gv_zS_GameOver == true) || (UnitIsAlive(lp_extractor) == false))) {
        return true;
    }

    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_MultiMissionCallouts|Line00033", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

void libSwaC_gf_DifficultySetting (int lp_difficulty) {
    // Automatic Variable Declarations
    int autoDEBA0DD7_val;

    // Implementation
    autoDEBA0DD7_val = lp_difficulty;
    if (autoDEBA0DD7_val == 1) {
        PlayerModifyPropertyInt(1, c_playerPropDamageTakenPercent, c_playerPropOperSetTo, FixedToInt((UserDataGetFixed("DifficultySettings", "Casual", "DamageTakenRatio", 1) * 100.0)));
    }
    else if (autoDEBA0DD7_val == 2) {
        PlayerModifyPropertyInt(1, c_playerPropDamageTakenPercent, c_playerPropOperSetTo, FixedToInt((UserDataGetFixed("DifficultySettings", "Normal", "DamageTakenRatio", 1) * 100.0)));
    }
    else if (autoDEBA0DD7_val == 3) {
        PlayerModifyPropertyInt(1, c_playerPropDamageTakenPercent, c_playerPropOperSetTo, FixedToInt((UserDataGetFixed("DifficultySettings", "Hard", "DamageTakenRatio", 1) * 100.0)));
    }
    else if (autoDEBA0DD7_val == 4) {
        PlayerModifyPropertyInt(1, c_playerPropDamageTakenPercent, c_playerPropOperSetTo, FixedToInt((UserDataGetFixed("DifficultySettings", "Brutal", "DamageTakenRatio", 1) * 100.0)));
    }
    else {
    }
}

trigger auto_libSwaC_gf_ZS_UpdateObjectivePanelMask_Trigger = null;

void libSwaC_gf_ZS_UpdateObjectivePanelMask () {
    if (auto_libSwaC_gf_ZS_UpdateObjectivePanelMask_Trigger == null) {
        auto_libSwaC_gf_ZS_UpdateObjectivePanelMask_Trigger = TriggerCreate("auto_libSwaC_gf_ZS_UpdateObjectivePanelMask_TriggerFunc");
    }

    TriggerExecute(auto_libSwaC_gf_ZS_UpdateObjectivePanelMask_Trigger, false, false);
}

bool auto_libSwaC_gf_ZS_UpdateObjectivePanelMask_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    while (true) {
        if ((libSwaC_gv_zS_ObjectivePanel != c_invalidDialogControlId) && (libNtve_gf_PlayerInCinematicMode(1) == false) && (libSwaC_gv_zS_GameOver == false)) {
            if ((PortraitVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), 1) == true) && (libSwaC_gv_zS_SwarmHeroUIPanel[1] != c_invalidDialogControlId) && (DialogControlIsVisible(libSwaC_gv_zS_SwarmHeroUIPanel[1], 1) == true) && (libSwaC_gv_zS_SwarmHeroUIPanel[2] != c_invalidDialogControlId) && (DialogControlIsVisible(libSwaC_gv_zS_SwarmHeroUIPanel[2], 1) == true)) {
                libNtve_gf_SetDialogItemAlphaMask(libSwaC_gv_zS_ObjectivePanel, "@UI/ObjectivePanelMaskTwoHeroes", PlayerGroupAll());
            }
            else if ((PortraitVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), 1) == true) && (((libSwaC_gv_zS_SwarmHeroUIPanel[1] != c_invalidDialogControlId) && (DialogControlIsVisible(libSwaC_gv_zS_SwarmHeroUIPanel[1], 1) == true)) || ((libSwaC_gv_zS_SwarmHeroUIPanel[2] != c_invalidDialogControlId) && (DialogControlIsVisible(libSwaC_gv_zS_SwarmHeroUIPanel[2], 1) == true)))) {
                libNtve_gf_SetDialogItemAlphaMask(libSwaC_gv_zS_ObjectivePanel, "@UI/ObjectivePanelMask", PlayerGroupAll());
            }
            else if (((PortraitVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), 1) == false) || (((libSwaC_gv_zS_SwarmHeroUIPanel[1] == c_invalidDialogControlId) || (DialogControlIsVisible(libSwaC_gv_zS_SwarmHeroUIPanel[1], 1) == false)) && ((libSwaC_gv_zS_SwarmHeroUIPanel[2] == c_invalidDialogControlId) || (DialogControlIsVisible(libSwaC_gv_zS_SwarmHeroUIPanel[2], 1) == false))))) {
                libNtve_gf_SetDialogItemAlphaMask(libSwaC_gv_zS_ObjectivePanel, "", PlayerGroupAll());
            }
        }

        Wait(0.5, c_timeGame);
    }
    return true;
}

trigger auto_libSwaC_gf_ZS_UpdateErrorPanelMask_Trigger = null;

void libSwaC_gf_ZS_UpdateErrorPanelMask () {
    if (auto_libSwaC_gf_ZS_UpdateErrorPanelMask_Trigger == null) {
        auto_libSwaC_gf_ZS_UpdateErrorPanelMask_Trigger = TriggerCreate("auto_libSwaC_gf_ZS_UpdateErrorPanelMask_TriggerFunc");
    }

    TriggerExecute(auto_libSwaC_gf_ZS_UpdateErrorPanelMask_Trigger, false, false);
}

bool auto_libSwaC_gf_ZS_UpdateErrorPanelMask_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    while (true) {
        libSwaC_gf_ZS_UpdateErrorPanelMaskSingle();
        Wait(0.25, c_timeGame);
    }
    return true;
}

void libSwaC_gf_ZS_UpdateErrorPanelMaskSingle () {
    // Automatic Variable Declarations
    // Implementation
    if ((libSwaC_gv_zS_ErrorPanel != c_invalidDialogControlId) && (libNtve_gf_PlayerInCinematicMode(1) == false) && (libSwaC_gv_zS_GameOver == false)) {
        if ((PortraitVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), 1) == true)) {
            if ((libSwaC_gv_zS_ErrorPanelMaskOn == false)) {
                libSwaC_gv_zS_ErrorPanelMaskOn = true;
                libNtve_gf_SetDialogItemAlphaMask(libSwaC_gv_zS_ErrorPanel, "@UI/InGame_ErrorDisplayMask", PlayerGroupAll());
            }

        }
        else {
            if ((libSwaC_gv_zS_ErrorPanelMaskOn == true)) {
                libSwaC_gv_zS_ErrorPanelMaskOn = false;
                libNtve_gf_SetDialogItemAlphaMask(libSwaC_gv_zS_ErrorPanel, "", PlayerGroupAll());
            }

        }
    }

}

void libSwaC_gf_TimerWindowCreate2 (timer lp_timer, text lp_title, bool lp_visible, bool lp_elapsed, int lp_positiveNegativeOptions) {
    // Automatic Variable Declarations
    // Implementation
    TimerWindowCreate(lp_timer, lp_title, lp_visible, lp_elapsed);
    TimerWindowShowBorder(TimerWindowLastCreated(), false);
    TimerWindowSetImageType(TimerWindowLastCreated(), c_timerWindowImageBackground, c_triggerImageTypeNineSlice);
    TimerWindowSetImageType(TimerWindowLastCreated(), c_timerWindowImageProgressFill, c_triggerImageTypeNineSlice);
    TimerWindowSetImageType(TimerWindowLastCreated(), c_timerWindowImageBorder, c_triggerImageTypeNineSlice);
    TimerWindowSetImageType(TimerWindowLastCreated(), c_timerWindowImageProgressFrame, c_triggerImageTypeNineSlice);
    TimerWindowSetFixedHeight(TimerWindowLastCreated(), 59);
    TimerWindowSetAnchor(TimerWindowLastCreated(), c_anchorTop, 0, -12);
    if ((lp_positiveNegativeOptions == libSwaC_ge_CampaignTimerPositiveNegativeOptions_Positive)) {
        if ((PlayerRace(1) == "Terr")) {
            TimerWindowSetColor(TimerWindowLastCreated(), c_timerWindowColorTime, Color(42.75, 68.24, 16.86), 0.0);
        }
        else {
            TimerWindowSetColor(TimerWindowLastCreated(), c_timerWindowColorTime, Color(100.00, 50.20, 0.00), 0.0);
        }
    }
    else {
        TimerWindowSetColor(TimerWindowLastCreated(), c_timerWindowColorTime, Color(100.00, 0.00, 0.00), 0.0);
    }
}

color libSwaC_gf_ProgressColor (int lp_minValue, int lp_maxValue, int lp_progress, color lp_color1, color lp_color2, color lp_color3, int lp_steps) {
    // Variable Declarations
    int lv_middle;
    fixed lv_r;
    fixed lv_g;
    fixed lv_b;

    // Automatic Variable Declarations
    int auto6CC7C496_val;

    // Variable Initialization

    // Implementation
    auto6CC7C496_val = lp_steps;
    if (auto6CC7C496_val == 1) {
        return lp_color1;
    }
    else if (auto6CC7C496_val == 2) {
        lv_r = (ColorGetComponent(lp_color1, c_colorComponentRed)+(ColorGetComponent(lp_color2, c_colorComponentRed)-ColorGetComponent(lp_color1, c_colorComponentRed))*(lp_progress - lp_minValue)/(lp_maxValue - lp_minValue));
        lv_g = (ColorGetComponent(lp_color1, c_colorComponentGreen)+(ColorGetComponent(lp_color2, c_colorComponentGreen)-ColorGetComponent(lp_color1, c_colorComponentGreen))*(lp_progress - lp_minValue)/(lp_maxValue - lp_minValue));
        lv_b = (ColorGetComponent(lp_color1, c_colorComponentBlue)+(ColorGetComponent(lp_color2, c_colorComponentBlue)-ColorGetComponent(lp_color1, c_colorComponentBlue))*(lp_progress - lp_minValue)/(lp_maxValue - lp_minValue));
        return Color(lv_r, lv_g, lv_b);
    }
    else if (auto6CC7C496_val == 3) {
        lv_middle = ((lp_minValue+lp_maxValue)/2);
        if ((lp_progress < lv_middle)) {
            return libSwaC_gf_ProgressColor(lp_minValue, lv_middle, lp_progress, lp_color1, lp_color2, Color(0,0,0), 2);
        }
        else if ((lp_progress == lv_middle)) {
            return lp_color2;
        }
        else if ((lp_progress > lv_middle)) {
            return libSwaC_gf_ProgressColor(lv_middle, lp_maxValue, lp_progress, lp_color2, lp_color3, Color(0,0,0), 2);
        }
    }
    else {
    }
    return lp_color1;
}

trigger auto_libSwaC_gf_DisplayArmyButton_Trigger = null;
bool auto_libSwaC_gf_DisplayArmyButton_lp_doDoNot;

void libSwaC_gf_DisplayArmyButton (bool lp_doDoNot) {
    auto_libSwaC_gf_DisplayArmyButton_lp_doDoNot = lp_doDoNot;

    if (auto_libSwaC_gf_DisplayArmyButton_Trigger == null) {
        auto_libSwaC_gf_DisplayArmyButton_Trigger = TriggerCreate("auto_libSwaC_gf_DisplayArmyButton_TriggerFunc");
    }

    TriggerExecute(auto_libSwaC_gf_DisplayArmyButton_Trigger, false, false);
}

bool auto_libSwaC_gf_DisplayArmyButton_TriggerFunc (bool testConds, bool runActions) {
    bool lp_doDoNot = auto_libSwaC_gf_DisplayArmyButton_lp_doDoNot;

    // Automatic Variable Declarations
    // Implementation
    if ((libSwaC_gv_zS_ArmyButton != c_invalidDialogControlId)) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypeFlash, "UIContainer/ConsoleUIContainer/ArmyButtonTipEffects");
    libSwaC_gv_zS_ArmyButtonTipPanel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ConsoleUIContainer/ArmyButton");
    libSwaC_gv_zS_ArmyButton = DialogControlLastCreated();
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, true);
    TriggerEnable(libSwaC_gt_ZS_ArmyButtonUsed, true);
    if ((lp_doDoNot == true)) {
        Wait(3.0, c_timeReal);
        TriggerQueueEnter();
        TriggerExecute(libSwaC_gt_ZS_FlashArmyButtonHelpTip, true, false);
        TriggerQueueExit();
    }

    return true;
}

trigger auto_libSwaC_gf_DisplayProgressBar_Trigger = null;
text auto_libSwaC_gf_DisplayProgressBar_lp_title;
int auto_libSwaC_gf_DisplayProgressBar_lp_min;
int auto_libSwaC_gf_DisplayProgressBar_lp_max;

void libSwaC_gf_DisplayProgressBar (text lp_title, int lp_min, int lp_max) {
    auto_libSwaC_gf_DisplayProgressBar_lp_title = lp_title;
    auto_libSwaC_gf_DisplayProgressBar_lp_min = lp_min;
    auto_libSwaC_gf_DisplayProgressBar_lp_max = lp_max;

    if (auto_libSwaC_gf_DisplayProgressBar_Trigger == null) {
        auto_libSwaC_gf_DisplayProgressBar_Trigger = TriggerCreate("auto_libSwaC_gf_DisplayProgressBar_TriggerFunc");
    }

    TriggerExecute(auto_libSwaC_gf_DisplayProgressBar_Trigger, false, false);
}

bool auto_libSwaC_gf_DisplayProgressBar_TriggerFunc (bool testConds, bool runActions) {
    text lp_title = auto_libSwaC_gf_DisplayProgressBar_lp_title;
    int lp_min = auto_libSwaC_gf_DisplayProgressBar_lp_min;
    int lp_max = auto_libSwaC_gf_DisplayProgressBar_lp_max;

    // Automatic Variable Declarations
    // Implementation
    if ((libSwaC_gv_zS_ProgressBarPanel == c_invalidDialogControlId)) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/ProgressUnitFrame");
        libSwaC_gv_zS_ProgressBarPanel = DialogControlLastCreated();
        DialogControlHookup(libSwaC_gv_zS_ProgressBarPanel, c_triggerControlTypeLabel, "NameLabel");
        libSwaC_gv_zS_ProgressBarLabelTitle = DialogControlLastCreated();
        DialogControlHookup(libSwaC_gv_zS_ProgressBarPanel, c_triggerControlTypeImage, "BarImage");
        libSwaC_gv_zS_ProgressBarImageBar = DialogControlLastCreated();
        DialogControlHookup(libSwaC_gv_zS_ProgressBarPanel, c_triggerControlTypeLabel, "LeftBarLabel");
        libSwaC_gv_zS_ProgressBarLabelBarLeft = DialogControlLastCreated();
        DialogControlHookup(libSwaC_gv_zS_ProgressBarPanel, c_triggerControlTypeLabel, "RightBarLabel");
        libSwaC_gv_zS_ProgressBarLabelBarRight = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    }

    libSwaC_gf_SetProgressBarTitle(lp_title);
    libSwaC_gf_SetProgressBarColor(Color(42.75, 68.24, 16.86));
    libSwaC_gf_SetProgressBarValueRange(lp_min, lp_max);
    DialogControlSetVisible(libSwaC_gv_zS_ProgressBarPanel, PlayerGroupAll(), true);
    libSwaC_gv_zS_ProgressBarShowing = true;
    while (true) {
        if ((libSwaC_gv_zS_ProgressBarPanel == c_invalidDialogControlId)) {
            return true;
        }

        if ((DialogControlIsVisible(libSwaC_gv_zS_ProgressBarPanel, 1) == true)) {
            libSwaC_gf_ZS_UpdateProgressBar();
        }

        Wait(0.25, c_timeGame);
    }
    return true;
}

void libSwaC_gf_SetProgressBarTitle (text lp_title) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libSwaC_gv_zS_ProgressBarLabelTitle, lp_title, PlayerGroupAll());
}

void libSwaC_gf_SetProgressBarValueRange (int lp_min, int lp_max) {
    // Automatic Variable Declarations
    // Implementation
    libSwaC_gv_zS_ProgressBarMin = lp_min;
    libSwaC_gv_zS_ProgressBarMax = lp_max;
}

void libSwaC_gf_SetProgressBarLabel (text lp_label) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libSwaC_gv_zS_ProgressBarLabelBarLeft, lp_label, PlayerGroupAll());
}

void libSwaC_gf_SetProgressBarProgress (int lp_progress) {
    // Automatic Variable Declarations
    // Implementation
    libSwaC_gv_zS_ProgressBarProgress = lp_progress;
}

void libSwaC_gf_SetProgressBarColor (color lp_color) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemColor(libSwaC_gv_zS_ProgressBarImageBar, lp_color, PlayerGroupAll());
}

void libSwaC_gf_ShowHideProgressBar (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    if ((libSwaC_gv_zS_ProgressBarPanel == c_invalidDialogControlId)) {
        return ;
    }

    if ((lp_showHide == true)) {
        libSwaC_gf_ZS_UpdateProgressBar();
    }

    DialogControlSetVisible(libSwaC_gv_zS_ProgressBarPanel, PlayerGroupAll(), lp_showHide);
}

void libSwaC_gf_ZS_UpdateProgressBar () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libSwaC_gv_zS_ProgressBarProgress > 0)) {
        DialogControlSetSize(libSwaC_gv_zS_ProgressBarImageBar, PlayerGroupAll(), FixedToInt((IntToFixed(libSwaC_gv_zSC_ProgressBarWidth) * (IntToFixed(libSwaC_gv_zS_ProgressBarProgress) / IntToFixed(libSwaC_gv_zS_ProgressBarMax)))), libSwaC_gv_zSC_ProgressBarHeight);
        DialogControlSetVisible(libSwaC_gv_zS_ProgressBarImageBar, PlayerGroupAll(), true);
    }
    else {
        DialogControlSetVisible(libSwaC_gv_zS_ProgressBarImageBar, PlayerGroupAll(), false);
    }
}

color libSwaC_gf_GetProgressBarColorCampaign () {
    // Automatic Variable Declarations
    // Implementation
    return Color(100.00, 61.57, 23.53);
}

int libSwaC_gf_ZS_BB_HPBarCurrentWidth () {
    // Variable Declarations
    fixed lv_current;
    fixed lv_max;
    int lv_width;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libSwaC_gv_zS_BB_Boss == null)) {
        lv_current = libSwaC_gv_zS_BB_CurrentValue;
        lv_max = libSwaC_gv_zS_BB_MaxValue;
    }
    else {
        lv_current = (UnitGetPropertyFixed(libSwaC_gv_zS_BB_Boss, c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(libSwaC_gv_zS_BB_Boss, c_unitPropShields, c_unitPropCurrent));
        lv_max = (UnitGetPropertyFixed(libSwaC_gv_zS_BB_Boss, c_unitPropLifeMax, c_unitPropCurrent) + UnitGetPropertyFixed(libSwaC_gv_zS_BB_Boss, c_unitPropShieldsMax, c_unitPropCurrent));
    }
    if ((lv_max <= 0.0)) {
        lv_max = 1.0;
    }

    if ((lv_current > lv_max)) {
        lv_current = lv_max;
    }

    lv_width = FixedToInt((224.0 * (lv_current / lv_max)));
    return lv_width;
}

text libSwaC_gf_ZS_BB_HPBarFormatLabel () {
    // Variable Declarations
    fixed lv_current;
    fixed lv_max;
    text lv_label;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libSwaC_gv_zS_BB_Boss == null)) {
        lv_current = libSwaC_gv_zS_BB_CurrentValue;
        lv_max = libSwaC_gv_zS_BB_MaxValue;
    }
    else {
        lv_current = (UnitGetPropertyFixed(libSwaC_gv_zS_BB_Boss, c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(libSwaC_gv_zS_BB_Boss, c_unitPropShields, c_unitPropCurrent));
        lv_max = (UnitGetPropertyFixed(libSwaC_gv_zS_BB_Boss, c_unitPropLifeMax, c_unitPropCurrent) + UnitGetPropertyFixed(libSwaC_gv_zS_BB_Boss, c_unitPropShieldsMax, c_unitPropCurrent));
    }
    lv_label = (IntToText(FixedToInt(lv_current)) + StringExternal("Param/Value/lib_SwaC_B6DC76CA") + IntToText(FixedToInt(lv_max)));
    return lv_label;
}

trigger auto_libSwaC_gf_ZS_BB_HPBarChange_Trigger = null;

void libSwaC_gf_ZS_BB_HPBarChange () {
    if (auto_libSwaC_gf_ZS_BB_HPBarChange_Trigger == null) {
        auto_libSwaC_gf_ZS_BB_HPBarChange_Trigger = TriggerCreate("auto_libSwaC_gf_ZS_BB_HPBarChange_TriggerFunc");
    }

    TriggerExecute(auto_libSwaC_gf_ZS_BB_HPBarChange_Trigger, false, false);
}

bool auto_libSwaC_gf_ZS_BB_HPBarChange_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_newWidth;
    int lv_width;
    int lv_damageBar;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_damageBar = c_invalidDialogControlId;

    // Implementation
    lv_newWidth = libSwaC_gf_ZS_BB_HPBarCurrentWidth();
    lv_width = (libSwaC_gv_zS_BB_HPOldWidth - lv_newWidth);
    libSwaC_gv_zS_BB_HPOldWidth = lv_newWidth;
    if ((lv_width > 0)) {
        DialogControlCreateInPanelFromTemplate(libSwaC_gv_zS_BB_Panel, c_triggerControlTypeImage, "HotS_GameUnitFrame/BossHealthBarDamageTemplate/DamageBar");
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorRight, libSwaC_gv_zS_BB_HpBackground, c_anchorRight, 0, 0);
        lv_damageBar = DialogControlLastCreated();
        DialogControlSetSize(lv_damageBar, PlayerGroupAll(), (libSwaC_gv_zS_BB_HPOldWidth + lv_width), 22);
        libNtve_gf_SetDialogItemRenderPriority(lv_damageBar, 511, PlayerGroupAll());
        DialogControlSetVisible(lv_damageBar, PlayerGroupAll(), true);
        Wait(1.0, c_timeReal);
        DialogControlFadeTransparency(lv_damageBar, PlayerGroupAll(), 1.0, 100.0);
        Wait(1.1, c_timeReal);
        DialogControlDestroy(lv_damageBar);
    }

    return true;
}

void libSwaC_gf_DisplaySingularBossBarSwarmCampaign (string lp_portrait, text lp_title, int lp_max) {
    // Automatic Variable Declarations
    // Implementation
    libSwaC_gv_zS_BB_Portraits = lp_portrait;
    libSwaC_gv_zS_BB_Title = lp_title;
    libSwaC_gv_zS_BB_Boss = null;
    libSwaC_gf_SetSingularBossBarMaximumValueSwarmCampaign(lp_max, true);
    libSwaC_gf_SetSingularBossBarCurrentValueSwarmCampaign(lp_max, true);
    libSwaC_gv_zS_BB_HPOldWidth = -1;
    TriggerEnable(libSwaC_gt_ZS_BB_MouseHoverText, true);
    if ((libSwaC_gv_zS_BB_Panel == c_invalidDialogControlId)) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/BossUnitFrame");
        libSwaC_gv_zS_BB_Panel = DialogControlLastCreated();
        DialogControlHookup(libSwaC_gv_zS_BB_Panel, c_triggerControlTypeImage, "IconImage");
        libSwaC_gv_zS_BB_PortraitImage = DialogControlLastCreated();
        DialogControlHookup(libSwaC_gv_zS_BB_Panel, c_triggerControlTypeLabel, "NameLabel");
        libSwaC_gv_zS_BB_TitleLabel = DialogControlLastCreated();
        DialogControlHookup(libSwaC_gv_zS_BB_Panel, c_triggerControlTypeImage, "HealthBarImage");
        libSwaC_gv_zS_BB_HpCurrentImage = DialogControlLastCreated();
        DialogControlHookup(libSwaC_gv_zS_BB_Panel, c_triggerControlTypeLabel, "HealthLabel");
        libSwaC_gv_zS_BB_HpLabel = DialogControlLastCreated();
        DialogControlHookup(libSwaC_gv_zS_BB_Panel, c_triggerControlTypeImage, "BarBackground");
        libSwaC_gv_zS_BB_HpBackground = DialogControlLastCreated();
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 510, PlayerGroupAll());
        DialogControlHookup(libSwaC_gv_zS_BB_Panel, c_triggerControlTypeImage, "BorderImage");
        libSwaC_gv_zS_BB_BorderImage = DialogControlLastCreated();
        libNtve_gf_SetDialogItemAcceptMouse(libSwaC_gv_zS_BB_BorderImage, true, PlayerGroupAll());
    }

    DialogControlSetVisible(libSwaC_gv_zS_BB_Panel, PlayerGroupAll(), true);
    libSwaC_gf_RefreshSingularBossBarSwarmCampaign();
}

void libSwaC_gf_SetSingularBossBarMaximumValueSwarmCampaign (int lp_max, bool lp_refresh) {
    // Automatic Variable Declarations
    // Implementation
    libSwaC_gv_zS_BB_MaxValue = IntToFixed(lp_max);
    if ((libSwaC_gv_zS_BB_MaxValue <= 0.0)) {
        libSwaC_gv_zS_BB_MaxValue = 1.0;
    }

    libSwaC_gv_zS_BB_Boss = null;
    if ((lp_refresh == true)) {
        libSwaC_gf_RefreshSingularBossBarSwarmCampaign();
    }

}

void libSwaC_gf_SetSingularBossBarCurrentValueSwarmCampaign (int lp_current, bool lp_refresh) {
    // Automatic Variable Declarations
    // Implementation
    libSwaC_gv_zS_BB_CurrentValue = IntToFixed(lp_current);
    if ((libSwaC_gv_zS_BB_CurrentValue < 0.0)) {
        libSwaC_gv_zS_BB_CurrentValue = 0.0;
    }

    libSwaC_gv_zS_BB_Boss = null;
    if ((lp_refresh == true)) {
        libSwaC_gf_RefreshSingularBossBarSwarmCampaign();
    }

}

void libSwaC_gf_SetSingularBossBarBossSwarmCampaign (unit lp_boss, bool lp_refresh) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_boss != null)) {
        TriggerEnable(libSwaC_gt_ZS_BB_BossHPChanged, true);
        TriggerEnable(libSwaC_gt_ZS_BB_MouseHoverText, true);
    }

    libSwaC_gv_zS_BB_Boss = lp_boss;
    libSwaC_gv_zS_BB_MaxValue = 0.0;
    libSwaC_gv_zS_BB_CurrentValue = 0.0;
    if ((lp_refresh == true)) {
        libSwaC_gf_RefreshSingularBossBarSwarmCampaign();
    }

}

void libSwaC_gf_ShowHideSingularBossBarSwarmCampaign (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    if ((libSwaC_gv_zS_BB_Panel == c_invalidDialogControlId)) {
        return ;
    }

    DialogControlSetVisible(libSwaC_gv_zS_BB_Panel, PlayerGroupAll(), lp_showHide);
}

void libSwaC_gf_RefreshSingularBossBarSwarmCampaign () {
    // Automatic Variable Declarations
    // Implementation
    if ((libSwaC_gv_zS_BB_Panel == c_invalidDialogControlId)) {
        return ;
    }

    libNtve_gf_SetDialogItemImage(libSwaC_gv_zS_BB_PortraitImage, libSwaC_gv_zS_BB_Portraits, PlayerGroupSingle(1));
    libNtve_gf_SetDialogItemText(libSwaC_gv_zS_BB_TitleLabel, libSwaC_gv_zS_BB_Title, PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libSwaC_gv_zS_BB_HpLabel, libSwaC_gf_ZS_BB_HPBarFormatLabel(), PlayerGroupAll());
    DialogControlSetSize(libSwaC_gv_zS_BB_HpCurrentImage, PlayerGroupSingle(1), libSwaC_gf_ZS_BB_HPBarCurrentWidth(), 22);
    libSwaC_gf_ZS_BB_HPBarChange();
}

void libSwaC_gf_SetSingularBossBarColor (color lp_color) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemColor(libSwaC_gv_zS_BB_HpCurrentImage, lp_color, PlayerGroupAll());
}

void libSwaC_gf_SetSingularBossBarTitleColor (color lp_color) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemColor(libSwaC_gv_zS_BB_TitleLabel, lp_color, PlayerGroupAll());
}

void libSwaC_gf_SetKerriganRevivable (bool lp_revivable) {
    // Automatic Variable Declarations
    // Implementation
    libSwaC_gv_zS_SwarmHeroUIKerriganRevivable = lp_revivable;
}

void libSwaC_gf_SetHeroPanelUnit (int lp_index, unit lp_heroUnit) {
    // Automatic Variable Declarations
    string autoF0C69484_val;
    unit auto340C25E2_val;
    int auto408967ED_val;

    // Implementation
    libSwaC_gv_zS_SwarmHeroUIUnit[lp_index] = lp_heroUnit;
    libSwaC_gv_zS_SwarmHeroUIType[lp_index] = libSwaC_ge_CampaignHeroes_None;
    if ((lp_heroUnit == libSwaC_gv_zS_Kerrigan)) {
        if ((libSwaC_gf_KerriganPhaseCheck(libSwaC_ge_KerriganPhase_KerriganPhaseGhost) == true)) {
            libSwaC_gv_zS_SwarmHeroUIIcon[lp_index] = "Assets\\Textures\\btn-hero-kerriganghost.dds";
        }
        else {
            libSwaC_gv_zS_SwarmHeroUIIcon[lp_index] = "Assets\\Textures\\btn-hero-kerriganqueenofblades.dds";
        }
        libSwaC_gv_zS_SwarmHeroUIType[lp_index] = libSwaC_ge_CampaignHeroes_Kerrigan;
        libSwaC_gv_zS_SwarmHeroUIShowLevel[lp_index] = true;
    }
    else {
        autoF0C69484_val = UnitGetType(lp_heroUnit);
        if (autoF0C69484_val == "LarvalQueen") {
            libSwaC_gv_zS_SwarmHeroUIIcon[lp_index] = "Assets\\Textures\\btn-hero-larvalqueen.dds";
            libSwaC_gv_zS_SwarmHeroUIShowLevel[lp_index] = false;
        }
        else if (autoF0C69484_val == "SwarmQueen") {
            libSwaC_gv_zS_SwarmHeroUIIcon[lp_index] = "Assets\\Textures\\btn-hero-niadra.dds";
            libSwaC_gv_zS_SwarmHeroUIShowLevel[lp_index] = false;
        }
        else if (autoF0C69484_val == "InfestedStukov") {
            libSwaC_gv_zS_SwarmHeroUIIcon[lp_index] = "Assets\\Textures\\btn-hero-infestedstukov.dds";
            libSwaC_gv_zS_SwarmHeroUIType[lp_index] = libSwaC_ge_CampaignHeroes_Stukov;
            libSwaC_gv_zS_SwarmHeroUIShowLevel[lp_index] = false;
        }
        else if (autoF0C69484_val == "SJHyperion") {
            libSwaC_gv_zS_SwarmHeroUIIcon[lp_index] = "Assets\\Textures\\btn-hero-hyperion.dds";
            libSwaC_gv_zS_SwarmHeroUIShowLevel[lp_index] = true;
        }
        else if (autoF0C69484_val == "Dehaka") {
            libSwaC_gv_zS_SwarmHeroUIIcon[lp_index] = "Assets\\Textures\\btn-hero-dehaka.dds";
            libSwaC_gv_zS_SwarmHeroUIType[lp_index] = libSwaC_ge_CampaignHeroes_Dehaka;
            libSwaC_gv_zS_SwarmHeroUIShowLevel[lp_index] = false;
        }
        else {
        }
    }
    libSwaC_gf_ZS_UpdateHeroPanel(lp_index);
    if ((libSwaC_gv_zS_SwarmHeroUIUnit[lp_index] == null)) {
        if ((libSwaC_gv_zS_SwarmHeroUIUnit[1] == null) && (libSwaC_gv_zS_SwarmHeroUIUnit[2] == null)) {
            TriggerEnable(libSwaC_gt_ZS_HeroPanelUpdate, false);
            TriggerEnable(libSwaC_gt_ZS_SwarmHeroUIUnitDamaged, false);
        }

    }
    else {
        TriggerEnable(libSwaC_gt_ZS_HeroPanelUpdate, true);
        TriggerEnable(libSwaC_gt_ZS_SwarmHeroUIUnitDamaged, true);
        TriggerEnable(libSwaC_gt_ZS_MouseHoverText, true);
        TriggerEnable(libSwaC_gt_ZS_SwarmHeroUIUnitVitalChange, true);
        auto340C25E2_val = lp_heroUnit;
        if (auto340C25E2_val == libSwaC_gv_zS_Kerrigan) {
            libNtve_gf_SetDialogItemAnimationDuration(libSwaC_gv_zS_SwarmHeroUIDialogCooldownImage[lp_index], libSwaC_gv_zS_ReviveCooldownTimeKerrigan, PlayerGroupAll());
        }
        else if (auto340C25E2_val == libSwaC_gv_zS_Stukov) {
            libNtve_gf_SetDialogItemAnimationDuration(libSwaC_gv_zS_SwarmHeroUIDialogCooldownImage[lp_index], libSwaC_gv_zS_ReviveCooldownTimeStukov, PlayerGroupAll());
        }
        else if (auto340C25E2_val == libSwaC_gv_zS_Dehaka) {
            libNtve_gf_SetDialogItemAnimationDuration(libSwaC_gv_zS_SwarmHeroUIDialogCooldownImage[lp_index], libSwaC_gv_zS_ReviveCooldownTimeDehaka, PlayerGroupAll());
        }
        else {
        }
        auto408967ED_val = lp_index;
        if (auto408967ED_val == 1) {
            libNtve_gf_SetDialogItemHotkey(libSwaC_gv_zS_SwarmHeroUIDialogButton[1], c_hotkeyHeroSelect0, PlayerGroupAll());
        }
        else if (auto408967ED_val == 2) {
            libNtve_gf_SetDialogItemHotkey(libSwaC_gv_zS_SwarmHeroUIDialogButton[2], c_hotkeyHeroSelect1, PlayerGroupAll());
        }
        else {
        }
    }
}

void libSwaC_gf_ZS_ShowHideHeroPanel (bool lp_showHide) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int autoB1A14525_ae = 2;
    const int autoB1A14525_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (autoB1A14525_ai >= 0 && lv_index <= autoB1A14525_ae) || (autoB1A14525_ai < 0 && lv_index >= autoB1A14525_ae) ) ; lv_index += autoB1A14525_ai ) {
        if ((libSwaC_gv_zS_SwarmHeroUIPanel[lv_index] != c_invalidDialogControlId)) {
            DialogControlSetVisible(libSwaC_gv_zS_SwarmHeroUIPanel[lv_index], PlayerGroupAll(), lp_showHide);
        }

    }
}

void libSwaC_gf_ZS_CreateHeroPanel (int lp_index) {
    // Automatic Variable Declarations
    int auto7C77441F_val;

    // Implementation
    if ((lp_index == 1)) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/HeroUnitFrame");
    }
    else {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/SecondaryHeroUnitFrame");
    }
    libSwaC_gv_zS_SwarmHeroUIPanel[lp_index] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlHookup(libSwaC_gv_zS_SwarmHeroUIPanel[lp_index], c_triggerControlTypeImage, "BorderImage");
    libSwaC_gv_zS_SwarmHeroUIDialogBorderImage[lp_index] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlHookup(libSwaC_gv_zS_SwarmHeroUIPanel[lp_index], c_triggerControlTypeImage, "BorderNoEnergyImage");
    libSwaC_gv_zS_SwarmHeroUIDialogBorderImageNoEnergy[lp_index] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlHookup(libSwaC_gv_zS_SwarmHeroUIPanel[lp_index], c_triggerControlTypeImage, "LevelBox");
    libSwaC_gv_zS_SwarmHeroUIDialogLevelBox[lp_index] = DialogControlLastCreated();
    DialogControlSetVisible(libSwaC_gv_zS_SwarmHeroUIDialogLevelBox[lp_index], PlayerGroupAll(), true);
    DialogControlHookup(libSwaC_gv_zS_SwarmHeroUIPanel[lp_index], c_triggerControlTypeImage, "CooldownImage");
    libSwaC_gv_zS_SwarmHeroUIDialogCooldownImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_SwarmHeroUIPanel[lp_index], c_triggerControlTypeImage, "DamageTakenImage");
    libSwaC_gv_zS_SwarmHeroUIDialogDamageTakenImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_SwarmHeroUIPanel[lp_index], c_triggerControlTypeImage, "EnergyBarImage");
    libSwaC_gv_zS_SwarmHeroUIDialogEnergyBarImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_SwarmHeroUIPanel[lp_index], c_triggerControlTypeImage, "EnergyBarBackground");
    libSwaC_gv_zS_SwarmHeroUIDialogEnergyBarBackground[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_SwarmHeroUIPanel[lp_index], c_triggerControlTypeImage, "HealthBarImage");
    libSwaC_gv_zS_SwarmHeroUIDialogHealthBarImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_SwarmHeroUIPanel[lp_index], c_triggerControlTypeImage, "BarBackground");
    libSwaC_gv_zS_SwarmHeroUIDialogHealthBarBackground[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_SwarmHeroUIPanel[lp_index], c_triggerControlTypeImage, "IconImage");
    libSwaC_gv_zS_SwarmHeroUIDialogIconImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_SwarmHeroUIPanel[lp_index], c_triggerControlTypeLabel, "DamageTakenLabel");
    libSwaC_gv_zS_SwarmHeroUIDialogDamageTakenLabel[lp_index] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(libSwaC_gv_zS_SwarmHeroUIDialogDamageTakenLabel[lp_index], StringToText(""), PlayerGroupAll());
    DialogControlHookup(libSwaC_gv_zS_SwarmHeroUIPanel[lp_index], c_triggerControlTypeLabel, "EnergyLabel");
    libSwaC_gv_zS_SwarmHeroUIDialogEnergyLabel[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_SwarmHeroUIPanel[lp_index], c_triggerControlTypeLabel, "HealthLabel");
    libSwaC_gv_zS_SwarmHeroUIDialogHealthLabel[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_SwarmHeroUIPanel[lp_index], c_triggerControlTypeLabel, "LevelLabel");
    libSwaC_gv_zS_SwarmHeroUIDialogLevelLabel[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_SwarmHeroUIPanel[lp_index], c_triggerControlTypeLabel, "NameLabel");
    libSwaC_gv_zS_SwarmHeroUIDialogNameLabel[lp_index] = DialogControlLastCreated();
    if ((lp_index == 1)) {
        DialogControlHookupStandard(c_triggerControlTypePortrait, "UIContainer/ConsoleUIContainer/HeroUnitFrameLevelUpPortrait");
        libSwaC_gv_zS_SwarmHeroUIDialogLevelupPortrait[lp_index] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemModel(DialogControlLastCreated(), "KerriganLevelUpPortrait", PlayerGroupAll());
        DialogControlSetVisible(libSwaC_gv_zS_SwarmHeroUIDialogLevelupPortrait[1], PlayerGroupAll(), false);
    }

    auto7C77441F_val = lp_index;
    if (auto7C77441F_val == 1) {
        DialogControlHookupStandard(c_triggerControlTypeUnitTarget, "UIContainer/ConsoleUIContainer/HeroUnitFrame/UnitTargetFrame");
        libNtve_gf_SetDialogItemHotkey(DialogControlLastCreated(), c_hotkeyHeroSelect0, PlayerGroupAll());
    }
    else if (auto7C77441F_val == 2) {
        DialogControlHookupStandard(c_triggerControlTypeUnitTarget, "UIContainer/ConsoleUIContainer/SecondaryHeroUnitFrame/UnitTargetFrame");
        libNtve_gf_SetDialogItemHotkey(DialogControlLastCreated(), c_hotkeyHeroSelect1, PlayerGroupAll());
    }
    else {
    }
    libSwaC_gv_zS_SwarmHeroUIDialogButton[lp_index] = DialogControlLastCreated();
    DialogControlSetVisible(libSwaC_gv_zS_SwarmHeroUIDialogDamageTakenImage[lp_index], PlayerGroupAll(), false);
    DialogControlSetVisible(libSwaC_gv_zS_SwarmHeroUIDialogCooldownImage[lp_index], PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemRenderPriority(libSwaC_gv_zS_SwarmHeroUIDialogEnergyBarBackground[lp_index], 510, PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(libSwaC_gv_zS_SwarmHeroUIDialogHealthBarBackground[lp_index], 510, PlayerGroupAll());
}

void libSwaC_gf_ZS_UpdateHeroPanel (int lp_index) {
    // Variable Declarations
    text lv_hotkey;
    int lv_life;
    int lv_energy;

    // Automatic Variable Declarations
    int autoD31592C2_val;

    // Variable Initialization

    // Implementation
    if ((libSwaC_gv_zS_SwarmHeroUIUnit[lp_index] == null)) {
        if ((libSwaC_gv_zS_SwarmHeroUIPanel[lp_index] != c_invalidDialogControlId)) {
            DialogControlSetVisible(libSwaC_gv_zS_SwarmHeroUIPanel[lp_index], PlayerGroupAll(), false);
        }

        return ;
    }

    if ((libSwaC_gv_zS_SwarmHeroUIPanel[lp_index] == c_invalidDialogControlId)) {
        libSwaC_gf_ZS_CreateHeroPanel(lp_index);
    }

    DialogControlSetVisible(libSwaC_gv_zS_SwarmHeroUIPanel[lp_index], PlayerGroupAll(), true);
    autoD31592C2_val = lp_index;
    if (autoD31592C2_val == 1) {
        lv_hotkey = StringExternal("Param/Value/lib_SwaC_2E28A610");
    }
    else if (autoD31592C2_val == 2) {
        lv_hotkey = StringExternal("Param/Value/lib_SwaC_980657DB");
    }
    else {
    }
    TextExpressionSetToken("Param/Expression/lib_SwaC_8EFD9D26", "A", UnitTypeGetName(UnitGetType(libSwaC_gv_zS_SwarmHeroUIUnit[lp_index])));
    TextExpressionSetToken("Param/Expression/lib_SwaC_8EFD9D26", "B", lv_hotkey);
    libNtve_gf_SetDialogItemText(libSwaC_gv_zS_SwarmHeroUIDialogNameLabel[lp_index], TextExpressionAssemble("Param/Expression/lib_SwaC_8EFD9D26"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(libSwaC_gv_zS_SwarmHeroUIDialogIconImage[lp_index], libSwaC_gv_zS_SwarmHeroUIIcon[lp_index], PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/lib_SwaC_43F48F90", "CurrentLife", FixedToText(UnitGetPropertyFixed(libSwaC_gv_zS_SwarmHeroUIUnit[lp_index], c_unitPropLife, c_unitPropCurrent), 0));
    TextExpressionSetToken("Param/Expression/lib_SwaC_43F48F90", "MaxLife", FixedToText(UnitGetPropertyFixed(libSwaC_gv_zS_SwarmHeroUIUnit[lp_index], c_unitPropLifeMax, c_unitPropCurrent), 0));
    libNtve_gf_SetDialogItemText(libSwaC_gv_zS_SwarmHeroUIDialogHealthLabel[lp_index], TextExpressionAssemble("Param/Expression/lib_SwaC_43F48F90"), PlayerGroupAll());
    lv_life = FixedToInt((UnitGetPropertyFixed(libSwaC_gv_zS_SwarmHeroUIUnit[lp_index], c_unitPropLifePercent, c_unitPropCurrent) * 2.24));
    if ((lv_life > 0)) {
        DialogControlSetSize(libSwaC_gv_zS_SwarmHeroUIDialogHealthBarImage[lp_index], PlayerGroupAll(), lv_life, 22);
        DialogControlSetVisible(libSwaC_gv_zS_SwarmHeroUIDialogHealthBarImage[lp_index], PlayerGroupAll(), true);
    }
    else {
        DialogControlSetVisible(libSwaC_gv_zS_SwarmHeroUIDialogHealthBarImage[lp_index], PlayerGroupAll(), false);
    }
    TextExpressionSetToken("Param/Expression/lib_SwaC_3E6EDBB0", "CurrentEnergy", FixedToText(UnitGetPropertyFixed(libSwaC_gv_zS_SwarmHeroUIUnit[lp_index], c_unitPropEnergy, c_unitPropCurrent), 0));
    TextExpressionSetToken("Param/Expression/lib_SwaC_3E6EDBB0", "MaxEnergy", FixedToText(UnitGetPropertyFixed(libSwaC_gv_zS_SwarmHeroUIUnit[lp_index], c_unitPropEnergyMax, c_unitPropCurrent), 0));
    libNtve_gf_SetDialogItemText(libSwaC_gv_zS_SwarmHeroUIDialogEnergyLabel[lp_index], TextExpressionAssemble("Param/Expression/lib_SwaC_3E6EDBB0"), PlayerGroupAll());
    if ((UnitGetPropertyFixed(libSwaC_gv_zS_SwarmHeroUIUnit[lp_index], c_unitPropEnergyMax, c_unitPropCurrent) == 0)) {
        lv_energy = 0;
        DialogControlSetVisible(libSwaC_gv_zS_SwarmHeroUIDialogBorderImageNoEnergy[lp_index], PlayerGroupAll(), true);
        DialogControlSetVisible(libSwaC_gv_zS_SwarmHeroUIDialogBorderImage[lp_index], PlayerGroupAll(), false);
        DialogControlSetVisible(libSwaC_gv_zS_SwarmHeroUIDialogEnergyBarBackground[lp_index], PlayerGroupAll(), false);
    }
    else {
        lv_energy = FixedToInt((UnitGetPropertyFixed(libSwaC_gv_zS_SwarmHeroUIUnit[lp_index], c_unitPropEnergyPercent, c_unitPropCurrent) * 2.24));
        DialogControlSetVisible(libSwaC_gv_zS_SwarmHeroUIDialogBorderImage[lp_index], PlayerGroupAll(), true);
        DialogControlSetVisible(libSwaC_gv_zS_SwarmHeroUIDialogEnergyBarBackground[lp_index], PlayerGroupAll(), true);
    }
    if ((lv_energy > 0)) {
        DialogControlSetSize(libSwaC_gv_zS_SwarmHeroUIDialogEnergyBarImage[lp_index], PlayerGroupAll(), lv_energy, 9);
        DialogControlSetVisible(libSwaC_gv_zS_SwarmHeroUIDialogEnergyBarImage[lp_index], PlayerGroupAll(), true);
    }
    else {
        DialogControlSetVisible(libSwaC_gv_zS_SwarmHeroUIDialogEnergyBarImage[lp_index], PlayerGroupAll(), false);
    }
    if ((libSwaC_gv_zS_SwarmHeroUIShowLevel[lp_index] == true)) {
        if ((libSwaC_gv_zS_SwarmHeroUIUnit[lp_index] == libSwaC_gv_zS_Kerrigan)) {
            libNtve_gf_SetDialogItemText(libSwaC_gv_zS_SwarmHeroUIDialogLevelLabel[lp_index], IntToText(libSwaC_gv_zS_KerriganLevel), PlayerGroupAll());
        }
        else {
            if ((UnitGetType(libSwaC_gv_zS_SwarmHeroUIUnit[lp_index]) == "SJHyperion")) {
                libNtve_gf_SetDialogItemText(libSwaC_gv_zS_SwarmHeroUIDialogLevelLabel[lp_index], IntToText(UnitLevel(libSwaC_gv_zS_SwarmHeroUIUnit[lp_index])), PlayerGroupAll());
            }

        }
    }
    else {
        libNtve_gf_SetDialogItemText(libSwaC_gv_zS_SwarmHeroUIDialogLevelLabel[lp_index], StringToText(""), PlayerGroupAll());
        DialogControlSetVisible(libSwaC_gv_zS_SwarmHeroUIDialogLevelBox[lp_index], PlayerGroupAll(), false);
    }
    if ((libSwaC_gv_zS_SwarmHeroUIDamageTimer[lp_index] > 0.0)) {
        libSwaC_gv_zS_SwarmHeroUIDamageTimer[lp_index] -= libSwaC_gv_zS_SwarmHeroUIUpdateFrequency;
        if ((libSwaC_gv_zS_SwarmHeroUIDamageTimer[lp_index] <= 0.0)) {
            DialogControlSetVisible(libSwaC_gv_zS_SwarmHeroUIDialogDamageTakenLabel[lp_index], PlayerGroupAll(), false);
            DialogControlFadeTransparency(libSwaC_gv_zS_SwarmHeroUIDialogDamageTakenImage[lp_index], PlayerGroupAll(), 1.0, 100.0);
        }

    }

    if ((UnitIsAlive(libSwaC_gv_zS_SwarmHeroUIUnit[lp_index]) == false)) {
        if ((libSwaC_gv_zS_SwarmHeroUIUnit[lp_index] == libSwaC_gv_zS_Kerrigan) && (libSwaC_gv_zS_SwarmHeroUIKerriganRevivable == true) && (libSwaC_gf_CurrentMap() != "ZLab2") && (libSwaC_gf_CurrentMap() != "ZSpace2") && (libSwaC_gf_CurrentMap() != "ZZerus3")) {
            libNtve_gf_SetDialogItemAnimationTime(libSwaC_gv_zS_SwarmHeroUIDialogCooldownImage[lp_index], (libSwaC_gv_zS_ReviveCooldownTimeKerrigan - PlayerGetCooldown(1, libSwaC_gv_zSC_HeroReviveLinkKerrigan)), PlayerGroupAll());
            DialogControlSetVisible(libSwaC_gv_zS_SwarmHeroUIDialogCooldownImage[lp_index], PlayerGroupAll(), true);
        }
        else if ((libSwaC_gv_zS_SwarmHeroUIUnit[lp_index] == libSwaC_gv_zS_Dehaka)) {
            libNtve_gf_SetDialogItemAnimationTime(libSwaC_gv_zS_SwarmHeroUIDialogCooldownImage[lp_index], (libSwaC_gv_zS_ReviveCooldownTimeDehaka - PlayerGetCooldown(1, libSwaC_gv_zSC_HeroReviveLinkDehaka)), PlayerGroupAll());
            DialogControlSetVisible(libSwaC_gv_zS_SwarmHeroUIDialogCooldownImage[lp_index], PlayerGroupAll(), true);
        }
        else if ((libSwaC_gv_zS_SwarmHeroUIUnit[lp_index] == libSwaC_gv_zS_Stukov)) {
            libNtve_gf_SetDialogItemAnimationTime(libSwaC_gv_zS_SwarmHeroUIDialogCooldownImage[lp_index], (libSwaC_gv_zS_ReviveCooldownTimeStukov - PlayerGetCooldown(1, libSwaC_gv_zSC_HeroReviveLinkStukov)), PlayerGroupAll());
            DialogControlSetVisible(libSwaC_gv_zS_SwarmHeroUIDialogCooldownImage[lp_index], PlayerGroupAll(), true);
        }
        else if (true) {
            DialogControlSetVisible(libSwaC_gv_zS_SwarmHeroUIDialogCooldownImage[lp_index], PlayerGroupAll(), false);
        }
        if ((UnitGetPropertyFixed(libSwaC_gv_zS_SwarmHeroUIUnit[lp_index], c_unitPropEnergyMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(libSwaC_gv_zS_SwarmHeroUIDialogEnergyBarImage[lp_index], PlayerGroupAll(), false);
        }

    }
    else {
        DialogControlSetVisible(libSwaC_gv_zS_SwarmHeroUIDialogCooldownImage[lp_index], PlayerGroupAll(), false);
    }
    if ((UnitIsAlive(libSwaC_gv_zS_SwarmHeroUIUnit[lp_index]) == true)) {
        libNtve_gf_SetDialogItemUnit(libSwaC_gv_zS_SwarmHeroUIDialogButton[lp_index], libSwaC_gv_zS_SwarmHeroUIUnit[lp_index], PlayerGroupAll());
    }
    else {
        if ((libSwaC_gv_zS_SwarmHeroUIUnit[lp_index] == libSwaC_gv_zS_Kerrigan) && (UnitIsAlive(libSwaC_gv_zS_HeroReviverKerrigan) == true)) {
            libNtve_gf_SetDialogItemUnit(libSwaC_gv_zS_SwarmHeroUIDialogButton[lp_index], libSwaC_gv_zS_HeroReviverKerrigan, PlayerGroupAll());
        }
        else if ((libSwaC_gv_zS_SwarmHeroUIUnit[lp_index] == libSwaC_gv_zS_Dehaka) && (UnitIsAlive(libSwaC_gv_zS_HeroReviverDehaka) == true)) {
            libNtve_gf_SetDialogItemUnit(libSwaC_gv_zS_SwarmHeroUIDialogButton[lp_index], libSwaC_gv_zS_HeroReviverKerrigan, PlayerGroupAll());
        }
        else if ((libSwaC_gv_zS_SwarmHeroUIUnit[lp_index] == libSwaC_gv_zS_Stukov) && (UnitIsAlive(libSwaC_gv_zS_HeroReviverStukov) == true)) {
            libNtve_gf_SetDialogItemUnit(libSwaC_gv_zS_SwarmHeroUIDialogButton[lp_index], libSwaC_gv_zS_HeroReviverKerrigan, PlayerGroupAll());
        }
    }
}

trigger auto_libSwaC_gf_ZS_PlayKerriganHeroPanelLevelUpEffect_Trigger = null;

void libSwaC_gf_ZS_PlayKerriganHeroPanelLevelUpEffect () {
    if (auto_libSwaC_gf_ZS_PlayKerriganHeroPanelLevelUpEffect_Trigger == null) {
        auto_libSwaC_gf_ZS_PlayKerriganHeroPanelLevelUpEffect_Trigger = TriggerCreate("auto_libSwaC_gf_ZS_PlayKerriganHeroPanelLevelUpEffect_TriggerFunc");
    }

    TriggerExecute(auto_libSwaC_gf_ZS_PlayKerriganHeroPanelLevelUpEffect_Trigger, false, false);
}

bool auto_libSwaC_gf_ZS_PlayKerriganHeroPanelLevelUpEffect_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_hotkey;
    int lv_life;
    int lv_energy;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((libSwaC_gv_zS_SwarmHeroUIUnit[1] == null) || (libSwaC_gv_zS_SwarmHeroUIUnit[1] != libSwaC_gv_zS_Kerrigan) || (libSwaC_gv_zS_SwarmHeroUIDialogLevelupPortrait[1] == c_invalidDialogControlId))) {
        return true;
    }

    if ((libSwaC_gv_zS_KerriganHeroPanelLevelUpEffectPlaying == true)) {
        return true;
    }

    libSwaC_gv_zS_KerriganHeroPanelLevelUpEffectPlaying = true;
    libNtve_gf_ClearPortraitAnimation(PortraitGetTriggerControl(libSwaC_gv_zS_SwarmHeroUIDialogLevelupPortrait[1]), "TriggerPortraitAnim");
    DialogControlSetVisible(libSwaC_gv_zS_SwarmHeroUIDialogLevelupPortrait[1], PlayerGroupAll(), true);
    ActorSend(ActorFromPortrait(PortraitGetTriggerControl(libSwaC_gv_zS_SwarmHeroUIDialogLevelupPortrait[1])), "AnimBlendTimeApply 0.000000");
    libNtve_gf_PortraitSetAnim(PortraitGetTriggerControl(libSwaC_gv_zS_SwarmHeroUIDialogLevelupPortrait[1]), "Birth", "TriggerPortraitAnim", 0, 0.0);
    Wait(2.0, c_timeGame);
    DialogControlSetVisible(libSwaC_gv_zS_SwarmHeroUIDialogLevelupPortrait[1], PlayerGroupAll(), false);
    libSwaC_gv_zS_KerriganHeroPanelLevelUpEffectPlaying = false;
    return true;
}

unit libSwaC_gf_ZS_HeroReviveCocoon (int lp_heroType) {
    // Automatic Variable Declarations
    int autoAFD1BBF2_val;

    // Implementation
    autoAFD1BBF2_val = lp_heroType;
    if (autoAFD1BBF2_val == libSwaC_ge_CampaignHeroes_Kerrigan) {
        return libSwaC_gv_zS_HeroReviverKerrigan;
    }
    else if (autoAFD1BBF2_val == libSwaC_ge_CampaignHeroes_Stukov) {
        return libSwaC_gv_zS_HeroReviverStukov;
    }
    else if (autoAFD1BBF2_val == libSwaC_ge_CampaignHeroes_Dehaka) {
        return libSwaC_gv_zS_HeroReviverDehaka;
    }
    else {
    }
    return null;
}

void libSwaC_gf_SetHeroReviverCocoon (int lp_heroType, unit lp_cocoon) {
    // Automatic Variable Declarations
    int auto5345CB9F_val;

    // Implementation
    auto5345CB9F_val = lp_heroType;
    if (auto5345CB9F_val == libSwaC_ge_CampaignHeroes_Kerrigan) {
        libSwaC_gv_zS_HeroReviverKerrigan = lp_cocoon;
    }
    else if (auto5345CB9F_val == libSwaC_ge_CampaignHeroes_Stukov) {
        libSwaC_gv_zS_HeroReviverStukov = lp_cocoon;
    }
    else if (auto5345CB9F_val == libSwaC_ge_CampaignHeroes_Dehaka) {
        libSwaC_gv_zS_HeroReviverDehaka = lp_cocoon;
    }
    else {
    }
}

void libSwaC_gf_CreateObjectivePing (bool lp_objectiveType, point lp_position, text lp_tooltip) {
    // Variable Declarations
    color lv_color;
    fixed lv_scale;
    string lv_model;

    // Automatic Variable Declarations
    bool auto767876CD_val;

    // Variable Initialization
    lv_color = Color(0,0,0);

    // Implementation
    auto767876CD_val = lp_objectiveType;
    if (auto767876CD_val == true) {
        lv_color = Color(0.00, 100.00, 0.00);
        lv_scale = 1.0;
        lv_model = "PingObjective";
    }
    else if (auto767876CD_val == false) {
        lv_color = Color(100.00, 100.00, 0.00);
        lv_scale = 0.8;
        lv_model = "PingBonus";
    }
    else {
    }
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), lv_model, lp_position, lv_color, 0.0, 270.0);
    PingSetScale(PingLastCreated(), lv_scale);
    PingSetTooltip(PingLastCreated(), lp_tooltip);
    TriggerExecute(libSwaC_gt_SwarmPingSound, true, false);
}

trigger auto_libSwaC_gf_PingMinimapCampaign_Trigger = null;
playergroup auto_libSwaC_gf_PingMinimapCampaign_lp_players;
point auto_libSwaC_gf_PingMinimapCampaign_lp_pos;
fixed auto_libSwaC_gf_PingMinimapCampaign_lp_dur;
color auto_libSwaC_gf_PingMinimapCampaign_lp_color;

void libSwaC_gf_PingMinimapCampaign (playergroup lp_players, point lp_pos, fixed lp_dur, color lp_color) {
    auto_libSwaC_gf_PingMinimapCampaign_lp_players = lp_players;
    auto_libSwaC_gf_PingMinimapCampaign_lp_pos = lp_pos;
    auto_libSwaC_gf_PingMinimapCampaign_lp_dur = lp_dur;
    auto_libSwaC_gf_PingMinimapCampaign_lp_color = lp_color;

    if (auto_libSwaC_gf_PingMinimapCampaign_Trigger == null) {
        auto_libSwaC_gf_PingMinimapCampaign_Trigger = TriggerCreate("auto_libSwaC_gf_PingMinimapCampaign_TriggerFunc");
    }

    TriggerExecute(auto_libSwaC_gf_PingMinimapCampaign_Trigger, false, false);
}

bool auto_libSwaC_gf_PingMinimapCampaign_TriggerFunc (bool testConds, bool runActions) {
    playergroup lp_players = auto_libSwaC_gf_PingMinimapCampaign_lp_players;
    point lp_pos = auto_libSwaC_gf_PingMinimapCampaign_lp_pos;
    fixed lp_dur = auto_libSwaC_gf_PingMinimapCampaign_lp_dur;
    color lp_color = auto_libSwaC_gf_PingMinimapCampaign_lp_color;

    // Automatic Variable Declarations
    playergroup auto5D3E40F6_g;
    int auto5D3E40F6_var;
    string auto2B44BE14_val;

    // Implementation
    auto5D3E40F6_g = lp_players;
    auto5D3E40F6_var = -1;
    while (true) {
        auto5D3E40F6_var = PlayerGroupNextPlayer(auto5D3E40F6_g, auto5D3E40F6_var);
        if (auto5D3E40F6_var < 0) { break; }
        auto2B44BE14_val = PlayerRace(auto5D3E40F6_var);
        if (auto2B44BE14_val == "Prot") {
            SoundPlay(SoundLink("UI_TerranPing", -1), PlayerGroupSingle(auto5D3E40F6_var), 100.0, 0.0);
        }
        else if (auto2B44BE14_val == "Terr") {
            SoundPlay(SoundLink("UI_TerranPing", -1), PlayerGroupSingle(auto5D3E40F6_var), 100.0, 0.0);
        }
        else if (auto2B44BE14_val == "Zerg") {
            SoundPlay(SoundLink("UI_ZergWarningPing", -1), PlayerGroupSingle(auto5D3E40F6_var), 100.0, 0.0);
        }
        else {
        }
    }
    libNtve_gf_CreatePingFacingAngle(lp_players, "PingAlert", lp_pos, lp_color, lp_dur, 270.0);
    Wait(lp_dur, c_timeGame);
    PingDestroy(PingLastCreated());
    return true;
}

void libSwaC_gf_LaunchMissionFromStoryMode (string lp_mission, int lp_difficulty, bool lp_isSimulation) {
    // Variable Declarations
    int lv_missionIndex;
    int lv_difficultyIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_missionIndex = libSwaC_gf_ZS_MissionIndex(lp_mission);
    lv_difficultyIndex = libSwaC_gf_ZS_DifficultyIndex(lp_difficulty);
    if ((lp_isSimulation == true)) {
        if ((libSwaC_gv_zS_InCompletedCampaign == true)) {
            libSwaC_gv_zSX_CamStatsMissionStartedMasterArchive[lv_missionIndex][lv_difficultyIndex] += 1;
        }
        else {
            libSwaC_gv_zSX_CamStatsMissionStartedArchive[lv_missionIndex][lv_difficultyIndex] += 1;
        }
    }
    else {
        libSwaC_gv_zSX_CamStatsMissionStartedLaunched[lv_missionIndex][lv_difficultyIndex] += 1;
    }
}

int libSwaC_gf_ZS_MissionIndex (string lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("Maps", libSwaC_gf_ZS_MapUserDataInstance(lp_mission), "Index", 1);
}

void libSwaC_gf_ZS_CamStatsSaveUnitCreated (string lp_section, int lp_missionID, int lp_difficultyID) {
    // Variable Declarations
    string lv_value;
    int lv_index;

    // Automatic Variable Declarations
    int auto26D838DA_ae;
    const int auto26D838DA_ai = 1;

    // Variable Initialization
    lv_value = "";

    // Implementation
    if ((libSwaC_gv_zSX_CamStatsUnitCreatedCount <= 0)) {
        return ;
    }

    auto26D838DA_ae = libSwaC_gv_zSX_CamStatsUnitCreatedCount;
    lv_index = 1;
    for ( ; ( (auto26D838DA_ai >= 0 && lv_index <= auto26D838DA_ae) || (auto26D838DA_ai < 0 && lv_index >= auto26D838DA_ae) ) ; lv_index += auto26D838DA_ai ) {
        lv_value = (lv_value + (libSwaC_gv_zSX_CamStatsUnitCreatedUnits[lv_index]) + "(" + IntToString(DataTableGetInt(true, ("CamStats_" + (libSwaC_gv_zSX_CamStatsUnitCreatedUnits[lv_index])))) + ") ");
    }
    libSwaC_gf_ZS_SaveTransitionVarInteger(libSwaC_gv_zS_CampaignStatsBank, lp_section, (IntToString(lp_missionID) + "-" + IntToString(lp_difficultyID)), (libSwaC_gv_zSX_CamStatsUnitCreatedHistoryCount + 1), 0);
    libSwaC_gf_ZS_SaveTransitionVarString(libSwaC_gv_zS_CampaignStatsBank, lp_section, (IntToString(lp_missionID) + "-" + IntToString(lp_difficultyID) + "-" + IntToString((libSwaC_gv_zSX_CamStatsUnitCreatedHistoryCount + 1))), lv_value, "");
}

string libSwaC_gf_ZS_MissionInitial (string lp_mission) {
    // Variable Declarations
    string lv_location;

    // Automatic Variable Declarations
    string autoDBB6D1D2_val;
    string auto88CD52F6_val;

    // Variable Initialization

    // Implementation
    if ((libSwaC_gf_StoryMapTypeCheck(lp_mission, c_mapKindMission) == true)) {
        lv_location = libSwaC_gf_StoryMapPlanet(lp_mission);
        auto88CD52F6_val = lv_location;
        if (auto88CD52F6_val == "Char") {
            return "C";
        }
        else if (auto88CD52F6_val == "DominionLab") {
            return "L";
        }
        else if (auto88CD52F6_val == "ZSpace1") {
            return "S";
        }
        else if (auto88CD52F6_val == "Expedition") {
            return "E";
        }
        else if (auto88CD52F6_val == "Korhal") {
            return "K";
        }
        else if (auto88CD52F6_val == "Hybrid") {
            return "H";
        }
        else if (auto88CD52F6_val == "Zerus") {
            return "Z";
        }
        else {
            return "";
        }
    }
    else {
        autoDBB6D1D2_val = lp_mission;
        if (autoDBB6D1D2_val == "ZEvolutionBaneling") {
            return "b";
        }
        else if (autoDBB6D1D2_val == "ZEvolutionHydralisk") {
            return "h";
        }
        else if (autoDBB6D1D2_val == "ZEvolutionMutalisk") {
            return "m";
        }
        else if (autoDBB6D1D2_val == "ZEvolutionRoach") {
            return "r";
        }
        else if (autoDBB6D1D2_val == "ZEvolutionSwarmHost") {
            return "s";
        }
        else if (autoDBB6D1D2_val == "ZEvolutionUltralisk") {
            return "u";
        }
        else if (autoDBB6D1D2_val == "ZEvolutionZergling") {
            return "z";
        }
        else {
            return "";
        }
    }
}

void libSwaC_gf_CreateMissionAutosavePoint (text lp_description) {
    // Variable Declarations
    text lv_name;
    int lv_autosaveDialog;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_name = StringToText("");
    lv_autosaveDialog = c_invalidDialogId;

    // Implementation
    if ((libSwaC_gf_CurrentMap() == null)) {
        return ;
    }

    libSwaC_gv_zS_MissionAutoSaveDone = false;
    libSwaC_gf_ZS_MissionAutoSave(lp_description);
}

void libSwaC_gf_ZS_MissionAutoSave (text lp_description) {
    // Variable Declarations
    text lv_name;
    string lv_image;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_name = StringToText("");

    // Implementation
    libSwaC_gv_zS_MissionAutoSaveIndex += 1;
    TextExpressionSetToken("Param/Expression/lib_SwaC_8CBDD654", "A", libSwaC_gf_StoryMapNameLowerCase(libSwaC_gf_CurrentMap()));
    lv_name = TextExpressionAssemble("Param/Expression/lib_SwaC_8CBDD654");
    lv_image = libSwaC_gf_StoryMapLoadingScreenImage(libSwaC_gf_CurrentMap());
    GameSaveCreate(lv_name, lp_description, lv_image, true);
    Wait(1.0, c_timeGame);
    libSwaC_gv_zS_MissionAutoSaveDone = true;
}

void libSwaC_gf_CreateTipCampaign (string lp_tipData, int lp_tipType, playergroup lp_players) {
    // Automatic Variable Declarations
    // Implementation
    if ((UserDataGetInt("CampaignTips", lp_tipData, "Created", 1) == 1)) {
        return ;
    }

    HelpPanelAddTip(lp_players, libNtve_gf_FormatTipTitle(UserDataGetText("CampaignTips", lp_tipData, "Name", 1), lp_tipType), UserDataGetText("CampaignTips", lp_tipData, "Description", 1), UserDataGetText("CampaignTips", lp_tipData, "Name", 1), UserDataGetImagePath("CampaignTips", lp_tipData, "Icon", 1));
    UserDataSetInt("CampaignTips", lp_tipData, "Created", 1, 1);
}

void libSwaC_gf_SetAllSoundChannelVolumesCampaign (int lp_mode) {
    // Automatic Variable Declarations
    int auto27B4E145_val;

    // Implementation
    auto27B4E145_val = lp_mode;
    if (auto27B4E145_val == libSwaC_ge_VolumeChannelModeCampaign_CinematicInTransmission) {
        libLbty_gf_SetAllSoundChannelVolumesStandardTiming(libNtve_ge_VolumeChannelMode_Cinematic, PlayerGroupAll());
    }
    else if (auto27B4E145_val == libSwaC_ge_VolumeChannelModeCampaign_CinematicOutofTransmission) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 100.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 100.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 100.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 100.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 100.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 100.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 100.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 100.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 100.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 100.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 100.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 100.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 40.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 100.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 100.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 100.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 100.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 100.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 100.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, 0.25);
    }
    else if (auto27B4E145_val == libSwaC_ge_VolumeChannelModeCampaign_Game) {
        libSwaC_gv_zS_VolumeChannelModeInSpeech = false;
        if ((libSwaC_gv_zS_VolumeChannelModeInLowHP == true)) {
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_LowHealthBegin);
            return ;
        }

        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 0.5);
    }
    else if (auto27B4E145_val == libSwaC_ge_VolumeChannelModeCampaign_Game2) {
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 0.25);
    }
    else if (auto27B4E145_val == libSwaC_ge_VolumeChannelModeCampaign_Game3) {
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.25);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 0.1);
    }
    else if (auto27B4E145_val == libSwaC_ge_VolumeChannelModeCampaign_LowHealthBegin) {
        libSwaC_gv_zS_VolumeChannelModeInLowHP = true;
        if ((libSwaC_gv_zS_VolumeChannelModeInSpeech == true)) {
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
            return ;
        }

        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 35.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 80.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 25.0, 2.0);
    }
    else if (auto27B4E145_val == libSwaC_ge_VolumeChannelModeCampaign_LowHealthEnd) {
        libSwaC_gv_zS_VolumeChannelModeInLowHP = false;
        if ((libSwaC_gv_zS_VolumeChannelModeInSpeech == true)) {
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
            return ;
        }

        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 1.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 1.0);
    }
    else if (auto27B4E145_val == libSwaC_ge_VolumeChannelModeCampaign_Speech) {
        libSwaC_gv_zS_VolumeChannelModeInSpeech = true;
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 2.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, 0.5);
    }
    else if (auto27B4E145_val == libSwaC_ge_VolumeChannelModeCampaign_Speech2) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 60.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 35.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 50.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, 2.0);
    }
    else if (auto27B4E145_val == libSwaC_ge_VolumeChannelModeCampaign_Speech3) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 60.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 35.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 50.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, 2.0);
    }
    else if (auto27B4E145_val == libSwaC_ge_VolumeChannelModeCampaign_SpeechAndMusicNoEffects) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 12.5, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 6.25, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 50.0, 0.05);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 3.125, 0.05);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 6.25, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 12.5, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 6.25, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 6.25, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 6.25, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 6.25, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 3.125, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, 2.0);
    }
    else if (auto27B4E145_val == libSwaC_ge_VolumeChannelModeCampaign_SplitUI) {
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Victory, PlayerGroupAll(), 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 100.0, 0.5);
    }
    else if (auto27B4E145_val == libSwaC_ge_VolumeChannelModeCampaign_Victory) {
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Victory, PlayerGroupAll(), 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 100.0, 1.0);
    }
    else {
    }
}

void libSwaC_gf_MuteUnmuteAllSoundChannels (bool lp_muteUnmute, int lp_ignoredChannel, playergroup lp_players) {
    // Automatic Variable Declarations
    // Implementation
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAlert, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAmbient, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryBuild, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryCombat, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDeath, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDialogue, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDoodad, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryFlames, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryFoley, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryGather, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryME, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryMission, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryMovement, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryMovie, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryMusic, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryOther, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryReady, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategorySAmbient, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategorySEmitters, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategorySPieces, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategorySpell, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryTV, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryUI, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryVoice, lp_muteUnmute);
}

void libSwaC_gf_ResearchAIUpgrade (int lp_count, string lp_upgrade, int lp_player) {
    // Automatic Variable Declarations
    int autoE2BA9C4E_n;
    int autoE2BA9C4E_i;

    // Implementation
    autoE2BA9C4E_n = lp_count;
    for (autoE2BA9C4E_i = 1; autoE2BA9C4E_i <= autoE2BA9C4E_n; autoE2BA9C4E_i += 1) {
        AIResearch(lp_player, 4, -1, lp_upgrade);
    }
}

void libSwaC_gf_DestroyCacheAndGivePlayerResources (unit lp_cacheUnit, int lp_resourceType, int lp_resourceAmount, string lp_resourceIcon, text lp_resourceText, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libSwaC_gf_GivePlayerResources(UnitGetPosition(lp_cacheUnit), lp_resourceType, lp_resourceAmount, lp_resourceIcon, lp_resourceText, lp_player);
    UnitKill(lp_cacheUnit);
}

void libSwaC_gf_GivePlayerResources (point lp_location, int lp_resourceType, int lp_resourceAmount, string lp_resourceIcon, text lp_resourceText, int lp_player) {
    // Variable Declarations
    text lv_text;

    // Automatic Variable Declarations
    int auto0E3820E8_val;

    // Variable Initialization

    // Implementation
    auto0E3820E8_val = lp_resourceType;
    if (auto0E3820E8_val == libSwaC_ge_CacheResourceType_Mineral) {
        PlayerModifyPropertyInt(lp_player, c_playerPropMinerals, c_playerPropOperAdd, lp_resourceAmount);
    }
    else if (auto0E3820E8_val == libSwaC_ge_CacheResourceType_Vespene) {
        PlayerModifyPropertyInt(lp_player, c_playerPropVespene, c_playerPropOperAdd, lp_resourceAmount);
    }
    else {
    }
    libSwaC_gf_DisplayRewardFloatingText(lp_location, lp_resourceType, lp_resourceAmount, lp_resourceIcon, lp_resourceText, lp_player);
}

void libSwaC_gf_DisplayRewardFloatingText (point lp_location, int lp_resourceType, int lp_resourceAmount, string lp_resourceIcon, text lp_resourceText, int lp_player) {
    // Variable Declarations
    text lv_text;

    // Automatic Variable Declarations
    int auto5D2805D4_val;
    int auto611467ED_val;

    // Variable Initialization

    // Implementation
    auto5D2805D4_val = lp_resourceType;
    if (auto5D2805D4_val == libSwaC_ge_CacheResourceType_Mineral) {
        TextExpressionSetToken("Param/Expression/lib_SwaC_429F7B07", "A", StringToText(("Kicker_Minerals")));
        TextExpressionSetToken("Param/Expression/lib_SwaC_429F7B07", "B", IntToText(lp_resourceAmount));
        lv_text = TextExpressionAssemble("Param/Expression/lib_SwaC_429F7B07");
    }
    else if (auto5D2805D4_val == libSwaC_ge_CacheResourceType_Vespene) {
        TextExpressionSetToken("Param/Expression/lib_SwaC_E48EBCCC", "A", StringToText(("Kicker_Gas")));
        TextExpressionSetToken("Param/Expression/lib_SwaC_E48EBCCC", "B", IntToText(lp_resourceAmount));
        lv_text = TextExpressionAssemble("Param/Expression/lib_SwaC_E48EBCCC");
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_SwaC_BFEDF31D", "A", StringToText(("Kicker_Zerg")));
        TextExpressionSetToken("Param/Expression/lib_SwaC_BFEDF31D", "B", IntToText(lp_resourceAmount));
        lv_text = TextExpressionAssemble("Param/Expression/lib_SwaC_BFEDF31D");
    }
    if ((lp_resourceIcon != null)) {
        TextExpressionSetToken("Param/Expression/lib_SwaC_2E30CC8D", "A", lv_text);
        TextExpressionSetToken("Param/Expression/lib_SwaC_2E30CC8D", "B", StringToText(lp_resourceIcon));
        lv_text = TextExpressionAssemble("Param/Expression/lib_SwaC_2E30CC8D");
    }
    else {
        auto611467ED_val = lp_resourceType;
        if (auto611467ED_val == libSwaC_ge_CacheResourceType_Mineral) {
            TextExpressionSetToken("Param/Expression/lib_SwaC_7106A1DB", "A", lv_text);
            lv_text = TextExpressionAssemble("Param/Expression/lib_SwaC_7106A1DB");
        }
        else if (auto611467ED_val == libSwaC_ge_CacheResourceType_Vespene) {
            TextExpressionSetToken("Param/Expression/lib_SwaC_8767B2BC", "A", lv_text);
            lv_text = TextExpressionAssemble("Param/Expression/lib_SwaC_8767B2BC");
        }
        else {
        }
    }
    if (((lp_resourceText != null) == true)) {
        TextExpressionSetToken("Param/Expression/lib_SwaC_79F7F239", "A", lv_text);
        TextExpressionSetToken("Param/Expression/lib_SwaC_79F7F239", "B", lp_resourceText);
        lv_text = TextExpressionAssemble("Param/Expression/lib_SwaC_79F7F239");
    }

    SoundPlay(SoundLink("UI_ResourcePickup", 0), PlayerGroupSingle(lp_player), 100.0, 0.0);
    TextTagCreate(lv_text, 24, lp_location, 2.0, true, false, PlayerGroupAll());
    TextTagSetVelocity(TextTagLastCreated(), 0.7, 90.0);
    TextTagSetBackgroundImage(TextTagLastCreated(), "Assets\\Textures\\blank.dds", true);
    if ((lp_resourceType == libSwaC_ge_CacheResourceType_CustomResource)) {
        TextTagSetEdgeImage(TextTagLastCreated(), c_textTagEdgeBottom, "Assets\\Textures\\ui_hots_frame_objectives_bonus_popup_short.dds", 0, -15);
    }
    else {
        TextTagSetEdgeImage(TextTagLastCreated(), c_textTagEdgeBottom, "Assets\\Textures\\ui_hots_frame_objectives_bonus_popup_reg.dds", 0, -15);
    }
    TextTagShowBackground(TextTagLastCreated(), true);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
}

void libSwaC_gf_DisplayMissionObjectiveRewardFloatingText (point lp_location, string lp_objective, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libSwaC_gf_MissionObjectiveRewards(lp_objective, "KerriganXP") != 0)) {
        libSwaC_gf_DisplayRewardFloatingText(lp_location, libSwaC_ge_CacheResourceType_KerriganLevel, (libSwaC_gf_MissionObjectiveRewards(lp_objective, "KerriganXP")), null, StringExternal("Param/Value/lib_SwaC_694B697B"), lp_player);
    }

}

void libSwaC_gf_SpawnLarvaForHatchery (unit lp_hatchery, int lp_larvaCount) {
    // Automatic Variable Declarations
    // Implementation
    UnitBehaviorSpawn(lp_hatchery, "SpawnLarva", lp_larvaCount);
}

int libSwaC_gf_CampaignKerriganZergPlayerColor () {
    // Automatic Variable Declarations
    // Implementation
    if ((libSwaC_gf_MissionStatusCheck("ZZerus2", libSwaC_ge_MissionStatus_Completed) == true)) {
        return 4;
    }
    else {
        return 6;
    }
}

void libSwaC_gf_ZS_ApplyKerriganZergColor () {
    // Automatic Variable Declarations
    // Implementation
    if (((libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindMission) == true) || (libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindUpgrade) == true)) && (libSwaC_gf_CurrentMap() != "ZLab2") && (libSwaC_gf_CurrentMap() != "ZSpace1") && (libSwaC_gf_CurrentMap() != "ZSpace2")) {
        PlayerSetColorIndex(1, libSwaC_gf_CampaignKerriganZergPlayerColor(), true);
    }

}

text libSwaC_gf_FormatTextWithReplacement (text lp_text, text lp_replacement1, text lp_replacement2, text lp_replacement3, text lp_replacement4) {
    // Variable Declarations
    text lv_result;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_result = lp_text;
    if (((lp_replacement1 != null) == true)) {
        lv_result = TextReplaceWord(lv_result, StringExternal("Param/Value/lib_SwaC_40AF78D2"), lp_replacement1, c_stringReplaceAll, c_stringCase);
    }

    if (((lp_replacement2 != null) == true)) {
        lv_result = TextReplaceWord(lv_result, StringExternal("Param/Value/lib_SwaC_97EB67D7"), lp_replacement2, c_stringReplaceAll, c_stringCase);
    }

    if (((lp_replacement3 != null) == true)) {
        lv_result = TextReplaceWord(lv_result, StringExternal("Param/Value/lib_SwaC_5B1A5BD8"), lp_replacement3, c_stringReplaceAll, c_stringCase);
    }

    if (((lp_replacement4 != null) == true)) {
        lv_result = TextReplaceWord(lv_result, StringExternal("Param/Value/lib_SwaC_EBECA6C5"), lp_replacement4, c_stringReplaceAll, c_stringCase);
    }

    return lv_result;
}

unit libSwaC_gf_ZS_HatcheryBestWorkerRallyMineral (unit lp_hatcher) {
    // Variable Declarations
    unit lv_indexUnitOuter;
    unit lv_indexUnitInner;
    fixed lv_bestDistance;
    fixed lv_curDistance;
    region lv_searchArea;
    unitgroup lv_mineralGroup;
    unit lv_bestMineral;

    // Automatic Variable Declarations
    unitgroup auto53FBEFBE_g;
    int auto53FBEFBE_u;
    unitgroup auto1DCFFF03_g;
    int auto1DCFFF03_u;

    // Variable Initialization
    lv_mineralGroup = UnitGroupEmpty();

    // Implementation
    lv_searchArea = RegionCircle(UnitGetPosition(lp_hatcher), 10.0);
    lv_mineralGroup = UnitGroup("MineralField", c_playerAny, lv_searchArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    UnitGroupAddUnitGroup(lv_mineralGroup, UnitGroup("RichMineralField", c_playerAny, lv_searchArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    UnitGroupAddUnitGroup(lv_mineralGroup, UnitGroup("UmojanLabMineralField", c_playerAny, lv_searchArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    auto53FBEFBE_g = lv_mineralGroup;
    auto53FBEFBE_u = UnitGroupCount(auto53FBEFBE_g, c_unitCountAll);
    for (;; auto53FBEFBE_u -= 1) {
        lv_indexUnitOuter = UnitGroupUnitFromEnd(auto53FBEFBE_g, auto53FBEFBE_u);
        if (lv_indexUnitOuter == null) { break; }
        lv_curDistance = 0.0;
        auto1DCFFF03_g = lv_mineralGroup;
        auto1DCFFF03_u = UnitGroupCount(auto1DCFFF03_g, c_unitCountAll);
        for (;; auto1DCFFF03_u -= 1) {
            lv_indexUnitInner = UnitGroupUnitFromEnd(auto1DCFFF03_g, auto1DCFFF03_u);
            if (lv_indexUnitInner == null) { break; }
            if ((lv_indexUnitOuter != lv_indexUnitInner)) {
                lv_curDistance += DistanceBetweenPoints(UnitGetPosition(lv_indexUnitOuter), UnitGetPosition(lv_indexUnitInner));
            }

        }
        if (((lv_bestDistance == 0.0) || (lv_curDistance < lv_bestDistance))) {
            lv_bestDistance = lv_curDistance;
            lv_bestMineral = lv_indexUnitOuter;
        }

    }
    return lv_bestMineral;
}

void libSwaC_gf_SetHatcheryRallyPoint (unit lp_hatchery, point lp_rallyPoint) {
    // Variable Declarations
    unit lv_bestMineral;
    point lv_rallyPoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_bestMineral = libSwaC_gf_ZS_HatcheryBestWorkerRallyMineral(lp_hatchery);
    if ((lv_bestMineral != null)) {
        UnitIssueOrder(lp_hatchery, OrderTargetingUnit(AbilityCommand("RallyHatchery", 1), lv_bestMineral), c_orderQueueReplace);
    }

    lv_rallyPoint = lp_rallyPoint;
    if ((lv_rallyPoint == null)) {
        if ((lv_bestMineral != null)) {
            lv_rallyPoint = PointWithOffsetPolar(UnitGetPosition(lp_hatchery), 5.0, (AngleBetweenPoints(UnitGetPosition(lp_hatchery), UnitGetPosition(lv_bestMineral)) + 180.0));
        }

    }

    if ((lv_rallyPoint != null)) {
        UnitIssueOrder(lp_hatchery, OrderTargetingPoint(AbilityCommand("RallyHatchery", 0), lv_rallyPoint), c_orderQueueReplace);
    }

}

void libSwaC_gf_SetAllHatcheriesRallyPoints (int lp_player) {
    // Variable Declarations
    unit lv_indexHatchery;
    unitgroup lv_hatcheryGroup;

    // Automatic Variable Declarations
    unitgroup auto2F5CB7CB_g;
    int auto2F5CB7CB_u;

    // Variable Initialization
    lv_hatcheryGroup = UnitGroupEmpty();

    // Implementation
    lv_hatcheryGroup = UnitGroup("Hatchery", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupAddUnitGroup(lv_hatcheryGroup, UnitGroup("Lair", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_hatcheryGroup, UnitGroup("Hive", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    auto2F5CB7CB_g = lv_hatcheryGroup;
    auto2F5CB7CB_u = UnitGroupCount(auto2F5CB7CB_g, c_unitCountAll);
    for (;; auto2F5CB7CB_u -= 1) {
        lv_indexHatchery = UnitGroupUnitFromEnd(auto2F5CB7CB_g, auto2F5CB7CB_u);
        if (lv_indexHatchery == null) { break; }
        libSwaC_gf_SetHatcheryRallyPoint(lv_indexHatchery, null);
    }
}

string libSwaC_gf_ZS_ReticleModelOfStyle (int lp_type, int lp_size) {
    // Variable Declarations
    string lv_model;

    // Automatic Variable Declarations
    int autoFBEAC457_val;
    int auto205BAC24_val;
    int autoD234B893_val;
    int autoBF3CD6A4_val;

    // Variable Initialization

    // Implementation
    autoFBEAC457_val = lp_size;
    if (autoFBEAC457_val == libSwaC_ge_CampaginReticleSize_Large) {
        auto205BAC24_val = lp_type;
        if (auto205BAC24_val == libSwaC_ge_CampaginReticleType_TerranBonusObjective) {
            lv_model = "BriefingUnitSelectLarge";
        }
        else if (auto205BAC24_val == libSwaC_ge_CampaginReticleType_TerranEnemy) {
            lv_model = "BriefingUnitSelectLargeRed";
        }
        else if (auto205BAC24_val == libSwaC_ge_CampaginReticleType_TerranMainObjective) {
            lv_model = "BriefingUnitSelectLarge";
        }
        else if (auto205BAC24_val == libSwaC_ge_CampaginReticleType_ZergBonusObjective) {
            lv_model = "BriefingUnitSelectLargeZergGreen";
        }
        else if (auto205BAC24_val == libSwaC_ge_CampaginReticleType_ZergEnemy) {
            lv_model = "BriefingUnitSelectLargeZergRed";
        }
        else if (auto205BAC24_val == libSwaC_ge_CampaginReticleType_ZergMainObjective) {
            lv_model = "BriefingUnitSelectLargeZergGreen";
        }
        else {
        }
    }
    else if (autoFBEAC457_val == libSwaC_ge_CampaginReticleSize_Medium) {
        autoD234B893_val = lp_type;
        if (autoD234B893_val == libSwaC_ge_CampaginReticleType_TerranBonusObjective) {
            lv_model = "BriefingUnitSelect";
        }
        else if (autoD234B893_val == libSwaC_ge_CampaginReticleType_TerranEnemy) {
            lv_model = "BriefingUnitSelectRed";
        }
        else if (autoD234B893_val == libSwaC_ge_CampaginReticleType_TerranMainObjective) {
            lv_model = "BriefingUnitSelect";
        }
        else if (autoD234B893_val == libSwaC_ge_CampaginReticleType_ZergBonusObjective) {
            lv_model = "BriefingUnitSelectZergGreen";
        }
        else if (autoD234B893_val == libSwaC_ge_CampaginReticleType_ZergEnemy) {
            lv_model = "BriefingUnitSelectZergRed";
        }
        else if (autoD234B893_val == libSwaC_ge_CampaginReticleType_ZergMainObjective) {
            lv_model = "BriefingUnitSelectZergGreen";
        }
        else {
        }
    }
    else if (autoFBEAC457_val == libSwaC_ge_CampaginReticleSize_Small) {
        autoBF3CD6A4_val = lp_type;
        if (autoBF3CD6A4_val == libSwaC_ge_CampaginReticleType_TerranBonusObjective) {
            lv_model = "BriefingUnitSelectSmall";
        }
        else if (autoBF3CD6A4_val == libSwaC_ge_CampaginReticleType_TerranEnemy) {
            lv_model = "BriefingUnitSelectRedSmall";
        }
        else if (autoBF3CD6A4_val == libSwaC_ge_CampaginReticleType_TerranMainObjective) {
            lv_model = "BriefingUnitSelectSmall";
        }
        else if (autoBF3CD6A4_val == libSwaC_ge_CampaginReticleType_ZergBonusObjective) {
            lv_model = "BriefingUnitSelectZergSmallGreen";
        }
        else if (autoBF3CD6A4_val == libSwaC_ge_CampaginReticleType_ZergEnemy) {
            lv_model = "BriefingUnitSelectZergSmallRed";
        }
        else if (autoBF3CD6A4_val == libSwaC_ge_CampaginReticleType_ZergMainObjective) {
            lv_model = "BriefingUnitSelectZergSmallGreen";
        }
        else {
        }
    }
    else {
    }
    return lv_model;
}

string libSwaC_gf_ZS_ReticleTextFontOfStyle (int lp_type) {
    // Variable Declarations
    string lv_fontStyle;

    // Automatic Variable Declarations
    int auto46EB6D30_val;

    // Variable Initialization
    lv_fontStyle = "SwarmReticleZergMainObjective";

    // Implementation
    auto46EB6D30_val = lp_type;
    if (auto46EB6D30_val == libSwaC_ge_CampaginReticleType_TerranBonusObjective) {
        lv_fontStyle = "SwarmReticleTerranBonusObjective";
    }
    else if (auto46EB6D30_val == libSwaC_ge_CampaginReticleType_TerranEnemy) {
        lv_fontStyle = "SwarmReticleTerranEnemy";
    }
    else if (auto46EB6D30_val == libSwaC_ge_CampaginReticleType_TerranMainObjective) {
        lv_fontStyle = "SwarmReticleTerranMainObjective";
    }
    else if (auto46EB6D30_val == libSwaC_ge_CampaginReticleType_ZergBonusObjective) {
        lv_fontStyle = "SwarmReticleZergBonusObjective";
    }
    else if (auto46EB6D30_val == libSwaC_ge_CampaginReticleType_ZergEnemy) {
        lv_fontStyle = "SwarmReticleZergEnemy";
    }
    else if (auto46EB6D30_val == libSwaC_ge_CampaginReticleType_ZergMainObjective) {
        lv_fontStyle = "SwarmReticleZergMainObjective";
    }
    else {
    }
    return lv_fontStyle;
}

void libSwaC_gf_CreateReticleEffectAndTextTagAtPoint (int lp_type, int lp_size, text lp_text, point lp_location) {
    // Variable Declarations
    string lv_model;
    string lv_fontStyle;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_fontStyle = "SwarmReticleZergMainObjective";

    // Implementation
    lv_model = libSwaC_gf_ZS_ReticleModelOfStyle(lp_type, lp_size);
    if ((lv_model == null)) {
        return ;
    }

    libNtve_gf_CreateModelAtPoint(lv_model, lp_location);
    if (((lp_text != null) == false)) {
        return ;
    }

    lv_fontStyle = libSwaC_gf_ZS_ReticleTextFontOfStyle(lp_type);
    TextExpressionSetToken("Param/Expression/lib_SwaC_31AEFCDC", "Style", StringToText((lv_fontStyle)));
    TextExpressionSetToken("Param/Expression/lib_SwaC_31AEFCDC", "A", lp_text);
    TextTagCreate(TextExpressionAssemble("Param/Expression/lib_SwaC_31AEFCDC"), 24, lp_location, 0.0, true, true, PlayerGroupSingle(1));
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
}

void libSwaC_gf_AttachReticleEffectAndTextTagOnUnit (int lp_type, int lp_size, text lp_text, unit lp_target, string lp_attachPoint) {
    // Variable Declarations
    string lv_model;
    string lv_fontStyle;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_fontStyle = "SwarmReticleZergMainObjective";

    // Implementation
    lv_model = libSwaC_gf_ZS_ReticleModelOfStyle(lp_type, lp_size);
    if ((lv_model == null)) {
        return ;
    }

    libNtve_gf_AttachModelToUnit(lp_target, lv_model, lp_attachPoint);
    if (((lp_text != null) == false)) {
        return ;
    }

    lv_fontStyle = libSwaC_gf_ZS_ReticleTextFontOfStyle(lp_type);
    TextExpressionSetToken("Param/Expression/lib_SwaC_11F142F1", "Style", StringToText((lv_fontStyle)));
    TextExpressionSetToken("Param/Expression/lib_SwaC_11F142F1", "A", lp_text);
    TextTagCreate(TextExpressionAssemble("Param/Expression/lib_SwaC_11F142F1"), 24, UnitGetPosition(lp_target), 0.0, true, true, PlayerGroupSingle(1));
    TextTagAttachToUnit(TextTagLastCreated(), lp_target, 0.0);
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
}

trigger auto_libSwaC_gf_CampaignAwardAchievement_Trigger = null;
string auto_libSwaC_gf_CampaignAwardAchievement_lp_achievement;
int auto_libSwaC_gf_CampaignAwardAchievement_lp_player;

void libSwaC_gf_CampaignAwardAchievement (string lp_achievement, int lp_player) {
    auto_libSwaC_gf_CampaignAwardAchievement_lp_achievement = lp_achievement;
    auto_libSwaC_gf_CampaignAwardAchievement_lp_player = lp_player;

    if (auto_libSwaC_gf_CampaignAwardAchievement_Trigger == null) {
        auto_libSwaC_gf_CampaignAwardAchievement_Trigger = TriggerCreate("auto_libSwaC_gf_CampaignAwardAchievement_TriggerFunc");
    }

    TriggerExecute(auto_libSwaC_gf_CampaignAwardAchievement_Trigger, false, false);
}

bool auto_libSwaC_gf_CampaignAwardAchievement_TriggerFunc (bool testConds, bool runActions) {
    string lp_achievement = auto_libSwaC_gf_CampaignAwardAchievement_lp_achievement;
    int lp_player = auto_libSwaC_gf_CampaignAwardAchievement_lp_player;

    // Variable Declarations
    int lv_achievementDialog;
    const fixed lv_durationRequired = 6.0;
    fixed lv_duration;
    int lv_panel;
    string lv_dataTableName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_achievementDialog = c_invalidDialogId;
    lv_panel = c_invalidDialogControlId;
    lv_dataTableName = "";

    // Implementation
    libSwaC_gv_zS_AchievementsDisplayed += 1;
    AchievementAward(1, lp_achievement);
    if (((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == false) || (libSwaC_gv_zS_AchievementDebugEnabled == false) || (GameIsOnline() == true) || (libSwaC_gf_CampaignDebugModeIsOn("NoBattleNet") == false))) {
        return true;
    }

    lv_dataTableName = ("ACHIEVEOPENED_" + (lp_achievement));
    if ((DataTableValueExists(true, lv_dataTableName) == true)) {
        return true;
    }

    DataTableSetString(true, lv_dataTableName, "1");
    while (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
        Wait(0.25, c_timeGame);
    }
    TextExpressionSetToken("Param/Expression/lib_SwaC_DCF14620", "A", StringExternal(CatalogFieldValueGet(c_gameCatalogAchievement, lp_achievement, "Name", c_playerAny)));
    TextExpressionSetToken("Param/Expression/lib_SwaC_DCF14620", "B", StringToText((lp_achievement)));
    TextExpressionSetToken("Param/Expression/lib_SwaC_DCF14620", "C", StringExternal(CatalogFieldValueGet(c_gameCatalogAchievement, lp_achievement, "Description", c_playerAny)));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_SwaC_DCF14620"), false);
    DialogCreate(1000, 400, c_anchorRight, -200, (libSwaC_gv_zS_AchievementPosition + 200), true);
    libSwaC_gv_zS_AchievementPosition -= 125;
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    lv_achievementDialog = DialogLastCreated();
    DialogSetImageVisible(lv_achievementDialog, false);
    DialogControlCreateFromTemplate(lv_achievementDialog, c_triggerControlTypePanel, "HotS_Mission/AchievementFrameDebugTemplate");
    lv_panel = DialogControlLastCreated();
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    DialogControlHookup(lv_panel, c_triggerControlTypeLabel, "NameLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal(CatalogFieldValueGet(c_gameCatalogAchievement, lp_achievement, "Name", 1)), PlayerGroupAll());
    DialogControlHookup(lv_panel, c_triggerControlTypeLabel, "DescriptionLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal(CatalogFieldValueGet(c_gameCatalogAchievement, lp_achievement, "Description", 1)), PlayerGroupAll());
    DialogControlHookup(lv_panel, c_triggerControlTypeImage, "IconImage");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_tipicon_story-archives.dds", PlayerGroupAll());
    DialogControlHookup(lv_panel, c_triggerControlTypeLabel, "PointsLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(CatalogFieldValueGet(c_gameCatalogAchievement, lp_achievement, "Points", 1)), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(lv_achievementDialog, 200, 50, c_anchorTop, 0, 100, StringExternal("Param/Value/lib_SwaC_D4EA7C13"), Color(100.00, 0.00, 0.00), false, 2.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 60.0);
    while (true) {
        if ((libNtve_gf_PlayerInCinematicMode(1) == true)) {
            DialogSetVisible(lv_achievementDialog, PlayerGroupAll(), false);
        }
        else {
            DialogSetVisible(lv_achievementDialog, PlayerGroupAll(), true);
        }
        Wait(0.25, c_timeGame);
        lv_duration += 0.25;
        if ((lv_duration >= lv_durationRequired)) {
            break;
        }

    }
    DialogDestroy(lv_achievementDialog);
    libSwaC_gv_zS_AchievementsDisplayed -= 1;
    if ((libSwaC_gv_zS_AchievementsDisplayed <= 0)) {
        libSwaC_gv_zS_AchievementPosition = 0;
    }

    return true;
}

void libSwaC_gf_CreateExplosionatPointAdvanced (point lp_point, string lp_actor, soundlink lp_sound) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_point != null)) {
        if ((lp_actor != null)) {
            libNtve_gf_CreateActorAtPoint(lp_actor, lp_point);
        }

        if ((lp_sound != null)) {
            SoundPlayAtPoint(lp_sound, PlayerGroupAll(), lp_point, 0.0, 100.0, 0.0);
        }

    }

}

bool libSwaC_gf_PlayerIsInCombatCampaign (int lp_player) {
    // Variable Declarations
    fixed lv_combatTime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libNtve_gf_PlayerInCinematicMode(lp_player) == true)) {
        return false;
    }

    lv_combatTime = MaxF(PlayerGetPropertyFixed(lp_player, c_playerPropDamageDealtTime), PlayerGetPropertyFixed(lp_player, c_playerPropDamageTakenTime));
    lv_combatTime = (TimerGetElapsed(libSwaC_gv_zS_CombatTimer) - lv_combatTime);
    return (lv_combatTime < 4.0);
}

void libSwaC_gf_ShareVisionAmongPlayers (playergroup lp_players) {
    // Variable Declarations
    int lv_indexPlayer1;
    int lv_indexPlayer2;

    // Automatic Variable Declarations
    playergroup auto50F9E41A_g;
    playergroup auto4A64F3D4_g;

    // Variable Initialization

    // Implementation
    auto50F9E41A_g = lp_players;
    lv_indexPlayer1 = -1;
    while (true) {
        lv_indexPlayer1 = PlayerGroupNextPlayer(auto50F9E41A_g, lv_indexPlayer1);
        if (lv_indexPlayer1 < 0) { break; }
        auto4A64F3D4_g = lp_players;
        lv_indexPlayer2 = -1;
        while (true) {
            lv_indexPlayer2 = PlayerGroupNextPlayer(auto4A64F3D4_g, lv_indexPlayer2);
            if (lv_indexPlayer2 < 0) { break; }
            if ((lv_indexPlayer1 != lv_indexPlayer2)) {
                PlayerSetAlliance(lv_indexPlayer1, c_allianceIdVision, lv_indexPlayer2, true);
            }

        }
    }
}

void libSwaC_gf_CinematicModeSwarmCampaign (bool lp_onOff, fixed lp_duration) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CinematicMode(lp_onOff, PlayerGroupAll(), lp_duration);
    if ((lp_onOff == true)) {
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicOutofTransmission);
    }

}

bool libSwaC_gf_ZS_StartingWorkerAutoHarvestEnabled () {
    // Automatic Variable Declarations
    // Implementation
    return PlayerGetState(1, c_playerStateStartingRallyEnabled);
}

void libSwaC_gf_StartingWorkersAutoHarvest (region lp_regionMineralWorker, region lp_regionGasWorker) {
    // Variable Declarations
    unit lv_indexWorker;
    unitgroup lv_resourceGroup;
    unit lv_indexResource;
    unitgroup lv_unitGroupHarvestMinerals;
    unitgroup lv_unitGroupHarvestGas;

    // Automatic Variable Declarations
    unitgroup autoCD998777_g;
    int autoCD998777_u;
    unitgroup autoB515F0CD_g;
    int autoB515F0CD_u;
    unitgroup auto5FB1A3FC_g;
    int auto5FB1A3FC_u;
    unitgroup auto3798FC29_g;
    int auto3798FC29_u;

    // Variable Initialization
    lv_resourceGroup = UnitGroupEmpty();
    lv_unitGroupHarvestMinerals = UnitGroupEmpty();
    lv_unitGroupHarvestGas = UnitGroupEmpty();

    // Implementation
    if ((libSwaC_gf_ZS_StartingWorkerAutoHarvestEnabled() == false)) {
        return ;
    }

    if ((lp_regionMineralWorker != null)) {
        lv_unitGroupHarvestMinerals = UnitGroup(null, 1, lp_regionMineralWorker, UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    }

    if ((TechTreeUpgradeCount(1, "K5AutoExtractor", c_techCountQueuedOrBetter) > 0)) {
        UnitGroupAddUnitGroup(lv_unitGroupHarvestMinerals, UnitGroup(null, 1, lp_regionGasWorker, UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }
    else {
        if ((lp_regionGasWorker != null)) {
            lv_unitGroupHarvestGas = UnitGroup(null, 1, lp_regionGasWorker, UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        }

    }
    if ((lv_unitGroupHarvestMinerals != UnitGroupEmpty())) {
        autoCD998777_g = lv_unitGroupHarvestMinerals;
        autoCD998777_u = UnitGroupCount(autoCD998777_g, c_unitCountAll);
        for (;; autoCD998777_u -= 1) {
            lv_indexWorker = UnitGroupUnitFromEnd(autoCD998777_g, autoCD998777_u);
            if (lv_indexWorker == null) { break; }
            UnitGroupClear(lv_resourceGroup);
            autoB515F0CD_g = UnitGroup(null, 0, RegionCircle(UnitGetPosition(lv_indexWorker), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoB515F0CD_u = UnitGroupCount(autoB515F0CD_g, c_unitCountAll);
            for (;; autoB515F0CD_u -= 1) {
                lv_indexResource = UnitGroupUnitFromEnd(autoB515F0CD_g, autoB515F0CD_u);
                if (lv_indexResource == null) { break; }
                if (((UnitGetType(lv_indexResource) == "MineralField") || (UnitGetType(lv_indexResource) == "RichMineralField"))) {
                    UnitGroupAdd(lv_resourceGroup, lv_indexResource);
                }

            }
            if ((UnitGroupCount(lv_resourceGroup, c_unitCountAlive) > 0)) {
                UnitIssueOrder(lv_indexWorker, OrderTargetingUnit(null, UnitGroupClosestToPoint(lv_resourceGroup, UnitGetPosition(lv_indexWorker))), c_orderQueueReplace);
            }

        }
    }

    if ((lv_unitGroupHarvestGas != UnitGroupEmpty())) {
        auto5FB1A3FC_g = lv_unitGroupHarvestGas;
        auto5FB1A3FC_u = UnitGroupCount(auto5FB1A3FC_g, c_unitCountAll);
        for (;; auto5FB1A3FC_u -= 1) {
            lv_indexWorker = UnitGroupUnitFromEnd(auto5FB1A3FC_g, auto5FB1A3FC_u);
            if (lv_indexWorker == null) { break; }
            UnitGroupClear(lv_resourceGroup);
            auto3798FC29_g = UnitGroup(null, 1, RegionCircle(UnitGetPosition(lv_indexWorker), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto3798FC29_u = UnitGroupCount(auto3798FC29_g, c_unitCountAll);
            for (;; auto3798FC29_u -= 1) {
                lv_indexResource = UnitGroupUnitFromEnd(auto3798FC29_g, auto3798FC29_u);
                if (lv_indexResource == null) { break; }
                if (((UnitGetType(lv_indexResource) == "Refinery") || (UnitGetType(lv_indexResource) == "Extractor") || (UnitGetType(lv_indexResource) == "Assimilator"))) {
                    UnitGroupAdd(lv_resourceGroup, lv_indexResource);
                }

            }
            if ((UnitGroupCount(lv_resourceGroup, c_unitCountAlive) > 0)) {
                UnitIssueOrder(lv_indexWorker, OrderTargetingUnit(null, UnitGroupClosestToPoint(lv_resourceGroup, UnitGetPosition(lv_indexWorker))), c_orderQueueReplace);
            }

        }
    }

}

void libSwaC_gf_ResetHeroAbilityCooldowns (int lp_hero) {
    // Automatic Variable Declarations
    int auto13D6AD9A_val;

    // Implementation
    auto13D6AD9A_val = lp_hero;
    if (auto13D6AD9A_val == libSwaC_ge_HeroUnit_Kerrigan) {
        libSwaC_gf_ZS_ResetAbilityCD(AbilityCommand("MindBolt", 0), libSwaC_gv_zS_Kerrigan);
        libSwaC_gf_ZS_ResetAbilityCD(AbilityCommand("PrimalSlash", 0), libSwaC_gv_zS_Kerrigan);
        libSwaC_gf_ZS_ResetAbilityCD(AbilityCommand("PsionicLift", 0), libSwaC_gv_zS_Kerrigan);
        libSwaC_gf_ZS_ResetAbilityCD(AbilityCommand("PsiStrikeWalk", 0), libSwaC_gv_zS_Kerrigan);
        libSwaC_gf_ZS_ResetAbilityCD(AbilityCommand("WildMutation", 0), libSwaC_gv_zS_Kerrigan);
        libSwaC_gf_ZS_ResetAbilityCD(AbilityCommand("SpawnBanelings", 0), libSwaC_gv_zS_Kerrigan);
        libSwaC_gf_ZS_ResetAbilityCD(AbilityCommand("PrimalHeal", 0), libSwaC_gv_zS_Kerrigan);
    }
    else if (auto13D6AD9A_val == libSwaC_ge_HeroUnit_Stukov) {
        libSwaC_gf_ZS_ResetAbilityCD(AbilityCommand("DevastatingShot", 0), libSwaC_gv_zS_Stukov);
        libSwaC_gf_ZS_ResetAbilityCD(AbilityCommand("StukovInfestedTerrans", 0), libSwaC_gv_zS_Stukov);
    }
    else if (auto13D6AD9A_val == libSwaC_ge_HeroUnit_Dehaka) {
        libSwaC_gf_ZS_ResetAbilityCD(AbilityCommand("Drag", 0), libSwaC_gv_zS_Dehaka);
        libSwaC_gf_ZS_ResetAbilityCD(AbilityCommand("DehakaMirrorImage", 0), libSwaC_gv_zS_Dehaka);
        libSwaC_gf_ZS_ResetAbilityCD(AbilityCommand("DehakaHeal", 0), libSwaC_gv_zS_Dehaka);
    }
    else {
    }
}

void libSwaC_gf_ZS_ResetAbilityCD (abilcmd lp_abilityCommand, unit lp_hero) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitAbilityExists(lp_hero, AbilityCommandGetAbility(lp_abilityCommand)) == true)) {
        UnitAbilityReset(lp_hero, lp_abilityCommand, c_spendLocationAll);
    }

}

int libSwaC_gf_ZS_DifficultyIndex (int lp_difficulty) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto72D793CD_val;

    // Variable Initialization

    // Implementation
    auto72D793CD_val = lp_difficulty;
    if (auto72D793CD_val == 1) {
        return 1;
    }
    else if (auto72D793CD_val == 2) {
        return 2;
    }
    else if (auto72D793CD_val == 3) {
        return 3;
    }
    else if (auto72D793CD_val == 4) {
        return 4;
    }
    else {
        return 0;
    }
}

int libSwaC_gf_ZS_DifficultyFromIndex (int lp_index) {
    // Automatic Variable Declarations
    int auto64EFB35F_val;

    // Implementation
    auto64EFB35F_val = lp_index;
    if (auto64EFB35F_val == libSwaC_gf_ZS_DifficultyIndex(1)) {
        return 1;
    }
    else if (auto64EFB35F_val == libSwaC_gf_ZS_DifficultyIndex(2)) {
        return 2;
    }
    else if (auto64EFB35F_val == libSwaC_gf_ZS_DifficultyIndex(3)) {
        return 3;
    }
    else if (auto64EFB35F_val == libSwaC_gf_ZS_DifficultyIndex(4)) {
        return 4;
    }
    else {
        return 2;
    }
}

void libSwaC_gf_ZS_SetCampaignDifficulty (int lp_difficulty) {
    // Automatic Variable Declarations
    // Implementation
    libSwaC_gv_zSX_CampaignDifficulty = lp_difficulty;
}

string libSwaC_gf_StoryMapLoadingScreenImage (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_map == null)) {
        return "Assets\\Textures\\blank.dds";
    }

    return (CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "LoadingImage", c_playerAny));
}

string libSwaC_gf_StoryMapLoadingScreenVictoryImage (string lp_map) {
    // Variable Declarations
    string lv_victoryImage;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((lp_map == null) || (libSwaC_gf_StoryMapTypeCheck(lp_map, c_mapKindStory) == true))) {
        return "Assets\\Textures\\blank.dds";
    }
    else {
        if ((libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindUpgrade) == true)) {
            lv_victoryImage = "Assets\\Textures\\ui_hots_loading_evolutionmaps.dds";
        }

    }
    lv_victoryImage = UserDataGetImagePath("Maps", libSwaC_gf_ZS_MapUserDataInstance(lp_map), "LoadingScreenVictoryImage", 1);
    if ((lv_victoryImage == null)) {
        lv_victoryImage = libSwaC_gf_StoryMapLoadingScreenImage(libSwaC_gf_PostMissionStoryMap(lp_map, libSwaC_gv_zSX_IsSimulation, c_gameOverVictory));
    }

    return lv_victoryImage;
}

string libSwaC_gf_StoryMapMissionArchiveBackgroundImage (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetImagePath("Maps", libSwaC_gf_ZS_MapUserDataInstance(lp_map), "UI_MissionArchive_Background", 1);
}

bool libSwaC_gf_StoryMapTypeCheck (string lp_map, int lp_mapType) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_map == null)) {
        return false;
    }

    return (CatalogFieldValueGetAsInt(c_gameCatalogMap, (lp_map), "Kind", 1) == (lp_mapType));
}

string libSwaC_gf_StoryMapFile (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_map == null)) {
        return "";
    }

    return CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "File", 1);
}

string libSwaC_gf_StoryMapPlanet (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    if ((libSwaC_gf_StoryMapTypeCheck(lp_map, c_mapKindUpgrade) == true)) {
        if ((libSwaC_gv_zSX_LastStoryMap != null)) {
            return libSwaC_gf_StoryMapPlanet(libSwaC_gv_zSX_LastStoryMap);
        }
        else {
            return libSwaC_gf_StoryMapPlanet(libSwaC_gf_ZS_ArmyUltraUpgradeRequiredMission(libSwaC_gf_MissionArmyEvolutionUnlocked(lp_map)));
        }
    }

    return (CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "Location", c_playerAny));
}

text libSwaC_gf_StoryMapName (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_map == null)) {
        return StringExternal("Param/Value/lib_SwaC_0D01B8AD");
    }

    return StringExternal(CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "Name", 1));
}

text libSwaC_gf_StoryMapNameLowerCase (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_map == null)) {
        return StringExternal("Param/Value/lib_SwaC_61C047EF");
    }

    return UserDataGetText("Maps", libSwaC_gf_ZS_MapUserDataInstance(lp_map), "NameLowerCase", 1);
}

text libSwaC_gf_StoryMapHelp (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_map == null) || (libSwaC_gf_StoryMapTypeCheck(lp_map, c_mapKindStory) == true))) {
        return StringExternal("Param/Value/lib_SwaC_969F6414");
    }
    else if ((((lp_map == "ZChar1") && (libSwaC_gf_MissionStatusCheck("ZExpedition1", libSwaC_ge_MissionStatus_Completed) == true)) || ((lp_map == "ZExpedition1") && (libSwaC_gf_MissionStatusCheck("ZChar1", libSwaC_ge_MissionStatus_Completed) == true)))) {
        return StringExternal(CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "LoadingHelpAlternate", 1));
    }
    return StringExternal(CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "LoadingHelp", 1));
}

text libSwaC_gf_StoryMapHelp2 (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogMap, lp_map, "Summary", 1));
}

string libSwaC_gf_StoryMapContactPortrait (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "ContactModelLink", 1));
}

int libSwaC_gf_MissionStatusAge (string lp_mission, int lp_status) {
    // Automatic Variable Declarations
    int auto0FCBD4E2_val;

    // Implementation
    auto0FCBD4E2_val = lp_status;
    if (auto0FCBD4E2_val == libSwaC_ge_MissionStatus_Available) {
        return UserDataGetInt("Maps", libSwaC_gf_ZS_MapUserDataInstance(lp_mission), "AvailableAge", 1);
    }
    else if (auto0FCBD4E2_val == libSwaC_ge_MissionStatus_Completed) {
        return UserDataGetInt("Maps", libSwaC_gf_ZS_MapUserDataInstance(lp_mission), "CompletedAge", 1);
    }
    else {
    }
    return 0;
}

int libSwaC_gf_MissionStatus (string lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    if ((libSwaC_gf_MissionStatusAge(lp_mission, libSwaC_ge_MissionStatus_Completed) > 0)) {
        return libSwaC_ge_MissionStatus_Completed;
    }

    if ((libSwaC_gf_MissionStatusAge(lp_mission, libSwaC_ge_MissionStatus_Available) > 0)) {
        return libSwaC_ge_MissionStatus_Available;
    }

    return libSwaC_ge_MissionStatus_Locked;
}

bool libSwaC_gf_MissionStatusCheck (string lp_mission, int lp_status) {
    // Automatic Variable Declarations
    // Implementation
    return (libSwaC_gf_MissionStatus(lp_mission) == lp_status);
}

string libSwaC_gf_MissionPitch (string lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("Maps", libSwaC_gf_ZS_MapUserDataInstance(lp_mission), "Pitch", 1);
}

string libSwaC_gf_TravelPitch (string lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("Maps", libSwaC_gf_ZS_MapUserDataInstance(lp_mission), "Travel Pitch", 1);
}

int libSwaC_gf_NumberOfMissions (int lp_options) {
    // Variable Declarations
    string lv_indexMission;
    int lv_total;

    // Automatic Variable Declarations
    int autoD8EB8CD1_ae;
    int autoD8EB8CD1_ai;
    int autoA1F55B7F_val;

    // Variable Initialization

    // Implementation
    autoD8EB8CD1_ae = CatalogEntryCount(c_gameCatalogMap);
    autoD8EB8CD1_ai = 1;
    while (autoD8EB8CD1_ai <= autoD8EB8CD1_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoD8EB8CD1_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            autoA1F55B7F_val = lp_options;
            if (autoA1F55B7F_val == libSwaC_ge_MissionCountOptions_All) {
                lv_total += 1;
            }
            else if (autoA1F55B7F_val == libSwaC_ge_MissionCountOptions_Available) {
                if ((libSwaC_gf_MissionStatusCheck(lv_indexMission, libSwaC_ge_MissionStatus_Available) == true)) {
                    lv_total += 1;
                }

            }
            else if (autoA1F55B7F_val == libSwaC_ge_MissionCountOptions_Completed) {
                if ((libSwaC_gf_MissionStatusCheck(lv_indexMission, libSwaC_ge_MissionStatus_Completed) == true)) {
                    lv_total += 1;
                }

            }
            else if (autoA1F55B7F_val == libSwaC_ge_MissionCountOptions_Locked) {
                if ((libSwaC_gf_MissionStatusCheck(lv_indexMission, libSwaC_ge_MissionStatus_Locked) == true)) {
                    lv_total += 1;
                }

            }
            else {
            }
        }
        autoD8EB8CD1_ai = autoD8EB8CD1_ai + 1;
    }
    return lv_total;
}

int libSwaC_gf_NumberOfMissionsAll (int lp_options) {
    // Variable Declarations
    string lv_indexMission;
    int lv_total;

    // Automatic Variable Declarations
    int auto4745C134_ae;
    int auto4745C134_ai;
    int autoAF47181C_val;
    int auto8F208E85_ae;
    int auto8F208E85_ai;
    int autoF3565BF3_val;

    // Variable Initialization

    // Implementation
    auto4745C134_ae = CatalogEntryCount(c_gameCatalogMap);
    auto4745C134_ai = 1;
    while (auto4745C134_ai <= auto4745C134_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto4745C134_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            autoAF47181C_val = lp_options;
            if (autoAF47181C_val == libSwaC_ge_MissionCountOptions_All) {
                lv_total += 1;
            }
            else if (autoAF47181C_val == libSwaC_ge_MissionCountOptions_Available) {
                if ((libSwaC_gf_MissionStatusCheck(lv_indexMission, libSwaC_ge_MissionStatus_Available) == true)) {
                    lv_total += 1;
                }

            }
            else if (autoAF47181C_val == libSwaC_ge_MissionCountOptions_Completed) {
                if ((libSwaC_gf_MissionStatusCheck(lv_indexMission, libSwaC_ge_MissionStatus_Completed) == true)) {
                    lv_total += 1;
                }

            }
            else if (autoAF47181C_val == libSwaC_ge_MissionCountOptions_Locked) {
                if ((libSwaC_gf_MissionStatusCheck(lv_indexMission, libSwaC_ge_MissionStatus_Locked) == true)) {
                    lv_total += 1;
                }

            }
            else {
            }
        }
        auto4745C134_ai = auto4745C134_ai + 1;
    }
    auto8F208E85_ae = CatalogEntryCount(c_gameCatalogMap);
    auto8F208E85_ai = 1;
    while (auto8F208E85_ai <= auto8F208E85_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto8F208E85_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Upgrade") {
            autoF3565BF3_val = lp_options;
            if (autoF3565BF3_val == libSwaC_ge_MissionCountOptions_All) {
                lv_total += 1;
            }
            else if (autoF3565BF3_val == libSwaC_ge_MissionCountOptions_Available) {
                if ((libSwaC_gf_MissionStatusCheck(lv_indexMission, libSwaC_ge_MissionStatus_Available) == true)) {
                    lv_total += 1;
                }

            }
            else if (autoF3565BF3_val == libSwaC_ge_MissionCountOptions_Completed) {
                if ((libSwaC_gf_MissionStatusCheck(lv_indexMission, libSwaC_ge_MissionStatus_Completed) == true)) {
                    lv_total += 1;
                }

            }
            else if (autoF3565BF3_val == libSwaC_ge_MissionCountOptions_Locked) {
                if ((libSwaC_gf_MissionStatusCheck(lv_indexMission, libSwaC_ge_MissionStatus_Locked) == true)) {
                    lv_total += 1;
                }

            }
            else {
            }
        }
        auto8F208E85_ai = auto8F208E85_ai + 1;
    }
    return lv_total;
}

int libSwaC_gf_NumberOfMissionArcsCompleted () {
    // Variable Declarations
    int lv_total;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libSwaC_gf_MissionStatusCheck("ZLab3", libSwaC_ge_MissionStatus_Completed) == true)) {
        lv_total += 1;
    }

    if ((libSwaC_gf_MissionStatusCheck("ZExpedition3", libSwaC_ge_MissionStatus_Completed) == true)) {
        lv_total += 1;
    }

    if ((libSwaC_gf_MissionStatusCheck("ZChar3", libSwaC_ge_MissionStatus_Completed) == true)) {
        lv_total += 1;
    }

    if ((libSwaC_gf_MissionStatusCheck("ZZerus3", libSwaC_ge_MissionStatus_Completed) == true)) {
        lv_total += 1;
    }

    if ((libSwaC_gf_MissionStatusCheck("ZHybrid3", libSwaC_ge_MissionStatus_Completed) == true)) {
        lv_total += 1;
    }

    if ((libSwaC_gf_MissionStatusCheck("ZSpace2", libSwaC_ge_MissionStatus_Completed) == true)) {
        lv_total += 1;
    }

    if ((libSwaC_gf_MissionStatusCheck("ZKorhal3", libSwaC_ge_MissionStatus_Completed) == true)) {
        lv_total += 1;
    }

    return lv_total;
}

int libSwaC_gf_MissionCompleteBestTime (string lp_mission, int lp_difficulty) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("Maps", libSwaC_gf_ZS_MapUserDataInstance(lp_mission), "BestTime", libSwaC_gf_ZS_DifficultyIndex(lp_difficulty));
}

string libSwaC_gf_CurrentMap () {
    // Automatic Variable Declarations
    // Implementation
    return libSwaC_gv_zS_CurrentMap;
}

string libSwaC_gf_MissionArmyCategoryUnlocked (string lp_mission) {
    // Variable Declarations
    string lv_category;
    string lv_value;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_value = "";

    // Implementation
    lv_value = CatalogFieldValueGet(c_gameCatalogMap, (lp_mission), "ArmyCategory", 1);
    return (lv_value);
}

string libSwaC_gf_MissionArmyEvolutionUnlocked (string lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_mission == "ZZerus3") && (libSwaC_gf_MissionStatusAge("ZExpedition2", libSwaC_ge_MissionStatus_Completed) > libSwaC_gf_MissionStatusAge("ZZerus3", libSwaC_ge_MissionStatus_Completed))) {
        return "Hydralisk";
    }

    return UserDataGetGameLink("Maps", libSwaC_gf_ZS_MapUserDataInstance(lp_mission), "EvolutionUnlocked", 1);
}

int libSwaC_gf_MissionRewardTotalEarned (string lp_mission, string lp_type) {
    // Variable Declarations
    string lv_objective;
    int lv_count;

    // Automatic Variable Declarations
    int auto5269B614_ae;
    int auto5269B614_ai;

    // Variable Initialization

    // Implementation
    auto5269B614_ae = CatalogFieldValueCount(c_gameCatalogMap, lp_mission, "ObjectiveArray", 1);
    auto5269B614_ai = 1;
    while (auto5269B614_ai <= auto5269B614_ae) {
        lv_objective = CatalogFieldValueGet(c_gameCatalogMap, lp_mission, "ObjectiveArray["+IntToString(auto5269B614_ai-1)+"]", 1);
        lv_count += libSwaC_gf_MissionObjectiveRewardsEarned(lv_objective, lp_type);
        auto5269B614_ai = auto5269B614_ai + 1;
    }
    if ((libSwaC_gf_MissionStatusCheck(lp_mission, libSwaC_ge_MissionStatus_Completed) == true) && (lp_type == "KerriganXP")) {
        lv_count += libSwaC_gf_ZS_MissionKerriganXPRewarded(lp_mission, false);
    }
    return lv_count;
}

int libSwaC_gf_MissionRewardTotal (string lp_mission, string lp_type) {
    // Variable Declarations
    string lv_objective;
    int lv_count;

    // Automatic Variable Declarations
    int autoB30C0D32_ae;
    int autoB30C0D32_ai;

    // Variable Initialization

    // Implementation
    autoB30C0D32_ae = CatalogFieldValueCount(c_gameCatalogMap, lp_mission, "ObjectiveArray", 1);
    autoB30C0D32_ai = 1;
    while (autoB30C0D32_ai <= autoB30C0D32_ae) {
        lv_objective = CatalogFieldValueGet(c_gameCatalogMap, lp_mission, "ObjectiveArray["+IntToString(autoB30C0D32_ai-1)+"]", 1);
        if ((libSwaC_gf_ZS_ObjectiveRewardDivided(lv_objective) == true)) {
            lv_count += (libSwaC_gf_MissionObjectiveRewards(lv_objective, lp_type)*libSwaC_gf_MissionObjectiveItemCount(lv_objective));
        }
        else {
            lv_count += libSwaC_gf_MissionObjectiveRewards(lv_objective, lp_type);
        }
        autoB30C0D32_ai = autoB30C0D32_ai + 1;
    }
    if ((lp_type == "KerriganXP")) {
        lv_count += libSwaC_gf_ZS_MissionKerriganXPRewarded(lp_mission, false);
    }
    return lv_count;
}

string libSwaC_gf_MissionDefaultMusic () {
    // Automatic Variable Declarations
    string auto450152CF_val;

    // Implementation
    auto450152CF_val = libSwaC_gf_CurrentMap();
    if (auto450152CF_val == "ZLab1") {
        return "ZLab01MusicAlt";
    }
    else if (auto450152CF_val == "ZLab2") {
        return "Music_TerrLow";
    }
    else if (auto450152CF_val == "ZSpace1") {
        return "Music_TerrLow";
    }
    else {
        if ((libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindUpgrade) == true)) {
            return "ZEvoMusicMain";
        }
        else {
            return "Music_ZergLow";
        }
    }
}

bool libSwaC_gf_MissionCompletedOnDifficulty (string lp_mission, int lp_difficulty) {
    // Automatic Variable Declarations
    // Implementation
    return (libSwaC_gf_MissionCompleteBestTime(lp_mission, lp_difficulty) > 0);
}

string libSwaC_gf_ZS_MapUserDataInstance (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataInstanceFromReference(CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "UserReference", 1));
}

string libSwaC_gf_ZS_MapDataFromUserDataInstance (string lp_map) {
    // Variable Declarations
    string lv_indexMap;

    // Automatic Variable Declarations
    int auto1444F78C_ae;
    int auto1444F78C_ai;

    // Variable Initialization

    // Implementation
    auto1444F78C_ae = CatalogEntryCount(c_gameCatalogMap);
    auto1444F78C_ai = 1;
    while (auto1444F78C_ai <= auto1444F78C_ae) {
        lv_indexMap = CatalogEntryGet(c_gameCatalogMap, auto1444F78C_ai);
        if ((libSwaC_gf_ZS_MapUserDataInstance(lv_indexMap) == lp_map)) {
            return lv_indexMap;
        }

        auto1444F78C_ai = auto1444F78C_ai + 1;
    }
    return null;
}

string libSwaC_gf_ZS_StoryMapBankID (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    return (lp_map);
}

int libSwaC_gf_ZS_MissionKerriganXPRewarded (string lp_mission, bool lp_debugProgress) {
    // Variable Declarations
    int lv_xPReward;
    string lv_indexObjective;

    // Automatic Variable Declarations
    int auto9B46347D_ae;
    int auto9B46347D_ai;

    // Variable Initialization

    // Implementation
    if ((lp_debugProgress == false)) {
        return UserDataGetInt("Maps", libSwaC_gf_ZS_MapUserDataInstance(lp_mission), "KerriganXP", 1);
    }
    else {
        lv_xPReward = libSwaC_gf_ZS_MissionKerriganXPRewarded(lp_mission, false);
        auto9B46347D_ae = CatalogFieldValueCount(c_gameCatalogMap, lp_mission, "ObjectiveArray", 1);
        auto9B46347D_ai = 1;
        while (auto9B46347D_ai <= auto9B46347D_ae) {
            lv_indexObjective = CatalogFieldValueGet(c_gameCatalogMap, lp_mission, "ObjectiveArray["+IntToString(auto9B46347D_ai-1)+"]", 1);
            lv_xPReward += (libSwaC_gf_MissionObjectiveRewards(lv_indexObjective, "KerriganXP")*UserDataGetInt("MissionObjective", libSwaC_gf_ZS_ObjectiveUserDataInstance(lv_indexObjective), "CheatProgress", 1));
            auto9B46347D_ai = auto9B46347D_ai + 1;
        }
        return lv_xPReward;
    }
}

bool libSwaC_gf_ZS_MissionisInstallation (string lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_mission == "ZLab2") || (lp_mission == "ZExpedition3") || (lp_mission == "ZZerus3") || (lp_mission == "ZSpace1") || (lp_mission == "ZSpace2"))) {
        return true;
    }

    return false;
}

int libSwaC_gf_ZS_CompletedMissionCountOnDifficulty (int lp_difficulty) {
    // Variable Declarations
    string lv_indexMission;
    int lv_count;

    // Automatic Variable Declarations
    int autoC9AEF9E3_ae;
    int autoC9AEF9E3_ai;

    // Variable Initialization

    // Implementation
    autoC9AEF9E3_ae = CatalogEntryCount(c_gameCatalogMap);
    autoC9AEF9E3_ai = 1;
    while (autoC9AEF9E3_ai <= autoC9AEF9E3_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoC9AEF9E3_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            if ((libSwaC_gf_MissionCompletedOnDifficulty(lv_indexMission, lp_difficulty) == true)) {
                lv_count += 1;
            }

        }
        autoC9AEF9E3_ai = autoC9AEF9E3_ai + 1;
    }
    return lv_count;
}

void libSwaC_gf_LaunchMission (string lp_mission, bool lp_simulation, int lp_difficulty) {
    // Variable Declarations
    bool lv_useDebugDialog;
    string lv_nextMission;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libSwaC_gf_PrepareForMission(lp_mission, lp_simulation, false, lp_difficulty);
    TriggerExecute(libSwaC_gt_ZS_SaveCampaignStatsData, true, false);
    GameOver(1, c_gameOverVictory, false, false);
}

void libSwaC_gf_StoryMapSwitch (string lp_nextMap) {
    // Automatic Variable Declarations
    // Implementation
    libSwaC_gf_PrepareForStoryMapSwitch(lp_nextMap);
    TriggerExecute(libSwaC_gt_ZS_SaveCampaignStatsData, true, false);
    GameOver(1, c_gameOverVictory, false, false);
}

void libSwaC_gf_UpdateMissionFlow () {
    // Variable Declarations
    string lv_indexMission;

    // Automatic Variable Declarations
    int auto42A6041C_ae;
    int auto42A6041C_ai;

    // Variable Initialization

    // Implementation
    libSwaC_gf_ZS_LockUnlockMissionIfCondition(false, "ZLab1", true);
    libSwaC_gf_ZS_LockUnlockMissionIfCondition(false, "ZLab2", libSwaC_gf_MissionStatusCheck("ZLab1", libSwaC_ge_MissionStatus_Completed));
    libSwaC_gf_ZS_LockUnlockMissionIfCondition(false, "ZLab3", libSwaC_gf_MissionStatusCheck("ZLab2", libSwaC_ge_MissionStatus_Completed));
    libSwaC_gf_ZS_LockUnlockMissionIfCondition(false, "ZExpedition1", libSwaC_gf_MissionStatusCheck("ZLab3", libSwaC_ge_MissionStatus_Completed));
    libSwaC_gf_ZS_LockUnlockMissionIfCondition(false, "ZExpedition2", libSwaC_gf_MissionStatusCheck("ZExpedition1", libSwaC_ge_MissionStatus_Completed));
    libSwaC_gf_ZS_LockUnlockMissionIfCondition(false, "ZExpedition3", libSwaC_gf_MissionStatusCheck("ZExpedition2", libSwaC_ge_MissionStatus_Completed));
    libSwaC_gf_ZS_LockUnlockMissionIfCondition(false, "ZChar1", libSwaC_gf_MissionStatusCheck("ZLab3", libSwaC_ge_MissionStatus_Completed));
    libSwaC_gf_ZS_LockUnlockMissionIfCondition(false, "ZChar2", libSwaC_gf_MissionStatusCheck("ZChar1", libSwaC_ge_MissionStatus_Completed));
    libSwaC_gf_ZS_LockUnlockMissionIfCondition(false, "ZChar3", libSwaC_gf_MissionStatusCheck("ZChar2", libSwaC_ge_MissionStatus_Completed));
    libSwaC_gf_ZS_LockUnlockMissionIfCondition(false, "ZZerus1", (libSwaC_gf_NumberOfMissionArcsCompleted() >= 2));
    libSwaC_gf_ZS_LockUnlockMissionIfCondition(false, "ZZerus2", libSwaC_gf_MissionStatusCheck("ZZerus1", libSwaC_ge_MissionStatus_Completed));
    libSwaC_gf_ZS_LockUnlockMissionIfCondition(false, "ZZerus3", libSwaC_gf_MissionStatusCheck("ZZerus2", libSwaC_ge_MissionStatus_Completed));
    libSwaC_gf_ZS_LockUnlockMissionIfCondition(false, "ZHybrid1", (libSwaC_gf_NumberOfMissionArcsCompleted() >= 4));
    libSwaC_gf_ZS_LockUnlockMissionIfCondition(false, "ZHybrid2", libSwaC_gf_MissionStatusCheck("ZHybrid1", libSwaC_ge_MissionStatus_Completed));
    libSwaC_gf_ZS_LockUnlockMissionIfCondition(false, "ZHybrid3", libSwaC_gf_MissionStatusCheck("ZHybrid2", libSwaC_ge_MissionStatus_Completed));
    libSwaC_gf_ZS_LockUnlockMissionIfCondition(false, "ZSpace1", (libSwaC_gf_NumberOfMissionArcsCompleted() >= 4));
    libSwaC_gf_ZS_LockUnlockMissionIfCondition(false, "ZSpace2", libSwaC_gf_MissionStatusCheck("ZSpace1", libSwaC_ge_MissionStatus_Completed));
    libSwaC_gf_ZS_LockUnlockMissionIfCondition(false, "ZKorhal1", (libSwaC_gf_NumberOfMissionArcsCompleted() >= 6));
    libSwaC_gf_ZS_LockUnlockMissionIfCondition(false, "ZKorhal2", libSwaC_gf_MissionStatusCheck("ZKorhal1", libSwaC_ge_MissionStatus_Completed));
    libSwaC_gf_ZS_LockUnlockMissionIfCondition(false, "ZKorhal3", libSwaC_gf_MissionStatusCheck("ZKorhal2", libSwaC_ge_MissionStatus_Completed));
    auto42A6041C_ae = CatalogEntryCount(c_gameCatalogMap);
    auto42A6041C_ai = 1;
    while (auto42A6041C_ai <= auto42A6041C_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto42A6041C_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            if ((libSwaC_gf_MissionArmyEvolutionUnlocked(lv_indexMission) != null)) {
                libSwaC_gf_ZS_LockUnlockMissionIfCondition(false, libSwaC_gf_StoryArmyCategoryEvolutionMission(libSwaC_gf_MissionArmyEvolutionUnlocked(lv_indexMission)), libSwaC_gf_MissionStatusCheck(lv_indexMission, libSwaC_ge_MissionStatus_Completed));
            }

        }
        auto42A6041C_ai = auto42A6041C_ai + 1;
    }
    ConversationDataStateSetValue("MissionsCompleted", libSwaC_gf_NumberOfMissions(libSwaC_ge_MissionCountOptions_Completed));
    libSwaC_gf_ZS_UpdatePlanetData(libSwaC_gf_StoryMapPlanet(libSwaC_gf_CurrentMap()));
    libSwaC_gf_ZS_UpdateKerriganType();
}

void libSwaC_gf_SetCurrentMap (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    libSwaC_gv_zS_CurrentMap = lp_map;
    libSwaC_gf_ZS_UpdatePlanetData(libSwaC_gf_StoryMapPlanet(libSwaC_gf_CurrentMap()));
}

void libSwaC_gf_ZS_SetMissionStatusAge (string lp_mission, int lp_status, int lp_age) {
    // Variable Declarations
    string lv_indexObjective;

    // Automatic Variable Declarations
    int autoDFD646A8_val;
    int auto47C4F193_ae;
    int auto47C4F193_ai;

    // Variable Initialization

    // Implementation
    autoDFD646A8_val = lp_status;
    if (autoDFD646A8_val == libSwaC_ge_MissionStatus_Available) {
        UserDataSetInt("Maps", libSwaC_gf_ZS_MapUserDataInstance(lp_mission), "AvailableAge", 1, lp_age);
    }
    else if (autoDFD646A8_val == libSwaC_ge_MissionStatus_Completed) {
        UserDataSetInt("Maps", libSwaC_gf_ZS_MapUserDataInstance(lp_mission), "CompletedAge", 1, lp_age);
        if ((lp_age == 0)) {
            auto47C4F193_ae = CatalogFieldValueCount(c_gameCatalogMap, lp_mission, "ObjectiveArray", 1);
            auto47C4F193_ai = 1;
            while (auto47C4F193_ai <= auto47C4F193_ae) {
                lv_indexObjective = CatalogFieldValueGet(c_gameCatalogMap, lp_mission, "ObjectiveArray["+IntToString(auto47C4F193_ai-1)+"]", 1);
                libSwaC_gf_ZS_SetObjectiveProgressData(lv_indexObjective, 0, false);
                auto47C4F193_ai = auto47C4F193_ai + 1;
            }
        }

    }
    else {
    }
}

void libSwaC_gf_ZS_IncreaseMissionAge (string lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    if ((libSwaC_gf_MissionStatusAge(lp_mission, libSwaC_ge_MissionStatus_Available) > 0)) {
        libSwaC_gf_ZS_SetMissionStatusAge(lp_mission, libSwaC_ge_MissionStatus_Available, (libSwaC_gf_MissionStatusAge(lp_mission, libSwaC_ge_MissionStatus_Available) + 1));
    }

    if ((libSwaC_gf_MissionStatusAge(lp_mission, libSwaC_ge_MissionStatus_Completed) > 0)) {
        libSwaC_gf_ZS_SetMissionStatusAge(lp_mission, libSwaC_ge_MissionStatus_Completed, (libSwaC_gf_MissionStatusAge(lp_mission, libSwaC_ge_MissionStatus_Completed) + 1));
    }

}

void libSwaC_gf_ZS_CompleteMission (string lp_mission) {
    // Variable Declarations
    string lv_indexMision;

    // Automatic Variable Declarations
    int auto3F2D8473_ae;
    int auto3F2D8473_ai;
    int auto02739C89_ae;
    int auto02739C89_ai;

    // Variable Initialization

    // Implementation
    if (((lp_mission == null) || (libSwaC_gf_MissionStatusCheck(lp_mission, libSwaC_ge_MissionStatus_Completed) == true))) {
        return ;
    }

    libSwaC_gf_ZS_MarkMissionAsStatus(lp_mission, libSwaC_ge_MissionStatus_Completed);
    auto3F2D8473_ae = CatalogEntryCount(c_gameCatalogMap);
    auto3F2D8473_ai = 1;
    while (auto3F2D8473_ai <= auto3F2D8473_ae) {
        lv_indexMision = CatalogEntryGet(c_gameCatalogMap, auto3F2D8473_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMision, "Kind", 1) == "Upgrade") {
            if ((lv_indexMision != lp_mission)) {
                libSwaC_gf_ZS_IncreaseMissionAge(lv_indexMision);
            }

        }
        auto3F2D8473_ai = auto3F2D8473_ai + 1;
    }
    if ((libSwaC_gf_StoryMapTypeCheck(lp_mission, c_mapKindMission) != true)) {
        return ;
    }

    auto02739C89_ae = CatalogEntryCount(c_gameCatalogMap);
    auto02739C89_ai = 1;
    while (auto02739C89_ai <= auto02739C89_ae) {
        lv_indexMision = CatalogEntryGet(c_gameCatalogMap, auto02739C89_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMision, "Kind", 1) == "Mission") {
            if ((lv_indexMision != lp_mission)) {
                libSwaC_gf_ZS_IncreaseMissionAge(lv_indexMision);
            }

        }
        auto02739C89_ai = auto02739C89_ai + 1;
    }
    libSwaC_gf_UpdateMissionFlow();
    libSwaC_gf_ZS_LevelUpKerrigan();
    libSwaC_gf_ZS_UpdateTechStates(1);
}

void libSwaC_gf_ZS_UpdateSimulationMissionAges (string lp_simulationMap) {
    // Variable Declarations
    bool lv_lockSpaceHybrid;
    bool lv_lockCharKaldirZerus;
    bool lv_lockKorhal;
    string lv_indexMission;

    // Automatic Variable Declarations
    string autoD82902A4_val;
    int auto094B0175_ae;
    int auto094B0175_ai;
    int autoE012BDD4_ae;
    int autoE012BDD4_ai;
    int autoB217ED36_ae;
    int autoB217ED36_ai;

    // Variable Initialization

    // Implementation
    libSwaC_gf_ZS_MarkMissionAsStatus(lp_simulationMap, libSwaC_ge_MissionStatus_Available);
    autoD82902A4_val = lp_simulationMap;
    if (autoD82902A4_val == "ZLab1") {
        lv_lockCharKaldirZerus = true;
        lv_lockSpaceHybrid = true;
        lv_lockKorhal = true;
        libSwaC_gf_ZS_MarkMissionAsStatus("ZLab2", libSwaC_ge_MissionStatus_Locked);
        libSwaC_gf_ZS_MarkMissionAsStatus("ZLab3", libSwaC_ge_MissionStatus_Locked);
    }
    else if (autoD82902A4_val == "ZLab2") {
        lv_lockCharKaldirZerus = true;
        lv_lockSpaceHybrid = true;
        lv_lockKorhal = true;
        libSwaC_gf_ZS_MarkMissionAsStatus("ZLab3", libSwaC_ge_MissionStatus_Locked);
    }
    else if (autoD82902A4_val == "ZLab3") {
        lv_lockCharKaldirZerus = true;
        lv_lockSpaceHybrid = true;
        lv_lockKorhal = true;
    }
    else if (autoD82902A4_val == "ZChar1") {
        lv_lockSpaceHybrid = true;
        lv_lockKorhal = true;
        libSwaC_gf_ZS_MarkMissionAsStatus("ZChar2", libSwaC_ge_MissionStatus_Locked);
        libSwaC_gf_ZS_MarkMissionAsStatus("ZChar3", libSwaC_ge_MissionStatus_Locked);
    }
    else if (autoD82902A4_val == "ZChar2") {
        lv_lockSpaceHybrid = true;
        lv_lockKorhal = true;
        libSwaC_gf_ZS_MarkMissionAsStatus("ZChar3", libSwaC_ge_MissionStatus_Locked);
    }
    else if (autoD82902A4_val == "ZChar3") {
        lv_lockSpaceHybrid = true;
        lv_lockKorhal = true;
    }
    else if (autoD82902A4_val == "ZExpedition1") {
        lv_lockSpaceHybrid = true;
        lv_lockKorhal = true;
        libSwaC_gf_ZS_MarkMissionAsStatus("ZExpedition2", libSwaC_ge_MissionStatus_Locked);
        libSwaC_gf_ZS_MarkMissionAsStatus("ZExpedition3", libSwaC_ge_MissionStatus_Locked);
    }
    else if (autoD82902A4_val == "ZExpedition2") {
        lv_lockSpaceHybrid = true;
        lv_lockKorhal = true;
        libSwaC_gf_ZS_MarkMissionAsStatus("ZExpedition3", libSwaC_ge_MissionStatus_Locked);
    }
    else if (autoD82902A4_val == "ZExpedition3") {
        lv_lockSpaceHybrid = true;
        lv_lockKorhal = true;
    }
    else if (autoD82902A4_val == "ZZerus1") {
        lv_lockSpaceHybrid = true;
        lv_lockKorhal = true;
        libSwaC_gf_ZS_MarkMissionAsStatus("ZZerus2", libSwaC_ge_MissionStatus_Locked);
        libSwaC_gf_ZS_MarkMissionAsStatus("ZZerus3", libSwaC_ge_MissionStatus_Locked);
    }
    else if (autoD82902A4_val == "ZZerus2") {
        lv_lockSpaceHybrid = true;
        lv_lockKorhal = true;
        libSwaC_gf_ZS_MarkMissionAsStatus("ZZerus3", libSwaC_ge_MissionStatus_Locked);
    }
    else if (autoD82902A4_val == "ZZerus3") {
        lv_lockSpaceHybrid = true;
        lv_lockKorhal = true;
    }
    else if (autoD82902A4_val == "ZHybrid1") {
        lv_lockKorhal = true;
        libSwaC_gf_ZS_MarkMissionAsStatus("ZHybrid2", libSwaC_ge_MissionStatus_Locked);
        libSwaC_gf_ZS_MarkMissionAsStatus("ZHybrid3", libSwaC_ge_MissionStatus_Locked);
    }
    else if (autoD82902A4_val == "ZHybrid2") {
        lv_lockKorhal = true;
        libSwaC_gf_ZS_MarkMissionAsStatus("ZHybrid3", libSwaC_ge_MissionStatus_Locked);
    }
    else if (autoD82902A4_val == "ZHybrid3") {
        lv_lockKorhal = true;
    }
    else if (autoD82902A4_val == "ZSpace1") {
        lv_lockKorhal = true;
        libSwaC_gf_ZS_MarkMissionAsStatus("ZSpace2", libSwaC_ge_MissionStatus_Locked);
    }
    else if (autoD82902A4_val == "ZSpace2") {
        lv_lockKorhal = true;
    }
    else if (autoD82902A4_val == "ZKorhal1") {
        libSwaC_gf_ZS_MarkMissionAsStatus("ZKorhal2", libSwaC_ge_MissionStatus_Locked);
        libSwaC_gf_ZS_MarkMissionAsStatus("ZKorhal3", libSwaC_ge_MissionStatus_Locked);
    }
    else if (autoD82902A4_val == "ZKorhal2") {
        libSwaC_gf_ZS_MarkMissionAsStatus("ZKorhal3", libSwaC_ge_MissionStatus_Locked);
    }
    else {
    }
    if ((lv_lockCharKaldirZerus == true)) {
        libSwaC_gf_ZS_MarkMissionAsStatus("ZChar1", libSwaC_ge_MissionStatus_Locked);
        libSwaC_gf_ZS_MarkMissionAsStatus("ZChar2", libSwaC_ge_MissionStatus_Locked);
        libSwaC_gf_ZS_MarkMissionAsStatus("ZChar3", libSwaC_ge_MissionStatus_Locked);
        libSwaC_gf_ZS_MarkMissionAsStatus("ZExpedition1", libSwaC_ge_MissionStatus_Locked);
        libSwaC_gf_ZS_MarkMissionAsStatus("ZExpedition2", libSwaC_ge_MissionStatus_Locked);
        libSwaC_gf_ZS_MarkMissionAsStatus("ZExpedition3", libSwaC_ge_MissionStatus_Locked);
        libSwaC_gf_ZS_MarkMissionAsStatus("ZZerus1", libSwaC_ge_MissionStatus_Locked);
        libSwaC_gf_ZS_MarkMissionAsStatus("ZZerus2", libSwaC_ge_MissionStatus_Locked);
        libSwaC_gf_ZS_MarkMissionAsStatus("ZZerus3", libSwaC_ge_MissionStatus_Locked);
    }

    if ((lv_lockSpaceHybrid == true)) {
        libSwaC_gf_ZS_MarkMissionAsStatus("ZHybrid1", libSwaC_ge_MissionStatus_Locked);
        libSwaC_gf_ZS_MarkMissionAsStatus("ZHybrid2", libSwaC_ge_MissionStatus_Locked);
        libSwaC_gf_ZS_MarkMissionAsStatus("ZHybrid3", libSwaC_ge_MissionStatus_Locked);
        libSwaC_gf_ZS_MarkMissionAsStatus("ZSpace1", libSwaC_ge_MissionStatus_Locked);
        libSwaC_gf_ZS_MarkMissionAsStatus("ZSpace2", libSwaC_ge_MissionStatus_Locked);
    }

    if ((lv_lockKorhal == true)) {
        libSwaC_gf_ZS_MarkMissionAsStatus("ZKorhal1", libSwaC_ge_MissionStatus_Locked);
        libSwaC_gf_ZS_MarkMissionAsStatus("ZKorhal2", libSwaC_ge_MissionStatus_Locked);
        libSwaC_gf_ZS_MarkMissionAsStatus("ZKorhal3", libSwaC_ge_MissionStatus_Locked);
    }

    libSwaC_gf_UpdateMissionFlow();
    auto094B0175_ae = CatalogEntryCount(c_gameCatalogMap);
    auto094B0175_ai = 1;
    while (auto094B0175_ai <= auto094B0175_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto094B0175_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Upgrade") {
            DataTableSetBool(false, ((lv_indexMission) + "_Available"), false);
        }
        auto094B0175_ai = auto094B0175_ai + 1;
    }
    autoE012BDD4_ae = CatalogEntryCount(c_gameCatalogMap);
    autoE012BDD4_ai = 1;
    while (autoE012BDD4_ai <= autoE012BDD4_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoE012BDD4_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            if ((libSwaC_gf_MissionArmyEvolutionUnlocked(lv_indexMission) != null) && (libSwaC_gf_MissionStatusCheck(lv_indexMission, libSwaC_ge_MissionStatus_Completed) == true)) {
                DataTableSetBool(false, ((libSwaC_gf_StoryArmyCategoryEvolutionMission(libSwaC_gf_MissionArmyEvolutionUnlocked(lv_indexMission))) + "_Available"), true);
            }

        }
        autoE012BDD4_ai = autoE012BDD4_ai + 1;
    }
    autoB217ED36_ae = CatalogEntryCount(c_gameCatalogMap);
    autoB217ED36_ai = 1;
    while (autoB217ED36_ai <= autoB217ED36_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoB217ED36_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Upgrade") {
            if ((DataTableGetBool(false, ((lv_indexMission) + "_Available")) == false)) {
                libSwaC_gf_ZS_MarkMissionAsStatus(lv_indexMission, libSwaC_ge_MissionStatus_Locked);
            }

        }
        autoB217ED36_ai = autoB217ED36_ai + 1;
    }
    libSwaC_gf_ZS_UpdateTechStates(1);
    libSwaC_gf_ZS_ApplyTech(1);
}

void libSwaC_gf_ZS_MarkMissionAsStatus (string lp_mission, int lp_status) {
    // Automatic Variable Declarations
    int autoAE226A94_val;

    // Implementation
    autoAE226A94_val = lp_status;
    if (autoAE226A94_val == libSwaC_ge_MissionStatus_Locked) {
        libSwaC_gf_ZS_SetMissionStatusAge(lp_mission, libSwaC_ge_MissionStatus_Available, 0);
        libSwaC_gf_ZS_SetMissionStatusAge(lp_mission, libSwaC_ge_MissionStatus_Completed, 0);
    }
    else if (autoAE226A94_val == libSwaC_ge_MissionStatus_Available) {
        libSwaC_gf_ZS_SetMissionStatusAge(lp_mission, libSwaC_ge_MissionStatus_Available, 1);
        libSwaC_gf_ZS_SetMissionStatusAge(lp_mission, libSwaC_ge_MissionStatus_Completed, 0);
    }
    else if (autoAE226A94_val == libSwaC_ge_MissionStatus_Completed) {
        libSwaC_gf_ZS_SetMissionStatusAge(lp_mission, libSwaC_ge_MissionStatus_Available, 0);
        libSwaC_gf_ZS_SetMissionStatusAge(lp_mission, libSwaC_ge_MissionStatus_Completed, 1);
    }
    else {
    }
}

void libSwaC_gf_ZS_LockUnlockMissionIfCondition (bool lp_lockUnlock, string lp_mission, bool lp_condition) {
    // Variable Declarations
    text lv_label;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_lockUnlock == true)) {
        lv_label = StringExternal("Param/Value/lib_SwaC_DF3A05B3");
    }
    else {
        lv_label = StringExternal("Param/Value/lib_SwaC_47A5386C");
    }
    TextExpressionSetToken("Param/Expression/lib_SwaC_1221812A", "A", lv_label);
    TextExpressionSetToken("Param/Expression/lib_SwaC_1221812A", "B", StringToText((lp_mission)));
    TextExpressionSetToken("Param/Expression/lib_SwaC_1221812A", "C", libNtve_gf_ConvertBooleanToText(lp_condition));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_SwaC_1221812A"), false);
    if ((lp_condition == true)) {
        if ((lp_lockUnlock == false)) {
            if ((libSwaC_gf_MissionStatusCheck(lp_mission, libSwaC_ge_MissionStatus_Locked) == true)) {
                libSwaC_gf_ZS_MarkMissionAsStatus(lp_mission, libSwaC_ge_MissionStatus_Available);
            }

        }
        else {
            if ((libSwaC_gf_MissionStatusCheck(lp_mission, libSwaC_ge_MissionStatus_Available) == true)) {
                libSwaC_gf_ZS_MarkMissionAsStatus(lp_mission, libSwaC_ge_MissionStatus_Locked);
            }

        }
    }

}

void libSwaC_gf_ZS_SetMissionCompletionBestTime (string lp_mIssion, int lp_difficulty, int lp_time) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_time < 0)) {
        return ;
    }

    UserDataSetInt("Maps", libSwaC_gf_ZS_MapUserDataInstance(lp_mIssion), "BestTime", libSwaC_gf_ZS_DifficultyIndex(lp_difficulty), lp_time);
}

void libSwaC_gf_ZS_SaveMapToBank (string lp_bankMap, bank lp_targetBank, bool lp_isSimulation) {
    // Variable Declarations
    string lv__SectionName;
    string lv_indexMission;
    string lv_indexObjective;
    int lv_difficulty;
    int lv_progressThisMission;

    // Automatic Variable Declarations
    int auto85FC093E_ae;
    int auto85FC093E_ai;
    int autoCAC9F5B1_ae;
    int autoCAC9F5B1_ai;
    int auto2B4910CB_ae;
    int auto2B4910CB_ai;
    int auto62C536D3_ae;
    int auto62C536D3_ai;
    int auto7E5546BA_ae;
    int auto7E5546BA_ai;
    int autoCE8C9321_ae;
    int autoCE8C9321_ai;
    int auto6C89DB5E_ae;
    int auto6C89DB5E_ai;
    int auto7E76BAA4_ae;
    int auto7E76BAA4_ai;

    // Variable Initialization
    lv__SectionName = "";
    lv_difficulty = 2;

    // Implementation
    if ((lp_bankMap == null)) {
        lv__SectionName = libSwaC_gf_ZS_BankSectionName(lp_bankMap, "MissionBestTime");
        auto85FC093E_ae = CatalogEntryCount(c_gameCatalogMap);
        auto85FC093E_ai = 1;
        while (auto85FC093E_ai <= auto85FC093E_ae) {
            lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto85FC093E_ai);
            if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
                libSwaC_gf_ZS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, libSwaC_gf_ZS_BankMIssionDifficultyKey(lv_indexMission, 1), libSwaC_gf_MissionCompleteBestTime(lv_indexMission, 1), -1);
                libSwaC_gf_ZS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, libSwaC_gf_ZS_BankMIssionDifficultyKey(lv_indexMission, 2), libSwaC_gf_MissionCompleteBestTime(lv_indexMission, 2), -1);
                libSwaC_gf_ZS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, libSwaC_gf_ZS_BankMIssionDifficultyKey(lv_indexMission, 3), libSwaC_gf_MissionCompleteBestTime(lv_indexMission, 3), -1);
                libSwaC_gf_ZS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, libSwaC_gf_ZS_BankMIssionDifficultyKey(lv_indexMission, 4), libSwaC_gf_MissionCompleteBestTime(lv_indexMission, 4), -1);
            }
            auto85FC093E_ai = auto85FC093E_ai + 1;
        }
        autoCAC9F5B1_ae = CatalogEntryCount(c_gameCatalogMap);
        autoCAC9F5B1_ai = 1;
        while (autoCAC9F5B1_ai <= autoCAC9F5B1_ae) {
            lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoCAC9F5B1_ai);
            if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Upgrade") {
                libSwaC_gf_ZS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, libSwaC_gf_ZS_BankMIssionDifficultyKey(lv_indexMission, 1), libSwaC_gf_MissionCompleteBestTime(lv_indexMission, 1), -1);
                libSwaC_gf_ZS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, libSwaC_gf_ZS_BankMIssionDifficultyKey(lv_indexMission, 2), libSwaC_gf_MissionCompleteBestTime(lv_indexMission, 2), -1);
                libSwaC_gf_ZS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, libSwaC_gf_ZS_BankMIssionDifficultyKey(lv_indexMission, 3), libSwaC_gf_MissionCompleteBestTime(lv_indexMission, 3), -1);
                libSwaC_gf_ZS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, libSwaC_gf_ZS_BankMIssionDifficultyKey(lv_indexMission, 4), libSwaC_gf_MissionCompleteBestTime(lv_indexMission, 4), -1);
            }
            autoCAC9F5B1_ai = autoCAC9F5B1_ai + 1;
        }
        libSwaC_gf_ZS_ArchiveBankSave();
    }

    lv__SectionName = libSwaC_gf_ZS_BankSectionName(lp_bankMap, "MissionObjectives");
    if ((lp_isSimulation == true)) {
        auto62C536D3_ae = CatalogFieldValueCount(c_gameCatalogMap, libSwaC_gf_CurrentMap(), "ObjectiveArray", 1);
        auto62C536D3_ai = 1;
        while (auto62C536D3_ai <= auto62C536D3_ae) {
            lv_indexObjective = CatalogFieldValueGet(c_gameCatalogMap, libSwaC_gf_CurrentMap(), "ObjectiveArray["+IntToString(auto62C536D3_ai-1)+"]", 1);
            if ((libSwaC_gf_MissionObjectiveIsPrimary(lv_indexObjective) == false)) {
                lv_progressThisMission = libSwaC_gf_MissionObjectiveProgress(lv_indexObjective);
                UserDataSetInt("MissionObjective", libSwaC_gf_ZS_ObjectiveUserDataInstance(lv_indexObjective), "Progress", 1, libSwaC_gf_ZS_MissionObjectiveBestProgress(lv_indexObjective));
                UserDataSaveInstance("MissionObjective", libSwaC_gf_ZS_ObjectiveUserDataInstance(lv_indexObjective), lp_targetBank, lv__SectionName);
                UserDataSetInt("MissionObjective", libSwaC_gf_ZS_ObjectiveUserDataInstance(lv_indexObjective), "Progress", 1, lv_progressThisMission);
            }

            auto62C536D3_ai = auto62C536D3_ai + 1;
        }
    }
    else {
        auto2B4910CB_ae = CatalogEntryCount(c_gameCatalogObjective);
        auto2B4910CB_ai = 1;
        while (auto2B4910CB_ai <= auto2B4910CB_ae) {
            lv_indexObjective = CatalogEntryGet(c_gameCatalogObjective, auto2B4910CB_ai);
            if ((libSwaC_gf_MissionObjectiveIsPrimary(lv_indexObjective) == false)) {
                UserDataSaveInstance("MissionObjective", libSwaC_gf_ZS_ObjectiveUserDataInstance(lv_indexObjective), lp_targetBank, lv__SectionName);
            }

            auto2B4910CB_ai = auto2B4910CB_ai + 1;
        }
    }
    if ((lp_isSimulation == true)) {
        if ((libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindUpgrade) == true) && (libSwaC_gf_MissionStatusAge(libSwaC_gf_CurrentMap(), libSwaC_ge_MissionStatus_Completed) != 0)) {
            lv__SectionName = libSwaC_gf_ZS_BankSectionName(lp_bankMap, "MissionCompletedAge");
            libSwaC_gf_ZS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, libSwaC_gf_ZS_StoryMapBankID(libSwaC_gf_CurrentMap()), libSwaC_gf_MissionStatusAge(libSwaC_gf_CurrentMap(), libSwaC_ge_MissionStatus_Completed), 0);
            lv__SectionName = libSwaC_gf_ZS_BankSectionName(lp_bankMap, "MissionAvailableAge");
            libSwaC_gf_ZS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, libSwaC_gf_ZS_StoryMapBankID(libSwaC_gf_CurrentMap()), libSwaC_gf_MissionStatusAge(libSwaC_gf_CurrentMap(), libSwaC_ge_MissionStatus_Available), 0);
        }

        return ;
    }

    lv__SectionName = libSwaC_gf_ZS_BankSectionName(lp_bankMap, "MissionAvailableAge");
    auto7E5546BA_ae = CatalogEntryCount(c_gameCatalogMap);
    auto7E5546BA_ai = 1;
    while (auto7E5546BA_ai <= auto7E5546BA_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto7E5546BA_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            libSwaC_gf_ZS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, libSwaC_gf_ZS_StoryMapBankID(lv_indexMission), libSwaC_gf_MissionStatusAge(lv_indexMission, libSwaC_ge_MissionStatus_Available), 0);
        }
        auto7E5546BA_ai = auto7E5546BA_ai + 1;
    }
    autoCE8C9321_ae = CatalogEntryCount(c_gameCatalogMap);
    autoCE8C9321_ai = 1;
    while (autoCE8C9321_ai <= autoCE8C9321_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoCE8C9321_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Upgrade") {
            libSwaC_gf_ZS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, libSwaC_gf_ZS_StoryMapBankID(lv_indexMission), libSwaC_gf_MissionStatusAge(lv_indexMission, libSwaC_ge_MissionStatus_Available), 0);
        }
        autoCE8C9321_ai = autoCE8C9321_ai + 1;
    }
    lv__SectionName = libSwaC_gf_ZS_BankSectionName(lp_bankMap, "MissionCompletedAge");
    auto6C89DB5E_ae = CatalogEntryCount(c_gameCatalogMap);
    auto6C89DB5E_ai = 1;
    while (auto6C89DB5E_ai <= auto6C89DB5E_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto6C89DB5E_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            libSwaC_gf_ZS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, libSwaC_gf_ZS_StoryMapBankID(lv_indexMission), libSwaC_gf_MissionStatusAge(lv_indexMission, libSwaC_ge_MissionStatus_Completed), 0);
        }
        auto6C89DB5E_ai = auto6C89DB5E_ai + 1;
    }
    auto7E76BAA4_ae = CatalogEntryCount(c_gameCatalogMap);
    auto7E76BAA4_ai = 1;
    while (auto7E76BAA4_ai <= auto7E76BAA4_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto7E76BAA4_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Upgrade") {
            libSwaC_gf_ZS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, libSwaC_gf_ZS_StoryMapBankID(lv_indexMission), libSwaC_gf_MissionStatusAge(lv_indexMission, libSwaC_ge_MissionStatus_Completed), 0);
        }
        auto7E76BAA4_ai = auto7E76BAA4_ai + 1;
    }
}

void libSwaC_gf_ZS_LoadMapFromBank (string lp_bankMap, bank lp_sourceBank) {
    // Variable Declarations
    string lv__SectionName;
    string lv_indexMission;
    string lv_indexObjective;

    // Automatic Variable Declarations
    int autoFF84D179_ae;
    int autoFF84D179_ai;
    int autoEF0E26DA_ae;
    int autoEF0E26DA_ai;
    int auto2356901B_ae;
    int auto2356901B_ai;
    int autoFD6CFF07_ae;
    int autoFD6CFF07_ai;
    int auto6B85C214_ae;
    int auto6B85C214_ai;
    int autoF61805E8_ae;
    int autoF61805E8_ai;
    int auto1502D4DA_ae;
    int auto1502D4DA_ai;
    int autoF4A6A1CE_ae;
    int autoF4A6A1CE_ai;
    int auto575851C8_ae;
    int auto575851C8_ai;

    // Variable Initialization
    lv__SectionName = "";

    // Implementation
    if ((lp_bankMap == null)) {
        lv__SectionName = libSwaC_gf_ZS_BankSectionName(lp_bankMap, "MissionAvailableAge");
        autoEF0E26DA_ae = CatalogEntryCount(c_gameCatalogMap);
        autoEF0E26DA_ai = 1;
        while (autoEF0E26DA_ai <= autoEF0E26DA_ae) {
            lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoEF0E26DA_ai);
            if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
                libSwaC_gf_ZS_SetMissionStatusAge(lv_indexMission, libSwaC_ge_MissionStatus_Available, libSwaC_gf_ZS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, libSwaC_gf_ZS_StoryMapBankID(lv_indexMission), 0));
            }
            autoEF0E26DA_ai = autoEF0E26DA_ai + 1;
        }
        auto2356901B_ae = CatalogEntryCount(c_gameCatalogMap);
        auto2356901B_ai = 1;
        while (auto2356901B_ai <= auto2356901B_ae) {
            lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto2356901B_ai);
            if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Upgrade") {
                libSwaC_gf_ZS_SetMissionStatusAge(lv_indexMission, libSwaC_ge_MissionStatus_Available, libSwaC_gf_ZS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, libSwaC_gf_ZS_StoryMapBankID(lv_indexMission), 0));
            }
            auto2356901B_ai = auto2356901B_ai + 1;
        }
        lv__SectionName = libSwaC_gf_ZS_BankSectionName(lp_bankMap, "MissionCompletedAge");
        autoFD6CFF07_ae = CatalogEntryCount(c_gameCatalogMap);
        autoFD6CFF07_ai = 1;
        while (autoFD6CFF07_ai <= autoFD6CFF07_ae) {
            lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoFD6CFF07_ai);
            if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
                libSwaC_gf_ZS_SetMissionStatusAge(lv_indexMission, libSwaC_ge_MissionStatus_Completed, libSwaC_gf_ZS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, libSwaC_gf_ZS_StoryMapBankID(lv_indexMission), 0));
                DataTableSetInt(true, ("ZPrevStatus_" + (lv_indexMission)), libSwaC_gf_MissionStatusAge(lv_indexMission, libSwaC_ge_MissionStatus_Completed));
            }
            autoFD6CFF07_ai = autoFD6CFF07_ai + 1;
        }
        auto6B85C214_ae = CatalogEntryCount(c_gameCatalogMap);
        auto6B85C214_ai = 1;
        while (auto6B85C214_ai <= auto6B85C214_ae) {
            lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto6B85C214_ai);
            if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Upgrade") {
                libSwaC_gf_ZS_SetMissionStatusAge(lv_indexMission, libSwaC_ge_MissionStatus_Completed, libSwaC_gf_ZS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, libSwaC_gf_ZS_StoryMapBankID(lv_indexMission), 0));
            }
            auto6B85C214_ai = auto6B85C214_ai + 1;
        }
        if ((libSwaC_gf_NumberOfMissions(libSwaC_ge_MissionCountOptions_Completed) == libSwaC_gf_NumberOfMissions(libSwaC_ge_MissionCountOptions_All))) {
            libSwaC_gv_zS_InCompletedCampaign = true;
        }

        lv__SectionName = libSwaC_gf_ZS_BankSectionName(lp_bankMap, "MissionBestTime");
        autoF61805E8_ae = CatalogEntryCount(c_gameCatalogMap);
        autoF61805E8_ai = 1;
        while (autoF61805E8_ai <= autoF61805E8_ae) {
            lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoF61805E8_ai);
            if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
                libSwaC_gf_ZS_SetMissionCompletionBestTime(lv_indexMission, 1, libSwaC_gf_ZS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, libSwaC_gf_ZS_BankMIssionDifficultyKey(lv_indexMission, 1), -1));
                libSwaC_gf_ZS_SetMissionCompletionBestTime(lv_indexMission, 2, libSwaC_gf_ZS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, libSwaC_gf_ZS_BankMIssionDifficultyKey(lv_indexMission, 2), -1));
                libSwaC_gf_ZS_SetMissionCompletionBestTime(lv_indexMission, 3, libSwaC_gf_ZS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, libSwaC_gf_ZS_BankMIssionDifficultyKey(lv_indexMission, 3), -1));
                libSwaC_gf_ZS_SetMissionCompletionBestTime(lv_indexMission, 4, libSwaC_gf_ZS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, libSwaC_gf_ZS_BankMIssionDifficultyKey(lv_indexMission, 4), -1));
            }
            autoF61805E8_ai = autoF61805E8_ai + 1;
        }
        auto1502D4DA_ae = CatalogEntryCount(c_gameCatalogMap);
        auto1502D4DA_ai = 1;
        while (auto1502D4DA_ai <= auto1502D4DA_ae) {
            lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto1502D4DA_ai);
            if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Upgrade") {
                libSwaC_gf_ZS_SetMissionCompletionBestTime(lv_indexMission, 1, libSwaC_gf_ZS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, libSwaC_gf_ZS_BankMIssionDifficultyKey(lv_indexMission, 1), -1));
                libSwaC_gf_ZS_SetMissionCompletionBestTime(lv_indexMission, 2, libSwaC_gf_ZS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, libSwaC_gf_ZS_BankMIssionDifficultyKey(lv_indexMission, 2), -1));
                libSwaC_gf_ZS_SetMissionCompletionBestTime(lv_indexMission, 3, libSwaC_gf_ZS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, libSwaC_gf_ZS_BankMIssionDifficultyKey(lv_indexMission, 3), -1));
                libSwaC_gf_ZS_SetMissionCompletionBestTime(lv_indexMission, 4, libSwaC_gf_ZS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, libSwaC_gf_ZS_BankMIssionDifficultyKey(lv_indexMission, 4), -1));
            }
            auto1502D4DA_ai = auto1502D4DA_ai + 1;
        }
        lv__SectionName = libSwaC_gf_ZS_BankSectionName(lp_bankMap, "MissionObjectives");
        autoF4A6A1CE_ae = CatalogEntryCount(c_gameCatalogObjective);
        autoF4A6A1CE_ai = 1;
        while (autoF4A6A1CE_ai <= autoF4A6A1CE_ae) {
            lv_indexObjective = CatalogEntryGet(c_gameCatalogObjective, autoF4A6A1CE_ai);
            if ((libSwaC_gf_MissionObjectiveIsPrimary(lv_indexObjective) == false)) {
                UserDataLoadInstance("MissionObjective", libSwaC_gf_ZS_ObjectiveUserDataInstance(lv_indexObjective), lp_sourceBank, lv__SectionName);
            }

            autoF4A6A1CE_ai = autoF4A6A1CE_ai + 1;
        }
        libSwaC_gf_ZS_ArchiveBankLoad();
        auto575851C8_ae = CatalogFieldValueCount(c_gameCatalogMap, libSwaC_gf_CurrentMap(), "ObjectiveArray", 1);
        auto575851C8_ai = 1;
        while (auto575851C8_ai <= auto575851C8_ae) {
            lv_indexObjective = CatalogFieldValueGet(c_gameCatalogMap, libSwaC_gf_CurrentMap(), "ObjectiveArray["+IntToString(auto575851C8_ai-1)+"]", 1);
            if ((libSwaC_gf_MissionObjectiveIsPrimary(lv_indexObjective) == false)) {
                libSwaC_gf_ZS_MissionObjectiveBestProgressSet(lv_indexObjective, libSwaC_gf_MissionObjectiveProgress(lv_indexObjective));
            }

            auto575851C8_ai = auto575851C8_ai + 1;
        }
    }
    else {
        if ((libSwaC_gv_zS_InCompletedCampaign == false)) {
            lv__SectionName = libSwaC_gf_ZS_BankSectionName(lp_bankMap, "MissionObjectives");
            autoFF84D179_ae = CatalogEntryCount(c_gameCatalogObjective);
            autoFF84D179_ai = 1;
            while (autoFF84D179_ai <= autoFF84D179_ae) {
                lv_indexObjective = CatalogEntryGet(c_gameCatalogObjective, autoFF84D179_ai);
                if ((libSwaC_gf_MissionObjectiveIsPrimary(lv_indexObjective) == false)) {
                    UserDataResetInstance("MissionObjective", libSwaC_gf_ZS_ObjectiveUserDataInstance(lv_indexObjective));
                    UserDataLoadInstance("MissionObjective", libSwaC_gf_ZS_ObjectiveUserDataInstance(lv_indexObjective), lp_sourceBank, lv__SectionName);
                }

                autoFF84D179_ai = autoFF84D179_ai + 1;
            }
        }

    }
    ConversationDataStateSetValue("MissionsCompleted", libSwaC_gf_NumberOfMissions(libSwaC_ge_MissionCountOptions_Completed));
}

int libSwaC_gf_ZS_GetObjectiveForData (string lp_objectiveData) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetObjective(true, libSwaC_gf_ZS_ObjectiveTableString(lp_objectiveData));
}

string libSwaC_gf_ZS_ObjectiveUserDataInstance (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataInstanceFromReference(CatalogFieldValueGet(c_gameCatalogObjective, (lp_objective), "UserReference", 1));
}

text libSwaC_gf_MissionObjectiveDescription (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogObjective, (lp_objective), "Description", c_playerAny));
}

bool libSwaC_gf_MissionObjectiveStateCheck (string lp_objective, int lp_state) {
    // Automatic Variable Declarations
    // Implementation
    if ((UserDataGetInt("MissionObjective", libSwaC_gf_ZS_ObjectiveUserDataInstance(lp_objective), "Available", 1) == 1) && (lp_state == libSwaC_ge_MissionObjectiveState_Available)) {
        return true;
    }

    if ((UserDataGetInt("MissionObjective", libSwaC_gf_ZS_ObjectiveUserDataInstance(lp_objective), "Complete", 1) == 1) && (lp_state == libSwaC_ge_MissionObjectiveState_Completed)) {
        return true;
    }

    if ((lp_state == libSwaC_ge_MissionObjectiveState_Undiscovered) && (ObjectiveGetState(libSwaC_gf_ZS_GetObjectiveForData(lp_objective)) == c_objectiveStateHidden)) {
        return true;
    }

    if ((lp_state == libSwaC_ge_MissionObjectiveState_Failed) && (ObjectiveGetState(libSwaC_gf_ZS_GetObjectiveForData(lp_objective)) == c_objectiveStateFailed)) {
        return true;
    }

    return false;
}

bool libSwaC_gf_MissionObjectiveIsPrimary (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return (libSwaC_gf_ZS_GetObjectiveTypeInteger(lp_objective) == c_objectiveTypePrimary);
}

text libSwaC_gf_MissionObjectiveName (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogObjective, (lp_objective), "Name", c_playerAny));
}

int libSwaC_gf_MissionObjectiveRewardsEarned (string lp_objective, string lp_type) {
    // Automatic Variable Declarations
    // Implementation
    if ((libSwaC_gf_MissionObjectiveIsPrimary(lp_objective) == true)) {
        return 0;
    }

    if ((libSwaC_gf_ZS_ObjectiveRewardDivided(lp_objective) == false)) {
        if ((libSwaC_gf_MissionObjectiveProgress(lp_objective) == libSwaC_gf_MissionObjectiveItemCount(lp_objective))) {
            return libSwaC_gf_MissionObjectiveRewards(lp_objective, lp_type);
        }
        else {
            return 0;
        }
    }

    return (libSwaC_gf_MissionObjectiveRewards(lp_objective, lp_type) * libSwaC_gf_MissionObjectiveProgress(lp_objective));
}

int libSwaC_gf_MissionObjectiveRewardsAvailable (string lp_objective, string lp_type) {
    // Automatic Variable Declarations
    // Implementation
    if ((libSwaC_gf_ZS_ObjectiveRewardDivided(lp_objective) == false)) {
        return (libSwaC_gf_MissionObjectiveRewards(lp_objective, lp_type) - libSwaC_gf_MissionObjectiveRewardsEarned(lp_objective, lp_type));
    }

    return (((libSwaC_gf_MissionObjectiveRewards(lp_objective, lp_type)*libSwaC_gf_MissionObjectiveItemCount(lp_objective))) - libSwaC_gf_MissionObjectiveRewardsEarned(lp_objective, lp_type));
}

int libSwaC_gf_MissionObjectiveRewardsAvailable2 (string lp_objective, string lp_type) {
    // Automatic Variable Declarations
    // Implementation
    if ((libSwaC_gf_ZS_ObjectiveRewardDivided(lp_objective) == false)) {
        return libSwaC_gf_MissionObjectiveRewards(lp_objective, lp_type);
    }

    return ((libSwaC_gf_MissionObjectiveRewards(lp_objective, lp_type)*libSwaC_gf_MissionObjectiveItemCount(lp_objective)));
}

int libSwaC_gf_MissionObjectiveItemCount (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return CatalogFieldValueGetAsInt(c_gameCatalogObjective, (lp_objective), "RequiredCount", 1);
}

int libSwaC_gf_MissionObjectiveProgress (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("MissionObjective", libSwaC_gf_ZS_ObjectiveUserDataInstance(lp_objective), "Progress", 1);
}

int libSwaC_gf_MissionObjectiveRewards (string lp_objective, string lp_type) {
    // Variable Declarations
    int lv_amount;

    // Automatic Variable Declarations
    string auto430FB96F_val;

    // Variable Initialization

    // Implementation
    auto430FB96F_val = lp_type;
    if (auto430FB96F_val == "KerriganXP") {
        return UserDataGetInt("MissionObjective", libSwaC_gf_ZS_ObjectiveUserDataInstance(lp_objective), "KerriganXP", 1);
    }
    else {
    }
    return 0;
}

int libSwaC_gf_ZS_MissionObjectiveBestProgress (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(true, ("ZC_BestObj_" + (lp_objective)));
}

int libSwaC_gf_ZS_GetObjectiveTypeInteger (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    if ((CatalogFieldValueGetAsInt(c_gameCatalogObjective, (lp_objective), "Type", c_playerAny) == (c_objectiveTypePrimary))) {
        return c_objectiveTypePrimary;
    }
    else {
        return c_objectiveTypeOptional;
    }
}

bool libSwaC_gf_ZS_GetObjectiveTypeBoolean (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    if ((CatalogFieldValueGetAsInt(c_gameCatalogObjective, (lp_objective), "Type", c_playerAny) == (c_objectiveTypePrimary))) {
        return true;
    }
    else {
        return false;
    }
}

bool libSwaC_gf_ZS_AllObjectivesCompletedForMission (string lp_mission) {
    // Variable Declarations
    string lv_obj;

    // Automatic Variable Declarations
    int autoFD69D482_ae;
    int autoFD69D482_ai;

    // Variable Initialization

    // Implementation
    autoFD69D482_ae = CatalogFieldValueCount(c_gameCatalogMap, lp_mission, "ObjectiveArray", 1);
    autoFD69D482_ai = 1;
    while (autoFD69D482_ai <= autoFD69D482_ae) {
        lv_obj = CatalogFieldValueGet(c_gameCatalogMap, lp_mission, "ObjectiveArray["+IntToString(autoFD69D482_ai-1)+"]", 1);
        if ((ObjectiveGetState(libSwaC_gf_ZS_GetObjectiveForData(lv_obj)) != c_objectiveStateCompleted)) {
            return false;
        }

        autoFD69D482_ai = autoFD69D482_ai + 1;
    }
    return true;
}

bool libSwaC_gf_ZS_ObjectiveRewardDivided (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetInt("MissionObjective", libSwaC_gf_ZS_ObjectiveUserDataInstance(lp_objective), "RewardWhole", 1) == 0);
}

string libSwaC_gf_ZS_ObjectiveTableString (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return ("ZS_Obj_" + (lp_objective));
}

text libSwaC_gf_ZS_CampaignObjectiveBonusText (string lp_objective) {
    // Variable Declarations
    text lv_bonusText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_bonusText = UserDataGetText("MissionObjective", libSwaC_gf_ZS_ObjectiveUserDataInstance(lp_objective), "RewardText", 1);
    if (((lv_bonusText != null) == false) && (libSwaC_gf_MissionObjectiveIsPrimary(lp_objective) == false)) {
        if ((libSwaC_gf_MissionObjectiveRewards(lp_objective, "KerriganXP") > 0)) {
            if ((libSwaC_gf_ZS_ObjectiveRewardDivided(lp_objective) == true) && (libSwaC_gf_MissionObjectiveItemCount(lp_objective) != 1)) {
                TextExpressionSetToken("Param/Expression/lib_SwaC_6CC0E036", "A", IntToText((libSwaC_gf_MissionObjectiveRewards(lp_objective, "KerriganXP"))));
                lv_bonusText = TextExpressionAssemble("Param/Expression/lib_SwaC_6CC0E036");
            }
            else {
                TextExpressionSetToken("Param/Expression/lib_SwaC_408CDE00", "A", IntToText((libSwaC_gf_MissionObjectiveRewards(lp_objective, "KerriganXP"))));
                lv_bonusText = TextExpressionAssemble("Param/Expression/lib_SwaC_408CDE00");
            }
        }

    }

    return lv_bonusText;
}

void libSwaC_gf_SetMissionObjectiveProgress2 (string lp_objective, int lp_current, bool lp_showHideMax, text lp_label, bool lp_updatetext) {
    // Variable Declarations
    text lv_name;
    text lv_bonusText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libSwaC_gf_ZS_SetObjectiveProgressData(lp_objective, lp_current, true);
    if ((lp_updatetext == false)) {
        return ;
    }

    libSwaC_gf_UpdateMissionObjectiveText(lp_objective, lp_current, lp_showHideMax, lp_label);
}

void libSwaC_gf_SetMissionObjectiveProgressAdvanced (string lp_objective, int lp_current, bool lp_showHideMax, text lp_label, bool lp_updatetext, bool lp_updateObjectiveStateOption) {
    // Variable Declarations
    text lv_name;
    text lv_bonusText;
    bool lv_updateObjective;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_updateObjectiveStateOption == true)) {
        lv_updateObjective = true;
    }
    else {
        lv_updateObjective = false;
    }
    libSwaC_gf_ZS_SetObjectiveProgressData(lp_objective, lp_current, lv_updateObjective);
    if ((lp_updatetext == false)) {
        return ;
    }

    libSwaC_gf_UpdateMissionObjectiveText(lp_objective, lp_current, lp_showHideMax, lp_label);
}

void libSwaC_gf_UpdateMissionObjectiveText (string lp_objective, int lp_current, bool lp_showHideMax, text lp_label) {
    // Variable Declarations
    text lv_name;
    text lv_bonusText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_name = libSwaC_gf_MissionObjectiveName(lp_objective);
    if ((libSwaC_gf_MissionObjectiveStateCheck(lp_objective, libSwaC_ge_MissionObjectiveState_Completed) == false)) {
        if (((libSwaC_gf_CurrentMap() == "ZLab1") || (libSwaC_gf_CurrentMap() == "ZLab2") || (libSwaC_gf_CurrentMap() == "ZSpace1"))) {
            TextExpressionSetToken("Param/Expression/lib_SwaC_AE2A8E31", "A", lv_name);
            TextExpressionSetToken("Param/Expression/lib_SwaC_AE2A8E31", "B", StringToText(("ObjectivePanelProgress_Terran")));
            lv_name = TextExpressionAssemble("Param/Expression/lib_SwaC_AE2A8E31");
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_SwaC_1D409BFB", "A", lv_name);
            TextExpressionSetToken("Param/Expression/lib_SwaC_1D409BFB", "B", StringToText(("ObjectivePanelProgress_Zerg")));
            lv_name = TextExpressionAssemble("Param/Expression/lib_SwaC_1D409BFB");
        }
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_SwaC_DC150B08", "A", lv_name);
        lv_name = TextExpressionAssemble("Param/Expression/lib_SwaC_DC150B08");
    }
    TextExpressionSetToken("Param/Expression/lib_SwaC_7EAE4F74", "A", lv_name);
    TextExpressionSetToken("Param/Expression/lib_SwaC_7EAE4F74", "B", IntToText(lp_current));
    lv_name = TextExpressionAssemble("Param/Expression/lib_SwaC_7EAE4F74");
    if ((lp_showHideMax != false)) {
        TextExpressionSetToken("Param/Expression/lib_SwaC_A25AEEB9", "A", lv_name);
        TextExpressionSetToken("Param/Expression/lib_SwaC_A25AEEB9", "B", IntToText(libSwaC_gf_MissionObjectiveItemCount(lp_objective)));
        lv_name = TextExpressionAssemble("Param/Expression/lib_SwaC_A25AEEB9");
    }

    if ((lp_label != null)) {
        if ((lp_objective == "ZZerus03Objective03")) {
            TextExpressionSetToken("Param/Expression/lib_SwaC_40FF3677", "A", lv_name);
            TextExpressionSetToken("Param/Expression/lib_SwaC_40FF3677", "B", lp_label);
            lv_name = TextExpressionAssemble("Param/Expression/lib_SwaC_40FF3677");
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_SwaC_B75FC165", "A", lv_name);
            TextExpressionSetToken("Param/Expression/lib_SwaC_B75FC165", "B", lp_label);
            lv_name = TextExpressionAssemble("Param/Expression/lib_SwaC_B75FC165");
        }
    }

    TextExpressionSetToken("Param/Expression/lib_SwaC_F3369DF0", "A", lv_name);
    lv_name = TextExpressionAssemble("Param/Expression/lib_SwaC_F3369DF0");
    lv_bonusText = libSwaC_gf_ZS_CampaignObjectiveBonusText(lp_objective);
    if (((lv_bonusText != null) == true)) {
        TextExpressionSetToken("Param/Expression/lib_SwaC_F19B810A", "A", lv_name);
        TextExpressionSetToken("Param/Expression/lib_SwaC_F19B810A", "B", lv_bonusText);
        lv_name = TextExpressionAssemble("Param/Expression/lib_SwaC_F19B810A");
    }

    if ((libSwaC_gf_MissionObjectiveStateCheck(lp_objective, libSwaC_ge_MissionObjectiveState_Completed) == false)) {
        TextExpressionSetToken("Param/Expression/lib_SwaC_484CBB38", "A", lv_name);
        lv_name = TextExpressionAssemble("Param/Expression/lib_SwaC_484CBB38");
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_SwaC_0334FCBD", "A", lv_name);
        lv_name = TextExpressionAssemble("Param/Expression/lib_SwaC_0334FCBD");
    }
    ObjectiveSetName(DataTableGetObjective(true, libSwaC_gf_ZS_ObjectiveTableString(lp_objective)), lv_name);
}

void libSwaC_gf_CreateObjectiveCampaign (string lp_objectiveData) {
    // Variable Declarations
    bool lv_isPrimary;
    text lv_name;
    text lv_bonusText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_name = libSwaC_gf_MissionObjectiveName(lp_objectiveData);
    lv_bonusText = libSwaC_gf_ZS_CampaignObjectiveBonusText(lp_objectiveData);
    if (((lv_bonusText != null) == true)) {
        TextExpressionSetToken("Param/Expression/lib_SwaC_7C1B795A", "A", lv_name);
        lv_name = TextExpressionAssemble("Param/Expression/lib_SwaC_7C1B795A");
    }

    ObjectiveCreate(lv_name, libSwaC_gf_MissionObjectiveDescription(lp_objectiveData), c_objectiveStateActive, libSwaC_gf_ZS_GetObjectiveTypeBoolean(lp_objectiveData));
    DataTableSetObjective(true, libSwaC_gf_ZS_ObjectiveTableString(lp_objectiveData), ObjectiveLastCreated());
    libSwaC_gf_ZS_SetObjectiveProgressData(lp_objectiveData, 0, false);
}

void libSwaC_gf_ZS_SetMissionObjectiveState (string lp_objective, int lp_state) {
    // Automatic Variable Declarations
    int autoCE66EC0D_val;

    // Implementation
    autoCE66EC0D_val = lp_state;
    if (autoCE66EC0D_val == libSwaC_ge_MissionObjectiveState_Available) {
        UserDataSetInt("MissionObjective", libSwaC_gf_ZS_ObjectiveUserDataInstance(lp_objective), "Available", 1, 1);
        UserDataSetInt("MissionObjective", libSwaC_gf_ZS_ObjectiveUserDataInstance(lp_objective), "Complete", 1, 0);
        ObjectiveSetState(DataTableGetObjective(true, libSwaC_gf_ZS_ObjectiveTableString(lp_objective)), c_objectiveStateActive);
    }
    else if (autoCE66EC0D_val == libSwaC_ge_MissionObjectiveState_Completed) {
        UserDataSetInt("MissionObjective", libSwaC_gf_ZS_ObjectiveUserDataInstance(lp_objective), "Complete", 1, 1);
        UserDataSetInt("MissionObjective", libSwaC_gf_ZS_ObjectiveUserDataInstance(lp_objective), "Available", 1, 0);
        UserDataSetInt("MissionObjective", libSwaC_gf_ZS_ObjectiveUserDataInstance(lp_objective), "Progress", 1, libSwaC_gf_MissionObjectiveItemCount(lp_objective));
        ObjectiveSetState(DataTableGetObjective(true, libSwaC_gf_ZS_ObjectiveTableString(lp_objective)), c_objectiveStateCompleted);
        TextExpressionSetToken("Param/Expression/lib_SwaC_DF210163", "A", ObjectiveGetName(DataTableGetObjective(true, libSwaC_gf_ZS_ObjectiveTableString(lp_objective))));
        ObjectiveSetName(DataTableGetObjective(true, libSwaC_gf_ZS_ObjectiveTableString(lp_objective)), TextExpressionAssemble("Param/Expression/lib_SwaC_DF210163"));
    }
    else if (autoCE66EC0D_val == libSwaC_ge_MissionObjectiveState_Undiscovered) {
        ObjectiveSetState(DataTableGetObjective(true, libSwaC_gf_ZS_ObjectiveTableString(lp_objective)), c_objectiveStateHidden);
    }
    else if (autoCE66EC0D_val == libSwaC_ge_MissionObjectiveState_Failed) {
        UserDataSetInt("MissionObjective", libSwaC_gf_ZS_ObjectiveUserDataInstance(lp_objective), "Complete", 1, 0);
        ObjectiveSetState(DataTableGetObjective(true, libSwaC_gf_ZS_ObjectiveTableString(lp_objective)), c_objectiveStateFailed);
    }
    else {
    }
}

void libSwaC_gf_ZS_SetObjectiveProgressData (string lp_objective, int lp_progress, bool lp_updateObjectiveState) {
    // Variable Declarations
    int lv_levelBefore;
    int lv_increase;
    int lv_currentXPLevel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_levelBefore = libSwaC_gf_StoryKerriganLevel();

    // Implementation
    lv_increase = (lp_progress - libSwaC_gf_MissionObjectiveProgress(lp_objective));
    UserDataSetInt("MissionObjective", libSwaC_gf_ZS_ObjectiveUserDataInstance(lp_objective), "Progress", 1, lp_progress);
    if ((lp_updateObjectiveState == true) && (lp_progress == libSwaC_gf_MissionObjectiveItemCount(lp_objective))) {
        libSwaC_gf_ZS_SetMissionObjectiveState(lp_objective, libSwaC_ge_MissionObjectiveState_Completed);
    }

    if (((libSwaC_gf_MissionObjectiveIsPrimary(lp_objective) == true) || (lv_increase <= 0))) {
        return ;
    }

    lv_currentXPLevel = libSwaC_gv_zS_KerriganLevel;
    libSwaC_gf_ZS_LevelUpKerrigan();
    libSwaC_gf_ZS_ApplyKerriganLevelBonus(1);
    if ((libSwaC_gv_zS_KerriganLevel > lv_currentXPLevel) && (libSwaC_gv_zS_GameOver == false)) {
        libNtve_gf_SendActorMessageToUnit(libSwaC_gv_zS_Kerrigan, "Signal LevelUp");
        UnitSetPropertyFixed(libSwaC_gv_zS_Kerrigan, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(libSwaC_gv_zS_Kerrigan, c_unitPropEnergyPercent, 100.0);
    }

}

void libSwaC_gf_ZS_MissionObjectiveBestProgressSet (string lp_objective, int lp_progress) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(true, ("ZC_BestObj_" + (lp_objective)), lp_progress);
}

void libSwaC_gf_SetPlanetAvailable (string lp_planet, bool lp_available) {
    // Automatic Variable Declarations
    // Implementation
    UserDataSetInt("Planets", libSwaC_gf_ZS_PlanetUserData(lp_planet), "Available", 1, BoolToInt(lp_available));
}

void libSwaC_gf_ZS_UpdatePlanetData (string lp_currentLocation) {
    // Automatic Variable Declarations
    // Implementation
    libSwaC_gf_ZS_UpdatePlanetDataSingle("DominionLab", lp_currentLocation);
    libSwaC_gf_ZS_UpdatePlanetDataSingle("Char", lp_currentLocation);
    libSwaC_gf_ZS_UpdatePlanetDataSingle("Expedition", lp_currentLocation);
    libSwaC_gf_ZS_UpdatePlanetDataSingle("Zerus", lp_currentLocation);
    libSwaC_gf_ZS_UpdatePlanetDataSingle("Hybrid", lp_currentLocation);
    libSwaC_gf_ZS_UpdatePlanetDataSingle("ZSpace1", lp_currentLocation);
    libSwaC_gf_ZS_UpdatePlanetDataSingle("Korhal", lp_currentLocation);
    libSwaC_gf_ZS_SetPlanetActive(lp_currentLocation);
}

void libSwaC_gf_ZS_UpdatePlanetDataSingle (string lp_location, string lp_currentLocation) {
    // Variable Declarations
    bool lv_available;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_available = false;
    if ((lp_currentLocation == "DominionLab")) {
        if ((libSwaC_gf_MissionAvailableOnPlanet(lp_location) == true)) {
            lv_available = true;
        }

    }
    else if ((lp_location != lp_currentLocation)) {
        if ((libSwaC_gf_MissionAvailableOnPlanet(lp_currentLocation) == false) && (libSwaC_gf_MissionAvailableOnPlanet(lp_location) == true)) {
            lv_available = true;
        }

    }
    else if ((lp_location == lp_currentLocation)) {
        lv_available = true;
    }
    libSwaC_gf_SetPlanetAvailable(lp_location, lv_available);
}

void libSwaC_gf_ZS_SetPlanetActive (string lp_planet) {
    // Variable Declarations
    string lv_indexPlanet;

    // Automatic Variable Declarations
    int auto8F160082_ae;
    int auto8F160082_ai;

    // Variable Initialization

    // Implementation
    auto8F160082_ae = CatalogEntryCount(c_gameCatalogLocation);
    auto8F160082_ai = 1;
    while (auto8F160082_ai <= auto8F160082_ae) {
        lv_indexPlanet = CatalogEntryGet(c_gameCatalogLocation, auto8F160082_ai);
        UserDataSetInt("Planets", libSwaC_gf_ZS_PlanetUserData(lv_indexPlanet), "Active", 1, 0);
        auto8F160082_ai = auto8F160082_ai + 1;
    }
    UserDataSetInt("Planets", libSwaC_gf_ZS_PlanetUserData(lp_planet), "Active", 1, 1);
}

text libSwaC_gf_StoryPlanetName (string lp_planet) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogLocation, (lp_planet), "Name", c_playerAny));
}

text libSwaC_gf_StoryUIPlanetName (string lp_planet) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("Planets", libSwaC_gf_ZS_PlanetUserData(lp_planet), "StoryUI Name", 1);
}

text libSwaC_gf_StoryUIPlanetPrompt (string lp_planet) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("Planets", libSwaC_gf_ZS_PlanetUserData(lp_planet), "StoryUI Prompt", 1);
}

bool libSwaC_gf_StoryPlanetIsAvailable (string lp_planet) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetInt("Planets", libSwaC_gf_ZS_PlanetUserData(lp_planet), "Available", 1) == 1);
}

string libSwaC_gf_StoryPlanetMap (string lp_planet) {
    // Variable Declarations
    string lv_map;

    // Automatic Variable Declarations
    int autoE48AD73C_ae;
    int autoE48AD73C_ai;

    // Variable Initialization

    // Implementation
    autoE48AD73C_ae = CatalogEntryCount(c_gameCatalogMap);
    autoE48AD73C_ai = 1;
    while (autoE48AD73C_ai <= autoE48AD73C_ae) {
        lv_map = CatalogEntryGet(c_gameCatalogMap, autoE48AD73C_ai);
        if ((libSwaC_gf_StoryMapTypeCheck(lv_map, c_mapKindStory) == true) && (libSwaC_gf_StoryMapPlanet(lv_map) == lp_planet)) {
            return lv_map;
        }

        autoE48AD73C_ai = autoE48AD73C_ai + 1;
    }
    return "ZStoryLab";
}

string libSwaC_gf_StoryPlanetNonmissionPitch (string lp_planet) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("Planets", libSwaC_gf_ZS_PlanetUserData(lp_planet), "No Mission Pitch", 1);
}

bool libSwaC_gf_MissionAvailableOnPlanet (string lp_planet) {
    // Variable Declarations
    string lv_mission;

    // Automatic Variable Declarations
    int auto6A82103A_ae;
    int auto6A82103A_ai;

    // Variable Initialization

    // Implementation
    auto6A82103A_ae = CatalogEntryCount(c_gameCatalogMap);
    auto6A82103A_ai = 1;
    while (auto6A82103A_ai <= auto6A82103A_ae) {
        lv_mission = CatalogEntryGet(c_gameCatalogMap, auto6A82103A_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_mission, "Kind", 1) == "Mission" && libSwaC_gf_StoryMapPlanet(lv_mission) == lp_planet) {
            if ((libSwaC_gf_MissionStatusCheck(lv_mission, libSwaC_ge_MissionStatus_Available) == true)) {
                return true;
            }

        }
        auto6A82103A_ai = auto6A82103A_ai + 1;
    }
    return false;
}

string libSwaC_gf_ZS_PlanetUserData (string lp_planet) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataInstanceFromReference(CatalogFieldValueGet(c_gameCatalogLocation, (lp_planet), "UserReference", c_playerAny));
}

string libSwaC_gf_ZS_PlanetDataString (string lp_planet) {
    // Automatic Variable Declarations
    // Implementation
    return ("ZS_P_" + (lp_planet));
}

void libSwaC_gf_DisplayConversationTimestamp (string lp_conversation) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto075F95F9_ae;
    const int auto075F95F9_ai = 1;

    // Variable Initialization

    // Implementation
    auto075F95F9_ae = UserDataInstanceCount("ConversationTimestamps");
    lv_index = 1;
    for ( ; ( (auto075F95F9_ai >= 0 && lv_index <= auto075F95F9_ae) || (auto075F95F9_ai < 0 && lv_index >= auto075F95F9_ae) ) ; lv_index += auto075F95F9_ai ) {
        if ((UserDataGetGameLink("ConversationTimestamps", UserDataInstance("ConversationTimestamps", lv_index), "Conversation", 1) == lp_conversation)) {
            if ((UserDataGetInt("ConversationTimestamps", UserDataInstance("ConversationTimestamps", lv_index), "Wait", 1) == 1)) {
                libSwaC_gf_DisplayTimestamp(UserDataInstance("ConversationTimestamps", lv_index), true);
            }
            else {
                libSwaC_gf_DisplayTimestamp(UserDataInstance("ConversationTimestamps", lv_index), false);
            }
            return ;
        }

    }
}

void libSwaC_gf_DisplayTimestamp (string lp_timestamp, bool lp_waitDontWait) {
    // Variable Declarations
    bool lv_cinematicOn;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryMission, false);
    libSwaC_gv_zS_CutsceneTimestamp = lp_timestamp;
    if ((lp_waitDontWait == true)) {
        lv_cinematicOn = libNtve_gf_PlayerInCinematicMode(1);
        if ((lv_cinematicOn == false)) {
            libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationImmediate);
        }

        UISetWorldVisible(PlayerGroupAll(), false);
        TriggerExecute(libSwaC_gt_DisplayTimestampSkippable, true, true);
        UIHideTextCrawl(PlayerGroupAll());
        Wait(0.625, c_timeGame);
        UISetWorldVisible(PlayerGroupAll(), true);
        if ((lv_cinematicOn == false)) {
            libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationImmediate);
        }

    }
    else {
        TriggerExecute(libSwaC_gt_DisplayTimestamp, true, false);
    }
}

void libSwaC_gf_HaltTimestamp () {
    // Automatic Variable Declarations
    // Implementation
    TriggerStop(libSwaC_gt_DisplayTimestampSkippable);
    TriggerStop(libSwaC_gt_Zerg03TimestampDelayed);
    TriggerStop(libSwaC_gt_Zerg01TimestampDelayed);
    TriggerStop(libSwaC_gt_DisplayTimestamp);
    UIHideTextCrawl(PlayerGroupAll());
    UISetWorldVisible(PlayerGroupAll(), true);
}

void libSwaC_gf_ZS_DisplayCinematicTimestamp (string lp_scene) {
    // Automatic Variable Declarations
    string autoD05C78E4_val;

    // Implementation
    autoD05C78E4_val = lp_scene;
    if (autoD05C78E4_val == "Zerg01 - Identity Crisis") {
        TriggerExecute(libSwaC_gt_Zerg01TimestampDelayed, true, false);
    }
    else if (autoD05C78E4_val == "Zerg02 - Dominion Calling") {
        libSwaC_gf_DisplayTimestamp("BeforeZerg02", false);
    }
    else if (autoD05C78E4_val == "Zerg03 - Choices") {
        TriggerExecute(libSwaC_gt_Zerg03TimestampDelayed, true, false);
    }
    else {
    }
}

void libSwaC_gf_PlayCinematic (string lp_scene, bool lp_animatic) {
    // Automatic Variable Declarations
    // Implementation
    if ((libSwaC_gf_CurrentMissionIsSimulation() == true) && (lp_scene != "Pre-render - Kerrigan Ascendant")) {
        return ;
    }

    if ((libSwaC_gf_ZS_CinematicCutscene(lp_scene) != null) && (lp_animatic == false)) {
        SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
        SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, true, true);
        libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
        MovieStartRecording(UserDataGetString("Scenes", lp_scene, "RecordFileName", 1));
        libSwaC_gf_ZS_DisplayCinematicTimestamp(lp_scene);
        libSwaC_gf_CampaignPlayCutscene(libSwaC_gf_ZS_CinematicCutscene(lp_scene), Point(64.0, 64.0), true, true);
        MovieStopRecording();
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), 0.0);
        SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, false, true);
        SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
        return ;
    }

    if ((libSwaC_gf_ZS_SceneMovie(lp_scene) != null)) {
        SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
        SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, true, true);
        libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
        libSwaC_gf_MuteUnmuteAllSoundChannels(true, c_soundCategoryMovie, PlayerGroupAll());
        SoundChannelMute(PlayerGroupAll(), c_soundCategoryMovie, false);
        SoundChannelMute(PlayerGroupAll(), c_soundCategoryUI, false);
        SoundChannelMute(PlayerGroupAll(), c_soundCategoryOther, false);
        SoundChannelMute(PlayerGroupAll(), c_soundCategoryMusic, false);
        libSwaC_gv_zS_PlaySceneCurrentScene = lp_scene;
        libSwaC_gf_ZS_DisplayCinematicTimestamp(lp_scene);
        TriggerExecute(libSwaC_gt_ZS_PlayCinematicSkippable, true, true);
        libSwaC_gf_HaltTimestamp();
        TransmissionClearAll();
        libSwaC_gf_CinematicFade(true, 0.0, Color(0.00, 0.00, 0.00), true);
        libSwaC_gf_MuteUnmuteAllSoundChannels(false, c_soundCategoryMovie, PlayerGroupAll());
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), 0.0);
        SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, false, true);
        SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
        return ;
    }

}

string libSwaC_gf_ZS_CinematicCutscene (string lp_scene) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetString("Scenes", lp_scene, "cutscene", 1));
}

void libSwaC_gf_CampaignPlayCutscene (string lp_file, point lp_position, bool lp_waitDontWait, bool lp_allowSkip) {
    // Automatic Variable Declarations
    // Implementation
    libSwaC_gv_zS_CampaignCutsceneSkipped = false;
    CutsceneCreateNew(lp_file, lp_position, 0.0, PlayerGroupAll(), true);
    libSwaC_gv_zS_CurrentCampaignCutscene = CutsceneLastCreated();
    libSwaC_gv_zS_CampaignCutsceneSkippable = (lp_allowSkip == true);
    TriggerExecute(libSwaC_gt_ZS_WaitForCutscene, true, lp_waitDontWait);
}

void libSwaC_gf_CampaignPlayCutscene2 (string lp_file, bool lp_waitDontWait, bool lp_allowSkip) {
    // Automatic Variable Declarations
    // Implementation
    libSwaC_gv_zS_CampaignCutsceneSkipped = false;
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libSwaC_gv_zS_CampaignCutsceneDialog = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeCutscene);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCutscene(DialogControlLastCreated(), lp_file, PlayerGroupAll());
    libSwaC_gv_zS_CurrentCampaignCutscene = CutsceneGetTriggerControl(DialogControlLastCreated());
    libSwaC_gv_zS_CampaignCutsceneSkippable = (lp_allowSkip == true);
    CutscenePlay(libSwaC_gv_zS_CurrentCampaignCutscene);
    TriggerExecute(libSwaC_gt_ZS_WaitForDialogCutscene, true, lp_waitDontWait);
    DialogDestroy(libSwaC_gv_zS_CampaignCutsceneDialog);
}

bool libSwaC_gf_CampaignCutsceneWasSkipped () {
    // Automatic Variable Declarations
    // Implementation
    return libSwaC_gv_zS_CampaignCutsceneSkipped;
}

void libSwaC_gf_SetStoryScenePlayed (string lp_scene, bool lp_played) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_played == true)) {
        UserDataSetInt("Scenes", lp_scene, "played", 1, 1);
    }
    else {
        UserDataSetInt("Scenes", lp_scene, "played", 1, 0);
    }
}

void libSwaC_gf_StoryCreateKerrigan (point lp_spawnPoint, int lp_player, int lp_phase, fixed lp_facing, int lp_flags) {
    // Variable Declarations
    int lv_phaseUsed;
    string lv_unitType;

    // Automatic Variable Declarations
    int autoDBB28B9D_val;

    // Variable Initialization

    // Implementation
    if ((lp_phase == libSwaC_ge_KerriganPhase_DefaultKerriganPhase)) {
        lv_phaseUsed = libSwaC_gv_zS_KerriganPhase;
    }
    else {
        lv_phaseUsed = lp_phase;
    }
    autoDBB28B9D_val = lv_phaseUsed;
    if (autoDBB28B9D_val == libSwaC_ge_KerriganPhase_KerriganPhaseQueenOfBlade) {
        lv_unitType = "SMX1KerriganInfestedWithLight";
    }
    else if (autoDBB28B9D_val == libSwaC_ge_KerriganPhase_KerriganPhasePostHybrid) {
        lv_unitType = "SMX1KerriganInfestedWithLight";
    }
    else if (autoDBB28B9D_val == libSwaC_ge_KerriganPhase_KerriganPhaseGhost) {
        lv_unitType = "SMX1KerriganDezergedWithLight";
    }
    else {
        lv_unitType = "SMX1KerriganDezergedWithLight";
    }
    UnitCreate(1, lv_unitType, lp_flags, lp_player, lp_spawnPoint, lp_facing);
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "ExternalFinderAdd");
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "AliasAdd ZSMKerrigan");
}

void libSwaC_gf_StoryCreateEvoMaster (point lp_spawnPoint, int lp_player, fixed lp_facing, int lp_flags) {
    // Automatic Variable Declarations
    // Implementation
    UnitCreate(1, libSwaC_gf_ZS_EvoMasterType(), lp_flags, lp_player, lp_spawnPoint, lp_facing);
}

void libSwaC_gf_ZS_FadeAllSoundsExceptMusic (fixed lp_duration, bool lp_wait) {
    // Automatic Variable Declarations
    // Implementation
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, lp_duration);
    if ((lp_wait == true)) {
        Wait(lp_duration, c_timeReal);
    }

}

text libSwaC_gf_StorySceneName (string lp_scene) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("Scenes", lp_scene, "name", 1);
}

bool libSwaC_gf_StoryScenePlayed (string lp_scene) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetInt("Scenes", lp_scene, "played", 1) > 0);
}

string libSwaC_gf_ZS_EvoMasterType () {
    // Automatic Variable Declarations
    // Implementation
    return "SMX1EvolutionMaster";
}

string libSwaC_gf_ZS_SceneMovie (string lp_scene) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetMovie("Scenes", lp_scene, "movie", 1);
}

void libSwaC_gf_EnableCampaignTechUnit (bool lp_enableDisable, string lp_techUnit, int lp_player) {
    // Variable Declarations
    string lv_armyCategory;
    string lv_armyUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_enableDisable == true)) {
        UserDataSetInt("TechUnit", lp_techUnit, "Enabled", 1, 1);
    }
    else {
        UserDataSetInt("TechUnit", lp_techUnit, "Enabled", 1, 0);
    }
    lv_armyCategory = libSwaC_gf_ZS_ArmyCategoryOfTechUnit(lp_techUnit);
    if ((lv_armyCategory != null)) {
        libSwaC_gf_ZS_EnableUpgradeAndAbilityCommandForTech(lp_enableDisable, c_gameCatalogArmyCategory, (lv_armyCategory), null, null, lp_player);
    }

    lv_armyUnit = libSwaC_gf_ZS_ArmyUnitOfTechUnit(lp_techUnit);
    if ((lv_armyUnit != null)) {
        libSwaC_gf_ZS_EnableUpgradeAndAbilityCommandForTech(lp_enableDisable, c_gameCatalogArmyUnit, (lv_armyUnit), null, null, lp_player);
    }

    libSwaC_gf_ZS_UpdateWeaponArmorUpgrades(lp_player);
    if ((libSwaC_gf_ZS_MissionisInstallation(libSwaC_gf_CurrentMap()) == false)) {
        if ((lp_enableDisable == true)) {
            if ((libSwaC_gv_zS_ApplyingCampaignTech == true)) {
                libSwaC_gf_AddUnitTypeToUnitHelpPanel(libSwaC_gf_ZS_CampaignTechUnitType(lp_techUnit), true, lp_player);
            }
            else {
                libSwaC_gf_AddUnitTypeToUnitHelpPanel(libSwaC_gf_ZS_CampaignTechUnitType(lp_techUnit), false, lp_player);
            }
        }
        else {
            TechTreeUnitHelp(lp_player, libSwaC_gf_ZS_CampaignTechUnitType(lp_techUnit), false);
        }
    }

}

bool libSwaC_gf_CampaignTechUnitIsEnabled (string lp_techUnit) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetInt("TechUnit", lp_techUnit, "Enabled", 1) > 0);
}

string libSwaC_gf_ZS_CampaignTechUnitType (string lp_techUnit) {
    // Variable Declarations
    string lv_armyCategory;
    string lv_armyUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_armyCategory = libSwaC_gf_ZS_ArmyCategoryOfTechUnit(lp_techUnit);
    if ((lv_armyCategory != null)) {
        return libSwaC_gf_ZS_StoryArmyCategoryUnitType(lv_armyCategory);
    }

    lv_armyUnit = libSwaC_gf_ZS_ArmyUnitOfTechUnit(lp_techUnit);
    if ((lv_armyUnit != null)) {
        return libSwaC_gf_ZS_StoryArmyUnitUnitType(lv_armyUnit);
    }

    return null;
}

void libSwaC_gf_ZS_UpdateWeaponArmorUpgrades (int lp_player) {
    // Variable Declarations
    bool lv_meleeWeapon1;
    bool lv_meleeWeapon2;
    bool lv_meleeWeapon3;
    bool lv_rangeWeapon1;
    bool lv_rangeWeapon2;
    bool lv_rangeWeapon3;
    bool lv_groundArmor1;
    bool lv_groundArmor2;
    bool lv_groundArmor3;
    bool lv_flyerWeapon1;
    bool lv_flyerWeapon2;
    bool lv_flyerWeapon3;
    bool lv_flyerArmor1;
    bool lv_flyerArmor2;
    bool lv_flyerArmor3;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_meleeWeapon1 = true;
    lv_meleeWeapon2 = true;
    lv_meleeWeapon3 = true;
    lv_rangeWeapon1 = true;
    lv_rangeWeapon2 = true;
    lv_rangeWeapon3 = true;
    lv_groundArmor1 = true;
    lv_groundArmor2 = true;
    lv_groundArmor3 = true;
    lv_flyerWeapon1 = true;
    lv_flyerWeapon2 = true;
    lv_flyerWeapon3 = true;
    lv_flyerArmor1 = true;
    lv_flyerArmor2 = true;
    lv_flyerArmor3 = true;

    // Implementation
    lv_groundArmor1 = true;
    lv_rangeWeapon3 = false;
    lv_rangeWeapon2 = false;
    lv_rangeWeapon1 = false;
    lv_meleeWeapon3 = false;
    lv_meleeWeapon2 = false;
    lv_meleeWeapon1 = false;
    lv_groundArmor3 = false;
    lv_groundArmor2 = false;
    lv_flyerWeapon3 = false;
    lv_flyerWeapon2 = false;
    lv_flyerWeapon1 = false;
    lv_flyerArmor3 = false;
    lv_flyerArmor2 = false;
    lv_flyerArmor1 = false;
    if (((libSwaC_gf_CampaignTechUnitIsEnabled("Baneling") == true) || (libSwaC_gf_CampaignTechUnitIsEnabled("BanelingB") == true) || (libSwaC_gf_CampaignTechUnitIsEnabled("BanelingA") == true) || (libSwaC_gf_CampaignTechUnitIsEnabled("Ultralisk") == true) || (libSwaC_gf_CampaignTechUnitIsEnabled("UltraliskA") == true) || (libSwaC_gf_CampaignTechUnitIsEnabled("UltraliskB") == true) || (libSwaC_gf_CampaignTechUnitIsEnabled("Zergling") == true) || (libSwaC_gf_CampaignTechUnitIsEnabled("ZerglingA") == true) || (libSwaC_gf_CampaignTechUnitIsEnabled("ZerglingB") == true) || (libSwaC_gf_CampaignTechUnitIsEnabled("Aberration") == true))) {
        lv_meleeWeapon1 = true;
    }

    if (((libSwaC_gf_CampaignTechUnitIsEnabled("Hydralisk") == true) || (libSwaC_gf_CampaignTechUnitIsEnabled("HydraliskA") == true) || (libSwaC_gf_CampaignTechUnitIsEnabled("HydraliskB") == true) || (libSwaC_gf_CampaignTechUnitIsEnabled("Roach") == true) || (libSwaC_gf_CampaignTechUnitIsEnabled("RoachA") == true) || (libSwaC_gf_CampaignTechUnitIsEnabled("RoachB") == true) || (libSwaC_gf_CampaignTechUnitIsEnabled("Queen") == true))) {
        lv_rangeWeapon1 = true;
    }

    if (((libSwaC_gf_CampaignTechUnitIsEnabled("Mutalisk") == true) || (libSwaC_gf_CampaignTechUnitIsEnabled("MutaliskB") == true) || (libSwaC_gf_CampaignTechUnitIsEnabled("MutaliskA") == true))) {
        lv_flyerWeapon1 = true;
    }

    if (((libSwaC_gf_CampaignTechUnitIsEnabled("MutaliskB") == true) || (libSwaC_gf_CampaignTechUnitIsEnabled("MutaliskA") == true) || (libSwaC_gf_CampaignTechUnitIsEnabled("MutaliskA") == true) || (libSwaC_gf_CampaignTechUnitIsEnabled("Mutalisk") == true) || (libSwaC_gf_CampaignTechUnitIsEnabled("Overseer") == true))) {
        lv_flyerArmor1 = true;
    }

    TechTreeAbilityAllow(lp_player, AbilityCommand("evolutionchamberresearch", 0), lv_meleeWeapon1);
    TechTreeAbilityAllow(lp_player, AbilityCommand("evolutionchamberresearch", 6), lv_rangeWeapon1);
    TechTreeAbilityAllow(lp_player, AbilityCommand("evolutionchamberresearch", 3), lv_groundArmor1);
    TechTreeAbilityAllow(lp_player, AbilityCommand("SpireResearch", 0), lv_flyerWeapon1);
    TechTreeAbilityAllow(lp_player, AbilityCommand("SpireResearch", 3), lv_flyerArmor1);
    if ((libSwaC_gf_NumberOfMissions(libSwaC_ge_MissionCountOptions_Completed) >= 6)) {
        if ((lv_meleeWeapon1 == true)) {
            lv_meleeWeapon2 = true;
        }

        if ((lv_rangeWeapon1 == true)) {
            lv_rangeWeapon2 = true;
        }

        if ((lv_groundArmor1 == true)) {
            lv_groundArmor2 = true;
        }

        if ((lv_flyerWeapon1 == true)) {
            lv_flyerWeapon2 = true;
        }

        if ((lv_flyerArmor1 == true)) {
            lv_flyerArmor2 = true;
        }

    }

    TechTreeAbilityAllow(lp_player, AbilityCommand("evolutionchamberresearch", 1), lv_meleeWeapon2);
    TechTreeAbilityAllow(lp_player, AbilityCommand("evolutionchamberresearch", 7), lv_rangeWeapon2);
    TechTreeAbilityAllow(lp_player, AbilityCommand("evolutionchamberresearch", 4), lv_groundArmor2);
    TechTreeAbilityAllow(lp_player, AbilityCommand("SpireResearch", 1), lv_flyerWeapon2);
    TechTreeAbilityAllow(lp_player, AbilityCommand("SpireResearch", 4), lv_flyerArmor2);
    if ((libSwaC_gf_MissionStatusCheck("ZHybrid2", libSwaC_ge_MissionStatus_Completed) == true)) {
        if ((lv_meleeWeapon2 == true)) {
            lv_meleeWeapon3 = true;
        }

        if ((lv_rangeWeapon2 == true)) {
            lv_rangeWeapon3 = true;
        }

        if ((lv_groundArmor2 == true)) {
            lv_groundArmor3 = true;
        }

        if ((lv_flyerWeapon2 == true)) {
            lv_flyerWeapon3 = true;
        }

        if ((lv_flyerArmor2 == true)) {
            lv_flyerArmor3 = true;
        }

    }

    TechTreeAbilityAllow(lp_player, AbilityCommand("evolutionchamberresearch", 2), lv_meleeWeapon3);
    TechTreeAbilityAllow(lp_player, AbilityCommand("evolutionchamberresearch", 8), lv_rangeWeapon3);
    TechTreeAbilityAllow(lp_player, AbilityCommand("evolutionchamberresearch", 5), lv_groundArmor3);
    TechTreeAbilityAllow(lp_player, AbilityCommand("SpireResearch", 2), lv_flyerWeapon3);
    TechTreeAbilityAllow(lp_player, AbilityCommand("SpireResearch", 5), lv_flyerArmor3);
}

void libSwaC_gf_ZS_EnableUpgradeAndAbilityCommandForTech (bool lp_enableDisable, int lp_catalog, string lp_entry, string lp_upgradeField, string lp_abilCommandField, int lp_player) {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexUnit;
    string lv_indexUpgrade;
    int lv_index;
    int lv_unitIndex;
    string lv_upgrade;
    abilcmd lv_abilityCommand;
    string lv_uField;
    string lv_aField;

    // Automatic Variable Declarations
    int auto62CDBCA3_ae;
    const int auto62CDBCA3_ai = 1;
    int auto68552800_ae;
    const int auto68552800_ai = 1;

    // Variable Initialization
    lv_uField = "";
    lv_aField = "";

    // Implementation
    if ((lp_upgradeField == null)) {
        lv_uField = "UpgradeArray";
    }
    else {
        lv_uField = lp_upgradeField;
    }
    if ((lp_abilCommandField == null)) {
        lv_aField = "AbilCommandArray";
    }
    else {
        lv_aField = lp_abilCommandField;
    }
    auto62CDBCA3_ae = CatalogFieldValueCount(lp_catalog, lp_entry, lv_uField, 1);
    lv_index = 1;
    for ( ; ( (auto62CDBCA3_ai >= 0 && lv_index <= auto62CDBCA3_ae) || (auto62CDBCA3_ai < 0 && lv_index >= auto62CDBCA3_ae) ) ; lv_index += auto62CDBCA3_ai ) {
        lv_upgrade = (libSwaC_gf_ZS_CatalogGetFieldArrayValue(lp_catalog, lp_entry, lv_uField, lv_index, lp_player));
        if ((lp_enableDisable == true)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lv_upgrade, 1);
        }
        else {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lv_upgrade, 0);
        }
    }
    auto68552800_ae = CatalogFieldValueCount(lp_catalog, lp_entry, lv_aField, 1);
    lv_index = 1;
    for ( ; ( (auto68552800_ai >= 0 && lv_index <= auto68552800_ae) || (auto68552800_ai < 0 && lv_index >= auto68552800_ae) ) ; lv_index += auto68552800_ai ) {
        lv_abilityCommand = StringToAbilCmd(libSwaC_gf_ZS_CatalogGetFieldArrayValue(lp_catalog, lp_entry, lv_aField, lv_index, lp_player));
        if ((lp_enableDisable == true)) {
            TechTreeAbilityAllow(lp_player, lv_abilityCommand, true);
        }
        else {
            TechTreeAbilityAllow(lp_player, lv_abilityCommand, false);
        }
    }
}

void libSwaC_gf_ZS_ApplyTech (int lp_player) {
    // Variable Declarations
    int lv_indexPlayer;
    int lv_index;
    string lv_indexTechUnit;
    bool lv_morphedUnitPanelEnabled;

    // Automatic Variable Declarations
    playergroup auto29524B7D_g;

    // Variable Initialization

    // Implementation
    libSwaC_gv_zS_ApplyingCampaignTech = true;
    TechTreeRestrictionsEnable(lp_player, true);
    libSwaC_gf_ZS_ApplyArmyTech(lp_player);
    libSwaC_gf_ZS_UpdateQueenAbilities(lp_player);
    libSwaC_gf_ZS_ApplyKerriganTechTiers(lp_player);
    libSwaC_gf_ZS_ApplyKerriganLevelBonus(1);
    libSwaC_gv_zS_ApplyingCampaignTech = false;
    if ((libSwaC_gf_StoryInSimulation() == true)) {
        return ;
    }

    TriggerExecute(libSwaC_gt_ZS_ApplyLarvaUpgrade, true, false);
    if ((lp_player == 1)) {
        libSwaC_gf_TS_HelpTechTree_UpdatePanel();
        libSwaC_gf_ZS_HelpUnitsPanel_UpdatePanel();
    }

    auto29524B7D_g = PlayerGroupAll();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto29524B7D_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((PlayerType(lv_indexPlayer) != c_playerTypeUser) && (PlayerStatus(lv_indexPlayer) == c_playerStatusActive)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_indexPlayer, "BansheeCloak", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_indexPlayer, "PersonalCloaking", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_indexPlayer, "WraithCloak", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_indexPlayer, "HunterSeeker", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_indexPlayer, "YamatoCannon", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_indexPlayer, "BattlecruiserEnableSpecializations", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_indexPlayer, "ReaperSpeed", 1);
        }

    }
    if ((libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindStory) == false)) {
        libSwaC_gf_EnableDisableZerglingRespawn(true);
    }

    if (((libSwaC_gf_CampaignTechUnitIsEnabled("Baneling") == true) || (libSwaC_gf_CampaignTechUnitIsEnabled("BanelingA") == true) || (libSwaC_gf_CampaignTechUnitIsEnabled("BanelingB") == true) || (libSwaC_gf_CampaignTechUnitIsEnabled("MutaliskA") == true) || (libSwaC_gf_CampaignTechUnitIsEnabled("MutaliskB") == true))) {
        lv_morphedUnitPanelEnabled = true;
    }
    else {
        lv_morphedUnitPanelEnabled = false;
    }
    if ((libSwaC_gv_zS_MorphedUnitsImage == c_invalidDialogControlId)) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "/$parent/$parent/HelpMenuDialogGame/PanelFrame/TechTreePanel/CategoryFrame_Zerg_Campaign/MorphedUnitsBorderImage");
        libSwaC_gv_zS_MorphedUnitsImage = DialogControlLastCreated();
    }

    if ((libSwaC_gv_zS_MorphedUnitsLabel == c_invalidDialogControlId)) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "/$parent/$parent/HelpMenuDialogGame/PanelFrame/TechTreePanel/CategoryFrame_Zerg_Campaign/MorphedUnitsLabel");
        libSwaC_gv_zS_MorphedUnitsLabel = DialogControlLastCreated();
    }

    if ((lv_morphedUnitPanelEnabled == true)) {
        DialogControlSetVisible(libSwaC_gv_zS_MorphedUnitsImage, PlayerGroupAll(), true);
        DialogControlSetVisible(libSwaC_gv_zS_MorphedUnitsLabel, PlayerGroupAll(), true);
    }
    else {
        DialogControlSetVisible(libSwaC_gv_zS_MorphedUnitsImage, PlayerGroupAll(), false);
        DialogControlSetVisible(libSwaC_gv_zS_MorphedUnitsLabel, PlayerGroupAll(), false);
    }
}

void libSwaC_gf_ZS_UpdateTechStates (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libSwaC_gf_ZS_UpdateArmyCategoryStates(lp_player);
    libSwaC_gf_ZS_UpdateArmyUpgradeStates();
    libSwaC_gf_ZS_UpdateArmyUnitStates();
}

void libSwaC_gf_ZS_ResetTech () {
    // Automatic Variable Declarations
    // Implementation
    libSwaC_gf_ZS_ResetArmyTech();
    libSwaC_gf_ZS_ResetKerriganTechTiers();
}

void libSwaC_gf_ZS_UpdateQueenAbilities (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeAbilityAllow(lp_player, AbilityCommand("DeepTunnel", 0), false);
    if (((libSwaC_gf_MissionStatusCheck("ZLab2", libSwaC_ge_MissionStatus_Completed) == true))) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("Transfusion", 0), true);
    }

}

void libSwaC_gf_ZS_StoreTechBonusAtMissionBeginning () {
    // Automatic Variable Declarations
    // Implementation
}

void libSwaC_gf_AddUnitTypeToUnitHelpPanel (string lp_unitType, bool lp_saveInHistory, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_SwaC_C8310DD7", "A", StringToText((lp_unitType)));
    TextExpressionSetToken("Param/Expression/lib_SwaC_C8310DD7", "B", libNtve_gf_ConvertBooleanToText(lp_saveInHistory));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_SwaC_C8310DD7"), false);
    TechTreeUnitHelp(lp_player, lp_unitType, true);
    if ((lp_saveInHistory == true)) {
        libSwaC_gf_ZS_HelpUnitsPanel_AddEnabledUnitType(lp_unitType);
    }

}

string libSwaC_gf_ZS_HelpUnitsPanel_UnitTypeStringID (string lp_unitType) {
    // Automatic Variable Declarations
    // Implementation
    return (lp_unitType);
}

bool libSwaC_gf_ZS_HelpUnitsPanel_EnabledUnitTypeAlreadyExisted (string lp_unitType) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableValueExists(true, libSwaC_gf_ZS_HelpUnitsPanel_UnitTypeStringID(lp_unitType));
}

void libSwaC_gf_ZS_HelpUnitsPanel_AddEnabledUnitType (string lp_unitType) {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexUnit;

    // Automatic Variable Declarations
    int auto08B3A217_ae;
    int auto08B3A217_ai;
    int autoFBFD1454_ae;
    int autoFBFD1454_ai;

    // Variable Initialization

    // Implementation
    if (((libSwaC_gv_zSX_HelpUnitsPanel_EnabledUnitTypesCount == libSwaC_gv_zSC_HelpUnitPanel_EnabledUnitTypeCountMax) || (libSwaC_gf_ZS_HelpUnitsPanel_EnabledUnitTypeAlreadyExisted(lp_unitType) == true))) {
        return ;
    }

    auto08B3A217_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto08B3A217_ai = 1;
    while (auto08B3A217_ai <= auto08B3A217_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto08B3A217_ai);
        if ((libSwaC_gf_ZS_StoryArmyCategoryUnitType(lv_indexCategory) == lp_unitType) && ((libSwaC_gf_ZS_StoryArmyCategoryPurchasedUnit(lv_indexCategory) != null) || (libSwaC_gf_StoryArmyCategoryStateCheck(lv_indexCategory, c_armyCategoryStateUnlocked) == false))) {
            return ;
        }

        autoFBFD1454_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
        autoFBFD1454_ai = 1;
        while (autoFBFD1454_ai <= autoFBFD1454_ae) {
            lv_indexUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(autoFBFD1454_ai-1)+"]", 1);
            if ((libSwaC_gf_ZS_StoryArmyUnitUnitType(lv_indexUnit) == lp_unitType) && (libSwaC_gf_ZS_StoryArmyUnitUnitType(libSwaC_gf_ZS_StoryArmyCategoryPurchasedUnit(lv_indexCategory)) != lp_unitType)) {
                return ;
            }

            autoFBFD1454_ai = autoFBFD1454_ai + 1;
        }
        auto08B3A217_ai = auto08B3A217_ai + 1;
    }
    libSwaC_gv_zSX_HelpUnitsPanel_EnabledUnitTypesCount += 1;
    libSwaC_gv_zSX_HelpUnitsPanel_EnabledUnitTypes[libSwaC_gv_zSX_HelpUnitsPanel_EnabledUnitTypesCount] = lp_unitType;
    DataTableSetString(true, libSwaC_gf_ZS_HelpUnitsPanel_UnitTypeStringID(lp_unitType), IntToString(libSwaC_gv_zSX_HelpUnitsPanel_EnabledUnitTypesCount));
}

void libSwaC_gf_ZS_HelpUnitsPanel_ResetEnabledUnitTypes () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libSwaC_gv_zSX_HelpUnitsPanel_EnabledUnitTypesCount = 0;
}

void libSwaC_gf_ZS_HelpUnitsPanel_UpdatePanel () {
    // Variable Declarations
    int lv_index;
    string lv_unitType;
    string lv_category;
    string lv_indexCategory;
    string lv_indexArmyUnit;
    string lv_armyUnit;

    // Automatic Variable Declarations
    int autoD6BAB8CA_ae;
    const int autoD6BAB8CA_ai = 1;

    // Variable Initialization

    // Implementation
    TechTreeUnitHelpDefault(1, false);
    if (((libSwaC_gf_ZS_MissionisInstallation(libSwaC_gf_CurrentMap()) == true) || (libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindUpgrade) == true))) {
        return ;
    }

    TechTreeUnitHelp(1, "Drone", true);
    TechTreeUnitHelp(1, "Overlord", true);
    autoD6BAB8CA_ae = libSwaC_gv_zSX_HelpUnitsPanel_EnabledUnitTypesCount;
    lv_index = 1;
    for ( ; ( (autoD6BAB8CA_ai >= 0 && lv_index <= autoD6BAB8CA_ae) || (autoD6BAB8CA_ai < 0 && lv_index >= autoD6BAB8CA_ae) ) ; lv_index += autoD6BAB8CA_ai ) {
        if ((libSwaC_gv_zSX_HelpUnitsPanel_EnabledUnitTypes[lv_index] == "HydraliskLurker")) {
            TechTreeUnitHelp(1, "Lurker", true);
        }
        else if ((libSwaC_gv_zSX_HelpUnitsPanel_EnabledUnitTypes[lv_index] == "HydraliskImpaler")) {
            TechTreeUnitHelp(1, "Impaler", true);
        }
        else if ((libSwaC_gv_zSX_HelpUnitsPanel_EnabledUnitTypes[lv_index] == "MutaliskViper")) {
            TechTreeUnitHelp(1, "Viper", true);
        }
        else if ((libSwaC_gv_zSX_HelpUnitsPanel_EnabledUnitTypes[lv_index] == "MutaliskBroodlord")) {
            TechTreeUnitHelp(1, "BroodLord", true);
        }
        TechTreeUnitHelp(1, libSwaC_gv_zSX_HelpUnitsPanel_EnabledUnitTypes[lv_index], true);
    }
}

void libSwaC_gf_TS_HelpTechTree_UpdatePanel () {
    // Automatic Variable Declarations
    // Implementation
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Terr", false);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Prot", false);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Zerg", false);
    if (((libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindMission) == false) || (libSwaC_gf_ZS_MissionisInstallation(libSwaC_gf_CurrentMap()) == true))) {
        return ;
    }

    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Zerg", true);
    if (((libSwaC_gf_MissionStatusCheck("ZHybrid2", libSwaC_ge_MissionStatus_Completed) == true) || (TechTreeUpgradeCount(1, "HotSHaveUltralisk", c_techCountQueuedOrBetter) == 1) || (TechTreeUpgradeCount(1, "HotSTorrasque", c_techCountQueuedOrBetter) == 1) || (TechTreeUpgradeCount(1, "HotSNoxious", c_techCountQueuedOrBetter) == 1) || (TechTreeUpgradeCount(1, "HotSMutaliskViper", c_techCountQueuedOrBetter) == 1) || (TechTreeUpgradeCount(1, "HotSMutaliskBroodlord", c_techCountQueuedOrBetter) == 1))) {
        TechTreeAbilityAllow(1, AbilityCommand("UpgradeToHive", 0), true);
    }
    else {
        TechTreeAbilityAllow(1, AbilityCommand("UpgradeToHive", 0), false);
    }
    if (((TechTreeUpgradeCount(1, "HotSMutaliskViper", c_techCountQueuedOrBetter) == 1) || (TechTreeUpgradeCount(1, "HotSMutaliskBroodlord", c_techCountQueuedOrBetter) == 1))) {
        TechTreeAbilityAllow(1, AbilityCommand("UpgradeToGreaterSpireViper", 0), true);
        TechTreeAbilityAllow(1, AbilityCommand("UpgradeToGreaterSpireBroodlord", 0), true);
    }
    else {
        TechTreeAbilityAllow(1, AbilityCommand("UpgradeToGreaterSpireViper", 0), false);
        TechTreeAbilityAllow(1, AbilityCommand("UpgradeToGreaterSpireBroodlord", 0), false);
    }
}

void libSwaC_gf_DisplayEggRoom () {
    // Automatic Variable Declarations
    // Implementation
    if ((libSwaC_gv_zS_ArmyCustomEggRoomOpened == true)) {
        return ;
    }

    if ((libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindStory) == false)) {
        CameraSave(1);
        libSwaC_gf_ZS_ArmyCustomEggUIEnter();
    }
    else {
        libSwaC_gf_ViewEggRoom();
    }
    libSwaC_gv_zS_ArmyCustomEggRoomOpened = true;
    TriggerExecute(libSwaC_gt_ZS_ArmyCustomPeriodicUpgradeReminder, true, false);
    if ((libSwaC_gv_zS_ArmyDebugUsed == true)) {
        libSwaC_gv_zS_ArmyCustomCategoryCurrent = "Zergling";
        libSwaC_gf_ZS_ArmyCustomUpgradeUIEnter();
    }

    libSwaC_gf_CinematicFade(true, 0.5, Color(0.00, 0.00, 0.00), false);
    if ((UserDataGetInt("StoryStates", "Unit Upgrade UI Visited", "value", 1) == 0)) {
        ConversationDataRun("zSMAmbient_EvolutionMaster", PlayerGroupAll(), c_conversationSkipNone, false);
    }

    TriggerExecute(libSwaC_gt_ZS_ArmyCustomRunning, true, true);
    libSwaC_gv_zS_ArmyCustomEggRoomOpened = false;
}

void libSwaC_gf_ViewEggRoom () {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexMission;
    bool lv_evoMissionRemains;

    // Automatic Variable Declarations
    int auto0D2B42F3_ae;
    int auto0D2B42F3_ai;
    int autoBCF1F141_ae;
    int autoBCF1F141_ai;

    // Variable Initialization

    // Implementation
    if ((libSwaC_gv_zS_ArmyEvoCalloutFlash == c_invalidDialogControlId)) {
        libSwaC_gf_StoryCreateCallout2(libSwaC_gv_zS_ArmyCustomEggCalloutAttachments, "Egg Room - Evolution Master");
        libSwaC_gv_zS_ArmyEvoCalloutFlash = DialogControlLastCreated();
        libSwaC_gf_ZS_ArmyEggRoomCalloutSetText(DialogControlLastCreated(), StringExternal(CatalogReferenceGet("Character,EvolutionMaster,Name[0]", c_playerAny)), StringExternal("Param/Value/lib_SwaC_44C095F6"));
        DialogControlHookup(libSwaC_gv_zS_ArmyEvoCalloutFlash, c_triggerControlTypeLabel, "SubNameLabel");
        libSwaC_gv_zS_ArmyEvoCalloutSubtitle = DialogControlLastCreated();
    }

    if ((libSwaC_gv_zS_ArmyCustomEggRoomDialog == c_invalidDialogId)) {
        DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
        libSwaC_gv_zS_ArmyCustomEggRoomDialog = DialogLastCreated();
        DialogSetImageVisible(DialogLastCreated(), false);
        DialogSetFullscreen(DialogLastCreated(), true);
        DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "EggRoom/EggRoomTemplate");
        libSwaC_gv_zS_ArmyCustomEggRoomPanel = DialogControlLastCreated();
        DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
        DialogControlHookup(libSwaC_gv_zS_ArmyCustomEggRoomPanel, c_triggerControlTypeButton, "BackButton");
        libSwaC_gv_zS_ArmyCustomEggRoomBackButton = DialogControlLastCreated();
        DialogControlHookup(libSwaC_gv_zS_ArmyCustomEggRoomPanel, c_triggerControlTypeButton, "EvolutionMission");
        libSwaC_gv_zS_ArmyCustomEggRoomEvolutionMissionButton = DialogControlLastCreated();
        DialogControlHookup(libSwaC_gv_zS_ArmyCustomEggRoomPanel, c_triggerControlTypePortrait, "EvolutionButtonPortrait");
        libSwaC_gv_zS_ArmyCustomEggRoomEvolutionButtonHighlight = DialogControlLastCreated();
        PortraitSetModel(PortraitGetTriggerControl(libSwaC_gv_zS_ArmyCustomEggRoomEvolutionButtonHighlight), "EvolutionButtonHighlight", true);
        DialogSetVisible(libSwaC_gv_zS_ArmyCustomEggRoomDialog, PlayerGroupAll(), true);
    }

    if ((libSwaC_gv_zS_ArmyCustomEggRoomDialog != c_invalidDialogId) && (DialogIsVisible(libSwaC_gv_zS_ArmyCustomEggRoomDialog, 1) == false)) {
        DialogSetVisible(libSwaC_gv_zS_ArmyCustomEggRoomDialog, PlayerGroupAll(), true);
    }

    if ((libSwaC_gf_ZS_ArmyEvoHasConvo() == true)) {
        UnitSetCursor(libSwaC_gv_zS_ArmyCustomEggRoomEvolutionMaster, "InteractiveTalk");
    }
    else {
        UnitSetCursor(libSwaC_gv_zS_ArmyCustomEggRoomEvolutionMaster, "InteractiveLook");
    }
    if ((libSwaC_gf_ZS_ArmyEvoHasConvo2() == true)) {
        DialogControlSetVisible(libSwaC_gv_zS_ArmyEvoCalloutFlash, PlayerGroupAll(), true);
        DialogControlSetVisible(libSwaC_gv_zS_ArmyEvoCalloutSubtitle, PlayerGroupAll(), true);
    }
    else {
        DialogControlSetVisible(libSwaC_gv_zS_ArmyEvoCalloutFlash, PlayerGroupAll(), false);
        DialogControlSetVisible(libSwaC_gv_zS_ArmyEvoCalloutSubtitle, PlayerGroupAll(), false);
    }
    UnitSetState(libSwaC_gv_zS_ArmyCustomEggRoomEvolutionMaster, c_unitStateCursorable, true);
    UnitSetState(libSwaC_gv_zS_ArmyCustomEggRoomEvolutionMaster, c_unitStateHighlightable, true);
    if ((libNtve_gf_UnitIsHidden(libSwaC_gv_zS_ArmyCustomEggRoomEvolutionMaster) == true)) {
        libSwaC_gf_ZS_ShowHideStoryUnit(true, libSwaC_gv_zS_ArmyCustomEggRoomEvolutionMaster);
    }

    libSwaC_gf_ZS_ArmyCustomEggEvoPlayLight(true);
    libSwaC_gf_ZS_ArmyCustomEggSetPlayLight(true);
    CameraUseModel(1, libSwaC_gv_zS_ArmyCustomEggRoom, libSwaC_gf_ZS_EggRoomCamera(), 0.0);
    if ((libSwaC_gv_zS_ArmyCustomEggRoomOpened == false)) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(libSwaC_gv_zS_ArmyCustomEggRoom), "ZOOM", "Birth", c_animFlagFullMatch | c_animFlagPlayForever | c_animFlagNonLooping, 0.0);
    }

    auto0D2B42F3_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto0D2B42F3_ai = 1;
    while (auto0D2B42F3_ai <= auto0D2B42F3_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto0D2B42F3_ai);
        libSwaC_gf_ZS_ArmyCustomEggUIUpdate(lv_indexCategory);
        auto0D2B42F3_ai = auto0D2B42F3_ai + 1;
    }
    libNtve_gf_SetDialogItemTooltip(libSwaC_gv_zS_ArmyCustomEggRoomEvolutionMissionButton, StringExternal("Param/Value/lib_SwaC_B1CC65D1"), PlayerGroupAll());
    DialogControlSetEnabled(libSwaC_gv_zS_ArmyCustomEggRoomEvolutionMissionButton, PlayerGroupAll(), false);
    DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomEggRoomEvolutionButtonHighlight, PlayerGroupAll(), false);
    autoBCF1F141_ae = CatalogEntryCount(c_gameCatalogMap);
    autoBCF1F141_ai = 1;
    while (autoBCF1F141_ai <= autoBCF1F141_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoBCF1F141_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Upgrade") {
            if ((libSwaC_gf_MissionStatusCheck(lv_indexMission, libSwaC_ge_MissionStatus_Available) == true)) {
                DialogControlSetEnabled(libSwaC_gv_zS_ArmyCustomEggRoomEvolutionMissionButton, PlayerGroupAll(), true);
                DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomEggRoomEvolutionButtonHighlight, PlayerGroupAll(), true);
                libNtve_gf_SetDialogItemTooltip(libSwaC_gv_zS_ArmyCustomEggRoomEvolutionMissionButton, StringExternal("Param/Value/lib_SwaC_487A721F"), PlayerGroupAll());
                lv_evoMissionRemains = true;
                break;
            }
            else {
                if ((libSwaC_gf_MissionStatusCheck(lv_indexMission, libSwaC_ge_MissionStatus_Locked) == true)) {
                    lv_evoMissionRemains = true;
                }

            }
        }
        autoBCF1F141_ai = autoBCF1F141_ai + 1;
    }
    if ((lv_evoMissionRemains == true)) {
        DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomEggRoomEvolutionMissionButton, PlayerGroupAll(), true);
    }
    else {
        DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomEggRoomEvolutionMissionButton, PlayerGroupAll(), false);
    }
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, false);
    libSwaC_gf_ZS_ArmyEggRoomTurnClickableOnOff(true);
    ConversationDataRegisterUnit("char_EvolutionMaster", libSwaC_gv_zS_ArmyCustomEggRoomEvolutionMaster);
    TriggerExecute(libSwaC_gt_ZS_PlayEggRoomIntroSequence, true, false);
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomEggClicked, true);
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomEggMouseOver, true);
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomEvolutionMasterClicked, true);
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomEggRoomBackButtonClicked, true);
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomEggHighlight, true);
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomEggUnhighlight, true);
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomEggRoomEvolutionMissionButtonClicked, true);
}

void libSwaC_gf_PrepareEggRoom () {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexUnit;
    string lv_categoryUserData;
    int lv_index;
    unit lv_eggUnit;
    string lv_eggUnitType;
    point lv_eggLocation;
    int lv_categoryIndex;
    bool lv_eggRoomSpawned;

    // Automatic Variable Declarations
    int auto12B6082B_ae;
    int auto12B6082B_ai;

    // Variable Initialization

    // Implementation
    libSwaC_gv_zS_ArmyCustomCurrentUI = libSwaC_ge_ArmyUIScreen_EggRoom;
    libSwaC_gf_ZS_ArmyCustomUpgradeUILeave();
    libSwaC_gf_ZS_ArmyCustomEvolutionUILeave();
    libSwaC_gf_ZS_ArmyCustomMissionUILeave();
    libSwaC_gf_ZS_ArmyCustomEggUIHide();
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Leviathan_EggRoom", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    if ((libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindMission) == false)) {
        GameSetLighting("SMX1EggRoomSet", 0.0);
        FogSetEnabled(true);
        FogSetColor(Color(9.80, 14.90, 9.80));
        FogSetFallOff(0.1);
        FogSetDensity(0.03);
        FogSetStartHeight(0.0);
    }

    if ((libSwaC_gv_zS_ArmyCustomEggRoom == null)) {
        lv_eggRoomSpawned = true;
        UnitCreate(1, "SMX1EggRoomSet", c_unitCreateIgnorePlacement, 0, Point(50.0, 50.0), 270.0);
        libSwaC_gv_zS_ArmyCustomEggRoom = UnitLastCreated();
        UnitSetState(UnitLastCreated(), c_unitStateHighlightable, false);
        UnitSetState(UnitLastCreated(), c_unitStateCursorable, false);
    }
    else {
        if ((libNtve_gf_UnitIsHidden(libSwaC_gv_zS_ArmyCustomEggRoom) == true)) {
            libSwaC_gf_ZS_ShowHideStoryUnit(true, libSwaC_gv_zS_ArmyCustomEggRoom);
        }

    }
    if ((libSwaC_gv_zS_ArmyCustomEggCalloutAttachments == null)) {
        UnitCreate(1, "SMX1EggRoomSetCalloutPositions", c_unitCreateIgnorePlacement, 0, Point(50.0, 50.0), 270.0);
        libSwaC_gv_zS_ArmyCustomEggCalloutAttachments = UnitLastCreated();
    }

    if ((libSwaC_gv_zS_ArmyCustomEggRoomEvolutionMaster == null)) {
        libSwaC_gf_StoryCreateEvoMaster(UnitGetAttachmentPoint(libSwaC_gv_zS_ArmyCustomEggRoom, "Pos_SetLocation"), 0, PointGetFacing(UnitGetAttachmentPoint(libSwaC_gv_zS_ArmyCustomEggRoom, "Pos_SetLocation")), c_unitCreateIgnorePlacement);
        libSwaC_gv_zS_ArmyCustomEggRoomEvolutionMaster = UnitLastCreated();
    }

    libSwaC_gf_ZS_ShowHideStoryUnit(false, libSwaC_gv_zS_ArmyCustomEggRoomEvolutionMaster);
    auto12B6082B_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto12B6082B_ai = 1;
    while (auto12B6082B_ai <= auto12B6082B_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto12B6082B_ai);
        libSwaC_gf_ZS_ArmyCustomEggUIUpdate(lv_indexCategory);
        auto12B6082B_ai = auto12B6082B_ai + 1;
    }
    libSwaC_gf_ZS_ArmyEggRoomTurnClickableOnOff(false);
}

void libSwaC_gf_HideEggRoom () {
    // Automatic Variable Declarations
    // Implementation
    libSwaC_gf_ZS_ArmyCustomEggUIHide();
}

void libSwaC_gf_ZS_CloseEggRoom () {
    // Automatic Variable Declarations
    // Implementation
    if ((libSwaC_gv_zS_ArmyCustomEggRoomOpened == false)) {
        return ;
    }

    if ((libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindStory) == false)) {
        CameraRestore(1, 0.0, -1, 10);
    }

    TriggerEnable(libSwaC_gt_ZS_ArmyCustomEggClicked, false);
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomEggMouseOver, false);
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomEvolutionMasterClicked, false);
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomEggRoomBackButtonClicked, false);
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomEggHighlight, false);
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomEggUnhighlight, false);
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomEggRoomEvolutionMissionButtonClicked, false);
    TriggerStop(libSwaC_gt_ZS_PlayEggRoomIntroSequence);
    libSwaC_gf_CinematicFade(false, 0.5, Color(0.00, 0.00, 0.00), true);
    libSwaC_gv_zS_ArmyCustomCurrentUI = libSwaC_ge_ArmyUIScreen_None;
    libSwaC_gf_ZS_ArmyCustomEggUILeave();
    TriggerStop(libSwaC_gt_ZS_ArmyCustomRunning);
    TriggerStop(libSwaC_gt_ZS_ArmyCustomPeriodicUpgradeReminder);
}

void libSwaC_gf_ZS_ArmyCustomEggUILeave () {
    // Variable Declarations
    string lv_indexCategory;
    unit lv_eggUnit;

    // Automatic Variable Declarations
    int autoE58C3ED2_ae;
    int autoE58C3ED2_ai;

    // Variable Initialization

    // Implementation
    libSwaC_gf_ZS_ArmyCustomEggUIHide();
    autoE58C3ED2_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    autoE58C3ED2_ai = 1;
    while (autoE58C3ED2_ai <= autoE58C3ED2_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, autoE58C3ED2_ai);
        lv_eggUnit = libSwaC_gf_ArmyCategoryEggUnitInEggRoom(lv_indexCategory);
        libSwaC_gf_ZS_ArmyCustomEggPlayLight("Inactive", lv_indexCategory);
        if ((lv_eggUnit != null)) {
            UnitSetState(lv_eggUnit, c_unitStateHighlightable, false);
            UnitSetState(lv_eggUnit, c_unitStateCursorable, false);
            libNtve_gf_SendActorMessageToUnit(lv_eggUnit, "HaloStop");
            libNtve_gf_SendActorMessageToUnit(lv_eggUnit, libNtve_gf_AnimClear(libSwaC_gv_zSC_ANIMRAWRING, 0.0));
            libSwaC_gf_ZS_ArmyCalloutShowHide(false, lv_indexCategory);
        }

        libNtve_gf_SendActorMessageToUnit(lv_eggUnit, "StrobeStop");
        autoE58C3ED2_ai = autoE58C3ED2_ai + 1;
    }
    if ((libSwaC_gv_zS_ArmyCustomCurrentUI == libSwaC_ge_ArmyUIScreen_Upgrade)) {
        libSwaC_gf_ZS_ShowHideStoryUnit(true, libSwaC_gv_zS_ArmyCustomEggRoom);
        lv_eggUnit = libSwaC_gf_ArmyCategoryEggUnitInEggRoom(libSwaC_gv_zS_ArmyCustomCategoryCurrent);
        libSwaC_gf_ZS_ShowHideStoryUnit(true, lv_eggUnit);
    }

    TriggerEnable(libSwaC_gt_ZS_ArmyCustomEggClicked, false);
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomEggMouseOver, false);
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomEvolutionMasterClicked, false);
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomEggRoomBackButtonClicked, false);
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomEggHighlight, false);
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomEggUnhighlight, false);
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomEggRoomEvolutionMissionButtonClicked, false);
    TriggerStop(libSwaC_gt_ZS_PlayEggRoomIntroSequence);
}

void libSwaC_gf_ZS_ArmyCustomEggUIHide () {
    // Variable Declarations
    string lv_indexCategory;

    // Automatic Variable Declarations
    unitgroup autoD5C92A53_g;
    int autoD5C92A53_u;
    unit autoD5C92A53_var;
    int auto444E777C_ae;
    int auto444E777C_ai;

    // Variable Initialization

    // Implementation
    if ((libSwaC_gv_zS_ArmyCustomCurrentUI == libSwaC_ge_ArmyUIScreen_Mission)) {
        libSwaC_gf_ZS_ArmyCustomMissionUILeave();
    }

    if ((libSwaC_gv_zS_ArmyCustomEggRoom != null) && (libNtve_gf_UnitIsHidden(libSwaC_gv_zS_ArmyCustomEggRoom) == false)) {
        libSwaC_gf_ZS_ShowHideStoryUnit(false, libSwaC_gv_zS_ArmyCustomEggRoom);
    }

    libSwaC_gf_ZS_ArmyCustomEggEvoPlayLight(false);
    libSwaC_gf_ZS_ArmyCustomEggSetPlayLight(false);
    if ((libSwaC_gv_zS_ArmyCustomEggRoomEvolutionMissionButton != c_invalidDialogControlId)) {
        DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomEggRoomEvolutionMissionButton, PlayerGroupAll(), false);
    }

    if ((libSwaC_gv_zS_ArmyCustomEggRoomEvolutionMaster != null) && (libNtve_gf_UnitIsHidden(libSwaC_gv_zS_ArmyCustomEggRoomEvolutionMaster) == false)) {
        libSwaC_gf_ZS_ShowHideStoryUnit(false, libSwaC_gv_zS_ArmyCustomEggRoomEvolutionMaster);
    }

    autoD5C92A53_g = libSwaC_gv_zS_ArmyCustomEggUnits;
    autoD5C92A53_u = UnitGroupCount(autoD5C92A53_g, c_unitCountAll);
    for (;; autoD5C92A53_u -= 1) {
        autoD5C92A53_var = UnitGroupUnitFromEnd(autoD5C92A53_g, autoD5C92A53_u);
        if (autoD5C92A53_var == null) { break; }
        if ((libNtve_gf_UnitIsHidden(autoD5C92A53_var) == false)) {
            libSwaC_gf_ZS_ShowHideStoryUnit(false, autoD5C92A53_var);
        }

    }
    auto444E777C_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto444E777C_ai = 1;
    while (auto444E777C_ai <= auto444E777C_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto444E777C_ai);
        libSwaC_gf_ZS_ArmyCalloutShowHide(false, lv_indexCategory);
        auto444E777C_ai = auto444E777C_ai + 1;
    }
    if ((libSwaC_gv_zS_ArmyCustomEggRoomDialog != c_invalidDialogId)) {
        DialogSetVisible(libSwaC_gv_zS_ArmyCustomEggRoomDialog, PlayerGroupAll(), false);
    }

    if ((libSwaC_gv_zS_ArmyEvoCalloutFlash != c_invalidDialogControlId)) {
        DialogControlSetVisible(libSwaC_gv_zS_ArmyEvoCalloutFlash, PlayerGroupAll(), false);
    }

}

void libSwaC_gf_ZS_ArmyCustomEggUIEnter () {
    // Automatic Variable Declarations
    // Implementation
    libSwaC_gf_PrepareEggRoom();
    libSwaC_gf_ViewEggRoom();
}

void libSwaC_gf_ZS_ArmyCustomEggUIUpdate (string lp_armyCategory) {
    // Variable Declarations
    string lv_categoryUserData;
    unit lv_eggUnit;
    string lv_eggUnitType;
    point lv_eggLocation;
    string lv_indexMission;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libSwaC_gf_ZS_StoryArmyCategoryUsedInUI(lp_armyCategory) == false)) {
        return ;
    }

    lv_eggUnit = libSwaC_gf_ArmyCategoryEggUnitInEggRoom(lp_armyCategory);
    lv_categoryUserData = libSwaC_gf_ZS_TechUnitOfArmyCategory(lp_armyCategory);
    lv_eggUnitType = libSwaC_gf_ZS_ArmyCustomCategoryEggUnitType(lp_armyCategory);
    if ((lv_eggUnit != null) && (UnitGetType(lv_eggUnit) != lv_eggUnitType)) {
        UnitRemove(lv_eggUnit);
        lv_eggUnit = null;
    }

    if ((lv_eggUnit == null)) {
        if ((libSwaC_gf_ZS_StoryArmyCategoryState(lp_armyCategory) == c_armyCategoryStateLocked)) {
            lv_eggLocation = UnitGetPosition(libSwaC_gv_zS_ArmyCustomEggRoom);
        }
        else {
            lv_eggLocation = libSwaC_gf_ZS_ArmyCustomCategoryEggLocation(lp_armyCategory);
        }
        libNtve_gf_CreateUnitsAtPoint2(1, lv_eggUnitType, c_unitCreateIgnorePlacement, 1, lv_eggLocation);
        lv_eggUnit = UnitLastCreated();
        UnitSetHeight(UnitLastCreated(), PointGetHeight(lv_eggLocation), 0.0);
        UnitGroupAdd(libSwaC_gv_zS_ArmyCustomEggUnits, UnitLastCreated());
        UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
        UnitSetCursor(UnitLastCreated(), "InteractiveActivate");
    }

    if ((libSwaC_gf_StoryArmyCategoryStateCheck(lp_armyCategory, c_armyCategoryStateUnlocked) == true)) {
        UnitSetState(lv_eggUnit, c_unitStateCursorable, true);
        UnitSetState(lv_eggUnit, c_unitStateHighlightable, true);
        if ((libSwaC_gf_StoryArmyCategoryStateCheck("Baneling", c_armyCategoryStateUnlocked) == false) && (libSwaC_gf_StoryArmyCategoryStateCheck("Roach", c_armyCategoryStateUnlocked) == false)) {
            libSwaC_gf_ZS_ArmyCustomEggPlayLight("", lp_armyCategory);
        }
        else {
            libSwaC_gf_ZS_ArmyCustomEggPlayLight("Far", lp_armyCategory);
        }
        libNtve_gf_SendActorMessageToUnit(lv_eggUnit, libNtve_gf_AnimBlendTimeApply(0.0));
        libNtve_gf_TurnAnimationPropertiesOn(libNtve_gf_MainActorofUnit(lv_eggUnit), "Cover");
        libNtve_gf_SendActorMessageToUnit(lv_eggUnit, "AnimBlendTimeRemove");
    }
    else {
        libNtve_gf_SendActorMessageToUnit(lv_eggUnit, libNtve_gf_AnimBlendTimeApply(0.0));
        libNtve_gf_TurnAnimationPropertiesOff(libNtve_gf_MainActorofUnit(lv_eggUnit), "Cover");
        libNtve_gf_SendActorMessageToUnit(lv_eggUnit, "AnimBlendTimeRemove");
        libSwaC_gf_ZS_ArmyCustomEggPlayLight("Egg", lp_armyCategory);
        UnitSetState(lv_eggUnit, c_unitStateCursorable, false);
        UnitSetState(lv_eggUnit, c_unitStateHighlightable, false);
    }
    if ((libNtve_gf_UnitIsHidden(lv_eggUnit) == true)) {
        libSwaC_gf_ZS_ShowHideStoryUnit(true, lv_eggUnit);
    }

    DataTableSetUnit(true, (libSwaC_gv_zSC_ArmyCustomEggUnitDataPrefix + (lp_armyCategory)), lv_eggUnit);
    if ((libSwaC_gf_StoryArmyCategoryStateCheck(lp_armyCategory, c_armyCategoryStateUnlocked) == true)) {
        libSwaC_gf_ZS_ArmyCalloutUpdate(lp_armyCategory);
    }

    if ((libSwaC_gf_ZS_ArmyCategoryShouldCallout(lp_armyCategory) == true)) {
        libSwaC_gf_ZS_ArmyCalloutShowHide(true, lp_armyCategory);
    }
    else {
        libSwaC_gf_ZS_ArmyCalloutShowHide(false, lp_armyCategory);
    }
}

trigger auto_libSwaC_gf_ZS_ArmyCustomEggPlayRawrAnimation_Trigger = null;
string auto_libSwaC_gf_ZS_ArmyCustomEggPlayRawrAnimation_lp_armyCategory;

void libSwaC_gf_ZS_ArmyCustomEggPlayRawrAnimation (string lp_armyCategory) {
    auto_libSwaC_gf_ZS_ArmyCustomEggPlayRawrAnimation_lp_armyCategory = lp_armyCategory;

    if (auto_libSwaC_gf_ZS_ArmyCustomEggPlayRawrAnimation_Trigger == null) {
        auto_libSwaC_gf_ZS_ArmyCustomEggPlayRawrAnimation_Trigger = TriggerCreate("auto_libSwaC_gf_ZS_ArmyCustomEggPlayRawrAnimation_TriggerFunc");
    }

    TriggerExecute(auto_libSwaC_gf_ZS_ArmyCustomEggPlayRawrAnimation_Trigger, false, false);
}

bool auto_libSwaC_gf_ZS_ArmyCustomEggPlayRawrAnimation_TriggerFunc (bool testConds, bool runActions) {
    string lp_armyCategory = auto_libSwaC_gf_ZS_ArmyCustomEggPlayRawrAnimation_lp_armyCategory;

    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SendActorMessageToUnit(libSwaC_gf_ArmyCategoryEggUnitInEggRoom(lp_armyCategory), "Signal Rawr");
    return true;
}

void libSwaC_gf_ZS_ShowHideStoryUnit (bool lp_showHide, unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_ShowHideUnit(lp_unit, lp_showHide);
    if ((lp_showHide == true)) {
        libNtve_gf_SendActorMessageToUnit(lp_unit, "AnimSetPausedAll 0");
    }
    else {
        libNtve_gf_SendActorMessageToUnit(lp_unit, "AnimSetPausedAll");
    }
}

unit libSwaC_gf_ArmyCategoryEggUnitInEggRoom (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(true, (libSwaC_gv_zSC_ArmyCustomEggUnitDataPrefix + (lp_armyCategory)));
}

void libSwaC_gf_ArmyCategoryEggUnitShowHide (string lp_armyCategory, bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    libSwaC_gf_ZS_ShowHideStoryUnit(lp_showHide, libSwaC_gf_ArmyCategoryEggUnitInEggRoom(lp_armyCategory));
    if ((lp_showHide == false)) {
        libSwaC_gf_ZS_ArmyCustomEggPlayLight("Inactive", lp_armyCategory);
    }
    else {
        libSwaC_gf_ZS_ArmyCustomEggUIUpdate(lp_armyCategory);
    }
}

point libSwaC_gf_ZS_ArmyCustomCategoryEggLocation (string lp_armyCategory) {
    // Variable Declarations
    string lv_attachment;

    // Automatic Variable Declarations
    string autoDEE9D4E9_val;

    // Variable Initialization
    lv_attachment = "";

    // Implementation
    autoDEE9D4E9_val = lp_armyCategory;
    if (autoDEE9D4E9_val == "Zergling") {
        lv_attachment = "Pos_SetLocation 01";
    }
    else if (autoDEE9D4E9_val == "Baneling") {
        lv_attachment = "Pos_SetLocation 02";
    }
    else if (autoDEE9D4E9_val == "Roach") {
        lv_attachment = "Pos_SetLocation 03";
    }
    else if (autoDEE9D4E9_val == "Hydralisk") {
        lv_attachment = "Pos_SetLocation 05";
    }
    else if (autoDEE9D4E9_val == "Infestor") {
        lv_attachment = "Pos_SetLocation 06";
    }
    else if (autoDEE9D4E9_val == "Ultralisk") {
        lv_attachment = "Pos_SetLocation 07";
    }
    else if (autoDEE9D4E9_val == "Lurker") {
        lv_attachment = "Pos_SetLocation 08";
    }
    else if (autoDEE9D4E9_val == "Mutalisk") {
        lv_attachment = "Pos_SetLocation 08";
    }
    else if (autoDEE9D4E9_val == "SwarmHost") {
        lv_attachment = "Pos_SetLocation 12";
    }
    else {
        return UnitGetPosition(libSwaC_gv_zS_ArmyCustomEggRoom);
    }
    return UnitGetAttachmentPoint(libSwaC_gv_zS_ArmyCustomEggRoom, lv_attachment);
}

bool libSwaC_gf_ZS_ArmyEvoHasConvo () {
    // Automatic Variable Declarations
    // Implementation
    if ((UserDataGetInt("Character", "Evolution Master", "Ambient", 1) == 0)) {
        return true;
    }

    return false;
}

bool libSwaC_gf_ZS_ArmyEvoHasConvo2 () {
    // Automatic Variable Declarations
    // Implementation
    if ((UserDataGetInt("Character", "Evolution Master", "New", 1) == 1)) {
        return true;
    }

    return false;
}

string libSwaC_gf_StoryArmyCategoryUIUnitType (string lp_armyCategory) {
    // Variable Declarations
    string lv_purchasedArmyUnit;
    string lv_techUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libSwaC_gf_ZS_StoryArmyCategoryState(lp_armyCategory) == c_armyCategoryStateLocked)) {
        return null;
    }

    lv_purchasedArmyUnit = libSwaC_gf_ZS_StoryArmyCategoryPurchasedUnit(lp_armyCategory);
    if ((lv_purchasedArmyUnit == null)) {
        lv_techUnit = libSwaC_gf_ZS_TechUnitOfArmyCategory(lp_armyCategory);
    }
    else {
        lv_techUnit = libSwaC_gf_ZS_TechUnitOfArmyUnit(lv_purchasedArmyUnit);
    }
    return UserDataGetUnit("TechUnit", lv_techUnit, "UIUnitType", 1);
}

string libSwaC_gf_ZS_ArmyCustomCategoryEggUnitType (string lp_armyCategory) {
    // Variable Declarations
    string lv_purchasedArmyUnit;
    string lv_techUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libSwaC_gf_ZS_StoryArmyCategoryState(lp_armyCategory) == c_armyCategoryStateLocked)) {
        lv_techUnit = libSwaC_gf_ZS_TechUnitOfArmyCategory(lp_armyCategory);
        return UserDataGetUnit("TechUnit", lv_techUnit, "UIEggType", 1);
    }

    lv_purchasedArmyUnit = libSwaC_gf_ZS_StoryArmyCategoryPurchasedUnit(lp_armyCategory);
    if ((lv_purchasedArmyUnit == null)) {
        lv_techUnit = libSwaC_gf_ZS_TechUnitOfArmyCategory(lp_armyCategory);
    }
    else {
        lv_techUnit = libSwaC_gf_ZS_TechUnitOfArmyUnit(lv_purchasedArmyUnit);
    }
    return UserDataGetUnit("TechUnit", lv_techUnit, "UIUnitType", 1);
}

text libSwaC_gf_ZS_ArmyCustomCategoryEggName (string lp_armyCategory) {
    // Variable Declarations
    string lv_indexArmyUnit;

    // Automatic Variable Declarations
    int autoC76A620B_ae;
    int autoC76A620B_ai;

    // Variable Initialization

    // Implementation
    autoC76A620B_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lp_armyCategory, "ArmyUnitArray", 1);
    autoC76A620B_ai = 1;
    while (autoC76A620B_ai <= autoC76A620B_ae) {
        lv_indexArmyUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lp_armyCategory, "ArmyUnitArray["+IntToString(autoC76A620B_ai-1)+"]", 1);
        if ((libSwaC_gf_ZS_StoryArmyUnitState(lv_indexArmyUnit) == c_armyUnitStatePurchased)) {
            return libSwaC_gf_StoryArmyUnitName(lv_indexArmyUnit);
        }

        autoC76A620B_ai = autoC76A620B_ai + 1;
    }
    return libSwaC_gf_StoryArmyCategoryName(lp_armyCategory);
}

string libSwaC_gf_ZS_ArmyCustomCategoryEggCamera (string lp_armyCategory) {
    // Automatic Variable Declarations
    string auto731A2036_val;

    // Implementation
    auto731A2036_val = lp_armyCategory;
    if (auto731A2036_val == "Zergling") {
        return "Camera Zergling";
    }
    else if (auto731A2036_val == "Baneling") {
        return "Camera Baneling";
    }
    else if (auto731A2036_val == "Roach") {
        return "Camera Roach";
    }
    else if (auto731A2036_val == "Hydralisk") {
        return "Camera Hydralisk";
    }
    else if (auto731A2036_val == "Infestor") {
        return "Camera Infestor";
    }
    else if (auto731A2036_val == "Ultralisk") {
        return "Camera Ultralisk";
    }
    else if (auto731A2036_val == "TentacleMonster") {
        return "Camera Flyer";
    }
    else if (auto731A2036_val == "Mutalisk") {
        return "Camera Mutalisk";
    }
    else if (auto731A2036_val == "SwarmHost") {
        return "Camera EggMonster";
    }
    else {
    }
    return null;
}

string libSwaC_gf_ZS_ArmyCustomCategoryUITechUnit (string lp_armyCategory) {
    // Variable Declarations
    string lv_purchasedArmyUnit;
    string lv_techUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_purchasedArmyUnit = libSwaC_gf_ZS_StoryArmyCategoryPurchasedUnit(lp_armyCategory);
    if ((lv_purchasedArmyUnit == null)) {
        lv_techUnit = libSwaC_gf_ZS_TechUnitOfArmyCategory(lp_armyCategory);
    }
    else {
        lv_techUnit = libSwaC_gf_ZS_TechUnitOfArmyUnit(lv_purchasedArmyUnit);
    }
    return lv_techUnit;
}

void libSwaC_gf_ZS_ArmyEggRoomTurnClickableOnOff (bool lp_onOff) {
    // Variable Declarations
    string lv_indexCategory;
    unit lv_eggUnit;

    // Automatic Variable Declarations
    int auto19F45ACA_ae;
    int auto19F45ACA_ai;
    int auto757A766B_ae;
    int auto757A766B_ai;

    // Variable Initialization

    // Implementation
    if ((lp_onOff == false)) {
        UnitSetState(libSwaC_gv_zS_ArmyCustomEggRoomEvolutionMaster, c_unitStateHighlightable, false);
        if ((libSwaC_gv_zS_ArmyCustomEggRoomDialog != c_invalidDialogId)) {
            DialogSetVisible(libSwaC_gv_zS_ArmyCustomEggRoomDialog, PlayerGroupAll(), false);
        }

        auto757A766B_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
        auto757A766B_ai = 1;
        while (auto757A766B_ai <= auto757A766B_ae) {
            lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto757A766B_ai);
            lv_eggUnit = libSwaC_gf_ArmyCategoryEggUnitInEggRoom(lv_indexCategory);
            if ((lv_eggUnit != null)) {
                UnitSetState(lv_eggUnit, c_unitStateCursorable, false);
                UnitSetState(lv_eggUnit, c_unitStateHighlightable, false);
                libSwaC_gf_ZS_ArmyCalloutShowHide(false, lv_indexCategory);
                libNtve_gf_SendActorMessageToUnit(lv_eggUnit, "StrobeStop");
            }

            auto757A766B_ai = auto757A766B_ai + 1;
        }
        if ((libSwaC_gv_zS_ArmyEvoCalloutFlash != c_invalidDialogControlId)) {
            DialogControlSetVisible(libSwaC_gv_zS_ArmyEvoCalloutFlash, PlayerGroupAll(), false);
        }

    }
    else {
        if ((libSwaC_gv_zS_ArmyCustomEggRoomDialog != c_invalidDialogId)) {
            DialogSetVisible(libSwaC_gv_zS_ArmyCustomEggRoomDialog, PlayerGroupAll(), true);
        }

        auto19F45ACA_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
        auto19F45ACA_ai = 1;
        while (auto19F45ACA_ai <= auto19F45ACA_ae) {
            lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto19F45ACA_ai);
            lv_eggUnit = libSwaC_gf_ArmyCategoryEggUnitInEggRoom(lv_indexCategory);
            if ((lv_eggUnit != null) && (libSwaC_gf_StoryArmyCategoryStateCheck(lv_indexCategory, c_armyCategoryStateUnlocked) == true)) {
                UnitSetState(lv_eggUnit, c_unitStateCursorable, true);
                UnitSetState(lv_eggUnit, c_unitStateHighlightable, true);
            }

            auto19F45ACA_ai = auto19F45ACA_ai + 1;
        }
        UnitSetState(libSwaC_gv_zS_ArmyCustomEggRoomEvolutionMaster, c_unitStateHighlightable, true);
    }
}

string libSwaC_gf_ZS_EggRoomCamera () {
    // Automatic Variable Declarations
    // Implementation
    if ((libSwaC_gf_StoryArmyCategoryStateCheck("Baneling", c_armyCategoryStateUnlocked) == false) && (libSwaC_gf_StoryArmyCategoryStateCheck("Roach", c_armyCategoryStateUnlocked) == false)) {
        return "MainCamera Close";
    }
    else {
        if ((libSwaC_gf_StoryArmyCategoryStateCheck("Mutalisk", c_armyCategoryStateUnlocked) == false)) {
            return "MainCamera Mid";
        }
        else {
            return "MainCamera";
        }
    }
}

string libSwaC_gf_ZS_ArmyCustomEggZoomCamera (string lp_armyCategory) {
    // Automatic Variable Declarations
    string auto5CA0F01E_val;

    // Implementation
    auto5CA0F01E_val = lp_armyCategory;
    if (auto5CA0F01E_val == "Zergling") {
        return "Morph 00";
    }
    else if (auto5CA0F01E_val == "Roach") {
        return "Morph 01";
    }
    else if (auto5CA0F01E_val == "Hydralisk") {
        return "Morph 02";
    }
    else if (auto5CA0F01E_val == "Baneling") {
        return "Morph 03";
    }
    else if (auto5CA0F01E_val == "SwarmHost") {
        return "Morph 04";
    }
    else if (auto5CA0F01E_val == "Mutalisk") {
        return "Morph 05";
    }
    else if (auto5CA0F01E_val == "Ultralisk") {
        return "Morph 06";
    }
    else {
    }
    return "";
}

void libSwaC_gf_ZS_ArmyCustomEggPlayLight (string lp_lightType, string lp_armyCategory) {
    // Variable Declarations
    int lv_index;
    bool lv_found;
    string lv_indexCategory;

    // Automatic Variable Declarations
    int auto0F1FBD16_ae;
    int auto0F1FBD16_ai;

    // Variable Initialization

    // Implementation
    auto0F1FBD16_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto0F1FBD16_ai = 1;
    while (auto0F1FBD16_ai <= auto0F1FBD16_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto0F1FBD16_ai);
        if ((libSwaC_gf_ZS_StoryArmyCategoryUsedInUI(lv_indexCategory) == true)) {
            lv_index += 1;
            if ((lv_indexCategory == lp_armyCategory)) {
                lv_found = true;
                break;
            }

        }

        auto0F1FBD16_ai = auto0F1FBD16_ai + 1;
    }
    if ((lv_found == false)) {
        return ;
    }

    if ((libSwaC_gv_zS_ArmyCustomEggLightScenes[lv_index] == c_cutsceneNone)) {
        CutsceneCreateNew("Cutscenes\\StorymodeSet_EggRoom.SC2Cutscene", UnitGetPosition(libSwaC_gv_zS_ArmyCustomEggRoom), 0.0, PlayerGroupAll(), false);
        libSwaC_gv_zS_ArmyCustomEggLightScenes[lv_index] = CutsceneLastCreated();
    }

    if ((lp_lightType == "Inactive")) {
        CutsceneShow(libSwaC_gv_zS_ArmyCustomEggLightScenes[lv_index], false);
    }
    else if ((lp_lightType != libSwaC_gv_zS_ArmyCustomEggLightStates[lv_index])) {
        CutsceneShow(libSwaC_gv_zS_ArmyCustomEggLightScenes[lv_index], true);
        libSwaC_gv_zS_ArmyCustomEggLightStates[lv_index] = lp_lightType;
        CutsceneGoToBookmark(libSwaC_gv_zS_ArmyCustomEggLightScenes[lv_index], libSwaC_gf_ZS_ArmyCustomEggLightBookmark(lp_armyCategory, lp_lightType));
    }
    else if (true) {
        CutsceneShow(libSwaC_gv_zS_ArmyCustomEggLightScenes[lv_index], true);
    }
}

void libSwaC_gf_ZS_ArmyCustomEggSetPlayLight (bool lp_play) {
    // Automatic Variable Declarations
    // Implementation
    if ((libSwaC_gv_zS_ArmyCustomEggRoomSetLightScene == c_cutsceneNone)) {
        CutsceneCreateNew("Cutscenes\\StorymodeSet_EggRoom.SC2Cutscene", Point(50.0, 50.0), 0.0, PlayerGroupAll(), false);
        libSwaC_gv_zS_ArmyCustomEggRoomSetLightScene = CutsceneLastCreated();
        CutsceneGoToBookmark(libSwaC_gv_zS_ArmyCustomEggRoomSetLightScene, "World Light Start");
        CutscenePause(libSwaC_gv_zS_ArmyCustomEggRoomSetLightScene);
    }

    if ((lp_play == true)) {
        CutsceneShow(libSwaC_gv_zS_ArmyCustomEggRoomSetLightScene, true);
    }
    else {
        CutsceneShow(libSwaC_gv_zS_ArmyCustomEggRoomSetLightScene, false);
    }
}

void libSwaC_gf_ZS_ArmyCustomEggEvoPlayLight (bool lp_play) {
    // Automatic Variable Declarations
    // Implementation
    if ((libSwaC_gv_zS_ArmyCustomEggRoomEvoLightScene == c_cutsceneNone)) {
        CutsceneCreateNew("Cutscenes\\StorymodeSet_EggRoom.SC2Cutscene", Point(50.0, 50.0), 0.0, PlayerGroupAll(), false);
        libSwaC_gv_zS_ArmyCustomEggRoomEvoLightScene = CutsceneLastCreated();
        CutsceneGoToBookmark(libSwaC_gv_zS_ArmyCustomEggRoomEvoLightScene, "EggRoom - EvolutionMaster Start");
        CutscenePause(libSwaC_gv_zS_ArmyCustomEggRoomEvoLightScene);
    }

    if ((lp_play == true)) {
        CutsceneShow(libSwaC_gv_zS_ArmyCustomEggRoomEvoLightScene, true);
    }
    else {
        CutsceneShow(libSwaC_gv_zS_ArmyCustomEggRoomEvoLightScene, false);
    }
}

string libSwaC_gf_ZS_ArmyCustomEggLightBookmark (string lp_armyCategory, string lp_type) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_type == "Inactive")) {
        return (lp_type);
    }

    return ("EggRoom - " + libSwaC_gf_ZS_ArmyCategoryBookmarkToken(lp_armyCategory, false) + (lp_type) + " Start");
}

string libSwaC_gf_ZS_ArmyCategoryBookmarkToken (string lp_armyCategory, bool lp_categoryOnly) {
    // Variable Declarations
    string lv_armyUnit;

    // Automatic Variable Declarations
    string autoBE502317_val;
    string auto60E624E2_val;

    // Variable Initialization

    // Implementation
    lv_armyUnit = libSwaC_gf_ZS_StoryArmyCategoryPurchasedUnit(lp_armyCategory);
    if ((lp_categoryOnly == false)) {
        autoBE502317_val = lv_armyUnit;
        if (autoBE502317_val == "Raptor") {
            return "Raptor";
        }
        else if (autoBE502317_val == "SwarmHostSplitB") {
            return "Creeper";
        }
        else if (autoBE502317_val == "HydraliskImpaler") {
            return "Impaler";
        }
        else {
        }
    }

    auto60E624E2_val = lp_armyCategory;
    if (auto60E624E2_val == "Zergling") {
        return "Zergling";
    }
    else if (auto60E624E2_val == "Baneling") {
        return "Baneling";
    }
    else if (auto60E624E2_val == "Hydralisk") {
        return "Hydralisk";
    }
    else if (auto60E624E2_val == "Mutalisk") {
        return "Mutalisk";
    }
    else if (auto60E624E2_val == "Roach") {
        return "Roach";
    }
    else if (auto60E624E2_val == "SwarmHost") {
        return "EggMonster";
    }
    else if (auto60E624E2_val == "Ultralisk") {
        return "Ultralisk";
    }
    else {
    }
    TextExpressionSetToken("Param/Expression/lib_SwaC_71DAB395", "A", StringToText((lp_armyCategory)));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_SwaC_71DAB395"), false);
    return "Unknown";
}

void libSwaC_gf_StoryDisableEggRoomEvoMasterBirth () {
    // Automatic Variable Declarations
    // Implementation
    libSwaC_gv_zS_ArmyEvoPlayBirth = false;
}

void libSwaC_gf_ZS_ArmyCalloutShowHide (bool lp_showHide, string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    if ((libSwaC_gf_ZS_ArmyCalloutFlash(lp_armyCategory) != c_invalidDialogControlId)) {
        DialogControlSetVisible(libSwaC_gf_ZS_ArmyCalloutFlash(lp_armyCategory), PlayerGroupAll(), lp_showHide);
    }

}

void libSwaC_gf_ZS_ArmyCalloutCreate (string lp_armyCategory) {
    // Variable Declarations
    int lv_flash;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_flash = c_invalidDialogControlId;

    // Implementation
    lv_flash = libSwaC_gf_ZS_ArmyCalloutFlash(lp_armyCategory);
    if ((lv_flash == c_invalidDialogControlId)) {
        libSwaC_gf_StoryCreateCallout2(libSwaC_gv_zS_ArmyCustomEggCalloutAttachments, libSwaC_gf_ZS_ArmyCategoryCalloutAttachment(lp_armyCategory));
        lv_flash = DialogControlLastCreated();
        libNtve_gf_SaveDataTableValueDialogItem(true, (libSwaC_gv_zSC_ArmyCalloutFlashDataPrefix + (lp_armyCategory)), DialogControlLastCreated());
    }

    DialogControlSetVisible(lv_flash, PlayerGroupAll(), true);
}

void libSwaC_gf_ZS_ArmyCalloutUpdate (string lp_armyCategory) {
    // Variable Declarations
    string lv_purchasedUnit;
    int lv_flash;
    text lv_calloutTitle;
    text lv_calloutSubtitle;
    string lv_indexUpgrade;

    // Automatic Variable Declarations
    int auto7DE86C64_ae;
    int auto7DE86C64_ai;

    // Variable Initialization
    lv_flash = c_invalidDialogControlId;

    // Implementation
    libSwaC_gf_ZS_ArmyCalloutCreate(lp_armyCategory);
    if ((libSwaC_gf_ZS_ArmyCalloutFlash(lp_armyCategory) == c_invalidDialogControlId)) {
        return ;
    }

    lv_calloutTitle = libSwaC_gf_StoryArmyCategoryName(lp_armyCategory);
    lv_calloutSubtitle = StringExternal("Param/Value/lib_SwaC_3430C8C9");
    auto7DE86C64_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lp_armyCategory, "ArmyUpgradeArray", 1);
    auto7DE86C64_ai = 1;
    while (auto7DE86C64_ai <= auto7DE86C64_ae) {
        lv_indexUpgrade = CatalogFieldValueGet(c_gameCatalogArmyCategory, lp_armyCategory, "ArmyUpgradeArray["+IntToString(auto7DE86C64_ai-1)+"]", 1);
        if ((libSwaC_gf_ZS_StoryArmyUpgradeState(lv_indexUpgrade) == c_armyUpgradeStatePurchased)) {
            lv_calloutSubtitle = StringToText("");
            break;
        }

        auto7DE86C64_ai = auto7DE86C64_ai + 1;
    }
    libSwaC_gf_ZS_ArmyEggRoomCalloutSetText(libSwaC_gf_ZS_ArmyCalloutFlash(lp_armyCategory), lv_calloutTitle, lv_calloutSubtitle);
}

int libSwaC_gf_ZS_ArmyCalloutFlash (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return libNtve_gf_ValueFromDataTableDialogItem(true, (libSwaC_gv_zSC_ArmyCalloutFlashDataPrefix + (lp_armyCategory)));
}

string libSwaC_gf_ZS_ArmyCalloutAttach (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetImageAttachPoint("CalloutAttachment", libSwaC_gf_ZS_ArmyCategoryCalloutAttachment(lp_armyCategory), "Attachment", 1);
}

string libSwaC_gf_ZS_ArmyCategoryCalloutAttachment (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_armyCategory == "Zergling")) {
        if ((libSwaC_gf_ZS_StoryArmyCategoryPurchasedUnit(lp_armyCategory) == "Raptor")) {
            return "Egg Room - Raptor";
        }
        else if ((libSwaC_gf_ZS_StoryArmyCategoryPurchasedUnit(lp_armyCategory) == "Swarmling")) {
            return "Egg Room - Swarmling";
        }
    }

    return UserDataGetUserInstance("TechUnit", libSwaC_gf_ZS_TechUnitOfArmyCategory(lp_armyCategory), "CalloutAttachment", 1);
}

bool libSwaC_gf_ZS_ArmyCategoryShouldCallout (string lp_armyCategory) {
    // Variable Declarations
    string lv_indexUpgrade;

    // Automatic Variable Declarations
    int auto08E3CEC6_ae;
    int auto08E3CEC6_ai;

    // Variable Initialization

    // Implementation
    auto08E3CEC6_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lp_armyCategory, "ArmyUpgradeArray", 1);
    auto08E3CEC6_ai = 1;
    while (auto08E3CEC6_ai <= auto08E3CEC6_ae) {
        lv_indexUpgrade = CatalogFieldValueGet(c_gameCatalogArmyCategory, lp_armyCategory, "ArmyUpgradeArray["+IntToString(auto08E3CEC6_ai-1)+"]", 1);
        if ((libSwaC_gf_ZS_StoryArmyUpgradeState(lv_indexUpgrade) == c_armyUpgradeStatePurchased)) {
            return false;
        }

        auto08E3CEC6_ai = auto08E3CEC6_ai + 1;
    }
    return true;
}

void libSwaC_gf_StoryCreateCallout2 (unit lp_attachUnit, string lp_attachment) {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(400, 400, c_anchorCenter, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    if ((UserDataGetImageEdge("CalloutAttachment", lp_attachment, "Attachment", 1) == c_textTagEdgeLeft)) {
        DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "HotS_Callouts/UnitCalloutArmyFrameLeftTemplate");
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, 0, 0);
        DialogSetPositionRelativeToUnit(DialogLastCreated(), lp_attachUnit, UserDataGetImageAttachPoint("CalloutAttachment", lp_attachment, "Attachment", 1), 0, (0 - (DialogGetHeight(DialogLastCreated()) / 2)));
    }
    else {
        DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "HotS_Callouts/UnitCalloutArmyFrameRightTemplate");
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorRight, 0, 0);
        DialogSetPositionRelativeToUnit(DialogLastCreated(), lp_attachUnit, UserDataGetImageAttachPoint("CalloutAttachment", lp_attachment, "Attachment", 1), (0 - DialogGetWidth(DialogLastCreated())), (0 - (DialogGetHeight(DialogLastCreated()) / 2)));
    }
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
}

void libSwaC_gf_ZS_ArmyEggRoomCalloutSetText (int lp_callout, text lp_title, text lp_subtitle) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlHookup(lp_callout, c_triggerControlTypeLabel, "NameLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lp_title, PlayerGroupAll());
    DialogControlDestroy(DialogControlLastCreated());
    DialogControlHookup(lp_callout, c_triggerControlTypeLabel, "SubNameLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lp_subtitle, PlayerGroupAll());
    DialogControlDestroy(DialogControlLastCreated());
}

void libSwaC_gf_ZS_ArmyCustomUpgradeUIEnter () {
    // Variable Declarations
    string lv_techUnit;
    fixed lv_scale;
    int lv_index;
    string lv_indexUpgrade;
    string lv_indexCategory;
    unit lv_eggUnit;

    // Automatic Variable Declarations
    const int auto690ABEA4_ae = 3;
    const int auto690ABEA4_ai = 1;
    int auto3A414717_ae;
    int auto3A414717_ai;

    // Variable Initialization

    // Implementation
    if ((libSwaC_gv_zS_ArmyCustomUpgradeRoomOpened == true)) {
        return ;
    }

    libSwaC_gv_zS_ArmyCustomUpgradeRoomOpened = true;
    libSwaC_gv_zS_ArmyCustomCurrentUI = libSwaC_ge_ArmyUIScreen_Upgrade;
    libSwaC_gf_DispatchStoryEvent(libSwaC_ge_ZS_Event_ArmyEnteredSubUI, "", "", false);
    libSwaC_gf_ZS_ArmyCustomEggUILeave();
    libSwaC_gf_ZS_ArmyCustomEvolutionUILeave();
    libSwaC_gf_ZS_ArmyCustomMissionUILeave();
    libSwaC_gf_ZS_ArmyCustomUpgradeUIHide();
    if ((libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindMission) == false)) {
        GameSetLighting("SMX1EggRoomSet", 0.0);
    }

    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 35.0, 0.0);
    if ((libSwaC_gv_zS_ArmyCustomUpgradeDialog == c_invalidDialogId)) {
        DialogCreate(1920, 1200, c_anchorCenter, 0, 0, true);
        libSwaC_gv_zS_ArmyCustomUpgradeDialog = DialogLastCreated();
        DialogSetImageVisible(DialogLastCreated(), false);
        DialogSetFullscreen(DialogLastCreated(), true);
        DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "ArmyCustomization/UnitPanelTemplate");
        libSwaC_gv_zS_ArmyCustomUpgradePanel = DialogControlLastCreated();
        DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
        DialogControlHookup(libSwaC_gv_zS_ArmyCustomUpgradePanel, c_triggerControlTypePanel, "SelectedUpgradeInfoBackgroundFrame");
        libSwaC_gv_zS_ArmyCustomUpgradeInfoFrame = DialogControlLastCreated();
        DialogControlHookup(libSwaC_gv_zS_ArmyCustomUpgradePanel, c_triggerControlTypeButton, "BackButton");
        libSwaC_gv_zS_ArmyCustomUpgradeBackButton = DialogControlLastCreated();
        DialogControlHookup(libSwaC_gv_zS_ArmyCustomUpgradePanel, c_triggerControlTypePanel, "ScreenTitleFrame");
        libSwaC_gv_zS_ArmyCustomUpgradeTitlePanel = DialogControlLastCreated();
        DialogControlHookup(libSwaC_gv_zS_ArmyCustomUpgradeTitlePanel, c_triggerControlTypeLabel, "ScreenTitleLabel");
        libSwaC_gv_zS_ArmyCustomUpgradeTitleLabel = DialogControlLastCreated();
        DialogControlHookup(libSwaC_gv_zS_ArmyCustomUpgradePanel, c_triggerControlTypeImage, "UnitNameTooltipImage");
        libSwaC_gv_zS_ArmyCustomUpgradeUnitStrainInfoIcon = DialogControlLastCreated();
        DialogControlHookup(libSwaC_gv_zS_ArmyCustomUpgradeInfoFrame, c_triggerControlTypeLabel, "SelectedNameLabel");
        libSwaC_gv_zS_ArmyCustomSelectedUpgradeNameLabel = DialogControlLastCreated();
        DialogControlHookup(libSwaC_gv_zS_ArmyCustomUpgradeInfoFrame, c_triggerControlTypeLabel, "SelectedDescriptionLabel");
        libSwaC_gv_zS_ArmyCustomSelectedUpgradeDescriptionLabel = DialogControlLastCreated();
        DialogControlHookup(libSwaC_gv_zS_ArmyCustomUpgradeInfoFrame, c_triggerControlTypeMovie, "SelectedMovieFrame");
        libSwaC_gv_zS_ArmyCustomSelectedUpgradeMovie = DialogControlLastCreated();
        DialogControlHookup(libSwaC_gv_zS_ArmyCustomUpgradePanel, c_triggerControlTypeLabel, "UnitNameLabel");
        libSwaC_gv_zS_ArmyCustomUpgradeUnitNameLabel = DialogControlLastCreated();
        DialogControlHookup(libSwaC_gv_zS_ArmyCustomUpgradePanel, c_triggerControlTypeFlash, "UpgradeArrow");
        libSwaC_gv_zS_ArmyCustomUpgradeTitlePanel3 = DialogControlLastCreated();
        DialogControlHookup(libSwaC_gv_zS_ArmyCustomUpgradePanel, c_triggerControlTypeLabel, "SelectUpgrade");
        libSwaC_gv_zS_ArmyCustomUpgradeSelectUpgradeLabel = DialogControlLastCreated();
        DialogControlHookup(libSwaC_gv_zS_ArmyCustomUpgradeInfoFrame, c_triggerControlTypeLabel, "SelectedDescriptionResultsLabel");
        libSwaC_gv_zS_ArmyCustomUpgradeSelectedDescriptionResultsLabel = DialogControlLastCreated();
        DialogControlHookup(libSwaC_gv_zS_ArmyCustomUpgradeInfoFrame, c_triggerControlTypeLabel, "SelectedDescriptionResultsTitleLabel");
        libSwaC_gv_zS_ArmyCustomUpgradeSelectedDescriptionResultsTitleLabel = DialogControlLastCreated();
        libNtve_gf_SetDialogItemText(libSwaC_gv_zS_ArmyCustomUpgradeSelectUpgradeLabel, TextExpressionAssemble("Param/Expression/lib_SwaC_CD13C27D"), PlayerGroupAll());
        lv_index = 1;
        lv_index = 1;
        for ( ; ( (auto690ABEA4_ai >= 0 && lv_index <= auto690ABEA4_ae) || (auto690ABEA4_ai < 0 && lv_index >= auto690ABEA4_ae) ) ; lv_index += auto690ABEA4_ai ) {
            DialogControlHookup(libSwaC_gv_zS_ArmyCustomUpgradePanel, c_triggerControlTypeImage, "UpgradeFrame" + IntToString(lv_index) + "/IconImage");
            libSwaC_gv_zS_ArmyCustomUpgradeIcons[lv_index] = DialogControlLastCreated();
            DialogControlHookup(libSwaC_gv_zS_ArmyCustomUpgradePanel, c_triggerControlTypeButton, "UpgradeFrame" + IntToString(lv_index) + "/Button");
            libSwaC_gv_zS_ArmyCustomUpgradeButtons[lv_index] = DialogControlLastCreated();
            DialogControlHookup(libSwaC_gv_zS_ArmyCustomUpgradePanel, c_triggerControlTypeLabel, "UpgradeFrame" + IntToString(lv_index) + "/NameLabel");
            libSwaC_gv_zS_ArmyCustomUpgradeNameLabels[lv_index] = DialogControlLastCreated();
            DialogControlHookup(libSwaC_gv_zS_ArmyCustomUpgradePanel, c_triggerControlTypePortrait, "UpgradeFramePortrait" + IntToString(lv_index));
            libSwaC_gv_zS_ArmyCustomUpgradeButtons2[lv_index] = DialogControlLastCreated();
            libNtve_gf_SetDialogItemModel(DialogControlLastCreated(), "SMX1_ArmyMutationConfirmationButtonEffect", PlayerGroupAll());
            PortraitSetActor(PortraitGetTriggerControl(DialogControlLastCreated()), "PortraitActorWithDeath");
            ActorSend(ActorFromPortrait(PortraitGetTriggerControl(DialogControlLastCreated())), "SetVisibility");
        }
    }

    libSwaC_gf_ZS_ArmyCustomUpgradeUIUpdate();
    lv_index = 0;
    auto3A414717_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, libSwaC_gv_zS_ArmyCustomCategoryCurrent, "ArmyUpgradeArray", 1);
    auto3A414717_ai = 1;
    while (auto3A414717_ai <= auto3A414717_ae) {
        lv_indexUpgrade = CatalogFieldValueGet(c_gameCatalogArmyCategory, libSwaC_gv_zS_ArmyCustomCategoryCurrent, "ArmyUpgradeArray["+IntToString(auto3A414717_ai-1)+"]", 1);
        lv_index += 1;
        if ((libSwaC_gv_zS_ArmyCustomUpgradeCurrent == lv_indexUpgrade)) {
            DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomUpgradeButtons2[lv_index], PlayerGroupAll(), true);
            ActorSend(ActorFromPortrait(PortraitGetTriggerControl(libSwaC_gv_zS_ArmyCustomUpgradeButtons2[lv_index])), "Signal Birth");
        }
        else {
            DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomUpgradeButtons2[lv_index], PlayerGroupAll(), false);
            ActorSend(ActorFromPortrait(PortraitGetTriggerControl(libSwaC_gv_zS_ArmyCustomUpgradeButtons2[lv_index])), "Signal Death");
        }
        auto3A414717_ai = auto3A414717_ai + 1;
    }
    if ((libSwaC_gv_zS_ArmyCustomUpgradeDialog != c_invalidDialogId) && (DialogIsVisible(libSwaC_gv_zS_ArmyCustomUpgradeDialog, 1) == false)) {
        DialogSetVisible(libSwaC_gv_zS_ArmyCustomUpgradeDialog, PlayerGroupAll(), true);
    }

    CameraUseModel(1, libSwaC_gv_zS_ArmyCustomEggRoom, libSwaC_gf_ZS_ArmyCustomCategoryEggCamera(libSwaC_gv_zS_ArmyCustomCategoryCurrent), 0.0);
    if ((UserDataGetInt("StoryStates", "Unit Upgrade UI Visited", "value", 1) == 0)) {
        UserDataSetInt("StoryStates", "Unit Upgrade UI Visited", "value", 1, 1);
        ConversationDataStop();
        ConversationDataRun("zSMAmbient_UnitUpgrade", PlayerGroupAll(), c_conversationSkipNone, false);
    }

    if ((libSwaC_gv_zS_ArmyCustomUpgradeSpamClickCount != -1)) {
        libSwaC_gv_zS_ArmyCustomUpgradeSpamClickCount = 0;
    }

    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, false);
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomUpgradeRoomBackButtonClicked, true);
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomUpgradeRoomUpgradeButtonClicked, true);
}

void libSwaC_gf_ZS_ArmyCustomUpgradeUILeave () {
    // Variable Declarations
    unit lv_eggUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libSwaC_gv_zS_ArmyCustomUpgradeRoomOpened == false)) {
        return ;
    }

    libSwaC_gv_zS_ArmyCustomUpgradeRoomOpened = false;
    libNtve_gf_SetDialogItemMovie(libSwaC_gv_zS_ArmyCustomSelectedUpgradeMovie, "", PlayerGroupAll());
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 100.0, 0.0);
    ConversationDataStop();
    libSwaC_gf_ZS_ArmyCustomUpgradeUIHide();
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomUpgradeRoomBackButtonClicked, false);
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomUpgradeRoomUpgradeButtonClicked, false);
}

void libSwaC_gf_ZS_ArmyCustomUpgradeUIHide () {
    // Automatic Variable Declarations
    // Implementation
    if ((libSwaC_gv_zS_ArmyCustomUpgradeDialog != c_invalidDialogId) && (DialogIsVisible(libSwaC_gv_zS_ArmyCustomUpgradeDialog, 1) == true)) {
        DialogSetVisible(libSwaC_gv_zS_ArmyCustomUpgradeDialog, PlayerGroupAll(), false);
    }

    if ((libSwaC_gv_zS_ArmyCustomUpgradeUnitModel != null)) {
        ActorSend(libSwaC_gv_zS_ArmyCustomUpgradeUnitModel, "Destroy Immediate");
        libSwaC_gv_zS_ArmyCustomUpgradeUnitModel = null;
    }

}

void libSwaC_gf_ZS_ArmyCustomUpgradeUIUpdate () {
    // Variable Declarations
    string lv_purchasedUnit;
    string lv_indexCategory;
    string lv_indexUpgrade;
    int lv_index;
    int lv_catEnabledCount;
    bool lv_upgradeAvailable;
    int lv_nextAvailable;

    // Automatic Variable Declarations
    int auto2E46EE4A_ae;
    int auto2E46EE4A_ai;

    // Variable Initialization

    // Implementation
    libNtve_gf_SetDialogItemText(libSwaC_gv_zS_ArmyCustomUpgradeTitleLabel, StringExternal(CatalogFieldValueGet(c_gameCatalogArmyCategory, (libSwaC_gv_zS_ArmyCustomCategoryCurrent), "Title", 1)), PlayerGroupAll());
    lv_purchasedUnit = libSwaC_gf_ZS_StoryArmyCategoryPurchasedUnit(libSwaC_gv_zS_ArmyCustomCategoryCurrent);
    if ((lv_purchasedUnit == null)) {
        DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomUpgradeUnitNameLabel, PlayerGroupAll(), false);
        DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomUpgradeUnitStrainInfoIcon, PlayerGroupAll(), false);
    }
    else {
        DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomUpgradeUnitNameLabel, PlayerGroupAll(), true);
        libNtve_gf_SetDialogItemText(libSwaC_gv_zS_ArmyCustomUpgradeUnitNameLabel, libSwaC_gf_StoryArmyUnitName(lv_purchasedUnit), PlayerGroupAll());
        DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomUpgradeUnitStrainInfoIcon, PlayerGroupAll(), true);
        libNtve_gf_SetDialogItemTooltip(libSwaC_gv_zS_ArmyCustomUpgradeUnitStrainInfoIcon, libSwaC_gf_ZS_ArmyUnitTooltip2(lv_purchasedUnit), PlayerGroupAll());
        libNtve_gf_SetDialogItemTooltip(libSwaC_gv_zS_ArmyCustomUpgradeUnitNameLabel, libSwaC_gf_ZS_ArmyUnitTooltip2(lv_purchasedUnit), PlayerGroupAll());
    }
    libSwaC_gv_zS_ArmyCustomUpgradeCurrent = null;
    auto2E46EE4A_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, libSwaC_gv_zS_ArmyCustomCategoryCurrent, "ArmyUpgradeArray", 1);
    auto2E46EE4A_ai = 1;
    while (auto2E46EE4A_ai <= auto2E46EE4A_ae) {
        lv_indexUpgrade = CatalogFieldValueGet(c_gameCatalogArmyCategory, libSwaC_gv_zS_ArmyCustomCategoryCurrent, "ArmyUpgradeArray["+IntToString(auto2E46EE4A_ai-1)+"]", 1);
        if ((libSwaC_gf_ZS_StoryArmyUpgradeState(lv_indexUpgrade) == c_armyUpgradeStatePurchased)) {
            libSwaC_gv_zS_ArmyCustomUpgradeCurrent = lv_indexUpgrade;
            break;
        }

        auto2E46EE4A_ai = auto2E46EE4A_ai + 1;
    }
    libSwaC_gf_ZS_ArmyCustomUpgradeUIUpdateButtons();
    libSwaC_gf_ZS_ArmyCustomUpgradeSelect(libSwaC_gv_zS_ArmyCustomUpgradeCurrent);
    libSwaC_gf_ZS_ArmyCustomUpgradeUIUpdateCurrentUpgradeInfo();
    libSwaC_gf_ZS_ArmyCustomEggPlayLight("", libSwaC_gv_zS_ArmyCustomCategoryCurrent);
}

void libSwaC_gf_ZS_ArmyCustomUpgradeUIUpdateCurrentUpgradeInfo () {
    // Automatic Variable Declarations
    // Implementation
    if ((libSwaC_gv_zS_ArmyCustomUpgradeCurrent == null)) {
        DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomUpgradeInfoFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomUpgradeTitlePanel3, PlayerGroupAll(), true);
        DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomUpgradeSelectUpgradeLabel, PlayerGroupAll(), true);
    }
    else {
        DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomUpgradeInfoFrame, PlayerGroupAll(), true);
        DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomUpgradeTitlePanel3, PlayerGroupAll(), false);
        DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomUpgradeSelectUpgradeLabel, PlayerGroupAll(), false);
        libNtve_gf_SetDialogItemMovie(libSwaC_gv_zS_ArmyCustomSelectedUpgradeMovie, libSwaC_gf_ZS_StoryArmyUpgradeMovie(libSwaC_gv_zS_ArmyCustomUpgradeCurrent), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libSwaC_gv_zS_ArmyCustomSelectedUpgradeNameLabel, TextCase(libSwaC_gf_ZS_StoryArmyUpgradeName(libSwaC_gv_zS_ArmyCustomUpgradeCurrent), true), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libSwaC_gv_zS_ArmyCustomSelectedUpgradeDescriptionLabel, libSwaC_gf_ZS_StoryArmyUpgradeDescription(libSwaC_gv_zS_ArmyCustomUpgradeCurrent), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libSwaC_gv_zS_ArmyCustomUpgradeSelectedDescriptionResultsLabel, libSwaC_gf_ZS_StoryArmyUpgradeResults(libSwaC_gv_zS_ArmyCustomUpgradeCurrent), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libSwaC_gv_zS_ArmyCustomUpgradeSelectedDescriptionResultsTitleLabel, libSwaC_gf_ZS_StoryArmyUpgradeResultsTitle(libSwaC_gv_zS_ArmyCustomUpgradeCurrent), PlayerGroupAll());
        DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomSelectedUpgradeNameLabel, PlayerGroupAll(), true);
        DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomSelectedUpgradeDescriptionLabel, PlayerGroupAll(), true);
        DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomUpgradeSelectedDescriptionResultsLabel, PlayerGroupAll(), true);
        DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomUpgradeSelectedDescriptionResultsTitleLabel, PlayerGroupAll(), true);
    }
}

void libSwaC_gf_ZS_ArmyCustomUpgradeUIUpdateButtons () {
    // Variable Declarations
    string lv_indexUpgrade;

    // Automatic Variable Declarations
    int autoE842ED3E_ae;
    int autoE842ED3E_ai;

    // Variable Initialization

    // Implementation
    autoE842ED3E_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, libSwaC_gv_zS_ArmyCustomCategoryCurrent, "ArmyUpgradeArray", 1);
    autoE842ED3E_ai = 1;
    while (autoE842ED3E_ai <= autoE842ED3E_ae) {
        lv_indexUpgrade = CatalogFieldValueGet(c_gameCatalogArmyCategory, libSwaC_gv_zS_ArmyCustomCategoryCurrent, "ArmyUpgradeArray["+IntToString(autoE842ED3E_ai-1)+"]", 1);
        libSwaC_gf_ZS_ArmyCustomUpgradeUIUpdateButtonsSingle(lv_indexUpgrade);
        autoE842ED3E_ai = autoE842ED3E_ai + 1;
    }
}

void libSwaC_gf_ZS_ArmyCustomUpgradeUIUpdateButtonsSingle (string lp_upgrade) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto5A63B3CA_val;

    // Variable Initialization

    // Implementation
    lv_index = libSwaC_gf_ZS_ArmyCustomUpgradeUIIndex(lp_upgrade);
    if ((lv_index == 0)) {
        return ;
    }

    libNtve_gf_SetDialogItemText(libSwaC_gv_zS_ArmyCustomUpgradeNameLabels[lv_index], libSwaC_gf_ZS_StoryArmyUpgradeName(lp_upgrade), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(libSwaC_gv_zS_ArmyCustomUpgradeIcons[lv_index], libSwaC_gf_ZS_StoryArmyUpgradeIcon(lp_upgrade), PlayerGroupAll());
    auto5A63B3CA_val = libSwaC_gf_ZS_StoryArmyUpgradeState(lp_upgrade);
    if (auto5A63B3CA_val == c_armyUpgradeStatePurchased) {
        libNtve_gf_SetDialogItemImage(libSwaC_gv_zS_ArmyCustomUpgradeButtons[lv_index], "@UI/ArmyCustomizationUpgradeButtonPurchasedNormal", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage2(libSwaC_gv_zS_ArmyCustomUpgradeButtons[lv_index], "@UI/ArmyCustomizationUpgradeButtonPurchasedHover", PlayerGroupAll());
        libNtve_gf_SetDialogItemStyle(libSwaC_gv_zS_ArmyCustomUpgradeNameLabels[lv_index], "ArmyCustomizationSelectedUnitName", PlayerGroupAll());
    }
    else if (auto5A63B3CA_val == c_armyUpgradeStateUnlocked) {
        libNtve_gf_SetDialogItemImage(libSwaC_gv_zS_ArmyCustomUpgradeButtons[lv_index], "@UI/ArmyCustomizationUpgradeButtonNormal", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage2(libSwaC_gv_zS_ArmyCustomUpgradeButtons[lv_index], "@UI/ArmyCustomizationUpgradeButtonHover", PlayerGroupAll());
        libNtve_gf_SetDialogItemStyle(libSwaC_gv_zS_ArmyCustomUpgradeNameLabels[lv_index], "ArmyCustomizationUpgradeName", PlayerGroupAll());
    }
    else {
    }
    if ((lp_upgrade == libSwaC_gv_zS_ArmyCustomUpgradeCurrent)) {
        libNtve_gf_SetDialogItemToggled(libSwaC_gv_zS_ArmyCustomUpgradeButtons[lv_index], true, PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemToggled(libSwaC_gv_zS_ArmyCustomUpgradeButtons[lv_index], false, PlayerGroupAll());
    }
}

int libSwaC_gf_ZS_ArmyCustomUpgradeUIIndex (string lp_upgrade) {
    // Variable Declarations
    int lv_index;
    string lv_indexUpgrade;

    // Automatic Variable Declarations
    int auto0C1E7A0A_ae;
    int auto0C1E7A0A_ai;

    // Variable Initialization

    // Implementation
    lv_index = 0;
    auto0C1E7A0A_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, libSwaC_gv_zS_ArmyCustomCategoryCurrent, "ArmyUpgradeArray", 1);
    auto0C1E7A0A_ai = 1;
    while (auto0C1E7A0A_ai <= auto0C1E7A0A_ae) {
        lv_indexUpgrade = CatalogFieldValueGet(c_gameCatalogArmyCategory, libSwaC_gv_zS_ArmyCustomCategoryCurrent, "ArmyUpgradeArray["+IntToString(auto0C1E7A0A_ai-1)+"]", 1);
        lv_index += 1;
        if ((lv_indexUpgrade == lp_upgrade)) {
            return lv_index;
        }

        auto0C1E7A0A_ai = auto0C1E7A0A_ai + 1;
    }
    return 0;
}

void libSwaC_gf_ZS_ArmyCustomUpgradeSelect (string lp_upgrade) {
    // Variable Declarations
    int lv_index;
    string lv_indexUpgrade;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libSwaC_gv_zS_ArmyCustomCategoryCurrent == null)) {
        return ;
    }

    if ((lp_upgrade != null)) {
        AchievementTermQuantitySet(1, UserDataGetGameLink("TechUnit", libSwaC_gf_ZS_TechUnitOfArmyCategory(libSwaC_gv_zS_ArmyCustomCategoryCurrent), "AchievementTermUpgrade", 1), 1);
    }

    libSwaC_gv_zS_ArmyCustomUpgradeCurrent = lp_upgrade;
    libSwaC_gf_ZS_SetArmyUpgradeState(lp_upgrade, c_armyUpgradeStatePurchased);
    libSwaC_gf_ZS_ArmyCustomUpgradeUIUpdateCurrentUpgradeInfo();
    libSwaC_gf_ZS_ArmyCustomUpgradeUIUpdateButtons();
}

text libSwaC_gf_ZS_ArmyUnitTooltip2 (string lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("TechUnit", libSwaC_gf_ZS_TechUnitOfArmyUnit(lp_armyUnit), "UIMissionTooltip", 1);
}

void libSwaC_gf_ZS_ArmyCustomEvolutionUIEnter (string lp_splitCategory) {
    // Variable Declarations
    string lv_armyUnit;
    string lv_techUnit;
    string lv_unitType;
    string lv_model;
    string lv_modelActor;
    point lv_offset;
    point lv_offset2;
    fixed lv_scale;
    string lv_camera;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((libSwaC_gv_zS_ArmyCustomEvolutionRoomOpened == true) || (lp_splitCategory == null))) {
        return ;
    }

    libSwaC_gv_zS_ArmyCustomEvolutionRawrPlayed = false;
    if ((libSwaC_gv_zS_ArmyCustomCurrentUI != libSwaC_ge_ArmyUIScreen_None)) {
        libSwaC_gf_ZS_ArmyCustomEggUILeave();
        libSwaC_gf_ZS_ArmyCustomMissionUILeave();
        libSwaC_gf_ZS_ArmyCustomUpgradeUILeave();
    }
    else {
        libNtve_gf_StoryMode(PlayerGroupAll(), true);
    }
    libSwaC_gv_zS_ArmyCustomEvolutionCategory = lp_splitCategory;
    libSwaC_gv_zS_ArmyCustomUnitCurrent = null;
    libSwaC_gf_ZS_ArmyCustomEvolutionUICreate();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_SplitUI);
    FogSetDisableAtUltra(true);
    FogSetEnabled(true);
    FogSetColor(Color(9.80, 14.90, 9.80));
    FogSetFallOff(0.1);
    FogSetDensity(0.03);
    FogSetStartHeight(0.0);
    EnvironmentShow(c_environmentAll, false);
    SoundSetReverb("Reverb_EggRoom", 1.0, true, true);
    libSwaC_gv_zS_ArmyCustomEvolutionRoomOpened = true;
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, false);
    ConversationDataRun("zEvoChoice", PlayerGroupAll(), c_conversationSkipNone, false);
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomEvolutionEvolveButtonClicked, true);
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomEvolutionUnitClicked, true);
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomEvolutionUnitHighlight, true);
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomEvolutionUnitUnhighlight, true);
    TriggerExecute(libSwaC_gt_ZS_ArmyCustomEvolutionUIRunning, true, true);
}

void libSwaC_gf_ZS_ArmyCustomEvolutionUICreate () {
    // Variable Declarations
    string lv_armyUnit;
    string lv_techUnit;
    string lv_unitType;
    string lv_model;
    string lv_modelActor;
    point lv_offset;
    point lv_offset2;
    fixed lv_scale;
    string lv_camera;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libSwaC_gf_ZS_ArmyCustomEvolutionUIHide();
    UISetWorldVisible(PlayerGroupAll(), true);
    RegionPlayableMapSet(RegionEntireMap());
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeObjectivePanel, false);
    CinematicFade(true, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    GameSetLighting("SMX1EggRoomSet", 0.0);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, true, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Leviathan_EggRoom", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 35.0, 0.0);
    if ((libSwaC_gv_zS_ArmyCustomEvolutionDialog == c_invalidDialogId)) {
        DialogCreate(1920, 1200, c_anchorCenter, 0, 0, true);
        libSwaC_gv_zS_ArmyCustomEvolutionDialog = DialogLastCreated();
        DialogSetImageVisible(DialogLastCreated(), false);
        DialogSetFullscreen(DialogLastCreated(), true);
        DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "ArmyCustomization/CategoryPanelTemplate");
        libSwaC_gv_zS_ArmyCustomEvolutionPanel = DialogControlLastCreated();
        DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
        DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypePanel, "SelectedUnitInfoFrame");
        libSwaC_gv_zS_ArmyCustomEvolutionInfoFrame = DialogControlLastCreated();
        DialogControlHookup(libSwaC_gv_zS_ArmyCustomEvolutionPanel, c_triggerControlTypeButton, "AcceptButton1");
        libSwaC_gv_zS_ArmyCustomEvolutionAcceptButton1 = DialogControlLastCreated();
        DialogControlHookup(libSwaC_gv_zS_ArmyCustomEvolutionPanel, c_triggerControlTypeButton, "AcceptButton2");
        libSwaC_gv_zS_ArmyCustomEvolutionAcceptButton2 = DialogControlLastCreated();
        DialogControlHookup(libSwaC_gv_zS_ArmyCustomEvolutionPanel, c_triggerControlTypePanel, "ScreenTitleFrame");
        libSwaC_gv_zS_ArmyCustomEvolutionTitleLabel6 = DialogControlLastCreated();
        DialogControlHookup(libSwaC_gv_zS_ArmyCustomEvolutionTitleLabel6, c_triggerControlTypeLabel, "PromptLabel");
        libSwaC_gv_zS_ArmyCustomEvolutionTitleLabel5 = DialogControlLastCreated();
        DialogControlHookup(libSwaC_gv_zS_ArmyCustomEvolutionPanel, c_triggerControlTypeLabel, "UpgradeUnitLabel");
        libSwaC_gv_zS_ArmyCustomEvolutionTitleLabel2 = DialogControlLastCreated();
        DialogControlHookup(libSwaC_gv_zS_ArmyCustomEvolutionPanel, c_triggerControlTypeFlash, "UpgradeArrowLeft");
        libSwaC_gv_zS_ArmyCustomEvolutionTitleLabel4 = DialogControlLastCreated();
        DialogControlHookup(libSwaC_gv_zS_ArmyCustomEvolutionPanel, c_triggerControlTypeFlash, "UpgradeArrowRight");
        libSwaC_gv_zS_ArmyCustomEvolutionTitleLabel3 = DialogControlLastCreated();
        DialogControlHookup(libSwaC_gv_zS_ArmyCustomEvolutionInfoFrame, c_triggerControlTypeMovie, "SelectedMovieFrame");
        libSwaC_gv_zS_ArmyCustomEvolutionSelectedUnitMovie = DialogControlLastCreated();
        DialogControlHookup(libSwaC_gv_zS_ArmyCustomEvolutionInfoFrame, c_triggerControlTypeLabel, "SelectedNameLabel");
        libSwaC_gv_zS_ArmyCustomEvolutionSelectedUnitNameLabel = DialogControlLastCreated();
        DialogControlHookup(libSwaC_gv_zS_ArmyCustomEvolutionInfoFrame, c_triggerControlTypeLabel, "SelectedDescriptionLabel");
        libSwaC_gv_zS_ArmyCustomEvolutionSelectedUnitDescriptionLabel = DialogControlLastCreated();
        DialogControlHookup(libSwaC_gv_zS_ArmyCustomEvolutionInfoFrame, c_triggerControlTypeLabel, "SelectedDescriptionResultsLabel");
        libSwaC_gv_zS_ArmyCustomEvolutionSelectedUnitDescriptionResultsLabel = DialogControlLastCreated();
        DialogControlHookup(libSwaC_gv_zS_ArmyCustomEvolutionInfoFrame, c_triggerControlTypeLabel, "SelectedDescriptionResultsTitleLabel");
        libSwaC_gv_zS_ArmyCustomEvolutionSelectedUnitDescriptionResultsTitleLabel = DialogControlLastCreated();
    }

    libSwaC_gf_ZS_ArmyCustomEvolutionUIUpdate();
    if ((libSwaC_gv_zS_ArmyCustomEvolutionDialog != c_invalidDialogId) && (DialogIsVisible(libSwaC_gv_zS_ArmyCustomEvolutionDialog, 1) == false)) {
        DialogSetVisible(libSwaC_gv_zS_ArmyCustomEvolutionDialog, PlayerGroupAll(), true);
    }

    if ((libSwaC_gv_zS_ArmyCustomEvolutionSet == null)) {
        UnitCreate(1, "SMX1ArmyEvolutionSet", c_unitCreateIgnorePlacement, 0, libSwaC_gv_center, 270.0);
        libSwaC_gv_zS_ArmyCustomEvolutionSet = UnitLastCreated();
        UnitSetHeight(libSwaC_gv_zS_ArmyCustomEvolutionSet, libSwaC_gv_zSC_ARMYEVOLUTIONSETHEIGHT, 0.0);
    }
    else {
        if ((libNtve_gf_UnitIsHidden(libSwaC_gv_zS_ArmyCustomEvolutionSet) == true)) {
            libSwaC_gf_ZS_ShowHideStoryUnit(true, libSwaC_gv_zS_ArmyCustomEvolutionSet);
        }

    }
    libNtve_gf_ShareVisionofUnit(libSwaC_gv_zS_ArmyCustomEvolutionSet, true, 1);
    VisRevealArea(1, RegionCircle(UnitGetPosition(libSwaC_gv_zS_ArmyCustomEvolutionSet), 32.0), 0.0, false);
    lv_camera = libSwaC_gf_ZS_ArmyCustomEvolutionUICamera(libSwaC_gv_zS_ArmyCustomEvolutionCategory);
    CameraUseModel(1, libSwaC_gv_zS_ArmyCustomEvolutionSet, lv_camera, 0.0);
    if ((libSwaC_gv_zS_ArmyCustomEvolutionUnitA == null)) {
        lv_armyUnit = libSwaC_gf_StoryArmyUnitInCategory(libSwaC_gv_zS_ArmyCustomEvolutionCategory, 1);
        lv_techUnit = libSwaC_gf_ZS_TechUnitOfArmyUnit(lv_armyUnit);
        lv_unitType = UserDataGetUnit("TechUnit", lv_techUnit, "UIUnitType", 1);
        lv_offset = libSwaC_gf_ZS_ArmyCustomEvolutionUIUnitAttachment(lv_armyUnit);
        UnitCreate(1, lv_unitType, c_unitCreateIgnorePlacement, 0, lv_offset, PointGetFacing(lv_offset));
        libSwaC_gv_zS_ArmyCustomEvolutionUnitA = UnitLastCreated();
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropHeight, PointGetHeight(lv_offset));
        UnitSetState(UnitLastCreated(), c_unitStateCursorable, true);
        UnitSetState(UnitLastCreated(), c_unitStateHighlightable, true);
        UnitSetCursor(UnitLastCreated(), "InteractiveLook");
        libSwaC_gf_ZS_ArmyCustomEvolutionApplyRotation(libSwaC_gv_zS_ArmyCustomEvolutionUnitA, lv_armyUnit);
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "AnimBlendTimeApply 0.000000");
        libNtve_gf_SendActorMessageToUnit(libSwaC_gv_zS_ArmyCustomEvolutionUnitA, "AnimPlay Default {} 0 0.000000 -1.000000 -1.000000 AsAutomatic 1.000000");
        libNtve_gf_TurnAnimationPropertiesOn(libNtve_gf_MainActorofUnit(UnitLastCreated()), "Unpowered");
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "AnimBlendTimeApply");
        ActorSend(ActorFromScope(ActorScopeFromUnit(libSwaC_gv_zS_ArmyCustomEvolutionUnitA), "::Scene"), "SceneStrobeSetFalloff 2.000000");
    }
    else {
        if ((libNtve_gf_UnitIsHidden(libSwaC_gv_zS_ArmyCustomEvolutionUnitA) == true)) {
            libNtve_gf_ShowHideUnit(libSwaC_gv_zS_ArmyCustomEvolutionUnitA, true);
        }

    }
    libNtve_gf_ShareVisionofUnit(libSwaC_gv_zS_ArmyCustomEvolutionUnitA, true, 1);
    if ((libSwaC_gv_zS_ArmyCustomEvolutionUnitB == null)) {
        lv_armyUnit = libSwaC_gf_StoryArmyUnitInCategory(libSwaC_gv_zS_ArmyCustomEvolutionCategory, 2);
        lv_techUnit = libSwaC_gf_ZS_TechUnitOfArmyUnit(lv_armyUnit);
        lv_unitType = UserDataGetUnit("TechUnit", lv_techUnit, "UIUnitType", 1);
        lv_offset = libSwaC_gf_ZS_ArmyCustomEvolutionUIUnitAttachment(lv_armyUnit);
        UnitCreate(1, lv_unitType, c_unitCreateIgnorePlacement, 0, lv_offset, PointGetFacing(lv_offset));
        libSwaC_gv_zS_ArmyCustomEvolutionUnitB = UnitLastCreated();
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropHeight, PointGetHeight(lv_offset));
        UnitSetState(UnitLastCreated(), c_unitStateCursorable, true);
        UnitSetState(UnitLastCreated(), c_unitStateHighlightable, true);
        UnitSetCursor(UnitLastCreated(), "InteractiveLook");
        libSwaC_gf_ZS_ArmyCustomEvolutionApplyRotation(libSwaC_gv_zS_ArmyCustomEvolutionUnitB, lv_armyUnit);
        UnitSetFacing(libSwaC_gv_zS_ArmyCustomEvolutionUnitB, PointGetFacing(lv_offset), 0.0);
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "AnimBlendTimeApply 0.000000");
        libNtve_gf_TurnAnimationPropertiesOn(libNtve_gf_MainActorofUnit(UnitLastCreated()), "Unpowered");
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "AnimBlendTimeApply");
        ActorSend(ActorFromScope(ActorScopeFromUnit(libSwaC_gv_zS_ArmyCustomEvolutionUnitB), "::Scene"), "SceneStrobeSetFalloff 2.000000");
    }
    else {
        if ((libNtve_gf_UnitIsHidden(libSwaC_gv_zS_ArmyCustomEvolutionUnitB) == true)) {
            libNtve_gf_ShowHideUnit(libSwaC_gv_zS_ArmyCustomEvolutionUnitB, true);
        }

    }
    libNtve_gf_ShareVisionofUnit(libSwaC_gv_zS_ArmyCustomEvolutionUnitB, true, 1);
}

point libSwaC_gf_ZS_ArmyCustomEvolutionUIUnitAttachment (string lp_armyUnit) {
    // Variable Declarations
    string lv_attachString;
    point lv_offset;

    // Automatic Variable Declarations
    string auto9CEBF216_val;

    // Variable Initialization
    lv_attachString = "";

    // Implementation
    auto9CEBF216_val = lp_armyUnit;
    if (auto9CEBF216_val == libSwaC_gf_StoryArmyUnitInCategory("Zergling", 1)) {
        lv_attachString = "Pos_SetLocation 01";
    }
    else if (auto9CEBF216_val == libSwaC_gf_StoryArmyUnitInCategory("Zergling", 2)) {
        lv_attachString = "Pos_SetLocation 02";
    }
    else if (auto9CEBF216_val == libSwaC_gf_StoryArmyUnitInCategory("Roach", 1)) {
        lv_attachString = "Pos_SetLocation 03";
    }
    else if (auto9CEBF216_val == libSwaC_gf_StoryArmyUnitInCategory("Roach", 2)) {
        lv_attachString = "Pos_SetLocation 04";
    }
    else if (auto9CEBF216_val == libSwaC_gf_StoryArmyUnitInCategory("Baneling", 1)) {
        lv_attachString = "Pos_SetLocation 03";
    }
    else if (auto9CEBF216_val == libSwaC_gf_StoryArmyUnitInCategory("Baneling", 2)) {
        lv_attachString = "Pos_SetLocation 04";
    }
    else if (auto9CEBF216_val == libSwaC_gf_StoryArmyUnitInCategory("Hydralisk", 1)) {
        lv_attachString = "Pos_SetLocation 05";
    }
    else if (auto9CEBF216_val == libSwaC_gf_StoryArmyUnitInCategory("Hydralisk", 2)) {
        lv_attachString = "Pos_SetLocation 06";
    }
    else if (auto9CEBF216_val == libSwaC_gf_StoryArmyUnitInCategory("Ultralisk", 1)) {
        lv_attachString = "Pos_SetLocation 07";
    }
    else if (auto9CEBF216_val == libSwaC_gf_StoryArmyUnitInCategory("Ultralisk", 2)) {
        lv_attachString = "Pos_SetLocation 08";
    }
    else if (auto9CEBF216_val == libSwaC_gf_StoryArmyUnitInCategory("SwarmHost", 1)) {
        lv_attachString = "Pos_SetLocation 09";
    }
    else if (auto9CEBF216_val == libSwaC_gf_StoryArmyUnitInCategory("SwarmHost", 2)) {
        lv_attachString = "Pos_SetLocation";
    }
    else if (auto9CEBF216_val == libSwaC_gf_StoryArmyUnitInCategory("Mutalisk", 1)) {
        lv_attachString = "Pos_SetLocation 11";
    }
    else if (auto9CEBF216_val == libSwaC_gf_StoryArmyUnitInCategory("Mutalisk", 2)) {
        lv_attachString = "Pos_SetLocation 12";
    }
    else {
        return null;
    }
    lv_offset = UnitGetAttachmentPoint(libSwaC_gv_zS_ArmyCustomEvolutionSet, lv_attachString);
    return lv_offset;
}

void libSwaC_gf_ZS_ArmyCustomEvolutionApplyRotation (unit lp_unit, string lp_armyUnit) {
    // Automatic Variable Declarations
    string autoDA4A14A8_val;

    // Implementation
    autoDA4A14A8_val = lp_armyUnit;
    if (autoDA4A14A8_val == "Hunter") {
        libNtve_gf_SendActorMessageToUnit(lp_unit, "HostSiteOpsSet ::Host SOpPitch10");
    }
    else if (autoDA4A14A8_val == "Vile") {
        libNtve_gf_SendActorMessageToUnit(lp_unit, "HostSiteOpsSet ::Host SOpPitch10");
    }
    else if (autoDA4A14A8_val == "Torrasque") {
        libNtve_gf_SendActorMessageToUnit(lp_unit, "HostSiteOpsSet ::Host {SOpPitch3 SOpEvoUltra}");
    }
    else {
    }
}

string libSwaC_gf_ZS_ArmyCustomEvolutionUICamera (string lp_armyCategory) {
    // Variable Declarations
    string lv_camera;
    point lv_offset;

    // Automatic Variable Declarations
    string autoB90D98AE_val;

    // Variable Initialization
    lv_camera = "";

    // Implementation
    autoB90D98AE_val = lp_armyCategory;
    if (autoB90D98AE_val == "Zergling") {
        lv_camera = "Camera Zergling";
    }
    else if (autoB90D98AE_val == "Roach") {
        lv_camera = "Camera Roach Baneling";
    }
    else if (autoB90D98AE_val == "Baneling") {
        lv_camera = "Camera Roach Baneling";
    }
    else if (autoB90D98AE_val == "Hydralisk") {
        lv_camera = "Camera Hydralisk";
    }
    else if (autoB90D98AE_val == "Ultralisk") {
        lv_camera = "Camera Ultralisk";
    }
    else if (autoB90D98AE_val == "SwarmHost") {
        lv_camera = "Camera Eggmonster";
    }
    else if (autoB90D98AE_val == "Mutalisk") {
        lv_camera = "Camera Mutalisk";
    }
    else {
    }
    return lv_camera;
}

void libSwaC_gf_ZS_ArmyCustomEvolutionUILeave () {
    // Automatic Variable Declarations
    // Implementation
    if ((libSwaC_gv_zS_ArmyCustomEvolutionRoomOpened == false)) {
        return ;
    }

    ConversationDataStop();
    libSwaC_gv_zS_ArmyCustomEvolutionRoomOpened = false;
    libSwaC_gv_zS_ArmyCustomUnitCurrent = null;
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomEvolutionEvolveButtonClicked, false);
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomEvolutionUnitClicked, false);
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomEvolutionUnitHighlight, false);
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomEvolutionUnitUnhighlight, false);
    libSwaC_gf_ZS_ArmyCustomEvolutionUIHide();
    libNtve_gf_SetDialogItemMovie(libSwaC_gv_zS_ArmyCustomEvolutionSelectedUnitMovie, "", PlayerGroupAll());
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 100.0, 0.0);
    CinematicFade(true, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    CutsceneFade(true, 0.0, Color(0,0,0), 100.0, PlayerGroupAll(), true);
    if ((libSwaC_gv_zS_ArmyCustomCurrentUI == libSwaC_ge_ArmyUIScreen_EggRoom)) {
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
        libSwaC_gf_ZS_ArmyCustomEggUIEnter();
    }
    else if ((libSwaC_gv_zS_ArmyCustomCurrentUI == libSwaC_ge_ArmyUIScreen_Upgrade)) {
        libSwaC_gf_ZS_ArmyCustomUpgradeUIEnter();
    }
    else if ((libSwaC_gv_zS_ArmyCustomCurrentUI == libSwaC_ge_ArmyUIScreen_Mission)) {
        libSwaC_gf_ZS_ArmyCustomMissionUIEnter();
    }
}

void libSwaC_gf_ZS_ArmyCustomEvolutionUIHide () {
    // Automatic Variable Declarations
    // Implementation
    if ((libSwaC_gv_zS_ArmyCustomEvolutionDialog != c_invalidDialogId) && (DialogIsVisible(libSwaC_gv_zS_ArmyCustomEvolutionDialog, 1) == true)) {
        DialogSetVisible(libSwaC_gv_zS_ArmyCustomEvolutionDialog, PlayerGroupAll(), false);
    }

    if ((libSwaC_gv_zS_ArmyCustomEvolutionSet != null) && (libNtve_gf_UnitIsHidden(libSwaC_gv_zS_ArmyCustomEvolutionSet) == false)) {
        libSwaC_gf_ZS_ShowHideStoryUnit(false, libSwaC_gv_zS_ArmyCustomEvolutionSet);
    }

    if ((libSwaC_gv_zS_ArmyCustomEvolutionUnitA != null)) {
        UnitRemove(libSwaC_gv_zS_ArmyCustomEvolutionUnitA);
        libSwaC_gv_zS_ArmyCustomEvolutionUnitA = null;
    }

    if ((libSwaC_gv_zS_ArmyCustomEvolutionSelectionA != null)) {
        ActorSend(libSwaC_gv_zS_ArmyCustomEvolutionSelectionA, "Destroy Immediate");
        libSwaC_gv_zS_ArmyCustomEvolutionSelectionA = null;
    }

    if ((libSwaC_gv_zS_ArmyCustomEvolutionUnitB != null)) {
        UnitRemove(libSwaC_gv_zS_ArmyCustomEvolutionUnitB);
        libSwaC_gv_zS_ArmyCustomEvolutionUnitB = null;
    }

    if ((libSwaC_gv_zS_ArmyCustomEvolutionSelectionB != null)) {
        ActorSend(libSwaC_gv_zS_ArmyCustomEvolutionSelectionB, "Destroy Immediate");
        libSwaC_gv_zS_ArmyCustomEvolutionSelectionB = null;
    }

    if ((libSwaC_gv_zS_ArmyCustomEvolutionSetLightScene != c_cutsceneNone)) {
        CutsceneStop(libSwaC_gv_zS_ArmyCustomEvolutionSetLightScene);
        libSwaC_gv_zS_ArmyCustomEvolutionSetLightScene = c_cutsceneNone;
    }

    if ((libSwaC_gv_zS_ArmyCustomEvolutionUnitLightScene[1] != c_cutsceneNone)) {
        CutsceneStop(libSwaC_gv_zS_ArmyCustomEvolutionUnitLightScene[1]);
        libSwaC_gv_zS_ArmyCustomEvolutionUnitLightScene[1] = c_cutsceneNone;
    }

    if ((libSwaC_gv_zS_ArmyCustomEvolutionUnitLightScene[2] != c_cutsceneNone)) {
        CutsceneStop(libSwaC_gv_zS_ArmyCustomEvolutionUnitLightScene[2]);
        libSwaC_gv_zS_ArmyCustomEvolutionUnitLightScene[2] = c_cutsceneNone;
    }

}

void libSwaC_gf_ZS_ArmyCustomEvolutionUIUpdate () {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_SwaC_A6744A12", "UNITNAME", libSwaC_gf_StoryArmyCategoryName(libSwaC_gv_zS_ArmyCustomEvolutionCategory));
    libNtve_gf_SetDialogItemText(libSwaC_gv_zS_ArmyCustomEvolutionTitleLabel5, TextExpressionAssemble("Param/Expression/lib_SwaC_A6744A12"), PlayerGroupAll());
    libSwaC_gf_ZS_ArmyCustomEvolutionUIUpdateSelect();
}

void libSwaC_gf_ZS_ArmyCustomEvolutionUIUpdateSelect () {
    // Variable Declarations
    string lv_indexArmyUnit;
    bool lv_found;

    // Automatic Variable Declarations
    int autoCD85BB5A_ae;
    int autoCD85BB5A_ai;

    // Variable Initialization

    // Implementation
    if ((libSwaC_gv_zS_ArmyCustomUnitCurrent != null)) {
        lv_found = false;
        autoCD85BB5A_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, libSwaC_gv_zS_ArmyCustomEvolutionCategory, "ArmyUnitArray", 1);
        autoCD85BB5A_ai = 1;
        while (autoCD85BB5A_ai <= autoCD85BB5A_ae) {
            lv_indexArmyUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, libSwaC_gv_zS_ArmyCustomEvolutionCategory, "ArmyUnitArray["+IntToString(autoCD85BB5A_ai-1)+"]", 1);
            if ((lv_indexArmyUnit == libSwaC_gv_zS_ArmyCustomUnitCurrent)) {
                lv_found = true;
                break;
            }

            autoCD85BB5A_ai = autoCD85BB5A_ai + 1;
        }
        if ((lv_found == false)) {
            libSwaC_gv_zS_ArmyCustomUnitCurrent = null;
        }

    }

    if ((libSwaC_gv_zS_ArmyCustomUnitCurrent == null)) {
        DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomEvolutionInfoFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomEvolutionTitleLabel4, PlayerGroupAll(), true);
        DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomEvolutionTitleLabel3, PlayerGroupAll(), true);
        DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomEvolutionTitleLabel2, PlayerGroupAll(), true);
        libNtve_gf_SetDialogItemMovie(libSwaC_gv_zS_ArmyCustomEvolutionSelectedUnitMovie, "", PlayerGroupAll());
        DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomEvolutionSelectedUnitNameLabel, PlayerGroupAll(), false);
        DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomEvolutionSelectedUnitDescriptionLabel, PlayerGroupAll(), false);
        DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomEvolutionAcceptButton1, PlayerGroupAll(), false);
        DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomEvolutionAcceptButton2, PlayerGroupAll(), false);
        DialogControlSetEnabled(libSwaC_gv_zS_ArmyCustomEvolutionAcceptButton1, PlayerGroupAll(), false);
        DialogControlSetEnabled(libSwaC_gv_zS_ArmyCustomEvolutionAcceptButton2, PlayerGroupAll(), false);
        libSwaC_gf_ZS_ArmyCustomEvolutionPlayUnitLight("Right", "Off");
        libSwaC_gf_ZS_ArmyCustomEvolutionPlayUnitLight("Left", "Off");
    }
    else {
        DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomEvolutionInfoFrame, PlayerGroupAll(), true);
        DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomEvolutionTitleLabel4, PlayerGroupAll(), false);
        DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomEvolutionTitleLabel3, PlayerGroupAll(), false);
        DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomEvolutionTitleLabel2, PlayerGroupAll(), false);
        libNtve_gf_SetDialogItemMovie(libSwaC_gv_zS_ArmyCustomEvolutionSelectedUnitMovie, libSwaC_gf_ZS_StoryArmyUnitMovie(libSwaC_gv_zS_ArmyCustomUnitCurrent), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libSwaC_gv_zS_ArmyCustomEvolutionSelectedUnitNameLabel, libSwaC_gf_ZS_ArmyUnitTitle(libSwaC_gv_zS_ArmyCustomUnitCurrent), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libSwaC_gv_zS_ArmyCustomEvolutionSelectedUnitDescriptionLabel, libSwaC_gf_ZS_ArmyUnitDescription(lv_indexArmyUnit), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libSwaC_gv_zS_ArmyCustomEvolutionSelectedUnitDescriptionResultsTitleLabel, StringExternal("Param/Value/lib_SwaC_06D96350"), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libSwaC_gv_zS_ArmyCustomEvolutionSelectedUnitDescriptionResultsLabel, libSwaC_gf_ZS_ArmyUnitTooltip(libSwaC_gv_zS_ArmyCustomUnitCurrent), PlayerGroupAll());
        DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomEvolutionSelectedUnitNameLabel, PlayerGroupAll(), true);
        DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomEvolutionSelectedUnitDescriptionLabel, PlayerGroupAll(), true);
        DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomEvolutionAcceptButton1, PlayerGroupAll(), true);
        DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomEvolutionAcceptButton2, PlayerGroupAll(), true);
        if ((libSwaC_gf_ZS_StoryArmyUnitEnableButton(libSwaC_gv_zS_ArmyCustomUnitCurrent) == "1")) {
            libSwaC_gf_ZS_ArmyCustomEvolutionPlayUnitLight("Left", "Selected");
            libSwaC_gf_ZS_ArmyCustomEvolutionPlayUnitLight("Right", "Off");
            DialogControlSetEnabled(libSwaC_gv_zS_ArmyCustomEvolutionAcceptButton1, PlayerGroupAll(), true);
            DialogControlSetEnabled(libSwaC_gv_zS_ArmyCustomEvolutionAcceptButton2, PlayerGroupAll(), false);
        }

        if ((libSwaC_gf_ZS_StoryArmyUnitEnableButton(libSwaC_gv_zS_ArmyCustomUnitCurrent) == "2")) {
            libSwaC_gf_ZS_ArmyCustomEvolutionPlayUnitLight("Left", "Off");
            libSwaC_gf_ZS_ArmyCustomEvolutionPlayUnitLight("Right", "Selected");
            DialogControlSetEnabled(libSwaC_gv_zS_ArmyCustomEvolutionAcceptButton1, PlayerGroupAll(), false);
            DialogControlSetEnabled(libSwaC_gv_zS_ArmyCustomEvolutionAcceptButton2, PlayerGroupAll(), true);
        }

    }
}

void libSwaC_gf_ZS_ArmyCustomEvolutionPlayUnitLight (string lp_side, string lp_state) {
    // Variable Declarations
    int lv_sceneIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_side == "Left")) {
        lv_sceneIndex = 1;
    }
    else {
        lv_sceneIndex = 2;
    }
    if ((libSwaC_gv_zS_ArmyCustomEvolutionUnitLightScene[lv_sceneIndex] == c_cutsceneNone)) {
        CutsceneCreateNew("Cutscenes\\Z_UI_SplitScreen.SC2Cutscene", libNtve_gf_PointWithZOffset(libSwaC_gv_center, libSwaC_gv_zSC_ARMYEVOLUTIONSETHEIGHT), 0.0, PlayerGroupAll(), false);
        libSwaC_gv_zS_ArmyCustomEvolutionUnitLightScene[lv_sceneIndex] = CutsceneLastCreated();
    }

    CutsceneGoToBookmark(libSwaC_gv_zS_ArmyCustomEvolutionUnitLightScene[lv_sceneIndex], (libSwaC_gf_ZS_ArmyCategoryBookmarkToken(libSwaC_gv_zS_ArmyCustomEvolutionCategory, true) + lp_side + lp_state + "Start"));
    CutscenePause(libSwaC_gv_zS_ArmyCustomEvolutionUnitLightScene[lv_sceneIndex]);
}

void libSwaC_gf_ZS_ArmyCustomEvolutionPlayFanfare (string lp_unitSide) {
    // Variable Declarations
    int lv_splitTitleDialog;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_splitTitleDialog = c_invalidDialogId;

    // Implementation
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationDefault);
    libNtve_gf_SendActorMessageToUnit(libSwaC_gv_zS_ArmyCustomEvolutionUnitB, "StrobeStop");
    libNtve_gf_SendActorMessageToUnit(libSwaC_gv_zS_ArmyCustomEvolutionUnitA, "StrobeStop");
    DialogSetVisible(libSwaC_gv_zS_ArmyCustomEvolutionDialog, PlayerGroupAll(), false);
    ConversationDataStop();
    libNtve_gf_SetDialogItemMovie(libSwaC_gv_zS_ArmyCustomEvolutionSelectedUnitMovie, "", PlayerGroupAll());
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomEvolutionFanfareOver, true);
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomEvolutionFanfareFade, true);
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    lv_splitTitleDialog = DialogLastCreated();
    DialogSetVisible(lv_splitTitleDialog, PlayerGroupAll(), true);
    CutsceneCreateNew("Cutscenes\\Z_UI_SplitScreenVictory.SC2Cutscene", libNtve_gf_PointWithZOffset(libSwaC_gv_center, libSwaC_gv_zSC_ARMYEVOLUTIONSETHEIGHT), 0.0, PlayerGroupAll(), false);
    libSwaC_gv_zS_ArmyCustomEvolutionFanfareCutscene = CutsceneLastCreated();
    CutsceneGoToBookmark(libSwaC_gv_zS_ArmyCustomEvolutionFanfareCutscene, (libSwaC_gf_ZS_ArmyCategoryBookmarkToken(libSwaC_gv_zS_ArmyCustomEvolutionCategory, true) + " " + lp_unitSide + " Start"));
    DialogControlCreate(lv_splitTitleDialog, c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 800, 100);
    TextExpressionSetToken("Param/Expression/lib_SwaC_24FD0DC7", "A", libSwaC_gf_StoryArmyUnitName(libSwaC_gf_ZS_StoryArmyCategoryPurchasedUnit(libSwaC_gv_zS_ArmyCustomEvolutionCategory)));
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/lib_SwaC_24FD0DC7"), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ArmyCustomizationUnitSplitFanfare", PlayerGroupAll());
    libNtve_gf_SetDialogItemTextWriteout(DialogControlLastCreated(), false, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, 0, 100);
    libSwaC_gv_zS_ArmyCustomEvolutionFanfareText = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, null, c_soundtrackCueAny, c_soundtrackIndexAny);
    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryAmbience, null, c_soundtrackCueAny, c_soundtrackIndexAny);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    CutscenePlay(libSwaC_gv_zS_ArmyCustomEvolutionFanfareCutscene);
    Wait(1.5, c_timeGame);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    if ((lp_unitSide == "Left")) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(libSwaC_gv_zS_ArmyCustomEvolutionUnitA), c_animNameDefault, "Spell A", 0, c_animTimeDefault);
        libNtve_gf_TurnAnimationPropertiesOff(libNtve_gf_MainActorofUnit(libSwaC_gv_zS_ArmyCustomEvolutionUnitB), "Unpowered");
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(libSwaC_gv_zS_ArmyCustomEvolutionUnitB), c_animNameDefault, "Inferior", 0, c_animTimeDefault);
    }
    else {
        libNtve_gf_TurnAnimationPropertiesOff(libNtve_gf_MainActorofUnit(libSwaC_gv_zS_ArmyCustomEvolutionUnitA), "Unpowered");
        if ((libSwaC_gv_zS_ArmyCustomEvolutionCategory == "Ultralisk")) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(libSwaC_gv_zS_ArmyCustomEvolutionUnitA), c_animNameDefault, "Stand 01", 0, c_animTimeDefault);
        }
        else {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(libSwaC_gv_zS_ArmyCustomEvolutionUnitA), c_animNameDefault, "Inferior", 0, c_animTimeDefault);
        }
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(libSwaC_gv_zS_ArmyCustomEvolutionUnitB), c_animNameDefault, "Spell A", 0, c_animTimeDefault);
    }
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 2.0, 0.0);
    TriggerWaitForTrigger(libSwaC_gt_ZS_ArmyCustomEvolutionFanfareOver, true);
    DialogDestroy(lv_splitTitleDialog);
    CutsceneStop(libSwaC_gv_zS_ArmyCustomEvolutionFanfareCutscene);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationImmediate);
}

void libSwaC_gf_StoryDisplayEvolutionMissionScreen (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    libSwaC_gv_zS_ArmyCustomMissionCurrentCategory = lp_armyCategory;
    libSwaC_gf_ZS_ArmyCustomMissionUIEnter();
    if ((libSwaC_gf_StoryInSimulation() == true)) {
        TriggerExecute(libSwaC_gt_ZS_ArmyCustomMissionUIRunning, true, true);
        libSwaC_gf_ZS_ArmyCustomMissionUILeave();
    }

}

void libSwaC_gf_ZS_ArmyCustomMissionUIEnter () {
    // Automatic Variable Declarations
    // Implementation
    libSwaC_gf_CinematicFade(true, 0.0, Color(0.00, 0.00, 0.00), true);
    libSwaC_gf_DispatchStoryEvent(libSwaC_ge_ZS_Event_ArmyEnteredSubUI, "", "", false);
    ConversationDataStop();
    libSwaC_gf_ZS_ArmyCustomEggUILeave();
    libSwaC_gf_ZS_ArmyCustomUpgradeUILeave();
    libSwaC_gf_ZS_ArmyCustomEvolutionUIHide();
    libSwaC_gf_ZS_ArmyCustomMissionCreate();
    libSwaC_gv_zS_ArmyCustomCurrentUI = libSwaC_ge_ArmyUIScreen_Mission;
    libSwaC_gf_ZS_ArmyCustomMissionUpdate();
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, false);
    DialogSetVisible(libSwaC_gv_zS_ArmyCustomMissionDialog, PlayerGroupAll(), true);
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomMissionPlayButtonClicked, true);
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomMissionCloseButtonClicked, true);
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomMissionPitchPlay, true);
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomMissionPitchStop, true);
}

void libSwaC_gf_ZS_ArmyCustomMissionUILeave () {
    // Automatic Variable Declarations
    // Implementation
    if ((libSwaC_gv_zS_ArmyCustomMissionDialog != c_invalidDialogId)) {
        DialogSetVisible(libSwaC_gv_zS_ArmyCustomMissionDialog, PlayerGroupAll(), false);
    }

    DialogClearSubtitlePositionOverrideControl();
    DialogClearSubtitlePositionOverride();
    ConversationDataStop();
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomMissionPlayButtonClicked, false);
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomMissionCloseButtonClicked, false);
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomMissionPitchPlay, false);
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomMissionPitchStop, false);
}

void libSwaC_gf_ZS_ArmyCustomMissionCreate () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libSwaC_gv_zS_ArmyCustomMissionDialog != c_invalidDialogId)) {
        return ;
    }

    DialogCreate(1920, 1200, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libSwaC_gv_zS_ArmyCustomMissionDialog = DialogLastCreated();
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "HotS_BonusMissionSelection/MissionPanelTemplate");
    libSwaC_gv_zS_ArmyCustomMissionPanel = DialogControlLastCreated();
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlHookup(libSwaC_gv_zS_ArmyCustomMissionPanel, c_triggerControlTypePanel, "NewUnitVariant2");
    libSwaC_gv_zS_ArmyCustomMissionUnitFrames[2] = DialogControlLastCreated();
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeUnitModel, "TechnologyUnitModelFrame");
    libSwaC_gv_zS_ArmyCustomMissionUnits[2] = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_ArmyCustomMissionUnitFrames[2], c_triggerControlTypePanel, "TooltipFrame");
    libSwaC_gv_zS_ArmyCustomMissionUnitFrameBackground[2] = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_ArmyCustomMissionUnitFrames[2], c_triggerControlTypeLabel, "UnitNameLabel");
    libSwaC_gv_zS_ArmyCustomMissionUnitFrameLabel[2] = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_ArmyCustomMissionPanel, c_triggerControlTypePanel, "NewUnitVariant3");
    libSwaC_gv_zS_ArmyCustomMissionUnitFrames[3] = DialogControlLastCreated();
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeUnitModel, "TechnologyUnitModelFrame");
    libSwaC_gv_zS_ArmyCustomMissionUnits[3] = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_ArmyCustomMissionUnitFrames[3], c_triggerControlTypePanel, "TooltipFrame");
    libSwaC_gv_zS_ArmyCustomMissionUnitFrameBackground[3] = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_ArmyCustomMissionUnitFrames[3], c_triggerControlTypeLabel, "UnitNameLabel");
    libSwaC_gv_zS_ArmyCustomMissionUnitFrameLabel[3] = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_ArmyCustomMissionPanel, c_triggerControlTypeButton, "CloseButton");
    libSwaC_gv_zS_ArmyCustomMissionCloseButton = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_ArmyCustomMissionPanel, c_triggerControlTypeButton, "LaunchButton");
    libSwaC_gv_zS_ArmyCustomMissionPlayButton = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_ArmyCustomMissionPanel, c_triggerControlTypePortrait, "ContactPortrait");
    libSwaC_gv_zS_ArmyCustomMissionContactPortrait = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_ArmyCustomMissionPanel, c_triggerControlTypeButton, "ContactPlayButton");
    libSwaC_gv_zS_ArmyCustomMissionContactPlayButton = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_ArmyCustomMissionPanel, c_triggerControlTypeButton, "ContactStopButton");
    libSwaC_gv_zS_ArmyCustomMissionContactStopButton = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_ArmyCustomMissionPanel, c_triggerControlTypeLabel, "MissionTextLabel");
    libSwaC_gv_zS_ArmyCustomMissionTitleLabel = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_ArmyCustomMissionPanel, c_triggerControlTypeLabel, "ObjectiveTextLabel");
    libSwaC_gv_zS_ArmyCustomMissionObjectiveTextLabel = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_ArmyCustomMissionPanel, c_triggerControlTypeLabel, "RewardTextLabel");
    libSwaC_gv_zS_ArmyCustomMissionBonusTextLabel = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_ArmyCustomMissionPanel, c_triggerControlTypePanel, "SubtitleAnchor");
    libSwaC_gv_zS_ArmyCustomMissionSubtitleAnchor = DialogControlLastCreated();
    DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomMissionContactPlayButton, PlayerGroupAll(), true);
    DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomMissionContactStopButton, PlayerGroupAll(), false);
}

void libSwaC_gf_ZS_ArmyCustomMissionUpdate () {
    // Variable Declarations
    int lv_index;
    string lv_indexArmyUnit;
    string lv_indexCategory;
    int lv_lastButton;
    bool lv_nextSelected;
    text lv_missionTextName;

    // Automatic Variable Declarations
    int autoC0F182A6_ae;
    int autoC0F182A6_ai;

    // Variable Initialization
    lv_lastButton = c_invalidDialogControlId;

    // Implementation
    DialogSetSubtitlePositionOverrideControl(libSwaC_gv_zS_ArmyCustomMissionSubtitleAnchor);
    libSwaC_gv_zS_ArmyCustomMissionMap = libSwaC_gf_StoryArmyCategoryEvolutionMission(libSwaC_gv_zS_ArmyCustomMissionCurrentCategory);
    lv_index = 2;
    autoC0F182A6_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, libSwaC_gv_zS_ArmyCustomMissionCurrentCategory, "ArmyUnitArray", 1);
    autoC0F182A6_ai = 1;
    while (autoC0F182A6_ai <= autoC0F182A6_ae) {
        lv_indexArmyUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, libSwaC_gv_zS_ArmyCustomMissionCurrentCategory, "ArmyUnitArray["+IntToString(autoC0F182A6_ai-1)+"]", 1);
        if ((lv_indexArmyUnit == "HydraliskImpaler")) {
            libNtve_gf_SetDialogItemUnitLink(libSwaC_gv_zS_ArmyCustomMissionUnits[lv_index], "Impaler", PlayerGroupAll());
        }
        else if ((lv_indexArmyUnit == "HydraliskLurker")) {
            libNtve_gf_SetDialogItemUnitLink(libSwaC_gv_zS_ArmyCustomMissionUnits[lv_index], "Lurker", PlayerGroupAll());
        }
        else if ((lv_indexArmyUnit == "MutaliskBroodlord")) {
            libNtve_gf_SetDialogItemUnitLink(libSwaC_gv_zS_ArmyCustomMissionUnits[lv_index], "BroodLord", PlayerGroupAll());
        }
        else if ((lv_indexArmyUnit == "MutaliskViper")) {
            libNtve_gf_SetDialogItemUnitLink(libSwaC_gv_zS_ArmyCustomMissionUnits[lv_index], "Viper", PlayerGroupAll());
        }
        else if (true) {
            libNtve_gf_SetDialogItemUnitLink(libSwaC_gv_zS_ArmyCustomMissionUnits[lv_index], libSwaC_gf_ZS_StoryArmyUnitUnitType(lv_indexArmyUnit), PlayerGroupAll());
        }
        libNtve_gf_SetDialogItemCamera(libSwaC_gv_zS_ArmyCustomMissionUnits[lv_index], libSwaC_gf_ZS_ArmyUnitBonusMissionCamera(lv_indexArmyUnit), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libSwaC_gv_zS_ArmyCustomMissionUnitFrameLabel[lv_index], libSwaC_gf_StoryArmyUnitArmyName(lv_indexArmyUnit), PlayerGroupAll());
        libNtve_gf_SetDialogItemCamera(libSwaC_gv_zS_ArmyCustomMissionUnits[lv_index], libSwaC_gf_ZS_ArmyUnitPlanetPanelCamera(lv_indexArmyUnit), PlayerGroupAll());
        TextExpressionSetToken("Param/Expression/lib_SwaC_7FD2F0AE", "A", libSwaC_gf_StoryArmyUnitName(lv_indexArmyUnit));
        TextExpressionSetToken("Param/Expression/lib_SwaC_7FD2F0AE", "B", libSwaC_gf_ZS_ArmyUnitTooltip2(lv_indexArmyUnit));
        libNtve_gf_SetDialogItemTooltip(libSwaC_gv_zS_ArmyCustomMissionUnitFrames[lv_index], TextExpressionAssemble("Param/Expression/lib_SwaC_7FD2F0AE"), PlayerGroupAll());
        libNtve_gf_SetDialogItemTeamColor(libSwaC_gv_zS_ArmyCustomMissionUnits[lv_index], libNtve_gf_ConvertPlayerColorToColor(libSwaC_gf_CampaignKerriganZergPlayerColor()), PlayerGroupAll());
        lv_index += 1;
        autoC0F182A6_ai = autoC0F182A6_ai + 1;
    }
    PortraitSetModel(PortraitGetTriggerControl(libSwaC_gv_zS_ArmyCustomMissionContactPortrait), "EvolutionMasterPortrait3D", true);
    PortraitSetActor(PortraitGetTriggerControl(libSwaC_gv_zS_ArmyCustomMissionContactPortrait), "EvolutionMasterPortrait3D");
    DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomMissionContactPortrait, PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(libSwaC_gv_zS_ArmyCustomMissionTitleLabel, StringExternal(CatalogFieldValueGet(c_gameCatalogMap, (libSwaC_gv_zS_ArmyCustomMissionMap), "MissionText", c_playerAny)), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libSwaC_gv_zS_ArmyCustomMissionObjectiveTextLabel, StringExternal(CatalogFieldValueGet(c_gameCatalogMap, (libSwaC_gv_zS_ArmyCustomMissionMap), "PrimaryObjectiveText", c_playerAny)), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libSwaC_gv_zS_ArmyCustomMissionBonusTextLabel, StringExternal(CatalogFieldValueGet(c_gameCatalogMap, (libSwaC_gv_zS_ArmyCustomMissionMap), "RewardText", c_playerAny)), PlayerGroupAll());
    if ((libSwaC_gv_zS_ArmyCustomMissionPitchPlayed[libSwaC_gv_zS_ArmyCustomMissionCurrentIndex] == false) && (libSwaC_gf_StoryInSimulation() == false)) {
        TriggerExecute(libSwaC_gt_ZS_ArmyCustomMissionPitchPlay, false, false);
    }

}

void libSwaC_gf_ZS_ArmyCustomMissionLaunch () {
    // Variable Declarations
    int lv_selectedDifficulty;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_selectedDifficulty = 2;

    // Implementation
    ConversationDataStop();
    TransmissionClearAll();
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, 1.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 0.0, 1.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 0.0, 1.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 0.0, 1.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 0.0, 1.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 0.0, 1.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 0.0, 1.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 0.0, 1.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 0.0, 1.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 0.0, 1.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 0.0, 1.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 0.0, 1.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 0.0, 1.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 0.0, 1.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 0.0, 1.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 0.0, 1.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 0.0, 1.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 0.0, 1.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 0.0, 1.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 0.0, 1.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 0.0, 1.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 0.0, 1.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 0.0, 1.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, 1.0);
    libSwaC_gf_CinematicFade(false, 1.0, Color(0.00, 0.00, 0.00), true);
    if ((libSwaC_gf_StoryInSimulation() == true)) {
        libSwaC_gf_StorySimulationEnd();
        libSwaC_gf_PrepareForMission(libSwaC_gv_zS_ArmyCustomMissionMap, true, false, libSwaC_gv_zSX_CampaignDifficulty);
    }
    else {
        libSwaC_gf_PrepareForMission(libSwaC_gv_zS_ArmyCustomMissionMap, false, false, libSwaC_gv_zSX_CampaignDifficulty);
    }
    TriggerExecute(libSwaC_gt_ZS_SaveCampaignStatsData, true, false);
    GameOver(1, c_gameOverVictory, false, false);
}

string libSwaC_gf_ZS_ArmyCustomMissionNextMissionCategory () {
    // Variable Declarations
    string lv_rewardCategory;
    string lv_firstCategory;
    string lv_indexMission;
    int lv_oldestAge;

    // Automatic Variable Declarations
    int autoB1855AB6_ae;
    int autoB1855AB6_ai;

    // Variable Initialization

    // Implementation
    autoB1855AB6_ae = CatalogEntryCount(c_gameCatalogMap);
    autoB1855AB6_ai = 1;
    while (autoB1855AB6_ai <= autoB1855AB6_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoB1855AB6_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            lv_rewardCategory = libSwaC_gf_MissionArmyEvolutionUnlocked(lv_indexMission);
            if ((lv_rewardCategory != null) && (libSwaC_gf_ZS_StoryArmyCategoryPurchasedUnit(lv_rewardCategory) == null) && (libSwaC_gf_MissionStatusAge(lv_indexMission, libSwaC_ge_MissionStatus_Completed) > lv_oldestAge)) {
                lv_oldestAge = libSwaC_gf_MissionStatusAge(lv_indexMission, libSwaC_ge_MissionStatus_Completed);
                lv_firstCategory = lv_rewardCategory;
            }

        }
        autoB1855AB6_ai = autoB1855AB6_ai + 1;
    }
    return lv_firstCategory;
}

void libSwaC_gf_StoryArmyUIArchivesDisplay () {
    // Automatic Variable Declarations
    // Implementation
    if ((libSwaC_gv_zS_ArmyCustomArchivesRunning == true)) {
        return ;
    }

    libSwaC_gf_CinematicFade(true, 0.0, Color(0.00, 0.00, 0.00), true);
    libSwaC_gf_ZS_ArmyUIArchivesCreate();
    libSwaC_gf_ZS_ArmyUIArchivesUpdate();
    DialogSetVisible(libSwaC_gv_zS_ArmyCustomArchivesDialog, PlayerGroupAll(), true);
    libSwaC_gv_zS_ArmyCustomArchivesRunning = true;
    TriggerEnable(libSwaC_gt_ZS_ArmyUIArchivesOKClicked, true);
    TriggerEnable(libSwaC_gt_ZS_ArmyUIArchivesCancelClicked, true);
    TriggerEnable(libSwaC_gt_ZS_ArmyUIArchivesItemChecked, true);
    TriggerExecute(libSwaC_gt_ZS_ArmyUIArchivesRunning, true, true);
    TriggerEnable(libSwaC_gt_ZS_ArmyUIArchivesOKClicked, false);
    TriggerEnable(libSwaC_gt_ZS_ArmyUIArchivesCancelClicked, false);
    TriggerEnable(libSwaC_gt_ZS_ArmyUIArchivesItemChecked, false);
    libSwaC_gv_zS_ArmyCustomArchivesRunning = false;
}

void libSwaC_gf_ZS_ArmyUIArchivesCreate () {
    // Variable Declarations
    int lv_categoryIndex;
    int lv_upgradeIndex;
    int lv_evoIndex;
    string lv_indexCategory;
    string lv_indexUpgrade;
    string lv_indexEvo;
    int lv_unitPanel;
    int lv_border;
    int lv_mask;

    // Automatic Variable Declarations
    int auto8559A817_ae;
    int auto8559A817_ai;
    int auto15E6CD07_ae;
    int auto15E6CD07_ai;
    int auto779D9171_ae;
    int auto779D9171_ai;

    // Variable Initialization
    lv_unitPanel = c_invalidDialogControlId;
    lv_border = c_invalidDialogControlId;
    lv_mask = c_invalidDialogControlId;

    // Implementation
    if ((libSwaC_gv_zS_ArmyCustomArchivesDialog != c_invalidDialogId)) {
        return ;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libSwaC_gv_zS_ArmyCustomArchivesDialog = DialogLastCreated();
    DialogControlCreateFromTemplate(libSwaC_gv_zS_ArmyCustomArchivesDialog, c_triggerControlTypePanel, "HotS_ArmyUpgradeDialog/ArmyUpgradeDialog");
    libSwaC_gv_zS_ArmyCustomArchivesPanel = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_ArmyCustomArchivesPanel, c_triggerControlTypeButton, "AcceptButton");
    libSwaC_gv_zS_ArmyCustomArchivesOKButton = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_ArmyCustomArchivesPanel, c_triggerControlTypeButton, "CloseButton");
    libSwaC_gv_zS_ArmyCustomArchivesCancelButton = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_ArmyCustomArchivesPanel, c_triggerControlTypePanel, "SectionBG");
    libSwaC_gv_zS_ArmyCustomArchivesSectionBG = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_ArmyCustomArchivesPanel, c_triggerControlTypePanel, "UnitUpgradeBorder");
    libSwaC_gv_zS_ArmyCustomArchivesUpgradeBorder = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_ArmyCustomArchivesPanel, c_triggerControlTypeLabel, "UnitUpgradeBorderTitle");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SwaC_1C2868B3"), PlayerGroupAll());
    DialogControlHookup(libSwaC_gv_zS_ArmyCustomArchivesPanel, c_triggerControlTypePanel, "UnitEvolutionBorder");
    libSwaC_gv_zS_ArmyCustomArchivesEvolutionBorder = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_ArmyCustomArchivesPanel, c_triggerControlTypeLabel, "UnitEvolutionBorderTitle");
    libSwaC_gv_zS_ArmyCustomArchivesEvolutionBorderTitle = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SwaC_8A12B67D"), PlayerGroupAll());
    DialogControlHookup(libSwaC_gv_zS_ArmyCustomArchivesPanel, c_triggerControlTypeImage, "UnitEvolutionBorderTitleBG");
    libSwaC_gv_zS_ArmyCustomArchivesEvolutionBorderBG = DialogControlLastCreated();
    auto8559A817_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto8559A817_ai = 1;
    while (auto8559A817_ai <= auto8559A817_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto8559A817_ai);
        if ((libSwaC_gf_ZS_StoryArmyCategoryUsedInUI(lv_indexCategory) == true)) {
            lv_categoryIndex += 1;
            DialogControlHookup(libSwaC_gv_zS_ArmyCustomArchivesPanel, c_triggerControlTypePanel, "UnitUpgradeFrame"+IntToString(lv_categoryIndex));
            libSwaC_gv_zS_ArmyCustomArchivesUnitPanel[lv_categoryIndex] = DialogControlLastCreated();
            DialogControlHookup(libSwaC_gv_zS_ArmyCustomArchivesUnitPanel[lv_categoryIndex], c_triggerControlTypeLabel, "UnitUpgradeTitleLabel");
            libSwaC_gv_zS_ArmyCustomArchivesUnitLabel[lv_categoryIndex] = DialogControlLastCreated();
            libNtve_gf_SetDialogItemText(DialogControlLastCreated(), libSwaC_gf_StoryArmyCategoryName(lv_indexCategory), PlayerGroupAll());
            DialogControlHookup(libSwaC_gv_zS_ArmyCustomArchivesUnitPanel[lv_categoryIndex], c_triggerControlTypeImage, "UpgradeBorder");
            lv_border = DialogControlLastCreated();
            DialogControlHookup(libSwaC_gv_zS_ArmyCustomArchivesUnitPanel[lv_categoryIndex], c_triggerControlTypeImage, "UpgradeBorderDivider");
            libSwaC_gv_zS_ArmyCustomArchivesUpgradeDivider[lv_categoryIndex] = DialogControlLastCreated();
            lv_upgradeIndex = 0;
            auto15E6CD07_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUpgradeArray", 1);
            auto15E6CD07_ai = 1;
            while (auto15E6CD07_ai <= auto15E6CD07_ae) {
                lv_indexUpgrade = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUpgradeArray["+IntToString(auto15E6CD07_ai-1)+"]", 1);
                lv_upgradeIndex += 1;
                libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, 50, 50, libSwaC_gf_ZS_StoryArmyUpgradeResults(lv_indexUpgrade), false);
                libSwaC_gv_zS_ArmyCustomArchivesUpgradeCheck[lv_categoryIndex][lv_upgradeIndex] = DialogControlLastCreated();
                DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, lv_border, c_anchorLeft, (((lv_upgradeIndex - 1) * 225) + 12), 0);
                TextExpressionSetToken("Param/Expression/lib_SwaC_CE6787DB", "A", libSwaC_gf_ZS_StoryArmyUpgradeName(lv_indexUpgrade));
                libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 182, 80, c_anchorLeft, 50, 50, TextExpressionAssemble("Param/Expression/lib_SwaC_CE6787DB"), Color(100,100,100), false, 2.0);
                libSwaC_gv_zS_ArmyCustomArchivesUpgradeLabel[lv_categoryIndex][lv_upgradeIndex] = DialogControlLastCreated();
                DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, libSwaC_gv_zS_ArmyCustomArchivesUpgradeCheck[lv_categoryIndex][lv_upgradeIndex], c_anchorRight, 3, 0);
                libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ArmyCustomizationDialog_CheckboxLabel", PlayerGroupAll());
                auto15E6CD07_ai = auto15E6CD07_ai + 1;
            }
            DialogControlHookup(libSwaC_gv_zS_ArmyCustomArchivesUnitPanel[lv_categoryIndex], c_triggerControlTypeImage, "EvolutionBorder");
            lv_border = DialogControlLastCreated();
            DialogControlHookup(libSwaC_gv_zS_ArmyCustomArchivesUnitPanel[lv_categoryIndex], c_triggerControlTypeImage, "EvolutionBorderDivider");
            libSwaC_gv_zS_ArmyCustomArchivesEvolutionDivider[lv_categoryIndex] = DialogControlLastCreated();
            lv_evoIndex = 0;
            auto779D9171_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
            auto779D9171_ai = 1;
            while (auto779D9171_ai <= auto779D9171_ae) {
                lv_indexEvo = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(auto779D9171_ai-1)+"]", 1);
                lv_evoIndex += 1;
                libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, 50, 50, UserDataGetText("TechUnit", libSwaC_gf_ZS_TechUnitOfArmyUnit(lv_indexEvo), "AchiveArmyTooltip", 1), false);
                libSwaC_gv_zS_ArmyCustomArchivesEvolutionCheck[lv_categoryIndex][lv_evoIndex] = DialogControlLastCreated();
                DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, lv_border, c_anchorLeft, (((lv_evoIndex - 1) * 190) + 12), 0);
                libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 80, c_anchorLeft, 50, 50, libSwaC_gf_StoryArmyUnitName(lv_indexEvo), Color(100,100,100), false, 2.0);
                libSwaC_gv_zS_ArmyCustomArchivesEvolutionLabel[lv_categoryIndex][lv_evoIndex] = DialogControlLastCreated();
                DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, libSwaC_gv_zS_ArmyCustomArchivesEvolutionCheck[lv_categoryIndex][lv_evoIndex], c_anchorRight, 0, 0);
                libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ArmyCustomizationDialog_CheckboxLabel", PlayerGroupAll());
                auto779D9171_ai = auto779D9171_ai + 1;
            }
        }
        auto8559A817_ai = auto8559A817_ai + 1;
    }
}

trigger auto_libSwaC_gf_ZS_ArmyUIArchivesUpdate_Trigger = null;

void libSwaC_gf_ZS_ArmyUIArchivesUpdate () {
    if (auto_libSwaC_gf_ZS_ArmyUIArchivesUpdate_Trigger == null) {
        auto_libSwaC_gf_ZS_ArmyUIArchivesUpdate_Trigger = TriggerCreate("auto_libSwaC_gf_ZS_ArmyUIArchivesUpdate_TriggerFunc");
    }

    TriggerExecute(auto_libSwaC_gf_ZS_ArmyUIArchivesUpdate_Trigger, false, false);
}

bool auto_libSwaC_gf_ZS_ArmyUIArchivesUpdate_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_categoryIndex;
    int lv_upgradeIndex;
    int lv_evoIndex;
    string lv_indexCategory;
    string lv_indexUpgrade;
    string lv_indexUnit;
    int lv_unlockedUpgradeCount;
    int lv_unlockedEvolutionCount;
    int lv_sizeX;
    int lv_sizeY;
    int lv_lastCategory;

    // Automatic Variable Declarations
    int auto5C6C0B02_ae;
    int auto5C6C0B02_ai;
    int autoCEC4248D_ae;
    int autoCEC4248D_ai;
    int auto7F3C418D_ae;
    int auto7F3C418D_ai;

    // Variable Initialization

    // Implementation
    libSwaC_gv_zS_ArmyCustomArchivesUpdatingData = true;
    auto5C6C0B02_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto5C6C0B02_ai = 1;
    while (auto5C6C0B02_ai <= auto5C6C0B02_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto5C6C0B02_ai);
        if ((libSwaC_gf_ZS_StoryArmyCategoryUsedInUI(lv_indexCategory) == true)) {
            lv_categoryIndex += 1;
            if ((libSwaC_gf_StoryArmyCategoryStateCheck(lv_indexCategory, c_armyCategoryStateUnlocked) == true)) {
                lv_unlockedUpgradeCount += 1;
                DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomArchivesUnitLabel[lv_categoryIndex], PlayerGroupAll(), true);
                DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomArchivesUnitPanel[lv_categoryIndex], PlayerGroupAll(), true);
                DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomArchivesUpgradeCheck[lv_categoryIndex][1], PlayerGroupAll(), true);
                DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomArchivesUpgradeLabel[lv_categoryIndex][1], PlayerGroupAll(), true);
                DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomArchivesUpgradeCheck[lv_categoryIndex][2], PlayerGroupAll(), true);
                DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomArchivesUpgradeLabel[lv_categoryIndex][2], PlayerGroupAll(), true);
                DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomArchivesUpgradeCheck[lv_categoryIndex][3], PlayerGroupAll(), true);
                DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomArchivesUpgradeLabel[lv_categoryIndex][3], PlayerGroupAll(), true);
                lv_lastCategory = lv_categoryIndex;
                lv_upgradeIndex = 0;
                autoCEC4248D_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUpgradeArray", 1);
                autoCEC4248D_ai = 1;
                while (autoCEC4248D_ai <= autoCEC4248D_ae) {
                    lv_indexUpgrade = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUpgradeArray["+IntToString(autoCEC4248D_ai-1)+"]", 1);
                    lv_upgradeIndex += 1;
                    if ((libSwaC_gf_ZS_StoryArmyUpgradeState(lv_indexUpgrade) == c_armyUpgradeStatePurchased)) {
                        libNtve_gf_SetDialogItemChecked(libSwaC_gv_zS_ArmyCustomArchivesUpgradeCheck[lv_categoryIndex][lv_upgradeIndex], true, PlayerGroupAll());
                    }
                    else {
                        libNtve_gf_SetDialogItemChecked(libSwaC_gv_zS_ArmyCustomArchivesUpgradeCheck[lv_categoryIndex][lv_upgradeIndex], false, PlayerGroupAll());
                    }
                    autoCEC4248D_ai = autoCEC4248D_ai + 1;
                }
                if ((libSwaC_gv_zS_InCompletedCampaign == true) && (libSwaC_gf_MissionStatusCheck(libSwaC_gf_StoryArmyCategoryEvolutionMission(lv_indexCategory), libSwaC_ge_MissionStatus_Locked) == false)) {
                    lv_unlockedEvolutionCount += 1;
                    DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomArchivesEvolutionCheck[lv_categoryIndex][1], PlayerGroupAll(), true);
                    DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomArchivesEvolutionLabel[lv_categoryIndex][1], PlayerGroupAll(), true);
                    DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomArchivesEvolutionCheck[lv_categoryIndex][2], PlayerGroupAll(), true);
                    DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomArchivesEvolutionLabel[lv_categoryIndex][2], PlayerGroupAll(), true);
                    DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomArchivesEvolutionDivider[lv_categoryIndex], PlayerGroupAll(), true);
                    lv_evoIndex = 0;
                    auto7F3C418D_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
                    auto7F3C418D_ai = 1;
                    while (auto7F3C418D_ai <= auto7F3C418D_ae) {
                        lv_indexUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(auto7F3C418D_ai-1)+"]", 1);
                        lv_evoIndex += 1;
                        if ((libSwaC_gf_ZS_StoryArmyUnitState(lv_indexUnit) == c_armyUnitStatePurchased)) {
                            libNtve_gf_SetDialogItemChecked(libSwaC_gv_zS_ArmyCustomArchivesEvolutionCheck[lv_categoryIndex][lv_evoIndex], true, PlayerGroupAll());
                        }
                        else {
                            libNtve_gf_SetDialogItemChecked(libSwaC_gv_zS_ArmyCustomArchivesEvolutionCheck[lv_categoryIndex][lv_evoIndex], false, PlayerGroupAll());
                        }
                        auto7F3C418D_ai = auto7F3C418D_ai + 1;
                    }
                }
                else {
                    DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomArchivesEvolutionCheck[lv_categoryIndex][1], PlayerGroupAll(), false);
                    DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomArchivesEvolutionLabel[lv_categoryIndex][1], PlayerGroupAll(), false);
                    DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomArchivesEvolutionCheck[lv_categoryIndex][2], PlayerGroupAll(), false);
                    DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomArchivesEvolutionLabel[lv_categoryIndex][2], PlayerGroupAll(), false);
                    DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomArchivesEvolutionDivider[lv_categoryIndex], PlayerGroupAll(), false);
                }
            }
            else {
                DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomArchivesUnitLabel[lv_categoryIndex], PlayerGroupAll(), false);
                DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomArchivesUnitPanel[lv_categoryIndex], PlayerGroupAll(), false);
                DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomArchivesUpgradeCheck[lv_categoryIndex][1], PlayerGroupAll(), false);
                DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomArchivesUpgradeLabel[lv_categoryIndex][1], PlayerGroupAll(), false);
                DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomArchivesUpgradeCheck[lv_categoryIndex][2], PlayerGroupAll(), false);
                DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomArchivesUpgradeLabel[lv_categoryIndex][2], PlayerGroupAll(), false);
                DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomArchivesUpgradeCheck[lv_categoryIndex][3], PlayerGroupAll(), false);
                DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomArchivesUpgradeLabel[lv_categoryIndex][3], PlayerGroupAll(), false);
                DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomArchivesEvolutionCheck[lv_categoryIndex][1], PlayerGroupAll(), false);
                DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomArchivesEvolutionLabel[lv_categoryIndex][1], PlayerGroupAll(), false);
                DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomArchivesEvolutionCheck[lv_categoryIndex][2], PlayerGroupAll(), false);
                DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomArchivesEvolutionLabel[lv_categoryIndex][2], PlayerGroupAll(), false);
            }
        }

        auto5C6C0B02_ai = auto5C6C0B02_ai + 1;
    }
    if ((lv_lastCategory > 0)) {
        DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomArchivesUpgradeDivider[lv_lastCategory], PlayerGroupAll(), false);
        DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomArchivesEvolutionDivider[lv_lastCategory], PlayerGroupAll(), false);
    }

    lv_sizeY = (1000 - ((7 - lv_unlockedUpgradeCount) * 80));
    if (((libSwaC_gv_zS_InCompletedCampaign == false) || (lv_unlockedEvolutionCount == 0))) {
        lv_sizeX = 1100;
        DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomArchivesEvolutionBorder, PlayerGroupAll(), false);
        DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomArchivesEvolutionBorderBG, PlayerGroupAll(), false);
        DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomArchivesEvolutionBorderTitle, PlayerGroupAll(), false);
        DialogControlSetPositionRelative(libSwaC_gv_zS_ArmyCustomArchivesUpgradeBorder, PlayerGroupAll(), c_anchorTopLeft, libSwaC_gv_zS_ArmyCustomArchivesSectionBG, c_anchorTopLeft, 225, 85);
    }
    else {
        lv_sizeX = 1530;
        DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomArchivesEvolutionBorder, PlayerGroupAll(), true);
        DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomArchivesEvolutionBorderBG, PlayerGroupAll(), true);
        DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomArchivesEvolutionBorderTitle, PlayerGroupAll(), true);
        DialogControlSetPositionRelative(libSwaC_gv_zS_ArmyCustomArchivesUpgradeBorder, PlayerGroupAll(), c_anchorTopLeft, libSwaC_gv_zS_ArmyCustomArchivesSectionBG, c_anchorTopLeft, 225, 75);
    }
    DialogControlSetSize(libSwaC_gv_zS_ArmyCustomArchivesPanel, PlayerGroupAll(), lv_sizeX, lv_sizeY);
    DialogControlSetSize(libSwaC_gv_zS_ArmyCustomArchivesUpgradeBorder, PlayerGroupAll(), DialogControlGetWidth(libSwaC_gv_zS_ArmyCustomArchivesUpgradeBorder, 1), (lv_sizeY - 400));
    DialogControlSetSize(libSwaC_gv_zS_ArmyCustomArchivesEvolutionBorder, PlayerGroupAll(), DialogControlGetWidth(libSwaC_gv_zS_ArmyCustomArchivesEvolutionBorder, 1), (lv_sizeY - 400));
    Wait(0.125, c_timeGame);
    libSwaC_gv_zS_ArmyCustomArchivesUpdatingData = false;
    return true;
}

void libSwaC_gf_ZS_ArmyUIArchivesUpdateData () {
    // Variable Declarations
    int lv_categoryIndex;
    int lv_upgradeIndex;
    int lv_evoIndex;
    int lv_indexSelection;
    string lv_indexCategory;
    string lv_indexUpgrade;
    string lv_indexUnit;

    // Automatic Variable Declarations
    int auto2DC84E35_ae;
    int auto2DC84E35_ai;
    int autoD1C4A0D9_ae;
    int autoD1C4A0D9_ai;
    int autoED680A22_ae;
    int autoED680A22_ai;

    // Variable Initialization

    // Implementation
    auto2DC84E35_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto2DC84E35_ai = 1;
    while (auto2DC84E35_ai <= auto2DC84E35_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto2DC84E35_ai);
        if ((libSwaC_gf_ZS_StoryArmyCategoryUsedInUI(lv_indexCategory) == true)) {
            lv_categoryIndex += 1;
            if ((libSwaC_gf_StoryArmyCategoryStateCheck(lv_indexCategory, c_armyCategoryStateUnlocked) == true)) {
                lv_upgradeIndex = 0;
                autoD1C4A0D9_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUpgradeArray", 1);
                autoD1C4A0D9_ai = 1;
                while (autoD1C4A0D9_ai <= autoD1C4A0D9_ae) {
                    lv_indexUpgrade = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUpgradeArray["+IntToString(autoD1C4A0D9_ai-1)+"]", 1);
                    lv_upgradeIndex += 1;
                    if ((libNtve_gf_DialogItemIsChecked(libSwaC_gv_zS_ArmyCustomArchivesUpgradeCheck[lv_categoryIndex][lv_upgradeIndex], 1) == true)) {
                        libSwaC_gf_ZS_SetArmyUpgradeState(lv_indexUpgrade, c_armyUpgradeStatePurchased);
                    }
                    else {
                        libSwaC_gf_ZS_SetArmyUpgradeState(lv_indexUpgrade, c_armyUpgradeStateUnlocked);
                    }
                    autoD1C4A0D9_ai = autoD1C4A0D9_ai + 1;
                }
                if ((libSwaC_gv_zS_InCompletedCampaign == true) && (libSwaC_gf_MissionStatusCheck(libSwaC_gf_StoryArmyCategoryEvolutionMission(lv_indexCategory), libSwaC_ge_MissionStatus_Locked) == false)) {
                    lv_evoIndex = 0;
                    autoED680A22_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
                    autoED680A22_ai = 1;
                    while (autoED680A22_ai <= autoED680A22_ae) {
                        lv_indexUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(autoED680A22_ai-1)+"]", 1);
                        lv_evoIndex += 1;
                        if ((libNtve_gf_DialogItemIsChecked(libSwaC_gv_zS_ArmyCustomArchivesEvolutionCheck[lv_categoryIndex][lv_evoIndex], 1) == true)) {
                            libSwaC_gf_ZS_SetArmyUnitState(lv_indexUnit, c_armyUnitStatePurchased);
                        }
                        else {
                            libSwaC_gf_ZS_SetArmyUnitState(lv_indexUnit, c_armyUnitStateUnlocked);
                        }
                        autoED680A22_ai = autoED680A22_ai + 1;
                    }
                }

            }

        }

        auto2DC84E35_ai = auto2DC84E35_ai + 1;
    }
}

void libSwaC_gf_ZS_ArmyUIArchivesClose () {
    // Automatic Variable Declarations
    // Implementation
    DialogSetVisible(libSwaC_gv_zS_ArmyCustomArchivesDialog, PlayerGroupAll(), false);
    TriggerStop(libSwaC_gt_ZS_ArmyUIArchivesRunning);
}

text libSwaC_gf_StoryArmyCategoryName (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogArmyCategory, (lp_armyCategory), "Name", 1));
}

text libSwaC_gf_StoryArmyCategoryName2 (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogArmyCategory, (lp_armyCategory), "Description", 1));
}

string libSwaC_gf_StoryArmyCategoryIcon (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogArmyCategory, (lp_armyCategory), "Icon", c_playerAny));
}

bool libSwaC_gf_StoryArmyCategoryStateCheck (string lp_armyCategory, int lp_state) {
    // Automatic Variable Declarations
    // Implementation
    return (libSwaC_gf_ZS_StoryArmyCategoryState(lp_armyCategory) == lp_state);
}

string libSwaC_gf_StoryArmyCategoryPlanetCamera (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetString("TechUnit", libSwaC_gf_ZS_TechUnitOfArmyCategory(lp_armyCategory), "PlanetPanelCamera", 1);
}

string libSwaC_gf_StoryArmyCategoryEvolutionMission (string lp_armyCategory) {
    // Variable Declarations
    string lv_indexMission;

    // Automatic Variable Declarations
    int autoD8DD77C8_ae;
    int autoD8DD77C8_ai;

    // Variable Initialization

    // Implementation
    autoD8DD77C8_ae = CatalogEntryCount(c_gameCatalogMap);
    autoD8DD77C8_ai = 1;
    while (autoD8DD77C8_ai <= autoD8DD77C8_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoD8DD77C8_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Upgrade") {
            if ((libSwaC_gf_MissionArmyCategoryUnlocked(lv_indexMission) == lp_armyCategory)) {
                return lv_indexMission;
            }

        }
        autoD8DD77C8_ai = autoD8DD77C8_ai + 1;
    }
    return null;
}

void libSwaC_gf_ZS_SetArmyCategoryState (string lp_armyCategory, int lp_state) {
    // Variable Declarations
    string lv_indexUpgrade;

    // Automatic Variable Declarations
    int autoD2A2B6B7_ae;
    int autoD2A2B6B7_ai;

    // Variable Initialization

    // Implementation
    if ((libSwaC_gf_ZS_StoryArmyCategoryState(lp_armyCategory) == lp_state)) {
        return ;
    }

    DataTableSetInt(true, (libSwaC_gv_zSC_ArmyCategoryStateKey + (lp_armyCategory)), (lp_state));
    if ((libSwaC_gf_ZS_ArmyCategoryMorphCategory(lp_armyCategory, 1) != null)) {
        DataTableSetInt(true, (libSwaC_gv_zSC_ArmyCategoryStateKey + (libSwaC_gf_ZS_ArmyCategoryMorphCategory(lp_armyCategory, 1))), (lp_state));
    }

    if ((lp_state == c_armyCategoryStateLocked)) {
        autoD2A2B6B7_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lp_armyCategory, "ArmyUpgradeArray", 1);
        autoD2A2B6B7_ai = 1;
        while (autoD2A2B6B7_ai <= autoD2A2B6B7_ae) {
            lv_indexUpgrade = CatalogFieldValueGet(c_gameCatalogArmyCategory, lp_armyCategory, "ArmyUpgradeArray["+IntToString(autoD2A2B6B7_ai-1)+"]", 1);
            libSwaC_gf_ZS_SetArmyUpgradeState(lv_indexUpgrade, c_armyUpgradeStateLocked);
            autoD2A2B6B7_ai = autoD2A2B6B7_ai + 1;
        }
    }

}

void libSwaC_gf_ZS_UpdateArmyCategoryStates (int lp_player) {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexMission;
    string lv_missionCategory;
    string lv_requiredMission;

    // Automatic Variable Declarations
    int autoB11A3FD0_ae;
    int autoB11A3FD0_ai;
    int auto071DCEC4_ae;
    int auto071DCEC4_ai;
    int auto39314A95_ae;
    int auto39314A95_ai;

    // Variable Initialization

    // Implementation
    autoB11A3FD0_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    autoB11A3FD0_ai = 1;
    while (autoB11A3FD0_ai <= autoB11A3FD0_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, autoB11A3FD0_ai);
        DataTableSetBool(false, (lv_indexCategory), false);
        autoB11A3FD0_ai = autoB11A3FD0_ai + 1;
    }
    if ((libSwaC_gf_MissionStatusCheck("ZLab3", libSwaC_ge_MissionStatus_Completed) == true)) {
        DataTableSetBool(false, ("SpineCrawler"), true);
        DataTableSetBool(false, ("SporeCrawler"), true);
    }

    auto071DCEC4_ae = CatalogEntryCount(c_gameCatalogMap);
    auto071DCEC4_ai = 1;
    while (auto071DCEC4_ai <= auto071DCEC4_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto071DCEC4_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            if ((libSwaC_gf_MissionStatusCheck(lv_indexMission, libSwaC_ge_MissionStatus_Completed) == true)) {
                lv_missionCategory = libSwaC_gf_MissionArmyCategoryUnlocked(lv_indexMission);
                if ((lv_missionCategory != null)) {
                    DataTableSetBool(false, (lv_missionCategory), true);
                }

            }

        }
        auto071DCEC4_ai = auto071DCEC4_ai + 1;
    }
    auto39314A95_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto39314A95_ai = 1;
    while (auto39314A95_ai <= auto39314A95_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto39314A95_ai);
        if ((libSwaC_gf_ZS_StoryArmyCategoryIsMorph(lv_indexCategory) == false)) {
            if ((DataTableGetBool(false, (lv_indexCategory)) == true)) {
                libSwaC_gf_ZS_SetArmyCategoryState(lv_indexCategory, c_armyCategoryStateUnlocked);
            }
            else {
                libSwaC_gf_ZS_SetArmyCategoryState(lv_indexCategory, c_armyCategoryStateLocked);
            }
        }

        auto39314A95_ai = auto39314A95_ai + 1;
    }
}

string libSwaC_gf_ZS_TechUnitOfArmyCategory (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataInstanceFromReference(CatalogFieldValueGet(c_gameCatalogArmyCategory, (lp_armyCategory), "UserReference", 1));
}

string libSwaC_gf_ZS_ArmyCategoryOfTechUnit (string lp_techUnit) {
    // Variable Declarations
    string lv_indexCategory;

    // Automatic Variable Declarations
    int autoED4A312F_ae;
    int autoED4A312F_ai;

    // Variable Initialization

    // Implementation
    autoED4A312F_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    autoED4A312F_ai = 1;
    while (autoED4A312F_ai <= autoED4A312F_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, autoED4A312F_ai);
        if ((libSwaC_gf_ZS_TechUnitOfArmyCategory(lv_indexCategory) == lp_techUnit)) {
            return lv_indexCategory;
        }

        autoED4A312F_ai = autoED4A312F_ai + 1;
    }
    return null;
}

string libSwaC_gf_ZS_StoryArmyCategoryUnitType (string lp_armyCategory) {
    // Variable Declarations
    string lv_value;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_value = "";

    // Implementation
    if ((lp_armyCategory == null)) {
        return null;
    }

    lv_value = CatalogFieldValueGet(c_gameCatalogArmyCategory, (lp_armyCategory), "Unit", 1);
    return (lv_value);
}

int libSwaC_gf_ZS_StoryArmyCategoryState (string lp_armyCategory) {
    // Variable Declarations
    int lv_value;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_value = DataTableGetInt(true, (libSwaC_gv_zSC_ArmyCategoryStateKey + (lp_armyCategory)));
    return lv_value;
}

string libSwaC_gf_ZS_ArmyCategoryMorphCategory (string lp_armyCategory, int lp_index) {
    // Variable Declarations
    string lv_indexUnit;

    // Automatic Variable Declarations
    int auto7D066174_ae;
    int auto7D066174_ai;

    // Variable Initialization

    // Implementation
    auto7D066174_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lp_armyCategory, "ArmyUnitArray", 1);
    auto7D066174_ai = 1;
    while (auto7D066174_ai <= auto7D066174_ae) {
        lv_indexUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lp_armyCategory, "ArmyUnitArray["+IntToString(auto7D066174_ai-1)+"]", 1);
        if ((libSwaC_gf_ZS_ArmyUnitMorphUnit(lv_indexUnit, 1) != null)) {
            return libSwaC_gf_ZS_ArmyCategoryOfArmyUnit(libSwaC_gf_ZS_ArmyUnitMorphUnit(lv_indexUnit, 1));
        }

        auto7D066174_ai = auto7D066174_ai + 1;
    }
    return null;
}

bool libSwaC_gf_ZS_StoryArmyCategoryUsedInUI (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogArmyCategory, (lp_armyCategory), "Flags[Hidden]", 1) == "0");
}

bool libSwaC_gf_ZS_StoryArmyCategoryIsMorph (string lp_armyCategory) {
    // Variable Declarations
    string lv_indexCategory;

    // Automatic Variable Declarations
    int auto713A611D_ae;
    int auto713A611D_ai;

    // Variable Initialization

    // Implementation
    auto713A611D_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto713A611D_ai = 1;
    while (auto713A611D_ai <= auto713A611D_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto713A611D_ai);
        if ((libSwaC_gf_ZS_ArmyCategoryMorphCategory(lv_indexCategory, 1) == lp_armyCategory)) {
            return true;
        }

        auto713A611D_ai = auto713A611D_ai + 1;
    }
    return false;
}

string libSwaC_gf_ZS_StoryArmyCategoryPurchasedUnit (string lp_armyCategory) {
    // Variable Declarations
    string lv_indexArmyUnit;

    // Automatic Variable Declarations
    int auto73386760_ae;
    int auto73386760_ai;

    // Variable Initialization

    // Implementation
    auto73386760_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lp_armyCategory, "ArmyUnitArray", 1);
    auto73386760_ai = 1;
    while (auto73386760_ai <= auto73386760_ae) {
        lv_indexArmyUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lp_armyCategory, "ArmyUnitArray["+IntToString(auto73386760_ai-1)+"]", 1);
        if ((libSwaC_gf_ZS_StoryArmyUnitState(lv_indexArmyUnit) == c_armyUnitStatePurchased)) {
            return lv_indexArmyUnit;
        }

        auto73386760_ai = auto73386760_ai + 1;
    }
    return null;
}

bool libSwaC_gf_ZS_StoryArmyCategoryAllowedForMap (string lp_armyCategory, string lp_mission) {
    // Automatic Variable Declarations
    string autoDF80074A_val;

    // Implementation
    if ((libSwaC_gf_StoryMapTypeCheck(lp_mission, c_mapKindMission) == false)) {
        return true;
    }

    autoDF80074A_val = lp_armyCategory;
    if (autoDF80074A_val == "Aberration") {
        if (((lp_mission == "ZLab1") || (lp_mission == "ZLab2") || (lp_mission == "ZLab3") || (lp_mission == "ZChar1") || (lp_mission == "ZChar2") || (lp_mission == "ZChar3"))) {
            return false;
        }
        else {
            return true;
        }
    }
    else if (autoDF80074A_val == "Baneling") {
        if (((lp_mission == "ZLab1") || (lp_mission == "ZLab2") || (lp_mission == "ZLab3") || (lp_mission == "ZChar1"))) {
            return false;
        }
        else {
            return true;
        }
    }
    else if (autoDF80074A_val == "Hydralisk") {
        if (((lp_mission == "ZLab1") || (lp_mission == "ZLab2") || (lp_mission == "ZLab3") || (lp_mission == "ZExpedition1") || (lp_mission == "ZExpedition2"))) {
            return false;
        }
        else {
            return true;
        }
    }
    else if (autoDF80074A_val == "Infestor") {
        if (((lp_mission == "ZLab1") || (lp_mission == "ZLab2") || (lp_mission == "ZLab3") || (lp_mission == "ZExpedition1") || (lp_mission == "ZExpedition2") || (lp_mission == "ZExpedition3") || (lp_mission == "ZChar1") || (lp_mission == "ZChar2") || (lp_mission == "ZChar3") || (lp_mission == "ZZerus1") || (lp_mission == "ZZerus2") || (lp_mission == "ZZerus3") || (lp_mission == "ZHybrid1"))) {
            return false;
        }
        else {
            return true;
        }
    }
    else if (autoDF80074A_val == "Mutalisk") {
        if (((lp_mission == "ZLab1") || (lp_mission == "ZLab2") || (lp_mission == "ZLab3") || (lp_mission == "ZZerus1"))) {
            return false;
        }
        else {
            return true;
        }
    }
    else if (autoDF80074A_val == "Roach") {
        if (((lp_mission == "ZLab1") || (lp_mission == "ZLab2") || (lp_mission == "ZLab3") || (lp_mission == "ZExpedition1"))) {
            return false;
        }
        else {
            return true;
        }
    }
    else if (autoDF80074A_val == "SwarmHost") {
        if (((lp_mission == "ZLab1") || (lp_mission == "ZLab2") || (lp_mission == "ZLab3") || (lp_mission == "ZZerus1") || (lp_mission == "ZZerus2"))) {
            return false;
        }
        else {
            return true;
        }
    }
    else if (autoDF80074A_val == "Ultralisk") {
        if (((lp_mission == "ZLab1") || (lp_mission == "ZLab2") || (lp_mission == "ZLab3") || (lp_mission == "ZExpedition1") || (lp_mission == "ZExpedition2") || (lp_mission == "ZExpedition3") || (lp_mission == "ZChar1") || (lp_mission == "ZChar2") || (lp_mission == "ZChar3") || (lp_mission == "ZZerus1") || (lp_mission == "ZZerus2") || (lp_mission == "ZZerus3") || (lp_mission == "ZHybrid1") || (lp_mission == "ZHybrid2") || (lp_mission == "ZHybrid3"))) {
            return false;
        }
        else {
            return true;
        }
    }
    else if (autoDF80074A_val == "Zergling") {
        if ((lp_mission == "ZLab1")) {
            return false;
        }
        else {
            return true;
        }
    }
    else {
    }
    return false;
}

string libSwaC_gf_ZS_ArmyUltraUpgradeRequiredMission (string lp_armyCategory) {
    // Variable Declarations
    string lv_indexMission;

    // Automatic Variable Declarations
    int autoD5BDFB83_ae;
    int autoD5BDFB83_ai;

    // Variable Initialization

    // Implementation
    if ((lp_armyCategory == "Hydralisk") && (libSwaC_gf_MissionStatusAge("ZExpedition2", libSwaC_ge_MissionStatus_Completed) > libSwaC_gf_MissionStatusAge("ZZerus3", libSwaC_ge_MissionStatus_Completed))) {
        return "ZZerus3";
    }

    if ((lp_armyCategory == "Zergling") && (libSwaC_gf_MissionStatusAge("ZExpedition2", libSwaC_ge_MissionStatus_Completed) > libSwaC_gf_MissionStatusAge("ZChar2", libSwaC_ge_MissionStatus_Completed))) {
        return "ZExpedition2";
    }

    autoD5BDFB83_ae = CatalogEntryCount(c_gameCatalogMap);
    autoD5BDFB83_ai = 1;
    while (autoD5BDFB83_ai <= autoD5BDFB83_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoD5BDFB83_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            if ((libSwaC_gf_MissionArmyEvolutionUnlocked(lv_indexMission) == lp_armyCategory)) {
                return lv_indexMission;
            }

        }
        autoD5BDFB83_ai = autoD5BDFB83_ai + 1;
    }
    return null;
}

void libSwaC_gf_SetArmyUpgradeState (string lp_armyUpgrade, int lp_state, int lp_player) {
    // Variable Declarations
    string lv_armyCategory;
    int lv_upgradeCount;
    string lv_indexUpgrade;
    string lv_indexUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_armyCategory = libSwaC_gf_ZS_StoryArmyUpgradeCategory(lp_armyUpgrade);
    if ((lv_armyCategory == null)) {
        return ;
    }

    if ((libSwaC_gf_ZS_StoryArmyCategoryState(lv_armyCategory) != c_armyCategoryStateUnlocked)) {
        libSwaC_gf_ZS_SetArmyCategoryState(lv_armyCategory, c_armyCategoryStateUnlocked);
    }

    libSwaC_gf_ZS_SetArmyUpgradeState(lp_armyUpgrade, lp_state);
    libSwaC_gf_ZS_ApplyArmyTech(lp_player);
}

int libSwaC_gf_ZS_StoryArmyUpgradeState (string lp_upgrade) {
    // Variable Declarations
    int lv_value;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_value = DataTableGetInt(true, (libSwaC_gv_zSC_ArmyUpgradeStateKey + (lp_upgrade)));
    return lv_value;
}

int libSwaC_gf_StoryArmyUpgradeCost (string lp_armyUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return StringToInt(CatalogFieldValueGet(c_gameCatalogArmyUpgrade, (lp_armyUpgrade), "Cost", 1));
}

void libSwaC_gf_ZS_UpdateArmyUpgradeStates () {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexUpgrade;

    // Automatic Variable Declarations
    int auto9928DD89_ae;
    int auto9928DD89_ai;
    int autoFA06550C_val;
    int auto313FAE5F_ae;
    int auto313FAE5F_ai;
    int autoAB544641_ae;
    int autoAB544641_ai;

    // Variable Initialization

    // Implementation
    auto9928DD89_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto9928DD89_ai = 1;
    while (auto9928DD89_ai <= auto9928DD89_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto9928DD89_ai);
        if ((libSwaC_gf_ZS_StoryArmyCategoryUsedInUI(lv_indexCategory) == true)) {
            autoFA06550C_val = libSwaC_gf_ZS_StoryArmyCategoryState(lv_indexCategory);
            if (autoFA06550C_val == c_armyCategoryStateLocked) {
                auto313FAE5F_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUpgradeArray", 1);
                auto313FAE5F_ai = 1;
                while (auto313FAE5F_ai <= auto313FAE5F_ae) {
                    lv_indexUpgrade = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUpgradeArray["+IntToString(auto313FAE5F_ai-1)+"]", 1);
                    libSwaC_gf_ZS_SetArmyUpgradeState(lv_indexUpgrade, c_armyUpgradeStateLocked);
                    auto313FAE5F_ai = auto313FAE5F_ai + 1;
                }
            }
            else if (autoFA06550C_val == c_armyCategoryStateUnlocked) {
                autoAB544641_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUpgradeArray", 1);
                autoAB544641_ai = 1;
                while (autoAB544641_ai <= autoAB544641_ae) {
                    lv_indexUpgrade = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUpgradeArray["+IntToString(autoAB544641_ai-1)+"]", 1);
                    if ((libSwaC_gf_ZS_StoryArmyUpgradeState(lv_indexUpgrade) != c_armyUpgradeStatePurchased)) {
                        libSwaC_gf_ZS_SetArmyUpgradeState(lv_indexUpgrade, c_armyUpgradeStateUnlocked);
                    }

                    autoAB544641_ai = autoAB544641_ai + 1;
                }
            }
            else {
            }
        }

        auto9928DD89_ai = auto9928DD89_ai + 1;
    }
}

void libSwaC_gf_ZS_SetArmyUpgradeState (string lp_armyUpgrade, int lp_state) {
    // Variable Declarations
    string lv_armyCategory;
    string lv_indexUpgrade;

    // Automatic Variable Declarations
    int auto48C2D82D_ae;
    int auto48C2D82D_ai;

    // Variable Initialization

    // Implementation
    if (((lp_armyUpgrade == null) || (libSwaC_gf_ZS_StoryArmyUpgradeState(lp_armyUpgrade) == lp_state))) {
        return ;
    }

    lv_armyCategory = libSwaC_gf_ZS_StoryArmyUpgradeCategory(lp_armyUpgrade);
    if ((lp_state == c_armyUpgradeStatePurchased)) {
        auto48C2D82D_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_armyCategory, "ArmyUpgradeArray", 1);
        auto48C2D82D_ai = 1;
        while (auto48C2D82D_ai <= auto48C2D82D_ae) {
            lv_indexUpgrade = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_armyCategory, "ArmyUpgradeArray["+IntToString(auto48C2D82D_ai-1)+"]", 1);
            libSwaC_gf_ZS_SetArmyUpgradeStateCore(lv_indexUpgrade, c_armyUpgradeStateUnlocked);
            auto48C2D82D_ai = auto48C2D82D_ai + 1;
        }
    }

    libSwaC_gf_ZS_SetArmyUpgradeStateCore(lp_armyUpgrade, lp_state);
}

void libSwaC_gf_ZS_SetArmyUpgradeStateCore (string lp_armyUpgrade, int lp_state) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(true, (libSwaC_gv_zSC_ArmyUpgradeStateKey + (lp_armyUpgrade)), (lp_state));
}

text libSwaC_gf_ZS_StoryArmyUpgradeName (string lp_armyUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogArmyUpgrade, (lp_armyUpgrade), "Name", 1));
}

text libSwaC_gf_ZS_StoryArmyUpgradeDescription (string lp_armyUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogArmyUpgrade, (lp_armyUpgrade), "Description", 1));
}

string libSwaC_gf_ZS_StoryArmyUpgradeIcon (string lp_armyUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogArmyUpgrade, (lp_armyUpgrade), "Icon", 1));
}

string libSwaC_gf_ZS_StoryArmyUpgradeMovie (string lp_armyUpgrade) {
    // Variable Declarations
    string lv_moviePath;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_moviePath = "";

    // Implementation
    lv_moviePath = CatalogFieldValueGet(c_gameCatalogArmyUpgrade, (lp_armyUpgrade), "Movie", 1);
    return (lv_moviePath);
}

string libSwaC_gf_ZS_StoryArmyUpgradeCategory (string lp_armyUpgrade) {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexUpgrade;

    // Automatic Variable Declarations
    int auto2DB99A41_ae;
    int auto2DB99A41_ai;
    int auto9F096F7E_ae;
    int auto9F096F7E_ai;

    // Variable Initialization

    // Implementation
    auto2DB99A41_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto2DB99A41_ai = 1;
    while (auto2DB99A41_ai <= auto2DB99A41_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto2DB99A41_ai);
        auto9F096F7E_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUpgradeArray", 1);
        auto9F096F7E_ai = 1;
        while (auto9F096F7E_ai <= auto9F096F7E_ae) {
            lv_indexUpgrade = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUpgradeArray["+IntToString(auto9F096F7E_ai-1)+"]", 1);
            if ((lv_indexUpgrade == lp_armyUpgrade)) {
                return lv_indexCategory;
            }

            auto9F096F7E_ai = auto9F096F7E_ai + 1;
        }
        auto2DB99A41_ai = auto2DB99A41_ai + 1;
    }
    return null;
}

text libSwaC_gf_ZS_StoryArmyUpgradeTooltip (string lp_armyUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogArmyUpgrade, (lp_armyUpgrade), "Tooltip", 1));
}

string libSwaC_gf_ZS_StoryArmyUpgradeUserData (string lp_armyUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataInstanceFromReference(CatalogFieldValueGet(c_gameCatalogArmyUpgrade, (lp_armyUpgrade), "UserReference", 1));
}

bool libSwaC_gf_ZS_StoryArmyCategoryUpgradePurchased (string lp_category) {
    // Variable Declarations
    string lv_indexUpgrade;
    bool lv_completed;

    // Automatic Variable Declarations
    int auto7AE91A92_ae;
    int auto7AE91A92_ai;

    // Variable Initialization

    // Implementation
    auto7AE91A92_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lp_category, "ArmyUpgradeArray", 1);
    auto7AE91A92_ai = 1;
    while (auto7AE91A92_ai <= auto7AE91A92_ae) {
        lv_indexUpgrade = CatalogFieldValueGet(c_gameCatalogArmyCategory, lp_category, "ArmyUpgradeArray["+IntToString(auto7AE91A92_ai-1)+"]", 1);
        if ((libSwaC_gf_ZS_StoryArmyUpgradeState(lv_indexUpgrade) == c_armyUpgradeStatePurchased)) {
            return true;
        }

        auto7AE91A92_ai = auto7AE91A92_ai + 1;
    }
    return false;
}

text libSwaC_gf_ZS_StoryArmyUpgradeResults (string lp_armyUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("ArmyUpgrade", libSwaC_gf_ZS_StoryArmyUpgradeUserData(lp_armyUpgrade), "Results", 1);
}

text libSwaC_gf_ZS_StoryArmyUpgradeResultsTitle (string lp_armyUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("ArmyUpgrade", libSwaC_gf_ZS_StoryArmyUpgradeUserData(lp_armyUpgrade), "ResultsTitle", 1);
}

string libSwaC_gf_StoryArmyUnitInCategory (string lp_category, int lp_index) {
    // Variable Declarations
    string lv_armyUnitString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_armyUnitString = "";

    // Implementation
    lv_armyUnitString = libSwaC_gf_ZS_CatalogGetFieldArrayValue(c_gameCatalogArmyCategory, (lp_category), "ArmyUnitArray", lp_index, 1);
    return (lv_armyUnitString);
}

text libSwaC_gf_StoryArmyUnitName (string lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogArmyUnit, (lp_armyUnit), "Name", 1));
}

text libSwaC_gf_StoryArmyUnitTooltip (string lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("TechUnit", libSwaC_gf_ZS_TechUnitOfArmyUnit(lp_armyUnit), "TechnologyTooltip", 1);
}

text libSwaC_gf_StoryArmyUnitArmyName (string lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("TechUnit", libSwaC_gf_ZS_TechUnitOfArmyUnit(lp_armyUnit), "ArmyUnitName", 1);
}

int libSwaC_gf_StoryArmyUnitCost (string lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return StringToInt(CatalogFieldValueGet(c_gameCatalogArmyUnit, (lp_armyUnit), "Cost", 1));
}

string libSwaC_gf_ZS_ArmyUnitPlanetPanelCamera (string lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetString("TechUnit", libSwaC_gf_ZS_TechUnitOfArmyUnit(lp_armyUnit), "PlanetPanelCamera", 1);
}

string libSwaC_gf_ZS_ArmyUnitBonusMissionCamera (string lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetString("TechUnit", libSwaC_gf_ZS_TechUnitOfArmyUnit(lp_armyUnit), "BonusMissionCamera", 1);
}

string libSwaC_gf_ZS_TechUnitOfArmyUnit (string lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataInstanceFromReference(CatalogFieldValueGet(c_gameCatalogArmyUnit, (lp_armyUnit), "UserReference", 1));
}

string libSwaC_gf_ZS_StoryArmyUnitUnitType (string lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogArmyUnit, (lp_armyUnit), "Unit", 1));
}

string libSwaC_gf_ZS_ArmyUnitOfTechUnit (string lp_armyUnit) {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexUnit;

    // Automatic Variable Declarations
    int auto0463F6B2_ae;
    int auto0463F6B2_ai;
    int auto1C775F76_ae;
    int auto1C775F76_ai;

    // Variable Initialization

    // Implementation
    auto0463F6B2_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto0463F6B2_ai = 1;
    while (auto0463F6B2_ai <= auto0463F6B2_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto0463F6B2_ai);
        auto1C775F76_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
        auto1C775F76_ai = 1;
        while (auto1C775F76_ai <= auto1C775F76_ae) {
            lv_indexUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(auto1C775F76_ai-1)+"]", 1);
            if ((libSwaC_gf_ZS_TechUnitOfArmyUnit(lv_indexUnit) == lp_armyUnit)) {
                return lv_indexUnit;
            }

            auto1C775F76_ai = auto1C775F76_ai + 1;
        }
        auto0463F6B2_ai = auto0463F6B2_ai + 1;
    }
    return null;
}

string libSwaC_gf_ZS_ArmyUnitMorphUnit (string lp_armyUnit, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_armyUnit != null)) {
        return UserDataGetGameLink("TechUnit", libSwaC_gf_ZS_TechUnitOfArmyUnit(lp_armyUnit), "MorphArmyUnit", lp_index);
    }
    else {
        return null;
    }
}

text libSwaC_gf_ZS_ArmyUnitDescription (string lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogArmyUnit, lp_armyUnit, "Description", 1));
}

text libSwaC_gf_ZS_ArmyUnitTooltip (string lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("TechUnit", libSwaC_gf_ZS_TechUnitOfArmyUnit(lp_armyUnit), "TechnologyTooltip", 1);
}

text libSwaC_gf_ZS_ArmyUnitTitle (string lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("TechUnit", libSwaC_gf_ZS_TechUnitOfArmyUnit(lp_armyUnit), "TechnologyTitle", 1);
}

string libSwaC_gf_ZS_ArmyCategoryOfArmyUnit (string lp_armyUnit) {
    // Variable Declarations
    string lv_indexUnit;
    string lv_indexCategory;

    // Automatic Variable Declarations
    int auto36EB8A81_ae;
    int auto36EB8A81_ai;
    int auto35BA1C47_ae;
    int auto35BA1C47_ai;

    // Variable Initialization

    // Implementation
    auto36EB8A81_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto36EB8A81_ai = 1;
    while (auto36EB8A81_ai <= auto36EB8A81_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto36EB8A81_ai);
        auto35BA1C47_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
        auto35BA1C47_ai = 1;
        while (auto35BA1C47_ai <= auto35BA1C47_ae) {
            lv_indexUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(auto35BA1C47_ai-1)+"]", 1);
            if ((lv_indexUnit == lp_armyUnit)) {
                return lv_indexCategory;
            }

            auto35BA1C47_ai = auto35BA1C47_ai + 1;
        }
        auto36EB8A81_ai = auto36EB8A81_ai + 1;
    }
    return null;
}

int libSwaC_gf_ZS_StoryArmyUnitState (string lp_armyUnit) {
    // Variable Declarations
    int lv_value;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_value = DataTableGetInt(true, (libSwaC_gv_zSC_ArmyUnitStateKey + (lp_armyUnit)));
    return lv_value;
}

string libSwaC_gf_ZS_StoryArmyUnitMovie (string lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogArmyUnit, (lp_armyUnit), "Movie", 1));
}

string libSwaC_gf_ZS_StoryArmyUnitEnableButton (string lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return CatalogFieldValueGet(c_gameCatalogArmyUnit, lp_armyUnit, "EnableButton", 1);
}

void libSwaC_gf_ZS_SetArmyUnitState (string lp_armyUnit, int lp_state) {
    // Variable Declarations
    string lv_indexUpgrade;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    DataTableSetInt(true, (libSwaC_gv_zSC_ArmyUnitStateKey + (lp_armyUnit)), (lp_state));
    if ((libSwaC_gf_ZS_ArmyUnitMorphUnit(lp_armyUnit, 1) != null)) {
        DataTableSetInt(true, (libSwaC_gv_zSC_ArmyUnitStateKey + (libSwaC_gf_ZS_ArmyUnitMorphUnit(lp_armyUnit, 1))), (lp_state));
    }

}

void libSwaC_gf_ZS_PurchaseArmyUnit (string lp_armyUnit) {
    // Variable Declarations
    string lv_indexUnit;

    // Automatic Variable Declarations
    int auto532255F9_ae;
    int auto532255F9_ai;

    // Variable Initialization

    // Implementation
    auto532255F9_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, libSwaC_gf_ZS_ArmyCategoryOfArmyUnit(lp_armyUnit), "ArmyUnitArray", 1);
    auto532255F9_ai = 1;
    while (auto532255F9_ai <= auto532255F9_ae) {
        lv_indexUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, libSwaC_gf_ZS_ArmyCategoryOfArmyUnit(lp_armyUnit), "ArmyUnitArray["+IntToString(auto532255F9_ai-1)+"]", 1);
        if ((lv_indexUnit == lp_armyUnit)) {
            libSwaC_gf_ZS_SetArmyUnitState(lv_indexUnit, c_armyUnitStatePurchased);
        }
        else {
            libSwaC_gf_ZS_SetArmyUnitState(lv_indexUnit, c_armyUnitStateLocked);
        }
        auto532255F9_ai = auto532255F9_ai + 1;
    }
}

void libSwaC_gf_ZS_UpdateArmyUnitStates () {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexArmyUnit;

    // Automatic Variable Declarations
    int autoBE951189_ae;
    int autoBE951189_ai;
    int autoEE038111_ae;
    int autoEE038111_ai;

    // Variable Initialization

    // Implementation
    autoBE951189_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    autoBE951189_ai = 1;
    while (autoBE951189_ai <= autoBE951189_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, autoBE951189_ai);
        if ((libSwaC_gf_ZS_StoryArmyCategoryUsedInUI(lv_indexCategory) == true)) {
            autoEE038111_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
            autoEE038111_ai = 1;
            while (autoEE038111_ai <= autoEE038111_ae) {
                lv_indexArmyUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(autoEE038111_ai-1)+"]", 1);
                if (((libSwaC_gf_ZS_StoryArmyCategoryState(lv_indexCategory) == c_armyCategoryStateLocked) || (libSwaC_gf_MissionStatusCheck(libSwaC_gf_StoryArmyCategoryEvolutionMission(lv_indexCategory), libSwaC_ge_MissionStatus_Locked) == true))) {
                    libSwaC_gf_ZS_SetArmyUnitState(lv_indexArmyUnit, c_armyUnitStateLocked);
                }
                else {
                    if ((libSwaC_gf_ZS_StoryArmyUnitState(lv_indexArmyUnit) != c_armyUnitStatePurchased)) {
                        libSwaC_gf_ZS_SetArmyUnitState(lv_indexArmyUnit, c_armyUnitStateUnlocked);
                    }

                }
                autoEE038111_ai = autoEE038111_ai + 1;
            }
        }

        autoBE951189_ai = autoBE951189_ai + 1;
    }
}

void libSwaC_gf_ZS_SaveArmyCategoryToBank (bank lp_bank, string lp_section) {
    // Variable Declarations
    string lv_indexCategory;

    // Automatic Variable Declarations
    int auto1C5E5765_ae;
    int auto1C5E5765_ai;

    // Variable Initialization

    // Implementation
    auto1C5E5765_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto1C5E5765_ai = 1;
    while (auto1C5E5765_ai <= auto1C5E5765_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto1C5E5765_ai);
        libSwaC_gf_ZS_SaveTransitionVarInteger(lp_bank, lp_section, (lv_indexCategory), (libSwaC_gf_ZS_StoryArmyCategoryState(lv_indexCategory)), 0);
        auto1C5E5765_ai = auto1C5E5765_ai + 1;
    }
}

void libSwaC_gf_ZS_SaveArmyUnitToBank (bank lp_bank, string lp_section) {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexUnit;

    // Automatic Variable Declarations
    int autoC9FC2848_ae;
    int autoC9FC2848_ai;
    int auto7753D7A9_ae;
    int auto7753D7A9_ai;

    // Variable Initialization

    // Implementation
    autoC9FC2848_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    autoC9FC2848_ai = 1;
    while (autoC9FC2848_ai <= autoC9FC2848_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, autoC9FC2848_ai);
        auto7753D7A9_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
        auto7753D7A9_ai = 1;
        while (auto7753D7A9_ai <= auto7753D7A9_ae) {
            lv_indexUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(auto7753D7A9_ai-1)+"]", 1);
            libSwaC_gf_ZS_SaveTransitionVarInteger(lp_bank, lp_section, (lv_indexUnit), (libSwaC_gf_ZS_StoryArmyUnitState(lv_indexUnit)), 0);
            auto7753D7A9_ai = auto7753D7A9_ai + 1;
        }
        autoC9FC2848_ai = autoC9FC2848_ai + 1;
    }
}

void libSwaC_gf_ZS_SaveArmyUpgradeToBank (bank lp_bank, string lp_section) {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexUpgrade;

    // Automatic Variable Declarations
    int auto5FF0EC81_ae;
    int auto5FF0EC81_ai;
    int autoD77BF8A1_ae;
    int autoD77BF8A1_ai;

    // Variable Initialization

    // Implementation
    auto5FF0EC81_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto5FF0EC81_ai = 1;
    while (auto5FF0EC81_ai <= auto5FF0EC81_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto5FF0EC81_ai);
        autoD77BF8A1_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUpgradeArray", 1);
        autoD77BF8A1_ai = 1;
        while (autoD77BF8A1_ai <= autoD77BF8A1_ae) {
            lv_indexUpgrade = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUpgradeArray["+IntToString(autoD77BF8A1_ai-1)+"]", 1);
            libSwaC_gf_ZS_SaveTransitionVarInteger(lp_bank, lp_section, (lv_indexUpgrade), (libSwaC_gf_ZS_StoryArmyUpgradeState(lv_indexUpgrade)), 0);
            autoD77BF8A1_ai = autoD77BF8A1_ai + 1;
        }
        auto5FF0EC81_ai = auto5FF0EC81_ai + 1;
    }
}

void libSwaC_gf_ZS_LoadArmyCategoryFromBank (bank lp_bank, string lp_section) {
    // Variable Declarations
    string lv_indexCategory;
    int lv_stateInt;
    int lv_state;

    // Automatic Variable Declarations
    int auto96BBAA99_ae;
    int auto96BBAA99_ai;

    // Variable Initialization

    // Implementation
    auto96BBAA99_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto96BBAA99_ai = 1;
    while (auto96BBAA99_ai <= auto96BBAA99_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto96BBAA99_ai);
        lv_stateInt = libSwaC_gf_ZS_LoadTransitionVarInteger(lp_bank, lp_section, (lv_indexCategory), 0);
        lv_state = lv_stateInt;
        libSwaC_gf_ZS_SetArmyCategoryState(lv_indexCategory, lv_state);
        auto96BBAA99_ai = auto96BBAA99_ai + 1;
    }
}

void libSwaC_gf_ZS_LoadArmyUnitFromBank (bank lp_bank, string lp_section) {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexUnit;
    int lv_stateInt;
    int lv_state;

    // Automatic Variable Declarations
    int autoF4C33F21_ae;
    int autoF4C33F21_ai;
    int autoEBC5D01F_ae;
    int autoEBC5D01F_ai;

    // Variable Initialization

    // Implementation
    autoF4C33F21_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    autoF4C33F21_ai = 1;
    while (autoF4C33F21_ai <= autoF4C33F21_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, autoF4C33F21_ai);
        autoEBC5D01F_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
        autoEBC5D01F_ai = 1;
        while (autoEBC5D01F_ai <= autoEBC5D01F_ae) {
            lv_indexUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(autoEBC5D01F_ai-1)+"]", 1);
            lv_stateInt = libSwaC_gf_ZS_LoadTransitionVarInteger(lp_bank, lp_section, (lv_indexUnit), 0);
            TextExpressionSetToken("Param/Expression/lib_SwaC_3686881B", "A", libSwaC_gf_StoryArmyUnitName(lv_indexUnit));
            TextExpressionSetToken("Param/Expression/lib_SwaC_3686881B", "B", IntToText(lv_stateInt));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_SwaC_3686881B"), false);
            lv_state = lv_stateInt;
            libSwaC_gf_ZS_SetArmyUnitState(lv_indexUnit, lv_state);
            autoEBC5D01F_ai = autoEBC5D01F_ai + 1;
        }
        autoF4C33F21_ai = autoF4C33F21_ai + 1;
    }
}

void libSwaC_gf_ZS_LoadArmyUpgradeFromBank (bank lp_bank, string lp_section) {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexUpgrade;
    int lv_stateInt;
    int lv_state;

    // Automatic Variable Declarations
    int auto9AF825B4_ae;
    int auto9AF825B4_ai;
    int auto505F3D3F_ae;
    int auto505F3D3F_ai;

    // Variable Initialization

    // Implementation
    auto9AF825B4_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto9AF825B4_ai = 1;
    while (auto9AF825B4_ai <= auto9AF825B4_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto9AF825B4_ai);
        auto505F3D3F_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUpgradeArray", 1);
        auto505F3D3F_ai = 1;
        while (auto505F3D3F_ai <= auto505F3D3F_ae) {
            lv_indexUpgrade = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUpgradeArray["+IntToString(auto505F3D3F_ai-1)+"]", 1);
            lv_stateInt = libSwaC_gf_ZS_LoadTransitionVarInteger(lp_bank, lp_section, (lv_indexUpgrade), 0);
            lv_state = lv_stateInt;
            libSwaC_gf_ZS_SetArmyUpgradeState(lv_indexUpgrade, lv_state);
            auto505F3D3F_ai = auto505F3D3F_ai + 1;
        }
        auto9AF825B4_ai = auto9AF825B4_ai + 1;
    }
}

void libSwaC_gf_ZS_ApplyArmyTech (int lp_player) {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexUnit;
    string lv_indexUpgrade;
    bool lv_categoryEnableDisable;
    bool lv_unitEnableDisable;
    bool lv_anyUnitEnabled;
    bool lv_upgradeEnableDisable;

    // Automatic Variable Declarations
    int auto9D38F76C_ae;
    int auto9D38F76C_ai;
    int auto39516B1C_ae;
    int auto39516B1C_ai;
    int autoDD5E44DC_ae;
    int autoDD5E44DC_ai;
    int auto16054D53_ae;
    int auto16054D53_ai;
    int autoBEA8774C_ae;
    int autoBEA8774C_ai;

    // Variable Initialization
    lv_categoryEnableDisable = true;
    lv_unitEnableDisable = true;
    lv_upgradeEnableDisable = true;

    // Implementation
    auto9D38F76C_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto9D38F76C_ai = 1;
    while (auto9D38F76C_ai <= auto9D38F76C_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto9D38F76C_ai);
        libSwaC_gf_EnableCampaignTechUnit(false, libSwaC_gf_ZS_TechUnitOfArmyCategory(lv_indexCategory), lp_player);
        auto39516B1C_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
        auto39516B1C_ai = 1;
        while (auto39516B1C_ai <= auto39516B1C_ae) {
            lv_indexUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(auto39516B1C_ai-1)+"]", 1);
            libSwaC_gf_EnableCampaignTechUnit(false, libSwaC_gf_ZS_TechUnitOfArmyUnit(lv_indexUnit), lp_player);
            auto39516B1C_ai = auto39516B1C_ai + 1;
        }
        auto9D38F76C_ai = auto9D38F76C_ai + 1;
    }
    if ((libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindUpgrade) == true)) {
        return ;
    }

    autoDD5E44DC_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    autoDD5E44DC_ai = 1;
    while (autoDD5E44DC_ai <= autoDD5E44DC_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, autoDD5E44DC_ai);
        if ((libSwaC_gf_StoryArmyCategoryStateCheck(lv_indexCategory, c_armyCategoryStateUnlocked) == true)) {
            lv_categoryEnableDisable = true;
        }
        else {
            lv_categoryEnableDisable = false;
        }
        auto16054D53_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUpgradeArray", 1);
        auto16054D53_ai = 1;
        while (auto16054D53_ai <= auto16054D53_ae) {
            lv_indexUpgrade = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUpgradeArray["+IntToString(auto16054D53_ai-1)+"]", 1);
            if ((lv_categoryEnableDisable == true) && (libSwaC_gf_ZS_StoryArmyUpgradeState(lv_indexUpgrade) == c_armyUpgradeStatePurchased)) {
                lv_upgradeEnableDisable = true;
            }
            else {
                lv_upgradeEnableDisable = false;
            }
            libSwaC_gf_ZS_EnableUpgradeAndAbilityCommandForTech(lv_upgradeEnableDisable, c_gameCatalogArmyUpgrade, (lv_indexUpgrade), null, null, lp_player);
            auto16054D53_ai = auto16054D53_ai + 1;
        }
        lv_anyUnitEnabled = false;
        autoBEA8774C_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
        autoBEA8774C_ai = 1;
        while (autoBEA8774C_ai <= autoBEA8774C_ae) {
            lv_indexUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(autoBEA8774C_ai-1)+"]", 1);
            if ((lv_categoryEnableDisable == true) && (libSwaC_gf_ZS_StoryArmyUnitState(lv_indexUnit) == c_armyUnitStatePurchased)) {
                lv_unitEnableDisable = true;
                lv_anyUnitEnabled = true;
                libSwaC_gf_EnableCampaignTechUnit(true, libSwaC_gf_ZS_TechUnitOfArmyUnit(lv_indexUnit), lp_player);
            }
            else {
                lv_unitEnableDisable = false;
            }
            autoBEA8774C_ai = autoBEA8774C_ai + 1;
        }
        if ((lv_anyUnitEnabled == true)) {
            lv_categoryEnableDisable = false;
        }

        if ((lv_categoryEnableDisable == true)) {
            libSwaC_gf_EnableCampaignTechUnit(true, libSwaC_gf_ZS_TechUnitOfArmyCategory(lv_indexCategory), lp_player);
        }

        autoDD5E44DC_ai = autoDD5E44DC_ai + 1;
    }
}

void libSwaC_gf_ZS_ResetArmyTech () {
    // Variable Declarations
    string lv_indexCategory;

    // Automatic Variable Declarations
    int auto7F27B5D3_ae;
    int auto7F27B5D3_ai;

    // Variable Initialization

    // Implementation
    auto7F27B5D3_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto7F27B5D3_ai = 1;
    while (auto7F27B5D3_ai <= auto7F27B5D3_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto7F27B5D3_ai);
        libSwaC_gf_ZS_SetArmyCategoryState(lv_indexCategory, c_armyCategoryStateLocked);
        auto7F27B5D3_ai = auto7F27B5D3_ai + 1;
    }
}

trigger auto_libSwaC_gf_StartKerriganReviveCooldown_Trigger = null;

void libSwaC_gf_StartKerriganReviveCooldown () {
    if (auto_libSwaC_gf_StartKerriganReviveCooldown_Trigger == null) {
        auto_libSwaC_gf_StartKerriganReviveCooldown_Trigger = TriggerCreate("auto_libSwaC_gf_StartKerriganReviveCooldown_TriggerFunc");
    }

    TriggerExecute(auto_libSwaC_gf_StartKerriganReviveCooldown_Trigger, false, false);
}

bool auto_libSwaC_gf_StartKerriganReviveCooldown_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_tip;
    text lv_subtip;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libSwaC_gv_zS_CamStatsKerriganDeath += 1;
    if ((libSwaC_gv_zSX_CamStatsKerriganDeathMax[libSwaC_gf_ZS_MissionIndex(libSwaC_gf_CurrentMap())][libSwaC_gf_ZS_DifficultyIndex(PlayerDifficulty(1))] < libSwaC_gv_zS_CamStatsKerriganDeath)) {
        libSwaC_gv_zSX_CamStatsKerriganDeathMax[libSwaC_gf_ZS_MissionIndex(libSwaC_gf_CurrentMap())][libSwaC_gf_ZS_DifficultyIndex(PlayerDifficulty(1))] = libSwaC_gv_zS_CamStatsKerriganDeath;
    }

    UserDataSetInt("StoryStates", "(Mission)KerriganDeathTimes", "value", 1, (UserDataGetInt("StoryStates", "(Mission)KerriganDeathTimes", "value", 1) + 1));
    if (((libSwaC_gv_zS_PrimaryHatchery == null) || (UnitIsAlive(libSwaC_gv_zS_PrimaryHatchery) == false))) {
        libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), libSwaC_ge_CampaignMessageType_Warning, StringExternal("Param/Value/lib_SwaC_0D0301F9"), libSwaC_ge_CampaignMessageFormatNotFormat_FormatMessage);
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_SwaC_03598A41", "A", IntToText(FixedToInt(libSwaC_gv_zS_ReviveCooldownTimeKerrigan)));
        libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), libSwaC_ge_CampaignMessageType_Warning, TextExpressionAssemble("Param/Expression/lib_SwaC_03598A41"), libSwaC_ge_CampaignMessageFormatNotFormat_FormatMessage);
    }
    libNtve_gf_PlayerRemoveCooldown(1, libSwaC_gv_zSC_HeroReviveLinkKerrigan);
    UserDataSetInt("KerriganStates", "Alive", "Value", 1, 0);
    UserDataSetInt("KerriganStates", "Dead", "Value", 1, 1);
    Wait(2.0, c_timeGame);
    while (((libSwaC_gv_zS_PrimaryHatchery == null) || (UnitIsAlive(libSwaC_gv_zS_PrimaryHatchery) == false))) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(libSwaC_gv_zS_Kerrigan) == false)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "KerriganReviveCocoon", 0, 1, UnitGetPosition(libSwaC_gv_zS_PrimaryHatchery));
        libSwaC_gv_zS_HeroReviverKerrigan = UnitLastCreated();
        UnitCreateEffectUnit(libSwaC_gv_zS_PrimaryHatchery, "CopyHatcheryRally", libSwaC_gv_zS_HeroReviverKerrigan);
        UnitIssueOrder(libSwaC_gv_zS_HeroReviverKerrigan, OrderTargetingUnit(AbilityCommand("RallyHatchery", 1), libSwaC_gv_zS_HeroReviverKerrigan), c_orderQueueReplace);
        UnitSetState(libSwaC_gv_zS_HeroReviverKerrigan, c_unitStateTooltipable, true);
        lv_tip = UnitTypeGetName(UnitGetType(libSwaC_gv_zS_HeroReviverKerrigan));
        if (((UserDataGetInt("StoryStates", "(Mission)KerriganDeathTimes", "value", 1) == 1) || (libSwaC_gf_CurrentMap() == libSwaC_gv_zS_KerriganReviveFirstTimeMission))) {
            lv_subtip = StringExternal("Param/Value/lib_SwaC_98504BBE");
        }
        else {
            lv_subtip = null;
        }
        libSwaC_gf_SetUnitInfoTextCampaign(libSwaC_gv_zS_HeroReviverKerrigan, null, lv_tip, lv_subtip);
        if ((UserDataGetInt("StoryStates", "(Mission)KerriganDeathTimes", "value", 1) == 1)) {
            libSwaC_gv_zS_KerriganReviveFirstTimeMission = libSwaC_gf_CurrentMap();
        }

        libNtve_gf_PlayerRemoveCooldown(1, libSwaC_gv_zSC_HeroReviveLinkKerrigan);
        PlayerAddCooldown(1, libSwaC_gv_zSC_HeroReviveLinkKerrigan, libSwaC_gv_zS_ReviveCooldownTimeKerrigan);
        TriggerEnable(libSwaC_gt_ZS_ReviveCooldownReadyKerrigan, true);
        Wait(0.5, c_timeGame);
        Wait(6.5, c_timeGame);
        if ((UnitIsAlive(libSwaC_gv_zS_Kerrigan) == false)) {
            UnitSetPosition(libSwaC_gv_zS_Kerrigan, UnitGetPosition(libSwaC_gv_zS_HeroReviverKerrigan), false);
        }

    }

    return true;
}

void libSwaC_gf_StartKerriganReviveCooldown2 () {
    // Automatic Variable Declarations
    // Implementation
    if (((libSwaC_gv_zS_PrimaryHatchery == null) || (UnitIsAlive(libSwaC_gv_zS_PrimaryHatchery) == false))) {
        libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), libSwaC_ge_CampaignMessageType_Warning, StringExternal("Param/Value/lib_SwaC_84C4B5BB"), libSwaC_ge_CampaignMessageFormatNotFormat_FormatMessage);
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_SwaC_6AF122B7", "A", IntToText(FixedToInt(libSwaC_gv_zS_ReviveCooldownTimeStukov)));
        libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), libSwaC_ge_CampaignMessageType_Warning, TextExpressionAssemble("Param/Expression/lib_SwaC_6AF122B7"), libSwaC_ge_CampaignMessageFormatNotFormat_FormatMessage);
    }
    libNtve_gf_PlayerRemoveCooldown(1, libSwaC_gv_zSC_HeroReviveLinkStukov);
    Wait(6.6, c_timeGame);
    while (((libSwaC_gv_zS_PrimaryHatchery == null) || (UnitIsAlive(libSwaC_gv_zS_PrimaryHatchery) == false))) {
        Wait(1.0, c_timeGame);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "StukovReviveCocoon", 0, 1, UnitGetPosition(libSwaC_gv_zS_PrimaryHatchery));
    libSwaC_gv_zS_HeroReviverStukov = UnitLastCreated();
    UnitCreateEffectUnit(libSwaC_gv_zS_PrimaryHatchery, "CopyHatcheryRally", libSwaC_gv_zS_HeroReviverStukov);
    UnitIssueOrder(libSwaC_gv_zS_HeroReviverStukov, OrderTargetingUnit(AbilityCommand("RallyHatchery", 1), libSwaC_gv_zS_HeroReviverStukov), c_orderQueueReplace);
    UnitSetPosition(libSwaC_gv_zS_Stukov, UnitGetPosition(libSwaC_gv_zS_HeroReviverStukov), false);
    libNtve_gf_PlayerRemoveCooldown(1, libSwaC_gv_zSC_HeroReviveLinkStukov);
    PlayerAddCooldown(1, libSwaC_gv_zSC_HeroReviveLinkStukov, libSwaC_gv_zS_ReviveCooldownTimeStukov);
    TriggerEnable(libSwaC_gt_ZS_ReviveCooldownReadyStukov, true);
}

void libSwaC_gf_StartKerriganReviveCooldown3 (point lp_revivePoint) {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_SwaC_788B7D47", "Time", IntToText(FixedToInt(libSwaC_gv_zS_ReviveCooldownTimeDehaka)));
    libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), libSwaC_ge_CampaignMessageType_Warning, TextExpressionAssemble("Param/Expression/lib_SwaC_788B7D47"), libSwaC_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libNtve_gf_PlayerRemoveCooldown(1, libSwaC_gv_zSC_HeroReviveLinkDehaka);
    Wait(1.7, c_timeGame);
    if ((UnitIsAlive(libSwaC_gv_zS_Dehaka) == false)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "DehakaReviveCocoon", 0, 1, lp_revivePoint);
        libSwaC_gv_zS_HeroReviverDehaka = UnitLastCreated();
        UnitSetPosition(libSwaC_gv_zS_Dehaka, UnitGetPosition(libSwaC_gv_zS_HeroReviverDehaka), false);
        libNtve_gf_PlayerRemoveCooldown(1, libSwaC_gv_zSC_HeroReviveLinkDehaka);
        PlayerAddCooldown(1, libSwaC_gv_zSC_HeroReviveLinkDehaka, libSwaC_gv_zS_ReviveCooldownTimeDehaka);
        TriggerEnable(libSwaC_gt_ZS_ReviveCooldownReadyDehaka, true);
    }

}

unit libSwaC_gf_ZS_ClosestHatcheryToPoint (point lp_point) {
    // Variable Declarations
    unit lv_closestHatchery;
    unit lv_indexUnit;
    fixed lv_closestDistance;
    fixed lv_distance;

    // Automatic Variable Declarations
    unitgroup auto27354F0B_g;
    int auto27354F0B_u;

    // Variable Initialization
    lv_closestDistance = 500.0;

    // Implementation
    lv_closestHatchery = null;
    auto27354F0B_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto27354F0B_u = UnitGroupCount(auto27354F0B_g, c_unitCountAll);
    for (;; auto27354F0B_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(auto27354F0B_g, auto27354F0B_u);
        if (lv_indexUnit == null) { break; }
        if (((UnitGetType(lv_indexUnit) == "Hatchery") || (UnitGetType(lv_indexUnit) == "Lair") || (UnitGetType(lv_indexUnit) == "Hive"))) {
            lv_distance = DistanceBetweenPoints(libSwaC_gv_zS_HeroDeathPoint, UnitGetPosition(lv_indexUnit));
            if (((lv_closestHatchery == null) || (lv_distance < lv_closestDistance))) {
                lv_closestHatchery = lv_indexUnit;
                lv_closestDistance = lv_distance;
            }

        }

    }
    return lv_closestHatchery;
}

void libSwaC_gf_ReviveHeroInstantly (int lp_type, bool lp_displayReviveMessage) {
    // Automatic Variable Declarations
    int auto4D2FDB15_val;

    // Implementation
    auto4D2FDB15_val = lp_type;
    if (auto4D2FDB15_val == libSwaC_ge_HeroUnit_Kerrigan) {
        TriggerEnable(libSwaC_gt_ZS_ReviveCooldownReadyKerrigan, false);
        if ((UnitIsAlive(libSwaC_gv_zS_HeroReviverKerrigan) == true)) {
            ActorSend(libSwaC_gv_zS_KerriganActor, "Destroy");
            libNtve_gf_PlayerRemoveCooldown(1, libSwaC_gv_zSC_HeroReviveLinkKerrigan);
            UnitIssueOrder(libSwaC_gv_zS_HeroReviverKerrigan, libNtve_gf_ReviveOrderWithNoTarget(AbilityCommand("KerriganRevive", 0), libSwaC_gv_zS_Kerrigan), c_orderQueueReplace);
            Wait(0.0625, c_timeGame);
            UnitKill(libSwaC_gv_zS_HeroReviverKerrigan);
            UnitIssueOrder(libSwaC_gv_zS_Kerrigan, Order(AbilityCommand("K5KerriganUnburrow", 0)), c_orderQueueReplace);
            if ((lp_displayReviveMessage == true)) {
                libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), libSwaC_ge_CampaignMessageType_SimpleHint, StringExternal("Param/Value/lib_SwaC_4B3209E8"), libSwaC_ge_CampaignMessageFormatNotFormat_FormatMessage);
            }

            UserDataSetInt("KerriganStates", "Alive", "Value", 1, 1);
            UserDataSetInt("KerriganStates", "Dead", "Value", 1, 0);
        }

    }
    else if (auto4D2FDB15_val == libSwaC_ge_HeroUnit_Dehaka) {
        TriggerEnable(libSwaC_gt_ZS_ReviveCooldownReadyDehaka, false);
        if ((UnitIsAlive(libSwaC_gv_zS_HeroReviverDehaka) == true)) {
            libNtve_gf_PlayerRemoveCooldown(1, libSwaC_gv_zSC_HeroReviveLinkDehaka);
            UnitIssueOrder(libSwaC_gv_zS_HeroReviverDehaka, libNtve_gf_ReviveOrderWithNoTarget(AbilityCommand("DehakaRevive", 0), libSwaC_gv_zS_Dehaka), c_orderQueueReplace);
            Wait(0.0625, c_timeGame);
            UnitKill(libSwaC_gv_zS_HeroReviverDehaka);
            if ((lp_displayReviveMessage == true)) {
                libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), libSwaC_ge_CampaignMessageType_SimpleHint, StringExternal("Param/Value/lib_SwaC_64609106"), libSwaC_ge_CampaignMessageFormatNotFormat_FormatMessage);
            }

        }
        else {
            libNtve_gf_PlayerRemoveCooldown(1, libSwaC_gv_zSC_HeroReviveLinkDehaka);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "DehakaReviveCocoon", 0, 1, UnitGetPosition(libSwaC_gv_zS_Dehaka));
            libSwaC_gv_zS_HeroReviverDehaka = UnitLastCreated();
            Wait(0.0625, c_timeGame);
            UnitIssueOrder(libSwaC_gv_zS_HeroReviverDehaka, libNtve_gf_ReviveOrderWithNoTarget(AbilityCommand("DehakaRevive", 0), libSwaC_gv_zS_Dehaka), c_orderQueueReplace);
            Wait(0.0625, c_timeGame);
            UnitKill(libSwaC_gv_zS_HeroReviverDehaka);
        }
    }
    else if (auto4D2FDB15_val == libSwaC_ge_HeroUnit_Stukov) {
        TriggerEnable(libSwaC_gt_ZS_ReviveCooldownReadyStukov, false);
        if ((UnitIsAlive(libSwaC_gv_zS_HeroReviverStukov) == true)) {
            libNtve_gf_PlayerRemoveCooldown(1, libSwaC_gv_zSC_HeroReviveLinkStukov);
            UnitIssueOrder(libSwaC_gv_zS_HeroReviverStukov, libNtve_gf_ReviveOrderWithNoTarget(AbilityCommand("StukovRevive", 0), libSwaC_gv_zS_Stukov), c_orderQueueReplace);
            Wait(0.125, c_timeGame);
            UnitKill(libSwaC_gv_zS_HeroReviverStukov);
            if ((lp_displayReviveMessage == true)) {
                libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), libSwaC_ge_CampaignMessageType_SimpleHint, StringExternal("Param/Value/lib_SwaC_5E4A90FC"), libSwaC_ge_CampaignMessageFormatNotFormat_FormatMessage);
            }

        }

    }
    else {
    }
}

void libSwaC_gf_DisplayKerriganTierCustomizationWindow (trigger lp_callbackOpen, trigger lp_callbackClose) {
    // Automatic Variable Declarations
    // Implementation
    if ((libSwaC_gv_zS_KerriganCustomWindowDisplayed == true)) {
        return ;
    }

    libSwaC_gv_zS_KerriganCustomWindowCallbackClose = lp_callbackClose;
    libSwaC_gv_zS_KerriganUIOriginalXP = libSwaC_gv_zSX_KerriganUILastKnownXP;
    libSwaC_gv_zS_KerriganUIFinalXP = libSwaC_gv_zS_KerriganLevel;
    libSwaC_gv_zS_KerriganUITierLevel = libSwaC_gf_ZS_KerriganTierFromXP();
    libSwaC_gv_zS_KerriganCustomWindowDisplayed = true;
    if ((libSwaC_gf_StoryInSimulation() == true)) {
        libSwaC_gv_zS_KerriganUIXP = libSwaC_gv_zS_KerriganLevel;
    }
    else {
        libSwaC_gv_zS_KerriganUIXP = libSwaC_gv_zSX_KerriganUILastKnownXP;
    }
    libSwaC_gv_zS_KerriganUIDeltaHealth = 0;
    libSwaC_gv_zS_KerriganUIDeltaEnergy = 0;
    libSwaC_gv_zS_KerriganUIDeltaDamage = 0;
    libSwaC_gv_zS_KerriganUIDeltaArmor = 0;
    libSwaC_gv_zS_KerriganUIFinalHealth = CatalogFieldValueGetAsInt(c_gameCatalogUnit, "K5Kerrigan", "LifeMax", 1);
    libSwaC_gv_zS_KerriganUIFinalEnergy = CatalogFieldValueGetAsInt(c_gameCatalogUnit, "K5Kerrigan", "EnergyMax", 1);
    libSwaC_gv_zS_KerriganUIFinalDamage = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "ChainReaction1Damage", "Amount", 1);
    libSwaC_gv_zS_KerriganUIFinalArmor = CatalogFieldValueGetAsInt(c_gameCatalogUnit, "K5Kerrigan", "LifeArmor", 1);
    libSwaC_gf_ZS_KerriganUITierCreate();
    DialogSetSubtitlePositionOverrideControl(libSwaC_gv_zS_KerriganUITierSubTitleAnchor);
    DialogControlSetVisible(libSwaC_gv_zS_KerriganUITierLevelUpFlash, PlayerGroupAll(), false);
    libSwaC_gf_ZS_ShowKerriganUIBackground();
    libSwaC_gf_ZS_KerriganUITierUpdate();
    libSwaC_gf_ZS_KerriganUIUpdateButtonFXInstant();
    DialogSetVisible(libSwaC_gv_zS_KerriganCustomWindow, PlayerGroupAll(), true);
    TriggerExecute(libSwaC_gt_ZS_KerriganCustomizationPlayEntryAnims, true, false);
    TriggerEnable(libSwaC_gt_ZS_KerriganUITierCloseButtonClicked, true);
    if ((lp_callbackOpen != null)) {
        TriggerExecute(lp_callbackOpen, true, false);
    }

    libSwaC_gf_CinematicFade(true, 0.3, Color(0.00, 0.00, 0.00), false);
    TriggerExecute(libSwaC_gt_ZS_KerriganCustomizationRunning, true, true);
}

void libSwaC_gf_ZS_CloseKerriganCustomizationWindow () {
    // Automatic Variable Declarations
    // Implementation
    if ((libSwaC_gv_zS_KerriganCustomWindowDisplayed == false)) {
        return ;
    }

    if ((libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindStory) == false)) {
        CameraRestore(1, 0.0, -1, 10);
    }
    else {
        libSwaC_gf_CinematicFade(false, 0.0, Color(0.00, 0.00, 0.00), false);
    }
    if ((libSwaC_gv_zS_KerriganCustomWindowCallbackClose != null)) {
        TriggerExecute(libSwaC_gv_zS_KerriganCustomWindowCallbackClose, true, false);
    }

    SoundStop(libSwaC_gv_zS_KerriganUITierLevelLoopSound, true);
    if ((libSwaC_gf_KerriganPhaseCheck(libSwaC_ge_KerriganPhase_KerriganPhaseGhost) == false) && (libSwaC_gf_StoryInSimulation() == false)) {
        UserDataSetInt("StoryStates", "Kerrigan Primal Column Displayed", "value", 1, 1);
    }

    libSwaC_gf_ZS_HideKerriganUIBackground();
    DialogSetVisible(libSwaC_gv_zS_KerriganCustomWindow, PlayerGroupAll(), false);
    TriggerStop(libSwaC_gt_ZS_KerriganCustomizationRunning);
    TriggerStop(libSwaC_gt_ZS_KerriganCustomizationPlayEntryAnims);
    TriggerStop(libSwaC_gt_ZS_KerriganCustomizationPlayKerriganAnim);
    libSwaC_gv_zS_KerriganCustomWindowDisplayed = false;
    libSwaC_gf_ZS_RecalculateKerriganXP();
}

void libSwaC_gf_ZS_KerriganUITierCreate () {
    // Variable Declarations
    int lv_tier;
    int lv_tierIndex;
    string lv_kerriganAbility;
    int lv_index;

    // Automatic Variable Declarations
    int auto8F419696_ae;
    int auto8F419696_ai;
    const int auto51016C57_ae = 5;
    const int auto51016C57_ai = 1;
    const int auto1050508C_ae = libSwaC_gv_zSC_KerriganAbilityTiers;
    const int auto1050508C_ai = 1;
    const int auto7FB1E291_ae = libSwaC_gv_zSC_KerriganAbilityTierItems;
    const int auto7FB1E291_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libSwaC_gv_zS_KerriganCustomWindow != c_invalidDialogId)) {
        return ;
    }

    if ((libSwaC_gv_zS_KerriganUITiersLoaded == false)) {
        auto8F419696_ae = CatalogEntryCount(c_gameCatalogHeroAbil);
        auto8F419696_ai = 1;
        while (auto8F419696_ai <= auto8F419696_ae) {
            lv_kerriganAbility = CatalogEntryGet(c_gameCatalogHeroAbil, auto8F419696_ai);
            libSwaC_gf_ZS_EnableKerriganTierAbility(false, lv_kerriganAbility);
            if ((libSwaC_gf_ZS_KerriganAbilityTier(lv_kerriganAbility) >= 1) && (libSwaC_gf_ZS_KerriganAbilityTier(lv_kerriganAbility) <= libSwaC_gv_zSC_KerriganAbilityTiers) && (libSwaC_gf_ZS_KerriganAbilityTierIndex(lv_kerriganAbility) >= 1) && (libSwaC_gf_ZS_KerriganAbilityTierIndex(lv_kerriganAbility) <= libSwaC_gv_zSC_KerriganAbilityTierItems)) {
                libSwaC_gv_zS_KerriganTechTierItems[libSwaC_gf_ZS_KerriganAbilityTier(lv_kerriganAbility)][libSwaC_gf_ZS_KerriganAbilityTierIndex(lv_kerriganAbility)] = lv_kerriganAbility;
            }

            auto8F419696_ai = auto8F419696_ai + 1;
        }
        libSwaC_gv_zS_KerriganUITiersLoaded = true;
    }

    DialogCreate(1920, 1200, c_anchorCenter, 0, 0, true);
    libSwaC_gv_zS_KerriganCustomWindow = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetFullscreen(DialogLastCreated(), true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 200, 50, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\blank.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libSwaC_gv_zS_KerriganCustomWindowBG = DialogControlLastCreated();
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePanel);
    libSwaC_gv_zS_KerriganUITierSubTitleAnchor = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 1000, 300);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomRight, 220, 20);
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "HotS_KerriganCustomizationPanel/KerriganCustomizationPanelTemplate");
    libSwaC_gv_zS_KerriganUITierTemplate = DialogControlLastCreated();
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlHookup(libSwaC_gv_zS_KerriganUITierTemplate, c_triggerControlTypePanel, "AbilityFrame");
    libSwaC_gv_zS_KerriganUITierTemplate2 = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_KerriganUITierTemplate, c_triggerControlTypePanel, "AbilityFramePrimal");
    libSwaC_gv_zS_KerriganUITierTemplate3 = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_KerriganUITierTemplate, c_triggerControlTypeLabel, "PowerLevelLabel");
    libSwaC_gv_zS_KerriganUITierPowerLevelLabel = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_KerriganUITierTemplate, c_triggerControlTypeImage, "PowerBarFillImage");
    libSwaC_gv_zS_KerriganUITierPowerBar = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_KerriganUITierTemplate, c_triggerControlTypeFlash, "PowerBarUpgradeEffect");
    libSwaC_gv_zS_KerriganUITierPowerBar2 = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_KerriganUITierTemplate, c_triggerControlTypeFlash, "PrimalContainerUpgradeEffect");
    libSwaC_gv_zS_KerriganUITierPowerBar3 = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_KerriganUITierTemplate, c_triggerControlTypeButton, "BackButton");
    libSwaC_gv_zS_KerriganUITierCloseButton = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_KerriganUITierTemplate, c_triggerControlTypePanel, "BaseAbilitiesFrame");
    libSwaC_gv_zS_KerriganUITierAbilityFrame[0] = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_KerriganUITierTemplate, c_triggerControlTypePanel, "TierFrame1");
    libSwaC_gv_zS_KerriganUITierAbilityFrame[1] = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_KerriganUITierTemplate, c_triggerControlTypePanel, "TierFrame2");
    libSwaC_gv_zS_KerriganUITierAbilityFrame[2] = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_KerriganUITierTemplate, c_triggerControlTypePanel, "TierFrame3");
    libSwaC_gv_zS_KerriganUITierAbilityFrame[3] = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_KerriganUITierTemplate, c_triggerControlTypePanel, "TierFrame4");
    libSwaC_gv_zS_KerriganUITierAbilityFrame[4] = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_KerriganUITierTemplate, c_triggerControlTypePanel, "TierFrame5");
    libSwaC_gv_zS_KerriganUITierAbilityFrame[5] = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_KerriganUITierAbilityFrame[0], c_triggerControlTypeImage, "TierFrameBackgroundImage");
    libSwaC_gv_zS_KerriganUITierAbilityFrame3[0] = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_KerriganUITierAbilityFrame[0], c_triggerControlTypeImage, "TierFrameBackgroundImageUnlocked");
    libSwaC_gv_zS_KerriganUITierAbilityFrame2[0] = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_KerriganUITierAbilityFrame[0], c_triggerControlTypeLabel, "RequiredLevelLabel");
    libSwaC_gv_zS_KerriganUITierAbilityFrameLabel[0] = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_KerriganUITierAbilityFrame[0], c_triggerControlTypeButton, "AbilityButton1");
    libSwaC_gv_zS_KerriganUITierButtons[2][1] = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_KerriganUITierAbilityFrame[0], c_triggerControlTypeButton, "AbilityButton2");
    libSwaC_gv_zS_KerriganUITierButtons[2][2] = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_KerriganUITierAbilityFrame[0], c_triggerControlTypeButton, "AbilityButton3");
    libSwaC_gv_zS_KerriganUITierButtons[2][3] = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_KerriganUITierAbilityFrame[0], c_triggerControlTypeButton, "AbilityButton4");
    libSwaC_gv_zS_KerriganUITierButtons[1][1] = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_KerriganUITierAbilityFrame[0], c_triggerControlTypeButton, "AbilityButton5");
    libSwaC_gv_zS_KerriganUITierButtons[1][2] = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_KerriganUITierAbilityFrame[0], c_triggerControlTypeButton, "AbilityButton6");
    libSwaC_gv_zS_KerriganUITierButtons[1][3] = DialogControlLastCreated();
    libSwaC_gf_ZS_KerriganUITierHookupButtonFX(libSwaC_gv_zS_KerriganUITierAbilityFrame[0], "AbilityFramePortrait1");
    libSwaC_gv_zS_KerriganUITierButtons2[2][1] = DialogControlLastCreated();
    libSwaC_gf_ZS_KerriganUITierHookupButtonFX(libSwaC_gv_zS_KerriganUITierAbilityFrame[0], "AbilityFramePortrait2");
    libSwaC_gv_zS_KerriganUITierButtons2[2][2] = DialogControlLastCreated();
    libSwaC_gf_ZS_KerriganUITierHookupButtonFX(libSwaC_gv_zS_KerriganUITierAbilityFrame[0], "AbilityFramePortrait3");
    libSwaC_gv_zS_KerriganUITierButtons2[2][3] = DialogControlLastCreated();
    libSwaC_gf_ZS_KerriganUITierHookupButtonFX(libSwaC_gv_zS_KerriganUITierAbilityFrame[0], "AbilityFramePortrait4");
    libSwaC_gv_zS_KerriganUITierButtons2[1][1] = DialogControlLastCreated();
    libSwaC_gf_ZS_KerriganUITierHookupButtonFX(libSwaC_gv_zS_KerriganUITierAbilityFrame[0], "AbilityFramePortrait5");
    libSwaC_gv_zS_KerriganUITierButtons2[1][2] = DialogControlLastCreated();
    libSwaC_gf_ZS_KerriganUITierHookupButtonFX(libSwaC_gv_zS_KerriganUITierAbilityFrame[0], "AbilityFramePortrait6");
    libSwaC_gv_zS_KerriganUITierButtons2[1][3] = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_KerriganUITierAbilityFrame[0], c_triggerControlTypeLabel, "AbilityNameLabel1");
    libSwaC_gv_zS_KerriganUITierButtonLabel[2][1] = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_KerriganUITierAbilityFrame[0], c_triggerControlTypeLabel, "AbilityNameLabel2");
    libSwaC_gv_zS_KerriganUITierButtonLabel[2][2] = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_KerriganUITierAbilityFrame[0], c_triggerControlTypeLabel, "AbilityNameLabel3");
    libSwaC_gv_zS_KerriganUITierButtonLabel[2][3] = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_KerriganUITierAbilityFrame[0], c_triggerControlTypeLabel, "AbilityNameLabel4");
    libSwaC_gv_zS_KerriganUITierButtonLabel[1][1] = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_KerriganUITierAbilityFrame[0], c_triggerControlTypeLabel, "AbilityNameLabel5");
    libSwaC_gv_zS_KerriganUITierButtonLabel[1][2] = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_KerriganUITierAbilityFrame[0], c_triggerControlTypeLabel, "AbilityNameLabel6");
    libSwaC_gv_zS_KerriganUITierButtonLabel[1][3] = DialogControlLastCreated();
    lv_index = 1;
    for ( ; ( (auto51016C57_ai >= 0 && lv_index <= auto51016C57_ae) || (auto51016C57_ai < 0 && lv_index >= auto51016C57_ae) ) ; lv_index += auto51016C57_ai ) {
        DialogControlHookup(libSwaC_gv_zS_KerriganUITierAbilityFrame[lv_index], c_triggerControlTypeFlash, "ContainerUpgradeEffect");
        libSwaC_gv_zS_KerriganUITierAbilityFrame4[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libSwaC_gv_zS_KerriganUITierAbilityFrame[lv_index], c_triggerControlTypeImage, "TierFrameBackgroundImage");
        libSwaC_gv_zS_KerriganUITierAbilityFrame3[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libSwaC_gv_zS_KerriganUITierAbilityFrame[lv_index], c_triggerControlTypeImage, "TierFrameBackgroundImageUnlocked");
        libSwaC_gv_zS_KerriganUITierAbilityFrame2[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libSwaC_gv_zS_KerriganUITierAbilityFrame[lv_index], c_triggerControlTypeLabel, "RequiredLevelLabel");
        libSwaC_gv_zS_KerriganUITierAbilityFrameLabel[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libSwaC_gv_zS_KerriganUITierAbilityFrame[lv_index], c_triggerControlTypeButton, "AbilityButton1");
        libSwaC_gv_zS_KerriganUITierButtons[(lv_index + 2)][1] = DialogControlLastCreated();
        DialogControlHookup(libSwaC_gv_zS_KerriganUITierAbilityFrame[lv_index], c_triggerControlTypeButton, "AbilityButton2");
        libSwaC_gv_zS_KerriganUITierButtons[(lv_index + 2)][2] = DialogControlLastCreated();
        DialogControlHookup(libSwaC_gv_zS_KerriganUITierAbilityFrame[lv_index], c_triggerControlTypeButton, "AbilityButton3");
        libSwaC_gv_zS_KerriganUITierButtons[(lv_index + 2)][3] = DialogControlLastCreated();
        libSwaC_gf_ZS_KerriganUITierHookupButtonFX(libSwaC_gv_zS_KerriganUITierAbilityFrame[lv_index], "AbilityFramePortrait1");
        libSwaC_gv_zS_KerriganUITierButtons2[(lv_index + 2)][1] = DialogControlLastCreated();
        libSwaC_gf_ZS_KerriganUITierHookupButtonFX(libSwaC_gv_zS_KerriganUITierAbilityFrame[lv_index], "AbilityFramePortrait2");
        libSwaC_gv_zS_KerriganUITierButtons2[(lv_index + 2)][2] = DialogControlLastCreated();
        libSwaC_gf_ZS_KerriganUITierHookupButtonFX(libSwaC_gv_zS_KerriganUITierAbilityFrame[lv_index], "AbilityFramePortrait3");
        libSwaC_gv_zS_KerriganUITierButtons2[(lv_index + 2)][3] = DialogControlLastCreated();
        DialogControlHookup(libSwaC_gv_zS_KerriganUITierAbilityFrame[lv_index], c_triggerControlTypeLabel, "AbilityNameLabel1");
        libSwaC_gv_zS_KerriganUITierButtonLabel[(lv_index + 2)][1] = DialogControlLastCreated();
        DialogControlHookup(libSwaC_gv_zS_KerriganUITierAbilityFrame[lv_index], c_triggerControlTypeLabel, "AbilityNameLabel2");
        libSwaC_gv_zS_KerriganUITierButtonLabel[(lv_index + 2)][2] = DialogControlLastCreated();
        DialogControlHookup(libSwaC_gv_zS_KerriganUITierAbilityFrame[lv_index], c_triggerControlTypeLabel, "AbilityNameLabel3");
        libSwaC_gv_zS_KerriganUITierButtonLabel[(lv_index + 2)][3] = DialogControlLastCreated();
    }
    lv_tier = 1;
    for ( ; ( (auto1050508C_ai >= 0 && lv_tier <= auto1050508C_ae) || (auto1050508C_ai < 0 && lv_tier >= auto1050508C_ae) ) ; lv_tier += auto1050508C_ai ) {
        lv_tierIndex = 1;
        for ( ; ( (auto7FB1E291_ai >= 0 && lv_tierIndex <= auto7FB1E291_ae) || (auto7FB1E291_ai < 0 && lv_tierIndex >= auto7FB1E291_ae) ) ; lv_tierIndex += auto7FB1E291_ai ) {
            DialogControlHookup(libSwaC_gv_zS_KerriganUITierButtons[lv_tier][lv_tierIndex], c_triggerControlTypeImage, "IconImage");
            libSwaC_gv_zS_KerriganUITierButtonIcons[lv_tier][lv_tierIndex] = DialogControlLastCreated();
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), libSwaC_gf_ZS_KerriganUITierAbilityIcon(libSwaC_gv_zS_KerriganTechTierItems[lv_tier][lv_tierIndex]), PlayerGroupAll());
        }
    }
    DialogControlHookup(libSwaC_gv_zS_KerriganUITierTemplate, c_triggerControlTypeLabel, "StatValue1Label");
    libSwaC_gv_zS_KerriganUITierHeroStatHealthValue = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_KerriganUITierTemplate, c_triggerControlTypeLabel, "StatValue2Label");
    libSwaC_gv_zS_KerriganUITierHeroStatEnergyValue = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_KerriganUITierTemplate, c_triggerControlTypeLabel, "StatValue3Label");
    libSwaC_gv_zS_KerriganUITierHeroStatDamageValue = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_KerriganUITierTemplate, c_triggerControlTypeLabel, "StatValue4Label");
    libSwaC_gv_zS_KerriganUITierHeroStatArmorValue = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_KerriganUITierTemplate, c_triggerControlTypeLabel, "StatName1Label");
    libSwaC_gv_zS_KerriganUITierHeroStatHealthLabel = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_KerriganUITierTemplate, c_triggerControlTypeLabel, "StatName2Label");
    libSwaC_gv_zS_KerriganUITierHeroStatEnergyLabel = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_KerriganUITierTemplate, c_triggerControlTypeLabel, "StatName3Label");
    libSwaC_gv_zS_KerriganUITierHeroStatDamageLabel = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_KerriganUITierTemplate, c_triggerControlTypeLabel, "StatName4Label");
    libSwaC_gv_zS_KerriganUITierHeroStatArmorLabel = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_KerriganUITierTemplate, c_triggerControlTypeFlash, "StatLevelUpEffect");
    libSwaC_gv_zS_KerriganUITierLevelUpFlash = DialogControlLastCreated();
}

void libSwaC_gf_ZS_KerriganUITierHookupButtonFX (int lp_parentControl, string lp_frame) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlHookup(lp_parentControl, c_triggerControlTypePortrait, lp_frame);
    libNtve_gf_SetDialogItemModel(DialogControlLastCreated(), "SMX1_KerriganAbilityConfirmationButtonEffect", PlayerGroupAll());
    PortraitSetActor(PortraitGetTriggerControl(DialogControlLastCreated()), "PortraitActorWithDeath");
    ActorSend(ActorFromPortrait(PortraitGetTriggerControl(DialogControlLastCreated())), "SetVisibility");
}

void libSwaC_gf_ZS_KerriganUITierUpdate () {
    // Variable Declarations
    int lv_tier;
    int lv_tierIndex;
    int lv_progressPercentageWidth;
    fixed lv_progressPercentage;
    int lv_index;

    // Automatic Variable Declarations
    const int auto84BFBAB3_ae = libSwaC_gv_zSC_KerriganAbilityTiers;
    const int auto84BFBAB3_ai = 1;
    const int auto453EBFA2_ae = libSwaC_gv_zSC_KerriganAbilityTierItems;
    const int auto453EBFA2_ai = 1;
    const int auto578EB237_ae = libSwaC_gv_zSC_KerriganAbilityTiers;
    const int auto578EB237_ai = 1;
    const int autoFF8DA11D_ae = libSwaC_gv_zSC_KerriganAbilityTiers;
    const int autoFF8DA11D_ai = 1;
    int auto8CF529C2_ae;
    const int auto8CF529C2_ai = 1;

    // Variable Initialization

    // Implementation
    libSwaC_gf_ZS_ApplyKerriganTechTiers(1);
    libSwaC_gf_ZS_ApplyKerriganLevelBonus(1);
    libSwaC_gf_ZS_ApplyKerriganModelUpgrades(1);
    lv_tier = 1;
    for ( ; ( (auto84BFBAB3_ai >= 0 && lv_tier <= auto84BFBAB3_ae) || (auto84BFBAB3_ai < 0 && lv_tier >= auto84BFBAB3_ae) ) ; lv_tier += auto84BFBAB3_ai ) {
        lv_tierIndex = 1;
        for ( ; ( (auto453EBFA2_ai >= 0 && lv_tierIndex <= auto453EBFA2_ae) || (auto453EBFA2_ai < 0 && lv_tierIndex >= auto453EBFA2_ae) ) ; lv_tierIndex += auto453EBFA2_ai ) {
            if ((libSwaC_gf_ZS_KerriganTierCost2(lv_tier) == true) && (libSwaC_gf_ZS_KerriganUITierIsAnimating(lv_tier) == false)) {
                DialogControlSetEnabled(libSwaC_gv_zS_KerriganUITierButtons[lv_tier][lv_tierIndex], PlayerGroupAll(), true);
                DialogControlSetVisible(libSwaC_gv_zS_KerriganUITierButtons[lv_tier][lv_tierIndex], PlayerGroupAll(), true);
                DialogControlSetEnabled(libSwaC_gv_zS_KerriganUITierButtonIcons[lv_tier][lv_tierIndex], PlayerGroupAll(), true);
                DialogControlSetVisible(libSwaC_gv_zS_KerriganUITierButtonIcons[lv_tier][lv_tierIndex], PlayerGroupAll(), true);
                libNtve_gf_SetDialogItemTooltip(libSwaC_gv_zS_KerriganUITierButtons[lv_tier][lv_tierIndex], libSwaC_gf_ZS_KerriganTierReward(libSwaC_gv_zS_KerriganTechTierItems[lv_tier][lv_tierIndex]), PlayerGroupAll());
                DialogControlSetEnabled(libSwaC_gv_zS_KerriganUITierButtonLabel[lv_tier][lv_tierIndex], PlayerGroupAll(), true);
                libNtve_gf_SetDialogItemText(libSwaC_gv_zS_KerriganUITierButtonLabel[lv_tier][lv_tierIndex], libSwaC_gf_ZS_KerriganUITierAbilityName(libSwaC_gv_zS_KerriganTechTierItems[lv_tier][lv_tierIndex]), PlayerGroupAll());
                if ((libSwaC_gv_zSX_KerriganTechTiers[lv_tier] == lv_tierIndex)) {
                    libNtve_gf_SetDialogItemToggled(libSwaC_gv_zS_KerriganUITierButtons[lv_tier][lv_tierIndex], true, PlayerGroupAll());
                    libNtve_gf_SetDialogItemStyle(libSwaC_gv_zS_KerriganUITierButtonLabel[lv_tier][lv_tierIndex], "KerriganCustomizationPanelAbilityNameSelected", PlayerGroupAll());
                }
                else {
                    libNtve_gf_SetDialogItemToggled(libSwaC_gv_zS_KerriganUITierButtons[lv_tier][lv_tierIndex], false, PlayerGroupAll());
                    libNtve_gf_SetDialogItemStyle(libSwaC_gv_zS_KerriganUITierButtonLabel[lv_tier][lv_tierIndex], "KerriganCustomizationPanelAbilityName", PlayerGroupAll());
                }
            }
            else {
                DialogControlSetEnabled(libSwaC_gv_zS_KerriganUITierButtons[lv_tier][lv_tierIndex], PlayerGroupAll(), false);
                DialogControlSetVisible(libSwaC_gv_zS_KerriganUITierButtons[lv_tier][lv_tierIndex], PlayerGroupAll(), true);
                DialogControlSetEnabled(libSwaC_gv_zS_KerriganUITierButtonIcons[lv_tier][lv_tierIndex], PlayerGroupAll(), false);
                DialogControlSetVisible(libSwaC_gv_zS_KerriganUITierButtonIcons[lv_tier][lv_tierIndex], PlayerGroupAll(), true);
                libNtve_gf_SetDialogItemTooltip(libSwaC_gv_zS_KerriganUITierButtons[lv_tier][lv_tierIndex], libSwaC_gf_ZS_KerriganTierReward(libSwaC_gv_zS_KerriganTechTierItems[lv_tier][lv_tierIndex]), PlayerGroupAll());
                DialogControlSetEnabled(libSwaC_gv_zS_KerriganUITierButtonLabel[lv_tier][lv_tierIndex], PlayerGroupAll(), false);
                libNtve_gf_SetDialogItemText(libSwaC_gv_zS_KerriganUITierButtonLabel[lv_tier][lv_tierIndex], libSwaC_gf_ZS_KerriganUITierAbilityName(libSwaC_gv_zS_KerriganTechTierItems[lv_tier][lv_tierIndex]), PlayerGroupAll());
            }
        }
    }
    if ((((libSwaC_gf_StoryInSimulation() == true) && (libSwaC_gf_KerriganPhaseCheck(libSwaC_ge_KerriganPhase_KerriganPhaseGhost) == false)) || ((UserDataGetInt("StoryStates", "Kerrigan Primal Column Displayed", "value", 1) == 1) && (libSwaC_gf_StoryInSimulation() == false)))) {
        DialogControlSetPositionRelative(libSwaC_gv_zS_KerriganUITierAbilityFrame[5], PlayerGroupAll(), c_anchorTopLeft, libSwaC_gv_zS_KerriganUITierTemplate3, c_anchorTopLeft, 0, 0);
        lv_tier = 1;
        for ( ; ( (autoFF8DA11D_ai >= 0 && lv_tier <= autoFF8DA11D_ae) || (autoFF8DA11D_ai < 0 && lv_tier >= autoFF8DA11D_ae) ) ; lv_tier += autoFF8DA11D_ai ) {
            DialogControlSetVisible(libSwaC_gv_zS_KerriganUITierButtons[lv_tier][3], PlayerGroupAll(), true);
            DialogControlSetVisible(libSwaC_gv_zS_KerriganUITierButtonLabel[lv_tier][3], PlayerGroupAll(), true);
        }
    }
    else {
        DialogControlSetPositionRelative(libSwaC_gv_zS_KerriganUITierAbilityFrame[5], PlayerGroupAll(), c_anchorTopLeft, libSwaC_gv_zS_KerriganUITierTemplate2, c_anchorTopLeft, 0, 0);
        lv_tier = 1;
        for ( ; ( (auto578EB237_ai >= 0 && lv_tier <= auto578EB237_ae) || (auto578EB237_ai < 0 && lv_tier >= auto578EB237_ae) ) ; lv_tier += auto578EB237_ai ) {
            DialogControlSetVisible(libSwaC_gv_zS_KerriganUITierButtons[lv_tier][3], PlayerGroupAll(), false);
            DialogControlSetVisible(libSwaC_gv_zS_KerriganUITierButtonLabel[lv_tier][3], PlayerGroupAll(), false);
        }
    }
    auto8CF529C2_ae = (libSwaC_gv_zSC_KerriganAbilityTiers-libSwaC_gv_zSC_KerriganAbilityTiers2);
    lv_tier = 1;
    for ( ; ( (auto8CF529C2_ai >= 0 && lv_tier <= auto8CF529C2_ae) || (auto8CF529C2_ai < 0 && lv_tier >= auto8CF529C2_ae) ) ; lv_tier += auto8CF529C2_ai ) {
        if ((libSwaC_gf_ZS_KerriganTierCost2((lv_tier+libSwaC_gv_zSC_KerriganAbilityTiers2)) == true) && (libSwaC_gf_ZS_KerriganUITierIsAnimating((lv_tier+libSwaC_gv_zSC_KerriganAbilityTiers2)) == false)) {
            DialogControlSetVisible(libSwaC_gv_zS_KerriganUITierAbilityFrame2[lv_tier], PlayerGroupAll(), true);
            DialogControlSetVisible(libSwaC_gv_zS_KerriganUITierAbilityFrame3[lv_tier], PlayerGroupAll(), false);
            DialogControlSetVisible(libSwaC_gv_zS_KerriganUITierAbilityFrameLabel[lv_tier], PlayerGroupAll(), false);
        }
        else {
            DialogControlSetVisible(libSwaC_gv_zS_KerriganUITierAbilityFrame2[lv_tier], PlayerGroupAll(), false);
            DialogControlSetVisible(libSwaC_gv_zS_KerriganUITierAbilityFrame3[lv_tier], PlayerGroupAll(), true);
            DialogControlSetVisible(libSwaC_gv_zS_KerriganUITierAbilityFrameLabel[lv_tier], PlayerGroupAll(), true);
            TextExpressionSetToken("Param/Expression/lib_SwaC_F7CB0407", "Level", IntToText(libSwaC_gf_ZS_KerriganTierCost((lv_tier+libSwaC_gv_zSC_KerriganAbilityTiers2))));
            libNtve_gf_SetDialogItemText(libSwaC_gv_zS_KerriganUITierAbilityFrameLabel[lv_tier], TextExpressionAssemble("Param/Expression/lib_SwaC_F7CB0407"), PlayerGroupAll());
        }
    }
    libNtve_gf_SetDialogItemText(libSwaC_gv_zS_KerriganUITierAbilityFrameLabel[0], StringExternal("Param/Value/lib_SwaC_DEEE7FA5"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libSwaC_gv_zS_KerriganUITierHeroStatHealthLabel, StringExternal("Param/Value/lib_SwaC_3F3BB48E"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libSwaC_gv_zS_KerriganUITierHeroStatEnergyLabel, StringExternal("Param/Value/lib_SwaC_C762090A"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libSwaC_gv_zS_KerriganUITierHeroStatArmorLabel, StringExternal("Param/Value/lib_SwaC_B15C255D"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libSwaC_gv_zS_KerriganUITierHeroStatDamageLabel, StringExternal("Param/Value/lib_SwaC_E362F92F"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libSwaC_gv_zS_KerriganUITierHeroStatHealthValue, FixedToText(IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogUnit, "K5Kerrigan", "LifeMax", 1)), 0), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libSwaC_gv_zS_KerriganUITierHeroStatEnergyValue, FixedToText(IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogUnit, "K5Kerrigan", "EnergyMax", 1)), 0), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libSwaC_gv_zS_KerriganUITierHeroStatArmorValue, FixedToText(IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogUnit, "K5Kerrigan", "LifeArmor", 1)), 0), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libSwaC_gv_zS_KerriganUITierHeroStatDamageValue, FixedToText(IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogEffect, "ChainReaction1Damage", "Amount", 1)), 0), PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/lib_SwaC_613F8FE2", "Level", IntToText(libSwaC_gv_zS_KerriganLevel));
    libNtve_gf_SetDialogItemText(libSwaC_gv_zS_KerriganUITierPowerLevelLabel, TextExpressionAssemble("Param/Expression/lib_SwaC_613F8FE2"), PlayerGroupAll());
    if ((libSwaC_gv_zS_KerriganLevel > 0)) {
        DialogControlSetSize(libSwaC_gv_zS_KerriganUITierPowerBar, PlayerGroupAll(), (libSwaC_gv_zS_KerriganLevel * 12), 36);
        DialogControlSetVisible(libSwaC_gv_zS_KerriganUITierPowerBar, PlayerGroupAll(), true);
    }
    else {
        DialogControlSetVisible(libSwaC_gv_zS_KerriganUITierPowerBar, PlayerGroupAll(), false);
    }
    if ((libSwaC_gf_StoryInSimulation() == true)) {
        libNtve_gf_SetDialogItemTooltip(libSwaC_gv_zS_KerriganUITierCloseButton, ConversationDataStateText("StoryModeText|ArchivesKerriganBackTooltip", "Description"), PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemTooltip(libSwaC_gv_zS_KerriganUITierCloseButton, StringExternal("ConversationState/MissionPanelTooltips/Close_Button/Info/Description"), PlayerGroupAll());
    }
}

void libSwaC_gf_ZS_KerriganUIUpdateButtonFXInstant () {
    // Variable Declarations
    int lv_tier;
    int lv_index;

    // Automatic Variable Declarations
    const int auto2BDF51B8_ae = libSwaC_gv_zSC_KerriganAbilityTiers;
    const int auto2BDF51B8_ai = 1;
    const int auto4F8C91CB_ae = libSwaC_gv_zSC_KerriganAbilityTierItems;
    const int auto4F8C91CB_ai = 1;

    // Variable Initialization

    // Implementation
    lv_tier = 1;
    for ( ; ( (auto2BDF51B8_ai >= 0 && lv_tier <= auto2BDF51B8_ae) || (auto2BDF51B8_ai < 0 && lv_tier >= auto2BDF51B8_ae) ) ; lv_tier += auto2BDF51B8_ai ) {
        lv_index = 1;
        for ( ; ( (auto4F8C91CB_ai >= 0 && lv_index <= auto4F8C91CB_ae) || (auto4F8C91CB_ai < 0 && lv_index >= auto4F8C91CB_ae) ) ; lv_index += auto4F8C91CB_ai ) {
            if ((libSwaC_gf_ZS_KerriganTierCost2(lv_tier) == true) && (libSwaC_gf_ZS_KerriganUITierIsAnimating(lv_tier) == false) && (libSwaC_gv_zSX_KerriganTechTiers[lv_tier] == lv_index)) {
                DialogControlSetVisible(libSwaC_gv_zS_KerriganUITierButtons2[lv_tier][lv_index], PlayerGroupAll(), true);
                ActorSend(ActorFromPortrait(PortraitGetTriggerControl(libSwaC_gv_zS_KerriganUITierButtons2[lv_tier][lv_index])), "SetVisibility 1");
            }
            else {
                DialogControlSetVisible(libSwaC_gv_zS_KerriganUITierButtons2[lv_tier][lv_index], PlayerGroupAll(), false);
                ActorSend(ActorFromPortrait(PortraitGetTriggerControl(libSwaC_gv_zS_KerriganUITierButtons2[lv_tier][lv_index])), "SetVisibility");
            }
        }
    }
}

void libSwaC_gf_ZS_KerriganUIShowLevelUpFlash () {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libSwaC_gv_zS_KerriganUITierLevelUpFlash, PlayerGroupAll(), true);
    DialogControlInvokeAsText(libSwaC_gv_zS_KerriganUITierLevelUpFlash, PlayerGroupAll(), "SetLevelInfo", StringExternal("Param/Value/lib_SwaC_B4507058"), IntToText((libSwaC_gv_zS_KerriganUIFinalXP-libSwaC_gv_zS_KerriganUIOriginalXP)), null, null);
    if ((libSwaC_gv_zS_KerriganUIDeltaHealth > 0)) {
        DialogControlInvokeAsText(libSwaC_gv_zS_KerriganUITierLevelUpFlash, PlayerGroupAll(), "SetValues", StringExternal("Param/Value/lib_SwaC_8BC0753C"), IntToText(libSwaC_gv_zS_KerriganUIDeltaHealth), IntToText(1), null);
    }

    if ((libSwaC_gv_zS_KerriganUIDeltaEnergy > 0)) {
        DialogControlInvokeAsText(libSwaC_gv_zS_KerriganUITierLevelUpFlash, PlayerGroupAll(), "SetValues", StringExternal("Param/Value/lib_SwaC_09465941"), IntToText(libSwaC_gv_zS_KerriganUIDeltaEnergy), IntToText(2), null);
    }

    if ((libSwaC_gv_zS_KerriganUIDeltaDamage > 0)) {
        DialogControlInvokeAsText(libSwaC_gv_zS_KerriganUITierLevelUpFlash, PlayerGroupAll(), "SetValues", StringExternal("Param/Value/lib_SwaC_ED79A5FE"), IntToText(libSwaC_gv_zS_KerriganUIDeltaDamage), IntToText(3), null);
    }

    if ((libSwaC_gv_zS_KerriganUIDeltaArmor > 0)) {
        DialogControlInvokeAsText(libSwaC_gv_zS_KerriganUITierLevelUpFlash, PlayerGroupAll(), "SetValues", StringExternal("Param/Value/lib_SwaC_F3C699AA"), IntToText(libSwaC_gv_zS_KerriganUIDeltaArmor), IntToText(4), null);
    }

    DialogControlInvokeAsString(libSwaC_gv_zS_KerriganUITierLevelUpFlash, PlayerGroupAll(), "PlayStatEffect", null, null, null, null);
}

text libSwaC_gf_ZS_KerriganUITierAbilityName (string lp_heroAbility) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogHeroAbil, (lp_heroAbility), "Name", 1));
}

text libSwaC_gf_ZS_KerriganUITierAbilityTooltip (string lp_heroAbility) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogHeroAbil, (lp_heroAbility), "Name", 1));
}

string libSwaC_gf_ZS_KerriganUITierMovie (string lp_kerriganAbility) {
    // Variable Declarations
    string lv_moviePath;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_moviePath = "";

    // Implementation
    lv_moviePath = CatalogFieldValueGet(c_gameCatalogHeroAbil, (lp_kerriganAbility), "Movie", 1);
    return (lv_moviePath);
}

string libSwaC_gf_ZS_KerriganUITierAbilityIcon (string lp_kerriganAbility) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogHeroAbil, lp_kerriganAbility, "Icon", 1));
}

bool libSwaC_gf_ZS_KerriganUITierIsNew (int lp_tier) {
    // Automatic Variable Declarations
    // Implementation
    if ((libSwaC_gf_ZS_KerriganTierCost(lp_tier) > libSwaC_gv_zSX_KerriganUILastKnownXP) && (libSwaC_gf_ZS_KerriganTierCost(lp_tier) <= libSwaC_gv_zS_KerriganUIFinalXP)) {
        return true;
    }

    return false;
}

bool libSwaC_gf_ZS_KerriganUITierIsAnimating (int lp_tier) {
    // Automatic Variable Declarations
    // Implementation
    if ((libSwaC_gv_zS_KerriganUITierLevel < lp_tier)) {
        return true;
    }

    return false;
}

void libSwaC_gf_ZS_ShowKerriganUIBackground () {
    // Variable Declarations
    string lv_model;
    string lv_actor;
    unitgroup lv_unitgroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitgroup = UnitGroupEmpty();

    // Implementation
    if ((libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindStory) == true)) {
        GameSetLighting("SMX1KerriganUpgradeBackground", 0.0);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_KerriganUpgrades", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        if ((libSwaC_gv_zS_KerriganUIBackground == null)) {
            UnitCreate(1, "SMX1KerriganUpgradeBackground", c_unitCreateIgnorePlacement, 0, Point(50.0, 50.0), 270.0);
            libSwaC_gv_zS_KerriganUIBackground = UnitLastCreated();
        }
        else {
            libNtve_gf_ShowHideUnit(libSwaC_gv_zS_KerriganUIBackground, true);
        }
        if ((libSwaC_gv_zS_KerriganUIBackgroundKerrigan != null)) {
            ActorSend(libSwaC_gv_zS_KerriganUIBackgroundKerrigan, "Destroy Immediate");
        }

        lv_actor = libSwaC_gf_ZS_KerriganUIKerirganModelType();
        libNtve_gf_AttachActorToUnit(libSwaC_gv_zS_KerriganUIBackground, lv_actor, "Ref_Target");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 10.500000");
        libSwaC_gv_zS_KerriganUIBackgroundKerrigan = libNtve_gf_ActorLastCreated();
        CameraUseModel(1, libSwaC_gv_zS_KerriganUIBackground, "Star2Camera003", 0.0);
    }
    else {
        if ((libSwaC_gf_MissionStatusCheck("ZZerus2", libSwaC_ge_MissionStatus_Completed) == true)) {
            libNtve_gf_SetDialogItemImage(libSwaC_gv_zS_KerriganCustomWindowBG, "Assets\\Textures\\ui_hots_kerriganupgradecheat_primal.dds", PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemImage(libSwaC_gv_zS_KerriganCustomWindowBG, "Assets\\Textures\\ui_hots_kerriganupgradecheat_ghost.dds", PlayerGroupAll());
        }
    }
}

string libSwaC_gf_ZS_KerriganUIKerirganModelType () {
    // Automatic Variable Declarations
    int autoFC983203_val;

    // Implementation
    autoFC983203_val = libSwaC_gv_zS_KerriganPhase;
    if (autoFC983203_val == libSwaC_ge_KerriganPhase_KerriganPhaseGhost) {
        return "SMX1KerriganCustomizationGhost";
    }
    else if (autoFC983203_val == libSwaC_ge_KerriganPhase_KerriganPhaseQueenOfBlade) {
        return "SMX1KerriganCustomizationInfested";
    }
    else if (autoFC983203_val == libSwaC_ge_KerriganPhase_KerriganPhasePostHybrid) {
        return "SMX1KerriganCustomizationInfested";
    }
    else {
    }
    return null;
}

void libSwaC_gf_ZS_HideKerriganUIBackground () {
    // Automatic Variable Declarations
    // Implementation
    if ((libSwaC_gv_zS_KerriganUIBackground != null) && (libNtve_gf_UnitIsHidden(libSwaC_gv_zS_KerriganUIBackground) == false)) {
        libNtve_gf_ShowHideUnit(libSwaC_gv_zS_KerriganUIBackground, false);
    }

    if ((libSwaC_gv_zS_KerriganUIBackgroundKerrigan != null)) {
        ActorSend(libSwaC_gv_zS_KerriganUIBackgroundKerrigan, "Destroy Immediate");
        libSwaC_gv_zS_KerriganUIBackgroundKerrigan = null;
    }

}

string libSwaC_gf_ZS_HeroUnitType (int lp_hero) {
    // Automatic Variable Declarations
    int auto6E49F63B_val;

    // Implementation
    auto6E49F63B_val = lp_hero;
    if (auto6E49F63B_val == libSwaC_ge_HeroUnit_Kerrigan) {
        return "K5Kerrigan";
    }
    else if (auto6E49F63B_val == libSwaC_ge_HeroUnit_Dehaka) {
        return "Dehaka";
    }
    else if (auto6E49F63B_val == libSwaC_ge_HeroUnit_Stukov) {
        return "InfestedStukov";
    }
    else {
        return "K5Kerrigan";
    }
}

void libSwaC_gf_CreateHero2 (point lp_spawnPoint, int lp_player, int lp_type, fixed lp_facing, int lp_flags, int lp_purpose) {
    // Automatic Variable Declarations
    int auto8AE132D5_val;
    int auto5F1EBD54_val;

    // Implementation
    UnitCreate(1, libSwaC_gf_ZS_HeroUnitType(lp_type), lp_flags, lp_player, lp_spawnPoint, lp_facing);
    if ((lp_purpose == libSwaC_ge_KerriganCreatePurpose_GamePlay)) {
        auto5F1EBD54_val = lp_type;
        if (auto5F1EBD54_val == libSwaC_ge_HeroUnit_Kerrigan) {
            libSwaC_gf_RegisterCampaignKerrigan(UnitLastCreated());
            UnitSetPropertyFixed(libSwaC_gv_zS_Kerrigan, c_unitPropXP, IntToFixed(libSwaC_gv_zS_KerriganLevel));
            libSwaC_gv_zS_KerriganActor = libNtve_gf_MainActorofUnit(UnitLastCreated());
        }
        else if (auto5F1EBD54_val == libSwaC_ge_HeroUnit_Dehaka) {
            libSwaC_gv_zS_Dehaka = UnitLastCreated();
            libSwaC_gv_zS_DehakaActor = libNtve_gf_MainActorofUnit(UnitLastCreated());
        }
        else if (auto5F1EBD54_val == libSwaC_ge_HeroUnit_Stukov) {
            libSwaC_gv_zS_Stukov = UnitLastCreated();
            libSwaC_gv_zS_StukovActor = libNtve_gf_MainActorofUnit(UnitLastCreated());
        }
        else {
        }
        UnitStatusBarOverride(UnitLastCreated(), c_unitStatusGroupOwner);
    }
    else {
        auto8AE132D5_val = lp_type;
        if (auto8AE132D5_val == libSwaC_ge_HeroUnit_Kerrigan) {
            UserDataSetInt("KerriganStates", "Alive", "Value", 1, 1);
            UserDataSetInt("KerriganStates", "Dead", "Value", 1, 0);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropXP, IntToFixed(libSwaC_gv_zS_KerriganLevel));
        }
        else if (auto8AE132D5_val == libSwaC_ge_HeroUnit_Dehaka) {
        }
        else if (auto8AE132D5_val == libSwaC_ge_HeroUnit_Stukov) {
        }
        else {
        }
    }
    libSwaC_gf_ZS_ApplyKerriganTechTiers(lp_player);
    libSwaC_gf_ZS_ApplyKerriganLevelBonus(lp_player);
}

void libSwaC_gf_ZS_CreateKerriganPing () {
    // Automatic Variable Declarations
    // Implementation
    if ((libSwaC_gv_zS_KerriganPing == c_invalidPingId)) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingCircleImportant", UnitGetPosition(libSwaC_gv_zS_Kerrigan), ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, 270.0);
        libSwaC_gv_zS_KerriganPing = PingLastCreated();
        PingSetScale(PingLastCreated(), 0.4);
    }

    PingSetUnit(libSwaC_gv_zS_KerriganPing, libSwaC_gv_zS_Kerrigan);
    PingSetUseUnitVisibility(libSwaC_gv_zS_KerriganPing, true);
    if ((libSwaC_gf_KerriganPhaseCheck(libSwaC_ge_KerriganPhase_KerriganPhaseGhost) == true)) {
        PingSetUseUnitTeamColor(libSwaC_gv_zS_KerriganPing, true);
    }
    else {
        PingSetUseUnitTeamColor(libSwaC_gv_zS_KerriganPing, false);
        PingSetColor(libSwaC_gv_zS_KerriganPing, Color(70.59, 47.06, 100.00));
    }
}

void libSwaC_gf_RegisterCampaignKerrigan (unit lp_kerrigan) {
    // Automatic Variable Declarations
    // Implementation
    libSwaC_gv_zS_Kerrigan = lp_kerrigan;
    libSwaC_gv_zS_KerriganActor = libNtve_gf_MainActorofUnit(lp_kerrigan);
    if ((UnitIsAlive(lp_kerrigan) == true)) {
        UserDataSetInt("KerriganStates", "Alive", "Value", 1, 1);
        UserDataSetInt("KerriganStates", "Dead", "Value", 1, 0);
    }
    else {
        UserDataSetInt("KerriganStates", "Alive", "Value", 1, 0);
        UserDataSetInt("KerriganStates", "Dead", "Value", 1, 1);
    }
    libSwaC_gf_ZS_CreateKerriganPing();
    UnitStatusBarOverride(libSwaC_gv_zS_Kerrigan, c_unitStatusGroupAll);
}

bool libSwaC_gf_StoryKerriganHasNewAbilities () {
    // Variable Declarations
    int lv_indexTier;
    string lv_indexAbility;

    // Automatic Variable Declarations
    int autoCDAAB5C8_ae;
    int autoCDAAB5C8_ai;

    // Variable Initialization

    // Implementation
    autoCDAAB5C8_ae = CatalogEntryCount(c_gameCatalogHeroAbil);
    autoCDAAB5C8_ai = 1;
    while (autoCDAAB5C8_ai <= autoCDAAB5C8_ae) {
        lv_indexAbility = CatalogEntryGet(c_gameCatalogHeroAbil, autoCDAAB5C8_ai);
        if ((libSwaC_gf_ZS_KerriganAbilityTier(lv_indexAbility) != 0) && (libSwaC_gf_ZS_KerriganAbilityCost(lv_indexAbility) <= libSwaC_gf_StoryKerriganLevel()) && (libSwaC_gv_zSX_KerriganTechTiers[libSwaC_gf_ZS_KerriganAbilityTier(lv_indexAbility)] == 0)) {
            return true;
        }

        autoCDAAB5C8_ai = autoCDAAB5C8_ai + 1;
    }
    return false;
}

bool libSwaC_gf_StoryKerriganNewTierUnlocked () {
    // Variable Declarations
    int lv_tier;
    int lv_currentTier;

    // Automatic Variable Declarations
    const int autoE0FB49D3_ae = 5;
    const int autoE0FB49D3_ai = 1;

    // Variable Initialization

    // Implementation
    if (((libSwaC_gf_LastMapConditionCheck(libSwaC_ge_MissionCondition_Sucessful) == false) || (libSwaC_gf_LastMapConditionCheck(libSwaC_ge_MissionCondition_Simulation) == true) || (libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_LastMap(), c_mapKindMission) == false))) {
        return false;
    }

    lv_tier = 1;
    for ( ; ( (autoE0FB49D3_ai >= 0 && lv_tier <= autoE0FB49D3_ae) || (autoE0FB49D3_ai < 0 && lv_tier >= autoE0FB49D3_ae) ) ; lv_tier += autoE0FB49D3_ai ) {
        if ((libSwaC_gf_ZS_KerriganTierCost2(lv_tier) == true)) {
            lv_currentTier = lv_tier;
        }

    }
    if (((lv_currentTier >= 5) || (lv_currentTier == 0))) {
        return false;
    }

    return (libSwaC_gf_ZS_KerriganTierCost(lv_currentTier) > (libSwaC_gv_zS_KerriganLevel-libSwaC_gf_MissionRewardTotalEarned(libSwaC_gf_LastSuccessfulMission(), "KerriganXP")));
}

void libSwaC_gf_ZS_EnableKerriganTierAbility (bool lp_enableDisable, string lp_kerriganAbility) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_enableDisable == true)) {
        libSwaC_gf_ZS_EnableUpgradeAndAbilityCommandForTech(true, c_gameCatalogHeroAbil, (lp_kerriganAbility), "UpgradeArray", null, 1);
    }
    else {
        libSwaC_gf_ZS_EnableUpgradeAndAbilityCommandForTech(false, c_gameCatalogHeroAbil, (lp_kerriganAbility), "UpgradeArray", "AbilCommandArray", 1);
    }
}

string libSwaC_gf_ZS_KerriganAbilityUserData (string lp_ability) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataInstanceFromReference(CatalogFieldValueGet(c_gameCatalogHeroAbil, (lp_ability), "UserReference", c_playerAny));
}

int libSwaC_gf_ZS_KerriganAbilityTier (string lp_kerriganAbility) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("KerriganAbility", libSwaC_gf_ZS_KerriganAbilityUserData(lp_kerriganAbility), "Tier", 1);
}

int libSwaC_gf_ZS_KerriganAbilityTierIndex (string lp_kerriganAbility) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("KerriganAbility", libSwaC_gf_ZS_KerriganAbilityUserData(lp_kerriganAbility), "TierIndex", 1);
}

int libSwaC_gf_ZS_KerriganAbilityCost (string lp_kerriganAbility) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("KerriganAbility", libSwaC_gf_ZS_KerriganAbilityUserData(lp_kerriganAbility), "Cost", 1);
}

int libSwaC_gf_ZS_KerriganAbilityState (string lp_kerriganAbility) {
    // Variable Declarations
    int lv_tier;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_tier = libSwaC_gf_ZS_KerriganAbilityTier(lp_kerriganAbility);
    if ((libSwaC_gf_ZS_KerriganTierCost2(lv_tier) == false)) {
        return c_armyCategoryStateLocked;
    }

    if ((libSwaC_gv_zSX_KerriganTechTiers[lv_tier] != 0) && (libSwaC_gf_ZS_KerriganAbilityTierIndex(lp_kerriganAbility) == libSwaC_gv_zSX_KerriganTechTiers[lv_tier])) {
        return c_armyCategoryStateUnlocked;
    }

    return c_armyCategoryStateUnlocked;
}

int libSwaC_gf_ZS_KerriganTierCost (int lp_tier) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_tier > libSwaC_gv_zSC_KerriganAbilityTiers)) {
        return 0;
    }

    return libSwaC_gf_ZS_KerriganAbilityCost(libSwaC_gv_zS_KerriganTechTierItems[lp_tier][1]);
}

int libSwaC_gf_ZS_KerriganTierFromXP () {
    // Variable Declarations
    int lv_tier;

    // Automatic Variable Declarations
    const int auto20DAB83E_ae = libSwaC_gv_zSC_KerriganAbilityTiers;
    const int auto20DAB83E_ai = 1;

    // Variable Initialization

    // Implementation
    lv_tier = 1;
    for ( ; ( (auto20DAB83E_ai >= 0 && lv_tier <= auto20DAB83E_ae) || (auto20DAB83E_ai < 0 && lv_tier >= auto20DAB83E_ae) ) ; lv_tier += auto20DAB83E_ai ) {
        if ((libSwaC_gf_ZS_KerriganTierCost2(lv_tier) == false)) {
            return (lv_tier-1);
        }

    }
    return libSwaC_gv_zSC_KerriganAbilityTiers;
}

bool libSwaC_gf_ZS_KerriganTierCost2 (int lp_tier) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_tier <= libSwaC_gv_zSC_KerriganAbilityTiers) && (libSwaC_gf_ZS_KerriganTierCost(lp_tier) <= libSwaC_gv_zS_KerriganLevel)) {
        return true;
    }

    return false;
}

text libSwaC_gf_ZS_KerriganTierDescription (string lp_kerriganAbility) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("KerriganAbility", libSwaC_gf_ZS_KerriganAbilityUserData(lp_kerriganAbility), "Description", 1);
}

text libSwaC_gf_ZS_KerriganTierReward (string lp_kerriganAbility) {
    // Variable Declarations
    text lv_rewardText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    TextExpressionSetToken("Param/Expression/lib_SwaC_0E83E59E", "A", libSwaC_gf_ZS_KerriganUITierAbilityName(lp_kerriganAbility));
    TextExpressionSetToken("Param/Expression/lib_SwaC_0E83E59E", "B", UserDataGetText("KerriganAbility", libSwaC_gf_ZS_KerriganAbilityUserData(lp_kerriganAbility), "Rewards", 1));
    lv_rewardText = TextExpressionAssemble("Param/Expression/lib_SwaC_0E83E59E");
    return lv_rewardText;
}

void libSwaC_gf_ZS_ApplyKerriganModelUpgrades (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libSwaC_gf_MissionStatusCheck("ZZerus2", libSwaC_ge_MissionStatus_Completed) == true)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganPostZerusSounds", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganPostLabSounds", 0);
    }
    else {
        if ((libSwaC_gf_MissionStatusCheck("ZLab3", libSwaC_ge_MissionStatus_Completed) == true)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganPostLabSounds", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganPostZerusSounds", 0);
        }
        else {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganPostLabSounds", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganPostZerusSounds", 0);
        }
    }
    libSwaC_gf_ZS_UpdateKerriganType();
    if (((libSwaC_gf_KerriganPhaseCheck(libSwaC_ge_KerriganPhase_KerriganPhaseQueenOfBlade) == true) || (libSwaC_gf_KerriganPhaseCheck(libSwaC_ge_KerriganPhase_KerriganPhasePostHybrid) == true))) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganPostZerus", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganGhostCosmetic", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganInfestedCosmetic", 1);
    }
    else {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganInfestedCosmetic", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganGhostCosmetic", 1);
    }
    if ((libSwaC_gf_KerriganPhaseCheck(libSwaC_ge_KerriganPhase_KerriganPhasePostHybrid) == true)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganPostHybrid", 1);
    }

    libSwaC_gf_ZS_KerriganCustomStatusBarUpdate();
}

void libSwaC_gf_ZS_UpdateKerriganType () {
    // Automatic Variable Declarations
    // Implementation
    if ((libSwaC_gf_MissionStatusCheck("ZZerus2", libSwaC_ge_MissionStatus_Completed) == false)) {
        libSwaC_gv_zS_KerriganPhase = libSwaC_ge_KerriganPhase_KerriganPhaseGhost;
    }
    else {
        if ((libSwaC_gf_MissionStatusCheck("ZHybrid3", libSwaC_ge_MissionStatus_Completed) == false)) {
            libSwaC_gv_zS_KerriganPhase = libSwaC_ge_KerriganPhase_KerriganPhaseQueenOfBlade;
        }
        else {
            libSwaC_gv_zS_KerriganPhase = libSwaC_ge_KerriganPhase_KerriganPhasePostHybrid;
        }
    }
}

void libSwaC_gf_ZS_KerriganCustomStatusBarUpdate () {
    // Automatic Variable Declarations
    // Implementation
    if ((libSwaC_gv_zS_KerriganLevel > 0)) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganStatusBarUpgrade", 1);
    }
    else {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganStatusBarUpgrade", 0);
    }
}

bool libSwaC_gf_KerriganPhaseCheck (int lp_phase) {
    // Automatic Variable Declarations
    // Implementation
    return (lp_phase == libSwaC_gv_zS_KerriganPhase);
}

int libSwaC_gf_StoryKerriganLevel () {
    // Automatic Variable Declarations
    // Implementation
    return libSwaC_gf_ZS_KerriganLevelFromXP(libSwaC_gv_zS_KerriganLevel);
}

void libSwaC_gf_SetStoryKerriganLevel (int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    libSwaC_gf_SetStoryKerriganExperience(libSwaC_gf_ZS_KerriganXPFromLevel(lp_level));
}

int libSwaC_gf_StoryKerriganExperience () {
    // Automatic Variable Declarations
    // Implementation
    return libSwaC_gv_zS_KerriganLevel;
}

void libSwaC_gf_SetStoryKerriganExperience (int lp_xP) {
    // Automatic Variable Declarations
    // Implementation
    libSwaC_gv_zS_KerriganCheatXP = lp_xP;
}

void libSwaC_gf_ZS_LevelUpKerrigan () {
    // Variable Declarations
    int lv_originalXP;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_originalXP = libSwaC_gv_zS_KerriganLevel;
    libSwaC_gf_ZS_RecalculateKerriganXP();
    if (((libSwaC_gv_zS_DebugSuppressKerriganAchievements == true) || (libSwaC_gv_zS_KerriganLevel <= lv_originalXP))) {
        return ;
    }

    libSwaC_gf_ZS_PlayKerriganHeroPanelLevelUpEffect();
    AchievementTermQuantitySet(1, "KerriganPower10", MinI(libSwaC_gv_zS_KerriganActualLevel, 10));
    AchievementTermQuantitySet(1, "KerriganPower20", MinI(libSwaC_gv_zS_KerriganActualLevel, 20));
    AchievementTermQuantitySet(1, "KerriganPower30", MinI(libSwaC_gv_zS_KerriganActualLevel, 30));
    AchievementTermQuantitySet(1, "KerriganPower40", MinI(libSwaC_gv_zS_KerriganActualLevel, 40));
    AchievementTermQuantitySet(1, "KerriganPower50", MinI(libSwaC_gv_zS_KerriganActualLevel, 50));
    AchievementTermQuantitySet(1, "KerriganPower60", MinI(libSwaC_gv_zS_KerriganActualLevel, 60));
    AchievementTermQuantitySet(1, "KerriganPower70", MinI(libSwaC_gv_zS_KerriganActualLevel, 70));
}

void libSwaC_gf_ZS_RecalculateKerriganXP () {
    // Variable Declarations
    string lv_indexObjective;
    string lv_indexMission;

    // Automatic Variable Declarations
    int auto181985AF_ae;
    int auto181985AF_ai;
    int autoAA3F32B2_ae;
    int autoAA3F32B2_ai;

    // Variable Initialization

    // Implementation
    libSwaC_gv_zS_KerriganLevel = 1;
    libSwaC_gv_zS_KerriganActualLevel = 1;
    auto181985AF_ae = CatalogEntryCount(c_gameCatalogMap);
    auto181985AF_ai = 1;
    while (auto181985AF_ai <= auto181985AF_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto181985AF_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            if (((libSwaC_gf_MissionStatusCheck(lv_indexMission, libSwaC_ge_MissionStatus_Completed) == true) || (lv_indexMission == libSwaC_gf_CurrentMap()))) {
                libSwaC_gv_zS_KerriganLevel += libSwaC_gf_MissionRewardTotalEarned(lv_indexMission, "KerriganXP");
                libSwaC_gv_zS_KerriganActualLevel += libSwaC_gf_MissionRewardTotalEarned(lv_indexMission, "KerriganXP");
                if ((lv_indexMission == libSwaC_gf_CurrentMap()) && (DataTableGetInt(true, ("ZPrevStatus_" + (lv_indexMission))) > 0)) {
                    libSwaC_gv_zS_KerriganActualLevel += libSwaC_gf_ZS_MissionKerriganXPRewarded(lv_indexMission, false);
                }

            }
            else {
                if ((DataTableGetInt(true, ("ZPrevStatus_" + (lv_indexMission))) > 0)) {
                    libSwaC_gv_zS_KerriganActualLevel += libSwaC_gf_ZS_MissionKerriganXPRewarded(lv_indexMission, false);
                    autoAA3F32B2_ae = CatalogFieldValueCount(c_gameCatalogMap, lv_indexMission, "ObjectiveArray", 1);
                    autoAA3F32B2_ai = 1;
                    while (autoAA3F32B2_ai <= autoAA3F32B2_ae) {
                        lv_indexObjective = CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "ObjectiveArray["+IntToString(autoAA3F32B2_ai-1)+"]", 1);
                        if ((libSwaC_gf_MissionObjectiveIsPrimary(lv_indexObjective) == false)) {
                            if ((libSwaC_gf_ZS_ObjectiveRewardDivided(lv_indexObjective) == false)) {
                                if ((libSwaC_gf_ZS_MissionObjectiveBestProgress(lv_indexObjective) == libSwaC_gf_MissionObjectiveItemCount(lv_indexObjective))) {
                                    libSwaC_gv_zS_KerriganActualLevel += libSwaC_gf_MissionObjectiveRewards(lv_indexObjective, "KerriganXP");
                                }

                            }
                            else {
                                libSwaC_gv_zS_KerriganActualLevel += (libSwaC_gf_ZS_MissionObjectiveBestProgress(lv_indexObjective)*libSwaC_gf_MissionObjectiveRewards(lv_indexObjective, "KerriganXP"));
                            }
                        }

                        autoAA3F32B2_ai = autoAA3F32B2_ai + 1;
                    }
                }

            }
        }
        auto181985AF_ai = auto181985AF_ai + 1;
    }
    if ((libSwaC_gf_ZS_KerriganLevelFromXP((libSwaC_gv_zS_KerriganCheatXP + libSwaC_gv_zS_KerriganLevel)) > libSwaC_gv_zSC_KERRIGANMAXLEVEL)) {
        libSwaC_gv_zS_KerriganCheatXP = (libSwaC_gf_ZS_KerriganXPFromLevel(libSwaC_gv_zSC_KERRIGANMAXLEVEL) - libSwaC_gv_zS_KerriganLevel);
    }

    libSwaC_gv_zS_KerriganLevel += libSwaC_gv_zS_KerriganCheatXP;
    if ((libSwaC_gv_zS_Kerrigan != null)) {
        UnitSetPropertyFixed(libSwaC_gv_zS_Kerrigan, c_unitPropXP, IntToFixed(libSwaC_gv_zS_KerriganLevel));
    }

    libSwaC_gf_ZS_KerriganCustomStatusBarUpdate();
    UserDataSetInt("StoryStates", "Kerrigan Current Level", "value", 1, libSwaC_gv_zS_KerriganLevel);
}

int libSwaC_gf_ZS_KerriganLevelXPMax (int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    return 1;
}

int libSwaC_gf_ZS_KerriganLevelFromXP (int lp_xP) {
    // Automatic Variable Declarations
    // Implementation
    return lp_xP;
}

int libSwaC_gf_ZS_KerriganXPFromLevel (int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    return lp_level;
}

void libSwaC_gf_ZS_SaveKerriganTechToBank (bank lp_bank, string lp_sectionTech) {
    // Automatic Variable Declarations
    // Implementation
    UserDataSaveType("KerriganAbility", lp_bank, lp_sectionTech);
    libSwaC_gf_ZS_SaveTransitionVarInteger(lp_bank, lp_sectionTech, "Tier1", libSwaC_gv_zSX_KerriganTechTiers[1], 1);
    libSwaC_gf_ZS_SaveTransitionVarInteger(lp_bank, lp_sectionTech, "Tier2", libSwaC_gv_zSX_KerriganTechTiers[2], 1);
    libSwaC_gf_ZS_SaveTransitionVarInteger(lp_bank, lp_sectionTech, "Tier3", libSwaC_gv_zSX_KerriganTechTiers[3], 0);
    libSwaC_gf_ZS_SaveTransitionVarInteger(lp_bank, lp_sectionTech, "Tier4", libSwaC_gv_zSX_KerriganTechTiers[4], 0);
    libSwaC_gf_ZS_SaveTransitionVarInteger(lp_bank, lp_sectionTech, "Tier5", libSwaC_gv_zSX_KerriganTechTiers[5], 0);
    libSwaC_gf_ZS_SaveTransitionVarInteger(lp_bank, lp_sectionTech, "Tier6", libSwaC_gv_zSX_KerriganTechTiers[6], 0);
    libSwaC_gf_ZS_SaveTransitionVarInteger(lp_bank, lp_sectionTech, "Tier7", libSwaC_gv_zSX_KerriganTechTiers[7], 0);
    libSwaC_gf_ZS_SaveTransitionVarInteger(lp_bank, lp_sectionTech, "LastKnownXP", libSwaC_gv_zSX_KerriganUILastKnownXP, 0);
}

void libSwaC_gf_ZS_LoadKerriganTechFromBank (bank lp_bank, string lp_sectionTech) {
    // Automatic Variable Declarations
    // Implementation
    UserDataLoadType("KerriganAbility", lp_bank, lp_sectionTech);
    libSwaC_gv_zSX_KerriganTechTiers[1] = libSwaC_gf_ZS_LoadTransitionVarInteger(lp_bank, lp_sectionTech, "Tier1", 1);
    libSwaC_gv_zSX_KerriganTechTiers[2] = libSwaC_gf_ZS_LoadTransitionVarInteger(lp_bank, lp_sectionTech, "Tier2", 1);
    libSwaC_gv_zSX_KerriganTechTiers[3] = libSwaC_gf_ZS_LoadTransitionVarInteger(lp_bank, lp_sectionTech, "Tier3", 0);
    libSwaC_gv_zSX_KerriganTechTiers[4] = libSwaC_gf_ZS_LoadTransitionVarInteger(lp_bank, lp_sectionTech, "Tier4", 0);
    libSwaC_gv_zSX_KerriganTechTiers[5] = libSwaC_gf_ZS_LoadTransitionVarInteger(lp_bank, lp_sectionTech, "Tier5", 0);
    libSwaC_gv_zSX_KerriganTechTiers[6] = libSwaC_gf_ZS_LoadTransitionVarInteger(lp_bank, lp_sectionTech, "Tier6", 0);
    libSwaC_gv_zSX_KerriganTechTiers[7] = libSwaC_gf_ZS_LoadTransitionVarInteger(lp_bank, lp_sectionTech, "Tier7", 0);
    libSwaC_gv_zSX_KerriganUILastKnownXP = libSwaC_gf_ZS_LoadTransitionVarInteger(lp_bank, lp_sectionTech, "LastKnownXP", 0);
}

void libSwaC_gf_ZS_UpdateKerriganTech () {
    // Variable Declarations
    string lv_kerriganAbility;
    int lv_tier;
    int lv_tierIndex;

    // Automatic Variable Declarations
    int auto21900934_ae;
    int auto21900934_ai;
    const int auto013D39FF_ae = libSwaC_gv_zSC_KerriganAbilityTiers;
    const int auto013D39FF_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libSwaC_gv_zS_KerriganCustomWindowDisplayed == true)) {
        libSwaC_gv_zS_KerriganLevel = libSwaC_gv_zS_KerriganUIXP;
    }
    else {
        libSwaC_gf_ZS_RecalculateKerriganXP();
    }
    if ((libSwaC_gv_zS_KerriganUITiersLoaded == false)) {
        auto21900934_ae = CatalogEntryCount(c_gameCatalogHeroAbil);
        auto21900934_ai = 1;
        while (auto21900934_ai <= auto21900934_ae) {
            lv_kerriganAbility = CatalogEntryGet(c_gameCatalogHeroAbil, auto21900934_ai);
            libSwaC_gf_ZS_EnableKerriganTierAbility(false, lv_kerriganAbility);
            if ((libSwaC_gf_ZS_KerriganAbilityTier(lv_kerriganAbility) >= 1) && (libSwaC_gf_ZS_KerriganAbilityTier(lv_kerriganAbility) <= libSwaC_gv_zSC_KerriganAbilityTiers) && (libSwaC_gf_ZS_KerriganAbilityTierIndex(lv_kerriganAbility) >= 1) && (libSwaC_gf_ZS_KerriganAbilityTierIndex(lv_kerriganAbility) <= libSwaC_gv_zSC_KerriganAbilityTierItems)) {
                libSwaC_gv_zS_KerriganTechTierItems[libSwaC_gf_ZS_KerriganAbilityTier(lv_kerriganAbility)][libSwaC_gf_ZS_KerriganAbilityTierIndex(lv_kerriganAbility)] = lv_kerriganAbility;
            }

            auto21900934_ai = auto21900934_ai + 1;
        }
        libSwaC_gv_zS_KerriganUITiersLoaded = true;
    }

    if ((libSwaC_gf_MissionStatusCheck("ZZerus2", libSwaC_ge_MissionStatus_Completed) == false)) {
        lv_tier = 1;
        for ( ; ( (auto013D39FF_ai >= 0 && lv_tier <= auto013D39FF_ae) || (auto013D39FF_ai < 0 && lv_tier >= auto013D39FF_ae) ) ; lv_tier += auto013D39FF_ai ) {
            if ((libSwaC_gv_zSX_KerriganTechTiers[lv_tier] == 3)) {
                if ((lv_tier <= 2)) {
                    libSwaC_gv_zSX_KerriganTechTiers[lv_tier] = 1;
                }
                else {
                    libSwaC_gv_zSX_KerriganTechTiers[lv_tier] = 0;
                }
            }

        }
    }

}

void libSwaC_gf_ZS_ApplyKerriganTechTiers (int lp_player) {
    // Variable Declarations
    string lv_kerriganAbility;
    int lv_tier;
    int lv_tierIndex;

    // Automatic Variable Declarations
    const int autoE58C9BE2_ae = libSwaC_gv_zSC_KerriganAbilityTiers;
    const int autoE58C9BE2_ai = 1;
    const int auto375AB269_ae = libSwaC_gv_zSC_KerriganAbilityTierItems;
    const int auto375AB269_ai = 1;

    // Variable Initialization

    // Implementation
    libSwaC_gf_ZS_UpdateKerriganTech();
    if ((libSwaC_gf_CurrentMap() == "ZZerus3")) {
        libSwaC_gf_ZS_EnableKerriganTierAbility(true, "K5PsiStrike");
        libSwaC_gf_ZS_EnableKerriganTierAbility(true, "K5PrimalSlash");
        libSwaC_gf_ZS_EnableKerriganTierAbility(true, "K5Mend");
    }
    else if ((libSwaC_gf_CurrentMap() == "ZLab2")) {
        libSwaC_gf_ZS_EnableKerriganTierAbility(true, "K5MindBolt");
        libSwaC_gf_ZS_EnableKerriganTierAbility(true, "K5CrushingGrip");
    }
    else if (true) {
        lv_tier = 1;
        for ( ; ( (autoE58C9BE2_ai >= 0 && lv_tier <= autoE58C9BE2_ae) || (autoE58C9BE2_ai < 0 && lv_tier >= autoE58C9BE2_ae) ) ; lv_tier += autoE58C9BE2_ai ) {
            lv_tierIndex = 1;
            for ( ; ( (auto375AB269_ai >= 0 && lv_tierIndex <= auto375AB269_ae) || (auto375AB269_ai < 0 && lv_tierIndex >= auto375AB269_ae) ) ; lv_tierIndex += auto375AB269_ai ) {
                if ((libSwaC_gf_ZS_KerriganAbilityCost(libSwaC_gv_zS_KerriganTechTierItems[lv_tier][lv_tierIndex]) <= libSwaC_gv_zS_KerriganLevel)) {
                    if ((lv_tierIndex == libSwaC_gv_zSX_KerriganTechTiers[lv_tier])) {
                        libSwaC_gf_ZS_EnableKerriganTierAbility(true, libSwaC_gv_zS_KerriganTechTierItems[lv_tier][lv_tierIndex]);
                    }
                    else {
                        libSwaC_gf_ZS_EnableKerriganTierAbility(false, libSwaC_gv_zS_KerriganTechTierItems[lv_tier][lv_tierIndex]);
                    }
                }
                else {
                    libSwaC_gf_ZS_EnableKerriganTierAbility(false, libSwaC_gv_zS_KerriganTechTierItems[lv_tier][lv_tierIndex]);
                }
            }
        }
    }
    libSwaC_gf_ZS_ApplyKerriganModelUpgrades(lp_player);
}

void libSwaC_gf_ZS_ResetKerriganTechTiers () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto86A662A6_ae = 2;
    const int auto86A662A6_ai = 1;
    const int auto003D8739_ae = libSwaC_gv_zSC_KerriganAbilityTiers;
    const int auto003D8739_ai = 1;

    // Variable Initialization

    // Implementation
    libSwaC_gf_SetStoryKerriganExperience(0);
    libSwaC_gv_zSX_KerriganUILastKnownXP = 0;
    lv_index = 1;
    for ( ; ( (auto86A662A6_ai >= 0 && lv_index <= auto86A662A6_ae) || (auto86A662A6_ai < 0 && lv_index >= auto86A662A6_ae) ) ; lv_index += auto86A662A6_ai ) {
        libSwaC_gv_zSX_KerriganTechTiers[lv_index] = 1;
    }
    lv_index = 3;
    for ( ; ( (auto003D8739_ai >= 0 && lv_index <= auto003D8739_ae) || (auto003D8739_ai < 0 && lv_index >= auto003D8739_ae) ) ; lv_index += auto003D8739_ai ) {
        libSwaC_gv_zSX_KerriganTechTiers[lv_index] = 0;
    }
}

int libSwaC_gf_ZS_KerriganReturnLevelBonusLife (int lp_kerriganLevel) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("KerriganLevels", UserDataInstance("KerriganLevels", lp_kerriganLevel), "Life", 1);
}

int libSwaC_gf_ZS_KerriganReturnLevelBonusEnergy (int lp_kerriganLevel) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("KerriganLevels", UserDataInstance("KerriganLevels", lp_kerriganLevel), "Energy", 1);
}

int libSwaC_gf_ZS_KerriganReturnLevelBonusArmor (int lp_kerriganLevel) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("KerriganLevels", UserDataInstance("KerriganLevels", lp_kerriganLevel), "Armor", 1);
}

int libSwaC_gf_ZS_KerriganReturnLevelBonusDamage (int lp_kerriganLevel) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("KerriganLevels", UserDataInstance("KerriganLevels", lp_kerriganLevel), "Damage", 1);
}

void libSwaC_gf_ZS_ApplyKerriganLevelBonus (int lp_player) {
    // Variable Declarations
    int lv_life;
    int lv_energy;
    int lv_damage;
    int lv_armor;
    int lv_index;

    // Automatic Variable Declarations
    int auto2EE227FF_ae;
    const int auto2EE227FF_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libSwaC_gv_zS_KerriganLevel > 1)) {
        auto2EE227FF_ae = libSwaC_gv_zS_KerriganLevel;
        lv_index = 2;
        for ( ; ( (auto2EE227FF_ai >= 0 && lv_index <= auto2EE227FF_ae) || (auto2EE227FF_ai < 0 && lv_index >= auto2EE227FF_ae) ) ; lv_index += auto2EE227FF_ai ) {
            lv_life += libSwaC_gf_ZS_KerriganReturnLevelBonusLife(lv_index);
            lv_energy += libSwaC_gf_ZS_KerriganReturnLevelBonusEnergy(lv_index);
            lv_damage += libSwaC_gf_ZS_KerriganReturnLevelBonusDamage(lv_index);
            lv_armor += libSwaC_gf_ZS_KerriganReturnLevelBonusArmor(lv_index);
        }
    }

    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganKitUpgradeEnergy", ModI(lv_energy, 10));
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganKitUpgradeHealth", ModI(lv_life, 10));
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganKitUpgradeEnergy10", (lv_energy / 10));
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganKitUpgradeHealth10", (lv_life / 10));
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganKitUpgradeDamage", lv_damage);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganKitUpgradeArmor", lv_armor);
}

void libSwaC_gf_StorySetSimulationMission (string lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    if ((libSwaC_gv_zS_StorySimulationMission != null)) {
        libSwaC_gf_StorySimulationEnd();
    }

    BankLoad("ZStorySimulation", 1);
    libSwaC_gv_zS_StorySimulationOriginalBank = BankLastCreated();
    libSwaC_gv_zS_StorySimulationMission = lp_mission;
    if ((libSwaC_gv_zS_InCompletedCampaign == true)) {
        libSwaC_gf_ZS_SaveMapToBank(null, libSwaC_gv_zS_StorySimulationOriginalBank, false);
        libSwaC_gf_ZS_SaveArmyCategoryToBank(libSwaC_gv_zS_StorySimulationOriginalBank, libSwaC_gf_ZS_BankSectionName(null, "ArmyCategory"));
        libSwaC_gf_ZS_SaveArmyUpgradeToBank(libSwaC_gv_zS_StorySimulationOriginalBank, libSwaC_gf_ZS_BankSectionName(null, "ArmyUpgrade"));
        libSwaC_gf_ZS_SaveArmyUnitToBank(libSwaC_gv_zS_StorySimulationOriginalBank, libSwaC_gf_ZS_BankSectionName(null, "ArmyUnit"));
        libSwaC_gf_ZS_SaveKerriganTechToBank(libSwaC_gv_zS_StorySimulationOriginalBank, libSwaC_gf_ZS_BankSectionName(null, "KerriganTech"));
        libSwaC_gf_ZS_OpenCampaignBank();
        if ((libSwaC_gf_ZS_MissionSectionExists(lp_mission) == true)) {
            libSwaC_gf_ZS_LoadArmyUpgradeFromBank(libSwaC_gv_zS_CampaignBank, libSwaC_gf_ZS_BankSectionName(lp_mission, "ArmyUpgrade"));
            libSwaC_gf_ZS_LoadArmyUnitFromBank(libSwaC_gv_zS_CampaignBank, libSwaC_gf_ZS_BankSectionName(lp_mission, "ArmyUnit"));
            libSwaC_gf_ZS_LoadKerriganTechFromBank(libSwaC_gv_zS_CampaignBank, libSwaC_gf_ZS_BankSectionName(lp_mission, "KerriganTech"));
        }

        libSwaC_gf_ZS_UpdateSimulationMissionAges(lp_mission);
    }
    else {
        libSwaC_gf_ZS_SaveMapToBank(null, libSwaC_gv_zS_StorySimulationOriginalBank, false);
        libSwaC_gf_ZS_SaveArmyCategoryToBank(libSwaC_gv_zS_StorySimulationOriginalBank, libSwaC_gf_ZS_BankSectionName(null, "ArmyCategory"));
        libSwaC_gf_ZS_SaveArmyUpgradeToBank(libSwaC_gv_zS_StorySimulationOriginalBank, libSwaC_gf_ZS_BankSectionName(null, "ArmyUpgrade"));
        libSwaC_gf_ZS_SaveArmyUnitToBank(libSwaC_gv_zS_StorySimulationOriginalBank, libSwaC_gf_ZS_BankSectionName(null, "ArmyUnit"));
        libSwaC_gf_ZS_SaveKerriganTechToBank(libSwaC_gv_zS_StorySimulationOriginalBank, libSwaC_gf_ZS_BankSectionName(null, "KerriganTech"));
        libSwaC_gf_ZS_OpenCampaignBank();
        if ((libSwaC_gf_ZS_MissionSectionExists(lp_mission) == true)) {
            libSwaC_gf_ZS_LoadMapFromBank(lp_mission, libSwaC_gv_zS_CampaignBank);
            libSwaC_gf_ZS_LoadArmyUpgradeFromBank(libSwaC_gv_zS_CampaignBank, libSwaC_gf_ZS_BankSectionName(lp_mission, "ArmyUpgrade"));
            libSwaC_gf_ZS_LoadArmyUnitFromBank(libSwaC_gv_zS_CampaignBank, libSwaC_gf_ZS_BankSectionName(lp_mission, "ArmyUnit"));
            libSwaC_gf_ZS_LoadKerriganTechFromBank(libSwaC_gv_zS_CampaignBank, libSwaC_gf_ZS_BankSectionName(lp_mission, "KerriganTech"));
        }

        libSwaC_gf_ZS_ClampProgressToMission(lp_mission);
    }
}

void libSwaC_gf_StorySimulationEnd () {
    // Automatic Variable Declarations
    // Implementation
    libSwaC_gf_ZS_SetMissionSectionExists(libSwaC_gv_zS_StorySimulationMission, true);
    libSwaC_gf_ZS_SaveArmyUpgradeToBank(libSwaC_gv_zS_CampaignBank, libSwaC_gf_ZS_BankSectionName(libSwaC_gv_zS_StorySimulationMission, "ArmyUpgrade"));
    libSwaC_gf_ZS_SaveArmyUnitToBank(libSwaC_gv_zS_CampaignBank, libSwaC_gf_ZS_BankSectionName(libSwaC_gv_zS_StorySimulationMission, "ArmyUnit"));
    libSwaC_gf_ZS_SaveKerriganTechToBank(libSwaC_gv_zS_CampaignBank, libSwaC_gf_ZS_BankSectionName(libSwaC_gv_zS_StorySimulationMission, "KerriganTech"));
    libSwaC_gv_zS_StorySimulationMission = null;
    libSwaC_gf_ZS_LoadMapFromBank(null, libSwaC_gv_zS_StorySimulationOriginalBank);
    libSwaC_gf_ZS_LoadArmyCategoryFromBank(libSwaC_gv_zS_StorySimulationOriginalBank, libSwaC_gf_ZS_BankSectionName(null, "ArmyCategory"));
    libSwaC_gf_ZS_LoadArmyUpgradeFromBank(libSwaC_gv_zS_StorySimulationOriginalBank, libSwaC_gf_ZS_BankSectionName(null, "ArmyUpgrade"));
    libSwaC_gf_ZS_LoadArmyUnitFromBank(libSwaC_gv_zS_StorySimulationOriginalBank, libSwaC_gf_ZS_BankSectionName(null, "ArmyUnit"));
    libSwaC_gf_ZS_LoadKerriganTechFromBank(libSwaC_gv_zS_StorySimulationOriginalBank, libSwaC_gf_ZS_BankSectionName(null, "KerriganTech"));
    libSwaC_gf_UpdateMissionFlow();
    libSwaC_gf_ZS_UpdateTechStates(1);
    libSwaC_gf_ZS_ApplyTech(1);
    BankRemove(libSwaC_gv_zS_StorySimulationOriginalBank);
}

bool libSwaC_gf_StoryInSimulation () {
    // Automatic Variable Declarations
    // Implementation
    return (libSwaC_gv_zS_StorySimulationMission != null);
}

void libSwaC_gf_ULoadCampaignData (string lp_map) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto520078D4_g;
    playergroup auto6FEC778D_g;

    // Variable Initialization

    // Implementation
    CampaignMode(PlayerGroupAll(), true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTeamResourceButton, false);
    libNtve_gf_AddRemoveUIFrameTypeForGlobalFilterList(true, c_syncFrameTypeTextTag);
    TriggerDebugSetTypeFile(1, "StoryModeDebug.txt");
    libSwaC_gv_zS_CurrentMap = lp_map;
    UserDataSetInt("Maps", libSwaC_gf_ZS_MapUserDataInstance(lp_map), "IsCurrent", 1, 1);
    libSwaC_gv_zS_InStoryMode = libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindStory);
    AchievementPanelSetCategory(PlayerGroupAll(), UserDataGetGameLink("Maps", libSwaC_gf_ZS_MapUserDataInstance(lp_map), "Achievements", 1));
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_SwaC_ED876F0C"), false);
    libSwaC_gf_ZS_LoadAllTransitionData(lp_map);
    if ((GameIsTestMap(true) == true)) {
        libSwaC_gf_ResetCampaignData();
        libSwaC_gf_ZS_CompleteMission("ZLab1");
        libSwaC_gf_ZS_CompleteMission("ZLab2");
        libSwaC_gf_ZS_CompleteMission("ZLab3");
        libSwaC_gf_UpdateMissionFlow();
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_SwaC_2AD3369D"), false);
    if ((libSwaC_gv_zS_InCompletedCampaign == true) && ((libSwaC_gv_zSX_IsSimulation == true) || (libSwaC_gv_zSX_IsVictoryPlayAgain == true))) {
        libSwaC_gf_ZS_UpdateSimulationMissionAges(lp_map);
    }

    libSwaC_gf_ZS_UpdatePlanetData(libSwaC_gf_StoryMapPlanet(libSwaC_gf_CurrentMap()));
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_SwaC_8FED583B"), false);
    libSwaC_gf_ZS_OpenArmyTechBank();
    libSwaC_gf_ZS_OpenStoryBank();
    if ((libSwaC_gv_zS_InCompletedCampaign == true) && (libSwaC_gf_StoryMapTypeCheck(libSwaC_gv_zS_CurrentMap, c_mapKindStory) == true)) {
        libSwaC_gf_ZS_ArchivesBankSyncForLoad();
    }

    if ((libSwaC_gv_zS_InCompletedCampaign == true) && (libSwaC_gf_StoryMapTypeCheck(libSwaC_gv_zS_CurrentMap, c_mapKindStory) == false)) {
        CampaignProgressEnableCampaignSaves(PlayerGroupAll(), false);
    }
    else {
        CampaignProgressEnableCampaignSaves(PlayerGroupAll(), true);
    }
    libSwaC_gf_ZS_CampaignPreload();
    libSwaC_gf_ZS_SwarmCampaignMissionInit();
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_SwaC_D8912FAC"), false);
    libSwaC_gf_ZS_ApplyTech(1);
    libSwaC_gf_ZS_StoreTechBonusAtMissionBeginning();
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_SwaC_1A7C23AB"), false);
    TransmissionSetOption(c_transmissionOptionHideAlertPanel, true);
    auto520078D4_g = PlayerGroupAll();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto520078D4_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((PlayerType(lv_indexPlayer) != c_playerTypeUser)) {
            PlayerSetState(lv_indexPlayer, c_playerStateDisplayInLeaderPanel, false);
            PlayerSetState(lv_indexPlayer, c_playerStateDisplayInViewMenu, false);
            PlayerSetState(lv_indexPlayer, c_playerStateShowScore, false);
        }

    }
    if ((libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindStory) == true)) {
        PlayerSetColorIndex(1, libSwaC_gf_CampaignKerriganZergPlayerColor(), true);
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_SwaC_13D3AE1E"), false);
    auto6FEC778D_g = PlayerGroupAll();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto6FEC778D_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        PlayerSetState(lv_indexPlayer, c_playerStateContinueEnabled, false);
    }
    if ((libSwaC_gv_zS_InStoryMode == false)) {
        UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogRestartButton, true);
    }
    else {
        UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogRestartButton, false);
    }
    if ((libSwaC_gv_zS_InStoryMode == false) && ((libSwaC_gv_zSX_IsSimulation == true) || ((libSwaC_gf_CurrentMap() != "ZLab1") && (libSwaC_gf_CurrentMap() != "ZLab2") && (libSwaC_gf_CurrentMap() != "ZLab3")))) {
        UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogAbortButton, true);
        if ((libSwaC_gv_zSX_IsSimulation == true)) {
            UISetGameMenuItemText(PlayerGroupAll(), c_gameMenuDialogAbortButton, StringExternal("Param/Value/lib_SwaC_3FE3B4E6"));
        }

    }
    else {
        UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogAbortButton, false);
    }
    libSwaC_gf_ZS_PrepareLoadingScreen(lp_map, true);
    UISetAchievementToastStyle(PlayerGroupAll(), c_achievementToastStyleZerg);
    if ((libSwaC_gf_LastMap() == null) && (libSwaC_gf_CampaignDebugModeIsOn("ProgressCheat") == true) && ((libSwaC_gf_CurrentMap() == "ZLab1") || (libSwaC_gf_CurrentMap() == "ZStoryLab"))) {
        libSwaC_gv_zSX_DebugProgress = true;
        libSwaC_gf_ZS_DebugProgressDisplayDialog(null, libSwaC_gt_ZS_DebugProgressOKCallback, null);
        while (!((libSwaC_gv_zS_DebugProgressDialog == c_invalidDialogId))) {
            Wait(0.5, c_timeGame);
        }
    }

    if ((libSwaC_gv_zSX_IsSimulation == true)) {
        GameCheatAllow(c_gameCheatProgress, false);
    }

    GameCheatAllow(c_gameCheatTechTree, false);
    GameCheatAllow(c_gameCheatTV, false);
    TriggerExecute(libSwaC_gt_ZS_LoadCampaignStatsData, true, false);
    TriggerExecute(libSwaC_gt_ZS_CollectCampaignStatsDataMisisonStart, true, false);
    TriggerExecute(libSwaC_gt_ZS_SaveCampaignStatsData, true, false);
}

void libSwaC_gf_PrepareForMission (string lp_nextMission, bool lp_nextIsSimulation, bool lp_nextIsVictoryAgain, int lp_difficulty) {
    // Automatic Variable Declarations
    // Implementation
    SetNextMissionDifficulty(PlayerGroupAll(), lp_difficulty);
    if ((lp_nextIsSimulation == false)) {
        libSwaC_gf_ZS_SetCampaignDifficulty(lp_difficulty);
    }

    if ((libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindStory) == true) && (libSwaC_gf_StoryMapTypeCheck(lp_nextMission, c_mapKindStory) == false)) {
        libSwaC_gf_ZS_SaveArmyTechBank(lp_nextMission, lp_nextIsSimulation);
    }

    if ((libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindStory) == true)) {
        libSwaC_gf_DispatchStoryEvent(libSwaC_ge_ZS_Event_TransitionFromStoryMap, "Mission", "", true);
    }

    if ((libSwaC_gv_zS_ArchivesReloading == true)) {
        while (!((libSwaC_gv_zS_ArchivesReloading == false))) {
            Wait(0.1, c_timeGame);
        }
    }

    libSwaC_gf_ZS_SaveAllTransitionData(lp_nextIsSimulation, lp_nextIsVictoryAgain, false);
    libSwaC_gf_ZS_PrepareLoadingScreen(lp_nextMission, false);
    if ((libSwaC_gf_StoryMapTypeCheck(lp_nextMission, c_mapKindUpgrade) == true)) {
        GameSetNextMap(("Campaign/Swarm/Evolution/" + libSwaC_gf_StoryMapFile(lp_nextMission)));
    }
    else {
        GameSetNextMap(("Campaign/Swarm/" + libSwaC_gf_StoryMapFile(lp_nextMission)));
    }
}

void libSwaC_gf_PrepareForStoryMode (int lp_victoryDefeat, int lp_difficulty) {
    // Variable Declarations
    string lv_planet;
    bool lv_isActuallyVictory;
    string lv_nextMap;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_isActuallyVictory = ((lp_victoryDefeat == c_gameOverVictory) || libSwaC_gv_zSX_IsVictoryPlayAgain);
    if ((libSwaC_gv_zSX_IsSimulation == false) && (libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindMission) == true) && (lv_isActuallyVictory == true)) {
        libSwaC_gv_zSX_LastSuccessfulMission = libSwaC_gf_CurrentMap();
        libSwaC_gf_ZS_CompleteMission(libSwaC_gf_CurrentMap());
        libSwaC_gf_ZS_CopyWriterStatesToSnapshot();
        lv_nextMap = libSwaC_gf_PostMissionStoryMap(libSwaC_gf_CurrentMap(), libSwaC_gv_zSX_IsSimulation, c_gameOverVictory);
    }
    else {
        lv_nextMap = libSwaC_gf_PostMissionStoryMap(libSwaC_gf_CurrentMap(), libSwaC_gv_zSX_IsSimulation, lp_victoryDefeat);
    }
    if ((libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindUpgrade) == true) && (lv_isActuallyVictory == true)) {
        libSwaC_gf_ZS_CompleteMission(libSwaC_gf_CurrentMap());
    }

    SetNextMissionDifficulty(PlayerGroupSingle(1), lp_difficulty);
    libSwaC_gf_ZS_SaveAllTransitionData(false, false, (lp_victoryDefeat == c_gameOverDefeat));
    libSwaC_gf_ZS_PrepareLoadingScreen(lv_nextMap, false);
    GameSetNextMap(("Campaign/Swarm/" + libSwaC_gf_StoryMapFile(lv_nextMap)));
    TextExpressionSetToken("Param/Expression/lib_SwaC_CEE1F9DE", "A", StringToText(("Campaign/Swarm/" + libSwaC_gf_StoryMapFile(lv_nextMap))));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_SwaC_CEE1F9DE"), false);
}

void libSwaC_gf_PrepareForStoryMapSwitch (string lp_nextMap) {
    // Variable Declarations
    string lv_image;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libSwaC_gf_DispatchStoryEvent(libSwaC_ge_ZS_Event_TransitionFromStoryMap, "Story", "", true);
    libSwaC_gf_ZS_SaveAllTransitionData(false, false, false);
    libSwaC_gf_ZS_PrepareLoadingScreen(lp_nextMap, false);
    GameSetNextMap(("Campaign/Swarm/" + libSwaC_gf_StoryMapFile(lp_nextMap)));
}

void libSwaC_gf_PrepareForStoryModeTransitionalSave () {
    // Automatic Variable Declarations
    // Implementation
    libSwaC_gf_ZS_OpenCampaignBank();
    libSwaC_gf_ZS_SaveTransitionVars(libSwaC_gv_zS_CampaignBank, null, false, false, false, false, false);
    TriggerExecute(libSwaC_gt_ZS_SaveCampaignStatsData, true, true);
}

void libSwaC_gf_CreateStoryModeTransitionSave (text lp_name, text lp_transition) {
    // Variable Declarations
    string lv_transitionMap;
    string lv_image;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_transitionMap = "";

    // Implementation
    if ((libSwaC_gf_CurrentMap() == null)) {
        return ;
    }

    lv_transitionMap = ("Campaign/Swarm/" + libSwaC_gf_StoryMapFile(libSwaC_gf_PostMissionStoryMap(libSwaC_gf_CurrentMap(), libSwaC_gv_zSX_IsSimulation, c_gameOverVictory)));
    GameSetTransitionMap(lv_transitionMap);
    if ((libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindStory) == true)) {
        lv_image = libSwaC_gf_StoryMapLoadingScreenImage(libSwaC_gf_CurrentMap());
    }
    else {
        lv_image = libSwaC_gf_StoryMapLoadingScreenVictoryImage(libSwaC_gf_CurrentMap());
    }
    GameSaveCreate(lp_name, lp_transition, lv_image, true);
}

string libSwaC_gf_PostMissionStoryMap (string lp_mission, bool lp_simulation, int lp_victoryDefeat) {
    // Variable Declarations
    string lv_nextMap;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_nextMap = "ZStoryLab";

    // Implementation
    if ((lp_mission == null)) {
        lv_nextMap = "ZStoryLab";
    }
    else if ((lp_simulation == true)) {
        lv_nextMap = libSwaC_gv_zSX_LastStoryMap;
    }
    else if (((libSwaC_gf_StoryMapPlanet(lp_mission) == null) || (libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_StoryPlanetMap(libSwaC_gf_StoryMapPlanet(lp_mission)), c_mapKindMission) == true) || (libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_StoryPlanetMap(libSwaC_gf_StoryMapPlanet(lp_mission)), c_mapKindUpgrade) == true))) {
        lv_nextMap = libSwaC_gv_zSX_LastStoryMap;
    }
    else if ((lp_victoryDefeat == c_gameOverDefeat)) {
        lv_nextMap = libSwaC_gf_StoryPlanetMap(libSwaC_gf_StoryMapPlanet(lp_mission));
    }
    else if (true) {
        lv_nextMap = libSwaC_gf_StoryPlanetMap(libSwaC_gf_StoryMapPlanet(lp_mission));
    }
    return lv_nextMap;
}

bool libSwaC_gf_CurrentMissionIsSimulation () {
    // Automatic Variable Declarations
    // Implementation
    return (libSwaC_gv_zSX_IsSimulation || libSwaC_gv_zSX_IsVictoryPlayAgain);
}

string libSwaC_gf_LastMap () {
    // Automatic Variable Declarations
    // Implementation
    return libSwaC_gv_zSX_LastMap;
}

bool libSwaC_gf_LastMapConditionCheck (int lp_condition) {
    // Automatic Variable Declarations
    int auto67B28176_val;

    // Implementation
    if ((libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_LastMap(), c_mapKindStory) == false)) {
        return libSwaC_gf_LastMissionConditionCheck(lp_condition);
    }

    auto67B28176_val = lp_condition;
    if (auto67B28176_val == libSwaC_ge_MissionCondition_Sucessful) {
        return libSwaC_gv_zSX_LastMapSuccess;
    }
    else {
    }
    return false;
}

string libSwaC_gf_LastMission () {
    // Automatic Variable Declarations
    // Implementation
    return libSwaC_gv_zSX_LastMission;
}

bool libSwaC_gf_LastMissionConditionCheck (int lp_condition) {
    // Automatic Variable Declarations
    int auto00A314D6_val;

    // Implementation
    auto00A314D6_val = lp_condition;
    if (auto00A314D6_val == libSwaC_ge_MissionCondition_Sucessful) {
        return libSwaC_gv_zSX_LastMissionSuccess;
    }
    else if (auto00A314D6_val == libSwaC_ge_MissionCondition_Simulation) {
        return libSwaC_gv_zSX_LastMissionSimulation;
    }
    else {
    }
    return false;
}

string libSwaC_gf_LastSuccessfulMission () {
    // Automatic Variable Declarations
    // Implementation
    return libSwaC_gv_zSX_LastSuccessfulMission;
}

void libSwaC_gf_ZS_SaveAllTransitionData (bool lp_nextIsSimulation, bool lp_nextIsVictoryPlayAgain, bool lp_resultFromDefeat) {
    // Variable Declarations
    int lv_saveType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libSwaC_gf_ZS_OpenCampaignBank();
    libSwaC_gv_zSX_LastMap = libSwaC_gf_CurrentMap();
    if ((libSwaC_gv_zSX_IsVictoryPlayAgain == true)) {
        libSwaC_gv_zSX_LastMapSuccess = true;
    }
    else {
        libSwaC_gv_zSX_LastMapSuccess = (lp_resultFromDefeat == false);
    }
    if ((libSwaC_gf_StoryMapTypeCheck(libSwaC_gv_zSX_LastMap, c_mapKindMission) == true)) {
        libSwaC_gv_zSX_LastMission = libSwaC_gv_zSX_LastMap;
        libSwaC_gv_zSX_LastMissionSuccess = libSwaC_gv_zSX_LastMapSuccess;
        libSwaC_gv_zSX_LastMissionSimulation = libSwaC_gv_zSX_IsSimulation;
    }
    else if ((libSwaC_gf_StoryMapTypeCheck(libSwaC_gv_zSX_LastMap, c_mapKindUpgrade) == true)) {
        libSwaC_gv_zSX_LastMissionSimulation = libSwaC_gv_zSX_IsSimulation;
    }
    else if ((libSwaC_gf_StoryMapTypeCheck(libSwaC_gv_zSX_LastMap, c_mapKindStory) == true)) {
        libSwaC_gv_zSX_LastStoryMap = libSwaC_gv_zSX_LastMap;
    }
    libSwaC_gf_ZS_SaveTransitionVars(libSwaC_gv_zS_CampaignBank, null, lp_nextIsSimulation, lp_nextIsVictoryPlayAgain, lp_resultFromDefeat, libSwaC_gv_zSX_IsSimulation, libSwaC_gv_zSX_IsVictoryPlayAgain);
    libSwaC_gf_ZS_SaveCampaignBank();
}

void libSwaC_gf_ZS_LoadAllTransitionData (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    if ((libSwaC_gf_ZS_CampaignBankExists() == false)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_SwaC_7A06BBD5"), false);
        libSwaC_gf_ResetCampaignData();
        libSwaC_gf_ZS_SetCampaignDifficulty(PlayerDifficulty(1));
        libSwaC_gf_ZS_LoadLibertyInfo();
        if ((lp_map == "ZLab1")) {
            libSwaC_gf_ZS_OpenCampaignBank();
            libSwaC_gf_ZS_SaveTransitionVars(libSwaC_gv_zS_CampaignBank, lp_map, false, false, false, false, false);
        }

        return ;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_SwaC_026E3CA7"), false);
    libSwaC_gf_ZS_OpenCampaignBank();
    libSwaC_gf_ZS_LoadTransitionVars(libSwaC_gv_zS_CampaignBank, null);
    if ((libSwaC_gf_StoryMapTypeCheck(lp_map, c_mapKindMission) == true)) {
        libSwaC_gv_zS_CampaignDataBackup_MissionBestTime = libSwaC_gf_MissionCompleteBestTime(lp_map, PlayerDifficulty(1));
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_SwaC_F74FC874"), false);
    libSwaC_gf_ZS_LoadMissionSections();
}

void libSwaC_gf_ZS_SaveTransitionVars (bank lp_targetBank, string lp_map, bool lp_nextIsSimulation, bool lp_nextIsVictoryPlayAgain, bool lp_resultFromDefeat, bool lp_resultFromSimulation, bool lp_resultFromVictoryAgain) {
    // Variable Declarations
    int lv_indexScene;
    string lv__SectionName;
    string lv_indexMission;
    string lv_indexObjective;
    int lv_difficulty;
    int lv_index;

    // Automatic Variable Declarations
    int autoA085AC8C_ae;
    const int autoA085AC8C_ai = 1;

    // Variable Initialization
    lv__SectionName = "";
    lv_difficulty = 2;

    // Implementation
    if ((lp_map == null)) {
        lv__SectionName = libSwaC_gf_ZS_BankSectionName(lp_map, "CampaignLastInfo");
        libSwaC_gf_ZS_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, ("Simulation"), lp_nextIsSimulation, false);
        libSwaC_gf_ZS_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, ("VictoryPlayAgain"), lp_nextIsVictoryPlayAgain, false);
        libSwaC_gf_ZS_SaveTransitionVarString(lp_targetBank, lv__SectionName, ("LastMap"), libSwaC_gf_ZS_StoryMapBankID(libSwaC_gv_zSX_LastMap), "");
        libSwaC_gf_ZS_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, ("LastMapSuccess"), libSwaC_gv_zSX_LastMapSuccess, false);
        libSwaC_gf_ZS_SaveTransitionVarString(lp_targetBank, lv__SectionName, ("LastMission"), libSwaC_gf_ZS_StoryMapBankID(libSwaC_gv_zSX_LastMission), "");
        libSwaC_gf_ZS_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, ("LastMissionSuccess"), libSwaC_gv_zSX_LastMissionSuccess, false);
        libSwaC_gf_ZS_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, ("LastMissionSimulation"), libSwaC_gv_zSX_LastMissionSimulation, false);
        libSwaC_gf_ZS_SaveTransitionVarString(lp_targetBank, lv__SectionName, ("LastSuccessfulMission"), libSwaC_gf_ZS_StoryMapBankID(libSwaC_gv_zSX_LastSuccessfulMission), "");
        libSwaC_gf_ZS_SaveTransitionVarString(lp_targetBank, lv__SectionName, ("LastStoryMap"), libSwaC_gf_ZS_StoryMapBankID(libSwaC_gv_zSX_LastStoryMap), "");
        lv__SectionName = libSwaC_gf_ZS_BankSectionName(lp_map, "CampaignSetting");
        libSwaC_gf_ZS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, ("ZerglingRespawn"), libSwaC_gv_zS_ZerglingRespawnCount, 0);
        libSwaC_gf_ZS_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, ("AchievementsDisabled"), AchievementsDisabled(1), false);
        if ((lp_resultFromSimulation == false) && (lp_resultFromVictoryAgain == false)) {
            lv__SectionName = libSwaC_gf_ZS_BankSectionName(lp_map, "CampaignSetting");
            libSwaC_gf_ZS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, ("Difficulty"), libSwaC_gf_ZS_DifficultyIndex(libSwaC_gv_zSX_CampaignDifficulty), 0);
            libSwaC_gf_ZS_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, ("DebugProgress"), libSwaC_gv_zSX_DebugProgress, false);
            lv__SectionName = libSwaC_gf_ZS_BankSectionName(lp_map, "CampaignCredits");
            libSwaC_gf_ZS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, ("KerriganXP"), libSwaC_gv_zS_KerriganCheatXP, 0);
            lv__SectionName = libSwaC_gf_ZS_BankSectionName(lp_map, "Scenes");
            UserDataSaveType("Scenes", lp_targetBank, lv__SectionName);
            lv__SectionName = libSwaC_gf_ZS_BankSectionName(lp_map, "WriterStates");
            UserDataSaveType("WriterStates", lp_targetBank, lv__SectionName);
            lv__SectionName = libSwaC_gf_ZS_BankSectionName(lp_map, "StoryStates");
            UserDataSaveType("StoryStates", lp_targetBank, lv__SectionName);
            lv__SectionName = libSwaC_gf_ZS_BankSectionName(lp_map, "CampaignStats");
            libSwaC_gf_ZS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, ("MissionCompletedCount"), libSwaC_gf_NumberOfMissions(libSwaC_ge_MissionCountOptions_Completed), 0);
            lv__SectionName = libSwaC_gf_ZS_BankSectionName(lp_map, "CampaignStats");
            libSwaC_gf_ZS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, ("MissionCompletedCountNext"), (libSwaC_gf_NumberOfMissions(libSwaC_ge_MissionCountOptions_Completed)+1), 0);
            lv__SectionName = libSwaC_gf_ZS_BankSectionName(lp_map, "ArmyCategory");
            BankSectionCreate(lp_targetBank, lv__SectionName);
            libSwaC_gf_ZS_SaveArmyCategoryToBank(lp_targetBank, lv__SectionName);
        }

    }

    if ((lp_resultFromDefeat == true)) {
        return ;
    }

    if ((lp_map != null) && (libSwaC_gf_StoryMapTypeCheck(lp_map, c_mapKindMission) == true)) {
        libSwaC_gf_ZS_SetMissionSectionExists(lp_map, true);
    }

    if (((lp_map != null) || ((lp_resultFromSimulation == false) && (lp_resultFromVictoryAgain == false)))) {
        lv__SectionName = libSwaC_gf_ZS_BankSectionName(lp_map, "ArmyUpgrade");
        BankSectionCreate(lp_targetBank, lv__SectionName);
        libSwaC_gf_ZS_SaveArmyUpgradeToBank(lp_targetBank, lv__SectionName);
        lv__SectionName = libSwaC_gf_ZS_BankSectionName(lp_map, "ArmyUnit");
        BankSectionCreate(lp_targetBank, lv__SectionName);
        libSwaC_gf_ZS_SaveArmyUnitToBank(lp_targetBank, lv__SectionName);
    }

    libSwaC_gf_ZS_SaveMapToBank(lp_map, lp_targetBank, (lp_resultFromSimulation || lp_resultFromVictoryAgain));
    BankSectionCreate(lp_targetBank, libSwaC_gf_ZS_BankSectionName(lp_map, "KerriganTech"));
    libSwaC_gf_ZS_SaveKerriganTechToBank(lp_targetBank, libSwaC_gf_ZS_BankSectionName(lp_map, "KerriganTech"));
    if (((lp_resultFromSimulation == true) || (lp_resultFromVictoryAgain == true))) {
        return ;
    }

    lv__SectionName = libSwaC_gf_ZS_BankSectionName(lp_map, "HelpUnitsPanel");
    libSwaC_gf_ZS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString(0), libSwaC_gv_zSX_HelpUnitsPanel_EnabledUnitTypesCount, 0);
    autoA085AC8C_ae = libSwaC_gv_zSX_HelpUnitsPanel_EnabledUnitTypesCount;
    lv_index = 1;
    for ( ; ( (autoA085AC8C_ai >= 0 && lv_index <= autoA085AC8C_ae) || (autoA085AC8C_ai < 0 && lv_index >= autoA085AC8C_ae) ) ; lv_index += autoA085AC8C_ai ) {
        libSwaC_gf_ZS_SaveTransitionVarString(lp_targetBank, lv__SectionName, IntToString(lv_index), libSwaC_gf_ZS_HelpUnitsPanel_UnitTypeStringID(libSwaC_gv_zSX_HelpUnitsPanel_EnabledUnitTypes[lv_index]), "");
    }
    lv__SectionName = libSwaC_gf_ZS_BankSectionName(lp_map, "Tips");
    UserDataSaveType("CampaignTips", lp_targetBank, lv__SectionName);
}

void libSwaC_gf_ZS_LoadTransitionVars (bank lp_sourceBank, string lp_map) {
    // Variable Declarations
    int lv_tipvalue;
    string lv_indexScene;
    string lv_indexObjective;
    int lv_kerriganExperience;
    string lv__SectionName;
    int lv_count;
    int lv_index;
    fixed lv_blizzconTiming;

    // Automatic Variable Declarations
    int auto3D41700D_ae;
    const int auto3D41700D_ai = 1;

    // Variable Initialization
    lv__SectionName = "";

    // Implementation
    libSwaC_gf_ZS_LoadMapFromBank(lp_map, lp_sourceBank);
    if ((lp_map == null)) {
        lv__SectionName = libSwaC_gf_ZS_BankSectionName(lp_map, "CampaignLastInfo");
        libSwaC_gv_zSX_IsSimulation = libSwaC_gf_ZS_LoadTransitionVarBoolean(lp_sourceBank, lv__SectionName, ("Simulation"), false);
        libSwaC_gv_zSX_IsVictoryPlayAgain = libSwaC_gf_ZS_LoadTransitionVarBoolean(lp_sourceBank, lv__SectionName, ("VictoryPlayAgain"), false);
        libSwaC_gv_zSX_LastMap = (libSwaC_gf_ZS_LoadTransitionVarString(lp_sourceBank, lv__SectionName, ("LastMap"), ""));
        libSwaC_gv_zSX_LastMapSuccess = libSwaC_gf_ZS_LoadTransitionVarBoolean(lp_sourceBank, lv__SectionName, ("LastMapSuccess"), false);
        libSwaC_gv_zSX_LastMission = (libSwaC_gf_ZS_LoadTransitionVarString(lp_sourceBank, lv__SectionName, ("LastMission"), ""));
        libSwaC_gv_zSX_LastMissionSuccess = libSwaC_gf_ZS_LoadTransitionVarBoolean(lp_sourceBank, lv__SectionName, ("LastMissionSuccess"), false);
        libSwaC_gv_zSX_LastMissionSimulation = libSwaC_gf_ZS_LoadTransitionVarBoolean(lp_sourceBank, lv__SectionName, ("LastMissionSimulation"), false);
        libSwaC_gv_zSX_LastSuccessfulMission = (libSwaC_gf_ZS_LoadTransitionVarString(lp_sourceBank, lv__SectionName, ("LastSuccessfulMission"), ""));
        libSwaC_gv_zSX_LastStoryMap = (libSwaC_gf_ZS_LoadTransitionVarString(lp_sourceBank, lv__SectionName, ("LastStoryMap"), ""));
        lv__SectionName = libSwaC_gf_ZS_BankSectionName(lp_map, "CampaignCredits");
        libSwaC_gf_SetStoryKerriganExperience(libSwaC_gf_ZS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, ("KerriganXP"), 0));
        lv__SectionName = libSwaC_gf_ZS_BankSectionName(lp_map, "CampaignSetting");
        libSwaC_gf_ZS_SetCampaignDifficulty(libSwaC_gf_ZS_DifficultyFromIndex(libSwaC_gf_ZS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, ("Difficulty"), 0)));
        libSwaC_gv_zSX_DebugProgress = libSwaC_gf_ZS_LoadTransitionVarBoolean(lp_sourceBank, lv__SectionName, ("DebugProgress"), false);
        libSwaC_gv_zS_ZerglingRespawnCount = libSwaC_gf_ZS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, ("ZerglingRespawn"), 0);
        if ((libSwaC_gf_ZS_LoadTransitionVarBoolean(lp_sourceBank, lv__SectionName, ("AchievementsDisabled"), false) == true)) {
            AchievementsDisable(1);
        }

        lv__SectionName = libSwaC_gf_ZS_BankSectionName(lp_map, "Scenes");
        UserDataLoadType("Scenes", lp_sourceBank, lv__SectionName);
        lv__SectionName = libSwaC_gf_ZS_BankSectionName(lp_map, "WriterStates");
        UserDataLoadType("WriterStates", lp_sourceBank, lv__SectionName);
        lv__SectionName = libSwaC_gf_ZS_BankSectionName(lp_map, "StoryStates");
        UserDataLoadType("StoryStates", lp_sourceBank, lv__SectionName);
        libSwaC_gf_ZS_LoadLibertyInfo();
        libSwaC_gf_ZS_UpdateCampaignScreen(libSwaC_gf_LastSuccessfulMission());
    }

    lv__SectionName = libSwaC_gf_ZS_BankSectionName(lp_map, "ArmyCategory");
    libSwaC_gf_ZS_LoadArmyCategoryFromBank(lp_sourceBank, lv__SectionName);
    lv__SectionName = libSwaC_gf_ZS_BankSectionName(lp_map, "ArmyUpgrade");
    libSwaC_gf_ZS_LoadArmyUpgradeFromBank(lp_sourceBank, lv__SectionName);
    lv__SectionName = libSwaC_gf_ZS_BankSectionName(lp_map, "ArmyUnit");
    libSwaC_gf_ZS_LoadArmyUnitFromBank(lp_sourceBank, lv__SectionName);
    libSwaC_gf_ZS_LoadKerriganTechFromBank(lp_sourceBank, libSwaC_gf_ZS_BankSectionName(lp_map, "KerriganTech"));
    lv__SectionName = libSwaC_gf_ZS_BankSectionName(lp_map, "HelpUnitsPanel");
    lv_count = libSwaC_gf_ZS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString(0), 0);
    auto3D41700D_ae = lv_count;
    lv_index = 1;
    for ( ; ( (auto3D41700D_ai >= 0 && lv_index <= auto3D41700D_ae) || (auto3D41700D_ai < 0 && lv_index >= auto3D41700D_ae) ) ; lv_index += auto3D41700D_ai ) {
        libSwaC_gf_ZS_HelpUnitsPanel_AddEnabledUnitType(UnitTypeFromString(libSwaC_gf_ZS_LoadTransitionVarString(lp_sourceBank, lv__SectionName, IntToString(lv_index), "")));
    }
    lv__SectionName = libSwaC_gf_ZS_BankSectionName(lp_map, "Tips");
    UserDataLoadType("CampaignTips", lp_sourceBank, lv__SectionName);
}

void libSwaC_gf_ZS_PrepareLoadingScreen (string lp_nextMap, bool lp_restart) {
    // Variable Declarations
    string lv_offsetString;
    int lv_offsetX;
    int lv_offsetY;
    text lv_title;
    text lv_subtitle;
    text lv_body;
    string lv_image;
    bool lv_waitForKey;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_offsetString = "";

    // Implementation
    if ((lp_restart == true)) {
        if ((lp_nextMap == "ZLab1")) {
            UISetNextLoadingScreen(libSwaC_gf_StoryMapLoadingScreenImage("ZLab1"), StringToText(""), StringToText(""), StringToText(""), StringExternal(CatalogFieldValueGet(c_gameCatalogMap, lp_nextMap, "LoadingHelpRestart", c_playerAny)), lv_waitForKey);
        }

        UISetRestartLoadingScreen(StringExternal(CatalogFieldValueGet(c_gameCatalogMap, lp_nextMap, "LoadingHelpRestart", c_playerAny)));
        return ;
    }

    lv_offsetString = CatalogFieldValueGet(c_gameCatalogMap, (lp_nextMap), "LoadingTextOffset", c_playerAny);
    lv_offsetString = StringReplaceWord(lv_offsetString, ",", " ", 1, c_stringCase);
    lv_waitForKey = !(libSwaC_gf_StoryMapTypeCheck(lp_nextMap, c_mapKindStory));
    UISetNextLoadingScreenImageScale(c_scaleAspect);
    if ((libSwaC_gf_LastMapConditionCheck(libSwaC_ge_MissionCondition_Sucessful) == true) && (libSwaC_gf_LastMapConditionCheck(libSwaC_ge_MissionCondition_Simulation) == false) && (libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_LastMap(), c_mapKindMission) == true) && (libSwaC_gf_LastMap() != lp_nextMap)) {
        lv_image = libSwaC_gf_StoryMapLoadingScreenVictoryImage(libSwaC_gf_CurrentMap());
    }

    lv_offsetX = StringToInt(StringWord(lv_offsetString, 1));
    lv_offsetY = StringToInt(StringWord(lv_offsetString, 2));
    lv_offsetY += 240;
    lv_offsetX += 130;
    if ((lv_image == null)) {
        lv_image = libSwaC_gf_StoryMapLoadingScreenImage(lp_nextMap);
    }

    UISetNextLoadingScreen(lv_image, lv_title, lv_subtitle, lv_body, libSwaC_gf_StoryMapHelp(lp_nextMap), lv_waitForKey);
    UISetNextLoadingScreenTextPosition(c_anchorTopLeft, lv_offsetX, lv_offsetY, CatalogFieldValueGetAsInt(c_gameCatalogMap, (lp_nextMap), "LoadingTextWidth", c_playerAny), CatalogFieldValueGetAsInt(c_gameCatalogMap, (lp_nextMap), "LoadingTextHeight", c_playerAny));
}

void libSwaC_gf_ZS_UpdateCampaignScreen (string lp_mission) {
    // Variable Declarations
    int lv_index;
    const string lv_campaignID = "HeartOfTheSwarm";
    string lv_origin;
    string lv_destination;

    // Automatic Variable Declarations
    int auto7E532343_ae;
    const int auto7E532343_ai = 1;

    // Variable Initialization

    // Implementation
    if ((lp_mission == null)) {
        return ;
    }

    if ((libSwaC_gf_StoryMapPlanet(lp_mission) != libSwaC_gf_StoryMapPlanet(libSwaC_gf_CurrentMap()))) {
        auto7E532343_ae = UserDataFieldValueCount("Planets", "Travel Summary Origin");
        lv_index = 1;
        for ( ; ( (auto7E532343_ai >= 0 && lv_index <= auto7E532343_ae) || (auto7E532343_ai < 0 && lv_index >= auto7E532343_ae) ) ; lv_index += auto7E532343_ai ) {
            if ((UserDataGetGameLink("Planets", libSwaC_gf_ZS_PlanetUserData(libSwaC_gf_StoryMapPlanet(libSwaC_gf_CurrentMap())), "Travel Summary Origin", lv_index) == libSwaC_gf_StoryMapPlanet(lp_mission))) {
                TextExpressionSetToken("Param/Expression/lib_SwaC_FAA2A2EC", "D", libSwaC_gf_StoryMapName(libSwaC_gf_LastSuccessfulMission()));
                TextExpressionSetToken("Param/Expression/lib_SwaC_FAA2A2EC", "A", UserDataGetText("Planets", libSwaC_gf_ZS_PlanetUserData(libSwaC_gf_StoryMapPlanet(libSwaC_gf_CurrentMap())), "Travel Summary", lv_index));
                TextExpressionSetToken("Param/Expression/lib_SwaC_FAA2A2EC", "B", IntToText(libSwaC_gf_NumberOfMissionsAll(libSwaC_ge_MissionCountOptions_Completed)));
                TextExpressionSetToken("Param/Expression/lib_SwaC_FAA2A2EC", "C", DifficultyNameCampaign(libSwaC_gv_zSX_CampaignDifficulty));
                CampaignProgressSetText(PlayerGroupAll(), lv_campaignID, TextExpressionAssemble("Param/Expression/lib_SwaC_FAA2A2EC"));
                CampaignProgressSetCampaignFinished(PlayerGroupAll(), lv_campaignID, false);
                CampaignProgressSetImageFilePath(PlayerGroupAll(), lv_campaignID, libSwaC_gf_StoryMapLoadingScreenImage(libSwaC_gf_CurrentMap()));
                break;
            }

        }
    }
    else {
        if ((libSwaC_gf_MissionStatusCheck("ZKorhal3", libSwaC_ge_MissionStatus_Completed) == true)) {
            if ((libSwaC_gv_zS_InCompletedCampaign == false)) {
                libSwaC_gv_zS_InCompletedCampaign = true;
                libSwaC_gf_ZS_ArchiveBankLoad();
            }

            TextExpressionSetToken("Param/Expression/lib_SwaC_E1EDAD1C", "SUMMARY", libSwaC_gf_StoryMapHelp2("ZKorhal3"));
            TextExpressionSetToken("Param/Expression/lib_SwaC_E1EDAD1C", "MISSIONSCOMPLETE", IntToText(libSwaC_gf_NumberOfMissionsAll(libSwaC_ge_MissionCountOptions_Completed)));
            TextExpressionSetToken("Param/Expression/lib_SwaC_E1EDAD1C", "DIFFICULTY", DifficultyNameCampaign(libSwaC_gv_zSX_CampaignDifficulty));
            CampaignProgressSetText(PlayerGroupAll(), lv_campaignID, TextExpressionAssemble("Param/Expression/lib_SwaC_E1EDAD1C"));
            CampaignProgressSetCampaignFinished(PlayerGroupAll(), lv_campaignID, true);
            CampaignProgressSetImageFilePath(PlayerGroupAll(), lv_campaignID, "Assets\\Textures\\ui_bnet_singleplayer_complete_bg_hots.dds");
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_SwaC_EC86CC32", "D", libSwaC_gf_StoryMapName(lp_mission));
            TextExpressionSetToken("Param/Expression/lib_SwaC_EC86CC32", "A", libSwaC_gf_StoryMapHelp2(lp_mission));
            TextExpressionSetToken("Param/Expression/lib_SwaC_EC86CC32", "B", IntToText(libSwaC_gf_NumberOfMissionsAll(libSwaC_ge_MissionCountOptions_Completed)));
            TextExpressionSetToken("Param/Expression/lib_SwaC_EC86CC32", "C", DifficultyNameCampaign(libSwaC_gv_zSX_CampaignDifficulty));
            CampaignProgressSetText(PlayerGroupAll(), lv_campaignID, TextExpressionAssemble("Param/Expression/lib_SwaC_EC86CC32"));
            CampaignProgressSetCampaignFinished(PlayerGroupAll(), lv_campaignID, false);
            CampaignProgressSetImageFilePath(PlayerGroupAll(), lv_campaignID, libSwaC_gf_StoryMapLoadingScreenImage(lp_mission));
        }
    }
}

void libSwaC_gf_ZS_CampaignPreload () {
    // Automatic Variable Declarations
    // Implementation
    if ((libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindMission) == true)) {
        libNtve_gf_PreloadSoundObject("UI_LowHealthWarning_Start", false);
        libNtve_gf_PreloadSoundObject("UI_LowHealthWarning_BreathLoop", false);
        libNtve_gf_PreloadSoundObject("UI_LowHealthWarning_HeartBeatLoop", false);
        SoundLengthQuery(SoundLink("UI_LowHealthWarning_BreathLoop", -1));
        SoundLengthQuery(SoundLink("UI_LowHealthWarning_HeartBeatLoop", -1));
    }

}

void libSwaC_gf_ResetCampaignData () {
    // Variable Declarations
    string lv_indexMission;
    string lv_indexScene;

    // Automatic Variable Declarations
    int autoFE0A4850_ae;
    int autoFE0A4850_ai;
    int autoE6D62441_ai;
    int autoE6D62441_ae;

    // Variable Initialization

    // Implementation
    UserDataResetAll();
    libSwaC_gv_zSX_IsSimulation = false;
    libSwaC_gv_zSX_IsVictoryPlayAgain = false;
    libSwaC_gv_zSX_LastMap = null;
    libSwaC_gv_zSX_LastMapSuccess = false;
    libSwaC_gv_zSX_LastMission = null;
    libSwaC_gv_zSX_LastMissionSimulation = false;
    libSwaC_gv_zSX_LastMissionSuccess = false;
    libSwaC_gv_zSX_LastSuccessfulMission = null;
    libSwaC_gv_zSX_LastStoryMap = null;
    libSwaC_gf_ZS_SetCampaignDifficulty(2);
    libSwaC_gv_zSX_DebugProgress = false;
    libSwaC_gf_SetStoryKerriganExperience(0);
    autoFE0A4850_ae = CatalogEntryCount(c_gameCatalogMap);
    autoFE0A4850_ai = 1;
    while (autoFE0A4850_ai <= autoFE0A4850_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoFE0A4850_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            libSwaC_gf_ZS_MarkMissionAsStatus(lv_indexMission, libSwaC_ge_MissionStatus_Locked);
        }
        autoFE0A4850_ai = autoFE0A4850_ai + 1;
    }
    libSwaC_gf_ZS_MarkMissionAsStatus("ZLab1", libSwaC_ge_MissionStatus_Available);
    libSwaC_gf_ZS_ResetTech();
    autoE6D62441_ai = 1;
    autoE6D62441_ae = UserDataInstanceCount("Scenes")+1;
    while (autoE6D62441_ai < autoE6D62441_ae) {
        lv_indexScene = UserDataInstance("Scenes", autoE6D62441_ai);
        libSwaC_gf_SetStoryScenePlayed(lv_indexScene, false);
        autoE6D62441_ai = autoE6D62441_ai+1;
    }
    libSwaC_gf_DispatchStoryEvent(libSwaC_ge_ZS_Event_CampaignDataReset, "", "", false);
    libSwaC_gf_ZS_HelpUnitsPanel_ResetEnabledUnitTypes();
}

void libSwaC_gf_ZS_SaveArmyTechBank (string lp_nextMission, bool lp_simulation) {
    // Variable Declarations
    string lv_indexCategory;
    int lv_categoryState;
    int lv_unitIndex;
    string lv_indexUnit;
    int lv_unitState;
    string lv_bankPath;
    string lv_section;
    string lv_key;
    string lv_categorySection;
    string lv_unitSection;

    // Automatic Variable Declarations
    int auto1BD8DB7C_ae;
    int auto1BD8DB7C_ai;
    int auto77EF997B_ae;
    int auto77EF997B_ai;
    int autoDE125D20_ae;
    int autoDE125D20_ai;
    int auto9527ECA5_ae;
    int auto9527ECA5_ai;
    int auto009947F0_ae;
    int auto009947F0_ai;
    int autoC37B96F7_ae;
    int autoC37B96F7_ai;

    // Variable Initialization
    lv_key = "";

    // Implementation
    libSwaC_gf_ZS_OpenArmyTechBank();
    if (((libSwaC_gv_zS_ArmyTechBank == null))) {
        return ;
    }

    auto1BD8DB7C_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto1BD8DB7C_ai = 1;
    while (auto1BD8DB7C_ai <= auto1BD8DB7C_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto1BD8DB7C_ai);
        lv_section = libSwaC_gf_ZS_ArmyCategoryBankSection(lv_indexCategory);
        BankSectionRemove(libSwaC_gv_zS_ArmyTechBank, lv_section);
        auto77EF997B_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
        auto77EF997B_ai = 1;
        while (auto77EF997B_ai <= auto77EF997B_ae) {
            lv_indexUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(auto77EF997B_ai-1)+"]", 1);
            lv_section = libSwaC_gf_ZS_ArmyUnitBankSection(lv_indexUnit);
            BankSectionRemove(libSwaC_gv_zS_ArmyTechBank, lv_section);
            auto77EF997B_ai = auto77EF997B_ai + 1;
        }
        auto1BD8DB7C_ai = auto1BD8DB7C_ai + 1;
    }
    if ((libSwaC_gf_StoryMapTypeCheck(lp_nextMission, c_mapKindMission) == false)) {
        BankSave(libSwaC_gv_zS_ArmyTechBank);
        return ;
    }

    if ((lp_simulation == true)) {
        libSwaC_gf_ZS_OpenCampaignBank();
        lv_categorySection = libSwaC_gf_ZS_BankSectionName(null, "ArmyCategory");
        lv_unitSection = libSwaC_gf_ZS_BankSectionName(lp_nextMission, "ArmyUnit");
        if (((lp_nextMission == "ZLab1") || ((BankSectionExists(libSwaC_gv_zS_CampaignBank, lv_categorySection) == true) && (BankSectionExists(libSwaC_gv_zS_CampaignBank, lv_unitSection) == true)))) {
            autoDE125D20_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
            autoDE125D20_ai = 1;
            while (autoDE125D20_ai <= autoDE125D20_ae) {
                lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, autoDE125D20_ai);
                lv_categoryState = libSwaC_gf_ZS_LoadTransitionVarInteger(libSwaC_gv_zS_CampaignBank, lv_categorySection, (lv_indexCategory), 0);
                lv_section = libSwaC_gf_ZS_ArmyCategoryBankSection(lv_indexCategory);
                lv_key = libSwaC_gf_ZS_ArmyCategoryBankKey(lv_indexCategory);
                libSwaC_gf_ZS_SaveTransitionVarInteger(libSwaC_gv_zS_ArmyTechBank, lv_section, lv_key, lv_categoryState, 0);
                auto9527ECA5_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
                auto9527ECA5_ai = 1;
                while (auto9527ECA5_ai <= auto9527ECA5_ae) {
                    lv_indexUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(auto9527ECA5_ai-1)+"]", 1);
                    lv_unitState = libSwaC_gf_ZS_LoadTransitionVarInteger(libSwaC_gv_zS_CampaignBank, lv_unitSection, (lv_indexUnit), 0);
                    lv_section = libSwaC_gf_ZS_ArmyUnitBankSection(lv_indexUnit);
                    lv_key = libSwaC_gf_ZS_ArmyUnitBankKey(lv_indexUnit);
                    libSwaC_gf_ZS_SaveTransitionVarInteger(libSwaC_gv_zS_ArmyTechBank, lv_section, lv_key, lv_unitState, 0);
                    auto9527ECA5_ai = auto9527ECA5_ai + 1;
                }
                autoDE125D20_ai = autoDE125D20_ai + 1;
            }
            BankSave(libSwaC_gv_zS_ArmyTechBank);
            return ;
        }

    }

    auto009947F0_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto009947F0_ai = 1;
    while (auto009947F0_ai <= auto009947F0_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto009947F0_ai);
        lv_section = libSwaC_gf_ZS_ArmyCategoryBankSection(lv_indexCategory);
        lv_key = libSwaC_gf_ZS_ArmyCategoryBankKey(lv_indexCategory);
        libSwaC_gf_ZS_SaveTransitionVarInteger(libSwaC_gv_zS_ArmyTechBank, lv_section, lv_key, (libSwaC_gf_ZS_StoryArmyCategoryState(lv_indexCategory)), 0);
        autoC37B96F7_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
        autoC37B96F7_ai = 1;
        while (autoC37B96F7_ai <= autoC37B96F7_ae) {
            lv_indexUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(autoC37B96F7_ai-1)+"]", 1);
            lv_section = libSwaC_gf_ZS_ArmyUnitBankSection(lv_indexUnit);
            lv_key = libSwaC_gf_ZS_ArmyUnitBankKey(lv_indexUnit);
            libSwaC_gf_ZS_SaveTransitionVarInteger(libSwaC_gv_zS_ArmyTechBank, lv_section, lv_key, (libSwaC_gf_ZS_StoryArmyUnitState(lv_indexUnit)), 0);
            autoC37B96F7_ai = autoC37B96F7_ai + 1;
        }
        auto009947F0_ai = auto009947F0_ai + 1;
    }
    BankSave(libSwaC_gv_zS_ArmyTechBank);
    TextExpressionSetToken("Param/Expression/lib_SwaC_857D10FC", "A", StringToText(lv_bankPath));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_SwaC_857D10FC"), false);
}

void libSwaC_gf_ZS_OpenArmyTechBank () {
    // Variable Declarations
    string lv_indexCategory;
    string lv_bankPath;

    // Automatic Variable Declarations
    int auto1B12DF09_ae;
    int auto1B12DF09_ai;

    // Variable Initialization

    // Implementation
    if ((libSwaC_gv_zS_ArmyTechBank != null)) {
        return ;
    }

    auto1B12DF09_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto1B12DF09_ai = 1;
    while (auto1B12DF09_ai <= auto1B12DF09_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto1B12DF09_ai);
        lv_bankPath = libSwaC_gf_ZS_ArmyCategoryBankPath(lv_indexCategory);
        BankLoad(lv_bankPath, 1);
        libSwaC_gv_zS_ArmyTechBank = BankLastCreated();
        return ;
        auto1B12DF09_ai = auto1B12DF09_ai + 1;
    }
}

string libSwaC_gf_ZS_ArmyCategoryBankPath (string lp_category) {
    // Automatic Variable Declarations
    // Implementation
    return CatalogFieldValueGet(c_gameCatalogArmyCategory, (lp_category), "BankPath.File", 1);
}

string libSwaC_gf_ZS_ArmyCategoryBankSection (string lp_category) {
    // Automatic Variable Declarations
    // Implementation
    return CatalogFieldValueGet(c_gameCatalogArmyCategory, (lp_category), "BankPath.Section", 1);
}

string libSwaC_gf_ZS_ArmyCategoryBankKey (string lp_category) {
    // Automatic Variable Declarations
    // Implementation
    return CatalogFieldValueGet(c_gameCatalogArmyCategory, (lp_category), "BankPath.Key", 1);
}

string libSwaC_gf_ZS_ArmyUnitBankPath (string lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return CatalogFieldValueGet(c_gameCatalogArmyUnit, (lp_unit), "BankPath.File", 1);
}

string libSwaC_gf_ZS_ArmyUnitBankSection (string lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return CatalogFieldValueGet(c_gameCatalogArmyUnit, (lp_unit), "BankPath.Section", 1);
}

string libSwaC_gf_ZS_ArmyUnitBankKey (string lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return CatalogFieldValueGet(c_gameCatalogArmyUnit, (lp_unit), "BankPath.Key", 1);
}

void libSwaC_gf_ZS_OpenArchiveBank () {
    // Automatic Variable Declarations
    // Implementation
    if ((libSwaC_gv_zS_ArchivesBank != null)) {
        return ;
    }

    BankLoad(libSwaC_gv_zS_ArchiveBankName, 1);
    libSwaC_gv_zS_ArchivesBank = BankLastCreated();
    BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
}

void libSwaC_gf_ZS_ArchiveBankObjectiveSave (string lp_objective) {
    // Variable Declarations
    int lv_oldProgress;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_oldProgress = libSwaC_gf_ZS_LoadTransitionVarInteger(libSwaC_gv_zS_ArchivesBank, libSwaC_gf_ZS_BankSectionName(null, "MissionObjectives"), (lp_objective), 0);
    if ((lv_oldProgress < libSwaC_gf_MissionObjectiveProgress(lp_objective))) {
        libSwaC_gf_ZS_SaveTransitionVarInteger(libSwaC_gv_zS_ArchivesBank, libSwaC_gf_ZS_BankSectionName(null, "MissionObjectives"), (lp_objective), libSwaC_gf_MissionObjectiveProgress(lp_objective), 0);
    }
    else {
        libSwaC_gf_ZS_SaveTransitionVarInteger(libSwaC_gv_zS_ArchivesBank, libSwaC_gf_ZS_BankSectionName(null, "MissionObjectives"), (lp_objective), lv_oldProgress, 0);
    }
}

void libSwaC_gf_ZS_ArchiveBankEvolutionMissionSave (string lp_mission) {
    // Variable Declarations
    int lv_oldAge;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_oldAge = libSwaC_gf_ZS_LoadTransitionVarInteger(libSwaC_gv_zS_ArchivesBank, libSwaC_gf_ZS_BankSectionName(null, "MissionCompletedAge"), (lp_mission), 0);
    if ((lv_oldAge == 0) && (libSwaC_gf_MissionStatusCheck(lp_mission, libSwaC_ge_MissionStatus_Completed) == true)) {
        libSwaC_gf_ZS_SaveTransitionVarInteger(libSwaC_gv_zS_ArchivesBank, libSwaC_gf_ZS_BankSectionName(null, "MissionCompletedAge"), (lp_mission), libSwaC_gf_MissionStatusAge(lp_mission, libSwaC_ge_MissionStatus_Completed), 0);
    }

}

void libSwaC_gf_ZS_ArchiveBankMissionSave (string lp_mission) {
    // Variable Declarations
    int lv_oldTime;
    int lv_difficultyIndex;

    // Automatic Variable Declarations
    const int auto1238770D_ae = libSwaC_gv_zSC_DifficultyCount;
    const int auto1238770D_ai = 1;

    // Variable Initialization

    // Implementation
    if ((((libSwaC_gf_CurrentMap() != lp_mission) || (libSwaC_gf_CurrentMissionIsSimulation() == false)) && (libSwaC_gf_MissionStatusCheck(lp_mission, libSwaC_ge_MissionStatus_Completed) == false))) {
        return ;
    }

    lv_difficultyIndex = 1;
    for ( ; ( (auto1238770D_ai >= 0 && lv_difficultyIndex <= auto1238770D_ae) || (auto1238770D_ai < 0 && lv_difficultyIndex >= auto1238770D_ae) ) ; lv_difficultyIndex += auto1238770D_ai ) {
        lv_oldTime = libSwaC_gf_ZS_LoadTransitionVarInteger(libSwaC_gv_zS_ArchivesBank, libSwaC_gf_ZS_BankSectionName(null, "MissionBestTime"), libSwaC_gf_ZS_BankMIssionDifficultyKey(lp_mission, libSwaC_gf_ZS_DifficultyFromIndex(lv_difficultyIndex)), -1);
        if (((lv_oldTime <= 0) || (lv_oldTime > libSwaC_gf_MissionCompleteBestTime(lp_mission, libSwaC_gf_ZS_DifficultyFromIndex(lv_difficultyIndex))))) {
            libSwaC_gf_ZS_SaveTransitionVarInteger(libSwaC_gv_zS_ArchivesBank, libSwaC_gf_ZS_BankSectionName(null, "MissionBestTime"), libSwaC_gf_ZS_BankMIssionDifficultyKey(lp_mission, libSwaC_gf_ZS_DifficultyFromIndex(lv_difficultyIndex)), libSwaC_gf_MissionCompleteBestTime(lp_mission, libSwaC_gf_ZS_DifficultyFromIndex(lv_difficultyIndex)), -1);
        }

    }
}

void libSwaC_gf_ZS_ArchiveBankSave () {
    // Variable Declarations
    string lv_indexObjective;
    string lv_indexMission;

    // Automatic Variable Declarations
    int auto12BADE8E_ae;
    int auto12BADE8E_ai;
    int auto581241A3_ae;
    int auto581241A3_ai;
    int autoB0FC690B_ae;
    int autoB0FC690B_ai;

    // Variable Initialization

    // Implementation
    if (((AchievementsDisabled(1) == true) || (libSwaC_gv_zS_ArchivesReloading == true))) {
        return ;
    }

    libSwaC_gf_ZS_OpenArchiveBank();
    auto12BADE8E_ae = CatalogEntryCount(c_gameCatalogObjective);
    auto12BADE8E_ai = 1;
    while (auto12BADE8E_ai <= auto12BADE8E_ae) {
        lv_indexObjective = CatalogEntryGet(c_gameCatalogObjective, auto12BADE8E_ai);
        if ((libSwaC_gf_MissionObjectiveIsPrimary(lv_indexObjective) == false)) {
            libSwaC_gf_ZS_ArchiveBankObjectiveSave(lv_indexObjective);
        }

        auto12BADE8E_ai = auto12BADE8E_ai + 1;
    }
    auto581241A3_ae = CatalogEntryCount(c_gameCatalogMap);
    auto581241A3_ai = 1;
    while (auto581241A3_ai <= auto581241A3_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto581241A3_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Upgrade") {
            libSwaC_gf_ZS_ArchiveBankEvolutionMissionSave(lv_indexMission);
        }
        auto581241A3_ai = auto581241A3_ai + 1;
    }
    autoB0FC690B_ae = CatalogEntryCount(c_gameCatalogMap);
    autoB0FC690B_ai = 1;
    while (autoB0FC690B_ai <= autoB0FC690B_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoB0FC690B_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            libSwaC_gf_ZS_ArchiveBankMissionSave(lv_indexMission);
        }
        autoB0FC690B_ai = autoB0FC690B_ai + 1;
    }
    if ((libSwaC_gf_MissionStatusCheck("ZKorhal3", libSwaC_ge_MissionStatus_Completed) == true)) {
        BankValueSetFromFlag(libSwaC_gv_zS_ArchivesBank, "GlobalStates", "CampaignComplete", true);
    }

    if ((libSwaC_gv_zS_InCompletedCampaign == true) && (libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindStory) == true)) {
        BankValueSetFromFlag(libSwaC_gv_zS_ArchivesBank, "GlobalStates", "ArchivesVisited", true);
    }

    BankSave(libSwaC_gv_zS_ArchivesBank);
}

void libSwaC_gf_ZS_ArchiveBankLoad () {
    // Variable Declarations
    string lv_indexObjective;
    string lv_indexMission;
    int lv_difficultyIndex;
    int lv_archivesBankProgress;

    // Automatic Variable Declarations
    int autoB1D18D91_ae;
    int autoB1D18D91_ai;
    int auto9FACE45B_ae;
    int auto9FACE45B_ai;
    int auto633C2D05_ae;
    int auto633C2D05_ai;
    const int auto9320C434_ae = libSwaC_gv_zSC_DifficultyCount;
    const int auto9320C434_ai = 1;

    // Variable Initialization

    // Implementation
    if (((libSwaC_gv_zS_InCompletedCampaign == false) || (libSwaC_gv_zS_ArchivesReloading == true))) {
        return ;
    }

    libSwaC_gf_ZS_OpenArchiveBank();
    libSwaC_gv_zS_ArchivesVisited = libSwaC_gf_ZS_LoadTransitionVarBoolean(libSwaC_gv_zS_ArchivesBank, "GlobalStates", "ArchivesVisited", false);
    autoB1D18D91_ae = CatalogEntryCount(c_gameCatalogObjective);
    autoB1D18D91_ai = 1;
    while (autoB1D18D91_ai <= autoB1D18D91_ae) {
        lv_indexObjective = CatalogEntryGet(c_gameCatalogObjective, autoB1D18D91_ai);
        if ((libSwaC_gf_MissionObjectiveIsPrimary(lv_indexObjective) == false)) {
            lv_archivesBankProgress = libSwaC_gf_ZS_LoadTransitionVarInteger(libSwaC_gv_zS_ArchivesBank, libSwaC_gf_ZS_BankSectionName(null, "MissionObjectives"), (lv_indexObjective), 0);
            if ((lv_archivesBankProgress > UserDataGetInt("MissionObjective", libSwaC_gf_ZS_ObjectiveUserDataInstance(lv_indexObjective), "Progress", 1))) {
                UserDataSetInt("MissionObjective", libSwaC_gf_ZS_ObjectiveUserDataInstance(lv_indexObjective), "Progress", 1, lv_archivesBankProgress);
            }

        }

        autoB1D18D91_ai = autoB1D18D91_ai + 1;
    }
    auto9FACE45B_ae = CatalogEntryCount(c_gameCatalogMap);
    auto9FACE45B_ai = 1;
    while (auto9FACE45B_ai <= auto9FACE45B_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto9FACE45B_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Upgrade") {
            libSwaC_gf_ZS_SetMissionStatusAge(lv_indexMission, libSwaC_ge_MissionStatus_Completed, libSwaC_gf_ZS_LoadTransitionVarInteger(libSwaC_gv_zS_ArchivesBank, libSwaC_gf_ZS_BankSectionName(null, "MissionCompletedAge"), (lv_indexMission), 0));
        }
        auto9FACE45B_ai = auto9FACE45B_ai + 1;
    }
    auto633C2D05_ae = CatalogEntryCount(c_gameCatalogMap);
    auto633C2D05_ai = 1;
    while (auto633C2D05_ai <= auto633C2D05_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto633C2D05_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            lv_difficultyIndex = 1;
            for ( ; ( (auto9320C434_ai >= 0 && lv_difficultyIndex <= auto9320C434_ae) || (auto9320C434_ai < 0 && lv_difficultyIndex >= auto9320C434_ae) ) ; lv_difficultyIndex += auto9320C434_ai ) {
                libSwaC_gf_ZS_SetMissionCompletionBestTime(lv_indexMission, libSwaC_gf_ZS_DifficultyFromIndex(lv_difficultyIndex), libSwaC_gf_ZS_LoadTransitionVarInteger(libSwaC_gv_zS_ArchivesBank, libSwaC_gf_ZS_BankSectionName(null, "MissionBestTime"), libSwaC_gf_ZS_BankMIssionDifficultyKey(lv_indexMission, libSwaC_gf_ZS_DifficultyFromIndex(lv_difficultyIndex)), -1));
            }
        }
        auto633C2D05_ai = auto633C2D05_ai + 1;
    }
}

void libSwaC_gf_ZS_ArchivesBankSyncForLoad () {
    // Automatic Variable Declarations
    // Implementation
    libSwaC_gf_ZS_OpenArchiveBank();
    BankReload(libSwaC_gv_zS_ArchivesBank);
    libSwaC_gv_zS_ArchivesReloading = true;
    TriggerExecute(libSwaC_gt_ZS_ArchivesBankLoadSyncComplete, true, false);
}

void libSwaC_gf_ZS_ArchivesBankSyncForSave () {
    // Automatic Variable Declarations
    // Implementation
    libSwaC_gf_ZS_OpenArchiveBank();
    BankReload(libSwaC_gv_zS_ArchivesBank);
    libSwaC_gv_zS_ArchivesReloading = true;
    TriggerExecute(libSwaC_gt_ZS_ArchivesBankSaveSyncComplete, true, false);
}

bool libSwaC_gf_StoryMasterArchivesWasVisited () {
    // Automatic Variable Declarations
    // Implementation
    return libSwaC_gv_zS_ArchivesVisited;
}

void libSwaC_gf_ZS_OpenCampaignBank () {
    // Automatic Variable Declarations
    // Implementation
    if ((libSwaC_gv_zS_CampaignBank != null)) {
        return ;
    }

    BankLoad(libSwaC_gv_zS_CampaignBankName, 1);
    libSwaC_gv_zS_CampaignBank = BankLastCreated();
    BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
}

bool libSwaC_gf_ZS_CampaignBankExists () {
    // Automatic Variable Declarations
    // Implementation
    return BankExists(libSwaC_gv_zS_CampaignBankName, 1);
}

void libSwaC_gf_ZS_SaveCampaignBank () {
    // Automatic Variable Declarations
    // Implementation
    if ((libSwaC_gv_zS_CampaignBank == null)) {
        return ;
    }

    BankSave(libSwaC_gv_zS_CampaignBank);
}

bool libSwaC_gf_ZS_MissionSectionExists (string lp_mission) {
    // Variable Declarations
    string lv_missionSectionName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_missionSectionName = "";

    // Implementation
    if ((libSwaC_gv_zS_CampaignBank == null)) {
        libSwaC_gf_ZS_OpenCampaignBank();
    }

    return libSwaC_gf_ZS_LoadTransitionVarBoolean(libSwaC_gv_zS_CampaignBank, libSwaC_gf_ZS_BankSectionName(lp_mission, "MissionSectionExist"), "Value", false);
}

void libSwaC_gf_ZS_SetMissionSectionExists (string lp_mission, bool lp_exist) {
    // Variable Declarations
    string lv_missionSectionName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_missionSectionName = "";

    // Implementation
    if ((libSwaC_gv_zS_CampaignBank == null)) {
        libSwaC_gf_ZS_OpenCampaignBank();
    }

    libSwaC_gf_ZS_SaveTransitionVarBoolean(libSwaC_gv_zS_CampaignBank, libSwaC_gf_ZS_BankSectionName(lp_mission, "MissionSectionExist"), "Value", lp_exist, false);
}

void libSwaC_gf_ZS_LoadMissionSections () {
    // Variable Declarations
    string lv_indexMission;

    // Automatic Variable Declarations
    int auto78BD1642_ae;
    int auto78BD1642_ai;

    // Variable Initialization

    // Implementation
    auto78BD1642_ae = CatalogEntryCount(c_gameCatalogMap);
    auto78BD1642_ai = 1;
    while (auto78BD1642_ai <= auto78BD1642_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto78BD1642_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            if ((lv_indexMission == libSwaC_gf_CurrentMap())) {
                if (((GameIsTransitionMap() == false) || (libSwaC_gv_zSX_IsSimulation == true) || (libSwaC_gv_zSX_IsVictoryPlayAgain == true)) && (libSwaC_gf_ZS_MissionSectionExists(lv_indexMission) == true)) {
                    TextExpressionSetToken("Param/Expression/lib_SwaC_0386BD51", "A", StringToText(libSwaC_gf_StoryMapFile(lv_indexMission)));
                    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_SwaC_0386BD51"), false);
                    libSwaC_gf_ZS_LoadTransitionVars(libSwaC_gv_zS_CampaignBank, lv_indexMission);
                    if ((libSwaC_gv_zS_InCompletedCampaign == false)) {
                        libSwaC_gf_ZS_ClampProgressToMission(lv_indexMission);
                    }

                }
                else {
                    if ((libSwaC_gf_ZS_MissionSectionExists(lv_indexMission) == false) && (libSwaC_gv_zSX_IsSimulation == true) && (libSwaC_gv_zS_InCompletedCampaign == false)) {
                        libSwaC_gf_ZS_ClampProgressToMission(lv_indexMission);
                    }

                    libSwaC_gf_ZS_SaveTransitionVars(libSwaC_gv_zS_CampaignBank, lv_indexMission, false, false, false, false, false);
                }
            }

        }
        auto78BD1642_ai = auto78BD1642_ai + 1;
    }
}

void libSwaC_gf_ZS_ClampProgressToMission (string lp_mission) {
    // Variable Declarations
    string lv_indexMission;

    // Automatic Variable Declarations
    int autoEF3B902E_ae;
    int autoEF3B902E_ai;
    int autoB37E8989_ae;
    int autoB37E8989_ai;
    int autoDE6AEFB8_ae;
    int autoDE6AEFB8_ai;
    int auto7E37FE5B_ae;
    int auto7E37FE5B_ai;

    // Variable Initialization

    // Implementation
    autoEF3B902E_ae = CatalogEntryCount(c_gameCatalogMap);
    autoEF3B902E_ai = 1;
    while (autoEF3B902E_ai <= autoEF3B902E_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoEF3B902E_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            if ((libSwaC_gf_MissionStatusCheck(lv_indexMission, libSwaC_ge_MissionStatus_Available) == true)) {
                libSwaC_gf_ZS_MarkMissionAsStatus(lv_indexMission, libSwaC_ge_MissionStatus_Locked);
            }
            else if ((libSwaC_gf_MissionStatusAge(lv_indexMission, libSwaC_ge_MissionStatus_Completed) < libSwaC_gf_MissionStatusAge(lp_mission, libSwaC_ge_MissionStatus_Completed))) {
                libSwaC_gf_ZS_MarkMissionAsStatus(lv_indexMission, libSwaC_ge_MissionStatus_Locked);
            }
            else if ((lv_indexMission != lp_mission)) {
                libSwaC_gf_ZS_SetMissionStatusAge(lv_indexMission, libSwaC_ge_MissionStatus_Completed, (libSwaC_gf_MissionStatusAge(lv_indexMission, libSwaC_ge_MissionStatus_Completed)-libSwaC_gf_MissionStatusAge(lp_mission, libSwaC_ge_MissionStatus_Completed)));
            }
        }
        autoEF3B902E_ai = autoEF3B902E_ai + 1;
    }
    libSwaC_gf_ZS_MarkMissionAsStatus(lp_mission, libSwaC_ge_MissionStatus_Available);
    autoB37E8989_ae = CatalogEntryCount(c_gameCatalogMap);
    autoB37E8989_ai = 1;
    while (autoB37E8989_ai <= autoB37E8989_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoB37E8989_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Upgrade") {
            DataTableSetBool(false, ((lv_indexMission) + "_Available"), false);
        }
        autoB37E8989_ai = autoB37E8989_ai + 1;
    }
    autoDE6AEFB8_ae = CatalogEntryCount(c_gameCatalogMap);
    autoDE6AEFB8_ai = 1;
    while (autoDE6AEFB8_ai <= autoDE6AEFB8_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoDE6AEFB8_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            if ((libSwaC_gf_MissionArmyEvolutionUnlocked(lv_indexMission) != null) && (libSwaC_gf_MissionStatusCheck(lv_indexMission, libSwaC_ge_MissionStatus_Completed) == true)) {
                DataTableSetBool(false, ((libSwaC_gf_StoryArmyCategoryEvolutionMission(libSwaC_gf_MissionArmyEvolutionUnlocked(lv_indexMission))) + "_Available"), true);
            }

        }
        autoDE6AEFB8_ai = autoDE6AEFB8_ai + 1;
    }
    auto7E37FE5B_ae = CatalogEntryCount(c_gameCatalogMap);
    auto7E37FE5B_ai = 1;
    while (auto7E37FE5B_ai <= auto7E37FE5B_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto7E37FE5B_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Upgrade") {
            if ((DataTableGetBool(false, ((lv_indexMission) + "_Available")) == false)) {
                libSwaC_gf_ZS_MarkMissionAsStatus(lv_indexMission, libSwaC_ge_MissionStatus_Locked);
            }

        }
        auto7E37FE5B_ai = auto7E37FE5B_ai + 1;
    }
    libSwaC_gf_ZS_UpdateTechStates(1);
    libSwaC_gf_ZS_ApplyTech(1);
}

void libSwaC_gf_ZS_OpenStoryBank () {
    // Automatic Variable Declarations
    // Implementation
    if ((libSwaC_gv_zS_StoryBank != null)) {
        return ;
    }

    BankLoad(libSwaC_gv_zS_StoryBankName, 1);
    libSwaC_gv_zS_StoryBank = BankLastCreated();
    BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
}

void libSwaC_gf_ZS_CopyWriterStatesToSnapshot () {
    // Automatic Variable Declarations
    // Implementation
    libSwaC_gf_ZS_OpenStoryBank();
    UserDataSaveType("WriterStates", libSwaC_gf_StoryBank(), "WriterStateSnapshot");
    BankSave(libSwaC_gf_StoryBank());
}

bank libSwaC_gf_StoryBank () {
    // Automatic Variable Declarations
    // Implementation
    libSwaC_gf_ZS_OpenStoryBank();
    return libSwaC_gv_zS_StoryBank;
}

void libSwaC_gf_ZS_LoadLibertyInfo () {
    // Variable Declarations
    const string lv_bankName = "TCampaign";
    const string lv__SectionName = "MissionCompletedAge";
    int lv_aAge;
    int lv_bAge;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_SwaC_E5F4FB75"), false);
    if ((BankExists(lv_bankName, 1) == false)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_SwaC_0CD7A93F"), false);
        return ;
    }

    BankLoad(lv_bankName, 1);
    if ((BankLastCreated() == null)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_SwaC_253FE2BB"), false);
        return ;
    }

    libSwaC_gf_ZS_LoadLibertyInfoIndividual(BankLastCreated(), libSwaC_ge_ZS_LibertyMapID_MapTHanson03A, libSwaC_ge_ZS_LibertyMapID_MapTHanson03B, "HansonChoice");
    libSwaC_gf_ZS_LoadLibertyInfoIndividual(BankLastCreated(), libSwaC_ge_ZS_LibertyMapID_MapTTosh03A, libSwaC_ge_ZS_LibertyMapID_MapTTosh03B, "ToshChoice");
    libSwaC_gf_ZS_LoadLibertyInfoIndividual(BankLastCreated(), libSwaC_ge_ZS_LibertyMapID_MapTValerian02A, libSwaC_ge_ZS_LibertyMapID_MapTValerian02B, "CharChoice");
}

void libSwaC_gf_ZS_LoadLibertyInfoIndividual (bank lp_bank, int lp_missionA, int lp_missionB, string lp_choice) {
    // Variable Declarations
    string lv__SectionName;
    int lv_aAge;
    int lv_bAge;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__SectionName = "MissionCompletedAge";

    // Implementation
    if ((BankKeyExists(lp_bank, lv__SectionName, IntToString((lp_missionA))) == true)) {
        lv_aAge = BankValueGetAsInt(BankLastCreated(), lv__SectionName, IntToString((lp_missionA)));
    }
    else {
        lv_aAge = 0;
    }
    if ((BankKeyExists(lp_bank, lv__SectionName, IntToString((lp_missionB))) == true)) {
        lv_bAge = BankValueGetAsInt(BankLastCreated(), lv__SectionName, IntToString((lp_missionB)));
    }
    else {
        lv_bAge = 0;
    }
    TextExpressionSetToken("Param/Expression/lib_SwaC_1E065FC4", "A", IntToText(lv_aAge));
    TextExpressionSetToken("Param/Expression/lib_SwaC_1E065FC4", "B", IntToText(lv_bAge));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_SwaC_1E065FC4"), false);
    if (((lv_aAge > 0) || (lv_bAge > 0))) {
        if ((lv_aAge > lv_bAge)) {
            UserDataSetInt("WriterStates", lp_choice, "Value", 1, 1);
        }
        else {
            UserDataSetInt("WriterStates", lp_choice, "Value", 1, 2);
        }
    }

}

string libSwaC_gf_ZS_BankSectionName (string lp_map, string lp_section) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_map == null)) {
        return ("ZCampaign" + "|" + (lp_section));
    }

    return (libSwaC_gf_ZS_StoryMapBankID(lp_map) + "|" + (lp_section));
}

int libSwaC_gf_ZS_LoadTransitionVarInteger (bank lp_bank, string lp_section, string lp_key, int lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if ((BankKeyExists(lp_bank, lp_section, lp_key) == false)) {
        return lp_default;
    }
    else {
        return BankValueGetAsInt(lp_bank, lp_section, lp_key);
    }
}

bool libSwaC_gf_ZS_LoadTransitionVarBoolean (bank lp_bank, string lp_section, string lp_key, bool lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if ((BankKeyExists(lp_bank, lp_section, lp_key) == false)) {
        return lp_default;
    }
    else {
        return BankValueGetAsFlag(lp_bank, lp_section, lp_key);
    }
}

string libSwaC_gf_ZS_LoadTransitionVarString (bank lp_bank, string lp_section, string lp_key, string lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if ((BankKeyExists(lp_bank, lp_section, lp_key) == false)) {
        return lp_default;
    }
    else {
        return BankValueGetAsString(lp_bank, lp_section, lp_key);
    }
}

void libSwaC_gf_ZS_SaveTransitionVarInteger (bank lp_bank, string lp_section, string lp_key, int lp_value, int lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_value == lp_default)) {
        BankKeyRemove(lp_bank, lp_section, lp_key);
    }
    else {
        BankValueSetFromInt(lp_bank, lp_section, lp_key, lp_value);
    }
}

void libSwaC_gf_ZS_SaveTransitionVarBoolean (bank lp_bank, string lp_section, string lp_key, bool lp_value, bool lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_value == lp_default)) {
        BankKeyRemove(lp_bank, lp_section, lp_key);
    }
    else {
        BankValueSetFromFlag(lp_bank, lp_section, lp_key, lp_value);
    }
}

void libSwaC_gf_ZS_SaveTransitionVarString (bank lp_bank, string lp_section, string lp_key, string lp_value, string lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_value == lp_default)) {
        BankKeyRemove(lp_bank, lp_section, lp_key);
    }
    else {
        BankValueSetFromString(lp_bank, lp_section, lp_key, lp_value);
    }
}

string libSwaC_gf_ZS_BankMIssionDifficultyKey (string lp_mission, int lp_difficulty) {
    // Automatic Variable Declarations
    // Implementation
    return (libSwaC_gf_ZS_StoryMapBankID(lp_mission) + "-" + IntToString(libSwaC_gf_ZS_DifficultyIndex(lp_difficulty)));
}

void libSwaC_gf_ZS_CampaignVictory () {
    // Automatic Variable Declarations
    // Implementation
    UISetWorldVisible(PlayerGroupAll(), false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeVictoryPanel, false);
    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, null, c_soundtrackCueAny, c_soundtrackIndexAny);
    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryAmbience, null, c_soundtrackCueAny, c_soundtrackIndexAny);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    SoundStopAllTriggerSounds(true);
    TransmissionClearAll();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicInTransmission);
    UISetCursorVisible(PlayerGroupAll(), false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleUI, false);
    libSwaC_gv_zS_EndCinematicFinished = false;
    TriggerExecute(libSwaC_gt_ZS_EndCinematic, true, true);
    if ((libSwaC_gv_zS_EndCinematicFinished == false)) {
        TransmissionClearAll();
    }

    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, c_transitionDurationImmediate);
    UISetCursorVisible(PlayerGroupAll(), true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleUI, true);
    UISetWorldVisible(PlayerGroupAll(), false);
    TriggerExecute(libSwaC_gt_ZS_EndCredits, true, true);
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_SwaC_6C9FA21E"), false);
    CinematicFade(false, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    if ((libSwaC_gv_zSX_IsSimulation == false)) {
        GameSetNextMap("");
    }

    TriggerExecute(libSwaC_gt_ZS_SaveCampaignStatsData, true, false);
    GameOver(1, c_gameOverVictory, false, false);
}

void libSwaC_gf_DisplayCampaignVictoryScoreScreen (string lp_mission) {
    // Variable Declarations
    text lv_upgradeAvailable;
    int lv_indexAchievement;
    int lv_unlockedTech;
    int lv_subGroupEnabledIndex;
    int lv_indexObjective;
    int lv_rewardsEarned;
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup auto5E562806_g;
    int auto5E562806_u;

    // Variable Initialization

    // Implementation
    GameCheatAllow(c_gameCheatProgress, false);
    AITimePause(true);
    UnitPauseAll(true);
    auto5E562806_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterHidden - 32))), 0);
    auto5E562806_u = UnitGroupCount(auto5E562806_g, c_unitCountAll);
    for (;; auto5E562806_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(auto5E562806_g, auto5E562806_u);
        if (lv_indexUnit == null) { break; }
        UnitRemove(lv_indexUnit);
    }
    if ((libNtve_gf_PlayerInCinematicMode(1) == true)) {
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationImmediate);
    }

    libSwaC_gf_ZS_ShowHideHeroPanel(false);
    UISetWorldVisible(PlayerGroupAll(), false);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    UISetCursorVisible(PlayerGroupAll(), true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleUI, true);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    libNtve_gf_SendActorMessageToGameRegion(RegionEntireMap(), "SetVisibility");
    TransmissionClearAll();
    ConversationDataStop();
    libNtve_gf_HideAllCinematicPortraits(PlayerGroupAll());
    SoundStopAllTriggerSounds(false);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Victory);
    if ((libSwaC_gf_StoryMapTypeCheck(lp_mission, c_mapKindUpgrade) == false)) {
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    }

    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    if ((AchievementsDisabled(1) == false) && ((libSwaC_gf_CurrentMap() == "ZKorhal3") || (libSwaC_gv_zS_InCompletedCampaign == true))) {
        CampaignProgressEnableCampaignCompletedSaves(PlayerGroupAll(), true);
    }

    if ((AchievementsDisabled(1) == false) && (libSwaC_gf_CurrentMap() == "ZKorhal3") && (libSwaC_gv_zS_InCompletedCampaign == false)) {
        CampaignProgressDeleteCampaignSave(PlayerGroupAll());
    }

    if ((libSwaC_gv_zS_InLoadedMission == true)) {
        libSwaC_gf_ZS_ArchivesBankSyncForSave();
    }

    if ((libSwaC_gf_StoryMapTypeCheck(lp_mission, c_mapKindUpgrade) == true)) {
        AchievementTermQuantitySet(1, UserDataGetGameLink("TechUnit", libSwaC_gf_ZS_TechUnitOfArmyCategory(libSwaC_gf_MissionArmyCategoryUnlocked(lp_mission)), "AchievementTermEvolve", 1), 1);
        if ((libSwaC_gv_zSX_IsSimulation == false)) {
            libSwaC_gf_ZS_ArmyCustomEvolutionUIEnter(libSwaC_gf_MissionArmyCategoryUnlocked(lp_mission));
            libSwaC_gf_ZS_UpdateCampaignScreen(libSwaC_gf_LastSuccessfulMission());
        }

        libSwaC_gf_PrepareForStoryMode(c_gameOverVictory, libSwaC_gv_zSX_CampaignDifficulty);
        TextExpressionSetToken("Param/Expression/lib_SwaC_8D06C64D", "A", libSwaC_gf_StoryMapNameLowerCase(lp_mission));
        libSwaC_gf_CreateStoryModeTransitionSave(TextExpressionAssemble("Param/Expression/lib_SwaC_8D06C64D"), StringToText(""));
        UISetWorldVisible(PlayerGroupAll(), false);
        CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
        TriggerExecute(libSwaC_gt_ZS_SaveCampaignStatsData, true, false);
        Wait(0.125, c_timeGame);
        while (!((libSwaC_gv_zS_ArchivesReloading == false))) {
            Wait(0.1, c_timeGame);
        }
        GameOver(1, c_gameOverVictory, false, false);
        return ;
    }

    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZSwarmMusicScoreScreen", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Mission_Score_Screen", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    libSwaC_gf_PrepareForStoryMode(c_gameOverVictory, libSwaC_gv_zSX_CampaignDifficulty);
    if (((AchievementsDisabled(1) == false) || (libSwaC_gf_CurrentMap() != "ZKorhal3")) && (libSwaC_gv_zSX_IsSimulation == false)) {
        libSwaC_gf_ZS_UpdateCampaignScreen(lp_mission);
    }

    TriggerExecute(libSwaC_gt_ZS_SaveCampaignStatsData, true, false);
    if (((AchievementsDisabled(1) == false) || (libSwaC_gf_CurrentMap() != "ZKorhal3"))) {
        TextExpressionSetToken("Param/Expression/lib_SwaC_0A349CF7", "A", libSwaC_gf_StoryMapNameLowerCase(lp_mission));
        libSwaC_gf_CreateStoryModeTransitionSave(TextExpressionAssemble("Param/Expression/lib_SwaC_0A349CF7"), StringToText(""));
    }

    libSwaC_gf_ZS_CreateVictoryScreen();
    libSwaC_gf_ZS_UpdateVictoryScreen(lp_mission);
    TriggerEnable(libSwaC_gt_ZS_VSScreenContinue, true);
    TriggerEnable(libSwaC_gt_ZS_VSScreenPlayAgain, true);
    DialogSetVisible(libSwaC_gv_zS_VSDialog, PlayerGroupAll(), true);
    libSwaC_gf_ZS_CheckBonusAchievementUnlocking();
    if ((libSwaC_gv_zSX_IsSimulation == true)) {
        libSwaC_gf_ZS_OpenCampaignBank();
        libSwaC_gf_ZS_LoadTransitionVars(BankLastCreated(), lp_mission);
    }

    libSwaC_gf_ZS_CheckAchievementUnlocking();
}

void libSwaC_gf_ZS_CreateVictoryScreen () {
    // Variable Declarations
    string[5] lv_kerriganKitAbilityPanelID;
    string[6] lv_kerriganUpgradeIconPanelID;
    int lv_panel;
    int lv_index;

    // Automatic Variable Declarations
    const int auto96480EAB_ae = 3;
    const int auto96480EAB_ai = 1;

    // Variable Initialization
    lv_panel = c_invalidDialogControlId;

    // Implementation
    if ((libSwaC_gv_zS_VSDialog != c_invalidDialogId)) {
        return ;
    }

    DialogCreate(1920, 1200, c_anchorCenter, 0, 0, true);
    libSwaC_gv_zS_VSDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "HotS_ScoreScreen/ScoreScreenTemplate");
    libSwaC_gv_zS_VSPanel = DialogControlLastCreated();
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlHookup(libSwaC_gv_zS_VSPanel, c_triggerControlTypePanel, "MainPanel");
    libSwaC_gv_zS_VSMainPanel = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_VSMainPanel, c_triggerControlTypeLabel, "VictoryTextLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SwaC_3FDF6D85"), PlayerGroupAll());
    DialogControlHookup(libSwaC_gv_zS_VSMainPanel, c_triggerControlTypePanel, "ScreenTitleFrame");
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeLabel, "ScreenTitleLabel");
    libSwaC_gv_zS_VSLabelMissionTitle = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_VSMainPanel, c_triggerControlTypeLabel, "TimeTextLabel");
    libSwaC_gv_zS_VSLabelTime = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_VSMainPanel, c_triggerControlTypeImage, "BackgroundPortrait");
    libSwaC_gv_zS_VSBackgroundImage = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_VSMainPanel, c_triggerControlTypeImage, "BackgroundCover");
    libSwaC_gv_zS_VSBackgroundCover = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_VSMainPanel, c_triggerControlTypePanel, "MissionRewardKerriganLevel");
    libSwaC_gv_zS_VSRewardLevelPanel = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_VSRewardLevelPanel, c_triggerControlTypeLabel, "RewardTextLabel");
    libSwaC_gv_zS_VSRewardLevelTextLabel = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_VSMainPanel, c_triggerControlTypePanel, "BonusMissionReward");
    libSwaC_gv_zS_VSRewardBonusLevelPanel = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_VSRewardBonusLevelPanel, c_triggerControlTypeLabel, "BonusRewardTextLabel");
    libSwaC_gv_zS_VSRewardBonusLevelTextLabel = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_VSMainPanel, c_triggerControlTypePanel, "NewUnitFrame");
    libSwaC_gv_zS_VSRewardLevelPanel2 = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_VSRewardLevelPanel2, c_triggerControlTypeLabel, "TechnologyTextLabel");
    libSwaC_gv_zS_VSRewardLevelTextLabel2 = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_VSMainPanel, c_triggerControlTypePanel, "MissionRewardEvolutionUnlocks");
    libSwaC_gv_zS_VSRewardLevelPanel3 = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_VSRewardLevelPanel3, c_triggerControlTypeLabel, "RewardEvolutionMissionTextLabel");
    libSwaC_gv_zS_VSRewardLevelTextLabel3 = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_VSMainPanel, c_triggerControlTypeLabel, "SummaryEmptyLabel");
    libSwaC_gv_zS_VSRewardLevelTextLabel4 = DialogControlLastCreated();
    lv_index = 1;
    for ( ; ( (auto96480EAB_ai >= 0 && lv_index <= auto96480EAB_ae) || (auto96480EAB_ai < 0 && lv_index >= auto96480EAB_ae) ) ; lv_index += auto96480EAB_ai ) {
        DialogControlHookup(libSwaC_gv_zS_VSMainPanel, c_triggerControlTypeAchievement, "AchievementFrame"+IntToString(lv_index-1));
        libSwaC_gv_zS_VSAchievementTitle2[lv_index] = DialogControlLastCreated();
    }
    DialogControlHookup(libSwaC_gv_zS_VSMainPanel, c_triggerControlTypeButton, "PlayAgainButton");
    libSwaC_gv_zS_VSBtnPlayAgain = DialogControlLastCreated();
    DialogControlHookup(libSwaC_gv_zS_VSMainPanel, c_triggerControlTypeButton, "CloseButton");
    libNtve_gf_SetDialogItemHandle(DialogControlLastCreated(), "HotS_VictoryPanel_ContinueButton", PlayerGroupAll());
    libSwaC_gv_zS_VSBtnContinue = DialogControlLastCreated();
}

void libSwaC_gf_ZS_UpdateVictoryScreen (string lp_mission) {
    // Variable Declarations
    string lv_mutationUnlocked;
    int lv_kerriganBonusLevelsGained;
    int lv_kerriganBonusLevelsPossible;
    string lv_indexObjective;
    int lv_index;
    bool lv_rewardsAvailable;

    // Automatic Variable Declarations
    int auto665F3E51_ae;
    int auto665F3E51_ai;
    const int auto4C56664E_ae = 3;
    const int auto4C56664E_ai = 1;

    // Variable Initialization

    // Implementation
    libNtve_gf_SetDialogItemText(libSwaC_gv_zS_VSLabelMissionTitle, libSwaC_gf_StoryMapName(lp_mission), PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/lib_SwaC_A0CC05A2", "MISSIONTITLE", libSwaC_gf_StoryMapName(lp_mission));
    TextExpressionSetToken("Param/Expression/lib_SwaC_A0CC05A2", "DIFFICULTYTITLE", DifficultyNameCampaign(PlayerDifficulty(1)));
    libNtve_gf_SetDialogItemText(libSwaC_gv_zS_VSLabelMissionTitle, TextExpressionAssemble("Param/Expression/lib_SwaC_A0CC05A2"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libSwaC_gv_zS_VSLabelTime, libSwaC_gf_FormatTimeCampaign(libSwaC_gv_zS_MissionCompleteTime), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(libSwaC_gv_zS_VSBackgroundImage, libSwaC_gf_ZS_VictoryScreenBackground(lp_mission), PlayerGroupAll());
    if (((libSwaC_gv_zSX_IsSimulation == true) || ((libSwaC_gf_MissionStatusCheck("ZLab3", libSwaC_ge_MissionStatus_Completed) == true) && (lp_mission != "ZLab3")))) {
        libNtve_gf_SetDialogItemTooltip(libSwaC_gv_zS_VSBtnContinue, StringExternal("Param/Value/lib_SwaC_43935B42"), PlayerGroupAll());
    }

    if ((libSwaC_gf_ZS_MissionKerriganXPRewarded(lp_mission, false) > 0)) {
        DialogControlSetVisible(libSwaC_gv_zS_VSRewardLevelPanel, PlayerGroupAll(), true);
        TextExpressionSetToken("Param/Expression/lib_SwaC_F292B4B5", "Count", IntToText(libSwaC_gf_ZS_MissionKerriganXPRewarded(lp_mission, false)));
        libNtve_gf_SetDialogItemText(libSwaC_gv_zS_VSRewardLevelTextLabel, TextExpressionAssemble("Param/Expression/lib_SwaC_F292B4B5"), PlayerGroupAll());
        lv_rewardsAvailable = true;
    }
    else {
        DialogControlSetVisible(libSwaC_gv_zS_VSRewardLevelPanel, PlayerGroupAll(), false);
    }
    lv_kerriganBonusLevelsGained = 0;
    auto665F3E51_ae = CatalogFieldValueCount(c_gameCatalogMap, lp_mission, "ObjectiveArray", 1);
    auto665F3E51_ai = 1;
    while (auto665F3E51_ai <= auto665F3E51_ae) {
        lv_indexObjective = CatalogFieldValueGet(c_gameCatalogMap, lp_mission, "ObjectiveArray["+IntToString(auto665F3E51_ai-1)+"]", 1);
        if ((libSwaC_gf_MissionObjectiveIsPrimary(lv_indexObjective) == false)) {
            lv_kerriganBonusLevelsGained += libSwaC_gf_MissionObjectiveRewardsEarned(lv_indexObjective, "KerriganXP");
            lv_kerriganBonusLevelsPossible += libSwaC_gf_MissionObjectiveRewardsAvailable2(lv_indexObjective, "KerriganXP");
        }

        auto665F3E51_ai = auto665F3E51_ai + 1;
    }
    if ((lv_kerriganBonusLevelsPossible > 0)) {
        DialogControlSetVisible(libSwaC_gv_zS_VSRewardBonusLevelPanel, PlayerGroupAll(), true);
        TextExpressionSetToken("Param/Expression/lib_SwaC_C72C8E43", "GAINED", IntToText(lv_kerriganBonusLevelsGained));
        TextExpressionSetToken("Param/Expression/lib_SwaC_C72C8E43", "POSSIBLE", IntToText(lv_kerriganBonusLevelsPossible));
        libNtve_gf_SetDialogItemText(libSwaC_gv_zS_VSRewardBonusLevelTextLabel, TextExpressionAssemble("Param/Expression/lib_SwaC_C72C8E43"), PlayerGroupAll());
        lv_rewardsAvailable = true;
    }
    else {
        DialogControlSetVisible(libSwaC_gv_zS_VSRewardBonusLevelPanel, PlayerGroupAll(), false);
    }
    if ((libSwaC_gf_MissionArmyCategoryUnlocked(lp_mission) != null)) {
        DialogControlSetVisible(libSwaC_gv_zS_VSRewardLevelPanel2, PlayerGroupAll(), true);
        libNtve_gf_SetDialogItemText(libSwaC_gv_zS_VSRewardLevelTextLabel2, libSwaC_gf_StoryArmyCategoryName(libSwaC_gf_MissionArmyCategoryUnlocked(lp_mission)), PlayerGroupAll());
        lv_rewardsAvailable = true;
    }
    else {
        DialogControlSetVisible(libSwaC_gv_zS_VSRewardLevelPanel2, PlayerGroupAll(), false);
    }
    lv_mutationUnlocked = libSwaC_gf_MissionArmyEvolutionUnlocked(lp_mission);
    if ((lv_mutationUnlocked != null) && (libSwaC_gf_ZS_ArmyUltraUpgradeRequiredMission(lv_mutationUnlocked) == lp_mission)) {
        DialogControlSetVisible(libSwaC_gv_zS_VSRewardLevelPanel3, PlayerGroupAll(), true);
        libNtve_gf_SetDialogItemText(libSwaC_gv_zS_VSRewardLevelTextLabel3, libSwaC_gf_StoryArmyCategoryName(lv_mutationUnlocked), PlayerGroupAll());
        lv_rewardsAvailable = true;
    }
    else {
        DialogControlSetVisible(libSwaC_gv_zS_VSRewardLevelPanel3, PlayerGroupAll(), false);
    }
    if ((lv_rewardsAvailable == true)) {
        DialogControlSetVisible(libSwaC_gv_zS_VSRewardLevelTextLabel4, PlayerGroupAll(), false);
    }
    else {
        DialogControlSetVisible(libSwaC_gv_zS_VSRewardLevelTextLabel4, PlayerGroupAll(), true);
    }
    lv_index = 1;
    for ( ; ( (auto4C56664E_ai >= 0 && lv_index <= auto4C56664E_ae) || (auto4C56664E_ai < 0 && lv_index >= auto4C56664E_ae) ) ; lv_index += auto4C56664E_ai ) {
        libNtve_gf_SetDialogItemAchievement(libSwaC_gv_zS_VSAchievementTitle2[lv_index], UserDataGetGameLink("Maps", libSwaC_gf_ZS_MapUserDataInstance(lp_mission), "Achievements", lv_index), PlayerGroupAll());
    }
    if (((libSwaC_gf_CurrentMap() == "ZZerus1") || (libSwaC_gf_CurrentMap() == "ZZerus3"))) {
        DialogControlSetVisible(libSwaC_gv_zS_VSBackgroundCover, PlayerGroupAll(), true);
    }

}

void libSwaC_gf_ZS_VSDisplayRestartDialog () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int autoD91E53D5_ae = libSwaC_gv_zSC_DifficultyCount;
    const int autoD91E53D5_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libSwaC_gv_zS_VSRestartPanel == c_invalidDialogControlId)) {
        DialogControlHookup(libSwaC_gv_zS_VSPanel, c_triggerControlTypePanel, "RestartPanel");
        libSwaC_gv_zS_VSRestartPanel = DialogControlLastCreated();
        DialogControlHookup(libSwaC_gv_zS_VSRestartPanel, c_triggerControlTypePanel, "DifficultyPulldownContainer");
        DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypePulldown, "DifficultyPulldown");
        libSwaC_gv_zS_VSRestartDifficultyPulldown = DialogControlLastCreated();
        lv_index = 1;
        for ( ; ( (autoD91E53D5_ai >= 0 && lv_index <= autoD91E53D5_ae) || (autoD91E53D5_ai < 0 && lv_index >= autoD91E53D5_ae) ) ; lv_index += autoD91E53D5_ai ) {
            DialogControlAddItem(libSwaC_gv_zS_VSRestartDifficultyPulldown, PlayerGroupAll(), DifficultyNameCampaign(libSwaC_gf_ZS_DifficultyFromIndex(lv_index)));
        }
        DialogControlHookup(libSwaC_gv_zS_VSRestartPanel, c_triggerControlTypePanel, "RestartButton");
        DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeButton, "Button");
        libSwaC_gv_zS_VSRestartRestartButton = DialogControlLastCreated();
        DialogControlHookup(libSwaC_gv_zS_VSRestartPanel, c_triggerControlTypePanel, "CancelButton");
        DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeButton, "Button");
        libSwaC_gv_zS_VSRestartCancelButton = DialogControlLastCreated();
    }

    TriggerEnable(libSwaC_gt_ZS_VSRestartCancel, true);
    TriggerEnable(libSwaC_gt_ZS_VSRestartRestart, true);
    DialogControlSelectItem(libSwaC_gv_zS_VSRestartDifficultyPulldown, PlayerGroupAll(), libSwaC_gf_ZS_DifficultyIndex(PlayerDifficulty(1)));
    DialogControlSetVisible(libSwaC_gv_zS_VSRestartPanel, PlayerGroupAll(), true);
    DialogControlSetVisible(libSwaC_gv_zS_VSMainPanel, PlayerGroupAll(), false);
}

string libSwaC_gf_ZS_VictoryScreenBackground (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    return libSwaC_gf_StoryMapLoadingScreenImage(lp_map);
}

string libSwaC_gf_MissionCatalogPropertyVictoryScreen (string lp_field, string lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    return CatalogFieldValueGet(c_gameCatalogMap, lp_mission, lp_field, c_playerAny);
}

void libSwaC_gf_ZS_CheckAchievementUnlocking () {
    // Automatic Variable Declarations
    // Implementation
    if ((libSwaC_gf_CurrentMap() == "ZKorhal3")) {
        libSwaC_gf_CampaignAwardAchievement("HeartOfTheSwarm", 1);
    }

    libSwaC_gf_CampaignAwardAchievement(UserDataGetGameLink("Maps", libSwaC_gf_ZS_MapUserDataInstance(libSwaC_gf_CurrentMap()), "Achievements", 1), 1);
    if ((libNtve_gf_DifficultyValueInt(1, 1, 1, 1) == 1) && (UserDataGetGameLink("Maps", libSwaC_gf_ZS_MapUserDataInstance(libSwaC_gf_CurrentMap()), "CompletionAchievementTerms", 1) != null)) {
        AchievementTermQuantitySet(1, UserDataGetGameLink("Maps", libSwaC_gf_ZS_MapUserDataInstance(libSwaC_gf_CurrentMap()), "CompletionAchievementTerms", 1), 1);
    }

    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (UserDataGetGameLink("Maps", libSwaC_gf_ZS_MapUserDataInstance(libSwaC_gf_CurrentMap()), "CompletionAchievementTerms", 2) != null)) {
        AchievementTermQuantitySet(1, UserDataGetGameLink("Maps", libSwaC_gf_ZS_MapUserDataInstance(libSwaC_gf_CurrentMap()), "CompletionAchievementTerms", 2), 1);
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1) && (UserDataGetGameLink("Maps", libSwaC_gf_ZS_MapUserDataInstance(libSwaC_gf_CurrentMap()), "CompletionAchievementTerms", 3) != null)) {
        AchievementTermQuantitySet(1, UserDataGetGameLink("Maps", libSwaC_gf_ZS_MapUserDataInstance(libSwaC_gf_CurrentMap()), "CompletionAchievementTerms", 3), 1);
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1) && (UserDataGetGameLink("Maps", libSwaC_gf_ZS_MapUserDataInstance(libSwaC_gf_CurrentMap()), "CompletionAchievementTerms", 3) != null)) {
        AchievementTermQuantitySet(1, UserDataGetGameLink("Maps", libSwaC_gf_ZS_MapUserDataInstance(libSwaC_gf_CurrentMap()), "CompletionAchievementTerms", 4), 1);
    }

}

void libSwaC_gf_ZS_CheckBonusAchievementUnlocking () {
    // Variable Declarations
    bool lv_allBonusesComplete;
    string lv_indexObjective;

    // Automatic Variable Declarations
    int autoE77F4BEC_ae;
    int autoE77F4BEC_ai;

    // Variable Initialization

    // Implementation
    lv_allBonusesComplete = true;
    autoE77F4BEC_ae = CatalogFieldValueCount(c_gameCatalogMap, libSwaC_gf_CurrentMap(), "ObjectiveArray", 1);
    autoE77F4BEC_ai = 1;
    while (autoE77F4BEC_ai <= autoE77F4BEC_ae) {
        lv_indexObjective = CatalogFieldValueGet(c_gameCatalogMap, libSwaC_gf_CurrentMap(), "ObjectiveArray["+IntToString(autoE77F4BEC_ai-1)+"]", 1);
        if ((libSwaC_gf_MissionObjectiveIsPrimary(lv_indexObjective) == false) && (libSwaC_gf_MissionObjectiveStateCheck(lv_indexObjective, libSwaC_ge_MissionObjectiveState_Completed) == false)) {
            lv_allBonusesComplete = false;
            break;
        }

        autoE77F4BEC_ai = autoE77F4BEC_ai + 1;
    }
    if ((lv_allBonusesComplete == true)) {
        AchievementTermQuantitySet(1, UserDataGetGameLink("Maps", libSwaC_gf_ZS_MapUserDataInstance(libSwaC_gf_CurrentMap()), "BonusAchievementTerm", 1), 1);
    }

}

bool libSwaC_gf_CampaignDebugModeIsOn (string lp_mode) {
    // Automatic Variable Declarations
    // Implementation
    return GameIsDebugOptionSet((lp_mode), 1);
}

void libSwaC_gf_RegisterFootageRecording (trigger lp_callback) {
    // Automatic Variable Declarations
    // Implementation
    libSwaC_gv_zS_FootageRecordingCallback = lp_callback;
    if ((GameIsTestMap(true) == true)) {
        libSwaC_gf_ZS_FootageRecording();
        ConsoleCommand("exit", true, true);
    }

}

void libSwaC_gf_ZS_FootageRecording () {
    // Automatic Variable Declarations
    // Implementation
    if (((libSwaC_gv_zS_FootageRecordingCallback == null) || (libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindMission) == false))) {
        return ;
    }

    TriggerExecute(libSwaC_gv_zS_FootageRecordingCallback, true, true);
}

string libSwaC_gf_ZSS_ParseCameraInfoString (camerainfo lp_camera) {
    // Variable Declarations
    string lv_stringResult;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_stringResult = "";

    // Implementation
    lv_stringResult = (FixedToString(PointGetX(CameraInfoGetTarget(lp_camera)), c_fixedPrecisionAny) + " " + FixedToString(PointGetY(CameraInfoGetTarget(lp_camera)), c_fixedPrecisionAny) + " " + FixedToString(CameraInfoGetValue(lp_camera, c_cameraValuePitch), c_fixedPrecisionAny) + " " + FixedToString(CameraInfoGetValue(lp_camera, c_cameraValueDepthOfField), c_fixedPrecisionAny) + " " + FixedToString(CameraInfoGetValue(lp_camera, c_cameraValueDistance), c_fixedPrecisionAny));
    lv_stringResult = (lv_stringResult + " " + FixedToString(CameraInfoGetValue(lp_camera, c_cameraValueFalloffEnd), c_fixedPrecisionAny) + " " + FixedToString(CameraInfoGetValue(lp_camera, c_cameraValueFalloffStart), c_fixedPrecisionAny) + " " + FixedToString(CameraInfoGetValue(lp_camera, c_cameraValueFarClip), c_fixedPrecisionAny) + " " + FixedToString(CameraInfoGetValue(lp_camera, c_cameraValueFieldOfView), c_fixedPrecisionAny) + " " + FixedToString(CameraInfoGetValue(lp_camera, c_cameraValueFocalDepth), c_fixedPrecisionAny));
    lv_stringResult = (lv_stringResult + " " + FixedToString(CameraInfoGetValue(lp_camera, c_cameraValueHeightOffset), c_fixedPrecisionAny) + " " + FixedToString(CameraInfoGetValue(lp_camera, c_cameraValueNearClip), c_fixedPrecisionAny) + " " + FixedToString(CameraInfoGetValue(lp_camera, c_cameraValueRoll), c_fixedPrecisionAny) + " " + FixedToString(CameraInfoGetValue(lp_camera, c_cameraValueYaw), c_fixedPrecisionAny) + " " + FixedToString(CameraInfoGetValue(lp_camera, c_cameraValueShadowClip), c_fixedPrecisionAny));
    return lv_stringResult;
}

string libSwaC_gf_ZS_DebugProgressDataTableID (string lp_type, string lp_name) {
    // Automatic Variable Declarations
    // Implementation
    return ("DebugProg" + lp_type + "&%&" + lp_name);
}

bool libSwaC_gf_ZS_DebugProgressDialogOpened () {
    // Automatic Variable Declarations
    // Implementation
    return libSwaC_gv_zS_DebugProgressActive;
}

void libSwaC_gf_ZS_DebugProgressAddMissionButton (string lp_mission, fixed lp_col, fixed lp_row) {
    // Variable Declarations
    int lv_xX;
    int lv_yY;
    int lv_width;
    int lv_height;
    int lv_marginX;
    int lv_marginY;
    int lv_index;
    int lv_button;
    int lv_button2;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_button = c_invalidDialogControlId;
    lv_button2 = c_invalidDialogControlId;

    // Implementation
    lv_xX = FixedToInt((((lp_col - 1.0) * 285.0) + 40.0));
    lv_yY = FixedToInt((((lp_row - 1.0) * 70.0) + 35.0));
    lv_width = 340;
    lv_height = 75;
    lv_marginX = 15;
    lv_marginY = 10;
    DialogControlCreate(libSwaC_gv_zS_DebugProgressDialog, c_triggerControlTypeButton);
    libNtve_gf_SetDialogItemHandle(DialogControlLastCreated(), ("HotS_DebugProgress_MissionButton" + (lp_mission)), PlayerGroupAll());
    lv_button = DialogControlLastCreated();
    libNtve_gf_SaveDataTableValueDialogItem(true, libSwaC_gf_ZS_DebugProgressDataTableID("Button", (lp_mission)), DialogControlLastCreated());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_width, lv_height);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lv_xX, lv_yY);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), libSwaC_gf_ZS_DebugProgressMapName(lp_mission), PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 0.00), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "DebugProgressPanelMissionHotS", PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    libNtve_gf_SaveDataTableValueDialogItem(true, libSwaC_gf_ZS_DebugProgressDataTableID("StateLabel", (lp_mission)), DialogControlLastCreated());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), (lv_width - (lv_marginX * 2)), (lv_height - (lv_marginY * 2)));
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "DebugProgressPanelLabelTopRight", PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopRight, lv_button, c_anchorTopRight, (-1 * lv_marginX), (1 * lv_marginY));
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    libNtve_gf_SaveDataTableValueDialogItem(true, libSwaC_gf_ZS_DebugProgressDataTableID("TechLabel", (lp_mission)), DialogControlLastCreated());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), (lv_width - (lv_marginX * 2)), (lv_height - (lv_marginY * 2)));
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "DebugProgressPanelLabelBottomLeft", PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomLeft, lv_button, c_anchorBottomLeft, (1 * lv_marginX), (-1 * lv_marginY));
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    libNtve_gf_SaveDataTableValueDialogItem(true, libSwaC_gf_ZS_DebugProgressDataTableID("BonusLabel", (lp_mission)), DialogControlLastCreated());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), (lv_width - (lv_marginX * 2)), (lv_height - (lv_marginY * 2)));
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "DebugProgressPanelLabelBottomRight", PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomRight, lv_button, c_anchorBottomRight, (-1 * lv_marginX), (-1 * lv_marginY));
    DialogControlCreate(libSwaC_gv_zS_DebugProgressDialog, c_triggerControlTypeButton);
    lv_button2 = DialogControlLastCreated();
    libNtve_gf_SaveDataTableValueDialogItem(true, libSwaC_gf_ZS_DebugProgressDataTableID("PlayButton", (lp_mission)), DialogControlLastCreated());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 35, DialogControlGetHeight(lv_button, 1));
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorRight, lv_button, c_anchorLeft, 0, 0);
    TextExpressionSetToken("Param/Expression/lib_SwaC_E70F05CA", "A", libSwaC_gf_StoryMapName(lp_mission));
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/lib_SwaC_E70F05CA"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(libSwaC_gv_zS_DebugProgressDialog, 32, 32, c_anchorTopLeft, 50, 50, StringToText(""), "Assets\\Textures\\ui-editoricon-previewer_timeline_play.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SaveDataTableValueDialogItem(true, libSwaC_gf_ZS_DebugProgressDataTableID("PlayImage", (lp_mission)), DialogControlLastCreated());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lv_button2, c_anchorCenter, 0, 0);
}

void libSwaC_gf_ZS_DebugProgressCreateDialog () {
    // Variable Declarations
    int lv_width;
    int lv_height;
    int lv_offsetX;
    int lv_offsetY;
    int lv_relativeButton;
    int lv_travelButton;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_relativeButton = c_invalidDialogControlId;
    lv_travelButton = c_invalidDialogControlId;

    // Implementation
    if ((libSwaC_gv_zS_DebugProgressDialog != c_invalidDialogId)) {
        return ;
    }

    DialogCreate(1500, 1100, c_anchorCenter, 0, 0, true);
    libSwaC_gv_zS_DebugProgressDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (DialogGetWidth(DialogLastCreated()) - 60), (DialogGetHeight(DialogLastCreated()) - 60), c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0,0,0), PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
    libSwaC_gf_ZS_DebugProgressAddMissionButton("ZLab1", 3.0, 1.0);
    libSwaC_gf_ZS_DebugProgressAddMissionButton("ZLab2", 3.0, 2.0);
    libSwaC_gf_ZS_DebugProgressAddMissionButton("ZLab3", 3.0, 3.0);
    libSwaC_gf_ZS_DebugProgressAddMissionButton("ZExpedition1", 4.5, 4.0);
    libSwaC_gf_ZS_DebugProgressAddMissionButton("ZExpedition2", 4.5, 5.0);
    libSwaC_gf_ZS_DebugProgressAddMissionButton("ZExpedition3", 4.5, 6.0);
    libSwaC_gf_ZS_DebugProgressAddMissionButton("ZChar1", 1.5, 4.0);
    libSwaC_gf_ZS_DebugProgressAddMissionButton("ZChar2", 1.5, 5.0);
    libSwaC_gf_ZS_DebugProgressAddMissionButton("ZChar3", 1.5, 6.0);
    libSwaC_gf_ZS_DebugProgressAddMissionButton("ZZerus1", 3.0, 6.0);
    libSwaC_gf_ZS_DebugProgressAddMissionButton("ZZerus2", 3.0, 7.0);
    libSwaC_gf_ZS_DebugProgressAddMissionButton("ZZerus3", 3.0, 8.0);
    libSwaC_gf_ZS_DebugProgressAddMissionButton("ZHybrid1", 1.5, 8.0);
    libSwaC_gf_ZS_DebugProgressAddMissionButton("ZHybrid2", 1.5, 9.0);
    libSwaC_gf_ZS_DebugProgressAddMissionButton("ZHybrid3", 1.5, 10.0);
    libSwaC_gf_ZS_DebugProgressAddMissionButton("ZSpace1", 4.5, 8.0);
    libSwaC_gf_ZS_DebugProgressAddMissionButton("ZSpace2", 4.5, 9.0);
    libSwaC_gf_ZS_DebugProgressAddMissionButton("ZKorhal1", 3.0, 11.25);
    libSwaC_gf_ZS_DebugProgressAddMissionButton("ZKorhal2", 3.0, 12.25);
    libSwaC_gf_ZS_DebugProgressAddMissionButton("ZKorhal3", 3.0, 13.25);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 150, 50, c_anchorBottomRight, 190, 30, StringToText(""), StringExternal("Param/Value/lib_SwaC_486AB24C"), "");
    libNtve_gf_SetDialogItemHandle(DialogControlLastCreated(), "HotS_DebugProgress_OkButton", PlayerGroupAll());
    libSwaC_gv_zS_DebugProgressButtonOK = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 150, 50, c_anchorBottomRight, 40, 30, StringToText(""), StringExternal("Param/Value/lib_SwaC_73CE9158"), "");
    libNtve_gf_SetDialogItemHandle(DialogControlLastCreated(), "HotS_DebugProgress_CancelButton", PlayerGroupAll());
    libSwaC_gv_zS_DebugProgressButtonCancel = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 150, 50, c_anchorBottomLeft, 40, 30, StringToText(""), StringExternal("Param/Value/lib_SwaC_51BC3001"), "");
    libNtve_gf_SetDialogItemHandle(DialogControlLastCreated(), "HotS_DebugProgress_ResetButton", PlayerGroupAll());
    libSwaC_gv_zS_DebugProgressButtonReset = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 600, 400, c_anchorTopLeft, 50, 50, StringToText(""), Color(100,100,100), false, 2.0);
    libSwaC_gv_zS_DebugProgressLabelInfo = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "DebugProgressPanelCampaignProgress", PlayerGroupAll());
    lv_width = 300;
    lv_height = 60;
    lv_offsetX = 5;
    lv_offsetY = 0;
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_width, lv_height, c_anchorTopLeft, 0, 0, StringExternal("Param/Value/lib_SwaC_56D7111D"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "DebugProgressPanelLabelRequirement", PlayerGroupAll());
    lv_relativeButton = libNtve_gf_ValueFromDataTableDialogItem(true, libSwaC_gf_ZS_DebugProgressDataTableID("Button", ("ZExpedition1")));
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomLeft, lv_relativeButton, c_anchorTopLeft, lv_offsetX, lv_offsetY);
    libSwaC_gv_zS_DebugProgressLabelExpeditionReq = DialogControlLastCreated();
    DialogControlCreate(libSwaC_gv_zS_DebugProgressDialog, c_triggerControlTypeButton);
    libNtve_gf_SetDialogItemHandle(DialogControlLastCreated(), "HotS_DebugProgress_KaldirTravelButton", PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 51, 51);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomRight, lv_relativeButton, c_anchorTopRight, 0, 0);
    TextExpressionSetToken("Param/Expression/lib_SwaC_9C221A81", "A", libSwaC_gf_StoryPlanetName("Expedition"));
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/lib_SwaC_9C221A81"), PlayerGroupAll());
    lv_travelButton = DialogControlLastCreated();
    libNtve_gf_SaveDataTableValueDialogItem(true, libSwaC_gf_ZS_DebugProgressDataTableID("PlanetButton", ("Expedition")), DialogControlLastCreated());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 50, 50, c_anchorTopLeft, 50, 50, StringToText(""), "Assets\\Textures\\btn-tips-hyperion.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SaveDataTableValueDialogItem(true, libSwaC_gf_ZS_DebugProgressDataTableID("PlanetImage", ("Expedition")), DialogControlLastCreated());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lv_travelButton, c_anchorCenter, 0, 0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_width, lv_height, c_anchorTopLeft, 0, 0, StringExternal("Param/Value/lib_SwaC_F303130C"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "DebugProgressPanelLabelRequirement", PlayerGroupAll());
    lv_relativeButton = libNtve_gf_ValueFromDataTableDialogItem(true, libSwaC_gf_ZS_DebugProgressDataTableID("Button", ("ZChar1")));
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomLeft, lv_relativeButton, c_anchorTopLeft, lv_offsetX, lv_offsetY);
    libSwaC_gv_zS_DebugProgressLabelCharReq = DialogControlLastCreated();
    DialogControlCreate(libSwaC_gv_zS_DebugProgressDialog, c_triggerControlTypeButton);
    libNtve_gf_SetDialogItemHandle(DialogControlLastCreated(), "HotS_DebugProgress_CharTravelButton", PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 51, 51);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomRight, lv_relativeButton, c_anchorTopRight, 0, 0);
    TextExpressionSetToken("Param/Expression/lib_SwaC_50270C79", "A", libSwaC_gf_StoryPlanetName("Char"));
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/lib_SwaC_50270C79"), PlayerGroupAll());
    lv_travelButton = DialogControlLastCreated();
    libNtve_gf_SaveDataTableValueDialogItem(true, libSwaC_gf_ZS_DebugProgressDataTableID("PlanetButton", ("Char")), DialogControlLastCreated());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 50, 50, c_anchorTopLeft, 50, 50, StringToText(""), "Assets\\Textures\\btn-tips-hyperion.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SaveDataTableValueDialogItem(true, libSwaC_gf_ZS_DebugProgressDataTableID("PlanetImage", ("Char")), DialogControlLastCreated());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lv_travelButton, c_anchorCenter, 0, 0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_width, lv_height, c_anchorTopLeft, 0, 0, StringExternal("Param/Value/lib_SwaC_865850D5"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "DebugProgressPanelLabelRequirement", PlayerGroupAll());
    lv_relativeButton = libNtve_gf_ValueFromDataTableDialogItem(true, libSwaC_gf_ZS_DebugProgressDataTableID("Button", ("ZZerus1")));
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomLeft, lv_relativeButton, c_anchorTopLeft, lv_offsetX, lv_offsetY);
    libSwaC_gv_zS_DebugProgressLabelZerusReq = DialogControlLastCreated();
    DialogControlCreate(libSwaC_gv_zS_DebugProgressDialog, c_triggerControlTypeButton);
    libNtve_gf_SetDialogItemHandle(DialogControlLastCreated(), "HotS_DebugProgress_ZerusTravelButton", PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 51, 51);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomRight, lv_relativeButton, c_anchorTopRight, 0, 0);
    TextExpressionSetToken("Param/Expression/lib_SwaC_2973A6E6", "A", libSwaC_gf_StoryPlanetName("Zerus"));
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/lib_SwaC_2973A6E6"), PlayerGroupAll());
    lv_travelButton = DialogControlLastCreated();
    libNtve_gf_SaveDataTableValueDialogItem(true, libSwaC_gf_ZS_DebugProgressDataTableID("PlanetButton", ("Zerus")), DialogControlLastCreated());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 50, 50, c_anchorTopLeft, 50, 50, StringToText(""), "Assets\\Textures\\btn-tips-hyperion.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SaveDataTableValueDialogItem(true, libSwaC_gf_ZS_DebugProgressDataTableID("PlanetImage", ("Zerus")), DialogControlLastCreated());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lv_travelButton, c_anchorCenter, 0, 0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_width, lv_height, c_anchorTopLeft, 0, 0, StringExternal("Param/Value/lib_SwaC_60EDF0B7"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "DebugProgressPanelLabelRequirement", PlayerGroupAll());
    lv_relativeButton = libNtve_gf_ValueFromDataTableDialogItem(true, libSwaC_gf_ZS_DebugProgressDataTableID("Button", ("ZHybrid1")));
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomLeft, lv_relativeButton, c_anchorTopLeft, lv_offsetX, lv_offsetY);
    libSwaC_gv_zS_DebugProgressLabelHybridReq = DialogControlLastCreated();
    DialogControlCreate(libSwaC_gv_zS_DebugProgressDialog, c_triggerControlTypeButton);
    libNtve_gf_SetDialogItemHandle(DialogControlLastCreated(), "HotS_DebugProgress_SkygeirrStationTravelButton", PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 51, 51);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomRight, lv_relativeButton, c_anchorTopRight, 0, 0);
    TextExpressionSetToken("Param/Expression/lib_SwaC_D9DE4A7D", "A", libSwaC_gf_StoryPlanetName("Hybrid"));
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/lib_SwaC_D9DE4A7D"), PlayerGroupAll());
    lv_travelButton = DialogControlLastCreated();
    libNtve_gf_SaveDataTableValueDialogItem(true, libSwaC_gf_ZS_DebugProgressDataTableID("PlanetButton", ("Hybrid")), DialogControlLastCreated());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 50, 50, c_anchorTopLeft, 50, 50, StringToText(""), "Assets\\Textures\\btn-tips-hyperion.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SaveDataTableValueDialogItem(true, libSwaC_gf_ZS_DebugProgressDataTableID("PlanetImage", ("Hybrid")), DialogControlLastCreated());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lv_travelButton, c_anchorCenter, 0, 0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_width, lv_height, c_anchorTopLeft, 0, 0, StringExternal("Param/Value/lib_SwaC_63754777"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "DebugProgressPanelLabelRequirement", PlayerGroupAll());
    lv_relativeButton = libNtve_gf_ValueFromDataTableDialogItem(true, libSwaC_gf_ZS_DebugProgressDataTableID("Button", ("ZSpace1")));
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomLeft, lv_relativeButton, c_anchorTopLeft, lv_offsetX, lv_offsetY);
    libSwaC_gv_zS_DebugProgressLabelValerianReq = DialogControlLastCreated();
    DialogControlCreate(libSwaC_gv_zS_DebugProgressDialog, c_triggerControlTypeButton);
    libNtve_gf_SetDialogItemHandle(DialogControlLastCreated(), "HotS_DebugProgress_DominionSpaceTravelButton", PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 51, 51);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomRight, lv_relativeButton, c_anchorTopRight, 0, 0);
    TextExpressionSetToken("Param/Expression/lib_SwaC_7CB767BC", "A", libSwaC_gf_StoryPlanetName("ZSpace1"));
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/lib_SwaC_7CB767BC"), PlayerGroupAll());
    lv_travelButton = DialogControlLastCreated();
    libNtve_gf_SaveDataTableValueDialogItem(true, libSwaC_gf_ZS_DebugProgressDataTableID("PlanetButton", ("ZSpace1")), DialogControlLastCreated());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 50, 50, c_anchorTopLeft, 50, 50, StringToText(""), "Assets\\Textures\\btn-tips-hyperion.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SaveDataTableValueDialogItem(true, libSwaC_gf_ZS_DebugProgressDataTableID("PlanetImage", ("ZSpace1")), DialogControlLastCreated());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lv_travelButton, c_anchorCenter, 0, 0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_width, 120, c_anchorTopLeft, 0, 0, StringExternal("Param/Value/lib_SwaC_17002842"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "DebugProgressPanelLabelRequirement", PlayerGroupAll());
    lv_relativeButton = libNtve_gf_ValueFromDataTableDialogItem(true, libSwaC_gf_ZS_DebugProgressDataTableID("Button", ("ZKorhal1")));
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomLeft, lv_relativeButton, c_anchorTopLeft, lv_offsetX, lv_offsetY);
    libSwaC_gv_zS_DebugProgressLabelKohalReq = DialogControlLastCreated();
    DialogControlCreate(libSwaC_gv_zS_DebugProgressDialog, c_triggerControlTypeButton);
    libNtve_gf_SetDialogItemHandle(DialogControlLastCreated(), "HotS_DebugProgress_KorhalTravelButton", PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 51, 51);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomRight, lv_relativeButton, c_anchorTopRight, 0, 0);
    TextExpressionSetToken("Param/Expression/lib_SwaC_48EF3528", "A", libSwaC_gf_StoryPlanetName("Korhal"));
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/lib_SwaC_48EF3528"), PlayerGroupAll());
    lv_travelButton = DialogControlLastCreated();
    libNtve_gf_SaveDataTableValueDialogItem(true, libSwaC_gf_ZS_DebugProgressDataTableID("PlanetButton", ("Korhal")), DialogControlLastCreated());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 50, 50, c_anchorTopLeft, 50, 50, StringToText(""), "Assets\\Textures\\btn-tips-hyperion.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SaveDataTableValueDialogItem(true, libSwaC_gf_ZS_DebugProgressDataTableID("PlanetImage", ("Korhal")), DialogControlLastCreated());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lv_travelButton, c_anchorCenter, 0, 0);
}

void libSwaC_gf_ZS_DebugProgressUpdateDialog () {
    // Variable Declarations
    string lv_indexMission;
    int lv_stateLabel;
    int lv_techLabel;
    int lv_button;
    int lv_button2;
    int lv_button3;
    string lv_indexCategory;
    text lv_techText;
    int lv_indexKit;
    int lv_bonusLabel;
    int lv_bonus;
    text lv_bonusText;
    text lv_levelLabel;
    string lv_indexPlanet;

    // Automatic Variable Declarations
    int auto60A3D90D_ae;
    int auto60A3D90D_ai;
    int autoC43AB485_val;
    int auto55A8D336_ae;
    int auto55A8D336_ai;

    // Variable Initialization
    lv_stateLabel = c_invalidDialogControlId;
    lv_techLabel = c_invalidDialogControlId;
    lv_button = c_invalidDialogControlId;
    lv_button2 = c_invalidDialogControlId;
    lv_button3 = c_invalidDialogControlId;
    lv_bonusLabel = c_invalidDialogControlId;

    // Implementation
    auto60A3D90D_ae = CatalogEntryCount(c_gameCatalogMap);
    auto60A3D90D_ai = 1;
    while (auto60A3D90D_ai <= auto60A3D90D_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto60A3D90D_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            lv_stateLabel = libNtve_gf_ValueFromDataTableDialogItem(true, libSwaC_gf_ZS_DebugProgressDataTableID("StateLabel", (lv_indexMission)));
            lv_techLabel = libNtve_gf_ValueFromDataTableDialogItem(true, libSwaC_gf_ZS_DebugProgressDataTableID("TechLabel", (lv_indexMission)));
            lv_bonusLabel = libNtve_gf_ValueFromDataTableDialogItem(true, libSwaC_gf_ZS_DebugProgressDataTableID("BonusLabel", (lv_indexMission)));
            lv_indexCategory = libSwaC_gf_MissionArmyCategoryUnlocked(lv_indexMission);
            if ((lv_indexCategory != null)) {
                lv_techText = libSwaC_gf_StoryArmyCategoryName(lv_indexCategory);
            }
            else {
                lv_techText = StringToText("");
            }
            lv_bonusText = StringToText("");
            lv_bonus = (libSwaC_gf_ZS_MissionKerriganXPRewarded(lv_indexMission, !(libSwaC_gv_zS_DebugProgressReleaseMode)));
            if ((lv_bonus != 0)) {
                if ((lv_bonus > 1)) {
                    lv_levelLabel = StringExternal("Param/Value/lib_SwaC_928B9BD9");
                }
                else {
                    lv_levelLabel = StringExternal("Param/Value/lib_SwaC_489AC3AB");
                }
                TextExpressionSetToken("Param/Expression/lib_SwaC_88BCFA8C", "A", IntToText(lv_bonus));
                TextExpressionSetToken("Param/Expression/lib_SwaC_88BCFA8C", "B", lv_levelLabel);
                lv_bonusText = TextExpressionAssemble("Param/Expression/lib_SwaC_88BCFA8C");
            }
            lv_button = libNtve_gf_ValueFromDataTableDialogItem(true, libSwaC_gf_ZS_DebugProgressDataTableID("Button", (lv_indexMission)));
            lv_button2 = libNtve_gf_ValueFromDataTableDialogItem(true, libSwaC_gf_ZS_DebugProgressDataTableID("PlayButton", (lv_indexMission)));
            lv_button3 = libNtve_gf_ValueFromDataTableDialogItem(true, libSwaC_gf_ZS_DebugProgressDataTableID("PlayImage", (lv_indexMission)));
            if ((libSwaC_gv_zS_DebugProgressReleaseMode == false)) {
                libNtve_gf_SetDialogItemTooltip(lv_button, libSwaC_gf_StoryMapName(lv_indexMission), PlayerGroupAll());
            }

            if ((lv_stateLabel != c_invalidDialogControlId)) {
                autoC43AB485_val = libSwaC_gf_MissionStatus(lv_indexMission);
                if (autoC43AB485_val == libSwaC_ge_MissionStatus_Locked) {
                    DialogControlSetVisible(lv_button2, PlayerGroupAll(), false);
                    DialogControlSetVisible(lv_button3, PlayerGroupAll(), false);
                    DialogControlSetEnabled(lv_button, PlayerGroupAll(), false);
                    DialogControlSetEnabled(lv_stateLabel, PlayerGroupAll(), true);
                    libNtve_gf_SetDialogItemText(lv_stateLabel, StringExternal("Param/Value/lib_SwaC_6B5EB5E5"), PlayerGroupAll());
                    TextExpressionSetToken("Param/Expression/lib_SwaC_0370A991", "A", libSwaC_gf_ZS_DebugProgressMapName(lv_indexMission));
                    libNtve_gf_SetDialogItemText(lv_button, TextExpressionAssemble("Param/Expression/lib_SwaC_0370A991"), PlayerGroupAll());
                    TextExpressionSetToken("Param/Expression/lib_SwaC_7A5ECCF1", "A", lv_techText);
                    libNtve_gf_SetDialogItemText(lv_techLabel, TextExpressionAssemble("Param/Expression/lib_SwaC_7A5ECCF1"), PlayerGroupAll());
                    TextExpressionSetToken("Param/Expression/lib_SwaC_5AB33CDC", "A", lv_bonusText);
                    libNtve_gf_SetDialogItemText(lv_bonusLabel, TextExpressionAssemble("Param/Expression/lib_SwaC_5AB33CDC"), PlayerGroupAll());
                }
                else if (autoC43AB485_val == libSwaC_ge_MissionStatus_Available) {
                    if ((libSwaC_gf_StoryPlanetIsAvailable(libSwaC_gf_StoryMapPlanet(lv_indexMission)) == true)) {
                        if ((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true)) {
                            DialogControlSetVisible(lv_button2, PlayerGroupAll(), true);
                        }
                        else {
                            DialogControlSetVisible(lv_button2, PlayerGroupAll(), false);
                        }
                        DialogControlSetVisible(lv_button3, PlayerGroupAll(), true);
                        DialogControlSetEnabled(lv_button, PlayerGroupAll(), true);
                    }
                    else {
                        DialogControlSetVisible(lv_button2, PlayerGroupAll(), false);
                        DialogControlSetVisible(lv_button3, PlayerGroupAll(), false);
                        DialogControlSetEnabled(lv_button, PlayerGroupAll(), false);
                    }
                    DialogControlSetEnabled(lv_stateLabel, PlayerGroupAll(), true);
                    TextExpressionSetToken("Param/Expression/lib_SwaC_28841700", "A", IntToText(libSwaC_gf_MissionStatusAge(lv_indexMission, libSwaC_ge_MissionStatus_Available)));
                    libNtve_gf_SetDialogItemText(lv_stateLabel, TextExpressionAssemble("Param/Expression/lib_SwaC_28841700"), PlayerGroupAll());
                    libNtve_gf_SetDialogItemText(lv_button, libSwaC_gf_ZS_DebugProgressMapName(lv_indexMission), PlayerGroupAll());
                    TextExpressionSetToken("Param/Expression/lib_SwaC_F2936AC6", "A", lv_techText);
                    libNtve_gf_SetDialogItemText(lv_techLabel, TextExpressionAssemble("Param/Expression/lib_SwaC_F2936AC6"), PlayerGroupAll());
                    TextExpressionSetToken("Param/Expression/lib_SwaC_B0A2CA19", "A", lv_bonusText);
                    libNtve_gf_SetDialogItemText(lv_bonusLabel, TextExpressionAssemble("Param/Expression/lib_SwaC_B0A2CA19"), PlayerGroupAll());
                }
                else if (autoC43AB485_val == libSwaC_ge_MissionStatus_Completed) {
                    DialogControlSetVisible(lv_button2, PlayerGroupAll(), false);
                    DialogControlSetVisible(lv_button3, PlayerGroupAll(), false);
                    DialogControlSetEnabled(lv_button, PlayerGroupAll(), false);
                    DialogControlSetEnabled(lv_stateLabel, PlayerGroupAll(), false);
                    TextExpressionSetToken("Param/Expression/lib_SwaC_3690A8D6", "A", IntToText(libSwaC_gf_MissionStatusAge(lv_indexMission, libSwaC_ge_MissionStatus_Completed)));
                    libNtve_gf_SetDialogItemText(lv_stateLabel, TextExpressionAssemble("Param/Expression/lib_SwaC_3690A8D6"), PlayerGroupAll());
                    TextExpressionSetToken("Param/Expression/lib_SwaC_6C8F0657", "A", libSwaC_gf_ZS_DebugProgressMapName(lv_indexMission));
                    libNtve_gf_SetDialogItemText(lv_button, TextExpressionAssemble("Param/Expression/lib_SwaC_6C8F0657"), PlayerGroupAll());
                    TextExpressionSetToken("Param/Expression/lib_SwaC_3B15960D", "A", lv_techText);
                    libNtve_gf_SetDialogItemText(lv_techLabel, TextExpressionAssemble("Param/Expression/lib_SwaC_3B15960D"), PlayerGroupAll());
                    TextExpressionSetToken("Param/Expression/lib_SwaC_65A78810", "A", lv_bonusText);
                    libNtve_gf_SetDialogItemText(lv_bonusLabel, TextExpressionAssemble("Param/Expression/lib_SwaC_65A78810"), PlayerGroupAll());
                }
                else {
                }
            }

        }
        auto60A3D90D_ai = auto60A3D90D_ai + 1;
    }
    TextExpressionSetToken("Param/Expression/lib_SwaC_32C4B390", "A", IntToText(libSwaC_gf_NumberOfMissions(libSwaC_ge_MissionCountOptions_Completed)));
    TextExpressionSetToken("Param/Expression/lib_SwaC_32C4B390", "B", IntToText(libSwaC_gf_NumberOfMissions(libSwaC_ge_MissionCountOptions_All)));
    TextExpressionSetToken("Param/Expression/lib_SwaC_32C4B390", "C", IntToText(libSwaC_gf_NumberOfMissionArcsCompleted()));
    libNtve_gf_SetDialogItemText(libSwaC_gv_zS_DebugProgressLabelInfo, TextExpressionAssemble("Param/Expression/lib_SwaC_32C4B390"), PlayerGroupAll());
    libSwaC_gf_ZS_DebugProgressUpdateRequirementLabel(libSwaC_gv_zS_DebugProgressLabelExpeditionReq, libSwaC_gf_MissionStatus("ZExpedition1"));
    libSwaC_gf_ZS_DebugProgressUpdateRequirementLabel(libSwaC_gv_zS_DebugProgressLabelCharReq, libSwaC_gf_MissionStatus("ZChar1"));
    libSwaC_gf_ZS_DebugProgressUpdateRequirementLabel(libSwaC_gv_zS_DebugProgressLabelHybridReq, libSwaC_gf_MissionStatus("ZHybrid1"));
    libSwaC_gf_ZS_DebugProgressUpdateRequirementLabel(libSwaC_gv_zS_DebugProgressLabelZerusReq, libSwaC_gf_MissionStatus("ZZerus1"));
    libSwaC_gf_ZS_DebugProgressUpdateRequirementLabel(libSwaC_gv_zS_DebugProgressLabelValerianReq, libSwaC_gf_MissionStatus("ZSpace1"));
    libSwaC_gf_ZS_DebugProgressUpdateRequirementLabel(libSwaC_gv_zS_DebugProgressLabelKohalReq, libSwaC_gf_MissionStatus("ZKorhal1"));
    auto55A8D336_ae = CatalogEntryCount(c_gameCatalogLocation);
    auto55A8D336_ai = 1;
    while (auto55A8D336_ai <= auto55A8D336_ae) {
        lv_indexPlanet = CatalogEntryGet(c_gameCatalogLocation, auto55A8D336_ai);
        if ((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true) && (lv_indexPlanet != "DominionLab")) {
            if ((libSwaC_gf_StoryPlanetIsAvailable(lv_indexPlanet) == true) && (libSwaC_gf_StoryMapPlanet(libSwaC_gv_zS_DebugProgressLastMission) != lv_indexPlanet) && (libSwaC_gf_StoryMapPlanet(libSwaC_gv_zS_CurrentMap) != lv_indexPlanet)) {
                DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, libSwaC_gf_ZS_DebugProgressDataTableID("PlanetButton", (lv_indexPlanet))), PlayerGroupAll(), true);
                DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, libSwaC_gf_ZS_DebugProgressDataTableID("PlanetImage", (lv_indexPlanet))), PlayerGroupAll(), true);
            }
            else {
                DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, libSwaC_gf_ZS_DebugProgressDataTableID("PlanetButton", (lv_indexPlanet))), PlayerGroupAll(), false);
                DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, libSwaC_gf_ZS_DebugProgressDataTableID("PlanetImage", (lv_indexPlanet))), PlayerGroupAll(), false);
            }
        }

        auto55A8D336_ai = auto55A8D336_ai + 1;
    }
}

void libSwaC_gf_ZS_DebugProgressUpdateRequirementLabel (int lp_label, int lp_status) {
    // Automatic Variable Declarations
    int auto7AC3A74C_val;

    // Implementation
    if ((lp_label != c_invalidDialogControlId)) {
        auto7AC3A74C_val = lp_status;
        if (auto7AC3A74C_val == libSwaC_ge_MissionStatus_Locked) {
            libNtve_gf_SetDialogItemColor(lp_label, Color(100.00, 0.00, 0.00), PlayerGroupAll());
        }
        else if (auto7AC3A74C_val == libSwaC_ge_MissionStatus_Completed) {
            libNtve_gf_SetDialogItemColor(lp_label, Color(149*100/255,150*100/255,151*100/255), PlayerGroupAll());
        }
        else if (auto7AC3A74C_val == libSwaC_ge_MissionStatus_Available) {
            libNtve_gf_SetDialogItemColor(lp_label, Color(19.61, 100.00, 19.61), PlayerGroupAll());
        }
        else {
        }
    }

}

void libSwaC_gf_ZS_DebugProgressCloseDialog () {
    // Automatic Variable Declarations
    // Implementation
    if ((libSwaC_gv_zS_DebugProgressDialog == c_invalidDialogId)) {
        return ;
    }

    libSwaC_gv_zS_DebugSuppressKerriganAchievements = false;
    libSwaC_gv_zS_DebugProgressReleaseMode = false;
    DialogDestroy(libSwaC_gv_zS_DebugProgressDialog);
    libSwaC_gv_zS_DebugProgressDialog = c_invalidDialogId;
    UISetWorldVisible(PlayerGroupAll(), true);
    libNtve_gf_HideGameUI(true, PlayerGroupAll());
    UISetCursorVisible(PlayerGroupAll(), false);
}

text libSwaC_gf_ZS_DebugProgressMapName (string lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    if ((libSwaC_gv_zS_DebugProgressReleaseMode == true)) {
        return libSwaC_gf_StoryMapName(lp_mission);
    }

    return StringToText(libSwaC_gf_StoryMapFile(lp_mission));
}

void libSwaC_gf_ZS_DebugProgressDisplayDialog (string lp_currentMission, trigger lp_oKCallback, trigger lp_cancelCallback) {
    // Automatic Variable Declarations
    // Implementation
    if ((libSwaC_gv_zS_DebugProgressDialog != c_invalidDialogId)) {
        return ;
    }

    libSwaC_gv_zS_DebugProgressActive = true;
    libSwaC_gv_zS_DebugSuppressKerriganAchievements = true;
    if ((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == false)) {
        libSwaC_gv_zS_DebugProgressReleaseMode = true;
    }

    libSwaC_gf_DispatchStoryEvent(libSwaC_ge_ZS_Event_ProgressCheatStart, "", "", false);
    UISetWorldVisible(PlayerGroupAll(), false);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    UISetCursorVisible(PlayerGroupAll(), true);
    libSwaC_gf_ShowHideWorldCover(true, 0);
    libSwaC_gv_zS_DebugProgressExitCallbackOK = lp_oKCallback;
    libSwaC_gv_zS_DebugProgressExitCallbackCancel = lp_cancelCallback;
    libSwaC_gv_zS_DebugProgressLastMission = libSwaC_gf_LastSuccessfulMission();
    libSwaC_gv_zS_DebugProgressLastCreditMission = null;
    libSwaC_gv_zS_DebugProgressCurrentMapBak = libSwaC_gf_CurrentMap();
    if ((libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindStory) == true)) {
        libSwaC_gv_zS_DebugProgressLastStoryMap = libSwaC_gv_zS_CurrentMap;
        libSwaC_gv_zS_DebugProgressLastTravel = libSwaC_gf_StoryMapPlanet(libSwaC_gf_CurrentMap());
    }

    libSwaC_gf_ZS_DebugProgressSaveStats();
    libSwaC_gf_ZS_DebugProgressCreateDialog();
    libSwaC_gf_ZS_DebugProgressUpdateDialog();
    DialogSetVisible(libSwaC_gv_zS_DebugProgressDialog, PlayerGroupAll(), true);
    TriggerEnable(libSwaC_gt_ZS_DebugProgressMissionButtonClicked, true);
    TriggerEnable(libSwaC_gt_ZS_DebugProgressLaunchMission, true);
    TriggerEnable(libSwaC_gt_ZS_DebugProgressTravel, true);
    TriggerEnable(libSwaC_gt_ZS_DebugProgressOK, true);
    TriggerEnable(libSwaC_gt_ZS_DebugProgressCancel, true);
    TriggerEnable(libSwaC_gt_ZS_DebugProgressReset, true);
    while (!((libSwaC_gv_zS_DebugProgressDialog == c_invalidDialogId))) {
        Wait(0.25, c_timeReal);
    }
    TriggerEnable(libSwaC_gt_ZS_DebugProgressMissionButtonClicked, false);
    TriggerEnable(libSwaC_gt_ZS_DebugProgressLaunchMission, false);
    TriggerEnable(libSwaC_gt_ZS_DebugProgressTravel, false);
    TriggerEnable(libSwaC_gt_ZS_DebugProgressOK, false);
    TriggerEnable(libSwaC_gt_ZS_DebugProgressCancel, false);
    TriggerEnable(libSwaC_gt_ZS_DebugProgressReset, false);
    libSwaC_gf_ShowHideWorldCover(false, 0);
}

void libSwaC_gf_ZS_DebugProgressSaveStats () {
    // Automatic Variable Declarations
    // Implementation
    BankLoad("ZDebugProgress", 1);
    libSwaC_gv_zS_DebugProgressBank = BankLastCreated();
    libSwaC_gf_ZS_SaveTransitionVars(BankLastCreated(), null, libSwaC_gv_zSX_IsSimulation, libSwaC_gv_zSX_IsVictoryPlayAgain, false, false, false);
    libSwaC_gf_DispatchStoryEvent(libSwaC_ge_ZS_Event_ProgressCheatSave, "ZDebugProgress", "", false);
}

void libSwaC_gf_ZS_DebugProgressRestoreStats () {
    // Variable Declarations
    string lv_indexMission;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libSwaC_gv_zS_DebugProgressBank == null)) {
        return ;
    }

    libSwaC_gf_ZS_LoadTransitionVars(libSwaC_gv_zS_DebugProgressBank, null);
    libSwaC_gf_DispatchStoryEvent(libSwaC_ge_ZS_Event_ProgressCheatLoad, "ZDebugProgress", "", true);
    libSwaC_gf_SetCurrentMap("ZStoryLab");
    libSwaC_gf_ZS_UpdateKerriganType();
    libSwaC_gf_ZS_RecalculateKerriganXP();
    BankRemove(libSwaC_gv_zS_DebugProgressBank);
    libSwaC_gv_zS_DebugProgressBank = null;
}

void libSwaC_gf_ZS_DebugStoryTechCreateDialog () {
    // Variable Declarations
    int lv_dlgBg;
    int lv_lastItem;
    int lv_frame;
    int lv_x;
    int lv_y;
    int lv_index;
    string lv_indexArmyCategory;
    string lv_indexArmyUnit;
    int lv_unitIndex;
    string lv_indexMission;

    // Automatic Variable Declarations
    int auto085E4190_ae;
    int auto085E4190_ai;
    int auto99C929BA_ae;
    int auto99C929BA_ai;

    // Variable Initialization
    lv_dlgBg = c_invalidDialogControlId;
    lv_lastItem = c_invalidDialogControlId;
    lv_frame = c_invalidDialogControlId;

    // Implementation
    if ((libSwaC_gv_zS_DebugStoryTechDialog != c_invalidDialogId)) {
        return ;
    }

    DialogCreate(1200, 1000, c_anchorCenter, 0, 0, true);
    libSwaC_gv_zS_DebugStoryTechDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (DialogGetWidth(DialogLastCreated()) - 60), (DialogGetHeight(DialogLastCreated()) - 60), c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    lv_dlgBg = DialogControlLastCreated();
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0,0,0), PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
    lv_y = 50;
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 1000, 50, c_anchorTopLeft, 50, lv_y, StringExternal("Param/Value/lib_SwaC_8E8D3119"), Color(100.00, 50.20, 25.10), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize24", PlayerGroupAll());
    lv_y += 50;
    libSwaC_gv_zS_DebugStoryTechArmyCatCount = 0;
    auto085E4190_ae = UserDataInstanceCount("Maps");
    auto085E4190_ai = 1;
    while (auto085E4190_ai <= auto085E4190_ae) {
        lv_indexMission = libSwaC_gf_ZS_MapDataFromUserDataInstance(UserDataInstance("Maps", auto085E4190_ai));
        if (lv_indexMission != null && CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            lv_indexArmyCategory = libSwaC_gf_MissionArmyCategoryUnlocked(lv_indexMission);
            if ((lv_indexArmyCategory != null) && (libSwaC_gf_ZS_StoryArmyCategoryUsedInUI(lv_indexArmyCategory) == true) && (libSwaC_gf_ZS_DebugStoryTechIsDupe(lv_indexMission, lv_indexArmyCategory) == false)) {
                libSwaC_gv_zS_DebugStoryTechArmyCatCount += 1;
                libSwaC_gv_zS_DebugStoryTechArmyCategory[libSwaC_gv_zS_DebugStoryTechArmyCatCount] = lv_indexArmyCategory;
                if ((ModI(libSwaC_gv_zS_DebugStoryTechArmyCatCount, 2) == 1)) {
                    lv_x = 50;
                }
                else {
                    lv_x += 180;
                }
                libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 500, 90, c_anchorTopLeft, lv_x, lv_y, StringToText(""), "Assets\\Textures\\ui_research_frame_tooltip_zerg.dds", c_triggerImageTypeHorizontalBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
                lv_frame = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 50, c_anchorTopLeft, lv_x, lv_y, libSwaC_gf_StoryArmyCategoryName(lv_indexArmyCategory), Color(100.00, 100.00, 100.00), false, 2.0);
                libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16", PlayerGroupAll());
                lv_lastItem = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, 0, lv_y, StringToText(""), true);
                libSwaC_gv_zS_DebugStoryTechArmyCategoryCheck[libSwaC_gv_zS_DebugStoryTechArmyCatCount] = DialogControlLastCreated();
                DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, lv_lastItem, c_anchorBottom, 0, -20);
                lv_x += 120;
                lv_unitIndex = 1;
                auto99C929BA_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexArmyCategory, "ArmyUnitArray", 1);
                auto99C929BA_ai = 1;
                while (auto99C929BA_ai <= auto99C929BA_ae) {
                    lv_indexArmyUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexArmyCategory, "ArmyUnitArray["+IntToString(auto99C929BA_ai-1)+"]", 1);
                    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 50, c_anchorTopLeft, lv_x, lv_y, libSwaC_gf_StoryArmyUnitName(lv_indexArmyUnit), Color(100.00, 100.00, 100.00), false, 2.0);
                    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16", PlayerGroupAll());
                    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), libSwaC_gf_ZS_ArmyUnitDescription(lv_indexArmyUnit), PlayerGroupAll());
                    lv_lastItem = DialogControlLastCreated();
                    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, 0, lv_y, StringToText(""), true);
                    libSwaC_gv_zS_DebugStoryTechArmyUnitCheck[libSwaC_gv_zS_DebugStoryTechArmyCatCount][lv_unitIndex] = DialogControlLastCreated();
                    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, lv_lastItem, c_anchorBottom, 0, -20);
                    lv_x += 120;
                    lv_unitIndex += 1;
                    auto99C929BA_ai = auto99C929BA_ai + 1;
                }
                libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 120, 50, c_anchorTopLeft, 0, 0, StringToText(""), StringExternal("Param/Value/lib_SwaC_FD82C21A"), "");
                libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16", PlayerGroupAll());
                libSwaC_gv_zS_DebugStoryTechArmyUpgradeButtons[libSwaC_gv_zS_DebugStoryTechArmyCatCount] = DialogControlLastCreated();
                DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorRight, lv_frame, c_anchorRight, -10, 0);
                libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_SwaC_733B0CFC"), PlayerGroupAll());
                lv_x += (150 * (3 - lv_unitIndex));
                if ((ModI(libSwaC_gv_zS_DebugStoryTechArmyCatCount, 2) == 0)) {
                    lv_y += 100;
                }

            }

        }
        auto085E4190_ai = auto085E4190_ai + 1;
    }
    lv_indexArmyCategory = "Aberration";
    libSwaC_gv_zS_DebugStoryTechArmyCatCount += 1;
    if ((ModI(libSwaC_gv_zS_DebugStoryTechArmyCatCount, 2) == 1)) {
        lv_x = 50;
    }
    else {
        lv_x += 180;
    }
    libSwaC_gv_zS_DebugStoryTechArmyCategory[libSwaC_gv_zS_DebugStoryTechArmyCatCount] = lv_indexArmyCategory;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 150, 90, c_anchorTopLeft, lv_x, lv_y, StringToText(""), "Assets\\Textures\\ui_research_frame_tooltip_zerg.dds", c_triggerImageTypeHorizontalBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
    lv_frame = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 50, c_anchorTopLeft, lv_x, lv_y, libSwaC_gf_StoryArmyCategoryName(lv_indexArmyCategory), Color(100.00, 100.00, 100.00), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16", PlayerGroupAll());
    lv_lastItem = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, 0, lv_y, StringToText(""), true);
    libSwaC_gv_zS_DebugStoryTechArmyCategoryCheck[libSwaC_gv_zS_DebugStoryTechArmyCatCount] = DialogControlLastCreated();
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, lv_lastItem, c_anchorBottom, 0, -20);
    lv_x += 180;
    lv_indexArmyCategory = "Infestor";
    libSwaC_gv_zS_DebugStoryTechArmyCatCount += 1;
    libSwaC_gv_zS_DebugStoryTechArmyCategory[libSwaC_gv_zS_DebugStoryTechArmyCatCount] = lv_indexArmyCategory;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 150, 90, c_anchorTopLeft, lv_x, lv_y, StringToText(""), "Assets\\Textures\\ui_research_frame_tooltip_zerg.dds", c_triggerImageTypeHorizontalBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
    lv_frame = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 50, c_anchorTopLeft, lv_x, lv_y, libSwaC_gf_StoryArmyCategoryName(lv_indexArmyCategory), Color(100.00, 100.00, 100.00), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16", PlayerGroupAll());
    lv_lastItem = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, 0, lv_y, StringToText(""), true);
    libSwaC_gv_zS_DebugStoryTechArmyCategoryCheck[libSwaC_gv_zS_DebugStoryTechArmyCatCount] = DialogControlLastCreated();
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, lv_lastItem, c_anchorBottom, 0, -20);
    lv_x += 120;
    lv_y += 100;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 150, 50, c_anchorBottomRight, 200, 50, StringToText(""), StringExternal("Param/Value/lib_SwaC_53E5CB52"), "");
    libSwaC_gv_zS_DebugStoryTechOK = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 150, 50, c_anchorBottomRight, 50, 50, StringToText(""), StringExternal("Param/Value/lib_SwaC_C65D7C52"), "");
    libSwaC_gv_zS_DebugStoryTechCancel = DialogControlLastCreated();
    DialogSetSize(DialogLastCreated(), 1150, (lv_y + 150));
    DialogControlSetSize(lv_dlgBg, PlayerGroupAll(), (DialogGetWidth(libSwaC_gv_zS_DebugStoryTechDialog) - 60), (DialogGetHeight(libSwaC_gv_zS_DebugStoryTechDialog) - 60));
}

void libSwaC_gf_ZS_DebugStoryTechUpdateDialog () {
    // Variable Declarations
    string lv_indexCategory;
    int lv_categoryIndex;

    // Automatic Variable Declarations
    int auto3D08B59C_ae;
    const int auto3D08B59C_ai = 1;

    // Variable Initialization

    // Implementation
    auto3D08B59C_ae = libSwaC_gv_zS_DebugStoryTechArmyCatCount;
    lv_categoryIndex = 1;
    for ( ; ( (auto3D08B59C_ai >= 0 && lv_categoryIndex <= auto3D08B59C_ae) || (auto3D08B59C_ai < 0 && lv_categoryIndex >= auto3D08B59C_ae) ) ; lv_categoryIndex += auto3D08B59C_ai ) {
        lv_indexCategory = libSwaC_gv_zS_DebugStoryTechArmyCategory[lv_categoryIndex];
        if ((libSwaC_gf_StoryArmyCategoryStateCheck(lv_indexCategory, c_armyCategoryStateUnlocked) == true)) {
            if ((libSwaC_gf_ZS_StoryArmyUnitState(libSwaC_gf_StoryArmyUnitInCategory(lv_indexCategory, 1)) == c_armyUnitStatePurchased)) {
                libNtve_gf_SetDialogItemChecked(libSwaC_gv_zS_DebugStoryTechArmyCategoryCheck[lv_categoryIndex], false, PlayerGroupAll());
                libNtve_gf_SetDialogItemChecked(libSwaC_gv_zS_DebugStoryTechArmyUnitCheck[lv_categoryIndex][1], true, PlayerGroupAll());
                libNtve_gf_SetDialogItemChecked(libSwaC_gv_zS_DebugStoryTechArmyUnitCheck[lv_categoryIndex][2], false, PlayerGroupAll());
            }
            else if ((libSwaC_gf_ZS_StoryArmyUnitState(libSwaC_gf_StoryArmyUnitInCategory(lv_indexCategory, 2)) == c_armyUnitStatePurchased)) {
                libNtve_gf_SetDialogItemChecked(libSwaC_gv_zS_DebugStoryTechArmyCategoryCheck[lv_categoryIndex], false, PlayerGroupAll());
                libNtve_gf_SetDialogItemChecked(libSwaC_gv_zS_DebugStoryTechArmyUnitCheck[lv_categoryIndex][1], false, PlayerGroupAll());
                libNtve_gf_SetDialogItemChecked(libSwaC_gv_zS_DebugStoryTechArmyUnitCheck[lv_categoryIndex][2], true, PlayerGroupAll());
            }
            else if (true) {
                libNtve_gf_SetDialogItemChecked(libSwaC_gv_zS_DebugStoryTechArmyCategoryCheck[lv_categoryIndex], true, PlayerGroupAll());
                libNtve_gf_SetDialogItemChecked(libSwaC_gv_zS_DebugStoryTechArmyUnitCheck[lv_categoryIndex][1], false, PlayerGroupAll());
                libNtve_gf_SetDialogItemChecked(libSwaC_gv_zS_DebugStoryTechArmyUnitCheck[lv_categoryIndex][2], false, PlayerGroupAll());
            }
            DialogControlSetEnabled(libSwaC_gv_zS_DebugStoryTechArmyUpgradeButtons[lv_categoryIndex], PlayerGroupAll(), true);
        }
        else {
            libNtve_gf_SetDialogItemChecked(libSwaC_gv_zS_DebugStoryTechArmyCategoryCheck[lv_categoryIndex], false, PlayerGroupAll());
            libNtve_gf_SetDialogItemChecked(libSwaC_gv_zS_DebugStoryTechArmyUnitCheck[lv_categoryIndex][1], false, PlayerGroupAll());
            libNtve_gf_SetDialogItemChecked(libSwaC_gv_zS_DebugStoryTechArmyUnitCheck[lv_categoryIndex][2], false, PlayerGroupAll());
            DialogControlSetEnabled(libSwaC_gv_zS_DebugStoryTechArmyUpgradeButtons[lv_categoryIndex], PlayerGroupAll(), false);
        }
    }
}

void libSwaC_gf_ZS_DebugStoryTechUpdateData () {
    // Variable Declarations
    string lv_indexCategory;
    int lv_categoryIndex;

    // Automatic Variable Declarations
    int autoB5CEE957_ae;
    const int autoB5CEE957_ai = 1;

    // Variable Initialization

    // Implementation
    autoB5CEE957_ae = libSwaC_gv_zS_DebugStoryTechArmyCatCount;
    lv_categoryIndex = 1;
    for ( ; ( (autoB5CEE957_ai >= 0 && lv_categoryIndex <= autoB5CEE957_ae) || (autoB5CEE957_ai < 0 && lv_categoryIndex >= autoB5CEE957_ae) ) ; lv_categoryIndex += autoB5CEE957_ai ) {
        lv_indexCategory = libSwaC_gv_zS_DebugStoryTechArmyCategory[lv_categoryIndex];
        if ((libNtve_gf_DialogItemIsChecked(libSwaC_gv_zS_DebugStoryTechArmyCategoryCheck[lv_categoryIndex], 1) == true)) {
            libSwaC_gf_ZS_SetArmyCategoryState(lv_indexCategory, c_armyCategoryStateUnlocked);
            if (((libSwaC_gf_MissionStatusCheck(libSwaC_gf_StoryArmyCategoryEvolutionMission(lv_indexCategory), libSwaC_ge_MissionStatus_Locked) == false))) {
                libSwaC_gf_ZS_SetArmyUnitState(libSwaC_gf_StoryArmyUnitInCategory(lv_indexCategory, 1), c_armyUnitStateUnlocked);
                libSwaC_gf_ZS_SetArmyUnitState(libSwaC_gf_StoryArmyUnitInCategory(lv_indexCategory, 2), c_armyUnitStateUnlocked);
                libSwaC_gf_ZS_MarkMissionAsStatus(libSwaC_gf_StoryArmyCategoryEvolutionMission(lv_indexCategory), libSwaC_ge_MissionStatus_Available);
            }
            else {
                libSwaC_gf_ZS_SetArmyUnitState(libSwaC_gf_StoryArmyUnitInCategory(lv_indexCategory, 1), c_armyUnitStateLocked);
                libSwaC_gf_ZS_SetArmyUnitState(libSwaC_gf_StoryArmyUnitInCategory(lv_indexCategory, 2), c_armyUnitStateLocked);
            }
        }
        else if ((libNtve_gf_DialogItemIsChecked(libSwaC_gv_zS_DebugStoryTechArmyUnitCheck[lv_categoryIndex][1], 1) == true)) {
            libSwaC_gf_ZS_SetArmyCategoryState(lv_indexCategory, c_armyCategoryStateUnlocked);
            libSwaC_gf_ZS_SetArmyUnitState(libSwaC_gf_StoryArmyUnitInCategory(lv_indexCategory, 1), c_armyUnitStatePurchased);
            libSwaC_gf_ZS_SetArmyUnitState(libSwaC_gf_StoryArmyUnitInCategory(lv_indexCategory, 2), c_armyUnitStateLocked);
            libSwaC_gf_ZS_CompleteMission(libSwaC_gf_StoryArmyCategoryEvolutionMission(lv_indexCategory));
        }
        else if ((libNtve_gf_DialogItemIsChecked(libSwaC_gv_zS_DebugStoryTechArmyUnitCheck[lv_categoryIndex][2], 1) == true)) {
            libSwaC_gf_ZS_SetArmyCategoryState(lv_indexCategory, c_armyCategoryStateUnlocked);
            libSwaC_gf_ZS_SetArmyUnitState(libSwaC_gf_StoryArmyUnitInCategory(lv_indexCategory, 1), c_armyUnitStateLocked);
            libSwaC_gf_ZS_SetArmyUnitState(libSwaC_gf_StoryArmyUnitInCategory(lv_indexCategory, 2), c_armyUnitStatePurchased);
            libSwaC_gf_ZS_CompleteMission(libSwaC_gf_StoryArmyCategoryEvolutionMission(lv_indexCategory));
        }
        else if (true) {
            libSwaC_gf_ZS_MarkMissionAsStatus(libSwaC_gf_StoryArmyCategoryEvolutionMission(lv_indexCategory), libSwaC_ge_MissionStatus_Locked);
            libSwaC_gf_ZS_SetArmyCategoryState(lv_indexCategory, c_armyCategoryStateLocked);
            libSwaC_gf_ZS_SetArmyUnitState(libSwaC_gf_StoryArmyUnitInCategory(lv_indexCategory, 1), c_armyUnitStateLocked);
            libSwaC_gf_ZS_SetArmyUnitState(libSwaC_gf_StoryArmyUnitInCategory(lv_indexCategory, 2), c_armyUnitStateLocked);
        }
    }
}

void libSwaC_gf_ZS_DebugStoryTechCloseDialog () {
    // Automatic Variable Declarations
    // Implementation
    if ((libSwaC_gv_zS_DebugStoryTechDialog == c_invalidDialogId)) {
        return ;
    }

    DialogDestroy(libSwaC_gv_zS_DebugStoryTechDialog);
    libSwaC_gv_zS_DebugStoryTechDialog = c_invalidDialogId;
    UISetWorldVisible(PlayerGroupAll(), true);
    libNtve_gf_HideGameUI(true, PlayerGroupAll());
    UISetCursorVisible(PlayerGroupAll(), false);
}

void libSwaC_gf_ZS_DebugStoryTechDisplayDialog () {
    // Automatic Variable Declarations
    // Implementation
    if ((libSwaC_gv_zS_DebugStoryTechDialog != c_invalidDialogId)) {
        return ;
    }

    UISetWorldVisible(PlayerGroupAll(), false);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    UISetCursorVisible(PlayerGroupAll(), true);
    libSwaC_gf_ShowHideWorldCover(true, 0);
    libSwaC_gf_ZS_DebugStoryTechStoreStates();
    libSwaC_gf_ZS_DebugStoryTechCreateDialog();
    libSwaC_gf_ZS_DebugStoryTechUpdateDialog();
    DialogSetVisible(libSwaC_gv_zS_DebugStoryTechDialog, PlayerGroupAll(), true);
    TriggerEnable(libSwaC_gt_ZS_DebugStoryTechOK, true);
    TriggerEnable(libSwaC_gt_ZS_DebugStoryTechCancel, true);
    TriggerEnable(libSwaC_gt_ZS_DebugStoryTechArmyUnitClicked, true);
    TriggerEnable(libSwaC_gt_ZS_DebugStoryTechUpgradeButtonClicked, true);
    while (!((libSwaC_gv_zS_DebugStoryTechDialog == c_invalidDialogId))) {
        Wait(0.25, c_timeReal);
    }
    TriggerEnable(libSwaC_gt_ZS_DebugStoryTechOK, false);
    TriggerEnable(libSwaC_gt_ZS_DebugStoryTechCancel, false);
    TriggerEnable(libSwaC_gt_ZS_DebugStoryTechArmyUnitClicked, false);
    TriggerEnable(libSwaC_gt_ZS_DebugStoryTechUpgradeButtonClicked, false);
    libSwaC_gf_ShowHideWorldCover(false, 0);
}

void libSwaC_gf_ZS_DebugStoryTechStoreStates () {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexUpgrade;

    // Automatic Variable Declarations
    int auto02CA0A68_ae;
    int auto02CA0A68_ai;
    int auto0EA55526_ae;
    int auto0EA55526_ai;

    // Variable Initialization

    // Implementation
    auto02CA0A68_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto02CA0A68_ai = 1;
    while (auto02CA0A68_ai <= auto02CA0A68_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto02CA0A68_ai);
        if ((libSwaC_gf_ZS_StoryArmyCategoryUsedInUI(lv_indexCategory) == true)) {
            DataTableSetInt(true, ("DebugTechSaveArmyCategory_" + (lv_indexCategory)), (libSwaC_gf_ZS_StoryArmyCategoryState(lv_indexCategory)));
            auto0EA55526_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUpgradeArray", 1);
            auto0EA55526_ai = 1;
            while (auto0EA55526_ai <= auto0EA55526_ae) {
                lv_indexUpgrade = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUpgradeArray["+IntToString(auto0EA55526_ai-1)+"]", 1);
                DataTableSetInt(true, ("DebugTechSaveArmyUpgrade_" + (lv_indexUpgrade)), (libSwaC_gf_ZS_StoryArmyUpgradeState(lv_indexUpgrade)));
                auto0EA55526_ai = auto0EA55526_ai + 1;
            }
        }

        auto02CA0A68_ai = auto02CA0A68_ai + 1;
    }
}

void libSwaC_gf_ZS_DebugStoryTechRestoreStates () {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexUpgrade;
    int lv_stateValue;

    // Automatic Variable Declarations
    int auto954BDB68_ae;
    int auto954BDB68_ai;
    int auto1B460A35_val;
    int autoC92A3B8F_ae;
    int autoC92A3B8F_ai;
    int auto56292227_val;

    // Variable Initialization

    // Implementation
    auto954BDB68_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto954BDB68_ai = 1;
    while (auto954BDB68_ai <= auto954BDB68_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto954BDB68_ai);
        if ((libSwaC_gf_ZS_StoryArmyCategoryUsedInUI(lv_indexCategory) == true)) {
            lv_stateValue = DataTableGetInt(true, ("DebugTechSaveArmyCategory_" + (lv_indexCategory)));
            auto1B460A35_val = lv_stateValue;
            if (auto1B460A35_val == (c_armyCategoryStateLocked)) {
                libSwaC_gf_ZS_SetArmyCategoryState(lv_indexCategory, c_armyCategoryStateLocked);
            }
            else if (auto1B460A35_val == (c_armyCategoryStateUnlocked)) {
                libSwaC_gf_ZS_SetArmyCategoryState(lv_indexCategory, c_armyCategoryStateUnlocked);
            }
            else {
            }
            autoC92A3B8F_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUpgradeArray", 1);
            autoC92A3B8F_ai = 1;
            while (autoC92A3B8F_ai <= autoC92A3B8F_ae) {
                lv_indexUpgrade = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUpgradeArray["+IntToString(autoC92A3B8F_ai-1)+"]", 1);
                lv_stateValue = DataTableGetInt(true, ("DebugTechSaveArmyUpgrade_" + (lv_indexUpgrade)));
                auto56292227_val = lv_stateValue;
                if (auto56292227_val == (c_armyUpgradeStateLocked)) {
                    libSwaC_gf_ZS_SetArmyUpgradeStateCore(lv_indexUpgrade, c_armyUpgradeStateLocked);
                }
                else if (auto56292227_val == (c_armyUpgradeStatePurchased)) {
                    libSwaC_gf_ZS_SetArmyUpgradeStateCore(lv_indexUpgrade, c_armyUpgradeStatePurchased);
                }
                else if (auto56292227_val == (c_armyUpgradeStateUnlocked)) {
                    libSwaC_gf_ZS_SetArmyUpgradeStateCore(lv_indexUpgrade, c_armyUpgradeStateUnlocked);
                }
                else {
                }
                autoC92A3B8F_ai = autoC92A3B8F_ai + 1;
            }
        }

        auto954BDB68_ai = auto954BDB68_ai + 1;
    }
}

void libSwaC_gf_ZS_DebugStoryTechDisplayUpgradeDialog (string lp_armyCategory) {
    // Variable Declarations
    string lv_indexUpgrade;
    int lv_lastItem;
    int lv_index;
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    int auto03B8243D_ae;
    int auto03B8243D_ai;

    // Variable Initialization
    lv_lastItem = c_invalidDialogControlId;

    // Implementation
    TriggerEnable(libSwaC_gt_ZS_DebugStoryTechUpgradeOK, true);
    TriggerEnable(libSwaC_gt_ZS_DebugStoryTechUpgradeChecked, true);
    TriggerEnable(libSwaC_gt_ZS_DebugStoryTechUpgradeCancel, true);
    DialogSetVisible(libSwaC_gv_zS_DebugStoryTechDialog, PlayerGroupAll(), false);
    libSwaC_gv_zS_DebugStoryTechUpgradeCategory = lp_armyCategory;
    if ((libSwaC_gv_zS_DebugStoryTechUpgradeDialog != c_invalidDialogId)) {
        DialogDestroy(libSwaC_gv_zS_DebugStoryTechUpgradeDialog);
        libSwaC_gv_zS_DebugStoryTechUpgradeDialog = c_invalidDialogId;
    }

    DialogCreate(700, 400, c_anchorCenter, 0, 0, true);
    libSwaC_gv_zS_DebugStoryTechUpgradeDialog = DialogLastCreated();
    lv_y = 50;
    TextExpressionSetToken("Param/Expression/lib_SwaC_AEE6EDDE", "A", libSwaC_gf_StoryArmyCategoryName(lp_armyCategory));
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 600, 50, c_anchorTopLeft, 50, lv_y, TextExpressionAssemble("Param/Expression/lib_SwaC_AEE6EDDE"), Color(100.00, 50.20, 25.10), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize24", PlayerGroupAll());
    lv_y += 100;
    lv_x = 50;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 600, 100, c_anchorTopLeft, lv_x, (lv_y - 10), StringToText(""), "Assets\\Textures\\ui_research_frame_tooltip_zerg.dds", c_triggerImageTypeHorizontalBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
    lv_index = 0;
    auto03B8243D_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lp_armyCategory, "ArmyUpgradeArray", 1);
    auto03B8243D_ai = 1;
    while (auto03B8243D_ai <= auto03B8243D_ae) {
        lv_indexUpgrade = CatalogFieldValueGet(c_gameCatalogArmyCategory, lp_armyCategory, "ArmyUpgradeArray["+IntToString(auto03B8243D_ai-1)+"]", 1);
        lv_index += 1;
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 50, c_anchorTopLeft, lv_x, lv_y, libSwaC_gf_ZS_StoryArmyUpgradeName(lv_indexUpgrade), Color(100.00, 100.00, 100.00), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16", PlayerGroupAll());
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), libSwaC_gf_ZS_StoryArmyUpgradeTooltip(lv_indexUpgrade), PlayerGroupAll());
        lv_lastItem = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, 0, 0, StringToText(""), true);
        libSwaC_gv_zS_DebugStoryTechUpgradeDlgUpgrades[lv_index] = DialogControlLastCreated();
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, lv_lastItem, c_anchorBottom, 0, -20);
        if ((libSwaC_gf_ZS_StoryArmyUpgradeState(lv_indexUpgrade) == c_armyUpgradeStatePurchased)) {
            libNtve_gf_SetDialogItemChecked(DialogControlLastCreated(), true, PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemChecked(DialogControlLastCreated(), false, PlayerGroupAll());
        }
        lv_x += 200;
        auto03B8243D_ai = auto03B8243D_ai + 1;
    }
    lv_y += 100;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 150, 50, c_anchorBottomRight, 200, 50, StringToText(""), StringExternal("Param/Value/lib_SwaC_5F4EF89F"), "");
    libSwaC_gv_zS_DebugStoryTechUpgradeDlgOK = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 150, 50, c_anchorBottomRight, 50, 50, StringToText(""), StringExternal("Param/Value/lib_SwaC_38F91ABC"), "");
    libSwaC_gv_zS_DebugStoryTechUpgradeDlgCancel = DialogControlLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    while (!((libSwaC_gv_zS_DebugStoryTechUpgradeDialog == c_invalidDialogId))) {
        Wait(0.0625, c_timeReal);
    }
    TriggerEnable(libSwaC_gt_ZS_DebugStoryTechUpgradeOK, false);
    TriggerEnable(libSwaC_gt_ZS_DebugStoryTechUpgradeCancel, false);
    TriggerEnable(libSwaC_gt_ZS_DebugStoryTechUpgradeChecked, false);
    DialogSetVisible(libSwaC_gv_zS_DebugStoryTechDialog, PlayerGroupAll(), true);
}

bool libSwaC_gf_ZS_DebugStoryTechIsDupe (string lp_mission, string lp_category) {
    // Variable Declarations
    string lv_indexMission;

    // Automatic Variable Declarations
    int autoC9D55875_ae;
    int autoC9D55875_ai;

    // Variable Initialization

    // Implementation
    autoC9D55875_ae = UserDataInstanceCount("Maps");
    autoC9D55875_ai = 1;
    while (autoC9D55875_ai <= autoC9D55875_ae) {
        lv_indexMission = libSwaC_gf_ZS_MapDataFromUserDataInstance(UserDataInstance("Maps", autoC9D55875_ai));
        if (lv_indexMission != null && CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            if ((lv_indexMission == lp_mission)) {
                return false;
            }

            if ((libSwaC_gf_MissionArmyCategoryUnlocked(lv_indexMission) == lp_category)) {
                return true;
            }

        }
        autoC9D55875_ai = autoC9D55875_ai + 1;
    }
    return false;
}

void libSwaC_gf_SetTechRestrictionsCallback (trigger lp_callbackTrigger) {
    // Automatic Variable Declarations
    // Implementation
    libSwaC_gv_zS_TechLimitsCallback = lp_callbackTrigger;
}

void libSwaC_gf_PurchaseStorymodeTech () {
    // Variable Declarations
    string lv_indexMission;
    string lv_armyCategory;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((GameIsTransitionMap() == true)) {
        return ;
    }

    if ((libSwaC_gf_MissionStatusCheck(libSwaC_gf_CurrentMap(), libSwaC_ge_MissionStatus_Available) == false)) {
        libSwaC_gf_ZS_DefaultTechProgress(libSwaC_gf_CurrentMap());
        libSwaC_gf_ZS_ApplyKerriganZergColor();
    }

    TriggerExecute(libSwaC_gv_zS_TechLimitsCallback, true, false);
}

void libSwaC_gf_ZS_DefaultTechProgress (string lp_mission) {
    int init_i;

    // Variable Declarations
    string lv_currentMission;
    const int lv_c_ArcCount = 7;
    string[11][4] lv_arcMissions;
    int lv_indexArc;
    int lv_indexArcMission;
    int lv_currentArc;
    int[9] lv_shortestPath;
    string lv_indexMission;
    int lv_kerriganXP;
    string lv_indexArmyCategory;
    string lv_indexArmyUpgrade;

    // Automatic Variable Declarations
    int auto1B6B1E80_ae;
    const int auto1B6B1E80_ai = 1;
    const int auto75AE6C2E_ae = 3;
    const int auto75AE6C2E_ai = 1;
    int autoCB554932_val;
    const int auto3B47CFEC_ae = lv_c_ArcCount;
    const int auto3B47CFEC_ai = 1;
    const int auto9A408C75_ae = 3;
    const int auto9A408C75_ai = 1;
    const int auto1411DC69_ae = 3;
    const int auto1411DC69_ai = 1;
    int autoCF5F5E9A_ae;
    int autoCF5F5E9A_ai;
    int autoF256CD95_ae;
    int autoF256CD95_ai;
    int auto6D473D4D_ae;
    int auto6D473D4D_ai;

    // Variable Initialization
    lv_currentArc = libSwaC_ge_ZS_SwarmArc_SwarmArcNone;
    for (init_i = 0; init_i <= 8; init_i += 1) {
        lv_shortestPath[init_i] = libSwaC_ge_ZS_SwarmArc_SwarmArcNone;
    }

    // Implementation
    libSwaC_gv_zS_DebugSuppressKerriganAchievements = true;
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_SwaC_89840BA5"), false);
    if ((libSwaC_gf_StoryMapTypeCheck(lp_mission, c_mapKindUpgrade) == true)) {
        lv_currentMission = libSwaC_gf_ZS_ArmyUltraUpgradeRequiredMission(libSwaC_gf_MissionArmyEvolutionUnlocked(lp_mission));
    }
    else {
        lv_currentMission = lp_mission;
    }
    lv_arcMissions[(libSwaC_ge_ZS_SwarmArc_SwarmArcLab)][1] = "ZLab1";
    lv_arcMissions[(libSwaC_ge_ZS_SwarmArc_SwarmArcLab)][2] = "ZLab2";
    lv_arcMissions[(libSwaC_ge_ZS_SwarmArc_SwarmArcLab)][3] = "ZLab3";
    lv_arcMissions[(libSwaC_ge_ZS_SwarmArc_SwarmArcChar)][1] = "ZChar1";
    lv_arcMissions[(libSwaC_ge_ZS_SwarmArc_SwarmArcChar)][2] = "ZChar2";
    lv_arcMissions[(libSwaC_ge_ZS_SwarmArc_SwarmArcChar)][3] = "ZChar3";
    lv_arcMissions[(libSwaC_ge_ZS_SwarmArc_SwarmArcExpedition)][1] = "ZExpedition1";
    lv_arcMissions[(libSwaC_ge_ZS_SwarmArc_SwarmArcExpedition)][2] = "ZExpedition2";
    lv_arcMissions[(libSwaC_ge_ZS_SwarmArc_SwarmArcExpedition)][3] = "ZExpedition3";
    lv_arcMissions[(libSwaC_ge_ZS_SwarmArc_SwarmArcZerus)][1] = "ZZerus1";
    lv_arcMissions[(libSwaC_ge_ZS_SwarmArc_SwarmArcZerus)][2] = "ZZerus2";
    lv_arcMissions[(libSwaC_ge_ZS_SwarmArc_SwarmArcZerus)][3] = "ZZerus3";
    lv_arcMissions[(libSwaC_ge_ZS_SwarmArc_SwarmArcHybrid)][1] = "ZHybrid1";
    lv_arcMissions[(libSwaC_ge_ZS_SwarmArc_SwarmArcHybrid)][2] = "ZHybrid2";
    lv_arcMissions[(libSwaC_ge_ZS_SwarmArc_SwarmArcHybrid)][3] = "ZHybrid3";
    lv_arcMissions[(libSwaC_ge_ZS_SwarmArc_SwarmArcValerian)][1] = "ZSpace1";
    lv_arcMissions[(libSwaC_ge_ZS_SwarmArc_SwarmArcValerian)][2] = "ZSpace2";
    lv_arcMissions[(libSwaC_ge_ZS_SwarmArc_SwarmArcKorhal)][1] = "ZKorhal1";
    lv_arcMissions[(libSwaC_ge_ZS_SwarmArc_SwarmArcKorhal)][2] = "ZKorhal2";
    lv_arcMissions[(libSwaC_ge_ZS_SwarmArc_SwarmArcKorhal)][3] = "ZKorhal3";
    lv_currentArc = libSwaC_ge_ZS_SwarmArc_SwarmArcNone;
    auto1B6B1E80_ae = (libSwaC_ge_ZS_SwarmArc_SwarmArcKorhal);
    lv_indexArc = 1;
    for ( ; ( (auto1B6B1E80_ai >= 0 && lv_indexArc <= auto1B6B1E80_ae) || (auto1B6B1E80_ai < 0 && lv_indexArc >= auto1B6B1E80_ae) ) ; lv_indexArc += auto1B6B1E80_ai ) {
        lv_indexArcMission = 1;
        for ( ; ( (auto75AE6C2E_ai >= 0 && lv_indexArcMission <= auto75AE6C2E_ae) || (auto75AE6C2E_ai < 0 && lv_indexArcMission >= auto75AE6C2E_ae) ) ; lv_indexArcMission += auto75AE6C2E_ai ) {
            if ((lv_arcMissions[lv_indexArc][lv_indexArcMission] == lv_currentMission)) {
                lv_currentArc = lv_indexArc;
                break;
            }

        }
        if ((lv_currentArc != libSwaC_ge_ZS_SwarmArc_SwarmArcNone)) {
            break;
        }

    }
    TextExpressionSetToken("Param/Expression/lib_SwaC_2C66937A", "A", IntToText((lv_currentArc)));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_SwaC_2C66937A"), false);
    autoCB554932_val = lv_currentArc;
    if (autoCB554932_val == libSwaC_ge_ZS_SwarmArc_SwarmArcLab) {
    }
    else if (autoCB554932_val == libSwaC_ge_ZS_SwarmArc_SwarmArcExpedition) {
        lv_shortestPath[1] = libSwaC_ge_ZS_SwarmArc_SwarmArcLab;
    }
    else if (autoCB554932_val == libSwaC_ge_ZS_SwarmArc_SwarmArcChar) {
        lv_shortestPath[1] = libSwaC_ge_ZS_SwarmArc_SwarmArcLab;
    }
    else if (autoCB554932_val == libSwaC_ge_ZS_SwarmArc_SwarmArcZerus) {
        lv_shortestPath[1] = libSwaC_ge_ZS_SwarmArc_SwarmArcLab;
        lv_shortestPath[2] = libSwaC_ge_ZS_SwarmArc_SwarmArcChar;
    }
    else if (autoCB554932_val == libSwaC_ge_ZS_SwarmArc_SwarmArcHybrid) {
        lv_shortestPath[1] = libSwaC_ge_ZS_SwarmArc_SwarmArcLab;
        lv_shortestPath[2] = libSwaC_ge_ZS_SwarmArc_SwarmArcChar;
        lv_shortestPath[3] = libSwaC_ge_ZS_SwarmArc_SwarmArcExpedition;
        lv_shortestPath[4] = libSwaC_ge_ZS_SwarmArc_SwarmArcZerus;
    }
    else if (autoCB554932_val == libSwaC_ge_ZS_SwarmArc_SwarmArcValerian) {
        lv_shortestPath[1] = libSwaC_ge_ZS_SwarmArc_SwarmArcLab;
        lv_shortestPath[2] = libSwaC_ge_ZS_SwarmArc_SwarmArcChar;
        lv_shortestPath[3] = libSwaC_ge_ZS_SwarmArc_SwarmArcExpedition;
        lv_shortestPath[4] = libSwaC_ge_ZS_SwarmArc_SwarmArcZerus;
        lv_shortestPath[5] = libSwaC_ge_ZS_SwarmArc_SwarmArcHybrid;
    }
    else if (autoCB554932_val == libSwaC_ge_ZS_SwarmArc_SwarmArcKorhal) {
        lv_shortestPath[1] = libSwaC_ge_ZS_SwarmArc_SwarmArcLab;
        lv_shortestPath[2] = libSwaC_ge_ZS_SwarmArc_SwarmArcChar;
        lv_shortestPath[3] = libSwaC_ge_ZS_SwarmArc_SwarmArcExpedition;
        lv_shortestPath[4] = libSwaC_ge_ZS_SwarmArc_SwarmArcZerus;
        lv_shortestPath[5] = libSwaC_ge_ZS_SwarmArc_SwarmArcHybrid;
        lv_shortestPath[6] = libSwaC_ge_ZS_SwarmArc_SwarmArcValerian;
    }
    else {
    }
    BankDeleteCampaignBanks(1, 1);
    libSwaC_gv_zS_StoryBank = null;
    libSwaC_gv_zS_CampaignBank = null;
    libSwaC_gv_zS_ArmyTechBank = null;
    libSwaC_gf_ResetCampaignData();
    lv_indexArc = 1;
    for ( ; ( (auto3B47CFEC_ai >= 0 && lv_indexArc <= auto3B47CFEC_ae) || (auto3B47CFEC_ai < 0 && lv_indexArc >= auto3B47CFEC_ae) ) ; lv_indexArc += auto3B47CFEC_ai ) {
        if ((lv_shortestPath[lv_indexArc] != libSwaC_ge_ZS_SwarmArc_SwarmArcNone)) {
            lv_indexArcMission = 1;
            for ( ; ( (auto9A408C75_ai >= 0 && lv_indexArcMission <= auto9A408C75_ae) || (auto9A408C75_ai < 0 && lv_indexArcMission >= auto9A408C75_ae) ) ; lv_indexArcMission += auto9A408C75_ai ) {
                libSwaC_gf_ZS_CompleteMission(lv_arcMissions[(lv_shortestPath[lv_indexArc])][lv_indexArcMission]);
                libSwaC_gv_zSX_LastSuccessfulMission = lv_arcMissions[(lv_shortestPath[lv_indexArc])][lv_indexArcMission];
            }
        }

    }
    lv_indexArcMission = 1;
    for ( ; ( (auto1411DC69_ai >= 0 && lv_indexArcMission <= auto1411DC69_ae) || (auto1411DC69_ai < 0 && lv_indexArcMission >= auto1411DC69_ae) ) ; lv_indexArcMission += auto1411DC69_ai ) {
        if ((lv_arcMissions[(lv_currentArc)][lv_indexArcMission] == lv_currentMission)) {
            break;
        }

        libSwaC_gf_ZS_CompleteMission(lv_arcMissions[(lv_currentArc)][lv_indexArcMission]);
        libSwaC_gv_zSX_LastSuccessfulMission = lv_arcMissions[(lv_currentArc)][lv_indexArcMission];
    }
    if ((libSwaC_gf_StoryMapTypeCheck(lp_mission, c_mapKindUpgrade) == true)) {
        libSwaC_gf_ZS_CompleteMission(lv_currentMission);
    }

    libSwaC_gv_zSX_LastStoryMap = libSwaC_gf_StoryPlanetMap(libSwaC_gf_StoryMapPlanet(lv_currentMission));
    lv_kerriganXP = 0;
    autoCF5F5E9A_ae = CatalogEntryCount(c_gameCatalogMap);
    autoCF5F5E9A_ai = 1;
    while (autoCF5F5E9A_ai <= autoCF5F5E9A_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoCF5F5E9A_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            if ((libSwaC_gf_MissionStatusCheck(lv_indexMission, libSwaC_ge_MissionStatus_Completed) == true)) {
                lv_kerriganXP += libSwaC_gf_ZS_MissionKerriganXPRewarded(lv_indexMission, true);
            }

        }
        autoCF5F5E9A_ai = autoCF5F5E9A_ai + 1;
    }
    libSwaC_gf_ZS_UpdateKerriganType();
    autoF256CD95_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    autoF256CD95_ai = 1;
    while (autoF256CD95_ai <= autoF256CD95_ae) {
        lv_indexArmyCategory = CatalogEntryGet(c_gameCatalogArmyCategory, autoF256CD95_ai);
        if ((libSwaC_gf_StoryArmyCategoryStateCheck(lv_indexArmyCategory, c_armyCategoryStateUnlocked) == true)) {
            auto6D473D4D_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexArmyCategory, "ArmyUpgradeArray", 1);
            auto6D473D4D_ai = 1;
            while (auto6D473D4D_ai <= auto6D473D4D_ae) {
                lv_indexArmyUpgrade = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexArmyCategory, "ArmyUpgradeArray["+IntToString(auto6D473D4D_ai-1)+"]", 1);
                libSwaC_gf_ZS_SetArmyUpgradeState(lv_indexArmyUpgrade, c_armyUpgradeStatePurchased);
                break;
                auto6D473D4D_ai = auto6D473D4D_ai + 1;
            }
        }

        autoF256CD95_ai = autoF256CD95_ai + 1;
    }
    libSwaC_gf_ZS_SaveAllTransitionData(false, false, false);
    libSwaC_gf_ZS_SaveArmyTechBank(lp_mission, false);
    libSwaC_gf_ZS_ApplyTech(1);
    libSwaC_gv_zS_DebugSuppressKerriganAchievements = false;
}

void libSwaC_gf_DisplayCampaignProgressInfo (int lp_dialog) {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_SwaC_7B7CE540", "A", IntToText(libSwaC_gf_NumberOfMissions(libSwaC_ge_MissionCountOptions_Completed)));
    TextExpressionSetToken("Param/Expression/lib_SwaC_7B7CE540", "B", IntToText(libSwaC_gf_NumberOfMissions(libSwaC_ge_MissionCountOptions_All)));
    libNtve_gf_CreateDialogItemLabel(lp_dialog, 600, 400, c_anchorTopLeft, 25, 50, TextExpressionAssemble("Param/Expression/lib_SwaC_7B7CE540"), Color(100,100,100), false, 2.0);
    if ((lp_dialog == libSwaC_gv_zS_DebugProgressDialog)) {
        return ;
    }

    libSwaC_gv_zS_CampaignProgressButtonParent = lp_dialog;
    libNtve_gf_CreateDialogItemButton(lp_dialog, 200, 60, c_anchorTopLeft, 25, 100, StringToText(""), StringExternal("Param/Value/lib_SwaC_4D587262"), "");
    libSwaC_gv_zS_CampaignProgressButton = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(lp_dialog, 200, 60, c_anchorTopLeft, 25, 160, StringToText(""), StringExternal("Param/Value/lib_SwaC_B5464DFF"), "");
    libSwaC_gv_zS_CampaignProgressTechButton = DialogControlLastCreated();
}

int libSwaC_gf_ZS_DebugCutsceneFromName (string lp_name) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto52B38E14_ae = 5;
    const int auto52B38E14_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (auto52B38E14_ai >= 0 && lv_index <= auto52B38E14_ae) || (auto52B38E14_ai < 0 && lv_index >= auto52B38E14_ae) ) ; lv_index += auto52B38E14_ai ) {
        if ((libSwaC_gv_zS_DebugCutsceneNames[lv_index] == lp_name)) {
            return libSwaC_gv_zS_DebugCutscenes[lv_index];
        }

    }
    return c_cutsceneNone;
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: ZS_CinematicModeOn
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_CinematicModeOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto55108C9F_g;
    int auto55108C9F_var;
    string auto78D8CDE8_val;
    unitgroup autoC2540D22_g;
    int autoC2540D22_u;
    unit autoC2540D22_var;
    unitgroup auto16A106F9_g;
    int auto16A106F9_u;
    unit auto16A106F9_var;
    unitgroup autoDD293041_g;
    int autoDD293041_u;
    unit autoDD293041_var;
    unitgroup auto34A9E1DF_g;
    int auto34A9E1DF_u;
    unit auto34A9E1DF_var;
    unitgroup autoBF71249D_g;
    int autoBF71249D_u;
    unit autoBF71249D_var;
    unitgroup autoBBAB5C7E_g;
    int autoBBAB5C7E_u;
    unit autoBBAB5C7E_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto55108C9F_g = PlayerGroupAll();
    auto55108C9F_var = -1;
    while (true) {
        auto55108C9F_var = PlayerGroupNextPlayer(auto55108C9F_g, auto55108C9F_var);
        if (auto55108C9F_var < 0) { break; }
        PlayerScoreValueEnableAll(auto55108C9F_var, false);
    }
    libNtve_gf_SetUpgradeLevelForPlayer(1, "InCinematic", 1);
    TechTreeBehaviorAllow(1, "StukovArmorAura", false);
    TechTreeBehaviorAllow(1, "SwarmQueenRegenAura", false);
    auto78D8CDE8_val = libSwaC_gf_CurrentMap();
    if (auto78D8CDE8_val == "ZLab2") {
        autoC2540D22_g = UnitGroup("RaynorLab", c_playerAny, null, UnitFilter(0, 0, 0, 0), 0);
        autoC2540D22_u = UnitGroupCount(autoC2540D22_g, c_unitCountAll);
        for (;; autoC2540D22_u -= 1) {
            autoC2540D22_var = UnitGroupUnitFromEnd(autoC2540D22_g, autoC2540D22_u);
            if (autoC2540D22_var == null) { break; }
            libNtve_gf_SendActorMessageToUnit(autoC2540D22_var, "Signal RemoveGlow");
        }
        auto16A106F9_g = UnitGroup("KerriganGhostLab", c_playerAny, null, UnitFilter(0, 0, 0, 0), 0);
        auto16A106F9_u = UnitGroupCount(auto16A106F9_g, c_unitCountAll);
        for (;; auto16A106F9_u -= 1) {
            auto16A106F9_var = UnitGroupUnitFromEnd(auto16A106F9_g, auto16A106F9_u);
            if (auto16A106F9_var == null) { break; }
            libNtve_gf_SendActorMessageToUnit(auto16A106F9_var, "Signal RemoveGlow");
        }
    }
    else if (auto78D8CDE8_val == "ZLab3") {
        autoDD293041_g = UnitGroup("KerriganGhostLab", c_playerAny, null, UnitFilter(0, 0, 0, 0), 0);
        autoDD293041_u = UnitGroupCount(autoDD293041_g, c_unitCountAll);
        for (;; autoDD293041_u -= 1) {
            autoDD293041_var = UnitGroupUnitFromEnd(autoDD293041_g, autoDD293041_u);
            if (autoDD293041_var == null) { break; }
            libNtve_gf_SendActorMessageToUnit(autoDD293041_var, "Signal RemoveGlow");
        }
    }
    else if (auto78D8CDE8_val == "ZHybrid3") {
        auto34A9E1DF_g = UnitGroup("InfestedStukov", c_playerAny, null, UnitFilter(0, 0, 0, 0), 0);
        auto34A9E1DF_u = UnitGroupCount(auto34A9E1DF_g, c_unitCountAll);
        for (;; auto34A9E1DF_u -= 1) {
            auto34A9E1DF_var = UnitGroupUnitFromEnd(auto34A9E1DF_g, auto34A9E1DF_u);
            if (auto34A9E1DF_var == null) { break; }
            libNtve_gf_SendActorMessageToUnit(auto34A9E1DF_var, "Signal RemoveGlow");
        }
    }
    else if (auto78D8CDE8_val == "ZKorhal2") {
        autoBF71249D_g = UnitGroup("Dehaka", c_playerAny, null, UnitFilter(0, 0, 0, 0), 0);
        autoBF71249D_u = UnitGroupCount(autoBF71249D_g, c_unitCountAll);
        for (;; autoBF71249D_u -= 1) {
            autoBF71249D_var = UnitGroupUnitFromEnd(autoBF71249D_g, autoBF71249D_u);
            if (autoBF71249D_var == null) { break; }
            libNtve_gf_SendActorMessageToUnit(autoBF71249D_var, "Signal RemoveGlow");
        }
    }
    else {
    }
    autoBBAB5C7E_g = UnitGroup("K5Kerrigan", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoBBAB5C7E_u = UnitGroupCount(autoBBAB5C7E_g, c_unitCountAll);
    for (;; autoBBAB5C7E_u -= 1) {
        autoBBAB5C7E_var = UnitGroupUnitFromEnd(autoBBAB5C7E_g, autoBBAB5C7E_u);
        if (autoBBAB5C7E_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(autoBBAB5C7E_var, "Signal RemoveGlow");
    }
    TriggerEnable(libSwaC_gt_ZS_CinematicModeGlowOff, true);
    libSwaC_gf_DifficultySetting(2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_CinematicModeOn_Init () {
    libSwaC_gt_ZS_CinematicModeOn = TriggerCreate("libSwaC_gt_ZS_CinematicModeOn_Func");
    TriggerAddEventGeneric(libSwaC_gt_ZS_CinematicModeOn, "CinematicModeOn");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_CinematicModeGlowOff
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_CinematicModeGlowOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto4A7031D2_val;
    string autoCA952950_val;
    string auto3B8557F1_val;
    string autoE88EF37F_val;
    string autoB22EE70A_val;

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeBehaviorAllow(1, "StukovArmorAura", false);
    TechTreeBehaviorAllow(1, "SwarmQueenRegenAura", false);
    auto4A7031D2_val = libSwaC_gf_CurrentMap();
    if (auto4A7031D2_val == "ZLab2") {
        autoCA952950_val = UnitGetType(EventUnitCreatedUnit());
        if (autoCA952950_val == "RaynorLab") {
            libNtve_gf_SendActorMessageToUnit(EventUnitCreatedUnit(), "Signal RemoveGlow");
        }
        else if (autoCA952950_val == "KerriganGhostLab") {
            libNtve_gf_SendActorMessageToUnit(EventUnitCreatedUnit(), "Signal RemoveGlow");
        }
        else {
        }
    }
    else if (auto4A7031D2_val == "ZLab3") {
        auto3B8557F1_val = UnitGetType(EventUnitCreatedUnit());
        if (auto3B8557F1_val == "KerriganGhostLab") {
            libNtve_gf_SendActorMessageToUnit(EventUnitCreatedUnit(), "Signal RemoveGlow");
        }
        else {
        }
    }
    else if (auto4A7031D2_val == "ZHybrid3") {
        autoE88EF37F_val = UnitGetType(EventUnitCreatedUnit());
        if (autoE88EF37F_val == "InfestedStukov") {
            libNtve_gf_SendActorMessageToUnit(EventUnitCreatedUnit(), "Signal RemoveGlow");
        }
        else {
        }
    }
    else {
    }
    autoB22EE70A_val = UnitGetType(EventUnitCreatedUnit());
    if (autoB22EE70A_val == "K5Kerrigan") {
        libNtve_gf_SendActorMessageToUnit(EventUnitCreatedUnit(), "Signal RemoveGlow");
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_CinematicModeGlowOff_Init () {
    libSwaC_gt_ZS_CinematicModeGlowOff = TriggerCreate("libSwaC_gt_ZS_CinematicModeGlowOff_Func");
    TriggerEnable(libSwaC_gt_ZS_CinematicModeGlowOff, false);
    TriggerAddEventUnitCreated(libSwaC_gt_ZS_CinematicModeGlowOff, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_CinematicModeOff
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_CinematicModeOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_group;

    // Automatic Variable Declarations
    string auto44D741E0_val;
    unitgroup auto481F6057_g;
    int auto481F6057_u;
    unit auto481F6057_var;
    unitgroup auto12D0CF29_g;
    int auto12D0CF29_u;
    unit auto12D0CF29_var;
    unitgroup auto498C3906_g;
    int auto498C3906_u;
    unit auto498C3906_var;
    unitgroup autoA1C79423_g;
    int autoA1C79423_u;
    unit autoA1C79423_var;
    unitgroup autoF4218B63_g;
    int autoF4218B63_u;
    unit autoF4218B63_var;
    unitgroup auto59A43DBA_g;
    int auto59A43DBA_u;
    unit auto59A43DBA_var;
    playergroup auto2D1628C0_g;
    int auto2D1628C0_var;

    // Variable Initialization
    lv_group = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeBehaviorAllow(1, "StukovArmorAura", true);
    TechTreeBehaviorAllow(1, "SwarmQueenRegenAura", true);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "InCinematic", 0);
    auto44D741E0_val = libSwaC_gf_CurrentMap();
    if (auto44D741E0_val == "ZLab2") {
        auto481F6057_g = UnitGroup("RaynorLab", c_playerAny, null, UnitFilter(0, 0, 0, 0), 0);
        auto481F6057_u = UnitGroupCount(auto481F6057_g, c_unitCountAll);
        for (;; auto481F6057_u -= 1) {
            auto481F6057_var = UnitGroupUnitFromEnd(auto481F6057_g, auto481F6057_u);
            if (auto481F6057_var == null) { break; }
            libNtve_gf_SendActorMessageToUnit(auto481F6057_var, "Create SwarmHeroGlow");
        }
        auto12D0CF29_g = UnitGroup("KerriganGhostLab", c_playerAny, null, UnitFilter(0, 0, 0, 0), 0);
        auto12D0CF29_u = UnitGroupCount(auto12D0CF29_g, c_unitCountAll);
        for (;; auto12D0CF29_u -= 1) {
            auto12D0CF29_var = UnitGroupUnitFromEnd(auto12D0CF29_g, auto12D0CF29_u);
            if (auto12D0CF29_var == null) { break; }
            libNtve_gf_SendActorMessageToUnit(auto12D0CF29_var, "Create KerriganHeroGlow");
        }
    }
    else if (auto44D741E0_val == "ZLab3") {
        auto498C3906_g = UnitGroup("KerriganGhostLab", c_playerAny, null, UnitFilter(0, 0, 0, 0), 0);
        auto498C3906_u = UnitGroupCount(auto498C3906_g, c_unitCountAll);
        for (;; auto498C3906_u -= 1) {
            auto498C3906_var = UnitGroupUnitFromEnd(auto498C3906_g, auto498C3906_u);
            if (auto498C3906_var == null) { break; }
            libNtve_gf_SendActorMessageToUnit(auto498C3906_var, "Create KerriganHeroGlow");
        }
    }
    else if (auto44D741E0_val == "ZHybrid3") {
        autoA1C79423_g = UnitGroup("InfestedStukov", c_playerAny, null, UnitFilter(0, 0, 0, 0), 0);
        autoA1C79423_u = UnitGroupCount(autoA1C79423_g, c_unitCountAll);
        for (;; autoA1C79423_u -= 1) {
            autoA1C79423_var = UnitGroupUnitFromEnd(autoA1C79423_g, autoA1C79423_u);
            if (autoA1C79423_var == null) { break; }
            libNtve_gf_SendActorMessageToUnit(autoA1C79423_var, "Create StukovHeroGlow");
        }
    }
    else if (auto44D741E0_val == "ZKorhal2") {
        autoF4218B63_g = UnitGroup("Dehaka", c_playerAny, null, UnitFilter(0, 0, 0, 0), 0);
        autoF4218B63_u = UnitGroupCount(autoF4218B63_g, c_unitCountAll);
        for (;; autoF4218B63_u -= 1) {
            autoF4218B63_var = UnitGroupUnitFromEnd(autoF4218B63_g, autoF4218B63_u);
            if (autoF4218B63_var == null) { break; }
            libNtve_gf_SendActorMessageToUnit(autoF4218B63_var, "Create DehakaHeroGlow");
        }
    }
    else {
    }
    auto59A43DBA_g = UnitGroup("K5Kerrigan", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto59A43DBA_u = UnitGroupCount(auto59A43DBA_g, c_unitCountAll);
    for (;; auto59A43DBA_u -= 1) {
        auto59A43DBA_var = UnitGroupUnitFromEnd(auto59A43DBA_g, auto59A43DBA_u);
        if (auto59A43DBA_var == null) { break; }
        if ((libSwaC_gf_MissionStatusCheck("ZZerus2", libSwaC_ge_MissionStatus_Completed) == true)) {
            libNtve_gf_SendActorMessageToUnit(auto59A43DBA_var, "Create KerriganHeroGlowPurple");
        }
        else {
            libNtve_gf_SendActorMessageToUnit(auto59A43DBA_var, "Create KerriganHeroGlow");
        }
    }
    TriggerEnable(libSwaC_gt_ZS_CinematicModeGlowOff, false);
    auto2D1628C0_g = PlayerGroupAll();
    auto2D1628C0_var = -1;
    while (true) {
        auto2D1628C0_var = PlayerGroupNextPlayer(auto2D1628C0_g, auto2D1628C0_var);
        if (auto2D1628C0_var < 0) { break; }
        PlayerScoreValueEnableAll(auto2D1628C0_var, true);
    }
    libSwaC_gf_DifficultySetting(PlayerDifficulty(1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_CinematicModeOff_Init () {
    libSwaC_gt_ZS_CinematicModeOff = TriggerCreate("libSwaC_gt_ZS_CinematicModeOff_Func");
    TriggerAddEventGeneric(libSwaC_gt_ZS_CinematicModeOff, "CinematicModeOff");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_ObjectiveRePingController
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_ObjectiveRePingController_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto2E653B32_ae;
    int auto2E653B32_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        auto2E653B32_ae = (libSwaC_gv_zS_RePing_MAX - 1);
        auto2E653B32_var = 0;
        for ( ; auto2E653B32_var <= auto2E653B32_ae; auto2E653B32_var += 1 ) {
            if ((libSwaC_gv_zS_RePingArray[auto2E653B32_var] != c_invalidPingId) && (PingIsVisible(libSwaC_gv_zS_RePingArray[auto2E653B32_var]) == true)) {
                libSwaC_gf_ObjectiveRePing(libSwaC_gv_zS_RePingArray[auto2E653B32_var]);
            }

        }
        Wait(libSwaC_gv_zS_RePingInterval, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_ObjectiveRePingController_Init () {
    libSwaC_gt_ZS_ObjectiveRePingController = TriggerCreate("libSwaC_gt_ZS_ObjectiveRePingController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_SendTransmissionCampaignTick
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_SendTransmissionCampaignTick_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        if ((libSwaC_gv_zS_SendTransmissionCampaignIndex == 0) && (libSwaC_gv_zS_SendTransmissionCampaignPlayingTick > 0)) {
            libSwaC_gv_zS_SendTransmissionCampaignPlayingTick -= 1;
        }

        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_SendTransmissionCampaignTick_Init () {
    libSwaC_gt_ZS_SendTransmissionCampaignTick = TriggerCreate("libSwaC_gt_ZS_SendTransmissionCampaignTick_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: _Zerg Drop Pod
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt__ZergDropPod_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf__ZergDropPod(libSwaC_gv__TP_DropPod_Location, libSwaC_gv__TP_DropPod_Units, libSwaC_gv__TP_DropPod_Player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt__ZergDropPod_Init () {
    libSwaC_gt__ZergDropPod = TriggerCreate("libSwaC_gt__ZergDropPod_Func");
    TriggerEnable(libSwaC_gt__ZergDropPod, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: _Terran Drop Pod
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt__TerranDropPod_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf__TerranDropPod(libSwaC_gv__TP_DropPod_Location, libSwaC_gv__TP_DropPod_Units, libSwaC_gv__TP_DropPod_Player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt__TerranDropPod_Init () {
    libSwaC_gt__TerranDropPod = TriggerCreate("libSwaC_gt__TerranDropPod_Func");
    TriggerEnable(libSwaC_gt__TerranDropPod, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_MissionVictoryCallbackBlockActionQueueOneMinute
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_MissionVictoryCallbackBlockActionQueueOneMinute_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gv_zS_MissionVictoryActionQueyeEmpty = true;
    Wait(60.0, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_MissionVictoryCallbackBlockActionQueueOneMinute_Init () {
    libSwaC_gt_ZS_MissionVictoryCallbackBlockActionQueueOneMinute = TriggerCreate("libSwaC_gt_ZS_MissionVictoryCallbackBlockActionQueueOneMinute_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_MissionVictoryCallbackBlockActionQueue
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_MissionVictoryCallbackBlockActionQueue_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gv_zS_MissionVictoryActionQueyeEmpty = true;
    while (true) {
        Wait(10.0, c_timeReal);
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_MissionVictoryCallbackBlockActionQueue_Init () {
    libSwaC_gt_ZS_MissionVictoryCallbackBlockActionQueue = TriggerCreate("libSwaC_gt_ZS_MissionVictoryCallbackBlockActionQueue_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_Abort Mission
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_AbortMission_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup autoD9381571_g;
    int autoD9381571_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libSwaC_gt_ZS_CollectCampaignStatsDataMisisonAbort, true, false);
    if ((libSwaC_gf_CurrentMap() == "ZKorhal3") && (libSwaC_gv_zSX_IsVictoryPlayAgain == true) && (libSwaC_gv_zSX_IsSimulation == false)) {
        UnitPauseAll(true);
        autoD9381571_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterHidden - 32))), 0);
        autoD9381571_u = UnitGroupCount(autoD9381571_g, c_unitCountAll);
        for (;; autoD9381571_u -= 1) {
            lv_indexUnit = UnitGroupUnitFromEnd(autoD9381571_g, autoD9381571_u);
            if (lv_indexUnit == null) { break; }
            libNtve_gf_MakeUnitInvulnerable(lv_indexUnit, true);
            libNtve_gf_ShowHideUnit(lv_indexUnit, false);
        }
        UISetWorldVisible(PlayerGroupAll(), false);
        libNtve_gf_HideGameUI(false, PlayerGroupAll());
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleUI, true);
        UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
        TransmissionClearAll();
        ConversationDataStop();
        libNtve_gf_SendActorMessageToGameRegion(RegionEntireMap(), "SetVisibility");
        libNtve_gf_HideAllCinematicPortraits(PlayerGroupAll());
        TriggerQueueClear(c_triggerQueueRemove);
        TriggerQueuePause(true);
        SoundStopAllTriggerSounds(false);
        libSwaC_gf_ZS_CampaignVictory();
    }
    else {
        libSwaC_gf_PrepareForStoryMode(c_gameOverDefeat, PlayerDifficulty(1));
        TriggerExecute(libSwaC_gt_ZS_SaveCampaignStatsData, true, false);
        GameOver(1, c_gameOverDefeat, false, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_AbortMission_Init () {
    libSwaC_gt_ZS_AbortMission = TriggerCreate("libSwaC_gt_ZS_AbortMission_Func");
    TriggerAddEventAbortMission(libSwaC_gt_ZS_AbortMission, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_CampaignUnit
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_CampaignUnit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup autoCAA0C176_g;
    int autoCAA0C176_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindMission) == true) || (libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindUpgrade) == true)))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoCAA0C176_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoCAA0C176_u = UnitGroupCount(autoCAA0C176_g, c_unitCountAll);
    for (;; autoCAA0C176_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(autoCAA0C176_g, autoCAA0C176_u);
        if (lv_indexUnit == null) { break; }
        if ((UnitGetOwner(lv_indexUnit) == 1)) {
            libSwaC_gf_ZS_UseUnitNameAsUnitTip(lv_indexUnit);
        }

        if ((UnitGetOwner(lv_indexUnit) == 0) && (UnitFilterMatch(lv_indexUnit, 1, UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == true)) {
            libSwaC_gf_ZS_UseUnitNameAsUnitTip(lv_indexUnit);
        }

        if ((UnitGetOwner(lv_indexUnit) == 0) && (UnitFilterMatch(lv_indexUnit, 1, UnitFilter((1 << c_targetFilterRawResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == true)) {
            libSwaC_gf_ZS_UseUnitNameAsUnitTip(lv_indexUnit);
        }

        if ((libSwaC_gf_ZS_DisplayResourcePickupInfo() == true) && (libSwaC_gf_ZS_ResourcePickupUnit(lv_indexUnit) == true)) {
            libSwaC_gf_SetUnitInfoTextCampaignDetailed(lv_indexUnit, StringExternal(CatalogFieldValueGet(c_gameCatalogActor, UnitGetType(lv_indexUnit), "InfoText", c_playerAny)), StringExternal(CatalogFieldValueGet(c_gameCatalogActor, UnitGetType(lv_indexUnit), "HighlightTooltip", c_playerAny)), StringExternal("Param/Value/lib_SwaC_606ECC4E"));
        }

    }
    TriggerEnable(libSwaC_gt_ZS_CampaignUnitCreated, true);
    TriggerEnable(libSwaC_gt_ZS_CampaignUnitChangeOwner, true);
    TriggerEnable(libSwaC_gt_ZS_CampaignUnitInfoUnitMorphes, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_CampaignUnit_Init () {
    libSwaC_gt_ZS_CampaignUnit = TriggerCreate("libSwaC_gt_ZS_CampaignUnit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_CampaignUnitCreated
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_CampaignUnitCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitCreatedUnit()) == 1))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnitCreatedUnit(), 1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_ZS_UseUnitNameAsUnitTip(EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_CampaignUnitCreated_Init () {
    libSwaC_gt_ZS_CampaignUnitCreated = TriggerCreate("libSwaC_gt_ZS_CampaignUnitCreated_Func");
    TriggerEnable(libSwaC_gt_ZS_CampaignUnitCreated, false);
    TriggerAddEventUnitCreated(libSwaC_gt_ZS_CampaignUnitCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_CampaignUnitChangeOwner
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_CampaignUnitChangeOwner_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), 1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_ZS_UseUnitNameAsUnitTip(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_CampaignUnitChangeOwner_Init () {
    libSwaC_gt_ZS_CampaignUnitChangeOwner = TriggerCreate("libSwaC_gt_ZS_CampaignUnitChangeOwner_Func");
    TriggerEnable(libSwaC_gt_ZS_CampaignUnitChangeOwner, false);
    TriggerAddEventUnitChangeOwner(libSwaC_gt_ZS_CampaignUnitChangeOwner, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_CampaignUnitInfoUnitMorphes
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_CampaignUnitInfoUnitMorphes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), 1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_ZS_UseUnitNameAsUnitTip(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_CampaignUnitInfoUnitMorphes_Init () {
    libSwaC_gt_ZS_CampaignUnitInfoUnitMorphes = TriggerCreate("libSwaC_gt_ZS_CampaignUnitInfoUnitMorphes_Func");
    TriggerEnable(libSwaC_gt_ZS_CampaignUnitInfoUnitMorphes, false);
    TriggerAddEventUnitAbility(libSwaC_gt_ZS_CampaignUnitInfoUnitMorphes, null, AbilityCommand("SpineCrawlerUproot", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(libSwaC_gt_ZS_CampaignUnitInfoUnitMorphes, null, AbilityCommand("SpineCrawlerRoot", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(libSwaC_gt_ZS_CampaignUnitInfoUnitMorphes, null, AbilityCommand("SporeCrawlerUproot", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(libSwaC_gt_ZS_CampaignUnitInfoUnitMorphes, null, AbilityCommand("SporeCrawlerRoot", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(libSwaC_gt_ZS_CampaignUnitInfoUnitMorphes, null, AbilityCommand("CreepTumorUsed", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(libSwaC_gt_ZS_CampaignUnitInfoUnitMorphes, null, AbilityCommand("UpgradeToLair", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(libSwaC_gt_ZS_CampaignUnitInfoUnitMorphes, null, AbilityCommand("UpgradeToHive", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(libSwaC_gt_ZS_CampaignUnitInfoUnitMorphes, null, AbilityCommand("UpgradeToImpalerDen", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(libSwaC_gt_ZS_CampaignUnitInfoUnitMorphes, null, AbilityCommand("UpgradeToLurkerDen", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(libSwaC_gt_ZS_CampaignUnitInfoUnitMorphes, null, AbilityCommand("UpgradeToGreaterSpire", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(libSwaC_gt_ZS_CampaignUnitInfoUnitMorphes, null, AbilityCommand("UpgradeToGreaterSpireBroodlord", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(libSwaC_gt_ZS_CampaignUnitInfoUnitMorphes, null, AbilityCommand("UpgradeToGreaterSpireViper", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(libSwaC_gt_ZS_CampaignUnitInfoUnitMorphes, null, AbilityCommand("ExtractorToAutomatedExtractor", 0), c_abilMorphStageUnitEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_PlayerNeedOverlord
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_PlayerNeedOverlord_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_newTooltip;
    fixed lv_used;
    fixed lv_made;
    fixed lv_limit;
    bool lv_transmissionDelivered;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_newTooltip = StringExternal("Param/Value/lib_SwaC_F5BAFC76");

    // Conditions
    if (testConds) {
        if (!(((libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindMission) == true) || (libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindUpgrade) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libSwaC_gt_ZS_PlayerNeedOverlordButtonClickedFood2, true);
    TriggerEnable(libSwaC_gt_ZS_PlayerNeedOverlordButtonClickedFood3, true);
    TriggerEnable(libSwaC_gt_ZS_PlayerNeedOverlordButtonClickedFood6, true);
    while (true) {
        Wait(1.0, c_timeAI);
        if ((libSwaC_gv_zS_GameOver == true)) {
            return true;
        }

        if ((libSwaC_gv_zS_NeedOverlordEnabled == true) && (libNtve_gf_PlayerInCinematicMode(1) == false) && ((TechTreeUnitCount(1, "Hatchery", c_techCountQueuedOrBetter) > 0) || (TechTreeUnitCount(1, "Lair", c_techCountQueuedOrBetter) > 0) || (TechTreeUnitCount(1, "Hive", c_techCountQueuedOrBetter) > 0))) {
            lv_made = PlayerGetPropertyFixed(1, c_playerPropSuppliesMade);
            lv_used = PlayerGetPropertyFixed(1, c_playerPropSuppliesUsed);
            lv_limit = PlayerGetPropertyFixed(1, c_playerPropSuppliesLimit);
            if (((lv_made + (TechTreeUnitCount(1, "Overlord", c_techCountInProgressOnly) * StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "Overlord", "Food", 1)))) < lv_limit) && ((lv_made + (TechTreeUnitCount(1, "Overlord", c_techCountInProgressOnly) * StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "Overlord", "Food", 1)))) <= ((lv_used + libSwaC_gv_zS_NeedOverlordFoodRequired) - 0.1))) {
                if ((libSwaC_gv_zS_NeedOverlordAbilityHighlightOn == false)) {
                    if ((libSwaC_gf_MissionStatusCheck("ZLab3", libSwaC_ge_MissionStatus_Completed) == true) && ((libSwaC_gf_CurrentMap() != "ZChar1") || (GameGetMissionTime() > 240.0)) && (lv_transmissionDelivered == false)) {
                        lv_transmissionDelivered = true;
                        TriggerQueueEnter();
                        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
                        libSwaC_gf_SendTransmissionCampaign(null, "zMission_MultiMissionCallouts|Line00035", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
                        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
                        TriggerQueueExit();
                    }
                    else {
                        libSwaC_gv_zS_NeedOverlordAbilityHighlightOn = true;
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_SwaC_3F84BC47"));
                        UISetButtonHighlighted(PlayerGroupSingle(1), AbilityCommand("LarvaTrain", 2), true);
                        libSwaC_gf_TurnSelectLarvaButtonHighlightOnOff(true);
                        CatalogFieldValueSet(c_gameCatalogButton, "Overlord", "Tooltip", 1, "Param/Value/lib_SwaC_F5BAFC76");
                    }
                }

            }
            else {
                if ((libSwaC_gv_zS_NeedOverlordAbilityHighlightOn == true)) {
                    libSwaC_gv_zS_NeedOverlordAbilityHighlightOn = false;
                    UIClearMessages(PlayerGroupSingle(1), c_messageAreaDirective);
                    UISetButtonHighlighted(PlayerGroupSingle(1), AbilityCommand("LarvaTrain", 2), false);
                    libSwaC_gf_TurnSelectLarvaButtonHighlightOnOff(false);
                    CatalogFieldValueSet(c_gameCatalogButton, "Overlord", "Tooltip", 1, "Button/Tooltip/Overlord");
                }

            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_PlayerNeedOverlord_Init () {
    libSwaC_gt_ZS_PlayerNeedOverlord = TriggerCreate("libSwaC_gt_ZS_PlayerNeedOverlord_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_PlayerNeedOverlordButtonClicked (Food 2)
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_PlayerNeedOverlordButtonClickedFood2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_localIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libSwaC_gv_zS_GameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gv_zS_NeedOverlordFoodRequired2Index += 1;
    lv_localIndex = libSwaC_gv_zS_NeedOverlordFoodRequired2Index;
    libSwaC_gv_zS_NeedOverlordFoodRequired = MaxI(libSwaC_gv_zS_NeedOverlordFoodRequired, 2);
    Wait(15.0, c_timeGame);
    if ((lv_localIndex == libSwaC_gv_zS_NeedOverlordFoodRequired2Index) && (libSwaC_gv_zS_NeedOverlordFoodRequired == 2)) {
        libSwaC_gv_zS_NeedOverlordFoodRequired = 1;
        libSwaC_gv_zS_NeedOverlordFoodRequired2Index = 0;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_PlayerNeedOverlordButtonClickedFood2_Init () {
    libSwaC_gt_ZS_PlayerNeedOverlordButtonClickedFood2 = TriggerCreate("libSwaC_gt_ZS_PlayerNeedOverlordButtonClickedFood2_Func");
    TriggerEnable(libSwaC_gt_ZS_PlayerNeedOverlordButtonClickedFood2, false);
    TriggerAddEventButtonPressed(libSwaC_gt_ZS_PlayerNeedOverlordButtonClickedFood2, 1, "Queen");
    TriggerAddEventButtonPressed(libSwaC_gt_ZS_PlayerNeedOverlordButtonClickedFood2, 1, "Roach");
    TriggerAddEventButtonPressed(libSwaC_gt_ZS_PlayerNeedOverlordButtonClickedFood2, 1, "MorphToCorpser");
    TriggerAddEventButtonPressed(libSwaC_gt_ZS_PlayerNeedOverlordButtonClickedFood2, 1, "MorphToVile");
    TriggerAddEventButtonPressed(libSwaC_gt_ZS_PlayerNeedOverlordButtonClickedFood2, 1, "Hydralisk");
    TriggerAddEventButtonPressed(libSwaC_gt_ZS_PlayerNeedOverlordButtonClickedFood2, 1, "MorphToHydraliskImpaler");
    TriggerAddEventButtonPressed(libSwaC_gt_ZS_PlayerNeedOverlordButtonClickedFood2, 1, "MorphToHydraliskLurker");
    TriggerAddEventButtonPressed(libSwaC_gt_ZS_PlayerNeedOverlordButtonClickedFood2, 1, "Mutalisk");
    TriggerAddEventButtonPressed(libSwaC_gt_ZS_PlayerNeedOverlordButtonClickedFood2, 1, "MorphToMutaliskBroodlord");
    TriggerAddEventButtonPressed(libSwaC_gt_ZS_PlayerNeedOverlordButtonClickedFood2, 1, "MorphToMutaliskViper");
    TriggerAddEventButtonPressed(libSwaC_gt_ZS_PlayerNeedOverlordButtonClickedFood2, 1, "Infestor");
    TriggerAddEventButtonPressed(libSwaC_gt_ZS_PlayerNeedOverlordButtonClickedFood2, 1, "BroodLord");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_PlayerNeedOverlordButtonClicked (Food 3)
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_PlayerNeedOverlordButtonClickedFood3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_localIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libSwaC_gv_zS_GameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gv_zS_NeedOverlordFoodRequired3Index += 1;
    lv_localIndex = libSwaC_gv_zS_NeedOverlordFoodRequired3Index;
    libSwaC_gv_zS_NeedOverlordFoodRequired = MaxI(libSwaC_gv_zS_NeedOverlordFoodRequired, 3);
    Wait(15.0, c_timeGame);
    if ((lv_localIndex == libSwaC_gv_zS_NeedOverlordFoodRequired3Index) && (libSwaC_gv_zS_NeedOverlordFoodRequired == 3)) {
        libSwaC_gv_zS_NeedOverlordFoodRequired = 1;
        libSwaC_gv_zS_NeedOverlordFoodRequired3Index = 0;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_PlayerNeedOverlordButtonClickedFood3_Init () {
    libSwaC_gt_ZS_PlayerNeedOverlordButtonClickedFood3 = TriggerCreate("libSwaC_gt_ZS_PlayerNeedOverlordButtonClickedFood3_Func");
    TriggerEnable(libSwaC_gt_ZS_PlayerNeedOverlordButtonClickedFood3, false);
    TriggerAddEventButtonPressed(libSwaC_gt_ZS_PlayerNeedOverlordButtonClickedFood3, 1, "Aberration");
    TriggerAddEventButtonPressed(libSwaC_gt_ZS_PlayerNeedOverlordButtonClickedFood3, 1, "SwarmHostMP");
    TriggerAddEventButtonPressed(libSwaC_gt_ZS_PlayerNeedOverlordButtonClickedFood3, 1, "MorphToSwarmHostSplitA");
    TriggerAddEventButtonPressed(libSwaC_gt_ZS_PlayerNeedOverlordButtonClickedFood3, 1, "MorphToSwarmHostSplitB");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_PlayerNeedOverlordButtonClicked (Food 6)
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_PlayerNeedOverlordButtonClickedFood6_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_localIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libSwaC_gv_zS_GameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gv_zS_NeedOverlordFoodRequired6Index += 1;
    lv_localIndex = libSwaC_gv_zS_NeedOverlordFoodRequired6Index;
    libSwaC_gv_zS_NeedOverlordFoodRequired = MaxI(libSwaC_gv_zS_NeedOverlordFoodRequired, 6);
    Wait(15.0, c_timeGame);
    if ((lv_localIndex == libSwaC_gv_zS_NeedOverlordFoodRequired6Index) && (libSwaC_gv_zS_NeedOverlordFoodRequired == 6)) {
        libSwaC_gv_zS_NeedOverlordFoodRequired = 1;
        libSwaC_gv_zS_NeedOverlordFoodRequired6Index = 0;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_PlayerNeedOverlordButtonClickedFood6_Init () {
    libSwaC_gt_ZS_PlayerNeedOverlordButtonClickedFood6 = TriggerCreate("libSwaC_gt_ZS_PlayerNeedOverlordButtonClickedFood6_Func");
    TriggerEnable(libSwaC_gt_ZS_PlayerNeedOverlordButtonClickedFood6, false);
    TriggerAddEventButtonPressed(libSwaC_gt_ZS_PlayerNeedOverlordButtonClickedFood6, 1, "Ultralisk");
    TriggerAddEventButtonPressed(libSwaC_gt_ZS_PlayerNeedOverlordButtonClickedFood6, 1, "MorphToHotSNoxious");
    TriggerAddEventButtonPressed(libSwaC_gt_ZS_PlayerNeedOverlordButtonClickedFood6, 1, "MorphToHotSTorrasque");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_ResourcePickupTip
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_ResourcePickupTip_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libSwaC_gf_ZS_DisplayResourcePickupInfo() == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libSwaC_gt_ZS_ResourcePickup, true);
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(UserDataGetText("CampaignTips", "MineralPickup", "Name", 1), libNtve_ge_TipType_NormalTip), UserDataGetText("CampaignTips", "MineralPickup", "Description", 1), UserDataGetText("CampaignTips", "MineralPickup", "Name", 1), UserDataGetImagePath("CampaignTips", "MineralPickup", "Icon", 1));
    HelpPanelSetHelpItemDarkenedWhenViewed(HelpPanelLastCreatedHelpItem(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_ResourcePickupTip_Init () {
    libSwaC_gt_ZS_ResourcePickupTip = TriggerCreate("libSwaC_gt_ZS_ResourcePickupTip_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_ResourcePickup
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_ResourcePickup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup autoCB633224_g;
    int autoCB633224_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libSwaC_gv_zS_GameOver == false))) {
            return false;
        }

        if (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UserDataSetInt("StoryStates", "(Mission)ResourcePickedTipPlayed", "value", 1, 1);
    autoCB633224_g = UnitGroup(null, 0, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoCB633224_u = UnitGroupCount(autoCB633224_g, c_unitCountAll);
    for (;; autoCB633224_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(autoCB633224_g, autoCB633224_u);
        if (lv_indexUnit == null) { break; }
        if ((libSwaC_gf_ZS_ResourcePickupUnit(lv_indexUnit) == true)) {
            libSwaC_gf_SetUnitInfoTextCampaignDetailed(lv_indexUnit, StringExternal(CatalogFieldValueGet(c_gameCatalogActor, UnitGetType(lv_indexUnit), "InfoText", c_playerAny)), StringExternal(CatalogFieldValueGet(c_gameCatalogActor, UnitGetType(lv_indexUnit), "HighlightTooltip", c_playerAny)), null);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_ResourcePickup_Init () {
    libSwaC_gt_ZS_ResourcePickup = TriggerCreate("libSwaC_gt_ZS_ResourcePickup_Func");
    TriggerEnable(libSwaC_gt_ZS_ResourcePickup, false);
    TriggerAddEventUnitAbility(libSwaC_gt_ZS_ResourcePickup, null, AbilityCommand("PickupMinerals100", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(libSwaC_gt_ZS_ResourcePickup, null, AbilityCommand("PickupGas100", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_FeaturedZergStructureDies
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_FeaturedZergStructureDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_flashingIndex;
    bool lv_existed;

    // Automatic Variable Declarations
    int autoE5924454_ae;
    const int autoE5924454_ai = 1;
    string auto1589F6FF_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }

        if (!((libSwaC_gv_zS_FeaturedZergStructureCount > 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == libSwaC_gv_zS_FeaturedZergStructures[1]))) {
            return false;
        }

        if (!((libSwaC_gv_zS_GameOver == false))) {
            return false;
        }

        if (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        while (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
            Wait(1.0, c_timeAI);
        }
        if ((libSwaC_gv_zS_FeaturedZergStructureFlashStatus[1] >= 2)) {
            return true;
        }

        lv_flashingIndex = 0;
        autoE5924454_ae = libSwaC_gv_zS_FeaturedZergStructureCount;
        lv_index = 1;
        for ( ; ( (autoE5924454_ai >= 0 && lv_index <= autoE5924454_ae) || (autoE5924454_ai < 0 && lv_index >= autoE5924454_ae) ) ; lv_index += autoE5924454_ai ) {
            lv_existed = false;
            auto1589F6FF_val = libSwaC_gv_zS_FeaturedZergStructures[lv_index];
            if (auto1589F6FF_val == "Lair") {
                if (((TechTreeUnitCount(1, "Lair", c_techCountQueuedOrBetter) > 0) || (TechTreeUnitCount(1, "Hive", c_techCountQueuedOrBetter) > 0))) {
                    lv_existed = true;
                }

            }
            else if (auto1589F6FF_val == "Hatchery") {
                if (((TechTreeUnitCount(1, "Hatchery", c_techCountQueuedOrBetter) > 0) || (TechTreeUnitCount(1, "Lair", c_techCountQueuedOrBetter) > 0) || (TechTreeUnitCount(1, "Hive", c_techCountQueuedOrBetter) > 0))) {
                    lv_existed = true;
                }

            }
            else {
                if ((UnitGroupCount(UnitGroup(libSwaC_gv_zS_FeaturedZergStructures[lv_index], c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1), c_unitCountAlive) > 0)) {
                    lv_existed = true;
                }

            }
            if ((lv_existed == true)) {
                if ((libSwaC_gv_zS_FeaturedZergStructureFlashStatus[lv_index] == 1)) {
                    libSwaC_gv_zS_FeaturedZergStructureFlashStatus[lv_index] = 2;
                }

                if ((libSwaC_gv_zS_FeaturedZergStructureFlashing == lv_index)) {
                    libSwaC_gf_ZS_StoptFlashFeaturedZergStructure();
                }

                if ((libSwaC_gv_zS_FeaturedZergStructures[(lv_index - 1)] != "Lair")) {
                    break;
                }

            }
            else {
                if ((libSwaC_gv_zS_FeaturedZergStructures[lv_index] == "Hatchery")) {
                    lv_flashingIndex = lv_index;
                    break;
                }

            }
            if ((lv_existed == false)) {
                lv_flashingIndex = lv_index;
            }
            else {
                lv_flashingIndex = (lv_index - 1);
            }
        }
        if ((lv_flashingIndex > 0)) {
            libSwaC_gf_ZS_StartFlashFeaturedZergStructure(UnitGetPosition(EventUnit()), lv_flashingIndex);
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_FeaturedZergStructureDies_Init () {
    libSwaC_gt_ZS_FeaturedZergStructureDies = TriggerCreate("libSwaC_gt_ZS_FeaturedZergStructureDies_Func");
    TriggerAddEventUnitDied(libSwaC_gt_ZS_FeaturedZergStructureDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_FeaturedZergStructureDiesReminder
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_FeaturedZergStructureDiesReminder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexUnit;
    bool lv_droneSelected;
    int lv_indexTimes;

    // Automatic Variable Declarations
    string auto792AEFD2_val;
    string auto81ABF352_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait((30.0+MinF(lv_indexTimes, 3.0)*10), c_timeAI);
        if ((libSwaC_gv_zS_FeaturedZergStructureFlashStatus[1] >= 2)) {
            return true;
        }

        TriggerQueueEnter();
        if ((libSwaC_gv_zS_FeaturedZergStructureFlashStatus[1] >= 2)) {
            return true;
        }

        if ((libSwaC_gv_zS_FeaturedZergStructureFlashing > 0)) {
            lv_indexTimes += 1;
            Wait(0.5, c_timeReal);
            if ((libSwaC_gv_zS_FeaturedZergStructureFlashing == 1)) {
                auto792AEFD2_val = libSwaC_gv_zS_FeaturedZergStructures[libSwaC_gv_zS_FeaturedZergStructureFlashing];
                if (auto792AEFD2_val == "BanelingNest") {
                    TextExpressionSetToken("Param/Expression/lib_SwaC_9BC8EF3A", "B", UnitTypeGetName(libSwaC_gv_zS_FeaturedZergStructures[libSwaC_gv_zS_FeaturedZergStructureFlashing]));
                    TextExpressionSetToken("Param/Expression/lib_SwaC_9BC8EF3A", "B", UnitTypeGetName(libSwaC_gv_zS_FeaturedZergStructures[libSwaC_gv_zS_FeaturedZergStructureFlashing]));
                    libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), libSwaC_ge_CampaignMessageType_SimpleHint, TextExpressionAssemble("Param/Expression/lib_SwaC_9BC8EF3A"), libSwaC_ge_CampaignMessageFormatNotFormat_FormatMessage);
                }
                else if (auto792AEFD2_val == "UltraliskCavern") {
                    TextExpressionSetToken("Param/Expression/lib_SwaC_D0A757BB", "A", libSwaC_gf_StoryArmyCategoryName(libSwaC_gf_MissionArmyCategoryUnlocked(libSwaC_gf_CurrentMap())));
                    TextExpressionSetToken("Param/Expression/lib_SwaC_D0A757BB", "B", UnitTypeGetName(libSwaC_gv_zS_FeaturedZergStructures[libSwaC_gv_zS_FeaturedZergStructureFlashing]));
                    TextExpressionSetToken("Param/Expression/lib_SwaC_D0A757BB", "B", UnitTypeGetName(libSwaC_gv_zS_FeaturedZergStructures[libSwaC_gv_zS_FeaturedZergStructureFlashing]));
                    libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), libSwaC_ge_CampaignMessageType_SimpleHint, TextExpressionAssemble("Param/Expression/lib_SwaC_D0A757BB"), libSwaC_ge_CampaignMessageFormatNotFormat_FormatMessage);
                }
                else if (auto792AEFD2_val == "RoachWarren") {
                    TextExpressionSetToken("Param/Expression/lib_SwaC_3E4AA8FB", "B", UnitTypeGetName(libSwaC_gv_zS_FeaturedZergStructures[libSwaC_gv_zS_FeaturedZergStructureFlashing]));
                    TextExpressionSetToken("Param/Expression/lib_SwaC_3E4AA8FB", "B", UnitTypeGetName(libSwaC_gv_zS_FeaturedZergStructures[libSwaC_gv_zS_FeaturedZergStructureFlashing]));
                    libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), libSwaC_ge_CampaignMessageType_SimpleHint, TextExpressionAssemble("Param/Expression/lib_SwaC_3E4AA8FB"), libSwaC_ge_CampaignMessageFormatNotFormat_FormatMessage);
                }
                else {
                    TextExpressionSetToken("Param/Expression/lib_SwaC_7F7E500C", "A", libSwaC_gf_StoryArmyCategoryName(libSwaC_gf_MissionArmyCategoryUnlocked(libSwaC_gf_CurrentMap())));
                    TextExpressionSetToken("Param/Expression/lib_SwaC_7F7E500C", "B", UnitTypeGetName(libSwaC_gv_zS_FeaturedZergStructures[libSwaC_gv_zS_FeaturedZergStructureFlashing]));
                    TextExpressionSetToken("Param/Expression/lib_SwaC_7F7E500C", "B", UnitTypeGetName(libSwaC_gv_zS_FeaturedZergStructures[libSwaC_gv_zS_FeaturedZergStructureFlashing]));
                    libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), libSwaC_ge_CampaignMessageType_SimpleHint, TextExpressionAssemble("Param/Expression/lib_SwaC_7F7E500C"), libSwaC_ge_CampaignMessageFormatNotFormat_FormatMessage);
                }
            }
            else {
                auto81ABF352_val = libSwaC_gv_zS_FeaturedZergStructures[libSwaC_gv_zS_FeaturedZergStructureFlashing];
                if (auto81ABF352_val == "Lair") {
                    TextExpressionSetToken("Param/Expression/lib_SwaC_1940DF83", "B", UnitTypeGetName(libSwaC_gv_zS_FeaturedZergStructures[libSwaC_gv_zS_FeaturedZergStructureFlashing]));
                    TextExpressionSetToken("Param/Expression/lib_SwaC_1940DF83", "A", UnitTypeGetName(libSwaC_gv_zS_FeaturedZergStructures[1]));
                    libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), libSwaC_ge_CampaignMessageType_SimpleHint, TextExpressionAssemble("Param/Expression/lib_SwaC_1940DF83"), libSwaC_ge_CampaignMessageFormatNotFormat_FormatMessage);
                }
                else if (auto81ABF352_val == "Hive") {
                    TextExpressionSetToken("Param/Expression/lib_SwaC_CD4C3A7B", "A", UnitTypeGetName(libSwaC_gv_zS_FeaturedZergStructures[1]));
                    TextExpressionSetToken("Param/Expression/lib_SwaC_CD4C3A7B", "B", UnitTypeGetName(libSwaC_gv_zS_FeaturedZergStructures[libSwaC_gv_zS_FeaturedZergStructureFlashing]));
                    TextExpressionSetToken("Param/Expression/lib_SwaC_CD4C3A7B", "B", UnitTypeGetName(libSwaC_gv_zS_FeaturedZergStructures[libSwaC_gv_zS_FeaturedZergStructureFlashing]));
                    libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), libSwaC_ge_CampaignMessageType_SimpleHint, TextExpressionAssemble("Param/Expression/lib_SwaC_CD4C3A7B"), libSwaC_ge_CampaignMessageFormatNotFormat_FormatMessage);
                }
                else {
                    TextExpressionSetToken("Param/Expression/lib_SwaC_26B3AD13", "A", UnitTypeGetName(libSwaC_gv_zS_FeaturedZergStructures[1]));
                    TextExpressionSetToken("Param/Expression/lib_SwaC_26B3AD13", "B", UnitTypeGetName(libSwaC_gv_zS_FeaturedZergStructures[libSwaC_gv_zS_FeaturedZergStructureFlashing]));
                    libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), libSwaC_ge_CampaignMessageType_SimpleHint, TextExpressionAssemble("Param/Expression/lib_SwaC_26B3AD13"), libSwaC_ge_CampaignMessageFormatNotFormat_FormatMessage);
                }
            }
            Wait(0.5, c_timeReal);
        }

        TriggerQueueExit();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_FeaturedZergStructureDiesReminder_Init () {
    libSwaC_gt_ZS_FeaturedZergStructureDiesReminder = TriggerCreate("libSwaC_gt_ZS_FeaturedZergStructureDiesReminder_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_BaseUnderAttackInit
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_BaseUnderAttackInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if (((libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindMission) == false) || (libSwaC_gf_CurrentMap() == "ZExpedition3") || (libSwaC_gf_CurrentMap() == "ZLab1") || (libSwaC_gf_CurrentMap() == "ZLab2") || (libSwaC_gf_CurrentMap() == "ZLab3") || (libSwaC_gf_CurrentMap() == "ZChar1") || (libSwaC_gf_CurrentMap() == "ZSpace1") || (libSwaC_gf_CurrentMap() == "ZSpace2") || (libSwaC_gf_CurrentMap() == "ZZerus3"))) {
        return true;
    }

    TriggerEnable(libSwaC_gt_ZS_BaseUnderAttackByGround, true);
    TriggerEnable(libSwaC_gt_ZS_BaseUnderAttackByGroundSpineCrawlerBuilt, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_BaseUnderAttackInit_Init () {
    libSwaC_gt_ZS_BaseUnderAttackInit = TriggerCreate("libSwaC_gt_ZS_BaseUnderAttackInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_BaseUnderAttackByGround
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_BaseUnderAttackByGround_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    fixed auto0916947C_at;

    // Conditions
    if (testConds) {
        if (!((libSwaC_gv_zS_GameOver == false))) {
            return false;
        }

        if (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SpineCrawler"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SpineCrawlerUprooted"))) {
            return false;
        }

        if (!((libSwaC_gv_zS_SpineCrawlerBuilt == false))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), 1, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnitDamageSourceUnit(), 1, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(libSwaC_gt_ZS_BaseUnderAttackByGroundSpineCrawlerBuilt, true);
    Wait(5.0, c_timeAI);
    auto0916947C_at = 0;
    while (!((TriggerQueueIsEmpty() == true)) && auto0916947C_at <= 10.0) {
        Wait(1.0, c_timeAI);
        auto0916947C_at = auto0916947C_at + 1.0;
    }
    if ((libSwaC_gv_zS_SpineCrawlerBuilt == true)) {
        libSwaC_gv_zS_SpineCrawlerBuilt = false;
        TriggerEnable(libSwaC_gt_ZS_BaseUnderAttackByGroundSpineCrawlerBuilt, false);
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char01|Line00053", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    if ((libSwaC_gv_zS_SpineCrawlerTipPlayed == false)) {
        libSwaC_gv_zS_SpineCrawlerTipPlayed = true;
        UserDataSetInt("CampaignTips", "Spine Crawler", "Created", 1, 0);
        Wait(libSwaC_gv_campaignHintDelay, c_timeReal);
    }

    TriggerQueueExit();
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("ZergBuild", 14), true);
    TriggerEnable(libSwaC_gt_ZS_BaseUnderAttackByGroundSpineCrawlerBuilt, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_BaseUnderAttackByGround_Init () {
    libSwaC_gt_ZS_BaseUnderAttackByGround = TriggerCreate("libSwaC_gt_ZS_BaseUnderAttackByGround_Func");
    TriggerEnable(libSwaC_gt_ZS_BaseUnderAttackByGround, false);
    TriggerAddEventUnitDamaged(libSwaC_gt_ZS_BaseUnderAttackByGround, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_BaseUnderAttackByGroundSpineCrawlerBuilt
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_BaseUnderAttackByGroundSpineCrawlerBuilt_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libSwaC_gv_zS_GameOver == false))) {
            return false;
        }

        if (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) != "SpineCrawler"))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gv_zS_SpineCrawlerBuilt = true;
    TriggerEnable(libSwaC_gt_ZS_BaseUnderAttackByGround, false);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("ZergBuild", 14), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_BaseUnderAttackByGroundSpineCrawlerBuilt_Init () {
    libSwaC_gt_ZS_BaseUnderAttackByGroundSpineCrawlerBuilt = TriggerCreate("libSwaC_gt_ZS_BaseUnderAttackByGroundSpineCrawlerBuilt_Func");
    TriggerEnable(libSwaC_gt_ZS_BaseUnderAttackByGroundSpineCrawlerBuilt, false);
    TriggerAddEventUnitConstructProgress(libSwaC_gt_ZS_BaseUnderAttackByGroundSpineCrawlerBuilt, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_OverlordRallyEnable
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_OverlordRallyEnable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_SwaC_02591AB7"));
    TriggerEnable(libSwaC_gt_ZS_OverlordRally, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_OverlordRallyEnable_Init () {
    libSwaC_gt_ZS_OverlordRallyEnable = TriggerCreate("libSwaC_gt_ZS_OverlordRallyEnable_Func");
    TriggerAddEventChatMessage(libSwaC_gt_ZS_OverlordRallyEnable, c_playerAny, "OverlordRally", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_OverlordRally
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_OverlordRally_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_overshootDistance;
    fixed lv_distanceVariance;
    fixed lv_angleVariance;
    point[5] lv_orderTargetPoint;
    int lv_lastValidRallyPointIndex;
    unit lv_nearbyTownHall;
    point lv_angleBetweenPoint1;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_overshootDistance = 7.0;
    lv_distanceVariance = 2.0;
    lv_angleVariance = 15.0;

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitCreatedUnit()) == 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnitCreatedUnit()) == "Overlord"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libSwaC_gf_CurrentMap() == "ZLab1")) {
        lv_overshootDistance = 1.0;
        lv_distanceVariance = 0.5;
    }

    lv_nearbyTownHall = UnitGroupClosestToPoint(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Hatchery", "Lair", "Hive", UnitGetOwner(EventUnitCreatedUnit()), -1, RegionCircle(UnitGetPosition(EventUnitCreatedUnit()), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(EventUnitCreatedUnit()));
    if ((lv_nearbyTownHall == null)) {
        return true;
    }

    if ((UnitRallyPointTargetCount(lv_nearbyTownHall, 2) == 0)) {
        return true;
    }

    if ((OrderGetTargetPosition(UnitOrder(EventUnitCreatedUnit(), 0)) != UnitRallyPointTargetPoint(lv_nearbyTownHall, 2, 1))) {
        return true;
    }

    UnitIssueOrder(EventUnitCreatedUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitRallyPointTargetPoint(lv_nearbyTownHall, 2, 1), (lv_overshootDistance + RandomFixed((0.0 - lv_distanceVariance), lv_distanceVariance)), (AngleBetweenPoints(UnitGetPosition(lv_nearbyTownHall), UnitRallyPointTargetPoint(lv_nearbyTownHall, 2, 1)) + RandomFixed((0.0 - lv_angleVariance), lv_angleVariance)))), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_OverlordRally_Init () {
    libSwaC_gt_ZS_OverlordRally = TriggerCreate("libSwaC_gt_ZS_OverlordRally_Func");
    TriggerAddEventUnitCreated(libSwaC_gt_ZS_OverlordRally, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_ZerglingRespawnCheat
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_ZerglingRespawnCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_SwaC_37671CC8"));
    libSwaC_gf_EnableDisableZerglingRespawn(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_ZerglingRespawnCheat_Init () {
    libSwaC_gt_ZS_ZerglingRespawnCheat = TriggerCreate("libSwaC_gt_ZS_ZerglingRespawnCheat_Func");
    TriggerAddEventChatMessage(libSwaC_gt_ZS_ZerglingRespawnCheat, c_playerAny, "ZerglingRespawn", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_Hatchery Primary Search
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_HatcheryPrimarySearch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_distance;
    unitgroup lv_hatcheryGroup;
    unit lv_closestHatchery;
    unit lv_indexHatchery;

    // Automatic Variable Declarations
    unitgroup auto18743804_g;
    int auto18743804_u;

    // Variable Initialization
    lv_distance = 500.0;
    lv_hatcheryGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeBehaviorCount(1, "ZerglingRespawnPrimary", c_techCountCompleteOnly) == 0)) {
        lv_hatcheryGroup = UnitGroup("Hive", 1, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        UnitGroupAddUnitGroup(lv_hatcheryGroup, UnitGroup("Lair", 1, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_hatcheryGroup, UnitGroup("Hatchery", 1, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        auto18743804_g = lv_hatcheryGroup;
        auto18743804_u = UnitGroupCount(auto18743804_g, c_unitCountAll);
        for (;; auto18743804_u -= 1) {
            lv_indexHatchery = UnitGroupUnitFromEnd(auto18743804_g, auto18743804_u);
            if (lv_indexHatchery == null) { break; }
            if ((DistanceBetweenPoints(PlayerStartLocation(1), UnitGetPosition(lv_indexHatchery)) < lv_distance)) {
                lv_distance = DistanceBetweenPoints(PlayerStartLocation(1), UnitGetPosition(lv_indexHatchery));
                lv_closestHatchery = lv_indexHatchery;
            }

        }
        if ((lv_closestHatchery != null)) {
            libSwaC_gf_ZerglingRespawnSetPrimaryHatchery(lv_closestHatchery);
            libSwaC_gv_zS_PrimaryHatchery = lv_closestHatchery;
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_HatcheryPrimarySearch_Init () {
    libSwaC_gt_ZS_HatcheryPrimarySearch = TriggerCreate("libSwaC_gt_ZS_HatcheryPrimarySearch_Func");
    TriggerEnable(libSwaC_gt_ZS_HatcheryPrimarySearch, false);
    TriggerAddEventTimePeriodic(libSwaC_gt_ZS_HatcheryPrimarySearch, 3.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_Hatchery Egg Models
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_HatcheryEggModels_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libSwaC_gv_zS_PrimaryHatchery != null) && (TechTreeUpgradeCount(1, "K5ZerglingRespawn", c_techCountCompleteOnly) == 1)) {
        if ((UnitAbilityChargeInfo(libSwaC_gv_zS_PrimaryHatchery, AbilityCommand("ZerglingRespawnTrain", 0), c_unitAbilChargeCountLeft) > 0.0)) {
            libNtve_gf_SendActorMessageToUnit(libSwaC_gv_zS_PrimaryHatchery, "Signal ZerglingRespawn1On");
        }
        else {
            libNtve_gf_SendActorMessageToUnit(libSwaC_gv_zS_PrimaryHatchery, "Signal ZerglingRespawn1Off");
        }
        if ((UnitAbilityChargeInfo(libSwaC_gv_zS_PrimaryHatchery, AbilityCommand("ZerglingRespawnTrain", 0), c_unitAbilChargeCountLeft) > 2.0)) {
            libNtve_gf_SendActorMessageToUnit(libSwaC_gv_zS_PrimaryHatchery, "Signal ZerglingRespawn2On");
        }
        else {
            libNtve_gf_SendActorMessageToUnit(libSwaC_gv_zS_PrimaryHatchery, "Signal ZerglingRespawn2Off");
        }
        if ((UnitAbilityChargeInfo(libSwaC_gv_zS_PrimaryHatchery, AbilityCommand("ZerglingRespawnTrain", 0), c_unitAbilChargeCountLeft) > 4.0)) {
            libNtve_gf_SendActorMessageToUnit(libSwaC_gv_zS_PrimaryHatchery, "Signal ZerglingRespawn3On");
        }
        else {
            libNtve_gf_SendActorMessageToUnit(libSwaC_gv_zS_PrimaryHatchery, "Signal ZerglingRespawn3Off");
        }
        if ((UnitAbilityChargeInfo(libSwaC_gv_zS_PrimaryHatchery, AbilityCommand("ZerglingRespawnTrain", 0), c_unitAbilChargeCountLeft) > 7.0)) {
            libNtve_gf_SendActorMessageToUnit(libSwaC_gv_zS_PrimaryHatchery, "Signal ZerglingRespawn4On");
        }
        else {
            libNtve_gf_SendActorMessageToUnit(libSwaC_gv_zS_PrimaryHatchery, "Signal ZerglingRespawn4Off");
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_HatcheryEggModels_Init () {
    libSwaC_gt_ZS_HatcheryEggModels = TriggerCreate("libSwaC_gt_ZS_HatcheryEggModels_Func");
    TriggerAddEventPlayerEffectUsed(libSwaC_gt_ZS_HatcheryEggModels, 1, "ZerglingRespawnEggCheck");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_Hatchery Egg Births
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_HatcheryEggBirths_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libSwaC_gv_zS_PrimaryHatchery != null) && (TechTreeUpgradeCount(1, "K5ZerglingRespawn", c_techCountCompleteOnly) == 1)) {
        libNtve_gf_SendActorMessageToUnit(libSwaC_gv_zS_PrimaryHatchery, "Signal ZerglingRespawn1Off");
        libNtve_gf_SendActorMessageToUnit(libSwaC_gv_zS_PrimaryHatchery, "Signal ZerglingRespawn2Off");
        libNtve_gf_SendActorMessageToUnit(libSwaC_gv_zS_PrimaryHatchery, "Signal ZerglingRespawn3Off");
        libNtve_gf_SendActorMessageToUnit(libSwaC_gv_zS_PrimaryHatchery, "Signal ZerglingRespawn4Off");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_HatcheryEggBirths_Init () {
    libSwaC_gt_ZS_HatcheryEggBirths = TriggerCreate("libSwaC_gt_ZS_HatcheryEggBirths_Func");
    TriggerAddEventPlayerEffectUsed(libSwaC_gt_ZS_HatcheryEggBirths, 1, "ZerglingRespawnEggBirth");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_ZerglingRespawnAchievementAdd
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_ZerglingRespawnAchievementAdd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gv_zS_ZerglingRespawnCount += 1;
    AchievementTermQuantitySet(1, "Kerrigan_ZerglingReconstitution", libSwaC_gv_zS_ZerglingRespawnCount);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_ZerglingRespawnAchievementAdd_Init () {
    libSwaC_gt_ZS_ZerglingRespawnAchievementAdd = TriggerCreate("libSwaC_gt_ZS_ZerglingRespawnAchievementAdd_Func");
    TriggerAddEventUnitAbility(libSwaC_gt_ZS_ZerglingRespawnAchievementAdd, null, AbilityCommand("ZerglingRespawnTrain", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_KerriganLifeTooLow
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_KerriganLifeTooLow_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_old;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libSwaC_gv_zS_GameOver == false))) {
            return false;
        }

        if (!((UnitIsAlive(libSwaC_gv_zS_Kerrigan) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_old = libSwaC_gv_zS_KerriganHPBak;
    libSwaC_gv_zS_KerriganHPBak = UnitGetPropertyFixed(libSwaC_gv_zS_Kerrigan, c_unitPropLife, c_unitPropCurrent);
    if ((libSwaC_gv_zS_KerriganHPBak < lv_old) && (UnitGetOwner(EventUnit()) == 1) && (libSwaC_gf_ZS_KerriganHPTooLow() == true) && (libSwaC_gv_zS_KerriganLowHPFlashing == false)) {
        TriggerExecute(libSwaC_gt_ZS_KerriganLowHPFlashing, true, false);
    }
    else {
        libSwaC_gf_ZS_StopKerriganLowHPSound();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_KerriganLifeTooLow_Init () {
    libSwaC_gt_ZS_KerriganLifeTooLow = TriggerCreate("libSwaC_gt_ZS_KerriganLifeTooLow_Func");
    TriggerAddEventUnitProperty(libSwaC_gt_ZS_KerriganLifeTooLow, UnitRefFromVariable("libSwaC_gv_zS_Kerrigan"), c_unitPropLife);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_KerriganDies
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_KerriganDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libSwaC_gv_zS_GameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_ZS_StopKerriganLowHPSound();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_KerriganDies_Init () {
    libSwaC_gt_ZS_KerriganDies = TriggerCreate("libSwaC_gt_ZS_KerriganDies_Func");
    TriggerAddEventUnitDied(libSwaC_gt_ZS_KerriganDies, UnitRefFromVariable("libSwaC_gv_zS_Kerrigan"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_KerriganLowHPFlashing
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_KerriganLowHPFlashing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoA7987FD9_n = 3;
    int autoA7987FD9_i;

    // Actions
    if (!runActions) {
        return true;
    }

    if (((libSwaC_gv_zS_GameOver == true) || (UnitIsAlive(libSwaC_gv_zS_Kerrigan) == false) || (libSwaC_gv_zS_KerriganLowHPFlashing == true))) {
        return true;
    }

    libSwaC_gv_zS_KerriganLowHPFlashing = true;
    TriggerExecute(libSwaC_gt_ZS_StartKerriganLowHPSound, true, false);
    for (autoA7987FD9_i = 1; autoA7987FD9_i <= autoA7987FD9_n; autoA7987FD9_i += 1) {
        if (((libSwaC_gv_zS_GameOver == true) || (libSwaC_gf_ZS_KerriganHPTooLow() == false) || (UnitIsAlive(libSwaC_gv_zS_Kerrigan) == false))) {
            break;
        }

        libSwaC_gf_ZS_CreateKerriganLowHPUI();
        DialogControlFadeTransparency(libSwaC_gv_zS_KerriganLowHPUIImage, PlayerGroupSingle(1), 0.25, 30.0);
        Wait(0.3, c_timeGame);
        DialogControlFadeTransparency(libSwaC_gv_zS_KerriganLowHPUIImage, PlayerGroupSingle(1), 0.625, 100.0);
        Wait(0.8, c_timeGame);
    }
    DialogControlFadeTransparency(libSwaC_gv_zS_KerriganLowHPUIImage, PlayerGroupSingle(1), 0.0, 100.0);
    libSwaC_gv_zS_KerriganLowHPFlashing = false;
    Wait(2.0, c_timeReal);
    if ((libSwaC_gv_zS_KerriganLowHPFlashing == false)) {
        libSwaC_gf_ZS_StopKerriganLowHPSound();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_KerriganLowHPFlashing_Init () {
    libSwaC_gt_ZS_KerriganLowHPFlashing = TriggerCreate("libSwaC_gt_ZS_KerriganLowHPFlashing_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_StartKerriganLowHPSound
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_StartKerriganLowHPSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_LowHealthBegin);
    if ((libSwaC_gv_zS_SoundKerriganLowHealthStart == null)) {
        SoundPlay(SoundLink("UI_LowHealthWarning_Start", -1), PlayerGroupAll(), 100.0, 0.0);
        libSwaC_gv_zS_SoundKerriganLowHealthStart = SoundLastPlayed();
    }

    TriggerExecute(libSwaC_gt_ZS_KerriganLowHPSoundBreathLoop, true, false);
    TriggerExecute(libSwaC_gt_ZS_KerriganLowHPSoundHeartLoop, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_StartKerriganLowHPSound_Init () {
    libSwaC_gt_ZS_StartKerriganLowHPSound = TriggerCreate("libSwaC_gt_ZS_StartKerriganLowHPSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_KerriganLowHPSoundHeartLoop
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_KerriganLowHPSoundHeartLoop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!(((libNtve_gf_PlayerInCinematicMode(1) == false) || (libSwaC_gv_zS_GameOver == true)))) {
        Wait(1.0, c_timeGame);
    }
    if (((libSwaC_gv_zS_GameOver == true) || (libSwaC_gf_ZS_KerriganHPTooLow() == false))) {
        return true;
    }

    if ((libSwaC_gv_zS_SoundKerriganLowHealthHeartBeat == null)) {
        SoundPlay(SoundLink("UI_LowHealthWarning_HeartBeatLoop", -1), PlayerGroupAll(), 100.0, 0.0);
        libSwaC_gv_zS_SoundKerriganLowHealthHeartBeat = SoundLastPlayed();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_KerriganLowHPSoundHeartLoop_Init () {
    libSwaC_gt_ZS_KerriganLowHPSoundHeartLoop = TriggerCreate("libSwaC_gt_ZS_KerriganLowHPSoundHeartLoop_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_KerriganLowHPSoundBreathLoop
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_KerriganLowHPSoundBreathLoop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!(((libNtve_gf_PlayerInCinematicMode(1) == false) || (libSwaC_gv_zS_GameOver == true)))) {
        Wait(1.0, c_timeGame);
    }
    if (((libSwaC_gv_zS_GameOver == true) || (libSwaC_gf_ZS_KerriganHPTooLow() == false))) {
        return true;
    }

    if ((libSwaC_gv_zS_SoundKerriganLowHealthBreath == null)) {
        SoundPlay(SoundLink("UI_LowHealthWarning_BreathLoop", -1), PlayerGroupAll(), 100.0, 0.0);
        libSwaC_gv_zS_SoundKerriganLowHealthBreath = SoundLastPlayed();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_KerriganLowHPSoundBreathLoop_Init () {
    libSwaC_gt_ZS_KerriganLowHPSoundBreathLoop = TriggerCreate("libSwaC_gt_ZS_KerriganLowHPSoundBreathLoop_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_MissionTipClicked
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_MissionTipClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSwaC_gv_zS_MissionHelpButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libSwaC_gv_zS_MissionHelpButtonTipPanel != c_invalidDialogControlId)) {
        if (((libSwaC_gf_CurrentMap() == "ZLab1") || (libSwaC_gf_CurrentMap() == "ZLab2") || (libSwaC_gf_CurrentMap() == "ZSpace1"))) {
            DialogControlInvokeAsString(libSwaC_gv_zS_MissionHelpButtonTipPanel, PlayerGroupAll(), "CloseTip_Terr", null, null, null, null);
        }
        else {
            DialogControlInvokeAsString(libSwaC_gv_zS_MissionHelpButtonTipPanel, PlayerGroupAll(), "CloseTip_Zerg", null, null, null, null);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_MissionTipClicked_Init () {
    libSwaC_gt_ZS_MissionTipClicked = TriggerCreate("libSwaC_gt_ZS_MissionTipClicked_Func");
    TriggerEnable(libSwaC_gt_ZS_MissionTipClicked, false);
    TriggerAddEventDialogControl(libSwaC_gt_ZS_MissionTipClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_Select Larva Button Highlight Update
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_SelectLarvaButtonHighlightUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_highlighted;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        if ((libSwaC_gv_zS_GameOver == true)) {
            return true;
        }

        if ((libSwaC_gv_zS_SelectLarvaHighlight == true) && (TechTreeUnitCount(1, "Larva", c_techCountCompleteOnly) > 0)) {
            if ((lv_highlighted == false)) {
                UISetButtonFaceHighlighted(PlayerGroupAll(), "Larva", true);
                lv_highlighted = true;
            }

        }
        else {
            if ((lv_highlighted == true)) {
                UISetButtonFaceHighlighted(PlayerGroupAll(), "Larva", false);
                lv_highlighted = false;
            }

        }
        Wait(0.5, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_SelectLarvaButtonHighlightUpdate_Init () {
    libSwaC_gt_ZS_SelectLarvaButtonHighlightUpdate = TriggerCreate("libSwaC_gt_ZS_SelectLarvaButtonHighlightUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_FlashArmyButtonHelpTip
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_FlashArmyButtonHelpTip_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogControlInvokeAsText(libSwaC_gv_zS_ArmyButtonTipPanel, PlayerGroupAll(), "PlayArmyTip_Zerg", StringExternal("Param/Value/lib_SwaC_2E4E132D"), null, null, null);
    TriggerEnable(libSwaC_gt_ZS_ArmyButtonUsed, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_FlashArmyButtonHelpTip_Init () {
    libSwaC_gt_ZS_FlashArmyButtonHelpTip = TriggerCreate("libSwaC_gt_ZS_FlashArmyButtonHelpTip_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_ArmyButtonUsed
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_ArmyButtonUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventDialogControl() == libSwaC_gv_zS_ArmyButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogControlInvokeAsText(libSwaC_gv_zS_ArmyButtonTipPanel, PlayerGroupAll(), "CloseArmyTip_Zerg", StringExternal("Param/Value/lib_SwaC_3D4F09CA"), null, null, null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_ArmyButtonUsed_Init () {
    libSwaC_gt_ZS_ArmyButtonUsed = TriggerCreate("libSwaC_gt_ZS_ArmyButtonUsed_Func");
    TriggerEnable(libSwaC_gt_ZS_ArmyButtonUsed, false);
    TriggerAddEventDialogControl(libSwaC_gt_ZS_ArmyButtonUsed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(libSwaC_gt_ZS_ArmyButtonUsed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeHotkeyPressed);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_ArmyButtonMissionInit
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_ArmyButtonMissionInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, false);
    if ((libSwaC_gf_CurrentMap() != "ZLab1") && (libSwaC_gf_CurrentMap() != "ZLab2") && (libSwaC_gf_CurrentMap() != "ZLab3") && (libSwaC_gf_CurrentMap() != "ZExpedition3") && (libSwaC_gf_CurrentMap() != "ZZerus3") && (libSwaC_gf_CurrentMap() != "ZSpace1") && (libSwaC_gf_CurrentMap() != "ZKorhal2")) {
        if ((libHots_gf_DifficultyValueInt2(1, 0, 0) == 1)) {
            Wait(1.0, c_timeGame);
            while (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
                Wait(0.5, c_timeGame);
            }
            Wait(0.5, c_timeGame);
            libSwaC_gf_DisplayArmyButton(false);
            libSwaC_gv_zS_ArmyButtonTipReady = true;
        }
        else {
            UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, true);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_ArmyButtonMissionInit_Init () {
    libSwaC_gt_ZS_ArmyButtonMissionInit = TriggerCreate("libSwaC_gt_ZS_ArmyButtonMissionInit_Func");
    TriggerEnable(libSwaC_gt_ZS_ArmyButtonMissionInit, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_VictoryStat
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_VictoryStat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_panel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_panel = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libSwaC_gv_zS_VictoryStatDlg == c_invalidDialogId)) {
        DialogCreate(1500, 650, c_anchorCenter, 0, 0, true);
        libSwaC_gv_zS_VictoryStatDlg = DialogLastCreated();
        DialogSetImageVisible(DialogLastCreated(), false);
        DialogSetPosition(DialogLastCreated(), c_anchorTop, 0, 0);
        DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "VictoryPanel/VictoryPanelMainPanelTemplate");
        lv_panel = DialogControlLastCreated();
        DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
        DialogControlHookup(lv_panel, c_triggerControlTypePanel, "StatisticListBox");
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 0, 220);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 800, 400);
        DialogControlHookup(lv_panel, c_triggerControlTypeImage, "AchievementBackgroundImage");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlHookup(lv_panel, c_triggerControlTypeAchievement, "AchievementFrame0");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlHookup(lv_panel, c_triggerControlTypeAchievement, "AchievementFrame1");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlHookup(lv_panel, c_triggerControlTypeAchievement, "AchievementFrame2");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlHookup(lv_panel, c_triggerControlTypeLabel, "AchievementHeadingLabel");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlHookup(lv_panel, c_triggerControlTypeImage, "AchievementInnerBackgroundImage");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlHookup(lv_panel, c_triggerControlTypeImage, "BackgroundGradientImage");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlHookup(lv_panel, c_triggerControlTypeImage, "BackgroundImage");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlHookup(lv_panel, c_triggerControlTypeImage, "BackgroundInterlaceImage");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlHookup(lv_panel, c_triggerControlTypePortrait, "BackgroundPortrait");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlHookup(lv_panel, c_triggerControlTypeImage, "BlackMaskImage");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlHookup(lv_panel, c_triggerControlTypeFlash, "MissionBarFlashFrame");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlHookup(lv_panel, c_triggerControlTypeImage, "MissionImageBorderImage");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlHookup(lv_panel, c_triggerControlTypeLabel, "MissionTextLabel");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlHookup(lv_panel, c_triggerControlTypeLabel, "MissionTitleLabel");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlHookup(lv_panel, c_triggerControlTypeLabel, "RewardTextLabel");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlHookup(lv_panel, c_triggerControlTypeLabel, "RewardTitleLabel");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlHookup(lv_panel, c_triggerControlTypeImage, "SummaryBackgroundImage");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlHookup(lv_panel, c_triggerControlTypePanel, "SummaryBackgroundImageContainerFrame");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlHookup(lv_panel, c_triggerControlTypeLabel, "SummaryHeadingLabel");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlHookup(lv_panel, c_triggerControlTypeImage, "SummaryInnerBackgroundImage");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlHookup(lv_panel, c_triggerControlTypeLabel, "TimeTextLabel");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlHookup(lv_panel, c_triggerControlTypeLabel, "TimeTitleLabel");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlHookup(lv_panel, c_triggerControlTypeFlash, "TitleFlashFrame");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlHookup(lv_panel, c_triggerControlTypeLabel, "VictoryTextLabel");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlHookup(lv_panel, c_triggerControlTypeButton, "PlayAgainButton");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlHookup(lv_panel, c_triggerControlTypeButton, "CloseButton");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    }

    DialogSetVisible(libSwaC_gv_zS_VictoryStatDlg, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_VictoryStat_Init () {
    libSwaC_gt_ZS_VictoryStat = TriggerCreate("libSwaC_gt_ZS_VictoryStat_Func");
    TriggerAddEventChatMessage(libSwaC_gt_ZS_VictoryStat, c_playerAny, "VICTORYSTAT", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_VictoryStatOff
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_VictoryStatOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_panel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_panel = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libSwaC_gv_zS_VictoryStatDlg == c_invalidDialogId)) {
        return true;
    }

    DialogSetVisible(libSwaC_gv_zS_VictoryStatDlg, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_VictoryStatOff_Init () {
    libSwaC_gt_ZS_VictoryStatOff = TriggerCreate("libSwaC_gt_ZS_VictoryStatOff_Func");
    TriggerAddEventChatMessage(libSwaC_gt_ZS_VictoryStatOff, c_playerAny, "VICTORYSTATOFF", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_BB_BossHPChanged
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_BB_BossHPChanged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    bool lv_bossSet;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitIsAlive(libSwaC_gv_zS_BB_Boss) == false) || (libSwaC_gv_zS_BB_Boss == null))) {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    else {
        libSwaC_gf_RefreshSingularBossBarSwarmCampaign();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_BB_BossHPChanged_Init () {
    libSwaC_gt_ZS_BB_BossHPChanged = TriggerCreate("libSwaC_gt_ZS_BB_BossHPChanged_Func");
    TriggerEnable(libSwaC_gt_ZS_BB_BossHPChanged, false);
    TriggerAddEventUnitProperty(libSwaC_gt_ZS_BB_BossHPChanged, UnitRefFromVariable("libSwaC_gv_zS_BB_Boss"), c_unitPropLife);
    TriggerAddEventUnitProperty(libSwaC_gt_ZS_BB_BossHPChanged, UnitRefFromVariable("libSwaC_gv_zS_BB_Boss"), c_unitPropShields);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_BB_MouseHoverText
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_BB_MouseHoverText_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoC32D9971_val;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSwaC_gv_zS_BB_BorderImage))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoC32D9971_val = EventDialogControlEventType();
    if (autoC32D9971_val == c_triggerControlEventTypeMouseEnter) {
        DialogControlSetVisible(libSwaC_gv_zS_BB_HpLabel, PlayerGroupAll(), true);
    }
    else if (autoC32D9971_val == c_triggerControlEventTypeMouseExit) {
        DialogControlSetVisible(libSwaC_gv_zS_BB_HpLabel, PlayerGroupAll(), false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_BB_MouseHoverText_Init () {
    libSwaC_gt_ZS_BB_MouseHoverText = TriggerCreate("libSwaC_gt_ZS_BB_MouseHoverText_Func");
    TriggerEnable(libSwaC_gt_ZS_BB_MouseHoverText, false);
    TriggerAddEventDialogControl(libSwaC_gt_ZS_BB_MouseHoverText, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
    TriggerAddEventDialogControl(libSwaC_gt_ZS_BB_MouseHoverText, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_HeroPanelUpdate
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_HeroPanelUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_ZS_UpdateHeroPanel(1);
    libSwaC_gf_ZS_UpdateHeroPanel(2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_HeroPanelUpdate_Init () {
    libSwaC_gt_ZS_HeroPanelUpdate = TriggerCreate("libSwaC_gt_ZS_HeroPanelUpdate_Func");
    TriggerEnable(libSwaC_gt_ZS_HeroPanelUpdate, false);
    TriggerAddEventTimePeriodic(libSwaC_gt_ZS_HeroPanelUpdate, libSwaC_gv_zS_SwarmHeroUIUpdateFrequency, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_SwarmHeroUIUnitDamaged
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_SwarmHeroUIUnitDamaged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_damage;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnit() == libSwaC_gv_zS_SwarmHeroUIUnit[1])) {
        lv_index = 1;
    }
    else if ((EventUnit() == libSwaC_gv_zS_SwarmHeroUIUnit[2])) {
        lv_index = 2;
    }
    else if (true) {
        return true;
    }
    libSwaC_gv_zS_SwarmHeroUIDamage += EventUnitDamageAmount();
    lv_damage = FixedToInt(libSwaC_gv_zS_SwarmHeroUIDamage);
    if ((lv_damage < 1)) {
        return true;
    }

    libSwaC_gv_zS_SwarmHeroUIDamage = 0.0;
    DialogControlSetVisible(libSwaC_gv_zS_SwarmHeroUIDialogDamageTakenImage[lv_index], PlayerGroupAll(), true);
    if ((libSwaC_gv_zS_SwarmHeroUIDamageTimer[lv_index] > 0.0)) {
        DialogControlFadeTransparency(libSwaC_gv_zS_SwarmHeroUIDialogDamageTakenImage[lv_index], PlayerGroupAll(), 0.25, 0.0);
    }

    if ((lv_damage < 5)) {
        if ((libSwaC_gv_zS_SwarmHeroUIDamageTimer[lv_index] <= 0.25)) {
            libSwaC_gv_zS_SwarmHeroUIDamageTimer[lv_index] = 0.26;
            DialogControlFadeTransparency(libSwaC_gv_zS_SwarmHeroUIDialogDamageTakenImage[lv_index], PlayerGroupAll(), 0.25, 0.0);
            libNtve_gf_SetDialogItemText(libSwaC_gv_zS_SwarmHeroUIDialogDamageTakenLabel[lv_index], IntToText(lv_damage), PlayerGroupAll());
            DialogControlSetVisible(libSwaC_gv_zS_SwarmHeroUIDialogDamageTakenLabel[lv_index], PlayerGroupAll(), true);
        }

    }
    else {
        if ((EventUnitDamageAmount() >= 5.0) && (EventUnitDamageAmount() <= 15.0)) {
            if ((libSwaC_gv_zS_SwarmHeroUIDamageTimer[lv_index] <= 0.5)) {
                libSwaC_gv_zS_SwarmHeroUIDamageTimer[lv_index] = 0.51;
                DialogControlFadeTransparency(libSwaC_gv_zS_SwarmHeroUIDialogDamageTakenImage[lv_index], PlayerGroupAll(), 0.5, 0.0);
                libNtve_gf_SetDialogItemText(libSwaC_gv_zS_SwarmHeroUIDialogDamageTakenLabel[lv_index], IntToText(lv_damage), PlayerGroupAll());
                DialogControlSetVisible(libSwaC_gv_zS_SwarmHeroUIDialogDamageTakenLabel[lv_index], PlayerGroupAll(), true);
            }

        }
        else {
            if ((libSwaC_gv_zS_SwarmHeroUIDamageTimer[lv_index] <= 1.0)) {
                libSwaC_gv_zS_SwarmHeroUIDamageTimer[lv_index] = 1.01;
                DialogControlFadeTransparency(libSwaC_gv_zS_SwarmHeroUIDialogDamageTakenImage[lv_index], PlayerGroupAll(), 1.0, 0.0);
                libNtve_gf_SetDialogItemText(libSwaC_gv_zS_SwarmHeroUIDialogDamageTakenLabel[lv_index], IntToText(lv_damage), PlayerGroupAll());
                DialogControlSetVisible(libSwaC_gv_zS_SwarmHeroUIDialogDamageTakenLabel[lv_index], PlayerGroupAll(), true);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_SwarmHeroUIUnitDamaged_Init () {
    libSwaC_gt_ZS_SwarmHeroUIUnitDamaged = TriggerCreate("libSwaC_gt_ZS_SwarmHeroUIUnitDamaged_Func");
    TriggerEnable(libSwaC_gt_ZS_SwarmHeroUIUnitDamaged, false);
    TriggerAddEventUnitDamaged(libSwaC_gt_ZS_SwarmHeroUIUnitDamaged, UnitRefFromVariable("libSwaC_gv_zS_SwarmHeroUIUnit[1]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(libSwaC_gt_ZS_SwarmHeroUIUnitDamaged, UnitRefFromVariable("libSwaC_gv_zS_SwarmHeroUIUnit[2]"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_SwarmHeroUIUnitVitalChange
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_SwarmHeroUIUnitVitalChange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_damageBar;
    int lv_damageBarWidth;
    int lv_damageBarHeight;

    // Automatic Variable Declarations
    unit auto38CA33C7_val;
    int auto9FAC268D_val;

    // Variable Initialization
    lv_damageBar = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((EventUnitPropertyChangeFixed() < 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto38CA33C7_val = EventUnit();
    if (auto38CA33C7_val == libSwaC_gv_zS_SwarmHeroUIUnit[1]) {
        lv_index = 1;
    }
    else if (auto38CA33C7_val == libSwaC_gv_zS_SwarmHeroUIUnit[2]) {
        lv_index = 2;
    }
    else {
        return true;
    }
    auto9FAC268D_val = EventUnitProperty();
    if (auto9FAC268D_val == c_unitPropEnergy) {
        DialogControlCreateInPanelFromTemplate(libSwaC_gv_zS_SwarmHeroUIPanel[lv_index], c_triggerControlTypeImage, "HotS_GameUnitFrame/HeroEnergyBarDamageTemplate/DamageBar");
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, libSwaC_gv_zS_SwarmHeroUIDialogEnergyBarImage[lv_index], c_anchorLeft, 0, 0);
        lv_damageBarWidth = FixedToInt((((UnitGetPropertyFixed(libSwaC_gv_zS_SwarmHeroUIUnit[lv_index], c_unitPropEnergy, c_unitPropCurrent) - EventUnitPropertyChangeFixed()) / UnitGetPropertyFixed(libSwaC_gv_zS_SwarmHeroUIUnit[lv_index], c_unitPropEnergyMax, c_unitPropCurrent)) * 224.0));
        lv_damageBarWidth = MaxI(1, lv_damageBarWidth);
        lv_damageBarHeight = DialogControlGetHeight(libSwaC_gv_zS_SwarmHeroUIDialogEnergyBarImage[lv_index], 1);
    }
    else if (auto9FAC268D_val == c_unitPropLife) {
        DialogControlCreateInPanelFromTemplate(libSwaC_gv_zS_SwarmHeroUIPanel[lv_index], c_triggerControlTypeImage, "HotS_GameUnitFrame/HeroHealthBarDamageTemplate/DamageBar");
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, libSwaC_gv_zS_SwarmHeroUIDialogHealthBarImage[lv_index], c_anchorLeft, 0, 0);
        lv_damageBarWidth = FixedToInt((((UnitGetPropertyFixed(libSwaC_gv_zS_SwarmHeroUIUnit[lv_index], c_unitPropLife, c_unitPropCurrent) - EventUnitPropertyChangeFixed()) / UnitGetPropertyFixed(libSwaC_gv_zS_SwarmHeroUIUnit[lv_index], c_unitPropLifeMax, c_unitPropCurrent)) * 224.0));
        lv_damageBarWidth = MaxI(1, lv_damageBarWidth);
        lv_damageBarHeight = DialogControlGetHeight(libSwaC_gv_zS_SwarmHeroUIDialogHealthBarImage[lv_index], 1);
    }
    else {
    }
    lv_damageBar = DialogControlLastCreated();
    libNtve_gf_SetDialogItemRenderPriority(lv_damageBar, 511, PlayerGroupAll());
    DialogControlSetVisible(lv_damageBar, PlayerGroupAll(), true);
    DialogControlSetSize(lv_damageBar, PlayerGroupAll(), lv_damageBarWidth, lv_damageBarHeight);
    Wait(1.0, c_timeReal);
    DialogControlFadeTransparency(lv_damageBar, PlayerGroupAll(), 1.0, 100.0);
    Wait(1.1, c_timeReal);
    DialogControlDestroy(lv_damageBar);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_SwarmHeroUIUnitVitalChange_Init () {
    libSwaC_gt_ZS_SwarmHeroUIUnitVitalChange = TriggerCreate("libSwaC_gt_ZS_SwarmHeroUIUnitVitalChange_Func");
    TriggerEnable(libSwaC_gt_ZS_SwarmHeroUIUnitVitalChange, false);
    TriggerAddEventUnitProperty(libSwaC_gt_ZS_SwarmHeroUIUnitVitalChange, UnitRefFromVariable("libSwaC_gv_zS_SwarmHeroUIUnit[1]"), c_unitPropLife);
    TriggerAddEventUnitProperty(libSwaC_gt_ZS_SwarmHeroUIUnitVitalChange, UnitRefFromVariable("libSwaC_gv_zS_SwarmHeroUIUnit[2]"), c_unitPropLife);
    TriggerAddEventUnitProperty(libSwaC_gt_ZS_SwarmHeroUIUnitVitalChange, UnitRefFromVariable("libSwaC_gv_zS_SwarmHeroUIUnit[1]"), c_unitPropEnergy);
    TriggerAddEventUnitProperty(libSwaC_gt_ZS_SwarmHeroUIUnitVitalChange, UnitRefFromVariable("libSwaC_gv_zS_SwarmHeroUIUnit[2]"), c_unitPropEnergy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_SwarmHeroUIMouseHoverText
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_MouseHoverText_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto2B9A9574_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == libSwaC_gv_zS_SwarmHeroUIDialogBorderImage[1]) || (EventDialogControl() == libSwaC_gv_zS_SwarmHeroUIDialogBorderImageNoEnergy[1]) || (EventDialogControl() == libSwaC_gv_zS_SwarmHeroUIDialogBorderImage[2]) || (EventDialogControl() == libSwaC_gv_zS_SwarmHeroUIDialogBorderImageNoEnergy[2]) || (EventDialogControl() == libSwaC_gv_zS_SwarmHeroUIDialogButton[1]) || (EventDialogControl() == libSwaC_gv_zS_SwarmHeroUIDialogButton[2])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((EventDialogControl() == libSwaC_gv_zS_SwarmHeroUIDialogBorderImage[1]) || (EventDialogControl() == libSwaC_gv_zS_SwarmHeroUIDialogBorderImageNoEnergy[1]) || (EventDialogControl() == libSwaC_gv_zS_SwarmHeroUIDialogButton[1]))) {
        lv_index = 1;
    }
    else {
        if (((EventDialogControl() == libSwaC_gv_zS_SwarmHeroUIDialogBorderImage[2]) || (EventDialogControl() == libSwaC_gv_zS_SwarmHeroUIDialogBorderImageNoEnergy[2]) || (EventDialogControl() == libSwaC_gv_zS_SwarmHeroUIDialogButton[2]))) {
            lv_index = 2;
        }
        else {
            return true;
        }
    }
    auto2B9A9574_val = EventDialogControlEventType();
    if (auto2B9A9574_val == c_triggerControlEventTypeMouseEnter) {
        DialogControlSetVisible(libSwaC_gv_zS_SwarmHeroUIDialogHealthLabel[lv_index], PlayerGroupAll(), true);
        if ((UnitGetPropertyFixed(libSwaC_gv_zS_SwarmHeroUIUnit[lv_index], c_unitPropEnergyMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(libSwaC_gv_zS_SwarmHeroUIDialogEnergyLabel[lv_index], PlayerGroupAll(), true);
        }

    }
    else if (auto2B9A9574_val == c_triggerControlEventTypeMouseExit) {
        DialogControlSetVisible(libSwaC_gv_zS_SwarmHeroUIDialogHealthLabel[lv_index], PlayerGroupAll(), false);
        DialogControlSetVisible(libSwaC_gv_zS_SwarmHeroUIDialogEnergyLabel[lv_index], PlayerGroupAll(), false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_MouseHoverText_Init () {
    libSwaC_gt_ZS_MouseHoverText = TriggerCreate("libSwaC_gt_ZS_MouseHoverText_Func");
    TriggerEnable(libSwaC_gt_ZS_MouseHoverText, false);
    TriggerAddEventDialogControl(libSwaC_gt_ZS_MouseHoverText, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
    TriggerAddEventDialogControl(libSwaC_gt_ZS_MouseHoverText, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Swarm Ping Sound
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_SwarmPingSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if (((libSwaC_gf_CurrentMap() == "ZLab1") || (libSwaC_gf_CurrentMap() == "ZLab2") || (libSwaC_gf_CurrentMap() == "ZSpace1"))) {
        SoundPlay(SoundLink("UI_TerranPing", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(SoundLengthSync(SoundLink("UI_TerranPing", -1)), c_timeReal);
    }
    else {
        SoundPlay(SoundLink("UI_ZergWarningPing", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(SoundLengthSync(SoundLink("UI_ZergWarningPing", -1)), c_timeReal);
    }
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_SwarmPingSound_Init () {
    libSwaC_gt_SwarmPingSound = TriggerCreate("libSwaC_gt_SwarmPingSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_CamStatsGameLoaded
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_CamStatsGameLoaded_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_missionIndex;
    int lv_difficultyIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if (((libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindMission) == true) || (libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindUpgrade) == true))) {
        lv_missionIndex = libSwaC_gf_ZS_MissionIndex(libSwaC_gf_CurrentMap());
        lv_difficultyIndex = libSwaC_gf_ZS_DifficultyIndex(PlayerDifficulty(1));
        libSwaC_gv_zSX_CamStatsMissionLoad[lv_missionIndex][lv_difficultyIndex] += 1;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_CamStatsGameLoaded_Init () {
    libSwaC_gt_ZS_CamStatsGameLoaded = TriggerCreate("libSwaC_gt_ZS_CamStatsGameLoaded_Func");
    TriggerAddEventLoadGameDone(libSwaC_gt_ZS_CamStatsGameLoaded);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_CamStatsHelpOpened
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_CamStatsHelpOpened_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_missionIndex;
    int lv_difficultyIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSwaC_gv_zS_MissionHelpButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindMission) == true) || (libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindUpgrade) == true))) {
        lv_missionIndex = libSwaC_gf_ZS_MissionIndex(libSwaC_gf_CurrentMap());
        lv_difficultyIndex = libSwaC_gf_ZS_DifficultyIndex(PlayerDifficulty(1));
        libSwaC_gv_zSX_CamStatsHelpUsed[lv_missionIndex][lv_difficultyIndex] += 1;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_CamStatsHelpOpened_Init () {
    libSwaC_gt_ZS_CamStatsHelpOpened = TriggerCreate("libSwaC_gt_ZS_CamStatsHelpOpened_Func");
    TriggerAddEventDialogControl(libSwaC_gt_ZS_CamStatsHelpOpened, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_CollectCampaignStatsData(MisisonVictory)
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_CollectCampaignStatsDataMisisonVictory_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_indexMission;
    int lv_missionIndex;
    int lv_difficultyIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if (((libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindMission) == true) || (libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindUpgrade) == true))) {
        lv_missionIndex = libSwaC_gf_ZS_MissionIndex(libSwaC_gf_CurrentMap());
        lv_difficultyIndex = libSwaC_gf_ZS_DifficultyIndex(PlayerDifficulty(1));
        libSwaC_gv_zSX_CamStatsMissionCompleted[lv_missionIndex][lv_difficultyIndex] += 1;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_CollectCampaignStatsDataMisisonVictory_Init () {
    libSwaC_gt_ZS_CollectCampaignStatsDataMisisonVictory = TriggerCreate("libSwaC_gt_ZS_CollectCampaignStatsDataMisisonVictory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_CollectCampaignStatsData(MisisonDefeat)
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_CollectCampaignStatsDataMisisonDefeat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_indexMission;
    int lv_missionIndex;
    int lv_difficultyIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindMission) == true)) {
        lv_missionIndex = libSwaC_gf_ZS_MissionIndex(libSwaC_gf_CurrentMap());
        lv_difficultyIndex = libSwaC_gf_ZS_DifficultyIndex(PlayerDifficulty(1));
        libSwaC_gv_zSX_CamStatsMissionDefeated[lv_missionIndex][lv_difficultyIndex] += 1;
        if ((UnitGroupCount(UnitGroup(null, 1, RegionPlayableMap(), UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0)) {
            libSwaC_gv_zSX_CamStatsMissionDefeatedBaseDied[lv_missionIndex][lv_difficultyIndex] += 1;
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_CollectCampaignStatsDataMisisonDefeat_Init () {
    libSwaC_gt_ZS_CollectCampaignStatsDataMisisonDefeat = TriggerCreate("libSwaC_gt_ZS_CollectCampaignStatsDataMisisonDefeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_CollectCampaignStatsData(MisisonAbort)
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_CollectCampaignStatsDataMisisonAbort_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_indexMission;
    int lv_missionIndex;
    int lv_difficultyIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if (((libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindMission) == true) || (libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindUpgrade) == true))) {
        lv_missionIndex = libSwaC_gf_ZS_MissionIndex(libSwaC_gf_CurrentMap());
        lv_difficultyIndex = libSwaC_gf_ZS_DifficultyIndex(PlayerDifficulty(1));
        libSwaC_gv_zSX_CamStatsMissionAborted[lv_missionIndex][lv_difficultyIndex] += 1;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_CollectCampaignStatsDataMisisonAbort_Init () {
    libSwaC_gt_ZS_CollectCampaignStatsDataMisisonAbort = TriggerCreate("libSwaC_gt_ZS_CollectCampaignStatsDataMisisonAbort_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_CollectCampaignStatsData(MisisonStart)
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_CollectCampaignStatsDataMisisonStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_indexMission;
    int lv_missionIndex;
    int lv_difficultyIndex;
    string lv_lastLocation;
    string lv_missionInitial;
    string lv_indexArmyCategory;
    string lv_indexArmyUpgrade;
    string lv_activeArmyUpgrade;
    string lv_indexArmyUnit;
    string lv_evolutionUnit;
    int lv_indexTier;
    string lv_indexKerriganAbility;
    string lv_activeKerriganAbility;

    // Automatic Variable Declarations
    int auto4F61B3D7_ae;
    int auto4F61B3D7_ai;
    int autoE4F30707_ae;
    int autoE4F30707_ai;
    int autoA89F8C94_ae;
    int autoA89F8C94_ai;
    int auto39B76E95_ae;
    int auto39B76E95_ai;
    int auto2F3541B5_ae;
    int auto2F3541B5_ai;
    const int auto6DCBEC19_ae = libSwaC_gv_zSC_KerriganAbilityTiers;
    const int auto6DCBEC19_ai = 1;

    // Variable Initialization
    lv_lastLocation = "";
    lv_missionInitial = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_missionIndex = libSwaC_gf_ZS_MissionIndex(libSwaC_gf_CurrentMap());
    lv_difficultyIndex = libSwaC_gf_ZS_DifficultyIndex(PlayerDifficulty(1));
    if (((libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindMission) == true) || (libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindUpgrade) == true))) {
        libSwaC_gv_zSX_CamStatsMissionStarted[lv_missionIndex][lv_difficultyIndex] += 1;
    }

    if ((libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindMission) == true)) {
        if ((libSwaC_gv_zSX_CamStatsLastDifficulty[lv_missionIndex] > 0)) {
            if ((lv_difficultyIndex > libSwaC_gv_zSX_CamStatsLastDifficulty[lv_missionIndex])) {
                libSwaC_gv_zSX_CamStatsDifficultyUp[lv_missionIndex] += 1;
            }
            else {
                if ((lv_difficultyIndex < libSwaC_gv_zSX_CamStatsLastDifficulty[lv_missionIndex])) {
                    libSwaC_gv_zSX_CamStatsDifficultyDown[lv_missionIndex] += 1;
                }

            }
        }

        libSwaC_gv_zSX_CamStatsLastDifficulty[lv_missionIndex] = libSwaC_gf_ZS_DifficultyIndex(PlayerDifficulty(1));
    }

    if (((libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindMission) == true) || (libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindUpgrade) == true)) && (libSwaC_gf_CurrentMissionIsSimulation() == false)) {
        lv_missionInitial = libSwaC_gf_ZS_MissionInitial(libSwaC_gf_CurrentMap());
        if ((StringLength(libSwaC_gv_zSX_CamStatsMisisonOrder) > 0)) {
            lv_lastLocation = StringSub(libSwaC_gv_zSX_CamStatsMisisonOrder, StringLength(libSwaC_gv_zSX_CamStatsMisisonOrder), StringLength(libSwaC_gv_zSX_CamStatsMisisonOrder));
        }
        else {
            lv_lastLocation = "";
        }
        if ((StringEqual(lv_missionInitial, lv_lastLocation, c_stringCase) == false)) {
            libSwaC_gv_zSX_CamStatsMisisonOrder = (libSwaC_gv_zSX_CamStatsMisisonOrder + lv_missionInitial);
        }

    }

    if ((libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindMission) == true)) {
        if ((libSwaC_gv_zSX_CamStatsArmyUpgradesCount[lv_missionIndex][lv_difficultyIndex] < libSwaC_gv_zSC_CamStatsTechMaxCount)) {
            libSwaC_gv_zSX_CamStatsArmyUpgradesCount[lv_missionIndex][lv_difficultyIndex] += 1;
            libSwaC_gv_zSX_CamStatsArmyUpgrades[lv_missionIndex][lv_difficultyIndex][libSwaC_gv_zSX_CamStatsArmyUpgradesCount[lv_missionIndex][lv_difficultyIndex]] = "";
            auto4F61B3D7_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
            auto4F61B3D7_ai = 1;
            while (auto4F61B3D7_ai <= auto4F61B3D7_ae) {
                lv_indexArmyCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto4F61B3D7_ai);
                if ((libSwaC_gf_ZS_StoryArmyCategoryUsedInUI(lv_indexArmyCategory) == true) && (libSwaC_gf_StoryArmyCategoryStateCheck(lv_indexArmyCategory, c_armyCategoryStateUnlocked) == true)) {
                    lv_activeArmyUpgrade = null;
                    autoE4F30707_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexArmyCategory, "ArmyUpgradeArray", 1);
                    autoE4F30707_ai = 1;
                    while (autoE4F30707_ai <= autoE4F30707_ae) {
                        lv_indexArmyUpgrade = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexArmyCategory, "ArmyUpgradeArray["+IntToString(autoE4F30707_ai-1)+"]", 1);
                        if ((libSwaC_gf_ZS_StoryArmyUpgradeState(lv_indexArmyUpgrade) == c_armyUpgradeStatePurchased)) {
                            lv_activeArmyUpgrade = lv_indexArmyUpgrade;
                            break;
                        }

                        autoE4F30707_ai = autoE4F30707_ai + 1;
                    }
                    libSwaC_gv_zSX_CamStatsArmyUpgrades[lv_missionIndex][lv_difficultyIndex][libSwaC_gv_zSX_CamStatsArmyUpgradesCount[lv_missionIndex][lv_difficultyIndex]] = (libSwaC_gv_zSX_CamStatsArmyUpgrades[lv_missionIndex][lv_difficultyIndex][libSwaC_gv_zSX_CamStatsArmyUpgradesCount[lv_missionIndex][lv_difficultyIndex]] + " " + (lv_indexArmyCategory) + "(" + (lv_activeArmyUpgrade) + ")");
                }

                auto4F61B3D7_ai = auto4F61B3D7_ai + 1;
            }
        }

    }

    if ((libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindMission) == true)) {
        if ((libSwaC_gv_zSX_CamStatsArmyUpgradesCount[lv_missionIndex][lv_difficultyIndex] < libSwaC_gv_zSC_CamStatsTechMaxCount)) {
            libSwaC_gv_zSX_CamStatsArmyUpgradesCount[lv_missionIndex][lv_difficultyIndex] += 1;
            libSwaC_gv_zSX_CamStatsArmyUpgrades[lv_missionIndex][lv_difficultyIndex][libSwaC_gv_zSX_CamStatsArmyUpgradesCount[lv_missionIndex][lv_difficultyIndex]] = "";
            autoA89F8C94_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
            autoA89F8C94_ai = 1;
            while (autoA89F8C94_ai <= autoA89F8C94_ae) {
                lv_indexArmyCategory = CatalogEntryGet(c_gameCatalogArmyCategory, autoA89F8C94_ai);
                if ((libSwaC_gf_ZS_StoryArmyCategoryUsedInUI(lv_indexArmyCategory) == true) && (libSwaC_gf_StoryArmyCategoryStateCheck(lv_indexArmyCategory, c_armyCategoryStateUnlocked) == true) && (libSwaC_gf_ZS_StoryArmyCategoryPurchasedUnit(lv_indexArmyCategory) != null)) {
                    lv_activeArmyUpgrade = null;
                    auto39B76E95_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexArmyCategory, "ArmyUpgradeArray", 1);
                    auto39B76E95_ai = 1;
                    while (auto39B76E95_ai <= auto39B76E95_ae) {
                        lv_indexArmyUpgrade = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexArmyCategory, "ArmyUpgradeArray["+IntToString(auto39B76E95_ai-1)+"]", 1);
                        if ((libSwaC_gf_ZS_StoryArmyUpgradeState(lv_indexArmyUpgrade) == c_armyUpgradeStatePurchased)) {
                            lv_activeArmyUpgrade = lv_indexArmyUpgrade;
                            break;
                        }

                        auto39B76E95_ai = auto39B76E95_ai + 1;
                    }
                    libSwaC_gv_zSX_CamStatsArmyUpgrades[lv_missionIndex][lv_difficultyIndex][libSwaC_gv_zSX_CamStatsArmyUpgradesCount[lv_missionIndex][lv_difficultyIndex]] = (libSwaC_gv_zSX_CamStatsArmyUpgrades[lv_missionIndex][lv_difficultyIndex][libSwaC_gv_zSX_CamStatsArmyUpgradesCount[lv_missionIndex][lv_difficultyIndex]] + " " + (lv_indexArmyCategory) + "(" + (lv_activeArmyUpgrade) + ")");
                }

                autoA89F8C94_ai = autoA89F8C94_ai + 1;
            }
        }

    }

    if ((libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindMission) == true)) {
        if ((libSwaC_gv_zSX_CamStatsEvolutionsCount[lv_missionIndex][lv_difficultyIndex] < libSwaC_gv_zSC_CamStatsTechMaxCount)) {
            libSwaC_gv_zSX_CamStatsEvolutionsCount[lv_missionIndex][lv_difficultyIndex] += 1;
            libSwaC_gv_zSX_CamStatsEvolutions[lv_missionIndex][lv_difficultyIndex][libSwaC_gv_zSX_CamStatsEvolutionsCount[lv_missionIndex][lv_difficultyIndex]] = "";
            auto2F3541B5_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
            auto2F3541B5_ai = 1;
            while (auto2F3541B5_ai <= auto2F3541B5_ae) {
                lv_indexArmyCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto2F3541B5_ai);
                if ((libSwaC_gf_ZS_StoryArmyCategoryUsedInUI(lv_indexArmyCategory) == true) && (libSwaC_gf_StoryArmyCategoryStateCheck(lv_indexArmyCategory, c_armyCategoryStateUnlocked) == true)) {
                    if ((libSwaC_gf_StoryArmyCategoryEvolutionMission(lv_indexArmyCategory) != null) && (libSwaC_gf_MissionStatusCheck(libSwaC_gf_StoryArmyCategoryEvolutionMission(lv_indexArmyCategory), libSwaC_ge_MissionStatus_Locked) == false)) {
                        lv_evolutionUnit = libSwaC_gf_ZS_StoryArmyCategoryPurchasedUnit(lv_indexArmyCategory);
                        libSwaC_gv_zSX_CamStatsEvolutions[lv_missionIndex][lv_difficultyIndex][libSwaC_gv_zSX_CamStatsEvolutionsCount[lv_missionIndex][lv_difficultyIndex]] = (libSwaC_gv_zSX_CamStatsEvolutions[lv_missionIndex][lv_difficultyIndex][libSwaC_gv_zSX_CamStatsEvolutionsCount[lv_missionIndex][lv_difficultyIndex]] + " " + (lv_indexArmyCategory) + "(" + (lv_evolutionUnit) + ")");
                    }

                }

                auto2F3541B5_ai = auto2F3541B5_ai + 1;
            }
        }

    }

    if ((libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindMission) == true) && (libSwaC_gf_MissionStatusCheck("ZLab3", libSwaC_ge_MissionStatus_Completed) == true)) {
        if ((libSwaC_gv_zSX_CamStatsKerriganCount[lv_missionIndex][lv_difficultyIndex] < libSwaC_gv_zSC_CamStatsTechMaxCount)) {
            libSwaC_gv_zSX_CamStatsKerriganCount[lv_missionIndex][lv_difficultyIndex] += 1;
            libSwaC_gv_zSX_CamStatsKerrigan[lv_missionIndex][lv_difficultyIndex][libSwaC_gv_zSX_CamStatsKerriganCount[lv_missionIndex][lv_difficultyIndex]] = ("Level " + IntToString(libSwaC_gf_StoryKerriganLevel()) + ":");
            lv_indexTier = 1;
            for ( ; ( (auto6DCBEC19_ai >= 0 && lv_indexTier <= auto6DCBEC19_ae) || (auto6DCBEC19_ai < 0 && lv_indexTier >= auto6DCBEC19_ae) ) ; lv_indexTier += auto6DCBEC19_ai ) {
                if ((libSwaC_gf_ZS_KerriganTierCost2(lv_indexTier) == false)) {
                    break;
                }

                if ((libSwaC_gv_zSX_KerriganTechTiers[lv_indexTier] > 0)) {
                    lv_activeKerriganAbility = libSwaC_gv_zS_KerriganTechTierItems[lv_indexTier][libSwaC_gv_zSX_KerriganTechTiers[lv_indexTier]];
                }
                else {
                    lv_activeKerriganAbility = null;
                }
                libSwaC_gv_zSX_CamStatsKerrigan[lv_missionIndex][lv_difficultyIndex][libSwaC_gv_zSX_CamStatsKerriganCount[lv_missionIndex][lv_difficultyIndex]] = (libSwaC_gv_zSX_CamStatsKerrigan[lv_missionIndex][lv_difficultyIndex][libSwaC_gv_zSX_CamStatsKerriganCount[lv_missionIndex][lv_difficultyIndex]] + " " + IntToString(lv_indexTier) + "(" + (lv_activeKerriganAbility) + ")");
            }
        }

    }

    if ((StringLength(libSwaC_gv_zSX_CamStatsWeaponArmorUpgrades) > 0)) {
        libSwaC_gv_zSX_CamStatsWeaponArmorUpgrades = (libSwaC_gv_zSX_CamStatsWeaponArmorUpgrades + " | ");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_CollectCampaignStatsDataMisisonStart_Init () {
    libSwaC_gt_ZS_CollectCampaignStatsDataMisisonStart = TriggerCreate("libSwaC_gt_ZS_CollectCampaignStatsDataMisisonStart_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_CampaignStatsUnitCreated
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_CampaignStatsUnitCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_iD;
    int lv_count;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_iD = "";

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
            return false;
        }

        if (!((libSwaC_gv_zS_GameOver == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnitCreatedUnit(), 1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitCreatedUnit()) != "Larva"))) {
            return false;
        }

        if (!(((EventUnitCreatedAbil() != null) || (EventUnitCreatedBehavior() != null)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_iD = ("CamStats_" + (UnitGetType(EventUnitCreatedUnit())));
    lv_count = DataTableGetInt(true, lv_iD);
    if ((lv_count == 0)) {
        if ((libSwaC_gv_zSX_CamStatsUnitCreatedCount >= libSwaC_gv_zSC_CamStatsUnitCreatedCountMax)) {
            return true;
        }

        libSwaC_gv_zSX_CamStatsUnitCreatedCount += 1;
        libSwaC_gv_zSX_CamStatsUnitCreatedUnits[libSwaC_gv_zSX_CamStatsUnitCreatedCount] = UnitGetType(EventUnitCreatedUnit());
    }

    lv_count += 1;
    DataTableSetInt(true, lv_iD, lv_count);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_CampaignStatsUnitCreated_Init () {
    libSwaC_gt_ZS_CampaignStatsUnitCreated = TriggerCreate("libSwaC_gt_ZS_CampaignStatsUnitCreated_Func");
    TriggerEnable(libSwaC_gt_ZS_CampaignStatsUnitCreated, false);
    TriggerAddEventUnitCreated(libSwaC_gt_ZS_CampaignStatsUnitCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_CampaignStatsWeaponArmorUpgrades
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_CampaignStatsWeaponArmorUpgrades_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string autoBDFFA767_val;

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
            return false;
        }

        if (!((libSwaC_gv_zS_GameOver == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringLength(libSwaC_gv_zSX_CamStatsWeaponArmorUpgrades) > 150)) {
        return true;
    }

    autoBDFFA767_val = libNtve_gf_TriggeringProgressUpgrade();
    if (autoBDFFA767_val == "ZergMeleeWeaponsLevel1") {
        libSwaC_gv_zSX_CamStatsWeaponArmorUpgrades = (libSwaC_gv_zSX_CamStatsWeaponArmorUpgrades + "M1");
    }
    else if (autoBDFFA767_val == "ZergMeleeWeaponsLevel2") {
        libSwaC_gv_zSX_CamStatsWeaponArmorUpgrades = (libSwaC_gv_zSX_CamStatsWeaponArmorUpgrades + "M2");
    }
    else if (autoBDFFA767_val == "ZergMeleeWeaponsLevel3") {
        libSwaC_gv_zSX_CamStatsWeaponArmorUpgrades = (libSwaC_gv_zSX_CamStatsWeaponArmorUpgrades + "M3");
    }
    else if (autoBDFFA767_val == "ZergMissileWeaponsLevel1") {
        libSwaC_gv_zSX_CamStatsWeaponArmorUpgrades = (libSwaC_gv_zSX_CamStatsWeaponArmorUpgrades + "R1");
    }
    else if (autoBDFFA767_val == "ZergMissileWeaponsLevel2") {
        libSwaC_gv_zSX_CamStatsWeaponArmorUpgrades = (libSwaC_gv_zSX_CamStatsWeaponArmorUpgrades + "R2");
    }
    else if (autoBDFFA767_val == "ZergMissileWeaponsLevel3") {
        libSwaC_gv_zSX_CamStatsWeaponArmorUpgrades = (libSwaC_gv_zSX_CamStatsWeaponArmorUpgrades + "R3");
    }
    else if (autoBDFFA767_val == "ZergFlyerWeaponsLevel1") {
        libSwaC_gv_zSX_CamStatsWeaponArmorUpgrades = (libSwaC_gv_zSX_CamStatsWeaponArmorUpgrades + "F1");
    }
    else if (autoBDFFA767_val == "ZergFlyerWeaponsLevel2") {
        libSwaC_gv_zSX_CamStatsWeaponArmorUpgrades = (libSwaC_gv_zSX_CamStatsWeaponArmorUpgrades + "F2");
    }
    else if (autoBDFFA767_val == "ZergFlyerWeaponsLevel3") {
        libSwaC_gv_zSX_CamStatsWeaponArmorUpgrades = (libSwaC_gv_zSX_CamStatsWeaponArmorUpgrades + "F3");
    }
    else if (autoBDFFA767_val == "ZergGroundArmorsLevel1") {
        libSwaC_gv_zSX_CamStatsWeaponArmorUpgrades = (libSwaC_gv_zSX_CamStatsWeaponArmorUpgrades + "G1");
    }
    else if (autoBDFFA767_val == "ZergGroundArmorsLevel2") {
        libSwaC_gv_zSX_CamStatsWeaponArmorUpgrades = (libSwaC_gv_zSX_CamStatsWeaponArmorUpgrades + "G2");
    }
    else if (autoBDFFA767_val == "ZergGroundArmorsLevel3") {
        libSwaC_gv_zSX_CamStatsWeaponArmorUpgrades = (libSwaC_gv_zSX_CamStatsWeaponArmorUpgrades + "G3");
    }
    else if (autoBDFFA767_val == "ZergFlyerWeaponsLevel1") {
        libSwaC_gv_zSX_CamStatsWeaponArmorUpgrades = (libSwaC_gv_zSX_CamStatsWeaponArmorUpgrades + "A1");
    }
    else if (autoBDFFA767_val == "ZergFlyerWeaponsLevel2") {
        libSwaC_gv_zSX_CamStatsWeaponArmorUpgrades = (libSwaC_gv_zSX_CamStatsWeaponArmorUpgrades + "A2");
    }
    else if (autoBDFFA767_val == "ZergFlyerWeaponsLevel3") {
        libSwaC_gv_zSX_CamStatsWeaponArmorUpgrades = (libSwaC_gv_zSX_CamStatsWeaponArmorUpgrades + "A3");
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_CampaignStatsWeaponArmorUpgrades_Init () {
    libSwaC_gt_ZS_CampaignStatsWeaponArmorUpgrades = TriggerCreate("libSwaC_gt_ZS_CampaignStatsWeaponArmorUpgrades_Func");
    TriggerEnable(libSwaC_gt_ZS_CampaignStatsWeaponArmorUpgrades, false);
    TriggerAddEventUnitResearchProgress(libSwaC_gt_ZS_CampaignStatsWeaponArmorUpgrades, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_LoadCampaignStatsData
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_LoadCampaignStatsData_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv__SectionName;
    string lv_indexMission;
    int lv_missionIndex;
    int lv_difficultyIndex;
    int lv_index;

    // Automatic Variable Declarations
    int autoF7920733_ae;
    int autoF7920733_ai;
    const int auto96B82C39_ae = libSwaC_gv_zSC_DifficultyCount;
    const int auto96B82C39_ai = 1;
    int autoECF158C5_ae;
    int autoECF158C5_ai;
    const int auto49D4F583_ae = libSwaC_gv_zSC_DifficultyCount;
    const int auto49D4F583_ai = 1;
    int auto39637701_ae;
    int auto39637701_ai;
    const int auto0DA38A62_ae = libSwaC_gv_zSC_DifficultyCount;
    const int auto0DA38A62_ai = 1;
    int auto5C7EDDC3_ae;
    int auto5C7EDDC3_ai;
    const int autoB924C073_ae = libSwaC_gv_zSC_DifficultyCount;
    const int autoB924C073_ai = 1;
    int autoFDD13019_ae;
    int autoFDD13019_ai;
    const int autoB461AC88_ae = libSwaC_gv_zSC_DifficultyCount;
    const int autoB461AC88_ai = 1;
    int auto831EC91E_ae;
    int auto831EC91E_ai;
    const int autoA881DEAE_ae = libSwaC_gv_zSC_DifficultyCount;
    const int autoA881DEAE_ai = 1;
    int autoE9F79F6A_ae;
    int autoE9F79F6A_ai;
    const int auto811CBE79_ae = libSwaC_gv_zSC_DifficultyCount;
    const int auto811CBE79_ai = 1;
    int autoF99E5DF7_ae;
    int autoF99E5DF7_ai;
    const int auto325D63A3_ae = libSwaC_gv_zSC_DifficultyCount;
    const int auto325D63A3_ai = 1;
    int auto2D71D7CC_ae;
    int auto2D71D7CC_ai;
    const int auto1DFEC993_ae = libSwaC_gv_zSC_DifficultyCount;
    const int auto1DFEC993_ai = 1;
    int autoA811BDFB_ae;
    int autoA811BDFB_ai;
    const int auto10ED9A71_ae = libSwaC_gv_zSC_DifficultyCount;
    const int auto10ED9A71_ai = 1;
    int auto08355D8F_ae;
    int auto08355D8F_ai;
    int autoD0633FDE_ae;
    int autoD0633FDE_ai;
    int auto8A98D64B_ae;
    int auto8A98D64B_ai;
    int auto1E6D1C08_ae;
    int auto1E6D1C08_ai;
    const int auto6EDA4191_ae = libSwaC_gv_zSC_DifficultyCount;
    const int auto6EDA4191_ai = 1;
    int autoA44D9F42_ae;
    int autoA44D9F42_ai;
    const int auto64F81F68_ae = libSwaC_gv_zSC_DifficultyCount;
    const int auto64F81F68_ai = 1;
    int auto8DE1111E_ae;
    const int auto8DE1111E_ai = 1;
    int auto0F7DD56E_ae;
    int auto0F7DD56E_ai;
    const int auto33AD5C5D_ae = libSwaC_gv_zSC_DifficultyCount;
    const int auto33AD5C5D_ai = 1;
    int auto3B84F5E3_ae;
    const int auto3B84F5E3_ai = 1;
    int auto2E62C462_ae;
    int auto2E62C462_ai;
    const int auto9626E235_ae = libSwaC_gv_zSC_DifficultyCount;
    const int auto9626E235_ai = 1;
    int autoB4F1468E_ae;
    const int autoB4F1468E_ai = 1;
    int autoB5DA4A6D_ae;
    int autoB5DA4A6D_ai;
    const int auto6CE9CEEE_ae = libSwaC_gv_zSC_DifficultyCount;
    const int auto6CE9CEEE_ai = 1;

    // Variable Initialization
    lv__SectionName = "";

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libSwaC_gv_zS_CampaignStatsBank == null)) {
        BankLoad("ZCampaignStats", 1);
        libSwaC_gv_zS_CampaignStatsBank = BankLastCreated();
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
    }

    if ((libSwaC_gv_zS_CampaignStatsBank == null)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_SwaC_50FE9DB7"), false);
        return true;
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_SwaC_DA5F03AB"), false);
    }
    lv__SectionName = "MissionStarted";
    autoF7920733_ae = CatalogEntryCount(c_gameCatalogMap);
    autoF7920733_ai = 1;
    while (autoF7920733_ai <= autoF7920733_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoF7920733_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            lv_missionIndex = libSwaC_gf_ZS_MissionIndex(lv_indexMission);
            lv_difficultyIndex = 1;
            for ( ; ( (auto96B82C39_ai >= 0 && lv_difficultyIndex <= auto96B82C39_ae) || (auto96B82C39_ai < 0 && lv_difficultyIndex >= auto96B82C39_ae) ) ; lv_difficultyIndex += auto96B82C39_ai ) {
                libSwaC_gv_zSX_CamStatsMissionStarted[lv_missionIndex][lv_difficultyIndex] = libSwaC_gf_ZS_LoadTransitionVarInteger(libSwaC_gv_zS_CampaignStatsBank, lv__SectionName, (IntToString(lv_missionIndex) + "-" + IntToString(lv_difficultyIndex)), 0);
            }
        }
        autoF7920733_ai = autoF7920733_ai + 1;
    }
    lv__SectionName = "MissionStartedLaunched";
    autoECF158C5_ae = CatalogEntryCount(c_gameCatalogMap);
    autoECF158C5_ai = 1;
    while (autoECF158C5_ai <= autoECF158C5_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoECF158C5_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            lv_missionIndex = libSwaC_gf_ZS_MissionIndex(lv_indexMission);
            lv_difficultyIndex = 1;
            for ( ; ( (auto49D4F583_ai >= 0 && lv_difficultyIndex <= auto49D4F583_ae) || (auto49D4F583_ai < 0 && lv_difficultyIndex >= auto49D4F583_ae) ) ; lv_difficultyIndex += auto49D4F583_ai ) {
                libSwaC_gv_zSX_CamStatsMissionStartedLaunched[lv_missionIndex][lv_difficultyIndex] = libSwaC_gf_ZS_LoadTransitionVarInteger(libSwaC_gv_zS_CampaignStatsBank, lv__SectionName, (IntToString(lv_missionIndex) + "-" + IntToString(lv_difficultyIndex)), 0);
            }
        }
        autoECF158C5_ai = autoECF158C5_ai + 1;
    }
    lv__SectionName = "MissionStartedArchives";
    auto39637701_ae = CatalogEntryCount(c_gameCatalogMap);
    auto39637701_ai = 1;
    while (auto39637701_ai <= auto39637701_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto39637701_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            lv_missionIndex = libSwaC_gf_ZS_MissionIndex(lv_indexMission);
            lv_difficultyIndex = 1;
            for ( ; ( (auto0DA38A62_ai >= 0 && lv_difficultyIndex <= auto0DA38A62_ae) || (auto0DA38A62_ai < 0 && lv_difficultyIndex >= auto0DA38A62_ae) ) ; lv_difficultyIndex += auto0DA38A62_ai ) {
                libSwaC_gv_zSX_CamStatsMissionStartedArchive[lv_missionIndex][lv_difficultyIndex] = libSwaC_gf_ZS_LoadTransitionVarInteger(libSwaC_gv_zS_CampaignStatsBank, lv__SectionName, (IntToString(lv_missionIndex) + "-" + IntToString(lv_difficultyIndex)), 0);
            }
        }
        auto39637701_ai = auto39637701_ai + 1;
    }
    lv__SectionName = "MissionStartedMasterArchives";
    auto5C7EDDC3_ae = CatalogEntryCount(c_gameCatalogMap);
    auto5C7EDDC3_ai = 1;
    while (auto5C7EDDC3_ai <= auto5C7EDDC3_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto5C7EDDC3_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            lv_missionIndex = libSwaC_gf_ZS_MissionIndex(lv_indexMission);
            lv_difficultyIndex = 1;
            for ( ; ( (autoB924C073_ai >= 0 && lv_difficultyIndex <= autoB924C073_ae) || (autoB924C073_ai < 0 && lv_difficultyIndex >= autoB924C073_ae) ) ; lv_difficultyIndex += autoB924C073_ai ) {
                libSwaC_gv_zSX_CamStatsMissionStartedMasterArchive[lv_missionIndex][lv_difficultyIndex] = libSwaC_gf_ZS_LoadTransitionVarInteger(libSwaC_gv_zS_CampaignStatsBank, lv__SectionName, (IntToString(lv_missionIndex) + "-" + IntToString(lv_difficultyIndex)), 0);
            }
        }
        auto5C7EDDC3_ai = auto5C7EDDC3_ai + 1;
    }
    lv__SectionName = "MissionStartedVictoryRestarted";
    autoFDD13019_ae = CatalogEntryCount(c_gameCatalogMap);
    autoFDD13019_ai = 1;
    while (autoFDD13019_ai <= autoFDD13019_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoFDD13019_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            lv_missionIndex = libSwaC_gf_ZS_MissionIndex(lv_indexMission);
            lv_difficultyIndex = 1;
            for ( ; ( (autoB461AC88_ai >= 0 && lv_difficultyIndex <= autoB461AC88_ae) || (autoB461AC88_ai < 0 && lv_difficultyIndex >= autoB461AC88_ae) ) ; lv_difficultyIndex += autoB461AC88_ai ) {
                libSwaC_gv_zSX_CamStatsMissionStartedVictoryRestarted[lv_missionIndex][lv_difficultyIndex] = libSwaC_gf_ZS_LoadTransitionVarInteger(libSwaC_gv_zS_CampaignStatsBank, lv__SectionName, (IntToString(lv_missionIndex) + "-" + IntToString(lv_difficultyIndex)), 0);
            }
        }
        autoFDD13019_ai = autoFDD13019_ai + 1;
    }
    lv__SectionName = "MissionCompleted";
    auto831EC91E_ae = CatalogEntryCount(c_gameCatalogMap);
    auto831EC91E_ai = 1;
    while (auto831EC91E_ai <= auto831EC91E_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto831EC91E_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            lv_missionIndex = libSwaC_gf_ZS_MissionIndex(lv_indexMission);
            lv_difficultyIndex = 1;
            for ( ; ( (autoA881DEAE_ai >= 0 && lv_difficultyIndex <= autoA881DEAE_ae) || (autoA881DEAE_ai < 0 && lv_difficultyIndex >= autoA881DEAE_ae) ) ; lv_difficultyIndex += autoA881DEAE_ai ) {
                libSwaC_gv_zSX_CamStatsMissionCompleted[lv_missionIndex][lv_difficultyIndex] = libSwaC_gf_ZS_LoadTransitionVarInteger(libSwaC_gv_zS_CampaignStatsBank, lv__SectionName, (IntToString(lv_missionIndex) + "-" + IntToString(lv_difficultyIndex)), 0);
            }
        }
        auto831EC91E_ai = auto831EC91E_ai + 1;
    }
    lv__SectionName = "MissionDefeated";
    autoE9F79F6A_ae = CatalogEntryCount(c_gameCatalogMap);
    autoE9F79F6A_ai = 1;
    while (autoE9F79F6A_ai <= autoE9F79F6A_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoE9F79F6A_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            lv_missionIndex = libSwaC_gf_ZS_MissionIndex(lv_indexMission);
            lv_difficultyIndex = 1;
            for ( ; ( (auto811CBE79_ai >= 0 && lv_difficultyIndex <= auto811CBE79_ae) || (auto811CBE79_ai < 0 && lv_difficultyIndex >= auto811CBE79_ae) ) ; lv_difficultyIndex += auto811CBE79_ai ) {
                libSwaC_gv_zSX_CamStatsMissionDefeated[lv_missionIndex][lv_difficultyIndex] = libSwaC_gf_ZS_LoadTransitionVarInteger(libSwaC_gv_zS_CampaignStatsBank, lv__SectionName, (IntToString(lv_missionIndex) + "-" + IntToString(lv_difficultyIndex)), 0);
            }
        }
        autoE9F79F6A_ai = autoE9F79F6A_ai + 1;
    }
    lv__SectionName = "MissionDefeatedBasedDied";
    autoF99E5DF7_ae = CatalogEntryCount(c_gameCatalogMap);
    autoF99E5DF7_ai = 1;
    while (autoF99E5DF7_ai <= autoF99E5DF7_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoF99E5DF7_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            lv_missionIndex = libSwaC_gf_ZS_MissionIndex(lv_indexMission);
            lv_difficultyIndex = 1;
            for ( ; ( (auto325D63A3_ai >= 0 && lv_difficultyIndex <= auto325D63A3_ae) || (auto325D63A3_ai < 0 && lv_difficultyIndex >= auto325D63A3_ae) ) ; lv_difficultyIndex += auto325D63A3_ai ) {
                libSwaC_gv_zSX_CamStatsMissionDefeatedBaseDied[lv_missionIndex][lv_difficultyIndex] = libSwaC_gf_ZS_LoadTransitionVarInteger(libSwaC_gv_zS_CampaignStatsBank, lv__SectionName, (IntToString(lv_missionIndex) + "-" + IntToString(lv_difficultyIndex)), 0);
            }
        }
        autoF99E5DF7_ai = autoF99E5DF7_ai + 1;
    }
    lv__SectionName = "MissionAborted";
    auto2D71D7CC_ae = CatalogEntryCount(c_gameCatalogMap);
    auto2D71D7CC_ai = 1;
    while (auto2D71D7CC_ai <= auto2D71D7CC_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto2D71D7CC_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            lv_missionIndex = libSwaC_gf_ZS_MissionIndex(lv_indexMission);
            lv_difficultyIndex = 1;
            for ( ; ( (auto1DFEC993_ai >= 0 && lv_difficultyIndex <= auto1DFEC993_ae) || (auto1DFEC993_ai < 0 && lv_difficultyIndex >= auto1DFEC993_ae) ) ; lv_difficultyIndex += auto1DFEC993_ai ) {
                libSwaC_gv_zSX_CamStatsMissionAborted[lv_missionIndex][lv_difficultyIndex] = libSwaC_gf_ZS_LoadTransitionVarInteger(libSwaC_gv_zS_CampaignStatsBank, lv__SectionName, (IntToString(lv_missionIndex) + "-" + IntToString(lv_difficultyIndex)), 0);
            }
        }
        auto2D71D7CC_ai = auto2D71D7CC_ai + 1;
    }
    lv__SectionName = "MissionLoaded";
    autoA811BDFB_ae = CatalogEntryCount(c_gameCatalogMap);
    autoA811BDFB_ai = 1;
    while (autoA811BDFB_ai <= autoA811BDFB_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoA811BDFB_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            lv_missionIndex = libSwaC_gf_ZS_MissionIndex(lv_indexMission);
            lv_difficultyIndex = 1;
            for ( ; ( (auto10ED9A71_ai >= 0 && lv_difficultyIndex <= auto10ED9A71_ae) || (auto10ED9A71_ai < 0 && lv_difficultyIndex >= auto10ED9A71_ae) ) ; lv_difficultyIndex += auto10ED9A71_ai ) {
                libSwaC_gv_zSX_CamStatsMissionLoad[lv_missionIndex][lv_difficultyIndex] = libSwaC_gf_ZS_LoadTransitionVarInteger(libSwaC_gv_zS_CampaignStatsBank, lv__SectionName, (IntToString(lv_missionIndex) + "-" + IntToString(lv_difficultyIndex)), 0);
            }
        }
        autoA811BDFB_ai = autoA811BDFB_ai + 1;
    }
    lv__SectionName = "LastDifficulty";
    auto08355D8F_ae = CatalogEntryCount(c_gameCatalogMap);
    auto08355D8F_ai = 1;
    while (auto08355D8F_ai <= auto08355D8F_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto08355D8F_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            lv_missionIndex = libSwaC_gf_ZS_MissionIndex(lv_indexMission);
            libSwaC_gv_zSX_CamStatsLastDifficulty[lv_missionIndex] = libSwaC_gf_ZS_LoadTransitionVarInteger(libSwaC_gv_zS_CampaignStatsBank, lv__SectionName, IntToString(lv_missionIndex), 0);
        }
        auto08355D8F_ai = auto08355D8F_ai + 1;
    }
    lv__SectionName = "DifficultyUp";
    autoD0633FDE_ae = CatalogEntryCount(c_gameCatalogMap);
    autoD0633FDE_ai = 1;
    while (autoD0633FDE_ai <= autoD0633FDE_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoD0633FDE_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            lv_missionIndex = libSwaC_gf_ZS_MissionIndex(lv_indexMission);
            libSwaC_gv_zSX_CamStatsDifficultyUp[lv_missionIndex] = libSwaC_gf_ZS_LoadTransitionVarInteger(libSwaC_gv_zS_CampaignStatsBank, lv__SectionName, IntToString(lv_missionIndex), 0);
        }
        autoD0633FDE_ai = autoD0633FDE_ai + 1;
    }
    lv__SectionName = "DifficultyDown";
    auto8A98D64B_ae = CatalogEntryCount(c_gameCatalogMap);
    auto8A98D64B_ai = 1;
    while (auto8A98D64B_ai <= auto8A98D64B_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto8A98D64B_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            lv_missionIndex = libSwaC_gf_ZS_MissionIndex(lv_indexMission);
            libSwaC_gv_zSX_CamStatsDifficultyDown[lv_missionIndex] = libSwaC_gf_ZS_LoadTransitionVarInteger(libSwaC_gv_zS_CampaignStatsBank, lv__SectionName, IntToString(lv_missionIndex), 0);
        }
        auto8A98D64B_ai = auto8A98D64B_ai + 1;
    }
    lv__SectionName = "HelpUsed";
    auto1E6D1C08_ae = CatalogEntryCount(c_gameCatalogMap);
    auto1E6D1C08_ai = 1;
    while (auto1E6D1C08_ai <= auto1E6D1C08_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto1E6D1C08_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            lv_missionIndex = libSwaC_gf_ZS_MissionIndex(lv_indexMission);
            lv_difficultyIndex = 1;
            for ( ; ( (auto6EDA4191_ai >= 0 && lv_difficultyIndex <= auto6EDA4191_ae) || (auto6EDA4191_ai < 0 && lv_difficultyIndex >= auto6EDA4191_ae) ) ; lv_difficultyIndex += auto6EDA4191_ai ) {
                libSwaC_gv_zSX_CamStatsHelpUsed[lv_missionIndex][lv_difficultyIndex] = libSwaC_gf_ZS_LoadTransitionVarInteger(libSwaC_gv_zS_CampaignStatsBank, lv__SectionName, (IntToString(lv_missionIndex) + "-" + IntToString(lv_difficultyIndex)), 0);
            }
        }
        auto1E6D1C08_ai = auto1E6D1C08_ai + 1;
    }
    lv__SectionName = "MissionOrder";
    libSwaC_gv_zSX_CamStatsMisisonOrder = libSwaC_gf_ZS_LoadTransitionVarString(libSwaC_gv_zS_CampaignStatsBank, lv__SectionName, "1", "");
    lv__SectionName = "ArmyUpgrades";
    autoA44D9F42_ae = CatalogEntryCount(c_gameCatalogMap);
    autoA44D9F42_ai = 1;
    while (autoA44D9F42_ai <= autoA44D9F42_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoA44D9F42_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            lv_missionIndex = libSwaC_gf_ZS_MissionIndex(lv_indexMission);
            lv_difficultyIndex = 1;
            for ( ; ( (auto64F81F68_ai >= 0 && lv_difficultyIndex <= auto64F81F68_ae) || (auto64F81F68_ai < 0 && lv_difficultyIndex >= auto64F81F68_ae) ) ; lv_difficultyIndex += auto64F81F68_ai ) {
                libSwaC_gv_zSX_CamStatsArmyUpgradesCount[lv_missionIndex][lv_difficultyIndex] = libSwaC_gf_ZS_LoadTransitionVarInteger(libSwaC_gv_zS_CampaignStatsBank, lv__SectionName, (IntToString(lv_missionIndex) + "-" + IntToString(lv_difficultyIndex)), 0);
                auto8DE1111E_ae = libSwaC_gv_zSX_CamStatsArmyUpgradesCount[lv_missionIndex][lv_difficultyIndex];
                lv_index = 1;
                for ( ; ( (auto8DE1111E_ai >= 0 && lv_index <= auto8DE1111E_ae) || (auto8DE1111E_ai < 0 && lv_index >= auto8DE1111E_ae) ) ; lv_index += auto8DE1111E_ai ) {
                    libSwaC_gv_zSX_CamStatsArmyUpgrades[lv_missionIndex][lv_difficultyIndex][lv_index] = libSwaC_gf_ZS_LoadTransitionVarString(libSwaC_gv_zS_CampaignStatsBank, lv__SectionName, (IntToString(lv_missionIndex) + "-" + IntToString(lv_difficultyIndex) + "-" + IntToString(lv_index)), "");
                }
            }
        }
        autoA44D9F42_ai = autoA44D9F42_ai + 1;
    }
    lv__SectionName = "Evolutions";
    auto0F7DD56E_ae = CatalogEntryCount(c_gameCatalogMap);
    auto0F7DD56E_ai = 1;
    while (auto0F7DD56E_ai <= auto0F7DD56E_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto0F7DD56E_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            lv_missionIndex = libSwaC_gf_ZS_MissionIndex(lv_indexMission);
            lv_difficultyIndex = 1;
            for ( ; ( (auto33AD5C5D_ai >= 0 && lv_difficultyIndex <= auto33AD5C5D_ae) || (auto33AD5C5D_ai < 0 && lv_difficultyIndex >= auto33AD5C5D_ae) ) ; lv_difficultyIndex += auto33AD5C5D_ai ) {
                libSwaC_gv_zSX_CamStatsEvolutionsCount[lv_missionIndex][lv_difficultyIndex] = libSwaC_gf_ZS_LoadTransitionVarInteger(libSwaC_gv_zS_CampaignStatsBank, lv__SectionName, (IntToString(lv_missionIndex) + "-" + IntToString(lv_difficultyIndex)), 0);
                auto3B84F5E3_ae = libSwaC_gv_zSX_CamStatsEvolutionsCount[lv_missionIndex][lv_difficultyIndex];
                lv_index = 1;
                for ( ; ( (auto3B84F5E3_ai >= 0 && lv_index <= auto3B84F5E3_ae) || (auto3B84F5E3_ai < 0 && lv_index >= auto3B84F5E3_ae) ) ; lv_index += auto3B84F5E3_ai ) {
                    libSwaC_gv_zSX_CamStatsEvolutions[lv_missionIndex][lv_difficultyIndex][lv_index] = libSwaC_gf_ZS_LoadTransitionVarString(libSwaC_gv_zS_CampaignStatsBank, lv__SectionName, (IntToString(lv_missionIndex) + "-" + IntToString(lv_difficultyIndex) + "-" + IntToString(lv_index)), "");
                }
            }
        }
        auto0F7DD56E_ai = auto0F7DD56E_ai + 1;
    }
    lv__SectionName = "Kerrigan";
    auto2E62C462_ae = CatalogEntryCount(c_gameCatalogMap);
    auto2E62C462_ai = 1;
    while (auto2E62C462_ai <= auto2E62C462_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto2E62C462_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            lv_missionIndex = libSwaC_gf_ZS_MissionIndex(lv_indexMission);
            lv_difficultyIndex = 1;
            for ( ; ( (auto9626E235_ai >= 0 && lv_difficultyIndex <= auto9626E235_ae) || (auto9626E235_ai < 0 && lv_difficultyIndex >= auto9626E235_ae) ) ; lv_difficultyIndex += auto9626E235_ai ) {
                libSwaC_gv_zSX_CamStatsKerriganCount[lv_missionIndex][lv_difficultyIndex] = libSwaC_gf_ZS_LoadTransitionVarInteger(libSwaC_gv_zS_CampaignStatsBank, lv__SectionName, (IntToString(lv_missionIndex) + "-" + IntToString(lv_difficultyIndex)), 0);
                autoB4F1468E_ae = libSwaC_gv_zSX_CamStatsKerriganCount[lv_missionIndex][lv_difficultyIndex];
                lv_index = 1;
                for ( ; ( (autoB4F1468E_ai >= 0 && lv_index <= autoB4F1468E_ae) || (autoB4F1468E_ai < 0 && lv_index >= autoB4F1468E_ae) ) ; lv_index += autoB4F1468E_ai ) {
                    libSwaC_gv_zSX_CamStatsKerrigan[lv_missionIndex][lv_difficultyIndex][lv_index] = libSwaC_gf_ZS_LoadTransitionVarString(libSwaC_gv_zS_CampaignStatsBank, lv__SectionName, (IntToString(lv_missionIndex) + "-" + IntToString(lv_difficultyIndex) + "-" + IntToString(lv_index)), "");
                }
            }
        }
        auto2E62C462_ai = auto2E62C462_ai + 1;
    }
    lv__SectionName = "KerriganDeathMax";
    autoB5DA4A6D_ae = CatalogEntryCount(c_gameCatalogMap);
    autoB5DA4A6D_ai = 1;
    while (autoB5DA4A6D_ai <= autoB5DA4A6D_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoB5DA4A6D_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            lv_missionIndex = libSwaC_gf_ZS_MissionIndex(lv_indexMission);
            lv_difficultyIndex = 1;
            for ( ; ( (auto6CE9CEEE_ai >= 0 && lv_difficultyIndex <= auto6CE9CEEE_ae) || (auto6CE9CEEE_ai < 0 && lv_difficultyIndex >= auto6CE9CEEE_ae) ) ; lv_difficultyIndex += auto6CE9CEEE_ai ) {
                libSwaC_gv_zSX_CamStatsKerriganDeathMax[lv_missionIndex][lv_difficultyIndex] = libSwaC_gf_ZS_LoadTransitionVarInteger(libSwaC_gv_zS_CampaignStatsBank, lv__SectionName, (IntToString(lv_missionIndex) + "-" + IntToString(lv_difficultyIndex)), 0);
            }
        }
        autoB5DA4A6D_ai = autoB5DA4A6D_ai + 1;
    }
    lv__SectionName = "UnitCreated";
    lv_missionIndex = libSwaC_gf_ZS_MissionIndex(libSwaC_gf_CurrentMap());
    lv_difficultyIndex = libSwaC_gf_ZS_DifficultyIndex(PlayerDifficulty(1));
    libSwaC_gv_zSX_CamStatsUnitCreatedHistoryCount = libSwaC_gf_ZS_LoadTransitionVarInteger(libSwaC_gv_zS_CampaignStatsBank, lv__SectionName, (IntToString(lv_missionIndex) + "-" + IntToString(lv_difficultyIndex)), 0);
    lv__SectionName = "WeaponArmorUpgrades";
    lv_missionIndex = libSwaC_gf_ZS_MissionIndex(libSwaC_gf_CurrentMap());
    lv_difficultyIndex = libSwaC_gf_ZS_DifficultyIndex(PlayerDifficulty(1));
    libSwaC_gv_zSX_CamStatsWeaponArmorUpgrades = libSwaC_gf_ZS_LoadTransitionVarString(libSwaC_gv_zS_CampaignStatsBank, lv__SectionName, (IntToString(lv_missionIndex) + "-" + IntToString(lv_difficultyIndex)), "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_LoadCampaignStatsData_Init () {
    libSwaC_gt_ZS_LoadCampaignStatsData = TriggerCreate("libSwaC_gt_ZS_LoadCampaignStatsData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_SaveCampaignStatsData
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_SaveCampaignStatsData_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv__SectionName;
    string lv_indexMission;
    int lv_missionIndex;
    int lv_difficultyIndex;
    int lv_index;

    // Automatic Variable Declarations
    int autoE8B0C01F_ae;
    int autoE8B0C01F_ai;
    const int auto6260F89A_ae = libSwaC_gv_zSC_DifficultyCount;
    const int auto6260F89A_ai = 1;
    int auto6A3F751C_ae;
    int auto6A3F751C_ai;
    const int auto451A77D7_ae = libSwaC_gv_zSC_DifficultyCount;
    const int auto451A77D7_ai = 1;
    int auto736102E1_ae;
    int auto736102E1_ai;
    const int auto51C14173_ae = libSwaC_gv_zSC_DifficultyCount;
    const int auto51C14173_ai = 1;
    int auto378A36E8_ae;
    int auto378A36E8_ai;
    const int auto800D51BB_ae = libSwaC_gv_zSC_DifficultyCount;
    const int auto800D51BB_ai = 1;
    int autoCACE1E62_ae;
    int autoCACE1E62_ai;
    const int autoEDBC8F80_ae = libSwaC_gv_zSC_DifficultyCount;
    const int autoEDBC8F80_ai = 1;
    int auto8FA23993_ae;
    int auto8FA23993_ai;
    const int auto26795FA2_ae = libSwaC_gv_zSC_DifficultyCount;
    const int auto26795FA2_ai = 1;
    int auto67845DAE_ae;
    int auto67845DAE_ai;
    const int autoFEB6AF9B_ae = libSwaC_gv_zSC_DifficultyCount;
    const int autoFEB6AF9B_ai = 1;
    int auto03220C47_ae;
    int auto03220C47_ai;
    const int auto6CD3D61E_ae = libSwaC_gv_zSC_DifficultyCount;
    const int auto6CD3D61E_ai = 1;
    int autoED29FC54_ae;
    int autoED29FC54_ai;
    const int autoFFB1CDE0_ae = libSwaC_gv_zSC_DifficultyCount;
    const int autoFFB1CDE0_ai = 1;
    int autoA6921759_ae;
    int autoA6921759_ai;
    const int auto32F37EA3_ae = libSwaC_gv_zSC_DifficultyCount;
    const int auto32F37EA3_ai = 1;
    int auto3E057CE9_ae;
    int auto3E057CE9_ai;
    int autoB4FE85F4_ae;
    int autoB4FE85F4_ai;
    int autoF13274F5_ae;
    int autoF13274F5_ai;
    int auto25C7ABC4_ae;
    int auto25C7ABC4_ai;
    const int auto515EF1E3_ae = libSwaC_gv_zSC_DifficultyCount;
    const int auto515EF1E3_ai = 1;
    int auto6DB8D35C_ae;
    int auto6DB8D35C_ai;
    const int auto2B6DF911_ae = libSwaC_gv_zSC_DifficultyCount;
    const int auto2B6DF911_ai = 1;
    int autoE00BD4C6_ae;
    const int autoE00BD4C6_ai = 1;
    int autoE97F15D7_ae;
    int autoE97F15D7_ai;
    const int autoB069A2BE_ae = libSwaC_gv_zSC_DifficultyCount;
    const int autoB069A2BE_ai = 1;
    int auto64E21D9F_ae;
    const int auto64E21D9F_ai = 1;
    int auto8FBB5A2D_ae;
    int auto8FBB5A2D_ai;
    const int auto02C31EEB_ae = libSwaC_gv_zSC_DifficultyCount;
    const int auto02C31EEB_ai = 1;
    int auto85AE06E7_ae;
    const int auto85AE06E7_ai = 1;
    int auto6BA0B4A4_ae;
    int auto6BA0B4A4_ai;
    const int auto2BFD0FA3_ae = libSwaC_gv_zSC_DifficultyCount;
    const int auto2BFD0FA3_ai = 1;

    // Variable Initialization
    lv__SectionName = "";

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libSwaC_gv_zS_CampaignStatsBank == null)) {
        BankLoad("ZCampaignStats", 1);
        libSwaC_gv_zS_CampaignStatsBank = BankLastCreated();
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
    }

    if ((libSwaC_gv_zS_CampaignStatsBank == null)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_SwaC_76CD4DA6"), false);
        return true;
    }

    lv__SectionName = "MissionStarted";
    autoE8B0C01F_ae = CatalogEntryCount(c_gameCatalogMap);
    autoE8B0C01F_ai = 1;
    while (autoE8B0C01F_ai <= autoE8B0C01F_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoE8B0C01F_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            lv_missionIndex = libSwaC_gf_ZS_MissionIndex(lv_indexMission);
            lv_difficultyIndex = 1;
            for ( ; ( (auto6260F89A_ai >= 0 && lv_difficultyIndex <= auto6260F89A_ae) || (auto6260F89A_ai < 0 && lv_difficultyIndex >= auto6260F89A_ae) ) ; lv_difficultyIndex += auto6260F89A_ai ) {
                libSwaC_gf_ZS_SaveTransitionVarInteger(libSwaC_gv_zS_CampaignStatsBank, lv__SectionName, (IntToString(lv_missionIndex) + "-" + IntToString(lv_difficultyIndex)), libSwaC_gv_zSX_CamStatsMissionStarted[lv_missionIndex][lv_difficultyIndex], 0);
            }
        }
        autoE8B0C01F_ai = autoE8B0C01F_ai + 1;
    }
    lv__SectionName = "MissionStartedLaunched";
    auto6A3F751C_ae = CatalogEntryCount(c_gameCatalogMap);
    auto6A3F751C_ai = 1;
    while (auto6A3F751C_ai <= auto6A3F751C_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto6A3F751C_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            lv_missionIndex = libSwaC_gf_ZS_MissionIndex(lv_indexMission);
            lv_difficultyIndex = 1;
            for ( ; ( (auto451A77D7_ai >= 0 && lv_difficultyIndex <= auto451A77D7_ae) || (auto451A77D7_ai < 0 && lv_difficultyIndex >= auto451A77D7_ae) ) ; lv_difficultyIndex += auto451A77D7_ai ) {
                libSwaC_gf_ZS_SaveTransitionVarInteger(libSwaC_gv_zS_CampaignStatsBank, lv__SectionName, (IntToString(lv_missionIndex) + "-" + IntToString(lv_difficultyIndex)), libSwaC_gv_zSX_CamStatsMissionStartedLaunched[lv_missionIndex][lv_difficultyIndex], 0);
            }
        }
        auto6A3F751C_ai = auto6A3F751C_ai + 1;
    }
    lv__SectionName = "MissionStartedArchives";
    auto736102E1_ae = CatalogEntryCount(c_gameCatalogMap);
    auto736102E1_ai = 1;
    while (auto736102E1_ai <= auto736102E1_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto736102E1_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            lv_missionIndex = libSwaC_gf_ZS_MissionIndex(lv_indexMission);
            lv_difficultyIndex = 1;
            for ( ; ( (auto51C14173_ai >= 0 && lv_difficultyIndex <= auto51C14173_ae) || (auto51C14173_ai < 0 && lv_difficultyIndex >= auto51C14173_ae) ) ; lv_difficultyIndex += auto51C14173_ai ) {
                libSwaC_gf_ZS_SaveTransitionVarInteger(libSwaC_gv_zS_CampaignStatsBank, lv__SectionName, (IntToString(lv_missionIndex) + "-" + IntToString(lv_difficultyIndex)), libSwaC_gv_zSX_CamStatsMissionStartedArchive[lv_missionIndex][lv_difficultyIndex], 0);
            }
        }
        auto736102E1_ai = auto736102E1_ai + 1;
    }
    lv__SectionName = "MissionStartedMasterArchives";
    auto378A36E8_ae = CatalogEntryCount(c_gameCatalogMap);
    auto378A36E8_ai = 1;
    while (auto378A36E8_ai <= auto378A36E8_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto378A36E8_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            lv_missionIndex = libSwaC_gf_ZS_MissionIndex(lv_indexMission);
            lv_difficultyIndex = 1;
            for ( ; ( (auto800D51BB_ai >= 0 && lv_difficultyIndex <= auto800D51BB_ae) || (auto800D51BB_ai < 0 && lv_difficultyIndex >= auto800D51BB_ae) ) ; lv_difficultyIndex += auto800D51BB_ai ) {
                libSwaC_gf_ZS_SaveTransitionVarInteger(libSwaC_gv_zS_CampaignStatsBank, lv__SectionName, (IntToString(lv_missionIndex) + "-" + IntToString(lv_difficultyIndex)), libSwaC_gv_zSX_CamStatsMissionStartedMasterArchive[lv_missionIndex][lv_difficultyIndex], 0);
            }
        }
        auto378A36E8_ai = auto378A36E8_ai + 1;
    }
    lv__SectionName = "MissionStartedVictoryRestarted";
    autoCACE1E62_ae = CatalogEntryCount(c_gameCatalogMap);
    autoCACE1E62_ai = 1;
    while (autoCACE1E62_ai <= autoCACE1E62_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoCACE1E62_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            lv_missionIndex = libSwaC_gf_ZS_MissionIndex(lv_indexMission);
            lv_difficultyIndex = 1;
            for ( ; ( (autoEDBC8F80_ai >= 0 && lv_difficultyIndex <= autoEDBC8F80_ae) || (autoEDBC8F80_ai < 0 && lv_difficultyIndex >= autoEDBC8F80_ae) ) ; lv_difficultyIndex += autoEDBC8F80_ai ) {
                libSwaC_gf_ZS_SaveTransitionVarInteger(libSwaC_gv_zS_CampaignStatsBank, lv__SectionName, (IntToString(lv_missionIndex) + "-" + IntToString(lv_difficultyIndex)), libSwaC_gv_zSX_CamStatsMissionStartedVictoryRestarted[lv_missionIndex][lv_difficultyIndex], 0);
            }
        }
        autoCACE1E62_ai = autoCACE1E62_ai + 1;
    }
    lv__SectionName = "MissionCompleted";
    auto8FA23993_ae = CatalogEntryCount(c_gameCatalogMap);
    auto8FA23993_ai = 1;
    while (auto8FA23993_ai <= auto8FA23993_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto8FA23993_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            lv_missionIndex = libSwaC_gf_ZS_MissionIndex(lv_indexMission);
            lv_difficultyIndex = 1;
            for ( ; ( (auto26795FA2_ai >= 0 && lv_difficultyIndex <= auto26795FA2_ae) || (auto26795FA2_ai < 0 && lv_difficultyIndex >= auto26795FA2_ae) ) ; lv_difficultyIndex += auto26795FA2_ai ) {
                libSwaC_gf_ZS_SaveTransitionVarInteger(libSwaC_gv_zS_CampaignStatsBank, lv__SectionName, (IntToString(lv_missionIndex) + "-" + IntToString(lv_difficultyIndex)), libSwaC_gv_zSX_CamStatsMissionCompleted[lv_missionIndex][lv_difficultyIndex], 0);
            }
        }
        auto8FA23993_ai = auto8FA23993_ai + 1;
    }
    lv__SectionName = "MissionDefeated";
    auto67845DAE_ae = CatalogEntryCount(c_gameCatalogMap);
    auto67845DAE_ai = 1;
    while (auto67845DAE_ai <= auto67845DAE_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto67845DAE_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            lv_missionIndex = libSwaC_gf_ZS_MissionIndex(lv_indexMission);
            lv_difficultyIndex = 1;
            for ( ; ( (autoFEB6AF9B_ai >= 0 && lv_difficultyIndex <= autoFEB6AF9B_ae) || (autoFEB6AF9B_ai < 0 && lv_difficultyIndex >= autoFEB6AF9B_ae) ) ; lv_difficultyIndex += autoFEB6AF9B_ai ) {
                libSwaC_gf_ZS_SaveTransitionVarInteger(libSwaC_gv_zS_CampaignStatsBank, lv__SectionName, (IntToString(lv_missionIndex) + "-" + IntToString(lv_difficultyIndex)), libSwaC_gv_zSX_CamStatsMissionDefeated[lv_missionIndex][lv_difficultyIndex], 0);
            }
        }
        auto67845DAE_ai = auto67845DAE_ai + 1;
    }
    lv__SectionName = "MissionDefeatedBasedDied";
    auto03220C47_ae = CatalogEntryCount(c_gameCatalogMap);
    auto03220C47_ai = 1;
    while (auto03220C47_ai <= auto03220C47_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto03220C47_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            lv_missionIndex = libSwaC_gf_ZS_MissionIndex(lv_indexMission);
            lv_difficultyIndex = 1;
            for ( ; ( (auto6CD3D61E_ai >= 0 && lv_difficultyIndex <= auto6CD3D61E_ae) || (auto6CD3D61E_ai < 0 && lv_difficultyIndex >= auto6CD3D61E_ae) ) ; lv_difficultyIndex += auto6CD3D61E_ai ) {
                libSwaC_gf_ZS_SaveTransitionVarInteger(libSwaC_gv_zS_CampaignStatsBank, lv__SectionName, (IntToString(lv_missionIndex) + "-" + IntToString(lv_difficultyIndex)), libSwaC_gv_zSX_CamStatsMissionDefeatedBaseDied[lv_missionIndex][lv_difficultyIndex], 0);
            }
        }
        auto03220C47_ai = auto03220C47_ai + 1;
    }
    lv__SectionName = "MissionAborted";
    autoED29FC54_ae = CatalogEntryCount(c_gameCatalogMap);
    autoED29FC54_ai = 1;
    while (autoED29FC54_ai <= autoED29FC54_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoED29FC54_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            lv_missionIndex = libSwaC_gf_ZS_MissionIndex(lv_indexMission);
            lv_difficultyIndex = 1;
            for ( ; ( (autoFFB1CDE0_ai >= 0 && lv_difficultyIndex <= autoFFB1CDE0_ae) || (autoFFB1CDE0_ai < 0 && lv_difficultyIndex >= autoFFB1CDE0_ae) ) ; lv_difficultyIndex += autoFFB1CDE0_ai ) {
                libSwaC_gf_ZS_SaveTransitionVarInteger(libSwaC_gv_zS_CampaignStatsBank, lv__SectionName, (IntToString(lv_missionIndex) + "-" + IntToString(lv_difficultyIndex)), libSwaC_gv_zSX_CamStatsMissionAborted[lv_missionIndex][lv_difficultyIndex], 0);
            }
        }
        autoED29FC54_ai = autoED29FC54_ai + 1;
    }
    lv__SectionName = "MissionLoaded";
    autoA6921759_ae = CatalogEntryCount(c_gameCatalogMap);
    autoA6921759_ai = 1;
    while (autoA6921759_ai <= autoA6921759_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoA6921759_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            lv_missionIndex = libSwaC_gf_ZS_MissionIndex(lv_indexMission);
            lv_difficultyIndex = 1;
            for ( ; ( (auto32F37EA3_ai >= 0 && lv_difficultyIndex <= auto32F37EA3_ae) || (auto32F37EA3_ai < 0 && lv_difficultyIndex >= auto32F37EA3_ae) ) ; lv_difficultyIndex += auto32F37EA3_ai ) {
                libSwaC_gf_ZS_SaveTransitionVarInteger(libSwaC_gv_zS_CampaignStatsBank, lv__SectionName, (IntToString(lv_missionIndex) + "-" + IntToString(lv_difficultyIndex)), libSwaC_gv_zSX_CamStatsMissionLoad[lv_missionIndex][lv_difficultyIndex], 0);
            }
        }
        autoA6921759_ai = autoA6921759_ai + 1;
    }
    lv__SectionName = "LastDifficulty";
    auto3E057CE9_ae = CatalogEntryCount(c_gameCatalogMap);
    auto3E057CE9_ai = 1;
    while (auto3E057CE9_ai <= auto3E057CE9_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto3E057CE9_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            lv_missionIndex = libSwaC_gf_ZS_MissionIndex(lv_indexMission);
            libSwaC_gf_ZS_SaveTransitionVarInteger(libSwaC_gv_zS_CampaignStatsBank, lv__SectionName, IntToString(lv_missionIndex), libSwaC_gv_zSX_CamStatsLastDifficulty[lv_missionIndex], 0);
        }
        auto3E057CE9_ai = auto3E057CE9_ai + 1;
    }
    lv__SectionName = "DifficultyUp";
    autoB4FE85F4_ae = CatalogEntryCount(c_gameCatalogMap);
    autoB4FE85F4_ai = 1;
    while (autoB4FE85F4_ai <= autoB4FE85F4_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoB4FE85F4_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            lv_missionIndex = libSwaC_gf_ZS_MissionIndex(lv_indexMission);
            libSwaC_gf_ZS_SaveTransitionVarInteger(libSwaC_gv_zS_CampaignStatsBank, lv__SectionName, IntToString(lv_missionIndex), libSwaC_gv_zSX_CamStatsDifficultyUp[lv_missionIndex], 0);
        }
        autoB4FE85F4_ai = autoB4FE85F4_ai + 1;
    }
    lv__SectionName = "DifficultyDown";
    autoF13274F5_ae = CatalogEntryCount(c_gameCatalogMap);
    autoF13274F5_ai = 1;
    while (autoF13274F5_ai <= autoF13274F5_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoF13274F5_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            lv_missionIndex = libSwaC_gf_ZS_MissionIndex(lv_indexMission);
            libSwaC_gf_ZS_SaveTransitionVarInteger(libSwaC_gv_zS_CampaignStatsBank, lv__SectionName, IntToString(lv_missionIndex), libSwaC_gv_zSX_CamStatsDifficultyDown[lv_missionIndex], 0);
        }
        autoF13274F5_ai = autoF13274F5_ai + 1;
    }
    lv__SectionName = "HelpUsed";
    auto25C7ABC4_ae = CatalogEntryCount(c_gameCatalogMap);
    auto25C7ABC4_ai = 1;
    while (auto25C7ABC4_ai <= auto25C7ABC4_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto25C7ABC4_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            lv_missionIndex = libSwaC_gf_ZS_MissionIndex(lv_indexMission);
            lv_difficultyIndex = 1;
            for ( ; ( (auto515EF1E3_ai >= 0 && lv_difficultyIndex <= auto515EF1E3_ae) || (auto515EF1E3_ai < 0 && lv_difficultyIndex >= auto515EF1E3_ae) ) ; lv_difficultyIndex += auto515EF1E3_ai ) {
                libSwaC_gf_ZS_SaveTransitionVarInteger(libSwaC_gv_zS_CampaignStatsBank, lv__SectionName, (IntToString(lv_missionIndex) + "-" + IntToString(lv_difficultyIndex)), libSwaC_gv_zSX_CamStatsHelpUsed[lv_missionIndex][lv_difficultyIndex], 0);
            }
        }
        auto25C7ABC4_ai = auto25C7ABC4_ai + 1;
    }
    lv__SectionName = "MissionOrder";
    libSwaC_gf_ZS_SaveTransitionVarString(libSwaC_gv_zS_CampaignStatsBank, lv__SectionName, "1", libSwaC_gv_zSX_CamStatsMisisonOrder, "");
    lv__SectionName = "ArmyUpgrades";
    auto6DB8D35C_ae = CatalogEntryCount(c_gameCatalogMap);
    auto6DB8D35C_ai = 1;
    while (auto6DB8D35C_ai <= auto6DB8D35C_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto6DB8D35C_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            lv_missionIndex = libSwaC_gf_ZS_MissionIndex(lv_indexMission);
            lv_difficultyIndex = 1;
            for ( ; ( (auto2B6DF911_ai >= 0 && lv_difficultyIndex <= auto2B6DF911_ae) || (auto2B6DF911_ai < 0 && lv_difficultyIndex >= auto2B6DF911_ae) ) ; lv_difficultyIndex += auto2B6DF911_ai ) {
                libSwaC_gf_ZS_SaveTransitionVarInteger(libSwaC_gv_zS_CampaignStatsBank, lv__SectionName, (IntToString(lv_missionIndex) + "-" + IntToString(lv_difficultyIndex)), libSwaC_gv_zSX_CamStatsArmyUpgradesCount[lv_missionIndex][lv_difficultyIndex], 0);
                autoE00BD4C6_ae = libSwaC_gv_zSX_CamStatsArmyUpgradesCount[lv_missionIndex][lv_difficultyIndex];
                lv_index = 1;
                for ( ; ( (autoE00BD4C6_ai >= 0 && lv_index <= autoE00BD4C6_ae) || (autoE00BD4C6_ai < 0 && lv_index >= autoE00BD4C6_ae) ) ; lv_index += autoE00BD4C6_ai ) {
                    libSwaC_gf_ZS_SaveTransitionVarString(libSwaC_gv_zS_CampaignStatsBank, lv__SectionName, (IntToString(lv_missionIndex) + "-" + IntToString(lv_difficultyIndex) + "-" + IntToString(lv_index)), libSwaC_gv_zSX_CamStatsArmyUpgrades[lv_missionIndex][lv_difficultyIndex][lv_index], "");
                }
            }
        }
        auto6DB8D35C_ai = auto6DB8D35C_ai + 1;
    }
    lv__SectionName = "Evolutions";
    autoE97F15D7_ae = CatalogEntryCount(c_gameCatalogMap);
    autoE97F15D7_ai = 1;
    while (autoE97F15D7_ai <= autoE97F15D7_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoE97F15D7_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            lv_missionIndex = libSwaC_gf_ZS_MissionIndex(lv_indexMission);
            lv_difficultyIndex = 1;
            for ( ; ( (autoB069A2BE_ai >= 0 && lv_difficultyIndex <= autoB069A2BE_ae) || (autoB069A2BE_ai < 0 && lv_difficultyIndex >= autoB069A2BE_ae) ) ; lv_difficultyIndex += autoB069A2BE_ai ) {
                libSwaC_gf_ZS_SaveTransitionVarInteger(libSwaC_gv_zS_CampaignStatsBank, lv__SectionName, (IntToString(lv_missionIndex) + "-" + IntToString(lv_difficultyIndex)), libSwaC_gv_zSX_CamStatsEvolutionsCount[lv_missionIndex][lv_difficultyIndex], 0);
                auto64E21D9F_ae = libSwaC_gv_zSX_CamStatsEvolutionsCount[lv_missionIndex][lv_difficultyIndex];
                lv_index = 1;
                for ( ; ( (auto64E21D9F_ai >= 0 && lv_index <= auto64E21D9F_ae) || (auto64E21D9F_ai < 0 && lv_index >= auto64E21D9F_ae) ) ; lv_index += auto64E21D9F_ai ) {
                    libSwaC_gf_ZS_SaveTransitionVarString(libSwaC_gv_zS_CampaignStatsBank, lv__SectionName, (IntToString(lv_missionIndex) + "-" + IntToString(lv_difficultyIndex) + "-" + IntToString(lv_index)), libSwaC_gv_zSX_CamStatsEvolutions[lv_missionIndex][lv_difficultyIndex][lv_index], "");
                }
            }
        }
        autoE97F15D7_ai = autoE97F15D7_ai + 1;
    }
    lv__SectionName = "Kerrigan";
    auto8FBB5A2D_ae = CatalogEntryCount(c_gameCatalogMap);
    auto8FBB5A2D_ai = 1;
    while (auto8FBB5A2D_ai <= auto8FBB5A2D_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto8FBB5A2D_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            lv_missionIndex = libSwaC_gf_ZS_MissionIndex(lv_indexMission);
            lv_difficultyIndex = 1;
            for ( ; ( (auto02C31EEB_ai >= 0 && lv_difficultyIndex <= auto02C31EEB_ae) || (auto02C31EEB_ai < 0 && lv_difficultyIndex >= auto02C31EEB_ae) ) ; lv_difficultyIndex += auto02C31EEB_ai ) {
                libSwaC_gf_ZS_SaveTransitionVarInteger(libSwaC_gv_zS_CampaignStatsBank, lv__SectionName, (IntToString(lv_missionIndex) + "-" + IntToString(lv_difficultyIndex)), libSwaC_gv_zSX_CamStatsKerriganCount[lv_missionIndex][lv_difficultyIndex], 0);
                auto85AE06E7_ae = libSwaC_gv_zSX_CamStatsKerriganCount[lv_missionIndex][lv_difficultyIndex];
                lv_index = 1;
                for ( ; ( (auto85AE06E7_ai >= 0 && lv_index <= auto85AE06E7_ae) || (auto85AE06E7_ai < 0 && lv_index >= auto85AE06E7_ae) ) ; lv_index += auto85AE06E7_ai ) {
                    libSwaC_gf_ZS_SaveTransitionVarString(libSwaC_gv_zS_CampaignStatsBank, lv__SectionName, (IntToString(lv_missionIndex) + "-" + IntToString(lv_difficultyIndex) + "-" + IntToString(lv_index)), libSwaC_gv_zSX_CamStatsKerrigan[lv_missionIndex][lv_difficultyIndex][lv_index], "");
                }
            }
        }
        auto8FBB5A2D_ai = auto8FBB5A2D_ai + 1;
    }
    lv__SectionName = "KerriganDeathMax";
    auto6BA0B4A4_ae = CatalogEntryCount(c_gameCatalogMap);
    auto6BA0B4A4_ai = 1;
    while (auto6BA0B4A4_ai <= auto6BA0B4A4_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto6BA0B4A4_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            lv_missionIndex = libSwaC_gf_ZS_MissionIndex(lv_indexMission);
            lv_difficultyIndex = 1;
            for ( ; ( (auto2BFD0FA3_ai >= 0 && lv_difficultyIndex <= auto2BFD0FA3_ae) || (auto2BFD0FA3_ai < 0 && lv_difficultyIndex >= auto2BFD0FA3_ae) ) ; lv_difficultyIndex += auto2BFD0FA3_ai ) {
                libSwaC_gf_ZS_SaveTransitionVarInteger(libSwaC_gv_zS_CampaignStatsBank, lv__SectionName, (IntToString(lv_missionIndex) + "-" + IntToString(lv_difficultyIndex)), libSwaC_gv_zSX_CamStatsKerriganDeathMax[lv_missionIndex][lv_difficultyIndex], 0);
            }
        }
        auto6BA0B4A4_ai = auto6BA0B4A4_ai + 1;
    }
    lv__SectionName = "UnitCreated";
    lv_missionIndex = libSwaC_gf_ZS_MissionIndex(libSwaC_gf_CurrentMap());
    lv_difficultyIndex = libSwaC_gf_ZS_DifficultyIndex(PlayerDifficulty(1));
    libSwaC_gf_ZS_CamStatsSaveUnitCreated(lv__SectionName, lv_missionIndex, lv_difficultyIndex);
    lv__SectionName = "WeaponArmorUpgrades";
    lv_missionIndex = libSwaC_gf_ZS_MissionIndex(libSwaC_gf_CurrentMap());
    lv_difficultyIndex = libSwaC_gf_ZS_DifficultyIndex(PlayerDifficulty(1));
    libSwaC_gf_ZS_SaveTransitionVarString(libSwaC_gv_zS_CampaignStatsBank, lv__SectionName, (IntToString(lv_missionIndex) + "-" + IntToString(lv_difficultyIndex)), libSwaC_gv_zSX_CamStatsWeaponArmorUpgrades, "");
    libSwaC_gf_DispatchStoryEvent(libSwaC_ge_ZS_Event_StatisticsBankSave, "", "", true);
    BankSave(libSwaC_gv_zS_CampaignStatsBank);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_SaveCampaignStatsData_Init () {
    libSwaC_gt_ZS_SaveCampaignStatsData = TriggerCreate("libSwaC_gt_ZS_SaveCampaignStatsData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_SetCasualRallyPoints
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_SetCasualRallyPoints_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waitCount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waitCount = 10;

    // Conditions
    if (testConds) {
        if (!((libHots_gf_DifficultyValueInt2(1, 0, 0) == 1))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUnitType() == "Hatchery"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while ((lv_waitCount > 0) && (UnitRallyPointTargetCount(EventUnitProgressUnit(), 1) == 0) && (UnitRallyPointTargetCount(EventUnitProgressUnit(), 2) == 0)) {
        lv_waitCount -= 1;
        Wait(0.0625, c_timeReal);
    }
    if ((UnitRallyPointTargetCount(EventUnitProgressUnit(), 1) == 0) && (UnitRallyPointTargetCount(EventUnitProgressUnit(), 2) == 0)) {
        libSwaC_gf_SetHatcheryRallyPoint(EventUnitProgressUnit(), null);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_SetCasualRallyPoints_Init () {
    libSwaC_gt_ZS_SetCasualRallyPoints = TriggerCreate("libSwaC_gt_ZS_SetCasualRallyPoints_Func");
    TriggerAddEventUnitConstructProgress(libSwaC_gt_ZS_SetCasualRallyPoints, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg03 Timestamp Delayed
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_Zerg03TimestampDelayed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.0, c_timeReal);
    libSwaC_gf_DisplayTimestamp("Before Zerg03", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_Zerg03TimestampDelayed_Init () {
    libSwaC_gt_Zerg03TimestampDelayed = TriggerCreate("libSwaC_gt_Zerg03TimestampDelayed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg01 Timestamp Delayed
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_Zerg01TimestampDelayed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(5.0, c_timeReal);
    libSwaC_gf_DisplayTimestamp("Before Zerg01", true);
    Wait(0.5, c_timeReal);
    libSwaC_gf_DisplayTimestamp("Before Zerg01 B", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_Zerg01TimestampDelayed_Init () {
    libSwaC_gt_Zerg01TimestampDelayed = TriggerCreate("libSwaC_gt_Zerg01TimestampDelayed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Display Timestamp
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_DisplayTimestamp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_timestamp;
    text lv_title;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_timestamp = UserDataGetText("ConversationTimestamps", libSwaC_gv_zS_CutsceneTimestamp, "Description", 1);
    lv_title = UserDataGetText("ConversationTimestamps", libSwaC_gv_zS_CutsceneTimestamp, "Title", 1);
    Wait(UserDataGetFixed("ConversationTimestamps", libSwaC_gv_zS_CutsceneTimestamp, "StartDelay", 1), c_timeReal);
    UIShowTextCrawl(PlayerGroupAll(), lv_title, lv_timestamp, UserDataGetFixed("ConversationTimestamps", libSwaC_gv_zS_CutsceneTimestamp, "FlashDuration", 1), SoundLink("Silent", -1), SoundLink("TextCrawlType", -1));
    Wait(UserDataGetFixed("ConversationTimestamps", libSwaC_gv_zS_CutsceneTimestamp, "WaitDuration", 1), c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_DisplayTimestamp_Init () {
    libSwaC_gt_DisplayTimestamp = TriggerCreate("libSwaC_gt_DisplayTimestamp_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Display Timestamp Skippable
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_DisplayTimestampSkippable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_timestamp;
    text lv_title;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_timestamp = UserDataGetText("ConversationTimestamps", libSwaC_gv_zS_CutsceneTimestamp, "Description", 1);
    lv_title = UserDataGetText("ConversationTimestamps", libSwaC_gv_zS_CutsceneTimestamp, "Title", 1);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    Wait(UserDataGetFixed("ConversationTimestamps", libSwaC_gv_zS_CutsceneTimestamp, "StartDelay", 1), c_timeReal);
    UIShowTextCrawl(PlayerGroupAll(), lv_title, lv_timestamp, UserDataGetFixed("ConversationTimestamps", libSwaC_gv_zS_CutsceneTimestamp, "FlashDuration", 1), SoundLink("Silent", -1), SoundLink("TextCrawlType", -1));
    Wait(UserDataGetFixed("ConversationTimestamps", libSwaC_gv_zS_CutsceneTimestamp, "WaitDuration", 1), c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_DisplayTimestampSkippable_Init () {
    libSwaC_gt_DisplayTimestampSkippable = TriggerCreate("libSwaC_gt_DisplayTimestampSkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_CampaignCutsceneSkipped
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_CampaignCutsceneSkipped_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libSwaC_gt_ZS_CampaignCutsceneSkipped, false);
    libSwaC_gv_zS_CampaignCutsceneSkipped = true;
    CutsceneStop(libSwaC_gv_zS_CurrentCampaignCutscene);
    TriggerStop(libSwaC_gt_ZS_WaitForCutscene);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_CampaignCutsceneSkipped_Init () {
    libSwaC_gt_ZS_CampaignCutsceneSkipped = TriggerCreate("libSwaC_gt_ZS_CampaignCutsceneSkipped_Func");
    TriggerEnable(libSwaC_gt_ZS_CampaignCutsceneSkipped, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_PlayCinematicSkippable
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_PlayCinematicSkippable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    transmissionsource lv_movieSource;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_movieSource = TransmissionSource();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libSwaC_gf_ZS_SceneMovie(libSwaC_gv_zS_PlaySceneCurrentScene) != null)) {
        lv_movieSource = TransmissionSourceFromMovie(libSwaC_gf_ZS_SceneMovie(libSwaC_gv_zS_PlaySceneCurrentScene), true);
        TriggerExecute(libSwaC_gt_ZS_CinematicDetectSkipping, true, false);
        TransmissionSourceSetStreamingAllowed(lv_movieSource, true);
        TransmissionSourceSetPauseAllowed(lv_movieSource, true);
        TransmissionSend(PlayerGroupAll(), lv_movieSource, libNtve_gf_FullscreenPortrait(), "", null, null, null, 0.0, c_transmissionDurationAdd, true);
        TriggerStop(libSwaC_gt_ZS_CinematicDetectSkipping);
        TriggerStop(libSwaC_gt_ZS_CinematicHandleSkipping);
    }
    else {
        TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
        while (true) {
            Wait(5.0, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_PlayCinematicSkippable_Init () {
    libSwaC_gt_ZS_PlayCinematicSkippable = TriggerCreate("libSwaC_gt_ZS_PlayCinematicSkippable_Func");
    TriggerEnable(libSwaC_gt_ZS_PlayCinematicSkippable, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_CinematicDetectSkipping
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_CinematicDetectSkipping_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, libSwaC_gt_ZS_CinematicHandleSkipping, true, false);
    while (true) {
        Wait(5.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_CinematicDetectSkipping_Init () {
    libSwaC_gt_ZS_CinematicDetectSkipping = TriggerCreate("libSwaC_gt_ZS_CinematicDetectSkipping_Func");
    TriggerEnable(libSwaC_gt_ZS_CinematicDetectSkipping, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_CinematicHandleSkipping
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_CinematicHandleSkipping_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_ZS_FadeAllSoundsExceptMusic(0.8, false);
    libSwaC_gf_CinematicFade(false, 1.0, Color(0.00, 0.00, 0.00), true);
    TriggerStop(libSwaC_gt_ZS_PlayCinematicSkippable);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_CinematicHandleSkipping_Init () {
    libSwaC_gt_ZS_CinematicHandleSkipping = TriggerCreate("libSwaC_gt_ZS_CinematicHandleSkipping_Func");
    TriggerEnable(libSwaC_gt_ZS_CinematicHandleSkipping, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_WaitForDialogCutscene
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_WaitForDialogCutscene_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libSwaC_gv_zS_CampaignCutsceneSkippable == true)) {
        TriggerSkippableBegin(PlayerGroupAll(), 0, libSwaC_gt_ZS_CampaignCutsceneSkipped, false, false);
    }

    WaitForCutsceneToEnd(libSwaC_gv_zS_CurrentCampaignCutscene);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_WaitForDialogCutscene_Init () {
    libSwaC_gt_ZS_WaitForDialogCutscene = TriggerCreate("libSwaC_gt_ZS_WaitForDialogCutscene_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_WaitForCutscene
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_WaitForCutscene_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libSwaC_gv_zS_CampaignCutsceneSkippable == true)) {
        TriggerSkippableBegin(PlayerGroupAll(), 0, libSwaC_gt_ZS_CampaignCutsceneSkipped, false, false);
    }

    WaitForCutsceneToEnd(libSwaC_gv_zS_CurrentCampaignCutscene);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_WaitForCutscene_Init () {
    libSwaC_gt_ZS_WaitForCutscene = TriggerCreate("libSwaC_gt_ZS_WaitForCutscene_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_ApplyLarvaUpgrade
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_ApplyLarvaUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto5AEB2D4A_val;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.125, c_timeGame);
    auto5AEB2D4A_val = PlayerDifficulty(1);
    if (auto5AEB2D4A_val == 1) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "HotSCampaignLarvaCountEasy", 1);
    }
    else if (auto5AEB2D4A_val == 2) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "HotSCampaignLarvaCountMedium", 1);
    }
    else if (auto5AEB2D4A_val == 3) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "HotSCampaignLarvaCountHard", 1);
    }
    else if (auto5AEB2D4A_val == 4) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "HotSCampaignLarvaCountHard", 1);
    }
    else {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "HotSCampaignLarvaCount", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_ApplyLarvaUpgrade_Init () {
    libSwaC_gt_ZS_ApplyLarvaUpgrade = TriggerCreate("libSwaC_gt_ZS_ApplyLarvaUpgrade_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_PlayEggRoomIntroSequence
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_PlayEggRoomIntroSequence_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_indexCategory;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((libSwaC_gv_zS_ArmyEvoPlayBirth == true)) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(libSwaC_gv_zS_ArmyCustomEggRoomEvolutionMaster), c_animNameDefault, "Birth", 0, 0.0);
        SoundPlayOnUnit(SoundLink("SetPiece_Abathur_Emerge", -1), PlayerGroupAll(), libSwaC_gv_zS_ArmyCustomEggRoomEvolutionMaster, 0.0, 100.0, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_PlayEggRoomIntroSequence_Init () {
    libSwaC_gt_ZS_PlayEggRoomIntroSequence = TriggerCreate("libSwaC_gt_ZS_PlayEggRoomIntroSequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_ArmyCustomEggHighlight
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_ArmyCustomEggHighlight_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_indexCategory;

    // Automatic Variable Declarations
    int autoFF0A6A58_ae;
    int autoFF0A6A58_ai;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitTestState(EventUnit(), c_unitStateHighlightable) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(EventUnit(), "HaloStart");
    if ((libSwaC_gv_zS_ArmyCustomEggRoomEvolutionMaster == EventUnit())) {
        DialogControlSetVisible(libSwaC_gv_zS_ArmyEvoCalloutFlash, PlayerGroupAll(), true);
    }

    autoFF0A6A58_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    autoFF0A6A58_ai = 1;
    while (autoFF0A6A58_ai <= autoFF0A6A58_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, autoFF0A6A58_ai);
        if ((libSwaC_gf_ArmyCategoryEggUnitInEggRoom(lv_indexCategory) == EventUnit()) && (libSwaC_gf_ZS_ArmyCategoryShouldCallout(lv_indexCategory) == false)) {
            libSwaC_gf_ZS_ArmyCalloutShowHide(true, lv_indexCategory);
            return true;
        }

        autoFF0A6A58_ai = autoFF0A6A58_ai + 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_ArmyCustomEggHighlight_Init () {
    libSwaC_gt_ZS_ArmyCustomEggHighlight = TriggerCreate("libSwaC_gt_ZS_ArmyCustomEggHighlight_Func");
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomEggHighlight, false);
    TriggerAddEventUnitHighlight(libSwaC_gt_ZS_ArmyCustomEggHighlight, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_ArmyCustomEggUnhighlight
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_ArmyCustomEggUnhighlight_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_indexCategory;

    // Automatic Variable Declarations
    int autoBA7E7183_ae;
    int autoBA7E7183_ai;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(EventUnit(), "HaloStop");
    if ((libSwaC_gv_zS_ArmyCustomEggRoomEvolutionMaster == EventUnit()) && (libSwaC_gf_ZS_ArmyEvoHasConvo2() == false)) {
        DialogControlSetVisible(libSwaC_gv_zS_ArmyEvoCalloutFlash, PlayerGroupAll(), false);
    }

    autoBA7E7183_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    autoBA7E7183_ai = 1;
    while (autoBA7E7183_ai <= autoBA7E7183_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, autoBA7E7183_ai);
        if ((libSwaC_gf_ArmyCategoryEggUnitInEggRoom(lv_indexCategory) == EventUnit()) && (libSwaC_gf_ZS_ArmyCategoryShouldCallout(lv_indexCategory) == false)) {
            libSwaC_gf_ZS_ArmyCalloutShowHide(false, lv_indexCategory);
            return true;
        }

        autoBA7E7183_ai = autoBA7E7183_ai + 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_ArmyCustomEggUnhighlight_Init () {
    libSwaC_gt_ZS_ArmyCustomEggUnhighlight = TriggerCreate("libSwaC_gt_ZS_ArmyCustomEggUnhighlight_Func");
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomEggUnhighlight, false);
    TriggerAddEventUnitHighlight(libSwaC_gt_ZS_ArmyCustomEggUnhighlight, null, c_playerAny, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_ArmyCustomEvolutionMasterClicked
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_ArmyCustomEvolutionMasterClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_indexCategory;
    unit lv_eggUnit;

    // Automatic Variable Declarations
    int auto5EA46247_ae;
    int auto5EA46247_ai;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventUnit() == libSwaC_gv_zS_ArmyCustomEggRoomEvolutionMaster))) {
            return false;
        }

        if (!((UnitTestState(EventUnit(), c_unitStateHighlightable) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libSwaC_gf_ZS_ArmyEvoHasConvo() == false)) {
        libSwaC_gf_DispatchStoryEvent(libSwaC_ge_ZS_Event_EvolutionMasterConversation, "", "", true);
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_ZS_ArmyEggRoomTurnClickableOnOff(false);
    libSwaC_gf_StoryDisableEggRoomEvoMasterBirth();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(libSwaC_gv_zS_ArmyCustomEggRoomEvolutionMaster), c_animNameDefault, "Stand", 0, 0.0);
    auto5EA46247_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto5EA46247_ai = 1;
    while (auto5EA46247_ai <= auto5EA46247_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto5EA46247_ai);
        libSwaC_gf_ZS_ArmyCustomEggPlayLight("Inactive", lv_indexCategory);
        auto5EA46247_ai = auto5EA46247_ai + 1;
    }
    libSwaC_gf_ZS_ArmyCustomEggSetPlayLight(false);
    libSwaC_gf_ZS_ArmyCustomEggEvoPlayLight(false);
    libSwaC_gf_ZS_ShowHideStoryUnit(false, libSwaC_gv_zS_ArmyCustomEggRoomEvolutionMaster);
    libSwaC_gf_DispatchStoryEvent(libSwaC_ge_ZS_Event_EvolutionMasterConversation, "", "", true);
    libSwaC_gf_ZS_ShowHideStoryUnit(true, libSwaC_gv_zS_ArmyCustomEggRoomEvolutionMaster);
    libSwaC_gf_ZS_ArmyEggRoomTurnClickableOnOff(true);
    libSwaC_gf_ZS_ArmyCustomEggUIEnter();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_ArmyCustomEvolutionMasterClicked_Init () {
    libSwaC_gt_ZS_ArmyCustomEvolutionMasterClicked = TriggerCreate("libSwaC_gt_ZS_ArmyCustomEvolutionMasterClicked_Func");
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomEvolutionMasterClicked, false);
    TriggerAddEventUnitClick(libSwaC_gt_ZS_ArmyCustomEvolutionMasterClicked, null, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_ArmyCustomEggClicked
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_ArmyCustomEggClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_indexCategory;

    // Automatic Variable Declarations
    int autoE30BC0CB_ae;
    int autoE30BC0CB_ai;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(libSwaC_gv_zS_ArmyCustomEggUnits, EventUnit()) == true))) {
            return false;
        }

        if (!((UnitTestState(EventUnit(), c_unitStateHighlightable) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gv_zS_ArmyCustomCategoryCurrent = null;
    autoE30BC0CB_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    autoE30BC0CB_ai = 1;
    while (autoE30BC0CB_ai <= autoE30BC0CB_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, autoE30BC0CB_ai);
        if ((libSwaC_gf_ArmyCategoryEggUnitInEggRoom(lv_indexCategory) == EventUnit())) {
            libSwaC_gv_zS_ArmyCustomCategoryCurrent = lv_indexCategory;
            break;
        }

        autoE30BC0CB_ai = autoE30BC0CB_ai + 1;
    }
    if ((libSwaC_gv_zS_ArmyCustomCategoryCurrent == null)) {
        return true;
    }

    CameraUseModel(1, libSwaC_gv_zS_ArmyCustomEggRoom, libSwaC_gf_ZS_EggRoomCamera(), 0.0);
    SoundPlay(SoundLink("UI_EvolutionChamber_unit_click", -1), PlayerGroupAll(), 100.0, 0.0);
    libSwaC_gf_ZS_ArmyEggRoomTurnClickableOnOff(false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, false);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(libSwaC_gv_zS_ArmyCustomEggRoom), "ZOOM", libSwaC_gf_ZS_ArmyCustomEggZoomCamera(libSwaC_gv_zS_ArmyCustomCategoryCurrent), c_animFlagFullMatch | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.5, c_timeGame);
    CinematicFade(false, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libSwaC_gf_ZS_ArmyCustomUpgradeUIEnter();
    libSwaC_gf_ClearAnimationwithblendtime("ZOOM", libSwaC_gv_zS_ArmyCustomEggRoom, 0.0);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_ArmyCustomEggClicked_Init () {
    libSwaC_gt_ZS_ArmyCustomEggClicked = TriggerCreate("libSwaC_gt_ZS_ArmyCustomEggClicked_Func");
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomEggClicked, false);
    TriggerAddEventUnitClick(libSwaC_gt_ZS_ArmyCustomEggClicked, null, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_ArmyCustomEggMouseOver
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_ArmyCustomEggMouseOver_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_indexCategory;
    string lv_mouseOverCategory;

    // Automatic Variable Declarations
    int auto6AB5E665_ae;
    int auto6AB5E665_ai;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(libSwaC_gv_zS_ArmyCustomEggUnits, EventUnit()) == true))) {
            return false;
        }

        if (!((UnitTestState(EventUnit(), c_unitStateHighlightable) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_mouseOverCategory = null;
    auto6AB5E665_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto6AB5E665_ai = 1;
    while (auto6AB5E665_ai <= auto6AB5E665_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto6AB5E665_ai);
        if ((libSwaC_gf_ArmyCategoryEggUnitInEggRoom(lv_indexCategory) == EventUnit())) {
            lv_mouseOverCategory = lv_indexCategory;
            break;
        }

        auto6AB5E665_ai = auto6AB5E665_ai + 1;
    }
    if ((lv_mouseOverCategory == null)) {
        return true;
    }

    if ((libSwaC_gf_StoryArmyCategoryStateCheck(lv_mouseOverCategory, c_armyCategoryStateUnlocked) == false)) {
        return true;
    }

    libSwaC_gf_ZS_ArmyCustomEggPlayRawrAnimation(lv_mouseOverCategory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_ArmyCustomEggMouseOver_Init () {
    libSwaC_gt_ZS_ArmyCustomEggMouseOver = TriggerCreate("libSwaC_gt_ZS_ArmyCustomEggMouseOver_Func");
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomEggMouseOver, false);
    TriggerAddEventUnitHighlight(libSwaC_gt_ZS_ArmyCustomEggMouseOver, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_ArmyCustomEggRoomBackButtonClicked
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_ArmyCustomEggRoomBackButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSwaC_gv_zS_ArmyCustomEggRoomBackButton))) {
            return false;
        }

        if (!((libSwaC_gv_zS_EventIsRunning == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_ZS_CloseEggRoom();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_ArmyCustomEggRoomBackButtonClicked_Init () {
    libSwaC_gt_ZS_ArmyCustomEggRoomBackButtonClicked = TriggerCreate("libSwaC_gt_ZS_ArmyCustomEggRoomBackButtonClicked_Func");
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomEggRoomBackButtonClicked, false);
    TriggerAddEventDialogControl(libSwaC_gt_ZS_ArmyCustomEggRoomBackButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_ArmyCustomEggRoomEvolutionMissionButtonClicked
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_ArmyCustomEggRoomEvolutionMissionButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSwaC_gv_zS_ArmyCustomEggRoomEvolutionMissionButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libSwaC_gt_ZS_ArmyCustomEggClicked, false);
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomEggMouseOver, false);
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomEvolutionMasterClicked, false);
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomEggRoomBackButtonClicked, false);
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomEggHighlight, false);
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomEggUnhighlight, false);
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomEggRoomEvolutionMissionButtonClicked, false);
    TriggerStop(libSwaC_gt_ZS_PlayEggRoomIntroSequence);
    libSwaC_gf_CinematicFade(false, 0.5, Color(0.00, 0.00, 0.00), true);
    libSwaC_gf_StoryDisplayEvolutionMissionScreen(libSwaC_gf_ZS_ArmyCustomMissionNextMissionCategory());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_ArmyCustomEggRoomEvolutionMissionButtonClicked_Init () {
    libSwaC_gt_ZS_ArmyCustomEggRoomEvolutionMissionButtonClicked = TriggerCreate("libSwaC_gt_ZS_ArmyCustomEggRoomEvolutionMissionButtonClicked_Func");
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomEggRoomEvolutionMissionButtonClicked, false);
    TriggerAddEventDialogControl(libSwaC_gt_ZS_ArmyCustomEggRoomEvolutionMissionButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_ArmyCustomPeriodicUpgradeReminder
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_ArmyCustomPeriodicUpgradeReminder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const fixed lv_reminderPeriod = 120.0;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UserDataGetInt("StoryStates", "Unit Upgrade UI Visited", "value", 1) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(lv_reminderPeriod, c_timeReal);
        if ((libSwaC_gv_zS_ArmyCustomCurrentUI != libSwaC_ge_ArmyUIScreen_EggRoom) && (UserDataGetInt("StoryStates", "Unit Upgrade UI Visited", "value", 1) != 0)) {
            return true;
        }

        while (!((UnitTestState(libSwaC_gv_zS_ArmyCustomEggRoomEvolutionMaster, c_unitStateHighlightable) == true) && (libSwaC_gv_zS_ArmyCustomCurrentUI == libSwaC_ge_ArmyUIScreen_EggRoom))) {
            Wait(1.0, c_timeGame);
        }
        ConversationDataRun("zSMAmbient_EvolutionMaster", PlayerGroupAll(), c_conversationSkipSimple, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_ArmyCustomPeriodicUpgradeReminder_Init () {
    libSwaC_gt_ZS_ArmyCustomPeriodicUpgradeReminder = TriggerCreate("libSwaC_gt_ZS_ArmyCustomPeriodicUpgradeReminder_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_ArmyCustomRunning
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_ArmyCustomRunning_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(100.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_ArmyCustomRunning_Init () {
    libSwaC_gt_ZS_ArmyCustomRunning = TriggerCreate("libSwaC_gt_ZS_ArmyCustomRunning_Func");
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomRunning, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_ArmyCustomUpgradeRoomBackButtonClicked
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_ArmyCustomUpgradeRoomBackButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSwaC_gv_zS_ArmyCustomUpgradeBackButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gv_zS_ArmyCustomCategoryCurrent = null;
    libSwaC_gv_zS_ArmyCustomUpgradeCurrent = null;
    libSwaC_gf_ZS_ArmyCustomEggUIEnter();
    if ((libSwaC_gv_zS_ArmyDebugUsed == true)) {
        libSwaC_gf_ZS_CloseEggRoom();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_ArmyCustomUpgradeRoomBackButtonClicked_Init () {
    libSwaC_gt_ZS_ArmyCustomUpgradeRoomBackButtonClicked = TriggerCreate("libSwaC_gt_ZS_ArmyCustomUpgradeRoomBackButtonClicked_Func");
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomUpgradeRoomBackButtonClicked, false);
    TriggerAddEventDialogControl(libSwaC_gt_ZS_ArmyCustomUpgradeRoomBackButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_ArmyCustomUpgradeRoomUpgradeButtonClicked
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_ArmyCustomUpgradeRoomUpgradeButtonClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    string lv_indexUpgrade;
    string lv_upgradeSelected;

    // Automatic Variable Declarations
    int auto18986C47_ae;
    int auto18986C47_ai;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libSwaC_gv_zS_ArmyCustomCategoryCurrent != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = 0;
    lv_upgradeSelected = null;
    auto18986C47_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, libSwaC_gv_zS_ArmyCustomCategoryCurrent, "ArmyUpgradeArray", 1);
    auto18986C47_ai = 1;
    while (auto18986C47_ai <= auto18986C47_ae) {
        lv_indexUpgrade = CatalogFieldValueGet(c_gameCatalogArmyCategory, libSwaC_gv_zS_ArmyCustomCategoryCurrent, "ArmyUpgradeArray["+IntToString(auto18986C47_ai-1)+"]", 1);
        lv_index += 1;
        if ((libSwaC_gv_zS_ArmyCustomUpgradeButtons[lv_index] == EventDialogControl())) {
            lv_upgradeSelected = lv_indexUpgrade;
            break;
        }

        auto18986C47_ai = auto18986C47_ai + 1;
    }
    if ((lv_upgradeSelected != null)) {
        if ((lv_upgradeSelected != libSwaC_gv_zS_ArmyCustomUpgradeCurrent)) {
            if ((libSwaC_gv_zS_ArmyCustomUpgradeCurrent != null)) {
                ActorSend(ActorFromPortrait(PortraitGetTriggerControl(libSwaC_gv_zS_ArmyCustomUpgradeButtons2[libSwaC_gf_ZS_ArmyCustomUpgradeUIIndex(libSwaC_gv_zS_ArmyCustomUpgradeCurrent)])), "Signal Death");
            }

            DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomUpgradeButtons2[lv_index], PlayerGroupAll(), true);
            ActorSend(ActorFromPortrait(PortraitGetTriggerControl(libSwaC_gv_zS_ArmyCustomUpgradeButtons2[lv_index])), "Signal Birth");
            SoundPlay(SoundLink("UI_ArmyUpgrades_UpgradeSelect", -1), PlayerGroupAll(), 100.0, 0.0);
            if ((libSwaC_gv_zS_ArmyCustomCategoryCurrent == "Zergling") && (libSwaC_gv_zS_ArmyCustomUpgradeSpamClickCount != -1)) {
                libSwaC_gv_zS_ArmyCustomUpgradeSpamClickCount += 1;
                if ((libSwaC_gv_zS_ArmyCustomUpgradeSpamClickCount >= 7) && (ConversationDataActiveSound() == null)) {
                    libSwaC_gv_zS_ArmyCustomUpgradeSpamClickCount = -1;
                    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), c_invalidPortraitId, SoundLink(ConversationDataGetSound("zSMAmbient_EvolutionMaster|Line00068", false), c_soundIndexAny), 0.0, c_transmissionDurationAdd, false);
                }

            }

        }

        libSwaC_gf_ZS_ArmyCustomUpgradeSelect(lv_upgradeSelected);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_ArmyCustomUpgradeRoomUpgradeButtonClicked_Init () {
    libSwaC_gt_ZS_ArmyCustomUpgradeRoomUpgradeButtonClicked = TriggerCreate("libSwaC_gt_ZS_ArmyCustomUpgradeRoomUpgradeButtonClicked_Func");
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomUpgradeRoomUpgradeButtonClicked, false);
    TriggerAddEventDialogControl(libSwaC_gt_ZS_ArmyCustomUpgradeRoomUpgradeButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_ArmyCustomEvolutionEvolveButtonClicked
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_ArmyCustomEvolutionEvolveButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == libSwaC_gv_zS_ArmyCustomEvolutionAcceptButton1) || (EventDialogControl() == libSwaC_gv_zS_ArmyCustomEvolutionAcceptButton2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("UI_EvolutionPit_Mutate", -1), PlayerGroupAll(), 100.0, 0.0);
    libSwaC_gf_ZS_PurchaseArmyUnit(libSwaC_gv_zS_ArmyCustomUnitCurrent);
    if ((EventDialogControl() == libSwaC_gv_zS_ArmyCustomEvolutionAcceptButton1)) {
        libSwaC_gf_ZS_ArmyCustomEvolutionPlayFanfare("Left");
    }
    else {
        libSwaC_gf_ZS_ArmyCustomEvolutionPlayFanfare("Right");
    }
    libSwaC_gf_ZS_ArmyCustomEvolutionUILeave();
    TriggerStop(libSwaC_gt_ZS_ArmyCustomEvolutionUIRunning);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_ArmyCustomEvolutionEvolveButtonClicked_Init () {
    libSwaC_gt_ZS_ArmyCustomEvolutionEvolveButtonClicked = TriggerCreate("libSwaC_gt_ZS_ArmyCustomEvolutionEvolveButtonClicked_Func");
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomEvolutionEvolveButtonClicked, false);
    TriggerAddEventDialogControl(libSwaC_gt_ZS_ArmyCustomEvolutionEvolveButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_ArmyCustomEvolutionUIRunning
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_ArmyCustomEvolutionUIRunning_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(100.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_ArmyCustomEvolutionUIRunning_Init () {
    libSwaC_gt_ZS_ArmyCustomEvolutionUIRunning = TriggerCreate("libSwaC_gt_ZS_ArmyCustomEvolutionUIRunning_Func");
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomEvolutionUIRunning, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_ArmyCustomEvolutionFanfareOver
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_ArmyCustomEvolutionFanfareOver_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.1, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_ArmyCustomEvolutionFanfareOver_Init () {
    libSwaC_gt_ZS_ArmyCustomEvolutionFanfareOver = TriggerCreate("libSwaC_gt_ZS_ArmyCustomEvolutionFanfareOver_Func");
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomEvolutionFanfareOver, false);
    TriggerAddEventCutsceneBookmarkFired(libSwaC_gt_ZS_ArmyCustomEvolutionFanfareOver, c_cutsceneNone, "Stop Scene");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_ArmyCustomEvolutionFanfareFade
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_ArmyCustomEvolutionFanfareFade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogControlFadeTransparency(libSwaC_gv_zS_ArmyCustomEvolutionFanfareText, PlayerGroupAll(), 0.5, 100.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_ArmyCustomEvolutionFanfareFade_Init () {
    libSwaC_gt_ZS_ArmyCustomEvolutionFanfareFade = TriggerCreate("libSwaC_gt_ZS_ArmyCustomEvolutionFanfareFade_Func");
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomEvolutionFanfareFade, false);
    TriggerAddEventCutsceneBookmarkFired(libSwaC_gt_ZS_ArmyCustomEvolutionFanfareFade, c_cutsceneNone, "Fade Start");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_ArmyCustomEvolutionUnitClicked
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_ArmyCustomEvolutionUnitClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_armyCategory;

    // Automatic Variable Declarations
    unit autoA5AF5235_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventUnit() == libSwaC_gv_zS_ArmyCustomEvolutionUnitA) || (EventUnit() == libSwaC_gv_zS_ArmyCustomEvolutionUnitB)))) {
            return false;
        }

        if (!((UnitTestState(EventUnit(), c_unitStateHighlightable) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_armyCategory = libSwaC_gv_zS_ArmyCustomEvolutionCategory;
    autoA5AF5235_val = EventUnit();
    if (autoA5AF5235_val == libSwaC_gv_zS_ArmyCustomEvolutionUnitA) {
        SoundPlay(SoundLink("UI_EvolutionPit_MutatePreview", -1), PlayerGroupAll(), 100.0, 0.0);
        libNtve_gf_SendActorMessageToUnit(libSwaC_gv_zS_ArmyCustomEvolutionUnitA, "StrobeStart");
        libNtve_gf_SendActorMessageToUnit(libSwaC_gv_zS_ArmyCustomEvolutionUnitB, "StrobeStop");
        if ((libSwaC_gv_zS_ArmyCustomEvolutionRawrPlayed == false)) {
            libNtve_gf_SendActorMessageToUnit(libSwaC_gv_zS_ArmyCustomEvolutionUnitA, "Signal Rawr");
            libSwaC_gv_zS_ArmyCustomEvolutionRawrPlayed = true;
        }

        libSwaC_gv_zS_ArmyCustomUnitCurrent = libSwaC_gf_StoryArmyUnitInCategory(lv_armyCategory, 1);
    }
    else if (autoA5AF5235_val == libSwaC_gv_zS_ArmyCustomEvolutionUnitB) {
        SoundPlay(SoundLink("UI_EvolutionPit_MutatePreview", -1), PlayerGroupAll(), 100.0, 0.0);
        libNtve_gf_SendActorMessageToUnit(libSwaC_gv_zS_ArmyCustomEvolutionUnitB, "StrobeStart");
        libNtve_gf_SendActorMessageToUnit(libSwaC_gv_zS_ArmyCustomEvolutionUnitA, "StrobeStop");
        if ((libSwaC_gv_zS_ArmyCustomEvolutionRawrPlayed == false)) {
            libNtve_gf_SendActorMessageToUnit(libSwaC_gv_zS_ArmyCustomEvolutionUnitB, "Signal Rawr");
            libSwaC_gv_zS_ArmyCustomEvolutionRawrPlayed = true;
        }

        libSwaC_gv_zS_ArmyCustomUnitCurrent = libSwaC_gf_StoryArmyUnitInCategory(lv_armyCategory, 2);
    }
    else {
    }
    libSwaC_gf_ZS_ArmyCustomEvolutionUIUpdateSelect();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_ArmyCustomEvolutionUnitClicked_Init () {
    libSwaC_gt_ZS_ArmyCustomEvolutionUnitClicked = TriggerCreate("libSwaC_gt_ZS_ArmyCustomEvolutionUnitClicked_Func");
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomEvolutionUnitClicked, false);
    TriggerAddEventUnitClick(libSwaC_gt_ZS_ArmyCustomEvolutionUnitClicked, null, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_ArmyCustomEvolutionUnitHighlight
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_ArmyCustomEvolutionUnitHighlight_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_armyCategory;
    int lv_index;

    // Automatic Variable Declarations
    unit auto8E062794_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventUnit() == libSwaC_gv_zS_ArmyCustomEvolutionUnitA) || (EventUnit() == libSwaC_gv_zS_ArmyCustomEvolutionUnitB)))) {
            return false;
        }

        if (!((UnitTestState(EventUnit(), c_unitStateHighlightable) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_armyCategory = libSwaC_gv_zS_ArmyCustomEvolutionCategory;
    auto8E062794_val = EventUnit();
    if (auto8E062794_val == libSwaC_gv_zS_ArmyCustomEvolutionUnitA) {
        lv_index = 1;
    }
    else if (auto8E062794_val == libSwaC_gv_zS_ArmyCustomEvolutionUnitB) {
        lv_index = 2;
    }
    else {
    }
    if (((libSwaC_gv_zS_ArmyCustomUnitCurrent == null) || (libSwaC_gv_zS_ArmyCustomUnitCurrent != libSwaC_gf_StoryArmyUnitInCategory(libSwaC_gv_zS_ArmyCustomEvolutionCategory, lv_index)))) {
        if ((lv_index == 1)) {
            libSwaC_gf_ZS_ArmyCustomEvolutionPlayUnitLight("Left", "Hilight");
        }
        else {
            libSwaC_gf_ZS_ArmyCustomEvolutionPlayUnitLight("Right", "Hilight");
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_ArmyCustomEvolutionUnitHighlight_Init () {
    libSwaC_gt_ZS_ArmyCustomEvolutionUnitHighlight = TriggerCreate("libSwaC_gt_ZS_ArmyCustomEvolutionUnitHighlight_Func");
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomEvolutionUnitHighlight, false);
    TriggerAddEventUnitHighlight(libSwaC_gt_ZS_ArmyCustomEvolutionUnitHighlight, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_ArmyCustomEvolutionUnitUnhighlight
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_ArmyCustomEvolutionUnitUnhighlight_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_armyCategory;
    int lv_index;

    // Automatic Variable Declarations
    unit auto8E2E73A0_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventUnit() == libSwaC_gv_zS_ArmyCustomEvolutionUnitA) || (EventUnit() == libSwaC_gv_zS_ArmyCustomEvolutionUnitB)))) {
            return false;
        }

        if (!((UnitTestState(EventUnit(), c_unitStateHighlightable) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_armyCategory = libSwaC_gv_zS_ArmyCustomEvolutionCategory;
    auto8E2E73A0_val = EventUnit();
    if (auto8E2E73A0_val == libSwaC_gv_zS_ArmyCustomEvolutionUnitA) {
        lv_index = 1;
    }
    else if (auto8E2E73A0_val == libSwaC_gv_zS_ArmyCustomEvolutionUnitB) {
        lv_index = 2;
    }
    else {
    }
    if (((libSwaC_gv_zS_ArmyCustomUnitCurrent == null) || (libSwaC_gv_zS_ArmyCustomUnitCurrent != libSwaC_gf_StoryArmyUnitInCategory(libSwaC_gv_zS_ArmyCustomEvolutionCategory, lv_index)))) {
        if ((lv_index == 1)) {
            libSwaC_gf_ZS_ArmyCustomEvolutionPlayUnitLight("Left", "Off");
        }
        else {
            libSwaC_gf_ZS_ArmyCustomEvolutionPlayUnitLight("Right", "Off");
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_ArmyCustomEvolutionUnitUnhighlight_Init () {
    libSwaC_gt_ZS_ArmyCustomEvolutionUnitUnhighlight = TriggerCreate("libSwaC_gt_ZS_ArmyCustomEvolutionUnitUnhighlight_Func");
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomEvolutionUnitUnhighlight, false);
    TriggerAddEventUnitHighlight(libSwaC_gt_ZS_ArmyCustomEvolutionUnitUnhighlight, null, c_playerAny, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_ArmyCustomMissionCloseButtonClicked
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_ArmyCustomMissionCloseButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSwaC_gv_zS_ArmyCustomMissionCloseButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomMissionPlayButtonClicked, false);
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomMissionPitchPlay, false);
    if ((libSwaC_gf_StoryInSimulation() == true)) {
        TriggerStop(libSwaC_gt_ZS_ArmyCustomMissionUIRunning);
    }
    else {
        libSwaC_gf_CinematicFade(false, 0.0, Color(0.00, 0.00, 0.00), true);
        libSwaC_gf_CinematicFade(true, 0.5, Color(0.00, 0.00, 0.00), false);
        libSwaC_gf_ZS_ArmyCustomEggUIEnter();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_ArmyCustomMissionCloseButtonClicked_Init () {
    libSwaC_gt_ZS_ArmyCustomMissionCloseButtonClicked = TriggerCreate("libSwaC_gt_ZS_ArmyCustomMissionCloseButtonClicked_Func");
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomMissionCloseButtonClicked, false);
    TriggerAddEventDialogControl(libSwaC_gt_ZS_ArmyCustomMissionCloseButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_ArmyCustomMissionPlayButtonClicked
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_ArmyCustomMissionPlayButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSwaC_gv_zS_ArmyCustomMissionPlayButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomMissionCloseButtonClicked, false);
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomMissionPitchPlay, false);
    libSwaC_gf_ZS_ArmyCustomMissionLaunch();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_ArmyCustomMissionPlayButtonClicked_Init () {
    libSwaC_gt_ZS_ArmyCustomMissionPlayButtonClicked = TriggerCreate("libSwaC_gt_ZS_ArmyCustomMissionPlayButtonClicked_Func");
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomMissionPlayButtonClicked, false);
    TriggerAddEventDialogControl(libSwaC_gt_ZS_ArmyCustomMissionPlayButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_ArmyCustomMissionPitchPlay
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_ArmyCustomMissionPitchPlay_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSwaC_gv_zS_ArmyCustomMissionContactPlayButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libSwaC_gf_MissionPitch(libSwaC_gv_zS_ArmyCustomMissionMap) == null)) {
        return true;
    }

    DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomMissionContactStopButton, PlayerGroupAll(), true);
    DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomMissionContactPlayButton, PlayerGroupAll(), false);
    libSwaC_gv_zS_ArmyCustomMissionPitchPlayed[libSwaC_gv_zS_ArmyCustomMissionCurrentIndex] = true;
    ConversationDataRegisterPortrait("char_EvolutionMaster", PortraitGetTriggerControl(libSwaC_gv_zS_ArmyCustomMissionContactPortrait));
    ConversationDataRun(libSwaC_gf_MissionPitch(libSwaC_gv_zS_ArmyCustomMissionMap), PlayerGroupAll(), c_conversationSkipNone, true);
    ConversationDataRegisterPortrait("char_EvolutionMaster", c_invalidPortraitId);
    DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomMissionContactStopButton, PlayerGroupAll(), false);
    DialogControlSetVisible(libSwaC_gv_zS_ArmyCustomMissionContactPlayButton, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_ArmyCustomMissionPitchPlay_Init () {
    libSwaC_gt_ZS_ArmyCustomMissionPitchPlay = TriggerCreate("libSwaC_gt_ZS_ArmyCustomMissionPitchPlay_Func");
    TriggerAddEventDialogControl(libSwaC_gt_ZS_ArmyCustomMissionPitchPlay, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_ArmyCustomMissionPitchStop
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_ArmyCustomMissionPitchStop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSwaC_gv_zS_ArmyCustomMissionContactStopButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    ConversationDataStop();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_ArmyCustomMissionPitchStop_Init () {
    libSwaC_gt_ZS_ArmyCustomMissionPitchStop = TriggerCreate("libSwaC_gt_ZS_ArmyCustomMissionPitchStop_Func");
    TriggerAddEventDialogControl(libSwaC_gt_ZS_ArmyCustomMissionPitchStop, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_ArmyCustomMissionUIRunning
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_ArmyCustomMissionUIRunning_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(100.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_ArmyCustomMissionUIRunning_Init () {
    libSwaC_gt_ZS_ArmyCustomMissionUIRunning = TriggerCreate("libSwaC_gt_ZS_ArmyCustomMissionUIRunning_Func");
    TriggerEnable(libSwaC_gt_ZS_ArmyCustomMissionUIRunning, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_ArmyUIArchivesItemChecked
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_ArmyUIArchivesItemChecked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_categoryIndex;
    int lv_upgradeIndex;
    int lv_upgradeIndex1;
    int lv_evoIndex;
    string lv_indexCategory;
    string lv_indexUpgrade;
    string lv_indexUpgrade1;
    string lv_indexEvo;

    // Automatic Variable Declarations
    int auto31641B42_ae;
    int auto31641B42_ai;
    int auto8447FE4D_ae;
    int auto8447FE4D_ai;
    int auto4866F9B2_ae;
    int auto4866F9B2_ai;
    int auto20306BCC_ae;
    int auto20306BCC_ai;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libSwaC_gv_zS_ArmyCustomArchivesUpdatingData == true)) {
        return true;
    }

    lv_categoryIndex = 0;
    auto31641B42_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto31641B42_ai = 1;
    while (auto31641B42_ai <= auto31641B42_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto31641B42_ai);
        if ((libSwaC_gf_ZS_StoryArmyCategoryUsedInUI(lv_indexCategory) == true)) {
            lv_categoryIndex += 1;
            lv_upgradeIndex = 0;
            auto8447FE4D_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUpgradeArray", 1);
            auto8447FE4D_ai = 1;
            while (auto8447FE4D_ai <= auto8447FE4D_ae) {
                lv_indexUpgrade = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUpgradeArray["+IntToString(auto8447FE4D_ai-1)+"]", 1);
                lv_upgradeIndex += 1;
                if ((libSwaC_gv_zS_ArmyCustomArchivesUpgradeCheck[lv_categoryIndex][lv_upgradeIndex] == EventDialogControl())) {
                    if ((libNtve_gf_DialogItemIsChecked(EventDialogControl(), 1) == false)) {
                        if ((libNtve_gf_DialogItemIsChecked(libSwaC_gv_zS_ArmyCustomArchivesUpgradeCheck[lv_categoryIndex][1], 1) == false) && (libNtve_gf_DialogItemIsChecked(libSwaC_gv_zS_ArmyCustomArchivesUpgradeCheck[lv_categoryIndex][2], 1) == false) && (libNtve_gf_DialogItemIsChecked(libSwaC_gv_zS_ArmyCustomArchivesUpgradeCheck[lv_categoryIndex][3], 1) == false)) {
                            libNtve_gf_SetDialogItemChecked(EventDialogControl(), true, PlayerGroupAll());
                            return true;
                        }

                    }
                    else {
                        lv_upgradeIndex1 = 0;
                        auto4866F9B2_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUpgradeArray", 1);
                        auto4866F9B2_ai = 1;
                        while (auto4866F9B2_ai <= auto4866F9B2_ae) {
                            lv_indexUpgrade1 = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUpgradeArray["+IntToString(auto4866F9B2_ai-1)+"]", 1);
                            lv_upgradeIndex1 += 1;
                            if ((lv_upgradeIndex1 != lv_upgradeIndex)) {
                                libNtve_gf_SetDialogItemChecked(libSwaC_gv_zS_ArmyCustomArchivesUpgradeCheck[lv_categoryIndex][lv_upgradeIndex1], false, PlayerGroupAll());
                            }

                            auto4866F9B2_ai = auto4866F9B2_ai + 1;
                        }
                    }
                    return true;
                }

                auto8447FE4D_ai = auto8447FE4D_ai + 1;
            }
            lv_evoIndex = 0;
            auto20306BCC_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
            auto20306BCC_ai = 1;
            while (auto20306BCC_ai <= auto20306BCC_ae) {
                lv_indexEvo = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(auto20306BCC_ai-1)+"]", 1);
                lv_evoIndex += 1;
                if ((libSwaC_gv_zS_ArmyCustomArchivesEvolutionCheck[lv_categoryIndex][lv_evoIndex] == EventDialogControl())) {
                    if ((libNtve_gf_DialogItemIsChecked(EventDialogControl(), 1) == false)) {
                        if ((libNtve_gf_DialogItemIsChecked(libSwaC_gv_zS_ArmyCustomArchivesEvolutionCheck[lv_categoryIndex][1], 1) == false) && (libNtve_gf_DialogItemIsChecked(libSwaC_gv_zS_ArmyCustomArchivesEvolutionCheck[lv_categoryIndex][2], 1) == false)) {
                            libNtve_gf_SetDialogItemChecked(EventDialogControl(), true, PlayerGroupAll());
                            return true;
                        }

                    }
                    else {
                        libNtve_gf_SetDialogItemChecked(libSwaC_gv_zS_ArmyCustomArchivesEvolutionCheck[lv_categoryIndex][(3 - lv_evoIndex)], false, PlayerGroupAll());
                    }
                    return true;
                }

                auto20306BCC_ai = auto20306BCC_ai + 1;
            }
        }

        auto31641B42_ai = auto31641B42_ai + 1;
    }
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_ArmyUIArchivesItemChecked_Init () {
    libSwaC_gt_ZS_ArmyUIArchivesItemChecked = TriggerCreate("libSwaC_gt_ZS_ArmyUIArchivesItemChecked_Func");
    TriggerEnable(libSwaC_gt_ZS_ArmyUIArchivesItemChecked, false);
    TriggerAddEventDialogControl(libSwaC_gt_ZS_ArmyUIArchivesItemChecked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_ArmyUIArchivesCancelClicked
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_ArmyUIArchivesCancelClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSwaC_gv_zS_ArmyCustomArchivesCancelButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_ZS_ArmyUIArchivesClose();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_ArmyUIArchivesCancelClicked_Init () {
    libSwaC_gt_ZS_ArmyUIArchivesCancelClicked = TriggerCreate("libSwaC_gt_ZS_ArmyUIArchivesCancelClicked_Func");
    TriggerEnable(libSwaC_gt_ZS_ArmyUIArchivesCancelClicked, false);
    TriggerAddEventDialogControl(libSwaC_gt_ZS_ArmyUIArchivesCancelClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_ArmyUIArchivesOKClicked
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_ArmyUIArchivesOKClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSwaC_gv_zS_ArmyCustomArchivesOKButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_ZS_ArmyUIArchivesUpdateData();
    libSwaC_gf_ZS_ArmyUIArchivesClose();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_ArmyUIArchivesOKClicked_Init () {
    libSwaC_gt_ZS_ArmyUIArchivesOKClicked = TriggerCreate("libSwaC_gt_ZS_ArmyUIArchivesOKClicked_Func");
    TriggerEnable(libSwaC_gt_ZS_ArmyUIArchivesOKClicked, false);
    TriggerAddEventDialogControl(libSwaC_gt_ZS_ArmyUIArchivesOKClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_ArmyUIArchivesRunning
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_ArmyUIArchivesRunning_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(100.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_ArmyUIArchivesRunning_Init () {
    libSwaC_gt_ZS_ArmyUIArchivesRunning = TriggerCreate("libSwaC_gt_ZS_ArmyUIArchivesRunning_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_ReviveCooldownReadyKerrigan
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_ReviveCooldownReadyKerrigan_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_closestHatchery;
    unit lv_indexUnit;
    fixed lv_closestDistance;
    fixed lv_distance;

    // Automatic Variable Declarations
    unitgroup auto509A05AA_g;
    int auto509A05AA_u;
    unit auto509A05AA_var;

    // Variable Initialization
    lv_closestDistance = 500.0;

    // Conditions
    if (testConds) {
        if (!((libSwaC_gv_zS_GameOver == false))) {
            return false;
        }

        if (!((PlayerGetCooldown(1, libSwaC_gv_zSC_HeroReviveLinkKerrigan) == 0.0))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(libSwaC_gv_zS_HeroReviverKerrigan, libNtve_gf_ReviveOrderWithNoTarget(AbilityCommand("KerriganRevive", 0), libSwaC_gv_zS_Kerrigan), c_orderQueueReplace);
    Wait(0.125, c_timeGame);
    auto509A05AA_g = UnitGroupSelected(1);
    auto509A05AA_u = UnitGroupCount(auto509A05AA_g, c_unitCountAll);
    for (;; auto509A05AA_u -= 1) {
        auto509A05AA_var = UnitGroupUnitFromEnd(auto509A05AA_g, auto509A05AA_u);
        if (auto509A05AA_var == null) { break; }
        if ((auto509A05AA_var == libSwaC_gv_zS_HeroReviverKerrigan)) {
            UnitSelect(libSwaC_gv_zS_Kerrigan, 1, true);
        }

    }
    UnitKill(libSwaC_gv_zS_HeroReviverKerrigan);
    UnitIssueOrder(libSwaC_gv_zS_Kerrigan, Order(AbilityCommand("K5KerriganUnburrow", 0)), c_orderQueueReplace);
    libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), libSwaC_ge_CampaignMessageType_SimpleHint, StringExternal("Param/Value/lib_SwaC_1705E0A7"), libSwaC_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libSwaC_gf_ZS_PlayKerriganHeroPanelLevelUpEffect();
    UserDataSetInt("KerriganStates", "Alive", "Value", 1, 1);
    UserDataSetInt("KerriganStates", "Dead", "Value", 1, 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_ReviveCooldownReadyKerrigan_Init () {
    libSwaC_gt_ZS_ReviveCooldownReadyKerrigan = TriggerCreate("libSwaC_gt_ZS_ReviveCooldownReadyKerrigan_Func");
    TriggerEnable(libSwaC_gt_ZS_ReviveCooldownReadyKerrigan, false);
    TriggerAddEventTimePeriodic(libSwaC_gt_ZS_ReviveCooldownReadyKerrigan, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_ReviveCooldownReadyDehaka
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_ReviveCooldownReadyDehaka_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_closestHatchery;
    unit lv_indexUnit;
    fixed lv_closestDistance;
    fixed lv_distance;

    // Automatic Variable Declarations
    unitgroup auto1210E5FA_g;
    int auto1210E5FA_u;
    unit auto1210E5FA_var;

    // Variable Initialization
    lv_closestDistance = 500.0;

    // Conditions
    if (testConds) {
        if (!((libSwaC_gv_zS_GameOver == false))) {
            return false;
        }

        if (!((PlayerGetCooldown(1, libSwaC_gv_zSC_HeroReviveLinkDehaka) == 0.0))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(libSwaC_gv_zS_HeroReviverDehaka, libNtve_gf_ReviveOrderWithNoTarget(AbilityCommand("DehakaRevive", 0), libSwaC_gv_zS_Dehaka), c_orderQueueReplace);
    Wait(0.125, c_timeGame);
    auto1210E5FA_g = UnitGroupSelected(1);
    auto1210E5FA_u = UnitGroupCount(auto1210E5FA_g, c_unitCountAll);
    for (;; auto1210E5FA_u -= 1) {
        auto1210E5FA_var = UnitGroupUnitFromEnd(auto1210E5FA_g, auto1210E5FA_u);
        if (auto1210E5FA_var == null) { break; }
        if ((auto1210E5FA_var == libSwaC_gv_zS_HeroReviverDehaka)) {
            UnitSelect(libSwaC_gv_zS_Dehaka, 1, true);
        }

    }
    UnitIssueOrder(libSwaC_gv_zS_Dehaka, Order(AbilityCommand("BurrowDehakaUp", 0)), c_orderQueueReplace);
    UnitKill(libSwaC_gv_zS_HeroReviverDehaka);
    libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), libSwaC_ge_CampaignMessageType_SimpleHint, StringExternal("Param/Value/lib_SwaC_384877CA"), libSwaC_ge_CampaignMessageFormatNotFormat_FormatMessage);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_ReviveCooldownReadyDehaka_Init () {
    libSwaC_gt_ZS_ReviveCooldownReadyDehaka = TriggerCreate("libSwaC_gt_ZS_ReviveCooldownReadyDehaka_Func");
    TriggerEnable(libSwaC_gt_ZS_ReviveCooldownReadyDehaka, false);
    TriggerAddEventTimePeriodic(libSwaC_gt_ZS_ReviveCooldownReadyDehaka, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_ReviveCooldownReadyStukov
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_ReviveCooldownReadyStukov_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_closestHatchery;
    unit lv_indexUnit;
    fixed lv_closestDistance;
    fixed lv_distance;

    // Automatic Variable Declarations
    unitgroup autoBAA7F861_g;
    int autoBAA7F861_u;
    unit autoBAA7F861_var;

    // Variable Initialization
    lv_closestDistance = 500.0;

    // Conditions
    if (testConds) {
        if (!((libSwaC_gv_zS_GameOver == false))) {
            return false;
        }

        if (!((PlayerGetCooldown(1, libSwaC_gv_zSC_HeroReviveLinkStukov) == 0.0))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(libSwaC_gv_zS_HeroReviverStukov, libNtve_gf_ReviveOrderWithNoTarget(AbilityCommand("StukovRevive", 0), libSwaC_gv_zS_Stukov), c_orderQueueReplace);
    Wait(0.125, c_timeGame);
    autoBAA7F861_g = UnitGroupSelected(1);
    autoBAA7F861_u = UnitGroupCount(autoBAA7F861_g, c_unitCountAll);
    for (;; autoBAA7F861_u -= 1) {
        autoBAA7F861_var = UnitGroupUnitFromEnd(autoBAA7F861_g, autoBAA7F861_u);
        if (autoBAA7F861_var == null) { break; }
        if ((autoBAA7F861_var == libSwaC_gv_zS_HeroReviverStukov)) {
            UnitSelect(libSwaC_gv_zS_Stukov, 1, true);
        }

    }
    UnitKill(libSwaC_gv_zS_HeroReviverStukov);
    libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), libSwaC_ge_CampaignMessageType_SimpleHint, StringExternal("Param/Value/lib_SwaC_DFEBD198"), libSwaC_ge_CampaignMessageFormatNotFormat_FormatMessage);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_ReviveCooldownReadyStukov_Init () {
    libSwaC_gt_ZS_ReviveCooldownReadyStukov = TriggerCreate("libSwaC_gt_ZS_ReviveCooldownReadyStukov_Func");
    TriggerEnable(libSwaC_gt_ZS_ReviveCooldownReadyStukov, false);
    TriggerAddEventTimePeriodic(libSwaC_gt_ZS_ReviveCooldownReadyStukov, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_KerriganDied
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_KerriganDied_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UserDataSetInt("KerriganStates", "Alive", "Value", 1, 0);
    UserDataSetInt("KerriganStates", "Dead", "Value", 1, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_KerriganDied_Init () {
    libSwaC_gt_ZS_KerriganDied = TriggerCreate("libSwaC_gt_ZS_KerriganDied_Func");
    TriggerAddEventUnitDied(libSwaC_gt_ZS_KerriganDied, UnitRefFromVariable("libSwaC_gv_zS_Kerrigan"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_KerriganUITierCloseButtonClicked
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_KerriganUITierCloseButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSwaC_gv_zS_KerriganUITierCloseButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_ZS_HideKerriganUIBackground();
    SoundPlay(SoundLink("UI_KerriganUpgrades_Confirm", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 100.0, 0.0);
    libSwaC_gf_ZS_CloseKerriganCustomizationWindow();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_KerriganUITierCloseButtonClicked_Init () {
    libSwaC_gt_ZS_KerriganUITierCloseButtonClicked = TriggerCreate("libSwaC_gt_ZS_KerriganUITierCloseButtonClicked_Func");
    TriggerAddEventDialogControl(libSwaC_gt_ZS_KerriganUITierCloseButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_KerriganUITierAbilityButtonClick
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_KerriganUITierAbilityButtonClick_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tier;
    int lv_tierIndex;

    // Automatic Variable Declarations
    const int auto3BB6855C_ae = libSwaC_gv_zSC_KerriganAbilityTiers;
    const int auto3BB6855C_ai = 1;
    const int auto6DC9454B_ae = libSwaC_gv_zSC_KerriganAbilityTierItems;
    const int auto6DC9454B_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_tier = 1;
    for ( ; ( (auto3BB6855C_ai >= 0 && lv_tier <= auto3BB6855C_ae) || (auto3BB6855C_ai < 0 && lv_tier >= auto3BB6855C_ae) ) ; lv_tier += auto3BB6855C_ai ) {
        lv_tierIndex = 1;
        for ( ; ( (auto6DC9454B_ai >= 0 && lv_tierIndex <= auto6DC9454B_ae) || (auto6DC9454B_ai < 0 && lv_tierIndex >= auto6DC9454B_ae) ) ; lv_tierIndex += auto6DC9454B_ai ) {
            if ((EventDialogControl() == libSwaC_gv_zS_KerriganUITierButtons[lv_tier][lv_tierIndex])) {
                if ((libSwaC_gv_zSX_KerriganTechTiers[lv_tier] == lv_tierIndex)) {
                    return true;
                }

                if ((libSwaC_gv_zSX_KerriganTechTiers[lv_tier] != 0)) {
                    ActorSend(ActorFromPortrait(PortraitGetTriggerControl(libSwaC_gv_zS_KerriganUITierButtons2[lv_tier][libSwaC_gv_zSX_KerriganTechTiers[lv_tier]])), "Signal Death");
                }

                DialogControlSetVisible(libSwaC_gv_zS_KerriganUITierButtons2[lv_tier][lv_tierIndex], PlayerGroupAll(), true);
                ActorSend(ActorFromPortrait(PortraitGetTriggerControl(libSwaC_gv_zS_KerriganUITierButtons2[lv_tier][lv_tierIndex])), "Signal Birth");
                SoundPlay(SoundLink("UI_KerriganUpgrades_UpgradeSelect", -1), PlayerGroupAll(), 100.0, 0.0);
                libNtve_gf_PlayAnimation(libSwaC_gv_zS_KerriganUIBackgroundKerrigan, "FaceAnim", "SeriousEyes", 0, c_animTimeDefault);
                ActorSend(libSwaC_gv_zS_KerriganUIBackgroundKerrigan, "AnimBracketStart ZUIEyeGlow Eye,Glow,Start Eye,Glow Eye,Glow,End ContentPlayOnce");
                libSwaC_gv_zSX_KerriganTechTiers[lv_tier] = lv_tierIndex;
                libSwaC_gf_ZS_KerriganUITierUpdate();
                return true;
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_KerriganUITierAbilityButtonClick_Init () {
    libSwaC_gt_ZS_KerriganUITierAbilityButtonClick = TriggerCreate("libSwaC_gt_ZS_KerriganUITierAbilityButtonClick_Func");
    TriggerAddEventDialogControl(libSwaC_gt_ZS_KerriganUITierAbilityButtonClick, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_KerriganCustomizationRunning
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_KerriganCustomizationRunning_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(100.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_KerriganCustomizationRunning_Init () {
    libSwaC_gt_ZS_KerriganCustomizationRunning = TriggerCreate("libSwaC_gt_ZS_KerriganCustomizationRunning_Func");
    TriggerEnable(libSwaC_gt_ZS_KerriganCustomizationRunning, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_KerriganCustomizationPlayEntryAnims
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_KerriganCustomizationPlayEntryAnims_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tier;
    bool lv_tiersQueued;
    int lv_levelUpCount;
    fixed lv_levelUpPeriod;
    const fixed lv_maxTotalDuration = 6.0;
    const fixed lv_levelDuration = 0.12;
    const fixed lv_tierDuration = 2.0;
    int lv_startLevel;
    bool lv_tierHit;

    // Automatic Variable Declarations
    const int auto9D585570_ae = libSwaC_gv_zSC_KerriganAbilityTiers;
    const int auto9D585570_ai = 1;
    int auto893949F7_n;
    int auto893949F7_i;
    const int auto34A05806_ae = libSwaC_gv_zSC_KerriganAbilityTiers;
    const int auto34A05806_ai = 1;
    const int auto3F050B56_ae = libSwaC_gv_zSC_KerriganAbilityTiers;
    const int auto3F050B56_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_levelUpCount = (libSwaC_gv_zS_KerriganUIFinalXP-libSwaC_gv_zS_KerriganUIOriginalXP);
    if (((libSwaC_gf_StoryInSimulation() == true) || (lv_levelUpCount == 0))) {
        return true;
    }

    lv_tier = 1;
    for ( ; ( (auto9D585570_ai >= 0 && lv_tier <= auto9D585570_ae) || (auto9D585570_ai < 0 && lv_tier >= auto9D585570_ae) ) ; lv_tier += auto9D585570_ai ) {
        if ((libSwaC_gf_ZS_KerriganUITierIsNew(lv_tier) == true)) {
            lv_tiersQueued = true;
            break;
        }

    }
    libSwaC_gv_zSX_KerriganUILastKnownXP = libSwaC_gv_zS_KerriganUIFinalXP;
    lv_startLevel = libSwaC_gv_zS_KerriganUIXP;
    lv_levelUpPeriod = MinF((lv_maxTotalDuration/lv_levelUpCount), lv_levelDuration);
    libSwaC_gv_zS_KerriganUIDeltaHealth = (libSwaC_gv_zS_KerriganUIFinalHealth-CatalogFieldValueGetAsInt(c_gameCatalogUnit, "K5Kerrigan", "LifeMax", 1));
    libSwaC_gv_zS_KerriganUIDeltaEnergy = (libSwaC_gv_zS_KerriganUIFinalEnergy-CatalogFieldValueGetAsInt(c_gameCatalogUnit, "K5Kerrigan", "EnergyMax", 1));
    libSwaC_gv_zS_KerriganUIDeltaDamage = (libSwaC_gv_zS_KerriganUIFinalDamage-CatalogFieldValueGetAsInt(c_gameCatalogEffect, "ChainReaction1Damage", "Amount", 1));
    libSwaC_gv_zS_KerriganUIDeltaArmor = (libSwaC_gv_zS_KerriganUIFinalArmor-CatalogFieldValueGetAsInt(c_gameCatalogUnit, "K5Kerrigan", "LifeArmor", 1));
    libSwaC_gv_zS_KerriganUITierLevel = libSwaC_gf_ZS_KerriganTierFromXP();
    libSwaC_gf_ZS_KerriganUITierUpdate();
    Wait(0.5, c_timeGame);
    if ((lv_tiersQueued == true)) {
        TriggerExecute(libSwaC_gt_ZS_KerriganCustomizationPlayKerriganAnim, true, false);
    }

    SoundPlay(SoundLink("UI_KerriganUpgrades_CurrentLevel_MeterStrt", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundPlay(SoundLink("UI_KerriganUpgrades_CurrentLevel_MeterLoop", -1), PlayerGroupAll(), 100.0, 0.0);
    libSwaC_gv_zS_KerriganUITierLevelLoopSound = SoundLastPlayed();
    auto893949F7_n = lv_levelUpCount;
    for (auto893949F7_i = 1; auto893949F7_i <= auto893949F7_n; auto893949F7_i += 1) {
        libSwaC_gv_zS_KerriganUIXP += 1;
        lv_tierHit = false;
        lv_tier = (libSwaC_gv_zSC_KerriganAbilityTiers2+1);
        for ( ; ( (auto34A05806_ai >= 0 && lv_tier <= auto34A05806_ae) || (auto34A05806_ai < 0 && lv_tier >= auto34A05806_ae) ) ; lv_tier += auto34A05806_ai ) {
            if ((libSwaC_gf_ZS_KerriganTierCost(lv_tier) == libSwaC_gv_zS_KerriganUIXP)) {
                lv_tierHit = true;
                break;
            }

        }
        if ((lv_tierHit == true)) {
            DialogControlInvokeAsString(libSwaC_gv_zS_KerriganUITierPowerBar2, PlayerGroupAll(), ("UpgradeLevel" + IntToString(libSwaC_gv_zS_KerriganUIXP)), null, null, null, null);
            SoundPlay(SoundLink("UI_KerriganUpgrades_CurrentLevel_x10", -1), PlayerGroupAll(), 100.0, 0.0);
        }

        libSwaC_gf_ZS_KerriganUITierUpdate();
        Wait(lv_levelUpPeriod, c_timeGame);
    }
    SoundStop(libSwaC_gv_zS_KerriganUITierLevelLoopSound, true);
    Wait(1.0, c_timeReal);
    libSwaC_gf_ZS_KerriganUIShowLevelUpFlash();
    Wait(2.0, c_timeReal);
    if ((libSwaC_gf_MissionStatusCheck("ZZerus3", libSwaC_ge_MissionStatus_Completed) == true) && (UserDataGetInt("StoryStates", "Kerrigan Primal Column Displayed", "value", 1) == 0)) {
        TriggerExecute(libSwaC_gt_ZS_KerriganCustomizationPlayPrimalAnim, true, true);
    }

    Wait(1.0, c_timeReal);
    lv_tier = (libSwaC_gv_zSC_KerriganAbilityTiers2+1);
    for ( ; ( (auto3F050B56_ai >= 0 && lv_tier <= auto3F050B56_ae) || (auto3F050B56_ai < 0 && lv_tier >= auto3F050B56_ae) ) ; lv_tier += auto3F050B56_ai ) {
        if ((libSwaC_gf_ZS_KerriganTierCost(lv_tier) <= libSwaC_gv_zS_KerriganUIXP) && (libSwaC_gf_ZS_KerriganTierCost(lv_tier) > lv_startLevel)) {
            libSwaC_gv_zS_KerriganUITierLevel = lv_tier;
            SoundPlay(SoundLink("UI_Kerrigan_AbilityLevel_HorzTier", -1), PlayerGroupAll(), 100.0, 0.0);
            if ((libSwaC_gf_KerriganPhaseCheck(libSwaC_ge_KerriganPhase_KerriganPhaseGhost) == true)) {
                DialogControlInvokeAsString(libSwaC_gv_zS_KerriganUITierAbilityFrame4[(lv_tier-libSwaC_gv_zSC_KerriganAbilityTiers2)], PlayerGroupAll(), "BaseAbilityUpgrade", null, null, null, null);
            }
            else {
                DialogControlInvokeAsString(libSwaC_gv_zS_KerriganUITierAbilityFrame4[(lv_tier-libSwaC_gv_zSC_KerriganAbilityTiers2)], PlayerGroupAll(), "PrimalAbilityUpgrade", null, null, null, null);
            }
            libSwaC_gf_ZS_KerriganUITierUpdate();
            Wait(lv_tierDuration, c_timeReal);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_KerriganCustomizationPlayEntryAnims_Init () {
    libSwaC_gt_ZS_KerriganCustomizationPlayEntryAnims = TriggerCreate("libSwaC_gt_ZS_KerriganCustomizationPlayEntryAnims_Func");
    TriggerEnable(libSwaC_gt_ZS_KerriganCustomizationPlayEntryAnims, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_KerriganCustomizationPlayKerriganAnim
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_KerriganCustomizationPlayKerriganAnim_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const fixed lv_surgeAnimDelay = 1.9;
    fixed lv_surgeSoundPreOffset;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_surgeSoundPreOffset = 0.1;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayAnimation(libSwaC_gv_zS_KerriganUIBackgroundKerrigan, c_animNameDefault, "Stand Victory", c_animFlagNonLooping, c_animTimeDefault);
    libNtve_gf_PlayAnimation(libSwaC_gv_zS_KerriganUIBackgroundKerrigan, "FaceAnim", "AngryEyes", c_animFlagPlayForever, c_animTimeDefault);
    ActorSend(libSwaC_gv_zS_KerriganUIBackgroundKerrigan, "AnimBracketStart ZUIEyeGlow Eye,Glow,Start Eye,Glow Eye,Glow,End");
    SoundPlay(SoundLink("UI_Kerrigan_Abilities_EyesGlow", -1), PlayerGroupAll(), 100.0, 0.0);
    if ((libSwaC_gf_KerriganPhaseCheck(libSwaC_ge_KerriganPhase_KerriganPhaseGhost) == false)) {
        SoundPlay(SoundLink("UI_Kerrigan_Abilities_Foley_Pt1", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    else {
        SoundPlay(SoundLink("UI_Kerrigan_Abilities_Foley_Pt1_Ghost", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    Wait((lv_surgeAnimDelay-lv_surgeSoundPreOffset), c_timeGame);
    SoundPlay(SoundLink("UI_Kerrigan_Abilities_EnergyBurst", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundPlay(SoundLink("UI_Kerrigan_EnergyExert_Vox", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(lv_surgeSoundPreOffset, c_timeGame);
    if ((libSwaC_gf_KerriganPhaseCheck(libSwaC_ge_KerriganPhase_KerriganPhaseGhost) == false)) {
        SoundPlay(SoundLink("UI_Kerrigan_Abilities_Foley_Pt2", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    else {
        SoundPlay(SoundLink("UI_Kerrigan_Abilities_Foley_Pt2_Ghost", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    ActorSend(libSwaC_gv_zS_KerriganUIBackgroundKerrigan, "AnimBracketStop ZUIEyeGlow");
    libNtve_gf_ClearAnimation(libSwaC_gv_zS_KerriganUIBackgroundKerrigan, "FaceAnim");
    libNtve_gf_AttachActorToUnit(libSwaC_gv_zS_KerriganUIBackground, "KerriganAbilityUISurge", "Ref_Target 01");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 10.500000");
    if ((libSwaC_gf_KerriganPhaseCheck(libSwaC_ge_KerriganPhase_KerriganPhaseGhost) == false)) {
        Wait(2.0, c_timeGame);
        ActorSend(libSwaC_gv_zS_KerriganUIBackgroundKerrigan, "AnimClear Default 1.200000");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_KerriganCustomizationPlayKerriganAnim_Init () {
    libSwaC_gt_ZS_KerriganCustomizationPlayKerriganAnim = TriggerCreate("libSwaC_gt_ZS_KerriganCustomizationPlayKerriganAnim_Func");
    TriggerEnable(libSwaC_gt_ZS_KerriganCustomizationPlayKerriganAnim, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_KerriganCustomizationPlayPrimalAnim
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_KerriganCustomizationPlayPrimalAnim_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tier;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlInvokeAsString(libSwaC_gv_zS_KerriganUITierPowerBar3, PlayerGroupAll(), "AbilityContainerUpgrade", null, null, null, null);
    SoundPlay(SoundLink("UI_Kerrigan_AbilityLevel_3rdRowExpansion", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(0.4, c_timeGame);
    UserDataSetInt("StoryStates", "Kerrigan Primal Column Displayed", "value", 1, 1);
    libSwaC_gf_ZS_KerriganUITierUpdate();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_KerriganCustomizationPlayPrimalAnim_Init () {
    libSwaC_gt_ZS_KerriganCustomizationPlayPrimalAnim = TriggerCreate("libSwaC_gt_ZS_KerriganCustomizationPlayPrimalAnim_Func");
    TriggerEnable(libSwaC_gt_ZS_KerriganCustomizationPlayPrimalAnim, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_ArchivesBankLoadSyncComplete
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_ArchivesBankLoadSyncComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    BankWait(libSwaC_gv_zS_ArchivesBank);
    libSwaC_gv_zS_ArchivesReloading = false;
    libSwaC_gf_ZS_ArchiveBankLoad();
    libSwaC_gf_DispatchStoryEvent(libSwaC_ge_ZS_Event_ArchivesBankSynced, "", "", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_ArchivesBankLoadSyncComplete_Init () {
    libSwaC_gt_ZS_ArchivesBankLoadSyncComplete = TriggerCreate("libSwaC_gt_ZS_ArchivesBankLoadSyncComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_ArchivesBankSaveSyncComplete
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_ArchivesBankSaveSyncComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    BankWait(libSwaC_gv_zS_ArchivesBank);
    libSwaC_gv_zS_ArchivesReloading = false;
    libSwaC_gf_ZS_ArchiveBankSave();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_ArchivesBankSaveSyncComplete_Init () {
    libSwaC_gt_ZS_ArchivesBankSaveSyncComplete = TriggerCreate("libSwaC_gt_ZS_ArchivesBankSaveSyncComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_ArchivesHandleMissionLoad
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_ArchivesHandleMissionLoad_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindStory) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gv_zS_InLoadedMission = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_ArchivesHandleMissionLoad_Init () {
    libSwaC_gt_ZS_ArchivesHandleMissionLoad = TriggerCreate("libSwaC_gt_ZS_ArchivesHandleMissionLoad_Func");
    TriggerAddEventLoadGameDone(libSwaC_gt_ZS_ArchivesHandleMissionLoad);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_EndCinematic
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_EndCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    libSwaC_gf_PlayCinematic("Pre-render - Kerrigan Ascendant", false);
    libSwaC_gv_zS_EndCinematicFinished = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_EndCinematic_Init () {
    libSwaC_gt_ZS_EndCinematic = TriggerCreate("libSwaC_gt_ZS_EndCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_EndCredits
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_EndCredits_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    libSwaC_gv_zS_EndCreditFinished = false;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZSwarm_Credits_Static", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCreditsPanel, true);
    TriggerEnable(libSwaC_gt_ZS_EndCreditsEnds, true);
    while (!((libSwaC_gv_zS_EndCreditFinished == true))) {
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_EndCredits_Init () {
    libSwaC_gt_ZS_EndCredits = TriggerCreate("libSwaC_gt_ZS_EndCredits_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_EndCreditsEnds
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_EndCreditsEnds_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gv_zS_EndCreditFinished = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_EndCreditsEnds_Init () {
    libSwaC_gt_ZS_EndCreditsEnds = TriggerCreate("libSwaC_gt_ZS_EndCreditsEnds_Func");
    TriggerEnable(libSwaC_gt_ZS_EndCreditsEnds, false);
    TriggerAddEventGameCreditsFinished(libSwaC_gt_ZS_EndCreditsEnds, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_VSScreenContinue
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_VSScreenContinue_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSwaC_gv_zS_VSBtnContinue))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetEnabled(libSwaC_gv_zS_VSBtnContinue, PlayerGroupAll(), false);
    DialogControlSetEnabled(libSwaC_gv_zS_VSBtnPlayAgain, PlayerGroupAll(), false);
    TriggerEnable(libSwaC_gt_ZS_VSScreenContinue, false);
    TriggerEnable(libSwaC_gt_ZS_VSScreenPlayAgain, false);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 0.0, 1.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 0.0, 1.0);
    libSwaC_gf_ZS_FadeAllSoundsExceptMusic(1.0, false);
    libSwaC_gf_CinematicFade(false, 1.0, Color(0.00, 0.00, 0.00), true);
    DialogControlSetVisible(libSwaC_gv_zS_VSMainPanel, PlayerGroupAll(), false);
    TriggerExecute(libSwaC_gt_ZS_SaveCampaignStatsData, true, false);
    while (!((libSwaC_gv_zS_ArchivesReloading == false))) {
        Wait(0.1, c_timeGame);
    }
    if ((libSwaC_gf_CurrentMap() != "ZKorhal3")) {
        GameOver(1, c_gameOverVictory, false, false);
        return true;
    }

    libSwaC_gf_ZS_CampaignVictory();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_VSScreenContinue_Init () {
    libSwaC_gt_ZS_VSScreenContinue = TriggerCreate("libSwaC_gt_ZS_VSScreenContinue_Func");
    TriggerEnable(libSwaC_gt_ZS_VSScreenContinue, false);
    TriggerAddEventDialogControl(libSwaC_gt_ZS_VSScreenContinue, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_VSScreenPlayAgain
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_VSScreenPlayAgain_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_simulation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_simulation = true;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSwaC_gv_zS_VSBtnPlayAgain))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_ZS_VSDisplayRestartDialog();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_VSScreenPlayAgain_Init () {
    libSwaC_gt_ZS_VSScreenPlayAgain = TriggerCreate("libSwaC_gt_ZS_VSScreenPlayAgain_Func");
    TriggerEnable(libSwaC_gt_ZS_VSScreenPlayAgain, false);
    TriggerAddEventDialogControl(libSwaC_gt_ZS_VSScreenPlayAgain, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_VSRestartCancel
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_VSRestartCancel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSwaC_gv_zS_VSRestartCancelButton))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libSwaC_gt_ZS_VSRestartCancel, false);
    TriggerEnable(libSwaC_gt_ZS_VSRestartRestart, false);
    DialogControlSetVisible(libSwaC_gv_zS_VSMainPanel, PlayerGroupAll(), true);
    DialogControlSetVisible(libSwaC_gv_zS_VSRestartPanel, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_VSRestartCancel_Init () {
    libSwaC_gt_ZS_VSRestartCancel = TriggerCreate("libSwaC_gt_ZS_VSRestartCancel_Func");
    TriggerEnable(libSwaC_gt_ZS_VSRestartCancel, false);
    TriggerAddEventDialogControl(libSwaC_gt_ZS_VSRestartCancel, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_VSRestartRestart
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_VSRestartRestart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_difficulty;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_difficulty = 2;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSwaC_gv_zS_VSRestartRestartButton))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libSwaC_gt_ZS_VSRestartCancel, false);
    TriggerEnable(libSwaC_gt_ZS_VSRestartRestart, false);
    lv_difficulty = libSwaC_gf_ZS_DifficultyFromIndex(DialogControlGetSelectedItem(libSwaC_gv_zS_VSRestartDifficultyPulldown, 1));
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 0.0, 0.5);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 0.0, 0.5);
    libSwaC_gf_ZS_FadeAllSoundsExceptMusic(0.5, true);
    libSwaC_gf_PrepareForMission(libSwaC_gf_CurrentMap(), libSwaC_gv_zSX_IsSimulation, true, lv_difficulty);
    if ((libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindMission) == true)) {
        libSwaC_gv_zSX_CamStatsMissionStartedVictoryRestarted[libSwaC_gf_ZS_MissionIndex(libSwaC_gf_CurrentMap())][libSwaC_gf_ZS_DifficultyIndex(lv_difficulty)] += 1;
        TriggerExecute(libSwaC_gt_ZS_SaveCampaignStatsData, true, false);
    }

    Wait(0.125, c_timeGame);
    while (!((libSwaC_gv_zS_ArchivesReloading == false))) {
        Wait(0.1, c_timeGame);
    }
    GameOver(1, c_gameOverVictory, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_VSRestartRestart_Init () {
    libSwaC_gt_ZS_VSRestartRestart = TriggerCreate("libSwaC_gt_ZS_VSRestartRestart_Func");
    TriggerEnable(libSwaC_gt_ZS_VSRestartRestart, false);
    TriggerAddEventDialogControl(libSwaC_gt_ZS_VSRestartRestart, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_FootageRecording
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_FootageRecording_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libSwaC_gv_zS_FootageRecordingCallback != null)) {
        libSwaC_gf_ZS_FootageRecording();
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, StringExternal("Param/Value/lib_SwaC_D265BD06"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_FootageRecording_Init () {
    libSwaC_gt_ZS_FootageRecording = TriggerCreate("libSwaC_gt_ZS_FootageRecording_Func");
    TriggerAddEventChatMessage(libSwaC_gt_ZS_FootageRecording, 1, "INTRO", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_DebugProgressMissionButtonClicked
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_DebugProgressMissionButtonClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_indexMission;
    string lv_clickedMission;
    int lv_bonusCount;
    string lv_indexObjective;

    // Automatic Variable Declarations
    int auto2F684947_ae;
    int auto2F684947_ai;
    int autoC0CA0806_ae;
    int autoC0CA0806_ai;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_clickedMission = null;
    auto2F684947_ae = CatalogEntryCount(c_gameCatalogMap);
    auto2F684947_ai = 1;
    while (auto2F684947_ai <= auto2F684947_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto2F684947_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            if ((EventDialogControl() == libNtve_gf_ValueFromDataTableDialogItem(true, libSwaC_gf_ZS_DebugProgressDataTableID("Button", (lv_indexMission))))) {
                lv_clickedMission = lv_indexMission;
                break;
            }

        }
        auto2F684947_ai = auto2F684947_ai + 1;
    }
    if ((lv_clickedMission == null)) {
        return true;
    }

    if ((lv_clickedMission == "ZKorhal3")) {
        UIShowCustomDialog(PlayerGroupAll(), libNtve_ge_CustomDialogType_c_customDialogTypeMessage, StringExternal("Param/Value/lib_SwaC_4031BB5C"), null, false);
        return true;
    }

    libSwaC_gv_zS_DebugProgressDocDirty = true;
    libSwaC_gv_zS_DebugProgressLastMission = lv_clickedMission;
    if ((libSwaC_gf_PostMissionStoryMap(lv_clickedMission, false, c_gameOverVictory) != null)) {
        libSwaC_gv_zS_DebugProgressLastStoryMap = libSwaC_gf_PostMissionStoryMap(lv_clickedMission, false, c_gameOverVictory);
    }

    if ((libSwaC_gv_zS_DebugProgressReleaseMode == false)) {
        libSwaC_gf_DispatchStoryEvent(libSwaC_ge_ZS_Event_ProgressMapCompleted, (lv_clickedMission), "", false);
        autoC0CA0806_ae = CatalogFieldValueCount(c_gameCatalogMap, lv_clickedMission, "ObjectiveArray", 1);
        autoC0CA0806_ai = 1;
        while (autoC0CA0806_ai <= autoC0CA0806_ae) {
            lv_indexObjective = CatalogFieldValueGet(c_gameCatalogMap, lv_clickedMission, "ObjectiveArray["+IntToString(autoC0CA0806_ai-1)+"]", 1);
            libSwaC_gf_ZS_SetObjectiveProgressData(lv_indexObjective, UserDataGetInt("MissionObjective", libSwaC_gf_ZS_ObjectiveUserDataInstance(lv_indexObjective), "CheatProgress", 1), true);
            autoC0CA0806_ai = autoC0CA0806_ai + 1;
        }
    }

    libSwaC_gf_ZS_CompleteMission(lv_clickedMission);
    libSwaC_gf_SetCurrentMap(lv_clickedMission);
    libSwaC_gv_zS_DebugProgressLastTravel = null;
    libSwaC_gf_ZS_UpdatePlanetData(libSwaC_gf_StoryMapPlanet(libSwaC_gv_zS_DebugProgressLastMission));
    ConversationDataStateSetValue("MissionsCompleted", libSwaC_gf_NumberOfMissions(libSwaC_ge_MissionCountOptions_Completed));
    libSwaC_gf_ZS_OpenCampaignBank();
    libSwaC_gf_ZS_SaveMapToBank(null, libSwaC_gv_zS_CampaignBank, false);
    libSwaC_gf_ZS_DebugProgressUpdateDialog();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_DebugProgressMissionButtonClicked_Init () {
    libSwaC_gt_ZS_DebugProgressMissionButtonClicked = TriggerCreate("libSwaC_gt_ZS_DebugProgressMissionButtonClicked_Func");
    TriggerEnable(libSwaC_gt_ZS_DebugProgressMissionButtonClicked, false);
    TriggerAddEventDialogControl(libSwaC_gt_ZS_DebugProgressMissionButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_DebugProgressOK
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_DebugProgressOK_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSwaC_gv_zS_DebugProgressButtonOK))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_ZS_DebugProgressCloseDialog();
    if ((libSwaC_gf_CampaignDebugModeIsOn("ProgressCheat") == true) && (libSwaC_gv_zS_DebugProgressDocDirty == false) && (libSwaC_gf_MissionStatusCheck("ZLab1", libSwaC_ge_MissionStatus_Completed) == false)) {
        return true;
    }

    if ((libSwaC_gv_zS_DebugProgressResetUsed == true)) {
        BankDeleteCampaignBanks(1, 1);
        libSwaC_gv_zS_StoryBank = null;
        libSwaC_gv_zS_CampaignBank = null;
        libSwaC_gv_zS_ArmyTechBank = null;
    }

    if ((libSwaC_gv_zS_DebugProgressExitCallbackOK != null)) {
        TriggerExecute(libSwaC_gv_zS_DebugProgressExitCallbackOK, true, false);
    }

    libSwaC_gv_zS_DebugProgressActive = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_DebugProgressOK_Init () {
    libSwaC_gt_ZS_DebugProgressOK = TriggerCreate("libSwaC_gt_ZS_DebugProgressOK_Func");
    TriggerEnable(libSwaC_gt_ZS_DebugProgressOK, false);
    TriggerAddEventDialogControl(libSwaC_gt_ZS_DebugProgressOK, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_DebugProgressLaunchMission
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_DebugProgressLaunchMission_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_indexMission;
    string lv_clickedMission;

    // Automatic Variable Declarations
    int autoDDA62A82_ae;
    int autoDDA62A82_ai;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_clickedMission = null;
    autoDDA62A82_ae = CatalogEntryCount(c_gameCatalogMap);
    autoDDA62A82_ai = 1;
    while (autoDDA62A82_ai <= autoDDA62A82_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoDDA62A82_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            if ((EventDialogControl() == libNtve_gf_ValueFromDataTableDialogItem(true, libSwaC_gf_ZS_DebugProgressDataTableID("PlayButton", (lv_indexMission))))) {
                lv_clickedMission = lv_indexMission;
                break;
            }

        }
        autoDDA62A82_ai = autoDDA62A82_ai + 1;
    }
    if ((lv_clickedMission == null)) {
        return true;
    }

    libSwaC_gf_ZS_DebugProgressCloseDialog();
    if ((libSwaC_gv_zS_DebugProgressResetUsed == true)) {
        BankDeleteCampaignBanks(1, 1);
        libSwaC_gv_zS_StoryBank = null;
        libSwaC_gv_zS_CampaignBank = null;
        libSwaC_gv_zS_ArmyTechBank = null;
    }

    libSwaC_gf_SetCurrentMap(libSwaC_gv_zS_DebugProgressLastStoryMap);
    libSwaC_gv_zSX_LastStoryMap = libSwaC_gv_zS_DebugProgressLastStoryMap;
    libSwaC_gf_PrepareForMission(lv_clickedMission, false, false, libSwaC_gv_zSX_CampaignDifficulty);
    libSwaC_gv_zS_DebugProgressActive = false;
    GameOver(1, c_gameOverVictory, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_DebugProgressLaunchMission_Init () {
    libSwaC_gt_ZS_DebugProgressLaunchMission = TriggerCreate("libSwaC_gt_ZS_DebugProgressLaunchMission_Func");
    TriggerEnable(libSwaC_gt_ZS_DebugProgressLaunchMission, false);
    TriggerAddEventDialogControl(libSwaC_gt_ZS_DebugProgressLaunchMission, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_DebugProgressTravel
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_DebugProgressTravel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_indexLocation;
    string lv_clickedMission;

    // Automatic Variable Declarations
    int auto5AB250C6_ae;
    int auto5AB250C6_ai;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_clickedMission = null;
    auto5AB250C6_ae = CatalogEntryCount(c_gameCatalogLocation);
    auto5AB250C6_ai = 1;
    while (auto5AB250C6_ai <= auto5AB250C6_ae) {
        lv_indexLocation = CatalogEntryGet(c_gameCatalogLocation, auto5AB250C6_ai);
        if ((EventDialogControl() == libNtve_gf_ValueFromDataTableDialogItem(true, libSwaC_gf_ZS_DebugProgressDataTableID("PlanetButton", (lv_indexLocation))))) {
            lv_clickedMission = lv_indexLocation;
            break;
        }

        auto5AB250C6_ai = auto5AB250C6_ai + 1;
    }
    if ((lv_clickedMission == null)) {
        return true;
    }

    libSwaC_gv_zS_DebugProgressLastTravel = lv_clickedMission;
    libSwaC_gf_SetCurrentMap(libSwaC_gf_StoryPlanetMap(lv_clickedMission));
    libSwaC_gf_ZS_UpdatePlanetData(lv_clickedMission);
    libSwaC_gf_ZS_DebugProgressUpdateDialog();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_DebugProgressTravel_Init () {
    libSwaC_gt_ZS_DebugProgressTravel = TriggerCreate("libSwaC_gt_ZS_DebugProgressTravel_Func");
    TriggerEnable(libSwaC_gt_ZS_DebugProgressTravel, false);
    TriggerAddEventDialogControl(libSwaC_gt_ZS_DebugProgressTravel, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_DebugProgressCancel
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_DebugProgressCancel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSwaC_gv_zS_DebugProgressButtonCancel))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_ZS_DebugProgressRestoreStats();
    libSwaC_gf_SetCurrentMap(libSwaC_gv_zS_DebugProgressCurrentMapBak);
    libSwaC_gf_ZS_DebugProgressCloseDialog();
    if ((libSwaC_gv_zS_DebugProgressExitCallbackCancel != null)) {
        TriggerExecute(libSwaC_gv_zS_DebugProgressExitCallbackCancel, true, false);
    }

    libSwaC_gf_DispatchStoryEvent(libSwaC_ge_ZS_Event_ProgressCheatCancel, "", "", false);
    libSwaC_gv_zS_DebugProgressActive = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_DebugProgressCancel_Init () {
    libSwaC_gt_ZS_DebugProgressCancel = TriggerCreate("libSwaC_gt_ZS_DebugProgressCancel_Func");
    TriggerEnable(libSwaC_gt_ZS_DebugProgressCancel, false);
    TriggerAddEventDialogControl(libSwaC_gt_ZS_DebugProgressCancel, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_DebugProgressReset
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_DebugProgressReset_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSwaC_gv_zS_DebugProgressButtonReset))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gv_zS_DebugProgressDocDirty = true;
    libSwaC_gv_zS_DebugProgressResetUsed = true;
    libSwaC_gv_zS_DebugProgressLastMission = null;
    libSwaC_gv_zS_DebugProgressLastTravel = null;
    libSwaC_gf_ResetCampaignData();
    libSwaC_gf_SetCurrentMap("ZStoryLab");
    libSwaC_gf_UpdateMissionFlow();
    libSwaC_gf_ZS_DebugProgressUpdateDialog();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_DebugProgressReset_Init () {
    libSwaC_gt_ZS_DebugProgressReset = TriggerCreate("libSwaC_gt_ZS_DebugProgressReset_Func");
    TriggerEnable(libSwaC_gt_ZS_DebugProgressReset, false);
    TriggerAddEventDialogControl(libSwaC_gt_ZS_DebugProgressReset, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_DebugProgress
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_DebugProgress_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    GameCheatAllow(c_gameCheatCredits, false);
    GameCheatAllow(c_gameCheatResearch, false);
    GameCheatAllow(c_gameCheatProgress, false);
    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gv_zS_DebugProgressResetUsed = false;
    libSwaC_gf_ZS_DebugProgressDisplayDialog(null, libSwaC_gt_ZS_DebugProgressOKCallback, null);
    TriggerEnable(TriggerGetCurrent(), true);
    if ((libNtve_gf_PlayerInCinematicMode(1) == false) && (libSwaC_gv_zS_GameOver == false)) {
        GameCheatAllow(c_gameCheatCredits, true);
        GameCheatAllow(c_gameCheatResearch, true);
        GameCheatAllow(c_gameCheatProgress, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_DebugProgress_Init () {
    libSwaC_gt_ZS_DebugProgress = TriggerCreate("libSwaC_gt_ZS_DebugProgress_Func");
    TriggerAddEventCheatUsed(libSwaC_gt_ZS_DebugProgress, c_playerAny, c_gameCheatProgress);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_DebugProgress Develop
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_DebugProgressDevelop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gv_zS_DebugProgressResetUsed = false;
    libSwaC_gf_ZS_DebugProgressDisplayDialog(null, libSwaC_gt_ZS_DebugProgressOKCallback, null);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_DebugProgressDevelop_Init () {
    libSwaC_gt_ZS_DebugProgressDevelop = TriggerCreate("libSwaC_gt_ZS_DebugProgressDevelop_Func");
    TriggerAddEventChatMessage(libSwaC_gt_ZS_DebugProgressDevelop, c_playerAny, "PROGRESS", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_DebugProgress Develop Debug As Release
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_DebugProgressDevelopDebugAsRelease_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gv_zS_DebugProgressResetUsed = false;
    libSwaC_gv_zS_DebugProgressReleaseMode = true;
    libSwaC_gf_ZS_DebugProgressDisplayDialog(null, libSwaC_gt_ZS_DebugProgressOKCallback, null);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_DebugProgressDevelopDebugAsRelease_Init () {
    libSwaC_gt_ZS_DebugProgressDevelopDebugAsRelease = TriggerCreate("libSwaC_gt_ZS_DebugProgressDevelopDebugAsRelease_Func");
    TriggerAddEventChatMessage(libSwaC_gt_ZS_DebugProgressDevelopDebugAsRelease, c_playerAny, "PROGRESSR", true);
    TriggerAddEventChatMessage(libSwaC_gt_ZS_DebugProgressDevelopDebugAsRelease, c_playerAny, "PROGRESSRELEASE", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_DebugProgressOKCallback
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_DebugProgressOKCallback_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gv_zSX_LastSuccessfulMission = libSwaC_gv_zS_DebugProgressLastMission;
    if ((libSwaC_gv_zS_DebugProgressLastTravel != null)) {
        libSwaC_gf_SetCurrentMap(libSwaC_gv_zS_DebugProgressLastStoryMap);
        libSwaC_gv_zSX_LastStoryMap = libSwaC_gv_zS_DebugProgressLastStoryMap;
        libSwaC_gf_PrepareForStoryMapSwitch(libSwaC_gf_StoryPlanetMap(libSwaC_gv_zS_DebugProgressLastTravel));
        GameOver(1, c_gameOverVictory, false, false);
    }
    else {
        if ((libSwaC_gv_zS_DebugProgressLastMission == null)) {
            libSwaC_gf_PrepareForMission("ZLab1", false, false, PlayerDifficulty(1));
            GameOver(1, c_gameOverVictory, false, false);
            return true;
        }

        libSwaC_gf_SetCurrentMap(libSwaC_gv_zS_DebugProgressLastMission);
        libSwaC_gv_zSX_LastStoryMap = libSwaC_gv_zS_DebugProgressLastStoryMap;
        libSwaC_gf_DispatchStoryEvent(libSwaC_ge_ZS_Event_TransitionFromStoryMap, "Debug", "", true);
        libSwaC_gf_PrepareForStoryMode(c_gameOverVictory, libSwaC_gv_zSX_CampaignDifficulty);
        GameOver(1, c_gameOverVictory, false, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_DebugProgressOKCallback_Init () {
    libSwaC_gt_ZS_DebugProgressOKCallback = TriggerCreate("libSwaC_gt_ZS_DebugProgressOKCallback_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_DebugStoryTechOK
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_DebugStoryTechOK_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexArmyUnit;
    string lv_unitUsed;
    string lv_unitType;

    // Automatic Variable Declarations
    int auto836C1981_ae;
    int auto836C1981_ai;
    int autoD268C1F8_ae;
    int autoD268C1F8_ai;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSwaC_gv_zS_DebugStoryTechOK))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_ZS_DebugStoryTechUpdateData();
    libSwaC_gf_ZS_ApplyTech(1);
    auto836C1981_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto836C1981_ai = 1;
    while (auto836C1981_ai <= auto836C1981_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto836C1981_ai);
        lv_unitUsed = libSwaC_gf_ZS_StoryArmyCategoryUnitType(lv_indexCategory);
        autoD268C1F8_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
        autoD268C1F8_ai = 1;
        while (autoD268C1F8_ai <= autoD268C1F8_ae) {
            lv_indexArmyUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(autoD268C1F8_ai-1)+"]", 1);
            if ((libSwaC_gf_ZS_StoryArmyUnitState(lv_indexArmyUnit) == c_armyUnitStatePurchased)) {
                lv_unitUsed = libSwaC_gf_ZS_StoryArmyUnitUnitType(lv_indexArmyUnit);
                break;
            }

            autoD268C1F8_ai = autoD268C1F8_ai + 1;
        }
        lv_unitType = libSwaC_gf_ZS_StoryArmyCategoryUnitType(lv_indexCategory);
        CatalogLinkReplace(1, c_gameCatalogUnit, (lv_unitType), (lv_unitUsed));
        TextExpressionSetToken("Param/Expression/lib_SwaC_9115409F", "C", libSwaC_gf_StoryArmyCategoryName(lv_indexCategory));
        TextExpressionSetToken("Param/Expression/lib_SwaC_9115409F", "A", StringToText((lv_unitType)));
        TextExpressionSetToken("Param/Expression/lib_SwaC_9115409F", "B", StringToText((lv_unitUsed)));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_SwaC_9115409F"), false);
        auto836C1981_ai = auto836C1981_ai + 1;
    }
    libSwaC_gf_ZS_DebugStoryTechCloseDialog();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_DebugStoryTechOK_Init () {
    libSwaC_gt_ZS_DebugStoryTechOK = TriggerCreate("libSwaC_gt_ZS_DebugStoryTechOK_Func");
    TriggerEnable(libSwaC_gt_ZS_DebugStoryTechOK, false);
    TriggerAddEventDialogControl(libSwaC_gt_ZS_DebugStoryTechOK, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_DebugStoryTechCancel
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_DebugStoryTechCancel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSwaC_gv_zS_DebugStoryTechCancel))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_ZS_DebugStoryTechRestoreStates();
    libSwaC_gf_ZS_DebugStoryTechCloseDialog();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_DebugStoryTechCancel_Init () {
    libSwaC_gt_ZS_DebugStoryTechCancel = TriggerCreate("libSwaC_gt_ZS_DebugStoryTechCancel_Func");
    TriggerEnable(libSwaC_gt_ZS_DebugStoryTechCancel, false);
    TriggerAddEventDialogControl(libSwaC_gt_ZS_DebugStoryTechCancel, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_DebugStoryTechArmyUnitClicked
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_DebugStoryTechArmyUnitClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_categoryIndex;
    string lv_indexCategory;
    string lv_clickedCategory;
    bool lv_enabled;

    // Automatic Variable Declarations
    int auto6629DE88_ae;
    const int auto6629DE88_ai = 1;

    // Variable Initialization
    lv_enabled = true;

    // Actions
    if (!runActions) {
        return true;
    }

    auto6629DE88_ae = libSwaC_gv_zS_DebugStoryTechArmyCatCount;
    lv_categoryIndex = 1;
    for ( ; ( (auto6629DE88_ai >= 0 && lv_categoryIndex <= auto6629DE88_ae) || (auto6629DE88_ai < 0 && lv_categoryIndex >= auto6629DE88_ae) ) ; lv_categoryIndex += auto6629DE88_ai ) {
        lv_indexCategory = libSwaC_gv_zS_DebugStoryTechArmyCategory[lv_categoryIndex];
        if ((EventDialogControl() == libSwaC_gv_zS_DebugStoryTechArmyCategoryCheck[lv_categoryIndex])) {
            lv_clickedCategory = lv_indexCategory;
            if ((libNtve_gf_DialogItemIsChecked(EventDialogControl(), 1) == true)) {
                libNtve_gf_SetDialogItemChecked(libSwaC_gv_zS_DebugStoryTechArmyUnitCheck[lv_categoryIndex][1], false, PlayerGroupAll());
                libNtve_gf_SetDialogItemChecked(libSwaC_gv_zS_DebugStoryTechArmyUnitCheck[lv_categoryIndex][2], false, PlayerGroupAll());
            }

            break;
        }

        if ((EventDialogControl() == libSwaC_gv_zS_DebugStoryTechArmyUnitCheck[lv_categoryIndex][1])) {
            lv_clickedCategory = lv_indexCategory;
            if ((libNtve_gf_DialogItemIsChecked(EventDialogControl(), 1) == true)) {
                libNtve_gf_SetDialogItemChecked(libSwaC_gv_zS_DebugStoryTechArmyCategoryCheck[lv_categoryIndex], false, PlayerGroupAll());
                libNtve_gf_SetDialogItemChecked(libSwaC_gv_zS_DebugStoryTechArmyUnitCheck[lv_categoryIndex][2], false, PlayerGroupAll());
            }

            break;
        }

        if ((EventDialogControl() == libSwaC_gv_zS_DebugStoryTechArmyUnitCheck[lv_categoryIndex][2])) {
            lv_clickedCategory = lv_indexCategory;
            if ((libNtve_gf_DialogItemIsChecked(EventDialogControl(), 1) == true)) {
                libNtve_gf_SetDialogItemChecked(libSwaC_gv_zS_DebugStoryTechArmyCategoryCheck[lv_categoryIndex], false, PlayerGroupAll());
                libNtve_gf_SetDialogItemChecked(libSwaC_gv_zS_DebugStoryTechArmyUnitCheck[lv_categoryIndex][1], false, PlayerGroupAll());
            }

            break;
        }

    }
    if ((lv_clickedCategory == null)) {
        return true;
    }

    if (((libNtve_gf_DialogItemIsChecked(libSwaC_gv_zS_DebugStoryTechArmyCategoryCheck[lv_categoryIndex], 1) == true) || (libNtve_gf_DialogItemIsChecked(libSwaC_gv_zS_DebugStoryTechArmyUnitCheck[lv_categoryIndex][1], 1) == true) || (libNtve_gf_DialogItemIsChecked(libSwaC_gv_zS_DebugStoryTechArmyUnitCheck[lv_categoryIndex][2], 1) == true))) {
        DialogControlSetEnabled(libSwaC_gv_zS_DebugStoryTechArmyUpgradeButtons[lv_categoryIndex], PlayerGroupAll(), true);
    }
    else {
        DialogControlSetEnabled(libSwaC_gv_zS_DebugStoryTechArmyUpgradeButtons[lv_categoryIndex], PlayerGroupAll(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_DebugStoryTechArmyUnitClicked_Init () {
    libSwaC_gt_ZS_DebugStoryTechArmyUnitClicked = TriggerCreate("libSwaC_gt_ZS_DebugStoryTechArmyUnitClicked_Func");
    TriggerEnable(libSwaC_gt_ZS_DebugStoryTechArmyUnitClicked, false);
    TriggerAddEventDialogControl(libSwaC_gt_ZS_DebugStoryTechArmyUnitClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_DebugStoryTechUpgradeButtonClicked
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_DebugStoryTechUpgradeButtonClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_indexCategory;
    int lv_categoryIndex;

    // Automatic Variable Declarations
    int autoFA698ED4_ae;
    const int autoFA698ED4_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoFA698ED4_ae = libSwaC_gv_zS_DebugStoryTechArmyCatCount;
    lv_categoryIndex = 1;
    for ( ; ( (autoFA698ED4_ai >= 0 && lv_categoryIndex <= autoFA698ED4_ae) || (autoFA698ED4_ai < 0 && lv_categoryIndex >= autoFA698ED4_ae) ) ; lv_categoryIndex += autoFA698ED4_ai ) {
        lv_indexCategory = libSwaC_gv_zS_DebugStoryTechArmyCategory[lv_categoryIndex];
        if ((libSwaC_gv_zS_DebugStoryTechArmyUpgradeButtons[lv_categoryIndex] == EventDialogControl())) {
            TriggerEnable(TriggerGetCurrent(), false);
            if (((libNtve_gf_DialogItemIsChecked(libSwaC_gv_zS_DebugStoryTechArmyCategoryCheck[lv_categoryIndex], 1) == true) || (libNtve_gf_DialogItemIsChecked(libSwaC_gv_zS_DebugStoryTechArmyUnitCheck[lv_categoryIndex][1], 1) == true) || (libNtve_gf_DialogItemIsChecked(libSwaC_gv_zS_DebugStoryTechArmyUnitCheck[lv_categoryIndex][2], 1) == true))) {
                libSwaC_gf_ZS_SetArmyCategoryState(lv_indexCategory, c_armyCategoryStateUnlocked);
            }

            libSwaC_gf_ZS_DebugStoryTechDisplayUpgradeDialog(lv_indexCategory);
            TriggerEnable(TriggerGetCurrent(), true);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_DebugStoryTechUpgradeButtonClicked_Init () {
    libSwaC_gt_ZS_DebugStoryTechUpgradeButtonClicked = TriggerCreate("libSwaC_gt_ZS_DebugStoryTechUpgradeButtonClicked_Func");
    TriggerEnable(libSwaC_gt_ZS_DebugStoryTechUpgradeButtonClicked, false);
    TriggerAddEventDialogControl(libSwaC_gt_ZS_DebugStoryTechUpgradeButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_DebugStoryTechUpgradeOK
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_DebugStoryTechUpgradeOK_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_categoryIndex;
    string lv_indexMission;
    string lv_indexUpgrade;

    // Automatic Variable Declarations
    int auto1EA4C2A1_ae;
    int auto1EA4C2A1_ai;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventDialogControl() == libSwaC_gv_zS_DebugStoryTechUpgradeDlgOK))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = 0;
    auto1EA4C2A1_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, libSwaC_gv_zS_DebugStoryTechUpgradeCategory, "ArmyUpgradeArray", 1);
    auto1EA4C2A1_ai = 1;
    while (auto1EA4C2A1_ai <= auto1EA4C2A1_ae) {
        lv_indexUpgrade = CatalogFieldValueGet(c_gameCatalogArmyCategory, libSwaC_gv_zS_DebugStoryTechUpgradeCategory, "ArmyUpgradeArray["+IntToString(auto1EA4C2A1_ai-1)+"]", 1);
        lv_index += 1;
        if ((libNtve_gf_DialogItemIsChecked(libSwaC_gv_zS_DebugStoryTechUpgradeDlgUpgrades[lv_index], 1) == true)) {
            libSwaC_gf_ZS_SetArmyUpgradeStateCore(lv_indexUpgrade, c_armyUpgradeStatePurchased);
        }
        else {
            libSwaC_gf_ZS_SetArmyUpgradeStateCore(lv_indexUpgrade, c_armyUpgradeStateUnlocked);
        }
        auto1EA4C2A1_ai = auto1EA4C2A1_ai + 1;
    }
    libSwaC_gf_ZS_UpdateArmyUpgradeStates();
    DialogDestroy(libSwaC_gv_zS_DebugStoryTechUpgradeDialog);
    libSwaC_gv_zS_DebugStoryTechUpgradeDialog = c_invalidDialogId;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_DebugStoryTechUpgradeOK_Init () {
    libSwaC_gt_ZS_DebugStoryTechUpgradeOK = TriggerCreate("libSwaC_gt_ZS_DebugStoryTechUpgradeOK_Func");
    TriggerEnable(libSwaC_gt_ZS_DebugStoryTechUpgradeOK, false);
    TriggerAddEventDialogControl(libSwaC_gt_ZS_DebugStoryTechUpgradeOK, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_DebugStoryTechUpgradeChecked
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_DebugStoryTechUpgradeChecked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    string lv_indexUpgrade;

    // Automatic Variable Declarations
    int auto2202000B_ae;
    int auto2202000B_ai;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DialogItemIsChecked(EventDialogControl(), 1) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = 0;
    auto2202000B_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, libSwaC_gv_zS_DebugStoryTechUpgradeCategory, "ArmyUpgradeArray", 1);
    auto2202000B_ai = 1;
    while (auto2202000B_ai <= auto2202000B_ae) {
        lv_indexUpgrade = CatalogFieldValueGet(c_gameCatalogArmyCategory, libSwaC_gv_zS_DebugStoryTechUpgradeCategory, "ArmyUpgradeArray["+IntToString(auto2202000B_ai-1)+"]", 1);
        lv_index += 1;
        if ((libSwaC_gv_zS_DebugStoryTechUpgradeDlgUpgrades[lv_index] != EventDialogControl())) {
            libNtve_gf_SetDialogItemChecked(libSwaC_gv_zS_DebugStoryTechUpgradeDlgUpgrades[lv_index], false, PlayerGroupAll());
        }

        auto2202000B_ai = auto2202000B_ai + 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_DebugStoryTechUpgradeChecked_Init () {
    libSwaC_gt_ZS_DebugStoryTechUpgradeChecked = TriggerCreate("libSwaC_gt_ZS_DebugStoryTechUpgradeChecked_Func");
    TriggerEnable(libSwaC_gt_ZS_DebugStoryTechUpgradeChecked, false);
    TriggerAddEventDialogControl(libSwaC_gt_ZS_DebugStoryTechUpgradeChecked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_DebugStoryTechUpgradeCancel
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_DebugStoryTechUpgradeCancel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventDialogControl() == libSwaC_gv_zS_DebugStoryTechUpgradeDlgCancel))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogDestroy(libSwaC_gv_zS_DebugStoryTechUpgradeDialog);
    libSwaC_gv_zS_DebugStoryTechUpgradeDialog = c_invalidDialogId;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_DebugStoryTechUpgradeCancel_Init () {
    libSwaC_gt_ZS_DebugStoryTechUpgradeCancel = TriggerCreate("libSwaC_gt_ZS_DebugStoryTechUpgradeCancel_Func");
    TriggerEnable(libSwaC_gt_ZS_DebugStoryTechUpgradeCancel, false);
    TriggerAddEventDialogControl(libSwaC_gt_ZS_DebugStoryTechUpgradeCancel, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_DebugTechArmyCustomOpened
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_DebugTechArmyCustomOpened_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libSwaC_gv_zS_ArmyDebugUsed == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (true) {
        if ((libSwaC_gv_zS_DebugTechArmyCustomDialog == c_invalidDialogId)) {
            DialogCreate(500, 400, c_anchorCenter, 0, 0, false);
            libSwaC_gv_zS_DebugTechArmyCustomDialog = DialogLastCreated();
            DialogSetFullscreen(DialogLastCreated(), true);
            DialogSetImageVisible(DialogLastCreated(), false);
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 65, c_anchorBottom, -450, 10, StringToText(""), StringExternal("Param/Value/lib_SwaC_2A7E7CD1"), "");
            libSwaC_gv_zS_DebugTechArmyCustomResetButton = DialogControlLastCreated();
            libNtve_gf_SetDialogItemStyle(libSwaC_gv_zS_DebugTechArmyCustomResetButton, "ModCenterSize16Bold", PlayerGroupAll());
        }

        DialogSetVisible(libSwaC_gv_zS_DebugTechArmyCustomDialog, PlayerGroupAll(), true);
        TriggerEnable(libSwaC_gt_ZS_DebugTechArmyCustomReset, true);
    }
    else {
        DialogSetVisible(libSwaC_gv_zS_DebugTechArmyCustomDialog, PlayerGroupAll(), false);
        TriggerEnable(libSwaC_gt_ZS_DebugTechArmyCustomReset, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_DebugTechArmyCustomOpened_Init () {
    libSwaC_gt_ZS_DebugTechArmyCustomOpened = TriggerCreate("libSwaC_gt_ZS_DebugTechArmyCustomOpened_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_DebugTechArmyCustomReset
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_DebugTechArmyCustomReset_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_armyCategory;
    string lv_indexArmyUnit;
    string lv_indexArmyUpgrade;

    // Automatic Variable Declarations
    int auto1C93FA71_ae;
    int auto1C93FA71_ai;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSwaC_gv_zS_DebugTechArmyCustomResetButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_armyCategory = libSwaC_gv_zS_ArmyCustomCategoryCurrent;
    if ((lv_armyCategory == null)) {
        return true;
    }

    auto1C93FA71_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_armyCategory, "ArmyUpgradeArray", 1);
    auto1C93FA71_ai = 1;
    while (auto1C93FA71_ai <= auto1C93FA71_ae) {
        lv_indexArmyUpgrade = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_armyCategory, "ArmyUpgradeArray["+IntToString(auto1C93FA71_ai-1)+"]", 1);
        libSwaC_gf_ZS_SetArmyUpgradeState(lv_indexArmyUpgrade, c_armyUpgradeStateUnlocked);
        auto1C93FA71_ai = auto1C93FA71_ai + 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_DebugTechArmyCustomReset_Init () {
    libSwaC_gt_ZS_DebugTechArmyCustomReset = TriggerCreate("libSwaC_gt_ZS_DebugTechArmyCustomReset_Func");
    TriggerEnable(libSwaC_gt_ZS_DebugTechArmyCustomReset, false);
    TriggerAddEventDialogControl(libSwaC_gt_ZS_DebugTechArmyCustomReset, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_DebugArmy
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_DebugArmy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    VisEnable(c_visTypeMask, false);
    VisEnable(c_visTypeFog, false);
    CameraLockInput(1, true);
    libSwaC_gf_DispatchStoryEvent(libSwaC_ge_ZS_Event_ArmyCheatStarts, "", "", false);
    libSwaC_gv_zS_ArmyDebugUsed = true;
    libSwaC_gf_DisplayEggRoom();
    libSwaC_gv_zS_ArmyDebugUsed = false;
    libSwaC_gf_DispatchStoryEvent(libSwaC_ge_ZS_Event_ArmyCheatEnds, "", "", false);
    if ((libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindMission) == true)) {
        libSwaC_gf_ZS_ApplyArmyTech(1);
    }

    if ((libSwaC_gv_zS_TechLimitsCallback != null)) {
        TriggerExecute(libSwaC_gv_zS_TechLimitsCallback, true, false);
    }

    CameraLockInput(1, false);
    VisEnable(c_visTypeMask, true);
    VisEnable(c_visTypeFog, true);
    libNtve_gf_HideGameUI(true, PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_DebugArmy_Init () {
    libSwaC_gt_ZS_DebugArmy = TriggerCreate("libSwaC_gt_ZS_DebugArmy_Func");
    TriggerAddEventChatMessage(libSwaC_gt_ZS_DebugArmy, c_playerAny, "ARMY", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_DebugSplit
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_DebugSplit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto64400101_val;

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto64400101_val = StringSub(EventChatMessage(false), 6, 6);
    if (auto64400101_val == "z") {
        libSwaC_gf_ZS_ArmyCustomEvolutionUIEnter("Zergling");
    }
    else if (auto64400101_val == "b") {
        libSwaC_gf_ZS_ArmyCustomEvolutionUIEnter("Baneling");
    }
    else if (auto64400101_val == "r") {
        libSwaC_gf_ZS_ArmyCustomEvolutionUIEnter("Roach");
    }
    else if (auto64400101_val == "h") {
        libSwaC_gf_ZS_ArmyCustomEvolutionUIEnter("Hydralisk");
    }
    else if (auto64400101_val == "m") {
        libSwaC_gf_ZS_ArmyCustomEvolutionUIEnter("Mutalisk");
    }
    else if (auto64400101_val == "s") {
        libSwaC_gf_ZS_ArmyCustomEvolutionUIEnter("SwarmHost");
    }
    else if (auto64400101_val == "u") {
        libSwaC_gf_ZS_ArmyCustomEvolutionUIEnter("Ultralisk");
    }
    else {
    }
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_DebugSplit_Init () {
    libSwaC_gt_ZS_DebugSplit = TriggerCreate("libSwaC_gt_ZS_DebugSplit_Func");
    TriggerAddEventChatMessage(libSwaC_gt_ZS_DebugSplit, c_playerAny, "split", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_DebugKerriganUIOpened
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_DebugKerriganUIOpened_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_label;
    int lv_plusButton;
    int lv_minusButton;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_label = c_invalidDialogControlId;
    lv_plusButton = c_invalidDialogControlId;
    lv_minusButton = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libSwaC_gv_zS_DebugKerriganDialog == c_invalidDialogId)) {
        DialogCreate(500, 400, c_anchorCenter, 0, 0, false);
        libSwaC_gv_zS_DebugKerriganDialog = DialogLastCreated();
        DialogSetFullscreen(DialogLastCreated(), true);
        DialogSetImageVisible(DialogLastCreated(), false);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 50, c_anchorTopRight, 200, 50, StringExternal("Param/Value/lib_SwaC_CF078C28"), Color(100.00, 100.00, 100.00), false, 2.0);
        lv_label = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModRightSize24Bold", PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 50, 50, c_anchorBottomRight, 50, 50, IntToText(libSwaC_gf_StoryKerriganLevel()), Color(100,100,100), false, 2.0);
        libSwaC_gv_zS_DebugKerriganLevel = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModRightSize24Bold", PlayerGroupAll());
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, lv_label, c_anchorRight, 0, 0);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 50, 30, c_anchorBottom, 0, 0, StringToText(""), StringExternal("Param/Value/lib_SwaC_C4D35941"), "");
        libSwaC_gv_zS_DebugKerriganLevelPlusButton = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16Bold", PlayerGroupAll());
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, libSwaC_gv_zS_DebugKerriganLevel, c_anchorTopRight, 10, 0);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 50, 30, c_anchorBottom, 0, 0, StringToText(""), StringExternal("Param/Value/lib_SwaC_6B45C398"), "");
        libSwaC_gv_zS_DebugKerriganLevelMinusButton = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16Bold", PlayerGroupAll());
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomLeft, libSwaC_gv_zS_DebugKerriganLevel, c_anchorBottomRight, 10, 0);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 100, 40, c_anchorBottom, 0, 0, StringToText(""), StringExternal("Param/Value/lib_SwaC_BD7A0348"), "");
        libSwaC_gv_zS_DebugKerriganLevelMaxButton = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16Bold", PlayerGroupAll());
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomLeft, libSwaC_gv_zS_DebugKerriganLevel, c_anchorBottomRight, 10, 50);
    }

    TriggerEnable(libSwaC_gt_ZS_DebugKerriganAddLevel, true);
    TriggerEnable(libSwaC_gt_ZS_DebugKerriganRemoveLevel, true);
    TriggerEnable(libSwaC_gt_ZS_DebugKerriganMaxLevel, true);
    libNtve_gf_SetDialogItemText(libSwaC_gv_zS_DebugKerriganLevel, IntToText(libSwaC_gv_zS_KerriganLevel), PlayerGroupAll());
    DialogSetVisible(libSwaC_gv_zS_DebugKerriganDialog, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_DebugKerriganUIOpened_Init () {
    libSwaC_gt_ZS_DebugKerriganUIOpened = TriggerCreate("libSwaC_gt_ZS_DebugKerriganUIOpened_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_DebugKerriganUIClosed
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_DebugKerriganUIClosed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libSwaC_gt_ZS_DebugKerriganAddLevel, false);
    TriggerEnable(libSwaC_gt_ZS_DebugKerriganRemoveLevel, false);
    TriggerEnable(libSwaC_gt_ZS_DebugKerriganMaxLevel, false);
    DialogSetVisible(libSwaC_gv_zS_DebugKerriganDialog, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_DebugKerriganUIClosed_Init () {
    libSwaC_gt_ZS_DebugKerriganUIClosed = TriggerCreate("libSwaC_gt_ZS_DebugKerriganUIClosed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_DebugKerriganAddLevel
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_DebugKerriganAddLevel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSwaC_gv_zS_DebugKerriganLevelPlusButton))) {
            return false;
        }

        if (!((libSwaC_gv_zS_KerriganLevel < libSwaC_gv_zSC_KERRIGANMAXLEVEL))) {
            return false;
        }

        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_SetStoryKerriganExperience((libSwaC_gv_zS_KerriganCheatXP + 1));
    libSwaC_gv_zS_KerriganUIXP += 1;
    libSwaC_gv_zS_KerriganUITierLevel = libSwaC_gf_ZS_KerriganTierFromXP();
    libSwaC_gf_ZS_RecalculateKerriganXP();
    libNtve_gf_SetDialogItemText(libSwaC_gv_zS_DebugKerriganLevel, IntToText(libSwaC_gv_zS_KerriganLevel), PlayerGroupAll());
    libSwaC_gf_ZS_KerriganUITierUpdate();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_DebugKerriganAddLevel_Init () {
    libSwaC_gt_ZS_DebugKerriganAddLevel = TriggerCreate("libSwaC_gt_ZS_DebugKerriganAddLevel_Func");
    TriggerEnable(libSwaC_gt_ZS_DebugKerriganAddLevel, false);
    TriggerAddEventDialogControl(libSwaC_gt_ZS_DebugKerriganAddLevel, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_DebugKerriganRemoveLevel
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_DebugKerriganRemoveLevel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSwaC_gv_zS_DebugKerriganLevelMinusButton))) {
            return false;
        }

        if (!((libSwaC_gv_zS_KerriganLevel > 1))) {
            return false;
        }

        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_SetStoryKerriganExperience((libSwaC_gv_zS_KerriganCheatXP - 1));
    libSwaC_gv_zS_KerriganUIXP -= 1;
    libSwaC_gv_zS_KerriganUITierLevel = libSwaC_gf_ZS_KerriganTierFromXP();
    libSwaC_gf_ZS_RecalculateKerriganXP();
    libNtve_gf_SetDialogItemText(libSwaC_gv_zS_DebugKerriganLevel, IntToText(libSwaC_gv_zS_KerriganLevel), PlayerGroupAll());
    libSwaC_gf_ZS_KerriganUITierUpdate();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_DebugKerriganRemoveLevel_Init () {
    libSwaC_gt_ZS_DebugKerriganRemoveLevel = TriggerCreate("libSwaC_gt_ZS_DebugKerriganRemoveLevel_Func");
    TriggerEnable(libSwaC_gt_ZS_DebugKerriganRemoveLevel, false);
    TriggerAddEventDialogControl(libSwaC_gt_ZS_DebugKerriganRemoveLevel, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_DebugKerriganMaxLevel
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_DebugKerriganMaxLevel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSwaC_gv_zS_DebugKerriganLevelMaxButton))) {
            return false;
        }

        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gv_zS_KerriganUITiersDebug = true;
    libSwaC_gf_SetStoryKerriganExperience(libSwaC_gf_ZS_KerriganXPFromLevel(libSwaC_gv_zSC_KERRIGANMAXLEVEL));
    libSwaC_gv_zS_KerriganUIXP = libSwaC_gf_ZS_KerriganXPFromLevel(libSwaC_gv_zSC_KERRIGANMAXLEVEL);
    libSwaC_gf_ZS_RecalculateKerriganXP();
    libNtve_gf_SetDialogItemText(libSwaC_gv_zS_DebugKerriganLevel, IntToText(libSwaC_gv_zS_KerriganLevel), PlayerGroupAll());
    libSwaC_gf_ZS_KerriganUITierUpdate();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_DebugKerriganMaxLevel_Init () {
    libSwaC_gt_ZS_DebugKerriganMaxLevel = TriggerCreate("libSwaC_gt_ZS_DebugKerriganMaxLevel_Func");
    TriggerEnable(libSwaC_gt_ZS_DebugKerriganMaxLevel, false);
    TriggerAddEventDialogControl(libSwaC_gt_ZS_DebugKerriganMaxLevel, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_DebugKerrigan
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_DebugKerrigan_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_distance;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindMission) == true)) {
        CameraSave(1);
    }

    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    VisEnable(c_visTypeMask, false);
    VisEnable(c_visTypeFog, false);
    CameraLockInput(1, true);
    UISetWorldVisible(PlayerGroupAll(), false);
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libSwaC_gf_DispatchStoryEvent(libSwaC_ge_ZS_Event_KerriganCheatStarts, "", "", false);
    libSwaC_gf_DisplayKerriganTierCustomizationWindow(libSwaC_gt_ZS_DebugKerriganUIOpened, libSwaC_gt_ZS_DebugKerriganUIClosed);
    libSwaC_gf_DispatchStoryEvent(libSwaC_ge_ZS_Event_KerriganCheatEnds, "", "", false);
    if ((libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindMission) == true)) {
        libSwaC_gf_ZS_ApplyKerriganTechTiers(1);
        libSwaC_gf_ZS_ApplyKerriganLevelBonus(1);
    }

    if ((libSwaC_gv_zS_TechLimitsCallback != null)) {
        TriggerExecute(libSwaC_gv_zS_TechLimitsCallback, true, false);
    }

    CameraLockInput(1, false);
    UISetWorldVisible(PlayerGroupAll(), true);
    if ((libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindMission) == true)) {
        CameraRestore(1, 0.0, -1, 10.0);
    }

    CinematicFade(true, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    VisEnable(c_visTypeMask, true);
    VisEnable(c_visTypeFog, true);
    libNtve_gf_HideGameUI(true, PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_DebugKerrigan_Init () {
    libSwaC_gt_ZS_DebugKerrigan = TriggerCreate("libSwaC_gt_ZS_DebugKerrigan_Func");
    TriggerAddEventChatMessage(libSwaC_gt_ZS_DebugKerrigan, c_playerAny, "KERRIGAN", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_DebugKerriganRetail
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_DebugKerriganRetail_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindStory) == false))) {
            return false;
        }

        if (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
            return false;
        }

        if (!((libSwaC_gv_zS_GameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    GameCheatAllow(c_gameCheatCredits, false);
    GameCheatAllow(c_gameCheatResearch, false);
    GameCheatAllow(c_gameCheatProgress, false);
    TriggerEnable(TriggerGetCurrent(), false);
    UISetWorldVisible(PlayerGroupAll(), false);
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libSwaC_gf_DisplayKerriganTierCustomizationWindow(null, null);
    libSwaC_gf_ZS_ApplyKerriganTechTiers(1);
    libSwaC_gf_ZS_ApplyKerriganLevelBonus(1);
    if ((libSwaC_gv_zS_TechLimitsCallback != null)) {
        TriggerExecute(libSwaC_gv_zS_TechLimitsCallback, true, false);
    }

    UISetWorldVisible(PlayerGroupAll(), true);
    CinematicFade(true, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    TriggerEnable(TriggerGetCurrent(), true);
    if ((libNtve_gf_PlayerInCinematicMode(1) == false) && (libSwaC_gv_zS_GameOver == false)) {
        GameCheatAllow(c_gameCheatCredits, true);
        GameCheatAllow(c_gameCheatResearch, true);
        GameCheatAllow(c_gameCheatProgress, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_DebugKerriganRetail_Init () {
    libSwaC_gt_ZS_DebugKerriganRetail = TriggerCreate("libSwaC_gt_ZS_DebugKerriganRetail_Func");
    TriggerAddEventCheatUsed(libSwaC_gt_ZS_DebugKerriganRetail, c_playerAny, c_gameCheatResearch);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_DebugTech
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_DebugTech_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libSwaC_gf_CurrentMap() == null)) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_ZS_DebugStoryTechDisplayDialog();
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_DebugTech_Init () {
    libSwaC_gt_ZS_DebugTech = TriggerCreate("libSwaC_gt_ZS_DebugTech_Func");
    TriggerAddEventChatMessage(libSwaC_gt_ZS_DebugTech, c_playerAny, "tech", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_DebugTechRetail
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_DebugTechRetail_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindStory) == false))) {
            return false;
        }

        if (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
            return false;
        }

        if (!((libSwaC_gv_zS_GameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    GameCheatAllow(c_gameCheatCredits, false);
    GameCheatAllow(c_gameCheatResearch, false);
    GameCheatAllow(c_gameCheatProgress, false);
    TriggerEnable(TriggerGetCurrent(), false);
    UISetWorldVisible(PlayerGroupAll(), false);
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    libSwaC_gf_StoryArmyUIArchivesDisplay();
    libSwaC_gf_ZS_ApplyArmyTech(1);
    if ((libSwaC_gv_zS_TechLimitsCallback != null)) {
        TriggerExecute(libSwaC_gv_zS_TechLimitsCallback, true, false);
    }

    libNtve_gf_HideGameUI(true, PlayerGroupAll());
    UISetWorldVisible(PlayerGroupAll(), true);
    CameraRestore(1, 0.0, -1, 10.0);
    CinematicFade(true, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    TriggerEnable(TriggerGetCurrent(), true);
    if ((libNtve_gf_PlayerInCinematicMode(1) == false) && (libSwaC_gv_zS_GameOver == false)) {
        GameCheatAllow(c_gameCheatCredits, true);
        GameCheatAllow(c_gameCheatResearch, true);
        GameCheatAllow(c_gameCheatProgress, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_DebugTechRetail_Init () {
    libSwaC_gt_ZS_DebugTechRetail = TriggerCreate("libSwaC_gt_ZS_DebugTechRetail_Func");
    TriggerAddEventCheatUsed(libSwaC_gt_ZS_DebugTechRetail, c_playerAny, c_gameCheatCredits);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_DebugVictoryS
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_DebugVictoryS_Func (bool testConds, bool runActions) {
    // Variable Declarations
    trigger lv_cineTrigger;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueClear(c_triggerQueueKill);
    TransmissionClearAll();
    libSwaC_gf_HideCampaignTransmissionPortrait();
    libSwaC_gv_zS_MissionVictoryActionQueyeEmpty = false;
    TriggerExecute(libSwaC_gt_ZS_MissionVictoryCallbackBlockActionQueueOneMinute, true, false);
    while (!((libSwaC_gv_zS_MissionVictoryActionQueyeEmpty == true))) {
        Wait(1.0, c_timeGame);
    }
    TriggerQueueClear(c_triggerQueueKill);
    lv_cineTrigger = TriggerCreate("gt_VictorySequence_Func");
    TriggerExecute(lv_cineTrigger, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_DebugVictoryS_Init () {
    libSwaC_gt_ZS_DebugVictoryS = TriggerCreate("libSwaC_gt_ZS_DebugVictoryS_Func");
    TriggerAddEventChatMessage(libSwaC_gt_ZS_DebugVictoryS, c_playerAny, "VICTORYS", true);
    TriggerAddEventChatMessage(libSwaC_gt_ZS_DebugVictoryS, c_playerAny, "VICTORYSEQUENCE", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_CampaignProgressButtonClicked
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_CampaignProgressButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSwaC_gv_zS_CampaignProgressButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(libSwaC_gv_zS_CampaignProgressButtonParent, PlayerGroupAll(), false);
    TriggerExecute(libSwaC_gt_ZS_DebugProgress, false, true);
    DialogSetVisible(libSwaC_gv_zS_CampaignProgressButtonParent, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_CampaignProgressButtonClicked_Init () {
    libSwaC_gt_ZS_CampaignProgressButtonClicked = TriggerCreate("libSwaC_gt_ZS_CampaignProgressButtonClicked_Func");
    TriggerAddEventDialogControl(libSwaC_gt_ZS_CampaignProgressButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_CampaignProgressTechButtonClicked
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_CampaignProgressTechButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSwaC_gv_zS_CampaignProgressTechButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(libSwaC_gv_zS_CampaignProgressButtonParent, PlayerGroupAll(), false);
    TriggerExecute(libSwaC_gt_ZS_DebugTech, false, true);
    DialogSetVisible(libSwaC_gv_zS_CampaignProgressButtonParent, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_CampaignProgressTechButtonClicked_Init () {
    libSwaC_gt_ZS_CampaignProgressTechButtonClicked = TriggerCreate("libSwaC_gt_ZS_CampaignProgressTechButtonClicked_Func");
    TriggerAddEventDialogControl(libSwaC_gt_ZS_CampaignProgressTechButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Play Cutscene
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_PlayCutscene_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_file;
    point lv_position;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_position = Point(64.0, 64.0);

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libSwaC_gv_zS_DebugCutsceneCin == true)) {
        libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationImmediate);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 0.0);
    }

    lv_file = ("Cutscenes/" + StringWord(EventChatMessage(false), 2) + ".SC2Cutscene");
    if ((StringWord(EventChatMessage(false), 3) != null) && (StringWord(EventChatMessage(false), 4) != null)) {
        lv_position = Point(StringToFixed(StringWord(EventChatMessage(false), 3)), StringToFixed(StringWord(EventChatMessage(false), 4)));
    }

    CutsceneCreateNew(lv_file, lv_position, 0.0, PlayerGroupAll(), true);
    libSwaC_gv_zS_DebugCutsceneCount = (ModI(libSwaC_gv_zS_DebugCutsceneCount, 5) + 1);
    libSwaC_gv_zS_DebugActiveCutscene = libSwaC_gv_zS_DebugCutsceneCount;
    if ((libSwaC_gv_zS_DebugCutscenes[libSwaC_gv_zS_DebugCutsceneCount] != c_cutsceneNone)) {
        CutsceneStop(libSwaC_gv_zS_DebugCutscenes[libSwaC_gv_zS_DebugCutsceneCount]);
    }

    libSwaC_gv_zS_DebugCutscenes[libSwaC_gv_zS_DebugCutsceneCount] = CutsceneLastCreated();
    libSwaC_gv_zS_DebugScenePaused[libSwaC_gv_zS_DebugActiveCutscene] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_PlayCutscene_Init () {
    libSwaC_gt_PlayCutscene = TriggerCreate("libSwaC_gt_PlayCutscene_Func");
    TriggerAddEventChatMessage(libSwaC_gt_PlayCutscene, c_playerAny, "csplay", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stop Cutscene
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_StopCutscene_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CutsceneStop(libSwaC_gv_zS_DebugCutscenes[libSwaC_gv_zS_DebugActiveCutscene]);
    if ((libSwaC_gv_zS_DebugCutsceneCin == true)) {
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationImmediate);
    }

    libSwaC_gv_zS_DebugCutsceneNames[libSwaC_gv_zS_DebugActiveCutscene] = "";
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_StopCutscene_Init () {
    libSwaC_gt_StopCutscene = TriggerCreate("libSwaC_gt_StopCutscene_Func");
    TriggerAddEventChatMessage(libSwaC_gt_StopCutscene, c_playerAny, "csstop", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pause Cutscene
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_PauseCutscene_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libSwaC_gv_zS_DebugScenePaused[libSwaC_gv_zS_DebugActiveCutscene] == false)) {
        CutscenePause(libSwaC_gv_zS_DebugCutscenes[libSwaC_gv_zS_DebugActiveCutscene]);
        libSwaC_gv_zS_DebugScenePaused[libSwaC_gv_zS_DebugActiveCutscene] = true;
    }
    else {
        CutscenePlay(libSwaC_gv_zS_DebugCutscenes[libSwaC_gv_zS_DebugActiveCutscene]);
        libSwaC_gv_zS_DebugScenePaused[libSwaC_gv_zS_DebugActiveCutscene] = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_PauseCutscene_Init () {
    libSwaC_gt_PauseCutscene = TriggerCreate("libSwaC_gt_PauseCutscene_Func");
    TriggerAddEventChatMessage(libSwaC_gt_PauseCutscene, c_playerAny, "cspause", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Select Cutscene
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_SelectCutscene_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    string lv_name;

    // Automatic Variable Declarations
    const int auto3285ED86_ae = 5;
    const int auto3285ED86_ai = 1;

    // Variable Initialization
    lv_name = StringWord(EventChatMessage(false), 2);

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = 1;
    for ( ; ( (auto3285ED86_ai >= 0 && lv_index <= auto3285ED86_ae) || (auto3285ED86_ai < 0 && lv_index >= auto3285ED86_ae) ) ; lv_index += auto3285ED86_ai ) {
        if ((libSwaC_gv_zS_DebugCutsceneNames[lv_index] == lv_name)) {
            libSwaC_gv_zS_DebugActiveCutscene = lv_index;
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_SelectCutscene_Init () {
    libSwaC_gt_SelectCutscene = TriggerCreate("libSwaC_gt_SelectCutscene_Func");
    TriggerAddEventChatMessage(libSwaC_gt_SelectCutscene, c_playerAny, "csuse", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Seek In Cutscene
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_SeekInCutscene_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_time;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_time = FixedToInt((StringToFixed(StringWord(EventChatMessage(false), 2)) * 1000.0));

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CutsceneSetTime(libSwaC_gv_zS_DebugCutscenes[libSwaC_gv_zS_DebugActiveCutscene], lv_time);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_SeekInCutscene_Init () {
    libSwaC_gt_SeekInCutscene = TriggerCreate("libSwaC_gt_SeekInCutscene_Func");
    TriggerAddEventChatMessage(libSwaC_gt_SeekInCutscene, c_playerAny, "csseek", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Playback Cinematic Mode
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_PlaybackCinematicMode_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gv_zS_DebugCutsceneCin = !(libSwaC_gv_zS_DebugCutsceneCin);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_PlaybackCinematicMode_Init () {
    libSwaC_gt_PlaybackCinematicMode = TriggerCreate("libSwaC_gt_PlaybackCinematicMode_Func");
    TriggerAddEventChatMessage(libSwaC_gt_PlaybackCinematicMode, c_playerAny, "csmode", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Go To Cutscene Bookmark
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_GoToCutsceneBookmark_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_bookmark;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_bookmark = StringSub(EventChatMessage(false), 8, StringLength(EventChatMessage(false)));

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CutsceneGoToBookmark(libSwaC_gv_zS_DebugCutscenes[libSwaC_gv_zS_DebugActiveCutscene], lv_bookmark);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_GoToCutsceneBookmark_Init () {
    libSwaC_gt_GoToCutsceneBookmark = TriggerCreate("libSwaC_gt_GoToCutsceneBookmark_Func");
    TriggerAddEventChatMessage(libSwaC_gt_GoToCutsceneBookmark, c_playerAny, "csgoto", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_DebugAchievement
//--------------------------------------------------------------------------------------------------
bool libSwaC_gt_ZS_DebugAchievement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, IntToText(libSwaC_gf_StoryKerriganLevel()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSwaC_gt_ZS_DebugAchievement_Init () {
    libSwaC_gt_ZS_DebugAchievement = TriggerCreate("libSwaC_gt_ZS_DebugAchievement_Func");
    TriggerAddEventChatMessage(libSwaC_gt_ZS_DebugAchievement, c_playerAny, "-dach", true);
}

void libSwaC_InitTriggers () {
    libSwaC_gt_ZS_CinematicModeOn_Init();
    libSwaC_gt_ZS_CinematicModeGlowOff_Init();
    libSwaC_gt_ZS_CinematicModeOff_Init();
    libSwaC_gt_ZS_ObjectiveRePingController_Init();
    libSwaC_gt_ZS_SendTransmissionCampaignTick_Init();
    libSwaC_gt__ZergDropPod_Init();
    libSwaC_gt__TerranDropPod_Init();
    libSwaC_gt_ZS_MissionVictoryCallbackBlockActionQueueOneMinute_Init();
    libSwaC_gt_ZS_MissionVictoryCallbackBlockActionQueue_Init();
    libSwaC_gt_ZS_AbortMission_Init();
    libSwaC_gt_ZS_CampaignUnit_Init();
    libSwaC_gt_ZS_CampaignUnitCreated_Init();
    libSwaC_gt_ZS_CampaignUnitChangeOwner_Init();
    libSwaC_gt_ZS_CampaignUnitInfoUnitMorphes_Init();
    libSwaC_gt_ZS_PlayerNeedOverlord_Init();
    libSwaC_gt_ZS_PlayerNeedOverlordButtonClickedFood2_Init();
    libSwaC_gt_ZS_PlayerNeedOverlordButtonClickedFood3_Init();
    libSwaC_gt_ZS_PlayerNeedOverlordButtonClickedFood6_Init();
    libSwaC_gt_ZS_ResourcePickupTip_Init();
    libSwaC_gt_ZS_ResourcePickup_Init();
    libSwaC_gt_ZS_FeaturedZergStructureDies_Init();
    libSwaC_gt_ZS_FeaturedZergStructureDiesReminder_Init();
    libSwaC_gt_ZS_BaseUnderAttackInit_Init();
    libSwaC_gt_ZS_BaseUnderAttackByGround_Init();
    libSwaC_gt_ZS_BaseUnderAttackByGroundSpineCrawlerBuilt_Init();
    libSwaC_gt_ZS_OverlordRallyEnable_Init();
    libSwaC_gt_ZS_OverlordRally_Init();
    libSwaC_gt_ZS_ZerglingRespawnCheat_Init();
    libSwaC_gt_ZS_HatcheryPrimarySearch_Init();
    libSwaC_gt_ZS_HatcheryEggModels_Init();
    libSwaC_gt_ZS_HatcheryEggBirths_Init();
    libSwaC_gt_ZS_ZerglingRespawnAchievementAdd_Init();
    libSwaC_gt_ZS_KerriganLifeTooLow_Init();
    libSwaC_gt_ZS_KerriganDies_Init();
    libSwaC_gt_ZS_KerriganLowHPFlashing_Init();
    libSwaC_gt_ZS_StartKerriganLowHPSound_Init();
    libSwaC_gt_ZS_KerriganLowHPSoundHeartLoop_Init();
    libSwaC_gt_ZS_KerriganLowHPSoundBreathLoop_Init();
    libSwaC_gt_ZS_MissionTipClicked_Init();
    libSwaC_gt_ZS_SelectLarvaButtonHighlightUpdate_Init();
    libSwaC_gt_ZS_FlashArmyButtonHelpTip_Init();
    libSwaC_gt_ZS_ArmyButtonUsed_Init();
    libSwaC_gt_ZS_ArmyButtonMissionInit_Init();
    libSwaC_gt_ZS_VictoryStat_Init();
    libSwaC_gt_ZS_VictoryStatOff_Init();
    libSwaC_gt_ZS_BB_BossHPChanged_Init();
    libSwaC_gt_ZS_BB_MouseHoverText_Init();
    libSwaC_gt_ZS_HeroPanelUpdate_Init();
    libSwaC_gt_ZS_SwarmHeroUIUnitDamaged_Init();
    libSwaC_gt_ZS_SwarmHeroUIUnitVitalChange_Init();
    libSwaC_gt_ZS_MouseHoverText_Init();
    libSwaC_gt_SwarmPingSound_Init();
    libSwaC_gt_ZS_CamStatsGameLoaded_Init();
    libSwaC_gt_ZS_CamStatsHelpOpened_Init();
    libSwaC_gt_ZS_CollectCampaignStatsDataMisisonVictory_Init();
    libSwaC_gt_ZS_CollectCampaignStatsDataMisisonDefeat_Init();
    libSwaC_gt_ZS_CollectCampaignStatsDataMisisonAbort_Init();
    libSwaC_gt_ZS_CollectCampaignStatsDataMisisonStart_Init();
    libSwaC_gt_ZS_CampaignStatsUnitCreated_Init();
    libSwaC_gt_ZS_CampaignStatsWeaponArmorUpgrades_Init();
    libSwaC_gt_ZS_LoadCampaignStatsData_Init();
    libSwaC_gt_ZS_SaveCampaignStatsData_Init();
    libSwaC_gt_ZS_SetCasualRallyPoints_Init();
    libSwaC_gt_Zerg03TimestampDelayed_Init();
    libSwaC_gt_Zerg01TimestampDelayed_Init();
    libSwaC_gt_DisplayTimestamp_Init();
    libSwaC_gt_DisplayTimestampSkippable_Init();
    libSwaC_gt_ZS_CampaignCutsceneSkipped_Init();
    libSwaC_gt_ZS_PlayCinematicSkippable_Init();
    libSwaC_gt_ZS_CinematicDetectSkipping_Init();
    libSwaC_gt_ZS_CinematicHandleSkipping_Init();
    libSwaC_gt_ZS_WaitForDialogCutscene_Init();
    libSwaC_gt_ZS_WaitForCutscene_Init();
    libSwaC_gt_ZS_ApplyLarvaUpgrade_Init();
    libSwaC_gt_ZS_PlayEggRoomIntroSequence_Init();
    libSwaC_gt_ZS_ArmyCustomEggHighlight_Init();
    libSwaC_gt_ZS_ArmyCustomEggUnhighlight_Init();
    libSwaC_gt_ZS_ArmyCustomEvolutionMasterClicked_Init();
    libSwaC_gt_ZS_ArmyCustomEggClicked_Init();
    libSwaC_gt_ZS_ArmyCustomEggMouseOver_Init();
    libSwaC_gt_ZS_ArmyCustomEggRoomBackButtonClicked_Init();
    libSwaC_gt_ZS_ArmyCustomEggRoomEvolutionMissionButtonClicked_Init();
    libSwaC_gt_ZS_ArmyCustomPeriodicUpgradeReminder_Init();
    libSwaC_gt_ZS_ArmyCustomRunning_Init();
    libSwaC_gt_ZS_ArmyCustomUpgradeRoomBackButtonClicked_Init();
    libSwaC_gt_ZS_ArmyCustomUpgradeRoomUpgradeButtonClicked_Init();
    libSwaC_gt_ZS_ArmyCustomEvolutionEvolveButtonClicked_Init();
    libSwaC_gt_ZS_ArmyCustomEvolutionUIRunning_Init();
    libSwaC_gt_ZS_ArmyCustomEvolutionFanfareOver_Init();
    libSwaC_gt_ZS_ArmyCustomEvolutionFanfareFade_Init();
    libSwaC_gt_ZS_ArmyCustomEvolutionUnitClicked_Init();
    libSwaC_gt_ZS_ArmyCustomEvolutionUnitHighlight_Init();
    libSwaC_gt_ZS_ArmyCustomEvolutionUnitUnhighlight_Init();
    libSwaC_gt_ZS_ArmyCustomMissionCloseButtonClicked_Init();
    libSwaC_gt_ZS_ArmyCustomMissionPlayButtonClicked_Init();
    libSwaC_gt_ZS_ArmyCustomMissionPitchPlay_Init();
    libSwaC_gt_ZS_ArmyCustomMissionPitchStop_Init();
    libSwaC_gt_ZS_ArmyCustomMissionUIRunning_Init();
    libSwaC_gt_ZS_ArmyUIArchivesItemChecked_Init();
    libSwaC_gt_ZS_ArmyUIArchivesCancelClicked_Init();
    libSwaC_gt_ZS_ArmyUIArchivesOKClicked_Init();
    libSwaC_gt_ZS_ArmyUIArchivesRunning_Init();
    libSwaC_gt_ZS_ReviveCooldownReadyKerrigan_Init();
    libSwaC_gt_ZS_ReviveCooldownReadyDehaka_Init();
    libSwaC_gt_ZS_ReviveCooldownReadyStukov_Init();
    libSwaC_gt_ZS_KerriganDied_Init();
    libSwaC_gt_ZS_KerriganUITierCloseButtonClicked_Init();
    libSwaC_gt_ZS_KerriganUITierAbilityButtonClick_Init();
    libSwaC_gt_ZS_KerriganCustomizationRunning_Init();
    libSwaC_gt_ZS_KerriganCustomizationPlayEntryAnims_Init();
    libSwaC_gt_ZS_KerriganCustomizationPlayKerriganAnim_Init();
    libSwaC_gt_ZS_KerriganCustomizationPlayPrimalAnim_Init();
    libSwaC_gt_ZS_ArchivesBankLoadSyncComplete_Init();
    libSwaC_gt_ZS_ArchivesBankSaveSyncComplete_Init();
    libSwaC_gt_ZS_ArchivesHandleMissionLoad_Init();
    libSwaC_gt_ZS_EndCinematic_Init();
    libSwaC_gt_ZS_EndCredits_Init();
    libSwaC_gt_ZS_EndCreditsEnds_Init();
    libSwaC_gt_ZS_VSScreenContinue_Init();
    libSwaC_gt_ZS_VSScreenPlayAgain_Init();
    libSwaC_gt_ZS_VSRestartCancel_Init();
    libSwaC_gt_ZS_VSRestartRestart_Init();
    libSwaC_gt_ZS_FootageRecording_Init();
    libSwaC_gt_ZS_DebugProgressMissionButtonClicked_Init();
    libSwaC_gt_ZS_DebugProgressOK_Init();
    libSwaC_gt_ZS_DebugProgressLaunchMission_Init();
    libSwaC_gt_ZS_DebugProgressTravel_Init();
    libSwaC_gt_ZS_DebugProgressCancel_Init();
    libSwaC_gt_ZS_DebugProgressReset_Init();
    libSwaC_gt_ZS_DebugProgress_Init();
    libSwaC_gt_ZS_DebugProgressDevelop_Init();
    libSwaC_gt_ZS_DebugProgressDevelopDebugAsRelease_Init();
    libSwaC_gt_ZS_DebugProgressOKCallback_Init();
    libSwaC_gt_ZS_DebugStoryTechOK_Init();
    libSwaC_gt_ZS_DebugStoryTechCancel_Init();
    libSwaC_gt_ZS_DebugStoryTechArmyUnitClicked_Init();
    libSwaC_gt_ZS_DebugStoryTechUpgradeButtonClicked_Init();
    libSwaC_gt_ZS_DebugStoryTechUpgradeOK_Init();
    libSwaC_gt_ZS_DebugStoryTechUpgradeChecked_Init();
    libSwaC_gt_ZS_DebugStoryTechUpgradeCancel_Init();
    libSwaC_gt_ZS_DebugTechArmyCustomOpened_Init();
    libSwaC_gt_ZS_DebugTechArmyCustomReset_Init();
    libSwaC_gt_ZS_DebugArmy_Init();
    libSwaC_gt_ZS_DebugSplit_Init();
    libSwaC_gt_ZS_DebugKerriganUIOpened_Init();
    libSwaC_gt_ZS_DebugKerriganUIClosed_Init();
    libSwaC_gt_ZS_DebugKerriganAddLevel_Init();
    libSwaC_gt_ZS_DebugKerriganRemoveLevel_Init();
    libSwaC_gt_ZS_DebugKerriganMaxLevel_Init();
    libSwaC_gt_ZS_DebugKerrigan_Init();
    libSwaC_gt_ZS_DebugKerriganRetail_Init();
    libSwaC_gt_ZS_DebugTech_Init();
    libSwaC_gt_ZS_DebugTechRetail_Init();
    libSwaC_gt_ZS_DebugVictoryS_Init();
    libSwaC_gt_ZS_CampaignProgressButtonClicked_Init();
    libSwaC_gt_ZS_CampaignProgressTechButtonClicked_Init();
    libSwaC_gt_PlayCutscene_Init();
    libSwaC_gt_StopCutscene_Init();
    libSwaC_gt_PauseCutscene_Init();
    libSwaC_gt_SelectCutscene_Init();
    libSwaC_gt_SeekInCutscene_Init();
    libSwaC_gt_PlaybackCinematicMode_Init();
    libSwaC_gt_GoToCutsceneBookmark_Init();
    libSwaC_gt_ZS_DebugAchievement_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libSwaC_InitLib_completed = false;

void libSwaC_InitLib () {
    if (libSwaC_InitLib_completed) {
        return;
    }

    libSwaC_InitLib_completed = true;

    libSwaC_InitLibraries();
    libSwaC_InitVariables();
    libSwaC_InitTriggers();
}

