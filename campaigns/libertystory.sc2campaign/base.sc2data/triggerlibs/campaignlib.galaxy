include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"

include "TriggerLibs/CampaignLib_h"

//--------------------------------------------------------------------------------------------------
// Library: Campaign
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libCamp_InitLibraries () {
    libNtve_InitVariables();
    libLbty_InitVariables();
}

// Variable Initialization
bool libCamp_InitVariables_completed = false;

void libCamp_InitVariables () {
    int init_i;
    int init_j;
    int init_k;

    if (libCamp_InitVariables_completed) {
        return;
    }

    libCamp_InitVariables_completed = true;

    libCamp_gv__TP_DropPod_Units = UnitGroupEmpty();
    libCamp_gv_zS_ObjectivePanel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 500; init_i += 1) {
        libCamp_gv__CB_Line_TextColor[init_i] = Color(0,0,0);
    }
    for (init_i = 0; init_i <= 500; init_i += 1) {
        libCamp_gv__CB_Line_BGColor[init_i] = Color(0,0,0);
    }
    for (init_i = 0; init_i <= 500; init_i += 1) {
        libCamp_gv__CB_Line_AnimationStartOptions[init_i] = 0;
    }
    for (init_i = 0; init_i <= 500; init_i += 1) {
        libCamp_gv__CB_Line_AnimationEndOptions[init_i] = 0;
    }
    for (init_i = 0; init_i <= 500; init_i += 1) {
        libCamp_gv__CB_Line_DurationType[init_i] = c_transmissionDurationAdd;
    }
    for (init_i = 0; init_i <= 500; init_i += 1) {
        libCamp_gv__CB_Line_FaceOption[init_i] = true;
    }
    libCamp_gv__CB_Line_Last = -1;
    for (init_i = 0; init_i <= 100; init_i += 1) {
        libCamp_gv__CB_Unit_ActivationPlayerGroup[init_i] = PlayerGroupEmpty();
    }
    for (init_i = 0; init_i <= 32; init_i += 1) {
        libCamp_gv__CB_Current_ChatBubble[init_i] = c_textTagNone;
    }
    for (init_i = 0; init_i <= 32; init_i += 1) {
        libCamp_gv__CB_Current_UnitIndex[init_i] = -1;
    }
    for (init_i = 0; init_i <= 32; init_i += 1) {
        libCamp_gv__CB_Current_LineIndex[init_i] = -1;
    }
    libCamp_gv__CB_TP_TEXT = StringToText("");
    libCamp_gv__CB_TP_SOUNDLINK = SoundLink("EditorDefaultSound", -1);
    libCamp_gv__CB_TP_DURATIONTYPE = c_transmissionDurationAdd;
    libCamp_gv__CB_TP_TEXTTAG = c_textTagNone;
    libCamp_gv__CB_TP_WAITSOUND_DURATIONTYPE = c_transmissionDurationAdd;
    libCamp_gv__MsgDlg = c_invalidDialogId;
    libCamp_gv__MsgDlgButton = c_invalidDialogControlId;
    libCamp_gv_zS_CampaignTrialEndDialog = c_invalidDialogId;
    libCamp_gv_zS_CampaignTrialEndPanel = c_invalidDialogControlId;
    libCamp_gv_zS_CampaignTrialEndUpgradeButton = c_invalidDialogControlId;
    libCamp_gv_zS_CampaignTrialEndQuitButton = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 10; init_i += 1) {
        libCamp_gv_tSX_RecentTech[init_i] = libCamp_ge_StoryTech_StoryTechNone;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libCamp_gv_tSX_RecentMerc[init_i] = libCamp_ge_StoryMercID_MercNone;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libCamp_gv_tSX_RecentResearch[init_i] = libCamp_ge_StoryResearchID_ResearchNone;
    }
    libCamp_gv_TSC_MAP_LAST = ((libCamp_ge_MapID_MapLast) - 1);
    libCamp_gv_TSC_MISSION_FIRST = (libCamp_ge_MapID_MapTRaynor01);
    libCamp_gv_TSC_MISSION_LAST = (libCamp_ge_MapID_MapTSecret01);
    libCamp_gv_tS_CurrentMap = libCamp_ge_MapID_MapNone;
    for (init_i = 0; init_i <= 35; init_i += 1) {
        libCamp_gv_tS_MapID[init_i] = c_timerWindowNone;
    }
    for (init_i = 0; init_i <= 35; init_i += 1) {
        libCamp_gv_tS_MapType[init_i] = libCamp_ge_MapType_None;
    }
    for (init_i = 0; init_i <= 35; init_i += 1) {
        libCamp_gv_tS_MapSubtitle[init_i] = StringToText("");
    }
    for (init_i = 0; init_i <= 35; init_i += 1) {
        libCamp_gv_tS_MapFile[init_i] = "";
    }
    for (init_i = 0; init_i <= 35; init_i += 1) {
        libCamp_gv_tS_MissionSummary[init_i] = StringToText("");
    }
    for (init_i = 0; init_i <= 35; init_i += 1) {
        libCamp_gv_tS_MissionLocation[init_i] = libCamp_ge_PlanetID_PlanetNone;
    }
    for (init_i = 0; init_i <= 35; init_i += 1) {
        libCamp_gv_tS_MissionContact[init_i] = libCamp_ge_ContactID_ContactNone;
    }
    for (init_i = 0; init_i <= 35; init_i += 1) {
        libCamp_gv_tS_MissionEnemyForces[init_i] = StringToText("");
    }
    for (init_i = 0; init_i <= 35; init_i += 1) {
        for (init_j = 0; init_j <= 5; init_j += 1) {
            libCamp_gv_tS_MissionObjectives[init_i][init_j] = libCamp_ge_MissionObjective_MissionObjectiveNone;
        }
    }
    for (init_i = 0; init_i <= 35; init_i += 1) {
        for (init_j = 0; init_j <= 3; init_j += 1) {
            libCamp_gv_tS_MissionTechUnitsEnabled[init_i][init_j] = libCamp_ge_StoryTechGroup_StoryTechGroupNone;
        }
    }
    for (init_i = 0; init_i <= 150; init_i += 1) {
        libCamp_gv_tS_ContactName[init_i] = StringToText("");
    }
    libCamp_gv_tS_MissionABChoiceResult = libCamp_ge_MapID_MapNone;
    libCamp_gv_TSC_MERC_LAST = ((libCamp_ge_StoryMercID_MercLast) - 1);
    for (init_i = 0; init_i <= 16; init_i += 1) {
        libCamp_gv_tS_MercID[init_i] = libCamp_ge_StoryMercID_MercNone;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        libCamp_gv_tS_MercNames[init_i] = StringToText("");
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        libCamp_gv_tS_MercDescriptions[init_i] = StringToText("");
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            libCamp_gv_tS_MercTechSubGroup[init_i][init_j] = libCamp_ge_StoryTechGroup_StoryTechGroupNone;
        }
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        libCamp_gv_tS_MercUnitText[init_i] = StringToText("");
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        libCamp_gv_tS_MercAvailabilityText[init_i] = StringToText("");
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        libCamp_gv_tS_MercSpecialText[init_i] = StringToText("");
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        libCamp_gv_tS_MercUIMercenaries[init_i] = c_invalidMercenaryId;
    }
    for (init_i = 0; init_i <= 50; init_i += 1) {
        libCamp_gv_tS_BattleReportMissions[init_i] = c_invalidBattleReportId;
    }
    for (init_i = 0; init_i <= 30; init_i += 1) {
        libCamp_gv_tS_BattleReportScenes[init_i] = c_invalidBattleReportId;
    }
    libCamp_gv_TSC_OBJECTIVE_LAST = ((libCamp_ge_MissionObjective_MissionObjectiveLast) - 1);
    for (init_i = 0; init_i <= 100; init_i += 1) {
        libCamp_gv_tS_MissionObjObjective[init_i] = c_invalidObjectiveId;
    }
    for (init_i = 0; init_i <= 100; init_i += 1) {
        libCamp_gv_tS_MissionObjMap[init_i] = libCamp_ge_MapID_MapNone;
    }
    for (init_i = 0; init_i <= 100; init_i += 1) {
        libCamp_gv_tS_MissionObjIDs[init_i] = libCamp_ge_MissionObjective_MissionObjectiveNone;
    }
    libCamp_gv_TSC_RESEARCH_LAST = ((libCamp_ge_StoryResearchID_ResearchLast) - 1);
    for (init_i = 0; init_i <= 30; init_i += 1) {
        libCamp_gv_tS_ResearchID[init_i] = libCamp_ge_StoryResearchID_ResearchNone;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        for (init_j = 0; init_j <= 10; init_j += 1) {
            for (init_k = 0; init_k <= 3; init_k += 1) {
                libCamp_gv_tS_ResearchIDInUIStructure[init_i][init_j][init_k] = libCamp_ge_StoryResearchID_ResearchNone;
            }
        }
    }
    for (init_i = 0; init_i <= 30; init_i += 1) {
        libCamp_gv_tS_ResearchCategory[init_i] = libCamp_ge_StoryResearchCategory_ResearchCategoryNone;
    }
    for (init_i = 0; init_i <= 30; init_i += 1) {
        libCamp_gv_tS_ResearchUIItem[init_i] = c_invalidResearchItemId;
    }
    for (init_i = 0; init_i <= 25; init_i += 1) {
        libCamp_gv_tS_ResearchObjID[init_i] = libCamp_ge_StoryResearchObject_ResearchObjectNone;
    }
    for (init_i = 0; init_i <= 35; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            libCamp_gv_tS_ResearchMissionObjects[init_i][init_j] = libCamp_ge_StoryResearchObject_ResearchObjectNone;
        }
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libCamp_gv_tS_ResearchUICategories[init_i] = c_invalidResearchCategoryId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        for (init_j = 0; init_j <= 5; init_j += 1) {
            libCamp_gv_tS_ResearchUITiers[init_i][init_j] = c_invalidResearchTierId;
        }
    }
    libCamp_gv_tS_RoomChangeDialog = c_invalidDialogId;
    libCamp_gv_tS_RoomChangeDialogBorder = c_invalidDialogControlId;
    libCamp_gv_tS_RoomChangeDialogSubtitle = c_invalidDialogId;
    for (init_i = 0; init_i <= 10; init_i += 1) {
        libCamp_gv_tS_RoomChangeButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        libCamp_gv_tS_RoomChangeButtonText[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        libCamp_gv_tS_RoomChangeButtonBG[init_i] = c_invalidDialogControlId;
    }
    libCamp_gv_TSC_SCENE_LAST = ((libCamp_ge_SceneID_SceneLast) - 1);
    for (init_i = 0; init_i <= 30; init_i += 1) {
        libCamp_gv_tS_SceneIDs[init_i] = libCamp_ge_SceneID_SceneNone;
    }
    for (init_i = 0; init_i <= 30; init_i += 1) {
        libCamp_gv_tS_SceneNames[init_i] = StringToText("");
    }
    libCamp_gv_TSC_STORYSTATE_LAST = ((libCamp_ge_StoryStateID_StoryStateLast) - 1);
    libCamp_gv_tSC_PLANET_LAST = ((libCamp_ge_PlanetID_PlanetLast) - 1);
    for (init_i = 0; init_i <= 50; init_i += 1) {
        libCamp_gv_tS_PlanetID[init_i] = libCamp_ge_PlanetID_PlanetNone;
    }
    for (init_i = 0; init_i <= 50; init_i += 1) {
        libCamp_gv_tS_PlanetMission[init_i] = libCamp_ge_MapID_MapNone;
    }
    for (init_i = 0; init_i <= 50; init_i += 1) {
        libCamp_gv_tS_PlanetSubtitle[init_i] = StringToText("");
    }
    for (init_i = 0; init_i <= 50; init_i += 1) {
        libCamp_gv_tS_PlanetName[init_i] = StringToText("");
    }
    libCamp_gv_TSC_TECHCATEGORY_LAST = ((libCamp_ge_StoryTechCategory_StoryTechCategoryLast) - 1);
    for (init_i = 0; init_i <= 10; init_i += 1) {
        libCamp_gv_tS_TechCategoryID[init_i] = libCamp_ge_StoryTechCategory_StoryTechCategoryNone;
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        libCamp_gv_tS_TechCategoryName[init_i] = StringToText("");
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        libCamp_gv_tS_TechCategory_UI[init_i] = c_invalidPurchaseCategoryId;
    }
    libCamp_gv_TSC_TECHGROUP_LAST = ((libCamp_ge_StoryTechGroup_StoryTechGroupLast) - 1);
    for (init_i = 0; init_i <= 50; init_i += 1) {
        libCamp_gv_tS_TechGroupID[init_i] = libCamp_ge_StoryTechGroup_StoryTechGroupNone;
    }
    for (init_i = 0; init_i <= 50; init_i += 1) {
        libCamp_gv_tS_TechGroupCategoryID[init_i] = libCamp_ge_StoryTechCategory_StoryTechCategoryNone;
    }
    for (init_i = 0; init_i <= 50; init_i += 1) {
        libCamp_gv_tS_TechGroupName[init_i] = StringToText("");
    }
    for (init_i = 0; init_i <= 50; init_i += 1) {
        libCamp_gv_tS_TechGroupState[init_i] = c_purchaseCategoryStateEnabled;
    }
    for (init_i = 0; init_i <= 50; init_i += 1) {
        libCamp_gv_tS_TechGroup_UI[init_i] = c_invalidPurchaseGroupId;
    }
    libCamp_gv_TSC_TECH_LAST = ((libCamp_ge_StoryTech_StoryTechLast) - 1);
    for (init_i = 0; init_i <= 100; init_i += 1) {
        libCamp_gv_tS_TechID[init_i] = libCamp_ge_StoryTech_StoryTechNone;
    }
    for (init_i = 0; init_i <= 100; init_i += 1) {
        libCamp_gv_tS_Tech_GroupID[init_i] = libCamp_ge_StoryTechGroup_StoryTechGroupNone;
    }
    for (init_i = 0; init_i <= 100; init_i += 1) {
        libCamp_gv_tS_Tech_ConvoID[init_i] = "Tech|Tech_SCV_1";
    }
    for (init_i = 0; init_i <= 100; init_i += 1) {
        libCamp_gv_tS_Tech_Requires[init_i] = libCamp_ge_StoryTech_StoryTechNone;
    }
    for (init_i = 0; init_i <= 100; init_i += 1) {
        libCamp_gv_tS_Tech_UI[init_i] = c_invalidPurchaseItemId;
    }
    for (init_i = 0; init_i <= 100; init_i += 1) {
        libCamp_gv_tSX_Tech_Status[init_i] = libCamp_ge_StoryTechStates_TechUnavailable;
    }
    libCamp_gv_tSX_RoomStates = "";
    libCamp_gv_debug_MapIDForPerfTest = libCamp_ge_MapID_MapNone;
    for (init_i = 0; init_i <= 100; init_i += 1) {
        libCamp_gv_tS_NonSnapShotObjectiveStates[init_i] = libCamp_ge_MissionObjectiveState_ObjectiveUndiscovered;
    }
    for (init_i = 0; init_i <= 100; init_i += 1) {
        libCamp_gv_tSX_Tutorial_HistoryTitle[init_i] = StringToText("");
    }
    for (init_i = 0; init_i <= 100; init_i += 1) {
        libCamp_gv_tSX_Tutorial_HistoryDescription[init_i] = StringToText("");
    }
    for (init_i = 0; init_i <= 20; init_i += 1) {
        libCamp_gv_tS_StoryUIVisibility_Menu[init_i] = true;
    }
    for (init_i = 0; init_i <= 20; init_i += 1) {
        libCamp_gv_tS_StoryUIVisibility_Cash[init_i] = true;
    }
    for (init_i = 0; init_i <= 20; init_i += 1) {
        libCamp_gv_tS_StoryUIVisibility_RoomChange[init_i] = true;
    }
    for (init_i = 0; init_i <= 20; init_i += 1) {
        libCamp_gv_tS_StoryUIVisibility_Tip[init_i] = true;
    }
    libCamp_gv_tS_DebugProgressDialog = c_invalidDialogId;
    libCamp_gv_tS_DebugProgressImageCurrent = c_invalidDialogControlId;
    libCamp_gv_tS_DebugProgressImageOK = c_invalidDialogControlId;
    libCamp_gv_tS_DebugProgressButtonOK = c_invalidDialogControlId;
    libCamp_gv_tS_DebugProgressLabelWarning = c_invalidDialogControlId;
    libCamp_gv_tS_DebugProgressLabelsCompleted = c_invalidDialogControlId;
    libCamp_gv_tS_DebugProgressButtonCancel = c_invalidDialogControlId;
    libCamp_gv_tS_DebugProgressButtonReset = c_invalidDialogControlId;
    libCamp_gv_tS_DebugProgressButtonResetTech = c_invalidDialogControlId;
    libCamp_gv_tS_DebugProgressButtonLaunchMission = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 50; init_i += 1) {
        libCamp_gv_tS_DebugProgressMissionButtons[init_i] = c_invalidDialogControlId;
    }
    libCamp_gv_tS_DebugProgressMissionButtonUnlockSecret = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 50; init_i += 1) {
        libCamp_gv_tS_DebugProgressMissionLabelsStates[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 50; init_i += 1) {
        libCamp_gv_tS_DebugProgressMissionLabelsUnits[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 50; init_i += 1) {
        libCamp_gv_tS_DebugProgressMissionLabelsCredits[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 50; init_i += 1) {
        libCamp_gv_tS_DebugProgressMissionLabelsRequirement[init_i] = c_invalidDialogControlId;
    }
    libCamp_gv_tS_DebugProgressMissionLabelsUnlocked = c_invalidDialogControlId;
    libCamp_gv_tS_DebugProgressLastMission = libCamp_ge_MapID_MapNone;
    libCamp_gv_tS_DebugProgressLastCreditMission = libCamp_ge_MapID_MapNone;
    libCamp_gv_tS_DebugProgressCurrentMission = libCamp_ge_MapID_MapNone;
    for (init_i = 0; init_i <= 7; init_i += 1) {
        libCamp_gv_tS_DebugProgressMissionOptions[init_i] = libCamp_ge_MapID_MapNone;
    }
    for (init_i = 0; init_i <= 7; init_i += 1) {
        libCamp_gv_tS_DebugProgressMissionLaunchButtons[init_i] = c_invalidDialogControlId;
    }
    libCamp_gv_tS_DebugProgressMissionLaunchCancel = c_invalidDialogControlId;
    libCamp_gv_tS_DebugProgressMissionLaunchDialog = c_invalidDialogId;
    libCamp_gv_tS_DebugResearchDialogProtoss = c_invalidDialogId;
    libCamp_gv_tS_DebugResearchButtonProtossPlus = c_invalidDialogControlId;
    libCamp_gv_tS_DebugResearchButtonProtossMinus = c_invalidDialogControlId;
    libCamp_gv_tS_DebugResearchButtonProtossReset = c_invalidDialogControlId;
    libCamp_gv_tS_DebugResearchDialogZerg = c_invalidDialogId;
    libCamp_gv_tS_DebugResearchButtonZergPlus = c_invalidDialogControlId;
    libCamp_gv_tS_DebugResearchButtonZergMinus = c_invalidDialogControlId;
    libCamp_gv_tS_DebugResearchButtonZergReset = c_invalidDialogControlId;
    libCamp_gv_tS_DebugMercenaryDialog = c_invalidDialogId;
    libCamp_gv_tS_DebugMercenaryButtonReset = c_invalidDialogControlId;
    libCamp_gv_tS_DebugMercenaryButtonCredits = c_invalidDialogControlId;
    libCamp_gv_tS_DebugBuyTechDialog = c_invalidDialogId;
    libCamp_gv_tS_DebugBuyTechTitleUnitCredits = c_invalidDialogControlId;
    libCamp_gv_tS_DebugBuyTechButtonUnitsUnlock = c_invalidDialogControlId;
    libCamp_gv_tS_DebugBuyTechButtonUnitsUnlockAll = c_invalidDialogControlId;
    libCamp_gv_tS_DebugBuyTechButtonUnitsReset = c_invalidDialogControlId;
    libCamp_gv_tS_DebugBuyTechLabelUnitsUnlocked = c_invalidDialogControlId;
    libCamp_gv_tS_DebugBuyTechLabelCreditsEarned = c_invalidDialogControlId;
    libCamp_gv_tS_DebugBuyTechLabelMissionNotUnlocked = c_invalidDialogControlId;
    libCamp_gv_tS_DebugBuyTechLabelMissionExtraSelected = c_invalidDialogControlId;
    libCamp_gv_tS_DebugBuyTechTitleUpgrades = c_invalidDialogControlId;
    libCamp_gv_tS_DebugBuyTechButtonUpgradeBuy = c_invalidDialogControlId;
    libCamp_gv_tS_DebugBuyTechButtonUpgradeBuyAll = c_invalidDialogControlId;
    libCamp_gv_tS_DebugBuyTechButtonUpgradeReset = c_invalidDialogControlId;
    libCamp_gv_tS_DebugBuyTechButtonCreditsIncrease = c_invalidDialogControlId;
    libCamp_gv_tS_DebugBuyTechLabelUpgradeBought = c_invalidDialogControlId;
    libCamp_gv_tS_DebugBuyTechLabelCreditsSpent = c_invalidDialogControlId;
    libCamp_gv_tS_DebugBuyTechLabelUpgradeAvailable = c_invalidDialogControlId;
    libCamp_gv_tS_DebugBuyTechLabelCreditsAvailable = c_invalidDialogControlId;
    libCamp_gv_tS_DebugBuyTechButtonAverage = c_invalidDialogControlId;
    libCamp_gv_tS_DebugBuyTechButtonEarly = c_invalidDialogControlId;
    libCamp_gv_tS_DebugBuyTechButtonLate = c_invalidDialogControlId;
    libCamp_gv_tS_DebugBuyTechButtonSave = c_invalidDialogControlId;
    libCamp_gv_tS_DebugBuyTechButtonCancel = c_invalidDialogControlId;
    libCamp_gv_tSX_DebugTechCheatOption = libCamp_ge_TS_DebugTechCheatOption_Average;
    libCamp_gv_tS_DebugTechCustomButton = c_invalidDialogControlId;
    libCamp_gv_tS_DebugTechCustomDialog = c_invalidDialogId;
}

// Presets
// Functions
void libCamp_gf_DisplayCampaignMessage (playergroup lp_toPlayerGroup, int lp_messageType, text lp_message, int lp_formatOrNot) {
    // Automatic Variable Declarations
    int auto7647A521_val;

    // Implementation
    if ((lp_formatOrNot == libCamp_ge_CampaignMessageFormatNotFormat_FormatMessage)) {
        auto7647A521_val = lp_messageType;
        if (auto7647A521_val == libCamp_ge_CampaignMessageType_Hint) {
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, (StringExternal("Param/Value/lib_Camp_E402A24F") + lp_message));
            SoundPlay(SoundLink("TUIHint", 0), lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto7647A521_val == libCamp_ge_CampaignMessageType_SimpleHint) {
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, (StringToText("") + lp_message));
            SoundPlay(SoundLink("TUIHint", 0), lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto7647A521_val == libCamp_ge_CampaignMessageType_Secret) {
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, (StringExternal("Param/Value/lib_Camp_0BABB1CE") + lp_message));
            SoundPlay(SoundLink("TUISecret", 0), lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto7647A521_val == libCamp_ge_CampaignMessageType_NewUnitAcquired) {
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, (StringExternal("Param/Value/lib_Camp_BD584907") + lp_message));
            SoundPlay(SoundLink("TUINewUnitAcquired", 0), lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto7647A521_val == libCamp_ge_CampaignMessageType_NewUnitAvailable) {
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, (StringExternal("Param/Value/lib_Camp_B323D792") + lp_message));
            SoundPlay(SoundLink("TUINewUnitAvailable", 0), lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto7647A521_val == libCamp_ge_CampaignMessageType_NewTechAvailable) {
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, (StringExternal("Param/Value/lib_Camp_CF96AAC8") + lp_message));
            SoundPlay(SoundLink("TUINewTechAvailable", 0), lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto7647A521_val == libCamp_ge_CampaignMessageType_Warning) {
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, (StringExternal("Param/Value/lib_Camp_72F8214E") + lp_message));
            SoundPlay(SoundLink("TUIWarning", 0), lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto7647A521_val == libCamp_ge_CampaignMessageType_MissionFailed) {
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, (StringExternal("Param/Value/lib_Camp_B35FFFD8") + lp_message));
            SoundPlay(SoundLink("TUIWarning", 0), lp_toPlayerGroup, 100.0, 0.0);
        }
        else {
        }
    }
    else {
        UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, lp_message);
    }
}

void libCamp_gf__ZergDropPod (point lp_location, unitgroup lp_units) {
    // Variable Declarations
    unit lv_chosenUnit;
    unit lv_dropPod;
    point lv_dropPodLocation;
    fixed lv_angle;
    point lv_dropLocation;
    unit lv_creep;

    // Automatic Variable Declarations
    unitgroup auto07D8FB02_g;
    int auto07D8FB02_u;
    unitgroup autoC5AA5B6F_g;
    int autoC5AA5B6F_u;

    // Variable Initialization

    // Implementation
    auto07D8FB02_g = lp_units;
    auto07D8FB02_u = UnitGroupCount(auto07D8FB02_g, c_unitCountAll);
    for (;; auto07D8FB02_u -= 1) {
        lv_chosenUnit = UnitGroupUnitFromEnd(auto07D8FB02_g, auto07D8FB02_u);
        if (lv_chosenUnit == null) { break; }
        libNtve_gf_ShowHideUnit(lv_chosenUnit, false);
        libNtve_gf_PauseUnit(lv_chosenUnit, true);
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "ZergDropPod", 0, 0, lp_location);
    UnitSetTeamColorIndex(UnitLastCreated(), 4);
    lv_dropPod = UnitLastCreated();
    Wait(2.5, c_timeGame);
    lv_dropPodLocation = UnitGetPosition(lv_dropPod);
    libNtve_gf_CreateUnitsAtPoint2(1, "ZergDropPodCreep", 0, 0, lv_dropPodLocation);
    lv_creep = UnitLastCreated();
    Wait(1.0, c_timeGame);
    lv_angle = 0.0;
    autoC5AA5B6F_g = lp_units;
    autoC5AA5B6F_u = UnitGroupCount(autoC5AA5B6F_g, c_unitCountAll);
    for (;; autoC5AA5B6F_u -= 1) {
        lv_chosenUnit = UnitGroupUnitFromEnd(autoC5AA5B6F_g, autoC5AA5B6F_u);
        if (lv_chosenUnit == null) { break; }
        lv_dropLocation = PointWithOffsetPolar(lv_dropPodLocation, RandomFixed(0.5, 2.0), lv_angle);
        UnitSetPosition(lv_chosenUnit, lv_dropLocation, false);
        libNtve_gf_ShowHideUnit(lv_chosenUnit, true);
        libNtve_gf_PauseUnit(lv_chosenUnit, false);
        Wait(0.125, c_timeGame);
        lv_angle = (lv_angle + 77.0);
    }
    libNtve_gf_PauseUnit(lv_creep, true);
    Wait(3.0, c_timeGame);
    UnitRemove(lv_creep);
    Wait(4.0, c_timeGame);
    UnitKill(lv_dropPod);
}

void libCamp_gf__TerranDropPod (point lp_location, unitgroup lp_units) {
    // Variable Declarations
    unit lv_chosenUnit;
    unit lv_dropPod;
    point lv_dropPodLocation;
    fixed lv_angle;
    fixed lv_angleStart;
    point lv_dropLocation;
    fixed lv_distance;
    int lv_subIndex;
    point lv_moveLocation;
    int lv_countPerLine;

    // Automatic Variable Declarations
    unitgroup autoD1C3C149_g;
    int autoD1C3C149_u;
    unitgroup auto44CBF278_g;
    int auto44CBF278_u;

    // Variable Initialization

    // Implementation
    autoD1C3C149_g = lp_units;
    autoD1C3C149_u = UnitGroupCount(autoD1C3C149_g, c_unitCountAll);
    for (;; autoD1C3C149_u -= 1) {
        lv_chosenUnit = UnitGroupUnitFromEnd(autoD1C3C149_g, autoD1C3C149_u);
        if (lv_chosenUnit == null) { break; }
        libNtve_gf_ShowHideUnit(lv_chosenUnit, false);
        libNtve_gf_PauseUnit(lv_chosenUnit, true);
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "TerranDropPod", 0, 0, lp_location);
    lv_dropPod = UnitLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_dropPod), c_animNameDefault, "Birth", c_animFlagNonLooping, c_animTimeDefault);
    Wait(3.5, c_timeGame);
    lv_countPerLine = 4;
    if ((UnitGroupCount(lp_units, c_unitCountAlive) > 16)) {
        lv_countPerLine = ((UnitGroupCount(lp_units, c_unitCountAlive) + 3) / 4);
    }

    lv_dropPodLocation = UnitGetPosition(lv_dropPod);
    lv_distance = (0.8 + ((IntToFixed((UnitGroupCount(lp_units, c_unitCountAlive) + 3)) / IntToFixed(lv_countPerLine)) * 0.8));
    lv_subIndex = 1;
    lv_angleStart = 225.0;
    lv_angle = lv_angleStart;
    auto44CBF278_g = lp_units;
    auto44CBF278_u = UnitGroupCount(auto44CBF278_g, c_unitCountAll);
    for (;; auto44CBF278_u -= 1) {
        lv_chosenUnit = UnitGroupUnitFromEnd(auto44CBF278_g, auto44CBF278_u);
        if (lv_chosenUnit == null) { break; }
        lv_dropLocation = PointWithOffsetPolar(lv_dropPodLocation, 1.0, lv_angle);
        SoundPlayAtPoint(SoundLink("Medivac_Unload", 0), PlayerGroupAll(), lv_dropLocation, 0.0, 100.0, 0.0);
        Wait(0.125, c_timeGame);
        UnitSetPosition(lv_chosenUnit, lv_dropLocation, false);
        libNtve_gf_ShowHideUnit(lv_chosenUnit, true);
        libNtve_gf_PauseUnit(lv_chosenUnit, false);
        lv_moveLocation = PointWithOffsetPolar(lv_dropPodLocation, lv_distance, lv_angle);
        UnitIssueOrder(lv_chosenUnit, OrderTargetingPoint(AbilityCommand("move", 0), lv_moveLocation), c_orderQueueReplace);
        if ((lv_subIndex == lv_countPerLine)) {
            lv_subIndex = 1;
            lv_angle = lv_angleStart;
            lv_distance -= 0.8;
        }
        else {
            lv_subIndex += 1;
            lv_angle += 10.0;
        }
    }
    UnitKill(lv_dropPod);
}

void libCamp_gf_CreateDropPod (int lp_race, point lp_location, unitgroup lp_units, bool lp_waitDontWait) {
    // Variable Declarations
    point lv_dropLocation;
    unitgroup lv_dropUnits;

    // Automatic Variable Declarations
    int auto64417E0D_val;

    // Variable Initialization
    lv_dropUnits = UnitGroupEmpty();

    // Implementation
    lv_dropLocation = Point(PointGetX(lp_location), PointGetY(lp_location));
    lv_dropUnits = UnitGroupCopy(lp_units);
    auto64417E0D_val = lp_race;
    if (auto64417E0D_val == libCamp_ge_DropPodRace_Terran) {
        if ((lp_waitDontWait == true)) {
            libCamp_gf__TerranDropPod(lv_dropLocation, lv_dropUnits);
        }
        else {
            libCamp_gv__TP_DropPod_Location = lv_dropLocation;
            libCamp_gv__TP_DropPod_Units = lv_dropUnits;
            TriggerExecute(libCamp_gt__TerranDropPod, true, false);
        }
    }
    else if (auto64417E0D_val == libCamp_ge_DropPodRace_Zerg) {
        if ((lp_waitDontWait == true)) {
            libCamp_gf__ZergDropPod(lv_dropLocation, lv_dropUnits);
        }
        else {
            libCamp_gv__TP_DropPod_Location = lv_dropLocation;
            libCamp_gv__TP_DropPod_Units = lv_dropUnits;
            TriggerExecute(libCamp_gt__ZergDropPod, true, false);
        }
    }
    else {
    }
}

void libCamp_gf_TS_SaveMissionCompletion () {
    // Variable Declarations
    int lv_difficulty;
    int lv_bestTime;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_difficulty = 1;

    // Implementation
    if ((libCamp_gf_MapTypeCheck(libCamp_gv_tS_CurrentMap, libCamp_ge_MapType_Mission) == false)) {
        return ;
    }

    lv_difficulty = PlayerDifficulty(1);
    libCamp_gv_tS_MissionCompleteTime = FixedToInt(libNtve_gf_GamePlayTime(1));
    libCamp_gf_TS_SetMissionDifficultyCompleted(libCamp_gv_tS_CurrentMap, lv_difficulty, true);
    lv_bestTime = libCamp_gf_MissionCompleteBestTime(libCamp_gv_tS_CurrentMap, lv_difficulty);
    if (((lv_bestTime <= 0) || (libCamp_gv_tS_MissionCompleteTime < lv_bestTime))) {
        libCamp_gf_TS_SetMissionCompleteBestTime(libCamp_gv_tS_CurrentMap, lv_difficulty, libCamp_gv_tS_MissionCompleteTime);
    }

}

void libCamp_gf_TS_GameOver () {
    // Automatic Variable Declarations
}

void libCamp_gf_EndCampaignMission (int lp_player, int lp_type) {
    // Automatic Variable Declarations
    // Implementation
    PerfTestStop();
    TriggerStop(libCamp_gt_DebugPerfTestGetFps);
    TriggerQueueClear(c_triggerQueueRetain);
    TriggerQueuePause(true);
    if ((lp_type == c_gameOverVictory)) {
        libCamp_gf_DisplayCampaignVictoryScoreScreen(libCamp_gv_tS_CurrentMap);
    }
    else {
        GameOver(lp_player, lp_type, true, false);
    }
}

void libCamp_gf_RunMissionVictorySequence (trigger lp_victoryCinematic) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCamp_gv_tS_DebugProgressLaunchingMission == true) && (GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true)) {
        return ;
    }

    libCamp_gf_TS_GameOver();
    libCamp_gf_TS_SaveMissionCompletion();
    libCamp_gf_TS_UpdateMissionObjectives();
    AITimePause(true);
    TriggerQueueClear(c_triggerQueueRetain);
    libCamp_gv_tS_MissionVictoryActionQueyeEmpty = false;
    TriggerExecute(libCamp_gt_TS_MissionVictoryCallbackBlockActionQueueOneMinute, true, false);
    while (!((libCamp_gv_tS_MissionVictoryActionQueyeEmpty == true))) {
        Wait(1.0, c_timeGame);
    }
    TriggerQueueClear(c_triggerQueueKill);
    TriggerExecute(lp_victoryCinematic, true, false);
    TriggerExecute(libCamp_gt_TS_MissionVictoryCallbackBlockActionQueue, true, false);
}

void libCamp_gf_CreateStorymodeTips () {
    // Variable Declarations
    int lv_indexMerc;
    int lv_indexResearch;
    int lv_index;

    // Automatic Variable Declarations
    int autoD4A0925D_i;
    int auto88BEAAAC_i;

    // Variable Initialization
    lv_indexMerc = libCamp_ge_StoryMercID_MercNone;
    lv_indexResearch = libCamp_ge_StoryResearchID_ResearchNone;

    // Implementation
    if ((libCamp_gf_NumberOfMissions(libCamp_ge_MissionCountOptions_Completed) == 9) && (ConversationDataStateGetValue("StoryTips|KeyboardShortcuts") == 0)) {
        ConversationDataStateSetValue("StoryTips|KeyboardShortcuts", 1);
        libCamp_gf_CreateTipFromConversationState("StoryTips|KeyboardShortcuts", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
        Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    }

    if ((libCamp_gf_StoryState(libCamp_ge_StoryStateID_StoryStateFirstMissionMercBought) == 0) && (libCamp_gv_tS_CurrentMap != libCamp_ge_MapID_MapTHorner05S) && (libCamp_gv_tS_CurrentMap != libCamp_ge_MapID_MapTTosh03A) && (libCamp_gv_tS_CurrentMap != libCamp_ge_MapID_MapTTosh03B) && (libCamp_gv_tS_CurrentMap != libCamp_ge_MapID_MapTValerian02A) && (libCamp_gv_tS_CurrentMap != libCamp_ge_MapID_MapTZeratul01) && (libCamp_gv_tS_CurrentMap != libCamp_ge_MapID_MapTZeratul02) && (libCamp_gv_tS_CurrentMap != libCamp_ge_MapID_MapTZeratul03) && (libCamp_gv_tS_CurrentMap != libCamp_ge_MapID_MapTZeratul04)) {
        autoD4A0925D_i = libCamp_gv_TSC_MERC_FIRST;
        while (autoD4A0925D_i <= libCamp_gv_TSC_MERC_LAST) {
            lv_indexMerc = libCamp_gv_tS_MercID[autoD4A0925D_i];
            if ((libCamp_gf_MercStatusCheck(lv_indexMerc, libCamp_ge_StoryMercStatus_Purchased) == true)) {
                libCamp_gf_SetStoryState(libCamp_ge_StoryStateID_StoryStateFirstMissionMercBought, 1);
                libCamp_gf_CreateTipFromConversationState("StoryTips|MissionMercenaries", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
                Wait(libCamp_gv_campaignHintDelay, c_timeReal);
                break;
            }

            autoD4A0925D_i = autoD4A0925D_i + 1;
        }
    }

    if ((libCamp_gf_StoryState(libCamp_ge_StoryStateID_StoryStateFirstMissionLabResearchObjective) == 0)) {
        auto88BEAAAC_i = libCamp_gv_TSC_RESEARCH_FIRST;
        while (auto88BEAAAC_i <= libCamp_gv_TSC_RESEARCH_LAST) {
            lv_indexResearch = libCamp_gv_tS_ResearchID[auto88BEAAAC_i];
            if ((libCamp_gf_StoryResearchMissionObject(libCamp_gv_tS_CurrentMap) != libCamp_ge_StoryResearchObject_ResearchObjectNone)) {
                libCamp_gf_SetStoryState(libCamp_ge_StoryStateID_StoryStateFirstMissionLabResearchObjective, 1);
                if ((libCamp_gf_NumberOfMissions(libCamp_ge_MissionCountOptions_Completed) >= 5)) {
                    libCamp_gf_CreateTipFromConversationState("StoryTips|MissionResearch", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
                }
                else {
                    libCamp_gf_CreateTipFromConversationState("StoryTips|MissionResearchNoLab", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
                }
                Wait(libCamp_gv_campaignHintDelay, c_timeReal);
                break;
            }

            auto88BEAAAC_i = auto88BEAAAC_i + 1;
        }
    }

    libCamp_gf_CreateNewStructureTips();
    libCamp_gf_TS_CreateNewUpgradeTips();
}

void libCamp_gf_CreateNewStructureTips () {
    // Automatic Variable Declarations
    // Implementation
    if (((libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTTosh03A) || (libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTTosh03B) || (libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTHorner05S) || (libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTZeratul01) || (libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTZeratul02) || (libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTZeratul03) || (libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTZeratul04) || (libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTValerian02A))) {
        return ;
    }

    if ((libCamp_gf_StoryState(libCamp_ge_StoryStateID_StoryStateTipFactoryPlayed) == 0)) {
        if ((TechTreeAbilityIsAllowed(1, AbilityCommand("TerranBuild", 10)) == true)) {
            libCamp_gf_SetStoryState(libCamp_ge_StoryStateID_StoryStateTipFactoryPlayed, 1);
            libCamp_gf_CreateTipFromConversationState("StoryTips|MissionNewStructureFactory", libNtve_ge_TipType_NewStructure, PlayerGroupAll());
            Wait(libCamp_gv_campaignHintDelay, c_timeReal);
        }

    }

    if ((libCamp_gf_StoryState(libCamp_ge_StoryStateID_StoryStateTipStarportPlayed) == 0)) {
        if ((TechTreeAbilityIsAllowed(1, AbilityCommand("TerranBuild", 11)) == true)) {
            libCamp_gf_SetStoryState(libCamp_ge_StoryStateID_StoryStateTipStarportPlayed, 1);
            libCamp_gf_CreateTipFromConversationState("StoryTips|MissionNewStructureStarport", libNtve_ge_TipType_NewStructure, PlayerGroupAll());
            Wait(libCamp_gv_campaignHintDelay, c_timeReal);
        }

    }

}

void libCamp_gf_TS_CreateNewUpgradeTips () {
    // Automatic Variable Declarations
    // Implementation
    if (((libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTTosh03A) || (libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTTosh03B) || (libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTHorner05S) || (libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTZeratul01) || (libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTZeratul02) || (libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTZeratul03) || (libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTZeratul04) || (libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTValerian02A))) {
        return ;
    }

    if ((libCamp_gv_tS_UpgradeInfantry2 == true) && (ConversationDataStateGetValue("StoryTips|EngineeringBay2") == 0)) {
        libCamp_gf_CreateTipFromConversationState("StoryTips|EngineeringBay2", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
        ConversationDataStateSetValue("StoryTips|EngineeringBay2", 1);
        Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    }

    if ((libCamp_gv_tS_UpgradeInfantry3 == true) && (ConversationDataStateGetValue("StoryTips|EngineeringBay3") == 0)) {
        libCamp_gf_CreateTipFromConversationState("StoryTips|EngineeringBay3", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
        ConversationDataStateSetValue("StoryTips|EngineeringBay3", 1);
        Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    }

    if (((libCamp_gv_tS_UpgradeVehicle2 == true) || (libCamp_gv_tS_UpgradeShip2 == true)) && (ConversationDataStateGetValue("StoryTips|ArmoryLevel2") == 0)) {
        libCamp_gf_CreateTipFromConversationState("StoryTips|ArmoryLevel2", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
        ConversationDataStateSetValue("StoryTips|ArmoryLevel2", 1);
        Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    }

    if (((libCamp_gv_tS_UpgradeVehicle3 == true) || (libCamp_gv_tS_UpgradeShip3 == true)) && (ConversationDataStateGetValue("StoryTips|ArmoryLevel3") == 0)) {
        libCamp_gf_CreateTipFromConversationState("StoryTips|ArmoryLevel3", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
        ConversationDataStateSetValue("StoryTips|ArmoryLevel3", 1);
        Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    }

}

void libCamp_gf_CreateTipFromConversationState (string lp_convoState, int lp_tipType, playergroup lp_players) {
    // Automatic Variable Declarations
    // Implementation
    HelpPanelAddTip(lp_players, libNtve_gf_FormatTipTitle(ConversationDataStateName(lp_convoState), lp_tipType), ConversationDataStateText(lp_convoState, "Description"), ConversationDataStateName(lp_convoState), ConversationDataStateImagePath(lp_convoState));
    ConversationDataStateSetValue(lp_convoState, 1);
}

void libCamp_gf_CreateMissionAutosavePoint (text lp_description) {
    // Variable Declarations
    text lv_name;
    int lv_autosaveDialog;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_name = StringToText("");
    lv_autosaveDialog = c_invalidDialogId;

    // Implementation
    if ((libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapNone)) {
        return ;
    }

    libCamp_gv_tS_MissionAutoSaveIndex += 1;
    lv_name = (libCamp_gf_MissionName(libCamp_gv_tS_CurrentMap) + StringExternal("Param/Value/lib_Camp_C21C1513"));
    GameSaveCreate(lv_name, lp_description, "", true);
}

void libCamp_gf_SendTransmissionCampaign (unit lp_unit, soundlink lp_sound, int lp_durationType, fixed lp_duration, bool lp_waitUntilDone) {
    // Variable Declarations
    bool lv_flashOption;
    int lv_portrait;
    transmissionsource lv_source;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_portrait = c_invalidPortraitId;
    lv_source = TransmissionSource();

    // Implementation
    if ((libNtve_gf_PlayerInCinematicMode(1) == false) && (libNtve_gf_PlayerInStoryMode(1) == false)) {
        lv_flashOption = true;
        lv_portrait = libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft);
    }
    else {
        lv_flashOption = false;
        lv_portrait = libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_BottomLeft);
    }
    if ((lp_unit == null)) {
        lv_source = TransmissionSourceFromModel(null);
    }
    else {
        lv_source = TransmissionSourceFromUnit(lp_unit, lv_flashOption, false, "Talk");
    }
    TransmissionSend(PlayerGroupAll(), lv_source, lv_portrait, "Talk", lp_sound, null, null, lp_duration, lp_durationType, lp_waitUntilDone);
}

void libCamp_gf_SetAllSoundChannelVolumesCampaign (int lp_mode) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_mode == libNtve_ge_VolumeChannelMode_Game)) {
        libNtve_gf_SetAllSoundChannelVolumes(lp_mode, PlayerGroupAll(), 2.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 0.5);
    }
    else {
        libNtve_gf_SetAllSoundChannelVolumes(lp_mode, PlayerGroupAll(), 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, 0.25);
    }
}

void libCamp_gf_ResearchAIUpgrade (int lp_count, string lp_upgrade, int lp_player) {
    // Automatic Variable Declarations
    int autoF8AEAD25_n;
    int autoF8AEAD25_i;

    // Implementation
    autoF8AEAD25_n = lp_count;
    for (autoF8AEAD25_i = 1; autoF8AEAD25_i <= autoF8AEAD25_n; autoF8AEAD25_i += 1) {
        AIResearch(lp_player, 4, -1, lp_upgrade);
    }
}

void libCamp_gf_DestroyCacheAndGivePlayerResources (unit lp_cacheUnit, int lp_resourceType, int lp_resourceAmount, int lp_player) {
    // Variable Declarations
    int lv_textTag;

    // Automatic Variable Declarations
    int auto5EE29D27_val;

    // Variable Initialization
    lv_textTag = c_textTagNone;

    // Implementation
    auto5EE29D27_val = lp_resourceType;
    if (auto5EE29D27_val == c_playerPropMinerals) {
        SoundPlay(SoundLink("UI_ResourcePickup", 0), PlayerGroupAll(), 100.0, 0.0);
        TextTagCreate((StringExternal("Param/Value/lib_Camp_F6EDE668") + IntToText(lp_resourceAmount) + StringExternal("Param/Value/lib_Camp_A7A85440")), 24, UnitGetPosition(lp_cacheUnit), 1.0, true, false, PlayerGroupAll());
        lv_textTag = TextTagLastCreated();
        TextTagSetVelocity(lv_textTag, 0.5, 90.0);
        TextTagSetTime(lv_textTag, c_textTagTimeDuration, 2.0);
        UnitKill(lp_cacheUnit);
        PlayerModifyPropertyInt(lp_player, c_playerPropMinerals, c_playerPropOperAdd, lp_resourceAmount);
    }
    else if (auto5EE29D27_val == c_playerPropVespene) {
        SoundPlay(SoundLink("UI_ResourcePickup", 0), PlayerGroupAll(), 100.0, 0.0);
        TextTagCreate((StringExternal("Param/Value/lib_Camp_0DAA8706") + IntToText(lp_resourceAmount) + StringExternal("Param/Value/lib_Camp_8E9001C5")), 24, UnitGetPosition(lp_cacheUnit), 1.0, true, false, PlayerGroupAll());
        lv_textTag = TextTagLastCreated();
        TextTagSetVelocity(lv_textTag, 0.5, 90.0);
        TextTagSetTime(lv_textTag, c_textTagTimeDuration, 2.0);
        UnitKill(lp_cacheUnit);
        PlayerModifyPropertyInt(lp_player, c_playerPropVespene, c_playerPropOperAdd, lp_resourceAmount);
    }
    else {
    }
}

void libCamp_gf_DisplayResearchPointsGiventoPlayer (int lp_researchObject, unit lp_researchUnit, int lp_player) {
    // Variable Declarations
    int lv_category;
    int lv_rewardProtoss;
    int lv_rewardZerg;
    text lv_text;

    // Automatic Variable Declarations
    int autoC89FF57C_val;

    // Variable Initialization
    lv_category = libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss;

    // Implementation
    lv_rewardProtoss = libCamp_gf_StoryResearchObjectReward(lp_researchObject, libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss);
    lv_rewardZerg = libCamp_gf_StoryResearchObjectReward(lp_researchObject, libCamp_ge_StoryResearchCategory_ResearchCategoryZerg);
    if ((lv_rewardProtoss > 0)) {
        lv_category = libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss;
        lv_text = TextReplaceWord(StringExternal("Param/Value/lib_Camp_74665700"), StringExternal("Param/Value/lib_Camp_CB944759"), IntToText(lv_rewardProtoss), c_stringReplaceAll, c_stringCase);
    }
    else {
        lv_category = libCamp_ge_StoryResearchCategory_ResearchCategoryZerg;
        lv_text = TextReplaceWord(StringExternal("Param/Value/lib_Camp_E7B59D5B"), StringExternal("Param/Value/lib_Camp_A2E6741E"), IntToText(lv_rewardZerg), c_stringReplaceAll, c_stringCase);
    }
    TextTagCreate(lv_text, 24, UnitGetPosition(lp_researchUnit), 1.0, true, false, PlayerGroupSingle(lp_player));
    libCamp_gf_AddProgressToStoryResearch(lp_researchObject, 1);
    autoC89FF57C_val = lv_category;
    if (autoC89FF57C_val == libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss) {
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 50.20, 100.00));
        TextTagSetVelocity(TextTagLastCreated(), 0.5, 90.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 4.0);
        SoundPlay(SoundLink("UI_ResourcePickup", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    else if (autoC89FF57C_val == libCamp_ge_StoryResearchCategory_ResearchCategoryZerg) {
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 50.20, 0.00));
        TextTagSetVelocity(TextTagLastCreated(), 0.5, 90.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 4.0);
        SoundPlay(SoundLink("UI_ResourcePickup", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    else {
    }
}

int libCamp_gf_LastAddedChatBubble () {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv__CB_Line_Last;
}

void libCamp_gf_ShowChatBubble (unit lp_unit, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libCamp_gv__CB_TP_UNIT = lp_unit;
    libCamp_gv__CB_TP_PLAYER = lp_player;
    libCamp_gv__CB_TP_FORCED = true;
    TriggerExecute(libCamp_gt__CB_ActivateChatBubble, true, false);
}

void libCamp_gf_AddChatBubbleLine2 (int lp_player, unit lp_unit, soundlink lp_sound, text lp_text, fixed lp_duration, int lp_durationType, bool lp_faceOption) {
    // Variable Declarations
    int lv_unitIndex;
    int lv_lineIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libCamp_gv__CB_UnitLine_Count > libCamp_gv__CBC_LINEMAX)) {
        return ;
    }

    lv_unitIndex = libCamp_gf__CB_Unit_GetIndex(lp_unit);
    if ((lv_unitIndex <= 0)) {
        if ((libCamp_gv__CB_Unit_Count > libCamp_gv__CBC_UNITMAX)) {
            return ;
        }

        lv_unitIndex = libCamp_gf__CB_Unit_Add(lp_unit);
    }

    if ((lv_unitIndex <= 0)) {
        return ;
    }

    lv_lineIndex = libCamp_gf__CB_Line_Add(lp_text, Color(0,0,0), Color(100,100,100), "Talk", 0, "", 0, lp_sound, lp_duration, lp_durationType, lp_faceOption, null, null);
    libCamp_gf__CB_UnitLine_Add(lv_unitIndex, lp_player, lv_lineIndex);
}

void libCamp_gf_ClearChatBubble (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libCamp_gf__CB_Current_Remove(lp_player);
}

void libCamp_gf_RandomlyShuffleChatBubbleLines (unit lp_unit, int lp_player) {
    // Variable Declarations
    int lv_unitIndex;
    int lv_unitLineIndex;
    int lv_unitLineIndexEnd;
    int lv_unitLineTemp;
    int lv_unitLineIndexRandom;

    // Automatic Variable Declarations
    int auto8B85FB58_ae;
    const int auto8B85FB58_ai = 1;

    // Variable Initialization

    // Implementation
    lv_unitIndex = libCamp_gf__CB_Unit_GetIndex(lp_unit);
    if ((lv_unitIndex <= 0)) {
        return ;
    }

    if (((libCamp_gv__CB_Unit_UnitLine_StartIndex[lv_unitIndex][lp_player] <= 0) || (libCamp_gv__CB_Unit_LineCount[lv_unitIndex][lp_player] <= 0))) {
        return ;
    }

    lv_unitLineIndexEnd = libCamp_gf__CB_Unit_GetLineEndIndex(lv_unitIndex, lp_player);
    auto8B85FB58_ae = (lv_unitLineIndexEnd + 1);
    lv_unitLineIndex = libCamp_gv__CB_Unit_UnitLine_StartIndex[lv_unitIndex][lp_player];
    for ( ; ( (auto8B85FB58_ai >= 0 && lv_unitLineIndex <= auto8B85FB58_ae) || (auto8B85FB58_ai < 0 && lv_unitLineIndex >= auto8B85FB58_ae) ) ; lv_unitLineIndex += auto8B85FB58_ai ) {
        lv_unitLineIndexRandom = RandomInt(lv_unitLineIndex, lv_unitLineIndexEnd);
        lv_unitLineTemp = libCamp_gv__CB_UnitLine[lv_unitLineIndex];
        libCamp_gv__CB_UnitLine[lv_unitLineIndex] = libCamp_gv__CB_UnitLine[lv_unitLineIndexRandom];
        libCamp_gv__CB_UnitLine[lv_unitLineIndexRandom] = lv_unitLineTemp;
    }
}

void libCamp_gf_ClearAllChatBubbleLinesFromUnit (unit lp_unit, int lp_player) {
    // Variable Declarations
    int lv_unitIndex;
    int lv_unitLineIndex;

    // Automatic Variable Declarations
    int auto92B2B8A1_ae;
    const int auto92B2B8A1_ai = 1;

    // Variable Initialization

    // Implementation
    lv_unitIndex = libCamp_gf__CB_Unit_GetIndex(lp_unit);
    if ((lv_unitIndex < 0)) {
        return ;
    }

    if (((libCamp_gv__CB_Unit_UnitLine_StartIndex[lv_unitIndex][lp_player] <= 0) || (libCamp_gv__CB_Unit_LineCount[lv_unitIndex][lp_player] <= 0))) {
        return ;
    }

    auto92B2B8A1_ae = libCamp_gf__CB_Unit_GetLineEndIndex(lv_unitIndex, lp_player);
    lv_unitLineIndex = libCamp_gv__CB_Unit_UnitLine_StartIndex[lv_unitIndex][lp_player];
    for ( ; ( (auto92B2B8A1_ai >= 0 && lv_unitLineIndex <= auto92B2B8A1_ae) || (auto92B2B8A1_ai < 0 && lv_unitLineIndex >= auto92B2B8A1_ae) ) ; lv_unitLineIndex += auto92B2B8A1_ai ) {
        libCamp_gf__CB_Line_Remove(libCamp_gv__CB_UnitLine[lv_unitLineIndex]);
    }
    libCamp_gf__CB_UnitLine_RemoveUnit(lv_unitIndex, lp_player);
}

void libCamp_gf_SetChatBubbleActivationDistance (unit lp_unit, int lp_player, fixed lp_distance) {
    // Variable Declarations
    int lv_unitIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_unitIndex = libCamp_gf__CB_Unit_GetIndex(lp_unit);
    if ((lv_unitIndex <= 0)) {
        return ;
    }

    libCamp_gv__CB_Unit_ActivationDistance[lv_unitIndex][lp_player] = lp_distance;
}

void libCamp_gf_SetChatBubbleColor (int lp_chatBubble, color lp_color, color lp_backgroundColor) {
    // Variable Declarations
    int lv_lineIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_lineIndex = (lp_chatBubble);
    if ((libCamp_gf__CB_Line_IsValid(lv_lineIndex) == false)) {
        return ;
    }

    libCamp_gv__CB_Line_TextColor[lv_lineIndex] = lp_color;
    libCamp_gv__CB_Line_BGColor[lv_lineIndex] = lp_backgroundColor;
}

void libCamp_gf_SetChatBubbleAnimation2 (int lp_chatBubble, string lp_animation1, int lp_animation1Option, string lp_animation2, int lp_animation2Option) {
    // Variable Declarations
    int lv_lineIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_lineIndex = (lp_chatBubble);
    if ((libCamp_gf__CB_Line_IsValid(lv_lineIndex) == false)) {
        return ;
    }

    libCamp_gv__CB_Line_AnimationStart[lv_lineIndex] = lp_animation1;
    libCamp_gv__CB_Line_AnimationStartOptions[lv_lineIndex] = lp_animation1Option;
    libCamp_gv__CB_Line_AnimationEnd[lv_lineIndex] = lp_animation2;
    libCamp_gv__CB_Line_AnimationEndOptions[lv_lineIndex] = lp_animation2Option;
}

void libCamp_gf_SetChatBubbleTrigger (int lp_chatBubble, trigger lp_triggerStart, trigger lp_triggerEnd) {
    // Variable Declarations
    int lv_lineIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_lineIndex = (lp_chatBubble);
    if ((libCamp_gf__CB_Line_IsValid(lv_lineIndex) == false)) {
        return ;
    }

    libCamp_gv__CB_Line_TriggerStart[lv_lineIndex] = lp_triggerStart;
    libCamp_gv__CB_Line_TriggerEnd[lv_lineIndex] = lp_triggerEnd;
}

void libCamp_gf_SetChatBubbleFacingPoint (int lp_chatBubble, point lp_point) {
    // Variable Declarations
    int lv_lineIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_lineIndex = (lp_chatBubble);
    if ((libCamp_gf__CB_Line_IsValid(lv_lineIndex) == false)) {
        return ;
    }

    libCamp_gv__CB_Line_FaceLocation[lv_lineIndex] = lp_point;
}

void libCamp_gf_ShowChatBubbleOnUnit (int lp_player, unit lp_unit, soundlink lp_sound, text lp_message, fixed lp_duration, int lp_durationType, bool lp_WaitUntilDone) {
    // Variable Declarations
    text lv_msg;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_msg = StringToText("");

    // Implementation
    if ((lp_message == null)) {
        lv_msg = libCamp_gf_TextOfSound(lp_sound);
    }
    else {
        lv_msg = lp_message;
    }
    TextTagCreate(lv_msg, 24, UnitGetPosition(lp_unit), 0.5, true, false, PlayerGroupAll());
    TextTagShow(TextTagLastCreated(), PlayerGroupAll(), false);
    libCamp_gv__CB_TP_PLAYER = lp_player;
    libCamp_gv__CB_TP_UNIT = lp_unit;
    libCamp_gv__CB_TP_SOUNDLINK = lp_sound;
    libCamp_gv__CB_TP_TEXT = lv_msg;
    libCamp_gv__CB_TP_DURATION = lp_duration;
    libCamp_gv__CB_TP_DURATIONTYPE = lp_durationType;
    libCamp_gv__CB_TP_TEXTTAG = TextTagLastCreated();
    TriggerExecute(libCamp_gt__CB_ShowChatBubbleOnUnit, true, lp_WaitUntilDone);
}

void libCamp_gf_TurnChatBubbleOnOff (unit lp_unit, bool lp_onOff, int lp_player) {
    // Variable Declarations
    int lv_unitIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_unitIndex = libCamp_gf__CB_Unit_GetIndex(lp_unit);
    if ((lv_unitIndex <= 0)) {
        return ;
    }

    if ((lp_onOff == true)) {
        PlayerGroupAdd(libCamp_gv__CB_Unit_ActivationPlayerGroup[lv_unitIndex], lp_player);
    }
    else {
        PlayerGroupRemove(libCamp_gv__CB_Unit_ActivationPlayerGroup[lv_unitIndex], lp_player);
    }
}

text libCamp_gf_TextOfSound (soundlink lp_soundLink) {
    // Variable Declarations
    string lv_sndGameLink;
    int lv_sndAssetID;
    string lv_strMsg;
    text lv_msg;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_strMsg = "";
    lv_msg = StringToText("");

    // Implementation
    lv_sndGameLink = SoundLinkId(lp_soundLink);
    lv_sndAssetID = SoundLinkAsset(lp_soundLink);
    if ((lv_sndAssetID < 0)) {
        lv_sndAssetID = 0;
    }

    lv_strMsg = CatalogFieldValueGet(c_gameCatalogSound, lv_sndGameLink, ("AssetArray[" + IntToString(lv_sndAssetID) + "].Subtitle"), 1);
    lv_msg = StringExternal(lv_strMsg);
    return lv_msg;
}

bool libCamp_gf__CB_Line_IsValid (int lp_lineIndex) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_lineIndex <= 0) || (lp_lineIndex > libCamp_gv__CBC_LINEMAX))) {
        return false;
    }

    if ((libCamp_gv__CB_Line[lp_lineIndex] == null)) {
        return false;
    }

    return true;
}

int libCamp_gf__CB_Line_Add (text lp_line, color lp_textColor, color lp_bGColor, string lp_animationStart, int lp_animationStartOption, string lp_animationEnd, int lp_animationEndOption, soundlink lp_sound, fixed lp_duration, int lp_durationType, bool lp_faceOption, trigger lp_triggerStart, trigger lp_triggerEnd) {
    // Variable Declarations
    int lv_lineIndex;
    int lv_lineIndexEnd;
    int lv_playerIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libCamp_gv__CB_Line_Last <= 0)) {
        lv_lineIndex = 1;
    }
    else {
        lv_lineIndex = libCamp_gv__CB_Line_Last;
        lv_lineIndexEnd = (libCamp_gv__CB_Line_Last - 1);
        if ((lv_lineIndexEnd == 0)) {
            lv_lineIndexEnd = libCamp_gv__CBC_LINEMAX;
        }

        while (true) {
            if ((libCamp_gv__CB_Line[lv_lineIndex] == null)) {
                break;
            }

            if ((lv_lineIndex == lv_lineIndexEnd)) {
                return -1;
            }

            lv_lineIndex = (lv_lineIndex + 1);
            if ((lv_lineIndex > libCamp_gv__CBC_LINEMAX)) {
                lv_lineIndex = 1;
            }

        }
    }
    if ((lp_line == null)) {
        libCamp_gv__CB_Line[lv_lineIndex] = libCamp_gf_TextOfSound(lp_sound);
    }
    else {
        libCamp_gv__CB_Line[lv_lineIndex] = lp_line;
    }
    if ((libCamp_gv__CB_Line[lv_lineIndex] == null)) {
        libCamp_gv__CB_Line[lv_lineIndex] = StringToText("");
    }

    libCamp_gv__CB_Line_TextColor[lv_lineIndex] = lp_textColor;
    libCamp_gv__CB_Line_BGColor[lv_lineIndex] = lp_bGColor;
    libCamp_gv__CB_Line_AnimationStart[lv_lineIndex] = lp_animationStart;
    libCamp_gv__CB_Line_AnimationStartOptions[lv_lineIndex] = lp_animationStartOption;
    libCamp_gv__CB_Line_AnimationEnd[lv_lineIndex] = lp_animationEnd;
    libCamp_gv__CB_Line_AnimationEndOptions[lv_lineIndex] = lp_animationEndOption;
    libCamp_gv__CB_Line_Sound[lv_lineIndex] = lp_sound;
    libCamp_gv__CB_Line_Duration[lv_lineIndex] = lp_duration;
    libCamp_gv__CB_Line_DurationType[lv_lineIndex] = lp_durationType;
    libCamp_gv__CB_Line_FaceOption[lv_lineIndex] = lp_faceOption;
    libCamp_gv__CB_Line_TriggerStart[lv_lineIndex] = lp_triggerStart;
    libCamp_gv__CB_Line_TriggerEnd[lv_lineIndex] = lp_triggerEnd;
    libCamp_gv__CB_Line_Last = lv_lineIndex;
    return lv_lineIndex;
}

void libCamp_gf__CB_Line_Remove (int lp_lineIndex) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_lineIndex <= 0)) {
        return ;
    }

    libCamp_gv__CB_Line[lp_lineIndex] = null;
    libCamp_gv__CB_Line_TriggerStart[lp_lineIndex] = null;
    libCamp_gv__CB_Line_TriggerEnd[lp_lineIndex] = null;
}

int libCamp_gf__CB_Unit_GetIndex (unit lp_unit) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int autoF08FB2FB_ae = libCamp_gv__CBC_UNITMAX;
    const int autoF08FB2FB_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (autoF08FB2FB_ai >= 0 && lv_index <= autoF08FB2FB_ae) || (autoF08FB2FB_ai < 0 && lv_index >= autoF08FB2FB_ae) ) ; lv_index += autoF08FB2FB_ai ) {
        if ((libCamp_gv__CB_Unit[lv_index] == lp_unit)) {
            return lv_index;
        }

    }
    return -1;
}

int libCamp_gf__CB_Unit_GetLineEndIndex (int lp_unitIndex, int lp_playerIndex) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((libCamp_gv__CB_Unit_UnitLine_StartIndex[lp_unitIndex][lp_playerIndex] <= 0) || (libCamp_gv__CB_Unit_LineCount[lp_unitIndex][lp_playerIndex] <= 0))) {
        return -1;
    }

    return ((libCamp_gv__CB_Unit_UnitLine_StartIndex[lp_unitIndex][lp_playerIndex] + libCamp_gv__CB_Unit_LineCount[lp_unitIndex][lp_playerIndex]) - 1);
}

int libCamp_gf__CB_Unit_GetLineCurrentIndex (int lp_unitIndex, int lp_playerIndex) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((libCamp_gv__CB_Unit_UnitLine_StartIndex[lp_unitIndex][lp_playerIndex] <= 0) || (libCamp_gv__CB_Unit_LineCount[lp_unitIndex][lp_playerIndex] <= 0) || (libCamp_gv__CB_Unit_LineCurrent[lp_unitIndex][lp_playerIndex] <= 0))) {
        return -1;
    }

    return ((libCamp_gv__CB_Unit_UnitLine_StartIndex[lp_unitIndex][lp_playerIndex] + libCamp_gv__CB_Unit_LineCurrent[lp_unitIndex][lp_playerIndex]) - 1);
}

int libCamp_gf__CB_Unit_Add (unit lp_unit) {
    // Variable Declarations
    int lv_unitIndex;
    int lv_playerIndex;

    // Automatic Variable Declarations
    const int auto67975871_ae = libCamp_gv__CBC_UNITMAX;
    const int auto67975871_ai = 1;
    const int autoF0157342_ae = libCamp_gv__CBC_PLAYERMAX;
    const int autoF0157342_ai = 1;

    // Variable Initialization

    // Implementation
    lv_unitIndex = libCamp_gf__CB_Unit_GetIndex(lp_unit);
    if ((lv_unitIndex > 0)) {
        return lv_unitIndex;
    }

    lv_unitIndex = 1;
    for ( ; ( (auto67975871_ai >= 0 && lv_unitIndex <= auto67975871_ae) || (auto67975871_ai < 0 && lv_unitIndex >= auto67975871_ae) ) ; lv_unitIndex += auto67975871_ai ) {
        if ((libCamp_gv__CB_Unit[lv_unitIndex] == null)) {
            libCamp_gv__CB_Unit[lv_unitIndex] = lp_unit;
            libCamp_gv__CB_Unit_OriginalFacing[lv_unitIndex] = UnitGetFacing(lp_unit);
            libCamp_gv__CB_Unit_ActivationPlayerGroup[lv_unitIndex] = PlayerGroupSingle(1);
            lv_playerIndex = 1;
            for ( ; ( (autoF0157342_ai >= 0 && lv_playerIndex <= autoF0157342_ae) || (autoF0157342_ai < 0 && lv_playerIndex >= autoF0157342_ae) ) ; lv_playerIndex += autoF0157342_ai ) {
                libCamp_gv__CB_Unit_ActivationDistance[lv_unitIndex][lv_playerIndex] = 12.0;
                libCamp_gv__CB_Unit_UnitLine_StartIndex[lv_unitIndex][lv_playerIndex] = -1;
                libCamp_gv__CB_Unit_LineCount[lv_unitIndex][lv_playerIndex] = 0;
                libCamp_gv__CB_Unit_LineCurrent[lv_unitIndex][lv_playerIndex] = -1;
            }
            libCamp_gv__CB_Unit_Count = (libCamp_gv__CB_Unit_Count + 1);
            if ((libCamp_gv__CB_Unit_Count > 0)) {
                TriggerEnable(libCamp_gt__CB_ChatBubbleUnitDied, true);
            }

            return lv_unitIndex;
        }

    }
    return -1;
}

void libCamp_gf__CB_Unit_Remove (unit lp_unit) {
    // Variable Declarations
    int lv_unitIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_unitIndex = libCamp_gf__CB_Unit_GetIndex(lp_unit);
    libCamp_gf__CB_Unit_RemoveByIndex(lv_unitIndex);
}

void libCamp_gf__CB_Unit_RemoveByIndex (int lp_unitIndex) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_unitIndex < 0)) {
        return ;
    }

    libCamp_gv__CB_Unit[lp_unitIndex] = null;
    libCamp_gv__CB_Unit_ActivationPlayerGroup[lp_unitIndex] = null;
    libCamp_gv__CB_Unit_Count = (libCamp_gv__CB_Unit_Count - 1);
    if ((libCamp_gv__CB_Unit_Count <= 0)) {
        TriggerEnable(libCamp_gt__CB_ChatBubbleUnitDied, false);
    }

}

void libCamp_gf__CB_UnitLine_Add (int lp_unitIndex, int lp_playerIndex, int lp_lineIndex) {
    // Variable Declarations
    int lv_unitLineIndex;
    int lv_index_UnitLine;
    int lv_index_Player;
    int lv_index_Unit;

    // Automatic Variable Declarations
    int auto09EC20DF_ae;
    const int auto09EC20DF_ai = -1;
    const int autoF9F4AE62_ae = libCamp_gv__CBC_UNITMAX;
    const int autoF9F4AE62_ai = 1;
    const int auto219FFDBA_ae = libCamp_gv__CBC_PLAYERMAX;
    const int auto219FFDBA_ai = 1;

    // Variable Initialization

    // Implementation
    if (((lp_unitIndex <= 0) || (lp_lineIndex <= 0) || (lp_playerIndex <= 0))) {
        return ;
    }

    if ((libCamp_gv__CB_Unit_UnitLine_StartIndex[lp_unitIndex][lp_playerIndex] <= 0)) {
        libCamp_gv__CB_Unit_UnitLine_StartIndex[lp_unitIndex][lp_playerIndex] = (libCamp_gv__CB_UnitLine_Count + 1);
        libCamp_gv__CB_Unit_LineCount[lp_unitIndex][lp_playerIndex] = 0;
        libCamp_gv__CB_Unit_LineCurrent[lp_unitIndex][lp_playerIndex] = -1;
        lv_unitLineIndex = libCamp_gv__CB_Unit_UnitLine_StartIndex[lp_unitIndex][lp_playerIndex];
    }
    else {
        lv_unitLineIndex = (libCamp_gv__CB_Unit_UnitLine_StartIndex[lp_unitIndex][lp_playerIndex] + libCamp_gv__CB_Unit_LineCount[lp_unitIndex][lp_playerIndex]);
        auto09EC20DF_ae = lv_unitLineIndex;
        lv_index_UnitLine = libCamp_gv__CB_UnitLine_Count;
        for ( ; ( (auto09EC20DF_ai >= 0 && lv_index_UnitLine <= auto09EC20DF_ae) || (auto09EC20DF_ai < 0 && lv_index_UnitLine >= auto09EC20DF_ae) ) ; lv_index_UnitLine += auto09EC20DF_ai ) {
            libCamp_gv__CB_UnitLine[(lv_index_UnitLine + 1)] = libCamp_gv__CB_UnitLine[lv_index_UnitLine];
        }
        lv_index_Unit = 1;
        for ( ; ( (autoF9F4AE62_ai >= 0 && lv_index_Unit <= autoF9F4AE62_ae) || (autoF9F4AE62_ai < 0 && lv_index_Unit >= autoF9F4AE62_ae) ) ; lv_index_Unit += autoF9F4AE62_ai ) {
            if ((libCamp_gv__CB_Unit[lv_index_Unit] != null)) {
                lv_index_Player = 1;
                for ( ; ( (auto219FFDBA_ai >= 0 && lv_index_Player <= auto219FFDBA_ae) || (auto219FFDBA_ai < 0 && lv_index_Player >= auto219FFDBA_ae) ) ; lv_index_Player += auto219FFDBA_ai ) {
                    if ((libCamp_gv__CB_Unit_UnitLine_StartIndex[lv_index_Unit][lv_index_Player] >= lv_unitLineIndex)) {
                        libCamp_gv__CB_Unit_UnitLine_StartIndex[lv_index_Unit][lv_index_Player] = (libCamp_gv__CB_Unit_UnitLine_StartIndex[lv_index_Unit][lv_index_Player] + 1);
                    }

                }
            }

        }
    }
    libCamp_gv__CB_UnitLine[lv_unitLineIndex] = lp_lineIndex;
    libCamp_gv__CB_Unit_LineCount[lp_unitIndex][lp_playerIndex] = (libCamp_gv__CB_Unit_LineCount[lp_unitIndex][lp_playerIndex] + 1);
    libCamp_gv__CB_UnitLine_Count = (libCamp_gv__CB_UnitLine_Count + 1);
    if ((libCamp_gv__CB_UnitLine_Count > 0)) {
        TriggerEnable(libCamp_gt__CB_ChatBubbleActivated, true);
    }

}

void libCamp_gf__CB_UnitLine_RemoveUnit (int lp_unitIndex, int lp_playerIndex) {
    // Variable Declarations
    int lv_unitLineIndexAfter;
    int lv_lineCount;
    int lv_index_UnitLine;
    int lv_index_Player;
    int lv_index_Unit;

    // Automatic Variable Declarations
    int auto18C61ED6_ae;
    const int auto18C61ED6_ai = 1;
    const int auto20A4B5DE_ae = libCamp_gv__CBC_UNITMAX;
    const int auto20A4B5DE_ai = 1;
    const int auto8DC8B463_ae = libCamp_gv__CBC_PLAYERMAX;
    const int auto8DC8B463_ai = 1;

    // Variable Initialization

    // Implementation
    if (((lp_unitIndex <= 0) || (lp_playerIndex <= 0))) {
        return ;
    }

    if (((libCamp_gv__CB_Unit_UnitLine_StartIndex[lp_unitIndex][lp_playerIndex] <= 0) || (libCamp_gv__CB_Unit_LineCount[lp_unitIndex][lp_playerIndex] <= 0))) {
        return ;
    }

    lv_unitLineIndexAfter = (libCamp_gf__CB_Unit_GetLineEndIndex(lp_unitIndex, lp_playerIndex) + 1);
    lv_lineCount = libCamp_gv__CB_Unit_LineCount[lp_unitIndex][lp_playerIndex];
    auto18C61ED6_ae = libCamp_gv__CB_UnitLine_Count;
    lv_index_UnitLine = lv_unitLineIndexAfter;
    for ( ; ( (auto18C61ED6_ai >= 0 && lv_index_UnitLine <= auto18C61ED6_ae) || (auto18C61ED6_ai < 0 && lv_index_UnitLine >= auto18C61ED6_ae) ) ; lv_index_UnitLine += auto18C61ED6_ai ) {
        libCamp_gv__CB_UnitLine[(lv_index_UnitLine - lv_lineCount)] = libCamp_gv__CB_UnitLine[lv_index_UnitLine];
    }
    libCamp_gv__CB_Unit_LineCount[lp_unitIndex][lp_playerIndex] = 0;
    libCamp_gv__CB_Unit_UnitLine_StartIndex[lp_unitIndex][lp_playerIndex] = -1;
    libCamp_gv__CB_Unit_LineCurrent[lp_unitIndex][lp_playerIndex] = -1;
    libCamp_gv__CB_UnitLine_Count = (libCamp_gv__CB_UnitLine_Count - lv_lineCount);
    lv_index_Unit = 1;
    for ( ; ( (auto20A4B5DE_ai >= 0 && lv_index_Unit <= auto20A4B5DE_ae) || (auto20A4B5DE_ai < 0 && lv_index_Unit >= auto20A4B5DE_ae) ) ; lv_index_Unit += auto20A4B5DE_ai ) {
        if ((libCamp_gv__CB_Unit[lv_index_Unit] != null)) {
            lv_index_Player = 1;
            for ( ; ( (auto8DC8B463_ai >= 0 && lv_index_Player <= auto8DC8B463_ae) || (auto8DC8B463_ai < 0 && lv_index_Player >= auto8DC8B463_ae) ) ; lv_index_Player += auto8DC8B463_ai ) {
                if ((libCamp_gv__CB_Unit_UnitLine_StartIndex[lv_index_Unit][lv_index_Player] >= lv_unitLineIndexAfter)) {
                    libCamp_gv__CB_Unit_UnitLine_StartIndex[lv_index_Unit][lv_index_Player] = (libCamp_gv__CB_Unit_UnitLine_StartIndex[lv_index_Unit][lv_index_Player] - lv_lineCount);
                }

            }
        }

    }
    if ((libCamp_gv__CB_UnitLine_Count <= 0)) {
        TriggerEnable(libCamp_gt__CB_ChatBubbleActivated, false);
    }

}

void libCamp_gf__CB_Current_Create (int lp_unitIndex, int lp_playerIndex, unit lp_target) {
    // Variable Declarations
    int lv_lineIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libCamp_gv__CB_Unit_LineCurrent[lp_unitIndex][lp_playerIndex] <= 0)) {
        libCamp_gv__CB_Unit_LineCurrent[lp_unitIndex][lp_playerIndex] = 1;
    }
    else {
        libCamp_gv__CB_Unit_LineCurrent[lp_unitIndex][lp_playerIndex] = (libCamp_gv__CB_Unit_LineCurrent[lp_unitIndex][lp_playerIndex] + 1);
    }
    if ((libCamp_gv__CB_Unit_LineCurrent[lp_unitIndex][lp_playerIndex] > libCamp_gv__CB_Unit_LineCount[lp_unitIndex][lp_playerIndex])) {
        libCamp_gv__CB_Unit_LineCurrent[lp_unitIndex][lp_playerIndex] = 1;
    }

    lv_lineIndex = libCamp_gv__CB_UnitLine[libCamp_gf__CB_Unit_GetLineCurrentIndex(lp_unitIndex, lp_playerIndex)];
    libCamp_gv__CB_Current_UnitIndex[lp_playerIndex] = lp_unitIndex;
    libCamp_gv__CB_Current_ChatBubbleTarget[lp_playerIndex] = lp_target;
    libCamp_gv__CB_Current_LineIndex[lp_playerIndex] = lv_lineIndex;
    TextTagCreate(libCamp_gv__CB_Line[lv_lineIndex], 24, UnitGetPosition(libCamp_gv__CB_Unit[lp_unitIndex]), 0.5, true, false, PlayerGroupAll());
    TextTagShow(TextTagLastCreated(), PlayerGroupAll(), false);
    libCamp_gv__CB_Current_ChatBubble[lp_playerIndex] = TextTagLastCreated();
    TextTagAttachToUnit(libCamp_gv__CB_Current_ChatBubble[lp_playerIndex], libCamp_gv__CB_Unit[lp_unitIndex], 2.5);
    TextTagSetAlignment(libCamp_gv__CB_Current_ChatBubble[lp_playerIndex], c_alignCenter, c_alignBottom);
    TextTagSetMaxSize(libCamp_gv__CB_Current_ChatBubble[lp_playerIndex], 25.0, 40.0);
    TextTagSetColor(libCamp_gv__CB_Current_ChatBubble[lp_playerIndex], c_textTagColorText, libCamp_gv__CB_Line_TextColor[lv_lineIndex]);
    TextTagSetTextShadow(libCamp_gv__CB_Current_ChatBubble[lp_playerIndex], false);
    TextTagSetTime(libCamp_gv__CB_Current_ChatBubble[lp_playerIndex], c_textTagTimeDuration, 360000.0);
    TextTagShowBackground(libCamp_gv__CB_Current_ChatBubble[lp_playerIndex], true);
    TextTagSetBackgroundBorderSize(libCamp_gv__CB_Current_ChatBubble[lp_playerIndex], 1.0, 1.0);
    TextTagSetColor(libCamp_gv__CB_Current_ChatBubble[lp_playerIndex], c_textTagColorBackground, libCamp_gv__CB_Line_BGColor[lv_lineIndex]);
    TextTagSetBackgroundImage(libCamp_gv__CB_Current_ChatBubble[lp_playerIndex], "Assets/Textures/border-tooltip-game.dds", true);
    if ((libCamp_gv__CB_Line_FaceLocation[lv_lineIndex] == null)) {
        if (((libCamp_gv__CB_Line_FaceOption[lv_lineIndex] == true) && (libCamp_gv__CB_Current_ChatBubbleTarget[lp_playerIndex] != null))) {
            libNtve_gf_MakeUnitFacePoint(libCamp_gv__CB_Unit[lp_unitIndex], UnitGetPosition(libCamp_gv__CB_Current_ChatBubbleTarget[lp_playerIndex]), 0.5);
        }

    }
    else {
        libNtve_gf_MakeUnitFacePoint(libCamp_gv__CB_Unit[lp_unitIndex], libCamp_gv__CB_Line_FaceLocation[lv_lineIndex], 0.5);
    }
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(libCamp_gv__CB_Unit[lp_unitIndex]), c_animNameDefault, libCamp_gv__CB_Line_AnimationStart[lv_lineIndex], libCamp_gv__CB_Line_AnimationStartOptions[lv_lineIndex], c_animTimeDefault);
    if ((libCamp_gv__CB_Line_TriggerStart[lv_lineIndex] != null)) {
        TriggerExecute(libCamp_gv__CB_Line_TriggerStart[lv_lineIndex], true, false);
    }

    TextTagShow(libCamp_gv__CB_Current_ChatBubble[lp_playerIndex], PlayerGroupSingle(lp_playerIndex), true);
    if ((libCamp_gv__CB_Line_Sound[lv_lineIndex] != null)) {
        SoundPlayOnUnit(libCamp_gv__CB_Line_Sound[lv_lineIndex], PlayerGroupSingle(lp_playerIndex), libCamp_gv__CB_Unit[lp_unitIndex], 0.0, 100.0, 0.0);
        libCamp_gv__CB_Current_Sound[lp_playerIndex] = SoundLastPlayed();
    }

}

void libCamp_gf__CB_Current_Remove (int lp_playerIndex) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCamp_gv__CB_Current_UnitIndex[lp_playerIndex] > 0)) {
        if ((libCamp_gv__CB_Current_LineIndex[lp_playerIndex] > 0)) {
            if (((libCamp_gv__CB_Line_FaceLocation[libCamp_gv__CB_Current_LineIndex[lp_playerIndex]] != null) || (libCamp_gv__CB_Line_FaceOption[libCamp_gv__CB_Current_LineIndex[lp_playerIndex]] == true))) {
                UnitSetFacing(libCamp_gv__CB_Unit[libCamp_gv__CB_Current_UnitIndex[lp_playerIndex]], libCamp_gv__CB_Unit_OriginalFacing[libCamp_gv__CB_Current_UnitIndex[lp_playerIndex]], 0.5);
            }

            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(libCamp_gv__CB_Unit[libCamp_gv__CB_Current_UnitIndex[lp_playerIndex]]), c_animNameDefault, libCamp_gv__CB_Line_AnimationEnd[libCamp_gv__CB_Current_LineIndex[lp_playerIndex]], libCamp_gv__CB_Line_AnimationEndOptions[libCamp_gv__CB_Current_LineIndex[lp_playerIndex]], c_animTimeDefault);
        }

    }

    if ((libCamp_gv__CB_Current_LineIndex[lp_playerIndex] > 0)) {
        if ((libCamp_gv__CB_Line_TriggerEnd[libCamp_gv__CB_Current_LineIndex[lp_playerIndex]] != null)) {
            TriggerExecute(libCamp_gv__CB_Line_TriggerEnd[libCamp_gv__CB_Current_LineIndex[lp_playerIndex]], true, false);
        }

    }

    if ((libCamp_gv__CB_Current_ChatBubble[lp_playerIndex] != c_textTagNone)) {
        TextTagDestroy(libCamp_gv__CB_Current_ChatBubble[lp_playerIndex]);
        libCamp_gv__CB_Current_ChatBubble[lp_playerIndex] = c_textTagNone;
    }

    if ((libCamp_gv__CB_Current_Sound[lp_playerIndex] != null)) {
        SoundStop(libCamp_gv__CB_Current_Sound[lp_playerIndex], true);
        libCamp_gv__CB_Current_Sound[lp_playerIndex] = null;
    }

    libCamp_gv__CB_Current_UnitIndex[lp_playerIndex] = -1;
    libCamp_gv__CB_Current_ChatBubbleTarget[lp_playerIndex] = null;
    libCamp_gv__CB_Current_LineIndex[lp_playerIndex] = -1;
}

int libCamp_gf__CB_LastWaitSound () {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv__CB_WaitSoundID;
}

void libCamp_gf__CB_StarWaitingSound (sound lp_sound, fixed lp_duration, int lp_durationType) {
    // Automatic Variable Declarations
    // Implementation
    libCamp_gv__CB_WaitSoundID += 1;
    if ((libCamp_gv__CB_WaitSoundID > libCamp_gv__CBC_WAITSOUNDCOUNTMAX)) {
        libCamp_gv__CB_WaitSoundID = 1;
    }

    libCamp_gv__CB_WaitSoundDone[libCamp_gv__CB_WaitSoundID] = false;
    libCamp_gv__CB_TP_WAITSOUND = lp_sound;
    libCamp_gv__CB_TP_WAITSOUND_DURATION = lp_duration;
    libCamp_gv__CB_TP_WAITSOUND_DURATIONTYPE = lp_durationType;
    libCamp_gv__CB_TP_WAITSOUND_ID = libCamp_gv__CB_WaitSoundID;
    TriggerExecute(libCamp_gt__CB_WaitForSound, true, false);
}

fixed libCamp_gf_GD_Gap (int lp_hV) {
    // Automatic Variable Declarations
    int autoE579BA21_val;

    // Implementation
    autoE579BA21_val = lp_hV;
    if (autoE579BA21_val == libCamp_ge_GRIDDLG_HV_Horizontal) {
        return libCamp_gv_gRIDDLG_GRIDGAP_X;
    }
    else if (autoE579BA21_val == libCamp_ge_GRIDDLG_HV_Vertical) {
        return libCamp_gv_gRIDDLG_GRIDGAP_Y;
    }
    else {
    }
    return 0.0;
}

fixed libCamp_gf_GD_GridToReal (fixed lp_grid, int lp_hV, int lp_sizeOrPos) {
    // Variable Declarations
    fixed lv_ret;
    fixed lv_gap;
    fixed lv_sign;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_gap = libCamp_gf_GD_Gap(lp_hV);
    if ((lp_grid >= 0.0)) {
        lv_sign = 1.0;
    }
    else {
        lv_sign = -1.0;
    }
    lv_ret = (AbsF(lp_grid) * libCamp_gv_gRIDDLG_GRID);
    if ((lp_sizeOrPos == libCamp_ge_GRIDDLG_HV2_ClientSize)) {
        lv_ret = MaxF((lv_ret - lv_gap), 0.0);
    }

    return (lv_ret * lv_sign);
}

int libCamp_gf_GD_GridToInteger (fixed lp_grid, int lp_hV, int lp_sizeOrPos) {
    // Automatic Variable Declarations
    // Implementation
    return FixedToInt(libCamp_gf_GD_GridToReal(lp_grid, lp_hV, lp_sizeOrPos));
}

fixed libCamp_gf_GD_RealToGrid (fixed lp_value, int lp_hV, int lp_sizeOrPos) {
    // Variable Declarations
    fixed lv_sign;
    fixed lv_grid;
    fixed lv_gap;
    fixed lv_ret;
    int lv_gapCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_gap = libCamp_gf_GD_Gap(lp_hV);
    if ((lp_value >= 0.0)) {
        lv_sign = 1.0;
    }
    else {
        lv_sign = -1.0;
    }
    lv_ret = AbsF(lp_value);
    if ((lp_sizeOrPos == libCamp_ge_GRIDDLG_HV2_ClientSize)) {
        lv_ret += lv_gap;
    }

    lv_ret /= libCamp_gv_gRIDDLG_GRID;
    return (lv_sign * lv_ret);
}

fixed libCamp_gf_GD_IntegerToGrid (int lp_value, int lp_hV, int lp_sizeOrPos) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gf_GD_RealToGrid(IntToFixed(lp_value), lp_hV, lp_sizeOrPos);
}

fixed libCamp_gf_DialogWidthInGrid (int lp_dialog) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gf_GD_IntegerToGrid(DialogGetWidth(lp_dialog), libCamp_ge_GRIDDLG_HV_Horizontal, libCamp_ge_GRIDDLG_HV2_ClientSize);
}

fixed libCamp_gf_DialogHeightInGrid (int lp_dialog) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gf_GD_IntegerToGrid(DialogGetHeight(lp_dialog), libCamp_ge_GRIDDLG_HV_Vertical, libCamp_ge_GRIDDLG_HV2_ClientSize);
}

fixed libCamp_gf_DialogOffsetXInGrid (int lp_dialog) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gf_GD_IntegerToGrid(DialogGetOffsetX(lp_dialog), libCamp_ge_GRIDDLG_HV_Horizontal, libCamp_ge_GRIDDLG_HV2_NoneClient);
}

fixed libCamp_gf_DialogOffsetYInGrid (int lp_dialog) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gf_GD_IntegerToGrid(DialogGetOffsetY(lp_dialog), libCamp_ge_GRIDDLG_HV_Vertical, libCamp_ge_GRIDDLG_HV2_NoneClient);
}

fixed libCamp_gf_DialogItemWidthInGrid (int lp_dialogItem, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gf_GD_IntegerToGrid(DialogControlGetWidth(lp_dialogItem, lp_player), libCamp_ge_GRIDDLG_HV_Horizontal, libCamp_ge_GRIDDLG_HV2_ClientSize);
}

fixed libCamp_gf_DialogItemHeightInGrid (int lp_dialogItem, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gf_GD_IntegerToGrid(DialogControlGetHeight(lp_dialogItem, lp_player), libCamp_ge_GRIDDLG_HV_Vertical, libCamp_ge_GRIDDLG_HV2_ClientSize);
}

fixed libCamp_gf_DialogItemOffsetXInGrid (int lp_dialogItem, int lp_player) {
    // Variable Declarations
    fixed lv_x;
    int lv_anchor;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_anchor = c_anchorBottomLeft;

    // Implementation
    lv_x = IntToFixed(DialogControlGetOffsetX(lp_dialogItem, lp_player));
    if ((DialogControlGetRelativeControl(lp_dialogItem, lp_player) == c_invalidDialogControlId)) {
        lv_anchor = DialogControlGetAnchor(lp_dialogItem, lp_player);
        if (((lv_anchor == c_anchorTopLeft) || (lv_anchor == c_anchorTopRight) || (lv_anchor == c_anchorBottomLeft) || (lv_anchor == c_anchorBottomRight) || (lv_anchor == c_anchorLeft) || (lv_anchor == c_anchorRight))) {
            lv_x -= libCamp_gv_gRIDDLG_MARGINE_X;
        }
    }

    return libCamp_gf_GD_RealToGrid(lv_x, libCamp_ge_GRIDDLG_HV_Horizontal, libCamp_ge_GRIDDLG_HV2_ClientPosition);
}

fixed libCamp_gf_DialogItemOffsetYInGrid (int lp_dialogItem, int lp_player) {
    // Variable Declarations
    fixed lv_y;
    int lv_anchor;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_anchor = c_anchorBottomLeft;

    // Implementation
    lv_y = IntToFixed(DialogControlGetOffsetY(lp_dialogItem, lp_player));
    if ((DialogControlGetRelativeControl(lp_dialogItem, lp_player) == c_invalidDialogControlId)) {
        lv_anchor = DialogControlGetAnchor(lp_dialogItem, lp_player);
        if (((lv_anchor == c_anchorTopLeft) || (lv_anchor == c_anchorTopRight) || (lv_anchor == c_anchorBottomLeft) || (lv_anchor == c_anchorBottomRight) || (lv_anchor == c_anchorTop) || (lv_anchor == c_anchorBottom))) {
            lv_y -= libCamp_gv_gRIDDLG_MARGINE_Y;
        }
    }

    return libCamp_gf_GD_RealToGrid(lv_y, libCamp_ge_GRIDDLG_HV_Vertical, libCamp_ge_GRIDDLG_HV2_ClientPosition);
}

void libCamp_gf_CreateDialogInGrid (fixed lp_width, fixed lp_height, int lp_anchor, fixed lp_offsetX, fixed lp_offsetY, bool lp_modal) {
    // Variable Declarations
    fixed lv_w;
    fixed lv_h;
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_w = libCamp_gf_GD_GridToReal(lp_width, libCamp_ge_GRIDDLG_HV_Horizontal, libCamp_ge_GRIDDLG_HV2_ClientSize);
    lv_w += (2.0 * libCamp_gv_gRIDDLG_MARGINE_X);
    lv_h = libCamp_gf_GD_GridToReal(lp_height, libCamp_ge_GRIDDLG_HV_Vertical, libCamp_ge_GRIDDLG_HV2_ClientSize);
    lv_h += (2.0 * libCamp_gv_gRIDDLG_MARGINE_Y);
    lv_x = libCamp_gf_GD_GridToInteger(lp_offsetX, libCamp_ge_GRIDDLG_HV_Horizontal, libCamp_ge_GRIDDLG_HV2_NoneClient);
    lv_y = libCamp_gf_GD_GridToInteger(lp_offsetY, libCamp_ge_GRIDDLG_HV_Vertical, libCamp_ge_GRIDDLG_HV2_NoneClient);
    DialogCreate(FixedToInt(lv_w), FixedToInt(lv_h), lp_anchor, lv_x, lv_y, lp_modal);
}

void libCamp_gf_MoveDialogInGrid (int lp_dialog, int lp_anchor, fixed lp_offsetX, fixed lp_offsetY) {
    // Variable Declarations
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_x = libCamp_gf_GD_GridToInteger(lp_offsetX, libCamp_ge_GRIDDLG_HV_Horizontal, libCamp_ge_GRIDDLG_HV2_NoneClient);
    lv_y = libCamp_gf_GD_GridToInteger(lp_offsetY, libCamp_ge_GRIDDLG_HV_Vertical, libCamp_ge_GRIDDLG_HV2_NoneClient);
    DialogSetPosition(lp_dialog, lp_anchor, lv_x, lv_y);
}

void libCamp_gf_MoveDialogInGridRelative (int lp_dialog, int lp_anchor, int lp_relativeDialog, int lp_relativeAnchor, fixed lp_offsetX, fixed lp_offsetY) {
    // Variable Declarations
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_x = libCamp_gf_GD_GridToInteger(lp_offsetX, libCamp_ge_GRIDDLG_HV_Horizontal, libCamp_ge_GRIDDLG_HV2_NoneClient);
    lv_y = libCamp_gf_GD_GridToInteger(lp_offsetY, libCamp_ge_GRIDDLG_HV_Vertical, libCamp_ge_GRIDDLG_HV2_NoneClient);
    DialogSetPositionRelative(lp_dialog, lp_anchor, lp_relativeDialog, lp_relativeAnchor, lv_x, lv_y);
}

void libCamp_gf_SetDialogSizeInGrid (int lp_dialog, fixed lp_width, fixed lp_height) {
    // Variable Declarations
    fixed lv_w;
    fixed lv_h;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_w = libCamp_gf_GD_GridToReal(lp_width, libCamp_ge_GRIDDLG_HV_Horizontal, libCamp_ge_GRIDDLG_HV2_ClientSize);
    lv_w += (2.0 * libCamp_gv_gRIDDLG_MARGINE_X);
    lv_h = libCamp_gf_GD_GridToReal(lp_height, libCamp_ge_GRIDDLG_HV_Vertical, libCamp_ge_GRIDDLG_HV2_ClientSize);
    lv_h += (2.0 * libCamp_gv_gRIDDLG_MARGINE_Y);
    DialogSetSize(lp_dialog, FixedToInt(lv_w), FixedToInt(lv_h));
}

void libCamp_gf_CreateDialogItemInGrid (int lp_dialog, int lp_type, int lp_anchor, fixed lp_offsetX, fixed lp_offsetY, fixed lp_width, fixed lp_height, text lp_label) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlCreate(lp_dialog, lp_type);
    libCamp_gf_SetDialogItemSizeInGrid(DialogControlLastCreated(), PlayerGroupAll(), lp_width, lp_height);
    libCamp_gf_MoveDialogItemInGrid(DialogControlLastCreated(), PlayerGroupAll(), lp_anchor, lp_offsetX, lp_offsetY);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lp_label, PlayerGroupAll());
}

void libCamp_gf_MoveDialogItemInGrid (int lp_dialogItem, playergroup lp_players, int lp_anchor, fixed lp_offsetX, fixed lp_offsetY) {
    // Variable Declarations
    fixed lv_x;
    fixed lv_y;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_x = libCamp_gf_GD_GridToReal(lp_offsetX, libCamp_ge_GRIDDLG_HV_Horizontal, libCamp_ge_GRIDDLG_HV2_ClientPosition);
    lv_y = libCamp_gf_GD_GridToReal(lp_offsetY, libCamp_ge_GRIDDLG_HV_Vertical, libCamp_ge_GRIDDLG_HV2_ClientPosition);
    if (((lp_anchor == c_anchorTopLeft) || (lp_anchor == c_anchorTopRight) || (lp_anchor == c_anchorBottomLeft) || (lp_anchor == c_anchorBottomRight))) {
        lv_x += libCamp_gv_gRIDDLG_MARGINE_X;
        lv_y += libCamp_gv_gRIDDLG_MARGINE_Y;
    }
    else if (((lp_anchor == c_anchorLeft) || (lp_anchor == c_anchorRight))) {
        lv_x += libCamp_gv_gRIDDLG_MARGINE_X;
    }
    else if (((lp_anchor == c_anchorTop) || (lp_anchor == c_anchorBottom))) {
        lv_y += libCamp_gv_gRIDDLG_MARGINE_Y;
    }
    DialogControlSetPosition(lp_dialogItem, PlayerGroupAll(), lp_anchor, FixedToInt(lv_x), FixedToInt(lv_y));
}

void libCamp_gf_MoveDialogItemInGridRelative (int lp_item, playergroup lp_players, int lp_anchor, int lp_relativeItem, int lp_relativeAnchor, fixed lp_offsetX, fixed lp_offsetY) {
    // Variable Declarations
    fixed lv_x;
    fixed lv_y;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_x = libCamp_gf_GD_GridToReal(lp_offsetX, libCamp_ge_GRIDDLG_HV_Horizontal, libCamp_ge_GRIDDLG_HV2_ClientPosition);
    lv_y = libCamp_gf_GD_GridToReal(lp_offsetY, libCamp_ge_GRIDDLG_HV_Vertical, libCamp_ge_GRIDDLG_HV2_ClientPosition);
    DialogControlSetPositionRelative(lp_item, PlayerGroupAll(), lp_anchor, lp_relativeItem, lp_relativeAnchor, FixedToInt(lp_offsetX), FixedToInt(lp_offsetY));
}

void libCamp_gf_SetDialogItemSizeInGrid (int lp_dialogItem, playergroup lp_players, fixed lp_width, fixed lp_height) {
    // Variable Declarations
    int lv_w;
    int lv_h;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_w = libCamp_gf_GD_GridToInteger(lp_width, libCamp_ge_GRIDDLG_HV_Horizontal, libCamp_ge_GRIDDLG_HV2_ClientSize);
    lv_h = libCamp_gf_GD_GridToInteger(lp_height, libCamp_ge_GRIDDLG_HV_Vertical, libCamp_ge_GRIDDLG_HV2_ClientSize);
    DialogControlSetSize(lp_dialogItem, PlayerGroupAll(), lv_w, lv_h);
}

void libCamp_gf_DisplayMessageDialog (text lp_title, string lp_titleStyle, text lp_body1, string lp_bodyStyle1, text lp_body2, string lp_bodyStyle2, int lp_width, int lp_height, text lp_buttonText) {
    // Variable Declarations
    int lv_titleItem;
    int lv_textWidth;
    int lv_bodyItem1;
    int lv_bodyItem2;
    const int lv_buttonHeight = 55;
    const int lv_titleHeight = 60;
    int lv_bodyHeight;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_titleItem = c_invalidDialogControlId;
    lv_textWidth = (lp_width - 80);
    lv_bodyItem1 = c_invalidDialogControlId;
    lv_bodyItem2 = c_invalidDialogControlId;
    lv_bodyHeight = lp_height;

    // Implementation
    DialogCreate(lp_width, lp_height, c_anchorCenter, 0, 0, true);
    libCamp_gv__MsgDlg = DialogLastCreated();
    DialogSetImage(DialogLastCreated(), "Assets\\Textures\\ui_protoss_glass_stroke.dds");
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(6.27, 14.51, 24.71), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), (lp_width - 10), (lp_height - 10));
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 1);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    libCamp_gv__MsgDlgButton = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 180, lv_buttonHeight);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lp_buttonText, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, 0, 35);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    lv_titleItem = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_textWidth, lv_titleHeight);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lp_title, PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), lp_titleStyle, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 0, 45);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    lv_bodyItem1 = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_textWidth, lv_bodyHeight);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lp_body1, PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), lp_bodyStyle1, PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, lv_titleItem, c_anchorBottom, 0, 5);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    lv_bodyItem2 = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_textWidth, lv_bodyHeight);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lp_body2, PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), lp_bodyStyle2, PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, libCamp_gv__MsgDlgButton, c_anchorTop, 0, -15);
    libCamp_gv__MsgDlgOpened = true;
    TriggerEnable(libCamp_gt__MsgDlgButtonClicked, true);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    while (!((libCamp_gv__MsgDlgOpened == false))) {
        Wait(0.3, c_timeReal);
    }
}

text libCamp_gf_FormatTimeCampaign (int lp_second) {
    // Variable Declarations
    int lv_h;
    int lv_m;
    int lv_s;
    text lv_result;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_result = StringToText("");

    // Implementation
    lv_h = (lp_second / 3600);
    lv_m = ModI((lp_second / 60), 60);
    lv_s = ModI(lp_second, 60);
    lv_result = IntToText(lv_s);
    if ((lv_s < 10)) {
        lv_result = (StringExternal("Param/Value/lib_Camp_3A82E671") + lv_result);
    }

    lv_result = (IntToText(lv_m) + StringExternal("Param/Value/lib_Camp_46321341") + lv_result);
    if ((lv_m < 10) && (lv_h > 0)) {
        lv_result = (StringExternal("Param/Value/lib_Camp_5590F086") + lv_result);
    }

    if ((lv_h > 0)) {
        lv_result = (IntToText(lv_h) + StringExternal("Param/Value/lib_Camp_F6FE8D84") + lv_result);
        if ((lv_h < 10)) {
            lv_result = (StringExternal("Param/Value/lib_Camp_FC74FA13") + lv_result);
        }

    }

    return lv_result;
}

void libCamp_gf_ZS_DisplayCampaignTrialDialog (bool lp_showBackground) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    if ((libCamp_gv_zS_CampaignTrialEndDialog == c_invalidDialogId)) {
        DialogCreate(1000, 600, c_anchorCenter, 0, 0, true);
        libCamp_gv_zS_CampaignTrialEndDialog = DialogLastCreated();
        DialogSetImageVisible(DialogLastCreated(), false);
        DialogSetFullscreen(DialogLastCreated(), true);
        DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "CampaignTrialDialog/CampaignTrialDialogTemplate");
        libCamp_gv_zS_CampaignTrialEndPanel = DialogControlLastCreated();
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
        DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
        DialogControlHookup(libCamp_gv_zS_CampaignTrialEndPanel, c_triggerControlTypeButton, "UpgradeButton");
        libCamp_gv_zS_CampaignTrialEndUpgradeButton = DialogControlLastCreated();
        DialogControlHookup(libCamp_gv_zS_CampaignTrialEndPanel, c_triggerControlTypeButton, "ContinueButton");
        libCamp_gv_zS_CampaignTrialEndQuitButton = DialogControlLastCreated();
    }

    DialogSetVisible(libCamp_gv_zS_CampaignTrialEndDialog, PlayerGroupAll(), true);
    TriggerEnable(libCamp_gt_ZS_CampaignTrialDialogQuitClicked, true);
    TriggerEnable(libCamp_gt_ZS_CampaignTrialDialogUpgradeClicked, true);
}

void libCamp_gf_ZS_CloseCampaignTrialDialog () {
    // Automatic Variable Declarations
    // Implementation
    TriggerEnable(libCamp_gt_ZS_CampaignTrialDialogQuitClicked, false);
    TriggerEnable(libCamp_gt_ZS_CampaignTrialDialogUpgradeClicked, false);
    if ((libCamp_gv_zS_CampaignTrialEndDialog != c_invalidDialogId)) {
        DialogSetVisible(libCamp_gv_zS_CampaignTrialEndDialog, PlayerGroupAll(), false);
    }

}

bool libCamp_gf_ZS_TrialEnd () {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerHasLicense(1, c_playerLicenseLibertyFull) == false) && (libCamp_gf_NumberOfMissions(libCamp_ge_MissionCountOptions_Completed) >= 4)) {
        return true;
    }

    return false;
}

void libCamp_gf_TS_InitializeMapAchievementDataSingle (int lp_map, string lp_achievement1, string lp_achievement2, string lp_achievement3, string lp_achievement4) {
    // Automatic Variable Declarations
    // Implementation
    libCamp_gv_tS_MapAchievements[(lp_map)][1] = lp_achievement1;
    libCamp_gv_tS_MapAchievements[(lp_map)][2] = lp_achievement2;
    libCamp_gv_tS_MapAchievements[(lp_map)][3] = lp_achievement3;
    libCamp_gv_tS_MapAchievements[(lp_map)][4] = lp_achievement4;
}

void libCamp_gf_TS_InitializeMapAchievementData () {
    // Variable Declarations
    string lv_defaultAchievement;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libCamp_gf_TS_InitializeMapAchievementDataSingle(libCamp_ge_MapID_MapTStory01, "TStory01_9", "TStory01_10", "TStory01_10", "TStory01_11");
    libCamp_gf_TS_InitializeMapAchievementDataSingle(libCamp_ge_MapID_MapTArcade, "TStory01_13", "LostVikingBronze", "LostVikingGold", "LostVikingSilver");
    libCamp_gf_TS_InitializeMapAchievementDataSingle(libCamp_ge_MapID_MapTRaynor01, "TRaynor01_1", "TRaynor01_2", "TRaynor01_3", null);
    libCamp_gf_TS_InitializeMapAchievementDataSingle(libCamp_ge_MapID_MapTRaynor02, "TRaynor02_1", "TRaynor02_2", "TRaynor02_3", null);
    libCamp_gf_TS_InitializeMapAchievementDataSingle(libCamp_ge_MapID_MapTRaynor03, "TRaynor03_1", "TRaynor03_2", "TRaynor03_3", null);
    libCamp_gf_TS_InitializeMapAchievementDataSingle(libCamp_ge_MapID_MapTHanson01, "THanson01_1", "THanson01_2", "THanson01_3", null);
    libCamp_gf_TS_InitializeMapAchievementDataSingle(libCamp_ge_MapID_MapTHanson02, "THanson02_1", "THanson02_2", "THanson02_3", null);
    libCamp_gf_TS_InitializeMapAchievementDataSingle(libCamp_ge_MapID_MapTHanson03A, "THanson03A_1", "THanson03A_2", "THanson03A_3", null);
    libCamp_gf_TS_InitializeMapAchievementDataSingle(libCamp_ge_MapID_MapTHanson03B, "THanson03B_1", "THanson03B_2", "THanson03B_3", null);
    libCamp_gf_TS_InitializeMapAchievementDataSingle(libCamp_ge_MapID_MapTHorner01, "THorner01_1", "THorner01_2", "THorner01_3", null);
    libCamp_gf_TS_InitializeMapAchievementDataSingle(libCamp_ge_MapID_MapTHorner02, "THorner02_1", "THorner02_2", "THorner02_3", null);
    libCamp_gf_TS_InitializeMapAchievementDataSingle(libCamp_ge_MapID_MapTHorner03, "THorner03_1", "THorner03_2", "THorner03_3", null);
    libCamp_gf_TS_InitializeMapAchievementDataSingle(libCamp_ge_MapID_MapTHorner04, "THorner04_1", "THorner04_2", "THorner04_3", null);
    libCamp_gf_TS_InitializeMapAchievementDataSingle(libCamp_ge_MapID_MapTHorner05S, "THorner05_1", "THorner05_3", "THorner05_2", null);
    libCamp_gf_TS_InitializeMapAchievementDataSingle(libCamp_ge_MapID_MapTTosh01, "TTosh01_1", "TTosh01_2", "TTosh01_3", null);
    libCamp_gf_TS_InitializeMapAchievementDataSingle(libCamp_ge_MapID_MapTTosh02, "TTosh02_1", "TTosh02_2", "TTosh02_3", null);
    libCamp_gf_TS_InitializeMapAchievementDataSingle(libCamp_ge_MapID_MapTTosh03A, "TTosh03A_1", "TTosh03A_2", "TTosh03A_3", null);
    libCamp_gf_TS_InitializeMapAchievementDataSingle(libCamp_ge_MapID_MapTTosh03B, "TTosh03B_1", "TTosh03B_2", "TTosh03B_3", null);
    libCamp_gf_TS_InitializeMapAchievementDataSingle(libCamp_ge_MapID_MapTTychus01, "TTychus01_1", "TTychus01_2", "TTychus01_3", null);
    libCamp_gf_TS_InitializeMapAchievementDataSingle(libCamp_ge_MapID_MapTTychus02, "TTychus02_1", "TTychus02_2", "TTychus02_3", null);
    libCamp_gf_TS_InitializeMapAchievementDataSingle(libCamp_ge_MapID_MapTTychus03, "TTychus03_1", "TTychus03_2", "TTychus03_3", null);
    libCamp_gf_TS_InitializeMapAchievementDataSingle(libCamp_ge_MapID_MapTTychus04, "TTychus04_1", "TTychus04_2", "TTychus04_3", null);
    libCamp_gf_TS_InitializeMapAchievementDataSingle(libCamp_ge_MapID_MapTTychus05, "TTychus05_1", "TTychus05_2", "TTychus05_3", null);
    libCamp_gf_TS_InitializeMapAchievementDataSingle(libCamp_ge_MapID_MapTValerian01, "TValerian01_1", "TValerian01_2", "TValerian01_3", null);
    libCamp_gf_TS_InitializeMapAchievementDataSingle(libCamp_ge_MapID_MapTValerian02A, "TValerian02A_1", "TValerian02A_2", "TValerian02A_3", null);
    libCamp_gf_TS_InitializeMapAchievementDataSingle(libCamp_ge_MapID_MapTValerian02B, "TValerian02B_1", "TValerian02B_2", "TValerian02B_3", null);
    libCamp_gf_TS_InitializeMapAchievementDataSingle(libCamp_ge_MapID_MapTValerian03, "TValerian03_1", "TValerian03_2", "TValerian03_3", null);
    libCamp_gf_TS_InitializeMapAchievementDataSingle(libCamp_ge_MapID_MapTZeratul01, "TZeratul01_1", "TZeratul01_2", "TZeratul01_3", null);
    libCamp_gf_TS_InitializeMapAchievementDataSingle(libCamp_ge_MapID_MapTZeratul02, "TZeratul02_1", "TZeratul02_2", "TZeratul02_3", null);
    libCamp_gf_TS_InitializeMapAchievementDataSingle(libCamp_ge_MapID_MapTZeratul03, "TZeratul03_1", "TZeratul03_2", "TZeratul03_3", null);
    libCamp_gf_TS_InitializeMapAchievementDataSingle(libCamp_ge_MapID_MapTZeratul04, "TZeratul04_1", "TZeratul04_2", "TZeratul04_3", null);
    if ((libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapNone)) {
        return ;
    }

    lv_defaultAchievement = libCamp_gv_tS_MapAchievements[(libCamp_gv_tS_CurrentMap)][1];
    if ((lv_defaultAchievement != null)) {
        AchievementPanelSetCategory(PlayerGroupAll(), lv_defaultAchievement);
    }

}

int libCamp_gf_TS_CampaignMissionShortestTime () {
    // Variable Declarations
    int lv_indexMission;
    int lv_time;
    int lv_timeSingle;

    // Automatic Variable Declarations
    int auto61978BC2_i;
    int autoABE444FE_i;

    // Variable Initialization
    lv_indexMission = libCamp_ge_MapID_MapNone;

    // Implementation
    if ((libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTValerian03, libCamp_ge_MissionStatus_Completed) == false)) {
        return 0;
    }

    auto61978BC2_i = libCamp_gv_TSC_MISSION_FIRST;
    while (auto61978BC2_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[auto61978BC2_i];
        if ((libCamp_gf_MissionDifficultyCompleted(lv_indexMission, 1) == true) && (libCamp_gf_MissionDifficultyCompleted(lv_indexMission, 2) == false) && (libCamp_gf_MissionDifficultyCompleted(lv_indexMission, 3) == false) && (libCamp_gf_MissionDifficultyCompleted(lv_indexMission, 4) == false)) {
            return 0;
        }

        auto61978BC2_i = auto61978BC2_i + 1;
    }
    autoABE444FE_i = libCamp_gv_TSC_MISSION_FIRST;
    while (autoABE444FE_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[autoABE444FE_i];
        lv_timeSingle = 0;
        if ((libCamp_gf_MissionDifficultyCompleted(lv_indexMission, 2) == true)) {
            lv_timeSingle = libCamp_gf_MissionCompleteBestTime(lv_indexMission, 2);
        }

        if ((libCamp_gf_MissionDifficultyCompleted(lv_indexMission, 3) == true) && ((lv_timeSingle <= 0) || (libCamp_gf_MissionCompleteBestTime(lv_indexMission, 3) < lv_timeSingle))) {
            lv_timeSingle = libCamp_gf_MissionCompleteBestTime(lv_indexMission, 3);
        }

        if ((libCamp_gf_MissionDifficultyCompleted(lv_indexMission, 4) == true) && ((lv_timeSingle <= 0) || (libCamp_gf_MissionCompleteBestTime(lv_indexMission, 4) < lv_timeSingle))) {
            lv_timeSingle = libCamp_gf_MissionCompleteBestTime(lv_indexMission, 4);
        }

        lv_time += lv_timeSingle;
        autoABE444FE_i = autoABE444FE_i + 1;
    }
    return lv_time;
}

int libCamp_gf_TS_MissionCompletionCountOnDifficulty (int lp_difficulty) {
    // Variable Declarations
    int lv_indexMission;
    int lv_count;

    // Automatic Variable Declarations
    int autoEDDE5D9A_i;

    // Variable Initialization
    lv_indexMission = libCamp_ge_MapID_MapNone;

    // Implementation
    autoEDDE5D9A_i = libCamp_gv_TSC_MISSION_FIRST;
    while (autoEDDE5D9A_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[autoEDDE5D9A_i];
        if ((libCamp_gf_MissionDifficultyCompleted(lv_indexMission, 4) == true) && (libCamp_gf_TS_MissionDifficultyComparison(4, lp_difficulty) >= 0)) {
            lv_count += 1;
        }
        else if ((libCamp_gf_MissionDifficultyCompleted(lv_indexMission, 3) == true) && (libCamp_gf_TS_MissionDifficultyComparison(3, lp_difficulty) >= 0)) {
            lv_count += 1;
        }
        else if ((libCamp_gf_MissionDifficultyCompleted(lv_indexMission, 2) == true) && (libCamp_gf_TS_MissionDifficultyComparison(2, lp_difficulty) >= 0)) {
            lv_count += 1;
        }
        else if ((libCamp_gf_MissionDifficultyCompleted(lv_indexMission, 1) == true) && (libCamp_gf_TS_MissionDifficultyComparison(1, lp_difficulty) >= 0)) {
            lv_count += 1;
        }
        autoEDDE5D9A_i = autoEDDE5D9A_i + 1;
    }
    return lv_count;
}

int libCamp_gf_TS_MissionDifficultyComparison (int lp_difficulty1, int lp_difficulty2) {
    // Variable Declarations
    int lv_value1;
    int lv_value2;

    // Automatic Variable Declarations
    int auto6A4CF7F4_val;
    int auto71E86CC4_val;

    // Variable Initialization

    // Implementation
    auto6A4CF7F4_val = lp_difficulty1;
    if (auto6A4CF7F4_val == 1) {
        lv_value1 = 1;
    }
    else if (auto6A4CF7F4_val == 2) {
        lv_value1 = 2;
    }
    else if (auto6A4CF7F4_val == 3) {
        lv_value1 = 3;
    }
    else if (auto6A4CF7F4_val == 4) {
        lv_value1 = 4;
    }
    else {
        lv_value1 = 0;
    }
    auto71E86CC4_val = lp_difficulty2;
    if (auto71E86CC4_val == 1) {
        lv_value2 = 1;
    }
    else if (auto71E86CC4_val == 2) {
        lv_value2 = 2;
    }
    else if (auto71E86CC4_val == 3) {
        lv_value2 = 3;
    }
    else if (auto71E86CC4_val == 4) {
        lv_value2 = 4;
    }
    else {
        lv_value2 = 0;
    }
    if ((lv_value1 > lv_value2)) {
        return 1;
    }

    if ((lv_value1 < lv_value2)) {
        return -1;
    }

    return 0;
}

void libCamp_gf_TS_CheckAchievementUnlocking () {
    // Variable Declarations
    int lv_indexMission;
    bool lv_unlock;
    int lv_count;
    int lv_time;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_indexMission = libCamp_ge_MapID_MapNone;

    // Implementation
    if ((libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTValerian03, libCamp_ge_MissionStatus_Completed) == true)) {
        AchievementAward(1, "WingsofLiberty");
    }

    lv_count = libCamp_gf_TS_MissionCompletionCountOnDifficulty(2);
    lv_count = libCamp_gf_TS_MissionCompletionCountOnDifficulty(3);
    AchievementTermQuantitySet(1, "WingsofLibertyHard5", lv_count);
    AchievementTermQuantitySet(1, "WingsofLibertyHard10", lv_count);
    AchievementTermQuantitySet(1, "WingsofLibertyHard15", lv_count);
    AchievementTermQuantitySet(1, "WingsofLibertyHard20", lv_count);
    AchievementTermQuantitySet(1, "WingsofLibertyHard25", lv_count);
    lv_count = libCamp_gf_TS_MissionCompletionCountOnDifficulty(4);
    AchievementTermQuantitySet(1, "WingsofLibertyBrutal5", lv_count);
    AchievementTermQuantitySet(1, "WingsofLibertyBrutal10", lv_count);
    AchievementTermQuantitySet(1, "WingsofLibertyBrutal15", lv_count);
    AchievementTermQuantitySet(1, "WingsofLibertyBrutal20", lv_count);
    AchievementTermQuantitySet(1, "WingsofLibertyBrutal25", lv_count);
    if ((libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTRaynor03, libCamp_ge_MissionStatus_Completed) == true)) {
        AchievementAward(1, "MarSaraMissions");
    }

    if (((libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTHanson03A, libCamp_ge_MissionStatus_Completed) == true) || (libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTHanson03B, libCamp_ge_MissionStatus_Completed) == true))) {
        AchievementAward(1, "DrArielHansonMissions");
    }

    if (((libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTTosh03A, libCamp_ge_MissionStatus_Completed) == true) || (libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTTosh03B, libCamp_ge_MissionStatus_Completed) == true))) {
        AchievementAward(1, "GabrielToshMissions");
    }

    if ((libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTHorner04, libCamp_ge_MissionStatus_Completed) == true)) {
        AchievementAward(1, "MattHornerMissions");
    }

    if ((libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTZeratul04, libCamp_ge_MissionStatus_Completed) == true)) {
        AchievementAward(1, "ZeratulMissions");
    }

    lv_time = libCamp_gf_TS_CampaignMissionShortestTime();
    if ((lv_time > 0) && (lv_time <= (8 * 3600))) {
        AchievementAward(1, "HurryUpItsRaidNight");
    }

    if ((libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTRaynor02, libCamp_ge_MissionStatus_Completed) == true)) {
        AchievementTermQuantitySet(1, "TheArtifact", 1);
    }

    if ((libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTTychus01, libCamp_ge_MissionStatus_Completed) == true)) {
        AchievementTermQuantitySet(1, "TheArtifact", 2);
    }

    if ((libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTTychus02, libCamp_ge_MissionStatus_Completed) == true)) {
        AchievementTermQuantitySet(1, "TheArtifact", 3);
    }

    if ((libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTTychus04, libCamp_ge_MissionStatus_Completed) == true)) {
        AchievementTermQuantitySet(1, "TheArtifact", 4);
    }

    if ((libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTTychus05, libCamp_ge_MissionStatus_Completed) == true)) {
        AchievementTermQuantitySet(1, "TheArtifact", 5);
    }

    libCamp_gf_TS_CompletionistCheck(libCamp_ge_MapID_MapTRaynor01, "LibertyCompletionistNormal_01", "LibertyCompletionistHard_01", "LibertyCompletionistBrutal_01");
    libCamp_gf_TS_CompletionistCheck(libCamp_ge_MapID_MapTRaynor02, "LibertyCompletionistNormal_02", "LibertyCompletionistHard_02", "LibertyCompletionistBrutal_02");
    libCamp_gf_TS_CompletionistCheck(libCamp_ge_MapID_MapTRaynor03, "LibertyCompletionistNormal_03", "LibertyCompletionistHard_03", "LibertyCompletionistBrutal_03");
    libCamp_gf_TS_CompletionistCheck(libCamp_ge_MapID_MapTHanson01, "LibertyCompletionistNormal_04", "LibertyCompletionistHard_04", "LibertyCompletionistBrutal_04");
    libCamp_gf_TS_CompletionistCheck(libCamp_ge_MapID_MapTHanson02, "LibertyCompletionistNormal_05", "LibertyCompletionistHard_05", "LibertyCompletionistBrutal_05");
    libCamp_gf_TS_CompletionistCheck(libCamp_ge_MapID_MapTHanson03A, "LibertyCompletionistNormal_06", "LibertyCompletionistHard_06", "LibertyCompletionistBrutal_06");
    libCamp_gf_TS_CompletionistCheck(libCamp_ge_MapID_MapTHanson03B, "LibertyCompletionistNormal_07", "LibertyCompletionistHard_07", "LibertyCompletionistBrutal_07");
    libCamp_gf_TS_CompletionistCheck(libCamp_ge_MapID_MapTHorner01, "LibertyCompletionistNormal_12", "LibertyCompletionistHard_12", "LibertyCompletionistBrutal_12");
    libCamp_gf_TS_CompletionistCheck(libCamp_ge_MapID_MapTHorner02, "LibertyCompletionistNormal_13", "LibertyCompletionistHard_13", "LibertyCompletionistBrutal_13");
    libCamp_gf_TS_CompletionistCheck(libCamp_ge_MapID_MapTHorner03, "LibertyCompletionistNormal_14", "LibertyCompletionistHard_14", "LibertyCompletionistBrutal_14");
    libCamp_gf_TS_CompletionistCheck(libCamp_ge_MapID_MapTHorner04, "LibertyCompletionistNormal_15", "LibertyCompletionistHard_15", "LibertyCompletionistBrutal_15");
    libCamp_gf_TS_CompletionistCheck(libCamp_ge_MapID_MapTHorner05S, "LibertyCompletionistNormal_16", "LibertyCompletionistHard_16", "LibertyCompletionistBrutal_16");
    libCamp_gf_TS_CompletionistCheck(libCamp_ge_MapID_MapTTosh01, "LibertyCompletionistNormal_08", "LibertyCompletionistHard_08", "LibertyCompletionistBrutal_08");
    libCamp_gf_TS_CompletionistCheck(libCamp_ge_MapID_MapTTosh02, "LibertyCompletionistNormal_09", "LibertyCompletionistHard_09", "LibertyCompletionistBrutal_09");
    libCamp_gf_TS_CompletionistCheck(libCamp_ge_MapID_MapTTosh03A, "LibertyCompletionistNormal_10", "LibertyCompletionistHard_10", "LibertyCompletionistBrutal_10");
    libCamp_gf_TS_CompletionistCheck(libCamp_ge_MapID_MapTTosh03B, "LibertyCompletionistNormal_11", "LibertyCompletionistHard_11", "LibertyCompletionistBrutal_11");
    libCamp_gf_TS_CompletionistCheck(libCamp_ge_MapID_MapTTychus01, "LibertyCompletionistNormal_21", "LibertyCompletionistHard_21", "LibertyCompletionistBrutal_21");
    libCamp_gf_TS_CompletionistCheck(libCamp_ge_MapID_MapTTychus02, "LibertyCompletionistNormal_22", "LibertyCompletionistHard_22", "LibertyCompletionistBrutal_22");
    libCamp_gf_TS_CompletionistCheck(libCamp_ge_MapID_MapTTychus03, "LibertyCompletionistNormal_23", "LibertyCompletionistHard_23", "LibertyCompletionistBrutal_23");
    libCamp_gf_TS_CompletionistCheck(libCamp_ge_MapID_MapTTychus04, "LibertyCompletionistNormal_24", "LibertyCompletionistHard_24", "LibertyCompletionistBrutal_24");
    libCamp_gf_TS_CompletionistCheck(libCamp_ge_MapID_MapTTychus05, "LibertyCompletionistNormal_25", "LibertyCompletionistHard_25", "LibertyCompletionistBrutal_25");
    libCamp_gf_TS_CompletionistCheck(libCamp_ge_MapID_MapTValerian01, "LibertyCompletionistNormal_26", "LibertyCompletionistHard_26", "LibertyCompletionistBrutal_26");
    libCamp_gf_TS_CompletionistCheck(libCamp_ge_MapID_MapTValerian02A, "LibertyCompletionistNormal_27", "LibertyCompletionistHard_27", "LibertyCompletionistBrutal_27");
    libCamp_gf_TS_CompletionistCheck(libCamp_ge_MapID_MapTValerian02B, "LibertyCompletionistNormal_28", "LibertyCompletionistHard_28", "LibertyCompletionistBrutal_28");
    libCamp_gf_TS_CompletionistCheck(libCamp_ge_MapID_MapTValerian03, "LibertyCompletionistNormal_29", "LibertyCompletionistHard_29", "LibertyCompletionistBrutal_29");
    libCamp_gf_TS_CompletionistCheck(libCamp_ge_MapID_MapTZeratul01, "LibertyCompletionistNormal_17", "LibertyCompletionistHard_17", "LibertyCompletionistBrutal_17");
    libCamp_gf_TS_CompletionistCheck(libCamp_ge_MapID_MapTZeratul02, "LibertyCompletionistNormal_18", "LibertyCompletionistHard_18", "LibertyCompletionistBrutal_18");
    libCamp_gf_TS_CompletionistCheck(libCamp_ge_MapID_MapTZeratul03, "LibertyCompletionistNormal_19", "LibertyCompletionistHard_19", "LibertyCompletionistBrutal_19");
    libCamp_gf_TS_CompletionistCheck(libCamp_ge_MapID_MapTZeratul04, "LibertyCompletionistNormal_20", "LibertyCompletionistHard_20", "LibertyCompletionistBrutal_20");
}

void libCamp_gf_TS_CompletionistCheck (int lp_map, string lp_normal, string lp_hard, string lp_brutal) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCamp_gv_tS_CurrentMap == lp_map)) {
        if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1)) {
            AchievementTermQuantitySet(1, lp_normal, 1);
        }

        if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
            AchievementTermQuantitySet(1, lp_hard, 1);
        }

        if ((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1)) {
            AchievementTermQuantitySet(1, lp_brutal, 1);
        }

    }

}

void libCamp_gf_TS_UpdateCharacterSheepPanel () {
    // Variable Declarations
    int lv_index;
    int lv_indexTech;
    int lv_indexMerc;
    int lv_indexResearch;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_indexTech = libCamp_ge_StoryTech_StoryTechNone;
    lv_indexMerc = libCamp_ge_StoryMercID_MercNone;
    lv_indexResearch = libCamp_ge_StoryResearchID_ResearchNone;

    // Implementation
    CharacterSheetPanelSetPortraitModelLink(PlayerGroupAll(), libCamp_gf_ContactPortraitModel(libCamp_ge_ContactID_ContactRaynor));
    CharacterSheetPanelSetNameText(PlayerGroupAll(), StringExternal("Param/Value/lib_Camp_7B411DE2"));
}

void libCamp_gf_TS_AddRecentTech (int lp_tech) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto85D33835_ae = libCamp_gv_tS_RecentTechMax;
    const int auto85D33835_ai = 1;
    const int auto6C118211_ae = libCamp_gv_tS_RecentTechMax;
    const int auto6C118211_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (auto85D33835_ai >= 0 && lv_index <= auto85D33835_ae) || (auto85D33835_ai < 0 && lv_index >= auto85D33835_ae) ) ; lv_index += auto85D33835_ai ) {
        if ((libCamp_gv_tSX_RecentTech[lv_index] == libCamp_ge_StoryTech_StoryTechNone)) {
            libCamp_gv_tSX_RecentTech[lv_index] = lp_tech;
            libCamp_gf_TS_UpdateCharacterSheepPanel();
            return ;
        }

    }
    lv_index = 2;
    for ( ; ( (auto6C118211_ai >= 0 && lv_index <= auto6C118211_ae) || (auto6C118211_ai < 0 && lv_index >= auto6C118211_ae) ) ; lv_index += auto6C118211_ai ) {
        libCamp_gv_tSX_RecentTech[(lv_index - 1)] = libCamp_gv_tSX_RecentTech[lv_index];
    }
    libCamp_gv_tSX_RecentTech[libCamp_gv_tS_RecentTechMax] = lp_tech;
    libCamp_gf_TS_UpdateCharacterSheepPanel();
}

void libCamp_gf_TS_AddRecentMerc (int lp_merc) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto1978B64C_ae = libCamp_gv_tS_RecentMercMax;
    const int auto1978B64C_ai = 1;
    const int autoEF6DB6C7_ae = libCamp_gv_tS_RecentMercMax;
    const int autoEF6DB6C7_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (auto1978B64C_ai >= 0 && lv_index <= auto1978B64C_ae) || (auto1978B64C_ai < 0 && lv_index >= auto1978B64C_ae) ) ; lv_index += auto1978B64C_ai ) {
        if ((libCamp_gv_tSX_RecentMerc[lv_index] == libCamp_ge_StoryMercID_MercNone)) {
            libCamp_gv_tSX_RecentMerc[lv_index] = lp_merc;
            libCamp_gf_TS_UpdateCharacterSheepPanel();
            return ;
        }

    }
    lv_index = 2;
    for ( ; ( (autoEF6DB6C7_ai >= 0 && lv_index <= autoEF6DB6C7_ae) || (autoEF6DB6C7_ai < 0 && lv_index >= autoEF6DB6C7_ae) ) ; lv_index += autoEF6DB6C7_ai ) {
        libCamp_gv_tSX_RecentMerc[(lv_index - 1)] = libCamp_gv_tSX_RecentMerc[lv_index];
    }
    libCamp_gv_tSX_RecentMerc[libCamp_gv_tS_RecentMercMax] = lp_merc;
    libCamp_gf_TS_UpdateCharacterSheepPanel();
}

void libCamp_gf_TS_AddRecentResearch (int lp_research) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int autoF1FC96B4_ae = libCamp_gv_tS_RecentResearchMax;
    const int autoF1FC96B4_ai = 1;
    const int autoFD2908C3_ae = libCamp_gv_tS_RecentResearchMax;
    const int autoFD2908C3_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (autoF1FC96B4_ai >= 0 && lv_index <= autoF1FC96B4_ae) || (autoF1FC96B4_ai < 0 && lv_index >= autoF1FC96B4_ae) ) ; lv_index += autoF1FC96B4_ai ) {
        if ((libCamp_gv_tSX_RecentResearch[lv_index] == libCamp_ge_StoryResearchID_ResearchNone)) {
            libCamp_gv_tSX_RecentResearch[lv_index] = lp_research;
            libCamp_gf_TS_UpdateCharacterSheepPanel();
            return ;
        }

    }
    lv_index = 2;
    for ( ; ( (autoFD2908C3_ai >= 0 && lv_index <= autoFD2908C3_ae) || (autoFD2908C3_ai < 0 && lv_index >= autoFD2908C3_ae) ) ; lv_index += autoFD2908C3_ai ) {
        libCamp_gv_tSX_RecentResearch[(lv_index - 1)] = libCamp_gv_tSX_RecentResearch[lv_index];
    }
    libCamp_gv_tSX_RecentResearch[libCamp_gv_tS_RecentResearchMax] = lp_research;
    libCamp_gf_TS_UpdateCharacterSheepPanel();
}

void libCamp_gf_TS_ResetRecentlyPurchasedData () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int autoF0E28FCB_ae = libCamp_gv_tS_RecentTechMax;
    const int autoF0E28FCB_ai = 1;
    const int auto6218F18D_ae = libCamp_gv_tS_RecentMercMax;
    const int auto6218F18D_ai = 1;
    const int auto85841DC7_ae = libCamp_gv_tS_RecentResearchMax;
    const int auto85841DC7_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (autoF0E28FCB_ai >= 0 && lv_index <= autoF0E28FCB_ae) || (autoF0E28FCB_ai < 0 && lv_index >= autoF0E28FCB_ae) ) ; lv_index += autoF0E28FCB_ai ) {
        libCamp_gv_tSX_RecentTech[lv_index] = libCamp_ge_StoryTech_StoryTechNone;
    }
    lv_index = 1;
    for ( ; ( (auto6218F18D_ai >= 0 && lv_index <= auto6218F18D_ae) || (auto6218F18D_ai < 0 && lv_index >= auto6218F18D_ae) ) ; lv_index += auto6218F18D_ai ) {
        libCamp_gv_tSX_RecentMerc[lv_index] = libCamp_ge_StoryMercID_MercNone;
    }
    lv_index = 1;
    for ( ; ( (auto85841DC7_ai >= 0 && lv_index <= auto85841DC7_ae) || (auto85841DC7_ai < 0 && lv_index >= auto85841DC7_ae) ) ; lv_index += auto85841DC7_ai ) {
        libCamp_gv_tSX_RecentResearch[lv_index] = libCamp_ge_StoryResearchID_ResearchNone;
    }
}

void libCamp_gf_TS_InitizlizeStoryConversationSingle (string lp_conversation) {
    // Automatic Variable Declarations
    // Implementation
    libCamp_gv_tS_ConvoCount = (libCamp_gv_tS_ConvoCount + 1);
    libCamp_gv_tS_Convos[libCamp_gv_tS_ConvoCount] = lp_conversation;
}

void libCamp_gf_TS_InitizlizeStoryConversations () {
    // Automatic Variable Declarations
    // Implementation
    libCamp_gf_TS_InitizlizeStoryConversationSingle("ArmorySwann");
    libCamp_gf_TS_InitizlizeStoryConversationSingle("BridgeHanson");
    libCamp_gf_TS_InitizlizeStoryConversationSingle("BridgeHorner");
    libCamp_gf_TS_InitizlizeStoryConversationSingle("BridgeTosh");
    libCamp_gf_TS_InitizlizeStoryConversationSingle("BridgeTychus");
    libCamp_gf_TS_InitizlizeStoryConversationSingle("CantinafidgetsJukebox");
    libCamp_gf_TS_InitizlizeStoryConversationSingle("CantinaTosh");
    libCamp_gf_TS_InitizlizeStoryConversationSingle("CantinaTychus");
    libCamp_gf_TS_InitizlizeStoryConversationSingle("CharFidgetsArtifact");
    libCamp_gf_TS_InitizlizeStoryConversationSingle("CharTychus");
    libCamp_gf_TS_InitizlizeStoryConversationSingle("CharWarfield");
    libCamp_gf_TS_InitizlizeStoryConversationSingle("LabFidgetsAdjutant");
    libCamp_gf_TS_InitizlizeStoryConversationSingle("LabFidgetsArtifact");
    libCamp_gf_TS_InitizlizeStoryConversationSingle("LabHanson");
    libCamp_gf_TS_InitizlizeStoryConversationSingle("Labresearch");
    libCamp_gf_TS_InitizlizeStoryConversationSingle("MarSaraFidgetsArmyphoto");
    libCamp_gf_TS_InitizlizeStoryConversationSingle("MarSaraFidgetsBadge");
    libCamp_gf_TS_InitizlizeStoryConversationSingle("MarSaraFidgetsEvolutionofrevolution2");
    libCamp_gf_TS_InitizlizeStoryConversationSingle("MarSaraFidgetsFreedomposter");
    libCamp_gf_TS_InitizlizeStoryConversationSingle("MarSaraFidgetsHeavensDevils");
    libCamp_gf_TS_InitizlizeStoryConversationSingle("MarSaraFidgetsHydrahead");
    libCamp_gf_TS_InitizlizeStoryConversationSingle("MarSaraFidgetsHydrahunt");
    libCamp_gf_TS_InitizlizeStoryConversationSingle("MarSarafidgetsintro");
    libCamp_gf_TS_InitizlizeStoryConversationSingle("MarSaraFidgetsKerriganPhoto");
    libCamp_gf_TS_InitizlizeStoryConversationSingle("MarSaraFidgetsLocalhero2");
    libCamp_gf_TS_InitizlizeStoryConversationSingle("MarSaraFidgetsvikingphoto2");
    libCamp_gf_TS_InitizlizeStoryConversationSingle("MarSaraFidgetswantedposter");
    libCamp_gf_TS_InitizlizeStoryConversationSingle("MarSaraTychus");
    libCamp_gf_TS_InitizlizeStoryConversationSingle("Valerian");
}

string libCamp_gf_ContactPortraitModel (int lp_contactID) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tS_ContactPortrait[(lp_contactID)];
}

int libCamp_gf_CountMissions (int lp_status) {
    // Variable Declarations
    int lv_subtotal;
    int lv_map;

    // Automatic Variable Declarations
    int autoB06E88C4_i;

    // Variable Initialization
    lv_map = libCamp_ge_MapID_MapNone;

    // Implementation
    lv_subtotal = 0;
    autoB06E88C4_i = libCamp_gv_TSC_MISSION_FIRST;
    while (autoB06E88C4_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_map = libCamp_gv_tS_MapID[autoB06E88C4_i];
        if ((libCamp_gf_MissionStatusCheck(lv_map, lp_status) == true)) {
            lv_subtotal = (lv_subtotal + 1);
        }

        autoB06E88C4_i = autoB06E88C4_i + 1;
    }
    return lv_subtotal;
}

int libCamp_gf_LastMap () {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gf_TS_MapIDFromIndex(libCamp_gv_tSX_LastMap);
}

bool libCamp_gf_LastMapConditionCheck (int lp_condition) {
    // Automatic Variable Declarations
    int autoCCC0747B_val;

    // Implementation
    if ((libCamp_gf_MapTypeCheck(libCamp_gf_LastMap(), libCamp_ge_MapType_Mission) == true)) {
        return libCamp_gf_LastMissionConditionCheck(lp_condition);
    }

    autoCCC0747B_val = lp_condition;
    if (autoCCC0747B_val == libCamp_ge_MissionCondition_Successful) {
        return libCamp_gv_tSX_LastMapSuccess;
    }
    else {
    }
    return false;
}

int libCamp_gf_LastMission () {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gf_TS_MapIDFromIndex(libCamp_gv_tSX_LastMission);
}

bool libCamp_gf_LastMissionConditionCheck (int lp_condition) {
    // Automatic Variable Declarations
    int auto93D5F6CB_val;

    // Implementation
    auto93D5F6CB_val = lp_condition;
    if (auto93D5F6CB_val == libCamp_ge_MissionCondition_Successful) {
        return libCamp_gv_tSX_LastMissionSuccess;
    }
    else if (auto93D5F6CB_val == libCamp_ge_MissionCondition_Simulation) {
        return libCamp_gv_tSX_LastMissionSimulation;
    }
    else {
    }
    return false;
}

int libCamp_gf_LastSuccessfulMission () {
    // Variable Declarations
    int lv_mission;

    // Automatic Variable Declarations
    int auto06336F42_i;

    // Variable Initialization
    lv_mission = libCamp_ge_MapID_MapNone;

    // Implementation
    auto06336F42_i = libCamp_gv_TSC_MISSION_FIRST;
    while (auto06336F42_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_mission = libCamp_gv_tS_MapID[auto06336F42_i];
        if ((ConversationDataStateGetValue(ConversationDataStateIndex("MissionLast", (lv_mission))) == 1)) {
            return lv_mission;
        }

        auto06336F42_i = auto06336F42_i + 1;
    }
    return libCamp_ge_MapID_MapNone;
}

bool libCamp_gf_MapTypeCheck (int lp_mapId, int lp_mapType) {
    // Automatic Variable Declarations
    // Implementation
    return (libCamp_gv_tS_MapType[(lp_mapId)] == lp_mapType);
}

string libCamp_gf_MapFile (int lp_map) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tS_MapFile[(lp_map)];
}

trigger libCamp_gf_MissionBriefing (int lp_mapID) {
    // Variable Declarations
    int lv_mapIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_mapIndex = (lp_mapID);
    return libCamp_gv_tS_MissionBriefing[lv_mapIndex];
}

trigger libCamp_gf_MissionBriefingPreload (int lp_mapID) {
    // Variable Declarations
    int lv_mapIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_mapIndex = (lp_mapID);
    return libCamp_gv_tS_MissionBriefingPreload[lv_mapIndex];
}

trigger libCamp_gf_MissionBriefingRoughPreload (int lp_mapID) {
    // Variable Declarations
    int lv_mapIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_mapIndex = (lp_mapID);
    return libCamp_gv_tS_MissionBriefingPreloadRough[lv_mapIndex];
}

int libCamp_gf_MissionContact (int lp_mapID) {
    // Variable Declarations
    int lv_mapIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_mapIndex = (lp_mapID);
    return libCamp_gv_tS_MissionContact[lv_mapIndex];
}

int libCamp_gf_MissionPlanet (int lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tS_MissionLocation[(lp_mission)];
}

int libCamp_gf_MissionStatusAge (int lp_mission, int lp_status) {
    // Automatic Variable Declarations
    int auto87D2C2FD_val;

    // Implementation
    auto87D2C2FD_val = lp_status;
    if (auto87D2C2FD_val == libCamp_ge_MissionStatus_Available) {
        return ConversationDataStateGetValue(ConversationDataStateIndex("MissionAvailable", (lp_mission)));
    }
    else if (auto87D2C2FD_val == libCamp_ge_MissionStatus_Completed) {
        return ConversationDataStateGetValue(ConversationDataStateIndex("MissionCompleted", (lp_mission)));
    }
    else {
    }
    return 0;
}

bool libCamp_gf_MissionDifficultyCompleted (int lp_mission, int lp_difficulty) {
    // Automatic Variable Declarations
    // Implementation
    if (((libCamp_gv_tSX_MissionDifficultyCompleted[(lp_mission)][(lp_difficulty)] == true) || (libCamp_gv_tSX_MissionDifficultyBestTime[(lp_mission)][(lp_difficulty)] > 0))) {
        return true;
    }

    return false;
}

int libCamp_gf_MissionCompleteBestTime (int lp_mission, int lp_difficulty) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tSX_MissionDifficultyBestTime[(lp_mission)][(lp_difficulty)];
}

int libCamp_gf_MissionStatus (int lp_missionID) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCamp_gf_MissionStatusAge(lp_missionID, libCamp_ge_MissionStatus_Completed) != 0)) {
        return libCamp_ge_MissionStatus_Completed;
    }

    if ((libCamp_gf_MissionStatusAge(lp_missionID, libCamp_ge_MissionStatus_Available) != 0)) {
        return libCamp_ge_MissionStatus_Available;
    }

    return libCamp_ge_MissionStatus_Locked;
}

bool libCamp_gf_MissionStatusCheck (int lp_missionID, int lp_status) {
    // Automatic Variable Declarations
    // Implementation
    return (libCamp_gf_MissionStatus(lp_missionID) == lp_status);
}

int libCamp_gf_MissionReward (int lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    return FixedToInt((ConversationDataStateFixedValue(libCamp_gf_TS_MapConvoID(lp_mission), "Reward") * 1000.0));
}

text libCamp_gf_MissionName (int lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    return ConversationDataStateText(libCamp_gf_TS_MapConvoID(lp_mission), "Name");
}

text libCamp_gf_MissionNameInUpperCase (int lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    return TextCase(libCamp_gf_MissionName(lp_mission), true);
}

text libCamp_gf_MissionEpilogue (int lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    return ConversationDataStateText(libCamp_gf_TS_MapConvoID(lp_mission), "Epilogue");
}

text libCamp_gf_MissionPlanetInfo (int lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    return ConversationDataStateText(libCamp_gf_TS_MapConvoID(lp_mission), "Planet Info");
}

text libCamp_gf_MissionObjectivesText (int lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    return ConversationDataStateText(libCamp_gf_TS_MapConvoID(lp_mission), "Objectives");
}

string libCamp_gf_MissionPitches (int lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tS_MissionPitches[(lp_mission)];
}

int libCamp_gf_MissionUnlockedTechSubgorup (int lp_mission, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tS_MissionTechUnitsEnabled[(lp_mission)][lp_index];
}

string libCamp_gf_MissionUnlockedUnitType (int lp_mission, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gf_StoryTechGroupUnitType(libCamp_gf_MissionUnlockedTechSubgorup(lp_mission, lp_index));
}

string libCamp_gf_MissionLoadingScreenImage (int lp_mission) {
    // Variable Declarations
    string lv_image;
    int lv_planet;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_planet = libCamp_ge_PlanetID_PlanetNone;

    // Implementation
    lv_image = libCamp_gv_tS_MapLoadingScreenImage[(lp_mission)];
    lv_planet = libCamp_gv_tS_MissionLocation[(lp_mission)];
    if ((lv_image == null) && (lv_planet != libCamp_ge_PlanetID_PlanetNone)) {
        lv_image = libCamp_gv_tS_PlanetImage[(lv_planet)];
    }

    return lv_image;
}

int libCamp_gf_NumberOfMissions (int lp_options) {
    // Variable Declarations
    int lv_mission;
    int lv_count;

    // Automatic Variable Declarations
    int autoFD311C5A_i;
    int auto9210BCE2_val;

    // Variable Initialization
    lv_mission = libCamp_ge_MapID_MapNone;

    // Implementation
    autoFD311C5A_i = libCamp_gv_TSC_MISSION_FIRST;
    while (autoFD311C5A_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_mission = libCamp_gv_tS_MapID[autoFD311C5A_i];
        auto9210BCE2_val = lp_options;
        if (auto9210BCE2_val == libCamp_ge_MissionCountOptions_All) {
            lv_count += 1;
        }
        else if (auto9210BCE2_val == libCamp_ge_MissionCountOptions_Available) {
            if ((libCamp_gf_MissionStatusCheck(lv_mission, libCamp_ge_MissionStatus_Available) == true)) {
                lv_count += 1;
            }

        }
        else if (auto9210BCE2_val == libCamp_ge_MissionCountOptions_Completed) {
            if ((libCamp_gf_MissionStatusCheck(lv_mission, libCamp_ge_MissionStatus_Completed) == true)) {
                lv_count += 1;
            }

        }
        else if (auto9210BCE2_val == libCamp_ge_MissionCountOptions_Locked) {
            if ((libCamp_gf_MissionStatusCheck(lv_mission, libCamp_ge_MissionStatus_Locked) == true)) {
                lv_count += 1;
            }

        }
        else {
        }
        autoFD311C5A_i = autoFD311C5A_i + 1;
    }
    return lv_count;
}

int libCamp_gf_TS_MissionRewardResearchPoints (int lp_mission, int lp_researchCategory) {
    // Automatic Variable Declarations
    int auto9FC8E896_val;

    // Implementation
    auto9FC8E896_val = lp_researchCategory;
    if (auto9FC8E896_val == libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss) {
        return FixedToInt(ConversationDataStateFixedValue(libCamp_gf_TS_MapConvoID(lp_mission), "ResearchProtoss"));
    }
    else if (auto9FC8E896_val == libCamp_ge_StoryResearchCategory_ResearchCategoryZerg) {
        return FixedToInt(ConversationDataStateFixedValue(libCamp_gf_TS_MapConvoID(lp_mission), "ResearchZerg"));
    }
    else {
    }
    return 0;
}

int libCamp_gf_TS_TertiaryIntegerOp (bool lp_condition, int lp_trueValue, int lp_falseValue) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_condition == true)) {
        return lp_trueValue;
    }
    else {
        return lp_falseValue;
    }
}

bool libCamp_gf_TS_MapIsMission (int lp_map) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gf_MapTypeCheck(lp_map, libCamp_ge_MapType_Mission);
}

int libCamp_gf_TS_MapIDFromIndex (int lp_mapIndex) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tS_MapID[lp_mapIndex];
}

string libCamp_gf_TS_MapConvoID (int lp_map) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tS_MapConvoID[(lp_map)];
}

text libCamp_gf_FormatCredits (int lp_credits, bool lp_withDollarSign) {
    // Variable Declarations

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    return FormatNumber(lp_credits);
}

int libCamp_gf_CurrentMap () {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tS_CurrentMap;
}

void libCamp_gf_UpdateMissionFlow () {
    // Variable Declarations
    int lv_indexMission;

    // Automatic Variable Declarations
    int auto911CEB10_i;

    // Variable Initialization
    lv_indexMission = libCamp_ge_MapID_MapNone;

    // Implementation
    libCamp_gf_TS_LockUnlockMissionIfCondition(false, libCamp_ge_MapID_MapTRaynor01, true);
    libCamp_gf_TS_LockUnlockMissionIfCondition(false, libCamp_ge_MapID_MapTRaynor02, libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTRaynor01, libCamp_ge_MissionStatus_Completed));
    libCamp_gf_TS_LockUnlockMissionIfCondition(false, libCamp_ge_MapID_MapTRaynor03, libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTRaynor02, libCamp_ge_MissionStatus_Completed));
    libCamp_gf_TS_LockUnlockMissionIfCondition(false, libCamp_ge_MapID_MapTHanson01, libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTRaynor03, libCamp_ge_MissionStatus_Completed));
    libCamp_gf_TS_LockUnlockMissionIfCondition(false, libCamp_ge_MapID_MapTHanson02, libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTHanson01, libCamp_ge_MissionStatus_Completed));
    libCamp_gf_TS_LockUnlockMissionIfCondition(false, libCamp_ge_MapID_MapTHanson03A, ((libCamp_gf_MissionStatusAge(libCamp_ge_MapID_MapTHanson02, libCamp_ge_MissionStatus_Completed) > 2) || (libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTHanson02, libCamp_ge_MissionStatus_Completed) && (libCamp_gf_CountMissions(libCamp_ge_MissionStatus_Completed) >= 12))));
    libCamp_gf_TS_LockUnlockMissionIfCondition(false, libCamp_ge_MapID_MapTHanson03B, ((libCamp_gf_MissionStatusAge(libCamp_ge_MapID_MapTHanson02, libCamp_ge_MissionStatus_Completed) > 2) || (libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTHanson02, libCamp_ge_MissionStatus_Completed) && (libCamp_gf_CountMissions(libCamp_ge_MissionStatus_Completed) >= 12))));
    libCamp_gf_TS_LockUnlockMissionIfCondition(true, libCamp_ge_MapID_MapTHanson03A, libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTHanson03B, libCamp_ge_MissionStatus_Completed));
    libCamp_gf_TS_LockUnlockMissionIfCondition(true, libCamp_ge_MapID_MapTHanson03B, libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTHanson03A, libCamp_ge_MissionStatus_Completed));
    libCamp_gf_TS_LockUnlockMissionIfCondition(false, libCamp_ge_MapID_MapTTosh01, (libCamp_gf_CountMissions(libCamp_ge_MissionStatus_Completed) >= 4));
    libCamp_gf_TS_LockUnlockMissionIfCondition(false, libCamp_ge_MapID_MapTTosh02, libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTTosh01, libCamp_ge_MissionStatus_Completed));
    libCamp_gf_TS_LockUnlockMissionIfCondition(false, libCamp_ge_MapID_MapTTosh03A, ((libCamp_gf_MissionStatusAge(libCamp_ge_MapID_MapTTosh02, libCamp_ge_MissionStatus_Completed) > 2) || (libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTTosh02, libCamp_ge_MissionStatus_Completed) && (libCamp_gf_CountMissions(libCamp_ge_MissionStatus_Completed) >= 13))));
    libCamp_gf_TS_LockUnlockMissionIfCondition(false, libCamp_ge_MapID_MapTTosh03B, ((libCamp_gf_MissionStatusAge(libCamp_ge_MapID_MapTTosh02, libCamp_ge_MissionStatus_Completed) > 2) || (libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTTosh02, libCamp_ge_MissionStatus_Completed) && (libCamp_gf_CountMissions(libCamp_ge_MissionStatus_Completed) >= 13))));
    libCamp_gf_TS_LockUnlockMissionIfCondition(true, libCamp_ge_MapID_MapTTosh03A, libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTTosh03B, libCamp_ge_MissionStatus_Completed));
    libCamp_gf_TS_LockUnlockMissionIfCondition(true, libCamp_ge_MapID_MapTTosh03B, libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTTosh03A, libCamp_ge_MissionStatus_Completed));
    libCamp_gf_TS_LockUnlockMissionIfCondition(false, libCamp_ge_MapID_MapTHorner01, (libCamp_gf_CountMissions(libCamp_ge_MissionStatus_Completed) >= 6));
    libCamp_gf_TS_LockUnlockMissionIfCondition(false, libCamp_ge_MapID_MapTHorner02, libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTHorner01, libCamp_ge_MissionStatus_Completed));
    libCamp_gf_TS_LockUnlockMissionIfCondition(false, libCamp_ge_MapID_MapTHorner03, libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTHorner02, libCamp_ge_MissionStatus_Completed));
    libCamp_gf_TS_LockUnlockMissionIfCondition(false, libCamp_ge_MapID_MapTHorner04, libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTHorner03, libCamp_ge_MissionStatus_Completed));
    libCamp_gf_TS_LockUnlockMissionIfCondition(false, libCamp_ge_MapID_MapTHorner05S, (libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTHorner04, libCamp_ge_MissionStatus_Completed) && (libCamp_gf_StoryState(libCamp_ge_StoryStateID_StoryStateHorner05sUnlocked) > 0)));
    libCamp_gf_TS_LockUnlockMissionIfCondition(false, libCamp_ge_MapID_MapTTychus01, libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTRaynor03, libCamp_ge_MissionStatus_Completed));
    libCamp_gf_TS_LockUnlockMissionIfCondition(false, libCamp_ge_MapID_MapTTychus02, (libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTTychus01, libCamp_ge_MissionStatus_Completed) && (libCamp_gf_CountMissions(libCamp_ge_MissionStatus_Completed) >= 8)));
    libCamp_gf_TS_LockUnlockMissionIfCondition(false, libCamp_ge_MapID_MapTTychus03, (libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTTychus02, libCamp_ge_MissionStatus_Completed) && (libCamp_gf_CountMissions(libCamp_ge_MissionStatus_Completed) >= 11)));
    libCamp_gf_TS_LockUnlockMissionIfCondition(false, libCamp_ge_MapID_MapTTychus04, (libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTTychus03, libCamp_ge_MissionStatus_Completed) && (libCamp_gf_CountMissions(libCamp_ge_MissionStatus_Completed) >= 14)));
    libCamp_gf_TS_LockUnlockMissionIfCondition(false, libCamp_ge_MapID_MapTTychus05, libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTTychus04, libCamp_ge_MissionStatus_Completed));
    libCamp_gf_TS_LockUnlockMissionIfCondition(false, libCamp_ge_MapID_MapTZeratul01, libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTTychus02, libCamp_ge_MissionStatus_Completed));
    libCamp_gf_TS_LockUnlockMissionIfCondition(false, libCamp_ge_MapID_MapTZeratul02, libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTZeratul01, libCamp_ge_MissionStatus_Completed));
    libCamp_gf_TS_LockUnlockMissionIfCondition(false, libCamp_ge_MapID_MapTZeratul03, libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTZeratul02, libCamp_ge_MissionStatus_Completed));
    libCamp_gf_TS_LockUnlockMissionIfCondition(false, libCamp_ge_MapID_MapTZeratul04, libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTZeratul03, libCamp_ge_MissionStatus_Completed));
    libCamp_gf_TS_LockUnlockMissionIfCondition(false, libCamp_ge_MapID_MapTValerian01, libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTTychus05, libCamp_ge_MissionStatus_Completed));
    libCamp_gf_TS_LockUnlockMissionIfCondition(false, libCamp_ge_MapID_MapTValerian02A, libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTValerian01, libCamp_ge_MissionStatus_Completed));
    libCamp_gf_TS_LockUnlockMissionIfCondition(false, libCamp_ge_MapID_MapTValerian02B, libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTValerian01, libCamp_ge_MissionStatus_Completed));
    libCamp_gf_TS_LockUnlockMissionIfCondition(true, libCamp_ge_MapID_MapTValerian02A, libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTValerian02B, libCamp_ge_MissionStatus_Completed));
    libCamp_gf_TS_LockUnlockMissionIfCondition(true, libCamp_ge_MapID_MapTValerian02B, libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTValerian02A, libCamp_ge_MissionStatus_Completed));
    libCamp_gf_TS_LockUnlockMissionIfCondition(false, libCamp_ge_MapID_MapTValerian03, (libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTValerian02A, libCamp_ge_MissionStatus_Completed) || libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTValerian02B, libCamp_ge_MissionStatus_Completed)));
    if ((libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTValerian01, libCamp_ge_MissionStatus_Completed) == true)) {
        auto911CEB10_i = libCamp_gv_TSC_MISSION_FIRST;
        while (auto911CEB10_i <= libCamp_gv_TSC_MISSION_LAST) {
            lv_indexMission = libCamp_gv_tS_MapID[auto911CEB10_i];
            if ((lv_indexMission != libCamp_ge_MapID_MapTValerian01) && (lv_indexMission != libCamp_ge_MapID_MapTValerian02A) && (lv_indexMission != libCamp_ge_MapID_MapTValerian02B) && (lv_indexMission != libCamp_ge_MapID_MapTValerian03)) {
                libCamp_gf_TS_LockUnlockMissionIfCondition(true, lv_indexMission, true);
            }

            auto911CEB10_i = auto911CEB10_i + 1;
        }
    }

}

void libCamp_gf_SetMissionBriefing (int lp_mapID, trigger lp_briefing, trigger lp_briefingPreload, trigger lp_briefingPreloadRough) {
    // Variable Declarations
    int lv_mapIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_mapIndex = (lp_mapID);
    libCamp_gv_tS_MissionBriefing[lv_mapIndex] = lp_briefing;
    libCamp_gv_tS_MissionBriefingPreload[lv_mapIndex] = lp_briefingPreload;
    libCamp_gv_tS_MissionBriefingPreloadRough[lv_mapIndex] = lp_briefingPreloadRough;
}

void libCamp_gf_SetMissionABChoiceCallback (int lp_mapID, trigger lp_aBChoice) {
    // Variable Declarations
    int lv_mapIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_mapIndex = (lp_mapID);
    libCamp_gv_tS_MissionABChoice[lv_mapIndex] = lp_aBChoice;
}

void libCamp_gf_SetMissionABChoiceResult (int lp_mapID) {
    // Automatic Variable Declarations
    // Implementation
    libCamp_gv_tS_MissionABChoiceResult = lp_mapID;
}

void libCamp_gf_TS_MarkMissionAsStatus (int lp_missionID, int lp_status) {
    // Automatic Variable Declarations
    int auto8ADDD5CF_val;

    // Implementation
    auto8ADDD5CF_val = lp_status;
    if (auto8ADDD5CF_val == libCamp_ge_MissionStatus_Locked) {
        libCamp_gf_TS_SetMissionStatusAge(lp_missionID, libCamp_ge_MissionStatus_Available, 0);
        libCamp_gf_TS_SetMissionStatusAge(lp_missionID, libCamp_ge_MissionStatus_Completed, 0);
    }
    else if (auto8ADDD5CF_val == libCamp_ge_MissionStatus_Available) {
        libCamp_gf_TS_SetMissionStatusAge(lp_missionID, libCamp_ge_MissionStatus_Available, 1);
        libCamp_gf_TS_SetMissionStatusAge(lp_missionID, libCamp_ge_MissionStatus_Completed, 0);
    }
    else if (auto8ADDD5CF_val == libCamp_ge_MissionStatus_Completed) {
        libCamp_gf_TS_SetMissionStatusAge(lp_missionID, libCamp_ge_MissionStatus_Available, 0);
        libCamp_gf_TS_SetMissionStatusAge(lp_missionID, libCamp_ge_MissionStatus_Completed, 1);
    }
    else {
    }
}

void libCamp_gf_TS_SetMissionStatusAge (int lp_mission, int lp_status, int lp_age) {
    // Automatic Variable Declarations
    int autoFDA5092A_val;

    // Implementation
    autoFDA5092A_val = lp_status;
    if (autoFDA5092A_val == libCamp_ge_MissionStatus_Available) {
        ConversationDataStateSetValue(ConversationDataStateIndex("MissionAvailable", (lp_mission)), lp_age);
    }
    else if (autoFDA5092A_val == libCamp_ge_MissionStatus_Completed) {
        ConversationDataStateSetValue(ConversationDataStateIndex("MissionCompleted", (lp_mission)), lp_age);
    }
    else {
    }
}

void libCamp_gf_TS_SetMissionDifficultyCompleted (int lp_mission, int lp_difficulty, bool lp_completed) {
    // Automatic Variable Declarations
    // Implementation
    libCamp_gv_tSX_MissionDifficultyCompleted[(lp_mission)][(lp_difficulty)] = lp_completed;
}

void libCamp_gf_TS_SetMissionCompleteBestTime (int lp_mission, int lp_difficulty, int lp_time) {
    // Automatic Variable Declarations
    // Implementation
    libCamp_gv_tSX_MissionDifficultyBestTime[(lp_mission)][(lp_difficulty)] = lp_time;
}

void libCamp_gf_TS_CompleteMission (int lp_mission) {
    // Variable Declarations
    int lv_index;
    int lv_indexMission;

    // Automatic Variable Declarations
    int auto6BC20551_i;

    // Variable Initialization
    lv_indexMission = libCamp_ge_MapID_MapNone;

    // Implementation
    if (((lp_mission == libCamp_ge_MapID_MapNone) || (libCamp_gf_MissionStatusCheck(lp_mission, libCamp_ge_MissionStatus_Completed) == true))) {
        return ;
    }

    libCamp_gf_TS_MarkMissionAsStatus(lp_mission, libCamp_ge_MissionStatus_Completed);
    auto6BC20551_i = libCamp_gv_TSC_MISSION_FIRST;
    while (auto6BC20551_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[auto6BC20551_i];
        if ((lv_indexMission != lp_mission)) {
            libCamp_gf_TS_IncreaseMissionAge(lv_indexMission);
        }

        auto6BC20551_i = auto6BC20551_i + 1;
    }
    libCamp_gf_UpdateMissionFlow();
}

void libCamp_gf_TS_IncreaseMissionAge (int lp_mission) {
    // Automatic Variable Declarations
    int auto7B5F5DA0_val;

    // Implementation
    auto7B5F5DA0_val = libCamp_gf_MissionStatus(lp_mission);
    if (auto7B5F5DA0_val == libCamp_ge_MissionStatus_Locked) {
        libCamp_gf_TS_SetMissionStatusAge(lp_mission, libCamp_ge_MissionStatus_Available, 0);
        libCamp_gf_TS_SetMissionStatusAge(lp_mission, libCamp_ge_MissionStatus_Completed, 0);
    }
    else if (auto7B5F5DA0_val == libCamp_ge_MissionStatus_Available) {
        libCamp_gf_TS_SetMissionStatusAge(lp_mission, libCamp_ge_MissionStatus_Available, (libCamp_gf_MissionStatusAge(lp_mission, libCamp_ge_MissionStatus_Available) + 1));
    }
    else if (auto7B5F5DA0_val == libCamp_ge_MissionStatus_Completed) {
        libCamp_gf_TS_SetMissionStatusAge(lp_mission, libCamp_ge_MissionStatus_Completed, (libCamp_gf_MissionStatusAge(lp_mission, libCamp_ge_MissionStatus_Completed) + 1));
    }
    else {
    }
}

void libCamp_gf_TS_InitializeMapDataSingle (int lp_mapID, string lp_map, text lp_progressCheatName, int lp_type, string lp_convoID, text lp_subtitle, string lp_loadingScreenImage, string lp_backLoadingScreenImage, string lp_backDefeatLoadingScreenImage, text lp_summary, int lp_location, bool lp_isRequired, int lp_contact, int lp_creditsPoor, int lp_creditsAvg, int lp_creditsRich, int lp_enabedTechUnit1, int lp_enabedTechUnit2, int lp_enabedTechUnit3, string lp_pitches, text lp_enemyForces, string lp_battleReportImage, string lp_battleReportIcon) {
    // Variable Declarations
    int lv_mapIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_mapIndex = (lp_mapID);
    libCamp_gv_tS_MapID[lv_mapIndex] = lp_mapID;
    libCamp_gv_tS_MapFile[lv_mapIndex] = lp_map;
    libCamp_gv_tS_MapProgressCheatName[lv_mapIndex] = lp_progressCheatName;
    libCamp_gv_tS_MapProgressCheatName[lv_mapIndex] = ConversationDataStateText(lp_convoID, "Name");
    libCamp_gv_tS_MapType[lv_mapIndex] = lp_type;
    libCamp_gv_tS_MapConvoID[lv_mapIndex] = lp_convoID;
    libCamp_gv_tS_MapSubtitle[lv_mapIndex] = lp_subtitle;
    libCamp_gv_tS_MapLoadingScreenImage[lv_mapIndex] = lp_loadingScreenImage;
    libCamp_gv_tS_MapBackLoadingImage[lv_mapIndex] = lp_backLoadingScreenImage;
    libCamp_gv_tS_MapBackDefeatLoadingImage[lv_mapIndex] = lp_backDefeatLoadingScreenImage;
    libCamp_gv_tS_MissionSummary[lv_mapIndex] = lp_summary;
    libCamp_gv_tS_MissionLocation[lv_mapIndex] = lp_location;
    libCamp_gv_tS_MissionIsRequired[lv_mapIndex] = lp_isRequired;
    libCamp_gv_tS_MissionContact[lv_mapIndex] = lp_contact;
    libCamp_gv_tS_ExpectedCreditsPoor[lv_mapIndex] = lp_creditsPoor;
    libCamp_gv_tS_ExpectedCreditsAvg[lv_mapIndex] = lp_creditsAvg;
    libCamp_gv_tS_ExpectedCreditsRich[lv_mapIndex] = lp_creditsRich;
    libCamp_gv_tS_MissionPitches[lv_mapIndex] = lp_pitches;
    libCamp_gv_tS_MissionTechUnitsEnabled[lv_mapIndex][1] = lp_enabedTechUnit1;
    libCamp_gv_tS_MissionTechUnitsEnabled[lv_mapIndex][2] = lp_enabedTechUnit2;
    libCamp_gv_tS_MissionTechUnitsEnabled[lv_mapIndex][3] = lp_enabedTechUnit3;
    libCamp_gv_tS_MissionEnemyForces[lv_mapIndex] = lp_enemyForces;
    libCamp_gv_tS_MissionBattleReportImage[lv_mapIndex] = lp_battleReportImage;
    libCamp_gv_tS_MissionBattleReportIcon[lv_mapIndex] = lp_battleReportIcon;
    libCamp_gf_TS_SetMissionDifficultyCompleted(lp_mapID, 1, false);
    libCamp_gf_TS_SetMissionDifficultyCompleted(lp_mapID, 2, false);
    libCamp_gf_TS_SetMissionDifficultyCompleted(lp_mapID, 3, false);
    libCamp_gf_TS_SetMissionDifficultyCompleted(lp_mapID, 4, false);
    libCamp_gf_TS_SetMissionCompleteBestTime(lp_mapID, 1, 0);
    libCamp_gf_TS_SetMissionCompleteBestTime(lp_mapID, 2, 0);
    libCamp_gf_TS_SetMissionCompleteBestTime(lp_mapID, 3, 0);
    libCamp_gf_TS_SetMissionCompleteBestTime(lp_mapID, 4, 0);
}

void libCamp_gf_TS_InitializeMapData () {
    // Variable Declarations
    string lv_loading_MarSaraBar;
    string lv_loading_HyperionBridge;
    string lv_loading_CharBattleZone;
    string lv_loading_HyperionArmory;
    string lv_loading_HyperionCantina;
    string lv_loading_HyperionLab;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_loading_MarSaraBar = "MarSaraLoadingScreenImage";
    lv_loading_HyperionBridge = "HyperionLoadingScreenImage";
    lv_loading_CharBattleZone = "CharLoadingScreenImage";
    lv_loading_HyperionArmory = "ArmoryLoadingScreenImage";
    lv_loading_HyperionCantina = "CantinaLoadingScreenImage";
    lv_loading_HyperionLab = "LabLoadingScreenImage";

    // Implementation
    libCamp_gf_TS_InitializeContactData();
    libCamp_gf_TS_InitializeMapDataSingle(libCamp_ge_MapID_MapTRaynor01, "TRaynor01", StringExternal("Param/Value/lib_Camp_12F0346D"), libCamp_ge_MapType_Mission, "Maps|TRaynor01", StringExternal("Param/Value/lib_Camp_07CBE499"), "Assets\\Textures\\loading-marsara.dds", "Assets\\Textures\\loading-kerriganphoto.dds", "Assets\\Textures\\loading-marsarabarexterior.dds", StringExternal("Param/Value/lib_Camp_054388C1"), libCamp_ge_PlanetID_PlanetMarSara, true, libCamp_ge_ContactID_ContactAdjutant, 0, 0, 0, libCamp_ge_StoryTechGroup_StoryTechGroupInfantryMarine, libCamp_ge_StoryTechGroup_StoryTechGroupNone, libCamp_ge_StoryTechGroup_StoryTechGroupNone, "MissionPitch|TRaynor01", StringExternal("Param/Value/lib_Camp_E93CFA3C"), "Assets\\Textures\\ui_battlereports_traynor01.dds", "Assets\\Textures\\ui_list_battlereports_traynor01.dds");
    libCamp_gf_TS_InitializeMapDataSingle(libCamp_ge_MapID_MapTRaynor02, "TRaynor02", StringExternal("Param/Value/lib_Camp_E252F0A8"), libCamp_ge_MapType_Mission, "Maps|TRaynor02", StringExternal("Param/Value/lib_Camp_AA0E57F6"), "Assets\\Textures\\loading-marsara.dds", "Assets\\Textures\\loading-marsarabar.dds", null, StringExternal("Param/Value/lib_Camp_489114A5"), libCamp_ge_PlanetID_PlanetMarSara, true, libCamp_ge_ContactID_ContactAdjutant, 0, 0, 0, libCamp_ge_StoryTechGroup_StoryTechGroupInfantryMedic, libCamp_ge_StoryTechGroup_StoryTechGroupNone, libCamp_ge_StoryTechGroup_StoryTechGroupNone, "MissionPitch|TRaynor02", StringExternal("Param/Value/lib_Camp_4CAB2A15"), "Assets\\Textures\\ui_battlereports_traynor02.dds", "Assets\\Textures\\ui_list_battlereports_traynor02.dds");
    libCamp_gf_TS_InitializeMapDataSingle(libCamp_ge_MapID_MapTRaynor03, "TRaynor03", StringExternal("Param/Value/lib_Camp_04414D7D"), libCamp_ge_MapType_Mission, "Maps|TRaynor03", StringExternal("Param/Value/lib_Camp_A64CF18B"), "Assets\\Textures\\loading-marsara.dds", "Assets\\Textures\\loading-terran05.dds", lv_loading_MarSaraBar, StringExternal("Param/Value/lib_Camp_D7D767FF"), libCamp_ge_PlanetID_PlanetMarSara, true, libCamp_ge_ContactID_ContactAdjutant, 5, 5, 5, libCamp_ge_StoryTechGroup_StoryTechGroupBaseBunker, libCamp_ge_StoryTechGroup_StoryTechGroupBaseMissileTurret, libCamp_ge_StoryTechGroup_StoryTechGroupxxxReactor, "MissionPitch|TRaynor03", StringExternal("Param/Value/lib_Camp_195718A4"), "Assets\\Textures\\ui_battlereports_traynor03.dds", "Assets\\Textures\\ui_list_battlereports_traynor03.dds");
    libCamp_gf_TS_InitializeMapDataSingle(libCamp_ge_MapID_MapTHanson01, "THanson01", StringExternal("Param/Value/lib_Camp_EFA6508B"), libCamp_ge_MapType_Mission, "Maps|THanson01", StringExternal("Param/Value/lib_Camp_17D68862"), null, lv_loading_HyperionBridge, null, StringToText(""), libCamp_ge_PlanetID_PlanetAgria, false, libCamp_ge_ContactID_ContactHanson, 120000, 200000, 560000, libCamp_ge_StoryTechGroup_StoryTechGroupInfantryFirebat, libCamp_ge_StoryTechGroup_StoryTechGroupNone, libCamp_ge_StoryTechGroup_StoryTechGroupNone, "MissionPitch|THanson01", StringExternal("Param/Value/lib_Camp_C71ABB46"), "Assets\\Textures\\ui_battlereports_thanson01.dds", "Assets\\Textures\\ui_list_battlereports_thanson01.dds");
    libCamp_gf_TS_InitializeMapDataSingle(libCamp_ge_MapID_MapTHanson02, "THanson02", StringExternal("Param/Value/lib_Camp_80DD44F1"), libCamp_ge_MapType_Mission, "Maps|THanson02", StringExternal("Param/Value/lib_Camp_CC7A0EF4"), null, lv_loading_HyperionBridge, null, StringToText(""), libCamp_ge_PlanetID_PlanetMeinhoff, false, libCamp_ge_ContactID_ContactHanson, 180000, 260000, 620000, libCamp_ge_StoryTechGroup_StoryTechGroupVehiclesHellion, libCamp_ge_StoryTechGroup_StoryTechGroupxxxSensorTower, libCamp_ge_StoryTechGroup_StoryTechGroupNone, "MissionPitch|THanson02", StringExternal("Param/Value/lib_Camp_D0A11C82"), "Assets\\Textures\\ui_battlereports_thanson02.dds", "Assets\\Textures\\ui_list_battlereports_thanson02.dds");
    libCamp_gf_TS_InitializeMapDataSingle(libCamp_ge_MapID_MapTHanson03A, "THanson03A", StringExternal("Param/Value/lib_Camp_C8307E40"), libCamp_ge_MapType_Mission, "Maps|THanson03A", StringExternal("Param/Value/lib_Camp_2A478B46"), null, lv_loading_HyperionBridge, null, StringExternal("Param/Value/lib_Camp_055B2EED"), libCamp_ge_PlanetID_PlanetHaven, false, libCamp_ge_ContactID_ContactHanson, 570000, 1010000, 1330000, libCamp_ge_StoryTechGroup_StoryTechGroupStarshipsViking, libCamp_ge_StoryTechGroup_StoryTechGroupNone, libCamp_ge_StoryTechGroup_StoryTechGroupNone, "MissionPitch|THanson03A", StringExternal("Param/Value/lib_Camp_300E1F98"), "Assets\\Textures\\ui_battlereports_thanson03a.dds", "Assets\\Textures\\ui_list_battlereports_thanson03a.dds");
    libCamp_gf_TS_InitializeMapDataSingle(libCamp_ge_MapID_MapTHanson03B, "THanson03B", StringExternal("Param/Value/lib_Camp_82841463"), libCamp_ge_MapType_Mission, "Maps|THanson03B", StringToText(""), null, lv_loading_HyperionBridge, null, StringToText(""), libCamp_ge_PlanetID_PlanetHaven, false, libCamp_ge_ContactID_ContactHanson, 570000, 1010000, 1330000, libCamp_ge_StoryTechGroup_StoryTechGroupStarshipsViking, libCamp_ge_StoryTechGroup_StoryTechGroupNone, libCamp_ge_StoryTechGroup_StoryTechGroupNone, "MissionPitch|THanson03B", StringExternal("Param/Value/lib_Camp_3D12CCA2"), "Assets\\Textures\\ui_battlereports_thanson03b.dds", "Assets\\Textures\\ui_list_battlereports_thanson03b.dds");
    libCamp_gf_TS_InitializeMapDataSingle(libCamp_ge_MapID_MapTTosh01, "TTosh01", StringExternal("Param/Value/lib_Camp_C82F3C6A"), libCamp_ge_MapType_Mission, "Maps|TTosh01", StringExternal("Param/Value/lib_Camp_389DAF39"), null, lv_loading_HyperionBridge, null, StringToText(""), libCamp_ge_PlanetID_PlanetRedstone, false, libCamp_ge_ContactID_ContactTosh, 180000, 350000, 970000, libCamp_ge_StoryTechGroup_StoryTechGroupInfantryReaper, libCamp_ge_StoryTechGroup_StoryTechGroupNone, libCamp_ge_StoryTechGroup_StoryTechGroupNone, "MissionPitch|TTosh01", StringExternal("Param/Value/lib_Camp_968C61BC"), "Assets\\Textures\\ui_battlereports_ttosh01.dds", "Assets\\Textures\\ui_list_battlereports_ttosh01.dds");
    libCamp_gf_TS_InitializeMapDataSingle(libCamp_ge_MapID_MapTTosh02, "TTosh02", StringExternal("Param/Value/lib_Camp_CF3C9EC3"), libCamp_ge_MapType_Mission, "Maps|TTosh02", StringExternal("Param/Value/lib_Camp_C1DE606F"), null, lv_loading_HyperionBridge, null, StringToText(""), libCamp_ge_PlanetID_PlanetBelShir, false, libCamp_ge_ContactID_ContactTosh, 280000, 450000, 1070000, libCamp_ge_StoryTechGroup_StoryTechGroupVehiclesGoliath, libCamp_ge_StoryTechGroup_StoryTechGroupNone, libCamp_ge_StoryTechGroup_StoryTechGroupNone, "MissionPitch|TTosh02", StringExternal("Param/Value/lib_Camp_307CA02C"), "Assets\\Textures\\ui_battlereports_ttosh02.dds", "Assets\\Textures\\ui_list_battlereports_ttosh02.dds");
    libCamp_gf_TS_InitializeMapDataSingle(libCamp_ge_MapID_MapTTosh03A, "TTosh03A", StringExternal("Param/Value/lib_Camp_906322EE"), libCamp_ge_MapType_Mission, "Maps|TTosh03A", null, null, lv_loading_HyperionBridge, null, StringToText(""), libCamp_ge_PlanetID_PlanetNewFolsom, false, libCamp_ge_ContactID_ContactTosh, 570000, 1180000, 1510000, libCamp_ge_StoryTechGroup_StoryTechGroupDominionSpectre, libCamp_ge_StoryTechGroup_StoryTechGroupNone, libCamp_ge_StoryTechGroup_StoryTechGroupNone, "MissionPitch|TTosh03A", StringExternal("Param/Value/lib_Camp_9EFDA03D"), "Assets\\Textures\\ui_battlereports_ttosh03a.dds", "Assets\\Textures\\ui_list_battlereports_ttosh03a.dds");
    libCamp_gf_TS_InitializeMapDataSingle(libCamp_ge_MapID_MapTTosh03B, "TTosh03B", StringExternal("Param/Value/lib_Camp_88FC70C3"), libCamp_ge_MapType_Mission, "Maps|TTosh03B", null, null, lv_loading_HyperionBridge, null, StringToText(""), libCamp_ge_PlanetID_PlanetAvernus, false, libCamp_ge_ContactID_ContactTosh, 570000, 1180000, 1510000, libCamp_ge_StoryTechGroup_StoryTechGroupDominionGhost, libCamp_ge_StoryTechGroup_StoryTechGroupNone, libCamp_ge_StoryTechGroup_StoryTechGroupNone, "MissionPitch|TTosh03B", StringExternal("Param/Value/lib_Camp_1AAC6854"), "Assets\\Textures\\ui_battlereports_ttosh03b.dds", "Assets\\Textures\\ui_list_battlereports_ttosh03b.dds");
    libCamp_gf_TS_InitializeMapDataSingle(libCamp_ge_MapID_MapTHorner01, "THorner01", StringExternal("Param/Value/lib_Camp_243E3B8B"), libCamp_ge_MapType_Mission, "Maps|THorner01", null, null, lv_loading_HyperionBridge, null, StringExternal("Param/Value/lib_Camp_0AB29161"), libCamp_ge_PlanetID_PlanetTarsonis, false, libCamp_ge_ContactID_ContactHorner, 360000, 630000, 1030000, libCamp_ge_StoryTechGroup_StoryTechGroupVehiclesDiamondback, libCamp_ge_StoryTechGroup_StoryTechGroupNone, libCamp_ge_StoryTechGroup_StoryTechGroupNone, "MissionPitch|THorner01", StringExternal("Param/Value/lib_Camp_2882682B"), "Assets\\Textures\\ui_battlereports_thorner01.dds", "Assets\\Textures\\ui_list_battlereports_thorner01.dds");
    libCamp_gf_TS_InitializeMapDataSingle(libCamp_ge_MapID_MapTHorner02, "THorner02", StringExternal("Param/Value/lib_Camp_AEDB68C2"), libCamp_ge_MapType_Mission, "Maps|THorner02", null, null, lv_loading_HyperionBridge, null, StringExternal("Param/Value/lib_Camp_EC264544"), libCamp_ge_PlanetID_PlanetDeadmansPort, false, libCamp_ge_ContactID_ContactHorner, 500000, 770000, 1170000, libCamp_ge_StoryTechGroup_StoryTechGroupVehiclesVulture, libCamp_ge_StoryTechGroup_StoryTechGroupNone, libCamp_ge_StoryTechGroup_StoryTechGroupNone, "MissionPitch|THorner02", StringExternal("Param/Value/lib_Camp_516FD7AC"), "Assets\\Textures\\ui_battlereports_thorner02.dds", "Assets\\Textures\\ui_list_battlereports_thorner02.dds");
    libCamp_gf_TS_InitializeMapDataSingle(libCamp_ge_MapID_MapTHorner03, "THorner03", StringExternal("Param/Value/lib_Camp_79B9EADF"), libCamp_ge_MapType_Mission, "Maps|THorner03", null, null, lv_loading_HyperionBridge, null, StringToText(""), libCamp_ge_PlanetID_PlanetValhalla, false, libCamp_ge_ContactID_ContactHorner, 650000, 920000, 1320000, libCamp_ge_StoryTechGroup_StoryTechGroupStarshipsWrath, libCamp_ge_StoryTechGroup_StoryTechGroupNone, libCamp_ge_StoryTechGroup_StoryTechGroupNone, "MissionPitch|THorner03", StringExternal("Param/Value/lib_Camp_CE29A8F0"), "Assets\\Textures\\ui_battlereports_thorner03.dds", "Assets\\Textures\\ui_list_battlereports_thorner03.dds");
    libCamp_gf_TS_InitializeMapDataSingle(libCamp_ge_MapID_MapTHorner04, "THorner04", StringExternal("Param/Value/lib_Camp_E50563DB"), libCamp_ge_MapType_Mission, "Maps|THorner04", null, null, lv_loading_HyperionBridge, null, StringToText(""), libCamp_ge_PlanetID_PlanetKorhal, false, libCamp_ge_ContactID_ContactHorner, 810000, 1080000, 1480000, libCamp_ge_StoryTechGroup_StoryTechGroupDominionThor, libCamp_ge_StoryTechGroup_StoryTechGroupNone, libCamp_ge_StoryTechGroup_StoryTechGroupNone, "MissionPitch|THorner04", StringExternal("Param/Value/lib_Camp_58035DCF"), "Assets\\Textures\\ui_battlereports_thorner04.dds", "Assets\\Textures\\ui_list_battlereports_thorner04.dds");
    libCamp_gf_TS_InitializeMapDataSingle(libCamp_ge_MapID_MapTHorner05S, "THorner05S", StringExternal("Param/Value/lib_Camp_3BBCC86D"), libCamp_ge_MapType_Mission, "Maps|THorner05S", null, null, lv_loading_HyperionBridge, null, StringToText(""), libCamp_ge_PlanetID_PlanetCastanar, false, libCamp_ge_ContactID_ContactHorner, 980000, 1250000, 1650000, libCamp_ge_StoryTechGroup_StoryTechGroupNone, libCamp_ge_StoryTechGroup_StoryTechGroupNone, libCamp_ge_StoryTechGroup_StoryTechGroupNone, "MissionPitch|THorner05S", StringExternal("Param/Value/lib_Camp_D7CA258D"), "Assets\\Textures\\ui_battlereports_thorner05s.dds", "Assets\\Textures\\ui_list_battlereports_thorner05s.dds");
    libCamp_gf_TS_InitializeMapDataSingle(libCamp_ge_MapID_MapTTychus01, "TTychus01", StringExternal("Param/Value/lib_Camp_0D0C7511"), libCamp_ge_MapType_Mission, "Maps|TTychus01", StringExternal("Param/Value/lib_Camp_EC5A9063"), null, lv_loading_HyperionBridge, null, StringExternal("Param/Value/lib_Camp_C1C9F076"), libCamp_ge_PlanetID_PlanetMonlyth, true, libCamp_ge_ContactID_ContactTychus, 120000, 270000, 630000, libCamp_ge_StoryTechGroup_StoryTechGroupInfantryMarauder, libCamp_ge_StoryTechGroup_StoryTechGroupNone, libCamp_ge_StoryTechGroup_StoryTechGroupNone, "MissionPitch|TTychus01", StringExternal("Param/Value/lib_Camp_C37FBDD9"), "Assets\\Textures\\ui_battlereports_ttychus01.dds", "Assets\\Textures\\ui_list_battlereports_ttychus01.dds");
    libCamp_gf_TS_InitializeMapDataSingle(libCamp_ge_MapID_MapTTychus02, "TTychus02", StringExternal("Param/Value/lib_Camp_017DF311"), libCamp_ge_MapType_Mission, "Maps|TTychus02", StringExternal("Param/Value/lib_Camp_D352F4DF"), null, lv_loading_HyperionBridge, null, StringExternal("Param/Value/lib_Camp_5DB46EFF"), libCamp_ge_PlanetID_PlanetXil, true, libCamp_ge_ContactID_ContactTychus, 570000, 870000, 1510000, libCamp_ge_StoryTechGroup_StoryTechGroupVehiclesSiegeTank, libCamp_ge_StoryTechGroup_StoryTechGroupNone, libCamp_ge_StoryTechGroup_StoryTechGroupNone, "MissionPitch|TTychus02", StringExternal("Param/Value/lib_Camp_C1686C5A"), "Assets\\Textures\\ui_battlereports_ttychus02.dds", "Assets\\Textures\\ui_list_battlereports_ttychus02.dds");
    libCamp_gf_TS_InitializeMapDataSingle(libCamp_ge_MapID_MapTTychus03, "TTychus03", StringExternal("Param/Value/lib_Camp_E182326E"), libCamp_ge_MapType_Mission, "Maps|TTychus03", null, null, lv_loading_HyperionBridge, null, StringToText(""), libCamp_ge_PlanetID_PlanetTyrador, true, libCamp_ge_ContactID_ContactTychus, 730000, 1320000, 1670000, libCamp_ge_StoryTechGroup_StoryTechGroupStarshipsMedivac, libCamp_ge_StoryTechGroup_StoryTechGroupNone, libCamp_ge_StoryTechGroup_StoryTechGroupNone, "MissionPitch|TTychus03", StringExternal("Param/Value/lib_Camp_8B07D59F"), "Assets\\Textures\\ui_battlereports_ttychus03.dds", "Assets\\Textures\\ui_list_battlereports_ttychus03.dds");
    libCamp_gf_TS_InitializeMapDataSingle(libCamp_ge_MapID_MapTTychus04, "TTychus04", StringExternal("Param/Value/lib_Camp_6002246B"), libCamp_ge_MapType_Mission, "Maps|TTychus04", null, null, lv_loading_HyperionBridge, null, StringToText(""), libCamp_ge_PlanetID_PlanetTyphon, true, libCamp_ge_ContactID_ContactTychus, 920000, 1670000, 2020000, libCamp_ge_StoryTechGroup_StoryTechGroupStarshipsBanshee, libCamp_ge_StoryTechGroup_StoryTechGroupNone, libCamp_ge_StoryTechGroup_StoryTechGroupNone, "MissionPitch|TTychus04", StringExternal("Param/Value/lib_Camp_2E93DE67"), "Assets\\Textures\\ui_battlereports_ttychus04.dds", "Assets\\Textures\\ui_list_battlereports_ttychus04.dds");
    libCamp_gf_TS_InitializeMapDataSingle(libCamp_ge_MapID_MapTTychus05, "TTychus05", StringExternal("Param/Value/lib_Camp_01271247"), libCamp_ge_MapType_Mission, "Maps|TTychus05", null, null, lv_loading_HyperionBridge, null, StringToText(""), libCamp_ge_PlanetID_PlanetSigmaQuadrant, true, libCamp_ge_ContactID_ContactValerianMengsk, 1140000, 1890000, 2240000, libCamp_ge_StoryTechGroup_StoryTechGroupStarshipsBattlecruiser, libCamp_ge_StoryTechGroup_StoryTechGroupNone, libCamp_ge_StoryTechGroup_StoryTechGroupNone, "MissionPitch|TTychus05", StringExternal("Param/Value/lib_Camp_7B5708BC"), "Assets\\Textures\\ui_battlereports_ttychus05.dds", "Assets\\Textures\\ui_list_battlereports_ttychus05.dds");
    libCamp_gf_TS_InitializeMapDataSingle(libCamp_ge_MapID_MapTZeratul01, "TZeratul01", StringExternal("Param/Value/lib_Camp_555D6817"), libCamp_ge_MapType_Mission, "Maps|TZeratul01", null, null, lv_loading_HyperionLab, null, StringToText(""), libCamp_ge_PlanetID_PlanetUlaan, false, libCamp_ge_ContactID_ContactZeratul, 730000, 1030000, 1670000, libCamp_ge_StoryTechGroup_StoryTechGroupNone, libCamp_ge_StoryTechGroup_StoryTechGroupNone, libCamp_ge_StoryTechGroup_StoryTechGroupNone, "MissionPitch|TZeratul01", StringExternal("Param/Value/lib_Camp_33295101"), "Assets\\Textures\\ui_battlereports_tzeratul01.dds", "Assets\\Textures\\ui_list_battlereports_tzeratul01.dds");
    libCamp_gf_TS_InitializeMapDataSingle(libCamp_ge_MapID_MapTZeratul02, "TZeratul02", StringExternal("Param/Value/lib_Camp_35D9D23E"), libCamp_ge_MapType_Mission, "Maps|TZeratul02", null, null, lv_loading_HyperionBridge, null, StringToText(""), libCamp_ge_PlanetID_PlanetZhakul, false, libCamp_ge_ContactID_ContactZeratul, 730000, 1030000, 1670000, libCamp_ge_StoryTechGroup_StoryTechGroupNone, libCamp_ge_StoryTechGroup_StoryTechGroupNone, libCamp_ge_StoryTechGroup_StoryTechGroupNone, "MissionPitch|TZeratul02", StringExternal("Param/Value/lib_Camp_D28717FB"), "Assets\\Textures\\ui_battlereports_tzeratul02.dds", "Assets\\Textures\\ui_list_battlereports_tzeratul02.dds");
    libCamp_gf_TS_InitializeMapDataSingle(libCamp_ge_MapID_MapTZeratul03, "TZeratul03", StringExternal("Param/Value/lib_Camp_5FB4D985"), libCamp_ge_MapType_Mission, "Maps|TZeratul03", null, null, lv_loading_HyperionBridge, null, StringToText(""), libCamp_ge_PlanetID_PlanetAiur, false, libCamp_ge_ContactID_ContactZeratul, 730000, 1030000, 1670000, libCamp_ge_StoryTechGroup_StoryTechGroupNone, libCamp_ge_StoryTechGroup_StoryTechGroupNone, libCamp_ge_StoryTechGroup_StoryTechGroupNone, "MissionPitch|TZeratul03", StringExternal("Param/Value/lib_Camp_6ACEBBC7"), "Assets\\Textures\\ui_battlereports_tzeratul03.dds", "Assets\\Textures\\ui_list_battlereports_tzeratul03.dds");
    libCamp_gf_TS_InitializeMapDataSingle(libCamp_ge_MapID_MapTZeratul04, "TZeratul04", StringExternal("Param/Value/lib_Camp_FDCCBD0E"), libCamp_ge_MapType_Mission, "Maps|TZeratul04", null, null, lv_loading_HyperionBridge, null, StringToText(""), libCamp_ge_PlanetID_PlanetUlnar, false, libCamp_ge_ContactID_ContactZeratul, 730000, 1030000, 1670000, libCamp_ge_StoryTechGroup_StoryTechGroupNone, libCamp_ge_StoryTechGroup_StoryTechGroupNone, libCamp_ge_StoryTechGroup_StoryTechGroupNone, "MissionPitch|TZeratul04", StringExternal("Param/Value/lib_Camp_C569E503"), "Assets\\Textures\\ui_battlereports_tzeratul04.dds", "Assets\\Textures\\ui_list_battlereports_tzeratul04.dds");
    libCamp_gf_TS_InitializeMapDataSingle(libCamp_ge_MapID_MapTValerian01, "TValerian01", StringExternal("Param/Value/lib_Camp_789D4EFC"), libCamp_ge_MapType_Mission, "Maps|TValerian01", null, null, lv_loading_CharBattleZone, lv_loading_HyperionBridge, StringToText(""), libCamp_ge_PlanetID_PlanetChar, true, libCamp_ge_ContactID_ContactValerianMengsk, 1380000, 2130000, 2480000, libCamp_ge_StoryTechGroup_StoryTechGroupNone, libCamp_ge_StoryTechGroup_StoryTechGroupNone, libCamp_ge_StoryTechGroup_StoryTechGroupNone, "MissionPitch|TValerian01", StringExternal("Param/Value/lib_Camp_68C43653"), "Assets\\Textures\\ui_battlereports_tvalerian01.dds", "Assets\\Textures\\ui_list_battlereports_tvalerian01.dds");
    libCamp_gf_TS_InitializeMapDataSingle(libCamp_ge_MapID_MapTValerian02A, "TValerian02A", StringExternal("Param/Value/lib_Camp_8A82E437"), libCamp_ge_MapType_Mission, "Maps|TValerian02A", null, null, lv_loading_CharBattleZone, null, StringToText(""), libCamp_ge_PlanetID_PlanetChar, false, libCamp_ge_ContactID_ContactValerianMengsk, 1630000, 2380000, 2730000, libCamp_ge_StoryTechGroup_StoryTechGroupNone, libCamp_ge_StoryTechGroup_StoryTechGroupNone, libCamp_ge_StoryTechGroup_StoryTechGroupNone, "MissionPitch|TValerian02A", StringExternal("Param/Value/lib_Camp_A7AC8C03"), "Assets\\Textures\\ui_battlereports_tvalerian02a.dds", "Assets\\Textures\\ui_list_battlereports_tvalerian02a.dds");
    libCamp_gf_TS_InitializeMapDataSingle(libCamp_ge_MapID_MapTValerian02B, "TValerian02B", StringExternal("Param/Value/lib_Camp_7BE6511A"), libCamp_ge_MapType_Mission, "Maps|TValerian02B", null, "Assets\\Textures\\loading-char.dds", "Assets\\Textures\\loading-char.dds", null, StringToText(""), libCamp_ge_PlanetID_PlanetChar, false, libCamp_ge_ContactID_ContactValerianMengsk, 1630000, 2380000, 2730000, libCamp_ge_StoryTechGroup_StoryTechGroupNone, libCamp_ge_StoryTechGroup_StoryTechGroupNone, libCamp_ge_StoryTechGroup_StoryTechGroupNone, "MissionPitch|TValerian02B", StringExternal("Param/Value/lib_Camp_CEF81DB8"), "Assets\\Textures\\ui_battlereports_tvalerian02b.dds", "Assets\\Textures\\ui_list_battlereports_tvalerian02a.dds");
    libCamp_gf_TS_InitializeMapDataSingle(libCamp_ge_MapID_MapTValerian03, "TValerian03", StringExternal("Param/Value/lib_Camp_C5570C17"), libCamp_ge_MapType_Mission, "Maps|TValerian03", null, null, lv_loading_CharBattleZone, null, StringToText(""), libCamp_ge_PlanetID_PlanetChar, true, libCamp_ge_ContactID_ContactValerianMengsk, 1890000, 2640000, 2990000, libCamp_ge_StoryTechGroup_StoryTechGroupNone, libCamp_ge_StoryTechGroup_StoryTechGroupNone, libCamp_ge_StoryTechGroup_StoryTechGroupNone, "MissionPitch|TValerian03", StringExternal("Param/Value/lib_Camp_F288B5E4"), "Assets\\Textures\\ui_battlereports_tvalerian03.dds", "Assets\\Textures\\ui_list_battlereports_tvalerian03.dds");
    libCamp_gf_TS_InitializeMapDataSingle(libCamp_ge_MapID_MapTSecret01, "TSecret", StringExternal("Param/Value/lib_Camp_3E5B1722"), libCamp_ge_MapType_Mission, "Maps|TSecret01", null, null, null, null, StringToText(""), libCamp_ge_PlanetID_PlanetNone, false, libCamp_ge_ContactID_ContactNone, 0, 0, 0, libCamp_ge_StoryTechGroup_StoryTechGroupNone, libCamp_ge_StoryTechGroup_StoryTechGroupNone, libCamp_ge_StoryTechGroup_StoryTechGroupNone, "", StringExternal("Param/Value/lib_Camp_AF42F7E9"), null, null);
    libCamp_gf_TS_InitializeMapDataSingle(libCamp_ge_MapID_MapTStory01, "TStory01", StringExternal("Param/Value/lib_Camp_40A468A0"), libCamp_ge_MapType_StoryMode, "Maps|TStory01", null, null, null, null, StringToText(""), libCamp_ge_PlanetID_PlanetNone, true, libCamp_ge_ContactID_ContactNone, 0, 0, 0, libCamp_ge_StoryTechGroup_StoryTechGroupNone, libCamp_ge_StoryTechGroup_StoryTechGroupNone, libCamp_ge_StoryTechGroup_StoryTechGroupNone, "", StringToText(""), null, null);
    libCamp_gf_TS_InitializeMapDataSingle(libCamp_ge_MapID_MapTArcade, "TArcade", StringExternal("Param/Value/lib_Camp_CD615CB4"), libCamp_ge_MapType_MiniGame, "Maps|TArcade", null, null, lv_loading_HyperionBridge, null, StringToText(""), libCamp_ge_PlanetID_PlanetNone, false, libCamp_ge_ContactID_ContactNone, 0, 0, 0, libCamp_ge_StoryTechGroup_StoryTechGroupNone, libCamp_ge_StoryTechGroup_StoryTechGroupNone, libCamp_ge_StoryTechGroup_StoryTechGroupNone, "", StringToText(""), null, null);
    libCamp_gf_TS_InitializeMapDataSingle(libCamp_ge_MapID_MapTSimulator, "TSimulator", StringExternal("Param/Value/lib_Camp_9F231CA2"), libCamp_ge_MapType_MiniGame, "Maps|TSimulator", null, null, lv_loading_HyperionArmory, null, StringToText(""), libCamp_ge_PlanetID_PlanetNone, false, libCamp_ge_ContactID_ContactNone, 0, 0, 0, libCamp_ge_StoryTechGroup_StoryTechGroupNone, libCamp_ge_StoryTechGroup_StoryTechGroupNone, libCamp_ge_StoryTechGroup_StoryTechGroupNone, "", StringToText(""), null, null);
    libCamp_gf_TS_DebugProgressInitMissionPath();
}

void libCamp_gf_TS_InitializeContactDataSingle (int lp_contactID, text lp_name, string lp_convoStateIndex, string lp_portrait) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_index = (lp_contactID);
    libCamp_gv_tS_ContactName[lv_index] = lp_name;
    libCamp_gv_tS_ContactStateIndex[lv_index] = lp_convoStateIndex;
    libCamp_gv_tS_ContactPortrait[lv_index] = lp_portrait;
}

void libCamp_gf_TS_InitializeContactData () {
    // Automatic Variable Declarations
    // Implementation
    libCamp_gf_TS_InitializeContactDataSingle(libCamp_ge_ContactID_ContactAdjutant, StringExternal("Param/Value/lib_Camp_F93E794E"), "Characters|CharAdjutant", "AdjutantPortrait_L");
    libCamp_gf_TS_InitializeContactDataSingle(libCamp_ge_ContactID_ContactAdjutantConfederate, StringExternal("Param/Value/lib_Camp_53EE8195"), "Characters|CharConfederateAdjutant", null);
    libCamp_gf_TS_InitializeContactDataSingle(libCamp_ge_ContactID_ContactArcturusMengsk, StringExternal("Param/Value/lib_Camp_3A2257C5"), "Characters|CharArcturus", "ArcturusPortrait");
    libCamp_gf_TS_InitializeContactDataSingle(libCamp_ge_ContactID_ContactBanshee, UnitTypeGetName("Banshee"), "Characters|CharBanshee", "BansheePortrait");
    libCamp_gf_TS_InitializeContactDataSingle(libCamp_ge_ContactID_ContactBattlecruiser, UnitTypeGetName("Battlecruiser"), "Characters|CharBattlecruiser", "BattlecruiserPortrait");
    libCamp_gf_TS_InitializeContactDataSingle(libCamp_ge_ContactID_ContactCivilianFemale1, UnitTypeGetName("CivilianFemale"), "Characters|CharCivilianFemale1", "FemaleCivilian1Portrait");
    libCamp_gf_TS_InitializeContactDataSingle(libCamp_ge_ContactID_ContactCivilianFemale2, UnitTypeGetName("CivilianFemale"), "Characters|CharCivilianFemale2", "FemaleCivilian2Portrait");
    libCamp_gf_TS_InitializeContactDataSingle(libCamp_ge_ContactID_ContactCivilianMale1, UnitTypeGetName("Civilian"), "Characters|CharCivilian1", "MaleCivilian1Portrait");
    libCamp_gf_TS_InitializeContactDataSingle(libCamp_ge_ContactID_ContactCivilianMale2, UnitTypeGetName("Civilian"), "Characters|CharCivilian2", "MaleCivilian2Portrait");
    libCamp_gf_TS_InitializeContactDataSingle(libCamp_ge_ContactID_ContactGoliathMercenary, UnitTypeGetName("Goliath"), "Characters|CharGoliath", "GoliathPortrait");
    libCamp_gf_TS_InitializeContactDataSingle(libCamp_ge_ContactID_ContactHanson, StringExternal("Param/Value/lib_Camp_C9310C87"), "Characters|CharHanson", "HansonPortrait");
    libCamp_gf_TS_InitializeContactDataSingle(libCamp_ge_ContactID_ContactHellion, UnitTypeGetName("Jackal"), "Characters|CharHellion", "JackalPortrait");
    libCamp_gf_TS_InitializeContactDataSingle(libCamp_ge_ContactID_ContactHighTemplar, UnitTypeGetName("HighTemplar"), "Characters|CharHighTemplar", "HighTemplarPortrait");
    libCamp_gf_TS_InitializeContactDataSingle(libCamp_ge_ContactID_ContactHorner, StringExternal("Param/Value/lib_Camp_5289F428"), "Characters|CharHorner", "HornerPortrait");
    libCamp_gf_TS_InitializeContactDataSingle(libCamp_ge_ContactID_ContactKerrigan, StringExternal("Param/Value/lib_Camp_C3449B56"), "Characters|CharKerrigan", "KerriganPortrait");
    libCamp_gf_TS_InitializeContactDataSingle(libCamp_ge_ContactID_ContactMarine, UnitTypeGetName("Marine"), "Characters|CharMarine", "MarinePortrait");
    libCamp_gf_TS_InitializeContactDataSingle(libCamp_ge_ContactID_ContactMedic, UnitTypeGetName("Medic"), "Characters|CharMedic", "MedicPortrait");
    libCamp_gf_TS_InitializeContactDataSingle(libCamp_ge_ContactID_ContactMedivac, UnitTypeGetName("Dropship"), "Characters|CharMedivac", "MedivacPortrait");
    libCamp_gf_TS_InitializeContactDataSingle(libCamp_ge_ContactID_ContactMiraHan, StringExternal("Param/Value/lib_Camp_B53F6AE0"), "Characters|CharHan", "HanPortrait");
    libCamp_gf_TS_InitializeContactDataSingle(libCamp_ge_ContactID_ContactNarud, StringExternal("Param/Value/lib_Camp_A869087A"), "Characters|CharNarud", "NarudPortrait");
    libCamp_gf_TS_InitializeContactDataSingle(libCamp_ge_ContactID_ContactNova, StringExternal("Param/Value/lib_Camp_8C2EB2DA"), "Characters|CharNova", "NovaPortrait");
    libCamp_gf_TS_InitializeContactDataSingle(libCamp_ge_ContactID_ContactOrlan, StringExternal("Param/Value/lib_Camp_F4FB4566"), "Characters|CharOrlan", "OrlanPortrait");
    libCamp_gf_TS_InitializeContactDataSingle(libCamp_ge_ContactID_ContactRaynor, StringExternal("Param/Value/lib_Camp_A7E5EEF3"), "Characters|CharRaynor", "RaynorCommanderPortrait");
    libCamp_gf_TS_InitializeContactDataSingle(libCamp_ge_ContactID_ContactRaynorMarine, StringExternal("Param/Value/lib_Camp_8347FFD5"), "Characters|CharRaynor", "RaynorMarinePortrait");
    libCamp_gf_TS_InitializeContactDataSingle(libCamp_ge_ContactID_ContactReaper, UnitTypeGetName("Reaper"), "Characters|CharReaper", "ReaperPortrait");
    libCamp_gf_TS_InitializeContactDataSingle(libCamp_ge_ContactID_ContactSCV, UnitTypeGetName("SCV"), "Characters|CharSCV", "SCVPortrait");
    libCamp_gf_TS_InitializeContactDataSingle(libCamp_ge_ContactID_ContactSelendis, StringExternal("Param/Value/lib_Camp_DAAA402F"), "Characters|CharSelendis", "SelendisPortrait");
    libCamp_gf_TS_InitializeContactDataSingle(libCamp_ge_ContactID_ContactSiegeTank, UnitTypeGetName("SiegeTank"), "Characters|CharSiegeTank", "SiegeTankPortrait");
    libCamp_gf_TS_InitializeContactDataSingle(libCamp_ge_ContactID_ContactSwann, StringExternal("Param/Value/lib_Camp_6A371C69"), "Characters|CharSwann", "SwannPortrait");
    libCamp_gf_TS_InitializeContactDataSingle(libCamp_ge_ContactID_ContactTosh, StringExternal("Param/Value/lib_Camp_F7A848C0"), "Characters|CharTosh", "ToshPortrait");
    libCamp_gf_TS_InitializeContactDataSingle(libCamp_ge_ContactID_ContactTychus, StringExternal("Param/Value/lib_Camp_A1CBBD0C"), "Characters|CharTychus", "TychusPortrait");
    libCamp_gf_TS_InitializeContactDataSingle(libCamp_ge_ContactID_ContactValerianMengsk, StringExternal("Param/Value/lib_Camp_0F8F976C"), "Characters|CharValerian", "ValerianPortrait");
    libCamp_gf_TS_InitializeContactDataSingle(libCamp_ge_ContactID_ContactViking, UnitTypeGetName("VikingFighter"), "Characters|CharViking", "VikingFighterPortrait");
    libCamp_gf_TS_InitializeContactDataSingle(libCamp_ge_ContactID_ContactWarfield, StringExternal("Param/Value/lib_Camp_1B9DE67B"), "Characters|CharWarfield", "PortraitWarfield");
    libCamp_gf_TS_InitializeContactDataSingle(libCamp_ge_ContactID_ContactZealot, UnitTypeGetName("Zealot"), "Characters|CharZealot", "ZealotPortrait");
    libCamp_gf_TS_InitializeContactDataSingle(libCamp_ge_ContactID_ContactZeratul, StringExternal("Param/Value/lib_Camp_A2B2661A"), "Characters|CharZeratul", "ZeratulPortrait");
}

void libCamp_gf_TS_LockUnlockMissionIfCondition (bool lp_lockUnlockOption, int lp_mission, bool lp_condition) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_condition == true) && (lp_lockUnlockOption == false) && (libCamp_gf_MissionStatus(lp_mission) == libCamp_ge_MissionStatus_Locked)) {
        libCamp_gf_TS_MarkMissionAsStatus(lp_mission, libCamp_ge_MissionStatus_Available);
    }

    if ((lp_condition == true) && (lp_lockUnlockOption == true) && (libCamp_gf_MissionStatus(lp_mission) == libCamp_ge_MissionStatus_Available)) {
        libCamp_gf_TS_MarkMissionAsStatus(lp_mission, libCamp_ge_MissionStatus_Locked);
    }

}

void libCamp_gf_TS_SetLastSuccessfulMission (int lp_mission) {
    // Variable Declarations
    int lv_indexMission;

    // Automatic Variable Declarations
    int auto32A829D7_i;

    // Variable Initialization
    lv_indexMission = libCamp_ge_MapID_MapNone;

    // Implementation
    auto32A829D7_i = libCamp_gv_TSC_MISSION_FIRST;
    while (auto32A829D7_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[auto32A829D7_i];
        if ((lv_indexMission == lp_mission)) {
            ConversationDataStateSetValue(ConversationDataStateIndex("MissionLast", (lv_indexMission)), 1);
        }
        else {
            ConversationDataStateSetValue(ConversationDataStateIndex("MissionLast", (lv_indexMission)), 0);
        }
        auto32A829D7_i = auto32A829D7_i + 1;
    }
}

void libCamp_gf_TS_UpdateNewMissionOpened () {
    // Variable Declarations
    bool lv_opened;
    int lv_indexMission;

    // Automatic Variable Declarations
    int auto526B2920_i;

    // Variable Initialization
    lv_indexMission = libCamp_ge_MapID_MapNone;

    // Implementation
    auto526B2920_i = libCamp_gv_TSC_MISSION_FIRST;
    while (auto526B2920_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[auto526B2920_i];
        if ((libCamp_gf_MissionStatusAge(lv_indexMission, libCamp_ge_MissionStatus_Available) == 1)) {
            ConversationDataStateSetValue("NewMissionOpened", 1);
            return ;
        }

        auto526B2920_i = auto526B2920_i + 1;
    }
    ConversationDataStateSetValue("NewMissionOpened", 0);
}

void libCamp_gf_LaunchMission (int lp_mission, bool lp_simulationOnOff, int lp_difficulty) {
    // Variable Declarations
    int lv_planet;
    text lv_body;
    int lv_missionPicked;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_planet = libCamp_ge_PlanetID_PlanetNone;
    lv_body = StringToText("");
    lv_missionPicked = libCamp_ge_MapID_MapNone;

    // Implementation
    lv_missionPicked = lp_mission;
    if ((libCamp_gv_tS_MissionABChoice[(lp_mission)] != null) && (lp_simulationOnOff == false)) {
        libCamp_gv_tS_MissionABChoiceResult = libCamp_ge_MapID_MapNone;
        TriggerExecute(libCamp_gv_tS_MissionABChoice[(lp_mission)], true, true);
        if ((libCamp_gv_tS_MissionABChoiceResult == libCamp_ge_MapID_MapNone)) {
            return ;
        }
        else {
            lv_missionPicked = libCamp_gv_tS_MissionABChoiceResult;
        }
    }

    if (((libCamp_gf_TS_GameFullyDownloaded() == true) || (lp_simulationOnOff == false)) && (libCamp_gv_tS_MissionBriefing[(lv_missionPicked)] != null)) {
        TriggerExecute(libCamp_gv_tS_MissionBriefing[(lv_missionPicked)], true, true);
    }

    libCamp_gf_PrepareForMission(lv_missionPicked, lp_simulationOnOff, false, lp_difficulty);
    GameOver(1, c_gameOverVictory, false, false);
}

text libCamp_gf_MercName (int lp_mercID) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tS_MercNames[(lp_mercID)];
}

text libCamp_gf_MercDescription (int lp_mercID) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tS_MercDescriptions[(lp_mercID)];
}

int libCamp_gf_MercCost (int lp_mercID) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tS_MercCost[(lp_mercID)];
}

int libCamp_gf_MercTechSubgroup (int lp_mercID, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tS_MercTechSubGroup[(lp_mercID)][lp_index];
}

int libCamp_gf_MercCount (int lp_mercID, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tS_MercUnitCount[(lp_mercID)][lp_index];
}

text libCamp_gf_MercUnitText (int lp_mercID) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tS_MercUnitText[(lp_mercID)];
}

string libCamp_gf_MercUnitText2 (int lp_mercID) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tS_MercUnitType[(lp_mercID)];
}

text libCamp_gf_MercAvailablityText (int lp_mercID) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tS_MercAvailabilityText[(lp_mercID)];
}

text libCamp_gf_MercSpecialText (int lp_mercID) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tS_MercSpecialText[(lp_mercID)];
}

string libCamp_gf_MercPortraitModel (int lp_mercID) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tS_MercPortrait[(lp_mercID)];
}

string libCamp_gf_MercVideo (int lp_mercID) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tS_MercVideo[(lp_mercID)];
}

string libCamp_gf_MercUpgrade (int lp_mercID) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tS_MercUpgrade[(lp_mercID)];
}

bool libCamp_gf_MercStatusCheck (int lp_mercID, int lp_status) {
    // Automatic Variable Declarations
    // Implementation
    return (libCamp_gv_tSX_MercStatus[(lp_mercID)] == (lp_status));
}

int libCamp_gf_CostofPurchasedMerc () {
    // Variable Declarations
    int lv_indexMerc;
    int lv_cost;

    // Automatic Variable Declarations
    int autoB964D864_i;

    // Variable Initialization
    lv_indexMerc = libCamp_ge_StoryMercID_MercNone;

    // Implementation
    lv_cost = 0;
    autoB964D864_i = libCamp_gv_TSC_MERC_FIRST;
    while (autoB964D864_i <= libCamp_gv_TSC_MERC_LAST) {
        lv_indexMerc = libCamp_gv_tS_MercID[autoB964D864_i];
        if ((libCamp_gf_MercStatusCheck(lv_indexMerc, libCamp_ge_StoryMercStatus_Purchased) == true)) {
            lv_cost += libCamp_gf_MercCost(lv_indexMerc);
        }

        autoB964D864_i = autoB964D864_i + 1;
    }
    return lv_cost;
}

abilcmd libCamp_gf_TS_MercAbilityCommand (int lp_mercID, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tS_MercAbilityCommands[(lp_mercID)][lp_index];
}

void libCamp_gf_SetMercStatus (int lp_mercID, int lp_status) {
    // Automatic Variable Declarations
    // Implementation
    libCamp_gv_tSX_MercStatus[(lp_mercID)] = (lp_status);
}

void libCamp_gf_TS_InitializeMercDataSingle (int lp_iD, text lp_name, text lp_description, int lp_cost, int lp_techSubgroup1, int lp_unitCount1, int lp_techSubgroup2, int lp_unitCount2, text lp_unitText, string lp_unitType, text lp_availabilityText, text lp_specialText, string lp_portrait, string lp_video, abilcmd lp_command1, abilcmd lp_command2, abilcmd lp_command3, string lp_upgrade, string lp_hiredImage, string lp_noCreditImage) {
    // Variable Declarations
    int lv_mercIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_mercIndex = (lp_iD);
    libCamp_gv_tS_MercID[lv_mercIndex] = lp_iD;
    libCamp_gv_tS_MercNames[lv_mercIndex] = lp_name;
    libCamp_gv_tS_MercDescriptions[lv_mercIndex] = lp_description;
    libCamp_gv_tS_MercCost[lv_mercIndex] = lp_cost;
    libCamp_gv_tS_MercTechSubGroup[lv_mercIndex][1] = lp_techSubgroup1;
    libCamp_gv_tS_MercUnitCount[lv_mercIndex][1] = lp_unitCount1;
    libCamp_gv_tS_MercTechSubGroup[lv_mercIndex][2] = lp_techSubgroup2;
    libCamp_gv_tS_MercUnitCount[lv_mercIndex][2] = lp_unitCount2;
    libCamp_gv_tS_MercUnitText[lv_mercIndex] = lp_unitText;
    libCamp_gv_tS_MercUnitType[lv_mercIndex] = lp_unitType;
    libCamp_gv_tS_MercAvailabilityText[lv_mercIndex] = lp_availabilityText;
    libCamp_gv_tS_MercSpecialText[lv_mercIndex] = lp_specialText;
    libCamp_gv_tS_MercPortrait[lv_mercIndex] = lp_portrait;
    libCamp_gv_tS_MercVideo[lv_mercIndex] = lp_video;
    libCamp_gv_tSX_MercStatus[lv_mercIndex] = libCamp_ge_StoryMercStatus_Locked;
    libCamp_gv_tS_MercAbilityCommands[lv_mercIndex][1] = lp_command1;
    libCamp_gv_tS_MercAbilityCommands[lv_mercIndex][2] = lp_command2;
    libCamp_gv_tS_MercAbilityCommands[lv_mercIndex][3] = lp_command3;
    libCamp_gv_tS_MercUpgrade[lv_mercIndex] = lp_upgrade;
    libCamp_gv_tS_MercHiredImage[lv_mercIndex] = lp_hiredImage;
    libCamp_gv_tS_MercNoCreditImage[lv_mercIndex] = lp_noCreditImage;
}

void libCamp_gf_TS_InitializeMercData () {
    // Automatic Variable Declarations
    // Implementation
    libCamp_gf_TS_InitializeMercDataSingle(libCamp_ge_StoryMercID_MercKelmorianMercenaries, StringExternal("Param/Value/lib_Camp_5709963B"), StringExternal("Param/Value/lib_Camp_82484E1D"), 35000, libCamp_ge_StoryTechGroup_StoryTechGroupInfantryMarine, 4, libCamp_ge_StoryTechGroup_StoryTechGroupNone, 0, StringExternal("Param/Value/lib_Camp_E6C595F8"), "WarPig", StringToText(""), StringExternal("Param/Value/lib_Camp_84A6C943"), "MarineMercenaryPortrait", "Assets\\Textures\\merccontract_marines.ogv", AbilityCommand("SummonMercenaries", 0), null, null, "HireKelmorianMinersPH", "Assets\\Textures\\ui_mercenaries_marinemercenaryportrait_hired.dds", "Assets\\Textures\\ui_mercenaries_marinemercenaryportrait_nocredit.dds");
    libCamp_gf_TS_InitializeMercDataSingle(libCamp_ge_StoryMercID_MercDevilDogs, StringExternal("Param/Value/lib_Camp_641BF2D2"), StringExternal("Param/Value/lib_Camp_71DB1873"), 25000, libCamp_ge_StoryTechGroup_StoryTechGroupInfantryFirebat, 2, libCamp_ge_StoryTechGroup_StoryTechGroupNone, 0, StringExternal("Param/Value/lib_Camp_6C11495B"), "DevilDog", StringToText(""), StringExternal("Param/Value/lib_Camp_CB897CEB"), "FirebatMercenaryPortrait", "Assets\\Textures\\merccontract_firebats.ogv", AbilityCommand("SummonMercenaries", 1), null, null, "HireDevilDogsPH", "Assets\\Textures\\ui_mercenaries_firebatmercenaryportrait_hired.dds", "Assets\\Textures\\ui_mercenaries_firebatmercenaryportrait_nocredit.dds");
    libCamp_gf_TS_InitializeMercDataSingle(libCamp_ge_StoryMercID_MercHammerSecurities, StringExternal("Param/Value/lib_Camp_C85BB3E4"), StringExternal("Param/Value/lib_Camp_85BC4731"), 30000, libCamp_ge_StoryTechGroup_StoryTechGroupInfantryMarauder, 2, libCamp_ge_StoryTechGroup_StoryTechGroupNone, 0, StringExternal("Param/Value/lib_Camp_79400908"), "HammerSecurity", StringToText(""), StringExternal("Param/Value/lib_Camp_8F80A835"), "MarauderMercenaryPortrait", "Assets\\Textures\\merccontract_marauders.ogv", AbilityCommand("SummonMercenaries", 3), null, null, "HireHammerSecuritiesPH", "Assets\\Textures\\ui_mercenaries_maraudermercenaryportrait_hired.dds", "Assets\\Textures\\ui_mercenaries_maraudermercenaryportrait_nocredit.dds");
    libCamp_gf_TS_InitializeMercDataSingle(libCamp_ge_StoryMercID_MercSpartanCompany, StringExternal("Param/Value/lib_Camp_975FA3A7"), StringExternal("Param/Value/lib_Camp_B11498BE"), 40000, libCamp_ge_StoryTechGroup_StoryTechGroupVehiclesGoliath, 2, libCamp_ge_StoryTechGroup_StoryTechGroupNone, 0, StringExternal("Param/Value/lib_Camp_28873B56"), "SpartanCompany", StringToText(""), StringExternal("Param/Value/lib_Camp_6EF98CCD"), "GoliathMercenaryPortrait", "Assets\\Textures\\merccontract_goliaths.ogv", AbilityCommand("SummonMercenaries", 2), null, null, "HireSpartanCompanyPH", "Assets\\Textures\\ui_mercenaries_goliathmercenaryportrait_hired.dds", "Assets\\Textures\\ui_mercenaries_goliathmercenaryportrait_nocredit.dds");
    libCamp_gf_TS_InitializeMercDataSingle(libCamp_ge_StoryMercID_MercSiegeBreakers, StringExternal("Param/Value/lib_Camp_B3664797"), StringExternal("Param/Value/lib_Camp_FDD5463C"), 45000, libCamp_ge_StoryTechGroup_StoryTechGroupVehiclesSiegeTank, 2, libCamp_ge_StoryTechGroup_StoryTechGroupNone, 0, StringExternal("Param/Value/lib_Camp_6C8DF40F"), "SiegeBreaker", StringToText(""), StringExternal("Param/Value/lib_Camp_6254E3B0"), "SiegeTankMercenaryPortrait", "Assets\\Textures\\merccontract_siegetanks.ogv", AbilityCommand("SummonMercenaries", 4), null, null, "HireSiegeBreakersPH", "Assets\\Textures\\ui_mercenaries_siegetankmercenaryportrait_hired.dds", "Assets\\Textures\\ui_mercenaries_siegetankmercenaryportrait_nocredit.dds");
    libCamp_gf_TS_InitializeMercDataSingle(libCamp_ge_StoryMercID_MercHelsAngels, StringExternal("Param/Value/lib_Camp_058D22C6"), StringExternal("Param/Value/lib_Camp_43297AFD"), 45000, libCamp_ge_StoryTechGroup_StoryTechGroupStarshipsViking, 3, libCamp_ge_StoryTechGroup_StoryTechGroupNone, 0, StringExternal("Param/Value/lib_Camp_BBF535E6"), "HelsAngelFighter", StringToText(""), StringExternal("Param/Value/lib_Camp_EF94B48A"), "VikingMercenaryFighterPortrait", "Assets\\Textures\\merccontract_viking.ogv", AbilityCommand("SummonMercenaries", 5), null, null, "HireHelsAngelsPH", "Assets\\Textures\\ui_mercenaries_vikingmercenaryfighterportrait_hired.dds", "Assets\\Textures\\ui_mercenaries_vikingmercenaryfighterportrait_nocredit.dds");
    libCamp_gf_TS_InitializeMercDataSingle(libCamp_ge_StoryMercID_MercDuskWing, StringExternal("Param/Value/lib_Camp_7FEAD837"), StringExternal("Param/Value/lib_Camp_F2AE798E"), 60000, libCamp_ge_StoryTechGroup_StoryTechGroupStarshipsBanshee, 2, libCamp_ge_StoryTechGroup_StoryTechGroupNone, 0, StringExternal("Param/Value/lib_Camp_D68DB969"), "DuskWing", StringToText(""), StringExternal("Param/Value/lib_Camp_E31332D4"), "BansheeMercenaryPortrait", "Assets\\Textures\\merccontract_banshees.ogv", AbilityCommand("SummonMercenaries", 6), null, null, "HireDuskWingPH", "Assets\\Textures\\ui_mercenaries_bansheemercenaryportrait_hired.dds", "Assets\\Textures\\ui_mercenaries_bansheemercenaryportrait_nocredit.dds");
    libCamp_gf_TS_InitializeMercDataSingle(libCamp_ge_StoryMercID_MercDukesRevenge, StringExternal("Param/Value/lib_Camp_F8E5AF99"), StringExternal("Param/Value/lib_Camp_EA7988FC"), 80000, libCamp_ge_StoryTechGroup_StoryTechGroupStarshipsBattlecruiser, 1, libCamp_ge_StoryTechGroup_StoryTechGroupNone, 0, StringExternal("Param/Value/lib_Camp_75C95FB1"), "DukesRevenge", StringToText(""), StringExternal("Param/Value/lib_Camp_AA55AF0B"), "BattlecruiserMercenaryPortrait", "Assets\\Textures\\merccontract_battlecruisers.ogv", AbilityCommand("SummonMercenaries", 7), null, null, "HireDukesRevenge", "Assets\\Textures\\ui_mercenaries_battlecruisermercenaryportrait_hired.dds", "Assets\\Textures\\ui_mercenaries_battlecruisermercenaryportrait_nocredit.dds");
}

void libCamp_gf_TS_ResetMercData () {
    // Variable Declarations
    int lv_indexMerc;

    // Automatic Variable Declarations
    int auto76E5E1B9_i;

    // Variable Initialization
    lv_indexMerc = libCamp_ge_StoryMercID_MercNone;

    // Implementation
    auto76E5E1B9_i = libCamp_gv_TSC_MERC_FIRST;
    while (auto76E5E1B9_i <= libCamp_gv_TSC_MERC_LAST) {
        lv_indexMerc = libCamp_gv_tS_MercID[auto76E5E1B9_i];
        libCamp_gf_SetMercStatus(lv_indexMerc, libCamp_ge_StoryMercStatus_Locked);
        auto76E5E1B9_i = auto76E5E1B9_i + 1;
    }
}

void libCamp_gf_TS_ApplyMercenaryTech (int lp_player) {
    // Variable Declarations
    int lv_indexMerc;
    bool lv_allowDisallow;
    int lv_abilityCommandIndex;

    // Automatic Variable Declarations
    int autoBF7CB687_i;
    const int auto546E7D8E_ae = libCamp_gv_TSC_MERC_LAST2;
    const int auto546E7D8E_ai = 1;

    // Variable Initialization
    lv_indexMerc = libCamp_ge_StoryMercID_MercNone;
    lv_allowDisallow = true;

    // Implementation
    autoBF7CB687_i = libCamp_gv_TSC_MERC_FIRST;
    while (autoBF7CB687_i <= libCamp_gv_TSC_MERC_LAST) {
        lv_indexMerc = libCamp_gv_tS_MercID[autoBF7CB687_i];
        if ((libCamp_gf_MercStatusCheck(lv_indexMerc, libCamp_ge_StoryMercStatus_Purchased) == true)) {
            lv_allowDisallow = true;
        }
        else {
            lv_allowDisallow = false;
        }
        lv_abilityCommandIndex = 1;
        for ( ; ( (auto546E7D8E_ai >= 0 && lv_abilityCommandIndex <= auto546E7D8E_ae) || (auto546E7D8E_ai < 0 && lv_abilityCommandIndex >= auto546E7D8E_ae) ) ; lv_abilityCommandIndex += auto546E7D8E_ai ) {
            if ((libCamp_gf_TS_MercAbilityCommand(lv_indexMerc, lv_abilityCommandIndex) != null)) {
                TechTreeAbilityAllow(lp_player, libCamp_gf_TS_MercAbilityCommand(lv_indexMerc, lv_abilityCommandIndex), lv_allowDisallow);
            }

        }
        if ((lv_allowDisallow == true)) {
            libCamp_gf_AddUnitTypeToUnitHelpPanel(libCamp_gf_MercUnitText2(lv_indexMerc), true, lp_player);
        }

        autoBF7CB687_i = autoBF7CB687_i + 1;
    }
}

void libCamp_gf_TS_UpdateMercStatus () {
    // Variable Declarations
    int lv_indexMerc;
    bool lv_enabled;
    int lv_index;

    // Automatic Variable Declarations
    int auto94ADC81C_i;
    const int auto9CD7260A_ae = libCamp_gv_TSC_MERC_LAST22;
    const int auto9CD7260A_ai = 1;

    // Variable Initialization
    lv_indexMerc = libCamp_ge_StoryMercID_MercNone;

    // Implementation
    auto94ADC81C_i = libCamp_gv_TSC_MERC_FIRST;
    while (auto94ADC81C_i <= libCamp_gv_TSC_MERC_LAST) {
        lv_indexMerc = libCamp_gv_tS_MercID[auto94ADC81C_i];
        lv_enabled = true;
        lv_index = 1;
        for ( ; ( (auto9CD7260A_ai >= 0 && lv_index <= auto9CD7260A_ae) || (auto9CD7260A_ai < 0 && lv_index >= auto9CD7260A_ae) ) ; lv_index += auto9CD7260A_ai ) {
            if ((libCamp_gf_MercTechSubgroup(lv_indexMerc, lv_index) != libCamp_ge_StoryTechGroup_StoryTechGroupNone) && (libCamp_gv_tS_TechGroupState[(libCamp_gf_MercTechSubgroup(lv_indexMerc, lv_index))] != c_purchaseCategoryStateEnabled)) {
                lv_enabled = false;
                break;
            }

        }
        if ((lv_enabled == true)) {
            if ((libCamp_gf_MercStatusCheck(lv_indexMerc, libCamp_ge_StoryMercStatus_Locked) == true)) {
                libCamp_gf_SetMercStatus(lv_indexMerc, libCamp_ge_StoryMercStatus_New);
            }

        }
        else {
            libCamp_gf_SetMercStatus(lv_indexMerc, libCamp_ge_StoryMercStatus_Locked);
        }
        auto94ADC81C_i = auto94ADC81C_i + 1;
    }
}

void libCamp_gf_TS_ApplyMercUpgrades (int lp_player) {
    // Variable Declarations
    int lv_indexMerc;
    bool lv_enabled;
    int lv_index;

    // Automatic Variable Declarations
    int auto373D0882_i;
    const int auto5DBA7D93_ae = libCamp_gv_TSC_MERC_LAST22;
    const int auto5DBA7D93_ai = 1;

    // Variable Initialization
    lv_indexMerc = libCamp_ge_StoryMercID_MercNone;

    // Implementation
    auto373D0882_i = libCamp_gv_TSC_MERC_FIRST;
    while (auto373D0882_i <= libCamp_gv_TSC_MERC_LAST) {
        lv_indexMerc = libCamp_gv_tS_MercID[auto373D0882_i];
        lv_enabled = true;
        lv_index = 1;
        for ( ; ( (auto5DBA7D93_ai >= 0 && lv_index <= auto5DBA7D93_ae) || (auto5DBA7D93_ai < 0 && lv_index >= auto5DBA7D93_ae) ) ; lv_index += auto5DBA7D93_ai ) {
            if ((libCamp_gf_MercTechSubgroup(lv_indexMerc, lv_index) != libCamp_ge_StoryTechGroup_StoryTechGroupNone) && (libCamp_gv_tS_TechGroupState[(libCamp_gf_MercTechSubgroup(lv_indexMerc, lv_index))] != c_purchaseCategoryStateEnabled)) {
                lv_enabled = false;
                break;
            }

        }
        if ((lv_enabled == true)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, libCamp_gf_MercUpgrade(lv_indexMerc), 1);
        }

        auto373D0882_i = auto373D0882_i + 1;
    }
}

void libCamp_gf_DisplayMercenaryPanel (trigger lp_exitCallback) {
    // Variable Declarations
    int lv_indexMerc;
    int lv_index;
    text lv_mercText;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_indexMerc = libCamp_ge_StoryMercID_MercNone;
    lv_mercText = StringToText("");

    // Implementation
    libCamp_gv_tS_MercUIExitCallback = lp_exitCallback;
    libCamp_gf_TS_MercUIUpdateUI();
    libCamp_gf_TS_MercUIGift(libCamp_ge_StoryMercID_MercKelmorianMercenaries);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMercenaryPanel, true);
}

void libCamp_gf_TS_MercUIUpdateUI () {
    // Variable Declarations
    int lv_indexMerc;
    int lv_index;
    text lv_mercText;

    // Automatic Variable Declarations
    int autoA433EE21_i;
    int auto90A2DADE_val;
    int auto6EC12EBE_i;

    // Variable Initialization
    lv_indexMerc = libCamp_ge_StoryMercID_MercNone;
    lv_mercText = StringToText("");

    // Implementation
    if ((libCamp_gv_tS_MercUICreated == false)) {
        libCamp_gv_tS_MercUICreated = true;
        autoA433EE21_i = libCamp_gv_TSC_MERC_FIRST;
        while (autoA433EE21_i <= libCamp_gv_TSC_MERC_LAST) {
            lv_indexMerc = libCamp_gv_tS_MercID[autoA433EE21_i];
            MercenaryCreate(PlayerGroupAll(), c_mercenaryStateDisabled);
            libCamp_gv_tS_MercUIMercenaries[(lv_indexMerc)] = MercenaryLastCreated();
            MercenarySetTitleText(MercenaryLastCreated(), libCamp_gf_MercName(lv_indexMerc));
            MercenarySetDescriptionText(MercenaryLastCreated(), libCamp_gf_MercDescription(lv_indexMerc));
            MercenarySetCost(MercenaryLastCreated(), libCamp_gf_MercCost(lv_indexMerc));
            MercenarySetUnitText(MercenaryLastCreated(), libCamp_gf_MercUnitText(lv_indexMerc));
            MercenarySetSpecialText(MercenaryLastCreated(), libCamp_gf_MercSpecialText(lv_indexMerc));
            MercenarySetModelLink(MercenaryLastCreated(), libCamp_gf_MercPortraitModel(lv_indexMerc));
            MercenarySetScenePath(MercenaryLastCreated(), libCamp_gf_MercVideo(lv_indexMerc));
            auto90A2DADE_val = lv_indexMerc;
            if (auto90A2DADE_val == libCamp_ge_StoryMercID_MercKelmorianMercenaries) {
                MercenarySetScenePath(MercenaryLastCreated(), "Assets\\Textures\\merccontract_marines.ogv");
            }
            else if (auto90A2DADE_val == libCamp_ge_StoryMercID_MercHammerSecurities) {
                MercenarySetScenePath(MercenaryLastCreated(), "Assets\\Textures\\merccontract_marauders.ogv");
            }
            else if (auto90A2DADE_val == libCamp_ge_StoryMercID_MercDevilDogs) {
                MercenarySetScenePath(MercenaryLastCreated(), "Assets\\Textures\\merccontract_firebats.ogv");
            }
            else {
            }
            autoA433EE21_i = autoA433EE21_i + 1;
        }
    }

    auto6EC12EBE_i = libCamp_gv_TSC_MERC_FIRST;
    while (auto6EC12EBE_i <= libCamp_gv_TSC_MERC_LAST) {
        lv_indexMerc = libCamp_gv_tS_MercID[auto6EC12EBE_i];
        MercenarySetImageFilePath(libCamp_gv_tS_MercUIMercenaries[(lv_indexMerc)], null);
        MercenarySetModelLink(libCamp_gv_tS_MercUIMercenaries[(lv_indexMerc)], libCamp_gf_MercPortraitModel(lv_indexMerc));
        if ((libCamp_gf_MercStatusCheck(lv_indexMerc, libCamp_ge_StoryMercStatus_Available) == true)) {
            MercenarySetState(libCamp_gv_tS_MercUIMercenaries[(lv_indexMerc)], c_mercenaryStateEnabled);
            if ((libCamp_gf_MercCost(lv_indexMerc) > libCamp_gf_StoryCredits())) {
                MercenarySetImageFilePath(libCamp_gv_tS_MercUIMercenaries[(lv_indexMerc)], libCamp_gv_tS_MercNoCreditImage[(lv_indexMerc)]);
                MercenarySetModelLink(libCamp_gv_tS_MercUIMercenaries[(lv_indexMerc)], "Invisible");
            }

        }
        else if ((libCamp_gf_MercStatusCheck(lv_indexMerc, libCamp_ge_StoryMercStatus_New) == true)) {
            MercenarySetState(libCamp_gv_tS_MercUIMercenaries[(lv_indexMerc)], c_mercenaryStateNew);
            if ((libCamp_gf_MercCost(lv_indexMerc) > libCamp_gf_StoryCredits())) {
                MercenarySetImageFilePath(libCamp_gv_tS_MercUIMercenaries[(lv_indexMerc)], libCamp_gv_tS_MercNoCreditImage[(lv_indexMerc)]);
                MercenarySetModelLink(libCamp_gv_tS_MercUIMercenaries[(lv_indexMerc)], "Invisible");
            }

        }
        else if ((libCamp_gf_MercStatusCheck(lv_indexMerc, libCamp_ge_StoryMercStatus_Locked) == true)) {
            MercenarySetState(libCamp_gv_tS_MercUIMercenaries[(lv_indexMerc)], c_mercenaryStateDisabled);
        }
        else if ((libCamp_gf_MercStatusCheck(lv_indexMerc, libCamp_ge_StoryMercStatus_Purchased) == true)) {
            MercenarySetState(libCamp_gv_tS_MercUIMercenaries[(lv_indexMerc)], c_mercenaryStatePurchased);
            MercenarySetImageFilePath(libCamp_gv_tS_MercUIMercenaries[(lv_indexMerc)], libCamp_gv_tS_MercHiredImage[(lv_indexMerc)]);
            MercenarySetModelLink(libCamp_gv_tS_MercUIMercenaries[(lv_indexMerc)], "Invisible");
        }
        auto6EC12EBE_i = auto6EC12EBE_i + 1;
    }
}

void libCamp_gf_TS_MercUIGift (int lp_mercGifted) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_mercGifted == libCamp_ge_StoryMercID_MercNone) && (libCamp_gf_MercStatusCheck(lp_mercGifted, libCamp_ge_StoryMercStatus_Purchased) == true)) {
        return ;
    }

    libCamp_gf_SetMercStatus(lp_mercGifted, libCamp_ge_StoryMercStatus_Purchased);
    libCamp_gf_TS_AddRecentMerc(lp_mercGifted);
    MercenaryPurchase(libCamp_gv_tS_MercUIMercenaries[(lp_mercGifted)]);
}

void libCamp_gf_TS_BattleReportUpdate () {
    int init_i;

    // Variable Declarations
    int lv_indexMission;
    int lv_index;
    int lv_count;
    bool[81] lv_isMission;
    int[81] lv_missions;
    int[41] lv_missionCompleted;
    int lv_missionCompletedCount;
    int[81] lv_scenes;
    int lv_indexOuter;
    int lv_indexInner;
    bool lv_swapped;
    int lv_missionSwap;

    // Automatic Variable Declarations
    int auto4E600C23_i;
    int auto43C5E3A7_ae;
    const int auto43C5E3A7_ai = 1;
    int autoED3EE3A4_ae;
    const int autoED3EE3A4_ai = 1;
    int auto66C9F3E9_ae;
    const int auto66C9F3E9_ai = 1;
    int autoECD02CB4_val;
    int auto0F40DF3B_val;
    int auto5402E988_ae;
    const int auto5402E988_ai = 1;
    int auto54ACC2E0_i;

    // Variable Initialization
    lv_indexMission = libCamp_ge_MapID_MapNone;
    for (init_i = 0; init_i <= 80; init_i += 1) {
        lv_missions[init_i] = libCamp_ge_MapID_MapNone;
    }
    for (init_i = 0; init_i <= 40; init_i += 1) {
        lv_missionCompleted[init_i] = libCamp_ge_MapID_MapNone;
    }
    for (init_i = 0; init_i <= 80; init_i += 1) {
        lv_scenes[init_i] = libCamp_ge_SceneID_SceneNone;
    }
    lv_missionSwap = libCamp_ge_MapID_MapNone;

    // Implementation
    if ((libCamp_gv_tS_BattleReportReady == true)) {
        return ;
    }

    libCamp_gv_tS_BattleReportReady = true;
    lv_missionCompletedCount = 0;
    auto4E600C23_i = libCamp_gv_TSC_MISSION_FIRST;
    while (auto4E600C23_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[auto4E600C23_i];
        if (((libCamp_gf_MissionStatusCheck(lv_indexMission, libCamp_ge_MissionStatus_Completed) == true) || ((lv_indexMission == libCamp_ge_MapID_MapTHorner05S) && (libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTValerian01, libCamp_ge_MissionStatus_Completed) == true) && (libCamp_gf_StoryState(libCamp_ge_StoryStateID_StoryStateHorner05sUnlocked) > 0)))) {
            lv_missionCompletedCount += 1;
            lv_missionCompleted[lv_missionCompletedCount] = lv_indexMission;
        }

        auto4E600C23_i = auto4E600C23_i + 1;
    }
    auto43C5E3A7_ae = (lv_missionCompletedCount - 1);
    lv_indexOuter = 1;
    for ( ; ( (auto43C5E3A7_ai >= 0 && lv_indexOuter <= auto43C5E3A7_ae) || (auto43C5E3A7_ai < 0 && lv_indexOuter >= auto43C5E3A7_ae) ) ; lv_indexOuter += auto43C5E3A7_ai ) {
        lv_swapped = false;
        autoED3EE3A4_ae = (lv_missionCompletedCount - lv_indexOuter);
        lv_indexInner = 1;
        for ( ; ( (autoED3EE3A4_ai >= 0 && lv_indexInner <= autoED3EE3A4_ae) || (autoED3EE3A4_ai < 0 && lv_indexInner >= autoED3EE3A4_ae) ) ; lv_indexInner += autoED3EE3A4_ai ) {
            if ((libCamp_gf_MissionStatusAge(lv_missionCompleted[(lv_indexInner + 1)], libCamp_ge_MissionStatus_Completed) > libCamp_gf_MissionStatusAge(lv_missionCompleted[lv_indexInner], libCamp_ge_MissionStatus_Completed))) {
                lv_missionSwap = lv_missionCompleted[lv_indexInner];
                lv_missionCompleted[lv_indexInner] = lv_missionCompleted[(lv_indexInner + 1)];
                lv_missionCompleted[(lv_indexInner + 1)] = lv_missionSwap;
                lv_swapped = true;
            }

        }
        if ((lv_swapped == false)) {
            break;
        }

    }
    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Camp_858B87B2") + IntToText(lv_missionCompletedCount)), false);
    lv_count = 0;
    lv_count += 1;
    lv_isMission[lv_count] = false;
    lv_scenes[lv_count] = libCamp_ge_SceneID_ScenePreRenderedBetterMarine;
    lv_count += 1;
    lv_isMission[lv_count] = false;
    lv_scenes[lv_count] = libCamp_ge_SceneID_SceneTerran01RaynorIntro;
    auto66C9F3E9_ae = lv_missionCompletedCount;
    lv_index = 1;
    for ( ; ( (auto66C9F3E9_ai >= 0 && lv_index <= auto66C9F3E9_ae) || (auto66C9F3E9_ai < 0 && lv_index >= auto66C9F3E9_ae) ) ; lv_index += auto66C9F3E9_ai ) {
        autoECD02CB4_val = lv_missionCompleted[lv_index];
        if (autoECD02CB4_val == libCamp_ge_MapID_MapTZeratul01) {
            lv_count += 1;
            lv_isMission[lv_count] = false;
            lv_scenes[lv_count] = libCamp_ge_SceneID_ScenePreRenderedOldRivals;
        }
        else if (autoECD02CB4_val == libCamp_ge_MapID_MapTValerian01) {
            lv_count += 1;
            lv_isMission[lv_count] = false;
            lv_scenes[lv_count] = libCamp_ge_SceneID_SceneTerran16CharIntro;
        }
        else if (autoECD02CB4_val == libCamp_ge_MapID_MapTHanson03B) {
            lv_count += 1;
            lv_isMission[lv_count] = true;
            lv_missions[lv_count] = libCamp_ge_MapID_MapTHanson03A;
            if ((libCamp_gf_TS_BattleReportMissionCompleted(libCamp_ge_MapID_MapTHanson03A) == true)) {
                lv_count += 1;
                lv_isMission[lv_count] = false;
                lv_scenes[lv_count] = libCamp_ge_SceneID_SceneTerran08HansonEndA;
            }

        }
        else if (autoECD02CB4_val == libCamp_ge_MapID_MapTTosh03B) {
            lv_count += 1;
            lv_isMission[lv_count] = true;
            lv_missions[lv_count] = libCamp_ge_MapID_MapTTosh03A;
            if ((libCamp_gf_TS_BattleReportMissionCompleted(libCamp_ge_MapID_MapTTosh03A) == true)) {
                lv_count += 1;
                lv_isMission[lv_count] = false;
                lv_scenes[lv_count] = libCamp_ge_SceneID_SceneTerran09ToshEndA;
            }

        }
        else if (autoECD02CB4_val == libCamp_ge_MapID_MapTValerian02B) {
            lv_count += 1;
            lv_isMission[lv_count] = true;
            lv_missions[lv_count] = libCamp_ge_MapID_MapTValerian02A;
        }
        else {
        }
        lv_count += 1;
        lv_isMission[lv_count] = true;
        lv_missions[lv_count] = lv_missionCompleted[lv_index];
        auto0F40DF3B_val = lv_missionCompleted[lv_index];
        if (auto0F40DF3B_val == libCamp_ge_MapID_MapTRaynor01) {
            lv_count += 1;
            lv_isMission[lv_count] = false;
            lv_scenes[lv_count] = libCamp_ge_SceneID_SceneTerran04TychusIntro;
        }
        else if (auto0F40DF3B_val == libCamp_ge_MapID_MapTRaynor03) {
            lv_count += 1;
            lv_isMission[lv_count] = false;
            lv_scenes[lv_count] = libCamp_ge_SceneID_SceneTerran05HornerBridgeIntro;
        }
        else if (auto0F40DF3B_val == libCamp_ge_MapID_MapTTychus01) {
            lv_count += 1;
            lv_isMission[lv_count] = false;
            lv_scenes[lv_count] = libCamp_ge_SceneID_SceneTerran15KerriganIntro;
        }
        else if (auto0F40DF3B_val == libCamp_ge_MapID_MapTTychus02) {
            lv_count += 1;
            lv_isMission[lv_count] = false;
            lv_scenes[lv_count] = libCamp_ge_SceneID_SceneTerran03ZeratulsWarning;
        }
        else if (auto0F40DF3B_val == libCamp_ge_MapID_MapTTychus03) {
            lv_count += 1;
            lv_isMission[lv_count] = false;
            lv_scenes[lv_count] = libCamp_ge_SceneID_ScenePreRenderedTheDream;
            lv_count += 1;
            lv_isMission[lv_count] = false;
            lv_scenes[lv_count] = libCamp_ge_SceneID_SceneTerran10RaynorsDream;
        }
        else if (auto0F40DF3B_val == libCamp_ge_MapID_MapTTychus04) {
            lv_count += 1;
            lv_isMission[lv_count] = false;
            lv_scenes[lv_count] = libCamp_ge_SceneID_SceneTerran06ValerianIntro;
        }
        else if (auto0F40DF3B_val == libCamp_ge_MapID_MapTTychus05) {
            lv_count += 1;
            lv_isMission[lv_count] = false;
            lv_scenes[lv_count] = libCamp_ge_SceneID_SceneTerran07BarFight;
        }
        else if (auto0F40DF3B_val == libCamp_ge_MapID_MapTValerian01) {
            lv_count += 1;
            lv_isMission[lv_count] = false;
            lv_scenes[lv_count] = libCamp_ge_SceneID_SceneTerran11CharBatltefield;
        }
        else if (auto0F40DF3B_val == libCamp_ge_MapID_MapTValerian02A) {
            lv_count += 1;
            lv_isMission[lv_count] = true;
            lv_missions[lv_count] = libCamp_ge_MapID_MapTValerian02B;
            lv_count += 1;
            lv_isMission[lv_count] = false;
            lv_scenes[lv_count] = libCamp_ge_SceneID_SceneTerran17CharBattlefieldEnd;
        }
        else if (auto0F40DF3B_val == libCamp_ge_MapID_MapTValerian02B) {
            lv_count += 1;
            lv_isMission[lv_count] = false;
            lv_scenes[lv_count] = libCamp_ge_SceneID_SceneTerran17CharBattlefieldEnd;
        }
        else if (auto0F40DF3B_val == libCamp_ge_MapID_MapTValerian03) {
            lv_count += 1;
            lv_isMission[lv_count] = false;
            lv_scenes[lv_count] = libCamp_ge_SceneID_ScenePreRenderedEnd;
        }
        else if (auto0F40DF3B_val == libCamp_ge_MapID_MapTHanson03A) {
            lv_count += 1;
            lv_isMission[lv_count] = false;
            lv_scenes[lv_count] = libCamp_ge_SceneID_SceneTerran08HansonEndA;
            lv_count += 1;
            lv_isMission[lv_count] = true;
            lv_missions[lv_count] = libCamp_ge_MapID_MapTHanson03B;
            if ((libCamp_gf_TS_BattleReportMissionCompleted(libCamp_ge_MapID_MapTHanson03B) == true)) {
                lv_count += 1;
                lv_isMission[lv_count] = false;
                lv_scenes[lv_count] = libCamp_ge_SceneID_SceneTerran13HansonEndB;
            }

        }
        else if (auto0F40DF3B_val == libCamp_ge_MapID_MapTHanson03B) {
            lv_count += 1;
            lv_isMission[lv_count] = false;
            lv_scenes[lv_count] = libCamp_ge_SceneID_SceneTerran13HansonEndB;
        }
        else if (auto0F40DF3B_val == libCamp_ge_MapID_MapTTosh03A) {
            lv_count += 1;
            lv_isMission[lv_count] = false;
            lv_scenes[lv_count] = libCamp_ge_SceneID_SceneTerran09ToshEndA;
            lv_count += 1;
            lv_isMission[lv_count] = true;
            lv_missions[lv_count] = libCamp_ge_MapID_MapTTosh03B;
            if ((libCamp_gf_TS_BattleReportMissionCompleted(libCamp_ge_MapID_MapTTosh03B) == true)) {
                lv_count += 1;
                lv_isMission[lv_count] = false;
                lv_scenes[lv_count] = libCamp_ge_SceneID_SceneTerran14ToshEndB;
            }

        }
        else if (auto0F40DF3B_val == libCamp_ge_MapID_MapTTosh03B) {
            lv_count += 1;
            lv_isMission[lv_count] = false;
            lv_scenes[lv_count] = libCamp_ge_SceneID_SceneTerran14ToshEndB;
        }
        else if (auto0F40DF3B_val == libCamp_ge_MapID_MapTHorner04) {
            lv_count += 1;
            lv_isMission[lv_count] = false;
            lv_scenes[lv_count] = libCamp_ge_SceneID_SceneTerran12HornerVictory;
        }
        else {
        }
    }
    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Camp_0D654D17") + IntToText(lv_count)), false);
    auto5402E988_ae = lv_count;
    lv_index = 1;
    for ( ; ( (auto5402E988_ai >= 0 && lv_index <= auto5402E988_ae) || (auto5402E988_ai < 0 && lv_index >= auto5402E988_ae) ) ; lv_index += auto5402E988_ai ) {
        if ((lv_isMission[lv_index] == true)) {
            libCamp_gf_TS_BattleReportAddMission(lv_missions[lv_index], c_battleReportStateCompleted, ((lv_count + 1) - lv_index));
            TriggerDebugOutput(1, (IntToText(lv_index) + StringExternal("Param/Value/lib_Camp_39F50B9E") + libCamp_gf_MissionNameInUpperCase(lv_missions[lv_index])), false);
        }
        else {
            libCamp_gf_TS_BattleReportAddScene(lv_scenes[lv_index], ((lv_count + 1) - lv_index));
            TriggerDebugOutput(1, (IntToText(lv_index) + StringExternal("Param/Value/lib_Camp_7BFD3F6C") + libCamp_gv_tS_SceneNames[(lv_scenes[lv_index])]), false);
        }
    }
    auto54ACC2E0_i = libCamp_gv_TSC_MISSION_FIRST;
    while (auto54ACC2E0_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[auto54ACC2E0_i];
        if ((libCamp_gf_MissionStatusCheck(lv_indexMission, libCamp_ge_MissionStatus_Completed) == false) && (lv_indexMission != libCamp_ge_MapID_MapTSecret01) && ((lv_indexMission != libCamp_ge_MapID_MapTHanson03A) || (libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTHanson03B, libCamp_ge_MissionStatus_Completed) == false)) && ((lv_indexMission != libCamp_ge_MapID_MapTHanson03B) || (libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTHanson03A, libCamp_ge_MissionStatus_Completed) == false)) && ((lv_indexMission != libCamp_ge_MapID_MapTTosh03A) || (libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTTosh03B, libCamp_ge_MissionStatus_Completed) == false)) && ((lv_indexMission != libCamp_ge_MapID_MapTTosh03B) || (libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTTosh03A, libCamp_ge_MissionStatus_Completed) == false)) && ((lv_indexMission != libCamp_ge_MapID_MapTValerian02A) || (libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTValerian02B, libCamp_ge_MissionStatus_Completed) == false)) && ((lv_indexMission != libCamp_ge_MapID_MapTValerian02B) || (libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTValerian02A, libCamp_ge_MissionStatus_Completed) == false)) && ((lv_indexMission != libCamp_ge_MapID_MapTHorner05S) || (libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTValerian01, libCamp_ge_MissionStatus_Completed) == false) || (libCamp_gf_StoryState(libCamp_ge_StoryStateID_StoryStateHorner05sUnlocked) == 0))) {
            libCamp_gf_TS_BattleReportAddMission(lv_indexMission, c_battleReportStateHidden, 0);
        }

        auto54ACC2E0_i = auto54ACC2E0_i + 1;
    }
}

text libCamp_gf_TS_BattleReportFormatObjectives (int lp_mission) {
    // Variable Declarations
    text lv_result;
    text lv_resultCompleted;
    text lv_resultDiscovered;
    text lv_resultUndiscovered;
    int lv_indexObj;

    // Automatic Variable Declarations
    int autoC17FB862_i;

    // Variable Initialization
    lv_result = StringToText("");
    lv_resultCompleted = StringToText("");
    lv_resultDiscovered = StringToText("");
    lv_resultUndiscovered = StringToText("");
    lv_indexObj = libCamp_ge_MissionObjective_MissionObjectiveNone;

    // Implementation
    autoC17FB862_i = 1;
    while (autoC17FB862_i <= libCamp_gv_TSC_MISSIONOBJECTIVECOUNT) {
        if (libCamp_gv_tS_MissionObjectives[lp_mission][autoC17FB862_i] != 0) {
            lv_indexObj = libCamp_gv_tS_MissionObjectives[lp_mission][autoC17FB862_i];
            if ((libCamp_gf_MissionObjectiveStateCheck(lv_indexObj, libCamp_ge_MissionObjectiveState_ObjectiveCompleted) == true)) {
                lv_resultCompleted = (lv_resultCompleted + StringExternal("Param/Value/lib_Camp_5B0EDBCC") + libCamp_gf_MissionObjectiveName(lv_indexObj) + StringExternal("Param/Value/lib_Camp_DA804F5F") + StringExternal("Param/Value/lib_Camp_E58D633B") + StringExternal("Param/Value/lib_Camp_1EA77982"));
            }
            else if ((libCamp_gf_MissionObjectiveStateCheck(lv_indexObj, libCamp_ge_MissionObjectiveState_ObjectiveAvailable) == true)) {
                lv_resultDiscovered = (lv_resultDiscovered + StringExternal("Param/Value/lib_Camp_93EBC434") + libCamp_gf_MissionObjectiveName(lv_indexObj) + StringExternal("Param/Value/lib_Camp_9301E42D") + StringExternal("Param/Value/lib_Camp_13F0DB33") + StringExternal("Param/Value/lib_Camp_B3E383E8"));
            }
            else if ((libCamp_gf_MissionObjectiveStateCheck(lv_indexObj, libCamp_ge_MissionObjectiveState_ObjectiveUndiscovered) == true)) {
                lv_resultUndiscovered = (lv_resultUndiscovered + StringExternal("Param/Value/lib_Camp_2E204251") + StringExternal("Param/Value/lib_Camp_916333EC") + StringExternal("Param/Value/lib_Camp_769DAC78") + StringExternal("Param/Value/lib_Camp_3AC4D3FF"));
            }
        }
        autoC17FB862_i = autoC17FB862_i + 1;
    }
    lv_result = (lv_resultCompleted + lv_resultDiscovered + lv_resultUndiscovered);
    return lv_result;
}

text libCamp_gf_TS_BattleReportFormatBestTime (int lp_mission, int lp_difficulty) {
    // Variable Declarations
    text lv_result;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_result = StringToText("");

    // Implementation
    lv_result = libCamp_gf_FormatTimeCampaign(libCamp_gf_MissionCompleteBestTime(lp_mission, lp_difficulty));
    lv_result = (StringExternal("Param/Value/lib_Camp_54775210") + StringExternal("Param/Value/lib_Camp_058AD239") + lv_result + StringExternal("Param/Value/lib_Camp_379EE81C"));
    return lv_result;
}

bool libCamp_gf_TS_BattleReportMissionCompleted (int lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCamp_gf_MissionStatusCheck(lp_mission, libCamp_ge_MissionStatus_Completed) == true)) {
        return true;
    }

    if (((libCamp_gf_MissionDifficultyCompleted(lp_mission, 1) == true) || (libCamp_gf_MissionDifficultyCompleted(lp_mission, 2) == true) || (libCamp_gf_MissionDifficultyCompleted(lp_mission, 3) == true) || (libCamp_gf_MissionDifficultyCompleted(lp_mission, 4) == true))) {
        return true;
    }

    return false;
}

void libCamp_gf_TS_BattleReportAddMission (int lp_mission, int lp_state, int lp_priority) {
    // Variable Declarations
    int lv_index;
    int lv_indexMission;
    int lv_indexAchievement;
    int lv_indexObjective;
    int lv_bonus;
    int lv_bonusMax;
    int lv_researchPointZergMax;
    int lv_researchPointProtMax;
    int lv_researchPointZerg;
    int lv_researchPointProt;
    text lv_researchText;
    bool lv_missionCompleted;

    // Automatic Variable Declarations
    const int autoFAD0F74B_ae = libCamp_gv_tSC_MAXMAPACHIEVEMENT;
    const int autoFAD0F74B_ai = 1;
    int auto0A8AEE93_i;

    // Variable Initialization
    lv_indexObjective = libCamp_ge_MissionObjective_MissionObjectiveNone;

    // Implementation
    lv_indexMission = (lp_mission);
    BattleReportCreate(PlayerGroupAll(), libCamp_gf_MissionNameInUpperCase(lp_mission), c_battleReportTypeMission, lp_state);
    libCamp_gv_tS_BattleReportMissions[lv_indexMission] = BattleReportLastCreated();
    BattleReportSetButtonImage(BattleReportLastCreated(), libCamp_gv_tS_MissionBattleReportIcon[(lp_mission)]);
    BattleReportSetMissionText(BattleReportLastCreated(), libCamp_gf_MissionNameInUpperCase(lp_mission));
    BattleReportSetMissionImage(BattleReportLastCreated(), libCamp_gv_tS_MissionBattleReportImage[(lp_mission)]);
    lv_index = 1;
    for ( ; ( (autoFAD0F74B_ai >= 0 && lv_index <= autoFAD0F74B_ae) || (autoFAD0F74B_ai < 0 && lv_index >= autoFAD0F74B_ae) ) ; lv_index += autoFAD0F74B_ai ) {
        if ((libCamp_gv_tS_MapAchievements[(lp_mission)][lv_index] != null)) {
            BattleReportAddAchievement(BattleReportLastCreated(), libCamp_gv_tS_MapAchievements[(lp_mission)][lv_index]);
        }

    }
    auto0A8AEE93_i = 1;
    while (auto0A8AEE93_i <= libCamp_gv_TSC_MISSIONOBJECTIVECOUNT) {
        if (libCamp_gv_tS_MissionObjectives[lp_mission][auto0A8AEE93_i] != 0) {
            lv_indexObjective = libCamp_gv_tS_MissionObjectives[lp_mission][auto0A8AEE93_i];
            lv_bonus += libCamp_gf_MissionObjectiveRewardsEarned(lv_indexObjective);
            lv_bonusMax += (libCamp_gf_MissionObjectiveItemCount(lv_indexObjective) * libCamp_gf_MissionObjectiveCreditsPerItem(lv_indexObjective));
        }
        auto0A8AEE93_i = auto0A8AEE93_i + 1;
    }
    if ((lv_bonusMax > 0)) {
        BattleReportSetBonusTitle(BattleReportLastCreated(), StringExternal("Param/Value/lib_Camp_350E8EA1"));
        BattleReportSetBonusText(BattleReportLastCreated(), (StringExternal("Param/Value/lib_Camp_40F61B93") + libCamp_gf_FormatCredits(lv_bonus, true) + StringExternal("Param/Value/lib_Camp_C3ACEFBC") + libCamp_gf_FormatCredits(lv_bonusMax, true) + StringExternal("Param/Value/lib_Camp_CC270BAB")));
    }
    else {
        BattleReportSetBonusTitle(BattleReportLastCreated(), StringToText(""));
        BattleReportSetBonusText(BattleReportLastCreated(), StringToText(""));
    }
    lv_researchPointZergMax = libCamp_gf_TS_StoryResearchMissionOpportunities(lp_mission, libCamp_ge_StoryResearchCategory_ResearchCategoryZerg);
    lv_researchPointZergMax += libCamp_gf_TS_MissionRewardResearchPoints(lp_mission, libCamp_ge_StoryResearchCategory_ResearchCategoryZerg);
    lv_researchPointProtMax = libCamp_gf_TS_StoryResearchMissionOpportunities(lp_mission, libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss);
    lv_researchPointProtMax += libCamp_gf_TS_MissionRewardResearchPoints(lp_mission, libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss);
    lv_researchPointZerg = libCamp_gf_StoryResearchMissionProgress(lp_mission, libCamp_ge_StoryResearchCategory_ResearchCategoryZerg);
    lv_researchPointProt = libCamp_gf_StoryResearchMissionProgress(lp_mission, libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss);
    if ((libCamp_gf_MissionStatusCheck(lp_mission, libCamp_ge_MissionStatus_Completed) == true)) {
        lv_researchPointZerg += libCamp_gf_TS_MissionRewardResearchPoints(lp_mission, libCamp_ge_StoryResearchCategory_ResearchCategoryZerg);
        lv_researchPointProt += libCamp_gf_TS_MissionRewardResearchPoints(lp_mission, libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss);
    }

    if (((lv_researchPointZergMax > 0) || (lv_researchPointProtMax > 0))) {
        BattleReportSetResearchTitle(BattleReportLastCreated(), StringExternal("Param/Value/lib_Camp_CE047F63"));
        lv_researchText = StringToText("");
        if ((lv_researchPointZergMax > 0)) {
            lv_researchText = (lv_researchText + StringExternal("Param/Value/lib_Camp_D4749C57") + IntToText(lv_researchPointZerg) + StringExternal("Param/Value/lib_Camp_D3B16190") + IntToText(lv_researchPointZergMax) + StringExternal("Param/Value/lib_Camp_D5620D04") + StringExternal("Param/Value/lib_Camp_A8A249A6"));
            if ((lv_researchPointProtMax > 0)) {
                lv_researchText = (lv_researchText + StringExternal("Param/Value/lib_Camp_ABBF8DB2"));
            }

        }

        if ((lv_researchPointProtMax > 0)) {
            lv_researchText = (lv_researchText + StringExternal("Param/Value/lib_Camp_2D105E6B") + IntToText(lv_researchPointProt) + StringExternal("Param/Value/lib_Camp_413A4A21") + IntToText(lv_researchPointProtMax) + StringExternal("Param/Value/lib_Camp_02921D85") + StringExternal("Param/Value/lib_Camp_B13DB64B"));
        }

        BattleReportSetResearchText(BattleReportLastCreated(), lv_researchText);
    }

    BattleReportSetDifficultyLevelCompleted(BattleReportLastCreated(), 1, libCamp_gf_MissionDifficultyCompleted(lp_mission, 1));
    BattleReportSetDifficultyLevelCompleted(BattleReportLastCreated(), 2, libCamp_gf_MissionDifficultyCompleted(lp_mission, 2));
    BattleReportSetDifficultyLevelCompleted(BattleReportLastCreated(), 3, libCamp_gf_MissionDifficultyCompleted(lp_mission, 3));
    BattleReportSetDifficultyLevelCompleted(BattleReportLastCreated(), 4, libCamp_gf_MissionDifficultyCompleted(lp_mission, 4));
    BattleReportSetDifficultyLevelBestTimeText(BattleReportLastCreated(), 1, libCamp_gf_TS_BattleReportFormatBestTime(lp_mission, 1));
    BattleReportSetDifficultyLevelBestTimeText(BattleReportLastCreated(), 2, libCamp_gf_TS_BattleReportFormatBestTime(lp_mission, 2));
    BattleReportSetDifficultyLevelBestTimeText(BattleReportLastCreated(), 3, libCamp_gf_TS_BattleReportFormatBestTime(lp_mission, 3));
    BattleReportSetDifficultyLevelBestTimeText(BattleReportLastCreated(), 4, libCamp_gf_TS_BattleReportFormatBestTime(lp_mission, 4));
    BattleReportSetPriority(BattleReportLastCreated(), lp_priority);
    if (((lp_mission != libCamp_ge_MapID_MapTHanson03B) && (lp_mission != libCamp_ge_MapID_MapTTosh03B) && (lp_mission != libCamp_ge_MapID_MapTValerian02B) && ((lp_mission != libCamp_ge_MapID_MapTHorner05S) || (libCamp_gf_TS_BattleReportMissionCompleted(libCamp_ge_MapID_MapTHorner05S) == true)))) {
        BattleReportSetShownInMissionTotal(BattleReportLastCreated(), true);
    }
    else {
        BattleReportSetShownInMissionTotal(BattleReportLastCreated(), false);
    }
}

void libCamp_gf_TS_BattleReportAddScene (int lp_scene, int lp_priority) {
    // Variable Declarations
    int lv_indexScene;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_indexScene = (lp_scene);
    if ((libCamp_gf_TS_GameFullyDownloaded() == false) && (lp_scene != libCamp_ge_SceneID_ScenePreRenderedTheDream) && (lp_scene != libCamp_ge_SceneID_ScenePreRenderedOldRivals) && (lp_scene != libCamp_ge_SceneID_ScenePreRenderedEnd) && (lp_scene != libCamp_ge_SceneID_ScenePreRenderedBetterMarine)) {
        TextExpressionSetToken("Param/Expression/lib_Camp_880903F1", "SCENENAME", libCamp_gv_tS_SceneNames[lv_indexScene]);
        BattleReportCreate(PlayerGroupAll(), TextExpressionAssemble("Param/Expression/lib_Camp_880903F1"), c_battleReportTypeScene, c_battleReportStateCompleted);
    }
    else {
        BattleReportCreate(PlayerGroupAll(), libCamp_gv_tS_SceneNames[lv_indexScene], c_battleReportTypeScene, c_battleReportStateCompleted);
    }
    libCamp_gv_tS_BattleReportScenes[lv_indexScene] = BattleReportLastCreated();
    BattleReportSetSceneImage(BattleReportLastCreated(), libCamp_gv_tS_SceneImages[lv_indexScene]);
    BattleReportSetButtonImage(BattleReportLastCreated(), libCamp_gv_tS_SceneIcon[lv_indexScene]);
    BattleReportSetSceneText(BattleReportLastCreated(), libCamp_gv_tS_SceneNames[lv_indexScene]);
    BattleReportSetPriority(BattleReportLastCreated(), lp_priority);
}

void libCamp_gf_TS_BattleReportHide () {
    // Automatic Variable Declarations
    // Implementation
    libCamp_gf_SetStoryState(libCamp_ge_StoryStateID_StoryStateBattleReportCurrentSelected, (BattleReportPanelGetSelectedBattleReport(1)));
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleReportPanel, false);
}

void libCamp_gf_DisplayBattleReport (trigger lp_sceneFinishCallback, trigger lp_leaveCallback) {
    // Variable Declarations
    int lv_mission;
    int lv_indexMission;
    int lv_scene;
    int lv_indexScene;

    // Automatic Variable Declarations
    int auto4CD770DA_i;
    int auto4728ED0A_i;

    // Variable Initialization
    lv_mission = libCamp_ge_MapID_MapNone;
    lv_indexMission = libCamp_ge_MapID_MapNone;
    lv_scene = libCamp_ge_SceneID_SceneNone;
    lv_indexScene = libCamp_ge_SceneID_SceneNone;

    // Implementation
    libCamp_gv_tS_BattleReportSceneFinishCallback = lp_sceneFinishCallback;
    libCamp_gv_tS_BattleReportPanelLeaveCallback = lp_leaveCallback;
    libCamp_gf_TS_BattleReportUpdate();
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleReportPanel, true);
    if ((libCamp_gf_StoryState(libCamp_ge_StoryStateID_StoryStateBattleReportCurrentSelected) > 0)) {
        lv_mission = libCamp_ge_MapID_MapNone;
        lv_scene = libCamp_ge_SceneID_SceneNone;
        auto4CD770DA_i = libCamp_gv_TSC_MISSION_FIRST;
        while (auto4CD770DA_i <= libCamp_gv_TSC_MISSION_LAST) {
            lv_indexMission = libCamp_gv_tS_MapID[auto4CD770DA_i];
            if (((libCamp_gv_tS_BattleReportMissions[(lv_indexMission)]) == libCamp_gf_StoryState(libCamp_ge_StoryStateID_StoryStateBattleReportCurrentSelected))) {
                lv_mission = lv_indexMission;
                break;
            }

            auto4CD770DA_i = auto4CD770DA_i + 1;
        }
        if ((lv_mission != libCamp_ge_MapID_MapNone)) {
            BattleReportPanelSetSelectedBattleReport(PlayerGroupAll(), libCamp_gv_tS_BattleReportMissions[(lv_mission)]);
        }
        else {
            auto4728ED0A_i = libCamp_gv_TSC_SCENE_FIRST;
            while (auto4728ED0A_i <= libCamp_gv_TSC_SCENE_LAST) {
                lv_indexScene = libCamp_gv_tS_SceneIDs[auto4728ED0A_i];
                if (((libCamp_gv_tS_BattleReportScenes[(lv_indexScene)]) == libCamp_gf_StoryState(libCamp_ge_StoryStateID_StoryStateBattleReportCurrentSelected))) {
                    lv_scene = lv_indexScene;
                    break;
                }

                auto4728ED0A_i = auto4728ED0A_i + 1;
            }
            if ((lv_scene != libCamp_ge_SceneID_SceneNone)) {
                BattleReportPanelSetSelectedBattleReport(PlayerGroupAll(), libCamp_gv_tS_BattleReportScenes[(lv_scene)]);
            }

        }
    }
    else {
        BattleReportPanelSetSelectedBattleReport(PlayerGroupAll(), libCamp_gv_tS_BattleReportScenes[(libCamp_ge_SceneID_SceneTerran01RaynorIntro)]);
    }
}

void libCamp_gf_RefreshBattleReport () {
    // Variable Declarations
    int lv_mission;
    int lv_indexMission;
    int lv_scene;
    int lv_indexScene;
    int lv_missionSelected;
    int lv_sceneSelected;

    // Automatic Variable Declarations
    int auto75A6E318_i;
    int autoC3AB5AB5_i;

    // Variable Initialization
    lv_mission = libCamp_ge_MapID_MapNone;
    lv_indexMission = libCamp_ge_MapID_MapNone;
    lv_scene = libCamp_ge_SceneID_SceneNone;
    lv_indexScene = libCamp_ge_SceneID_SceneNone;
    lv_missionSelected = libCamp_ge_MapID_MapNone;
    lv_sceneSelected = libCamp_ge_SceneID_SceneNone;

    // Implementation
    auto75A6E318_i = libCamp_gv_TSC_MISSION_FIRST;
    while (auto75A6E318_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[auto75A6E318_i];
        if ((libCamp_gv_tS_BattleReportMissions[(lv_indexMission)] != c_invalidBattleReportId)) {
            if (((libCamp_gv_tS_BattleReportMissions[(lv_indexMission)]) == libCamp_gf_StoryState(libCamp_ge_StoryStateID_StoryStateBattleReportCurrentSelected))) {
                lv_missionSelected = lv_indexMission;
            }

            BattleReportDestroy(libCamp_gv_tS_BattleReportMissions[(lv_indexMission)]);
            libCamp_gv_tS_BattleReportMissions[(lv_indexMission)] = c_invalidBattleReportId;
        }

        auto75A6E318_i = auto75A6E318_i + 1;
    }
    autoC3AB5AB5_i = libCamp_gv_TSC_SCENE_FIRST;
    while (autoC3AB5AB5_i <= libCamp_gv_TSC_SCENE_LAST) {
        lv_indexScene = libCamp_gv_tS_SceneIDs[autoC3AB5AB5_i];
        if ((libCamp_gv_tS_BattleReportScenes[(lv_indexScene)] != c_invalidBattleReportId)) {
            if (((libCamp_gv_tS_BattleReportScenes[(lv_indexScene)]) == libCamp_gf_StoryState(libCamp_ge_StoryStateID_StoryStateBattleReportCurrentSelected))) {
                lv_sceneSelected = lv_indexScene;
            }

            BattleReportDestroy(libCamp_gv_tS_BattleReportScenes[(lv_indexScene)]);
            libCamp_gv_tS_BattleReportScenes[(lv_indexScene)] = c_invalidBattleReportId;
        }

        autoC3AB5AB5_i = autoC3AB5AB5_i + 1;
    }
    libCamp_gv_tS_BattleReportReady = false;
    libCamp_gf_TS_BattleReportUpdate();
    libCamp_gf_SetStoryState(libCamp_ge_StoryStateID_StoryStateBattleReportCurrentSelected, (c_invalidBattleReportId));
    if ((lv_missionSelected != libCamp_ge_MapID_MapNone)) {
        libCamp_gf_SetStoryState(libCamp_ge_StoryStateID_StoryStateBattleReportCurrentSelected, (libCamp_gv_tS_BattleReportMissions[(lv_missionSelected)]));
    }

    if ((lv_sceneSelected != libCamp_ge_SceneID_SceneNone)) {
        libCamp_gf_SetStoryState(libCamp_ge_StoryStateID_StoryStateBattleReportCurrentSelected, (libCamp_gv_tS_BattleReportScenes[(lv_sceneSelected)]));
    }

}

bool libCamp_gf_TS_GameFullyDownloaded () {
    // Automatic Variable Declarations
    // Implementation
    return GameDataIsFullyDownloaded(1);
}

void libCamp_gf_RegisterMissionDebriefingCallback (int lp_mission, trigger lp_callback) {
    // Automatic Variable Declarations
    // Implementation
    libCamp_gv_tS_MissionDebriefingCallbacks[(lp_mission)] = lp_callback;
}

trigger libCamp_gf_MissionDebriefingCallback (int lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tS_MissionDebriefingCallbacks[(lp_mission)];
}

bool libCamp_gf_MissionObjectiveStateCheck (int lp_objective, int lp_state) {
    // Automatic Variable Declarations
    // Implementation
    return (libCamp_gv_tSX_MissionObjState[(lp_objective)] == (lp_state));
}

bool libCamp_gf_MissionObjectiveIsPrimary (int lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tSX_MissionObjIsPrimary[(lp_objective)];
}

text libCamp_gf_MissionObjectiveName (int lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tSX_MissionObjName[(lp_objective)];
}

int libCamp_gf_MissionObjectiveMap (int lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tS_MissionObjMap[(lp_objective)];
}

int libCamp_gf_MissionObjectiveRewardsEarned (int lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCamp_gf_MissionStatusCheck(libCamp_gf_MissionObjectiveMap(lp_objective), libCamp_ge_MissionStatus_Completed) == true)) {
        return (libCamp_gf_MissionObjectiveProgress(lp_objective) * libCamp_gf_MissionObjectiveCreditsPerItem(lp_objective));
    }

    return 0;
}

int libCamp_gf_MissionObjectiveRewardsEarnedLastMission () {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tSX_MissionObjRewardsEarnedCurrent;
}

int libCamp_gf_MissionObjectiveItemCount (int lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return FixedToInt(ConversationDataStateFixedValue(libCamp_gf_TS_MissionObjectiveConvoID(lp_objective), "Item Count"));
}

int libCamp_gf_MissionObjectiveCreditsPerItem (int lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return FixedToInt(ConversationDataStateFixedValue(libCamp_gf_TS_MissionObjectiveConvoID(lp_objective), "Credits Per Item"));
}

int libCamp_gf_MissionObjectiveProgress (int lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return ConversationDataStateGetValue(libCamp_gv_tS_MissionObjConvoID[(lp_objective)]);
}

bool libCamp_gf_TS_AllObjectivesCompletedForMission (int lp_mission) {
    // Variable Declarations
    int lv_obj;

    // Automatic Variable Declarations
    int auto4FE66050_i;

    // Variable Initialization
    lv_obj = libCamp_ge_MissionObjective_MissionObjectiveNone;

    // Implementation
    auto4FE66050_i = 1;
    while (auto4FE66050_i <= libCamp_gv_TSC_MISSIONOBJECTIVECOUNT) {
        if (libCamp_gv_tS_MissionObjectives[lp_mission][auto4FE66050_i] != 0) {
            lv_obj = libCamp_gv_tS_MissionObjectives[lp_mission][auto4FE66050_i];
            if ((ObjectiveGetState(libCamp_gv_tS_MissionObjObjective[(lv_obj)]) != c_objectiveStateCompleted)) {
                return false;
            }

        }
        auto4FE66050_i = auto4FE66050_i + 1;
    }
    return true;
}

string libCamp_gf_TS_MissionObjectiveConvoID (int lp_objective) {
    // Variable Declarations
    int lv_obj;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_obj = libCamp_ge_MissionObjective_MissionObjectiveNone;

    // Implementation
    return libCamp_gv_tS_MissionObjConvoID[(lp_objective)];
}

void libCamp_gf_RegisterMissionObjective (int lp_objectiveID, int lp_objective, text lp_objectiveName) {
    // Variable Declarations
    int lv_objIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_objIndex = (lp_objectiveID);
    libCamp_gv_tS_MissionObjObjective[lv_objIndex] = lp_objective;
    libCamp_gv_tSX_MissionObjName[lv_objIndex] = lp_objectiveName;
    libCamp_gv_tSX_MissionObjIsPrimary[lv_objIndex] = ObjectiveGetPrimary(lp_objective);
}

void libCamp_gf_SetMissionObjectiveState (int lp_objective, int lp_state) {
    // Automatic Variable Declarations
    // Implementation
    libCamp_gv_tSX_MissionObjState[(lp_objective)] = (lp_state);
}

void libCamp_gf_SetMissionObjectiveProgress (int lp_objective, int lp_progress) {
    // Automatic Variable Declarations
    // Implementation
    ConversationDataStateSetValue(libCamp_gf_TS_MissionObjectiveConvoID(lp_objective), lp_progress);
}

void libCamp_gf_AddProgressToStoryObjective (int lp_progress, int lp_objective) {
    // Variable Declarations
    int lv_indexObjective;
    int lv_rewardsOld;
    int lv_rewardsNew;

    // Automatic Variable Declarations
    int autoBD9E28D6_i;

    // Variable Initialization
    lv_indexObjective = libCamp_ge_MissionObjective_MissionObjectiveNone;

    // Implementation
    libCamp_gv_tS_MissionObjProgressCurrent[(lp_objective)] += lp_progress;
    autoBD9E28D6_i = libCamp_gv_TSC_OBJECTIVE_FIRST;
    while (autoBD9E28D6_i <= libCamp_gv_TSC_OBJECTIVE_LAST) {
        lv_indexObjective = libCamp_gv_tS_MissionObjIDs[autoBD9E28D6_i];
        if ((libCamp_gf_MissionObjectiveMap(lv_indexObjective) == libCamp_gv_tS_CurrentMap)) {
            lv_rewardsOld += (libCamp_gv_tS_NonSnapShotObjectiveProgress[(lv_indexObjective)] * libCamp_gf_MissionObjectiveCreditsPerItem(lv_indexObjective));
            lv_rewardsNew += (libCamp_gv_tS_MissionObjProgressCurrent[(lv_indexObjective)] * libCamp_gf_MissionObjectiveCreditsPerItem(lv_indexObjective));
        }

        autoBD9E28D6_i = autoBD9E28D6_i + 1;
    }
    libCamp_gv_tSX_MissionObjRewardsEarnedCurrent = (lv_rewardsNew - lv_rewardsOld);
    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Camp_96D015C4") + IntToText(lv_rewardsNew) + StringExternal("Param/Value/lib_Camp_7F31FEC5") + IntToText(lv_rewardsOld) + StringExternal("Param/Value/lib_Camp_C2965B18") + IntToText(libCamp_gv_tSX_MissionObjRewardsEarnedCurrent) + StringExternal("Param/Value/lib_Camp_E042403A")), false);
    if ((libCamp_gv_tSX_MissionObjRewardsEarnedCurrent < 0)) {
        libCamp_gv_tSX_MissionObjRewardsEarnedCurrent = 0;
    }

    if ((libCamp_gv_tSX_MissionObjRewardsEarnedCurrent > 0)) {
        libCamp_gf_SetMissionObjectiveProgress(lp_objective, libCamp_gv_tS_MissionObjProgressCurrent[(lp_objective)]);
    }

}

void libCamp_gf_TS_InitializeMissionObjectiveDataSingle (int lp_obj, int lp_map, string lp_convoID) {
    // Variable Declarations
    int lv_objIndex;
    int lv_mapIndex;
    int lv_missionObjIndex;

    // Automatic Variable Declarations
    const int autoA768C5C4_ae = libCamp_gv_TSC_MISSIONOBJECTIVECOUNT;
    const int autoA768C5C4_ai = 1;

    // Variable Initialization

    // Implementation
    lv_objIndex = (lp_obj);
    libCamp_gv_tS_MissionObjIDs[lv_objIndex] = lp_obj;
    libCamp_gv_tS_MissionObjMap[lv_objIndex] = lp_map;
    libCamp_gv_tS_MissionObjConvoID[lv_objIndex] = lp_convoID;
    libCamp_gv_tSX_MissionObjName[lv_objIndex] = null;
    libCamp_gv_tSX_MissionObjIsPrimary[lv_objIndex] = false;
    lv_mapIndex = (lp_map);
    lv_missionObjIndex = 1;
    for ( ; ( (autoA768C5C4_ai >= 0 && lv_missionObjIndex <= autoA768C5C4_ae) || (autoA768C5C4_ai < 0 && lv_missionObjIndex >= autoA768C5C4_ae) ) ; lv_missionObjIndex += autoA768C5C4_ai ) {
        if ((libCamp_gv_tS_MissionObjectives[lv_mapIndex][lv_missionObjIndex] == libCamp_ge_MissionObjective_MissionObjectiveNone)) {
            libCamp_gv_tS_MissionObjectives[lv_mapIndex][lv_missionObjIndex] = lp_obj;
            break;
        }

    }
}

void libCamp_gf_TS_InitializeMissionObjectiveData () {
    // Automatic Variable Declarations
    // Implementation
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TRaynor01Objective1, libCamp_ge_MapID_MapTRaynor01, "MissionObjective|TRaynor01_1");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TRaynor01Objective2, libCamp_ge_MapID_MapTRaynor01, "MissionObjective|TRaynor01_2");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TRaynor02Objective1, libCamp_ge_MapID_MapTRaynor02, "MissionObjective|TRaynor02_1");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TRaynor02Objective2, libCamp_ge_MapID_MapTRaynor02, "MissionObjective|TRaynor02_2");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TRaynor03Objective1, libCamp_ge_MapID_MapTRaynor03, "MissionObjective|TRaynor03_1");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TRaynor03Objective2, libCamp_ge_MapID_MapTRaynor03, "MissionObjective|TRaynor03_2");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_THanson01Objective1, libCamp_ge_MapID_MapTHanson01, "MissionObjective|THanson01_1");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_THanson01Objective2, libCamp_ge_MapID_MapTHanson01, "MissionObjective|THanson01_2");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_THanson01Objective3, libCamp_ge_MapID_MapTHanson01, "MissionObjective|THanson01_3");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_THanson01Objective4, libCamp_ge_MapID_MapTHanson01, "MissionObjective|THanson01_4");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_THanson02Objective1, libCamp_ge_MapID_MapTHanson02, "MissionObjective|THanson02_1");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_THanson02Objective2, libCamp_ge_MapID_MapTHanson02, "MissionObjective|THanson02_2");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_THanson03AObjective1, libCamp_ge_MapID_MapTHanson03A, "MissionObjective|THanson03A_1");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_THanson03AObjective2, libCamp_ge_MapID_MapTHanson03A, "MissionObjective|THanson03A_2");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_THanson03AObjective3, libCamp_ge_MapID_MapTHanson03A, "MissionObjective|THanson03A_3");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_THanson03AObjective4, libCamp_ge_MapID_MapTHanson03A, "MissionObjective|THanson03A_3");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_THanson03AObjective5, libCamp_ge_MapID_MapTHanson03A, "MissionObjective|THanson03A_3");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_THanson03BObjective1, libCamp_ge_MapID_MapTHanson03B, "MissionObjective|THanson03B_1");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TTosh01Objective1, libCamp_ge_MapID_MapTTosh01, "MissionObjective|TTosh01_1");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TTosh01Objective2, libCamp_ge_MapID_MapTTosh01, "MissionObjective|TTosh01_2");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TTosh01Objective3, libCamp_ge_MapID_MapTTosh01, "MissionObjective|TTosh01_3");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TTosh02Objective1, libCamp_ge_MapID_MapTTosh02, "MissionObjective|TTosh02_1");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TTosh02Objective2, libCamp_ge_MapID_MapTTosh02, "MissionObjective|TTosh02_2");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TTosh02Objective3, libCamp_ge_MapID_MapTTosh02, "MissionObjective|TTosh02_3");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TTosh03AObjective1, libCamp_ge_MapID_MapTTosh03A, "MissionObjective|TTosh03A_1");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TTosh03AObjective2, libCamp_ge_MapID_MapTTosh03A, "MissionObjective|TTosh03A_2");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TTosh03AObjective3, libCamp_ge_MapID_MapTTosh03A, "MissionObjective|TTosh03A_3");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TTosh03AObjective4, libCamp_ge_MapID_MapTTosh03A, "MissionObjective|TTosh03A_4");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TTosh03BObjective1, libCamp_ge_MapID_MapTTosh03B, "MissionObjective|TTosh03B_1");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TTosh03BObjective2, libCamp_ge_MapID_MapTTosh03B, "MissionObjective|TTosh03B_2");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TTosh03BObjective3, libCamp_ge_MapID_MapTTosh03B, "MissionObjective|TTosh03B_3");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TTosh03BObjective5, libCamp_ge_MapID_MapTTosh03B, "MissionObjective|TTosh03B_5");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TTosh03BObjective4, libCamp_ge_MapID_MapTTosh03B, "MissionObjective|TTosh03B_4");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_THorner01Objective1, libCamp_ge_MapID_MapTHorner01, "MissionObjective|THorner01_1");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_THorner01Objective2, libCamp_ge_MapID_MapTHorner01, "MissionObjective|THorner01_2");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_THorner01Objective3, libCamp_ge_MapID_MapTHorner01, "MissionObjective|THorner01_3");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_THorner01Objective32, libCamp_ge_MapID_MapTHorner01, "MissionObjective|THorner01_4");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_THorner02Objective1, libCamp_ge_MapID_MapTHorner02, "MissionObjective|THorner02_1");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_THorner02Objective2, libCamp_ge_MapID_MapTHorner02, "MissionObjective|THorner02_2");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_THorner02Objective3, libCamp_ge_MapID_MapTHorner02, "MissionObjective|THorner02_3");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_THorner03Objective1, libCamp_ge_MapID_MapTHorner03, "MissionObjective|THorner03_1");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_THorner03Objective2, libCamp_ge_MapID_MapTHorner03, "MissionObjective|THorner03_2");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_THorner03Objective3, libCamp_ge_MapID_MapTHorner03, "MissionObjective|THorner03_3");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_THorner03Objective4, libCamp_ge_MapID_MapTHorner03, "MissionObjective|THorner03_4");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_THorner03Objective5, libCamp_ge_MapID_MapTHorner03, "MissionObjective|THorner03_5");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_THorner03Objective6, libCamp_ge_MapID_MapTHorner03, "MissionObjective|THorner03_6");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_THorner04Objective1, libCamp_ge_MapID_MapTHorner04, "MissionObjective|THorner04_1");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_THorner04Objective2, libCamp_ge_MapID_MapTHorner04, "MissionObjective|THorner04_2");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_THorner04Objective3, libCamp_ge_MapID_MapTHorner04, "MissionObjective|THorner04_3");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_THorner05Objective1, libCamp_ge_MapID_MapTHorner05S, "MissionObjective|THorner05_1");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_THorner05Objective2, libCamp_ge_MapID_MapTHorner05S, "MissionObjective|THorner05_2");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_THorner05Objective3, libCamp_ge_MapID_MapTHorner05S, "MissionObjective|THorner05_3");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_THorner05Objective4, libCamp_ge_MapID_MapTHorner05S, "MissionObjective|THorner05_4");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_THorner05Objective5, libCamp_ge_MapID_MapTHorner05S, "MissionObjective|THorner05_5");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_THorner05Objective52, libCamp_ge_MapID_MapTHorner05S, "MissionObjective|THorner05_6");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TTychus01Objective1, libCamp_ge_MapID_MapTTychus01, "MissionObjective|TTychus01_1");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TTychus01Objective2, libCamp_ge_MapID_MapTTychus01, "MissionObjective|TTychus01_2");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TTychus02Objective1, libCamp_ge_MapID_MapTTychus02, "MissionObjective|TTychus02_1");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TTychus02Objective2, libCamp_ge_MapID_MapTTychus02, "MissionObjective|TTychus02_2");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TTychus02Objective3, libCamp_ge_MapID_MapTTychus02, "MissionObjective|TTychus02_3");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TTychus02Objective32, libCamp_ge_MapID_MapTTychus02, "MissionObjective|TTychus02_4");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TTychus03Objective1, libCamp_ge_MapID_MapTTychus03, "MissionObjective|TTychus03_1");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TTychus03Objective2, libCamp_ge_MapID_MapTTychus03, "MissionObjective|TTychus03_2");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TTychus03Objective3, libCamp_ge_MapID_MapTTychus03, "MissionObjective|TTychus03_3");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TTychus04Objective1, libCamp_ge_MapID_MapTTychus04, "MissionObjective|TTychus04_1");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TTychus04Objective2, libCamp_ge_MapID_MapTTychus04, "MissionObjective|TTychus04_2");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TTychus04Objective3, libCamp_ge_MapID_MapTTychus04, "MissionObjective|TTychus04_3");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TTychus05Objective1, libCamp_ge_MapID_MapTTychus05, "MissionObjective|TTychus05_1");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TTychus05Objective2, libCamp_ge_MapID_MapTTychus05, "MissionObjective|TTychus05_2");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TTychus05Objective3, libCamp_ge_MapID_MapTTychus05, "MissionObjective|TTychus05_3");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TTychus05Objective4, libCamp_ge_MapID_MapTTychus05, "MissionObjective|TTychus05_4");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TZeratul01Objective1, libCamp_ge_MapID_MapTZeratul01, "MissionObjective|TZeratul01_1");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TZeratul01Objective2, libCamp_ge_MapID_MapTZeratul01, "MissionObjective|TZeratul01_2");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TZeratul01Objective3, libCamp_ge_MapID_MapTZeratul01, "MissionObjective|TZeratul01_3");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TZeratul01EscapetotheVoidSeeker, libCamp_ge_MapID_MapTZeratul01, "MissionObjective|TZeratul01_4");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TZeratul02Objective1, libCamp_ge_MapID_MapTZeratul02, "MissionObjective|TZeratul02_1");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TZeratul02Objective2, libCamp_ge_MapID_MapTZeratul02, "MissionObjective|TZeratul02_2");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TZeratul02Objective3, libCamp_ge_MapID_MapTZeratul02, "MissionObjective|TZeratul02_3");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TZeratul03Objective1, libCamp_ge_MapID_MapTZeratul03, "MissionObjective|TZeratul03_1");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TZeratul03Objective2, libCamp_ge_MapID_MapTZeratul03, "MissionObjective|TZeratul03_2");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TZeratul03Objective4, libCamp_ge_MapID_MapTZeratul03, "MissionObjective|TZeratul03_4");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TZeratul02Objective42, libCamp_ge_MapID_MapTZeratul03, "MissionObjective|TZeratul03_3");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TZeratul04Objective1, libCamp_ge_MapID_MapTZeratul04, "MissionObjective|TZeratul04_1");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TZeratul04Objective2, libCamp_ge_MapID_MapTZeratul04, "MissionObjective|TZeratul04_2");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TZeratul04Objective3, libCamp_ge_MapID_MapTZeratul04, "MissionObjective|TZeratul04_3");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TValerian01Objective1, libCamp_ge_MapID_MapTValerian01, "MissionObjective|TValerian01_1");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TValerian01Objective2, libCamp_ge_MapID_MapTValerian01, "MissionObjective|TValerian01_2");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TValerian01Objective4, libCamp_ge_MapID_MapTValerian01, "MissionObjective|TValerian01_4");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TValerian01Objective3, libCamp_ge_MapID_MapTValerian01, "MissionObjective|TValerian01_3");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TValerian02AObjective1, libCamp_ge_MapID_MapTValerian02A, "MissionObjective|TValerian02A_1");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TValerian02AObjective2, libCamp_ge_MapID_MapTValerian02A, "MissionObjective|TValerian02A_2");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TValerian02BObjective1, libCamp_ge_MapID_MapTValerian02B, "MissionObjective|TValerian02B_1");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TValerian02BObjective2, libCamp_ge_MapID_MapTValerian02B, "MissionObjective|TValerian02B_2");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TValerian02BObjective3, libCamp_ge_MapID_MapTValerian02B, "MissionObjective|TValerian02B_3");
    libCamp_gf_TS_InitializeMissionObjectiveDataSingle(libCamp_ge_MissionObjective_TValerian03Objective1, libCamp_ge_MapID_MapTValerian03, "MissionObjective|TValerian03_1");
}

void libCamp_gf_TS_UpdateMissionObjectives () {
    // Variable Declarations
    int lv_obj;
    int lv_objective;

    // Automatic Variable Declarations
    int autoA2BA8FCC_i;
    int auto5A9BDEA2_val;

    // Variable Initialization
    lv_obj = libCamp_ge_MissionObjective_MissionObjectiveNone;
    lv_objective = c_invalidObjectiveId;

    // Implementation
    autoA2BA8FCC_i = 1;
    while (autoA2BA8FCC_i <= libCamp_gv_TSC_MISSIONOBJECTIVECOUNT) {
        if (libCamp_gv_tS_MissionObjectives[libCamp_gv_tS_CurrentMap][autoA2BA8FCC_i] != 0) {
            lv_obj = libCamp_gv_tS_MissionObjectives[libCamp_gv_tS_CurrentMap][autoA2BA8FCC_i];
            lv_objective = libCamp_gv_tS_MissionObjObjective[(lv_obj)];
            if ((lv_objective != c_invalidObjectiveId)) {
                libCamp_gv_tSX_MissionObjIsPrimary[(lv_obj)] = ObjectiveGetPrimary(lv_objective);
                auto5A9BDEA2_val = ObjectiveGetState(lv_objective);
                if (auto5A9BDEA2_val == c_objectiveStateActive) {
                    if ((libCamp_gf_MissionObjectiveStateCheck(lv_obj, libCamp_ge_MissionObjectiveState_ObjectiveUndiscovered) == true)) {
                        libCamp_gf_SetMissionObjectiveState(lv_obj, libCamp_ge_MissionObjectiveState_ObjectiveAvailable);
                    }

                }
                else if (auto5A9BDEA2_val == c_objectiveStateFailed) {
                    if ((libCamp_gf_MissionObjectiveStateCheck(lv_obj, libCamp_ge_MissionObjectiveState_ObjectiveUndiscovered) == true)) {
                        libCamp_gf_SetMissionObjectiveState(lv_obj, libCamp_ge_MissionObjectiveState_ObjectiveAvailable);
                    }

                }
                else if (auto5A9BDEA2_val == c_objectiveStateCompleted) {
                    if ((libCamp_gf_MissionObjectiveStateCheck(lv_obj, libCamp_ge_MissionObjectiveState_ObjectiveCompleted) == false)) {
                        libCamp_gf_SetMissionObjectiveState(lv_obj, libCamp_ge_MissionObjectiveState_ObjectiveCompleted);
                    }

                }
                else {
                }
            }

        }
        autoA2BA8FCC_i = autoA2BA8FCC_i + 1;
    }
}

text libCamp_gf_StoryResearchName (int lp_researchID) {
    // Automatic Variable Declarations
    // Implementation
    return ConversationDataStateName(libCamp_gv_tS_ResearchConvoID[(lp_researchID)]);
}

text libCamp_gf_StoryResearchDescription (int lp_researchID) {
    // Automatic Variable Declarations
    // Implementation
    return ConversationDataStateText(libCamp_gv_tS_ResearchConvoID[(lp_researchID)], ("Description"));
}

int libCamp_gf_StoryResearchCategory (int lp_researchID) {
    // Automatic Variable Declarations
    int auto44255F66_val;

    // Implementation
    auto44255F66_val = FixedToInt(ConversationDataStateFixedValue(libCamp_gv_tS_ResearchConvoID[(lp_researchID)], ("Category")));
    if (auto44255F66_val == (libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss)) {
        return libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss;
    }
    else if (auto44255F66_val == (libCamp_ge_StoryResearchCategory_ResearchCategoryZerg)) {
        return libCamp_ge_StoryResearchCategory_ResearchCategoryZerg;
    }
    else {
        return libCamp_ge_StoryResearchCategory_ResearchCategoryNone;
    }
}

string libCamp_gf_StoryResearchIcon (int lp_researchID) {
    // Automatic Variable Declarations
    // Implementation
    return ConversationDataStateImagePath(libCamp_gv_tS_ResearchConvoID[(lp_researchID)]);
}

text libCamp_gf_StoryResearchTooltip (int lp_researchID) {
    // Automatic Variable Declarations
    // Implementation
    return ConversationDataStateText(libCamp_gv_tS_ResearchConvoID[(lp_researchID)], ("Tooltip"));
}

text libCamp_gf_StoryResearchConfirmationText (int lp_researchID) {
    // Automatic Variable Declarations
    // Implementation
    return ConversationDataStateText(libCamp_gv_tS_ResearchConvoID[(lp_researchID)], ("Confirmation"));
}

string libCamp_gf_StoryResearchMovie (int lp_researchID) {
    // Automatic Variable Declarations
    // Implementation
    return ConversationDataStateMoviePath(libCamp_gv_tS_ResearchConvoID[(lp_researchID)]);
}

int libCamp_gf_StoryResearchLevelRequirement (int lp_researchID) {
    // Automatic Variable Declarations
    // Implementation
    return FixedToInt(ConversationDataStateFixedValue(libCamp_gv_tS_ResearchConvoID[(lp_researchID)], ("Required Level")));
}

int libCamp_gf_StoryResearchMissionObject (int lp_missionID) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tS_ResearchMissionObjects[(lp_missionID)][0];
}

int libCamp_gf_StoryResearchMissionProgress (int lp_missionID, int lp_researchCat) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tSX_ResearchMissionProgress[(lp_missionID)][(lp_researchCat)];
}

bool libCamp_gf_StoryResearchStateCheck (int lp_researchID, int lp_state) {
    // Automatic Variable Declarations
    // Implementation
    return (libCamp_gv_tSX_ResearchState[(lp_researchID)] == (lp_state));
}

int libCamp_gf_StoryResearchPoints (int lp_categeory) {
    // Variable Declarations
    int lv_indexMission;
    int lv_points;

    // Automatic Variable Declarations
    int auto541A273F_val;
    int auto13201A47_i;

    // Variable Initialization
    lv_indexMission = libCamp_ge_MapID_MapNone;

    // Implementation
    auto541A273F_val = lp_categeory;
    if (auto541A273F_val == libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss) {
        lv_points = FixedToInt(ConversationDataStateFixedValue("LabResearchConstants|ResearchStartPointProt", "Value"));
    }
    else if (auto541A273F_val == libCamp_ge_StoryResearchCategory_ResearchCategoryZerg) {
        lv_points = FixedToInt(ConversationDataStateFixedValue("LabResearchConstants|ResearchStartPointZerg", "Value"));
    }
    else {
    }
    auto13201A47_i = libCamp_gv_TSC_MISSION_FIRST;
    while (auto13201A47_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[auto13201A47_i];
        if ((libCamp_gf_MissionStatusCheck(lv_indexMission, libCamp_ge_MissionStatus_Completed) == true)) {
            lv_points += (libCamp_gf_StoryResearchMissionProgress(lv_indexMission, lp_categeory) * 1);
            lv_points += libCamp_gf_TS_MissionRewardResearchPoints(lv_indexMission, lp_categeory);
        }

        auto13201A47_i = auto13201A47_i + 1;
    }
    lv_points += libCamp_gv_tSX_DebugResearchLevel[(lp_categeory)];
    return lv_points;
}

int libCamp_gf_StoryResearchPointsOld (int lp_categeory) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tSX_ResearchPointsOld[(lp_categeory)];
}

int libCamp_gf_StoryResearchPointsConverted (int lp_categeory) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tSX_ResearchPointsConverted[(lp_categeory)];
}

int libCamp_gf_StoryResearchPointCap (int lp_categeory) {
    // Automatic Variable Declarations
    int autoC9E12BFB_val;

    // Implementation
    autoC9E12BFB_val = lp_categeory;
    if (autoC9E12BFB_val == libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss) {
        return FixedToInt(ConversationDataStateFixedValue("LabResearchConstants|ResearchPointCapProt", "Value"));
    }
    else if (autoC9E12BFB_val == libCamp_ge_StoryResearchCategory_ResearchCategoryZerg) {
        return FixedToInt(ConversationDataStateFixedValue("LabResearchConstants|ResearchPointCapZerg", "Value"));
    }
    else {
    }
    return 0;
}

int libCamp_gf_StoryResearchCreditsPerPoint () {
    // Automatic Variable Declarations
    // Implementation
    return FixedToInt(ConversationDataStateFixedValue("LabResearchConstants|ResearchPointToCredits", "Value"));
}

int libCamp_gf_TS_StoryResearchUIItem (int lp_researchID) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tS_ResearchUIItem[(lp_researchID)];
}

string libCamp_gf_TS_StoryResearchRewardUpgrade1 (int lp_researchID) {
    // Automatic Variable Declarations
    // Implementation
    return ConversationDataStateUpgrade(libCamp_gv_tS_ResearchConvoID[(lp_researchID)], ("Upgrade 1"));
}

string libCamp_gf_TS_StoryResearchRewardUpgrade2 (int lp_researchID) {
    // Automatic Variable Declarations
    // Implementation
    return ConversationDataStateUpgrade(libCamp_gv_tS_ResearchConvoID[(lp_researchID)], ("Upgrade 2"));
}

abilcmd libCamp_gf_TS_StoryResearchRewardAC1 (int lp_researchID) {
    // Automatic Variable Declarations
    // Implementation
    return ConversationDataStateAbilCmd(libCamp_gv_tS_ResearchConvoID[(lp_researchID)], ("Ability Command 1"));
}

abilcmd libCamp_gf_TS_StoryResearchRewardAC2 (int lp_researchID) {
    // Automatic Variable Declarations
    // Implementation
    return ConversationDataStateAbilCmd(libCamp_gv_tS_ResearchConvoID[(lp_researchID)], ("Ability Command 2"));
}

int libCamp_gf_TS_StoryResearchMissionProgressCurrent (int lp_categeory) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tS_ResearchMissionProgressCurrent[(lp_categeory)];
}

int libCamp_gf_TS_StoryResearchMissionObject (int lp_mission, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tS_ResearchMissionObjects[(lp_mission)][lp_index];
}

int libCamp_gf_TS_StoryResearchMissionObjectCount (int lp_mission, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tS_ResearchMissionObjectCount[(lp_mission)][lp_index];
}

int libCamp_gf_TS_StoryResearchMissionMainObjectiveReward (int lp_mission, int lp_category) {
    // Variable Declarations
    int lv_index;
    int lv_point;

    // Automatic Variable Declarations
    int auto3A04085F_val;
    int auto9A5FAA69_val;
    int auto6617D391_val;
    int autoB6F34D5E_val;
    int autoFC748367_val;

    // Variable Initialization

    // Implementation
    auto3A04085F_val = lp_mission;
    if (auto3A04085F_val == libCamp_ge_MapID_MapTZeratul01) {
        auto9A5FAA69_val = lp_category;
        if (auto9A5FAA69_val == libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss) {
            return 3;
        }
        else {
        }
    }
    else if (auto3A04085F_val == libCamp_ge_MapID_MapTZeratul02) {
        auto6617D391_val = lp_category;
        if (auto6617D391_val == libCamp_ge_StoryResearchCategory_ResearchCategoryZerg) {
            return 3;
        }
        else {
        }
    }
    else if (auto3A04085F_val == libCamp_ge_MapID_MapTZeratul03) {
        autoB6F34D5E_val = lp_category;
        if (autoB6F34D5E_val == libCamp_ge_StoryResearchCategory_ResearchCategoryZerg) {
            return 4;
        }
        else {
        }
    }
    else if (auto3A04085F_val == libCamp_ge_MapID_MapTZeratul04) {
        autoFC748367_val = lp_category;
        if (autoFC748367_val == libCamp_ge_StoryResearchCategory_ResearchCategoryZerg) {
            return 3;
        }
        else {
        }
    }
    else {
    }
    return 0;
}

int libCamp_gf_TS_StoryResearchMissionOpportunities (int lp_mission, int lp_category) {
    // Variable Declarations
    int lv_index;
    int lv_point;

    // Automatic Variable Declarations
    const int autoE5F8F0D5_ae = 2;
    const int autoE5F8F0D5_ai = 1;

    // Variable Initialization

    // Implementation
    lv_point = 0;
    lv_index = 1;
    for ( ; ( (autoE5F8F0D5_ai >= 0 && lv_index <= autoE5F8F0D5_ae) || (autoE5F8F0D5_ai < 0 && lv_index >= autoE5F8F0D5_ae) ) ; lv_index += autoE5F8F0D5_ai ) {
        lv_point += (libCamp_gf_StoryResearchObjectReward(libCamp_gf_TS_StoryResearchMissionObject(lp_mission, lv_index), lp_category) * libCamp_gf_TS_StoryResearchMissionObjectCount(lp_mission, lv_index));
    }
    lv_point += libCamp_gf_TS_StoryResearchMissionMainObjectiveReward(lp_mission, lp_category);
    return lv_point;
}

int libCamp_gf_TS_StoryResearchTier (int lp_research) {
    // Automatic Variable Declarations
    // Implementation
    return (libCamp_gf_StoryResearchLevelRequirement(lp_research) / libCamp_gv_tSC_RESEARCH_TIERLEVEL);
}

int libCamp_gf_TS_StoryResearchSlot (int lp_research) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tS_ResearchSlot[(lp_research)];
}

int libCamp_gf_TS_StoryResearchTheOtherOfTheSameTier (int lp_research) {
    // Variable Declarations
    int lv_catIndex;
    int lv_tierIndex;
    int lv_slotIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_catIndex = (libCamp_gf_StoryResearchCategory(lp_research));
    lv_tierIndex = libCamp_gf_TS_StoryResearchTier(lp_research);
    lv_slotIndex = libCamp_gf_TS_StoryResearchSlot(lp_research);
    return libCamp_gv_tS_ResearchIDInUIStructure[lv_catIndex][lv_tierIndex][(3 - lv_slotIndex)];
}

int libCamp_gf_StoryResearchObjectReward (int lp_researchObject, int lp_category) {
    // Variable Declarations
    string lv_name;

    // Automatic Variable Declarations
    int autoA068D31A_val;

    // Variable Initialization
    lv_name = "";

    // Implementation
    autoA068D31A_val = lp_category;
    if (autoA068D31A_val == libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss) {
        lv_name = "RewardProtoss";
    }
    else if (autoA068D31A_val == libCamp_ge_StoryResearchCategory_ResearchCategoryZerg) {
        lv_name = "RewardZerg";
    }
    else {
    }
    return FixedToInt(ConversationDataStateFixedValue(libCamp_gv_tS_ResearchObjConvoID[(lp_researchObject)], lv_name));
}

text libCamp_gf_StoryResearchSupplementTextForObjective (int lp_researchObject, int lp_style, int lp_total, int lp_progress) {
    // Variable Declarations
    int lv_category;
    text lv_text;
    int lv_reward;

    // Automatic Variable Declarations
    int autoE405FEA0_val;
    int auto5C54CB39_val;

    // Variable Initialization
    lv_category = libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss;

    // Implementation
    lv_category = libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss;
    lv_reward = libCamp_gf_StoryResearchObjectReward(lp_researchObject, lv_category);
    if ((lv_reward == 0)) {
        lv_category = libCamp_ge_StoryResearchCategory_ResearchCategoryZerg;
        lv_reward = libCamp_gf_StoryResearchObjectReward(lp_researchObject, lv_category);
    }

    autoE405FEA0_val = lp_style;
    if (autoE405FEA0_val == libCamp_ge_StoryResearchObjectiveTextStyle_Multipart) {
        lv_text = (lv_text + StringExternal("Param/Value/lib_Camp_A6E6F804") + IntToText((lp_progress * lv_reward)) + StringExternal("Param/Value/lib_Camp_803A9FEA") + IntToText((lp_total * lv_reward)) + StringExternal("Param/Value/lib_Camp_064EEE94"));
    }
    else if (autoE405FEA0_val == libCamp_ge_StoryResearchObjectiveTextStyle_Lumpsum) {
        lv_text = (lv_text);
    }
    else {
    }
    auto5C54CB39_val = lv_category;
    if (auto5C54CB39_val == libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss) {
        lv_text = (lv_text + StringExternal("Param/Value/lib_Camp_2C8B3814"));
    }
    else if (auto5C54CB39_val == libCamp_ge_StoryResearchCategory_ResearchCategoryZerg) {
        lv_text = (lv_text + StringExternal("Param/Value/lib_Camp_EFA54EDC"));
    }
    else {
    }
    return lv_text;
}

void libCamp_gf_TS_InitializeResearchDataSingle (int lp_iD, string lp_convoID) {
    // Variable Declarations
    int lv_researchIndex;
    int lv_catIndex;
    int lv_tierIndex;
    int lv_slotIndex;

    // Automatic Variable Declarations
    const int autoE8C2DF9E_ae = 2;
    const int autoE8C2DF9E_ai = 1;

    // Variable Initialization

    // Implementation
    lv_researchIndex = (lp_iD);
    libCamp_gv_tS_ResearchID[lv_researchIndex] = lp_iD;
    libCamp_gv_tS_ResearchConvoID[lv_researchIndex] = lp_convoID;
    libCamp_gv_tS_ResearchUIItem[lv_researchIndex] = c_invalidResearchItemId;
    lv_catIndex = (libCamp_gf_StoryResearchCategory(lp_iD));
    lv_tierIndex = libCamp_gf_TS_StoryResearchTier(lp_iD);
    lv_slotIndex = 1;
    for ( ; ( (autoE8C2DF9E_ai >= 0 && lv_slotIndex <= autoE8C2DF9E_ae) || (autoE8C2DF9E_ai < 0 && lv_slotIndex >= autoE8C2DF9E_ae) ) ; lv_slotIndex += autoE8C2DF9E_ai ) {
        if ((libCamp_gv_tS_ResearchIDInUIStructure[lv_catIndex][lv_tierIndex][lv_slotIndex] == libCamp_ge_StoryResearchID_ResearchNone)) {
            libCamp_gv_tS_ResearchIDInUIStructure[lv_catIndex][lv_tierIndex][lv_slotIndex] = lp_iD;
            libCamp_gv_tS_ResearchSlot[lv_researchIndex] = lv_slotIndex;
            break;
        }

    }
}

void libCamp_gf_TS_InitializeResearchData () {
    // Variable Declarations
    int lv_indexMission;

    // Automatic Variable Declarations
    int auto20A5AD78_i;

    // Variable Initialization
    lv_indexMission = libCamp_ge_MapID_MapNone;

    // Implementation
    libCamp_gf_TS_InitializeResearchObjData();
    libCamp_gf_TS_InitializeResearchDataSingle(libCamp_ge_StoryResearchID_ResearchP11UltraCapacitors, "LabResearch|ResearchP1_1");
    libCamp_gf_TS_InitializeResearchDataSingle(libCamp_ge_StoryResearchID_ResearchP12VanadiumPlating, "LabResearch|ResearchP1_2");
    libCamp_gf_TS_InitializeResearchDataSingle(libCamp_ge_StoryResearchID_ResearchP21OrbitalDepots, "LabResearch|ResearchP2_1");
    libCamp_gf_TS_InitializeResearchDataSingle(libCamp_ge_StoryResearchID_ResearchP22MicroFiltering, "LabResearch|ResearchP2_2");
    libCamp_gf_TS_InitializeResearchDataSingle(libCamp_ge_StoryResearchID_ResearchP31AutomatedRefinery, "LabResearch|ResearchP3_1");
    libCamp_gf_TS_InitializeResearchDataSingle(libCamp_ge_StoryResearchID_ResearchP32CommandCenterReactor, "LabResearch|ResearchP3_2");
    libCamp_gf_TS_InitializeResearchDataSingle(libCamp_ge_StoryResearchID_ResearchP41Raven, "LabResearch|ResearchP4_1");
    libCamp_gf_TS_InitializeResearchDataSingle(libCamp_ge_StoryResearchID_ResearchP42ScienceVessel, "LabResearch|ResearchP4_2");
    libCamp_gf_TS_InitializeResearchDataSingle(libCamp_ge_StoryResearchID_ResearchP51TechReactor, "LabResearch|ResearchP5_1");
    libCamp_gf_TS_InitializeResearchDataSingle(libCamp_ge_StoryResearchID_ResearchP52OrbitalStrike, "LabResearch|ResearchP5_2");
    libCamp_gf_TS_InitializeResearchDataSingle(libCamp_ge_StoryResearchID_ResearchZ11ShrikeTurret, "LabResearch|ResearchZ1_1");
    libCamp_gf_TS_InitializeResearchDataSingle(libCamp_ge_StoryResearchID_ResearchZ12FortifiedBunker, "LabResearch|ResearchZ1_2");
    libCamp_gf_TS_InitializeResearchDataSingle(libCamp_ge_StoryResearchID_ResearchZ21PlanetaryFortress, "LabResearch|ResearchZ2_1");
    libCamp_gf_TS_InitializeResearchDataSingle(libCamp_ge_StoryResearchID_ResearchZ22PerditionTurret, "LabResearch|ResearchZ2_2");
    libCamp_gf_TS_InitializeResearchDataSingle(libCamp_ge_StoryResearchID_ResearchZ31Predator, "LabResearch|ResearchZ3_1");
    libCamp_gf_TS_InitializeResearchDataSingle(libCamp_ge_StoryResearchID_ResearchZ32Hercules, "LabResearch|ResearchZ3_2");
    libCamp_gf_TS_InitializeResearchDataSingle(libCamp_ge_StoryResearchID_ResearchZ41CellularReactors, "LabResearch|ResearchZ4_1");
    libCamp_gf_TS_InitializeResearchDataSingle(libCamp_ge_StoryResearchID_ResearchZ42RegenerativeBioSteel, "LabResearch|ResearchZ4_2");
    libCamp_gf_TS_InitializeResearchDataSingle(libCamp_ge_StoryResearchID_ResearchZ51HiveMindEmulator, "LabResearch|ResearchZ5_1");
    libCamp_gf_TS_InitializeResearchDataSingle(libCamp_ge_StoryResearchID_ResearchZ52SigmaProjector, "LabResearch|ResearchZ5_2");
    libCamp_gv_tS_ResearchMissionObjects[(libCamp_ge_MapID_MapTHanson01)][1] = libCamp_ge_StoryResearchObject_ResearchObjectFindChrysalisDNA;
    libCamp_gv_tS_ResearchMissionObjectCount[(libCamp_ge_MapID_MapTHanson01)][1] = 3;
    libCamp_gv_tS_ResearchMissionObjects[(libCamp_ge_MapID_MapTHanson02)][1] = libCamp_ge_StoryResearchObject_ResearchObjectKilltheInfestors;
    libCamp_gv_tS_ResearchMissionObjectCount[(libCamp_ge_MapID_MapTHanson02)][1] = 2;
    libCamp_gv_tS_ResearchMissionObjects[(libCamp_ge_MapID_MapTHorner01)][1] = libCamp_ge_StoryResearchObject_ResearchObjectFindDefilerBoneSamples;
    libCamp_gv_tS_ResearchMissionObjectCount[(libCamp_ge_MapID_MapTHorner01)][1] = 3;
    libCamp_gv_tS_ResearchMissionObjects[(libCamp_ge_MapID_MapTHorner02)][1] = libCamp_ge_StoryResearchObject_ResearchObjectFindProtossRelicContraband;
    libCamp_gv_tS_ResearchMissionObjectCount[(libCamp_ge_MapID_MapTHorner02)][1] = 3;
    libCamp_gv_tS_ResearchMissionObjects[(libCamp_ge_MapID_MapTHorner03)][1] = libCamp_ge_StoryResearchObject_ResearchObjectFindDevourerTissueSamples;
    libCamp_gv_tS_ResearchMissionObjectCount[(libCamp_ge_MapID_MapTHorner03)][1] = 3;
    libCamp_gv_tS_ResearchMissionObjects[(libCamp_ge_MapID_MapTValerian01)][1] = libCamp_ge_StoryResearchObject_ResearchObjectDestroytheSporeCannons;
    libCamp_gv_tS_ResearchMissionObjectCount[(libCamp_ge_MapID_MapTValerian01)][1] = 4;
    libCamp_gv_tS_ResearchMissionObjects[(libCamp_ge_MapID_MapTTychus01)][1] = libCamp_ge_StoryResearchObject_ResearchObjectFindProtossRelics;
    libCamp_gv_tS_ResearchMissionObjectCount[(libCamp_ge_MapID_MapTTychus01)][1] = 4;
    libCamp_gv_tS_ResearchMissionObjects[(libCamp_ge_MapID_MapTTychus02)][1] = libCamp_ge_StoryResearchObject_ResearchObjectFindProtossRelics;
    libCamp_gv_tS_ResearchMissionObjectCount[(libCamp_ge_MapID_MapTTychus02)][1] = 3;
    libCamp_gv_tS_ResearchMissionObjects[(libCamp_ge_MapID_MapTTychus04)][1] = libCamp_ge_StoryResearchObject_ResearchObjectFindProtossRelics;
    libCamp_gv_tS_ResearchMissionObjectCount[(libCamp_ge_MapID_MapTTychus04)][1] = 4;
    libCamp_gv_tS_ResearchMissionObjects[(libCamp_ge_MapID_MapTTosh02)][1] = libCamp_ge_StoryResearchObject_ResearchObjectFindProtossRelics;
    libCamp_gv_tS_ResearchMissionObjectCount[(libCamp_ge_MapID_MapTTosh02)][1] = 3;
    libCamp_gv_tS_ResearchMissionObjects[(libCamp_ge_MapID_MapTHorner05S)][2] = libCamp_ge_StoryResearchObject_ResearchObjectFindProtossRelics;
    libCamp_gv_tS_ResearchMissionObjectCount[(libCamp_ge_MapID_MapTHorner05S)][2] = 4;
    libCamp_gv_tS_ResearchMissionObjects[(libCamp_ge_MapID_MapTTychus05)][1] = libCamp_ge_StoryResearchObject_ResearchObjectRescuePrisoners;
    libCamp_gv_tS_ResearchMissionObjectCount[(libCamp_ge_MapID_MapTTychus05)][1] = 4;
    libCamp_gv_tS_ResearchMissionObjects[(libCamp_ge_MapID_MapTTosh01)][1] = libCamp_ge_StoryResearchObject_ResearchObjectKilltheBrutalisk;
    libCamp_gv_tS_ResearchMissionObjectCount[(libCamp_ge_MapID_MapTTosh01)][1] = 1;
    libCamp_gv_tS_ResearchMissionObjects[(libCamp_ge_MapID_MapTTychus03)][1] = libCamp_ge_StoryResearchObject_ResearchObjectKilltheBrutalisk;
    libCamp_gv_tS_ResearchMissionObjectCount[(libCamp_ge_MapID_MapTTychus03)][1] = 1;
    libCamp_gv_tS_ResearchMissionObjects[(libCamp_ge_MapID_MapTHorner05S)][1] = libCamp_ge_StoryResearchObject_ResearchObjectKilltheBrutalisk;
    libCamp_gv_tS_ResearchMissionObjectCount[(libCamp_ge_MapID_MapTHorner05S)][1] = 1;
    libCamp_gv_tS_ResearchMissionObjects[(libCamp_ge_MapID_MapTZeratul01)][1] = libCamp_ge_StoryResearchObject_ResearchObjectDestroyHatcheries;
    libCamp_gv_tS_ResearchMissionObjectCount[(libCamp_ge_MapID_MapTZeratul01)][1] = 3;
    libCamp_gv_tS_ResearchMissionObjects[(libCamp_ge_MapID_MapTZeratul02)][1] = libCamp_ge_StoryResearchObject_ResearchObjectPowertheAbandonedStructure;
    libCamp_gv_tS_ResearchMissionObjectCount[(libCamp_ge_MapID_MapTZeratul02)][1] = 3;
    libCamp_gv_tS_ResearchMissionObjects[(libCamp_ge_MapID_MapTZeratul03)][1] = libCamp_ge_StoryResearchObject_ResearchObjectPowertheObelisks;
    libCamp_gv_tS_ResearchMissionObjectCount[(libCamp_ge_MapID_MapTZeratul03)][1] = 2;
    libCamp_gv_tS_ResearchMissionObjects[(libCamp_ge_MapID_MapTZeratul04)][1] = libCamp_ge_StoryResearchObject_ResearchObjectProtecttheArchive;
    libCamp_gv_tS_ResearchMissionObjectCount[(libCamp_ge_MapID_MapTZeratul04)][1] = 1;
    auto20A5AD78_i = libCamp_gv_TSC_MISSION_FIRST;
    while (auto20A5AD78_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[auto20A5AD78_i];
        libCamp_gv_tSX_ResearchMissionProgress[(lv_indexMission)][(libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss)] = 0;
        libCamp_gv_tSX_ResearchMissionProgress[(lv_indexMission)][(libCamp_ge_StoryResearchCategory_ResearchCategoryZerg)] = 0;
        auto20A5AD78_i = auto20A5AD78_i + 1;
    }
}

void libCamp_gf_TS_InitializeResearchObjDataSingle (int lp_iD, string lp_convoID) {
    // Variable Declarations
    int lv_researchObjIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_researchObjIndex = (lp_iD);
    libCamp_gv_tS_ResearchObjID[lv_researchObjIndex] = lp_iD;
    libCamp_gv_tS_ResearchObjConvoID[lv_researchObjIndex] = lp_convoID;
}

void libCamp_gf_TS_InitializeResearchObjData () {
    // Automatic Variable Declarations
    // Implementation
    libCamp_gf_TS_InitializeResearchObjDataSingle(libCamp_ge_StoryResearchObject_ResearchObjectFindChrysalisDNA, "LabResearchObject|FindChrysalisDNA");
    libCamp_gf_TS_InitializeResearchObjDataSingle(libCamp_ge_StoryResearchObject_ResearchObjectKilltheInfestors, "LabResearchObject|KillInfestors");
    libCamp_gf_TS_InitializeResearchObjDataSingle(libCamp_ge_StoryResearchObject_ResearchObjectDestroyHatcheries, "LabResearchObject|DestroyHatcheries");
    libCamp_gf_TS_InitializeResearchObjDataSingle(libCamp_ge_StoryResearchObject_ResearchObjectFindDefilerBoneSamples, "LabResearchObject|FindDefilerBoneSamples");
    libCamp_gf_TS_InitializeResearchObjDataSingle(libCamp_ge_StoryResearchObject_ResearchObjectFindDevourerTissueSamples, "LabResearchObject|FindCerebrateTissueSamples");
    libCamp_gf_TS_InitializeResearchObjDataSingle(libCamp_ge_StoryResearchObject_ResearchObjectDestroytheSporeCannons, "LabResearchObject|KillSporeCannons");
    libCamp_gf_TS_InitializeResearchObjDataSingle(libCamp_ge_StoryResearchObject_ResearchObjectDestroythePreserverPrisons, "LabResearchObject|DestroyPreserverPrisons");
    libCamp_gf_TS_InitializeResearchObjDataSingle(libCamp_ge_StoryResearchObject_ResearchObjectOvermindTendrils, "LabResearchObject|OvermindTendrils");
    libCamp_gf_TS_InitializeResearchObjDataSingle(libCamp_ge_StoryResearchObject_ResearchObjectKill1500Zerg, "LabResearchObject|Kill1500Zerg");
    libCamp_gf_TS_InitializeResearchObjDataSingle(libCamp_ge_StoryResearchObject_ResearchObjectKilltheBrutalisk, "LabResearchObject|KillBrutalisk");
    libCamp_gf_TS_InitializeResearchObjDataSingle(libCamp_ge_StoryResearchObject_ResearchObjectKilltheBrutalisk, "LabResearchObject|KillBrutalisk");
    libCamp_gf_TS_InitializeResearchObjDataSingle(libCamp_ge_StoryResearchObject_ResearchObjectKilltheBrutalisk, "LabResearchObject|KillBrutalisk");
    libCamp_gf_TS_InitializeResearchObjDataSingle(libCamp_ge_StoryResearchObject_ResearchObjectFindProtossRelics, "LabResearchObject|FindProtossRelic");
    libCamp_gf_TS_InitializeResearchObjDataSingle(libCamp_ge_StoryResearchObject_ResearchObjectFindProtossRelicContraband, "LabResearchObject|FindProtossRelicContraband");
    libCamp_gf_TS_InitializeResearchObjDataSingle(libCamp_ge_StoryResearchObject_ResearchObjectPowertheAbandonedStructure, "LabResearchObject|PowerupAbandonedStructure");
    libCamp_gf_TS_InitializeResearchObjDataSingle(libCamp_ge_StoryResearchObject_ResearchObjectPowertheObelisks, "LabResearchObject|PowerupAncientObelisk");
    libCamp_gf_TS_InitializeResearchObjDataSingle(libCamp_ge_StoryResearchObject_ResearchObjectFindtheProtossPsiElements, "LabResearchObject|FindProtossPsiElements");
    libCamp_gf_TS_InitializeResearchObjDataSingle(libCamp_ge_StoryResearchObject_ResearchObjectVisittheShrines, "LabResearchObject|VisitEachShrine");
    libCamp_gf_TS_InitializeResearchObjDataSingle(libCamp_ge_StoryResearchObject_ResearchObjectProtecttheArchive, "LabResearchObject|ProtectArchive");
    libCamp_gf_TS_InitializeResearchObjDataSingle(libCamp_ge_StoryResearchObject_ResearchObjectRescuePrisoners, "LabResearchObject|ReleasePrisoners");
}

void libCamp_gf_TS_ResetResearchData () {
    // Variable Declarations
    int lv_indexResearch;
    int lv_indexMission;

    // Automatic Variable Declarations
    int auto49357283_i;
    int auto94AD0AA2_i;

    // Variable Initialization
    lv_indexResearch = libCamp_ge_StoryResearchID_ResearchNone;
    lv_indexMission = libCamp_ge_MapID_MapNone;

    // Implementation
    auto49357283_i = libCamp_gv_TSC_RESEARCH_FIRST;
    while (auto49357283_i <= libCamp_gv_TSC_RESEARCH_LAST) {
        lv_indexResearch = libCamp_gv_tS_ResearchID[auto49357283_i];
        auto94AD0AA2_i = libCamp_gv_TSC_MISSION_FIRST;
        while (auto94AD0AA2_i <= libCamp_gv_TSC_MISSION_LAST) {
            lv_indexMission = libCamp_gv_tS_MapID[auto94AD0AA2_i];
            libCamp_gv_tSX_ResearchMissionProgress[(lv_indexResearch)][(libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss)] = 0;
            libCamp_gv_tSX_ResearchMissionProgress[(lv_indexResearch)][(libCamp_ge_StoryResearchCategory_ResearchCategoryZerg)] = 0;
            auto94AD0AA2_i = auto94AD0AA2_i + 1;
        }
        libCamp_gv_tSX_ResearchState[(lv_indexResearch)] = (libCamp_ge_StoryResearchState_ResearchStateAvailable);
        auto49357283_i = auto49357283_i + 1;
    }
    libCamp_gv_tS_ResearchMissionProgressCurrent[(libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss)] = 0;
    libCamp_gv_tS_ResearchMissionProgressCurrent[(libCamp_ge_StoryResearchCategory_ResearchCategoryZerg)] = 0;
    libCamp_gv_tSX_DebugResearchLevel[(libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss)] = 0;
    libCamp_gv_tSX_DebugResearchLevel[(libCamp_ge_StoryResearchCategory_ResearchCategoryZerg)] = 0;
    libCamp_gv_tSX_ResearchPointsConverted[(libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss)] = 0;
    libCamp_gv_tSX_ResearchPointsConverted[(libCamp_ge_StoryResearchCategory_ResearchCategoryZerg)] = 0;
    libCamp_gv_tSX_ResearchUIOldPoints[(libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss)] = 0;
    libCamp_gv_tSX_ResearchUIOldPoints[(libCamp_ge_StoryResearchCategory_ResearchCategoryZerg)] = 0;
}

void libCamp_gf_TS_ApplyResearchesTech (int lp_player) {
    // Variable Declarations
    int lv_indexResearch;
    int lv_level;
    bool lv_allowDisallow;

    // Automatic Variable Declarations
    int auto980C5D8E_i;
    unitgroup autoA2C3AE26_g;
    int autoA2C3AE26_u;
    unit autoA2C3AE26_var;

    // Variable Initialization
    lv_indexResearch = libCamp_ge_StoryResearchID_ResearchNone;
    lv_allowDisallow = true;

    // Implementation
    auto980C5D8E_i = libCamp_gv_TSC_RESEARCH_FIRST;
    while (auto980C5D8E_i <= libCamp_gv_TSC_RESEARCH_LAST) {
        lv_indexResearch = libCamp_gv_tS_ResearchID[auto980C5D8E_i];
        if ((libCamp_gf_StoryResearchStateCheck(lv_indexResearch, libCamp_ge_StoryResearchState_ResearchStatePurchased) == true)) {
            lv_level = 1;
            lv_allowDisallow = true;
        }
        else {
            lv_level = 0;
            lv_allowDisallow = false;
        }
        if ((libCamp_gf_TS_StoryResearchRewardUpgrade1(lv_indexResearch) != null)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, libCamp_gf_TS_StoryResearchRewardUpgrade1(lv_indexResearch), lv_level);
        }

        if ((libCamp_gf_TS_StoryResearchRewardUpgrade2(lv_indexResearch) != null)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, libCamp_gf_TS_StoryResearchRewardUpgrade2(lv_indexResearch), lv_level);
        }

        if ((libCamp_gf_TS_StoryResearchRewardAC1(lv_indexResearch) != null)) {
            TechTreeAbilityAllow(lp_player, libCamp_gf_TS_StoryResearchRewardAC1(lv_indexResearch), lv_allowDisallow);
        }

        if ((libCamp_gf_TS_StoryResearchRewardAC2(lv_indexResearch) != null)) {
            TechTreeAbilityAllow(lp_player, libCamp_gf_TS_StoryResearchRewardAC2(lv_indexResearch), lv_allowDisallow);
        }

        auto980C5D8E_i = auto980C5D8E_i + 1;
    }
    libCamp_gf_TS_UpdateTechAddons(lp_player);
    libCamp_gf_TS_UpdateTechUpgrades(lp_player);
    libCamp_gf_TS_UpdateResearchUnitHelpPanel(lp_player);
    if ((TechTreeUpgradeCount(lp_player, "CellularReactors", c_techCountQueuedOrBetter) == 1)) {
        autoA2C3AE26_g = UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        autoA2C3AE26_u = UnitGroupCount(autoA2C3AE26_g, c_unitCountAll);
        for (;; autoA2C3AE26_u -= 1) {
            autoA2C3AE26_var = UnitGroupUnitFromEnd(autoA2C3AE26_g, autoA2C3AE26_u);
            if (autoA2C3AE26_var == null) { break; }
            UnitSetPropertyFixed(autoA2C3AE26_var, c_unitPropEnergy, (UnitGetPropertyFixed(autoA2C3AE26_var, c_unitPropEnergy, c_unitPropCurrent) + 100.0));
        }
    }

}

void libCamp_gf_TS_UpdateResearchUnitHelpPanel (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCamp_gf_StoryResearchStateCheck(libCamp_ge_StoryResearchID_ResearchP41Raven, libCamp_ge_StoryResearchState_ResearchStatePurchased) == true)) {
        libCamp_gf_AddUnitTypeToUnitHelpPanel("Raven", true, lp_player);
    }

    if ((libCamp_gf_StoryResearchStateCheck(libCamp_ge_StoryResearchID_ResearchP42ScienceVessel, libCamp_ge_StoryResearchState_ResearchStatePurchased) == true)) {
        libCamp_gf_AddUnitTypeToUnitHelpPanel("ScienceVessel", true, lp_player);
    }

    if ((libCamp_gf_StoryResearchStateCheck(libCamp_ge_StoryResearchID_ResearchP51TechReactor, libCamp_ge_StoryResearchState_ResearchStatePurchased) == true)) {
        libCamp_gf_AddUnitTypeToUnitHelpPanel("TechReactor", true, lp_player);
    }

    if ((libCamp_gf_StoryResearchStateCheck(libCamp_ge_StoryResearchID_ResearchZ21PlanetaryFortress, libCamp_ge_StoryResearchState_ResearchStatePurchased) == true)) {
        libCamp_gf_AddUnitTypeToUnitHelpPanel("PlanetaryFortress", true, lp_player);
    }

    if ((libCamp_gf_StoryResearchStateCheck(libCamp_ge_StoryResearchID_ResearchZ22PerditionTurret, libCamp_ge_StoryResearchState_ResearchStatePurchased) == true)) {
        libCamp_gf_AddUnitTypeToUnitHelpPanel("PerditionTurret", true, lp_player);
    }

    if ((libCamp_gf_StoryResearchStateCheck(libCamp_ge_StoryResearchID_ResearchZ31Predator, libCamp_ge_StoryResearchState_ResearchStatePurchased) == true)) {
        libCamp_gf_AddUnitTypeToUnitHelpPanel("Predator", true, lp_player);
    }

    if ((libCamp_gf_StoryResearchStateCheck(libCamp_ge_StoryResearchID_ResearchZ32Hercules, libCamp_ge_StoryResearchState_ResearchStatePurchased) == true)) {
        libCamp_gf_AddUnitTypeToUnitHelpPanel("Hercules", true, lp_player);
    }

    if ((libCamp_gf_StoryResearchStateCheck(libCamp_ge_StoryResearchID_ResearchZ51HiveMindEmulator, libCamp_ge_StoryResearchState_ResearchStatePurchased) == true)) {
        libCamp_gf_AddUnitTypeToUnitHelpPanel("HiveMindEmulator", true, lp_player);
    }

    if ((libCamp_gf_StoryResearchStateCheck(libCamp_ge_StoryResearchID_ResearchZ52SigmaProjector, libCamp_ge_StoryResearchState_ResearchStatePurchased) == true)) {
        libCamp_gf_AddUnitTypeToUnitHelpPanel("PsiDisruptor", true, lp_player);
    }

}

void libCamp_gf_AddProgressToStoryResearch (int lp_researchObject, int lp_count) {
    // Automatic Variable Declarations
    // Implementation
    libCamp_gv_tS_ResearchMissionProgressCurrent[(libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss)] += (lp_count * libCamp_gf_StoryResearchObjectReward(lp_researchObject, libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss));
    libCamp_gv_tS_ResearchMissionProgressCurrent[(libCamp_ge_StoryResearchCategory_ResearchCategoryZerg)] += (lp_count * libCamp_gf_StoryResearchObjectReward(lp_researchObject, libCamp_ge_StoryResearchCategory_ResearchCategoryZerg));
    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Camp_9FCB7B36") + IntToText(libCamp_gv_tS_ResearchMissionProgressCurrent[(libCamp_ge_StoryResearchCategory_ResearchCategoryZerg)])), false);
    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Camp_20D12B86") + IntToText(libCamp_gf_StoryResearchMissionProgress(libCamp_gv_tS_CurrentMap, libCamp_ge_StoryResearchCategory_ResearchCategoryZerg))), false);
    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Camp_94BE7099") + IntToText(libCamp_gv_tS_ResearchMissionProgressCurrent[(libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss)])), false);
    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Camp_072C0622") + IntToText(libCamp_gf_StoryResearchMissionProgress(libCamp_gv_tS_CurrentMap, libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss))), false);
    if ((libCamp_gf_TS_StoryResearchMissionProgressCurrent(libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss) > libCamp_gf_StoryResearchMissionProgress(libCamp_gv_tS_CurrentMap, libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss))) {
        libCamp_gv_tSX_ResearchMissionProgress[(libCamp_gv_tS_CurrentMap)][(libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss)] = libCamp_gf_TS_StoryResearchMissionProgressCurrent(libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss);
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Camp_02AE8CE6") + IntToText(libCamp_gf_StoryResearchMissionProgress(libCamp_gv_tS_CurrentMap, libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss))), false);
    }

    if ((libCamp_gf_TS_StoryResearchMissionProgressCurrent(libCamp_ge_StoryResearchCategory_ResearchCategoryZerg) > libCamp_gf_StoryResearchMissionProgress(libCamp_gv_tS_CurrentMap, libCamp_ge_StoryResearchCategory_ResearchCategoryZerg))) {
        libCamp_gv_tSX_ResearchMissionProgress[(libCamp_gv_tS_CurrentMap)][(libCamp_ge_StoryResearchCategory_ResearchCategoryZerg)] = libCamp_gf_TS_StoryResearchMissionProgressCurrent(libCamp_ge_StoryResearchCategory_ResearchCategoryZerg);
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Camp_094C58AF") + IntToText(libCamp_gf_StoryResearchMissionProgress(libCamp_gv_tS_CurrentMap, libCamp_ge_StoryResearchCategory_ResearchCategoryZerg))), false);
    }

}

void libCamp_gf_SetStoryResearchPurchased (int lp_researchID) {
    // Automatic Variable Declarations
    // Implementation
    libCamp_gv_tSX_ResearchState[(lp_researchID)] = libCamp_ge_StoryResearchState_ResearchStatePurchased;
}

void libCamp_gf_SetStoryResearchPointsConverted (int lp_category, int lp_points) {
    // Automatic Variable Declarations
    // Implementation
    libCamp_gv_tSX_ResearchPointsConverted[(lp_category)] = lp_points;
}

void libCamp_gf_SetStoryResearchPointsOld (int lp_category, int lp_points) {
    // Automatic Variable Declarations
    // Implementation
    libCamp_gv_tSX_ResearchPointsOld[(lp_category)] = lp_points;
}

int libCamp_gf_TS_StoryResearchPointsOld (int lp_categeory) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tSX_ResearchUIOldPoints[(lp_categeory)];
}

int libCamp_gf_TS_ResearchUIResearchID (int lp_researchItem) {
    // Variable Declarations
    int lv_indexResearch;

    // Automatic Variable Declarations
    int auto41A72E46_i;

    // Variable Initialization
    lv_indexResearch = libCamp_ge_StoryResearchID_ResearchNone;

    // Implementation
    auto41A72E46_i = libCamp_gv_TSC_RESEARCH_FIRST;
    while (auto41A72E46_i <= libCamp_gv_TSC_RESEARCH_LAST) {
        lv_indexResearch = libCamp_gv_tS_ResearchID[auto41A72E46_i];
        if ((libCamp_gf_TS_StoryResearchUIItem(lv_indexResearch) == lp_researchItem)) {
            return lv_indexResearch;
        }

        auto41A72E46_i = auto41A72E46_i + 1;
    }
    return libCamp_ge_StoryResearchID_ResearchNone;
}

void libCamp_gf_DisplayResearchPanel (trigger lp_exitCallback) {
    // Automatic Variable Declarations
    // Implementation
    libCamp_gv_tS_ResearchUIExitCallback = lp_exitCallback;
    libCamp_gv_tS_ResearchUIExitEnabled = false;
    libCamp_gf_TS_ResearchUICreate();
    ResearchCategorySetCurrentLevel(libCamp_gv_tS_ResearchUICategories[(libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss)], libCamp_gv_tSX_ResearchUIOldPoints[(libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss)]);
    ResearchCategorySetCurrentLevel(libCamp_gv_tS_ResearchUICategories[(libCamp_ge_StoryResearchCategory_ResearchCategoryZerg)], libCamp_gv_tSX_ResearchUIOldPoints[(libCamp_ge_StoryResearchCategory_ResearchCategoryZerg)]);
    ResearchCategorySetLastLevel(libCamp_gv_tS_ResearchUICategories[(libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss)], libCamp_gv_tSX_ResearchUIOldPoints[(libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss)]);
    ResearchCategorySetLastLevel(libCamp_gv_tS_ResearchUICategories[(libCamp_ge_StoryResearchCategory_ResearchCategoryZerg)], libCamp_gv_tSX_ResearchUIOldPoints[(libCamp_ge_StoryResearchCategory_ResearchCategoryZerg)]);
    libCamp_gf_TS_ResearchUIUpdate();
    libCamp_gv_tSX_ResearchUIOldPoints[(libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss)] = libCamp_gf_StoryResearchPoints(libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss);
    libCamp_gv_tSX_ResearchUIOldPoints[(libCamp_ge_StoryResearchCategory_ResearchCategoryZerg)] = libCamp_gf_StoryResearchPoints(libCamp_ge_StoryResearchCategory_ResearchCategoryZerg);
    libCamp_gv_tS_ResearchUIExitEnabled = true;
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResearchPanel, true);
}

void libCamp_gf_TS_ResearchUICreate () {
    int init_i;
    int init_j;
    int init_k;

    // Variable Declarations
    int lv_categoryIndex;
    text lv_categoryName;
    int lv_indexCategory;
    int lv_tierIndex;
    int lv_indexResearch;
    int lv_slotIndex;
    int[3][6][3] lv_uIItem;

    // Automatic Variable Declarations
    const int auto912ABAB3_ae = 2;
    const int auto912ABAB3_ai = 1;
    int autoA1BE3232_val;
    const int autoBD7EADA4_ae = 5;
    const int autoBD7EADA4_ai = 1;
    int auto9C5BB20A_i;

    // Variable Initialization
    lv_indexCategory = libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss;
    lv_indexResearch = libCamp_ge_StoryResearchID_ResearchNone;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        for (init_j = 0; init_j <= 5; init_j += 1) {
            for (init_k = 0; init_k <= 2; init_k += 1) {
                lv_uIItem[init_i][init_j][init_k] = c_invalidResearchItemId;
            }
        }
    }

    // Implementation
    if ((libCamp_gv_tS_ResearchUICreated == true)) {
        return ;
    }

    libCamp_gv_tS_ResearchUICreated = true;
    lv_categoryIndex = 1;
    for ( ; ( (auto912ABAB3_ai >= 0 && lv_categoryIndex <= auto912ABAB3_ae) || (auto912ABAB3_ai < 0 && lv_categoryIndex >= auto912ABAB3_ae) ) ; lv_categoryIndex += auto912ABAB3_ai ) {
        autoA1BE3232_val = lv_categoryIndex;
        if (autoA1BE3232_val == (libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss)) {
            lv_indexCategory = libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss;
            lv_categoryName = StringExternal("Param/Value/lib_Camp_3E9A4A97");
        }
        else if (autoA1BE3232_val == (libCamp_ge_StoryResearchCategory_ResearchCategoryZerg)) {
            lv_indexCategory = libCamp_ge_StoryResearchCategory_ResearchCategoryZerg;
            lv_categoryName = StringExternal("Param/Value/lib_Camp_F968DADB");
        }
        else {
        }
        ResearchCategoryCreate(PlayerGroupAll(), lv_categoryIndex);
        libCamp_gv_tS_ResearchUICategories[lv_categoryIndex] = ResearchCategoryLastCreated();
        ResearchCategorySetNameText(ResearchCategoryLastCreated(), lv_categoryName);
        lv_tierIndex = 1;
        for ( ; ( (autoBD7EADA4_ai >= 0 && lv_tierIndex <= autoBD7EADA4_ae) || (autoBD7EADA4_ai < 0 && lv_tierIndex >= autoBD7EADA4_ae) ) ; lv_tierIndex += autoBD7EADA4_ai ) {
            ResearchTierCreate(PlayerGroupAll(), ResearchCategoryLastCreated(), lv_tierIndex);
            libCamp_gv_tS_ResearchUITiers[lv_categoryIndex][lv_tierIndex] = ResearchTierLastCreated();
            ResearchTierSetMaxPurchasesAllowed(ResearchTierLastCreated(), 1);
            ResearchTierSetRequiredLevel(ResearchTierLastCreated(), (lv_tierIndex * libCamp_gv_tSC_RESEARCH_TIERLEVEL));
        }
    }
    auto9C5BB20A_i = libCamp_gv_TSC_RESEARCH_FIRST;
    while (auto9C5BB20A_i <= libCamp_gv_TSC_RESEARCH_LAST) {
        lv_indexResearch = libCamp_gv_tS_ResearchID[auto9C5BB20A_i];
        lv_categoryIndex = (libCamp_gf_StoryResearchCategory(lv_indexResearch));
        lv_tierIndex = libCamp_gf_TS_StoryResearchTier(lv_indexResearch);
        lv_slotIndex = libCamp_gf_TS_StoryResearchSlot(lv_indexResearch);
        ResearchItemCreate(PlayerGroupAll(), libCamp_gv_tS_ResearchUITiers[lv_categoryIndex][lv_tierIndex], lv_slotIndex);
        libCamp_gv_tS_ResearchUIItem[(lv_indexResearch)] = ResearchItemLastCreated();
        lv_uIItem[lv_categoryIndex][lv_tierIndex][lv_slotIndex] = ResearchItemLastCreated();
        ResearchItemSetNameText(ResearchItemLastCreated(), libCamp_gf_StoryResearchName(lv_indexResearch));
        ResearchItemSetDescriptionText(ResearchItemLastCreated(), libCamp_gf_StoryResearchDescription(lv_indexResearch));
        ResearchItemSetIconFilePath(ResearchItemLastCreated(), libCamp_gf_StoryResearchIcon(lv_indexResearch));
        ResearchItemSetMovieFilePath(ResearchItemLastCreated(), libCamp_gf_StoryResearchMovie(lv_indexResearch));
        ResearchItemSetTooltipText(ResearchItemLastCreated(), libCamp_gf_StoryResearchTooltip(lv_indexResearch));
        ResearchItemSetConfirmationText(ResearchItemLastCreated(), libCamp_gf_StoryResearchConfirmationText(lv_indexResearch));
        ResearchItemSetState(ResearchItemLastCreated(), c_researchItemStateEnabled);
        auto9C5BB20A_i = auto9C5BB20A_i + 1;
    }
}

void libCamp_gf_TS_ResearchUIUpdate () {
    // Variable Declarations
    int lv_indexResearch;
    int lv_otherResearch;
    text lv_tip;

    // Automatic Variable Declarations
    int autoCE1E6292_i;
    int autoBAF0C87C_i;
    int autoD1456021_val;

    // Variable Initialization
    lv_indexResearch = libCamp_ge_StoryResearchID_ResearchNone;
    lv_otherResearch = libCamp_ge_StoryResearchID_ResearchNone;

    // Implementation
    libCamp_gf_TS_ResearchUICreate();
    ResearchCategorySetCurrentLevel(libCamp_gv_tS_ResearchUICategories[(libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss)], MinI(libCamp_gf_StoryResearchPointCap(libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss), libCamp_gf_StoryResearchPoints(libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss)));
    ResearchCategorySetCurrentLevel(libCamp_gv_tS_ResearchUICategories[(libCamp_ge_StoryResearchCategory_ResearchCategoryZerg)], MinI(libCamp_gf_StoryResearchPointCap(libCamp_ge_StoryResearchCategory_ResearchCategoryZerg), libCamp_gf_StoryResearchPoints(libCamp_ge_StoryResearchCategory_ResearchCategoryZerg)));
    autoCE1E6292_i = libCamp_gv_TSC_RESEARCH_FIRST;
    while (autoCE1E6292_i <= libCamp_gv_TSC_RESEARCH_LAST) {
        lv_indexResearch = libCamp_gv_tS_ResearchID[autoCE1E6292_i];
        ResearchItemSetTooltipText(libCamp_gv_tS_ResearchUIItem[(lv_indexResearch)], libCamp_gf_StoryResearchTooltip(lv_indexResearch));
        ResearchItemSetState(libCamp_gf_TS_StoryResearchUIItem(lv_indexResearch), c_researchItemStateEnabled);
        autoCE1E6292_i = autoCE1E6292_i + 1;
    }
    autoBAF0C87C_i = libCamp_gv_TSC_RESEARCH_FIRST;
    while (autoBAF0C87C_i <= libCamp_gv_TSC_RESEARCH_LAST) {
        lv_indexResearch = libCamp_gv_tS_ResearchID[autoBAF0C87C_i];
        if ((libCamp_gf_StoryResearchStateCheck(lv_indexResearch, libCamp_ge_StoryResearchState_ResearchStatePurchased) == true)) {
            ResearchItemSetState(libCamp_gf_TS_StoryResearchUIItem(lv_indexResearch), c_researchItemStatePurchased);
            lv_otherResearch = libCamp_gf_TS_StoryResearchTheOtherOfTheSameTier(lv_indexResearch);
            ResearchItemSetState(libCamp_gf_TS_StoryResearchUIItem(lv_otherResearch), c_researchItemStateDisabled);
            autoD1456021_val = libCamp_gf_StoryResearchCategory(lv_otherResearch);
            if (autoD1456021_val == libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss) {
                lv_tip = (StringExternal("Param/Value/lib_Camp_922BF17E") + libCamp_gf_StoryResearchName(lv_otherResearch) + StringExternal("Param/Value/lib_Camp_323EDACB"));
                libCamp_gf_TS_ResearchUIClearProtossConfirmationText();
            }
            else if (autoD1456021_val == libCamp_ge_StoryResearchCategory_ResearchCategoryZerg) {
                lv_tip = (StringExternal("Param/Value/lib_Camp_F92407E3") + libCamp_gf_StoryResearchName(lv_otherResearch) + StringExternal("Param/Value/lib_Camp_D7DAE7B6"));
                libCamp_gf_TS_ResearchUIClearZergConfirmationText();
            }
            else {
            }
            ResearchItemSetTooltipText(libCamp_gv_tS_ResearchUIItem[(lv_otherResearch)], lv_tip);
        }

        autoBAF0C87C_i = autoBAF0C87C_i + 1;
    }
}

void libCamp_gf_TS_ResearchUIClearProtossConfirmationText () {
    // Variable Declarations
    int lv_indexResearch;
    int lv_otherResearch;

    // Automatic Variable Declarations
    int autoCC12C21D_i;

    // Variable Initialization
    lv_indexResearch = libCamp_ge_StoryResearchID_ResearchNone;
    lv_otherResearch = libCamp_ge_StoryResearchID_ResearchNone;

    // Implementation
    autoCC12C21D_i = libCamp_gv_TSC_RESEARCH_FIRST;
    while (autoCC12C21D_i <= libCamp_gv_TSC_RESEARCH_LAST) {
        lv_indexResearch = libCamp_gv_tS_ResearchID[autoCC12C21D_i];
        if ((libCamp_gf_StoryResearchCategory(lv_indexResearch) == libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss)) {
            ResearchItemSetConfirmationText(libCamp_gf_TS_StoryResearchUIItem(lv_indexResearch), StringToText(""));
        }

        autoCC12C21D_i = autoCC12C21D_i + 1;
    }
}

void libCamp_gf_TS_ResearchUIClearZergConfirmationText () {
    // Variable Declarations
    int lv_indexResearch;
    int lv_otherResearch;

    // Automatic Variable Declarations
    int auto96137861_i;

    // Variable Initialization
    lv_indexResearch = libCamp_ge_StoryResearchID_ResearchNone;
    lv_otherResearch = libCamp_ge_StoryResearchID_ResearchNone;

    // Implementation
    auto96137861_i = libCamp_gv_TSC_RESEARCH_FIRST;
    while (auto96137861_i <= libCamp_gv_TSC_RESEARCH_LAST) {
        lv_indexResearch = libCamp_gv_tS_ResearchID[auto96137861_i];
        if ((libCamp_gf_StoryResearchCategory(lv_indexResearch) == libCamp_ge_StoryResearchCategory_ResearchCategoryZerg)) {
            ResearchItemSetConfirmationText(libCamp_gf_TS_StoryResearchUIItem(lv_indexResearch), StringToText(""));
        }

        auto96137861_i = auto96137861_i + 1;
    }
}

void libCamp_gf_TS_RoomChangePanelCreate () {
    // Automatic Variable Declarations
    // Implementation
    if ((libCamp_gv_tS_RoomChangeDialog == c_invalidDialogId)) {
        DialogCreate(500, 50, c_anchorBottom, 0, 0, false);
        libCamp_gv_tS_RoomChangeDialog = DialogLastCreated();
        DialogSetImageVisible(DialogLastCreated(), false);
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
        libCamp_gv_tS_RoomChangeDialogBorder = DialogControlLastCreated();
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
        libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_roomselectionframe.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
        DialogCreate(1600, 400, c_anchorBottom, 0, 70, false);
        libCamp_gv_tS_RoomChangeDialogSubtitle = DialogLastCreated();
        DialogSetTransparency(DialogLastCreated(), 100.0);
    }

}

void libCamp_gf_AddRoomChangePanelButton (text lp_roomName, trigger lp_clickCallback, trigger lp_updateCallback, int lp_custonData, text lp_tip) {
    // Variable Declarations
    const int lv_buttonX = 220;
    const int lv_buttonY = 42;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libCamp_gf_TS_RoomChangePanelCreate();
    DialogControlCreate(libCamp_gv_tS_RoomChangeDialog, c_triggerControlTypeButton);
    libCamp_gv_tS_RoomChangeButtonCount += 1;
    libCamp_gv_tS_RoomChangeButtons[libCamp_gv_tS_RoomChangeButtonCount] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemHandle(DialogControlLastCreated(), ("WoL_RoomChangeButton" + IntToString(libCamp_gv_tS_RoomChangeButtonCount)), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lp_roomName, PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_buttonX, lv_buttonY);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_options_selectonbutton_normalpressed_terran.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RoomChangePanelText", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\ui_options_selectonbutton_normaloverpressedover_terran.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lp_tip, PlayerGroupAll());
    libCamp_gv_tS_RoomChangeButtonCallbackClick[libCamp_gv_tS_RoomChangeButtonCount] = lp_clickCallback;
    libCamp_gv_tS_RoomChangeButtonCallbackUpdate[libCamp_gv_tS_RoomChangeButtonCount] = lp_updateCallback;
    libCamp_gv_tS_RoomChangeButtonCustomData[libCamp_gv_tS_RoomChangeButtonCount] = lp_custonData;
    DialogControlCreate(libCamp_gv_tS_RoomChangeDialog, c_triggerControlTypeImage);
    libCamp_gv_tS_RoomChangeButtonBG[libCamp_gv_tS_RoomChangeButtonCount] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_buttonX, lv_buttonY);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, libCamp_gv_tS_RoomChangeButtons[libCamp_gv_tS_RoomChangeButtonCount], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_options_selectonbutton_selected.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlCreate(libCamp_gv_tS_RoomChangeDialog, c_triggerControlTypeLabel);
    libCamp_gv_tS_RoomChangeButtonText[libCamp_gv_tS_RoomChangeButtonCount] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemHandle(DialogControlLastCreated(), ("WoL_RoomChangeLabel" + IntToString(libCamp_gv_tS_RoomChangeButtonCount)), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lp_roomName, PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_buttonX, lv_buttonY);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, libCamp_gv_tS_RoomChangeButtons[libCamp_gv_tS_RoomChangeButtonCount], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RoomChangePanelTextDisabled", PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libCamp_gf_UpdateRoomChangePanel();
}

int libCamp_gf_LastAddRoomChangePanelButton () {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tS_RoomChangeButtonCount;
}

int libCamp_gf_RoomChangePanelButtonCount () {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tS_RoomChangeButtonCount;
}

int libCamp_gf_RoomChangePanelCurrentButton () {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tS_RoomChangeButtonCurrent;
}

int libCamp_gf_RoomChangePanelButtonCustomData (int lp_buttonId) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tS_RoomChangeButtonCustomData[lp_buttonId];
}

bool libCamp_gf_RoomChangePanelIsVisible () {
    // Automatic Variable Declarations
    // Implementation
    return ((libCamp_gv_tS_RoomChangeDialog != c_invalidDialogId) && DialogIsVisible(libCamp_gv_tS_RoomChangeDialog, 1));
}

void libCamp_gf_HideRoomChangePanel (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    libCamp_gf_TS_RoomChangePanelCreate();
    if ((lp_showHide == true)) {
        if ((libCamp_gv_tS_RoomChangeButtonCount > 0)) {
            DialogSetVisible(libCamp_gv_tS_RoomChangeDialog, PlayerGroupAll(), true);
            DialogSetVisible(libCamp_gv_tS_RoomChangeDialogSubtitle, PlayerGroupAll(), false);
            DialogSetSubtitlePositionOverride(libCamp_gv_tS_RoomChangeDialogSubtitle);
        }

    }
    else {
        DialogSetVisible(libCamp_gv_tS_RoomChangeDialog, PlayerGroupAll(), false);
        DialogSetVisible(libCamp_gv_tS_RoomChangeDialogSubtitle, PlayerGroupAll(), false);
        DialogSetSubtitlePositionOverride(c_invalidDialogId);
    }
}

void libCamp_gf_UpdateRoomChangePanel () {
    // Variable Declarations
    int lv_index;
    int lv_sizeX;
    int lv_sizeY;

    // Automatic Variable Declarations
    int autoC6B803EA_ae;
    const int autoC6B803EA_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libCamp_gv_tS_RoomChangeButtonCount > 0)) {
        lv_sizeX = 30;
        lv_sizeY = 60;
        autoC6B803EA_ae = libCamp_gv_tS_RoomChangeButtonCount;
        lv_index = 1;
        for ( ; ( (autoC6B803EA_ai >= 0 && lv_index <= autoC6B803EA_ae) || (autoC6B803EA_ai < 0 && lv_index >= autoC6B803EA_ae) ) ; lv_index += autoC6B803EA_ai ) {
            if ((libCamp_gv_tS_RoomChangeButtonCallbackUpdate[lv_index] != null)) {
                libCamp_gv_tS_RoomChangeButtonCurrent = lv_index;
                TriggerExecute(libCamp_gv_tS_RoomChangeButtonCallbackUpdate[lv_index], true, false);
            }

            DialogControlSetPosition(libCamp_gv_tS_RoomChangeButtons[lv_index], PlayerGroupAll(), c_anchorTopLeft, lv_sizeX, 13);
            lv_sizeX += 215;
        }
        lv_sizeX += 36;
        DialogSetSize(libCamp_gv_tS_RoomChangeDialog, lv_sizeX, lv_sizeY);
        DialogControlSetSize(libCamp_gv_tS_RoomChangeDialogBorder, PlayerGroupAll(), lv_sizeX, lv_sizeY);
        DialogSetPosition(libCamp_gv_tS_RoomChangeDialog, c_anchorBottom, 0, 0);
    }

}

void libCamp_gf_DisableRoomChangePanelButton (bool lp_enableDisable, int lp_buttonId) {
    // Automatic Variable Declarations
    // Deprecated
    libCamp_gf_SetRoomChangePanelButtonState(lp_buttonId, libCamp_ge_RoomPanelButtonState_Enable);
}

void libCamp_gf_SetRoomChangePanelButtonState (int lp_buttonId, int lp_state) {
    // Automatic Variable Declarations
    int auto575891EC_val;

    // Implementation
    if ((lp_buttonId > libCamp_gv_tS_RoomChangeButtonCount)) {
        return ;
    }

    auto575891EC_val = lp_state;
    if (auto575891EC_val == libCamp_ge_RoomPanelButtonState_Enable) {
        DialogControlSetEnabled(libCamp_gv_tS_RoomChangeButtons[lp_buttonId], PlayerGroupAll(), true);
        DialogControlSetVisible(libCamp_gv_tS_RoomChangeButtons[lp_buttonId], PlayerGroupAll(), true);
        DialogControlSetVisible(libCamp_gv_tS_RoomChangeButtonBG[lp_buttonId], PlayerGroupAll(), false);
        DialogControlSetVisible(libCamp_gv_tS_RoomChangeButtonText[lp_buttonId], PlayerGroupAll(), false);
    }
    else if (auto575891EC_val == libCamp_ge_RoomPanelButtonState_Locked) {
        DialogControlSetEnabled(libCamp_gv_tS_RoomChangeButtons[lp_buttonId], PlayerGroupAll(), false);
        DialogControlSetVisible(libCamp_gv_tS_RoomChangeButtons[lp_buttonId], PlayerGroupAll(), true);
        DialogControlSetVisible(libCamp_gv_tS_RoomChangeButtonBG[lp_buttonId], PlayerGroupAll(), false);
        DialogControlSetVisible(libCamp_gv_tS_RoomChangeButtonText[lp_buttonId], PlayerGroupAll(), false);
    }
    else if (auto575891EC_val == libCamp_ge_RoomPanelButtonState_Disable) {
        DialogControlSetEnabled(libCamp_gv_tS_RoomChangeButtons[lp_buttonId], PlayerGroupAll(), false);
        DialogControlSetVisible(libCamp_gv_tS_RoomChangeButtons[lp_buttonId], PlayerGroupAll(), false);
        DialogControlSetVisible(libCamp_gv_tS_RoomChangeButtonBG[lp_buttonId], PlayerGroupAll(), true);
        DialogControlSetVisible(libCamp_gv_tS_RoomChangeButtonText[lp_buttonId], PlayerGroupAll(), true);
    }
    else {
    }
}

trigger auto_libCamp_gf_FlashRoomChangePanelButton_Trigger = null;
int auto_libCamp_gf_FlashRoomChangePanelButton_lp_buttonId;

void libCamp_gf_FlashRoomChangePanelButton (int lp_buttonId) {
    auto_libCamp_gf_FlashRoomChangePanelButton_lp_buttonId = lp_buttonId;

    if (auto_libCamp_gf_FlashRoomChangePanelButton_Trigger == null) {
        auto_libCamp_gf_FlashRoomChangePanelButton_Trigger = TriggerCreate("auto_libCamp_gf_FlashRoomChangePanelButton_TriggerFunc");
    }

    TriggerExecute(auto_libCamp_gf_FlashRoomChangePanelButton_Trigger, false, false);
}

bool auto_libCamp_gf_FlashRoomChangePanelButton_TriggerFunc (bool testConds, bool runActions) {
    int lp_buttonId = auto_libCamp_gf_FlashRoomChangePanelButton_lp_buttonId;

    // Automatic Variable Declarations
    // Implementation
    if (((lp_buttonId > libCamp_gv_tS_RoomChangeButtonCount) || (libCamp_gv_tS_RoomChangeDialog == c_invalidDialogId) || (libCamp_gv_tS_RoomChangeButtons[lp_buttonId] == c_invalidDialogControlId) || (libCamp_gv_tS_RoomChangeButtonFlashing[lp_buttonId] == true))) {
        return true;
    }

    libCamp_gv_tS_RoomChangeButtonFlashing[lp_buttonId] = true;
    DialogControlCreate(libCamp_gv_tS_RoomChangeDialog, c_triggerControlTypeImage);
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_options_selectonbutton_anim_terran.dds", PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), (DialogControlGetWidth(libCamp_gv_tS_RoomChangeButtons[lp_buttonId], 1) + 18), (DialogControlGetHeight(libCamp_gv_tS_RoomChangeButtons[lp_buttonId], 1) + 24));
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, libCamp_gv_tS_RoomChangeButtons[lp_buttonId], c_anchorCenter, 0, -1);
    while (true) {
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.2, 100.0);
        Wait(0.5, c_timeGame);
        if (((lp_buttonId > libCamp_gv_tS_RoomChangeButtonCount) || (libCamp_gv_tS_RoomChangeDialog == c_invalidDialogId) || (libCamp_gv_tS_RoomChangeButtons[lp_buttonId] == c_invalidDialogControlId) || (libCamp_gv_tS_RoomChangeButtonFlashing[lp_buttonId] == false))) {
            DialogControlDestroy(DialogControlLastCreated());
            return true;
        }

        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.2, 0.0);
        Wait(0.5, c_timeReal);
        if (((lp_buttonId > libCamp_gv_tS_RoomChangeButtonCount) || (libCamp_gv_tS_RoomChangeDialog == c_invalidDialogId) || (libCamp_gv_tS_RoomChangeButtons[lp_buttonId] == c_invalidDialogControlId) || (libCamp_gv_tS_RoomChangeButtonFlashing[lp_buttonId] == false))) {
            DialogControlDestroy(DialogControlLastCreated());
            return true;
        }

    }
    return true;
}

trigger auto_libCamp_gf_StopFlashingRoomChangePanelButton_Trigger = null;
int auto_libCamp_gf_StopFlashingRoomChangePanelButton_lp_buttonId;

void libCamp_gf_StopFlashingRoomChangePanelButton (int lp_buttonId) {
    auto_libCamp_gf_StopFlashingRoomChangePanelButton_lp_buttonId = lp_buttonId;

    if (auto_libCamp_gf_StopFlashingRoomChangePanelButton_Trigger == null) {
        auto_libCamp_gf_StopFlashingRoomChangePanelButton_Trigger = TriggerCreate("auto_libCamp_gf_StopFlashingRoomChangePanelButton_TriggerFunc");
    }

    TriggerExecute(auto_libCamp_gf_StopFlashingRoomChangePanelButton_Trigger, false, false);
}

bool auto_libCamp_gf_StopFlashingRoomChangePanelButton_TriggerFunc (bool testConds, bool runActions) {
    int lp_buttonId = auto_libCamp_gf_StopFlashingRoomChangePanelButton_lp_buttonId;

    // Automatic Variable Declarations
    // Implementation
    if (((lp_buttonId > libCamp_gv_tS_RoomChangeButtonCount) || (libCamp_gv_tS_RoomChangeDialog == c_invalidDialogId) || (libCamp_gv_tS_RoomChangeButtons[lp_buttonId] == c_invalidDialogControlId))) {
        return true;
    }

    libCamp_gv_tS_RoomChangeButtonFlashing[lp_buttonId] = false;
    return true;
}

void libCamp_gf_TS_InitializeSceneDataSingle (int lp_iD, text lp_name, string lp_image, string lp_icon) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_index = (lp_iD);
    libCamp_gv_tS_SceneIDs[lv_index] = lp_iD;
    libCamp_gv_tS_SceneNames[lv_index] = lp_name;
    libCamp_gv_tS_SceneImages[lv_index] = lp_image;
    libCamp_gv_tS_SceneIcon[lv_index] = lp_icon;
    libCamp_gv_tS_SceneCallback[lv_index] = null;
    libCamp_gv_tSX_ScenePlayed[lv_index] = false;
}

void libCamp_gf_TS_InitializeSceneData () {
    // Automatic Variable Declarations
    // Implementation
    libCamp_gf_TS_InitializeSceneDataSingle(libCamp_ge_SceneID_SceneTerran01RaynorIntro, StringExternal("Param/Value/lib_Camp_11ED9936"), "Assets\\Textures\\ui_battlereports_raynorintro.dds", "Assets\\Textures\\ui_list_battlereports_raynorintro.dds");
    libCamp_gf_TS_InitializeSceneDataSingle(libCamp_ge_SceneID_SceneTerran02ArmoryIntro, StringExternal("Param/Value/lib_Camp_2C87E7E3"), "Assets\\Textures\\loading-hyperionarmory.dds", "Assets\\Textures\\ui_list_battlereports_barfight.dds");
    libCamp_gf_TS_InitializeSceneDataSingle(libCamp_ge_SceneID_SceneTerran03ZeratulsWarning, StringExternal("Param/Value/lib_Camp_23AD65B9"), "Assets\\Textures\\ui_battlereports_zeratulswarning.dds", "Assets\\Textures\\ui_list_battlereports_zeratulswarning.dds");
    libCamp_gf_TS_InitializeSceneDataSingle(libCamp_ge_SceneID_SceneTerran04TychusIntro, StringExternal("Param/Value/lib_Camp_AFB61769"), "Assets\\Textures\\ui_battlereports_tychusintro.dds", "Assets\\Textures\\ui_list_battlereports_tychusintro.dds");
    libCamp_gf_TS_InitializeSceneDataSingle(libCamp_ge_SceneID_SceneTerran05HornerBridgeIntro, StringExternal("Param/Value/lib_Camp_3725F4D5"), "Assets\\Textures\\ui_battlereports_escapefrommarsara.dds", "Assets\\Textures\\ui_list_battlereports_escapefrommarsara.dds");
    libCamp_gf_TS_InitializeSceneDataSingle(libCamp_ge_SceneID_SceneTerran06ValerianIntro, StringExternal("Param/Value/lib_Camp_9CA392F6"), "Assets\\Textures\\ui_battlereports_valerianintro.dds", "Assets\\Textures\\ui_list_battlereports_valerianintro.dds");
    libCamp_gf_TS_InitializeSceneDataSingle(libCamp_ge_SceneID_SceneTerran07BarFight, StringExternal("Param/Value/lib_Camp_B50CE300"), "Assets\\Textures\\ui_battlereports_barfight.dds", "Assets\\Textures\\ui_list_battlereports_barfight.dds");
    libCamp_gf_TS_InitializeSceneDataSingle(libCamp_ge_SceneID_SceneTerran08HansonEndA, StringExternal("Param/Value/lib_Camp_A11E7A2C"), "Assets\\Textures\\ui_battlereports_hansonenda.dds", "Assets\\Textures\\ui_list_battlereports_hansonenda.dds");
    libCamp_gf_TS_InitializeSceneDataSingle(libCamp_ge_SceneID_SceneTerran09ToshEndA, StringExternal("Param/Value/lib_Camp_41743AAC"), "Assets\\Textures\\ui_battlereports_toshenda.dds", "Assets\\Textures\\ui_list_battlereports_toshenda.dds");
    libCamp_gf_TS_InitializeSceneDataSingle(libCamp_ge_SceneID_SceneTerran10RaynorsDream, StringExternal("Param/Value/lib_Camp_F3A90455"), "Assets\\Textures\\ui_battlereports_raynorsdream.dds", "Assets\\Textures\\ui_list_battlereports_raynorsdream.dds");
    libCamp_gf_TS_InitializeSceneDataSingle(libCamp_ge_SceneID_SceneTerran11CharBatltefield, StringExternal("Param/Value/lib_Camp_4AC8B2B0"), "Assets\\Textures\\ui_battlereports_charbattlefield.dds", "Assets\\Textures\\ui_list_battlereports_charbattlefield.dds");
    libCamp_gf_TS_InitializeSceneDataSingle(libCamp_ge_SceneID_SceneTerran12HornerVictory, StringExternal("Param/Value/lib_Camp_392F550C"), "Assets\\Textures\\ui_battlereports_hornervictory.dds", "Assets\\Textures\\ui_list_battlereports_hornervictory.dds");
    libCamp_gf_TS_InitializeSceneDataSingle(libCamp_ge_SceneID_SceneTerran13HansonEndB, StringExternal("Param/Value/lib_Camp_4FA89672"), "Assets\\Textures\\ui_battlereports_hansonendb.dds", "Assets\\Textures\\ui_list_battlereports_hansonendb.dds");
    libCamp_gf_TS_InitializeSceneDataSingle(libCamp_ge_SceneID_SceneTerran14ToshEndB, StringExternal("Param/Value/lib_Camp_6BD02DB4"), "Assets\\Textures\\ui_battlereports_toshendb.dds", "Assets\\Textures\\ui_list_battlereports_toshendb.dds");
    libCamp_gf_TS_InitializeSceneDataSingle(libCamp_ge_SceneID_SceneTerran15KerriganIntro, StringExternal("Param/Value/lib_Camp_DD9D710E"), "Assets\\Textures\\ui_battlereports_kerriganintro.dds", "Assets\\Textures\\ui_list_battlereports_kerriganintro.dds");
    libCamp_gf_TS_InitializeSceneDataSingle(libCamp_ge_SceneID_SceneTerran16CharIntro, StringExternal("Param/Value/lib_Camp_F0D96F1F"), "Assets\\Textures\\ui_battlereports_charintro.dds", "Assets\\Textures\\ui_list_battlereports_charintro.dds");
    libCamp_gf_TS_InitializeSceneDataSingle(libCamp_ge_SceneID_SceneTerran17CharBattlefieldEnd, StringExternal("Param/Value/lib_Camp_4E8AB1E5"), "Assets\\Textures\\ui_battlereports_charbattlefieldend.dds", "Assets\\Textures\\ui_list_battlereports_charbattlefieldend.dds");
    libCamp_gf_TS_InitializeSceneDataSingle(libCamp_ge_SceneID_ScenePreRenderedOldRivals, StringExternal("Param/Value/lib_Camp_11BE9934"), "Assets\\Textures\\ui_battlereports_oldrivals.dds", "Assets\\Textures\\ui_list_battlereports_oldrivals.dds");
    libCamp_gf_TS_InitializeSceneDataSingle(libCamp_ge_SceneID_ScenePreRenderedBetterMarine, StringExternal("Param/Value/lib_Camp_19E6D6CB"), "Assets\\Textures\\ui_battlereports_buildabettermarine.dds", "Assets\\Textures\\ui_list_battlereports_buildabettermarine.dds");
    libCamp_gf_TS_InitializeSceneDataSingle(libCamp_ge_SceneID_ScenePreRenderedTheDream, StringExternal("Param/Value/lib_Camp_59387068"), "Assets\\Textures\\ui_battlereports_thedream.dds", "Assets\\Textures\\ui_list_battlereports_thedream.dds");
    libCamp_gf_TS_InitializeSceneDataSingle(libCamp_ge_SceneID_ScenePreRenderedEnd, StringExternal("Param/Value/lib_Camp_43021831"), "Assets\\Textures\\ui_battlereports_theshowdown.dds", "Assets\\Textures\\ui_list_battlereports_theshowdown.dds");
}

void libCamp_gf_RegisterSceneCallback (int lp_scene, trigger lp_callback) {
    // Automatic Variable Declarations
    // Implementation
    libCamp_gv_tS_SceneCallback[(lp_scene)] = lp_callback;
}

trigger libCamp_gf_SceneCallback (int lp_scene) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tS_SceneCallback[(lp_scene)];
}

bool libCamp_gf_ScenePlayed (int lp_scene) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tSX_ScenePlayed[(lp_scene)];
}

text libCamp_gf_SceneName (int lp_scene) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tS_SceneNames[(lp_scene)];
}

void libCamp_gf_SetScenePlayed (int lp_scene, bool lp_played) {
    // Automatic Variable Declarations
    // Implementation
    libCamp_gv_tSX_ScenePlayed[(lp_scene)] = lp_played;
}

void libCamp_gf_ChangeAmbience (string lp_ambience) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_ambience == libCamp_gv_tS_CurrentAmbienceLink)) {
        return ;
    }

    libCamp_gv_tS_CurrentAmbienceLink = lp_ambience;
    if ((lp_ambience != null)) {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, lp_ambience, c_soundtrackCueAny, c_soundtrackIndexAny, false);
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Camp_F5EEF511") + StringToText(lp_ambience)), false);
    }
    else {
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Camp_646D4F41") + StringExternal("Param/Value/lib_Camp_ABE2EC7C")), false);
    }
}

int libCamp_gf_StoryState (int lp_stateID) {
    // Automatic Variable Declarations
    // Implementation
    return ConversationDataStateGetValue(libCamp_gv_tS_StoryStateConvoID[(lp_stateID)]);
}

int libCamp_gf_StoryCredits () {
    // Automatic Variable Declarations
    // Implementation
    return ConversationDataStateGetValue("Credits");
}

int libCamp_gf_TS_CampaignDifficulty () {
    // Automatic Variable Declarations
    int auto26A25F2E_val;

    // Implementation
    auto26A25F2E_val = libCamp_gv_tSX_CampaignDifficulty;
    if (auto26A25F2E_val == 1) {
        return 1;
    }
    else if (auto26A25F2E_val == 2) {
        return 2;
    }
    else if (auto26A25F2E_val == 3) {
        return 3;
    }
    else if (auto26A25F2E_val == 4) {
        return 4;
    }
    else {
    }
    return 2;
}

void libCamp_gf_SetStoryState (int lp_stateID, int lp_value) {
    // Automatic Variable Declarations
    // Implementation
    ConversationDataStateSetValue(libCamp_gv_tS_StoryStateConvoID[(lp_stateID)], lp_value);
}

void libCamp_gf_SetStoryCredits (int lp_value) {
    // Automatic Variable Declarations
    // Implementation
    ConversationDataStateSetValue("Credits", lp_value);
    PlayerModifyPropertyInt(1, c_playerPropCredits, c_playerPropOperSetTo, libCamp_gf_StoryCredits());
}

void libCamp_gf_TS_SetCampaignDifficulty (int lp_difficulty) {
    // Automatic Variable Declarations
    int autoBBC4285F_val;

    // Implementation
    autoBBC4285F_val = lp_difficulty;
    if (autoBBC4285F_val == 1) {
        libCamp_gv_tSX_CampaignDifficulty = 1;
    }
    else if (autoBBC4285F_val == 2) {
        libCamp_gv_tSX_CampaignDifficulty = 2;
    }
    else if (autoBBC4285F_val == 3) {
        libCamp_gv_tSX_CampaignDifficulty = 3;
    }
    else if (autoBBC4285F_val == 4) {
        libCamp_gv_tSX_CampaignDifficulty = 4;
    }
    else {
    }
}

void libCamp_gf_TS_InitializeStateData () {
    // Automatic Variable Declarations
    // Implementation
    libCamp_gv_tS_InStoryMode = (libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTStory01);
    libCamp_gv_tS_StoryStateConvoID[(libCamp_ge_StoryStateID_StoryStateAchievementDisabled)] = "StoryState|AchievementDisabled";
    libCamp_gv_tS_StoryStateConvoID[(libCamp_ge_StoryStateID_StoryStateArmoryIntroDone)] = "StoryState|ArmoryIntroDone";
    libCamp_gv_tS_StoryStateConvoID[(libCamp_ge_StoryStateID_StoryStateBattleReportCurrentSelected)] = "StoryState|BattleReportCurrentSel";
    libCamp_gv_tS_StoryStateConvoID[(libCamp_ge_StoryStateID_StoryStateCantinaHornerLinePlayed)] = "StoryState|CantinaHornerLinePlayed";
    libCamp_gv_tS_StoryStateConvoID[(libCamp_ge_StoryStateID_StoryStateCantinaIntroDone)] = "StoryState|CantinaIntroDone";
    libCamp_gv_tS_StoryStateConvoID[(libCamp_ge_StoryStateID_StoryStateCharInvasionStarted)] = "StoryState|CharInvasionStarted";
    libCamp_gv_tS_StoryStateConvoID[(libCamp_ge_StoryStateID_StoryStateFirstMissionLabResearchObjective)] = "StoryState|FirstMissionLabResearchObjective";
    libCamp_gv_tS_StoryStateConvoID[(libCamp_ge_StoryStateID_StoryStateFirstMissionMercBought)] = "StoryState|FirstMissionMercBought";
    libCamp_gv_tS_StoryStateConvoID[(libCamp_ge_StoryStateID_StoryStateHansonOn)] = "StoryState|HansonOn";
    libCamp_gv_tS_StoryStateConvoID[(libCamp_ge_StoryStateID_StoryStateHornerOn)] = "StoryState|HornerOn";
    libCamp_gv_tS_StoryStateConvoID[(libCamp_ge_StoryStateID_StoryStateLabHornerLinePlayed)] = "StoryState|LabHornerLinePlayed";
    libCamp_gv_tS_StoryStateConvoID[(libCamp_ge_StoryStateID_StoryStateLabIntroDone)] = "StoryState|LabIntroDone";
    libCamp_gv_tS_StoryStateConvoID[(libCamp_ge_StoryStateID_StoryStateStetmannOn)] = "StoryState|CowinOn";
    libCamp_gv_tS_StoryStateConvoID[(libCamp_ge_StoryStateID_StoryStateSwannOn)] = "StoryState|SwannOn";
    libCamp_gv_tS_StoryStateConvoID[(libCamp_ge_StoryStateID_StoryStateToshOn)] = "StoryState|ToshOn";
    libCamp_gv_tS_StoryStateConvoID[(libCamp_ge_StoryStateID_StoryStateTychusOn)] = "StoryState|TychusOn";
    libCamp_gv_tS_StoryStateConvoID[(libCamp_ge_StoryStateID_StoryStateHanson02DebriefingDone)] = "StoryState|Hanson02DebriefingDone";
    libCamp_gv_tS_StoryStateConvoID[(libCamp_ge_StoryStateID_StoryStateValerian01DebriefingDone)] = "StoryState|Valerian01DebriefingDone";
    libCamp_gv_tS_StoryStateConvoID[(libCamp_ge_StoryStateID_StoryStateWarfieldOn)] = "StoryState|WarfieldOn";
    libCamp_gv_tS_StoryStateConvoID[(libCamp_ge_StoryStateID_StoryStateYabarraOn)] = "StoryState|YbarraOn";
    libCamp_gv_tS_StoryStateConvoID[(libCamp_ge_StoryStateID_StoryStateHorner05sUnlocked)] = "StoryState|HornerSecretMissionOn";
    libCamp_gv_tS_StoryStateConvoID[(libCamp_ge_StoryStateID_StoryStateResearchCappedNoticeProtoss)] = "StoryState|ResearchCapNoticeProtossDone";
    libCamp_gv_tS_StoryStateConvoID[(libCamp_ge_StoryStateID_StoryStateResearchCappedNoticeZerg)] = "StoryState|ResearchCapNoticeZergDone";
    libCamp_gv_tS_StoryStateConvoID[(libCamp_ge_StoryStateID_StoryStateLastMissionisZeratul02orZeratul03)] = "StoryState|LastMissionZ2OrZ3";
    libCamp_gv_tS_StoryStateConvoID[(libCamp_ge_StoryStateID_StoryStateLabArtifactCount)] = "StoryState|LabArtifactCount";
    libCamp_gv_tS_StoryStateConvoID[(libCamp_ge_StoryStateID_StoryStateArmoryOpened)] = "StoryState|ArmoryOpened";
    libCamp_gv_tS_StoryStateConvoID[(libCamp_ge_StoryStateID_StoryStateArmoryVisited)] = "StoryState|ArmoryVisited";
    libCamp_gv_tS_StoryStateConvoID[(libCamp_ge_StoryStateID_StoryStateCantinaOpened)] = "StoryState|CantinaOpened";
    libCamp_gv_tS_StoryStateConvoID[(libCamp_ge_StoryStateID_StoryStateCantinaVisited)] = "StoryState|CantinaVisited";
    libCamp_gv_tS_StoryStateConvoID[(libCamp_ge_StoryStateID_StoryStateLabOpened)] = "StoryState|LabOpened";
    libCamp_gv_tS_StoryStateConvoID[(libCamp_ge_StoryStateID_StoryStateLabVisited)] = "StoryState|LabVisited";
    libCamp_gv_tS_StoryStateConvoID[(libCamp_ge_StoryStateID_StoryStateTipFactoryPlayed)] = "StoryState|TipFactoryPlayed";
    libCamp_gv_tS_StoryStateConvoID[(libCamp_ge_StoryStateID_StoryStateTipStarportPlayed)] = "StoryState|TipStarportPlayed";
    libCamp_gv_tS_StoryStateConvoID[(libCamp_ge_StoryStateID_StoryStateTipVisitLabPlayed)] = "StoryState|TipVisitLabPlayed";
    libCamp_gv_tS_StoryStateConvoID[(libCamp_ge_StoryStateID_StoryStateTipNewProtossResearchPlayed)] = "StoryState|TipNewProtossResearchPlayed";
    libCamp_gv_tS_StoryStateConvoID[(libCamp_ge_StoryStateID_StoryStateTipNewZergResearchPlayed)] = "StoryState|TipNewZergResearchPlayed";
    libCamp_gv_tS_StoryStateConvoID[(libCamp_ge_StoryStateID_StoryStateTipZergCreepPlayed)] = "StoryState|TipZergCreepPlayed";
    libCamp_gv_tS_StoryStateConvoID[(libCamp_ge_StoryStateID_StoryStateTaurenOutHouseActivated)] = "StoryState|TaurenOutHouseActivated";
    libCamp_gv_tS_StoryStateConvoID[(libCamp_ge_StoryStateID_StoryStateIsStoryTransitionSave)] = "StoryState|IsStoryTransitionSave";
}

void libCamp_gf_TS_UpdateStoryStates () {
    // Automatic Variable Declarations
    // Implementation
    ConversationDataStateSetValue("MissionCompletedCount", libCamp_gf_CountMissions(libCamp_ge_MissionStatus_Completed));
    if (((libCamp_gf_LastSuccessfulMission() == libCamp_ge_MapID_MapTZeratul02) || (libCamp_gf_LastSuccessfulMission() == libCamp_ge_MapID_MapTZeratul03))) {
        ConversationDataStateSetValue("StoryState|LastMissionZ2OrZ3", 1);
    }
    else {
        ConversationDataStateSetValue("StoryState|LastMissionZ2OrZ3", 0);
    }
}

text libCamp_gf_PlanetName (int lp_planetID) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tS_PlanetName[(lp_planetID)];
}

int libCamp_gf_PlanetID (int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_index < libCamp_gv_tSC_PLANET_FIRST) || (lp_index > libCamp_gv_tSC_PLANET_LAST))) {
        return libCamp_ge_PlanetID_PlanetNone;
    }

    return libCamp_gv_tS_PlanetID[lp_index];
}

text libCamp_gf_PlanetSubtitle (int lp_planetID) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tS_PlanetSubtitle[(lp_planetID)];
}

int libCamp_gf_PlanetMission (int lp_planetID) {
    // Variable Declarations
    int lv_indexMission;

    // Automatic Variable Declarations
    int auto6D3A38E7_i;

    // Variable Initialization
    lv_indexMission = libCamp_ge_MapID_MapNone;

    // Implementation
    auto6D3A38E7_i = libCamp_gv_TSC_MISSION_FIRST;
    while (auto6D3A38E7_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[auto6D3A38E7_i];
        if ((libCamp_gf_MissionPlanet(lv_indexMission) == lp_planetID) && (libCamp_gf_MissionStatusCheck(lv_indexMission, libCamp_ge_MissionStatus_Available) == true)) {
            return lv_indexMission;
        }

        auto6D3A38E7_i = auto6D3A38E7_i + 1;
    }
    return libCamp_ge_MapID_MapNone;
}

string libCamp_gf_PlanetLighting (int lp_planetID) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tS_PlanetLighting[(lp_planetID)];
}

string libCamp_gf_PlanetIconModel (int lp_planetID) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tS_PlanetButtonModel[(lp_planetID)];
}

string libCamp_gf_PlanetModel (int lp_planetID) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tS_PlanetModel[(lp_planetID)];
}

text libCamp_gf_PlanetMissionResearchOpportunitiesText (int lp_mission, text lp_protossStyle, text lp_zergStyle) {
    // Variable Declarations
    int lv_researchProtoss;
    int lv_researchZerg;
    text lv_researchText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_researchText = StringToText("");
    lv_researchProtoss = libCamp_gf_TS_StoryResearchMissionOpportunities(lp_mission, libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss);
    lv_researchZerg = libCamp_gf_TS_StoryResearchMissionOpportunities(lp_mission, libCamp_ge_StoryResearchCategory_ResearchCategoryZerg);
    if ((lv_researchProtoss <= 0) && (lv_researchZerg <= 0)) {
        return null;
    }

    if ((lv_researchProtoss > 0)) {
        lv_researchText = (lv_researchText + StringExternal("Param/Value/lib_Camp_B150EF10") + lp_protossStyle + StringExternal("Param/Value/lib_Camp_164027AB") + IntToText(lv_researchProtoss) + StringExternal("Param/Value/lib_Camp_9CA72998"));
        if ((lv_researchZerg > 0)) {
            lv_researchText = (lv_researchText + StringExternal("Param/Value/lib_Camp_497471D7"));
        }

    }

    if ((lv_researchZerg > 0)) {
        lv_researchText = (lv_researchText + StringExternal("Param/Value/lib_Camp_607E15F5") + lp_zergStyle + StringExternal("Param/Value/lib_Camp_5EE0797E") + IntToText(lv_researchZerg) + StringExternal("Param/Value/lib_Camp_E9C6C0D6"));
    }

    return lv_researchText;
}

int libCamp_gf_FirstPlanet () {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gf_PlanetID(libCamp_gv_tSC_PLANET_FIRST);
}

int libCamp_gf_LastPlanet () {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gf_PlanetID(libCamp_gv_tSC_PLANET_LAST);
}

void libCamp_gf_TS_InitializePlanetDataSingle (int lp_planetID, text lp_name, text lp_subtitle, string lp_model, string lp_buttonModel, string lp_lighting, string lp_image, soundlink lp_ambientSound) {
    // Variable Declarations
    int lv_planetIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_planetIndex = (lp_planetID);
    libCamp_gv_tS_PlanetID[lv_planetIndex] = lp_planetID;
    libCamp_gv_tS_PlanetName[lv_planetIndex] = lp_name;
    libCamp_gv_tS_PlanetSubtitle[lv_planetIndex] = lp_subtitle;
    libCamp_gv_tS_PlanetModel[lv_planetIndex] = lp_model;
    libCamp_gv_tS_PlanetButtonModel[lv_planetIndex] = lp_buttonModel;
    libCamp_gv_tS_PlanetLighting[lv_planetIndex] = lp_lighting;
    libCamp_gv_tS_PlanetImage[lv_planetIndex] = lp_image;
    libCamp_gv_tS_PlanetAmbientSound[lv_planetIndex] = lp_ambientSound;
    libCamp_gv_tS_PlanetMission[lv_planetIndex] = libCamp_ge_MapID_MapNone;
}

void libCamp_gf_TS_InitializePlanetData () {
    // Automatic Variable Declarations
    // Implementation
    libCamp_gf_TS_InitializePlanetDataSingle(libCamp_ge_PlanetID_PlanetAgria, StringExternal("Param/Value/lib_Camp_32DAF29C"), StringExternal("Param/Value/lib_Camp_E4C25526"), "PlanetViewAgria", "PlanetIconAgria", "PlanetViewAgria", "Assets\\Textures\\loading-agria.dds", SoundLink("Ambience_Agria", -1));
    libCamp_gf_TS_InitializePlanetDataSingle(libCamp_ge_PlanetID_PlanetAiur, StringExternal("Param/Value/lib_Camp_67D7B0A2"), StringExternal("Param/Value/lib_Camp_DB058B20"), "PlanetViewAiur", "PlanetIconAiur", "PlanetViewAiur", "Assets\\Textures\\loading-aiur.dds", null);
    libCamp_gf_TS_InitializePlanetDataSingle(libCamp_ge_PlanetID_PlanetAvernus, StringExternal("Param/Value/lib_Camp_17EF9630"), StringExternal("Param/Value/lib_Camp_B0F79BF2"), "PlanetViewAvernus", "PlanetIconAvernus", "PlanetViewAvernus", "Assets\\Textures\\loading-avernus.dds", SoundLink("Ambience_Avernus", -1));
    libCamp_gf_TS_InitializePlanetDataSingle(libCamp_ge_PlanetID_PlanetBelShir, StringExternal("Param/Value/lib_Camp_25484E49"), StringExternal("Param/Value/lib_Camp_E890C71F"), "PlanetViewBelShir", "PlanetIconBelShir", "PlanetViewBelShir", "Assets\\Textures\\loading-belshir.dds", SoundLink("Ambience_BelShir", -1));
    libCamp_gf_TS_InitializePlanetDataSingle(libCamp_ge_PlanetID_PlanetCastanar, StringExternal("Param/Value/lib_Camp_BFBBD422"), StringExternal("Param/Value/lib_Camp_46677C72"), "PlanetViewCastanar", "PlanetIconCastanar", "PlanetViewCastanar", "Assets\\Textures\\loading-castanar.dds", null);
    libCamp_gf_TS_InitializePlanetDataSingle(libCamp_ge_PlanetID_PlanetChar, StringExternal("Param/Value/lib_Camp_EB15BEFE"), StringExternal("Param/Value/lib_Camp_F37EB66E"), "PlanetViewChar", "PlanetIconChar", "PlanetViewChar", "Assets\\Textures\\loading-char.dds", SoundLink("Ambience_Char", -1));
    libCamp_gf_TS_InitializePlanetDataSingle(libCamp_ge_PlanetID_PlanetDeadmansPort, StringExternal("Param/Value/lib_Camp_217CF675"), StringExternal("Param/Value/lib_Camp_B5050D6C"), "PlanetViewPortZion", "PlanetIconPortZion", "PlanetViewPortZion", "Assets\\Textures\\loading-portzion.dds", null);
    libCamp_gf_TS_InitializePlanetDataSingle(libCamp_ge_PlanetID_PlanetHaven, StringExternal("Param/Value/lib_Camp_2F01CD49"), StringExternal("Param/Value/lib_Camp_CCFB8F00"), "PlanetViewHaven", "PlanetIconHaven", "PlanetViewHaven", "Assets\\Textures\\loading-haven.dds", SoundLink("Ambience_Haven", -1));
    libCamp_gf_TS_InitializePlanetDataSingle(libCamp_ge_PlanetID_PlanetKorhal, StringExternal("Param/Value/lib_Camp_19E56832"), StringExternal("Param/Value/lib_Camp_2739E8AA"), "PlanetViewKorhal", "PlanetIconKorhal", "PlanetViewKorhal", "Assets\\Textures\\loading-korhal.dds", SoundLink("Ambience_Korhal", -1));
    libCamp_gf_TS_InitializePlanetDataSingle(libCamp_ge_PlanetID_PlanetMarSara, StringExternal("Param/Value/lib_Camp_4FD4EF13"), StringExternal("Param/Value/lib_Camp_E2E1FD9A"), "PlanetViewMarSara", "PlanetIconMarSara", "PlanetViewMarSara", "Assets\\Textures\\loading-marsara.dds", SoundLink("Ambience_MarSara", -1));
    libCamp_gf_TS_InitializePlanetDataSingle(libCamp_ge_PlanetID_PlanetMeinhoff, StringExternal("Param/Value/lib_Camp_BD3C2C63"), StringExternal("Param/Value/lib_Camp_84D42FBF"), "PlanetViewMeinhoff", "PlanetIconMeinhoff", "PlanetViewMeinhoff", "Assets\\Textures\\loading-meinhoff.dds", SoundLink("Ambience_Meinhoff", -1));
    libCamp_gf_TS_InitializePlanetDataSingle(libCamp_ge_PlanetID_PlanetMonlyth, StringExternal("Param/Value/lib_Camp_3BC660EA"), StringExternal("Param/Value/lib_Camp_A022EEA1"), "PlanetViewMonlyth", "PlanetIconMonlyth", "PlanetViewMeinhoff", "Assets\\Textures\\loading-monlyth.dds", SoundLink("Ambience_Monlyth", -1));
    libCamp_gf_TS_InitializePlanetDataSingle(libCamp_ge_PlanetID_PlanetNewFolsom, StringExternal("Param/Value/lib_Camp_272CE763"), StringExternal("Param/Value/lib_Camp_8DF6EFB8"), "PlanetViewNewFolsom", "PlanetIconNewFolsom", "PlanetViewNewFolsom", "Assets\\Textures\\loading-newfolsom.dds", SoundLink("Ambience_NewFolsom", -1));
    libCamp_gf_TS_InitializePlanetDataSingle(libCamp_ge_PlanetID_PlanetRedstone, StringExternal("Param/Value/lib_Camp_74827189"), StringExternal("Param/Value/lib_Camp_F9A7EE82"), "PlanetViewRedstone", "PlanetIconRedstone", "PlanetViewRedstone", "Assets\\Textures\\loading-redstone.dds", SoundLink("Ambience_Redstone", -1));
    libCamp_gf_TS_InitializePlanetDataSingle(libCamp_ge_PlanetID_PlanetSigmaQuadrant, StringExternal("Param/Value/lib_Camp_5622FB12"), StringExternal("Param/Value/lib_Camp_5431E016"), "PlanetViewSigmaQuadrant", "PlanetIconSigmaQuadrant", null, "Assets\\Textures\\loading-ulnar.dds", null);
    libCamp_gf_TS_InitializePlanetDataSingle(libCamp_ge_PlanetID_PlanetTarsonis, StringExternal("Param/Value/lib_Camp_E0079759"), StringExternal("Param/Value/lib_Camp_A5BC4B4B"), "PlanetViewTarsonis", "PlanetIconTarsonis", "PlanetViewTarsonis", "Assets\\Textures\\loading-tarsonis.dds", SoundLink("Ambience_Tarsonis", -1));
    libCamp_gf_TS_InitializePlanetDataSingle(libCamp_ge_PlanetID_PlanetTyphon, StringExternal("Param/Value/lib_Camp_0A846A0F"), StringExternal("Param/Value/lib_Camp_BFC1F78D"), "PlanetViewTyphon", "PlanetIconTyphon", null, "Assets\\Textures\\loading-typhon.dds", null);
    libCamp_gf_TS_InitializePlanetDataSingle(libCamp_ge_PlanetID_PlanetTyrador, StringExternal("Param/Value/lib_Camp_1CF63478"), StringExternal("Param/Value/lib_Camp_72810DB5"), "PlanetViewTyrador", "PlanetIconTyrador", "PlanetViewTyrador", "Assets\\Textures\\loading-tyrador.dds", null);
    libCamp_gf_TS_InitializePlanetDataSingle(libCamp_ge_PlanetID_PlanetUlaan, StringExternal("Param/Value/lib_Camp_B21453FB"), StringExternal("Param/Value/lib_Camp_812B3F4F"), "PlanetViewUlaan", "PlanetIconUlaan", "PlanetViewUlaan", "Assets\\Textures\\loading-ulaan.dds", null);
    libCamp_gf_TS_InitializePlanetDataSingle(libCamp_ge_PlanetID_PlanetUlnar, StringExternal("Param/Value/lib_Camp_F82527E0"), StringExternal("Param/Value/lib_Camp_0FA3186C"), "PlanetViewShakuras", "PlanetIconUlnar", null, "Assets\\Textures\\loading-ulnar.dds", null);
    libCamp_gf_TS_InitializePlanetDataSingle(libCamp_ge_PlanetID_PlanetValhalla, StringExternal("Param/Value/lib_Camp_478B9C37"), StringExternal("Param/Value/lib_Camp_97FD4573"), "PlanetViewValhalla", "PlanetIconValhalla", "PlanetViewValhalla", "Assets\\Textures\\loading-valhalla.dds", null);
    libCamp_gf_TS_InitializePlanetDataSingle(libCamp_ge_PlanetID_PlanetXil, StringExternal("Param/Value/lib_Camp_B5829691"), StringExternal("Param/Value/lib_Camp_1637B84F"), "PlanetViewXil", "PlanetIconXil", "PlanetViewXil", "Assets\\Textures\\loading-xil.dds", SoundLink("Ambience_Xil", -1));
    libCamp_gf_TS_InitializePlanetDataSingle(libCamp_ge_PlanetID_PlanetZhakul, StringExternal("Param/Value/lib_Camp_661E4410"), StringExternal("Param/Value/lib_Camp_F137ABE5"), "PlanetViewZhakulDas", "PlanetIconZhakulDas", "PlanetViewZhakulDas", "Assets\\Textures\\loading-zhakuldas.dds", null);
}

int libCamp_gf_AddPlanet (int lp_planet) {
    // Variable Declarations
    int lv_planetIndex;
    int lv_mission;
    int lv_missionIndex;
    int lv_contactIndex;
    int lv_groupEnabled;
    int lv_groupEnabledIndex;
    int lv_researchProtoss;
    int lv_researchZerg;
    text lv_researchText;
    int lv_objective;
    int lv_bonusRewards;
    string lv_contactTooltipConvo;
    string lv_techTooltipID;

    // Automatic Variable Declarations
    int autoA0174EFC_i;
    int autoA4BDE018_val;
    int auto01A44EB2_val;

    // Variable Initialization
    lv_mission = libCamp_ge_MapID_MapNone;
    lv_groupEnabled = libCamp_ge_StoryTechGroup_StoryTechGroupNone;
    lv_objective = libCamp_ge_MissionObjective_MissionObjectiveNone;
    lv_techTooltipID = "";

    // Implementation
    lv_planetIndex = (lp_planet);
    lv_mission = libCamp_gf_PlanetMission(lp_planet);
    lv_missionIndex = (lv_mission);
    PlanetCreate(PlayerGroupAll(), c_planetStateActive);
    PlanetSetPlanetName(PlanetLastCreated(), libCamp_gf_PlanetName(lp_planet));
    PlanetSetPlanetModelLink(PlanetLastCreated(), libCamp_gv_tS_PlanetButtonModel[lv_planetIndex]);
    PlanetSetBackgroundModelLink(PlanetLastCreated(), libCamp_gv_tS_PlanetModel[lv_planetIndex]);
    PlanetSetTooltipText(PlanetLastCreated(), libCamp_gf_MissionPlanetInfo(lv_mission));
    PlanetSetMissionName(PlanetLastCreated(), libCamp_gf_MissionNameInUpperCase(lv_mission));
    PlanetSetPrimaryObjectiveText(PlanetLastCreated(), (libCamp_gf_MissionObjectivesText(lv_mission)));
    PlanetSetRewardTitle(PlanetLastCreated(), StringExternal("Param/Value/lib_Camp_98485AE1"));
    if ((libCamp_gf_MissionReward(lv_mission) <= 0)) {
        PlanetSetRewardText(PlanetLastCreated(), StringToText(""));
    }
    else {
        PlanetSetRewardText(PlanetLastCreated(), (libCamp_gf_FormatCredits(libCamp_gf_MissionReward(lv_mission), false)));
    }
    if ((lv_mission == libCamp_ge_MapID_MapTHorner05S)) {
        PlanetSetMissionTitle(PlanetLastCreated(), StringExternal("Param/Value/lib_Camp_549F1F43"));
        PlanetSetPlanetText(PlanetLastCreated(), StringExternal("Param/Value/lib_Camp_50B1B2CB"));
    }
    else {
        PlanetSetMissionTitle(PlanetLastCreated(), StringExternal("UI/PlanetPanelMissionTitle"));
    }
    PlanetSetPrimaryObjectiveTitle(PlanetLastCreated(), StringExternal("UI/PlanetPanelObjectiveTitle"));
    PlanetSetSecondaryObjectiveTitle(PlanetLastCreated(), StringExternal("UI/PlanetPanelBonusObjectiveTitle"));
    PlanetSetResearchTitle(PlanetLastCreated(), StringExternal("UI/PlanetPanelResearchTitle"));
    PlanetSetBonusTitle(PlanetLastCreated(), StringExternal("UI/PlanetPanelBonusTitle"));
    if ((lv_mission == libCamp_ge_MapID_MapTHanson03A)) {
        lv_researchText = StringExternal("Param/Value/lib_Camp_843C196A");
    }
    else {
        lv_researchText = libCamp_gf_PlanetMissionResearchOpportunitiesText(lv_mission, StringExternal("Param/Value/lib_Camp_F706E9F6"), StringExternal("Param/Value/lib_Camp_6B5EC3C6"));
    }
    if ((lv_researchText != null)) {
        PlanetSetResearchText(PlanetLastCreated(), lv_researchText);
    }

    lv_bonusRewards = 0;
    autoA0174EFC_i = 1;
    while (autoA0174EFC_i <= libCamp_gv_TSC_MISSIONOBJECTIVECOUNT) {
        if (libCamp_gv_tS_MissionObjectives[lv_mission][autoA0174EFC_i] != 0) {
            lv_objective = libCamp_gv_tS_MissionObjectives[lv_mission][autoA0174EFC_i];
            lv_bonusRewards += (libCamp_gf_MissionObjectiveItemCount(lv_objective) * libCamp_gf_MissionObjectiveCreditsPerItem(lv_objective));
        }
        autoA0174EFC_i = autoA0174EFC_i + 1;
    }
    if ((lv_bonusRewards > 0)) {
        PlanetSetBonusText(PlanetLastCreated(), libCamp_gf_FormatCredits(lv_bonusRewards, true));
    }

    lv_groupEnabled = libCamp_gf_MissionUnlockedTechSubgorup(lv_mission, 1);
    lv_groupEnabledIndex = (lv_groupEnabled);
    PlanetSetTechnologyTooltipText(PlanetLastCreated(), ConversationDataStateText("PlanetPanelTooltips|TechImage", "Description"));
    if ((lv_groupEnabled != libCamp_ge_StoryTechGroup_StoryTechGroupNone) && (libCamp_gv_tS_TechGroupShowOnReport[lv_groupEnabledIndex] == true)) {
        PlanetSetTechnologyName(PlanetLastCreated(), UnitTypeGetName(libCamp_gf_StoryTechGroupUnitType(lv_groupEnabled)));
        PlanetSetTechnologyText(PlanetLastCreated(), libCamp_gf_StoryTechGroupDescription(lv_groupEnabled));
        PlanetSetTechnologyTooltipText(PlanetLastCreated(), libCamp_gf_StoryTechGroupTooltip(lv_groupEnabled));
        PlanetSetTechnologyUnitLink(PlanetLastCreated(), libCamp_gf_StoryTechGroupUnitType(lv_groupEnabled));
    }
    else {
        PlanetSetTechnologyName(PlanetLastCreated(), StringToText(""));
    }
    if (((lv_mission == libCamp_ge_MapID_MapTTosh03A))) {
        PlanetSetTechnologyName(PlanetLastCreated(), StringToText(""));
        PlanetSetTechnologyText(PlanetLastCreated(), StringToText(""));
        PlanetSetTechnologyUnitLink(PlanetLastCreated(), "QuestionMark");
    }

    lv_contactIndex = (libCamp_gv_tS_MissionContact[lv_missionIndex]);
    PlanetSetContactName(PlanetLastCreated(), libCamp_gv_tS_ContactName[lv_contactIndex]);
    if ((lv_mission == libCamp_ge_MapID_MapTHanson01)) {
        PlanetSetContactModelLink(PlanetLastCreated(), "HansonDistressPortrait");
    }
    else {
        PlanetSetContactModelLink(PlanetLastCreated(), libCamp_gf_ContactPortraitModel(libCamp_gf_MissionContact(lv_mission)));
    }
    lv_contactTooltipConvo = "PlanetPanelTooltips|Employer_Image";
    autoA4BDE018_val = libCamp_gv_tS_MissionContact[lv_missionIndex];
    if (autoA4BDE018_val == libCamp_ge_ContactID_ContactHanson) {
        lv_contactTooltipConvo = "PlanetPanelTooltips|DrHanson";
    }
    else if (autoA4BDE018_val == libCamp_ge_ContactID_ContactAdjutant) {
        lv_contactTooltipConvo = "PlanetPanelTooltips|Adjutant";
    }
    else if (autoA4BDE018_val == libCamp_ge_ContactID_ContactValerianMengsk) {
        lv_contactTooltipConvo = "PlanetPanelTooltips|CrownPrinceValerian";
    }
    else if (autoA4BDE018_val == libCamp_ge_ContactID_ContactTychus) {
        lv_contactTooltipConvo = "PlanetPanelTooltips|Tychus";
    }
    else if (autoA4BDE018_val == libCamp_ge_ContactID_ContactTosh) {
        auto01A44EB2_val = lv_mission;
        if (auto01A44EB2_val == libCamp_ge_MapID_MapTTosh01) {
            lv_contactTooltipConvo = "PlanetPanelTooltips|Tosh_Tosh01";
        }
        else if (auto01A44EB2_val == libCamp_ge_MapID_MapTTosh02) {
            lv_contactTooltipConvo = "PlanetPanelTooltips|Tosh_Tosh02/03";
        }
        else if (auto01A44EB2_val == libCamp_ge_MapID_MapTTosh03A) {
            lv_contactTooltipConvo = "PlanetPanelTooltips|Tosh_Tosh02/03";
        }
        else if (auto01A44EB2_val == libCamp_ge_MapID_MapTTosh03B) {
            lv_contactTooltipConvo = "PlanetPanelTooltips|Tosh_Tosh02/03";
        }
        else {
        }
    }
    else if (autoA4BDE018_val == libCamp_ge_ContactID_ContactHorner) {
        lv_contactTooltipConvo = "PlanetPanelTooltips|Horner";
    }
    else if (autoA4BDE018_val == libCamp_ge_ContactID_ContactZeratul) {
        lv_contactTooltipConvo = "PlanetPanelTooltips|Zeratul";
    }
    else {
    }
    PlanetSetContactTooltipText(PlanetLastCreated(), ConversationDataStateText(lv_contactTooltipConvo, "Description"));
    if (((lv_mission == libCamp_ge_MapID_MapTValerian01) || (lv_mission == libCamp_ge_MapID_MapTValerian02A) || (lv_mission == libCamp_ge_MapID_MapTValerian02B) || (lv_mission == libCamp_ge_MapID_MapTValerian03))) {
        PlanetSetContactTitle(PlanetLastCreated(), StringToText(""));
        PlanetSetTechnologyTitle(PlanetLastCreated(), StringToText(""));
    }

    return PlanetLastCreated();
}

int libCamp_gf_TechPurchasableTechID (int lp_techPurchasable) {
    // Variable Declarations
    int lv_tech;

    // Automatic Variable Declarations
    int auto0A5AA2BD_i;

    // Variable Initialization
    lv_tech = libCamp_ge_StoryTech_StoryTechNone;

    // Implementation
    auto0A5AA2BD_i = libCamp_gv_TSC_TECH_FIRST;
    while (auto0A5AA2BD_i <= libCamp_gv_TSC_TECH_LAST) {
        lv_tech = libCamp_gv_tS_TechID[auto0A5AA2BD_i];
        if ((libCamp_gv_tS_Tech_UI[(lv_tech)] == lp_techPurchasable)) {
            return lv_tech;
        }

        auto0A5AA2BD_i = auto0A5AA2BD_i + 1;
    }
    return libCamp_ge_StoryTech_StoryTechNone;
}

bool libCamp_gf_CanAffordTech (int lp_techID) {
    // Variable Declarations
    int lv_techIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_techIndex = (lp_techID);
    if ((libCamp_gv_tSX_Tech_Status[lv_techIndex] != libCamp_ge_StoryTechStates_TechLocked) && (libCamp_gf_StoryCredits() >= libCamp_gf_StoryTechCost(lp_techID))) {
        return true;
    }
    else {
        return false;
    }
}

int libCamp_gf_CostofPurchasedTech () {
    // Variable Declarations
    int lv_indexTech;
    int lv_total;

    // Automatic Variable Declarations
    int autoA540636D_i;

    // Variable Initialization
    lv_indexTech = libCamp_ge_StoryTech_StoryTechNone;

    // Implementation
    lv_total = 0;
    autoA540636D_i = libCamp_gv_TSC_TECH_FIRST;
    while (autoA540636D_i <= libCamp_gv_TSC_TECH_LAST) {
        lv_indexTech = libCamp_gv_tS_TechID[autoA540636D_i];
        if ((libCamp_gv_tSX_Tech_Status[(lv_indexTech)] == libCamp_ge_StoryTechStates_TechPurchased)) {
            lv_total = (lv_total + libCamp_gf_StoryTechCost(lv_indexTech));
        }

        autoA540636D_i = autoA540636D_i + 1;
    }
    return lv_total;
}

int libCamp_gf_NumberofPurchasedTech () {
    // Variable Declarations
    int lv_index;
    int lv_total;

    // Automatic Variable Declarations
    int auto558C5954_ae;
    const int auto558C5954_ai = 1;

    // Variable Initialization

    // Implementation
    lv_total = 0;
    auto558C5954_ae = libCamp_gv_TSC_TECH_LAST;
    lv_index = libCamp_gv_TSC_TECH_FIRST;
    for ( ; ( (auto558C5954_ai >= 0 && lv_index <= auto558C5954_ae) || (auto558C5954_ai < 0 && lv_index >= auto558C5954_ae) ) ; lv_index += auto558C5954_ai ) {
        if ((libCamp_gv_tSX_Tech_Status[lv_index] == libCamp_ge_StoryTechStates_TechPurchased)) {
            lv_total += 1;
        }

    }
    return lv_total;
}

int libCamp_gf_NumberofAvailableTech () {
    // Variable Declarations
    int lv_index;
    int lv_total;

    // Automatic Variable Declarations
    int auto2630D323_ae;
    const int auto2630D323_ai = 1;

    // Variable Initialization

    // Implementation
    lv_total = 0;
    auto2630D323_ae = libCamp_gv_TSC_TECH_LAST;
    lv_index = libCamp_gv_TSC_TECH_FIRST;
    for ( ; ( (auto2630D323_ai >= 0 && lv_index <= auto2630D323_ae) || (auto2630D323_ai < 0 && lv_index >= auto2630D323_ae) ) ; lv_index += auto2630D323_ai ) {
        if (((libCamp_gv_tSX_Tech_Status[lv_index] == libCamp_ge_StoryTechStates_TechAvailable) || (libCamp_gv_tSX_Tech_Status[lv_index] == libCamp_ge_StoryTechStates_TechNew))) {
            lv_total += 1;
        }

    }
    return lv_total;
}

string libCamp_gf_TS_StoryTechConvoID (int lp_tech) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tS_Tech_ConvoID[(lp_tech)];
}

text libCamp_gf_StoryTechName (int lp_tech) {
    // Automatic Variable Declarations
    // Implementation
    return ConversationDataStateName(libCamp_gf_TS_StoryTechConvoID(lp_tech));
}

text libCamp_gf_StoryTechTooltip (int lp_tech) {
    // Automatic Variable Declarations
    // Implementation
    return ConversationDataStateText(libCamp_gf_TS_StoryTechConvoID(lp_tech), ("Tooltip"));
}

text libCamp_gf_StoryTechDescription (int lp_tech) {
    // Automatic Variable Declarations
    // Implementation
    return ConversationDataStateText(libCamp_gf_TS_StoryTechConvoID(lp_tech), ("Description"));
}

int libCamp_gf_StoryTechCost (int lp_tech) {
    // Automatic Variable Declarations
    // Implementation
    return FixedToInt(ConversationDataStateFixedValue(libCamp_gf_TS_StoryTechConvoID(lp_tech), ("Cost")));
}

int libCamp_gf_StoryTechSlot (int lp_tech) {
    // Automatic Variable Declarations
    // Implementation
    return FixedToInt(ConversationDataStateFixedValue(libCamp_gf_TS_StoryTechConvoID(lp_tech), ("Slot")));
}

string libCamp_gf_StoryTechIcon (int lp_tech) {
    // Automatic Variable Declarations
    // Implementation
    return ConversationDataStateImagePath(libCamp_gf_TS_StoryTechConvoID(lp_tech));
}

string libCamp_gf_StoryTechMovie (int lp_tech) {
    // Automatic Variable Declarations
    // Implementation
    return ConversationDataStateMoviePath(libCamp_gf_TS_StoryTechConvoID(lp_tech));
}

string libCamp_gf_StoryTechUpgrade (int lp_tech, int lp_index) {
    // Variable Declarations
    string lv_convoID;

    // Automatic Variable Declarations
    int auto749D8E3E_val;

    // Variable Initialization
    lv_convoID = "Upgrade1";

    // Implementation
    auto749D8E3E_val = lp_index;
    if (auto749D8E3E_val == 1) {
        lv_convoID = "Upgrade1";
    }
    else if (auto749D8E3E_val == 2) {
        lv_convoID = "Upgrade2";
    }
    else {
        lv_convoID = "Upgrade1";
    }
    return ConversationDataStateUpgrade(libCamp_gf_TS_StoryTechConvoID(lp_tech), (lv_convoID));
}

abilcmd libCamp_gf_StoryTechAbilityCommand (int lp_tech, int lp_index) {
    // Variable Declarations
    string lv_convoID;

    // Automatic Variable Declarations
    int autoBF14B95F_val;

    // Variable Initialization
    lv_convoID = "AC1";

    // Implementation
    autoBF14B95F_val = lp_index;
    if (autoBF14B95F_val == 1) {
        lv_convoID = "AC1";
    }
    else if (autoBF14B95F_val == 2) {
        lv_convoID = "AC2";
    }
    else if (autoBF14B95F_val == 3) {
        lv_convoID = "AC3";
    }
    else if (autoBF14B95F_val == 4) {
        lv_convoID = "AC4";
    }
    else {
        lv_convoID = "AC1";
    }
    return ConversationDataStateAbilCmd(libCamp_gf_TS_StoryTechConvoID(lp_tech), (lv_convoID));
}

bool libCamp_gf_StoryTechUnitIsEnabled (string lp_techUnit) {
    // Variable Declarations
    int lv_indexTechGroup;

    // Automatic Variable Declarations
    int autoC8272909_i;

    // Variable Initialization
    lv_indexTechGroup = libCamp_ge_StoryTechGroup_StoryTechGroupNone;

    // Implementation
    autoC8272909_i = libCamp_gv_TSC_TECHGROUP_FIRST;
    while (autoC8272909_i <= libCamp_gv_TSC_TECHGROUP_LAST) {
        lv_indexTechGroup = libCamp_gv_tS_TechGroupID[autoC8272909_i];
        if ((libCamp_gv_tS_TechGroupUnitType[(lv_indexTechGroup)] == lp_techUnit)) {
            return (libCamp_gv_tS_TechGroupState[(lv_indexTechGroup)] == c_purchaseCategoryStateEnabled);
        }

        autoC8272909_i = autoC8272909_i + 1;
    }
    if ((lp_techUnit == "Raven")) {
        return libCamp_gf_StoryResearchStateCheck(libCamp_ge_StoryResearchID_ResearchP41Raven, libCamp_ge_StoryResearchState_ResearchStatePurchased);
    }

    if ((lp_techUnit == "ScienceVessel")) {
        return libCamp_gf_StoryResearchStateCheck(libCamp_ge_StoryResearchID_ResearchP42ScienceVessel, libCamp_ge_StoryResearchState_ResearchStatePurchased);
    }

    if ((lp_techUnit == "TechReactor")) {
        return libCamp_gf_StoryResearchStateCheck(libCamp_ge_StoryResearchID_ResearchP51TechReactor, libCamp_ge_StoryResearchState_ResearchStatePurchased);
    }

    if ((lp_techUnit == "PlanetaryFortress")) {
        return libCamp_gf_StoryResearchStateCheck(libCamp_ge_StoryResearchID_ResearchZ21PlanetaryFortress, libCamp_ge_StoryResearchState_ResearchStatePurchased);
    }

    if ((lp_techUnit == "PerditionTurret")) {
        return libCamp_gf_StoryResearchStateCheck(libCamp_ge_StoryResearchID_ResearchZ22PerditionTurret, libCamp_ge_StoryResearchState_ResearchStatePurchased);
    }

    if ((lp_techUnit == "Predator")) {
        return libCamp_gf_StoryResearchStateCheck(libCamp_ge_StoryResearchID_ResearchZ31Predator, libCamp_ge_StoryResearchState_ResearchStatePurchased);
    }

    if ((lp_techUnit == "Hercules")) {
        return libCamp_gf_StoryResearchStateCheck(libCamp_ge_StoryResearchID_ResearchZ32Hercules, libCamp_ge_StoryResearchState_ResearchStatePurchased);
    }

    if ((lp_techUnit == "HiveMindEmulator")) {
        return libCamp_gf_StoryResearchStateCheck(libCamp_ge_StoryResearchID_ResearchZ51HiveMindEmulator, libCamp_ge_StoryResearchState_ResearchStatePurchased);
    }

    if ((lp_techUnit == "PsiDisruptor")) {
        return libCamp_gf_StoryResearchStateCheck(libCamp_ge_StoryResearchID_ResearchZ52SigmaProjector, libCamp_ge_StoryResearchState_ResearchStatePurchased);
    }

    return false;
}

string libCamp_gf_StoryTechGroupIcon (int lp_group) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tS_TechGroupIcon[(lp_group)];
}

string libCamp_gf_StoryTechGroupUnitType (int lp_group) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tS_TechGroupUnitType[(lp_group)];
}

text libCamp_gf_StoryTechGroupDescription (int lp_group) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tS_TechGroupDescription[(lp_group)];
}

text libCamp_gf_StoryTechGroupTooltip (int lp_group) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tS_TechGroupTooltip[(lp_group)];
}

bool libCamp_gf_StoryTechStateCheck (int lp_storyTech, int lp_state) {
    // Automatic Variable Declarations
    // Implementation
    return (libCamp_gv_tSX_Tech_Status[(lp_storyTech)] == lp_state);
}

string libCamp_gf_TS_HelpUnitsPanel_UnitTypeStringID (string lp_unitType) {
    // Automatic Variable Declarations
    // Implementation
    return (lp_unitType);
}

bool libCamp_gf_TS_HelpUnitsPanel_EnabledUnitTypeAlreadyExisted (string lp_unitType) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableValueExists(true, libCamp_gf_TS_HelpUnitsPanel_UnitTypeStringID(lp_unitType));
}

bool libCamp_gf_TS_StoryTechGroupUIUnlocked (int lp_group) {
    // Automatic Variable Declarations
    int autoF9141DF8_val;

    // Implementation
    autoF9141DF8_val = lp_group;
    if (autoF9141DF8_val == libCamp_ge_StoryTechGroup_StoryTechGroupBaseMissileTurret) {
        return (libCamp_gf_NumberOfMissions(libCamp_ge_MissionCountOptions_Completed) >= 6);
    }
    else if (autoF9141DF8_val == libCamp_ge_StoryTechGroup_StoryTechGroupBaseSCV) {
        return (libCamp_gf_NumberOfMissions(libCamp_ge_MissionCountOptions_Completed) >= 9);
    }
    else if (autoF9141DF8_val == libCamp_ge_StoryTechGroup_StoryTechGroupBaseCommandCenter) {
        return (libCamp_gf_NumberOfMissions(libCamp_ge_MissionCountOptions_Completed) >= 12);
    }
    else {
    }
    return (libCamp_gv_tS_TechGroupState[(lp_group)] == c_purchaseCategoryStateEnabled);
}

int libCamp_gf_TS_StoryTechPurchasedCountInCategory (int lp_category) {
    // Variable Declarations
    int lv_indexTech;
    int lv_techGroup;
    int lv_techCategory;
    int lv_count;

    // Automatic Variable Declarations
    int autoE51DDEB2_i;

    // Variable Initialization
    lv_indexTech = libCamp_ge_StoryTech_StoryTechNone;
    lv_techGroup = libCamp_ge_StoryTechGroup_StoryTechGroupNone;
    lv_techCategory = libCamp_ge_StoryTechCategory_StoryTechCategoryNone;

    // Implementation
    lv_count = 0;
    autoE51DDEB2_i = libCamp_gv_TSC_TECH_FIRST;
    while (autoE51DDEB2_i <= libCamp_gv_TSC_TECH_LAST) {
        lv_indexTech = libCamp_gv_tS_TechID[autoE51DDEB2_i];
        lv_techGroup = libCamp_gv_tS_Tech_GroupID[(lv_indexTech)];
        lv_techCategory = libCamp_gv_tS_TechGroupCategoryID[(lv_techGroup)];
        if ((lv_techCategory == lp_category) && (libCamp_gf_StoryTechStateCheck(lv_indexTech, libCamp_ge_StoryTechStates_TechPurchased) == true)) {
            lv_count += 1;
        }

        autoE51DDEB2_i = autoE51DDEB2_i + 1;
    }
    return lv_count;
}

void libCamp_gf_SetTechRestrictionsCallback (trigger lp_callbackTrigger) {
    // Automatic Variable Declarations
    // Implementation
    libCamp_gv_tS_TechLimitsCallback = lp_callbackTrigger;
}

void libCamp_gf_DisplayTechConsole (trigger lp_exitTrigger) {
    // Automatic Variable Declarations
    // Implementation
    libCamp_gv_tS_TechExitCallback = lp_exitTrigger;
    libCamp_gf_TS_CreateTechUI();
    libCamp_gf_HideStoryUI(false, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypePurchasePanel, true);
    if ((PurchaseGetSelectedPurchaseCategory(1) == c_invalidPurchaseCategoryId)) {
        PurchaseSetSelectedPurchaseCategory(PlayerGroupAll(), libCamp_gv_tS_TechCategory_UI[(libCamp_ge_StoryTechCategory_StoryTechCategoryInfantry)]);
    }

}

void libCamp_gf_EnableCampaignTechUnit (bool lp_enableDisable, int lp_techUnit, int lp_player) {
    // Variable Declarations
    bool lv_allowDisallow;

    // Automatic Variable Declarations
    int auto7F02F34F_val;

    // Variable Initialization
    lv_allowDisallow = true;

    // Implementation
    if ((lp_enableDisable == true)) {
        lv_allowDisallow = true;
        libCamp_gv_tS_TechGroupState[(lp_techUnit)] = c_purchaseCategoryStateEnabled;
        libCamp_gf_AddUnitTypeToUnitHelpPanel(libCamp_gf_StoryTechGroupUnitType(lp_techUnit), true, lp_player);
    }
    else {
        lv_allowDisallow = false;
        libCamp_gv_tS_TechGroupState[(lp_techUnit)] = c_purchaseCategoryStateHidden;
    }
    auto7F02F34F_val = lp_techUnit;
    if (auto7F02F34F_val == libCamp_ge_StoryTechGroup_StoryTechGroupBaseSCV) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("CommandCenterTrain", 0), lv_allowDisallow);
    }
    else if (auto7F02F34F_val == libCamp_ge_StoryTechGroup_StoryTechGroupBaseCommandCenter) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("TerranBuild", 0), lv_allowDisallow);
        TechTreeAbilityAllow(lp_player, AbilityCommand("TerranBuild", 1), lv_allowDisallow);
        TechTreeAbilityAllow(lp_player, AbilityCommand("TerranBuild", 2), lv_allowDisallow);
    }
    else if (auto7F02F34F_val == libCamp_ge_StoryTechGroup_StoryTechGroupBaseBunker) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("TerranBuild", 6), lv_allowDisallow);
    }
    else if (auto7F02F34F_val == libCamp_ge_StoryTechGroup_StoryTechGroupBaseMissileTurret) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("TerranBuild", 5), lv_allowDisallow);
    }
    else if (auto7F02F34F_val == libCamp_ge_StoryTechGroup_StoryTechGroupInfantryMarine) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("BarracksTrain", 0), lv_allowDisallow);
    }
    else if (auto7F02F34F_val == libCamp_ge_StoryTechGroup_StoryTechGroupInfantryMedic) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("BarracksTrain", 4), lv_allowDisallow);
    }
    else if (auto7F02F34F_val == libCamp_ge_StoryTechGroup_StoryTechGroupInfantryFirebat) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("BarracksTrain", 5), lv_allowDisallow);
    }
    else if (auto7F02F34F_val == libCamp_ge_StoryTechGroup_StoryTechGroupInfantryMarauder) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("BarracksTrain", 3), lv_allowDisallow);
    }
    else if (auto7F02F34F_val == libCamp_ge_StoryTechGroup_StoryTechGroupInfantryReaper) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("BarracksTrain", 1), lv_allowDisallow);
    }
    else if (auto7F02F34F_val == libCamp_ge_StoryTechGroup_StoryTechGroupVehiclesHellion) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("FactoryTrain", 5), lv_allowDisallow);
    }
    else if (auto7F02F34F_val == libCamp_ge_StoryTechGroup_StoryTechGroupVehiclesGoliath) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("FactoryTrain", 6), lv_allowDisallow);
    }
    else if (auto7F02F34F_val == libCamp_ge_StoryTechGroup_StoryTechGroupVehiclesDiamondback) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("FactoryTrain", 7), lv_allowDisallow);
    }
    else if (auto7F02F34F_val == libCamp_ge_StoryTechGroup_StoryTechGroupVehiclesVulture) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("FactoryTrain", 8), lv_allowDisallow);
    }
    else if (auto7F02F34F_val == libCamp_ge_StoryTechGroup_StoryTechGroupVehiclesSiegeTank) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("FactoryTrain", 1), lv_allowDisallow);
    }
    else if (auto7F02F34F_val == libCamp_ge_StoryTechGroup_StoryTechGroupStarshipsMedivac) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("StarportTrain", 0), lv_allowDisallow);
    }
    else if (auto7F02F34F_val == libCamp_ge_StoryTechGroup_StoryTechGroupStarshipsWrath) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("StarportTrain", 7), lv_allowDisallow);
    }
    else if (auto7F02F34F_val == libCamp_ge_StoryTechGroup_StoryTechGroupStarshipsViking) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("StarportTrain", 4), lv_allowDisallow);
    }
    else if (auto7F02F34F_val == libCamp_ge_StoryTechGroup_StoryTechGroupStarshipsBanshee) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("StarportTrain", 1), lv_allowDisallow);
    }
    else if (auto7F02F34F_val == libCamp_ge_StoryTechGroup_StoryTechGroupStarshipsBattlecruiser) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("StarportTrain", 3), lv_allowDisallow);
    }
    else if (auto7F02F34F_val == libCamp_ge_StoryTechGroup_StoryTechGroupDominionSpectre) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("BarracksTrain", 6), lv_allowDisallow);
        if ((lv_allowDisallow == true)) {
            TechTreeUpgradeAddLevel(lp_player, "SpectreTooltipUpgrade", 1);
        }

    }
    else if (auto7F02F34F_val == libCamp_ge_StoryTechGroup_StoryTechGroupDominionGhost) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("BarracksTrain", 2), lv_allowDisallow);
    }
    else if (auto7F02F34F_val == libCamp_ge_StoryTechGroup_StoryTechGroupDominionThor) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("FactoryTrain", 4), lv_allowDisallow);
    }
    else if (auto7F02F34F_val == libCamp_ge_StoryTechGroup_StoryTechGroupxxxReactor) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("BarracksAddOns", 1), lv_allowDisallow);
    }
    else if (auto7F02F34F_val == libCamp_ge_StoryTechGroup_StoryTechGroupxxxSensorTower) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("TerranBuild", 8), lv_allowDisallow);
    }
    else {
    }
    libCamp_gf_TS_UpdateTechAddons(lp_player);
    libCamp_gf_TS_UpdateTechUpgrades(lp_player);
}

void libCamp_gf_AddUnitTypeToUnitHelpPanel (string lp_unitType, bool lp_saveInHistory, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitHelp(lp_player, lp_unitType, true);
    if ((lp_saveInHistory == true)) {
        libCamp_gf_TS_HelpUnitsPanel_AddEnabledUnitType(lp_unitType);
    }

}

void libCamp_gf_ApplyCampaignTech (int lp_player) {
    // Variable Declarations
    int lv_indexTech;
    int lv_techACIndex;
    int lv_techUGIndex;

    // Automatic Variable Declarations
    int auto8191891C_i;
    const int autoBF8ED7BC_ae = libCamp_gv_tSC_TECH_AC_COUNT;
    const int autoBF8ED7BC_ai = 1;
    const int auto160227D4_ae = libCamp_gv_tSC_TECH_UG_COUNT;
    const int auto160227D4_ai = 1;

    // Variable Initialization
    lv_indexTech = libCamp_ge_StoryTech_StoryTechNone;

    // Implementation
    TechTreeRestrictionsEnable(lp_player, true);
    libCamp_gf_TS_UpdateTechStates();
    libCamp_gf_TS_ApplyCampaignTechLimitsUnlockUnits(lp_player);
    TechTreeUpgradeAddLevel(lp_player, "ReaperSpeed", 1);
    TechTreeUpgradeAddLevel(lp_player, "ReaperD8Charge", 1);
    TechTreeUpgradeAddLevel(lp_player, "SiegeTech", 1);
    TechTreeUpgradeAddLevel(lp_player, "BansheeCloak", 1);
    TechTreeUpgradeAddLevel(lp_player, "WraithCloak", 1);
    TechTreeUpgradeAddLevel(lp_player, "YamatoCannon", 1);
    TechTreeUpgradeAddLevel(lp_player, "PersonalCloaking", 1);
    TechTreeUpgradeAddLevel(lp_player, "HunterSeeker", 1);
    auto8191891C_i = libCamp_gv_TSC_TECH_FIRST;
    while (auto8191891C_i <= libCamp_gv_TSC_TECH_LAST) {
        lv_indexTech = libCamp_gv_tS_TechID[auto8191891C_i];
        lv_techACIndex = 1;
        for ( ; ( (autoBF8ED7BC_ai >= 0 && lv_techACIndex <= autoBF8ED7BC_ae) || (autoBF8ED7BC_ai < 0 && lv_techACIndex >= autoBF8ED7BC_ae) ) ; lv_techACIndex += autoBF8ED7BC_ai ) {
            if ((libCamp_gf_StoryTechAbilityCommand(lv_indexTech, lv_techACIndex) != null)) {
                if ((libCamp_gv_tSX_Tech_Status[(lv_indexTech)] == libCamp_ge_StoryTechStates_TechPurchased)) {
                    TechTreeAbilityAllow(lp_player, libCamp_gf_StoryTechAbilityCommand(lv_indexTech, lv_techACIndex), true);
                }
                else {
                    TechTreeAbilityAllow(lp_player, libCamp_gf_StoryTechAbilityCommand(lv_indexTech, lv_techACIndex), false);
                }
            }

        }
        lv_techUGIndex = 1;
        for ( ; ( (auto160227D4_ai >= 0 && lv_techUGIndex <= auto160227D4_ae) || (auto160227D4_ai < 0 && lv_techUGIndex >= auto160227D4_ae) ) ; lv_techUGIndex += auto160227D4_ai ) {
            if ((libCamp_gf_StoryTechUpgrade(lv_indexTech, lv_techUGIndex) != null)) {
                if ((libCamp_gv_tSX_Tech_Status[(lv_indexTech)] == libCamp_ge_StoryTechStates_TechPurchased)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, libCamp_gf_StoryTechUpgrade(lv_indexTech, lv_techUGIndex), 1);
                }
                else {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, libCamp_gf_StoryTechUpgrade(lv_indexTech, lv_techUGIndex), 0);
                }
            }

        }
        auto8191891C_i = auto8191891C_i + 1;
    }
    if ((lp_player == 1)) {
        libCamp_gf_TS_ApplyCampaignTechLimitsProtoss();
    }

    libCamp_gf_TS_ApplyResearchesTech(lp_player);
    libCamp_gf_TS_ApplyMercenaryTech(lp_player);
    libCamp_gf_TS_ApplyMercUpgrades(lp_player);
    if ((TechTreeUpgradeCount(lp_player, "NeoSteelFrame", c_techCountCompleteOnly) > 0) && (TechTreeUpgradeCount(lp_player, "ShrikeTurret", c_techCountCompleteOnly) > 0)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "NeoSteelAndShrikeTurretIconUpgrade", 1);
    }

    if ((lp_player == 1)) {
        libCamp_gf_TS_HelpUnitsPanel_UpdatePanel();
        libCamp_gf_TS_HelpTechTree_UpdatePanel();
    }

}

void libCamp_gf_TS_ApplyCampaignTechLimitsUnlockUnits (int lp_player) {
    // Variable Declarations
    int lv_index;
    int lv_techSubgroup;

    // Automatic Variable Declarations
    int autoAB84843D_ae;
    const int autoAB84843D_ai = 1;
    const int auto7F90A2CE_ae = 3;
    const int auto7F90A2CE_ai = 1;

    // Variable Initialization
    lv_techSubgroup = libCamp_ge_StoryTechGroup_StoryTechGroupNone;

    // Implementation
    TechTreeUnitHelpDefault(lp_player, false);
    autoAB84843D_ae = libCamp_gv_TSC_TECHGROUP_LAST;
    lv_index = libCamp_gv_TSC_TECHGROUP_FIRST;
    for ( ; ( (autoAB84843D_ai >= 0 && lv_index <= autoAB84843D_ae) || (autoAB84843D_ai < 0 && lv_index >= autoAB84843D_ae) ) ; lv_index += autoAB84843D_ai ) {
        if ((libCamp_gv_tS_TechGroupID[lv_index] != libCamp_ge_StoryTechGroup_StoryTechGroupNone)) {
            if ((libCamp_gv_tS_TechGroupState[lv_index] == c_purchaseCategoryStateEnabled)) {
                libCamp_gf_EnableCampaignTechUnit(true, libCamp_gv_tS_TechGroupID[lv_index], lp_player);
            }
            else {
                libCamp_gf_EnableCampaignTechUnit(false, libCamp_gv_tS_TechGroupID[lv_index], lp_player);
            }
        }
        else {
            TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Camp_86092700") + StringExternal("Param/Value/lib_Camp_E5512204") + IntToText(lv_index)), false);
        }
    }
    if ((libCamp_gf_MapTypeCheck(libCamp_gv_tS_CurrentMap, libCamp_ge_MapType_Mission) == true)) {
        lv_index = 1;
        for ( ; ( (auto7F90A2CE_ai >= 0 && lv_index <= auto7F90A2CE_ae) || (auto7F90A2CE_ai < 0 && lv_index >= auto7F90A2CE_ae) ) ; lv_index += auto7F90A2CE_ai ) {
            lv_techSubgroup = libCamp_gv_tS_MissionTechUnitsEnabled[(libCamp_gv_tS_CurrentMap)][lv_index];
            if ((lv_techSubgroup != libCamp_ge_StoryTechGroup_StoryTechGroupNone) && (lv_techSubgroup != libCamp_ge_StoryTechGroup_StoryTechGroupBaseMissileTurret)) {
                libCamp_gf_AddUnitTypeToUnitHelpPanel(libCamp_gf_StoryTechGroupUnitType(lv_techSubgroup), true, lp_player);
            }

        }
    }

}

void libCamp_gf_TS_ApplyCampaignTechLimitsProtoss () {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_player = 1;
    if (((libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTZeratul01) || (libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTZeratul02) || (libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTZeratul03) || (libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTZeratul04))) {
        TechTreeAbilityAllow(lv_player, AbilityCommand("TimeWarp", 0), false);
        TechTreeUnitAllow(lv_player, "Probe", true);
        TechTreeUnitAllow(lv_player, "PhotonCannon", true);
        TechTreeUnitAllow(lv_player, "Assimilator", true);
        TechTreeUpgradeAllow(lv_player, "BlinkTech", true);
    }

    if (((libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTZeratul02) || (libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTZeratul03) || (libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTZeratul04))) {
        TechTreeUnitAllow(lv_player, "Zealot", true);
        TechTreeUnitAllow(lv_player, "Stalker", true);
        TechTreeUnitAllow(lv_player, "Archon", true);
        TechTreeUpgradeAllow(lv_player, "ProtossGroundArmorsLevel1", true);
        TechTreeUpgradeAllow(lv_player, "ProtossGroundWeaponsLevel1", true);
        TechTreeUpgradeAllow(lv_player, "ProtossShieldsLevel1", true);
        TechTreeUpgradeAllow(lv_player, "Charge", true);
        TechTreeUpgradeAllow(lv_player, "VoidRaySpeedUpgrade", true);
        TechTreeUpgradeAllow(lv_player, "ExtendedThermalLance", true);
        libCamp_gf_AddUnitTypeToUnitHelpPanel("Zealot", false, lv_player);
        libCamp_gf_AddUnitTypeToUnitHelpPanel("Stalker", false, lv_player);
    }

    if (((libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTZeratul03) || (libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTZeratul04))) {
        TechTreeUnitAllow(lv_player, "DarkTemplar", true);
        TechTreeUnitAllow(lv_player, "Immortal", true);
        TechTreeUnitAllow(lv_player, "HighTemplar", true);
        TechTreeUpgradeAllow(lv_player, "ProtossGroundArmorsLevel2", true);
        TechTreeUpgradeAllow(lv_player, "ProtossGroundWeaponsLevel2", true);
        TechTreeUpgradeAllow(lv_player, "ProtossShieldsLevel2", true);
        TechTreeUpgradeAllow(lv_player, "PsiStormTech", true);
        TechTreeUpgradeAllow(lv_player, "HighTemplarKhaydarinAmulet", true);
        libCamp_gf_AddUnitTypeToUnitHelpPanel("DarkTemplar", false, lv_player);
        libCamp_gf_AddUnitTypeToUnitHelpPanel("Immortal", false, lv_player);
        libCamp_gf_AddUnitTypeToUnitHelpPanel("Archon", false, lv_player);
        libCamp_gf_AddUnitTypeToUnitHelpPanel("HighTemplar", false, lv_player);
    }

    if (((libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTZeratul04))) {
        TechTreeUnitAllow(lv_player, "Colossus", true);
        TechTreeUnitAllow(lv_player, "Observer", true);
        TechTreeUpgradeAllow(lv_player, "ProtossGroundArmorsLevel3", true);
        TechTreeUpgradeAllow(lv_player, "ProtossGroundWeaponsLevel3", true);
        TechTreeUpgradeAllow(lv_player, "ProtossShieldsLevel3", true);
        TechTreeUpgradeAllow(lv_player, "ObserverGraviticBooster", true);
        TechTreeUpgradeAllow(lv_player, "ExtendedThermalLance", true);
        libCamp_gf_AddUnitTypeToUnitHelpPanel("Colossus", false, lv_player);
        libCamp_gf_AddUnitTypeToUnitHelpPanel("Observer", false, lv_player);
    }

}

void libCamp_gf_TS_UpdateTechAddons (int lp_player) {
    // Variable Declarations
    bool lv_allowDisallowBarracksTechLab;
    bool lv_allowDisallowFactory;
    bool lv_allowDisallowFactoryTechLab;
    bool lv_allowDisallowStarport;
    bool lv_allowDisallowStarportTechLab;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((TechTreeAbilityIsAllowed(lp_player, AbilityCommand("BarracksTrain", 4)) == true) || (TechTreeAbilityIsAllowed(lp_player, AbilityCommand("BarracksTrain", 3)) == true) || (TechTreeAbilityIsAllowed(lp_player, AbilityCommand("BarracksTrain", 1)) == true) || (TechTreeAbilityIsAllowed(lp_player, AbilityCommand("BarracksTrain", 2)) == true) || (TechTreeAbilityIsAllowed(lp_player, AbilityCommand("BarracksTrain", 5)) == true))) {
        lv_allowDisallowBarracksTechLab = true;
    }
    else {
        lv_allowDisallowBarracksTechLab = false;
    }
    if (((TechTreeAbilityIsAllowed(lp_player, AbilityCommand("FactoryTrain", 5)) == true) || (TechTreeAbilityIsAllowed(lp_player, AbilityCommand("FactoryTrain", 4)) == true) || (TechTreeAbilityIsAllowed(lp_player, AbilityCommand("FactoryTrain", 6)) == true) || (TechTreeAbilityIsAllowed(lp_player, AbilityCommand("FactoryTrain", 7)) == true) || (TechTreeAbilityIsAllowed(lp_player, AbilityCommand("FactoryTrain", 8)) == true) || (TechTreeAbilityIsAllowed(lp_player, AbilityCommand("FactoryTrain", 1)) == true) || (TechTreeAbilityIsAllowed(lp_player, AbilityCommand("FactoryTrain", 1)) == true) || (TechTreeAbilityIsAllowed(lp_player, AbilityCommand("FactoryTrain", 9)) == true))) {
        lv_allowDisallowFactory = true;
    }
    else {
        lv_allowDisallowFactory = false;
    }
    if (((TechTreeAbilityIsAllowed(lp_player, AbilityCommand("FactoryTrain", 4)) == true) || (TechTreeAbilityIsAllowed(lp_player, AbilityCommand("FactoryTrain", 6)) == true) || (TechTreeAbilityIsAllowed(lp_player, AbilityCommand("FactoryTrain", 7)) == true) || (TechTreeAbilityIsAllowed(lp_player, AbilityCommand("FactoryTrain", 1)) == true) || (TechTreeAbilityIsAllowed(lp_player, AbilityCommand("FactoryTrain", 1)) == true) || (TechTreeAbilityIsAllowed(lp_player, AbilityCommand("FactoryTrain", 9)) == true))) {
        lv_allowDisallowFactoryTechLab = true;
    }
    else {
        lv_allowDisallowFactoryTechLab = false;
    }
    if (((TechTreeAbilityIsAllowed(lp_player, AbilityCommand("StarportTrain", 4)) == true) || (TechTreeAbilityIsAllowed(lp_player, AbilityCommand("StarportTrain", 0)) == true) || (TechTreeAbilityIsAllowed(lp_player, AbilityCommand("StarportTrain", 1)) == true) || (TechTreeAbilityIsAllowed(lp_player, AbilityCommand("StarportTrain", 3)) == true) || (TechTreeAbilityIsAllowed(lp_player, AbilityCommand("StarportTrain", 7)) == true) || (TechTreeAbilityIsAllowed(lp_player, AbilityCommand("StarportTrain", 2)) == true) || (TechTreeAbilityIsAllowed(lp_player, AbilityCommand("StarportTrain", 6)) == true) || (TechTreeAbilityIsAllowed(lp_player, AbilityCommand("StarportTrain", 5)) == true))) {
        lv_allowDisallowStarport = true;
    }
    else {
        lv_allowDisallowStarport = false;
    }
    if (((TechTreeAbilityIsAllowed(lp_player, AbilityCommand("StarportTrain", 1)) == true) || (TechTreeAbilityIsAllowed(lp_player, AbilityCommand("StarportTrain", 3)) == true) || (TechTreeAbilityIsAllowed(lp_player, AbilityCommand("StarportTrain", 7)) == true) || (TechTreeAbilityIsAllowed(lp_player, AbilityCommand("StarportTrain", 2)) == true) || (TechTreeAbilityIsAllowed(lp_player, AbilityCommand("StarportTrain", 6)) == true) || (TechTreeAbilityIsAllowed(lp_player, AbilityCommand("StarportTrain", 5)) == true))) {
        lv_allowDisallowStarportTechLab = true;
    }
    else {
        lv_allowDisallowStarportTechLab = false;
    }
    TechTreeAbilityAllow(lp_player, AbilityCommand("BarracksAddOns", 0), lv_allowDisallowBarracksTechLab);
    TechTreeAbilityAllow(lp_player, AbilityCommand("FactoryAddOns", 1), lv_allowDisallowFactory);
    TechTreeAbilityAllow(lp_player, AbilityCommand("FactoryAddOns", 0), lv_allowDisallowFactoryTechLab);
    TechTreeAbilityAllow(lp_player, AbilityCommand("StarportAddOns", 1), lv_allowDisallowStarport);
    TechTreeAbilityAllow(lp_player, AbilityCommand("StarportAddOns", 0), lv_allowDisallowStarportTechLab);
}

void libCamp_gf_TS_UpdateTechUpgrades (int lp_player) {
    // Variable Declarations
    bool lv_infantry1;
    bool lv_infantry2;
    bool lv_infantry3;
    bool lv_vehicle1;
    bool lv_vehicle2;
    bool lv_vehicle3;
    bool lv_shipWeapon1;
    bool lv_shipArmor1;
    bool lv_shipWeapon2;
    bool lv_shipArmor2;
    bool lv_shipWeapon3;
    bool lv_shipArmor3;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTRaynor02, libCamp_ge_MissionStatus_Completed) == true))) {
        lv_infantry1 = true;
        if (((libCamp_gf_StoryTechUnitIsEnabled("Hellion") == true) || (libCamp_gf_StoryTechUnitIsEnabled("SiegeTank") == true) || (libCamp_gf_StoryTechUnitIsEnabled("Thor") == true) || (libCamp_gf_StoryTechUnitIsEnabled("Vulture") == true) || (libCamp_gf_StoryTechUnitIsEnabled("Diamondback") == true) || (libCamp_gf_StoryTechUnitIsEnabled("Goliath") == true) || (libCamp_gf_StoryTechUnitIsEnabled("Predator") == true))) {
            lv_vehicle1 = true;
        }

        if (((libCamp_gf_StoryTechUnitIsEnabled("VikingFighter") == true) || (libCamp_gf_StoryTechUnitIsEnabled("Banshee") == true) || (libCamp_gf_StoryTechUnitIsEnabled("Battlecruiser") == true) || (libCamp_gf_StoryTechUnitIsEnabled("Wraith") == true))) {
            lv_shipWeapon1 = true;
        }

        if (((libCamp_gf_StoryTechUnitIsEnabled("Medivac") == true) || (libCamp_gf_StoryTechUnitIsEnabled("Raven") == true) || (libCamp_gf_StoryTechUnitIsEnabled("Hercules") == true) || (libCamp_gf_StoryTechUnitIsEnabled("VikingFighter") == true) || (libCamp_gf_StoryTechUnitIsEnabled("Banshee") == true) || (libCamp_gf_StoryTechUnitIsEnabled("Battlecruiser") == true) || (libCamp_gf_StoryTechUnitIsEnabled("Wraith") == true) || (libCamp_gf_StoryTechUnitIsEnabled("ScienceVessel") == true))) {
            lv_shipArmor1 = true;
        }

    }

    TechTreeAbilityAllow(lp_player, AbilityCommand("EngineeringBayResearch", 2), lv_infantry1);
    TechTreeAbilityAllow(lp_player, AbilityCommand("EngineeringBayResearch", 6), lv_infantry1);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 5), lv_vehicle1);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 2), lv_vehicle1);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 11), lv_shipWeapon1);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 8), lv_shipArmor1);
    TechTreeAbilityAllow(lp_player, AbilityCommand("EngineeringBayResearch", 10), lv_infantry1);
    TechTreeAbilityAllow(lp_player, AbilityCommand("EngineeringBayResearch", 13), lv_infantry1);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 15), lv_vehicle1);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 21), lv_vehicle1);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 18), lv_shipWeapon1);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 24), lv_shipArmor1);
    if (((libCamp_gf_NumberOfMissions(libCamp_ge_MissionCountOptions_Completed) >= 9))) {
        if ((lv_infantry1 == true)) {
            lv_infantry2 = true;
            libCamp_gv_tS_UpgradeInfantry2 = true;
        }

        if ((lv_vehicle1 == true)) {
            lv_vehicle2 = true;
            libCamp_gv_tS_UpgradeVehicle2 = true;
        }

        if ((lv_shipWeapon1 == true)) {
            lv_shipWeapon2 = true;
            libCamp_gv_tS_UpgradeShip2 = true;
        }

        if ((lv_shipArmor1 == true)) {
            lv_shipArmor2 = true;
            libCamp_gv_tS_UpgradeShip2 = true;
        }

    }

    TechTreeAbilityAllow(lp_player, AbilityCommand("EngineeringBayResearch", 3), lv_infantry2);
    TechTreeAbilityAllow(lp_player, AbilityCommand("EngineeringBayResearch", 7), lv_infantry2);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 6), lv_vehicle2);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 3), lv_vehicle2);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 12), lv_shipWeapon2);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 9), lv_shipArmor2);
    TechTreeAbilityAllow(lp_player, AbilityCommand("EngineeringBayResearch", 11), lv_infantry2);
    TechTreeAbilityAllow(lp_player, AbilityCommand("EngineeringBayResearch", 14), lv_infantry2);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 16), lv_vehicle2);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 22), lv_vehicle2);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 19), lv_shipWeapon2);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 25), lv_shipArmor2);
    if (((libCamp_gf_NumberOfMissions(libCamp_ge_MissionCountOptions_Completed) >= 16))) {
        if ((lv_infantry2 == true)) {
            lv_infantry3 = true;
            libCamp_gv_tS_UpgradeInfantry3 = true;
        }

        if ((lv_vehicle2 == true)) {
            lv_vehicle3 = true;
            libCamp_gv_tS_UpgradeVehicle3 = true;
        }

        if ((lv_shipWeapon2 == true)) {
            lv_shipWeapon3 = true;
            libCamp_gv_tS_UpgradeShip3 = true;
        }

        if ((lv_shipArmor2 == true)) {
            lv_shipArmor3 = true;
            libCamp_gv_tS_UpgradeShip3 = true;
        }

    }

    TechTreeAbilityAllow(lp_player, AbilityCommand("EngineeringBayResearch", 4), lv_infantry3);
    TechTreeAbilityAllow(lp_player, AbilityCommand("EngineeringBayResearch", 8), lv_infantry3);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 7), lv_vehicle3);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 4), lv_vehicle3);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 13), lv_shipWeapon3);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 10), lv_shipArmor3);
    TechTreeAbilityAllow(lp_player, AbilityCommand("EngineeringBayResearch", 12), lv_infantry3);
    TechTreeAbilityAllow(lp_player, AbilityCommand("EngineeringBayResearch", 15), lv_infantry3);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 17), lv_vehicle3);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 23), lv_vehicle3);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 20), lv_shipWeapon3);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 26), lv_shipArmor3);
}

void libCamp_gf_TS_UpdateTechGroupStates () {
    // Variable Declarations
    int lv_indexMission;
    int lv_techUnitIndex;
    int lv_techEnabledIndex;

    // Automatic Variable Declarations
    int auto8554F329_ae;
    const int auto8554F329_ai = 1;
    int autoEB15E298_i;
    const int auto7A83BB79_ae = 3;
    const int auto7A83BB79_ai = 1;

    // Variable Initialization
    lv_indexMission = libCamp_ge_MapID_MapNone;

    // Implementation
    auto8554F329_ae = libCamp_gv_TSC_TECHGROUP_LAST;
    lv_techUnitIndex = libCamp_gv_TSC_TECHGROUP_FIRST;
    for ( ; ( (auto8554F329_ai >= 0 && lv_techUnitIndex <= auto8554F329_ae) || (auto8554F329_ai < 0 && lv_techUnitIndex >= auto8554F329_ae) ) ; lv_techUnitIndex += auto8554F329_ai ) {
        libCamp_gv_tS_TechGroupState[lv_techUnitIndex] = c_purchaseCategoryStateHidden;
    }
    if (((libCamp_gf_MissionStatus(libCamp_ge_MapID_MapTRaynor02) == libCamp_ge_MissionStatus_Completed) || (libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTRaynor02))) {
        libCamp_gv_tS_TechGroupState[(libCamp_ge_StoryTechGroup_StoryTechGroupBaseSCV)] = c_purchaseCategoryStateEnabled;
        libCamp_gv_tS_TechGroupState[(libCamp_ge_StoryTechGroup_StoryTechGroupBaseCommandCenter)] = c_purchaseCategoryStateEnabled;
    }

    autoEB15E298_i = libCamp_gv_TSC_MISSION_FIRST;
    while (autoEB15E298_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[autoEB15E298_i];
        if (((libCamp_gf_MissionStatusCheck(lv_indexMission, libCamp_ge_MissionStatus_Completed) == true))) {
            lv_techEnabledIndex = 1;
            for ( ; ( (auto7A83BB79_ai >= 0 && lv_techEnabledIndex <= auto7A83BB79_ae) || (auto7A83BB79_ai < 0 && lv_techEnabledIndex >= auto7A83BB79_ae) ) ; lv_techEnabledIndex += auto7A83BB79_ai ) {
                if ((libCamp_gf_MissionUnlockedTechSubgorup(lv_indexMission, lv_techEnabledIndex) != libCamp_ge_StoryTechGroup_StoryTechGroupNone)) {
                    libCamp_gv_tS_TechGroupState[(libCamp_gf_MissionUnlockedTechSubgorup(lv_indexMission, lv_techEnabledIndex))] = c_purchaseCategoryStateEnabled;
                }

            }
        }

        autoEB15E298_i = autoEB15E298_i + 1;
    }
}

void libCamp_gf_TS_UpdateTechStates () {
    // Variable Declarations
    int lv_index;
    int lv_subgroup;

    // Automatic Variable Declarations
    int auto28BB6960_ae;
    const int auto28BB6960_ai = 1;

    // Variable Initialization
    lv_subgroup = libCamp_ge_StoryTechGroup_StoryTechGroupNone;

    // Implementation
    libCamp_gf_TS_UpdateTechGroupStates();
    libCamp_gf_TS_StoryCheckTechReqs();
    auto28BB6960_ae = libCamp_gv_TSC_TECH_LAST;
    lv_index = libCamp_gv_TSC_TECH_FIRST;
    for ( ; ( (auto28BB6960_ai >= 0 && lv_index <= auto28BB6960_ae) || (auto28BB6960_ai < 0 && lv_index >= auto28BB6960_ae) ) ; lv_index += auto28BB6960_ai ) {
        lv_subgroup = libCamp_gv_tS_Tech_GroupID[lv_index];
        if ((libCamp_gv_tS_TechGroupState[(lv_subgroup)] != c_purchaseCategoryStateEnabled)) {
            libCamp_gv_tSX_Tech_Status[lv_index] = libCamp_ge_StoryTechStates_TechUnavailable;
        }
        else {
            if ((libCamp_gv_tSX_Tech_Status[lv_index] == libCamp_ge_StoryTechStates_TechUnavailable)) {
                libCamp_gv_tSX_Tech_Status[lv_index] = libCamp_ge_StoryTechStates_TechAvailable;
                libCamp_gv_tSX_Tech_Status[lv_index] = libCamp_ge_StoryTechStates_TechNew;
            }

        }
    }
    libCamp_gf_TS_UpdateMercStatus();
}

void libCamp_gf_TS_InitializeTechCategorySingle (int lp_techGroup, text lp_name, int lp_slot) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_index = (lp_techGroup);
    libCamp_gv_tS_TechCategoryID[lv_index] = lp_techGroup;
    libCamp_gv_tS_TechCategoryName[lv_index] = lp_name;
    libCamp_gv_tS_TechCategorySlot[lv_index] = lp_slot;
}

void libCamp_gf_TS_InitializeTechCategory () {
    // Automatic Variable Declarations
    // Implementation
    libCamp_gf_TS_InitializeTechCategorySingle(libCamp_ge_StoryTechCategory_StoryTechCategoryBase, StringExternal("Param/Value/lib_Camp_AEA41A6D"), 1);
    libCamp_gf_TS_InitializeTechCategorySingle(libCamp_ge_StoryTechCategory_StoryTechCategoryInfantry, StringExternal("Param/Value/lib_Camp_2F946631"), 2);
    libCamp_gf_TS_InitializeTechCategorySingle(libCamp_ge_StoryTechCategory_StoryTechCategoryVehicles, StringExternal("Param/Value/lib_Camp_4B148DA0"), 3);
    libCamp_gf_TS_InitializeTechCategorySingle(libCamp_ge_StoryTechCategory_StoryTechCategoryStarships, StringExternal("Param/Value/lib_Camp_EFA7FB0B"), 4);
    libCamp_gf_TS_InitializeTechCategorySingle(libCamp_ge_StoryTechCategory_StoryTechCategoryDominion, StringExternal("Param/Value/lib_Camp_E8346A45"), 5);
}

void libCamp_gf_TS_InitializeTechGroundSingle (int lp_techSubGroup, int lp_category, string lp_unitType, text lp_name, text lp_description, text lp_tooltip, string lp_icon, string lp_iconBig, bool lp_showOnReport) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_index = (lp_techSubGroup);
    libCamp_gv_tS_TechGroupID[lv_index] = lp_techSubGroup;
    libCamp_gv_tS_TechGroupCategoryID[lv_index] = lp_category;
    libCamp_gv_tS_TechGroupUnitType[lv_index] = lp_unitType;
    libCamp_gv_tS_TechGroupName[lv_index] = lp_name;
    libCamp_gv_tS_TechGroupDescription[lv_index] = lp_description;
    libCamp_gv_tS_TechGroupTooltip[lv_index] = lp_tooltip;
    libCamp_gv_tS_TechGroupIcon[lv_index] = lp_icon;
    libCamp_gv_tS_TechGroupIconBig[lv_index] = lp_iconBig;
    libCamp_gv_tS_TechGroupState[lv_index] = c_purchaseCategoryStateEnabled;
    libCamp_gv_tS_TechGroupShowOnReport[lv_index] = lp_showOnReport;
}

void libCamp_gf_TS_InitializeTechGroup () {
    // Variable Declarations
    string lv_unitType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_unitType = "SCV";
    libCamp_gf_TS_InitializeTechGroundSingle(libCamp_ge_StoryTechGroup_StoryTechGroupBaseSCV, libCamp_ge_StoryTechCategory_StoryTechCategoryBase, lv_unitType, UnitTypeGetName(lv_unitType), StringToText(""), StringToText(""), "Assets\\Textures\\btn-unit-terran-scv.dds", "Assets\\Textures\\tu_scv.dds", false);
    lv_unitType = "Bunker";
    libCamp_gf_TS_InitializeTechGroundSingle(libCamp_ge_StoryTechGroup_StoryTechGroupBaseBunker, libCamp_ge_StoryTechCategory_StoryTechCategoryBase, lv_unitType, UnitTypeGetName(lv_unitType), StringExternal("Param/Value/lib_Camp_B5682BA6"), StringExternal("Button/Tooltip/Bunker"), "Assets\\Textures\\btn-building-terran-bunker.dds", "Assets\\Textures\\ui-technology-bunker.dds", true);
    lv_unitType = "MissileTurret";
    libCamp_gf_TS_InitializeTechGroundSingle(libCamp_ge_StoryTechGroup_StoryTechGroupBaseMissileTurret, libCamp_ge_StoryTechCategory_StoryTechCategoryBase, lv_unitType, UnitTypeGetName(lv_unitType), StringToText(""), StringToText(""), "Assets\\Textures\\btn-building-terran-missileturret.dds", "", true);
    lv_unitType = "CommandCenter";
    libCamp_gf_TS_InitializeTechGroundSingle(libCamp_ge_StoryTechGroup_StoryTechGroupBaseCommandCenter, libCamp_ge_StoryTechCategory_StoryTechCategoryBase, lv_unitType, StringExternal("Param/Value/lib_Camp_4E59EBB8"), StringToText(""), StringToText(""), "Assets\\Textures\\btn-building-terran-commandcenter.dds", "", false);
    lv_unitType = "Marine";
    libCamp_gf_TS_InitializeTechGroundSingle(libCamp_ge_StoryTechGroup_StoryTechGroupInfantryMarine, libCamp_ge_StoryTechCategory_StoryTechCategoryInfantry, lv_unitType, UnitTypeGetName(lv_unitType), StringExternal("Param/Value/lib_Camp_A8DF01B6"), StringExternal("Button/Tooltip/Marine"), "Assets\\Textures\\btn-unit-terran-marine.dds", "Assets\\Textures\\ui-technology-marine.dds", true);
    lv_unitType = "Medic";
    libCamp_gf_TS_InitializeTechGroundSingle(libCamp_ge_StoryTechGroup_StoryTechGroupInfantryMedic, libCamp_ge_StoryTechCategory_StoryTechCategoryInfantry, lv_unitType, UnitTypeGetName(lv_unitType), StringExternal("Param/Value/lib_Camp_D1AD7751"), StringExternal("Button/Tooltip/Medic"), "Assets\\Textures\\btn-unit-terran-medic.dds", "Assets\\Textures\\ui-technology-medic.dds", true);
    lv_unitType = "Firebat";
    libCamp_gf_TS_InitializeTechGroundSingle(libCamp_ge_StoryTechGroup_StoryTechGroupInfantryFirebat, libCamp_ge_StoryTechCategory_StoryTechCategoryInfantry, lv_unitType, UnitTypeGetName(lv_unitType), StringExternal("Param/Value/lib_Camp_56CD313A"), StringExternal("Button/Tooltip/Firebat"), "Assets\\Textures\\btn-unit-terran-firebat.dds", "Assets\\Textures\\ui-technology-firebat.dds", true);
    lv_unitType = "Marauder";
    libCamp_gf_TS_InitializeTechGroundSingle(libCamp_ge_StoryTechGroup_StoryTechGroupInfantryMarauder, libCamp_ge_StoryTechCategory_StoryTechCategoryInfantry, lv_unitType, UnitTypeGetName(lv_unitType), StringExternal("Param/Value/lib_Camp_9D4658BA"), StringExternal("Button/Tooltip/Marauder"), "Assets\\Textures\\btn-unit-terran-marauder.dds", "Assets\\Textures\\ui-technology-marauder.dds", true);
    lv_unitType = "Reaper";
    libCamp_gf_TS_InitializeTechGroundSingle(libCamp_ge_StoryTechGroup_StoryTechGroupInfantryReaper, libCamp_ge_StoryTechCategory_StoryTechCategoryInfantry, lv_unitType, UnitTypeGetName(lv_unitType), StringExternal("Param/Value/lib_Camp_B12AC0F6"), StringExternal("Button/Tooltip/Reaper"), "Assets\\Textures\\btn-unit-terran-reaper.dds", "Assets\\Textures\\ui-technology-reaper.dds", true);
    lv_unitType = "Hellion";
    libCamp_gf_TS_InitializeTechGroundSingle(libCamp_ge_StoryTechGroup_StoryTechGroupVehiclesHellion, libCamp_ge_StoryTechCategory_StoryTechCategoryVehicles, lv_unitType, UnitTypeGetName(lv_unitType), StringExternal("Param/Value/lib_Camp_3FC8C9FD"), StringExternal("Button/Tooltip/Hellion"), "Assets\\Textures\\btn-unit-terran-jackal.dds", "Assets\\Textures\\ui-technology-hellion.dds", true);
    lv_unitType = "Goliath";
    libCamp_gf_TS_InitializeTechGroundSingle(libCamp_ge_StoryTechGroup_StoryTechGroupVehiclesGoliath, libCamp_ge_StoryTechCategory_StoryTechCategoryVehicles, lv_unitType, UnitTypeGetName(lv_unitType), StringExternal("Param/Value/lib_Camp_B4ACB2C7"), StringExternal("Button/Tooltip/Goliath"), "Assets\\Textures\\btn-unit-terran-goliath.dds", "Assets\\Textures\\ui-technology-goliath.dds", true);
    lv_unitType = "Vulture";
    libCamp_gf_TS_InitializeTechGroundSingle(libCamp_ge_StoryTechGroup_StoryTechGroupVehiclesVulture, libCamp_ge_StoryTechCategory_StoryTechCategoryVehicles, lv_unitType, UnitTypeGetName(lv_unitType), StringExternal("Param/Value/lib_Camp_49F7B506"), StringExternal("Button/Tooltip/Vulture"), "Assets\\Textures\\btn-unit-terran-vulture.dds", "Assets\\Textures\\ui-technology-vulture.dds", true);
    lv_unitType = "Diamondback";
    libCamp_gf_TS_InitializeTechGroundSingle(libCamp_ge_StoryTechGroup_StoryTechGroupVehiclesDiamondback, libCamp_ge_StoryTechCategory_StoryTechCategoryVehicles, lv_unitType, UnitTypeGetName(lv_unitType), StringExternal("Param/Value/lib_Camp_DDE72428"), StringExternal("Button/Tooltip/Diamondback"), "Assets\\Textures\\btn-unit-terran-diamondback.dds", "Assets\\Textures\\ui-technology-cobra.dds", true);
    lv_unitType = "SiegeTank";
    libCamp_gf_TS_InitializeTechGroundSingle(libCamp_ge_StoryTechGroup_StoryTechGroupVehiclesSiegeTank, libCamp_ge_StoryTechCategory_StoryTechCategoryVehicles, lv_unitType, UnitTypeGetName(lv_unitType), StringExternal("Param/Value/lib_Camp_F4F2155A"), StringExternal("Button/Tooltip/SiegeTank"), "Assets\\Textures\\BTN-Unit-Terran-SiegeTank.dds", "Assets\\Textures\\ui-technology-siegetanksieged.dds", true);
    lv_unitType = "Medivac";
    libCamp_gf_TS_InitializeTechGroundSingle(libCamp_ge_StoryTechGroup_StoryTechGroupStarshipsMedivac, libCamp_ge_StoryTechCategory_StoryTechCategoryStarships, lv_unitType, UnitTypeGetName(lv_unitType), StringExternal("Param/Value/lib_Camp_5CBA56EF"), StringExternal("Button/Tooltip/Medivac"), "Assets\\Textures\\btn-unit-terran-medivac.dds", "Assets\\Textures\\ui-technology-medivac.dds", true);
    lv_unitType = "Wraith";
    libCamp_gf_TS_InitializeTechGroundSingle(libCamp_ge_StoryTechGroup_StoryTechGroupStarshipsWrath, libCamp_ge_StoryTechCategory_StoryTechCategoryStarships, lv_unitType, UnitTypeGetName(lv_unitType), StringExternal("Param/Value/lib_Camp_25930BC5"), StringExternal("Button/Tooltip/Wraith"), "Assets\\Textures\\btn-unit-terran-wraith.dds", "Assets\\Textures\\ui-technology-wraith.dds", true);
    lv_unitType = "VikingFighter";
    libCamp_gf_TS_InitializeTechGroundSingle(libCamp_ge_StoryTechGroup_StoryTechGroupStarshipsViking, libCamp_ge_StoryTechCategory_StoryTechCategoryStarships, lv_unitType, UnitTypeGetName(lv_unitType), StringExternal("Param/Value/lib_Camp_826DB20A"), StringExternal("Button/Tooltip/VikingFighter"), "Assets\\Textures\\btn-unit-terran-vikingfighter.dds", "Assets\\Textures\\ui-technology-vikingfighter.dds", true);
    lv_unitType = "Banshee";
    libCamp_gf_TS_InitializeTechGroundSingle(libCamp_ge_StoryTechGroup_StoryTechGroupStarshipsBanshee, libCamp_ge_StoryTechCategory_StoryTechCategoryStarships, lv_unitType, UnitTypeGetName(lv_unitType), StringExternal("Param/Value/lib_Camp_C948F016"), StringExternal("Button/Tooltip/Banshee"), "Assets\\Textures\\BTN-Unit-Terran-Banshee.dds", "Assets\\Textures\\ui-technology-banshee.dds", true);
    lv_unitType = "Battlecruiser";
    libCamp_gf_TS_InitializeTechGroundSingle(libCamp_ge_StoryTechGroup_StoryTechGroupStarshipsBattlecruiser, libCamp_ge_StoryTechCategory_StoryTechCategoryStarships, lv_unitType, UnitTypeGetName(lv_unitType), StringExternal("Param/Value/lib_Camp_EF93D4C0"), StringExternal("Button/Tooltip/Battlecruiser"), "Assets\\Textures\\BTN-Unit-Terran-Battlecruiser.dds", "Assets\\Textures\\ui-technology-battlecruiser.dds", true);
    lv_unitType = "Ghost";
    libCamp_gf_TS_InitializeTechGroundSingle(libCamp_ge_StoryTechGroup_StoryTechGroupDominionGhost, libCamp_ge_StoryTechCategory_StoryTechCategoryDominion, lv_unitType, UnitTypeGetName(lv_unitType), StringExternal("Param/Value/lib_Camp_BA1436DA"), StringToText(""), "Assets\\Textures\\btn-unit-terran-ghost.dds", "", false);
    lv_unitType = "Spectre";
    libCamp_gf_TS_InitializeTechGroundSingle(libCamp_ge_StoryTechGroup_StoryTechGroupDominionSpectre, libCamp_ge_StoryTechCategory_StoryTechCategoryDominion, lv_unitType, UnitTypeGetName(lv_unitType), StringExternal("Param/Value/lib_Camp_83BE6BD1"), StringToText(""), "Assets\\Textures\\btn-unit-terran-spectre.dds", "Assets\\Textures\\ui-technology-spectre.dds", false);
    lv_unitType = "Thor";
    libCamp_gf_TS_InitializeTechGroundSingle(libCamp_ge_StoryTechGroup_StoryTechGroupDominionThor, libCamp_ge_StoryTechCategory_StoryTechCategoryDominion, lv_unitType, UnitTypeGetName(lv_unitType), StringExternal("Param/Value/lib_Camp_3C84AB55"), StringExternal("Button/Tooltip/Thor"), "Assets\\Textures\\btn-unit-terran-thor.dds", "Assets\\Textures\\ui-technology-thor.dds", true);
    lv_unitType = "NuclearReactor";
    libCamp_gf_TS_InitializeTechGroundSingle(libCamp_ge_StoryTechGroup_StoryTechGroupxxxReactor, libCamp_ge_StoryTechCategory_StoryTechCategoryNone, lv_unitType, UnitTypeGetName(lv_unitType), StringToText(""), StringToText(""), "Assets\\Textures\\btn-building-terran-reactor.dds", "", false);
    lv_unitType = "SensorTower";
    libCamp_gf_TS_InitializeTechGroundSingle(libCamp_ge_StoryTechGroup_StoryTechGroupxxxSensorTower, libCamp_ge_StoryTechCategory_StoryTechCategoryNone, lv_unitType, UnitTypeGetName(lv_unitType), StringToText(""), StringToText(""), "Assets\\Textures\\btn-building-terran-sensordome.dds", "", false);
}

void libCamp_gf_TS_InitializeTechDataSingle (int lp_tech, int lp_group, string lp_convoID, int lp_requires) {
    // Variable Declarations
    int lv_techIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_techIndex = (lp_tech);
    libCamp_gv_tS_TechID[lv_techIndex] = lp_tech;
    libCamp_gv_tS_Tech_GroupID[lv_techIndex] = lp_group;
    libCamp_gv_tS_Tech_ConvoID[lv_techIndex] = lp_convoID;
    libCamp_gv_tS_Tech_Requires[lv_techIndex] = lp_requires;
}

void libCamp_gf_TS_InitializeTechData () {
    // Variable Declarations
    string lv_tBDVideo;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tBDVideo = "Assets\\Textures\\video_static.ogv";

    // Implementation
    libCamp_gf_TS_InitializeTechCategory();
    libCamp_gf_TS_InitializeTechGroup();
    libCamp_gf_TS_InitializeTechDataSingle(libCamp_ge_StoryTech_StoryTechSCVDualFusionWelder, libCamp_ge_StoryTechGroup_StoryTechGroupBaseSCV, "Tech|Tech_SCV_1", libCamp_ge_StoryTech_StoryTechNone);
    libCamp_gf_TS_InitializeTechDataSingle(libCamp_ge_StoryTech_StoryTechSCVAdvancedConstruction, libCamp_ge_StoryTechGroup_StoryTechGroupBaseSCV, "Tech|Tech_SCV_2", libCamp_ge_StoryTech_StoryTechNone);
    libCamp_gf_TS_InitializeTechDataSingle(libCamp_ge_StoryTech_StoryTechBunkerProjectileAccelerators, libCamp_ge_StoryTechGroup_StoryTechGroupBaseBunker, "Tech|Tech_Bunker_2", libCamp_ge_StoryTech_StoryTechNone);
    libCamp_gf_TS_InitializeTechDataSingle(libCamp_ge_StoryTech_StoryTechBunkerNeosteelFrame, libCamp_ge_StoryTechGroup_StoryTechGroupBaseBunker, "Tech|Tech_Bunker_1", libCamp_ge_StoryTech_StoryTechNone);
    libCamp_gf_TS_InitializeTechDataSingle(libCamp_ge_StoryTech_StoryTechMissileTurretReinforcedSuperstructure, libCamp_ge_StoryTechGroup_StoryTechGroupBaseMissileTurret, "Tech|Tech_MissileTurret_2", libCamp_ge_StoryTech_StoryTechNone);
    libCamp_gf_TS_InitializeTechDataSingle(libCamp_ge_StoryTech_StoryTechMissileTurretHellstormMissileBatteries, libCamp_ge_StoryTechGroup_StoryTechGroupBaseMissileTurret, "Tech|Tech_MissileTurret_1", libCamp_ge_StoryTech_StoryTechNone);
    libCamp_gf_TS_InitializeTechDataSingle(libCamp_ge_StoryTech_StoryTechCOCEOrbitalRelay, libCamp_ge_StoryTechGroup_StoryTechGroupBaseCommandCenter, "Tech|Tech_CommandCenter_2", libCamp_ge_StoryTech_StoryTechNone);
    libCamp_gf_TS_InitializeTechDataSingle(libCamp_ge_StoryTech_StoryTechCOCEFireSuppressionSystems, libCamp_ge_StoryTechGroup_StoryTechGroupBaseCommandCenter, "Tech|Tech_CommandCenter_1", libCamp_ge_StoryTech_StoryTechNone);
    libCamp_gf_TS_InitializeTechDataSingle(libCamp_ge_StoryTech_StoryTechMarineStimpacks, libCamp_ge_StoryTechGroup_StoryTechGroupInfantryMarine, "Tech|Tech_Marine_1", libCamp_ge_StoryTech_StoryTechNone);
    libCamp_gf_TS_InitializeTechDataSingle(libCamp_ge_StoryTech_StoryTechMarineCombatShield, libCamp_ge_StoryTechGroup_StoryTechGroupInfantryMarine, "Tech|Tech_Marine_2", libCamp_ge_StoryTech_StoryTechNone);
    libCamp_gf_TS_InitializeTechDataSingle(libCamp_ge_StoryTech_StoryTechMedicAdvancedMedicTraining, libCamp_ge_StoryTechGroup_StoryTechGroupInfantryMedic, "Tech|Tech_Medic_1", libCamp_ge_StoryTech_StoryTechNone);
    libCamp_gf_TS_InitializeTechDataSingle(libCamp_ge_StoryTech_StoryTechMedicStabilizerMedPacks, libCamp_ge_StoryTechGroup_StoryTechGroupInfantryMedic, "Tech|Tech_Medic_2", libCamp_ge_StoryTech_StoryTechNone);
    libCamp_gf_TS_InitializeTechDataSingle(libCamp_ge_StoryTech_StoryTechFirebatBearclawNozzles, libCamp_ge_StoryTechGroup_StoryTechGroupInfantryFirebat, "Tech|Tech_Firebat_1", libCamp_ge_StoryTech_StoryTechNone);
    libCamp_gf_TS_InitializeTechDataSingle(libCamp_ge_StoryTech_StoryTechFirebatJuggernautPlating, libCamp_ge_StoryTechGroup_StoryTechGroupInfantryFirebat, "Tech|Tech_Firebat_2", libCamp_ge_StoryTech_StoryTechNone);
    libCamp_gf_TS_InitializeTechDataSingle(libCamp_ge_StoryTech_StoryTechMarauderJackhammerConcussionGrenade, libCamp_ge_StoryTechGroup_StoryTechGroupInfantryMarauder, "Tech|Tech_Marauder_1", libCamp_ge_StoryTech_StoryTechNone);
    libCamp_gf_TS_InitializeTechDataSingle(libCamp_ge_StoryTech_StoryTechMarauderAblativeScales, libCamp_ge_StoryTechGroup_StoryTechGroupInfantryMarauder, "Tech|Tech_Marauder_2", libCamp_ge_StoryTech_StoryTechNone);
    libCamp_gf_TS_InitializeTechDataSingle(libCamp_ge_StoryTech_StoryTechReaperD8Charges, libCamp_ge_StoryTechGroup_StoryTechGroupInfantryReaper, "Tech|Tech_Reaper_1", libCamp_ge_StoryTech_StoryTechNone);
    libCamp_gf_TS_InitializeTechDataSingle(libCamp_ge_StoryTech_StoryTechReaperU238Rounds, libCamp_ge_StoryTechGroup_StoryTechGroupInfantryReaper, "Tech|Tech_Reaper_2", libCamp_ge_StoryTech_StoryTechNone);
    libCamp_gf_TS_InitializeTechDataSingle(libCamp_ge_StoryTech_StoryTechHellionInfernalPreIgniter, libCamp_ge_StoryTechGroup_StoryTechGroupVehiclesHellion, "Tech|Tech_Hellion_1", libCamp_ge_StoryTech_StoryTechNone);
    libCamp_gf_TS_InitializeTechDataSingle(libCamp_ge_StoryTech_StoryTechHellionTwinLinkedFlameThrowers, libCamp_ge_StoryTechGroup_StoryTechGroupVehiclesHellion, "Tech|Tech_Hellion_2", libCamp_ge_StoryTech_StoryTechNone);
    libCamp_gf_TS_InitializeTechDataSingle(libCamp_ge_StoryTech_StoryTechGoliathStabilizers, libCamp_ge_StoryTechGroup_StoryTechGroupVehiclesGoliath, "Tech|Tech_Goliath_2", libCamp_ge_StoryTech_StoryTechNone);
    libCamp_gf_TS_InitializeTechDataSingle(libCamp_ge_StoryTech_StoryTechGoliathAresClassTargetingSystem, libCamp_ge_StoryTechGroup_StoryTechGroupVehiclesGoliath, "Tech|Tech_Goliath_1", libCamp_ge_StoryTech_StoryTechNone);
    libCamp_gf_TS_InitializeTechDataSingle(libCamp_ge_StoryTech_StoryTechDiamondbackTriLithiumPowerCells, libCamp_ge_StoryTechGroup_StoryTechGroupVehiclesDiamondback, "Tech|Tech_Diamondback_1", libCamp_ge_StoryTech_StoryTechNone);
    libCamp_gf_TS_InitializeTechDataSingle(libCamp_ge_StoryTech_StoryTechDiamondbackHyperfluxor, libCamp_ge_StoryTechGroup_StoryTechGroupVehiclesDiamondback, "Tech|Tech_Diamondback_2", libCamp_ge_StoryTech_StoryTechNone);
    libCamp_gf_TS_InitializeTechDataSingle(libCamp_ge_StoryTech_StoryTechVultureCerberusMines, libCamp_ge_StoryTechGroup_StoryTechGroupVehiclesVulture, "Tech|Tech_Vulture_1", libCamp_ge_StoryTech_StoryTechNone);
    libCamp_gf_TS_InitializeTechDataSingle(libCamp_ge_StoryTech_StoryTechVultureNanoConstructors, libCamp_ge_StoryTechGroup_StoryTechGroupVehiclesVulture, "Tech|Tech_Vulture_2", libCamp_ge_StoryTech_StoryTechNone);
    libCamp_gf_TS_InitializeTechDataSingle(libCamp_ge_StoryTech_StoryTechSiegeTankMaelstromRounds, libCamp_ge_StoryTechGroup_StoryTechGroupVehiclesSiegeTank, "Tech|Tech_SiegeTank_1", libCamp_ge_StoryTech_StoryTechNone);
    libCamp_gf_TS_InitializeTechDataSingle(libCamp_ge_StoryTech_StoryTechSiegeTankShapedBlast, libCamp_ge_StoryTechGroup_StoryTechGroupVehiclesSiegeTank, "Tech|Tech_SiegeTank_2", libCamp_ge_StoryTech_StoryTechNone);
    libCamp_gf_TS_InitializeTechDataSingle(libCamp_ge_StoryTech_StoryTechMedivacAdvancedHealingAI, libCamp_ge_StoryTechGroup_StoryTechGroupStarshipsMedivac, "Tech|Tech_Medivac_1", libCamp_ge_StoryTech_StoryTechNone);
    libCamp_gf_TS_InitializeTechDataSingle(libCamp_ge_StoryTech_StoryTechMedivacRapidDeployment, libCamp_ge_StoryTechGroup_StoryTechGroupStarshipsMedivac, "Tech|Tech_Medivac_2", libCamp_ge_StoryTech_StoryTechNone);
    libCamp_gf_TS_InitializeTechDataSingle(libCamp_ge_StoryTech_StoryTechWraithSingularityAnchor, libCamp_ge_StoryTechGroup_StoryTechGroupStarshipsWrath, "Tech|Tech_Wraith_1", libCamp_ge_StoryTech_StoryTechNone);
    libCamp_gf_TS_InitializeTechDataSingle(libCamp_ge_StoryTech_StoryTechWraithCloakDistortionField, libCamp_ge_StoryTechGroup_StoryTechGroupStarshipsWrath, "Tech|Tech_Wraith_2", libCamp_ge_StoryTech_StoryTechNone);
    libCamp_gf_TS_InitializeTechDataSingle(libCamp_ge_StoryTech_StoryTechVikingAresClassTargetingSystem, libCamp_ge_StoryTechGroup_StoryTechGroupStarshipsViking, "Tech|Tech_Viking_1", libCamp_ge_StoryTech_StoryTechNone);
    libCamp_gf_TS_InitializeTechDataSingle(libCamp_ge_StoryTech_StoryTechVikingRipwaveMissiles, libCamp_ge_StoryTechGroup_StoryTechGroupStarshipsViking, "Tech|Tech_Viking_2", libCamp_ge_StoryTech_StoryTechNone);
    libCamp_gf_TS_InitializeTechDataSingle(libCamp_ge_StoryTech_StoryTechBansheeCrossSpectrumDampeners, libCamp_ge_StoryTechGroup_StoryTechGroupStarshipsBanshee, "Tech|Tech_Banshee_2", libCamp_ge_StoryTech_StoryTechNone);
    libCamp_gf_TS_InitializeTechDataSingle(libCamp_ge_StoryTech_StoryTechBansheeShockwaveMissilePattern, libCamp_ge_StoryTechGroup_StoryTechGroupStarshipsBanshee, "Tech|Tech_Banshee_1", libCamp_ge_StoryTech_StoryTechNone);
    libCamp_gf_TS_InitializeTechDataSingle(libCamp_ge_StoryTech_StoryTechBattlecruiserMissilePods, libCamp_ge_StoryTechGroup_StoryTechGroupStarshipsBattlecruiser, "Tech|Tech_Battlecruiser_1", libCamp_ge_StoryTech_StoryTechNone);
    libCamp_gf_TS_InitializeTechDataSingle(libCamp_ge_StoryTech_StoryTechBattlecruiserDefensiveMatrix, libCamp_ge_StoryTechGroup_StoryTechGroupStarshipsBattlecruiser, "Tech|Tech_Battlecruiser_2", libCamp_ge_StoryTech_StoryTechNone);
    libCamp_gf_TS_InitializeTechDataSingle(libCamp_ge_StoryTech_StoryTechGhostOcularImplants, libCamp_ge_StoryTechGroup_StoryTechGroupDominionGhost, "Tech|Tech_Ghost_1", libCamp_ge_StoryTech_StoryTechNone);
    libCamp_gf_TS_InitializeTechDataSingle(libCamp_ge_StoryTech_StoryTechGhostPermaCloak, libCamp_ge_StoryTechGroup_StoryTechGroupDominionGhost, "Tech|Tech_Ghost_2", libCamp_ge_StoryTech_StoryTechNone);
    libCamp_gf_TS_InitializeTechDataSingle(libCamp_ge_StoryTech_StoryTechSpectreUltrasonicPulse, libCamp_ge_StoryTechGroup_StoryTechGroupDominionSpectre, "Tech|Tech_Spectre_1", libCamp_ge_StoryTech_StoryTechNone);
    libCamp_gf_TS_InitializeTechDataSingle(libCamp_ge_StoryTech_StoryTechSpectrePermaCloak, libCamp_ge_StoryTechGroup_StoryTechGroupDominionSpectre, "Tech|Tech_Spectre_2", libCamp_ge_StoryTech_StoryTechNone);
    libCamp_gf_TS_InitializeTechDataSingle(libCamp_ge_StoryTech_StoryTechThor330mmBarrageCannons, libCamp_ge_StoryTechGroup_StoryTechGroupDominionThor, "Tech|Tech_Thor_1", libCamp_ge_StoryTech_StoryTechNone);
    libCamp_gf_TS_InitializeTechDataSingle(libCamp_ge_StoryTech_StoryTechThorImmortalityProtocol, libCamp_ge_StoryTechGroup_StoryTechGroupDominionThor, "Tech|Tech_Thor_2", libCamp_ge_StoryTech_StoryTechNone);
}

void libCamp_gf_TS_ResetTechData () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto4D60B8E4_ae;
    const int auto4D60B8E4_ai = 1;

    // Variable Initialization

    // Implementation
    auto4D60B8E4_ae = libCamp_gv_TSC_TECH_LAST;
    lv_index = libCamp_gv_TSC_TECH_FIRST;
    for ( ; ( (auto4D60B8E4_ai >= 0 && lv_index <= auto4D60B8E4_ae) || (auto4D60B8E4_ai < 0 && lv_index >= auto4D60B8E4_ae) ) ; lv_index += auto4D60B8E4_ai ) {
        libCamp_gv_tSX_Tech_Status[lv_index] = libCamp_ge_StoryTechStates_TechAvailable;
    }
    libCamp_gf_TS_UpdateTechStates();
}

void libCamp_gf_TS_CreateTechCategoryUI () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int autoCC1C88BE_ae;
    const int autoCC1C88BE_ai = 1;

    // Variable Initialization

    // Implementation
    autoCC1C88BE_ae = libCamp_gv_TSC_TECHCATEGORY_LAST;
    lv_index = libCamp_gv_TSC_TECHCATEGORY_FIRST;
    for ( ; ( (autoCC1C88BE_ai >= 0 && lv_index <= autoCC1C88BE_ae) || (autoCC1C88BE_ai < 0 && lv_index >= autoCC1C88BE_ae) ) ; lv_index += autoCC1C88BE_ai ) {
        if ((libCamp_gv_tS_TechCategoryID[lv_index] != libCamp_ge_StoryTechCategory_StoryTechCategoryNone) && (libCamp_gv_tS_TechCategory_UI[lv_index] == c_invalidPurchaseCategoryId)) {
            PurchaseCategoryCreate(PlayerGroupAll(), libCamp_gv_tS_TechCategorySlot[lv_index]);
            libCamp_gv_tS_TechCategory_UI[lv_index] = PurchaseCategoryLastCreated();
            PurchaseCategorySetNameText(PurchaseCategoryLastCreated(), libCamp_gv_tS_TechCategoryName[lv_index]);
        }

    }
}

void libCamp_gf_TS_CreateTechGroupUI () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto583598E1_ae;
    const int auto583598E1_ai = 1;

    // Variable Initialization

    // Implementation
    auto583598E1_ae = libCamp_gv_TSC_TECHGROUP_LAST;
    lv_index = libCamp_gv_TSC_TECHGROUP_FIRST;
    for ( ; ( (auto583598E1_ai >= 0 && lv_index <= auto583598E1_ae) || (auto583598E1_ai < 0 && lv_index >= auto583598E1_ae) ) ; lv_index += auto583598E1_ai ) {
        if ((libCamp_gv_tS_TechGroupID[lv_index] != libCamp_ge_StoryTechGroup_StoryTechGroupNone) && (libCamp_gv_tS_TechGroupCategoryID[lv_index] != libCamp_ge_StoryTechCategory_StoryTechCategoryNone) && (libCamp_gv_tS_TechGroup_UI[lv_index] == c_invalidPurchaseGroupId)) {
            PurchaseGroupCreate(PlayerGroupAll(), libCamp_gv_tS_TechCategory_UI[(libCamp_gv_tS_TechGroupCategoryID[lv_index])], 1);
            libCamp_gv_tS_TechGroup_UI[lv_index] = PurchaseGroupLastCreated();
            PurchaseGroupSetNameText(PurchaseGroupLastCreated(), libCamp_gv_tS_TechGroupName[lv_index]);
        }

    }
}

void libCamp_gf_TS_CreateTechUI () {
    // Variable Declarations
    int lv_techIndex;
    int lv_indexTech;
    text lv_requirements;

    // Automatic Variable Declarations
    int auto35BDE233_i;

    // Variable Initialization
    lv_indexTech = libCamp_ge_StoryTech_StoryTechNone;
    lv_requirements = StringToText("");

    // Implementation
    libCamp_gf_TS_CreateTechCategoryUI();
    libCamp_gf_TS_CreateTechGroupUI();
    auto35BDE233_i = libCamp_gv_TSC_TECH_FIRST;
    while (auto35BDE233_i <= libCamp_gv_TSC_TECH_LAST) {
        lv_indexTech = libCamp_gv_tS_TechID[auto35BDE233_i];
        lv_techIndex = (lv_indexTech);
        if ((libCamp_gv_tS_Tech_UI[lv_techIndex] == c_invalidPurchaseItemId)) {
            PurchaseItemCreate(PlayerGroupAll(), libCamp_gv_tS_TechGroup_UI[(libCamp_gv_tS_Tech_GroupID[lv_techIndex])], libCamp_gf_StoryTechSlot(lv_indexTech));
            libCamp_gv_tS_Tech_UI[lv_techIndex] = PurchaseItemLastCreated();
            PurchaseItemSetCost(PurchaseItemLastCreated(), libCamp_gf_StoryTechCost(lv_indexTech));
            PurchaseItemSetIconFilePath(PurchaseItemLastCreated(), libCamp_gf_StoryTechIcon(lv_indexTech));
            PurchaseItemSetMovieFilePath(PurchaseItemLastCreated(), libCamp_gf_StoryTechMovie(lv_indexTech));
            PurchaseItemSetNameText(PurchaseItemLastCreated(), libCamp_gf_StoryTechName(lv_indexTech));
        }

        auto35BDE233_i = auto35BDE233_i + 1;
    }
    libCamp_gf_TS_UpdateTechUI();
    libCamp_gf_TS_UpdateTechUINewGroups();
    libCamp_gf_TS_UpdateTechVisuals();
}

void libCamp_gf_TS_UpdateTechGroupUI () {
    // Variable Declarations
    int lv_indexCategory;
    int lv_indexGroup;
    int lv_categoryIndex;
    int lv_groupIndex;
    int lv_slot;
    text lv_debugtext;

    // Automatic Variable Declarations
    int auto8062DA62_i;
    int autoB46F1BE5_i;
    int auto4E4FF2EB_i;

    // Variable Initialization
    lv_indexCategory = libCamp_ge_StoryTechCategory_StoryTechCategoryNone;
    lv_indexGroup = libCamp_ge_StoryTechGroup_StoryTechGroupNone;

    // Implementation
    auto8062DA62_i = libCamp_gv_TSC_TECHCATEGORY_FIRST;
    while (auto8062DA62_i <= libCamp_gv_TSC_TECHCATEGORY_LAST) {
        lv_indexCategory = libCamp_gv_tS_TechCategoryID[auto8062DA62_i];
        lv_categoryIndex = (lv_indexCategory);
        lv_slot = 0;
        libCamp_gv_tSX_TechCategoryCount[lv_categoryIndex] = 0;
        autoB46F1BE5_i = libCamp_gv_TSC_TECHGROUP_FIRST;
        while (autoB46F1BE5_i <= libCamp_gv_TSC_TECHGROUP_LAST) {
            lv_indexGroup = libCamp_gv_tS_TechGroupID[autoB46F1BE5_i];
            lv_groupIndex = (lv_indexGroup);
            if ((lv_indexGroup != libCamp_ge_StoryTechGroup_StoryTechGroupNone) && (libCamp_gv_tS_TechGroup_UI[lv_groupIndex] != c_invalidPurchaseGroupId) && (libCamp_gv_tS_TechGroupCategoryID[lv_groupIndex] == lv_indexCategory)) {
                if ((libCamp_gf_TS_StoryTechGroupUIUnlocked(lv_indexGroup) == true)) {
                    PurchaseGroupSetState(libCamp_gv_tS_TechGroup_UI[lv_groupIndex], c_purchaseCategoryStateEnabled);
                    lv_slot += 1;
                    PurchaseGroupSetSlot(libCamp_gv_tS_TechGroup_UI[lv_groupIndex], lv_slot);
                    PurchaseGroupSetState(libCamp_gv_tS_TechGroup_UI[lv_groupIndex], c_purchaseGroupStateNew);
                    libCamp_gv_tSX_TechGroup_UI_New[lv_groupIndex] = true;
                    PurchaseGroupSetUnitLink(libCamp_gv_tS_TechGroup_UI[lv_groupIndex], libCamp_gv_tS_TechGroupUnitType[lv_groupIndex]);
                    libCamp_gv_tSX_TechCategoryCount[lv_categoryIndex] += 1;
                }
                else {
                    PurchaseGroupSetState(libCamp_gv_tS_TechGroup_UI[lv_groupIndex], c_purchaseCategoryStateHidden);
                }
            }

            autoB46F1BE5_i = autoB46F1BE5_i + 1;
        }
        if ((lv_slot > 0)) {
            PurchaseCategorySetState(libCamp_gv_tS_TechCategory_UI[(lv_indexCategory)], c_purchaseCategoryStateEnabled);
        }
        else {
            PurchaseCategorySetState(libCamp_gv_tS_TechCategory_UI[(lv_indexCategory)], c_purchaseCategoryStateHidden);
        }
        auto8062DA62_i = auto8062DA62_i + 1;
    }
    auto4E4FF2EB_i = libCamp_gv_TSC_TECHCATEGORY_FIRST;
    while (auto4E4FF2EB_i <= libCamp_gv_TSC_TECHCATEGORY_LAST) {
        lv_indexCategory = libCamp_gv_tS_TechCategoryID[auto4E4FF2EB_i];
        lv_categoryIndex = (lv_indexCategory);
        if ((libCamp_gv_tSX_TechCategoryCount[lv_categoryIndex] == 0)) {
            libCamp_gv_tSX_TechCategoryCount[lv_categoryIndex] = -1;
        }

        auto4E4FF2EB_i = auto4E4FF2EB_i + 1;
    }
}

void libCamp_gf_TS_UpdateTechUI () {
    // Variable Declarations
    int lv_techIndex;
    int lv_indexTech;
    text lv_tooltip;
    text lv_specification;
    int lv_groupID;

    // Automatic Variable Declarations
    int auto87FE512E_i;
    int autoB1B8A49C_val;

    // Variable Initialization
    lv_indexTech = libCamp_ge_StoryTech_StoryTechNone;
    lv_tooltip = StringToText("");

    // Implementation
    libCamp_gf_TS_UpdateTechStates();
    libCamp_gf_TS_UpdateTechGroupUI();
    auto87FE512E_i = libCamp_gv_TSC_TECH_FIRST;
    while (auto87FE512E_i <= libCamp_gv_TSC_TECH_LAST) {
        lv_indexTech = libCamp_gv_tS_TechID[auto87FE512E_i];
        lv_techIndex = (lv_indexTech);
        lv_tooltip = libCamp_gf_StoryTechTooltip(lv_indexTech);
        if ((libCamp_gv_tSX_Tech_Status[lv_techIndex] == libCamp_ge_StoryTechStates_TechLocked)) {
            if ((libCamp_gv_tS_Tech_Requires[lv_techIndex] != libCamp_ge_StoryTech_StoryTechNone) && (libCamp_gv_tSX_Tech_Status[(libCamp_gv_tS_Tech_Requires[lv_techIndex])] != libCamp_ge_StoryTechStates_TechPurchased)) {
                lv_tooltip = (lv_tooltip + StringExternal("Param/Value/lib_Camp_848F0F00") + libCamp_gf_StoryTechName(libCamp_gv_tS_Tech_Requires[lv_techIndex]) + StringExternal("Param/Value/lib_Camp_21CFFC8D") + StringExternal("Param/Value/lib_Camp_8ECFA0EF"));
            }

        }

        PurchaseItemSetTooltipText(libCamp_gv_tS_Tech_UI[lv_techIndex], lv_tooltip);
        PurchaseItemSetDescriptionText(libCamp_gv_tS_Tech_UI[(lv_indexTech)], (libCamp_gf_StoryTechDescription(lv_indexTech)));
        autoB1B8A49C_val = libCamp_gv_tSX_Tech_Status[lv_techIndex];
        if (autoB1B8A49C_val == libCamp_ge_StoryTechStates_TechLocked) {
            PurchaseItemSetState(libCamp_gv_tS_Tech_UI[lv_techIndex], c_purchaseItemStateDisabled);
        }
        else if (autoB1B8A49C_val == libCamp_ge_StoryTechStates_TechUnavailable) {
            PurchaseItemSetState(libCamp_gv_tS_Tech_UI[lv_techIndex], c_purchaseItemStateDisabled);
        }
        else if (autoB1B8A49C_val == libCamp_ge_StoryTechStates_TechAvailable) {
            PurchaseItemSetState(libCamp_gv_tS_Tech_UI[lv_techIndex], c_purchaseItemStateEnabled);
        }
        else if (autoB1B8A49C_val == libCamp_ge_StoryTechStates_TechNew) {
            PurchaseItemSetState(libCamp_gv_tS_Tech_UI[lv_techIndex], c_purchaseItemStateEnabled);
        }
        else if (autoB1B8A49C_val == libCamp_ge_StoryTechStates_TechPurchased) {
            PurchaseItemSetState(libCamp_gv_tS_Tech_UI[lv_techIndex], c_purchaseItemStatePurchased);
        }
        else {
        }
        auto87FE512E_i = auto87FE512E_i + 1;
    }
    PlayerModifyPropertyInt(1, c_playerPropCredits, c_playerPropOperSetTo, libCamp_gf_StoryCredits());
}

void libCamp_gf_TS_UpdateTechUINewGroups () {
    // Variable Declarations
    int lv_techIndex;
    int lv_indexTech;
    text lv_debugstring;
    int lv_categoryIndex;
    int lv_indexCategory;
    int lv_groupIndex;
    int lv_indexGroup;
    int lv_groupID;

    // Automatic Variable Declarations
    int auto8C3260D2_i;
    int auto96C4DC0C_i;

    // Variable Initialization
    lv_indexTech = libCamp_ge_StoryTech_StoryTechNone;
    lv_indexCategory = libCamp_ge_StoryTechCategory_StoryTechCategoryNone;
    lv_indexGroup = libCamp_ge_StoryTechGroup_StoryTechGroupNone;

    // Implementation
    auto8C3260D2_i = libCamp_gv_TSC_TECH_FIRST;
    while (auto8C3260D2_i <= libCamp_gv_TSC_TECH_LAST) {
        lv_indexTech = libCamp_gv_tS_TechID[auto8C3260D2_i];
        lv_techIndex = (lv_indexTech);
        if (((libCamp_gv_tSX_Tech_Status[lv_techIndex] == libCamp_ge_StoryTechStates_TechAvailable) || (libCamp_gv_tSX_Tech_Status[lv_techIndex] == libCamp_ge_StoryTechStates_TechPurchased))) {
            lv_groupID = (libCamp_gv_tS_Tech_GroupID[lv_techIndex]);
            lv_categoryIndex = (libCamp_gv_tS_TechCategoryID[(libCamp_gv_tS_TechGroupCategoryID[lv_groupID])]);
            if ((libCamp_gv_tSX_TechGroup_UI_New[lv_groupID] == true)) {
                libCamp_gv_tSX_TechGroup_UI_New[lv_groupID] = false;
                PurchaseGroupSetState(libCamp_gv_tS_TechGroup_UI[lv_groupID], c_purchaseGroupStateEnabled);
                libCamp_gv_tSX_TechCategoryCount[lv_categoryIndex] -= 1;
            }

        }

        auto8C3260D2_i = auto8C3260D2_i + 1;
    }
    auto96C4DC0C_i = libCamp_gv_TSC_TECHCATEGORY_FIRST;
    while (auto96C4DC0C_i <= libCamp_gv_TSC_TECHCATEGORY_LAST) {
        lv_indexCategory = libCamp_gv_tS_TechCategoryID[auto96C4DC0C_i];
        lv_categoryIndex = (lv_indexCategory);
        if ((libCamp_gv_tSX_TechCategoryCount[lv_categoryIndex] > -1)) {
            if ((libCamp_gv_tSX_TechCategoryCount[lv_categoryIndex] > 0)) {
                PurchaseCategorySetState(libCamp_gv_tS_TechCategory_UI[lv_categoryIndex], c_purchaseCategoryStateNew);
            }
            else {
                PurchaseCategorySetState(libCamp_gv_tS_TechCategory_UI[lv_categoryIndex], c_purchaseCategoryStateEnabled);
            }
        }

        auto96C4DC0C_i = auto96C4DC0C_i + 1;
    }
}

void libCamp_gf_TS_UpdateTechVisuals () {
    // Variable Declarations
    int[51] lv_purchasedCounts;
    int[51] lv_lowMoneyCounts;
    string[51] lv_purchasedCounts_Images;
    string[51] lv_lowMoneyCounts_Images;
    int lv_techIndex;
    int lv_indexTech;
    int lv_categoryIndex;
    int lv_indexCategory;
    int lv_groupIndex;
    int lv_indexGroup;
    int lv_groupID;
    text lv_debugstring;
    int lv_slot;

    // Automatic Variable Declarations
    int auto94D2BCB2_i;
    int auto69D612FB_i;
    int auto11801BDF_i;

    // Variable Initialization
    lv_indexTech = libCamp_ge_StoryTech_StoryTechNone;
    lv_indexCategory = libCamp_ge_StoryTechCategory_StoryTechCategoryNone;
    lv_indexGroup = libCamp_ge_StoryTechGroup_StoryTechGroupNone;

    // Implementation
    lv_purchasedCounts_Images[1] = "Assets\\Textures\\ui_techpurchase_bunker_hired.dds";
    lv_lowMoneyCounts_Images[1] = "Assets\\Textures\\ui_techpurchase_bunker_nocredit.dds";
    lv_purchasedCounts_Images[2] = "Assets\\Textures\\ui_techpurchase_missileturret_hired.dds";
    lv_lowMoneyCounts_Images[2] = "Assets\\Textures\\ui_techpurchase_missileturret_nocredit.dds";
    lv_purchasedCounts_Images[3] = "Assets\\Textures\\ui_techpurchase_scv_hired.dds";
    lv_lowMoneyCounts_Images[3] = "Assets\\Textures\\ui_techpurchase_scv_nocredit.dds";
    lv_purchasedCounts_Images[4] = "Assets\\Textures\\ui_techpurchase_commandcenter_hired.dds";
    lv_lowMoneyCounts_Images[4] = "Assets\\Textures\\ui_techpurchase_commandcenter_nocredit.dds";
    lv_purchasedCounts_Images[5] = "Assets\\Textures\\ui_techpurchase_marine_hired.dds";
    lv_lowMoneyCounts_Images[5] = "Assets\\Textures\\ui_techpurchase_marine_nocredit.dds";
    lv_purchasedCounts_Images[6] = "Assets\\Textures\\ui_techpurchase_medic_hired.dds";
    lv_lowMoneyCounts_Images[6] = "Assets\\Textures\\ui_techpurchase_medic_nocredit.dds";
    lv_purchasedCounts_Images[7] = "Assets\\Textures\\ui_techpurchase_firebat_hired.dds";
    lv_lowMoneyCounts_Images[7] = "Assets\\Textures\\ui_techpurchase_firebat_nocredit.dds";
    lv_purchasedCounts_Images[8] = "Assets\\Textures\\ui_techpurchase_marauder_hired.dds";
    lv_lowMoneyCounts_Images[8] = "Assets\\Textures\\ui_techpurchase_marauder_nocredit.dds";
    lv_purchasedCounts_Images[9] = "Assets\\Textures\\ui_techpurchase_reaper_hired.dds";
    lv_lowMoneyCounts_Images[9] = "Assets\\Textures\\ui_techpurchase_reaper_nocredit.dds";
    lv_purchasedCounts_Images[10] = "Assets\\Textures\\ui_techpurchase_hellion_hired.dds";
    lv_lowMoneyCounts_Images[10] = "Assets\\Textures\\ui_techpurchase_hellion_nocredit.dds";
    lv_purchasedCounts_Images[11] = "Assets\\Textures\\ui_techpurchase_vulture_hired.dds";
    lv_lowMoneyCounts_Images[11] = "Assets\\Textures\\ui_techpurchase_vulture_nocredit.dds";
    lv_purchasedCounts_Images[12] = "Assets\\Textures\\ui_techpurchase_goliath_hired.dds";
    lv_lowMoneyCounts_Images[12] = "Assets\\Textures\\ui_techpurchase_goliath_nocredit.dds";
    lv_purchasedCounts_Images[13] = "Assets\\Textures\\ui_techpurchase_diamondback_hired.dds";
    lv_lowMoneyCounts_Images[13] = "Assets\\Textures\\ui_techpurchase_diamondback_nocredit.dds";
    lv_purchasedCounts_Images[14] = "Assets\\Textures\\ui_techpurchase_siegetank_hired.dds";
    lv_lowMoneyCounts_Images[14] = "Assets\\Textures\\ui_techpurchase_siegetank_nocredit.dds";
    lv_purchasedCounts_Images[15] = "Assets\\Textures\\ui_techpurchase_medivac_hired.dds";
    lv_lowMoneyCounts_Images[15] = "Assets\\Textures\\ui_techpurchase_medivac_nocredit.dds";
    lv_purchasedCounts_Images[16] = "Assets\\Textures\\ui_techpurchase_wraith_hired.dds";
    lv_lowMoneyCounts_Images[16] = "Assets\\Textures\\ui_techpurchase_wraith_nocredit.dds";
    lv_purchasedCounts_Images[17] = "Assets\\Textures\\ui_techpurchase_viking_hired.dds";
    lv_lowMoneyCounts_Images[17] = "Assets\\Textures\\ui_techpurchase_viking_nocredit.dds";
    lv_purchasedCounts_Images[18] = "Assets\\Textures\\ui_techpurchase_banshee_hired.dds";
    lv_lowMoneyCounts_Images[18] = "Assets\\Textures\\ui_techpurchase_banshee_nocredit.dds";
    lv_purchasedCounts_Images[19] = "Assets\\Textures\\ui_techpurchase_battlecruiser_hired.dds";
    lv_lowMoneyCounts_Images[19] = "Assets\\Textures\\ui_techpurchase_battlecruiser_nocredit.dds";
    lv_purchasedCounts_Images[20] = "Assets\\Textures\\ui_techpurchase_ghost_hired.dds";
    lv_lowMoneyCounts_Images[20] = "Assets\\Textures\\ui_techpurchase_ghost_nocredit.dds";
    lv_purchasedCounts_Images[21] = "Assets\\Textures\\ui_techpurchase_spectre_hired.dds";
    lv_lowMoneyCounts_Images[21] = "Assets\\Textures\\ui_techpurchase_spectre_nocredit.dds";
    lv_purchasedCounts_Images[22] = "Assets\\Textures\\ui_techpurchase_thor_hired.dds";
    lv_lowMoneyCounts_Images[22] = "Assets\\Textures\\ui_techpurchase_thor_nocredit.dds";
    auto94D2BCB2_i = libCamp_gv_TSC_TECH_FIRST;
    while (auto94D2BCB2_i <= libCamp_gv_TSC_TECH_LAST) {
        lv_indexTech = libCamp_gv_tS_TechID[auto94D2BCB2_i];
        lv_techIndex = (lv_indexTech);
        if ((libCamp_gv_tSX_Tech_Status[lv_techIndex] == libCamp_ge_StoryTechStates_TechPurchased)) {
            lv_groupID = (libCamp_gv_tS_Tech_GroupID[lv_techIndex]);
            lv_purchasedCounts[lv_groupID] += 1;
        }
        else {
            if (((libCamp_gf_StoryCredits() < libCamp_gf_StoryTechCost(lv_indexTech)) && ((libCamp_gv_tSX_Tech_Status[lv_techIndex] == libCamp_ge_StoryTechStates_TechNew) || (libCamp_gv_tSX_Tech_Status[lv_techIndex] == libCamp_ge_StoryTechStates_TechAvailable)))) {
                lv_groupID = (libCamp_gv_tS_Tech_GroupID[lv_techIndex]);
                lv_lowMoneyCounts[lv_groupID] += 1;
            }

        }
        auto94D2BCB2_i = auto94D2BCB2_i + 1;
    }
    auto69D612FB_i = libCamp_gv_TSC_TECHCATEGORY_FIRST;
    while (auto69D612FB_i <= libCamp_gv_TSC_TECHCATEGORY_LAST) {
        lv_indexCategory = libCamp_gv_tS_TechCategoryID[auto69D612FB_i];
        lv_categoryIndex = (lv_indexCategory);
        lv_slot = 0;
        libCamp_gv_tSX_TechCategoryCount[lv_categoryIndex] = 0;
        auto11801BDF_i = libCamp_gv_TSC_TECHGROUP_FIRST;
        while (auto11801BDF_i <= libCamp_gv_TSC_TECHGROUP_LAST) {
            lv_indexGroup = libCamp_gv_tS_TechGroupID[auto11801BDF_i];
            lv_groupIndex = (lv_indexGroup);
            if ((lv_indexGroup != libCamp_ge_StoryTechGroup_StoryTechGroupNone) && (libCamp_gv_tS_TechGroup_UI[lv_groupIndex] != c_invalidPurchaseGroupId) && (libCamp_gv_tS_TechGroupCategoryID[lv_groupIndex] == lv_indexCategory)) {
                if ((libCamp_gf_TS_StoryTechGroupUIUnlocked(lv_indexGroup) == true)) {
                    lv_slot += 1;
                    libCamp_gv_tSX_TechCategoryCount[lv_categoryIndex] += 1;
                    PurchaseGroupSetIconFilePath(libCamp_gv_tS_TechGroup_UI[lv_groupIndex], "Assets\\Textures\\blank.dds");
                    PurchaseGroupSetUnitLink(libCamp_gv_tS_TechGroup_UI[lv_groupIndex], libCamp_gv_tS_TechGroupUnitType[lv_groupIndex]);
                    if ((lv_purchasedCounts[lv_groupIndex] == 2)) {
                        PurchaseGroupSetUnitLink(libCamp_gv_tS_TechGroup_UI[lv_groupIndex], "InvisiblePylon");
                        PurchaseGroupSetIconFilePath(libCamp_gv_tS_TechGroup_UI[lv_groupIndex], lv_purchasedCounts_Images[lv_groupIndex]);
                    }

                    if (((lv_lowMoneyCounts[lv_groupIndex] == 2) || ((lv_lowMoneyCounts[lv_groupIndex] == 1) && (lv_purchasedCounts[lv_groupIndex] == 1)))) {
                        PurchaseGroupSetUnitLink(libCamp_gv_tS_TechGroup_UI[lv_groupIndex], "InvisiblePylon");
                        PurchaseGroupSetIconFilePath(libCamp_gv_tS_TechGroup_UI[lv_groupIndex], lv_lowMoneyCounts_Images[lv_groupIndex]);
                    }

                }

            }

            auto11801BDF_i = auto11801BDF_i + 1;
        }
        auto69D612FB_i = auto69D612FB_i + 1;
    }
}

void libCamp_gf_TS_BuyAllTech () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto45FF2EB0_ae;
    const int auto45FF2EB0_ai = 1;

    // Variable Initialization

    // Implementation
    auto45FF2EB0_ae = libCamp_gv_TSC_TECH_LAST;
    lv_index = libCamp_gv_TSC_TECH_FIRST;
    for ( ; ( (auto45FF2EB0_ai >= 0 && lv_index <= auto45FF2EB0_ae) || (auto45FF2EB0_ai < 0 && lv_index >= auto45FF2EB0_ae) ) ; lv_index += auto45FF2EB0_ai ) {
        libCamp_gv_tSX_Tech_Status[lv_index] = libCamp_ge_StoryTechStates_TechPurchased;
    }
    libCamp_gf_TS_UpdateTechStates();
}

void libCamp_gf_TS_StoryCheckTechReqSingle (int lp_tech, int lp_requiredTech) {
    // Variable Declarations
    int lv_techIndex;
    int lv_requiredTechIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_techIndex = (lp_tech);
    lv_requiredTechIndex = (lp_requiredTech);
    if ((libCamp_gv_tSX_Tech_Status[lv_requiredTechIndex] != libCamp_ge_StoryTechStates_TechPurchased)) {
        libCamp_gv_tSX_Tech_Status[lv_techIndex] = libCamp_ge_StoryTechStates_TechLocked;
    }
    else {
        if ((libCamp_gv_tSX_Tech_Status[lv_techIndex] == libCamp_ge_StoryTechStates_TechLocked)) {
            libCamp_gv_tSX_Tech_Status[lv_techIndex] = libCamp_ge_StoryTechStates_TechAvailable;
        }

    }
}

void libCamp_gf_TS_StoryCheckTechReqs () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto648F03B3_ae;
    const int auto648F03B3_ai = 1;

    // Variable Initialization

    // Implementation
    auto648F03B3_ae = libCamp_gv_TSC_TECH_LAST;
    lv_index = libCamp_gv_TSC_TECH_FIRST;
    for ( ; ( (auto648F03B3_ai >= 0 && lv_index <= auto648F03B3_ae) || (auto648F03B3_ai < 0 && lv_index >= auto648F03B3_ae) ) ; lv_index += auto648F03B3_ai ) {
        if ((libCamp_gv_tS_Tech_Requires[lv_index] != libCamp_ge_StoryTech_StoryTechNone)) {
            libCamp_gf_TS_StoryCheckTechReqSingle(libCamp_gv_tS_TechID[lv_index], libCamp_gv_tS_Tech_Requires[lv_index]);
        }
    }
}

void libCamp_gf_TS_HelpUnitsPanel_AddEnabledUnitType (string lp_unitType) {
    // Automatic Variable Declarations
    // Implementation
    if (((libCamp_gv_tSX_HelpUnitsPanel_EnabledUnitTypesCount == libCamp_gv_tSC_HelpUnitsPanel_EnabledUnitTypesCountMax) || (libCamp_gf_TS_HelpUnitsPanel_EnabledUnitTypeAlreadyExisted(lp_unitType) == true))) {
        return ;
    }

    libCamp_gv_tSX_HelpUnitsPanel_EnabledUnitTypesCount += 1;
    libCamp_gv_tSX_HelpUnitsPanel_EnabledUnitTypes[libCamp_gv_tSX_HelpUnitsPanel_EnabledUnitTypesCount] = lp_unitType;
    DataTableSetString(true, libCamp_gf_TS_HelpUnitsPanel_UnitTypeStringID(lp_unitType), IntToString(libCamp_gv_tSX_HelpUnitsPanel_EnabledUnitTypesCount));
}

void libCamp_gf_TS_HelpUnitsPanel_ResetEnabledUnitTypes () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libCamp_gv_tSX_HelpUnitsPanel_EnabledUnitTypesCount = 0;
}

void libCamp_gf_TS_HelpUnitsPanel_UpdatePanel () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto76A09CC2_ae;
    const int auto76A09CC2_ai = 1;

    // Variable Initialization

    // Implementation
    auto76A09CC2_ae = libCamp_gv_tSX_HelpUnitsPanel_EnabledUnitTypesCount;
    lv_index = 1;
    for ( ; ( (auto76A09CC2_ai >= 0 && lv_index <= auto76A09CC2_ae) || (auto76A09CC2_ai < 0 && lv_index >= auto76A09CC2_ae) ) ; lv_index += auto76A09CC2_ai ) {
        if ((libCamp_gv_tSX_HelpUnitsPanel_EnabledUnitTypes[lv_index] == null)) {
            TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Camp_E3B25A20") + StringExternal("Param/Value/lib_Camp_E87EDEEC") + IntToText(lv_index)), false);
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_Camp_5A99EA6C", "A", UnitTypeGetName(libCamp_gv_tSX_HelpUnitsPanel_EnabledUnitTypes[lv_index]));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Camp_5A99EA6C"), false);
            TechTreeUnitHelp(1, libCamp_gv_tSX_HelpUnitsPanel_EnabledUnitTypes[lv_index], true);
        }
    }
}

void libCamp_gf_TS_HelpTechTree_UpdatePanel () {
    // Automatic Variable Declarations
    // Implementation
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Terr", false);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Prot", false);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Zerg", false);
    if ((libCamp_gf_MapTypeCheck(libCamp_gv_tS_CurrentMap, libCamp_ge_MapType_Mission) == false)) {
        return ;
    }

    if ((libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTStory01)) {
        HelpPanelShowTechTreeRace(PlayerGroupAll(), "Terr", true);
    }
    else if (((libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTZeratul01) || (libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTZeratul02) || (libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTZeratul03) || (libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTZeratul04))) {
        HelpPanelShowTechTreeRace(PlayerGroupAll(), "Prot", true);
    }
    else if ((libCamp_gf_MapTypeCheck(libCamp_gv_tS_CurrentMap, libCamp_ge_MapType_Mission) == true)) {
        HelpPanelShowTechTreeRace(PlayerGroupAll(), "Terr", true);
    }
}

string libCamp_gf_TS_BankSectionName (string lp_section) {
    // Automatic Variable Declarations
    // Implementation
    return (lp_section);
}

string libCamp_gf_TS_BackToStoryModeLoadingImage (string lp_imageToDo) {
    // Variable Declarations
    string lv_image;

    // Automatic Variable Declarations
    string auto1BDC892D_val;

    // Variable Initialization

    // Implementation
    auto1BDC892D_val = lp_imageToDo;
    if (auto1BDC892D_val == "MarSaraLoadingScreenImage") {
        libCamp_gv_tSX_LoadingImageCurrentMarSara += 1;
        if ((libCamp_gv_tSX_LoadingImageCurrentMarSara > libCamp_gv_tS_LoadingImageCountMarSara)) {
            libCamp_gv_tSX_LoadingImageCurrentMarSara = 1;
        }

        lv_image = libCamp_gv_tS_LoadingImagesMarSara[libCamp_gv_tSX_LoadingImageCurrentMarSara];
    }
    else if (auto1BDC892D_val == "HyperionLoadingScreenImage") {
        libCamp_gv_tSX_LoadingImageCurrentHyperion += 1;
        if ((libCamp_gv_tSX_LoadingImageCurrentHyperion > libCamp_gv_tS_LoadingImageCountHyperion)) {
            libCamp_gv_tSX_LoadingImageCurrentHyperion = 1;
        }

        lv_image = libCamp_gv_tS_LoadingImagesHyperion[libCamp_gv_tSX_LoadingImageCurrentHyperion];
    }
    else if (auto1BDC892D_val == "LabLoadingScreenImage") {
        libCamp_gv_tSX_LoadingImageCurrentLab += 1;
        if ((libCamp_gv_tSX_LoadingImageCurrentLab > libCamp_gv_tS_LoadingImageCountLab)) {
            libCamp_gv_tSX_LoadingImageCurrentLab = 1;
        }

        lv_image = libCamp_gv_tS_LoadingImagesLab[libCamp_gv_tSX_LoadingImageCurrentLab];
    }
    else if (auto1BDC892D_val == "CantinaLoadingScreenImage") {
        libCamp_gv_tSX_LoadingImageCurrentCantina += 1;
        if ((libCamp_gv_tSX_LoadingImageCurrentCantina > libCamp_gv_tS_LoadingImageCountCantina)) {
            libCamp_gv_tSX_LoadingImageCurrentCantina = 1;
        }

        lv_image = libCamp_gv_tS_LoadingImagesCantina[libCamp_gv_tSX_LoadingImageCurrentCantina];
    }
    else if (auto1BDC892D_val == "ArmoryLoadingScreenImage") {
        libCamp_gv_tSX_LoadingImageCurrentArmory += 1;
        if ((libCamp_gv_tSX_LoadingImageCurrentArmory > libCamp_gv_tS_LoadingImageCountArmory)) {
            libCamp_gv_tSX_LoadingImageCurrentArmory = 1;
        }

        lv_image = libCamp_gv_tS_LoadingImagesArmory[libCamp_gv_tSX_LoadingImageCurrentArmory];
    }
    else if (auto1BDC892D_val == "CharLoadingScreenImage") {
        libCamp_gv_tSX_LoadingImageCurrentChar += 1;
        if ((libCamp_gv_tSX_LoadingImageCurrentChar > libCamp_gv_tS_LoadingImageCountChar)) {
            libCamp_gv_tSX_LoadingImageCurrentChar = 1;
        }

        lv_image = libCamp_gv_tS_LoadingImagesChar[libCamp_gv_tSX_LoadingImageCurrentChar];
    }
    else {
        lv_image = lp_imageToDo;
    }
    return lv_image;
}

text libCamp_gf_TS_FormatLoadingScreenText (int lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gf_MissionPlanetInfo(lp_mission);
}

string libCamp_gf_TS_MissionBankName (int lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tS_MapFile[(lp_mission)];
}

string libCamp_gf_StoryModeRoomStates () {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tSX_RoomStates;
}

void libCamp_gf_LoadCampaignData (int lp_map) {
    // Variable Declarations
    int lv_indexPlayer;
    int lv_mission;
    string lv_bankName;

    // Automatic Variable Declarations
    int auto149C01FA_val;
    playergroup auto12F40F19_g;
    playergroup autoD57400DD_g;
    playergroup autoD3898CB1_g;
    playergroup auto4C85CA01_g;
    playergroup autoED5BF6AF_g;
    playergroup auto05DE0937_g;

    // Variable Initialization
    lv_indexPlayer = 1;
    lv_mission = libCamp_ge_MapID_MapNone;
    lv_bankName = "TRaynor01";

    // Implementation
    CampaignMode(PlayerGroupAll(), true);
    libNtve_gf_AddRemoveUIFrameTypeForGlobalFilterList(true, c_syncFrameTypeTextTag);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTeamResourceButton, false);
    if ((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true)) {
        TriggerDebugSetTypeFile(1, "StoryModeDebug.txt");
        libCamp_gv_debug_MapIDForPerfTest = lp_map;
        TriggerExecute(libCamp_gt_Debug_StartPerformanceLogging, true, false);
    }

    libCamp_gf_CP_LoadVars();
    libCamp_gv_tS_CurrentMap = (lp_map);
    libCamp_gf_TS_InitializeStateData();
    libCamp_gf_TS_InitializeStoryModeLoadingImages();
    libCamp_gf_TS_InitizlizeStoryConversations();
    libCamp_gf_TS_InitializeMapData();
    libCamp_gf_TS_InitializeSceneData();
    libCamp_gf_TS_InitializeMissionObjectiveData();
    libCamp_gf_TS_InitializePlanetData();
    libCamp_gf_TS_InitializeTechData();
    libCamp_gf_TS_InitializeResearchData();
    libCamp_gf_TS_InitializeMercData();
    libCamp_gf_TS_DebugBuyTechInitPurchasableShortcut();
    libCamp_gf_TS_InitializeStoryRooms();
    libCamp_gf_TS_InitializeStoryActors();
    libCamp_gf_TS_InitializeMapAchievementData();
    libCamp_gf_TS_LoadAllTransitionData(lp_map);
    libCamp_gf_TS_UpdateStoryStates();
    if ((libCamp_gf_StoryState(libCamp_ge_StoryStateID_StoryStateAchievementDisabled) > 0)) {
        AchievementsDisable(1);
    }

    if ((lp_map != libCamp_ge_MapID_MapTStory01) && (lp_map != libCamp_ge_MapID_MapTArcade)) {
        AIDisableAllScouting();
        auto149C01FA_val = PlayerDifficulty(1);
        if (auto149C01FA_val == 4) {
            GameSetSpeedValueMinimum(c_gameSpeedFaster);
        }
        else if (auto149C01FA_val == 3) {
            GameSetSpeedValueMinimum(c_gameSpeedFast);
        }
        else {
        }
    }

    if (((libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTRaynor01) || (libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTRaynor02) || (libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTRaynor03)) && (GameIsTransitionMap() == false)) {
        libCamp_gf_TS_DebugBuyTechAverage();
    }

    libCamp_gf_ApplyCampaignTech(1);
    auto12F40F19_g = PlayerGroupAll();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto12F40F19_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((PlayerType(lv_indexPlayer) != c_playerTypeUser) && (PlayerType(lv_indexPlayer) != c_playerTypeNeutral)) {
            TechTreeUpgradeAddLevel(lv_indexPlayer, "TechReactorAI", 1);
            TechTreeUpgradeAddLevel(lv_indexPlayer, "haltech", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
            TechTreeUpgradeAddLevel(lv_indexPlayer, "MarauderLifeBoost", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
            TechTreeUpgradeAddLevel(lv_indexPlayer, "PsiStormTech", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
            TechTreeUpgradeAddLevel(lv_indexPlayer, "StabilizerMedPacks", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
            TechTreeUpgradeAddLevel(lv_indexPlayer, "InterceptorLimit4", libNtve_gf_DifficultyValueInt(1, 1, 0, 0));
            TechTreeUpgradeAddLevel(lv_indexPlayer, "InterceptorLimit6", libNtve_gf_DifficultyValueInt(0, 0, 1, 0));
        }

    }
    libCamp_gf_TS_Tutorial_RestoreHistoryToUI();
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCharacterSheetButton, false);
    if ((libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTStory01) && (libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTRaynor02, libCamp_ge_MissionStatus_Completed) == true)) {
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCashPanel, true);
    }
    else {
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCashPanel, false);
    }
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogRestartDifficultyPulldown, true);
    if (((libCamp_gf_MapTypeCheck(libCamp_gv_tS_CurrentMap, libCamp_ge_MapType_Mission) == true) || (libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTArcade))) {
        libCamp_gf_TS_PrepareForMissionLoadingScreen(libCamp_gv_tS_CurrentMap, true);
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/ObjectivePanel");
    libCamp_gv_zS_ObjectivePanel = DialogControlLastCreated();
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 0, 30);
    TransmissionSetOption(c_transmissionOptionHideAlertPanel, true);
    autoD57400DD_g = PlayerGroupAll();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoD57400DD_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((PlayerType(lv_indexPlayer) != c_playerTypeUser)) {
            PlayerSetState(lv_indexPlayer, c_playerStateDisplayInLeaderPanel, false);
            PlayerSetState(lv_indexPlayer, c_playerStateDisplayInViewMenu, false);
        }

    }
    autoD3898CB1_g = PlayerGroupAll();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoD3898CB1_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((PlayerType(lv_indexPlayer) != c_playerTypeUser)) {
            PlayerSetState(lv_indexPlayer, c_playerStateShowScore, false);
        }

    }
    GameCheatAllow(c_gameCheatNoVictory, false);
    GameCheatAllow(c_gameCheatNoDefeat, false);
    auto4C85CA01_g = PlayerGroupAll();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto4C85CA01_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        PlayerSetState(lv_indexPlayer, c_playerStateContinueEnabled, false);
    }
    if ((libCamp_gv_tS_InStoryMode == false)) {
        auto05DE0937_g = PlayerGroupAll();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(auto05DE0937_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogRestartButton, true);
            UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogAbortButton, true);
        }
    }
    else {
        autoED5BF6AF_g = PlayerGroupAll();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(autoED5BF6AF_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogRestartButton, false);
            UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogAbortButton, false);
        }
    }
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_Camp_DE16BDF6"), false);
    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Camp_75436892") + libNtve_gf_ConvertBooleanToText(libCamp_gf_CampaignDebugModeIsOn("ProgressCheat"))), false);
    if ((libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTStory01) && (libCamp_gf_CampaignDebugModeIsOn("ProgressCheat") == true) && (libCamp_gf_NumberOfMissions(libCamp_ge_MissionCountOptions_Completed) == 0)) {
        libCamp_gf_TS_DebugProgressDisplayDialog(libCamp_ge_MapID_MapNone, libCamp_gt_TS_DebugProgressOKCallback, null);
        while (!((libCamp_gv_tS_DebugProgressDialogOpened == false))) {
            Wait(0.5, c_timeReal);
        }
    }

}

void libCamp_gf_PrepareForMission (int lp_nextMission, bool lp_nextIsSimulation, bool lp_nextIsVictoryPlayAgain, int lp_difficulty) {
    // Variable Declarations
    string lv_image;
    int lv_planet;
    text lv_title;
    text lv_subTitle;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_planet = libCamp_ge_PlanetID_PlanetNone;
    lv_title = StringToText("");
    lv_subTitle = StringToText("");

    // Implementation
    SetNextMissionDifficulty(PlayerGroupAll(), lp_difficulty);
    if ((lp_nextIsSimulation == false)) {
        libCamp_gf_TS_SetCampaignDifficulty(lp_difficulty);
    }

    libCamp_gf_TS_SaveAllTransitionData((lp_nextIsSimulation == true), lp_nextIsVictoryPlayAgain, false);
    GameSetNextMap(("Campaign/" + libCamp_gv_tS_MapFile[(lp_nextMission)]));
    libCamp_gf_TS_PrepareForMissionLoadingScreen(lp_nextMission, false);
}

void libCamp_gf_TS_PrepareForMissionLoadingScreen (int lp_nextMission, bool lp_restart) {
    // Variable Declarations
    string lv_image;
    int lv_planet;
    text lv_title;
    text lv_subTitle;
    text lv_help;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_planet = libCamp_ge_PlanetID_PlanetNone;
    lv_title = StringToText("");
    lv_subTitle = StringToText("");

    // Implementation
    lv_image = libCamp_gf_MissionLoadingScreenImage(lp_nextMission);
    lv_title = (StringExternal("Param/Value/lib_Camp_8096E0CA"));
    lv_subTitle = (StringExternal("Param/Value/lib_Camp_313A7E60") + libCamp_gf_MissionNameInUpperCase(lp_nextMission) + StringExternal("Param/Value/lib_Camp_C7EDB8C8"));
    lv_help = StringExternal("Param/Value/lib_Camp_161ED481");
    if ((libCamp_gf_MapTypeCheck(lp_nextMission, libCamp_ge_MapType_Mission) == true)) {
        if ((lp_nextMission == libCamp_ge_MapID_MapTValerian03) && (libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTValerian02B, libCamp_ge_MissionStatus_Completed) == true)) {
            if ((lp_restart == false)) {
                lv_help = ConversationDataStateText(libCamp_gf_TS_MapConvoID(lp_nextMission), "Loading Screen Help 2");
            }
            else {
                lv_help = ConversationDataStateText(libCamp_gf_TS_MapConvoID(lp_nextMission), "Loading Screen Restart 2");
            }
        }
        else {
            if ((lp_restart == false)) {
                lv_help = ConversationDataStateText(libCamp_gf_TS_MapConvoID(lp_nextMission), "Loading Screen Help");
            }
            else {
                lv_help = ConversationDataStateText(libCamp_gf_TS_MapConvoID(lp_nextMission), "Loading Screen Restart");
            }
        }
    }

    if ((lp_nextMission == libCamp_ge_MapID_MapTArcade)) {
        if ((lp_restart == true)) {
            UISetRestartLoadingScreen(StringExternal("Param/Value/lib_Camp_486A5433"));
        }

        UISetNextLoadingScreen("Assets\\Textures\\loading-lostviking.dds", StringToText(""), (StringExternal("Param/Value/lib_Camp_D1F4D6A7") + StringExternal("Param/Value/lib_Camp_3AB64EDD") + StringExternal("Param/Value/lib_Camp_8172429D")), StringToText(""), StringExternal("Param/Value/lib_Camp_5B28E86A"), true);
        UISetNextLoadingScreenImageScale(c_scaleAspect);
        UISetNextLoadingScreenTextPosition(c_anchorTop, 0, 250, 750, 400);
    }
    else {
        if ((lp_restart == true)) {
            UISetRestartLoadingScreen(lv_help);
        }
        else {
            UISetNextLoadingScreen(lv_image, lv_title, lv_subTitle, StringToText(""), lv_help, true);
            UISetNextLoadingScreenImageScale(c_scaleAspect);
            UISetNextLoadingScreenTextPosition(c_anchorTopLeft, 50, 250, 750, 400);
        }
    }
}

void libCamp_gf_PrepareForStoryMode (int lp_resultFromVictory, int lp_difficulty) {
    // Variable Declarations
    int lv_mapID;
    string lv_image;
    bool lv_isActuallyVictory;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Camp_6291DFB9") + libNtve_gf_ConvertBooleanToText((lp_resultFromVictory == c_gameOverVictory)) + StringExternal("Param/Value/lib_Camp_C1F1A5CC") + DifficultyNameCampaign(lp_difficulty)), false);
    lv_isActuallyVictory = ((lp_resultFromVictory == c_gameOverVictory) || libCamp_gv_tSX_IsVictoryPlayAgain);
    if ((libCamp_gv_tSX_IsSimulation == false) && (libCamp_gf_MapTypeCheck(libCamp_gf_TS_MapIDFromIndex(libCamp_gv_tS_CurrentMap), libCamp_ge_MapType_Mission) == true) && (lv_isActuallyVictory == true)) {
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Camp_22F0B82E")), false);
        if ((libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTValerian03)) {
            libCamp_gf_CP_SetCampaignCompleted(true);
        }

        libCamp_gf_TS_SetLastSuccessfulMission(libCamp_gf_TS_MapIDFromIndex(libCamp_gv_tS_CurrentMap));
        libCamp_gf_TS_CompleteMission(libCamp_gf_TS_MapIDFromIndex(libCamp_gv_tS_CurrentMap));
        libCamp_gf_TS_UpdateTransitionVars();
    }
    else {
        if ((libCamp_gv_tS_Horner05sSimulationBeforeCompleted == true) && (lv_isActuallyVictory == true)) {
            libCamp_gf_TS_CompleteMission(libCamp_gf_TS_MapIDFromIndex(libCamp_gv_tS_CurrentMap));
            libCamp_gf_TS_UpdateTransitionVars();
        }

    }
    SetNextMissionDifficulty(PlayerGroupSingle(1), lp_difficulty);
    if (((libCamp_gv_tSX_IsSimulation == true) || (libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTValerian03, libCamp_ge_MissionStatus_Completed) == true))) {
        lv_image = "HyperionLoadingScreenImage";
    }
    else {
        if ((lv_isActuallyVictory == true)) {
            lv_image = libCamp_gv_tS_MapBackLoadingImage[(libCamp_gv_tS_CurrentMap)];
        }
        else {
            lv_image = libCamp_gv_tS_MapBackDefeatLoadingImage[(libCamp_gv_tS_CurrentMap)];
            if ((lv_image == null)) {
                lv_image = libCamp_gv_tS_MapBackLoadingImage[(libCamp_gv_tS_CurrentMap)];
            }

        }
    }
    lv_image = libCamp_gf_TS_BackToStoryModeLoadingImage(lv_image);
    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Camp_85AB6480") + StringToText(lv_image)), false);
    UISetNextLoadingScreen(lv_image, StringToText(""), StringToText(""), StringToText(""), StringExternal("Param/Value/lib_Camp_CFB915EF"), false);
    UISetNextLoadingScreenImageScale(c_scaleAspect);
    UISetNextLoadingScreenTextPosition(c_anchorTopLeft, 40, 60, 1100, 400);
    libCamp_gf_TS_SaveAllTransitionData(false, false, (lp_resultFromVictory == c_gameOverDefeat));
    lv_mapID = libCamp_ge_MapID_MapTStory01;
    GameSetNextMap(("Campaign/" + libCamp_gv_tS_MapFile[lv_mapID]));
}

void libCamp_gf_PrepareForStoryModeTransitionalSave () {
    // Automatic Variable Declarations
    // Implementation
    libCamp_gf_TS_OpenCampaignBank();
    libCamp_gf_TS_SaveTransitionVars(BankLastCreated(), false, false, false, libCamp_ge_TS_BankSavingType_Normal);
    BankSave(BankLastCreated());
    libCamp_gf_TS_SaveMissionBanks();
}

void libCamp_gf_SetStoryModeRoomStates (string lp_roomStates) {
    // Automatic Variable Declarations
    // Implementation
    libCamp_gv_tSX_RoomStates = lp_roomStates;
}

void libCamp_gf_RegisterStoryModeRoomStatesDefaultCallback (trigger lp_defaultCallback) {
    // Automatic Variable Declarations
    // Implementation
    libCamp_gv_tS_RoomStatesDefaultCallback = lp_defaultCallback;
}

void libCamp_gf_TS_LoadAllTransitionData (int lp_map) {
    // Variable Declarations
    string lv_section;
    int lv_indexObjective;
    string lv_bankName;
    int lv_campaignDifficulty;

    // Automatic Variable Declarations
    int auto1792D481_i;

    // Variable Initialization
    lv_section = "Terran";
    lv_indexObjective = libCamp_ge_MissionObjective_MissionObjectiveNone;
    lv_bankName = "TRaynor01";
    lv_campaignDifficulty = 1;

    // Implementation
    if ((BankExists(libCamp_gv_tS_BankName, 1) == true)) {
        libCamp_gf_TS_OpenCampaignBank();
        libCamp_gf_TS_LoadTransitionVars(BankLastCreated(), false);
        libCamp_gf_TS_UpdateCampaignScreen(libCamp_gf_LastSuccessfulMission());
        if ((libCamp_gf_MapTypeCheck(lp_map, libCamp_ge_MapType_Mission) == true)) {
            if ((libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTHorner05S) && (libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTHorner05S, libCamp_ge_MissionStatus_Completed) == false) && (libCamp_gv_tSX_IsSimulation == true)) {
                libCamp_gv_tS_Horner05sSimulationBeforeCompleted = true;
            }

            auto1792D481_i = libCamp_gv_TSC_OBJECTIVE_FIRST;
            while (auto1792D481_i <= libCamp_gv_TSC_OBJECTIVE_LAST) {
                lv_indexObjective = libCamp_gv_tS_MissionObjIDs[auto1792D481_i];
                if ((libCamp_gf_MissionObjectiveStateCheck(lv_indexObjective, libCamp_ge_MissionObjectiveState_ObjectiveAvailable) == true)) {
                    libCamp_gv_tS_NonSnapShotObjectiveStates[(lv_indexObjective)] = libCamp_ge_MissionObjectiveState_ObjectiveAvailable;
                }
                else if ((libCamp_gf_MissionObjectiveStateCheck(lv_indexObjective, libCamp_ge_MissionObjectiveState_ObjectiveCompleted) == true)) {
                    libCamp_gv_tS_NonSnapShotObjectiveStates[(lv_indexObjective)] = libCamp_ge_MissionObjectiveState_ObjectiveCompleted;
                }
                else if ((libCamp_gf_MissionObjectiveStateCheck(lv_indexObjective, libCamp_ge_MissionObjectiveState_ObjectiveUndiscovered) == true)) {
                    libCamp_gv_tS_NonSnapShotObjectiveStates[(lv_indexObjective)] = libCamp_ge_MissionObjectiveState_ObjectiveUndiscovered;
                }
                libCamp_gv_tS_NonSnapShotObjectiveProgress[(lv_indexObjective)] = libCamp_gf_MissionObjectiveProgress(lv_indexObjective);
                auto1792D481_i = auto1792D481_i + 1;
            }
            libCamp_gv_tS_NonSnapShotMissionDifficultyCompleted = libCamp_gf_MissionDifficultyCompleted(lp_map, PlayerDifficulty(1));
            libCamp_gv_tS_NonSnapShotMissionBestTime = libCamp_gf_MissionCompleteBestTime(lp_map, PlayerDifficulty(1));
            libCamp_gv_tS_NonSnapShotMissionResearchProgress[(libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss)] = libCamp_gf_StoryResearchMissionProgress(lp_map, libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss);
            libCamp_gv_tS_NonSnapShotMissionResearchProgress[(libCamp_ge_StoryResearchCategory_ResearchCategoryZerg)] = libCamp_gf_StoryResearchMissionProgress(lp_map, libCamp_ge_StoryResearchCategory_ResearchCategoryZerg);
        }

        lv_campaignDifficulty = libCamp_gf_TS_CampaignDifficulty();
        libCamp_gf_TS_OpenMissionBanks();
        libCamp_gf_TS_SetCampaignDifficulty(lv_campaignDifficulty);
    }
    else {
        libCamp_gf_TS_DefaultTransitionVars(true, true, true, true);
        libCamp_gf_TS_SetCampaignDifficulty(PlayerDifficulty(1));
    }
}

void libCamp_gf_TS_SaveAllTransitionData (bool lp_nextIsSimulation, bool lp_nextIsVictoryPlayAgain, bool lp_resultFromDefeat) {
    // Variable Declarations
    string lv_section;
    int lv_saveAll;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_section = "Terran";
    lv_saveAll = libCamp_ge_TS_BankSavingType_Normal;

    // Implementation
    libCamp_gf_TS_OpenCampaignBank();
    libCamp_gv_tSX_LastMap = libCamp_gv_tS_CurrentMap;
    if ((libCamp_gv_tSX_IsVictoryPlayAgain == true)) {
        libCamp_gv_tSX_LastMapSuccess = true;
    }
    else {
        libCamp_gv_tSX_LastMapSuccess = (lp_resultFromDefeat == false);
    }
    if ((libCamp_gf_MapTypeCheck(libCamp_gf_TS_MapIDFromIndex(libCamp_gv_tSX_LastMap), libCamp_ge_MapType_Mission) == true)) {
        libCamp_gv_tSX_LastMission = libCamp_gv_tSX_LastMap;
        libCamp_gv_tSX_LastMissionSuccess = libCamp_gv_tSX_LastMapSuccess;
        libCamp_gv_tSX_LastMissionSimulation = libCamp_gv_tSX_IsSimulation;
    }

    if ((libCamp_gf_MapTypeCheck(libCamp_gv_tS_CurrentMap, libCamp_ge_MapType_Mission) == true) && (((libCamp_gv_tSX_IsSimulation == true) && (libCamp_gv_tS_Horner05sSimulationBeforeCompleted == false)) || (libCamp_gv_tSX_IsVictoryPlayAgain == true))) {
        lv_saveAll = libCamp_ge_TS_BankSavingType_SaveSimulation;
    }
    else {
        lv_saveAll = libCamp_ge_TS_BankSavingType_Normal;
    }
    libCamp_gf_TS_SaveTransitionVars(BankLastCreated(), lp_nextIsSimulation, lp_nextIsVictoryPlayAgain, lp_resultFromDefeat, lv_saveAll);
    BankSave(BankLastCreated());
    libCamp_gf_TS_SaveMissionBanks();
}

void libCamp_gf_TS_DefaultTransitionVars (bool lp_includeTransitionDetails, bool lp_includeTech, bool lp_includeMissionFlow, bool lp_includeStates) {
    // Variable Declarations
    int lv_index;
    int lv_indexMission;
    int lv_convoIndex;
    int lv_indexObjective;
    int lv_indexStoryState;
    int lv_iindexScene;

    // Automatic Variable Declarations
    int auto3013C6B6_i;
    int autoD8C543D5_i;
    int auto5C6F3E82_i;
    int auto1D6D0375_ae;
    const int auto1D6D0375_ai = 1;

    // Variable Initialization
    lv_indexMission = libCamp_ge_MapID_MapNone;
    lv_indexObjective = libCamp_ge_MissionObjective_MissionObjectiveNone;
    lv_indexStoryState = libCamp_ge_StoryStateID_StoryStateNone;
    lv_iindexScene = libCamp_ge_SceneID_SceneNone;

    // Implementation
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_Camp_03BCF8D4"), false);
    if ((lp_includeTransitionDetails == true)) {
        libCamp_gv_tSX_IsSimulation = false;
        libCamp_gv_tSX_IsVictoryPlayAgain = false;
        libCamp_gv_tSX_LastMap = libCamp_ge_MapID_MapNone;
        libCamp_gv_tSX_LastMapSuccess = true;
        libCamp_gv_tSX_LastMission = libCamp_ge_MapID_MapNone;
        libCamp_gv_tSX_LastMissionSuccess = true;
        libCamp_gv_tSX_LastMissionSimulation = false;
        libCamp_gf_TS_SetLastSuccessfulMission(libCamp_ge_MapID_MapNone);
    }

    if ((lp_includeMissionFlow == true)) {
        auto3013C6B6_i = libCamp_gv_TSC_MISSION_FIRST;
        while (auto3013C6B6_i <= libCamp_gv_TSC_MISSION_LAST) {
            lv_indexMission = libCamp_gv_tS_MapID[auto3013C6B6_i];
            libCamp_gf_TS_MarkMissionAsStatus(lv_indexMission, libCamp_ge_MissionStatus_Locked);
            libCamp_gf_TS_SetMissionDifficultyCompleted(lv_indexMission, 1, false);
            libCamp_gf_TS_SetMissionDifficultyCompleted(lv_indexMission, 2, false);
            libCamp_gf_TS_SetMissionDifficultyCompleted(lv_indexMission, 3, false);
            libCamp_gf_TS_SetMissionDifficultyCompleted(lv_indexMission, 4, false);
            libCamp_gf_TS_SetMissionCompleteBestTime(lv_indexMission, 1, 0);
            libCamp_gf_TS_SetMissionCompleteBestTime(lv_indexMission, 2, 0);
            libCamp_gf_TS_SetMissionCompleteBestTime(lv_indexMission, 3, 0);
            libCamp_gf_TS_SetMissionCompleteBestTime(lv_indexMission, 4, 0);
            auto3013C6B6_i = auto3013C6B6_i + 1;
        }
        libCamp_gf_TS_MarkMissionAsStatus(libCamp_ge_MapID_MapTRaynor01, libCamp_ge_MissionStatus_Available);
    }

    if ((lp_includeTech == true)) {
        libCamp_gf_TS_ResetTechData();
    }

    if ((lp_includeStates == true)) {
        libCamp_gf_SetStoryCredits(0);
        libCamp_gf_TS_ResetResearchData();
        libCamp_gf_TS_ResetMercData();
        autoD8C543D5_i = libCamp_gv_TSC_STORYSTATE_FIRST;
        while (autoD8C543D5_i <= libCamp_gv_TSC_STORYSTATE_LAST) {
            lv_indexStoryState = autoD8C543D5_i;
            libCamp_gf_SetStoryState(lv_indexStoryState, 0);
            autoD8C543D5_i = autoD8C543D5_i + 1;
        }
        libCamp_gv_tSX_MissionObjRewardsEarnedCurrent = 0;
        ConversationDataResetStateValues("MissionObjective");
        auto5C6F3E82_i = libCamp_gv_TSC_SCENE_FIRST;
        while (auto5C6F3E82_i <= libCamp_gv_TSC_SCENE_LAST) {
            lv_iindexScene = libCamp_gv_tS_SceneIDs[auto5C6F3E82_i];
            libCamp_gf_SetScenePlayed(lv_iindexScene, false);
            auto5C6F3E82_i = auto5C6F3E82_i + 1;
        }
        libCamp_gv_tSX_DebugTechCheatOption = libCamp_ge_TS_DebugTechCheatOption_Average;
        if ((libCamp_gv_tS_RoomStatesDefaultCallback != null)) {
            TriggerExecute(libCamp_gv_tS_RoomStatesDefaultCallback, true, false);
        }
        else {
            libCamp_gv_tSX_RoomStates = "";
        }
        libCamp_gv_tSX_LoadingImageCurrentMarSara = 0;
        libCamp_gv_tSX_LoadingImageCurrentHyperion = 0;
        libCamp_gv_tSX_LoadingImageCurrentLab = 0;
        libCamp_gv_tSX_LoadingImageCurrentCantina = 0;
        libCamp_gv_tSX_LoadingImageCurrentArmory = 0;
        libCamp_gv_tSX_LoadingImageCurrentChar = 0;
        libCamp_gf_TS_HelpUnitsPanel_ResetEnabledUnitTypes();
        libCamp_gf_TS_Tutorial_ResetHistory();
        auto1D6D0375_ae = libCamp_gv_tS_ConvoCount;
        lv_index = 1;
        for ( ; ( (auto1D6D0375_ai >= 0 && lv_index <= auto1D6D0375_ae) || (auto1D6D0375_ai < 0 && lv_index >= auto1D6D0375_ae) ) ; lv_index += auto1D6D0375_ai ) {
            ConversationDataResetNodeState(libCamp_gv_tS_Convos[lv_index]);
        }
        ConversationDataResetStateValues("ABChoice");
        ConversationDataResetStateValues("ABChoiceRewards");
        ConversationDataResetStateValues("ArcadeGameVariables");
        ConversationDataResetStateValues("CharacterLocationStatus");
        ConversationDataResetStateValues("Characters");
        ConversationDataResetStateValues("Credits");
        ConversationDataResetStateValues("DebriefRoomChange");
        ConversationDataResetStateValues("Hotspots");
        ConversationDataResetStateValues("LabResearch");
        ConversationDataResetStateValues("LabResearchCompleted");
        ConversationDataResetStateValues("LabResearchObject");
        ConversationDataResetStateValues("LabResearchUnlocked");
        ConversationDataResetStateValues("MissionCompletedCount");
        ConversationDataResetStateValues("MissionObjective");
        ConversationDataResetStateValues("NewMissionOpened");
        ConversationDataResetStateValues("StoryNews");
        ConversationDataResetStateValues("StoryState");
        ConversationDataResetStateValues("StoryTips");
        ConversationDataResetStateValues("Tech");
        ConversationDataResetStateValues("TechState");
        ConversationDataResetStateValues("Timestamps");
        ConversationDataResetStateValues("WritingCustomStates");
        ConversationDataResetStateValues("ArcadeGameVariables");
    }

}

int libCamp_gf_TS_LoadTransitionVarInteger (bank lp_bank, string lp_section, string lp_key, int lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if ((BankKeyExists(lp_bank, lp_section, lp_key) == false)) {
        return lp_default;
    }
    else {
        return BankValueGetAsInt(lp_bank, lp_section, lp_key);
    }
}

bool libCamp_gf_TS_LoadTransitionVarBoolean (bank lp_bank, string lp_section, string lp_key, bool lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if ((BankKeyExists(lp_bank, lp_section, lp_key) == false)) {
        return lp_default;
    }
    else {
        return BankValueGetAsFlag(lp_bank, lp_section, lp_key);
    }
}

string libCamp_gf_TS_LoadTransitionVarString (bank lp_bank, string lp_section, string lp_key, string lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if ((BankKeyExists(lp_bank, lp_section, lp_key) == false)) {
        return lp_default;
    }
    else {
        return BankValueGetAsString(lp_bank, lp_section, lp_key);
    }
}

void libCamp_gf_TS_SaveTransitionVarInteger (bank lp_bank, string lp_section, string lp_key, int lp_value, int lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_value == lp_default)) {
        BankKeyRemove(lp_bank, lp_section, lp_key);
    }
    else {
        BankValueSetFromInt(lp_bank, lp_section, lp_key, lp_value);
    }
}

void libCamp_gf_TS_SaveTransitionVarBoolean (bank lp_bank, string lp_section, string lp_key, bool lp_value, bool lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_value == lp_default)) {
        BankKeyRemove(lp_bank, lp_section, lp_key);
    }
    else {
        BankValueSetFromFlag(lp_bank, lp_section, lp_key, lp_value);
    }
}

void libCamp_gf_TS_SaveTransitionVarString (bank lp_bank, string lp_section, string lp_key, string lp_value, string lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_value == lp_default)) {
        BankKeyRemove(lp_bank, lp_section, lp_key);
        return ;
    }

    BankValueSetFromString(lp_bank, lp_section, lp_key, lp_value);
}

string libCamp_gf_TS_CampaignDifficultyBankKey (int lp_mission, int lp_difficulty) {
    // Variable Declarations
    string lv_key;

    // Automatic Variable Declarations
    int auto3D36807C_val;

    // Variable Initialization
    lv_key = "";

    // Implementation
    auto3D36807C_val = lp_difficulty;
    if (auto3D36807C_val == 1) {
        lv_key = "Casual";
    }
    else if (auto3D36807C_val == 2) {
        lv_key = "Normal";
    }
    else if (auto3D36807C_val == 3) {
        lv_key = "Hard";
    }
    else if (auto3D36807C_val == 4) {
        lv_key = "Brutal";
    }
    else {
    }
    return (IntToString((lp_mission)) + "-" + lv_key);
}

void libCamp_gf_TS_LoadTransitionVars (bank lp_sourceBank, bool lp_simulation) {
    // Variable Declarations
    string lv__SectionName;
    int lv_index;
    int lv_indexMission;
    int lv_indexObjective;
    int lv_indexResearch;
    int lv_indexMerc;
    int lv_tempTechStatus;
    int lv_indexStoryState;
    int lv_indexScene;
    int lv_normalDifficulty;
    int lv_count;
    text lv_title;
    text lv_description;
    string lv_icon;
    string lv_movie;

    // Automatic Variable Declarations
    int auto27BB3ED0_i;
    int auto890900C1_i;
    int auto45CDDF23_i;
    int auto23FD73C6_i;
    int auto009D82FC_i;
    int auto4AAF2001_i;
    int auto9E8E8BCC_i;
    int auto0841871E_i;
    int autoD29E95DB_ae;
    const int autoD29E95DB_ai = 1;
    int auto7B79738F_val;
    int auto62551DF2_ae;
    const int auto62551DF2_ai = 1;
    int auto4D414022_ae;
    const int auto4D414022_ai = 1;
    int auto90FBB9B2_i;
    int autoCF80CEC2_ae;
    const int autoCF80CEC2_ai = 1;

    // Variable Initialization
    lv__SectionName = "";
    lv_indexMission = libCamp_ge_MapID_MapNone;
    lv_indexObjective = libCamp_ge_MissionObjective_MissionObjectiveNone;
    lv_indexResearch = libCamp_ge_StoryResearchID_ResearchNone;
    lv_indexMerc = libCamp_ge_MapID_MapNone;
    lv_indexStoryState = libCamp_ge_StoryStateID_StoryStateNone;
    lv_indexScene = libCamp_ge_SceneID_SceneNone;
    lv_normalDifficulty = 2;
    lv_title = StringToText("");
    lv_description = StringToText("");

    // Implementation
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_Camp_8CA54644"), false);
    if ((lp_simulation == false)) {
        lv__SectionName = libCamp_gf_TS_BankSectionName("StoryStage");
        libCamp_gv_tSX_IsSimulation = libCamp_gf_TS_LoadTransitionVarBoolean(lp_sourceBank, lv__SectionName, IntToString((libCamp_ge_TS_BankStoryStageKey_TStoryBankStoryStageKeyIsSimulation)), false);
        libCamp_gv_tSX_IsVictoryPlayAgain = libCamp_gf_TS_LoadTransitionVarBoolean(lp_sourceBank, lv__SectionName, IntToString((libCamp_ge_TS_BankStoryStageKey_TStoryBankStoryStageKeyIsVictoryPlayAgain)), false);
        libCamp_gv_tSX_LastMap = libCamp_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString((libCamp_ge_TS_BankStoryStageKey_TStoryBankStoryStageKeyLastMap)), 0);
        libCamp_gv_tSX_LastMapSuccess = libCamp_gf_TS_LoadTransitionVarBoolean(lp_sourceBank, lv__SectionName, IntToString((libCamp_ge_TS_BankStoryStageKey_TStoryBankStoryStageKeyLastMapSuccess)), false);
        libCamp_gv_tSX_LastMission = libCamp_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString((libCamp_ge_TS_BankStoryStageKey_TStoryBankStoryStageKeyLastMission)), 0);
        libCamp_gv_tSX_LastMissionSuccess = libCamp_gf_TS_LoadTransitionVarBoolean(lp_sourceBank, lv__SectionName, IntToString((libCamp_ge_TS_BankStoryStageKey_TStoryBankStoryStageKeyLastMissionSuccess)), false);
        libCamp_gv_tSX_LastMissionSimulation = libCamp_gf_TS_LoadTransitionVarBoolean(lp_sourceBank, lv__SectionName, IntToString((libCamp_ge_TS_BankStoryStageKey_TStoryBankStoryStageKeyLastMissionSimulation)), false);
        libCamp_gf_TS_SetLastSuccessfulMission(libCamp_gf_TS_MapIDFromIndex(libCamp_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString((libCamp_ge_TS_BankStoryStageKey_TStoryBankStoryStageKeyLastSuccessfulMission)), 0)));
        libCamp_gf_SetStoryCredits(libCamp_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString((libCamp_ge_TS_BankStoryStageKey_TStoryBankStoryStageKeyCredits)), 0));
    }

    lv__SectionName = libCamp_gf_TS_BankSectionName("MissionAvailableAge");
    auto27BB3ED0_i = libCamp_gv_TSC_MISSION_FIRST;
    while (auto27BB3ED0_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[auto27BB3ED0_i];
        libCamp_gf_TS_SetMissionStatusAge(lv_indexMission, libCamp_ge_MissionStatus_Available, libCamp_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString((lv_indexMission)), 0));
        auto27BB3ED0_i = auto27BB3ED0_i + 1;
    }
    lv__SectionName = libCamp_gf_TS_BankSectionName("MissionCompletedAge");
    auto890900C1_i = libCamp_gv_TSC_MISSION_FIRST;
    while (auto890900C1_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[auto890900C1_i];
        libCamp_gf_TS_SetMissionStatusAge(lv_indexMission, libCamp_ge_MissionStatus_Completed, libCamp_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString((lv_indexMission)), 0));
        auto890900C1_i = auto890900C1_i + 1;
    }
    lv__SectionName = libCamp_gf_TS_BankSectionName("MissionCompletion");
    auto45CDDF23_i = libCamp_gv_TSC_MISSION_FIRST;
    while (auto45CDDF23_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[auto45CDDF23_i];
        libCamp_gf_TS_SetMissionDifficultyCompleted(lv_indexMission, 1, libCamp_gf_TS_LoadTransitionVarBoolean(lp_sourceBank, lv__SectionName, libCamp_gf_TS_CampaignDifficultyBankKey(lv_indexMission, 1), false));
        libCamp_gf_TS_SetMissionDifficultyCompleted(lv_indexMission, 2, libCamp_gf_TS_LoadTransitionVarBoolean(lp_sourceBank, lv__SectionName, libCamp_gf_TS_CampaignDifficultyBankKey(lv_indexMission, 2), false));
        libCamp_gf_TS_SetMissionDifficultyCompleted(lv_indexMission, 3, libCamp_gf_TS_LoadTransitionVarBoolean(lp_sourceBank, lv__SectionName, libCamp_gf_TS_CampaignDifficultyBankKey(lv_indexMission, 3), false));
        libCamp_gf_TS_SetMissionDifficultyCompleted(lv_indexMission, 4, libCamp_gf_TS_LoadTransitionVarBoolean(lp_sourceBank, lv__SectionName, libCamp_gf_TS_CampaignDifficultyBankKey(lv_indexMission, 4), false));
        auto45CDDF23_i = auto45CDDF23_i + 1;
    }
    lv__SectionName = libCamp_gf_TS_BankSectionName("MissionBestTime");
    auto23FD73C6_i = libCamp_gv_TSC_MISSION_FIRST;
    while (auto23FD73C6_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[auto23FD73C6_i];
        libCamp_gf_TS_SetMissionCompleteBestTime(lv_indexMission, 1, libCamp_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, libCamp_gf_TS_CampaignDifficultyBankKey(lv_indexMission, 1), 0));
        libCamp_gf_TS_SetMissionCompleteBestTime(lv_indexMission, 2, libCamp_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, libCamp_gf_TS_CampaignDifficultyBankKey(lv_indexMission, 2), 0));
        libCamp_gf_TS_SetMissionCompleteBestTime(lv_indexMission, 3, libCamp_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, libCamp_gf_TS_CampaignDifficultyBankKey(lv_indexMission, 3), 0));
        libCamp_gf_TS_SetMissionCompleteBestTime(lv_indexMission, 4, libCamp_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, libCamp_gf_TS_CampaignDifficultyBankKey(lv_indexMission, 4), 0));
        auto23FD73C6_i = auto23FD73C6_i + 1;
    }
    lv__SectionName = libCamp_gf_TS_BankSectionName("ObjectiveProgress");
    ConversationDataLoadStateValues("MissionObjective", lp_sourceBank, lv__SectionName);
    if ((libCamp_gf_MapTypeCheck(libCamp_gv_tS_CurrentMap, libCamp_ge_MapType_StoryMode) == true)) {
        lv__SectionName = libCamp_gf_TS_BankSectionName("ObjectiveCreditsEarnedLastMission");
        libCamp_gv_tSX_MissionObjRewardsEarnedCurrent = libCamp_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString(0), 0);
    }
    else {
        libCamp_gv_tSX_MissionObjRewardsEarnedCurrent = 0;
    }
    lv__SectionName = libCamp_gf_TS_BankSectionName("LabResearchProgressProtoss");
    libCamp_gv_tSX_DebugResearchLevel[(libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss)] = libCamp_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString(0), 0);
    auto009D82FC_i = libCamp_gv_TSC_MISSION_FIRST;
    while (auto009D82FC_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[auto009D82FC_i];
        libCamp_gv_tSX_ResearchMissionProgress[(lv_indexMission)][(libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss)] = libCamp_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString((lv_indexMission)), 0);
        auto009D82FC_i = auto009D82FC_i + 1;
    }
    lv__SectionName = libCamp_gf_TS_BankSectionName("LabResearchProgressZerg");
    libCamp_gv_tSX_DebugResearchLevel[(libCamp_ge_StoryResearchCategory_ResearchCategoryZerg)] = libCamp_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString(0), 0);
    auto4AAF2001_i = libCamp_gv_TSC_MISSION_FIRST;
    while (auto4AAF2001_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[auto4AAF2001_i];
        libCamp_gv_tSX_ResearchMissionProgress[(lv_indexMission)][(libCamp_ge_StoryResearchCategory_ResearchCategoryZerg)] = libCamp_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString((lv_indexMission)), 0);
        auto4AAF2001_i = auto4AAF2001_i + 1;
    }
    lv__SectionName = libCamp_gf_TS_BankSectionName("LabResearchOldLevel");
    libCamp_gv_tSX_ResearchPointsOld[(libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss)] = libCamp_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString((libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss)), 0);
    libCamp_gv_tSX_ResearchPointsOld[(libCamp_ge_StoryResearchCategory_ResearchCategoryZerg)] = libCamp_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString((libCamp_ge_StoryResearchCategory_ResearchCategoryZerg)), 0);
    lv__SectionName = libCamp_gf_TS_BankSectionName("LabResearchOldLevelUI");
    libCamp_gv_tSX_ResearchUIOldPoints[(libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss)] = libCamp_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString((libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss)), 0);
    libCamp_gv_tSX_ResearchUIOldPoints[(libCamp_ge_StoryResearchCategory_ResearchCategoryZerg)] = libCamp_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString((libCamp_ge_StoryResearchCategory_ResearchCategoryZerg)), 0);
    lv__SectionName = libCamp_gf_TS_BankSectionName("LabResearchState");
    auto9E8E8BCC_i = libCamp_gv_TSC_RESEARCH_FIRST;
    while (auto9E8E8BCC_i <= libCamp_gv_TSC_RESEARCH_LAST) {
        lv_indexResearch = libCamp_gv_tS_ResearchID[auto9E8E8BCC_i];
        libCamp_gv_tSX_ResearchState[(lv_indexResearch)] = libCamp_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString((lv_indexResearch)), (libCamp_ge_StoryResearchState_ResearchStateAvailable));
        auto9E8E8BCC_i = auto9E8E8BCC_i + 1;
    }
    lv__SectionName = libCamp_gf_TS_BankSectionName("LabResearchPointsConverted");
    libCamp_gv_tSX_ResearchPointsConverted[(libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss)] = libCamp_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString((libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss)), 0);
    libCamp_gv_tSX_ResearchPointsConverted[(libCamp_ge_StoryResearchCategory_ResearchCategoryZerg)] = libCamp_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString((libCamp_ge_StoryResearchCategory_ResearchCategoryZerg)), 0);
    lv__SectionName = libCamp_gf_TS_BankSectionName("MercStatus");
    auto0841871E_i = libCamp_gv_TSC_MERC_FIRST;
    while (auto0841871E_i <= libCamp_gv_TSC_MERC_LAST) {
        lv_indexMerc = libCamp_gv_tS_MercID[auto0841871E_i];
        libCamp_gv_tSX_MercStatus[(lv_indexMerc)] = libCamp_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString((lv_indexMerc)), 0);
        auto0841871E_i = auto0841871E_i + 1;
    }
    lv__SectionName = libCamp_gf_TS_BankSectionName("TechStatus");
    autoD29E95DB_ae = libCamp_gv_TSC_TECH_LAST;
    lv_index = libCamp_gv_TSC_TECH_FIRST;
    for ( ; ( (autoD29E95DB_ai >= 0 && lv_index <= autoD29E95DB_ae) || (autoD29E95DB_ai < 0 && lv_index >= autoD29E95DB_ae) ) ; lv_index += autoD29E95DB_ai ) {
        lv_tempTechStatus = libCamp_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString(lv_index), (libCamp_ge_StoryTechStates_TechUnavailable));
        auto7B79738F_val = lv_tempTechStatus;
        if (auto7B79738F_val == (libCamp_ge_StoryTechStates_TechLocked)) {
            libCamp_gv_tSX_Tech_Status[lv_index] = libCamp_ge_StoryTechStates_TechLocked;
        }
        else if (auto7B79738F_val == (libCamp_ge_StoryTechStates_TechNew)) {
            libCamp_gv_tSX_Tech_Status[lv_index] = libCamp_ge_StoryTechStates_TechNew;
        }
        else if (auto7B79738F_val == (libCamp_ge_StoryTechStates_TechAvailable)) {
            libCamp_gv_tSX_Tech_Status[lv_index] = libCamp_ge_StoryTechStates_TechAvailable;
        }
        else if (auto7B79738F_val == (libCamp_ge_StoryTechStates_TechPurchased)) {
            libCamp_gv_tSX_Tech_Status[lv_index] = libCamp_ge_StoryTechStates_TechPurchased;
        }
        else if (auto7B79738F_val == (libCamp_ge_StoryTechStates_TechUnavailable)) {
            libCamp_gv_tSX_Tech_Status[lv_index] = libCamp_ge_StoryTechStates_TechUnavailable;
        }
        else {
        }
    }
    lv__SectionName = libCamp_gf_TS_BankSectionName("HelpUnitsPanel");
    lv_count = libCamp_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString(0), 0);
    auto62551DF2_ae = lv_count;
    lv_index = 1;
    for ( ; ( (auto62551DF2_ai >= 0 && lv_index <= auto62551DF2_ae) || (auto62551DF2_ai < 0 && lv_index >= auto62551DF2_ae) ) ; lv_index += auto62551DF2_ai ) {
        if ((BankKeyExists(lp_sourceBank, lv__SectionName, IntToString(lv_index)) == true)) {
            libCamp_gf_TS_HelpUnitsPanel_AddEnabledUnitType(UnitTypeFromString(libCamp_gf_TS_LoadTransitionVarString(lp_sourceBank, lv__SectionName, IntToString(lv_index), "")));
        }

    }
    lv__SectionName = libCamp_gf_TS_BankSectionName("TutorialHistory");
    lv_count = BankValueGetAsInt(lp_sourceBank, lv__SectionName, IntToString(0));
    auto4D414022_ae = lv_count;
    lv_index = 1;
    for ( ; ( (auto4D414022_ai >= 0 && lv_index <= auto4D414022_ae) || (auto4D414022_ai < 0 && lv_index >= auto4D414022_ae) ) ; lv_index += auto4D414022_ai ) {
        lv_title = BankValueGetAsText(lp_sourceBank, lv__SectionName, (IntToString(lv_index) + "_1"));
        lv_description = BankValueGetAsText(lp_sourceBank, lv__SectionName, (IntToString(lv_index) + "_2"));
        lv_icon = libCamp_gf_TS_Tutorial_ConvertStringToImage(BankValueGetAsString(lp_sourceBank, lv__SectionName, (IntToString(lv_index) + "_3")));
        lv_movie = libCamp_gf_TS_Tutorial_ConvertStringToMovie(BankValueGetAsString(lp_sourceBank, lv__SectionName, (IntToString(lv_index) + "_4")));
        libCamp_gf_TS_Tutorial_AddToHistory(lv_title, lv_description, lv_icon, lv_movie);
    }
    lv__SectionName = libCamp_gf_TS_BankSectionName("StoryState");
    ConversationDataLoadStateValues("StoryState", lp_sourceBank, lv__SectionName);
    lv__SectionName = libCamp_gf_TS_BankSectionName("ScenePlayed");
    auto90FBB9B2_i = libCamp_gv_TSC_SCENE_FIRST;
    while (auto90FBB9B2_i <= libCamp_gv_TSC_SCENE_LAST) {
        lv_indexScene = libCamp_gv_tS_SceneIDs[auto90FBB9B2_i];
        libCamp_gf_SetScenePlayed(lv_indexScene, libCamp_gf_TS_LoadTransitionVarBoolean(lp_sourceBank, lv__SectionName, IntToString((lv_indexScene)), false));
        auto90FBB9B2_i = auto90FBB9B2_i + 1;
    }
    lv__SectionName = libCamp_gf_TS_BankSectionName("SceneExtraObjects");
    ConversationDataLoadStateValues("SceneExtraObjects", lp_sourceBank, lv__SectionName);
    lv__SectionName = libCamp_gf_TS_BankSectionName("NewsPlayed");
    ConversationDataLoadStateValues("StoryNews", lp_sourceBank, lv__SectionName);
    libCamp_gf_TS_UpdateNewMissionOpened();
    lv__SectionName = libCamp_gf_TS_BankSectionName("Tips");
    ConversationDataLoadStateValues("StoryTips", lp_sourceBank, lv__SectionName);
    lv__SectionName = libCamp_gf_TS_BankSectionName("StoryMisc");
    libCamp_gv_tSX_CampaignDifficulty = libCamp_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString((libCamp_ge_TS_BankStoryMiscKey_TStoryBankMiscKeyCampaignDifficulty)), 0);
    libCamp_gv_tSX_RoomStates = libCamp_gf_TS_LoadTransitionVarString(lp_sourceBank, lv__SectionName, IntToString((libCamp_ge_TS_BankStoryMiscKey_TStoryBankMiscKeyRoomStates)), "");
    libCamp_gv_tSX_LoadingImageCurrentMarSara = libCamp_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString((libCamp_ge_TS_BankStoryMiscKey_TStoryBankMiscKeyLoadingImageMarSara)), 0);
    libCamp_gv_tSX_LoadingImageCurrentHyperion = libCamp_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString((libCamp_ge_TS_BankStoryMiscKey_TStoryBankMiscKeyLoadingImageHyperion)), 0);
    libCamp_gv_tSX_LoadingImageCurrentLab = libCamp_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString((libCamp_ge_TS_BankStoryMiscKey_TStoryBankMiscKeyLoadingImageLab)), 0);
    libCamp_gv_tSX_LoadingImageCurrentCantina = libCamp_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString((libCamp_ge_TS_BankStoryMiscKey_TStoryBankMiscKeyLoadingImageCantina)), 0);
    libCamp_gv_tSX_LoadingImageCurrentArmory = libCamp_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString((libCamp_ge_TS_BankStoryMiscKey_TStoryBankMiscKeyLoadingImageArmory)), 0);
    libCamp_gv_tSX_LoadingImageCurrentChar = libCamp_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString((libCamp_ge_TS_BankStoryMiscKey_TStoryBankMiscKeyLoadingImageChar)), 0);
    lv__SectionName = libCamp_gf_TS_BankSectionName("Conversation");
    autoCF80CEC2_ae = libCamp_gv_tS_ConvoCount;
    lv_index = 1;
    for ( ; ( (autoCF80CEC2_ai >= 0 && lv_index <= autoCF80CEC2_ae) || (autoCF80CEC2_ai < 0 && lv_index >= autoCF80CEC2_ae) ) ; lv_index += autoCF80CEC2_ai ) {
        ConversationDataLoadNodeState(libCamp_gv_tS_Convos[lv_index], lp_sourceBank, lv__SectionName);
    }
    lv__SectionName = libCamp_gf_TS_BankSectionName("Hotspots");
    ConversationDataLoadStateValues("Hotspots", lp_sourceBank, lv__SectionName);
    lv__SectionName = libCamp_gf_TS_BankSectionName("ArcadeGame");
    ConversationDataLoadStateValues("ArcadeGameVariables", lp_sourceBank, lv__SectionName);
    lv__SectionName = libCamp_gf_TS_BankSectionName("DebugTechCheatOption");
    libCamp_gv_tSX_DebugTechCheatOption = libCamp_gf_TS_DebugConvertIntegerToTechCheatOption(libCamp_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, "0", 0));
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_Camp_B621076E"), false);
}

void libCamp_gf_TS_SaveTransitionVars (bank lp_targetBank, bool lp_nextIsSimulation, bool lp_nextIsVictoryPlayAgain, bool lp_resultFromDefeat, int lp_saveType) {
    // Variable Declarations
    string lv__SectionName;
    int lv_index;
    int lv_indexMission;
    int lv_indexObjective;
    int lv_indexResearch;
    int lv_indexMerc;
    int lv_indexStoryState;
    int lv_indexScene;
    int lv_difficulty;
    int lv_availableAge;
    int lv_completedAge;
    int[101] lv_tempObjectiveProgress;

    // Automatic Variable Declarations
    int autoD7277012_i;
    int auto4289BA5C_i;
    int auto0A924734_i;
    int auto019E8C30_i;
    int autoDF62E1FA_i;
    int auto8712728A_i;
    int auto9F534327_i;
    int autoDD9A22CB_ae;
    const int autoDD9A22CB_ai = 1;
    int auto5DF93212_i;
    int autoE680B800_i;
    int auto8BE28940_i;
    int auto07860F11_i;
    int auto6E2B5874_i;
    int auto96825A1C_i;
    int autoD8094CA3_i;
    int auto59B72122_i;
    int auto194C13E9_ae;
    const int auto194C13E9_ai = 1;
    int autoD1B9C075_ae;
    const int autoD1B9C075_ai = 1;
    int auto2473C567_ae;
    const int auto2473C567_ai = 1;
    int auto8105B7AA_i;
    int autoDB4CFAF2_ae;
    const int autoDB4CFAF2_ai = 1;

    // Variable Initialization
    lv__SectionName = "";
    lv_indexMission = libCamp_ge_MapID_MapNone;
    lv_indexObjective = libCamp_ge_MissionObjective_MissionObjectiveNone;
    lv_indexResearch = libCamp_ge_StoryResearchID_ResearchNone;
    lv_indexMerc = libCamp_ge_StoryMercID_MercNone;
    lv_indexStoryState = libCamp_ge_StoryStateID_StoryStateNone;
    lv_indexScene = libCamp_ge_SceneID_SceneNone;
    lv_difficulty = 2;

    // Implementation
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_Camp_6DFB46DF"), false);
    lv__SectionName = libCamp_gf_TS_BankSectionName("StoryStage");
    libCamp_gf_TS_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, IntToString((libCamp_ge_TS_BankStoryStageKey_TStoryBankStoryStageKeyIsSimulation)), lp_nextIsSimulation, false);
    libCamp_gf_TS_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, IntToString((libCamp_ge_TS_BankStoryStageKey_TStoryBankStoryStageKeyIsVictoryPlayAgain)), lp_nextIsVictoryPlayAgain, false);
    libCamp_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((libCamp_ge_TS_BankStoryStageKey_TStoryBankStoryStageKeyLastMap)), libCamp_gv_tSX_LastMap, 0);
    libCamp_gf_TS_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, IntToString((libCamp_ge_TS_BankStoryStageKey_TStoryBankStoryStageKeyLastMapSuccess)), libCamp_gv_tSX_LastMapSuccess, false);
    libCamp_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((libCamp_ge_TS_BankStoryStageKey_TStoryBankStoryStageKeyLastMission)), libCamp_gv_tSX_LastMission, 0);
    libCamp_gf_TS_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, IntToString((libCamp_ge_TS_BankStoryStageKey_TStoryBankStoryStageKeyLastMissionSuccess)), libCamp_gv_tSX_LastMissionSuccess, false);
    libCamp_gf_TS_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, IntToString((libCamp_ge_TS_BankStoryStageKey_TStoryBankStoryStageKeyLastMissionSimulation)), libCamp_gv_tSX_LastMissionSimulation, false);
    libCamp_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((libCamp_ge_TS_BankStoryStageKey_TStoryBankStoryStageKeyLastSuccessfulMission)), (libCamp_gf_LastSuccessfulMission()), 0);
    libCamp_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((libCamp_ge_TS_BankStoryStageKey_TStoryBankStoryStageKeyCredits)), libCamp_gf_StoryCredits(), 0);
    lv__SectionName = libCamp_gf_TS_BankSectionName("StoryMisc");
    libCamp_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((libCamp_ge_TS_BankStoryMiscKey_TStoryBankMiscKeyCampaignDifficulty)), libCamp_gv_tSX_CampaignDifficulty, 0);
    if ((libCamp_gf_StoryState(libCamp_ge_StoryStateID_StoryStateAchievementDisabled) > 0)) {
        lv__SectionName = libCamp_gf_TS_BankSectionName("StoryState");
        ConversationDataSaveStateValue("StoryState|AchievementDisabled", lp_targetBank, lv__SectionName);
    }

    if ((lp_resultFromDefeat == true)) {
        return ;
    }

    if ((libCamp_gv_tS_DebugProgressCheating == false) && (libCamp_gf_MapTypeCheck(libCamp_gv_tS_CurrentMap, libCamp_ge_MapType_Mission) == true) && (lp_saveType == libCamp_ge_TS_BankSavingType_SaveSimulation)) {
        if ((libCamp_gf_StoryState(libCamp_ge_StoryStateID_StoryStateHorner05sUnlocked) > 0)) {
            lv__SectionName = libCamp_gf_TS_BankSectionName("StoryState");
            ConversationDataSaveStateValue("StoryState|HornerSecretMissionOn", lp_targetBank, lv__SectionName);
            lv__SectionName = libCamp_gf_TS_BankSectionName("MissionAvailableAge");
            lv_availableAge = libCamp_gf_TS_LoadTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((libCamp_ge_MapID_MapTHorner05S)), 0);
            lv__SectionName = libCamp_gf_TS_BankSectionName("MissionCompletedAge");
            lv_completedAge = libCamp_gf_TS_LoadTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((libCamp_ge_MapID_MapTHorner05S)), 0);
            if ((lv_completedAge == 0) && (lv_availableAge == 0)) {
                lv__SectionName = libCamp_gf_TS_BankSectionName("MissionAvailableAge");
                libCamp_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((libCamp_ge_MapID_MapTHorner05S)), 1, 0);
            }

        }

        lv__SectionName = libCamp_gf_TS_BankSectionName("ObjectiveCreditsEarnedLastMission");
        libCamp_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString(0), libCamp_gv_tSX_MissionObjRewardsEarnedCurrent, 0);
        lv__SectionName = libCamp_gf_TS_BankSectionName("ObjectiveProgress");
        if ((libCamp_gv_tSX_MissionObjRewardsEarnedCurrent > 0)) {
            autoD7277012_i = libCamp_gv_TSC_OBJECTIVE_FIRST;
            while (autoD7277012_i <= libCamp_gv_TSC_OBJECTIVE_LAST) {
                lv_indexObjective = libCamp_gv_tS_MissionObjIDs[autoD7277012_i];
                lv_tempObjectiveProgress[(lv_indexObjective)] = libCamp_gf_MissionObjectiveProgress(lv_indexObjective);
                if ((libCamp_gf_MissionObjectiveMap(lv_indexObjective) != libCamp_gv_tS_CurrentMap)) {
                    libCamp_gf_SetMissionObjectiveProgress(lv_indexObjective, libCamp_gv_tS_NonSnapShotObjectiveProgress[(lv_indexObjective)]);
                }

                if ((lv_indexObjective == libCamp_ge_MissionObjective_TTosh03BObjective4)) {
                    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Camp_72091AF9") + IntToText(libCamp_gv_tS_NonSnapShotObjectiveProgress[(lv_indexObjective)])), false);
                    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Camp_5D133853") + IntToText(libCamp_gf_MissionObjectiveProgress(lv_indexObjective))), false);
                }

                autoD7277012_i = autoD7277012_i + 1;
            }
            ConversationDataSaveStateValues("MissionObjective", lp_targetBank, lv__SectionName);
            auto4289BA5C_i = libCamp_gv_TSC_OBJECTIVE_FIRST;
            while (auto4289BA5C_i <= libCamp_gv_TSC_OBJECTIVE_LAST) {
                lv_indexObjective = libCamp_gv_tS_MissionObjIDs[auto4289BA5C_i];
                libCamp_gf_SetMissionObjectiveProgress(lv_indexObjective, lv_tempObjectiveProgress[(lv_indexObjective)]);
                auto4289BA5C_i = auto4289BA5C_i + 1;
            }
        }

        lv_difficulty = PlayerDifficulty(1);
        lv__SectionName = libCamp_gf_TS_BankSectionName("MissionCompletion");
        if ((libCamp_gv_tS_NonSnapShotMissionDifficultyCompleted == false)) {
            libCamp_gf_TS_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, libCamp_gf_TS_CampaignDifficultyBankKey(libCamp_gv_tS_CurrentMap, lv_difficulty), libCamp_gf_MissionDifficultyCompleted(libCamp_gv_tS_CurrentMap, lv_difficulty), false);
        }

        lv__SectionName = libCamp_gf_TS_BankSectionName("MissionBestTime");
        if (((libCamp_gv_tS_NonSnapShotMissionBestTime <= 0) || (libCamp_gf_MissionCompleteBestTime(libCamp_gv_tS_CurrentMap, lv_difficulty) < libCamp_gv_tS_NonSnapShotMissionBestTime))) {
            libCamp_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, libCamp_gf_TS_CampaignDifficultyBankKey(libCamp_gv_tS_CurrentMap, lv_difficulty), libCamp_gf_MissionCompleteBestTime(libCamp_gv_tS_CurrentMap, lv_difficulty), 0);
        }

        lv__SectionName = libCamp_gf_TS_BankSectionName("LabResearchProgressProtoss");
        libCamp_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString(0), libCamp_gv_tSX_DebugResearchLevel[(libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss)], 0);
        if ((libCamp_gv_tSX_ResearchMissionProgress[(libCamp_gv_tS_CurrentMap)][(libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss)] > libCamp_gv_tS_NonSnapShotMissionResearchProgress[(libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss)])) {
            libCamp_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((libCamp_gv_tS_CurrentMap)), libCamp_gv_tSX_ResearchMissionProgress[(libCamp_gv_tS_CurrentMap)][(libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss)], 0);
        }

        lv__SectionName = libCamp_gf_TS_BankSectionName("LabResearchProgressZerg");
        libCamp_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString(0), libCamp_gv_tSX_DebugResearchLevel[(libCamp_ge_StoryResearchCategory_ResearchCategoryZerg)], 0);
        if ((libCamp_gv_tSX_ResearchMissionProgress[(libCamp_gv_tS_CurrentMap)][(libCamp_ge_StoryResearchCategory_ResearchCategoryZerg)] > libCamp_gv_tS_NonSnapShotMissionResearchProgress[(libCamp_ge_StoryResearchCategory_ResearchCategoryZerg)])) {
            libCamp_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((libCamp_gv_tS_CurrentMap)), libCamp_gv_tSX_ResearchMissionProgress[(libCamp_gv_tS_CurrentMap)][(libCamp_ge_StoryResearchCategory_ResearchCategoryZerg)], 0);
        }

        if ((GameIsTransitionMap() == false)) {
            lv__SectionName = libCamp_gf_TS_BankSectionName("MissionAvailableAge");
            auto0A924734_i = libCamp_gv_TSC_MISSION_FIRST;
            while (auto0A924734_i <= libCamp_gv_TSC_MISSION_LAST) {
                lv_indexMission = libCamp_gv_tS_MapID[auto0A924734_i];
                libCamp_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((lv_indexMission)), libCamp_gf_MissionStatusAge(lv_indexMission, libCamp_ge_MissionStatus_Available), 0);
                auto0A924734_i = auto0A924734_i + 1;
            }
            lv__SectionName = libCamp_gf_TS_BankSectionName("MissionCompletedAge");
            auto019E8C30_i = libCamp_gv_TSC_MISSION_FIRST;
            while (auto019E8C30_i <= libCamp_gv_TSC_MISSION_LAST) {
                lv_indexMission = libCamp_gv_tS_MapID[auto019E8C30_i];
                libCamp_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((lv_indexMission)), libCamp_gf_MissionStatusAge(lv_indexMission, libCamp_ge_MissionStatus_Completed), 0);
                auto019E8C30_i = auto019E8C30_i + 1;
            }
            lv__SectionName = libCamp_gf_TS_BankSectionName("MissionCompletion");
            autoDF62E1FA_i = libCamp_gv_TSC_MISSION_FIRST;
            while (autoDF62E1FA_i <= libCamp_gv_TSC_MISSION_LAST) {
                lv_indexMission = libCamp_gv_tS_MapID[autoDF62E1FA_i];
                libCamp_gf_TS_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, libCamp_gf_TS_CampaignDifficultyBankKey(lv_indexMission, 1), libCamp_gf_MissionDifficultyCompleted(lv_indexMission, 1), false);
                libCamp_gf_TS_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, libCamp_gf_TS_CampaignDifficultyBankKey(lv_indexMission, 2), libCamp_gf_MissionDifficultyCompleted(lv_indexMission, 2), false);
                libCamp_gf_TS_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, libCamp_gf_TS_CampaignDifficultyBankKey(lv_indexMission, 3), libCamp_gf_MissionDifficultyCompleted(lv_indexMission, 3), false);
                libCamp_gf_TS_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, libCamp_gf_TS_CampaignDifficultyBankKey(lv_indexMission, 4), libCamp_gf_MissionDifficultyCompleted(lv_indexMission, 4), false);
                autoDF62E1FA_i = autoDF62E1FA_i + 1;
            }
            lv__SectionName = libCamp_gf_TS_BankSectionName("MissionBestTime");
            auto8712728A_i = libCamp_gv_TSC_MISSION_FIRST;
            while (auto8712728A_i <= libCamp_gv_TSC_MISSION_LAST) {
                lv_indexMission = libCamp_gv_tS_MapID[auto8712728A_i];
                libCamp_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, libCamp_gf_TS_CampaignDifficultyBankKey(lv_indexMission, 1), libCamp_gf_MissionCompleteBestTime(lv_indexMission, 1), 0);
                libCamp_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, libCamp_gf_TS_CampaignDifficultyBankKey(lv_indexMission, 2), libCamp_gf_MissionCompleteBestTime(lv_indexMission, 2), 0);
                libCamp_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, libCamp_gf_TS_CampaignDifficultyBankKey(lv_indexMission, 3), libCamp_gf_MissionCompleteBestTime(lv_indexMission, 3), 0);
                libCamp_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, libCamp_gf_TS_CampaignDifficultyBankKey(lv_indexMission, 4), libCamp_gf_MissionCompleteBestTime(lv_indexMission, 4), 0);
                auto8712728A_i = auto8712728A_i + 1;
            }
            lv__SectionName = libCamp_gf_TS_BankSectionName("MercStatus");
            auto9F534327_i = libCamp_gv_TSC_MERC_FIRST;
            while (auto9F534327_i <= libCamp_gv_TSC_MERC_LAST) {
                lv_indexMerc = libCamp_gv_tS_MercID[auto9F534327_i];
                libCamp_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((lv_indexMerc)), libCamp_gv_tSX_MercStatus[(lv_indexMerc)], 0);
                auto9F534327_i = auto9F534327_i + 1;
            }
            lv__SectionName = libCamp_gf_TS_BankSectionName("TechStatus");
            autoDD9A22CB_ae = libCamp_gv_TSC_TECH_LAST;
            lv_index = libCamp_gv_TSC_TECH_FIRST;
            for ( ; ( (autoDD9A22CB_ai >= 0 && lv_index <= autoDD9A22CB_ae) || (autoDD9A22CB_ai < 0 && lv_index >= autoDD9A22CB_ae) ) ; lv_index += autoDD9A22CB_ai ) {
                libCamp_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString(lv_index), (libCamp_gv_tSX_Tech_Status[lv_index]), (libCamp_ge_StoryTechStates_TechUnavailable));
            }
        }

        return ;
    }

    lv__SectionName = libCamp_gf_TS_BankSectionName("MissionAvailableAge");
    auto5DF93212_i = libCamp_gv_TSC_MISSION_FIRST;
    while (auto5DF93212_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[auto5DF93212_i];
        libCamp_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((lv_indexMission)), libCamp_gf_MissionStatusAge(lv_indexMission, libCamp_ge_MissionStatus_Available), 0);
        auto5DF93212_i = auto5DF93212_i + 1;
    }
    lv__SectionName = libCamp_gf_TS_BankSectionName("MissionCompletedAge");
    autoE680B800_i = libCamp_gv_TSC_MISSION_FIRST;
    while (autoE680B800_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[autoE680B800_i];
        libCamp_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((lv_indexMission)), libCamp_gf_MissionStatusAge(lv_indexMission, libCamp_ge_MissionStatus_Completed), 0);
        autoE680B800_i = autoE680B800_i + 1;
    }
    lv__SectionName = libCamp_gf_TS_BankSectionName("MissionCompletion");
    auto8BE28940_i = libCamp_gv_TSC_MISSION_FIRST;
    while (auto8BE28940_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[auto8BE28940_i];
        libCamp_gf_TS_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, libCamp_gf_TS_CampaignDifficultyBankKey(lv_indexMission, 1), libCamp_gf_MissionDifficultyCompleted(lv_indexMission, 1), false);
        libCamp_gf_TS_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, libCamp_gf_TS_CampaignDifficultyBankKey(lv_indexMission, 2), libCamp_gf_MissionDifficultyCompleted(lv_indexMission, 2), false);
        libCamp_gf_TS_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, libCamp_gf_TS_CampaignDifficultyBankKey(lv_indexMission, 3), libCamp_gf_MissionDifficultyCompleted(lv_indexMission, 3), false);
        libCamp_gf_TS_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, libCamp_gf_TS_CampaignDifficultyBankKey(lv_indexMission, 4), libCamp_gf_MissionDifficultyCompleted(lv_indexMission, 4), false);
        auto8BE28940_i = auto8BE28940_i + 1;
    }
    lv__SectionName = libCamp_gf_TS_BankSectionName("MissionBestTime");
    auto07860F11_i = libCamp_gv_TSC_MISSION_FIRST;
    while (auto07860F11_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[auto07860F11_i];
        libCamp_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, libCamp_gf_TS_CampaignDifficultyBankKey(lv_indexMission, 1), libCamp_gf_MissionCompleteBestTime(lv_indexMission, 1), 0);
        libCamp_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, libCamp_gf_TS_CampaignDifficultyBankKey(lv_indexMission, 2), libCamp_gf_MissionCompleteBestTime(lv_indexMission, 2), 0);
        libCamp_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, libCamp_gf_TS_CampaignDifficultyBankKey(lv_indexMission, 3), libCamp_gf_MissionCompleteBestTime(lv_indexMission, 3), 0);
        libCamp_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, libCamp_gf_TS_CampaignDifficultyBankKey(lv_indexMission, 4), libCamp_gf_MissionCompleteBestTime(lv_indexMission, 4), 0);
        auto07860F11_i = auto07860F11_i + 1;
    }
    lv__SectionName = libCamp_gf_TS_BankSectionName("ObjectiveProgress");
    ConversationDataSaveStateValues("MissionObjective", lp_targetBank, lv__SectionName);
    lv__SectionName = libCamp_gf_TS_BankSectionName("ObjectiveCreditsEarnedLastMission");
    libCamp_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString(0), libCamp_gv_tSX_MissionObjRewardsEarnedCurrent, 0);
    lv__SectionName = libCamp_gf_TS_BankSectionName("LabResearchProgressProtoss");
    libCamp_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString(0), libCamp_gv_tSX_DebugResearchLevel[(libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss)], 0);
    auto6E2B5874_i = libCamp_gv_TSC_MISSION_FIRST;
    while (auto6E2B5874_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[auto6E2B5874_i];
        libCamp_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((lv_indexMission)), libCamp_gv_tSX_ResearchMissionProgress[(lv_indexMission)][(libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss)], 0);
        auto6E2B5874_i = auto6E2B5874_i + 1;
    }
    lv__SectionName = libCamp_gf_TS_BankSectionName("LabResearchProgressZerg");
    libCamp_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString(0), libCamp_gv_tSX_DebugResearchLevel[(libCamp_ge_StoryResearchCategory_ResearchCategoryZerg)], 0);
    auto96825A1C_i = libCamp_gv_TSC_MISSION_FIRST;
    while (auto96825A1C_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[auto96825A1C_i];
        libCamp_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((lv_indexMission)), libCamp_gv_tSX_ResearchMissionProgress[(lv_indexMission)][(libCamp_ge_StoryResearchCategory_ResearchCategoryZerg)], 0);
        auto96825A1C_i = auto96825A1C_i + 1;
    }
    lv__SectionName = libCamp_gf_TS_BankSectionName("LabResearchOldLevel");
    libCamp_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss)), libCamp_gv_tSX_ResearchPointsOld[(libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss)], 0);
    libCamp_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((libCamp_ge_StoryResearchCategory_ResearchCategoryZerg)), libCamp_gv_tSX_ResearchPointsOld[(libCamp_ge_StoryResearchCategory_ResearchCategoryZerg)], 0);
    lv__SectionName = libCamp_gf_TS_BankSectionName("LabResearchOldLevelUI");
    libCamp_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss)), libCamp_gv_tSX_ResearchUIOldPoints[(libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss)], 0);
    libCamp_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((libCamp_ge_StoryResearchCategory_ResearchCategoryZerg)), libCamp_gv_tSX_ResearchUIOldPoints[(libCamp_ge_StoryResearchCategory_ResearchCategoryZerg)], 0);
    lv__SectionName = libCamp_gf_TS_BankSectionName("LabResearchState");
    autoD8094CA3_i = libCamp_gv_TSC_RESEARCH_FIRST;
    while (autoD8094CA3_i <= libCamp_gv_TSC_RESEARCH_LAST) {
        lv_indexResearch = libCamp_gv_tS_ResearchID[autoD8094CA3_i];
        libCamp_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((lv_indexResearch)), libCamp_gv_tSX_ResearchState[(lv_indexResearch)], (libCamp_ge_StoryResearchState_ResearchStateAvailable));
        autoD8094CA3_i = autoD8094CA3_i + 1;
    }
    lv__SectionName = libCamp_gf_TS_BankSectionName("LabResearchPointsConverted");
    libCamp_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss)), libCamp_gv_tSX_ResearchPointsConverted[(libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss)], 0);
    libCamp_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((libCamp_ge_StoryResearchCategory_ResearchCategoryZerg)), libCamp_gv_tSX_ResearchPointsConverted[(libCamp_ge_StoryResearchCategory_ResearchCategoryZerg)], 0);
    lv__SectionName = libCamp_gf_TS_BankSectionName("MercStatus");
    auto59B72122_i = libCamp_gv_TSC_MERC_FIRST;
    while (auto59B72122_i <= libCamp_gv_TSC_MERC_LAST) {
        lv_indexMerc = libCamp_gv_tS_MercID[auto59B72122_i];
        libCamp_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((lv_indexMerc)), libCamp_gv_tSX_MercStatus[(lv_indexMerc)], 0);
        auto59B72122_i = auto59B72122_i + 1;
    }
    lv__SectionName = libCamp_gf_TS_BankSectionName("TechStatus");
    auto194C13E9_ae = libCamp_gv_TSC_TECH_LAST;
    lv_index = libCamp_gv_TSC_TECH_FIRST;
    for ( ; ( (auto194C13E9_ai >= 0 && lv_index <= auto194C13E9_ae) || (auto194C13E9_ai < 0 && lv_index >= auto194C13E9_ae) ) ; lv_index += auto194C13E9_ai ) {
        libCamp_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString(lv_index), (libCamp_gv_tSX_Tech_Status[lv_index]), (libCamp_ge_StoryTechStates_TechUnavailable));
    }
    lv__SectionName = libCamp_gf_TS_BankSectionName("HelpUnitsPanel");
    libCamp_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString(0), libCamp_gv_tSX_HelpUnitsPanel_EnabledUnitTypesCount, 0);
    autoD1B9C075_ae = libCamp_gv_tSX_HelpUnitsPanel_EnabledUnitTypesCount;
    lv_index = 1;
    for ( ; ( (autoD1B9C075_ai >= 0 && lv_index <= autoD1B9C075_ae) || (autoD1B9C075_ai < 0 && lv_index >= autoD1B9C075_ae) ) ; lv_index += autoD1B9C075_ai ) {
        libCamp_gf_TS_SaveTransitionVarString(lp_targetBank, lv__SectionName, IntToString(lv_index), libCamp_gf_TS_HelpUnitsPanel_UnitTypeStringID(libCamp_gv_tSX_HelpUnitsPanel_EnabledUnitTypes[lv_index]), "");
    }
    lv__SectionName = libCamp_gf_TS_BankSectionName("TutorialHistory");
    BankValueSetFromInt(lp_targetBank, lv__SectionName, IntToString(0), libCamp_gv_tSX_Tutorial_HistoryCount);
    auto2473C567_ae = libCamp_gv_tSX_Tutorial_HistoryCount;
    lv_index = 1;
    for ( ; ( (auto2473C567_ai >= 0 && lv_index <= auto2473C567_ae) || (auto2473C567_ai < 0 && lv_index >= auto2473C567_ae) ) ; lv_index += auto2473C567_ai ) {
        BankValueSetFromText(lp_targetBank, lv__SectionName, (IntToString(lv_index) + "_1"), libCamp_gv_tSX_Tutorial_HistoryTitle[lv_index]);
        BankValueSetFromText(lp_targetBank, lv__SectionName, (IntToString(lv_index) + "_2"), libCamp_gv_tSX_Tutorial_HistoryDescription[lv_index]);
        BankValueSetFromString(lp_targetBank, lv__SectionName, (IntToString(lv_index) + "_3"), libCamp_gf_TS_Tutorial_ConvertImageToString(libCamp_gv_tSX_Tutorial_HistoryIcon[lv_index]));
        BankValueSetFromString(lp_targetBank, lv__SectionName, (IntToString(lv_index) + "_4"), libCamp_gf_TS_Tutorial_ConvertMovieToString(libCamp_gv_tSX_Tutorial_HistoryMovie[lv_index]));
    }
    lv__SectionName = libCamp_gf_TS_BankSectionName("StoryState");
    ConversationDataSaveStateValues("StoryState", lp_targetBank, lv__SectionName);
    if ((lp_saveType == libCamp_ge_TS_BankSavingType_Normal)) {
        lv__SectionName = libCamp_gf_TS_BankSectionName("ScenePlayed");
        auto8105B7AA_i = libCamp_gv_TSC_SCENE_FIRST;
        while (auto8105B7AA_i <= libCamp_gv_TSC_SCENE_LAST) {
            lv_indexScene = libCamp_gv_tS_SceneIDs[auto8105B7AA_i];
            libCamp_gf_TS_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, IntToString((lv_indexScene)), libCamp_gf_ScenePlayed(lv_indexScene), false);
            auto8105B7AA_i = auto8105B7AA_i + 1;
        }
        lv__SectionName = libCamp_gf_TS_BankSectionName("SceneExtraObjects");
        ConversationDataSaveStateValues("SceneExtraObjects", lp_targetBank, lv__SectionName);
        lv__SectionName = libCamp_gf_TS_BankSectionName("NewsPlayed");
        ConversationDataSaveStateValues("StoryNews", lp_targetBank, lv__SectionName);
        lv__SectionName = libCamp_gf_TS_BankSectionName("StoryMisc");
        libCamp_gf_TS_SaveTransitionVarString(lp_targetBank, lv__SectionName, IntToString((libCamp_ge_TS_BankStoryMiscKey_TStoryBankMiscKeyRoomStates)), libCamp_gv_tSX_RoomStates, "");
        libCamp_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((libCamp_ge_TS_BankStoryMiscKey_TStoryBankMiscKeyLoadingImageMarSara)), libCamp_gv_tSX_LoadingImageCurrentMarSara, 0);
        libCamp_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((libCamp_ge_TS_BankStoryMiscKey_TStoryBankMiscKeyLoadingImageHyperion)), libCamp_gv_tSX_LoadingImageCurrentHyperion, 0);
        libCamp_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((libCamp_ge_TS_BankStoryMiscKey_TStoryBankMiscKeyLoadingImageLab)), libCamp_gv_tSX_LoadingImageCurrentLab, 0);
        libCamp_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((libCamp_ge_TS_BankStoryMiscKey_TStoryBankMiscKeyLoadingImageCantina)), libCamp_gv_tSX_LoadingImageCurrentCantina, 0);
        libCamp_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((libCamp_ge_TS_BankStoryMiscKey_TStoryBankMiscKeyLoadingImageArmory)), libCamp_gv_tSX_LoadingImageCurrentArmory, 0);
        libCamp_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((libCamp_ge_TS_BankStoryMiscKey_TStoryBankMiscKeyLoadingImageChar)), libCamp_gv_tSX_LoadingImageCurrentChar, 0);
        lv__SectionName = libCamp_gf_TS_BankSectionName("Tips");
        ConversationDataSaveStateValues("StoryTips", lp_targetBank, lv__SectionName);
        lv__SectionName = libCamp_gf_TS_BankSectionName("Conversation");
        autoDB4CFAF2_ae = libCamp_gv_tS_ConvoCount;
        lv_index = 1;
        for ( ; ( (autoDB4CFAF2_ai >= 0 && lv_index <= autoDB4CFAF2_ae) || (autoDB4CFAF2_ai < 0 && lv_index >= autoDB4CFAF2_ae) ) ; lv_index += autoDB4CFAF2_ai ) {
            ConversationDataSaveNodeState(libCamp_gv_tS_Convos[lv_index], lp_targetBank, lv__SectionName);
        }
        lv__SectionName = libCamp_gf_TS_BankSectionName("Hotspots");
        ConversationDataSaveStateValues("Hotspots", lp_targetBank, lv__SectionName);
        lv__SectionName = libCamp_gf_TS_BankSectionName("ArcadeGame");
        ConversationDataSaveStateValues("ArcadeGameVariables", lp_targetBank, lv__SectionName);
    }

    lv__SectionName = libCamp_gf_TS_BankSectionName("DebugTechCheatOption");
    libCamp_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, "0", (libCamp_gv_tSX_DebugTechCheatOption), 0);
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_Camp_E0C5A537"), false);
}

void libCamp_gf_TS_UpdateTransitionVars () {
    // Automatic Variable Declarations
}

void libCamp_gf_TS_OpenCampaignBank () {
    // Automatic Variable Declarations
    // Implementation
    BankLoad(libCamp_gv_tS_BankName, 1);
}

void libCamp_gf_TS_OpenMissionBanks () {
    // Variable Declarations
    string lv_bankName;
    int lv_indexMission;
    bool lv_bankExist;
    bool lv_saveMissionBank;
    int lv_branchAltMission;

    // Automatic Variable Declarations
    int auto020360CC_i;

    // Variable Initialization
    lv_bankName = "";
    lv_indexMission = libCamp_ge_MapID_MapNone;
    lv_branchAltMission = libCamp_ge_MapID_MapNone;

    // Implementation
    auto020360CC_i = libCamp_gv_TSC_MISSION_FIRST;
    while (auto020360CC_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[auto020360CC_i];
        if ((libCamp_gv_tS_MissionBanks[(lv_indexMission)] == null)) {
            lv_bankName = libCamp_gf_TS_MissionBankName(lv_indexMission);
            lv_bankExist = BankExists(lv_bankName, 1);
            if ((lv_indexMission == libCamp_gv_tS_CurrentMap)) {
                BankLoad(lv_bankName, 1);
                libCamp_gv_tS_MissionBanks[(lv_indexMission)] = BankLastCreated();
                if (((GameIsTransitionMap() == false) || (libCamp_gv_tSX_IsSimulation == true) || (libCamp_gv_tSX_IsVictoryPlayAgain == true)) && (lv_bankExist == true)) {
                    libCamp_gf_TS_LoadTransitionVars(BankLastCreated(), true);
                }
                else {
                    libCamp_gf_TS_SaveTransitionVars(BankLastCreated(), false, false, false, libCamp_ge_TS_BankSavingType_CreateMissionBank);
                    lv_saveMissionBank = true;
                }
            }
            else {
                if ((lv_bankExist == true)) {
                    BankLoad(lv_bankName, 1);
                    libCamp_gv_tS_MissionBanks[(lv_indexMission)] = BankLastCreated();
                }

            }
        }

        auto020360CC_i = auto020360CC_i + 1;
    }
    if ((lv_saveMissionBank == true)) {
        lv_branchAltMission = libCamp_ge_MapID_MapNone;
        if ((libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTHanson03A)) {
            lv_branchAltMission = libCamp_ge_MapID_MapTHanson03B;
        }
        else if ((libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTHanson03B)) {
            lv_branchAltMission = libCamp_ge_MapID_MapTHanson03A;
        }
        else if ((libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTTosh03A)) {
            lv_branchAltMission = libCamp_ge_MapID_MapTTosh03B;
        }
        else if ((libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTTosh03B)) {
            lv_branchAltMission = libCamp_ge_MapID_MapTTosh03A;
        }
        else if ((libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTValerian02A)) {
            lv_branchAltMission = libCamp_ge_MapID_MapTValerian02B;
        }
        else if ((libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTValerian02B)) {
            lv_branchAltMission = libCamp_ge_MapID_MapTValerian02A;
        }
        if ((lv_branchAltMission != libCamp_ge_MapID_MapNone)) {
            if ((libCamp_gv_tS_MissionBanks[(lv_branchAltMission)] == null)) {
                lv_bankName = libCamp_gf_TS_MissionBankName(lv_branchAltMission);
                BankLoad(lv_bankName, 1);
                libCamp_gv_tS_MissionBanks[(lv_branchAltMission)] = BankLastCreated();
            }

            libCamp_gf_TS_SaveTransitionVars(libCamp_gv_tS_MissionBanks[(lv_branchAltMission)], false, false, false, libCamp_ge_TS_BankSavingType_CreateMissionBank);
        }

    }

}

void libCamp_gf_TS_SaveMissionBanks () {
    // Variable Declarations
    int lv_indexMission;

    // Automatic Variable Declarations
    int auto6A939711_i;

    // Variable Initialization
    lv_indexMission = libCamp_ge_MapID_MapNone;

    // Implementation
    auto6A939711_i = libCamp_gv_TSC_MISSION_FIRST;
    while (auto6A939711_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[auto6A939711_i];
        if ((libCamp_gv_tS_MissionBanks[(lv_indexMission)] != null)) {
            BankSave(libCamp_gv_tS_MissionBanks[(lv_indexMission)]);
        }

        auto6A939711_i = auto6A939711_i + 1;
    }
}

void libCamp_gf_CreateStoryModeTransitionSave (text lp_name, text lp_transition) {
    // Variable Declarations
    text lv_name;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_name = StringToText("");

    // Implementation
    if ((libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapNone)) {
        return ;
    }

    GameSetTransitionMap(("Campaign/" + libCamp_gv_tS_MapFile[(libCamp_ge_MapID_MapTStory01)]));
    GameSaveCreate(lp_name, lp_transition, "", true);
}

void libCamp_gf_SaveArcadeGameData () {
    // Variable Declarations
    string lv_sectionName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_sectionName = "";

    // Implementation
    libCamp_gf_TS_OpenCampaignBank();
    lv_sectionName = libCamp_gf_TS_BankSectionName("ArcadeGame");
    ConversationDataSaveStateValues("ArcadeGameVariables", BankLastCreated(), lv_sectionName);
    BankSave(BankLastCreated());
}

void libCamp_gf_TS_PrepareNextMissionPreloading (int lp_victoryStatus) {
    // Automatic Variable Declarations
    // Implementation
    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Camp_815693E7") + libCamp_gf_MissionName(libCamp_gv_tS_CurrentMap)), false);
    libCamp_gf_TS_PrepareNextMissionRooms(lp_victoryStatus);
    libCamp_gf_TS_PrepareNextMissionActors(lp_victoryStatus);
}

void libCamp_gf_TS_PrepareNextMissionRooms (int lp_victoryStatus) {
    // Variable Declarations
    int lv_mapID;
    string lv_image;
    text lv_epilogue;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libCamp_gf_TS_NextMissionLocation(lp_victoryStatus) == libCamp_ge_TS_StoryRoom_RoomMarSaraBar)) {
        libCamp_gf_TS_PrepareRoomPreloading(libCamp_ge_TS_StoryRoom_RoomMarSaraBar);
        return ;
    }

    if ((libCamp_gf_TS_NextMissionLocation(lp_victoryStatus) == libCamp_ge_TS_StoryRoom_RoomBridge)) {
        libCamp_gf_TS_PrepareRoomPreloading(libCamp_ge_TS_StoryRoom_RoomBridge);
        libCamp_gf_TS_PrepareRoomPreloading(libCamp_ge_TS_StoryRoom_RoomArmory);
        libCamp_gf_TS_PrepareRoomPreloading(libCamp_ge_TS_StoryRoom_RoomCantina);
        libCamp_gf_TS_PrepareRoomPreloading(libCamp_ge_TS_StoryRoom_RoomLab);
        if ((libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTTychus02) && (lp_victoryStatus == c_gameOverVictory)) {
            libCamp_gf_TS_PrepareRoomPreloading(libCamp_ge_TS_StoryRoom_RoomCorridor);
        }

        return ;
    }

    if ((libCamp_gf_TS_NextMissionLocation(lp_victoryStatus) == libCamp_ge_TS_StoryRoom_RoomObservatory)) {
        libCamp_gf_TS_PrepareRoomPreloading(libCamp_ge_TS_StoryRoom_RoomBridge);
        libCamp_gf_TS_PrepareRoomPreloading(libCamp_ge_TS_StoryRoom_RoomFlagship);
        libCamp_gf_TS_PrepareRoomPreloading(libCamp_ge_TS_StoryRoom_RoomObservatory);
        return ;
    }

    if ((libCamp_gf_TS_NextMissionLocation(lp_victoryStatus) == libCamp_ge_TS_StoryRoom_RoomChar)) {
        libCamp_gf_TS_PrepareRoomPreloading(libCamp_ge_TS_StoryRoom_RoomChar);
        return ;
    }

}

void libCamp_gf_TS_PrepareNextMissionActors (int lp_victoryStatus) {
    // Variable Declarations
    int lv_mapID;
    string lv_image;
    text lv_epilogue;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libCamp_gf_TS_NextMissionLocation(lp_victoryStatus) == libCamp_ge_TS_StoryRoom_RoomMarSaraBar)) {
        libCamp_gf_TS_PrepareActorPreloading(libCamp_ge_TS_StoryActor_ActorRaynor);
        libCamp_gf_TS_PrepareActorPreloading(libCamp_ge_TS_StoryActor_ActorAdjutant);
        if ((libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTRaynor01, libCamp_ge_MissionStatus_Completed) == true)) {
            libCamp_gf_TS_PrepareActorPreloading(libCamp_ge_TS_StoryActor_ActorTychus);
        }

        return ;
    }

    if ((libCamp_gf_TS_NextMissionLocation(lp_victoryStatus) == libCamp_ge_TS_StoryRoom_RoomBridge)) {
        libCamp_gf_TS_PrepareActorPreloading(libCamp_ge_TS_StoryActor_ActorAnnabelle);
        libCamp_gf_TS_PrepareActorPreloading(libCamp_ge_TS_StoryActor_ActorBralik);
        libCamp_gf_TS_PrepareActorPreloading(libCamp_ge_TS_StoryActor_ActorCade);
        libCamp_gf_TS_PrepareActorPreloading(libCamp_ge_TS_StoryActor_ActorCooperBarTender);
        libCamp_gf_TS_PrepareActorPreloading(libCamp_ge_TS_StoryActor_ActorEarl);
        libCamp_gf_TS_PrepareActorPreloading(libCamp_ge_TS_StoryActor_ActorHall);
        libCamp_gf_TS_PrepareActorPreloading(libCamp_ge_TS_StoryActor_ActorHillMercContact);
        libCamp_gf_TS_PrepareActorPreloading(libCamp_ge_TS_StoryActor_ActorKachinsky);
        libCamp_gf_TS_PrepareActorPreloading(libCamp_ge_TS_StoryActor_ActorStetmann);
        libCamp_gf_TS_PrepareActorPreloading(libCamp_ge_TS_StoryActor_ActorSwann);
        libCamp_gf_TS_PrepareActorPreloading(libCamp_ge_TS_StoryActor_ActorYbarraMiscMerc);
        if ((libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTTychus02) && (lp_victoryStatus == c_gameOverVictory)) {
            libCamp_gf_TS_PrepareActorPreloading(libCamp_ge_TS_StoryActor_ActorZeratul);
        }

        if ((libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTHorner02, libCamp_ge_MissionStatus_Completed) == true)) {
            libCamp_gf_TS_PrepareActorPreloading(libCamp_ge_TS_StoryActor_ActorAdjutantConfederate);
        }

        if ((libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTHanson01, libCamp_ge_MissionStatus_Completed) == true) && (libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTHanson03A, libCamp_ge_MissionStatus_Completed) == false) && (libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTHanson03B, libCamp_ge_MissionStatus_Completed) == false)) {
            libCamp_gf_TS_PrepareActorPreloading(libCamp_ge_TS_StoryActor_ActorHanson);
        }

        libCamp_gf_TS_PrepareActorPreloading(libCamp_ge_TS_StoryActor_ActorHorner);
        libCamp_gf_TS_PrepareActorPreloading(libCamp_ge_TS_StoryActor_ActorRaynor);
        if ((libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTTosh01, libCamp_ge_MissionStatus_Completed) == true) && (libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTTosh03B, libCamp_ge_MissionStatus_Completed) == false)) {
            libCamp_gf_TS_PrepareActorPreloading(libCamp_ge_TS_StoryActor_ActorTosh);
        }

        libCamp_gf_TS_PrepareActorPreloading(libCamp_ge_TS_StoryActor_ActorTychus);
        return ;
    }

    if ((libCamp_gf_TS_NextMissionLocation(lp_victoryStatus) == libCamp_ge_TS_StoryRoom_RoomObservatory)) {
        libCamp_gf_TS_PrepareActorPreloading(libCamp_ge_TS_StoryActor_ActorRaynorMarine);
        libCamp_gf_TS_PrepareActorPreloading(libCamp_ge_TS_StoryActor_ActorValerian);
        return ;
    }

    if ((libCamp_gf_TS_NextMissionLocation(lp_victoryStatus) == libCamp_ge_TS_StoryRoom_RoomChar)) {
        libCamp_gf_TS_PrepareActorPreloading(libCamp_ge_TS_StoryActor_ActorRaynorMarine);
        libCamp_gf_TS_PrepareActorPreloading(libCamp_ge_TS_StoryActor_ActorTychus);
        if ((libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTValerian02A, libCamp_ge_MissionStatus_Completed) == false) && (libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTValerian02B, libCamp_ge_MissionStatus_Completed) == false)) {
            libCamp_gf_TS_PrepareActorPreloading(libCamp_ge_TS_StoryActor_ActorWarfield);
        }
        else {
            libCamp_gf_TS_PrepareActorPreloading(libCamp_ge_TS_StoryActor_ActorWarfieldAOD);
        }
        return ;
    }

}

void libCamp_gf_TS_PrepareRoomPreloading (int lp_room) {
    // Variable Declarations
    int lv_roomIndex;
    string lv_resourceString;
    string lv_item;
    int lv_index;
    int lv_unitType;

    // Automatic Variable Declarations
    int autoA87DC2EE_ae;
    const int autoA87DC2EE_ai = 1;

    // Variable Initialization
    lv_resourceString = "";
    lv_item = "";

    // Implementation
    lv_roomIndex = (lp_room);
    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Camp_BD608365") + IntToText((lp_room))), false);
    autoA87DC2EE_ae = libCamp_gv_tS_StoryRoomUnitTypeCount[lv_roomIndex];
    lv_index = 1;
    for ( ; ( (autoA87DC2EE_ai >= 0 && lv_index <= autoA87DC2EE_ae) || (autoA87DC2EE_ai < 0 && lv_index >= autoA87DC2EE_ae) ) ; lv_index += autoA87DC2EE_ai ) {
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Camp_ABAC52DD") + StringToText((libCamp_gv_tS_StoryRoomUnitTypes[lv_roomIndex][lv_index]))), false);
        libNtve_gf_PreloadUnit(libCamp_gv_tS_StoryRoomUnitTypes[lv_roomIndex][lv_index], true);
    }
}

void libCamp_gf_TS_PrepareActorPreloading (int lp_actor) {
    // Automatic Variable Declarations
    // Implementation
    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Camp_4F00CC43") + StringToText((libCamp_gv_tS_StoryActorUnitTypes[(lp_actor)]))), false);
    libNtve_gf_PreloadUnit(libCamp_gv_tS_StoryActorUnitTypes[(lp_actor)], true);
}

int libCamp_gf_TS_NextMissionLocation (int lp_victoryStatus) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCamp_gv_tSX_IsSimulation == true)) {
        return libCamp_ge_TS_StoryRoom_RoomBridge;
    }

    if ((libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTRaynor03, libCamp_ge_MissionStatus_Completed) == false)) {
        return libCamp_ge_TS_StoryRoom_RoomMarSaraBar;
    }

    if ((libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTRaynor03, libCamp_ge_MissionStatus_Completed) == true) && (libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTValerian01, libCamp_ge_MissionStatus_Completed) == false) && (!(((libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTTychus04) && (lp_victoryStatus == c_gameOverVictory))))) {
        return libCamp_ge_TS_StoryRoom_RoomBridge;
    }

    if ((libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTTychus04) && (lp_victoryStatus == c_gameOverVictory)) {
        return libCamp_ge_TS_StoryRoom_RoomObservatory;
    }

    if ((libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTValerian01, libCamp_ge_MissionStatus_Completed) == true)) {
        return libCamp_ge_TS_StoryRoom_RoomChar;
    }

    return libCamp_ge_TS_StoryRoom_RoomNone;
}

void libCamp_gf_TS_InitializeStoryRoomSingle (int lp_room, string lp_roomUnitString) {
    // Variable Declarations
    int lv_roomIndex;
    string lv_item;
    int lv_index;
    int lv_unitType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_item = "";

    // Implementation
    lv_roomIndex = (lp_room);
    libCamp_gv_tS_StoryRoomUnitTypeCount[lv_roomIndex] = 0;
    while (true) {
        libCamp_gv_tS_StoryRoomUnitTypeCount[lv_roomIndex] += 1;
        lv_item = StringWord(lp_roomUnitString, libCamp_gv_tS_StoryRoomUnitTypeCount[lv_roomIndex]);
        if ((lv_item == null)) {
            libCamp_gv_tS_StoryRoomUnitTypeCount[lv_roomIndex] -= 1;
            break;
        }

        libCamp_gv_tS_StoryRoomUnitTypes[lv_roomIndex][libCamp_gv_tS_StoryRoomUnitTypeCount[lv_roomIndex]] = UnitTypeFromString(lv_item);
    }
}

void libCamp_gf_TS_InitializeStoryRooms () {
    // Automatic Variable Declarations
    // Implementation
    libCamp_gf_TS_InitializeStoryRoomSingle(libCamp_ge_TS_StoryRoom_RoomArmory, "SMHyperionArmoryStage1SwannCameras SMHyperionArmoryStage1Set SMHyperionArmoryStage1TechnologyConsoleHS SMHyperionArmoryStage1ExitHS SMHyperionArmoryStage1SimulatorHS SMHyperionArmoryViking");
    libCamp_gf_TS_InitializeStoryRoomSingle(libCamp_ge_TS_StoryRoom_RoomBridge, "SMHyperionBridgeStage1WindowHS SMHyperionBridgeStage1HansonCameras SMHyperionBridgeStage1CantinaHS SMHyperionBridgeStage1CenterConsoleHS SMHyperionBridgeHolomap SMHyperionBridgeStage1HornerCameras SMHyperionBridgeStage1BattleReportsHS SMHyperionBridgeStage1TychusCameras SMHyperionBridgeStage1BattleCommandHS SMHyperionBridgeStage1Set2 SMHyperionBridgeStage1ToshCameras SMHyperionBridgeStage1Set SMBridgePlanetSpace");
    libCamp_gf_TS_InitializeStoryRoomSingle(libCamp_ge_TS_StoryRoom_RoomCantina, "SMHyperionCantinaStage1Progress3HS SMHyperionCantinaStage1ExitHS SMHyperionCantinaPoster2HS SMHyperionCantinaMercComputerHS SMHyperionCantinaBadgeHS SMHyperionCantinaStage1Progress4HS SMHyperionCantinaStage1JukeboxHS SMHyperionCantinaPoster3HS SMHyperionCantinaHydraClawsHS SMHyperionCantinaStage1Progress2HS SMHyperionCantinaPoster4HS SMHyperionCantinaStage1Progress6HS SMHyperionCantinaPoster1HS SMHyperionCantinaStage1ArcadeGameHS SMHyperionCantinaStage1Progress5HS SMHyperionCantinaStage1Progress1HS SMHyperionCantinaProgressFrame SMHyperionCantinaProps SMHyperionCantinaPoster5HS SMHyperionCantinaStage1TVHS SMHyperionCantinaTychusCameras SMHyperionCantinaYbarraCameras SMHyperionCantinaToshCameras SMHyperionCantinaStage1Set2 SMHyperionCantinaStage1StaircaseHS SMHyperionCantinaStage1Set");
    libCamp_gf_TS_InitializeStoryRoomSingle(libCamp_ge_TS_StoryRoom_RoomChar, "SMCharBattlezoneSet3 SMCharBattlezoneSet SMCharBattlezoneArtifactHS SMCharBattlezoneSet2 SMCharBattlezoneBriefcaseHS SMCharBattlezoneRadioHS SMCharBattlezoneDropshipHS");
    libCamp_gf_TS_InitializeStoryRoomSingle(libCamp_ge_TS_StoryRoom_RoomCorridor, "SMHyperionCorridorSet");
    libCamp_gf_TS_InitializeStoryRoomSingle(libCamp_ge_TS_StoryRoom_RoomFlagship, "SMMarine03 SMMarine03 SMMarine03 SMTerran06bProps SMMarine03 SMValerianFlagshipCorridorsSet4 SMValerianFlagshipCorridorsSet2 SMValerianFlagshipCorridorsSet3 SMValerianFlagshipCorridorsSet");
    libCamp_gf_TS_InitializeStoryRoomSingle(libCamp_ge_TS_StoryRoom_RoomLab, "SMHyperionMedLabStage1Set2 SMHyperionMedLabStage1DoorHS SMHyperionLabAdjutantCameras SMHyperionMedLabStage1Set SMHyperionMedLabStage1SetLights SMHyperionLabArtifactBaseHS SMHyperionLabArtifactPart1HS SMHyperionMedLabStage1CrystalHS SMHyperionLabCowinCameras SMHyperionMedLabStage1ConsoleHS SMHyperionLabHansonCameras SMHyperionLabArtifactPart3HS SMHyperionLabArtifactPart4HS SMHyperionLabArtifactPart2HS");
    libCamp_gf_TS_InitializeStoryRoomSingle(libCamp_ge_TS_StoryRoom_RoomMarSaraBar, "SMMarSaraBarCorkboardItem6HS SMMarSaraBarCorkboardItem2HS SMMarSaraBarCorkboardItem7HS SMMarSaraBarCorkboardItem3HS SMMarSaraBarBadgeHS SMMarSaraBarCorkboardItem5HS SMMarSaraBarHydraliskSkullHS SMMarSaraBarCorkboardItem1HS SMMarSaraBarCorkboardItem8HS SMMarSaraBarCorkboardItem4HS SMMarSaraBarCorkboardBackground SMMarSaraBarSet2 SMMarSaraBarTVHS SMMarSaraBarTychusCameras SMMarSaraBarStarmapHS SMMarSaraBarProps SMMarSaraBarSet SMMarSaraBarJukeboxHS");
    libCamp_gf_TS_InitializeStoryRoomSingle(libCamp_ge_TS_StoryRoom_RoomObservatory, "SMValerianObservatorySet2 SMValerianObservatoryPaintingHS SMValerianObservatorySet3 SMValerianObservatoryProps SMValerianObservatorySet SMValerianObservatoryStarmap");
}

void libCamp_gf_TS_InitializeStoryActorSingle (int lp_actor, string lp_unitType) {
    // Variable Declarations
    int lv_actorIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_actorIndex = (lp_actor);
    libCamp_gv_tS_StoryActorUnitTypes[lv_actorIndex] = lp_unitType;
}

void libCamp_gf_TS_InitializeStoryActors () {
    // Automatic Variable Declarations
    // Implementation
    libCamp_gf_TS_InitializeStoryActorSingle(libCamp_ge_TS_StoryActor_ActorAdjutant, "SMAdjutantHologram");
    libCamp_gf_TS_InitializeStoryActorSingle(libCamp_ge_TS_StoryActor_ActorAdjutantConfederate, "SMAdjutant");
    libCamp_gf_TS_InitializeStoryActorSingle(libCamp_ge_TS_StoryActor_ActorAnnabelle, "SMAnnabelle");
    libCamp_gf_TS_InitializeStoryActorSingle(libCamp_ge_TS_StoryActor_ActorBralik, "SMBralik");
    libCamp_gf_TS_InitializeStoryActorSingle(libCamp_ge_TS_StoryActor_ActorCade, "SMCade");
    libCamp_gf_TS_InitializeStoryActorSingle(libCamp_ge_TS_StoryActor_ActorCooperBarTender, "SMCooper");
    libCamp_gf_TS_InitializeStoryActorSingle(libCamp_ge_TS_StoryActor_ActorEarl, "SMEarl");
    libCamp_gf_TS_InitializeStoryActorSingle(libCamp_ge_TS_StoryActor_ActorHall, "SMHall");
    libCamp_gf_TS_InitializeStoryActorSingle(libCamp_ge_TS_StoryActor_ActorHanson, "SMCivilian");
    libCamp_gf_TS_InitializeStoryActorSingle(libCamp_ge_TS_StoryActor_ActorHillMercContact, "SMHill");
    libCamp_gf_TS_InitializeStoryActorSingle(libCamp_ge_TS_StoryActor_ActorHorner, "SMFirstOfficer");
    libCamp_gf_TS_InitializeStoryActorSingle(libCamp_ge_TS_StoryActor_ActorKachinsky, "SMKachinsky");
    libCamp_gf_TS_InitializeStoryActorSingle(libCamp_ge_TS_StoryActor_ActorRaynor, "SMRaynorCommander");
    libCamp_gf_TS_InitializeStoryActorSingle(libCamp_ge_TS_StoryActor_ActorRaynorMarine, "SMRaynorMarine");
    libCamp_gf_TS_InitializeStoryActorSingle(libCamp_ge_TS_StoryActor_ActorStetmann, "SMStetmann");
    libCamp_gf_TS_InitializeStoryActorSingle(libCamp_ge_TS_StoryActor_ActorSwann, "SMHyperionArmorer");
    libCamp_gf_TS_InitializeStoryActorSingle(libCamp_ge_TS_StoryActor_ActorTosh, "SMBountyHunter");
    libCamp_gf_TS_InitializeStoryActorSingle(libCamp_ge_TS_StoryActor_ActorTychus, "SMMarine01");
    libCamp_gf_TS_InitializeStoryActorSingle(libCamp_ge_TS_StoryActor_ActorValerian, "SMValerianMengsk");
    libCamp_gf_TS_InitializeStoryActorSingle(libCamp_ge_TS_StoryActor_ActorWarfield, "SMMarine02");
    libCamp_gf_TS_InitializeStoryActorSingle(libCamp_ge_TS_StoryActor_ActorWarfieldAOD, "SMMarine02AOD");
    libCamp_gf_TS_InitializeStoryActorSingle(libCamp_ge_TS_StoryActor_ActorYbarraMiscMerc, "SMYbarra");
    libCamp_gf_TS_InitializeStoryActorSingle(libCamp_ge_TS_StoryActor_ActorZeratul, "SMZeratul");
}

void libCamp_gf_TS_InitializeStoryModeLoadingImages () {
    // Automatic Variable Declarations
    // Implementation
    libCamp_gv_tS_LoadingImageCountMarSara = 0;
    libCamp_gv_tSX_LoadingImageCurrentMarSara = 0;
    libCamp_gv_tS_LoadingImageCountMarSara += 1;
    libCamp_gv_tS_LoadingImagesMarSara[libCamp_gv_tS_LoadingImageCountMarSara] = "Assets\\Textures\\loading-marsarabar.dds";
    libCamp_gv_tS_LoadingImageCountHyperion = 0;
    libCamp_gv_tSX_LoadingImageCurrentHyperion = 0;
    libCamp_gv_tS_LoadingImageCountHyperion += 1;
    libCamp_gv_tS_LoadingImagesHyperion[libCamp_gv_tS_LoadingImageCountHyperion] = "Assets\\Textures\\loading-hyperion1.dds";
    libCamp_gv_tS_LoadingImageCountHyperion += 1;
    libCamp_gv_tS_LoadingImagesHyperion[libCamp_gv_tS_LoadingImageCountHyperion] = "Assets\\Textures\\loading-hyperion2.dds";
    libCamp_gv_tS_LoadingImageCountHyperion += 1;
    libCamp_gv_tS_LoadingImagesHyperion[libCamp_gv_tS_LoadingImageCountHyperion] = "Assets\\Textures\\loading-hyperion3.dds";
    libCamp_gv_tS_LoadingImageCountHyperion += 1;
    libCamp_gv_tS_LoadingImagesHyperion[libCamp_gv_tS_LoadingImageCountHyperion] = "Assets\\Textures\\loading-hyperion4.dds";
    libCamp_gv_tS_LoadingImageCountHyperion += 1;
    libCamp_gv_tS_LoadingImagesHyperion[libCamp_gv_tS_LoadingImageCountHyperion] = "Assets\\Textures\\loading-hyperion5.dds";
    libCamp_gv_tS_LoadingImageCountHyperion += 1;
    libCamp_gv_tS_LoadingImagesHyperion[libCamp_gv_tS_LoadingImageCountHyperion] = "Assets\\Textures\\loading-hyperion6.dds";
    libCamp_gv_tS_LoadingImageCountHyperion += 1;
    libCamp_gv_tS_LoadingImagesHyperion[libCamp_gv_tS_LoadingImageCountHyperion] = "Assets\\Textures\\loading-hyperion7.dds";
    libCamp_gv_tS_LoadingImageCountHyperion += 1;
    libCamp_gv_tS_LoadingImagesHyperion[libCamp_gv_tS_LoadingImageCountHyperion] = "Assets\\Textures\\loading-hyperion8.dds";
    libCamp_gv_tS_LoadingImageCountLab = 0;
    libCamp_gv_tSX_LoadingImageCurrentLab = 0;
    libCamp_gv_tS_LoadingImageCountLab += 1;
    libCamp_gv_tS_LoadingImagesLab[libCamp_gv_tS_LoadingImageCountLab] = "Assets\\Textures\\loading-hyperionlab.dds";
    libCamp_gv_tS_LoadingImageCountCantina = 0;
    libCamp_gv_tSX_LoadingImageCurrentCantina = 0;
    libCamp_gv_tS_LoadingImageCountCantina += 1;
    libCamp_gv_tS_LoadingImagesCantina[libCamp_gv_tS_LoadingImageCountCantina] = "Assets\\Textures\\loading-hyperioncantina.dds";
    libCamp_gv_tS_LoadingImageCountArmory = 0;
    libCamp_gv_tSX_LoadingImageCurrentArmory = 0;
    libCamp_gv_tS_LoadingImageCountArmory += 1;
    libCamp_gv_tS_LoadingImagesArmory[libCamp_gv_tS_LoadingImageCountArmory] = "Assets\\Textures\\loading-hyperionarmory.dds";
    libCamp_gv_tS_LoadingImageCountChar = 0;
    libCamp_gv_tSX_LoadingImageCurrentChar = 0;
    libCamp_gv_tS_LoadingImageCountChar += 1;
    libCamp_gv_tS_LoadingImagesChar[libCamp_gv_tS_LoadingImageCountChar] = "Assets\\Textures\\loading-charbattlezone.dds";
}

void libCamp_gf_CP_SetCampaignCompleted (bool lp_completed) {
    // Automatic Variable Declarations
    // Implementation
    libCamp_gv_cPX_CampaignCompleted = true;
    libCamp_gf_CP_SaveVars();
}

void libCamp_gf_CP_LoadVars () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libCamp_gv_cPX_CampaignCompleted = false;
    BankLoad(libCamp_gv_cPC_BANKNAME, 1);
    if ((BankLastCreated() == null)) {
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Camp_A79E298B") + StringToText(libCamp_gv_cPC_BANKNAME)), false);
        return ;
    }

    libCamp_gv_cP_Bank = BankLastCreated();
    if ((BankSectionExists(BankLastCreated(), ("CampaignCompleted")) == true)) {
        libCamp_gv_cPX_CampaignCompleted = BankValueGetAsFlag(BankLastCreated(), ("CampaignCompleted"), "1");
    }

    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Camp_B9F18CA1") + libNtve_gf_ConvertBooleanToText(libCamp_gv_cPX_CampaignCompleted)), false);
}

void libCamp_gf_CP_SaveVars () {
    // Automatic Variable Declarations
    // Implementation
    BankValueSetFromFlag(libCamp_gv_cP_Bank, ("CampaignCompleted"), "1", libCamp_gv_cPX_CampaignCompleted);
    BankValueSetFromFlag(libCamp_gv_cP_Bank, ("CampaignCompleted"), "2", libCamp_gv_cPX_CampaignCompleted);
    BankSave(libCamp_gv_cP_Bank);
}

bool libCamp_gf_CampaignCompleted () {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_cPX_CampaignCompleted;
}

void libCamp_gf_CreateCampaignTutorial (text lp_title, text lp_description, string lp_icon, string lp_movie) {
    // Automatic Variable Declarations
    // Implementation
    HelpPanelAddTutorial(PlayerGroupAll(), lp_title, lp_description, lp_icon, lp_movie, true);
    if ((libCamp_gf_TS_Tutorial_AlreadyExisted(lp_movie) == true)) {
        return ;
    }

    libCamp_gf_TS_Tutorial_AddToHistory(lp_title, lp_description, lp_icon, lp_movie);
}

string libCamp_gf_TS_Tutorial_ConvertMovieToString (string lp_movie) {
    // Automatic Variable Declarations
    // Implementation
    return lp_movie;
}

string libCamp_gf_TS_Tutorial_ConvertImageToString (string lp_image) {
    // Automatic Variable Declarations
    // Implementation
    return lp_image;
}

string libCamp_gf_TS_Tutorial_ConvertStringToMovie (string lp_string) {
    // Automatic Variable Declarations
    // Implementation
    return lp_string;
}

string libCamp_gf_TS_Tutorial_ConvertStringToImage (string lp_string) {
    // Automatic Variable Declarations
    // Implementation
    return lp_string;
}

bool libCamp_gf_TS_Tutorial_AlreadyExisted (string lp_movie) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto4E78CFE5_ae = libCamp_gv_tSC_Tutorial_HistoryMaxCount;
    const int auto4E78CFE5_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (auto4E78CFE5_ai >= 0 && lv_index <= auto4E78CFE5_ae) || (auto4E78CFE5_ai < 0 && lv_index >= auto4E78CFE5_ae) ) ; lv_index += auto4E78CFE5_ai ) {
        if ((libCamp_gv_tSX_Tutorial_HistoryMovie[lv_index] == lp_movie)) {
            return true;
        }

    }
    return false;
}

void libCamp_gf_TS_Tutorial_AddToHistory (text lp_title, text lp_description, string lp_icon, string lp_movie) {
    // Automatic Variable Declarations
    // Implementation
    if (((libCamp_gv_tSX_Tutorial_HistoryCount == libCamp_gv_tSC_Tutorial_HistoryMaxCount) || (libCamp_gf_TS_Tutorial_AlreadyExisted(lp_movie) == true))) {
        return ;
    }

    libCamp_gv_tSX_Tutorial_HistoryCount += 1;
    libCamp_gv_tSX_Tutorial_HistoryTitle[libCamp_gv_tSX_Tutorial_HistoryCount] = lp_title;
    libCamp_gv_tSX_Tutorial_HistoryDescription[libCamp_gv_tSX_Tutorial_HistoryCount] = lp_description;
    libCamp_gv_tSX_Tutorial_HistoryIcon[libCamp_gv_tSX_Tutorial_HistoryCount] = lp_icon;
    libCamp_gv_tSX_Tutorial_HistoryMovie[libCamp_gv_tSX_Tutorial_HistoryCount] = lp_movie;
    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Camp_E8F0AA76") + libCamp_gv_tSX_Tutorial_HistoryTitle[libCamp_gv_tSX_Tutorial_HistoryCount]), false);
    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Camp_1A3EB474") + StringToText(libCamp_gf_TS_Tutorial_ConvertImageToString(libCamp_gv_tSX_Tutorial_HistoryIcon[libCamp_gv_tSX_Tutorial_HistoryCount]))), false);
    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Camp_AE8EC1E2") + StringToText(libCamp_gf_TS_Tutorial_ConvertMovieToString(libCamp_gv_tSX_Tutorial_HistoryMovie[libCamp_gv_tSX_Tutorial_HistoryCount]))), false);
}

void libCamp_gf_TS_Tutorial_ResetHistory () {
    // Automatic Variable Declarations
    // Implementation
    libCamp_gv_tSX_Tutorial_HistoryCount = 0;
}

void libCamp_gf_TS_Tutorial_RestoreHistoryToUI () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto7E6D0CC3_ae;
    const int auto7E6D0CC3_ai = 1;

    // Variable Initialization

    // Implementation
    if ((((libCamp_gf_MapTypeCheck(libCamp_gv_tS_CurrentMap, libCamp_ge_MapType_Mission) == false) && (libCamp_gv_tS_CurrentMap != libCamp_ge_MapID_MapTStory01)) || (libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTRaynor01) || (libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTRaynor02))) {
        return ;
    }

    auto7E6D0CC3_ae = libCamp_gv_tSX_Tutorial_HistoryCount;
    lv_index = 1;
    for ( ; ( (auto7E6D0CC3_ai >= 0 && lv_index <= auto7E6D0CC3_ae) || (auto7E6D0CC3_ai < 0 && lv_index >= auto7E6D0CC3_ae) ) ; lv_index += auto7E6D0CC3_ai ) {
        HelpPanelAddTutorial(PlayerGroupAll(), libCamp_gv_tSX_Tutorial_HistoryTitle[lv_index], libCamp_gv_tSX_Tutorial_HistoryDescription[lv_index], libCamp_gv_tSX_Tutorial_HistoryIcon[lv_index], libCamp_gv_tSX_Tutorial_HistoryMovie[lv_index], false);
    }
}

void libCamp_gf_HideStoryUI (bool lp_showHide, bool lp_includeTip) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_showHide == false)) {
        if ((libCamp_gv_tS_StoryUIVisibilityCounter >= 20)) {
            return ;
        }

        libCamp_gv_tS_StoryUIVisibilityCounter += 1;
        if ((UIFrameVisible(1, c_syncFrameTypeMenuBar) == true)) {
            libCamp_gv_tS_StoryUIVisibility_Menu[libCamp_gv_tS_StoryUIVisibilityCounter] = true;
        }
        else {
            libCamp_gv_tS_StoryUIVisibility_Menu[libCamp_gv_tS_StoryUIVisibilityCounter] = false;
        }
        if ((UIFrameVisible(1, c_syncFrameTypeCashPanel) == true)) {
            libCamp_gv_tS_StoryUIVisibility_Cash[libCamp_gv_tS_StoryUIVisibilityCounter] = true;
        }
        else {
            libCamp_gv_tS_StoryUIVisibility_Cash[libCamp_gv_tS_StoryUIVisibilityCounter] = false;
        }
        if ((libCamp_gf_RoomChangePanelIsVisible() == true)) {
            libCamp_gv_tS_StoryUIVisibility_RoomChange[libCamp_gv_tS_StoryUIVisibilityCounter] = true;
        }
        else {
            libCamp_gv_tS_StoryUIVisibility_RoomChange[libCamp_gv_tS_StoryUIVisibilityCounter] = false;
        }
        if ((UIFrameVisible(1, c_syncFrameTypeTipAlertPanel) == true)) {
            libCamp_gv_tS_StoryUIVisibility_Tip[libCamp_gv_tS_StoryUIVisibilityCounter] = true;
        }
        else {
            libCamp_gv_tS_StoryUIVisibility_Tip[libCamp_gv_tS_StoryUIVisibilityCounter] = false;
        }
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, false);
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCashPanel, false);
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCharacterSheetButton, false);
        libCamp_gf_HideRoomChangePanel(false);
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTipAlertPanel, false);
    }
    else {
        if ((libCamp_gv_tS_StoryUIVisibilityCounter == 0)) {
            return ;
        }

        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, libCamp_gv_tS_StoryUIVisibility_Menu[libCamp_gv_tS_StoryUIVisibilityCounter]);
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCashPanel, libCamp_gv_tS_StoryUIVisibility_Cash[libCamp_gv_tS_StoryUIVisibilityCounter]);
        libCamp_gf_HideRoomChangePanel(libCamp_gv_tS_StoryUIVisibility_RoomChange[libCamp_gv_tS_StoryUIVisibilityCounter]);
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTipAlertPanel, libCamp_gv_tS_StoryUIVisibility_Tip[libCamp_gv_tS_StoryUIVisibilityCounter]);
        libCamp_gv_tS_StoryUIVisibilityCounter -= 1;
    }
}

void libCamp_gf_DisplayCampaignVictoryScoreScreen (int lp_mission) {
    // Variable Declarations
    text lv_upgradeAvailable;
    int lv_indexAchievement;
    int lv_unlockedTech;
    int lv_subGroupEnabledIndex;
    int lv_indexObjective;
    int lv_rewardsEarned;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unlockedTech = libCamp_ge_StoryTechGroup_StoryTechGroupNone;
    lv_indexObjective = libCamp_ge_MissionObjective_MissionObjectiveNone;

    // Implementation
    GameCheatAllow(c_gameCheatProgress, false);
    UISetWorldVisible(PlayerGroupAll(), false);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    UISetCursorVisible(PlayerGroupAll(), true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleUI, true);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    TransmissionClearAll();
    ConversationDataStop();
    SoundStopAllTriggerSounds(false);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Victory);
    libCamp_gf_PrepareForStoryMode(c_gameOverVictory, libCamp_gf_TS_CampaignDifficulty());
    if (((libCamp_gv_tSX_IsSimulation == false) || (libCamp_gv_tS_Horner05sSimulationBeforeCompleted == true))) {
        libCamp_gf_TS_UpdateCampaignScreen(lp_mission);
    }

    libCamp_gf_CreateStoryModeTransitionSave((libCamp_gf_MissionName(lp_mission) + StringExternal("Param/Value/lib_Camp_D67253F3")), StringToText(""));
    VictoryPanelSetMissionTimeTitle(StringExternal("Param/Value/lib_Camp_E100AD56"));
    VictoryPanelSetBackgroundFilePath(libCamp_gf_TS_SetVictoryScreenBackground(lp_mission));
    VictoryPanelSetSummaryBackgroundFilePath(libCamp_gf_MissionLoadingScreenImage(lp_mission));
    if ((lp_mission == libCamp_ge_MapID_MapTZeratul04)) {
        VictoryPanelSetVictoryText(StringExternal("Param/Value/lib_Camp_F0633C82"));
    }
    else {
        VictoryPanelSetVictoryText(StringExternal("Param/Value/lib_Camp_2D326347"));
    }
    VictoryPanelSetMissionTimeText(libCamp_gf_FormatTimeCampaign(libCamp_gv_tS_MissionCompleteTime));
    if ((libCamp_gf_MissionReward(lp_mission) > 0)) {
        VictoryPanelSetRewardTitle(StringExternal("Param/Value/lib_Camp_C2E2CE7E"));
        VictoryPanelSetRewardCredits(libCamp_gf_MissionReward(lp_mission));
    }
    else {
        VictoryPanelSetRewardTitle(StringToText(""));
    }
    VictoryPanelSetAchievementsTitle(StringExternal("Param/Value/lib_Camp_3E550281"));
    VictoryPanelSetMissionTitle(StringExternal("Param/Value/lib_Camp_F4B8B451"));
    VictoryPanelSetMissionText(libCamp_gf_MissionNameInUpperCase(lp_mission));
    VictoryPanelSetStatisticsTitle(StringExternal("Param/Value/lib_Camp_7CDCEFA9"));
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeVictoryPanel, true);
    if ((libCamp_gv_tSX_IsSimulation == true)) {
        libCamp_gf_TS_OpenCampaignBank();
        libCamp_gf_TS_LoadTransitionVars(BankLastCreated(), true);
    }

    libCamp_gf_TS_CheckAchievementUnlocking();
}

string libCamp_gf_TS_SetVictoryScreenBackground (int lp_map) {
    // Automatic Variable Declarations
    int auto566A4A78_val;

    // Implementation
    auto566A4A78_val = lp_map;
    if (auto566A4A78_val == libCamp_ge_MapID_MapTHanson01) {
        return "Assets\\Textures\\ui_scorescreen_splash_thanson01.dds";
    }
    else if (auto566A4A78_val == libCamp_ge_MapID_MapTHanson02) {
        return "Assets\\Textures\\ui_scorescreen_splash_thanson02.dds";
    }
    else if (auto566A4A78_val == libCamp_ge_MapID_MapTHanson03A) {
        return "Assets\\Textures\\ui_scorescreen_splash_thanson03a.dds";
    }
    else if (auto566A4A78_val == libCamp_ge_MapID_MapTHanson03B) {
        return "Assets\\Textures\\ui_scorescreen_splash_thanson03b.dds";
    }
    else if (auto566A4A78_val == libCamp_ge_MapID_MapTHorner01) {
        return "Assets\\Textures\\ui_scorescreen_splash_thorner01.dds";
    }
    else if (auto566A4A78_val == libCamp_ge_MapID_MapTHorner02) {
        return "Assets\\Textures\\ui_scorescreen_splash_thorner02.dds";
    }
    else if (auto566A4A78_val == libCamp_ge_MapID_MapTHorner03) {
        return "Assets\\Textures\\ui_scorescreen_splash_thorner03.dds";
    }
    else if (auto566A4A78_val == libCamp_ge_MapID_MapTHorner04) {
        return "Assets\\Textures\\ui_scorescreen_splash_thorner04.dds";
    }
    else if (auto566A4A78_val == libCamp_ge_MapID_MapTHorner05S) {
        return "Assets\\Textures\\ui_scorescreen_splash_thorner05s.dds";
    }
    else if (auto566A4A78_val == libCamp_ge_MapID_MapTRaynor01) {
        return "Assets\\Textures\\ui_scorescreen_splash_traynor01.dds";
    }
    else if (auto566A4A78_val == libCamp_ge_MapID_MapTRaynor02) {
        return "Assets\\Textures\\ui_scorescreen_splash_traynor02.dds";
    }
    else if (auto566A4A78_val == libCamp_ge_MapID_MapTRaynor03) {
        return "Assets\\Textures\\ui_scorescreen_splash_traynor03.dds";
    }
    else if (auto566A4A78_val == libCamp_ge_MapID_MapTTosh01) {
        return "Assets\\Textures\\ui_scorescreen_splash_ttosh01.dds";
    }
    else if (auto566A4A78_val == libCamp_ge_MapID_MapTTosh02) {
        return "Assets\\Textures\\ui_scorescreen_splash_ttosh02.dds";
    }
    else if (auto566A4A78_val == libCamp_ge_MapID_MapTTosh03A) {
        return "Assets\\Textures\\ui_scorescreen_splash_ttosh03a.dds";
    }
    else if (auto566A4A78_val == libCamp_ge_MapID_MapTTosh03B) {
        return "Assets\\Textures\\ui_scorescreen_splash_ttosh03b.dds";
    }
    else if (auto566A4A78_val == libCamp_ge_MapID_MapTTychus01) {
        return "Assets\\Textures\\ui_scorescreen_splash_ttychus01.dds";
    }
    else if (auto566A4A78_val == libCamp_ge_MapID_MapTTychus02) {
        return "Assets\\Textures\\ui_scorescreen_splash_ttychus02.dds";
    }
    else if (auto566A4A78_val == libCamp_ge_MapID_MapTTychus03) {
        return "Assets\\Textures\\ui_scorescreen_splash_ttychus03.dds";
    }
    else if (auto566A4A78_val == libCamp_ge_MapID_MapTTychus04) {
        return "Assets\\Textures\\ui_scorescreen_splash_ttychus04.dds";
    }
    else if (auto566A4A78_val == libCamp_ge_MapID_MapTTychus05) {
        return "Assets\\Textures\\ui_scorescreen_splash_ttychus05.dds";
    }
    else if (auto566A4A78_val == libCamp_ge_MapID_MapTValerian01) {
        return "Assets\\Textures\\ui_scorescreen_splash_tvalerian01.dds";
    }
    else if (auto566A4A78_val == libCamp_ge_MapID_MapTValerian02A) {
        return "Assets\\Textures\\ui_scorescreen_splash_tvalerian02a.dds";
    }
    else if (auto566A4A78_val == libCamp_ge_MapID_MapTValerian02B) {
        return "Assets\\Textures\\ui_scorescreen_splash_tvalerian02b.dds";
    }
    else if (auto566A4A78_val == libCamp_ge_MapID_MapTValerian03) {
        return "Assets\\Textures\\ui_scorescreen_splash_tvalerian03.dds";
    }
    else if (auto566A4A78_val == libCamp_ge_MapID_MapTZeratul01) {
        return "Assets\\Textures\\ui_scorescreen_splash_tzeratul01.dds";
    }
    else if (auto566A4A78_val == libCamp_ge_MapID_MapTZeratul02) {
        return "Assets\\Textures\\ui_scorescreen_splash_tzeratul02.dds";
    }
    else if (auto566A4A78_val == libCamp_ge_MapID_MapTZeratul03) {
        return "Assets\\Textures\\ui_scorescreen_splash_tzeratul03.dds";
    }
    else if (auto566A4A78_val == libCamp_ge_MapID_MapTZeratul04) {
        return "Assets\\Textures\\ui_scorescreen_splash_tzeratul04.dds";
    }
    else {
        return "Assets\\Textures\\ui_scorescreen_splash_thanson01.dds";
    }
}

void libCamp_gf_TS_UpdateCampaignScreen (int lp_mission) {
    // Variable Declarations
    const string lv_campaignID = "WingsOfLiberty";
    text lv_body;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_mission == libCamp_ge_MapID_MapNone)) {
        return ;
    }

    if ((libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTValerian03, libCamp_ge_MissionStatus_Completed) == true)) {
        lv_body = (StringExternal("Param/Value/lib_Camp_8BB9EC51") + StringExternal("Param/Value/lib_Camp_4963E425") + StringExternal("Param/Value/lib_Camp_FAD183E6") + ConversationDataStateText(libCamp_gf_TS_MapConvoID(lp_mission), "Loading Screen Text") + StringExternal("Param/Value/lib_Camp_A998EBD1") + StringExternal("Param/Value/lib_Camp_4D8E2A14") + IntToText(libCamp_gf_NumberOfMissions(libCamp_ge_MissionCountOptions_Completed)) + StringExternal("Param/Value/lib_Camp_EDBD02C1") + StringExternal("Param/Value/lib_Camp_3CD91EF8") + DifficultyNameCampaign(libCamp_gf_TS_CampaignDifficulty()));
        CampaignProgressSetImageFilePath(PlayerGroupAll(), lv_campaignID, "Assets\\Textures\\ui_bnet_singleplayer_complete_bg.dds");
    }
    else {
        lv_body = (StringExternal("Param/Value/lib_Camp_3B2B1EC4") + libCamp_gf_MissionNameInUpperCase(lp_mission) + StringExternal("Param/Value/lib_Camp_25ED2E6B") + ConversationDataStateText(libCamp_gf_TS_MapConvoID(lp_mission), "Loading Screen Text") + StringExternal("Param/Value/lib_Camp_7B263EC6") + StringExternal("Param/Value/lib_Camp_19D34994") + IntToText(libCamp_gf_NumberOfMissions(libCamp_ge_MissionCountOptions_Completed)) + StringExternal("Param/Value/lib_Camp_3EEC58DF") + StringExternal("Param/Value/lib_Camp_A047780C") + DifficultyNameCampaign(libCamp_gf_TS_CampaignDifficulty()));
        CampaignProgressSetImageFilePath(PlayerGroupAll(), lv_campaignID, libCamp_gf_MissionLoadingScreenImage(lp_mission));
    }
    CampaignProgressSetText(PlayerGroupAll(), lv_campaignID, lv_body);
    CampaignProgressSetCampaignFinished(PlayerGroupAll(), lv_campaignID, libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTValerian03, libCamp_ge_MissionStatus_Completed));
}

void libCamp_gf_TS_CampaignVictory () {
    // Automatic Variable Declarations
    // Implementation
    UISetWorldVisible(PlayerGroupAll(), false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeVictoryPanel, false);
    UISetCursorVisible(PlayerGroupAll(), false);
    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, null, c_soundtrackCueAny, c_soundtrackIndexAny);
    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryAmbience, null, c_soundtrackCueAny, c_soundtrackIndexAny);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    SoundStopAllTriggerSounds(true);
    TransmissionClearAll();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Cinematic, PlayerGroupAll(), 0.0);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAmbient, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDoodad, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryFlames, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryCombat, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryVoice, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategorySpell, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategorySPieces, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategorySEmitters, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategorySAmbient, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryReady, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryMovement, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryMission, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryGather, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryFoley, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDialogue, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDeath, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAlert, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryBuild, true);
    UISetCursorVisible(PlayerGroupAll(), false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleUI, false);
    libCamp_gv_tS_EndCinematicFinished = false;
    TriggerExecute(libCamp_gt_TS_EndCinematic, true, true);
    if ((libCamp_gv_tS_EndCinematicFinished == false)) {
        TransmissionClearAll();
    }

    UISetCursorVisible(PlayerGroupAll(), true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleUI, true);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, c_transitionDurationImmediate);
    TriggerExecute(libCamp_gt_TS_EndCredits, true, true);
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_Camp_20FE0674"), false);
    CinematicFade(false, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    if ((libCamp_gv_tSX_IsSimulation == false)) {
        GameSetNextMap("");
    }

    GameOver(1, c_gameOverVictory, false, false);
}

bool libCamp_gf_CampaignDebugModeIsOn (string lp_mode) {
    // Automatic Variable Declarations
    // Implementation
    return GameIsDebugOptionSet((lp_mode), 1);
}

void libCamp_gf_TS_DebugProgressInitMissionPath () {
    // Automatic Variable Declarations
    // Implementation
    libCamp_gf_TS_DebugProgressInitMissionPathEarly();
    libCamp_gf_TS_DebugProgressInitMissionPathAverage();
    libCamp_gf_TS_DebugProgressInitMissionPathLate();
}

void libCamp_gf_TS_DebugProgressInitMissionPathEarly () {
    // Variable Declarations
    string lv_pathString;
    int lv_indexMissionCurrent;
    int lv_indexMissionRequired;
    int lv_indexString;

    // Automatic Variable Declarations
    int autoFCDE22D4_i;
    int autoB7DB84CF_i;

    // Variable Initialization
    lv_pathString = "";
    lv_indexMissionCurrent = libCamp_ge_MapID_MapNone;
    lv_indexMissionRequired = libCamp_ge_MapID_MapNone;

    // Implementation
    lv_pathString
    lv_indexString = 0;
    autoFCDE22D4_i = libCamp_gv_TSC_MISSION_FIRST;
    while (autoFCDE22D4_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMissionCurrent = libCamp_gv_tS_MapID[autoFCDE22D4_i];
        autoB7DB84CF_i = libCamp_gv_TSC_MISSION_FIRST;
        while (autoB7DB84CF_i <= libCamp_gv_TSC_MISSION_LAST) {
            lv_indexMissionRequired = libCamp_gv_tS_MapID[autoB7DB84CF_i];
            lv_indexString += 1;
            libCamp_gv_tS_DebugProgressMissionPathEarly[(lv_indexMissionCurrent)][(lv_indexMissionRequired)] = (StringSub(lv_pathString, lv_indexString, lv_indexString) == "1");
            autoB7DB84CF_i = autoB7DB84CF_i + 1;
        }
        autoFCDE22D4_i = autoFCDE22D4_i + 1;
    }
}

void libCamp_gf_TS_DebugProgressInitMissionPathAverage () {
    // Variable Declarations
    string lv_pathString;
    const int lv_type = libCamp_ge_TS_DebugProgressMissionPathType_Average;
    int lv_indexMissionCurrent;
    int lv_indexMissionRequired;
    int lv_indexString;

    // Automatic Variable Declarations
    int auto9348939E_i;
    int auto0273F2C3_i;

    // Variable Initialization
    lv_pathString = "";
    lv_indexMissionCurrent = libCamp_ge_MapID_MapNone;
    lv_indexMissionRequired = libCamp_ge_MapID_MapNone;

    // Implementation
    lv_pathString
    lv_indexString = 0;
    auto9348939E_i = libCamp_gv_TSC_MISSION_FIRST;
    while (auto9348939E_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMissionCurrent = libCamp_gv_tS_MapID[auto9348939E_i];
        auto0273F2C3_i = libCamp_gv_TSC_MISSION_FIRST;
        while (auto0273F2C3_i <= libCamp_gv_TSC_MISSION_LAST) {
            lv_indexMissionRequired = libCamp_gv_tS_MapID[auto0273F2C3_i];
            lv_indexString += 1;
            libCamp_gv_tS_DebugProgressMissionPathAverage[(lv_indexMissionCurrent)][(lv_indexMissionRequired)] = (StringSub(lv_pathString, lv_indexString, lv_indexString) == "1");
            auto0273F2C3_i = auto0273F2C3_i + 1;
        }
        auto9348939E_i = auto9348939E_i + 1;
    }
}

void libCamp_gf_TS_DebugProgressInitMissionPathLate () {
    // Variable Declarations
    string lv_pathString;
    const int lv_type = libCamp_ge_TS_DebugProgressMissionPathType_Late;
    int lv_indexMissionCurrent;
    int lv_indexMissionRequired;
    int lv_indexString;

    // Automatic Variable Declarations
    int autoCC8B7F76_i;
    int autoBE2F9D4A_i;

    // Variable Initialization
    lv_pathString = "";
    lv_indexMissionCurrent = libCamp_ge_MapID_MapNone;
    lv_indexMissionRequired = libCamp_ge_MapID_MapNone;

    // Implementation
    lv_pathString
    lv_indexString = 0;
    autoCC8B7F76_i = libCamp_gv_TSC_MISSION_FIRST;
    while (autoCC8B7F76_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMissionCurrent = libCamp_gv_tS_MapID[autoCC8B7F76_i];
        autoBE2F9D4A_i = libCamp_gv_TSC_MISSION_FIRST;
        while (autoBE2F9D4A_i <= libCamp_gv_TSC_MISSION_LAST) {
            lv_indexMissionRequired = libCamp_gv_tS_MapID[autoBE2F9D4A_i];
            lv_indexString += 1;
            libCamp_gv_tS_DebugProgressMissionPathLate[(lv_indexMissionCurrent)][(lv_indexMissionRequired)] = (StringSub(lv_pathString, lv_indexString, lv_indexString) == "1");
            autoBE2F9D4A_i = autoBE2F9D4A_i + 1;
        }
        autoCC8B7F76_i = autoCC8B7F76_i + 1;
    }
}

void libCamp_gf_TS_DebugProgressMissionPathRequireCopy (int lp_by, int lp_required, int lp_type) {
    // Variable Declarations
    int lv_indexMission;

    // Automatic Variable Declarations
    int auto5459578B_val;
    int auto2F1509A4_i;
    int autoC46C954B_i;
    int autoD0B44184_i;

    // Variable Initialization
    lv_indexMission = libCamp_ge_MapID_MapNone;

    // Implementation
    auto5459578B_val = lp_type;
    if (auto5459578B_val == libCamp_ge_TS_DebugProgressMissionPathType_Early) {
        auto2F1509A4_i = libCamp_gv_TSC_MISSION_FIRST;
        while (auto2F1509A4_i <= libCamp_gv_TSC_MISSION_LAST) {
            lv_indexMission = libCamp_gv_tS_MapID[auto2F1509A4_i];
            libCamp_gv_tS_DebugProgressMissionPathEarly[(lp_by)][(lv_indexMission)] = libCamp_gv_tS_DebugProgressMissionPathEarly[(lp_required)][(lv_indexMission)];
            auto2F1509A4_i = auto2F1509A4_i + 1;
        }
        libCamp_gv_tS_DebugProgressMissionPathEarly[(lp_by)][(lp_required)] = true;
    }
    else if (auto5459578B_val == libCamp_ge_TS_DebugProgressMissionPathType_Average) {
        autoC46C954B_i = libCamp_gv_TSC_MISSION_FIRST;
        while (autoC46C954B_i <= libCamp_gv_TSC_MISSION_LAST) {
            lv_indexMission = libCamp_gv_tS_MapID[autoC46C954B_i];
            libCamp_gv_tS_DebugProgressMissionPathAverage[(lp_by)][(lv_indexMission)] = libCamp_gv_tS_DebugProgressMissionPathAverage[(lp_required)][(lv_indexMission)];
            autoC46C954B_i = autoC46C954B_i + 1;
        }
        libCamp_gv_tS_DebugProgressMissionPathAverage[(lp_by)][(lp_required)] = true;
    }
    else if (auto5459578B_val == libCamp_ge_TS_DebugProgressMissionPathType_Late) {
        autoD0B44184_i = libCamp_gv_TSC_MISSION_FIRST;
        while (autoD0B44184_i <= libCamp_gv_TSC_MISSION_LAST) {
            lv_indexMission = libCamp_gv_tS_MapID[autoD0B44184_i];
            libCamp_gv_tS_DebugProgressMissionPathLate[(lp_by)][(lv_indexMission)] = libCamp_gv_tS_DebugProgressMissionPathLate[(lp_required)][(lv_indexMission)];
            autoD0B44184_i = autoD0B44184_i + 1;
        }
        libCamp_gv_tS_DebugProgressMissionPathLate[(lp_by)][(lp_required)] = true;
    }
    else {
    }
}

void libCamp_gf_TS_DebugProgressMissionPathRequireSet (int lp_by, int lp_required, int lp_type) {
    // Automatic Variable Declarations
    int autoF2AEA1C0_val;

    // Implementation
    autoF2AEA1C0_val = lp_type;
    if (autoF2AEA1C0_val == libCamp_ge_TS_DebugProgressMissionPathType_Early) {
        libCamp_gv_tS_DebugProgressMissionPathEarly[(lp_by)][(lp_required)] = true;
    }
    else if (autoF2AEA1C0_val == libCamp_ge_TS_DebugProgressMissionPathType_Average) {
        libCamp_gv_tS_DebugProgressMissionPathAverage[(lp_by)][(lp_required)] = true;
    }
    else if (autoF2AEA1C0_val == libCamp_ge_TS_DebugProgressMissionPathType_Late) {
        libCamp_gv_tS_DebugProgressMissionPathLate[(lp_by)][(lp_required)] = true;
    }
    else {
    }
}

void libCamp_gf_TS_DebugProgressAddMissionButton (int lp_mission, fixed lp_col, fixed lp_row) {
    // Variable Declarations
    int lv_missionIndex;
    int lv_xX;
    int lv_yY;
    int lv_width;
    int lv_height;
    int lv_marginX;
    int lv_marginY;
    int lv_index;

    // Automatic Variable Declarations
    int auto4921DE78_val;

    // Variable Initialization

    // Implementation
    lv_missionIndex = (lp_mission);
    lv_xX = FixedToInt((((lp_col - 1.0) * 285.0) + 40.0));
    lv_yY = FixedToInt((((lp_row - 1.0) * 70.0) + 35.0));
    lv_width = 290;
    lv_height = 75;
    lv_marginX = 15;
    lv_marginY = 10;
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    libNtve_gf_SetDialogItemHandle(DialogControlLastCreated(), ("WoL_DebugProgress_MissionButton" + IntToString(lv_missionIndex)), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_width, lv_height);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lv_xX, lv_yY);
    DialogControlSetPropertyAsText(DialogControlLastCreated(), c_triggerControlPropertyText, PlayerGroupAll(), libCamp_gv_tS_MapProgressCheatName[(lp_mission)]);
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 0.00), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "DebugProgressPanelMission", PlayerGroupAll());
    libCamp_gv_tS_DebugProgressMissionButtons[lv_missionIndex] = DialogControlLastCreated();
    if ((lp_mission == libCamp_ge_MapID_MapTHorner05S)) {
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
        libNtve_gf_SetDialogItemHandle(DialogControlLastCreated(), "WoL_DebugProgress_UnlockSecretButton", PlayerGroupAll());
        libCamp_gv_tS_DebugProgressMissionButtonUnlockSecret = DialogControlLastCreated();
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 120, lv_height);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (lv_xX + (lv_width - 8)), (lv_yY - (lv_height / 2)));
        DialogControlSetPropertyAsText(DialogControlLastCreated(), c_triggerControlPropertyText, PlayerGroupAll(), StringExternal("Param/Value/lib_Camp_FF7E2E63"));
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "DebugProgressPanelLabelUnlock", PlayerGroupAll());
    }

    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetPropertyAsText(DialogControlLastCreated(), c_triggerControlPropertyText, PlayerGroupAll(), StringToText(""));
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), (lv_width - (lv_marginX * 2)), (lv_height - (lv_marginY * 2)));
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "DebugProgressPanelLabelProgress", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (lv_xX + lv_marginX), (lv_yY + lv_marginY));
    libCamp_gv_tS_DebugProgressMissionLabelsStates[lv_missionIndex] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetPropertyAsText(DialogControlLastCreated(), c_triggerControlPropertyText, PlayerGroupAll(), StringToText(""));
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), (lv_width - (lv_marginX * 2)), (lv_height - (lv_marginY * 2)));
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "DebugProgressPanelLabelUnit", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (lv_xX + lv_marginX), (lv_yY + lv_marginY));
    libCamp_gv_tS_DebugProgressMissionLabelsUnits[lv_missionIndex] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetPropertyAsText(DialogControlLastCreated(), c_triggerControlPropertyText, PlayerGroupAll(), StringToText(""));
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), (lv_width - (lv_marginX * 2)), (lv_height - (lv_marginY * 2)));
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "DebugProgressPanelLabelCredits", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (lv_xX + lv_marginX), (lv_yY + lv_marginY));
    libCamp_gv_tS_DebugProgressMissionLabelsCredits[lv_missionIndex] = DialogControlLastCreated();
    lv_width = 300;
    lv_height = 60;
    auto4921DE78_val = lp_mission;
    if (auto4921DE78_val == libCamp_ge_MapID_MapTHorner01) {
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_width, lv_height);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "DebugProgressPanelLabelRequirement", PlayerGroupAll());
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (lv_xX + lv_marginX), (lv_yY - lv_height));
        libCamp_gv_tS_DebugProgressMissionLabelsRequirement[lv_missionIndex] = DialogControlLastCreated();
    }
    else if (auto4921DE78_val == libCamp_ge_MapID_MapTHanson03A) {
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_width, lv_height);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "DebugProgressPanelLabelRequirement", PlayerGroupAll());
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (lv_xX + lv_marginX), (lv_yY - lv_height));
        libCamp_gv_tS_DebugProgressMissionLabelsRequirement[lv_missionIndex] = DialogControlLastCreated();
    }
    else if (auto4921DE78_val == libCamp_ge_MapID_MapTZeratul01) {
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_width, lv_height);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "DebugProgressPanelLabelRequirement", PlayerGroupAll());
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (lv_xX + lv_marginX), (lv_yY - lv_height));
        libCamp_gv_tS_DebugProgressMissionLabelsRequirement[lv_missionIndex] = DialogControlLastCreated();
    }
    else if (auto4921DE78_val == libCamp_ge_MapID_MapTTosh01) {
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_width, lv_height);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "DebugProgressPanelLabelRequirement", PlayerGroupAll());
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (lv_xX + lv_marginX), (lv_yY - lv_height));
        libCamp_gv_tS_DebugProgressMissionLabelsRequirement[lv_missionIndex] = DialogControlLastCreated();
    }
    else if (auto4921DE78_val == libCamp_ge_MapID_MapTTosh03A) {
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_width, lv_height);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "DebugProgressPanelLabelRequirement", PlayerGroupAll());
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (lv_xX + lv_marginX), (lv_yY - lv_height));
        libCamp_gv_tS_DebugProgressMissionLabelsRequirement[lv_missionIndex] = DialogControlLastCreated();
    }
    else if (auto4921DE78_val == libCamp_ge_MapID_MapTTychus02) {
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_width, lv_height);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "DebugProgressPanelLabelRequirement", PlayerGroupAll());
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (lv_xX + lv_marginX), (lv_yY - lv_height));
        libCamp_gv_tS_DebugProgressMissionLabelsRequirement[lv_missionIndex] = DialogControlLastCreated();
    }
    else if (auto4921DE78_val == libCamp_ge_MapID_MapTTychus03) {
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_width, lv_height);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "DebugProgressPanelLabelRequirement", PlayerGroupAll());
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (lv_xX + lv_marginX), (lv_yY - lv_height));
        libCamp_gv_tS_DebugProgressMissionLabelsRequirement[lv_missionIndex] = DialogControlLastCreated();
    }
    else if (auto4921DE78_val == libCamp_ge_MapID_MapTTychus04) {
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_width, lv_height);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "DebugProgressPanelLabelRequirement", PlayerGroupAll());
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (lv_xX + lv_marginX), (lv_yY - lv_height));
        libCamp_gv_tS_DebugProgressMissionLabelsRequirement[lv_missionIndex] = DialogControlLastCreated();
    }
    else {
    }
}

void libCamp_gf_TS_DebugProgressCreateDialog () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libCamp_gv_tS_DebugProgressDialog != c_invalidDialogId)) {
        return ;
    }

    DialogCreate(1500, 1100, c_anchorCenter, 0, 0, true);
    DialogSetPosition(DialogLastCreated(), c_anchorCenter, 0, 0);
    libCamp_gv_tS_DebugProgressDialog = DialogLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 272, 60);
    libCamp_gv_tS_DebugProgressImageCurrent = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 137, 37);
    libCamp_gv_tS_DebugProgressImageOK = DialogControlLastCreated();
    libCamp_gf_TS_DebugProgressAddMissionButton(libCamp_ge_MapID_MapTRaynor01, 3.0, 1.0);
    libCamp_gf_TS_DebugProgressAddMissionButton(libCamp_ge_MapID_MapTRaynor02, 3.0, 2.0);
    libCamp_gf_TS_DebugProgressAddMissionButton(libCamp_ge_MapID_MapTRaynor03, 3.0, 3.0);
    libCamp_gf_TS_DebugProgressAddMissionButton(libCamp_ge_MapID_MapTHanson01, 2.0, 3.0);
    libCamp_gf_TS_DebugProgressAddMissionButton(libCamp_ge_MapID_MapTHanson02, 2.0, 4.0);
    libCamp_gf_TS_DebugProgressAddMissionButton(libCamp_ge_MapID_MapTHanson03A, 2.0, 6.0);
    libCamp_gf_TS_DebugProgressAddMissionButton(libCamp_ge_MapID_MapTHanson03B, 2.0, 7.0);
    libCamp_gf_TS_DebugProgressAddMissionButton(libCamp_ge_MapID_MapTTosh01, 5.0, 4.0);
    libCamp_gf_TS_DebugProgressAddMissionButton(libCamp_ge_MapID_MapTTosh02, 5.0, 5.0);
    libCamp_gf_TS_DebugProgressAddMissionButton(libCamp_ge_MapID_MapTTosh03A, 5.0, 7.0);
    libCamp_gf_TS_DebugProgressAddMissionButton(libCamp_ge_MapID_MapTTosh03B, 5.0, 8.0);
    libCamp_gf_TS_DebugProgressAddMissionButton(libCamp_ge_MapID_MapTHorner01, 1.0, 5.0);
    libCamp_gf_TS_DebugProgressAddMissionButton(libCamp_ge_MapID_MapTHorner02, 1.0, 6.0);
    libCamp_gf_TS_DebugProgressAddMissionButton(libCamp_ge_MapID_MapTHorner03, 1.0, 7.0);
    libCamp_gf_TS_DebugProgressAddMissionButton(libCamp_ge_MapID_MapTHorner04, 1.0, 8.0);
    libCamp_gf_TS_DebugProgressAddMissionButton(libCamp_ge_MapID_MapTHorner05S, 1.0, 9.0);
    libCamp_gf_TS_DebugProgressAddMissionButton(libCamp_ge_MapID_MapTTychus01, 4.0, 3.0);
    libCamp_gf_TS_DebugProgressAddMissionButton(libCamp_ge_MapID_MapTTychus02, 4.0, 5.0);
    libCamp_gf_TS_DebugProgressAddMissionButton(libCamp_ge_MapID_MapTTychus03, 4.0, 7.0);
    libCamp_gf_TS_DebugProgressAddMissionButton(libCamp_ge_MapID_MapTTychus04, 4.0, 9.0);
    libCamp_gf_TS_DebugProgressAddMissionButton(libCamp_ge_MapID_MapTTychus05, 4.0, 10.0);
    libCamp_gf_TS_DebugProgressAddMissionButton(libCamp_ge_MapID_MapTZeratul01, 3.0, 6.0);
    libCamp_gf_TS_DebugProgressAddMissionButton(libCamp_ge_MapID_MapTZeratul02, 3.0, 7.0);
    libCamp_gf_TS_DebugProgressAddMissionButton(libCamp_ge_MapID_MapTZeratul03, 3.0, 8.0);
    libCamp_gf_TS_DebugProgressAddMissionButton(libCamp_ge_MapID_MapTZeratul04, 3.0, 9.0);
    libCamp_gf_TS_DebugProgressAddMissionButton(libCamp_ge_MapID_MapTValerian01, 3.0, 11.0);
    libCamp_gf_TS_DebugProgressAddMissionButton(libCamp_ge_MapID_MapTValerian02A, 3.0, 12.0);
    libCamp_gf_TS_DebugProgressAddMissionButton(libCamp_ge_MapID_MapTValerian02B, 3.0, 13.0);
    libCamp_gf_TS_DebugProgressAddMissionButton(libCamp_ge_MapID_MapTValerian03, 3.0, 14.0);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    libNtve_gf_SetDialogItemHandle(DialogControlLastCreated(), "WoL_DebugProgress_OkButton", PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomRight, 190, 30);
    DialogControlSetPropertyAsText(DialogControlLastCreated(), c_triggerControlPropertyText, PlayerGroupAll(), StringExternal("Param/Value/lib_Camp_D890E79E"));
    libCamp_gv_tS_DebugProgressButtonOK = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 280, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomRight, 50, 50);
    DialogControlSetPropertyAsText(DialogControlLastCreated(), c_triggerControlPropertyText, PlayerGroupAll(), StringToText(""));
    libCamp_gv_tS_DebugProgressLabelWarning = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    libNtve_gf_SetDialogItemHandle(DialogControlLastCreated(), "WoL_DebugProgress_CancelButton", PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomRight, 40, 30);
    DialogControlSetPropertyAsText(DialogControlLastCreated(), c_triggerControlPropertyText, PlayerGroupAll(), StringExternal("Param/Value/lib_Camp_21B35898"));
    libCamp_gv_tS_DebugProgressButtonCancel = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    libNtve_gf_SetDialogItemHandle(DialogControlLastCreated(), "WoL_DebugProgress_ResetButton", PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomLeft, 40, 30);
    DialogControlSetPropertyAsText(DialogControlLastCreated(), c_triggerControlPropertyText, PlayerGroupAll(), StringExternal("Param/Value/lib_Camp_8245BB9F"));
    libCamp_gv_tS_DebugProgressButtonReset = DialogControlLastCreated();
    if ((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true) && (GameIsOnline() == false) && (libCamp_gf_CampaignDebugModeIsOn("NoBattleNet") == true)) {
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
        libNtve_gf_SetDialogItemHandle(DialogControlLastCreated(), "WoL_DebugProgress_LaunchMissionButton", PlayerGroupAll());
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 220, 50);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomRight, 370, 30);
        DialogControlSetPropertyAsText(DialogControlLastCreated(), c_triggerControlPropertyText, PlayerGroupAll(), StringExternal("Param/Value/lib_Camp_F317CBE3"));
        libCamp_gv_tS_DebugProgressButtonLaunchMission = DialogControlLastCreated();
        TriggerEnable(libCamp_gt_TS_DebugProgressLaunchMissionPopup, true);
    }

    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 400, 200);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 50, 50);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "DebugProgressPanelLabel", PlayerGroupAll());
    libCamp_gv_tS_DebugProgressLabelsCompleted = DialogControlLastCreated();
}

text libCamp_gf_TS_DebugProgressFormatRequirementsCount (int lp_missionCount, text lp_extraText, bool lp_met) {
    // Variable Declarations
    text lv_ret;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ret = StringToText("");

    // Implementation
    lv_ret = StringToText("");
    if ((lp_met == true)) {
        lv_ret = (lv_ret + StringExternal("Param/Value/lib_Camp_45C6AF7D"));
    }
    else {
        lv_ret = (lv_ret + StringExternal("Param/Value/lib_Camp_80A79E72"));
    }
    lv_ret = (lv_ret + StringExternal("Param/Value/lib_Camp_FB2EF017") + IntToText(lp_missionCount) + StringExternal("Param/Value/lib_Camp_A804326C") + lp_extraText + StringExternal("Param/Value/lib_Camp_739BC18B"));
    return lv_ret;
}

text libCamp_gf_TS_DebugProgressFormatRequirementsMission (int lp_mission, bool lp_met) {
    // Variable Declarations
    text lv_ret;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ret = StringToText("");

    // Implementation
    lv_ret = StringToText("");
    if ((lp_met == true)) {
        lv_ret = (lv_ret + StringExternal("Param/Value/lib_Camp_D0FB1E02"));
    }
    else {
        lv_ret = (lv_ret + StringExternal("Param/Value/lib_Camp_C8C7C10D"));
    }
    lv_ret = (lv_ret + StringExternal("Param/Value/lib_Camp_EB0E27D8") + libCamp_gv_tS_MapProgressCheatName[(lp_mission)] + StringExternal("Param/Value/lib_Camp_1EBA7A08"));
    return lv_ret;
}

text libCamp_gf_TS_DebugProgressFormatMissionUnitUnlocked (int lp_mission) {
    // Variable Declarations
    int lv_missionIndex;
    int lv_subgroupUnlocked1;
    int lv_subgroupUnlocked2;
    string lv_unitType;
    int lv_index;
    text lv_label;

    // Automatic Variable Declarations
    int auto24C06F3B_val;

    // Variable Initialization
    lv_subgroupUnlocked1 = libCamp_ge_StoryTechGroup_StoryTechGroupNone;
    lv_subgroupUnlocked2 = libCamp_ge_StoryTechGroup_StoryTechGroupNone;
    lv_label = StringToText("");

    // Implementation
    lv_label = StringToText("");
    lv_missionIndex = (lp_mission);
    lv_subgroupUnlocked1 = libCamp_gf_MissionUnlockedTechSubgorup(lp_mission, 1);
    if ((lv_subgroupUnlocked1 == libCamp_ge_StoryTechGroup_StoryTechGroupNone)) {
        lv_label = StringExternal("Param/Value/lib_Camp_5E92E8B0");
    }
    else {
        lv_unitType = libCamp_gf_StoryTechGroupUnitType(lv_subgroupUnlocked1);
        lv_label = UnitTypeGetName(lv_unitType);
        lv_subgroupUnlocked2 = libCamp_gf_MissionUnlockedTechSubgorup(lp_mission, 2);
        if ((lv_subgroupUnlocked2 != libCamp_ge_StoryTechGroup_StoryTechGroupNone)) {
            lv_label = (lv_label + StringExternal("Param/Value/lib_Camp_18D1F682"));
        }

    }
    auto24C06F3B_val = libCamp_gf_MissionStatus(lp_mission);
    if (auto24C06F3B_val == libCamp_ge_MissionStatus_Available) {
        lv_label = (StringExternal("Param/Value/lib_Camp_85CED5C8") + lv_label + StringExternal("Param/Value/lib_Camp_F55FBED5"));
    }
    else if (auto24C06F3B_val == libCamp_ge_MissionStatus_Completed) {
        lv_label = (StringExternal("Param/Value/lib_Camp_245535C8") + lv_label + StringExternal("Param/Value/lib_Camp_6C98C561"));
    }
    else if (auto24C06F3B_val == libCamp_ge_MissionStatus_Locked) {
        lv_label = (StringExternal("Param/Value/lib_Camp_7987D84F") + lv_label + StringExternal("Param/Value/lib_Camp_068B808D"));
    }
    else {
    }
    return lv_label;
}

text libCamp_gf_TS_DebugProgressFormatMissionCredits (int lp_mission) {
    // Variable Declarations
    text lv_label;

    // Automatic Variable Declarations
    int auto99F4FDB0_val;

    // Variable Initialization
    lv_label = StringToText("");

    // Implementation
    lv_label = StringToText("");
    lv_label = libCamp_gf_FormatCredits(libCamp_gf_MissionReward(lp_mission), true);
    auto99F4FDB0_val = libCamp_gf_MissionStatus(lp_mission);
    if (auto99F4FDB0_val == libCamp_ge_MissionStatus_Available) {
        lv_label = (StringExternal("Param/Value/lib_Camp_A3E9888F") + lv_label + StringExternal("Param/Value/lib_Camp_99045681"));
    }
    else if (auto99F4FDB0_val == libCamp_ge_MissionStatus_Completed) {
        lv_label = (StringExternal("Param/Value/lib_Camp_1227BCB1") + lv_label + StringExternal("Param/Value/lib_Camp_1A94B1C4"));
    }
    else if (auto99F4FDB0_val == libCamp_ge_MissionStatus_Locked) {
        lv_label = (StringExternal("Param/Value/lib_Camp_4F1F7787") + lv_label + StringExternal("Param/Value/lib_Camp_6A2207E8"));
    }
    else {
    }
    return lv_label;
}

void libCamp_gf_TS_DebugProgressUpdateDialog () {
    // Variable Declarations
    int lv_indexMission;
    int lv_completed;
    int lv_credits;

    // Automatic Variable Declarations
    int auto7C149CB2_i;
    int auto3DA6F6FF_val;
    int autoBFBF4BE5_val;
    int autoC67F577C_i;

    // Variable Initialization
    lv_indexMission = libCamp_ge_MapID_MapNone;

    // Implementation
    if ((libCamp_gv_tS_DebugProgressCurrentMission == libCamp_ge_MapID_MapNone)) {
        DialogControlSetVisible(libCamp_gv_tS_DebugProgressImageCurrent, PlayerGroupAll(), false);
        DialogControlSetVisible(libCamp_gv_tS_DebugProgressImageOK, PlayerGroupAll(), false);
    }
    else {
        DialogControlSetVisible(libCamp_gv_tS_DebugProgressImageCurrent, PlayerGroupAll(), true);
        DialogControlSetVisible(libCamp_gv_tS_DebugProgressImageOK, PlayerGroupAll(), true);
    }
    auto7C149CB2_i = libCamp_gv_TSC_MISSION_FIRST;
    while (auto7C149CB2_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[auto7C149CB2_i];
        if ((libCamp_gv_tS_DebugProgressMissionLabelsStates[(lv_indexMission)] != c_invalidDialogControlId)) {
            if ((libCamp_gv_tS_DebugProgressCurrentMission == lv_indexMission)) {
                DialogControlSetPositionRelative(libCamp_gv_tS_DebugProgressImageCurrent, PlayerGroupAll(), c_anchorCenter, libCamp_gv_tS_DebugProgressMissionButtons[(lv_indexMission)], c_anchorCenter, 0, 0);
                DialogControlSetPositionRelative(libCamp_gv_tS_DebugProgressImageOK, PlayerGroupAll(), c_anchorCenter, libCamp_gv_tS_DebugProgressButtonOK, c_anchorCenter, 0, 0);
                auto3DA6F6FF_val = libCamp_gf_MissionStatus(libCamp_gf_TS_MapIDFromIndex(lv_indexMission));
                if (auto3DA6F6FF_val == libCamp_ge_MissionStatus_Locked) {
                    libNtve_gf_SetDialogItemColor(libCamp_gv_tS_DebugProgressImageCurrent, ColorWithAlpha(100.00, 0.00, 0.00, 49.80), PlayerGroupAll());
                    libNtve_gf_SetDialogItemColor(libCamp_gv_tS_DebugProgressImageOK, ColorWithAlpha(100.00, 0.00, 0.00, 49.80), PlayerGroupAll());
                    DialogControlSetVisible(libCamp_gv_tS_DebugProgressLabelWarning, PlayerGroupAll(), true);
                    libNtve_gf_SetDialogItemText(libCamp_gv_tS_DebugProgressLabelWarning, StringExternal("Param/Value/lib_Camp_2D52D070"), PlayerGroupAll());
                }
                else if (auto3DA6F6FF_val == libCamp_ge_MissionStatus_Available) {
                    libNtve_gf_SetDialogItemColor(libCamp_gv_tS_DebugProgressImageCurrent, ColorWithAlpha(0.00, 100.00, 0.00, 49.80), PlayerGroupAll());
                    libNtve_gf_SetDialogItemColor(libCamp_gv_tS_DebugProgressImageOK, ColorWithAlpha(0.00, 100.00, 0.00, 49.80), PlayerGroupAll());
                    DialogControlSetVisible(libCamp_gv_tS_DebugProgressLabelWarning, PlayerGroupAll(), false);
                }
                else if (auto3DA6F6FF_val == libCamp_ge_MissionStatus_Completed) {
                    libNtve_gf_SetDialogItemColor(libCamp_gv_tS_DebugProgressImageCurrent, ColorWithAlpha(100.00, 100.00, 0.00, 49.80), PlayerGroupAll());
                    libNtve_gf_SetDialogItemColor(libCamp_gv_tS_DebugProgressImageOK, ColorWithAlpha(100.00, 100.00, 0.00, 49.80), PlayerGroupAll());
                    DialogControlSetVisible(libCamp_gv_tS_DebugProgressLabelWarning, PlayerGroupAll(), true);
                    libNtve_gf_SetDialogItemText(libCamp_gv_tS_DebugProgressLabelWarning, StringExternal("Param/Value/lib_Camp_9D65649A"), PlayerGroupAll());
                }
                else {
                }
            }

            autoBFBF4BE5_val = libCamp_gf_MissionStatus(lv_indexMission);
            if (autoBFBF4BE5_val == libCamp_ge_MissionStatus_Locked) {
                DialogControlSetEnabled(libCamp_gv_tS_DebugProgressMissionButtons[(lv_indexMission)], PlayerGroupAll(), false);
                DialogControlSetEnabled(libCamp_gv_tS_DebugProgressMissionLabelsStates[(lv_indexMission)], PlayerGroupAll(), false);
                DialogControlSetPropertyAsText(libCamp_gv_tS_DebugProgressMissionLabelsStates[(lv_indexMission)], c_triggerControlPropertyText, PlayerGroupAll(), StringExternal("Param/Value/lib_Camp_09B9FD33"));
                DialogControlSetPropertyAsText(libCamp_gv_tS_DebugProgressMissionButtons[(lv_indexMission)], c_triggerControlPropertyText, PlayerGroupAll(), (StringExternal("Param/Value/lib_Camp_ADE1D5F7") + libCamp_gv_tS_MapProgressCheatName[(lv_indexMission)] + StringExternal("Param/Value/lib_Camp_E24C37DB")));
            }
            else if (autoBFBF4BE5_val == libCamp_ge_MissionStatus_Available) {
                DialogControlSetEnabled(libCamp_gv_tS_DebugProgressMissionButtons[lv_indexMission], PlayerGroupAll(), true);
                DialogControlSetEnabled(libCamp_gv_tS_DebugProgressMissionLabelsStates[lv_indexMission], PlayerGroupAll(), true);
                DialogControlSetPropertyAsText(libCamp_gv_tS_DebugProgressMissionLabelsStates[lv_indexMission], c_triggerControlPropertyText, PlayerGroupAll(), (StringExternal("Param/Value/lib_Camp_163C4B6E") + IntToText(libCamp_gf_MissionStatusAge(libCamp_gf_TS_MapIDFromIndex(lv_indexMission), libCamp_ge_MissionStatus_Available)) + StringExternal("Param/Value/lib_Camp_979A20A5")));
                DialogControlSetPropertyAsText(libCamp_gv_tS_DebugProgressMissionButtons[lv_indexMission], c_triggerControlPropertyText, PlayerGroupAll(), (libCamp_gv_tS_MapProgressCheatName[(lv_indexMission)]));
            }
            else if (autoBFBF4BE5_val == libCamp_ge_MissionStatus_Completed) {
                DialogControlSetEnabled(libCamp_gv_tS_DebugProgressMissionButtons[lv_indexMission], PlayerGroupAll(), false);
                DialogControlSetEnabled(libCamp_gv_tS_DebugProgressMissionLabelsStates[lv_indexMission], PlayerGroupAll(), false);
                DialogControlSetPropertyAsText(libCamp_gv_tS_DebugProgressMissionLabelsStates[lv_indexMission], c_triggerControlPropertyText, PlayerGroupAll(), (StringExternal("Param/Value/lib_Camp_A8BD2109") + IntToText(libCamp_gf_MissionStatusAge(libCamp_gf_TS_MapIDFromIndex(lv_indexMission), libCamp_ge_MissionStatus_Completed)) + StringExternal("Param/Value/lib_Camp_0D41C8F1")));
                DialogControlSetPropertyAsText(libCamp_gv_tS_DebugProgressMissionButtons[lv_indexMission], c_triggerControlPropertyText, PlayerGroupAll(), (StringExternal("Param/Value/lib_Camp_6F4D8C3A") + libCamp_gv_tS_MapProgressCheatName[(lv_indexMission)] + StringExternal("Param/Value/lib_Camp_0BFF5F4A")));
            }
            else {
            }
            libNtve_gf_SetDialogItemText(libCamp_gv_tS_DebugProgressMissionLabelsUnits[lv_indexMission], libCamp_gf_TS_DebugProgressFormatMissionUnitUnlocked(libCamp_gf_TS_MapIDFromIndex(lv_indexMission)), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libCamp_gv_tS_DebugProgressMissionLabelsCredits[lv_indexMission], libCamp_gf_TS_DebugProgressFormatMissionCredits(libCamp_gf_TS_MapIDFromIndex(lv_indexMission)), PlayerGroupAll());
        }

        auto7C149CB2_i = auto7C149CB2_i + 1;
    }
    autoC67F577C_i = libCamp_gv_TSC_MISSION_FIRST;
    while (autoC67F577C_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[autoC67F577C_i];
        if ((libCamp_gf_MissionStatusCheck(lv_indexMission, libCamp_ge_MissionStatus_Completed) == true)) {
            lv_completed += 1;
            lv_credits += libCamp_gf_MissionReward(lv_indexMission);
        }

        autoC67F577C_i = autoC67F577C_i + 1;
    }
    libNtve_gf_SetDialogItemText(libCamp_gv_tS_DebugProgressLabelsCompleted, (StringExternal("Param/Value/lib_Camp_7316F447") + IntToText(lv_completed) + StringExternal("Param/Value/lib_Camp_75004B96") + libCamp_gf_FormatCredits(lv_credits, true)), PlayerGroupAll());
    if ((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true)) {
        TriggerEnable(libCamp_gt_TS_DebugProgressLaunchMission, true);
    }

    if ((libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTHorner04, libCamp_ge_MissionStatus_Completed) == true) && (libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTHorner05S, libCamp_ge_MissionStatus_Locked) == true)) {
        DialogControlSetEnabled(libCamp_gv_tS_DebugProgressMissionButtonUnlockSecret, PlayerGroupAll(), true);
    }
    else {
        DialogControlSetEnabled(libCamp_gv_tS_DebugProgressMissionButtonUnlockSecret, PlayerGroupAll(), false);
    }
    DialogControlSetPropertyAsText(libCamp_gv_tS_DebugProgressMissionLabelsRequirement[(libCamp_ge_MapID_MapTTosh01)], c_triggerControlPropertyText, PlayerGroupAll(), libCamp_gf_TS_DebugProgressFormatRequirementsCount(4, StringToText(""), (lv_completed >= 4)));
    DialogControlSetPropertyAsText(libCamp_gv_tS_DebugProgressMissionLabelsRequirement[(libCamp_ge_MapID_MapTTosh03A)], c_triggerControlPropertyText, PlayerGroupAll(), libCamp_gf_TS_DebugProgressFormatRequirementsCount(13, (StringExternal("Param/Value/lib_Camp_CD739472") + libCamp_gv_tS_MapProgressCheatName[(libCamp_ge_MapID_MapTTosh02)] + StringExternal("Param/Value/lib_Camp_4A251AEB")), ((libCamp_gf_CountMissions(libCamp_ge_MissionStatus_Completed) >= 13) || (libCamp_gf_MissionStatusAge(libCamp_ge_MapID_MapTTosh02, libCamp_ge_MissionStatus_Completed) > 2))));
    DialogControlSetPropertyAsText(libCamp_gv_tS_DebugProgressMissionLabelsRequirement[(libCamp_ge_MapID_MapTHorner01)], c_triggerControlPropertyText, PlayerGroupAll(), libCamp_gf_TS_DebugProgressFormatRequirementsCount(6, StringToText(""), (lv_completed >= 6)));
    DialogControlSetPropertyAsText(libCamp_gv_tS_DebugProgressMissionLabelsRequirement[(libCamp_ge_MapID_MapTHanson03A)], c_triggerControlPropertyText, PlayerGroupAll(), libCamp_gf_TS_DebugProgressFormatRequirementsCount(12, (StringExternal("Param/Value/lib_Camp_C951D8B3") + libCamp_gv_tS_MapProgressCheatName[(libCamp_ge_MapID_MapTHanson02)] + StringExternal("Param/Value/lib_Camp_907BEAC2")), ((libCamp_gf_CountMissions(libCamp_ge_MissionStatus_Completed) >= 12) || (libCamp_gf_MissionStatusAge(libCamp_ge_MapID_MapTHanson02, libCamp_ge_MissionStatus_Completed) > 2))));
    DialogControlSetPropertyAsText(libCamp_gv_tS_DebugProgressMissionLabelsRequirement[(libCamp_ge_MapID_MapTZeratul01)], c_triggerControlPropertyText, PlayerGroupAll(), libCamp_gf_TS_DebugProgressFormatRequirementsMission(libCamp_ge_MapID_MapTTychus02, libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTTychus02, libCamp_ge_MissionStatus_Completed)));
    DialogControlSetPropertyAsText(libCamp_gv_tS_DebugProgressMissionLabelsRequirement[(libCamp_ge_MapID_MapTTychus02)], c_triggerControlPropertyText, PlayerGroupAll(), libCamp_gf_TS_DebugProgressFormatRequirementsCount(8, StringToText(""), (lv_completed >= 8)));
    DialogControlSetPropertyAsText(libCamp_gv_tS_DebugProgressMissionLabelsRequirement[(libCamp_ge_MapID_MapTTychus03)], c_triggerControlPropertyText, PlayerGroupAll(), libCamp_gf_TS_DebugProgressFormatRequirementsCount(11, StringToText(""), (lv_completed >= 11)));
    DialogControlSetPropertyAsText(libCamp_gv_tS_DebugProgressMissionLabelsRequirement[(libCamp_ge_MapID_MapTTychus04)], c_triggerControlPropertyText, PlayerGroupAll(), libCamp_gf_TS_DebugProgressFormatRequirementsCount(14, StringToText(""), (lv_completed >= 14)));
}

void libCamp_gf_TS_DebugProgressDisplayDialog (int lp_currentMission, trigger lp_oKCallback, trigger lp_cancelCallback) {
    // Variable Declarations
    int lv_indexMission;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_indexMission = libCamp_ge_MapID_MapNone;

    // Implementation
    if ((libCamp_gv_tS_DebugProgressDialogOpened == true)) {
        return ;
    }

    UISetWorldVisible(PlayerGroupAll(), false);
    libCamp_gf_HideStoryUI(false, true);
    UISetCursorVisible(PlayerGroupAll(), true);
    libCamp_gv_tS_DebugProgressDialogOpened = true;
    libCamp_gv_tS_DebugProgressCurrentMission = lp_currentMission;
    libCamp_gv_tS_DebugProgressExitCallbackOK = lp_oKCallback;
    libCamp_gv_tS_DebugProgressExitCallbackCancel = lp_cancelCallback;
    libCamp_gv_tS_DebugProgressLastMission = libCamp_gf_LastSuccessfulMission();
    libCamp_gv_tS_DebugProgressLastCreditMission = libCamp_ge_MapID_MapNone;
    libCamp_gf_TS_DebugProgressSaveStates();
    libCamp_gf_TS_DebugProgressCreateDialog();
    libCamp_gf_TS_DebugProgressUpdateDialog();
    DialogSetVisible(libCamp_gv_tS_DebugProgressDialog, PlayerGroupAll(), true);
}

void libCamp_gf_TS_DebugProgressSaveStates () {
    // Automatic Variable Declarations
    // Implementation
    BankLoad("TDebugProgress", 1);
    libCamp_gv_tS_DebugProgressBank = BankLastCreated();
    libCamp_gf_TS_SaveTransitionVars(BankLastCreated(), libCamp_gv_tSX_IsSimulation, libCamp_gv_tSX_IsVictoryPlayAgain, false, libCamp_ge_TS_BankSavingType_Normal);
}

void libCamp_gf_TS_DebugProgressRestoreStates () {
    // Automatic Variable Declarations
    // Implementation
    if ((libCamp_gv_tS_DebugProgressBank == null)) {
        return ;
    }

    libCamp_gf_TS_LoadTransitionVars(libCamp_gv_tS_DebugProgressBank, false);
    BankRemove(libCamp_gv_tS_DebugProgressBank);
    libCamp_gv_tS_DebugProgressBank = null;
}

void libCamp_gf_TS_DebugProgressMissionDialogShow () {
    // Variable Declarations
    int lv_indexMission;
    int lv_index;
    int lv_missionCount;
    const int lv_c_WIDTH = 290;
    const int lv_c_BUFFER = 5;

    // Automatic Variable Declarations
    const int auto88A05213_ae = 5;
    const int auto88A05213_ai = 1;
    int autoCC6F9482_i;
    int auto837EA1E9_ae;
    const int auto837EA1E9_ai = 1;

    // Variable Initialization
    lv_indexMission = libCamp_ge_MapID_MapNone;

    // Implementation
    lv_index = 1;
    for ( ; ( (auto88A05213_ai >= 0 && lv_index <= auto88A05213_ae) || (auto88A05213_ai < 0 && lv_index >= auto88A05213_ae) ) ; lv_index += auto88A05213_ai ) {
        libCamp_gv_tS_DebugProgressMissionOptions[lv_index] = libCamp_ge_MapID_MapNone;
    }
    lv_index = 0;
    DialogCreate(1500, 420, c_anchorCenter, 0, 0, true);
    libCamp_gv_tS_DebugProgressMissionLaunchDialog = DialogLastCreated();
    autoCC6F9482_i = libCamp_gv_TSC_MISSION_FIRST;
    while (autoCC6F9482_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[autoCC6F9482_i];
        if ((libCamp_gf_MissionStatusCheck(lv_indexMission, libCamp_ge_MissionStatus_Available) == true)) {
            lv_index += 1;
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_c_WIDTH, 100, c_anchorTopLeft, 50, 50, StringToText(""), libCamp_gf_MissionName(lv_indexMission), "");
            libCamp_gv_tS_DebugProgressMissionLaunchButtons[lv_index] = DialogControlLastCreated();
            libCamp_gv_tS_DebugProgressMissionOptions[lv_index] = lv_indexMission;
        }

        autoCC6F9482_i = autoCC6F9482_i + 1;
    }
    lv_missionCount = lv_index;
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 50, c_anchorTopLeft, 50, 50, StringExternal("Param/Value/lib_Camp_116FA9E9"), Color(100,100,100), false, 2.0);
    auto837EA1E9_ae = lv_missionCount;
    lv_index = 1;
    for ( ; ( (auto837EA1E9_ai >= 0 && lv_index <= auto837EA1E9_ae) || (auto837EA1E9_ai < 0 && lv_index >= auto837EA1E9_ae) ) ; lv_index += auto837EA1E9_ai ) {
        DialogControlSetPosition(libCamp_gv_tS_DebugProgressMissionLaunchButtons[lv_index], PlayerGroupAll(), c_anchorBottomLeft, ((lv_c_WIDTH+lv_c_BUFFER)*ModI((lv_index-1), 4)+lv_c_BUFFER+30), (30+((lv_index/5)*100)));
    }
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 150, 50, c_anchorBottomRight, 20, 20, StringToText(""), StringExternal("Param/Value/lib_Camp_55E536B7"), "");
    libCamp_gv_tS_DebugProgressMissionLaunchCancel = DialogControlLastCreated();
    DialogSetVisible(libCamp_gv_tS_DebugProgressDialog, PlayerGroupAll(), false);
    DialogSetVisible(libCamp_gv_tS_DebugProgressMissionLaunchDialog, PlayerGroupAll(), true);
    TriggerEnable(libCamp_gt_TS_DebugProgressLaunchMission, true);
}

int libCamp_gf_TS_DebugBuyTechNumberOfUnitsUnlocked () {
    // Variable Declarations
    int lv_techSubgroupIndex;
    int lv_count;

    // Automatic Variable Declarations
    int auto8B8005B5_ae;
    const int auto8B8005B5_ai = 1;

    // Variable Initialization

    // Implementation
    lv_count = 0;
    auto8B8005B5_ae = libCamp_gv_TSC_TECHCATEGORY_LAST;
    lv_techSubgroupIndex = libCamp_gv_TSC_TECHGROUP_FIRST;
    for ( ; ( (auto8B8005B5_ai >= 0 && lv_techSubgroupIndex <= auto8B8005B5_ae) || (auto8B8005B5_ai < 0 && lv_techSubgroupIndex >= auto8B8005B5_ae) ) ; lv_techSubgroupIndex += auto8B8005B5_ai ) {
        if ((libCamp_gv_tS_TechGroupState[lv_techSubgroupIndex] == c_purchaseCategoryStateEnabled)) {
            lv_count += 1;
        }

    }
    return lv_count;
}

void libCamp_gf_TS_DebugBuyTechAddPositionedDialogControl (int lp_type, int lp_anchor, int lp_offsetX, int lp_offsetY, int lp_width, int lp_height, text lp_label) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlCreate(DialogLastCreated(), lp_type);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lp_width, lp_height);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), lp_anchor, lp_offsetX, lp_offsetY);
    DialogControlSetPropertyAsText(DialogControlLastCreated(), c_triggerControlPropertyText, PlayerGroupAll(), lp_label);
}

void libCamp_gf_TS_DebugBuyTechCreateDialog () {
    // Automatic Variable Declarations
    // Implementation
    if ((libCamp_gv_tS_DebugBuyTechDialog != c_invalidDialogId)) {
        return ;
    }

    libCamp_gv_tS_DebugBuyTechTotalCredits = (libCamp_gf_StoryCredits() + (libCamp_gf_CostofPurchasedTech() + libCamp_gf_CostofPurchasedMerc()));
    if ((libCamp_gf_MapTypeCheck(libCamp_gv_tS_CurrentMap, libCamp_ge_MapType_Mission) == true)) {
        libCamp_gf_TS_DebugBuyTechCreateDialogMission();
    }
    else if ((libCamp_gf_MapTypeCheck(libCamp_gv_tS_CurrentMap, libCamp_ge_MapType_StoryMode) == true)) {
        libCamp_gf_TS_DebugBuyTechCreateDialogStory();
    }
}

void libCamp_gf_TS_DebugBuyTechCreateDialogMission () {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(900, 600, c_anchorCenter, 0, 0, true);
    DialogSetPosition(DialogLastCreated(), c_anchorCenter, 0, 0);
    libCamp_gv_tS_DebugBuyTechDialog = DialogLastCreated();
    libCamp_gf_TS_DebugBuyTechAddPositionedDialogControl(c_triggerControlTypeLabel, c_anchorTopLeft, 250, 60, 500, 50, StringExternal("Param/Value/lib_Camp_B384F9B3"));
    libCamp_gv_tS_DebugBuyTechTitleUnitCredits = DialogControlLastCreated();
    libCamp_gf_TS_DebugBuyTechAddPositionedDialogControl(c_triggerControlTypeButton, c_anchorTopLeft, 50, 100, 200, 100, StringExternal("Param/Value/lib_Camp_64650F88"));
    libCamp_gv_tS_DebugBuyTechButtonUnitsUnlock = DialogControlLastCreated();
    libCamp_gf_TS_DebugBuyTechAddPositionedDialogControl(c_triggerControlTypeButton, c_anchorTopLeft, 250, 100, 200, 50, StringExternal("Param/Value/lib_Camp_FB867E9B"));
    libCamp_gv_tS_DebugBuyTechButtonUnitsUnlockAll = DialogControlLastCreated();
    libCamp_gf_TS_DebugBuyTechAddPositionedDialogControl(c_triggerControlTypeButton, c_anchorTopLeft, 250, 150, 200, 50, StringExternal("Param/Value/lib_Camp_041EA691"));
    libCamp_gv_tS_DebugBuyTechButtonUnitsReset = DialogControlLastCreated();
    libCamp_gf_TS_DebugBuyTechAddPositionedDialogControl(c_triggerControlTypeLabel, c_anchorTopLeft, 480, 105, 350, 30, StringExternal("Param/Value/lib_Camp_AB48D9DD"));
    libCamp_gv_tS_DebugBuyTechLabelUnitsUnlocked = DialogControlLastCreated();
    libCamp_gf_TS_DebugBuyTechAddPositionedDialogControl(c_triggerControlTypeLabel, c_anchorTopLeft, 480, 130, 350, 30, StringExternal("Param/Value/lib_Camp_FA895517"));
    libCamp_gv_tS_DebugBuyTechLabelCreditsEarned = DialogControlLastCreated();
    libCamp_gf_TS_DebugBuyTechAddPositionedDialogControl(c_triggerControlTypeLabel, c_anchorTopLeft, 480, 170, 350, 30, StringExternal("Param/Value/lib_Camp_B28AA2AB"));
    libCamp_gv_tS_DebugBuyTechLabelMissionNotUnlocked = DialogControlLastCreated();
    libCamp_gf_TS_DebugBuyTechAddPositionedDialogControl(c_triggerControlTypeLabel, c_anchorTopLeft, 480, 170, 350, 30, StringExternal("Param/Value/lib_Camp_3FF2D61A"));
    libCamp_gv_tS_DebugBuyTechLabelMissionExtraSelected = DialogControlLastCreated();
    libCamp_gf_TS_DebugBuyTechAddPositionedDialogControl(c_triggerControlTypeLabel, c_anchorTopLeft, 300, 260, 500, 50, StringExternal("Param/Value/lib_Camp_5573176B"));
    libCamp_gv_tS_DebugBuyTechTitleUpgrades = DialogControlLastCreated();
    libCamp_gf_TS_DebugBuyTechAddPositionedDialogControl(c_triggerControlTypeButton, c_anchorTopLeft, 50, 300, 200, 100, StringExternal("Param/Value/lib_Camp_4E464245"));
    libCamp_gv_tS_DebugBuyTechButtonUpgradeBuy = DialogControlLastCreated();
    libCamp_gf_TS_DebugBuyTechAddPositionedDialogControl(c_triggerControlTypeButton, c_anchorTopLeft, 250, 300, 200, 50, StringExternal("Param/Value/lib_Camp_939FFD8F"));
    libCamp_gv_tS_DebugBuyTechButtonUpgradeBuyAll = DialogControlLastCreated();
    libCamp_gf_TS_DebugBuyTechAddPositionedDialogControl(c_triggerControlTypeButton, c_anchorTopLeft, 250, 350, 200, 50, StringExternal("Param/Value/lib_Camp_552FDB1B"));
    libCamp_gv_tS_DebugBuyTechButtonUpgradeReset = DialogControlLastCreated();
    libCamp_gf_TS_DebugBuyTechAddPositionedDialogControl(c_triggerControlTypeButton, c_anchorTopLeft, 250, 400, 200, 50, StringExternal("Param/Value/lib_Camp_1DD0E0F5"));
    libCamp_gv_tS_DebugBuyTechButtonCreditsIncrease = DialogControlLastCreated();
    libCamp_gf_TS_DebugBuyTechAddPositionedDialogControl(c_triggerControlTypeLabel, c_anchorTopLeft, 480, 305, 350, 30, StringExternal("Param/Value/lib_Camp_A1E733DF"));
    libCamp_gv_tS_DebugBuyTechLabelUpgradeBought = DialogControlLastCreated();
    libCamp_gf_TS_DebugBuyTechAddPositionedDialogControl(c_triggerControlTypeLabel, c_anchorTopLeft, 480, 330, 350, 30, StringExternal("Param/Value/lib_Camp_2A7AC5BE"));
    libCamp_gv_tS_DebugBuyTechLabelCreditsSpent = DialogControlLastCreated();
    libCamp_gf_TS_DebugBuyTechAddPositionedDialogControl(c_triggerControlTypeLabel, c_anchorTopLeft, 480, 380, 350, 30, StringExternal("Param/Value/lib_Camp_4D8FC6AF"));
    libCamp_gv_tS_DebugBuyTechLabelUpgradeAvailable = DialogControlLastCreated();
    libCamp_gf_TS_DebugBuyTechAddPositionedDialogControl(c_triggerControlTypeLabel, c_anchorTopLeft, 480, 405, 350, 30, StringExternal("Param/Value/lib_Camp_E9DAA4D0"));
    libCamp_gv_tS_DebugBuyTechLabelCreditsAvailable = DialogControlLastCreated();
    libCamp_gf_TS_DebugBuyTechAddPositionedDialogControl(c_triggerControlTypeButton, c_anchorBottomRight, 40, 40, 350, 70, StringExternal("Param/Value/lib_Camp_B5560CD3"));
    libCamp_gv_tS_DebugBuyTechButtonSave = DialogControlLastCreated();
}

void libCamp_gf_TS_DebugBuyTechCreateDialogStory () {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(800, 400, c_anchorCenter, 0, 0, true);
    DialogSetPosition(DialogLastCreated(), c_anchorCenter, 0, 0);
    libCamp_gv_tS_DebugBuyTechDialog = DialogLastCreated();
    libCamp_gf_TS_DebugBuyTechAddPositionedDialogControl(c_triggerControlTypeLabel, c_anchorTopLeft, 300, 60, 500, 50, StringExternal("Param/Value/lib_Camp_B5287B7F"));
    libCamp_gv_tS_DebugBuyTechTitleUpgrades = DialogControlLastCreated();
    libCamp_gf_TS_DebugBuyTechAddPositionedDialogControl(c_triggerControlTypeButton, c_anchorTopLeft, 50, 100, 200, 100, StringExternal("Param/Value/lib_Camp_A9957943"));
    libCamp_gv_tS_DebugBuyTechButtonUpgradeBuy = DialogControlLastCreated();
    libCamp_gf_TS_DebugBuyTechAddPositionedDialogControl(c_triggerControlTypeButton, c_anchorTopLeft, 250, 100, 200, 50, StringExternal("Param/Value/lib_Camp_793E97CE"));
    libCamp_gv_tS_DebugBuyTechButtonUpgradeBuyAll = DialogControlLastCreated();
    libCamp_gf_TS_DebugBuyTechAddPositionedDialogControl(c_triggerControlTypeButton, c_anchorTopLeft, 250, 150, 200, 50, StringExternal("Param/Value/lib_Camp_8D19CE7A"));
    libCamp_gv_tS_DebugBuyTechButtonUpgradeReset = DialogControlLastCreated();
    libCamp_gf_TS_DebugBuyTechAddPositionedDialogControl(c_triggerControlTypeButton, c_anchorTopLeft, 270, 200, 180, 50, StringExternal("Param/Value/lib_Camp_BFA2748F"));
    libCamp_gv_tS_DebugBuyTechButtonCreditsIncrease = DialogControlLastCreated();
    libCamp_gf_TS_DebugBuyTechAddPositionedDialogControl(c_triggerControlTypeLabel, c_anchorTopLeft, 480, 105, 350, 30, StringExternal("Param/Value/lib_Camp_2CF89A50"));
    libCamp_gv_tS_DebugBuyTechLabelUpgradeBought = DialogControlLastCreated();
    libCamp_gf_TS_DebugBuyTechAddPositionedDialogControl(c_triggerControlTypeLabel, c_anchorTopLeft, 480, 130, 350, 30, StringExternal("Param/Value/lib_Camp_67B1B353"));
    libCamp_gv_tS_DebugBuyTechLabelCreditsSpent = DialogControlLastCreated();
    libCamp_gf_TS_DebugBuyTechAddPositionedDialogControl(c_triggerControlTypeLabel, c_anchorTopLeft, 480, 180, 350, 30, StringExternal("Param/Value/lib_Camp_082B7F1F"));
    libCamp_gv_tS_DebugBuyTechLabelUpgradeAvailable = DialogControlLastCreated();
    libCamp_gf_TS_DebugBuyTechAddPositionedDialogControl(c_triggerControlTypeLabel, c_anchorTopLeft, 480, 205, 350, 30, StringExternal("Param/Value/lib_Camp_61D57DFB"));
    libCamp_gv_tS_DebugBuyTechLabelCreditsAvailable = DialogControlLastCreated();
    libCamp_gf_TS_DebugBuyTechAddPositionedDialogControl(c_triggerControlTypeButton, c_anchorBottomRight, 40, 40, 350, 70, StringExternal("Param/Value/lib_Camp_C54F5C50"));
    libCamp_gv_tS_DebugBuyTechButtonSave = DialogControlLastCreated();
}

void libCamp_gf_TS_DebugBuyTechUpdateCredits () {
    // Variable Declarations
    int lv_creditsAvailable;
    int lv_creditsSpent;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Camp_4D11FCE3") + IntToText(libCamp_gf_CostofPurchasedTech())), false);
    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Camp_B5F18FFA") + IntToText(libCamp_gf_CostofPurchasedMerc())), false);
    lv_creditsSpent = (libCamp_gf_CostofPurchasedTech() + libCamp_gf_CostofPurchasedMerc());
    lv_creditsAvailable = (libCamp_gv_tS_DebugBuyTechTotalCredits - lv_creditsSpent);
    libCamp_gf_SetStoryCredits(lv_creditsAvailable);
    DialogControlSetPropertyAsText(libCamp_gv_tS_DebugBuyTechLabelUnitsUnlocked, c_triggerControlPropertyText, PlayerGroupAll(), (StringExternal("Param/Value/lib_Camp_87D0B175") + IntToText(libCamp_gf_TS_DebugBuyTechNumberOfUnitsUnlocked()) + StringExternal("Param/Value/lib_Camp_26A45FC8")));
    DialogControlSetPropertyAsText(libCamp_gv_tS_DebugBuyTechLabelCreditsEarned, c_triggerControlPropertyText, PlayerGroupAll(), (StringExternal("Param/Value/lib_Camp_7F0C387C") + libCamp_gf_FormatCredits(libCamp_gv_tS_DebugBuyTechTotalCredits, false) + StringExternal("Param/Value/lib_Camp_46AC1DC8")));
    DialogControlSetVisible(libCamp_gv_tS_DebugBuyTechLabelMissionNotUnlocked, PlayerGroupAll(), false);
    DialogControlSetVisible(libCamp_gv_tS_DebugBuyTechLabelMissionExtraSelected, PlayerGroupAll(), false);
    if ((libCamp_gf_MissionStatusCheck(libCamp_gv_tS_CurrentMap, libCamp_ge_MissionStatus_Locked) == true)) {
        DialogControlSetVisible(libCamp_gv_tS_DebugBuyTechLabelMissionNotUnlocked, PlayerGroupAll(), true);
    }

    if ((libCamp_gf_MissionStatusCheck(libCamp_gv_tS_CurrentMap, libCamp_ge_MissionStatus_Completed) == true)) {
        DialogControlSetVisible(libCamp_gv_tS_DebugBuyTechLabelMissionExtraSelected, PlayerGroupAll(), true);
    }

    DialogControlSetPropertyAsText(libCamp_gv_tS_DebugBuyTechLabelUpgradeBought, c_triggerControlPropertyText, PlayerGroupAll(), (StringExternal("Param/Value/lib_Camp_596DCEBD") + IntToText(libCamp_gf_NumberofPurchasedTech()) + StringExternal("Param/Value/lib_Camp_C05FB34B")));
    DialogControlSetPropertyAsText(libCamp_gv_tS_DebugBuyTechLabelCreditsSpent, c_triggerControlPropertyText, PlayerGroupAll(), (StringExternal("Param/Value/lib_Camp_95FB1DC9") + libCamp_gf_FormatCredits(lv_creditsSpent, false) + StringExternal("Param/Value/lib_Camp_08E5D829")));
    DialogControlSetPropertyAsText(libCamp_gv_tS_DebugBuyTechLabelUpgradeAvailable, c_triggerControlPropertyText, PlayerGroupAll(), (StringExternal("Param/Value/lib_Camp_E601B257") + IntToText(libCamp_gf_NumberofAvailableTech()) + StringExternal("Param/Value/lib_Camp_F93E0AD5")));
    DialogControlSetPropertyAsText(libCamp_gv_tS_DebugBuyTechLabelCreditsAvailable, c_triggerControlPropertyText, PlayerGroupAll(), (StringExternal("Param/Value/lib_Camp_3E36B965") + libCamp_gf_FormatCredits(lv_creditsAvailable, false) + StringExternal("Param/Value/lib_Camp_03C54107")));
}

void libCamp_gf_TS_DebugBuyTechUnitsUnlockAll () {
    // Variable Declarations
    int lv_indexMission;

    // Automatic Variable Declarations
    int autoEA756BD1_i;

    // Variable Initialization
    lv_indexMission = libCamp_ge_MapID_MapNone;

    // Implementation
    libCamp_gf_TS_DefaultTransitionVars(false, false, true, false);
    libCamp_gf_UpdateMissionFlow();
    libCamp_gv_tS_DebugBuyTechTotalCredits = 0;
    autoEA756BD1_i = libCamp_gv_TSC_MISSION_FIRST;
    while (autoEA756BD1_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[autoEA756BD1_i];
        libCamp_gf_TS_CompleteMission(lv_indexMission);
        libCamp_gv_tS_DebugBuyTechTotalCredits += libCamp_gf_MissionReward(lv_indexMission);
        autoEA756BD1_i = autoEA756BD1_i + 1;
    }
    libCamp_gf_TS_UpdateTechStates();
    libCamp_gf_TS_DebugBuyTechUpdateCredits();
    libCamp_gf_TS_DebugBuyTechSaveMissionBank(libCamp_gv_tS_CurrentMap);
    libCamp_gf_ApplyCampaignTech(1);
}

void libCamp_gf_TS_DebugBuyTechUnitsReset () {
    // Automatic Variable Declarations
    // Implementation
    libCamp_gf_TS_DefaultTransitionVars(false, false, true, false);
    libCamp_gf_UpdateMissionFlow();
    libCamp_gv_tS_DebugBuyTechTotalCredits = 0;
    libCamp_gf_TS_UpdateTechStates();
    libCamp_gf_TS_DebugBuyTechUpdateCredits();
    libCamp_gf_TS_DebugBuyTechSaveMissionBank(libCamp_gv_tS_CurrentMap);
    libCamp_gf_ApplyCampaignTech(1);
}

void libCamp_gf_TS_DebugBuyTechUpgradesBuyAll () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libCamp_gf_TS_BuyAllTech();
    libCamp_gf_TS_DebugBuyTechUpdateCredits();
    libCamp_gf_TS_DebugBuyTechSaveMissionBank(libCamp_gv_tS_CurrentMap);
    libCamp_gf_ApplyCampaignTech(1);
}

void libCamp_gf_TS_DebugBuyTechUpgradesReset () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libCamp_gf_TS_ResetTechData();
    libCamp_gf_TS_DebugBuyTechUpdateCredits();
    libCamp_gf_TS_DebugBuyTechSaveMissionBank(libCamp_gv_tS_CurrentMap);
    libCamp_gf_ApplyCampaignTech(1);
}

void libCamp_gf_TS_DebugBuyTechSaveMissionBank (int lp_mission) {
    // Variable Declarations
    string lv_bankName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_bankName = "";

    // Implementation
    if ((lp_mission == libCamp_ge_MapID_MapTStory01)) {
        libCamp_gf_TS_SaveAllTransitionData(false, false, false);
        return ;
    }

    if ((libCamp_gf_MapTypeCheck(lp_mission, libCamp_ge_MapType_Mission) == false)) {
        return ;
    }

    lv_bankName = libCamp_gf_TS_MissionBankName(lp_mission);
    BankLoad(lv_bankName, 1);
    libCamp_gf_TS_SaveTransitionVars(BankLastCreated(), false, false, false, libCamp_ge_TS_BankSavingType_CreateMissionBank);
    libCamp_gf_TS_SaveTransitionVars(BankLastCreated(), false, false, false, libCamp_ge_TS_BankSavingType_SaveSimulation);
    BankSave(BankLastCreated());
}

void libCamp_gf_TS_DebugBuyTechInitPurchasableShortcut () {
    // Automatic Variable Declarations
    // Implementation
    libCamp_gf_TS_DebugBuyTechInitPurchasableEarly();
    libCamp_gf_TS_DebugBuyTechInitPurchasableAverage();
    libCamp_gf_TS_DebugBuyTechInitPurchasableLate();
}

void libCamp_gf_TS_DebugBuyTechInitPurchasableEarly () {
    // Variable Declarations
    int lv_indexMission;
    int lv_indexMerc;
    int lv_indexTech;
    int lv_indexString;
    string lv_secretString;

    // Automatic Variable Declarations
    int autoF4A57F40_i;
    int auto9F46E8A4_i;
    int autoCB97E23C_ae;
    const int autoCB97E23C_ai = 1;

    // Variable Initialization
    lv_indexMission = libCamp_ge_MapID_MapNone;
    lv_indexMerc = libCamp_ge_StoryMercID_MercNone;
    lv_secretString = "";

    // Implementation
    lv_secretString
    lv_secretString = (lv_secretString
    lv_indexString = 0;
    autoF4A57F40_i = libCamp_gv_TSC_MISSION_FIRST;
    while (autoF4A57F40_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[autoF4A57F40_i];
        auto9F46E8A4_i = libCamp_gv_TSC_MERC_FIRST;
        while (auto9F46E8A4_i <= libCamp_gv_TSC_MERC_LAST) {
            lv_indexMerc = libCamp_gv_tS_MercID[auto9F46E8A4_i];
            lv_indexString += 1;
            libCamp_gv_tS_DebugBuyTechMercEarly[(lv_indexMission)][(lv_indexMerc)] = (StringSub(lv_secretString, lv_indexString, lv_indexString) == "1");
            auto9F46E8A4_i = auto9F46E8A4_i + 1;
        }
        autoCB97E23C_ae = libCamp_gv_TSC_TECH_LAST;
        lv_indexTech = libCamp_gv_TSC_TECH_FIRST;
        for ( ; ( (autoCB97E23C_ai >= 0 && lv_indexTech <= autoCB97E23C_ae) || (autoCB97E23C_ai < 0 && lv_indexTech >= autoCB97E23C_ae) ) ; lv_indexTech += autoCB97E23C_ai ) {
            lv_indexString += 1;
            libCamp_gv_tS_DebugBuyTechPurchasableEarly[(lv_indexMission)][lv_indexTech] = (StringSub(lv_secretString, lv_indexString, lv_indexString) == "1");
        }
        autoF4A57F40_i = autoF4A57F40_i + 1;
    }
}

void libCamp_gf_TS_DebugBuyTechInitPurchasableAverage () {
    // Variable Declarations
    int lv_indexMission;
    int lv_indexMerc;
    int lv_indexTech;
    int lv_indexString;
    string lv_secretString;

    // Automatic Variable Declarations
    int auto69EA1826_i;
    int auto4B4AE7FD_i;
    int autoC3EB3099_ae;
    const int autoC3EB3099_ai = 1;

    // Variable Initialization
    lv_indexMission = libCamp_ge_MapID_MapNone;
    lv_indexMerc = libCamp_ge_StoryMercID_MercNone;
    lv_secretString = "";

    // Implementation
    lv_secretString
    lv_secretString = (lv_secretString
    lv_indexString = 0;
    auto69EA1826_i = libCamp_gv_TSC_MISSION_FIRST;
    while (auto69EA1826_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[auto69EA1826_i];
        auto4B4AE7FD_i = libCamp_gv_TSC_MERC_FIRST;
        while (auto4B4AE7FD_i <= libCamp_gv_TSC_MERC_LAST) {
            lv_indexMerc = libCamp_gv_tS_MercID[auto4B4AE7FD_i];
            lv_indexString += 1;
            libCamp_gv_tS_DebugBuyTechMercAverage[(lv_indexMission)][(lv_indexMerc)] = (StringSub(lv_secretString, lv_indexString, lv_indexString) == "1");
            auto4B4AE7FD_i = auto4B4AE7FD_i + 1;
        }
        autoC3EB3099_ae = libCamp_gv_TSC_TECH_LAST;
        lv_indexTech = libCamp_gv_TSC_TECH_FIRST;
        for ( ; ( (autoC3EB3099_ai >= 0 && lv_indexTech <= autoC3EB3099_ae) || (autoC3EB3099_ai < 0 && lv_indexTech >= autoC3EB3099_ae) ) ; lv_indexTech += autoC3EB3099_ai ) {
            lv_indexString += 1;
            libCamp_gv_tS_DebugBuyTechPurchasableAverage[(lv_indexMission)][lv_indexTech] = (StringSub(lv_secretString, lv_indexString, lv_indexString) == "1");
        }
        auto69EA1826_i = auto69EA1826_i + 1;
    }
}

void libCamp_gf_TS_DebugBuyTechInitPurchasableLate () {
    // Variable Declarations
    int lv_indexMission;
    int lv_indexMerc;
    int lv_indexTech;
    int lv_indexString;
    string lv_secretString;

    // Automatic Variable Declarations
    int auto722F357B_i;
    int auto3A9D14E8_i;
    int auto081AA389_ae;
    const int auto081AA389_ai = 1;

    // Variable Initialization
    lv_indexMission = libCamp_ge_MapID_MapNone;
    lv_indexMerc = libCamp_ge_StoryMercID_MercNone;
    lv_secretString = "";

    // Implementation
    lv_secretString
    lv_secretString = (lv_secretString
    lv_indexString = 0;
    auto722F357B_i = libCamp_gv_TSC_MISSION_FIRST;
    while (auto722F357B_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[auto722F357B_i];
        auto3A9D14E8_i = libCamp_gv_TSC_MERC_FIRST;
        while (auto3A9D14E8_i <= libCamp_gv_TSC_MERC_LAST) {
            lv_indexMerc = libCamp_gv_tS_MercID[auto3A9D14E8_i];
            lv_indexString += 1;
            libCamp_gv_tS_DebugBuyTechMercLate[(lv_indexMission)][(lv_indexMerc)] = (StringSub(lv_secretString, lv_indexString, lv_indexString) == "1");
            auto3A9D14E8_i = auto3A9D14E8_i + 1;
        }
        auto081AA389_ae = libCamp_gv_TSC_TECH_LAST;
        lv_indexTech = libCamp_gv_TSC_TECH_FIRST;
        for ( ; ( (auto081AA389_ai >= 0 && lv_indexTech <= auto081AA389_ae) || (auto081AA389_ai < 0 && lv_indexTech >= auto081AA389_ae) ) ; lv_indexTech += auto081AA389_ai ) {
            lv_indexString += 1;
            libCamp_gv_tS_DebugBuyTechPurchasableLate[(lv_indexMission)][lv_indexTech] = (StringSub(lv_secretString, lv_indexString, lv_indexString) == "1");
        }
        auto722F357B_i = auto722F357B_i + 1;
    }
}

void libCamp_gf_TS_DebugBuyTechEarly () {
    // Variable Declarations
    int lv_index;
    int lv_indexMission;
    int lv_indexMerc;

    // Automatic Variable Declarations
    int auto391CF171_i;

    // Variable Initialization
    lv_indexMission = libCamp_ge_MapID_MapNone;
    lv_indexMerc = libCamp_ge_StoryMercID_MercNone;

    // Implementation
    libCamp_gf_TS_DefaultTransitionVars(false, false, true, false);
    libCamp_gf_UpdateMissionFlow();
    libCamp_gv_tS_DebugBuyTechTotalCredits = 0;
    auto391CF171_i = libCamp_gv_TSC_MISSION_FIRST;
    while (auto391CF171_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[auto391CF171_i];
        if ((libCamp_gv_tS_DebugProgressMissionPathEarly[(libCamp_gv_tS_CurrentMap)][(lv_indexMission)] == true)) {
            libCamp_gf_TS_CompleteMission(lv_indexMission);
            libCamp_gv_tS_DebugBuyTechTotalCredits += libCamp_gf_MissionReward(lv_indexMission);
        }

        auto391CF171_i = auto391CF171_i + 1;
    }
    libCamp_gf_TS_UpdateTechStates();
    libCamp_gf_TS_DebugBuyTechUpdateCredits();
    libCamp_gf_TS_SaveAllTransitionData(false, false, false);
    libCamp_gf_ApplyCampaignTech(1);
}

void libCamp_gf_TS_DebugBuyTechAverage () {
    // Variable Declarations
    int lv_index;
    int lv_indexMission;
    int lv_indexMerc;

    // Automatic Variable Declarations
    int auto13CE5715_i;

    // Variable Initialization
    lv_indexMission = libCamp_ge_MapID_MapNone;
    lv_indexMerc = libCamp_ge_StoryMercID_MercNone;

    // Implementation
    libCamp_gf_TS_DefaultTransitionVars(false, false, true, false);
    libCamp_gf_UpdateMissionFlow();
    libCamp_gv_tS_DebugBuyTechTotalCredits = 0;
    auto13CE5715_i = libCamp_gv_TSC_MISSION_FIRST;
    while (auto13CE5715_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[auto13CE5715_i];
        if ((libCamp_gv_tS_DebugProgressMissionPathAverage[(libCamp_gv_tS_CurrentMap)][(lv_indexMission)] == true)) {
            libCamp_gf_TS_CompleteMission(lv_indexMission);
            libCamp_gv_tS_DebugBuyTechTotalCredits += libCamp_gf_MissionReward(lv_indexMission);
        }

        auto13CE5715_i = auto13CE5715_i + 1;
    }
    libCamp_gf_TS_UpdateTechStates();
    libCamp_gf_TS_DebugBuyTechUpdateCredits();
    libCamp_gf_TS_SaveAllTransitionData(false, false, false);
    libCamp_gf_ApplyCampaignTech(1);
}

void libCamp_gf_TS_DebugBuyTechLate () {
    // Variable Declarations
    int lv_index;
    int lv_indexMission;
    int lv_indexMerc;

    // Automatic Variable Declarations
    int auto74DB673A_i;

    // Variable Initialization
    lv_indexMission = libCamp_ge_MapID_MapNone;
    lv_indexMerc = libCamp_ge_StoryMercID_MercNone;

    // Implementation
    libCamp_gf_TS_DefaultTransitionVars(false, false, true, false);
    libCamp_gf_UpdateMissionFlow();
    libCamp_gv_tS_DebugBuyTechTotalCredits = 0;
    auto74DB673A_i = libCamp_gv_TSC_MISSION_FIRST;
    while (auto74DB673A_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[auto74DB673A_i];
        if ((libCamp_gv_tS_DebugProgressMissionPathLate[(libCamp_gv_tS_CurrentMap)][(lv_indexMission)] == true)) {
            libCamp_gf_TS_CompleteMission(lv_indexMission);
            libCamp_gv_tS_DebugBuyTechTotalCredits += libCamp_gf_MissionReward(lv_indexMission);
        }

        auto74DB673A_i = auto74DB673A_i + 1;
    }
    libCamp_gf_TS_UpdateTechStates();
    libCamp_gf_TS_DebugBuyTechUpdateCredits();
    libCamp_gf_TS_SaveAllTransitionData(false, false, false);
    libCamp_gf_ApplyCampaignTech(1);
}

void libCamp_gf_PurchaseStorymodeTech () {
    // Automatic Variable Declarations
    int autoAAC23FD3_val;

    // Implementation
    if ((GameIsTransitionMap() == true)) {
        return ;
    }

    if (((libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTRaynor01) || (libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTRaynor02) || (libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTRaynor03) || (libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTZeratul01) || (libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTZeratul02) || (libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTZeratul03) || (libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTZeratul04))) {
        libCamp_gf_TS_DebugBuyTechAverage();
        TriggerExecute(libCamp_gv_tS_TechLimitsCallback, true, false);
        return ;
    }

    autoAAC23FD3_val = libCamp_gv_tSX_DebugTechCheatOption;
    if (autoAAC23FD3_val == libCamp_ge_TS_DebugTechCheatOption_Early) {
        libCamp_gf_TS_DebugBuyTechEarly();
    }
    else if (autoAAC23FD3_val == libCamp_ge_TS_DebugTechCheatOption_Average) {
        libCamp_gf_TS_DebugBuyTechAverage();
    }
    else if (autoAAC23FD3_val == libCamp_ge_TS_DebugTechCheatOption_Late) {
        libCamp_gf_TS_DebugBuyTechLate();
    }
    else if (autoAAC23FD3_val == libCamp_ge_TS_DebugTechCheatOption_Custom) {
        libCamp_gf_ApplyCampaignTech(1);
    }
    else {
        libCamp_gf_TS_DebugBuyTechAverage();
    }
    TriggerExecute(libCamp_gv_tS_TechLimitsCallback, true, false);
}

int libCamp_gf_TS_DebugConvertIntegerToTechCheatOption (int lp_option) {
    // Automatic Variable Declarations
    // Implementation
    return lp_option;
}

void libCamp_gf_TS_DebugSetTechCheatOption (int lp_option) {
    // Automatic Variable Declarations
    // Implementation
    libCamp_gv_tSX_DebugTechCheatOption = lp_option;
    libCamp_gf_TS_DebugUpdateTechCustomDialog();
}

void libCamp_gf_TS_DebugUpdateTechCustomDialog () {
    // Automatic Variable Declarations
    int auto03396B8F_val;

    // Implementation
    if ((libCamp_gv_tS_DebugTechCustomButton != c_invalidDialogControlId)) {
        auto03396B8F_val = libCamp_gv_tSX_DebugTechCheatOption;
        if (auto03396B8F_val == libCamp_ge_TS_DebugTechCheatOption_Early) {
            libNtve_gf_SetDialogItemText(libCamp_gv_tS_DebugTechCustomButton, StringExternal("Param/Value/lib_Camp_928A8863"), PlayerGroupAll());
        }
        else if (auto03396B8F_val == libCamp_ge_TS_DebugTechCheatOption_Average) {
            libNtve_gf_SetDialogItemText(libCamp_gv_tS_DebugTechCustomButton, StringExternal("Param/Value/lib_Camp_66A6F8CB"), PlayerGroupAll());
        }
        else if (auto03396B8F_val == libCamp_ge_TS_DebugTechCheatOption_Late) {
            libNtve_gf_SetDialogItemText(libCamp_gv_tS_DebugTechCustomButton, StringExternal("Param/Value/lib_Camp_3E978A0E"), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemText(libCamp_gv_tS_DebugTechCustomButton, StringExternal("Param/Value/lib_Camp_41D9C84B"), PlayerGroupAll());
        }
    }

}

text libCamp_gf_TS_DebugBoolToText (bool lp_bool) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_bool == true)) {
        return StringExternal("Param/Value/lib_Camp_B74264BC");
    }
    else {
        return StringExternal("Param/Value/lib_Camp_F30C8360");
    }
}

void libCamp_gf_RegisterFootageRecording (trigger lp_callback) {
    // Automatic Variable Declarations
    // Implementation
    libCamp_gv_tS_FootageRecordingCallback = lp_callback;
    if ((GameIsTestMap(true) == true)) {
        libCamp_gf_TS_FootageRecording();
        ConsoleCommand("exit", true, true);
    }

}

void libCamp_gf_TS_FootageRecording () {
    // Automatic Variable Declarations
    // Implementation
    if (((libCamp_gv_tS_FootageRecordingCallback == null) || (libCamp_gf_MapTypeCheck(libCamp_gv_tS_CurrentMap, libCamp_ge_MapType_Mission) == false))) {
        return ;
    }

    TriggerExecute(libCamp_gv_tS_FootageRecordingCallback, true, true);
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: _Zerg Drop Pod
//--------------------------------------------------------------------------------------------------
bool libCamp_gt__ZergDropPod_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf__ZergDropPod(libCamp_gv__TP_DropPod_Location, libCamp_gv__TP_DropPod_Units);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt__ZergDropPod_Init () {
    libCamp_gt__ZergDropPod = TriggerCreate("libCamp_gt__ZergDropPod_Func");
    TriggerEnable(libCamp_gt__ZergDropPod, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: _Terran Drop Pod
//--------------------------------------------------------------------------------------------------
bool libCamp_gt__TerranDropPod_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf__TerranDropPod(libCamp_gv__TP_DropPod_Location, libCamp_gv__TP_DropPod_Units);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt__TerranDropPod_Init () {
    libCamp_gt__TerranDropPod = TriggerCreate("libCamp_gt__TerranDropPod_Func");
    TriggerEnable(libCamp_gt__TerranDropPod, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_MissionVictoryCallbackBlockActionQueueOneMinute
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_TS_MissionVictoryCallbackBlockActionQueueOneMinute_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gv_tS_MissionVictoryActionQueyeEmpty = true;
    Wait(60.0, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_TS_MissionVictoryCallbackBlockActionQueueOneMinute_Init () {
    libCamp_gt_TS_MissionVictoryCallbackBlockActionQueueOneMinute = TriggerCreate("libCamp_gt_TS_MissionVictoryCallbackBlockActionQueueOneMinute_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_MissionVictoryCallbackBlockActionQueue
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_TS_MissionVictoryCallbackBlockActionQueue_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gv_tS_MissionVictoryActionQueyeEmpty = true;
    while (true) {
        Wait(10.0, c_timeReal);
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_TS_MissionVictoryCallbackBlockActionQueue_Init () {
    libCamp_gt_TS_MissionVictoryCallbackBlockActionQueue = TriggerCreate("libCamp_gt_TS_MissionVictoryCallbackBlockActionQueue_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_Abort Mission
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_TS_AbortMission_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_gameOverType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_gameOverType = c_gameOverVictory;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapTValerian03) && (libCamp_gv_tSX_IsVictoryPlayAgain == true) && (libCamp_gv_tSX_IsSimulation == false)) {
        UISetWorldVisible(PlayerGroupAll(), false);
        libNtve_gf_HideGameUI(false, PlayerGroupAll());
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleUI, true);
        UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
        TransmissionClearAll();
        ConversationDataStop();
        SoundStopAllTriggerSounds(false);
        libCamp_gf_TS_CampaignVictory();
    }
    else {
        libCamp_gf_PrepareForStoryMode(c_gameOverDefeat, libCamp_gf_TS_CampaignDifficulty());
        GameOver(EventPlayer(), c_gameOverDefeat, false, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_TS_AbortMission_Init () {
    libCamp_gt_TS_AbortMission = TriggerCreate("libCamp_gt_TS_AbortMission_Func");
    TriggerAddEventAbortMission(libCamp_gt_TS_AbortMission, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: _CB_Chat Bubble Activated
//--------------------------------------------------------------------------------------------------
bool libCamp_gt__CB_ChatBubbleActivated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gv__CB_TP_UNIT = EventUnit();
    libCamp_gv__CB_TP_PLAYER = EventPlayer();
    libCamp_gv__CB_TP_FORCED = false;
    TriggerExecute(libCamp_gt__CB_ActivateChatBubble, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt__CB_ChatBubbleActivated_Init () {
    libCamp_gt__CB_ChatBubbleActivated = TriggerCreate("libCamp_gt__CB_ChatBubbleActivated_Func");
    TriggerEnable(libCamp_gt__CB_ChatBubbleActivated, false);
    TriggerAddEventUnitSelected(libCamp_gt__CB_ChatBubbleActivated, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: _CB_Activate Chat Bubble
//--------------------------------------------------------------------------------------------------
bool libCamp_gt__CB_ActivateChatBubble_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_unitIndex;
    int lv_playerIndex;
    bool lv_forced;
    unitgroup lv_tempUnitGroup;
    unit lv_chatBubbleTarget;
    int lv_chatBubbleBackup;
    int lv_lineIndex;
    int lv_waitSoundID;
    fixed lv_waitDuration;

    // Automatic Variable Declarations
    int auto441475D3_val;

    // Variable Initialization
    lv_tempUnitGroup = UnitGroupEmpty();
    lv_chatBubbleBackup = c_textTagNone;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unitIndex = libCamp_gf__CB_Unit_GetIndex(libCamp_gv__CB_TP_UNIT);
    lv_playerIndex = libCamp_gv__CB_TP_PLAYER;
    lv_forced = libCamp_gv__CB_TP_FORCED;
    if ((lv_unitIndex <= 0)) {
        return true;
    }

    if ((lv_playerIndex <= 0)) {
        return true;
    }

    if (((libCamp_gv__CB_Unit_UnitLine_StartIndex[lv_unitIndex][lv_playerIndex] <= 0) || (libCamp_gv__CB_Unit_LineCount[lv_unitIndex][lv_playerIndex] <= 0))) {
        return true;
    }

    if ((lv_forced == false)) {
        if ((libCamp_gv__CB_Unit_ActivationPlayerGroup[lv_unitIndex] == null)) {
            return true;
        }

        if ((PlayerGroupHasPlayer(libCamp_gv__CB_Unit_ActivationPlayerGroup[lv_unitIndex], lv_playerIndex) == false)) {
            return true;
        }

    }

    if ((libCamp_gv__CB_Unit_ActivationDistance[lv_unitIndex][lv_playerIndex] <= 0)) {
        lv_chatBubbleTarget = null;
    }
    else {
        lv_tempUnitGroup = UnitGroup(null, lv_playerIndex, RegionCircle(UnitGetPosition(libCamp_gv__CB_Unit[lv_unitIndex]), libCamp_gv__CB_Unit_ActivationDistance[lv_unitIndex][lv_playerIndex]), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible) | (1 << c_targetFilterItem) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_chatBubbleTarget = libNtve_gf_ClosestUnitToPoint(UnitGetPosition(libCamp_gv__CB_Unit[lv_unitIndex]), lv_tempUnitGroup);
        if (((lv_forced == false) && (lv_chatBubbleTarget == null))) {
            return true;
        }

    }
    libCamp_gf__CB_Current_Remove(lv_playerIndex);
    libCamp_gf__CB_Current_Create(lv_unitIndex, lv_playerIndex, lv_chatBubbleTarget);
    lv_chatBubbleBackup = libCamp_gv__CB_Current_ChatBubble[lv_playerIndex];
    lv_lineIndex = libCamp_gv__CB_UnitLine[libCamp_gf__CB_Unit_GetLineCurrentIndex(lv_unitIndex, lv_playerIndex)];
    if ((libCamp_gv__CB_Current_Sound[lv_playerIndex] == null)) {
        lv_waitDuration = 0.0;
        auto441475D3_val = libCamp_gv__CB_Line_DurationType[lv_lineIndex];
        if (auto441475D3_val == c_transmissionDurationAdd) {
            lv_waitDuration += libCamp_gv__CB_Line_Duration[lv_lineIndex];
        }
        else if (auto441475D3_val == c_transmissionDurationSet) {
            lv_waitDuration = libCamp_gv__CB_Line_Duration[lv_lineIndex];
        }
        else if (auto441475D3_val == c_transmissionDurationSub) {
            lv_waitDuration -= libCamp_gv__CB_Line_Duration[lv_lineIndex];
        }
        else {
        }
        lv_waitDuration = MaxF(lv_waitDuration, 0.0);
        Wait(lv_waitDuration, c_timeReal);
    }
    else {
        libCamp_gf__CB_StarWaitingSound(libCamp_gv__CB_Current_Sound[lv_playerIndex], libCamp_gv__CB_Line_Duration[lv_lineIndex], libCamp_gv__CB_Line_DurationType[lv_lineIndex]);
        lv_waitSoundID = libCamp_gf__CB_LastWaitSound();
        while (!((libCamp_gv__CB_WaitSoundDone[libCamp_gv__CB_WaitSoundID] == true))) {
            Wait(0.25, c_timeReal);
        }
    }
    if (((lv_unitIndex == libCamp_gv__CB_Current_UnitIndex[lv_playerIndex]) && (lv_chatBubbleBackup == libCamp_gv__CB_Current_ChatBubble[lv_playerIndex]))) {
        libCamp_gf__CB_Current_Remove(lv_playerIndex);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt__CB_ActivateChatBubble_Init () {
    libCamp_gt__CB_ActivateChatBubble = TriggerCreate("libCamp_gt__CB_ActivateChatBubble_Func");
    TriggerEnable(libCamp_gt__CB_ActivateChatBubble, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: _CB_Chat Bubble Unit Died
//--------------------------------------------------------------------------------------------------
bool libCamp_gt__CB_ChatBubbleUnitDied_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_unitIndex;
    int lv_playerIndex;

    // Automatic Variable Declarations
    const int autoB41B135C_ae = libCamp_gv__CBC_PLAYERMAX;
    const int autoB41B135C_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unitIndex = libCamp_gf__CB_Unit_GetIndex(EventUnit());
    if ((lv_unitIndex <= 0)) {
        return true;
    }

    lv_playerIndex = 1;
    for ( ; ( (autoB41B135C_ai >= 0 && lv_playerIndex <= autoB41B135C_ae) || (autoB41B135C_ai < 0 && lv_playerIndex >= autoB41B135C_ae) ) ; lv_playerIndex += autoB41B135C_ai ) {
        if ((libCamp_gv__CB_Current_UnitIndex[lv_playerIndex] == lv_unitIndex)) {
            libCamp_gf__CB_Current_Remove(lv_playerIndex);
        }

        libCamp_gf_ClearAllChatBubbleLinesFromUnit(libCamp_gv__CB_Unit[lv_unitIndex], lv_playerIndex);
    }
    libCamp_gf__CB_Unit_RemoveByIndex(lv_unitIndex);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt__CB_ChatBubbleUnitDied_Init () {
    libCamp_gt__CB_ChatBubbleUnitDied = TriggerCreate("libCamp_gt__CB_ChatBubbleUnitDied_Func");
    TriggerEnable(libCamp_gt__CB_ChatBubbleUnitDied, false);
    TriggerAddEventUnitDied(libCamp_gt__CB_ChatBubbleUnitDied, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: _CB_ShowChatBubbleOnUnit
//--------------------------------------------------------------------------------------------------
bool libCamp_gt__CB_ShowChatBubbleOnUnit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_p_Unit;
    int lv_p_Player;
    text lv_p_Text;
    soundlink lv_p_SoundLink;
    fixed lv_p_Duration;
    int lv_p_DurationType;
    int lv_p_TextTag;
    sound lv_sound;
    fixed lv_waitDuration;
    int lv_waitSoundID;

    // Automatic Variable Declarations
    int autoB23623D2_val;

    // Variable Initialization
    lv_p_Text = StringToText("");
    lv_p_SoundLink = SoundLink("EditorDefaultSound", -1);
    lv_p_DurationType = c_timerWindowNone;
    lv_p_TextTag = c_textTagNone;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_p_Unit = libCamp_gv__CB_TP_UNIT;
    lv_p_Player = libCamp_gv__CB_TP_PLAYER;
    lv_p_Text = libCamp_gv__CB_TP_TEXT;
    lv_p_SoundLink = libCamp_gv__CB_TP_SOUNDLINK;
    lv_p_Duration = libCamp_gv__CB_TP_DURATION;
    lv_p_DurationType = libCamp_gv__CB_TP_DURATIONTYPE;
    lv_p_TextTag = libCamp_gv__CB_TP_TEXTTAG;
    TextTagAttachToUnit(lv_p_TextTag, lv_p_Unit, 2.5);
    TextTagSetAlignment(lv_p_TextTag, c_alignCenter, c_alignBottom);
    TextTagSetMaxSize(lv_p_TextTag, 25.0, 40.0);
    TextTagSetColor(lv_p_TextTag, c_textTagColorText, Color(0,0,0));
    TextTagSetTextShadow(lv_p_TextTag, false);
    TextTagSetTime(lv_p_TextTag, c_textTagTimeDuration, 360000.0);
    TextTagShowBackground(lv_p_TextTag, true);
    TextTagSetBackgroundBorderSize(lv_p_TextTag, 1.0, 1.0);
    TextTagSetColor(lv_p_TextTag, c_textTagColorBackground, Color(100,100,100));
    TextTagSetBackgroundImage(lv_p_TextTag, "Assets/Textures/border-tooltip-game.dds", true);
    TextTagShow(lv_p_TextTag, PlayerGroupSingle(lv_p_Player), true);
    if ((lv_p_SoundLink != null)) {
        SoundPlayOnUnit(lv_p_SoundLink, PlayerGroupSingle(lv_p_Player), lv_p_Unit, 0.0, 100.0, 0.0);
        lv_sound = SoundLastPlayed();
    }
    else {
        lv_waitDuration = 0.0;
        autoB23623D2_val = lv_p_DurationType;
        if (autoB23623D2_val == c_transmissionDurationAdd) {
            lv_waitDuration += lv_p_Duration;
        }
        else if (autoB23623D2_val == c_transmissionDurationSet) {
            lv_waitDuration = lv_p_Duration;
        }
        else if (autoB23623D2_val == c_transmissionDurationSub) {
            lv_waitDuration -= lv_p_Duration;
        }
        else {
        }
        lv_p_Duration = MaxF(lv_waitDuration, 0.0);
        lv_p_DurationType = c_transmissionDurationSet;
        lv_sound = null;
    }
    libCamp_gf__CB_StarWaitingSound(lv_sound, lv_p_Duration, lv_p_DurationType);
    lv_waitSoundID = libCamp_gf__CB_LastWaitSound();
    while (true) {
        if (((UnitIsAlive(lv_p_Unit) == false) || (libCamp_gv__CB_WaitSoundDone[lv_waitSoundID] == true))) {
            TextTagDestroy(lv_p_TextTag);
            SoundStop(lv_sound, false);
            break;
        }

        Wait(0.25, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt__CB_ShowChatBubbleOnUnit_Init () {
    libCamp_gt__CB_ShowChatBubbleOnUnit = TriggerCreate("libCamp_gt__CB_ShowChatBubbleOnUnit_Func");
    TriggerEnable(libCamp_gt__CB_ShowChatBubbleOnUnit, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: chat bubble debug
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_chatbubbledebug_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_selectedUnit;
    int lv_unitIndex;
    int lv_index;

    // Automatic Variable Declarations
    int autoA127B73E_ae;
    const int autoA127B73E_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_selectedUnit = UnitGroupUnit(UnitGroupSelected(1), 1);
    if ((lv_selectedUnit == null)) {
        return true;
    }

    lv_unitIndex = libCamp_gf__CB_Unit_GetIndex(lv_selectedUnit);
    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Camp_B3A6196F") + IntToText(lv_unitIndex)), true);
    if ((lv_unitIndex <= 0)) {
        return true;
    }

    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Camp_98835FF7") + IntToText(libCamp_gv__CB_Unit_UnitLine_StartIndex[lv_unitIndex][1])), true);
    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Camp_2F4EA627") + IntToText(libCamp_gv__CB_Unit_LineCount[lv_unitIndex][1])), true);
    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Camp_14718A43") + IntToText(libCamp_gv__CB_Unit_LineCurrent[lv_unitIndex][1])), true);
    if ((libCamp_gv__CB_Unit_LineCount[lv_unitIndex][1] > 0)) {
        autoA127B73E_ae = libCamp_gv__CB_Unit_LineCount[lv_unitIndex][1];
        lv_index = 1;
        for ( ; ( (autoA127B73E_ai >= 0 && lv_index <= autoA127B73E_ae) || (autoA127B73E_ai < 0 && lv_index >= autoA127B73E_ae) ) ; lv_index += autoA127B73E_ai ) {
            TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Camp_E9983B8B") + IntToText(lv_index) + StringExternal("Param/Value/lib_Camp_4D40FB0A") + libCamp_gv__CB_Line[libCamp_gv__CB_UnitLine[((libCamp_gv__CB_Unit_UnitLine_StartIndex[lv_unitIndex][1] + lv_index) - 1)]]), true);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_chatbubbledebug_Init () {
    libCamp_gt_chatbubbledebug = TriggerCreate("libCamp_gt_chatbubbledebug_Func");
    TriggerAddEventChatMessage(libCamp_gt_chatbubbledebug, 1, "-cb", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: _CB_WaitForSound
//--------------------------------------------------------------------------------------------------
bool libCamp_gt__CB_WaitForSound_Func (bool testConds, bool runActions) {
    // Variable Declarations
    sound lv_p_Sound;
    fixed lv_p_Duration;
    int lv_p_DurationType;
    int lv_p_WaitSoundID;

    // Automatic Variable Declarations
    int autoAB1FD6CC_val;

    // Variable Initialization
    lv_p_DurationType = c_timerWindowNone;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_p_Sound = libCamp_gv__CB_TP_WAITSOUND;
    lv_p_Duration = libCamp_gv__CB_TP_WAITSOUND_DURATION;
    lv_p_DurationType = libCamp_gv__CB_TP_WAITSOUND_DURATIONTYPE;
    lv_p_WaitSoundID = libCamp_gv__CB_TP_WAITSOUND_ID;
    autoAB1FD6CC_val = lv_p_DurationType;
    if (autoAB1FD6CC_val == c_transmissionDurationAdd) {
        SoundWait(lv_p_Sound, 0.0, c_soundOffsetEnd);
        Wait(lv_p_Duration, c_timeReal);
    }
    else if (autoAB1FD6CC_val == c_transmissionDurationSet) {
        Wait(lv_p_Duration, c_timeReal);
    }
    else if (autoAB1FD6CC_val == c_transmissionDurationSub) {
        SoundWait(lv_p_Sound, lv_p_Duration, c_soundOffsetEnd);
    }
    else {
    }
    libCamp_gv__CB_WaitSoundDone[lv_p_WaitSoundID] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt__CB_WaitForSound_Init () {
    libCamp_gt__CB_WaitForSound = TriggerCreate("libCamp_gt__CB_WaitForSound_Func");
    TriggerEnable(libCamp_gt__CB_WaitForSound, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: _MsgDlgButtonClicked
//--------------------------------------------------------------------------------------------------
bool libCamp_gt__MsgDlgButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCamp_gv__MsgDlgButton))) {
            return false;
        }

        if (!((libCamp_gv__MsgDlgOpened == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogSetVisible(libCamp_gv__MsgDlg, PlayerGroupAll(), false);
    libCamp_gv__MsgDlgOpened = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt__MsgDlgButtonClicked_Init () {
    libCamp_gt__MsgDlgButtonClicked = TriggerCreate("libCamp_gt__MsgDlgButtonClicked_Func");
    TriggerEnable(libCamp_gt__MsgDlgButtonClicked, false);
    TriggerAddEventDialogControl(libCamp_gt__MsgDlgButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_CampaignTrialDialogQuitClicked
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_ZS_CampaignTrialDialogQuitClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCamp_gv_zS_CampaignTrialEndQuitButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_ZS_CloseCampaignTrialDialog();
    GameSetNextMap("");
    GameOver(1, c_gameOverVictory, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_ZS_CampaignTrialDialogQuitClicked_Init () {
    libCamp_gt_ZS_CampaignTrialDialogQuitClicked = TriggerCreate("libCamp_gt_ZS_CampaignTrialDialogQuitClicked_Func");
    TriggerEnable(libCamp_gt_ZS_CampaignTrialDialogQuitClicked, false);
    TriggerAddEventDialogControl(libCamp_gt_ZS_CampaignTrialDialogQuitClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_CampaignTrialDialogUpgradeClicked
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_ZS_CampaignTrialDialogUpgradeClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCamp_gv_zS_CampaignTrialEndUpgradeButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UILaunchNydusLink(PlayerGroupSingle(EventPlayer()), c_nydusLinkAccountTrialUpgrade);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_ZS_CampaignTrialDialogUpgradeClicked_Init () {
    libCamp_gt_ZS_CampaignTrialDialogUpgradeClicked = TriggerCreate("libCamp_gt_ZS_CampaignTrialDialogUpgradeClicked_Func");
    TriggerEnable(libCamp_gt_ZS_CampaignTrialDialogUpgradeClicked, false);
    TriggerAddEventDialogControl(libCamp_gt_ZS_CampaignTrialDialogUpgradeClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_MercNewToAvailable
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_TS_MercNewToAvailable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCamp_gf_MercStatusCheck(libCamp_gv_tS_MercID[(MercenaryGetSelected(1))], libCamp_ge_StoryMercStatus_New) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_SetMercStatus(libCamp_gv_tS_MercID[(MercenaryGetSelected(1))], libCamp_ge_StoryMercStatus_Available);
    MercenarySetState(MercenaryGetSelected(1), c_mercenaryStateEnabled);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_TS_MercNewToAvailable_Init () {
    libCamp_gt_TS_MercNewToAvailable = TriggerCreate("libCamp_gt_TS_MercNewToAvailable_Func");
    TriggerAddEventMercenaryPanelSelectionChanged(libCamp_gt_TS_MercNewToAvailable, c_playerAny, c_invalidMercenaryId);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_MercUI - Purchase
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_TS_MercUIPurchase_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexMerc;
    int lv_mercBought;

    // Automatic Variable Declarations
    int auto2FC87EAD_i;
    int autoA5A32113_i;

    // Variable Initialization
    lv_indexMerc = libCamp_ge_StoryMercID_MercNone;
    lv_mercBought = libCamp_ge_StoryMercID_MercNone;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_mercBought = libCamp_ge_StoryMercID_MercNone;
    auto2FC87EAD_i = libCamp_gv_TSC_MERC_FIRST;
    while (auto2FC87EAD_i <= libCamp_gv_TSC_MERC_LAST) {
        lv_indexMerc = libCamp_gv_tS_MercID[auto2FC87EAD_i];
        if ((MercenaryGetSelected(1) == libCamp_gv_tS_MercUIMercenaries[(lv_indexMerc)])) {
            lv_mercBought = lv_indexMerc;
            break;
        }

        auto2FC87EAD_i = auto2FC87EAD_i + 1;
    }
    if (((lv_mercBought == libCamp_ge_StoryMercID_MercNone) || (libCamp_gf_MercCost(lv_mercBought) > libCamp_gf_StoryCredits()) || ((libCamp_gf_MercStatusCheck(lv_mercBought, libCamp_ge_StoryMercStatus_Available) == false) && (libCamp_gf_MercStatusCheck(lv_mercBought, libCamp_ge_StoryMercStatus_New) == false)))) {
        return true;
    }

    libCamp_gf_SetMercStatus(lv_mercBought, libCamp_ge_StoryMercStatus_Purchased);
    libCamp_gf_SetStoryCredits((libCamp_gf_StoryCredits() - libCamp_gf_MercCost(lv_mercBought)));
    PlayerModifyPropertyInt(1, c_playerPropCredits, c_playerPropOperSetTo, libCamp_gf_StoryCredits());
    libCamp_gf_TS_AddRecentMerc(lv_mercBought);
    MercenaryPurchase(libCamp_gv_tS_MercUIMercenaries[(lv_mercBought)]);
    MercenarySetImageFilePath(libCamp_gv_tS_MercUIMercenaries[(lv_mercBought)], libCamp_gv_tS_MercHiredImage[(lv_mercBought)]);
    MercenarySetModelLink(libCamp_gv_tS_MercUIMercenaries[(lv_mercBought)], "Invisible");
    autoA5A32113_i = libCamp_gv_TSC_MERC_FIRST;
    while (autoA5A32113_i <= libCamp_gv_TSC_MERC_LAST) {
        lv_indexMerc = libCamp_gv_tS_MercID[autoA5A32113_i];
        if ((libCamp_gf_MercCost(lv_indexMerc) > libCamp_gf_StoryCredits()) && ((libCamp_gf_MercStatusCheck(lv_indexMerc, libCamp_ge_StoryMercStatus_Available) == true) || (libCamp_gf_MercStatusCheck(lv_indexMerc, libCamp_ge_StoryMercStatus_New) == true))) {
            MercenarySetImageFilePath(libCamp_gv_tS_MercUIMercenaries[(lv_indexMerc)], libCamp_gv_tS_MercNoCreditImage[(lv_indexMerc)]);
            MercenarySetModelLink(libCamp_gv_tS_MercUIMercenaries[(lv_indexMerc)], "Invisible");
        }

        autoA5A32113_i = autoA5A32113_i + 1;
    }
    if ((libCamp_gf_MercStatusCheck(libCamp_ge_StoryMercID_MercDevilDogs, libCamp_ge_StoryMercStatus_Purchased) == true)) {
        AchievementTermQuantitySet(1, "TStory01_6_DevilDogs", 1);
    }
    else {
        AchievementTermQuantitySet(1, "TStory01_6_DevilDogs", 0);
    }
    if ((libCamp_gf_MercStatusCheck(libCamp_ge_StoryMercID_MercHammerSecurities, libCamp_ge_StoryMercStatus_Purchased) == true)) {
        AchievementTermQuantitySet(1, "TStory01_6_HammerSecurities", 1);
    }
    else {
        AchievementTermQuantitySet(1, "TStory01_6_HammerSecurities", 0);
    }
    if ((libCamp_gf_MercStatusCheck(libCamp_ge_StoryMercID_MercSpartanCompany, libCamp_ge_StoryMercStatus_Purchased) == true)) {
        AchievementTermQuantitySet(1, "TStory01_6_SpartanCompany", 1);
    }
    else {
        AchievementTermQuantitySet(1, "TStory01_6_SpartanCompany", 0);
    }
    if ((libCamp_gf_MercStatusCheck(libCamp_ge_StoryMercID_MercSiegeBreakers, libCamp_ge_StoryMercStatus_Purchased) == true)) {
        AchievementTermQuantitySet(1, "TStory01_6_SiegeBreakers", 1);
    }
    else {
        AchievementTermQuantitySet(1, "TStory01_6_SiegeBreakers", 0);
    }
    if ((libCamp_gf_MercStatusCheck(libCamp_ge_StoryMercID_MercHelsAngels, libCamp_ge_StoryMercStatus_Purchased) == true)) {
        AchievementTermQuantitySet(1, "TStory01_6_HelsAngels", 1);
    }
    else {
        AchievementTermQuantitySet(1, "TStory01_6_HelsAngels", 0);
    }
    if ((libCamp_gf_MercStatusCheck(libCamp_ge_StoryMercID_MercDuskWing, libCamp_ge_StoryMercStatus_Purchased) == true)) {
        AchievementTermQuantitySet(1, "TStory01_6_DuskWings", 1);
    }
    else {
        AchievementTermQuantitySet(1, "TStory01_6_DuskWings", 0);
    }
    if ((libCamp_gf_MercStatusCheck(libCamp_ge_StoryMercID_MercDukesRevenge, libCamp_ge_StoryMercStatus_Purchased) == true)) {
        AchievementTermQuantitySet(1, "TStory01_6_DukesRevenge", 1);
    }
    else {
        AchievementTermQuantitySet(1, "TStory01_6_DukesRevenge", 0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_TS_MercUIPurchase_Init () {
    libCamp_gt_TS_MercUIPurchase = TriggerCreate("libCamp_gt_TS_MercUIPurchase_Func");
    TriggerAddEventMercenaryPanelPurchase(libCamp_gt_TS_MercUIPurchase, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_MercUI - Exit
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_TS_MercUIExit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMercenaryPanel, false);
    if ((libCamp_gv_tS_MercUIExitCallback != null)) {
        TriggerExecute(libCamp_gv_tS_MercUIExitCallback, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_TS_MercUIExit_Init () {
    libCamp_gt_TS_MercUIExit = TriggerCreate("libCamp_gt_TS_MercUIExit_Func");
    TriggerAddEventMercenaryPanelExit(libCamp_gt_TS_MercUIExit, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_BattleReportMissionReplay
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_TS_BattleReportMissionReplay_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexMission;
    int lv_mission;
    int lv_selectedReport;

    // Automatic Variable Declarations
    int auto4356EC72_i;

    // Variable Initialization
    lv_indexMission = libCamp_ge_MapID_MapNone;
    lv_mission = libCamp_ge_MapID_MapNone;
    lv_selectedReport = c_invalidBattleReportId;

    // Conditions
    if (testConds) {
        if (!((UIFrameVisible(1, c_syncFrameTypeBattleReportPanel) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_mission = libCamp_ge_MapID_MapNone;
    lv_selectedReport = BattleReportPanelGetSelectedBattleReport(1);
    auto4356EC72_i = libCamp_gv_TSC_MISSION_FIRST;
    while (auto4356EC72_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[auto4356EC72_i];
        if ((libCamp_gv_tS_BattleReportMissions[(lv_indexMission)] == lv_selectedReport)) {
            lv_mission = lv_indexMission;
            break;
        }

        auto4356EC72_i = auto4356EC72_i + 1;
    }
    if ((lv_mission == libCamp_ge_MapID_MapNone)) {
        return true;
    }

    libCamp_gf_TS_BattleReportHide();
    libCamp_gf_LaunchMission(lv_mission, true, EventBattleReportPanelDifficultySelected());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_TS_BattleReportMissionReplay_Init () {
    libCamp_gt_TS_BattleReportMissionReplay = TriggerCreate("libCamp_gt_TS_BattleReportMissionReplay_Func");
    TriggerAddEventBattleReportPanelPlayMission(libCamp_gt_TS_BattleReportMissionReplay, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_BattleReportSceneReplay
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_TS_BattleReportSceneReplay_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexScene;
    int lv_scene;
    int lv_selectedReport;

    // Automatic Variable Declarations
    int autoD7610F0E_i;

    // Variable Initialization
    lv_indexScene = libCamp_ge_SceneID_SceneNone;
    lv_scene = libCamp_ge_SceneID_SceneNone;
    lv_selectedReport = c_invalidBattleReportId;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UIFrameVisible(1, c_syncFrameTypeBattleReportPanel) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_scene = libCamp_ge_SceneID_SceneNone;
    lv_selectedReport = BattleReportPanelGetSelectedBattleReport(1);
    autoD7610F0E_i = libCamp_gv_TSC_SCENE_FIRST;
    while (autoD7610F0E_i <= libCamp_gv_TSC_SCENE_LAST) {
        lv_indexScene = libCamp_gv_tS_SceneIDs[autoD7610F0E_i];
        if ((libCamp_gv_tS_BattleReportScenes[(lv_indexScene)] == lv_selectedReport)) {
            lv_scene = lv_indexScene;
            break;
        }

        autoD7610F0E_i = autoD7610F0E_i + 1;
    }
    if ((lv_scene == libCamp_ge_SceneID_SceneNone)) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCamp_gf_TS_BattleReportHide();
    if ((libCamp_gf_TS_GameFullyDownloaded() == false) && (lv_scene != libCamp_ge_SceneID_ScenePreRenderedTheDream) && (lv_scene != libCamp_ge_SceneID_ScenePreRenderedOldRivals) && (lv_scene != libCamp_ge_SceneID_ScenePreRenderedEnd) && (lv_scene != libCamp_ge_SceneID_ScenePreRenderedBetterMarine)) {
        UIShowCustomDialog(PlayerGroupAll(), libNtve_ge_CustomDialogType_c_customDialogTypeMessage, StringExternal("Param/Value/lib_Camp_EE77B639"), StringExternal("Param/Value/lib_Camp_6FCAE647"), true);
    }
    else {
        TriggerExecute(libCamp_gv_tS_SceneCallback[(lv_scene)], true, true);
        TriggerExecute(libCamp_gv_tS_BattleReportSceneFinishCallback, true, true);
    }
    TriggerEnable(TriggerGetCurrent(), true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleReportPanel, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_TS_BattleReportSceneReplay_Init () {
    libCamp_gt_TS_BattleReportSceneReplay = TriggerCreate("libCamp_gt_TS_BattleReportSceneReplay_Func");
    TriggerAddEventBattleReportPanelPlayScene(libCamp_gt_TS_BattleReportSceneReplay, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_BattleReportPanelLeave
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_TS_BattleReportPanelLeave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UIFrameVisible(1, c_syncFrameTypeBattleReportPanel) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_TS_BattleReportHide();
    if ((libCamp_gv_tS_BattleReportPanelLeaveCallback != null)) {
        TriggerExecute(libCamp_gv_tS_BattleReportPanelLeaveCallback, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_TS_BattleReportPanelLeave_Init () {
    libCamp_gt_TS_BattleReportPanelLeave = TriggerCreate("libCamp_gt_TS_BattleReportPanelLeave_Func");
    TriggerAddEventBattleReportPanelExit(libCamp_gt_TS_BattleReportPanelLeave, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_ResearchUI - Purchase
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_TS_ResearchUIPurchase_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_researchID;
    int lv_purchasedCountZerg;
    int lv_purchasedCountProt;
    int lv_indexResearch;

    // Automatic Variable Declarations
    int auto5C40636D_i;
    int autoECD5905D_val;

    // Variable Initialization
    lv_researchID = libCamp_ge_StoryResearchID_ResearchNone;
    lv_indexResearch = libCamp_ge_StoryResearchID_ResearchNone;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_researchID = libCamp_gf_TS_ResearchUIResearchID(ResearchItemGetSelected(1));
    if ((lv_researchID == libCamp_ge_StoryResearchID_ResearchNone)) {
        return true;
    }

    ResearchItemPurchase(ResearchItemGetSelected(1));
    libCamp_gf_SetStoryResearchPurchased(lv_researchID);
    libCamp_gf_TS_ResearchUIUpdate();
    libCamp_gf_TS_AddRecentResearch(lv_researchID);
    lv_purchasedCountZerg = 0;
    lv_purchasedCountProt = 0;
    auto5C40636D_i = libCamp_gv_TSC_RESEARCH_FIRST;
    while (auto5C40636D_i <= libCamp_gv_TSC_RESEARCH_LAST) {
        lv_indexResearch = libCamp_gv_tS_ResearchID[auto5C40636D_i];
        if ((libCamp_gf_StoryResearchStateCheck(lv_indexResearch, libCamp_ge_StoryResearchState_ResearchStatePurchased) == true)) {
            autoECD5905D_val = libCamp_gf_StoryResearchCategory(lv_indexResearch);
            if (autoECD5905D_val == libCamp_ge_StoryResearchCategory_ResearchCategoryZerg) {
                lv_purchasedCountZerg += 1;
                libCamp_gf_TS_ResearchUIClearZergConfirmationText();
            }
            else if (autoECD5905D_val == libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss) {
                lv_purchasedCountProt += 1;
                libCamp_gf_TS_ResearchUIClearProtossConfirmationText();
            }
            else {
            }
        }

        auto5C40636D_i = auto5C40636D_i + 1;
    }
    AchievementTermQuantitySet(1, "TStory01_8", lv_purchasedCountProt);
    AchievementTermQuantitySet(1, "TStory01_7", lv_purchasedCountZerg);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_TS_ResearchUIPurchase_Init () {
    libCamp_gt_TS_ResearchUIPurchase = TriggerCreate("libCamp_gt_TS_ResearchUIPurchase_Func");
    TriggerAddEventResearchPanelPurchase(libCamp_gt_TS_ResearchUIPurchase, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_ResearchUI - Exit
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_TS_ResearchUIExit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCamp_gv_tS_ResearchUIExitEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResearchPanel, false);
    if ((libCamp_gv_tS_ResearchUIExitCallback != null)) {
        TriggerExecute(libCamp_gv_tS_ResearchUIExitCallback, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_TS_ResearchUIExit_Init () {
    libCamp_gt_TS_ResearchUIExit = TriggerCreate("libCamp_gt_TS_ResearchUIExit_Func");
    TriggerAddEventResearchPanelExit(libCamp_gt_TS_ResearchUIExit, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_RoomChange Button Response
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_TS_RoomChangeButtonResponse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto94FF7B16_ae;
    const int auto94FF7B16_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto94FF7B16_ae = libCamp_gv_tS_RoomChangeButtonCount;
    lv_index = 1;
    for ( ; ( (auto94FF7B16_ai >= 0 && lv_index <= auto94FF7B16_ae) || (auto94FF7B16_ai < 0 && lv_index >= auto94FF7B16_ae) ) ; lv_index += auto94FF7B16_ai ) {
        if ((libCamp_gv_tS_RoomChangeButtons[lv_index] == EventDialogControl()) && (libCamp_gv_tS_RoomChangeButtonCallbackClick[lv_index] != null)) {
            libCamp_gv_tS_RoomChangeButtonCurrent = lv_index;
            TriggerExecute(libCamp_gv_tS_RoomChangeButtonCallbackClick[lv_index], true, false);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_TS_RoomChangeButtonResponse_Init () {
    libCamp_gt_TS_RoomChangeButtonResponse = TriggerCreate("libCamp_gt_TS_RoomChangeButtonResponse_Func");
    TriggerAddEventDialogControl(libCamp_gt_TS_RoomChangeButtonResponse, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS Tech Console Exit
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_TSTechConsoleExit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypePurchasePanel, false);
    libCamp_gf_HideStoryUI(true, false);
    libCamp_gf_ApplyCampaignTech(1);
    TriggerExecute(libCamp_gv_tS_TechExitCallback, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_TSTechConsoleExit_Init () {
    libCamp_gt_TSTechConsoleExit = TriggerCreate("libCamp_gt_TSTechConsoleExit_Func");
    TriggerAddEventPurchaseExit(libCamp_gt_TSTechConsoleExit, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS Tech Item Selected
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_TSTechItemSelected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tech;
    int lv_groupID;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tech = libCamp_ge_StoryTech_StoryTechMarineStimpacks;
    lv_groupID = 5;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCamp_gf_TechPurchasableTechID(PurchaseGetSelectedPurchaseItem(1)) != libCamp_ge_StoryTech_StoryTechNone)) {
        lv_tech = libCamp_gf_TechPurchasableTechID(PurchaseGetSelectedPurchaseItem(1));
        lv_groupID = (libCamp_gv_tS_Tech_GroupID[(lv_tech)]);
        PurchaseGroupSetState(libCamp_gv_tS_TechGroup_UI[lv_groupID], c_purchaseGroupStateEnabled);
        if ((libCamp_gv_tSX_Tech_Status[(lv_tech)] == libCamp_ge_StoryTechStates_TechNew)) {
            libCamp_gv_tSX_Tech_Status[(lv_tech)] = libCamp_ge_StoryTechStates_TechAvailable;
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_TSTechItemSelected_Init () {
    libCamp_gt_TSTechItemSelected = TriggerCreate("libCamp_gt_TSTechItemSelected_Func");
    TriggerAddEventSelectedPurchaseItemChanged(libCamp_gt_TSTechItemSelected, 1, c_invalidPurchaseItemId);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS Tech Category Selected
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_TSTechCategorySelected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tech;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tech = c_invalidPurchaseCategoryId;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_tech = PurchaseGetSelectedPurchaseCategory(1);
    PurchaseCategorySetState(PurchaseGetSelectedPurchaseCategory(1), c_purchaseCategoryStateEnabled);
    PurchaseCategorySetNameText(libCamp_gv_tS_TechCategory_UI[(lv_tech)], (libCamp_gv_tS_TechCategoryName[(lv_tech)] + StringToText("")));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_TSTechCategorySelected_Init () {
    libCamp_gt_TSTechCategorySelected = TriggerCreate("libCamp_gt_TSTechCategorySelected_Func");
    TriggerAddEventSelectedPurchaseCategoryChanged(libCamp_gt_TSTechCategorySelected, c_playerAny, c_invalidPurchaseCategoryId);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS Tech Console Purchase
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_TSTechConsolePurchase_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tech;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tech = libCamp_ge_StoryTech_StoryTechNone;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_tech = libCamp_gf_TechPurchasableTechID(EventPurchaseMade());
    if ((lv_tech != libCamp_ge_StoryTech_StoryTechNone) && (libCamp_gf_StoryCredits() >= libCamp_gf_StoryTechCost(lv_tech)) && ((libCamp_gv_tSX_Tech_Status[(lv_tech)] == libCamp_ge_StoryTechStates_TechAvailable) || (libCamp_gv_tSX_Tech_Status[(lv_tech)] == libCamp_ge_StoryTechStates_TechNew))) {
        libCamp_gv_tSX_Tech_Status[(lv_tech)] = libCamp_ge_StoryTechStates_TechPurchased;
        libCamp_gf_SetStoryCredits((libCamp_gf_StoryCredits() - libCamp_gf_StoryTechCost(lv_tech)));
        PlayerModifyPropertyInt(1, c_playerPropCredits, c_playerPropOperSetTo, libCamp_gf_StoryCredits());
        libCamp_gf_TS_AddRecentTech(lv_tech);
        PurchaseItemPurchase(libCamp_gv_tS_Tech_UI[(lv_tech)]);
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Camp_D1E7DDD8") + IntToText(libCamp_gf_TS_StoryTechPurchasedCountInCategory(libCamp_ge_StoryTechCategory_StoryTechCategoryInfantry))), false);
        AchievementTermQuantitySet(1, "TStory01_1", libCamp_gf_TS_StoryTechPurchasedCountInCategory(libCamp_ge_StoryTechCategory_StoryTechCategoryInfantry));
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Camp_E40FD404") + IntToText(libCamp_gf_TS_StoryTechPurchasedCountInCategory(libCamp_ge_StoryTechCategory_StoryTechCategoryVehicles))), false);
        AchievementTermQuantitySet(1, "TStory01_2", libCamp_gf_TS_StoryTechPurchasedCountInCategory(libCamp_ge_StoryTechCategory_StoryTechCategoryVehicles));
        AchievementTermQuantitySet(1, "TStory01_3", libCamp_gf_TS_StoryTechPurchasedCountInCategory(libCamp_ge_StoryTechCategory_StoryTechCategoryStarships));
        AchievementTermQuantitySet(1, "TStory01_4", libCamp_gf_TS_StoryTechPurchasedCountInCategory(libCamp_ge_StoryTechCategory_StoryTechCategoryBase));
        AchievementTermQuantitySet(1, "TStory01_5", libCamp_gf_TS_StoryTechPurchasedCountInCategory(libCamp_ge_StoryTechCategory_StoryTechCategoryDominion));
    }

    libCamp_gf_TS_UpdateTechVisuals();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_TSTechConsolePurchase_Init () {
    libCamp_gt_TSTechConsolePurchase = TriggerCreate("libCamp_gt_TSTechConsolePurchase_Func");
    TriggerAddEventPurchaseMade(libCamp_gt_TSTechConsolePurchase, c_playerAny, c_invalidPurchaseItemId);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_Tech_CalldownSupplyDepot
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_TS_Tech_CalldownSupplyDepot_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetState(EventUnit(), c_unitStateSelectable, true);
    UnitSetState(EventUnit(), c_unitStateTargetable, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_TS_Tech_CalldownSupplyDepot_Init () {
    libCamp_gt_TS_Tech_CalldownSupplyDepot = TriggerCreate("libCamp_gt_TS_Tech_CalldownSupplyDepot_Func");
    TriggerAddEventUnitAbility(libCamp_gt_TS_Tech_CalldownSupplyDepot, null, AbilityCommand("DropToSupplyDepot", 0), c_abilMorphStageUnitEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug_StartPerformanceLogging
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_Debug_StartPerformanceLogging_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0625, c_timeGame);
    PerfTestStart((StringExternal("Param/Value/lib_Camp_B157F6F4") + libCamp_gf_MissionNameInUpperCase(libCamp_gv_debug_MapIDForPerfTest)));
    TriggerExecute(libCamp_gt_DebugPerfTestGetFps, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_Debug_StartPerformanceLogging_Init () {
    libCamp_gt_Debug_StartPerformanceLogging = TriggerCreate("libCamp_gt_Debug_StartPerformanceLogging_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug_Preloading
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_Debug_Preloading_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_TS_PrepareNextMissionPreloading(c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_Debug_Preloading_Init () {
    libCamp_gt_Debug_Preloading = TriggerCreate("libCamp_gt_Debug_Preloading_Func");
    TriggerAddEventChatMessage(libCamp_gt_Debug_Preloading, 1, "-preload", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Loading Done
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_LoadingDone_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    BankReload(libCamp_gv_cP_Bank);
    BankWait(libCamp_gv_cP_Bank);
    if ((BankSectionExists(libCamp_gv_cP_Bank, ("CampaignCompleted")) == true)) {
        libCamp_gv_cPX_CampaignCompleted = BankValueGetAsFlag(libCamp_gv_cP_Bank, ("CampaignCompleted"), "1");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_LoadingDone_Init () {
    libCamp_gt_LoadingDone = TriggerCreate("libCamp_gt_LoadingDone_Func");
    TriggerAddEventLoadGameDone(libCamp_gt_LoadingDone);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_VSScreenContinue
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_TS_VSScreenContinue_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCamp_gv_tS_CurrentMap != libCamp_ge_MapID_MapTValerian03)) {
        GameOver(1, c_gameOverVictory, false, false);
        return true;
    }

    libCamp_gf_TS_CampaignVictory();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_TS_VSScreenContinue_Init () {
    libCamp_gt_TS_VSScreenContinue = TriggerCreate("libCamp_gt_TS_VSScreenContinue_Func");
    TriggerAddEventVictoryPanelExit(libCamp_gt_TS_VSScreenContinue, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_VSScreenPlayAgain
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_TS_VSScreenPlayAgain_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_simulation;

    // Automatic Variable Declarations
    int auto42AB9A4D_val;

    // Variable Initialization
    lv_simulation = true;

    // Actions
    if (!runActions) {
        return true;
    }

    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeVictoryPanel, false);
    if ((libCamp_gv_tSX_IsSimulation == true)) {
        lv_simulation = true;
    }
    else {
        lv_simulation = false;
    }
    auto42AB9A4D_val = EventVictoryPanelDifficultySelected();
    if (auto42AB9A4D_val == 4) {
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Camp_DB6C2DA0") + StringExternal("Param/Value/lib_Camp_F6339396")), false);
    }
    else if (auto42AB9A4D_val == 3) {
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Camp_1BDA09D1") + StringExternal("Param/Value/lib_Camp_986C743A")), false);
    }
    else if (auto42AB9A4D_val == 2) {
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Camp_6A5CFFA7") + StringExternal("Param/Value/lib_Camp_DF18FDC2")), false);
    }
    else if (auto42AB9A4D_val == 1) {
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Camp_ADAF62FC") + StringExternal("Param/Value/lib_Camp_C4B09664")), false);
    }
    else {
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Camp_47326528") + StringExternal("Param/Value/lib_Camp_DFF24D64")), false);
    }
    libCamp_gf_PrepareForMission(libCamp_gv_tS_CurrentMap, lv_simulation, true, EventVictoryPanelDifficultySelected());
    GameOver(1, c_gameOverVictory, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_TS_VSScreenPlayAgain_Init () {
    libCamp_gt_TS_VSScreenPlayAgain = TriggerCreate("libCamp_gt_TS_VSScreenPlayAgain_Func");
    TriggerAddEventVictoryPanelPlayMissionAgain(libCamp_gt_TS_VSScreenPlayAgain, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_EndCinematic
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_TS_EndCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    transmissionsource lv_movieSource;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_movieSource = TransmissionSource();

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    lv_movieSource = TransmissionSourceFromMovie("Assets\\Textures\\cinematic_end.ogv", true);
    TransmissionSourceSetPauseAllowed(lv_movieSource, true);
    TransmissionSourceSetStreamingAllowed(lv_movieSource, true);
    TransmissionSend(PlayerGroupAll(), lv_movieSource, libNtve_gf_FullscreenPortrait(), "", null, null, null, 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 2.5);
    libCamp_gv_tS_EndCinematicFinished = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_TS_EndCinematic_Init () {
    libCamp_gt_TS_EndCinematic = TriggerCreate("libCamp_gt_TS_EndCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_EndCredits
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_TS_EndCredits_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    libCamp_gv_tS_EndCreditFinished = false;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_EndCreditsA2", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCreditsPanel, true);
    TriggerEnable(libCamp_gt_TS_EndCreditsEnds, true);
    while (!((libCamp_gv_tS_EndCreditFinished == true))) {
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_TS_EndCredits_Init () {
    libCamp_gt_TS_EndCredits = TriggerCreate("libCamp_gt_TS_EndCredits_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_EndCreditsEnds
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_TS_EndCreditsEnds_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gv_tS_EndCreditFinished = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_TS_EndCreditsEnds_Init () {
    libCamp_gt_TS_EndCreditsEnds = TriggerCreate("libCamp_gt_TS_EndCreditsEnds_Func");
    TriggerEnable(libCamp_gt_TS_EndCreditsEnds, false);
    TriggerAddEventGameCreditsFinished(libCamp_gt_TS_EndCreditsEnds, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_CheatUsed
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_TS_CheatUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_SetStoryState(libCamp_ge_StoryStateID_StoryStateAchievementDisabled, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_TS_CheatUsed_Init () {
    libCamp_gt_TS_CheatUsed = TriggerCreate("libCamp_gt_TS_CheatUsed_Func");
    TriggerAddEventCheatUsed(libCamp_gt_TS_CheatUsed, c_playerAny, c_gameCheatAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_FlyingOutHouse
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_TS_FlyingOutHouse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCamp_gf_StoryState(libCamp_ge_StoryStateID_StoryStateTaurenOutHouseActivated) == 0)) {
        libCamp_gf_SetStoryState(libCamp_ge_StoryStateID_StoryStateTaurenOutHouseActivated, 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_Camp_70578238"));
    }
    else {
        libCamp_gf_SetStoryState(libCamp_ge_StoryStateID_StoryStateTaurenOutHouseActivated, 0);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_Camp_772C372A"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_TS_FlyingOutHouse_Init () {
    libCamp_gt_TS_FlyingOutHouse = TriggerCreate("libCamp_gt_TS_FlyingOutHouse_Func");
    TriggerAddEventChatMessage(libCamp_gt_TS_FlyingOutHouse, c_playerAny, "OUTHOUSE", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_TerranUpTheNight
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_TS_TerranUpTheNight_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCamp_gf_CurrentMap() != libCamp_ge_MapID_MapTStory01))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "EasterEggMusic_TerranUpTheNight", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_TS_TerranUpTheNight_Init () {
    libCamp_gt_TS_TerranUpTheNight = TriggerCreate("libCamp_gt_TS_TerranUpTheNight_Func");
    TriggerAddEventChatMessage(libCamp_gt_TS_TerranUpTheNight, c_playerAny, "OverEngineeredCodPiece", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_Temp
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_TS_Temp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/lib_Camp_10F3D464") + libNtve_gf_ConvertBooleanToText(libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTTosh03B, libCamp_ge_MissionStatus_Completed))));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/lib_Camp_32E2A71E") + libNtve_gf_ConvertBooleanToText(libCamp_gf_MissionDifficultyCompleted(libCamp_ge_MapID_MapTTosh03B, 2)) + StringExternal("Param/Value/lib_Camp_DF7D7CDC") + libNtve_gf_ConvertBooleanToText(libCamp_gf_MissionDifficultyCompleted(libCamp_ge_MapID_MapTTosh03B, 3))));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/lib_Camp_2CB17DE1") + IntToText(libCamp_gf_MissionCompleteBestTime(libCamp_ge_MapID_MapTTosh03B, 2)) + StringExternal("Param/Value/lib_Camp_5490B7E1") + IntToText(libCamp_gf_MissionCompleteBestTime(libCamp_ge_MapID_MapTTosh03B, 3))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_TS_Temp_Init () {
    libCamp_gt_TS_Temp = TriggerCreate("libCamp_gt_TS_Temp_Func");
    TriggerAddEventChatMessage(libCamp_gt_TS_Temp, c_playerAny, "-ts", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_DebugProgress MissionButton
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_TS_DebugProgressMissionButton_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexMission;
    int lv_clickedMission;

    // Automatic Variable Declarations
    int auto69BA44B8_i;

    // Variable Initialization
    lv_indexMission = libCamp_ge_MapID_MapNone;
    lv_clickedMission = libCamp_ge_MapID_MapNone;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_clickedMission = libCamp_ge_MapID_MapNone;
    auto69BA44B8_i = libCamp_gv_TSC_MISSION_FIRST;
    while (auto69BA44B8_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[auto69BA44B8_i];
        if ((EventDialogControl() == libCamp_gv_tS_DebugProgressMissionButtons[(lv_indexMission)])) {
            lv_clickedMission = lv_indexMission;
        }

        auto69BA44B8_i = auto69BA44B8_i + 1;
    }
    if ((lv_clickedMission == libCamp_ge_MapID_MapNone)) {
        return true;
    }

    libCamp_gv_tS_DebugProgressLastMission = lv_clickedMission;
    libCamp_gf_TS_CompleteMission(libCamp_gv_tS_DebugProgressLastMission);
    libCamp_gf_TS_DebugProgressUpdateDialog();
    libCamp_gv_tS_DebugProgressLastCreditMission = libCamp_gv_tS_DebugProgressLastMission;
    libCamp_gf_SetStoryCredits((libCamp_gf_StoryCredits() + libCamp_gf_MissionReward(libCamp_gv_tS_DebugProgressLastCreditMission)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_TS_DebugProgressMissionButton_Init () {
    libCamp_gt_TS_DebugProgressMissionButton = TriggerCreate("libCamp_gt_TS_DebugProgressMissionButton_Func");
    TriggerAddEventDialogControl(libCamp_gt_TS_DebugProgressMissionButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_DebugProgress UnlockSecretButton
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_TS_DebugProgressUnlockSecretButton_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCamp_gv_tS_DebugProgressMissionButtonUnlockSecret))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_SetStoryState(libCamp_ge_StoryStateID_StoryStateHorner05sUnlocked, 1);
    libCamp_gf_UpdateMissionFlow();
    libCamp_gf_TS_DebugProgressUpdateDialog();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_TS_DebugProgressUnlockSecretButton_Init () {
    libCamp_gt_TS_DebugProgressUnlockSecretButton = TriggerCreate("libCamp_gt_TS_DebugProgressUnlockSecretButton_Func");
    TriggerAddEventDialogControl(libCamp_gt_TS_DebugProgressUnlockSecretButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_DebugProgress Reset
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_TS_DebugProgressReset_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_achievementDisabledState;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCamp_gv_tS_DebugProgressButtonReset))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gv_tS_DebugProgressResetUsed = true;
    libCamp_gv_tS_DebugProgressLastMission = libCamp_ge_MapID_MapNone;
    lv_achievementDisabledState = libCamp_gf_StoryState(libCamp_ge_StoryStateID_StoryStateAchievementDisabled);
    libCamp_gf_TS_DefaultTransitionVars(true, true, true, true);
    libCamp_gf_SetStoryState(libCamp_ge_StoryStateID_StoryStateAchievementDisabled, lv_achievementDisabledState);
    libCamp_gf_UpdateMissionFlow();
    libCamp_gf_TS_DebugProgressUpdateDialog();
    libCamp_gv_tS_DebugProgressLastCreditMission = libCamp_ge_MapID_MapNone;
    libCamp_gf_SetStoryCredits((0 - (libCamp_gf_CostofPurchasedTech() + libCamp_gf_CostofPurchasedMerc())));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_TS_DebugProgressReset_Init () {
    libCamp_gt_TS_DebugProgressReset = TriggerCreate("libCamp_gt_TS_DebugProgressReset_Func");
    TriggerAddEventDialogControl(libCamp_gt_TS_DebugProgressReset, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_DebugProgress Launch Mission
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_TS_DebugProgressLaunchMission_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int autoF368A023_ae = 7;
    const int autoF368A023_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == libCamp_gv_tS_DebugProgressMissionLaunchCancel)) {
        TriggerEnable(TriggerGetCurrent(), false);
        DialogDestroy(libCamp_gv_tS_DebugProgressMissionLaunchDialog);
        DialogSetVisible(libCamp_gv_tS_DebugProgressDialog, PlayerGroupAll(), true);
    }

    lv_index = 1;
    for ( ; ( (autoF368A023_ai >= 0 && lv_index <= autoF368A023_ae) || (autoF368A023_ai < 0 && lv_index >= autoF368A023_ae) ) ; lv_index += autoF368A023_ai ) {
        if ((libCamp_gv_tS_DebugProgressMissionOptions[lv_index] == libCamp_ge_MapID_MapNone)) {
            return true;
        }

        if ((libCamp_gv_tS_DebugProgressMissionLaunchButtons[lv_index] == EventDialogControl())) {
            libCamp_gf_TS_SetLastSuccessfulMission(libCamp_gv_tS_DebugProgressLastMission);
            libCamp_gv_tS_DebugProgressCheating = true;
            libCamp_gv_tS_CurrentMap = libCamp_ge_MapID_MapTStory01;
            libCamp_gv_tS_DebugProgressLaunchingMission = true;
            libCamp_gf_PrepareForMission(libCamp_gv_tS_DebugProgressMissionOptions[lv_index], false, false, libCamp_gf_TS_CampaignDifficulty());
            GameOver(1, c_gameOverVictory, false, false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_TS_DebugProgressLaunchMission_Init () {
    libCamp_gt_TS_DebugProgressLaunchMission = TriggerCreate("libCamp_gt_TS_DebugProgressLaunchMission_Func");
    TriggerEnable(libCamp_gt_TS_DebugProgressLaunchMission, false);
    TriggerAddEventDialogControl(libCamp_gt_TS_DebugProgressLaunchMission, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_DebugProgress Launch Mission Popup
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_TS_DebugProgressLaunchMissionPopup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((EventDialogControl() == libCamp_gv_tS_DebugProgressButtonLaunchMission))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_TS_DebugProgressMissionDialogShow();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_TS_DebugProgressLaunchMissionPopup_Init () {
    libCamp_gt_TS_DebugProgressLaunchMissionPopup = TriggerCreate("libCamp_gt_TS_DebugProgressLaunchMissionPopup_Func");
    TriggerEnable(libCamp_gt_TS_DebugProgressLaunchMissionPopup, false);
    TriggerAddEventDialogControl(libCamp_gt_TS_DebugProgressLaunchMissionPopup, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_DebugProgress OK
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_TS_DebugProgressOK_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCamp_gv_tS_DebugProgressButtonOK))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(libCamp_gv_tS_DebugProgressDialog, PlayerGroupAll(), false);
    if ((libCamp_gv_tS_DebugProgressResetUsed == true)) {
        BankDeleteCampaignBanks(1, 0);
    }

    libCamp_gv_tS_DebugProgressDialogOpened = false;
    UISetWorldVisible(PlayerGroupAll(), true);
    libCamp_gf_HideStoryUI(true, true);
    UISetCursorVisible(PlayerGroupAll(), false);
    if ((libCamp_gv_tS_DebugProgressExitCallbackOK != null)) {
        TriggerExecute(libCamp_gv_tS_DebugProgressExitCallbackOK, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_TS_DebugProgressOK_Init () {
    libCamp_gt_TS_DebugProgressOK = TriggerCreate("libCamp_gt_TS_DebugProgressOK_Func");
    TriggerAddEventDialogControl(libCamp_gt_TS_DebugProgressOK, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_DebugProgress Cancel
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_TS_DebugProgressCancel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexMission;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_indexMission = libCamp_ge_MapID_MapNone;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCamp_gv_tS_DebugProgressButtonCancel))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(libCamp_gv_tS_DebugProgressDialog, PlayerGroupAll(), false);
    libCamp_gf_TS_DebugProgressRestoreStates();
    libCamp_gv_tS_DebugProgressDialogOpened = false;
    UISetWorldVisible(PlayerGroupAll(), true);
    libCamp_gf_HideStoryUI(true, true);
    GameCheatAllow(c_gameCheatProgress, true);
    GameCheatAllow(c_gameCheatTV, true);
    GameCheatAllow(c_gameCheatScene, true);
    UISetCursorVisible(PlayerGroupAll(), false);
    if ((libCamp_gv_tS_DebugProgressExitCallbackCancel != null)) {
        TriggerExecute(libCamp_gv_tS_DebugProgressExitCallbackCancel, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_TS_DebugProgressCancel_Init () {
    libCamp_gt_TS_DebugProgressCancel = TriggerCreate("libCamp_gt_TS_DebugProgressCancel_Func");
    TriggerAddEventDialogControl(libCamp_gt_TS_DebugProgressCancel, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_Debug PROGRESS
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_TS_DebugPROGRESS_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameCheatAllow(c_gameCheatProgress, false);
    GameCheatAllow(c_gameCheatTV, false);
    GameCheatAllow(c_gameCheatScene, false);
    libCamp_gv_tS_DebugProgressResetUsed = false;
    libCamp_gf_TS_DebugProgressDisplayDialog(libCamp_ge_MapID_MapNone, libCamp_gt_TS_DebugProgressOKCallback, null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_TS_DebugPROGRESS_Init () {
    libCamp_gt_TS_DebugPROGRESS = TriggerCreate("libCamp_gt_TS_DebugPROGRESS_Func");
    TriggerAddEventCheatUsed(libCamp_gt_TS_DebugPROGRESS, c_playerAny, c_gameCheatProgress);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_Debug PROGRESS Develop
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_TS_DebugPROGRESSDevelop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libCamp_gt_TS_DebugPROGRESS, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_TS_DebugPROGRESSDevelop_Init () {
    libCamp_gt_TS_DebugPROGRESSDevelop = TriggerCreate("libCamp_gt_TS_DebugPROGRESSDevelop_Func");
    TriggerAddEventChatMessage(libCamp_gt_TS_DebugPROGRESSDevelop, c_playerAny, "PROGRESS", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_DebugProgress OK Callback
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_TS_DebugProgressOKCallback_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCamp_gv_tS_DebugProgressLastCreditMission != libCamp_ge_MapID_MapNone)) {
        libCamp_gf_SetStoryCredits((libCamp_gf_StoryCredits() - libCamp_gf_MissionReward(libCamp_gv_tS_DebugProgressLastCreditMission)));
    }

    libCamp_gv_tS_DebugProgressCheating = true;
    libCamp_gv_tS_CurrentMap = libCamp_gv_tS_DebugProgressLastMission;
    libCamp_gf_PrepareForStoryMode(c_gameOverVictory, libCamp_gf_TS_CampaignDifficulty());
    GameOver(1, c_gameOverVictory, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_TS_DebugProgressOKCallback_Init () {
    libCamp_gt_TS_DebugProgressOKCallback = TriggerCreate("libCamp_gt_TS_DebugProgressOKCallback_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_Debug Research Panel
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_TS_DebugResearchPanel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UIFrameVisible(1, c_syncFrameTypeResearchPanel) == false)) {
        libNtve_gf_HideGameUI(false, PlayerGroupAll());
        UISetWorldVisible(PlayerGroupAll(), false);
        libCamp_gf_DisplayResearchPanel(libCamp_gt_TS_DebugResearchPanelExit);
    }

    if ((libCamp_gv_tS_DebugResearchDialogProtoss == c_invalidDialogId)) {
        DialogCreate(400, 50, c_anchorTop, -500, 140, false);
        libCamp_gv_tS_DebugResearchDialogProtoss = DialogLastCreated();
        DialogSetImageVisible(DialogLastCreated(), false);
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\white32.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0,0,0), PlayerGroupAll());
        libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 400, 50);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 0, 0);
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
        libCamp_gv_tS_DebugResearchButtonProtossMinus = DialogControlLastCreated();
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_Camp_F260CD9C"), PlayerGroupAll());
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 50);
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normalpressed.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds", PlayerGroupAll());
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 0, 0);
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
        libCamp_gv_tS_DebugResearchButtonProtossReset = DialogControlLastCreated();
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_Camp_6609B3BE"), PlayerGroupAll());
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 50);
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normalpressed.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds", PlayerGroupAll());
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, libCamp_gv_tS_DebugResearchButtonProtossMinus, c_anchorRight, 2, 0);
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
        libCamp_gv_tS_DebugResearchButtonProtossPlus = DialogControlLastCreated();
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_Camp_4C7B2591"), PlayerGroupAll());
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 50);
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normalpressed.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds", PlayerGroupAll());
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, libCamp_gv_tS_DebugResearchButtonProtossReset, c_anchorRight, 2, 0);
    }

    if ((libCamp_gv_tS_DebugResearchDialogZerg == c_invalidDialogId)) {
        DialogCreate(400, 50, c_anchorTop, 500, 140, false);
        libCamp_gv_tS_DebugResearchDialogZerg = DialogLastCreated();
        DialogSetImageVisible(DialogLastCreated(), false);
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\white32.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0,0,0), PlayerGroupAll());
        libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 400, 50);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 0, 0);
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
        libCamp_gv_tS_DebugResearchButtonZergMinus = DialogControlLastCreated();
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_Camp_85F6F7F5"), PlayerGroupAll());
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 50);
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normalpressed.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds", PlayerGroupAll());
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 0, 0);
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
        libCamp_gv_tS_DebugResearchButtonZergReset = DialogControlLastCreated();
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_Camp_AF461FBD"), PlayerGroupAll());
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 50);
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normalpressed.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds", PlayerGroupAll());
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, libCamp_gv_tS_DebugResearchButtonZergMinus, c_anchorRight, 2, 0);
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
        libCamp_gv_tS_DebugResearchButtonZergPlus = DialogControlLastCreated();
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_Camp_8417651E"), PlayerGroupAll());
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 50);
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normalpressed.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds", PlayerGroupAll());
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, libCamp_gv_tS_DebugResearchButtonZergReset, c_anchorRight, 2, 0);
    }

    DialogSetVisible(libCamp_gv_tS_DebugResearchDialogProtoss, PlayerGroupAll(), true);
    DialogSetVisible(libCamp_gv_tS_DebugResearchDialogZerg, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_TS_DebugResearchPanel_Init () {
    libCamp_gt_TS_DebugResearchPanel = TriggerCreate("libCamp_gt_TS_DebugResearchPanel_Func");
    TriggerAddEventChatMessage(libCamp_gt_TS_DebugResearchPanel, 1, "RESEARCHS", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_Debug Research Panel Close Button Clicked
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_TS_DebugResearchPanelCloseButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCamp_gv_tS_DebugResearchDialogProtoss != c_invalidDialogId)) {
        DialogSetVisible(libCamp_gv_tS_DebugResearchDialogProtoss, PlayerGroupAll(), false);
        DialogSetVisible(libCamp_gv_tS_DebugResearchDialogZerg, PlayerGroupAll(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_TS_DebugResearchPanelCloseButtonClicked_Init () {
    libCamp_gt_TS_DebugResearchPanelCloseButtonClicked = TriggerCreate("libCamp_gt_TS_DebugResearchPanelCloseButtonClicked_Func");
    TriggerAddEventResearchPanelExit(libCamp_gt_TS_DebugResearchPanelCloseButtonClicked, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_Debug Research Panel Exit
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_TS_DebugResearchPanelExit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_HideGameUI(true, PlayerGroupAll());
    UISetWorldVisible(PlayerGroupAll(), true);
    libCamp_gf_ApplyCampaignTech(1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_TS_DebugResearchPanelExit_Init () {
    libCamp_gt_TS_DebugResearchPanelExit = TriggerCreate("libCamp_gt_TS_DebugResearchPanelExit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_Debug Research Panel Button Clicked
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_TS_DebugResearchPanelButtonClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexResearch;

    // Automatic Variable Declarations
    int auto5BBED3FD_val;
    int auto772D70FF_i;
    int auto722B5253_i;

    // Variable Initialization
    lv_indexResearch = libCamp_ge_StoryResearchID_ResearchNone;

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Camp_6CEEBC62") + IntToText(libCamp_gv_tSX_DebugResearchLevel[(libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss)]) + StringExternal("Param/Value/lib_Camp_6B1A99D6") + IntToText(libCamp_gv_tSX_DebugResearchLevel[(libCamp_ge_StoryResearchCategory_ResearchCategoryZerg)])), false);
    auto5BBED3FD_val = EventDialogControl();
    if (auto5BBED3FD_val == libCamp_gv_tS_DebugResearchButtonProtossMinus) {
        libCamp_gv_tSX_DebugResearchLevel[(libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss)] = MaxI((libCamp_gv_tSX_DebugResearchLevel[(libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss)] - 1), -35);
    }
    else if (auto5BBED3FD_val == libCamp_gv_tS_DebugResearchButtonProtossReset) {
        libCamp_gv_tSX_DebugResearchLevel[(libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss)] = 0;
        auto772D70FF_i = libCamp_gv_TSC_RESEARCH_FIRST;
        while (auto772D70FF_i <= libCamp_gv_TSC_RESEARCH_LAST) {
            lv_indexResearch = libCamp_gv_tS_ResearchID[auto772D70FF_i];
            if ((libCamp_gf_StoryResearchCategory(lv_indexResearch) == libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss)) {
                libCamp_gv_tSX_ResearchState[(lv_indexResearch)] = libCamp_ge_StoryResearchState_ResearchStateAvailable;
            }

            auto772D70FF_i = auto772D70FF_i + 1;
        }
    }
    else if (auto5BBED3FD_val == libCamp_gv_tS_DebugResearchButtonProtossPlus) {
        libCamp_gv_tSX_DebugResearchLevel[(libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss)] = MinI((libCamp_gv_tSX_DebugResearchLevel[(libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss)] + 1), 35);
    }
    else if (auto5BBED3FD_val == libCamp_gv_tS_DebugResearchButtonZergMinus) {
        libCamp_gv_tSX_DebugResearchLevel[(libCamp_ge_StoryResearchCategory_ResearchCategoryZerg)] = MaxI((libCamp_gv_tSX_DebugResearchLevel[(libCamp_ge_StoryResearchCategory_ResearchCategoryZerg)] - 1), -35);
    }
    else if (auto5BBED3FD_val == libCamp_gv_tS_DebugResearchButtonZergReset) {
        libCamp_gv_tSX_DebugResearchLevel[(libCamp_ge_StoryResearchCategory_ResearchCategoryZerg)] = 0;
        auto722B5253_i = libCamp_gv_TSC_RESEARCH_FIRST;
        while (auto722B5253_i <= libCamp_gv_TSC_RESEARCH_LAST) {
            lv_indexResearch = libCamp_gv_tS_ResearchID[auto722B5253_i];
            if ((libCamp_gf_StoryResearchCategory(lv_indexResearch) == libCamp_ge_StoryResearchCategory_ResearchCategoryZerg)) {
                libCamp_gv_tSX_ResearchState[(lv_indexResearch)] = libCamp_ge_StoryResearchState_ResearchStateAvailable;
            }

            auto722B5253_i = auto722B5253_i + 1;
        }
    }
    else if (auto5BBED3FD_val == libCamp_gv_tS_DebugResearchButtonZergPlus) {
        libCamp_gv_tSX_DebugResearchLevel[(libCamp_ge_StoryResearchCategory_ResearchCategoryZerg)] = MinI((libCamp_gv_tSX_DebugResearchLevel[(libCamp_ge_StoryResearchCategory_ResearchCategoryZerg)] + 1), 35);
    }
    else {
        return true;
    }
    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Camp_52F95A57") + IntToText(libCamp_gv_tSX_DebugResearchLevel[(libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss)]) + StringExternal("Param/Value/lib_Camp_962BACEB") + IntToText(libCamp_gv_tSX_DebugResearchLevel[(libCamp_ge_StoryResearchCategory_ResearchCategoryZerg)])), false);
    libCamp_gf_TS_ResearchUIUpdate();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_TS_DebugResearchPanelButtonClicked_Init () {
    libCamp_gt_TS_DebugResearchPanelButtonClicked = TriggerCreate("libCamp_gt_TS_DebugResearchPanelButtonClicked_Func");
    TriggerAddEventDialogControl(libCamp_gt_TS_DebugResearchPanelButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_DebugResearchPoint
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_TS_DebugResearchPoint_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_oldValue;
    int lv_cat;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_cat = libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_cat = libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss;
    libCamp_gv_tSX_DebugResearchLevel[(lv_cat)] = 0;
    libCamp_gv_tSX_DebugResearchLevel[(lv_cat)] = (libCamp_gf_StoryResearchPointCap(lv_cat) - libCamp_gf_StoryResearchPoints(lv_cat));
    lv_cat = libCamp_ge_StoryResearchCategory_ResearchCategoryZerg;
    libCamp_gv_tSX_DebugResearchLevel[(lv_cat)] = 0;
    libCamp_gv_tSX_DebugResearchLevel[(lv_cat)] = (libCamp_gf_StoryResearchPointCap(lv_cat) - libCamp_gf_StoryResearchPoints(lv_cat));
    libCamp_gf_TS_ResearchUIUpdate();
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_Camp_89D7C0D6"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_TS_DebugResearchPoint_Init () {
    libCamp_gt_TS_DebugResearchPoint = TriggerCreate("libCamp_gt_TS_DebugResearchPoint_Func");
    TriggerAddEventCheatUsed(libCamp_gt_TS_DebugResearchPoint, c_playerAny, c_gameCheatResearch);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_Debug Mercenary Panel
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_TS_DebugMercenaryPanel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UIFrameVisible(1, c_syncFrameTypeMercenaryPanel) == false)) {
        libNtve_gf_HideGameUI(false, PlayerGroupAll());
        UISetWorldVisible(PlayerGroupAll(), false);
        libCamp_gf_DisplayMercenaryPanel(libCamp_gt_TS_DebugMercenaryPanelExit);
    }

    if ((libCamp_gv_tS_DebugMercenaryDialog == c_invalidDialogId)) {
        DialogCreate(400, 50, c_anchorBottomRight, 380, 100, false);
        libCamp_gv_tS_DebugMercenaryDialog = DialogLastCreated();
        DialogSetImageVisible(DialogLastCreated(), false);
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
        libCamp_gv_tS_DebugMercenaryButtonCredits = DialogControlLastCreated();
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_Camp_4DAD4AB1"), PlayerGroupAll());
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 50);
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normalpressed.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds", PlayerGroupAll());
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, 0, 0);
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
        libCamp_gv_tS_DebugMercenaryButtonReset = DialogControlLastCreated();
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_Camp_5E4180C3"), PlayerGroupAll());
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 50);
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normalpressed.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds", PlayerGroupAll());
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, libCamp_gv_tS_DebugMercenaryButtonCredits, c_anchorRight, 0, 0);
    }

    DialogSetVisible(libCamp_gv_tS_DebugMercenaryDialog, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_TS_DebugMercenaryPanel_Init () {
    libCamp_gt_TS_DebugMercenaryPanel = TriggerCreate("libCamp_gt_TS_DebugMercenaryPanel_Func");
    TriggerAddEventChatMessage(libCamp_gt_TS_DebugMercenaryPanel, 1, "MERCENARY", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_Debug Mercenary Panel Close Button Clicked
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_TS_DebugMercenaryPanelCloseButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCamp_gv_tS_DebugMercenaryDialog != c_invalidDialogId)) {
        DialogSetVisible(libCamp_gv_tS_DebugMercenaryDialog, PlayerGroupAll(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_TS_DebugMercenaryPanelCloseButtonClicked_Init () {
    libCamp_gt_TS_DebugMercenaryPanelCloseButtonClicked = TriggerCreate("libCamp_gt_TS_DebugMercenaryPanelCloseButtonClicked_Func");
    TriggerAddEventMercenaryPanelExit(libCamp_gt_TS_DebugMercenaryPanelCloseButtonClicked, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_Debug Mercenary Panel Exit
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_TS_DebugMercenaryPanelExit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_HideGameUI(true, PlayerGroupAll());
    UISetWorldVisible(PlayerGroupAll(), true);
    libCamp_gf_TS_ApplyMercenaryTech(1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_TS_DebugMercenaryPanelExit_Init () {
    libCamp_gt_TS_DebugMercenaryPanelExit = TriggerCreate("libCamp_gt_TS_DebugMercenaryPanelExit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_Debug Mercenary Panel Button Clicked
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_TS_DebugMercenaryPanelButtonClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexMerc;
    int lv_indexMission;
    int lv_credits;

    // Automatic Variable Declarations
    int auto9FF9D173_val;
    int auto9A4B52FC_i;
    int auto1EF58E06_i;

    // Variable Initialization
    lv_indexMerc = libCamp_ge_StoryMercID_MercNone;
    lv_indexMission = libCamp_ge_MapID_MapNone;

    // Actions
    if (!runActions) {
        return true;
    }

    auto9FF9D173_val = EventDialogControl();
    if (auto9FF9D173_val == libCamp_gv_tS_DebugMercenaryButtonCredits) {
        libCamp_gf_SetStoryCredits((libCamp_gf_StoryCredits() + 1000000));
    }
    else if (auto9FF9D173_val == libCamp_gv_tS_DebugMercenaryButtonReset) {
        lv_credits = 0;
        auto9A4B52FC_i = libCamp_gv_TSC_MISSION_FIRST;
        while (auto9A4B52FC_i <= libCamp_gv_TSC_MISSION_LAST) {
            lv_indexMission = libCamp_gv_tS_MapID[auto9A4B52FC_i];
            if ((libCamp_gf_MissionStatusCheck(lv_indexMission, libCamp_ge_MissionStatus_Completed) == true)) {
                lv_credits += libCamp_gf_MissionReward(lv_indexMission);
            }

            auto9A4B52FC_i = auto9A4B52FC_i + 1;
        }
        libCamp_gf_SetStoryCredits((lv_credits - libCamp_gf_CostofPurchasedTech()));
        auto1EF58E06_i = libCamp_gv_TSC_MERC_FIRST;
        while (auto1EF58E06_i <= libCamp_gv_TSC_MERC_LAST) {
            lv_indexMerc = libCamp_gv_tS_MercID[auto1EF58E06_i];
            libCamp_gf_SetMercStatus(lv_indexMerc, libCamp_ge_StoryMercStatus_Locked);
            auto1EF58E06_i = auto1EF58E06_i + 1;
        }
        libCamp_gf_TS_UpdateMercStatus();
    }
    else {
        return true;
    }
    libCamp_gf_TS_MercUIUpdateUI();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_TS_DebugMercenaryPanelButtonClicked_Init () {
    libCamp_gt_TS_DebugMercenaryPanelButtonClicked = TriggerCreate("libCamp_gt_TS_DebugMercenaryPanelButtonClicked_Func");
    TriggerAddEventDialogControl(libCamp_gt_TS_DebugMercenaryPanelButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_DebugBuyTech Button Clicked
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_TS_DebugBuyTechButtonClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto072E8CC2_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto072E8CC2_val = EventDialogControl();
    if (auto072E8CC2_val == libCamp_gv_tS_DebugBuyTechButtonUnitsUnlock) {
        libCamp_gf_TS_DebugSetTechCheatOption(libCamp_ge_TS_DebugTechCheatOption_Custom);
        DialogSetVisible(libCamp_gv_tS_DebugBuyTechDialog, PlayerGroupAll(), false);
        libCamp_gf_TS_DebugProgressDisplayDialog(libCamp_gv_tS_CurrentMap, libCamp_gt_TS_DebugBuyTechConsoleExit, libCamp_gt_TS_DebugBuyTechConsoleExit);
    }
    else if (auto072E8CC2_val == libCamp_gv_tS_DebugBuyTechButtonUnitsUnlockAll) {
        libCamp_gf_TS_DebugSetTechCheatOption(libCamp_ge_TS_DebugTechCheatOption_Custom);
        libCamp_gf_TS_DebugBuyTechUnitsUnlockAll();
    }
    else if (auto072E8CC2_val == libCamp_gv_tS_DebugBuyTechButtonUnitsReset) {
        libCamp_gf_TS_DebugSetTechCheatOption(libCamp_ge_TS_DebugTechCheatOption_Custom);
        libCamp_gf_TS_DebugBuyTechUnitsReset();
    }
    else if (auto072E8CC2_val == libCamp_gv_tS_DebugBuyTechButtonUpgradeBuy) {
        libCamp_gf_TS_DebugSetTechCheatOption(libCamp_ge_TS_DebugTechCheatOption_Custom);
        DialogSetVisible(libCamp_gv_tS_DebugBuyTechDialog, PlayerGroupAll(), false);
        libCamp_gf_DisplayTechConsole(libCamp_gt_TS_DebugBuyTechConsoleExit);
    }
    else if (auto072E8CC2_val == libCamp_gv_tS_DebugBuyTechButtonUpgradeBuyAll) {
        libCamp_gf_TS_DebugSetTechCheatOption(libCamp_ge_TS_DebugTechCheatOption_Custom);
        libCamp_gf_TS_DebugBuyTechUpgradesBuyAll();
    }
    else if (auto072E8CC2_val == libCamp_gv_tS_DebugBuyTechButtonUpgradeReset) {
        libCamp_gf_TS_DebugSetTechCheatOption(libCamp_ge_TS_DebugTechCheatOption_Custom);
        libCamp_gf_TS_DebugBuyTechUpgradesReset();
    }
    else if (auto072E8CC2_val == libCamp_gv_tS_DebugBuyTechButtonCreditsIncrease) {
        libCamp_gf_TS_DebugSetTechCheatOption(libCamp_ge_TS_DebugTechCheatOption_Custom);
        libCamp_gv_tS_DebugBuyTechTotalCredits += 100000000;
        libCamp_gf_TS_DebugBuyTechUpdateCredits();
    }
    else if (auto072E8CC2_val == libCamp_gv_tS_DebugBuyTechButtonEarly) {
        libCamp_gf_TS_DebugSetTechCheatOption(libCamp_ge_TS_DebugTechCheatOption_Early);
        libCamp_gf_TS_DebugBuyTechEarly();
    }
    else if (auto072E8CC2_val == libCamp_gv_tS_DebugBuyTechButtonAverage) {
        libCamp_gf_TS_DebugSetTechCheatOption(libCamp_ge_TS_DebugTechCheatOption_Average);
        libCamp_gf_TS_DebugBuyTechAverage();
    }
    else if (auto072E8CC2_val == libCamp_gv_tS_DebugBuyTechButtonLate) {
        libCamp_gf_TS_DebugSetTechCheatOption(libCamp_ge_TS_DebugTechCheatOption_Late);
        libCamp_gf_TS_DebugBuyTechLate();
    }
    else if (auto072E8CC2_val == libCamp_gv_tS_DebugBuyTechButtonSave) {
        libCamp_gv_tS_DebugBuyTechActive = false;
    }
    else {
        return true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_TS_DebugBuyTechButtonClicked_Init () {
    libCamp_gt_TS_DebugBuyTechButtonClicked = TriggerCreate("libCamp_gt_TS_DebugBuyTechButtonClicked_Func");
    TriggerAddEventDialogControl(libCamp_gt_TS_DebugBuyTechButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_DebugBuyTech Console Exit
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_TS_DebugBuyTechConsoleExit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gv_tS_DebugBuyTechTotalCredits = (libCamp_gf_StoryCredits() + (libCamp_gf_CostofPurchasedTech() + libCamp_gf_CostofPurchasedMerc()));
    libCamp_gf_TS_DebugBuyTechUpdateCredits();
    libCamp_gf_TS_DebugBuyTechSaveMissionBank(libCamp_gv_tS_CurrentMap);
    libCamp_gf_ApplyCampaignTech(1);
    DialogSetVisible(libCamp_gv_tS_DebugBuyTechDialog, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_TS_DebugBuyTechConsoleExit_Init () {
    libCamp_gt_TS_DebugBuyTechConsoleExit = TriggerCreate("libCamp_gt_TS_DebugBuyTechConsoleExit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug BUYTECH
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_DebugBUYTECH_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_screenModeChanged;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCamp_gv_tS_DebugBuyTechActive == false))) {
            return false;
        }

        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((libCamp_gv_tS_CurrentMap == libCamp_ge_MapID_MapNone) || ((libCamp_gf_MapTypeCheck(libCamp_gv_tS_CurrentMap, libCamp_ge_MapType_Mission) == false) && (libCamp_gf_MapTypeCheck(libCamp_gv_tS_CurrentMap, libCamp_ge_MapType_StoryMode) == false)))) {
        return true;
    }

    libCamp_gv_tS_DebugBuyTechActive = true;
    lv_screenModeChanged = false;
    if ((libCamp_gv_tS_InStoryMode == false)) {
        UISetMode(PlayerGroupAll(), c_uiModeFullscreen, c_transitionDurationImmediate);
        lv_screenModeChanged = true;
    }

    libCamp_gf_TS_DebugBuyTechCreateDialog();
    libCamp_gf_TS_DebugBuyTechUpdateCredits();
    DialogSetVisible(libCamp_gv_tS_DebugBuyTechDialog, PlayerGroupAll(), true);
    while (!((libCamp_gv_tS_DebugBuyTechActive == false))) {
        Wait(0.5, c_timeReal);
    }
    DialogSetVisible(libCamp_gv_tS_DebugBuyTechDialog, PlayerGroupAll(), false);
    libCamp_gf_TS_DebugBuyTechSaveMissionBank(libCamp_gv_tS_CurrentMap);
    if ((lv_screenModeChanged == true)) {
        UISetMode(PlayerGroupAll(), c_uiModeConsole, c_transitionDurationImmediate);
    }

    libCamp_gf_ApplyCampaignTech(1);
    libCamp_gf_TS_DebugBuyTechUpdateCredits();
    TriggerExecute(libCamp_gv_tS_TechLimitsCallback, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_DebugBUYTECH_Init () {
    libCamp_gt_DebugBUYTECH = TriggerCreate("libCamp_gt_DebugBUYTECH_Func");
    TriggerAddEventChatMessage(libCamp_gt_DebugBUYTECH, 1, "TECH", false);
    TriggerAddEventChatMessage(libCamp_gt_DebugBUYTECH, 1, "BUYTECH", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Display Tech Custom Button
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_DebugDisplayTechCustomButton_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCamp_gv_tS_DebugTechCustomDialog == c_invalidDialogId)) {
        DialogCreate(200, 50, c_anchorBottom, 0, 250, false);
        libCamp_gv_tS_DebugTechCustomDialog = DialogLastCreated();
        DialogSetImageVisible(DialogLastCreated(), false);
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
        libCamp_gv_tS_DebugTechCustomButton = DialogControlLastCreated();
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 50);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "DebugTechPanelLabel", PlayerGroupAll());
    }

    libCamp_gf_TS_DebugUpdateTechCustomDialog();
    DialogSetVisible(libCamp_gv_tS_DebugTechCustomDialog, PlayerGroupAll(), true);
    Wait(10.0, c_timeReal);
    TriggerExecute(libCamp_gt_DebugHideTechCustomButton, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_DebugDisplayTechCustomButton_Init () {
    libCamp_gt_DebugDisplayTechCustomButton = TriggerCreate("libCamp_gt_DebugDisplayTechCustomButton_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Hide Tech Custom Button
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_DebugHideTechCustomButton_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCamp_gv_tS_DebugTechCustomDialog != c_invalidDialogId)) {
        DialogDestroy(libCamp_gv_tS_DebugTechCustomDialog);
        libCamp_gv_tS_DebugTechCustomDialog = c_invalidDialogId;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_DebugHideTechCustomButton_Init () {
    libCamp_gt_DebugHideTechCustomButton = TriggerCreate("libCamp_gt_DebugHideTechCustomButton_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Tech Custom Button Clicked
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_DebugTechCustomButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCamp_gv_tS_DebugTechCustomButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libCamp_gt_DebugBUYTECH, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_DebugTechCustomButtonClicked_Init () {
    libCamp_gt_DebugTechCustomButtonClicked = TriggerCreate("libCamp_gt_DebugTechCustomButtonClicked_Func");
    TriggerAddEventDialogControl(libCamp_gt_DebugTechCustomButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug CREDITS
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_DebugCREDITS_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_amount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_amount = 5000000;
    libCamp_gf_SetStoryCredits((libCamp_gf_StoryCredits() + lv_amount));
    PlayerModifyPropertyInt(1, c_playerPropCredits, c_playerPropOperSetTo, libCamp_gf_StoryCredits());
    if ((UIFrameVisible(1, c_syncFrameTypePurchasePanel) == true)) {
        libCamp_gf_TS_UpdateTechVisuals();
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_Camp_1A857692"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_DebugCREDITS_Init () {
    libCamp_gt_DebugCREDITS = TriggerCreate("libCamp_gt_DebugCREDITS_Func");
    TriggerAddEventCheatUsed(libCamp_gt_DebugCREDITS, c_playerAny, c_gameCheatCredits);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug DIFFICULTY
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_DebugDIFFICULTY_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, DifficultyNameCampaign(PlayerDifficulty(EventPlayer())));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_DebugDIFFICULTY_Init () {
    libCamp_gt_DebugDIFFICULTY = TriggerCreate("libCamp_gt_DebugDIFFICULTY_Func");
    TriggerAddEventChatMessage(libCamp_gt_DebugDIFFICULTY, 1, "DIFFICULTY", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_Debug XDATA
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_TS_DebugXDATA_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    text lv_text;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_text = (StringExternal("Param/Value/lib_Camp_E7771DE3") + IntToText(libCamp_gv_tSX_LastMap) + StringExternal("Param/Value/lib_Camp_4891A158") + IntToText(libCamp_gv_tSX_LastMission) + StringExternal("Param/Value/lib_Camp_B16FBD4F") + IntToText((libCamp_gf_LastSuccessfulMission())) + StringExternal("Param/Value/lib_Camp_5C04FF39") + IntToText((libCamp_gv_tS_CurrentMap)) + StringExternal("Param/Value/lib_Camp_20FCD55E") + libNtve_gf_ConvertBooleanToText(libCamp_gv_tSX_IsSimulation) + StringExternal("Param/Value/lib_Camp_531286D9") + libNtve_gf_ConvertBooleanToText(libCamp_gv_tSX_IsVictoryPlayAgain) + StringExternal("Param/Value/lib_Camp_5B65EC60"));
    TriggerDebugOutput(1, lv_text, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_TS_DebugXDATA_Init () {
    libCamp_gt_TS_DebugXDATA = TriggerCreate("libCamp_gt_TS_DebugXDATA_Func");
    TriggerAddEventChatMessage(libCamp_gt_TS_DebugXDATA, 1, "XDATA", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_Debug XDEFAULT
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_TS_DebugXDEFAULT_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_TS_DefaultTransitionVars(true, true, true, true);
    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Camp_AC7AA0BF") + IntToText(libCamp_gf_MissionStatusAge(libCamp_ge_MapID_MapTRaynor01, libCamp_ge_MissionStatus_Available))), true);
    libCamp_gf_TS_SaveAllTransitionData(false, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_TS_DebugXDEFAULT_Init () {
    libCamp_gt_TS_DebugXDEFAULT = TriggerCreate("libCamp_gt_TS_DebugXDEFAULT_Func");
    TriggerAddEventChatMessage(libCamp_gt_TS_DebugXDEFAULT, 1, "XDEFAULT", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_Debug XLOAD
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_TS_DebugXLOAD_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    text lv_text;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_TS_LoadAllTransitionData(libCamp_ge_MapID_MapTStory01);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_TS_DebugXLOAD_Init () {
    libCamp_gt_TS_DebugXLOAD = TriggerCreate("libCamp_gt_TS_DebugXLOAD_Func");
    TriggerAddEventChatMessage(libCamp_gt_TS_DebugXLOAD, 1, "XLOAD", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_FootageRecording
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_TS_FootageRecording_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCamp_gv_tS_FootageRecordingCallback != null)) {
        TriggerExecute(libCamp_gt_DebugHideTechCustomButton, true, false);
        libCamp_gf_TS_FootageRecording();
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, StringExternal("Param/Value/lib_Camp_E9EC57DB"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_TS_FootageRecording_Init () {
    libCamp_gt_TS_FootageRecording = TriggerCreate("libCamp_gt_TS_FootageRecording_Func");
    TriggerAddEventChatMessage(libCamp_gt_TS_FootageRecording, 1, "INTRO", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_DebugVictorySequence
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_TS_DebugVictorySequence_Func (bool testConds, bool runActions) {
    // Variable Declarations
    trigger lv_cineTrigger;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_cineTrigger = TriggerCreate("gt_VictoryQ_Func");;
    libCamp_gf_RunMissionVictorySequence(lv_cineTrigger);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_TS_DebugVictorySequence_Init () {
    libCamp_gt_TS_DebugVictorySequence = TriggerCreate("libCamp_gt_TS_DebugVictorySequence_Func");
    TriggerAddEventChatMessage(libCamp_gt_TS_DebugVictorySequence, 1, "VictoryS", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_DebugVictoryScoreScreen
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_TS_DebugVictoryScoreScreen_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_DisplayCampaignVictoryScoreScreen(libCamp_ge_MapID_MapTRaynor03);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_TS_DebugVictoryScoreScreen_Init () {
    libCamp_gt_TS_DebugVictoryScoreScreen = TriggerCreate("libCamp_gt_TS_DebugVictoryScoreScreen_Func");
    TriggerAddEventChatMessage(libCamp_gt_TS_DebugVictoryScoreScreen, 1, "vss", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - PerfTestGetFps
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_DebugPerfTestGetFps_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        PerfTestGetFPS();
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_DebugPerfTestGetFps_Init () {
    libCamp_gt_DebugPerfTestGetFps = TriggerCreate("libCamp_gt_DebugPerfTestGetFps_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug STARTFPS
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_DebugSTARTFPS_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libCamp_gt_DebugPerfTestGetFps, true, false);
    PerfTestStart(StringToText(EventChatMessage(false)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_DebugSTARTFPS_Init () {
    libCamp_gt_DebugSTARTFPS = TriggerCreate("libCamp_gt_DebugSTARTFPS_Func");
    TriggerAddEventChatMessage(libCamp_gt_DebugSTARTFPS, c_playerAny, "STARTFPS", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug STOPFPS
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_DebugSTOPFPS_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PerfTestStop();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_DebugSTOPFPS_Init () {
    libCamp_gt_DebugSTOPFPS = TriggerCreate("libCamp_gt_DebugSTOPFPS_Func");
    TriggerAddEventChatMessage(libCamp_gt_DebugSTOPFPS, c_playerAny, "STOPFPS", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Tension Music
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_StartTensionMusic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "JukeboxTrack00", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_StartTensionMusic_Init () {
    libCamp_gt_StartTensionMusic = TriggerCreate("libCamp_gt_StartTensionMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stop Tension Music
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_StopTensionMusic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, libCamp_gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_StopTensionMusic_Init () {
    libCamp_gt_StopTensionMusic = TriggerCreate("libCamp_gt_StopTensionMusic_Func");
}

void libCamp_InitTriggers () {
    libCamp_gt__ZergDropPod_Init();
    libCamp_gt__TerranDropPod_Init();
    libCamp_gt_TS_MissionVictoryCallbackBlockActionQueueOneMinute_Init();
    libCamp_gt_TS_MissionVictoryCallbackBlockActionQueue_Init();
    libCamp_gt_TS_AbortMission_Init();
    libCamp_gt__CB_ChatBubbleActivated_Init();
    libCamp_gt__CB_ActivateChatBubble_Init();
    libCamp_gt__CB_ChatBubbleUnitDied_Init();
    libCamp_gt__CB_ShowChatBubbleOnUnit_Init();
    libCamp_gt_chatbubbledebug_Init();
    libCamp_gt__CB_WaitForSound_Init();
    libCamp_gt__MsgDlgButtonClicked_Init();
    libCamp_gt_ZS_CampaignTrialDialogQuitClicked_Init();
    libCamp_gt_ZS_CampaignTrialDialogUpgradeClicked_Init();
    libCamp_gt_TS_MercNewToAvailable_Init();
    libCamp_gt_TS_MercUIPurchase_Init();
    libCamp_gt_TS_MercUIExit_Init();
    libCamp_gt_TS_BattleReportMissionReplay_Init();
    libCamp_gt_TS_BattleReportSceneReplay_Init();
    libCamp_gt_TS_BattleReportPanelLeave_Init();
    libCamp_gt_TS_ResearchUIPurchase_Init();
    libCamp_gt_TS_ResearchUIExit_Init();
    libCamp_gt_TS_RoomChangeButtonResponse_Init();
    libCamp_gt_TSTechConsoleExit_Init();
    libCamp_gt_TSTechItemSelected_Init();
    libCamp_gt_TSTechCategorySelected_Init();
    libCamp_gt_TSTechConsolePurchase_Init();
    libCamp_gt_TS_Tech_CalldownSupplyDepot_Init();
    libCamp_gt_Debug_StartPerformanceLogging_Init();
    libCamp_gt_Debug_Preloading_Init();
    libCamp_gt_LoadingDone_Init();
    libCamp_gt_TS_VSScreenContinue_Init();
    libCamp_gt_TS_VSScreenPlayAgain_Init();
    libCamp_gt_TS_EndCinematic_Init();
    libCamp_gt_TS_EndCredits_Init();
    libCamp_gt_TS_EndCreditsEnds_Init();
    libCamp_gt_TS_CheatUsed_Init();
    libCamp_gt_TS_FlyingOutHouse_Init();
    libCamp_gt_TS_TerranUpTheNight_Init();
    libCamp_gt_TS_Temp_Init();
    libCamp_gt_TS_DebugProgressMissionButton_Init();
    libCamp_gt_TS_DebugProgressUnlockSecretButton_Init();
    libCamp_gt_TS_DebugProgressReset_Init();
    libCamp_gt_TS_DebugProgressLaunchMission_Init();
    libCamp_gt_TS_DebugProgressLaunchMissionPopup_Init();
    libCamp_gt_TS_DebugProgressOK_Init();
    libCamp_gt_TS_DebugProgressCancel_Init();
    libCamp_gt_TS_DebugPROGRESS_Init();
    libCamp_gt_TS_DebugPROGRESSDevelop_Init();
    libCamp_gt_TS_DebugProgressOKCallback_Init();
    libCamp_gt_TS_DebugResearchPanel_Init();
    libCamp_gt_TS_DebugResearchPanelCloseButtonClicked_Init();
    libCamp_gt_TS_DebugResearchPanelExit_Init();
    libCamp_gt_TS_DebugResearchPanelButtonClicked_Init();
    libCamp_gt_TS_DebugResearchPoint_Init();
    libCamp_gt_TS_DebugMercenaryPanel_Init();
    libCamp_gt_TS_DebugMercenaryPanelCloseButtonClicked_Init();
    libCamp_gt_TS_DebugMercenaryPanelExit_Init();
    libCamp_gt_TS_DebugMercenaryPanelButtonClicked_Init();
    libCamp_gt_TS_DebugBuyTechButtonClicked_Init();
    libCamp_gt_TS_DebugBuyTechConsoleExit_Init();
    libCamp_gt_DebugBUYTECH_Init();
    libCamp_gt_DebugDisplayTechCustomButton_Init();
    libCamp_gt_DebugHideTechCustomButton_Init();
    libCamp_gt_DebugTechCustomButtonClicked_Init();
    libCamp_gt_DebugCREDITS_Init();
    libCamp_gt_DebugDIFFICULTY_Init();
    libCamp_gt_TS_DebugXDATA_Init();
    libCamp_gt_TS_DebugXDEFAULT_Init();
    libCamp_gt_TS_DebugXLOAD_Init();
    libCamp_gt_TS_FootageRecording_Init();
    libCamp_gt_TS_DebugVictorySequence_Init();
    libCamp_gt_TS_DebugVictoryScoreScreen_Init();
    libCamp_gt_DebugPerfTestGetFps_Init();
    libCamp_gt_DebugSTARTFPS_Init();
    libCamp_gt_DebugSTOPFPS_Init();
    libCamp_gt_StartTensionMusic_Init();
    libCamp_gt_StopTensionMusic_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libCamp_InitLib_completed = false;

void libCamp_InitLib () {
    if (libCamp_InitLib_completed) {
        return;
    }

    libCamp_InitLib_completed = true;

    libCamp_InitLibraries();
    libCamp_InitVariables();
    libCamp_InitTriggers();
}

