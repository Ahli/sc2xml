//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Dark Whispers
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"
include "LibA3DDD02B"
include "ai0724FA09"
include "ai9F879D34"
include "ai0A40DCBA"
include "aiBDC4060E"
include "ai0E1D3808"
include "ai9801B756"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libHots_InitLib();
    libA3DDD02B_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_MOEBIUS_S01 = 2;
const int gv_pLAYER_03_MOEBIUS_S02 = 3;
const int gv_pLAYER_04_MOEBIUS_S03 = 4;
const int gv_pLAYER_05_KERRIGAN_S01 = 5;
const int gv_pLAYER_06_KERRIGAN_S02 = 6;
const int gv_pLAYER_07_KERRIGAN_S03 = 7;
const int gv_pLAYER_08_KERRIGAN_NOSHAREVISION = 8;
const int gv_pLAYER_09_MOEBIUS_FINALAREA = 9;
const int gv_pLAYER_10_PROTOSS_CAPTIVES = 10;
const int gv_pLAYER_11_MOEBIUS_BRIDGECONTROL = 11;
const int gv_objectivePylonContainmentUnitsMax = 2;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
playergroup gv_moebiusPlayerGroup;
playergroup gv_swarmPlayerGroup;
unit gv_superWarpGate;
bool gv_gameOver;
bool gv_inCinematic;
string gv_mapMusicTrack;
bool gv_postHoldingPen02DoorSeen;
int gv_playerEntersZergBaseCycle;
unit[3] gv_stolenPylon;
unit gv_pylonContainmentUnit01;
unit gv_pylonContainmentUnit02;
int gv_pingGather;
int gv_pingAttack;
wave gv_currentWave;
unitgroup gv_currentWaveUnitGroup;
int gv_waveBuildTime;
int gv_waveCooldownTime;
revealer gv_gatherRevealer;
bool gv_firstZergWaveSent;
int gv_zergWaveGatherTransmissionCount;
int gv_zergWaveSendTransmissionCount;
int gv_unitsLostToZerg;
int gv_zergUnitsKilled;
int gv_warpingTerranKilled;
int gv_objectiveFreeCaptiveProtoss01;
int gv_objectiveFreeCaptiveProtoss02;
int gv_objectiveFreeCaptiveProtoss03;
int gv_objectiveReactorMustSurvive;
int gv_objectivePylonContainmentUnits;
int gv_objectivePylonContainmentUnitsCount;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicPausedUnits;
unitgroup gv_cinematicTempUnits;
bool gv_cinematicCompleted;
unitgroup gv_introZergGroup;
unit gv_introVoidseeker;
int[12] gv_introResources;
actor gv_introAirlockModel;
unitgroup gv_midZealots;
bool gv_midUnitsRescued;
unit gv_midSpeaker;
unit gv_victoryZeratul;
unit gv_victoryTalis;
unitgroup gv_victoryZeratulGroup;
unitgroup gv_victoryRescuedProtoss;
actor gv_victoryHoloPlanetDisplayModel;

void InitGlobals () {
    gv_moebiusPlayerGroup = PlayerGroupEmpty();
    gv_swarmPlayerGroup = PlayerGroupEmpty();
    gv_superWarpGate = UnitFromId(1516);
    gv_playerEntersZergBaseCycle = 1;
    gv_pylonContainmentUnit01 = UnitFromId(1593);
    gv_pylonContainmentUnit02 = UnitFromId(1594);
    gv_pingGather = c_invalidPingId;
    gv_pingAttack = c_invalidPingId;
    gv_currentWaveUnitGroup = UnitGroupEmpty();
    gv_waveBuildTime = 90;
    gv_waveCooldownTime = 60;
    gv_objectiveFreeCaptiveProtoss01 = c_invalidObjectiveId;
    gv_objectiveFreeCaptiveProtoss02 = c_invalidObjectiveId;
    gv_objectiveFreeCaptiveProtoss03 = c_invalidObjectiveId;
    gv_objectiveReactorMustSurvive = c_invalidObjectiveId;
    gv_objectivePylonContainmentUnits = c_invalidObjectiveId;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_introZergGroup = UnitGroupEmpty();
    gv_midZealots = UnitGroupEmpty();
    gv_victoryZeratulGroup = UnitGroupEmpty();
    gv_victoryRescuedProtoss = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_TrackUnitGroupWithPing (unitgroup lp_unitGroup);
void gf_CreateInfoText (unit lp_cHOSEN_UNIT);
void gf_WarpInTerranUnit (unit lp_unit);
void gf_RevealPath (int lp_startingWaypoint, int lp_endingWaypoint);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init01aKerriganTechnology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04MusicSound;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_UnitTrainedOrConstructed;
trigger gt_GatewayWarpgateMorph;
trigger gt_StartGame;
trigger gt_KerriganIntroQ;
trigger gt_PlayerEntersFirstDoorOpen;
trigger gt_SecondMoebiusGroupMarineTauntQ;
trigger gt_PlayerEntersDoorAmbushAreaQ;
trigger gt_MoebiusReveal01ClearedDoorAmbush;
trigger gt_BridgeGeneratorDiscovered;
trigger gt_BridgeGeneratorAttacked;
trigger gt_BridgeGeneratorDiesQ;
trigger gt_UnitEntersScientistsRun01;
trigger gt_UnitEntersScientistsRun02;
trigger gt_UnitEntersHybridChamberLargeExplode01;
trigger gt_UnitEntersHybridChamberLargeExplode02;
trigger gt_UnitEntersMechAmbush;
trigger gt_UnitEntersLastStretchDiscoveredQ;
trigger gt_UnitEntersHerculesFlyAway;
trigger gt_HybridStartsAttackingQ;
trigger gt_RevealObjectiveLocation01Q;
trigger gt_UnitKillsHoldingPen01;
trigger gt_RevealObjectiveLocation02Q;
trigger gt_UnitKillsHoldingPen02Q;
trigger gt_RevealObjectiveLocation03;
trigger gt_PlayerSeesDoorNearHoldingPen02;
trigger gt_UnitEntersZergBaseQ;
trigger gt_PlayerKillsZergForceQ;
trigger gt_PlayerFindsBonusObjective1;
trigger gt_PlayerFindsBonusObjective2;
trigger gt_CreateBonusObjectiveQ;
trigger gt_BO01DoorOpenVignette;
trigger gt_ReclaimPylon1Q;
trigger gt_ReclaimPylon2Q;
trigger gt_DestroyPylon1Reticle;
trigger gt_DestroyPylon2Reticle;
trigger gt_ReclaimPylon1WarpInReinforcements;
trigger gt_ReclaimPylon2WarpInReinforcements;
trigger gt_RescueSuperWarpGateTrainedUnits;
trigger gt_StartAI;
trigger gt_AIUpgradesCasualNormal;
trigger gt_AIUpgradesHardBrutal;
trigger gt_KerriganController;
trigger gt_KerriganWaveSent;
trigger gt_TransmissionZergWaveGatherQ;
trigger gt_TransmissionZergWaveSendQ;
trigger gt_CreepTumorConstructed;
trigger gt_DoorsAttacked;
trigger gt_Kerrigan05WaveController;
trigger gt_KerriganInitialWave;
trigger gt_KerriganInitialWaveGatheringQ;
trigger gt_Kerrigan05Wave;
trigger gt_Kerrigan05WaveGathering;
trigger gt_Kerrigan05StopWave;
trigger gt_Kerrigan05SetupForwardBase;
trigger gt_Kerrigan06WaveController;
trigger gt_Kerrigan06Wave;
trigger gt_Kerrigan06WaveGathering;
trigger gt_Kerrigan06StopWave;
trigger gt_Kerrigan06SetupForwardBase;
trigger gt_Kerrigan07WaveController;
trigger gt_Kerrigan07InitialWave;
trigger gt_Kerrigan07RevealAndWarnFinalBaseTransmissionQ;
trigger gt_Kerrigan07Wave;
trigger gt_Kerrigan07WaveGathering;
trigger gt_MoebiusCorpsAttackWarning01Q;
trigger gt_MoebiusHerculesWave01BrutalOnly;
trigger gt_MoebiusHerculesWave02BrutalOnly;
trigger gt_MoebiusCorpsAttackWarning02Q;
trigger gt_DefeatBaseDead;
trigger gt_DefeatStationReactorDestroyed;
trigger gt_VictoryPrimaryObjectiveCompleted;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_TipMissionHelpQ;
trigger gt_StatUnitDiesVarious;
trigger gt_AchievementZergUnitsKilled;
trigger gt_AchievementWarpingTerranKilledNormal;
trigger gt__10thAnniversaryAchievementDestroyallZergstructuresbeforefreeingallcaptiveProtoss;
trigger gt_ObjectiveFreeCaptiveProtoss01Create;
trigger gt_ObjectiveFreeCaptiveProtoss01Complete;
trigger gt_ObjectiveFreeCaptiveProtoss01Failed;
trigger gt_ObjectiveFreeCaptiveProtoss02Create;
trigger gt_ObjectiveFreeCaptiveProtoss02Complete;
trigger gt_ObjectiveFreeCaptiveProtoss02Failed;
trigger gt_ObjectiveFreeCaptiveProtoss03Create;
trigger gt_ObjectiveFreeCaptiveProtoss03Complete;
trigger gt_ObjectiveFreeCaptiveProtoss03Failed;
trigger gt_ObjectiveStationReactorMustSurviveCreate;
trigger gt_ObjectiveStationReactorMustSurviveComplete;
trigger gt_ObjectiveStationReactorMustSurviveFailed;
trigger gt_ObjectivePylonContainmentUnitsCreate;
trigger gt_ObjectivePylonContainmentUnitsUpdate;
trigger gt_ObjectivePylonContainmentUnitsCompleteQ;
trigger gt_ObjectivePylonContainmentUnitsFailed;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_MidQ;
trigger gt_MidSetup;
trigger gt_MidCinematic;
trigger gt_MidCinematicEnd;
trigger gt_MidCleanup;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;

//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;

//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        cai_playerAI[init_i] = null;
    }
}

//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;

    if (cai_playerAI[p] == "ai0724FA09") { ai0724FA09_start(p); }
    if (cai_playerAI[p] == "ai9F879D34") { ai9F879D34_start(p); }
    if (cai_playerAI[p] == "ai0A40DCBA") { ai0A40DCBA_start(p); }
    if (cai_playerAI[p] == "aiBDC4060E") { aiBDC4060E_start(p); }
    if (cai_playerAI[p] == "ai0E1D3808") { ai0E1D3808_start(p); }
    if (cai_playerAI[p] == "ai9801B756") { ai9801B756_start(p); }
}

//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai0724FA09") { ai0724FA09_setDefGather(p, val); }
    if (cai_playerAI[p] == "ai9F879D34") { ai9F879D34_setDefGather(p, val); }
    if (cai_playerAI[p] == "ai0A40DCBA") { ai0A40DCBA_setDefGather(p, val); }
    if (cai_playerAI[p] == "aiBDC4060E") { aiBDC4060E_setDefGather(p, val); }
    if (cai_playerAI[p] == "ai0E1D3808") { ai0E1D3808_setDefGather(p, val); }
    if (cai_playerAI[p] == "ai9801B756") { ai9801B756_setDefGather(p, val); }
}

//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai0724FA09") { return ai0724FA09_getCustomData(p); }
    if (cai_playerAI[p] == "ai9F879D34") { return ai9F879D34_getCustomData(p); }
    if (cai_playerAI[p] == "ai0A40DCBA") { return ai0A40DCBA_getCustomData(p); }
    if (cai_playerAI[p] == "aiBDC4060E") { return aiBDC4060E_getCustomData(p); }
    if (cai_playerAI[p] == "ai0E1D3808") { return ai0E1D3808_getCustomData(p); }
    if (cai_playerAI[p] == "ai9801B756") { return ai9801B756_getCustomData(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai0724FA09") { return ai0724FA09_getLastWave(p); }
    if (cai_playerAI[p] == "ai9F879D34") { return ai9F879D34_getLastWave(p); }
    if (cai_playerAI[p] == "ai0A40DCBA") { return ai0A40DCBA_getLastWave(p); }
    if (cai_playerAI[p] == "aiBDC4060E") { return aiBDC4060E_getLastWave(p); }
    if (cai_playerAI[p] == "ai0E1D3808") { return ai0E1D3808_getLastWave(p); }
    if (cai_playerAI[p] == "ai9801B756") { return ai9801B756_getLastWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai0724FA09") { ai0724FA09_waves_run(p, target); }
    if (cai_playerAI[p] == "ai9F879D34") { ai9F879D34_waves_run(p, target); }
    if (cai_playerAI[p] == "ai0A40DCBA") { ai0A40DCBA_waves_run(p, target); }
    if (cai_playerAI[p] == "aiBDC4060E") { aiBDC4060E_waves_run(p, target); }
    if (cai_playerAI[p] == "ai0E1D3808") { ai0E1D3808_waves_run(p, target); }
    if (cai_playerAI[p] == "ai9801B756") { ai9801B756_waves_run(p, target); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai0724FA09") { ai0724FA09_waves_enable(p, val); }
    if (cai_playerAI[p] == "ai9F879D34") { ai9F879D34_waves_enable(p, val); }
    if (cai_playerAI[p] == "ai0A40DCBA") { ai0A40DCBA_waves_enable(p, val); }
    if (cai_playerAI[p] == "aiBDC4060E") { aiBDC4060E_waves_enable(p, val); }
    if (cai_playerAI[p] == "ai0E1D3808") { ai0E1D3808_waves_enable(p, val); }
    if (cai_playerAI[p] == "ai9801B756") { ai9801B756_waves_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "ai0724FA09") { ai0724FA09_waves_stop(); }
    if (ai == "ai9F879D34") { ai9F879D34_waves_stop(); }
    if (ai == "ai0A40DCBA") { ai0A40DCBA_waves_stop(); }
    if (ai == "aiBDC4060E") { aiBDC4060E_waves_stop(); }
    if (ai == "ai0E1D3808") { ai0E1D3808_waves_stop(); }
    if (ai == "ai9801B756") { ai9801B756_waves_stop(); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai0724FA09") { ai0724FA09_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "ai9F879D34") { ai9F879D34_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "ai0A40DCBA") { ai0A40DCBA_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "aiBDC4060E") { aiBDC4060E_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "ai0E1D3808") { ai0E1D3808_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "ai9801B756") { ai9801B756_wave_run(w, p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai0724FA09") { ai0724FA09_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "ai9F879D34") { ai9F879D34_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "ai0A40DCBA") { ai0A40DCBA_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "aiBDC4060E") { aiBDC4060E_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "ai0E1D3808") { ai0E1D3808_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "ai9801B756") { ai9801B756_wave_enable(w, p, val); }
}

//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "ai0724FA09") { return ai0724FA09_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "ai9F879D34") { return ai9F879D34_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "ai0A40DCBA") { return ai0A40DCBA_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "aiBDC4060E") { return aiBDC4060E_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "ai0E1D3808") { return ai0E1D3808_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "ai9801B756") { return ai9801B756_wave_isEnabled(w, p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai0724FA09") { return ai0724FA09_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "ai9F879D34") { return ai9F879D34_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "ai0A40DCBA") { return ai0A40DCBA_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "aiBDC4060E") { return aiBDC4060E_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "ai0E1D3808") { return ai0E1D3808_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "ai9801B756") { return ai9801B756_wave_createdUnits(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai0724FA09") { return ai0724FA09_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "ai9F879D34") { return ai9F879D34_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "ai0A40DCBA") { return ai0A40DCBA_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "aiBDC4060E") { return aiBDC4060E_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "ai0E1D3808") { return ai0E1D3808_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "ai9801B756") { return ai9801B756_wave_createdWave(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_startall () {
    cai_start("ai0724FA09", 2);
    cai_start("ai9F879D34", 3);
    cai_start("ai0A40DCBA", 5);
    cai_start("aiBDC4060E", 6);
    cai_start("ai0E1D3808", 7);
    cai_start("ai9801B756", 8);
    AICampaignStart(4);
    AICampaignStart(9);
    AICampaignStart(10);
    AICampaignStart(11);
}

//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(2, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(3, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    PlayerGroupAdd(target, 2);
    PlayerGroupAdd(target, 3);
    PlayerGroupAdd(target, 4);
    cai_waves_run(5, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    PlayerGroupAdd(target, 2);
    PlayerGroupAdd(target, 3);
    PlayerGroupAdd(target, 4);
    cai_waves_run(6, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    PlayerGroupAdd(target, 2);
    PlayerGroupAdd(target, 3);
    PlayerGroupAdd(target, 4);
    cai_waves_run(7, target);
}

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
trigger auto_gf_TrackUnitGroupWithPing_Trigger = null;
unitgroup auto_gf_TrackUnitGroupWithPing_lp_unitGroup;

void gf_TrackUnitGroupWithPing (unitgroup lp_unitGroup) {
    auto_gf_TrackUnitGroupWithPing_lp_unitGroup = lp_unitGroup;

    if (auto_gf_TrackUnitGroupWithPing_Trigger == null) {
        auto_gf_TrackUnitGroupWithPing_Trigger = TriggerCreate("auto_gf_TrackUnitGroupWithPing_TriggerFunc");
    }

    TriggerExecute(auto_gf_TrackUnitGroupWithPing_Trigger, false, false);
}

bool auto_gf_TrackUnitGroupWithPing_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_unitGroup = auto_gf_TrackUnitGroupWithPing_lp_unitGroup;

    // Variable Declarations
    int lv_groupPing;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_groupPing = c_invalidPingId;

    // Implementation
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", UnitGroupCenterOfGroup(lp_unitGroup), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    lv_groupPing = PingLastCreated();
    PingSetScale(PingLastCreated(), 0.75);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/6E88D525"));
    while ((gv_gameOver == false)) {
        if ((UnitGroupCount(lp_unitGroup, c_unitCountAlive) > 0)) {
            PingSetPosition(lv_groupPing, UnitGroupCenterOfGroup(lp_unitGroup));
        }
        else {
            PingDestroy(lv_groupPing);
            return true;
        }
        Wait(0.0625, c_timeGame);
    }
    return true;
}

void gf_CreateInfoText (unit lp_cHOSEN_UNIT) {
    // Automatic Variable Declarations
    string autoF650CFE9_val;

    // Implementation
    if ((gv_gameOver == true)) {
        return ;
    }

    autoF650CFE9_val = UnitGetType(lp_cHOSEN_UNIT);
    if (autoF650CFE9_val == "Nexus") {
        libA3DDD02B_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/4300C019"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/1ECE4B4E"));
    }
    else if (autoF650CFE9_val == "Probe") {
        libA3DDD02B_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/36B9565E"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/DC4AB7F9"));
    }
    else if (autoF650CFE9_val == "Assimilator") {
        libA3DDD02B_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, null, UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/C7C1B5CB"));
    }
    else if (autoF650CFE9_val == "Pylon") {
        libA3DDD02B_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/08A1D61D"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/15B27070"));
    }
    else if (autoF650CFE9_val == "Gateway") {
        libA3DDD02B_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/A9C5B698"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/3EA10D89"));
    }
    else if (autoF650CFE9_val == "WarpGate") {
        libA3DDD02B_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/C1D33998"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/72EA495C"));
    }
    else if (autoF650CFE9_val == "RoboticsFacility") {
        libA3DDD02B_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/8C7621C3"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/F1AEE3F5"));
    }
    else if (autoF650CFE9_val == "Forge") {
        libA3DDD02B_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/484FACD6"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/986749C0"));
    }
    else if (autoF650CFE9_val == "CyberneticsCore") {
        libA3DDD02B_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/11A08C5E"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/1057D07C"));
    }
    else if (autoF650CFE9_val == "TwilightCouncil") {
        libA3DDD02B_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/6F60C530"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/66C70690"));
    }
    else if (autoF650CFE9_val == "TemplarArchive") {
        libA3DDD02B_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/AC3E295E"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/2AD424F2"));
    }
    else if (autoF650CFE9_val == "DarkShrine") {
        libA3DDD02B_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/8D1AC3AC"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/D5F0D55F"));
    }
    else if (autoF650CFE9_val == "RoboticsBay") {
        libA3DDD02B_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/512FC8EB"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/46996082"));
    }
    else if (autoF650CFE9_val == "PhotonCannon") {
        libA3DDD02B_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/B9498410"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/AC1BC555"));
    }
    else if (autoF650CFE9_val == "VespeneGeyser") {
        libA3DDD02B_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, null, UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/1B5CA85A"));
    }
    else if (autoF650CFE9_val == "SpacePlatformGeyser") {
        libA3DDD02B_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, null, UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/5FDA7620"));
    }
    else if (autoF650CFE9_val == "MineralField") {
        libA3DDD02B_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, null, UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/4E891A2D"));
    }
    else if (autoF650CFE9_val == "GasCanisterProtoss") {
        libA3DDD02B_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/1BE1C112"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/DE30DBC3"));
    }
    else if (autoF650CFE9_val == "NaturalMinerals") {
        libA3DDD02B_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/53251337"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/7B19B328"));
    }
    else {
    }
    UnitSetState(lp_cHOSEN_UNIT, c_unitStateTooltipable, true);
}

trigger auto_gf_WarpInTerranUnit_Trigger = null;
unit auto_gf_WarpInTerranUnit_lp_unit;

void gf_WarpInTerranUnit (unit lp_unit) {
    auto_gf_WarpInTerranUnit_lp_unit = lp_unit;

    if (auto_gf_WarpInTerranUnit_Trigger == null) {
        auto_gf_WarpInTerranUnit_Trigger = TriggerCreate("auto_gf_WarpInTerranUnit_TriggerFunc");
    }

    TriggerExecute(auto_gf_WarpInTerranUnit_Trigger, false, false);
}

bool auto_gf_WarpInTerranUnit_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_WarpInTerranUnit_lp_unit;

    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_ShowHideUnit(lp_unit, true);
    libNtve_gf_PauseUnit(lp_unit, false);
    UnitBehaviorAddPlayer(lp_unit, "TerranWarpIn", UnitGetOwner(lp_unit), 1);
    UnitSetCustomValue(lp_unit, 0, 1.0);
    Wait(5.0, c_timeGame);
    if ((UnitIsAlive(lp_unit) == true)) {
        UnitSetCustomValue(lp_unit, 0, 0.0);
    }

    return true;
}

void gf_RevealPath (int lp_startingWaypoint, int lp_endingWaypoint) {
    // Variable Declarations
    int lv_pathIndex;
    string lv_currentPointName;

    // Automatic Variable Declarations
    int autoE808723A_ae;
    const int autoE808723A_ai = 1;

    // Variable Initialization
    lv_currentPointName = "";

    // Implementation
    autoE808723A_ae = lp_endingWaypoint;
    lv_pathIndex = lp_startingWaypoint;
    for ( ; ( (autoE808723A_ai >= 0 && lv_pathIndex <= autoE808723A_ae) || (autoE808723A_ai < 0 && lv_pathIndex >= autoE808723A_ae) ) ; lv_pathIndex += autoE808723A_ai ) {
        if ((lv_pathIndex < 10)) {
            lv_currentPointName = ("PathWaypoint_0" + IntToString(lv_pathIndex));
        }
        else {
            lv_currentPointName = ("PathWaypoint_" + IntToString(lv_pathIndex));
        }
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingArrow", PointFromName(lv_currentPointName), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 20.0, PointGetFacing(PointFromName(lv_currentPointName)));
        PingSetScale(PingLastCreated(), 0.65);
        Wait(0.125, c_timeGame);
    }
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libA3DDD02B_gf_ULoadCampaignData("VoidPrologue01");
    TriggerExecute(gt_Init01Technology, true, true);
    TriggerExecute(gt_Init01aKerriganTechnology, true, true);
    libA3DDD02B_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03Units, true, true);
    TriggerExecute(gt_Init04MusicSound, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulties, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    TriggerExecute(gt_IntroQ, true, true);
    TriggerExecute(gt_StartGame, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libA3DDD02B_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("HallucinationArchon", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("HallucinationColossus", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("HallucinationHighTemplar", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("HallucinationImmortal", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("HallucinationOracle", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("HallucinationPhoenix", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("HallucinationProbe", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("HallucinationStalker", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("HallucinationVoidRay", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("HallucinationWarpPrism", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("HallucinationZealot", 0), false);
    libA3DDD02B_gf_EnableCampaignTechUnit(true, "Zealot", gv_pLAYER_01_USER);
    libA3DDD02B_gf_EnableCampaignTechUnit(true, "Sentry", gv_pLAYER_01_USER);
    libA3DDD02B_gf_EnableCampaignTechUnit(true, "Stalker", gv_pLAYER_01_USER);
    libA3DDD02B_gf_EnableCampaignTechUnit(true, "HighTemplar", gv_pLAYER_01_USER);
    libA3DDD02B_gf_EnableCampaignTechUnit(true, "DarkTemplar", gv_pLAYER_01_USER);
    libA3DDD02B_gf_EnableCampaignTechUnit(true, "Archon", gv_pLAYER_01_USER);
    libA3DDD02B_gf_EnableCampaignTechUnit(true, "Immortal", gv_pLAYER_01_USER);
    libA3DDD02B_gf_EnableCampaignTechUnit(true, "Colossus", gv_pLAYER_01_USER);
    libA3DDD02B_gf_EnableCampaignTechUnit(true, "WarpGate", gv_pLAYER_01_USER);
    TechTreeUpgradeAddLevel(gv_pLAYER_01_USER, "Charge", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_01_USER, "BlinkTech", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_01_USER, "haltech", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_01_USER, "PsiStormTech", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_01_USER, "ExtendedThermalLance", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01a Kerrigan Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01aKerriganTechnology_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    const int autoAD964694_ae = 8;
    const int autoAD964694_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_indexPlayer = 5;
    for ( ; ( (autoAD964694_ai >= 0 && lv_indexPlayer <= autoAD964694_ae) || (autoAD964694_ai < 0 && lv_indexPlayer >= autoAD964694_ae) ) ; lv_indexPlayer += autoAD964694_ai ) {
        TechTreeUnitAllow(lv_indexPlayer, "Zergling", false);
        TechTreeUnitAllow(lv_indexPlayer, "HotSSwarmling", false);
        TechTreeUnitAllow(lv_indexPlayer, "Baneling", false);
        TechTreeUnitAllow(lv_indexPlayer, "HotSSplitterlingBig", false);
        TechTreeUnitAllow(lv_indexPlayer, "Roach", false);
        TechTreeUnitAllow(lv_indexPlayer, "RoachCorpser", false);
        TechTreeUnitAllow(lv_indexPlayer, "HydraliskLurker", false);
        TechTreeUnitAllow(lv_indexPlayer, "Hydralisk", false);
        TechTreeUnitAllow(lv_indexPlayer, "SwarmHostMP", false);
        TechTreeUnitAllow(lv_indexPlayer, "SwarmHost", false);
        TechTreeUnitAllow(lv_indexPlayer, "SwarmHostSplitA", false);
        TechTreeUnitAllow(lv_indexPlayer, "Ultralisk", false);
        TechTreeUnitAllow(lv_indexPlayer, "HotSTorrasque", false);
        TechTreeUnitAllow(lv_indexPlayer, "Mutalisk", false);
        TechTreeUnitAllow(lv_indexPlayer, "MutaliskViper", false);
        TechTreeUnitAllow(lv_indexPlayer, "HotSRaptor", true);
        TechTreeUnitAllow(lv_indexPlayer, "HotSHunter", true);
        TechTreeUnitAllow(lv_indexPlayer, "RoachVileBurrowed", true);
        TechTreeUnitAllow(lv_indexPlayer, "HydraliskImpalerBurrowed", true);
        TechTreeUnitAllow(lv_indexPlayer, "SwarmHostSplitB", true);
        TechTreeUnitAllow(lv_indexPlayer, "HotSNoxious", true);
        TechTreeUnitAllow(lv_indexPlayer, "MutaliskBroodlord", true);
        TechTreeUpgradeAddLevel(lv_indexPlayer, "HotSHaveRaptor", 1);
        TechTreeAbilityAllow(lv_indexPlayer, AbilityCommand("LarvaTrainSwarm", 6), true);
        TechTreeUpgradeAddLevel(lv_indexPlayer, "HotSHunter", 1);
        TechTreeUpgradeAddLevel(lv_indexPlayer, "HotsCentrifugalHooks", 1);
        TechTreeAbilityAllow(lv_indexPlayer, AbilityCommand("MorphZerglingToHunter", 0), true);
        TechTreeUpgradeAddLevel(lv_indexPlayer, "HotSHaveVile", 1);
        TechTreeAbilityAllow(lv_indexPlayer, AbilityCommand("LarvaTrainSwarm", 0), true);
        TechTreeUpgradeAddLevel(lv_indexPlayer, "HotSImpaler", 1);
        TechTreeAbilityAllow(lv_indexPlayer, AbilityCommand("LarvaTrainSwarm", 20), true);
        TechTreeAbilityAllow(lv_indexPlayer, AbilityCommand("MorphRoachToImpaler", 0), true);
        TechTreeAbilityAllow(lv_indexPlayer, AbilityCommand("UpgradeToImpalerDen", 0), true);
        TechTreeAbilityAllow(lv_indexPlayer, AbilityCommand("MorphToSwarmHostSplitB", 0), true);
        TechTreeUpgradeAddLevel(lv_indexPlayer, "HotSNoxious", 1);
        TechTreeUpgradeAddLevel(lv_indexPlayer, "HotSUltraliskBurrowCharge", 1);
        TechTreeAbilityAllow(lv_indexPlayer, AbilityCommand("LarvaTrainSwarm", 17), true);
        TechTreeUpgradeAddLevel(lv_indexPlayer, "HotSMutaliskBroodlord", 1);
        TechTreeAbilityAllow(lv_indexPlayer, AbilityCommand("LarvaTrainSwarm", 23), true);
        TechTreeAbilityAllow(lv_indexPlayer, AbilityCommand("UpgradeToGreaterSpireBroodlord", 0), true);
        TechTreeUpgradeAddLevel(lv_indexPlayer, "HotSCampaignLarvaCountEasy", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01aKerriganTechnology_Init () {
    gt_Init01aKerriganTechnology = TriggerCreate("gt_Init01aKerriganTechnology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto5C17E54C_g;
    int auto5C17E54C_var;
    playergroup auto1C6444B9_g;
    int auto1C6444B9_var;
    playergroup autoC195F78B_g;
    int autoC195F78B_var;
    playergroup auto8D0F6DB8_g;
    int auto8D0F6DB8_var;
    playergroup autoD4F534C4_g;
    int autoD4F534C4_var;
    playergroup autoBA144306_g;
    int autoBA144306_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTeamResourceButton, false);
    PlayerGroupAdd(gv_moebiusPlayerGroup, gv_pLAYER_02_MOEBIUS_S01);
    PlayerGroupAdd(gv_moebiusPlayerGroup, gv_pLAYER_03_MOEBIUS_S02);
    PlayerGroupAdd(gv_moebiusPlayerGroup, gv_pLAYER_04_MOEBIUS_S03);
    PlayerGroupAdd(gv_moebiusPlayerGroup, gv_pLAYER_09_MOEBIUS_FINALAREA);
    PlayerGroupAdd(gv_moebiusPlayerGroup, gv_pLAYER_11_MOEBIUS_BRIDGECONTROL);
    PlayerGroupAdd(gv_swarmPlayerGroup, gv_pLAYER_05_KERRIGAN_S01);
    PlayerGroupAdd(gv_swarmPlayerGroup, gv_pLAYER_06_KERRIGAN_S02);
    PlayerGroupAdd(gv_swarmPlayerGroup, gv_pLAYER_07_KERRIGAN_S03);
    PlayerGroupAdd(gv_swarmPlayerGroup, gv_pLAYER_08_KERRIGAN_NOSHAREVISION);
    auto5C17E54C_g = gv_moebiusPlayerGroup;
    auto5C17E54C_var = -1;
    while (true) {
        auto5C17E54C_var = PlayerGroupNextPlayer(auto5C17E54C_g, auto5C17E54C_var);
        if (auto5C17E54C_var < 0) { break; }
        libNtve_gf_SetAlliance(gv_pLAYER_01_USER, auto5C17E54C_var, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(gv_pLAYER_05_KERRIGAN_S01, auto5C17E54C_var, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(gv_pLAYER_06_KERRIGAN_S02, auto5C17E54C_var, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(gv_pLAYER_07_KERRIGAN_S03, auto5C17E54C_var, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(gv_pLAYER_08_KERRIGAN_NOSHAREVISION, auto5C17E54C_var, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(gv_pLAYER_09_MOEBIUS_FINALAREA, auto5C17E54C_var, libNtve_ge_AllianceSetting_Neutral);
        libNtve_gf_SetAlliance(gv_pLAYER_10_PROTOSS_CAPTIVES, auto5C17E54C_var, libNtve_ge_AllianceSetting_Neutral);
        libNtve_gf_SetAlliance(gv_pLAYER_11_MOEBIUS_BRIDGECONTROL, auto5C17E54C_var, libNtve_ge_AllianceSetting_Neutral);
    }
    libNtve_gf_SetPlayerGroupAlliance(gv_moebiusPlayerGroup, libNtve_ge_AllianceSetting_Neutral);
    auto1C6444B9_g = gv_swarmPlayerGroup;
    auto1C6444B9_var = -1;
    while (true) {
        auto1C6444B9_var = PlayerGroupNextPlayer(auto1C6444B9_g, auto1C6444B9_var);
        if (auto1C6444B9_var < 0) { break; }
        libNtve_gf_SetAlliance(gv_pLAYER_01_USER, auto1C6444B9_var, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(gv_pLAYER_09_MOEBIUS_FINALAREA, auto1C6444B9_var, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(gv_pLAYER_10_PROTOSS_CAPTIVES, auto1C6444B9_var, libNtve_ge_AllianceSetting_Neutral);
        libNtve_gf_SetAlliance(gv_pLAYER_11_MOEBIUS_BRIDGECONTROL, auto1C6444B9_var, libNtve_ge_AllianceSetting_Neutral);
    }
    libNtve_gf_SetPlayerGroupAlliance(gv_swarmPlayerGroup, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_09_MOEBIUS_FINALAREA, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_10_PROTOSS_CAPTIVES, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_09_MOEBIUS_FINALAREA, gv_pLAYER_10_PROTOSS_CAPTIVES, libNtve_ge_AllianceSetting_Neutral);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 250);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 50);
    autoC195F78B_g = gv_moebiusPlayerGroup;
    autoC195F78B_var = -1;
    while (true) {
        autoC195F78B_var = PlayerGroupNextPlayer(autoC195F78B_g, autoC195F78B_var);
        if (autoC195F78B_var < 0) { break; }
        PlayerSetState(autoC195F78B_var, c_playerStateMineralCostIgnored, true);
        PlayerSetState(autoC195F78B_var, c_playerStateVespeneCostIgnored, true);
        PlayerSetState(autoC195F78B_var, c_playerStateFoodIgnored, true);
    }
    auto8D0F6DB8_g = gv_swarmPlayerGroup;
    auto8D0F6DB8_var = -1;
    while (true) {
        auto8D0F6DB8_var = PlayerGroupNextPlayer(auto8D0F6DB8_g, auto8D0F6DB8_var);
        if (auto8D0F6DB8_var < 0) { break; }
        PlayerSetState(auto8D0F6DB8_var, c_playerStateMineralCostIgnored, true);
        PlayerSetState(auto8D0F6DB8_var, c_playerStateVespeneCostIgnored, true);
        PlayerSetState(auto8D0F6DB8_var, c_playerStateFoodIgnored, true);
    }
    PlayerSetState(gv_pLAYER_09_MOEBIUS_FINALAREA, c_playerStateMineralCostIgnored, true);
    PlayerSetState(gv_pLAYER_09_MOEBIUS_FINALAREA, c_playerStateVespeneCostIgnored, true);
    PlayerSetState(gv_pLAYER_09_MOEBIUS_FINALAREA, c_playerStateFoodIgnored, true);
    PlayerSetState(gv_pLAYER_10_PROTOSS_CAPTIVES, c_playerStateMineralCostIgnored, true);
    PlayerSetState(gv_pLAYER_10_PROTOSS_CAPTIVES, c_playerStateVespeneCostIgnored, true);
    PlayerSetState(gv_pLAYER_10_PROTOSS_CAPTIVES, c_playerStateFoodIgnored, true);
    PlayerSetState(0, c_playerStateFidgetingEnabled, false);
    PlayerSetState(gv_pLAYER_10_PROTOSS_CAPTIVES, c_playerStateFidgetingEnabled, false);
    autoD4F534C4_g = gv_moebiusPlayerGroup;
    autoD4F534C4_var = -1;
    while (true) {
        autoD4F534C4_var = PlayerGroupNextPlayer(autoD4F534C4_g, autoD4F534C4_var);
        if (autoD4F534C4_var < 0) { break; }
        PlayerSetColorIndex(autoD4F534C4_var, 1, true);
    }
    autoBA144306_g = gv_swarmPlayerGroup;
    autoBA144306_var = -1;
    while (true) {
        autoBA144306_var = PlayerGroupNextPlayer(autoBA144306_g, autoBA144306_var);
        if (autoBA144306_var < 0) { break; }
        PlayerSetColorIndex(autoBA144306_var, 4, true);
    }
    TechTreeUpgradeAddLevel(gv_pLAYER_09_MOEBIUS_FINALAREA, "DarkProtoss", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_prisonersRegion;

    // Automatic Variable Declarations
    unitgroup auto9CA4F5B1_g;
    int auto9CA4F5B1_u;
    unit auto9CA4F5B1_var;
    unitgroup auto59B2B908_g;
    int auto59B2B908_u;
    unit auto59B2B908_var;
    unitgroup auto94E9C61A_g;
    int auto94E9C61A_u;
    unit auto94E9C61A_var;
    unitgroup auto5257F168_g;
    int auto5257F168_u;
    unit auto5257F168_var;
    unitgroup auto377C8C2A_g;
    int auto377C8C2A_u;
    unit auto377C8C2A_var;
    unitgroup autoB0EA4610_g;
    int autoB0EA4610_u;
    unit autoB0EA4610_var;
    unitgroup auto9CE1B6B6_g;
    int auto9CE1B6B6_u;
    unit auto9CE1B6B6_var;

    // Variable Initialization
    lv_prisonersRegion = RegionEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    RegionAddRegion(lv_prisonersRegion, RegionFromId(13));
    RegionAddRegion(lv_prisonersRegion, RegionFromId(14));
    RegionAddRegion(lv_prisonersRegion, RegionFromId(15));
    auto9CA4F5B1_g = UnitGroup(null, gv_pLAYER_10_PROTOSS_CAPTIVES, lv_prisonersRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9CA4F5B1_u = UnitGroupCount(auto9CA4F5B1_g, c_unitCountAll);
    for (;; auto9CA4F5B1_u -= 1) {
        auto9CA4F5B1_var = UnitGroupUnitFromEnd(auto9CA4F5B1_g, auto9CA4F5B1_u);
        if (auto9CA4F5B1_var == null) { break; }
        libNtve_gf_PauseUnit(auto9CA4F5B1_var, true);
        libNtve_gf_MakeUnitInvulnerable(auto9CA4F5B1_var, true);
    }
    UnitSetPropertyFixed(UnitFromId(281), c_unitPropMovementSpeed, 2.75);
    gv_stolenPylon[1] = UnitFromId(1308);
    gv_stolenPylon[2] = UnitFromId(1325);
    libNtve_gf_MakeUnitInvulnerable(gv_stolenPylon[1], true);
    UnitSetState(gv_stolenPylon[1], c_unitStateHighlightable, false);
    UnitSetState(gv_stolenPylon[1], c_unitStateTargetable, false);
    UnitSetState(gv_stolenPylon[1], c_unitStateSelectable, false);
    libNtve_gf_MakeUnitInvulnerable(gv_stolenPylon[2], true);
    UnitSetState(gv_stolenPylon[2], c_unitStateHighlightable, false);
    UnitSetState(gv_stolenPylon[2], c_unitStateTargetable, false);
    UnitSetState(gv_stolenPylon[2], c_unitStateSelectable, false);
    UnitBehaviorAddPlayer(UnitFromId(61), "GenericDontDie", 0, 1);
    UnitBehaviorAddPlayer(UnitFromId(59), "GenericDontDie", 0, 1);
    UnitBehaviorAddPlayer(UnitFromId(375), "GenericDontDie", 0, 1);
    UnitBehaviorAddPlayer(UnitFromId(463), "GenericDontDie", 0, 1);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(75), true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(61), true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(59), true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(375), true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(463), true);
    UnitStatusBarOverride(UnitFromId(75), -1);
    UnitStatusBarOverride(UnitFromId(61), -1);
    UnitStatusBarOverride(UnitFromId(59), -1);
    UnitStatusBarOverride(UnitFromId(375), -1);
    UnitStatusBarOverride(UnitFromId(463), -1);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(161), true);
    libNtve_gf_MakeUnitUncommandable(UnitFromId(161), true);
    libNtve_gf_SendActorMessageToUnit(UnitFromId(161), "AnimGroupApply Work Stand,Work,Start Stand,Work,End");
    libA3DDD02B_gf_SetUnitInfoTextCampaignDetailed(UnitFromId(161), null, StringExternal("Param/Value/3361BDEA"), StringExternal("Param/Value/F8D811CE"));
    auto59B2B908_g = UnitGroup("HerculesLander", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto59B2B908_u = UnitGroupCount(auto59B2B908_g, c_unitCountAll);
    for (;; auto59B2B908_u -= 1) {
        auto59B2B908_var = UnitGroupUnitFromEnd(auto59B2B908_g, auto59B2B908_u);
        if (auto59B2B908_var == null) { break; }
        UnitBehaviorAddPlayer(auto59B2B908_var, "Harmless", gv_pLAYER_02_MOEBIUS_S01, 1);
    }
    auto94E9C61A_g = UnitGroup("MoebiusLabHoldingPen", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto94E9C61A_u = UnitGroupCount(auto94E9C61A_g, c_unitCountAll);
    for (;; auto94E9C61A_u -= 1) {
        auto94E9C61A_var = UnitGroupUnitFromEnd(auto94E9C61A_g, auto94E9C61A_u);
        if (auto94E9C61A_var == null) { break; }
        libA3DDD02B_gf_SetUnitInfoTextCampaignDetailed(auto94E9C61A_var, StringExternal("Param/Value/3BE9C638"), UnitTypeGetName(UnitGetType(auto94E9C61A_var)), StringExternal("Param/Value/ADADAE3D"));
        UnitSetState(auto94E9C61A_var, c_unitStateTooltipable, true);
    }
    auto5257F168_g = UnitGroup("HybridHoldingCellSmallUnit", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5257F168_u = UnitGroupCount(auto5257F168_g, c_unitCountAll);
    for (;; auto5257F168_u -= 1) {
        auto5257F168_var = UnitGroupUnitFromEnd(auto5257F168_g, auto5257F168_u);
        if (auto5257F168_var == null) { break; }
        UnitSetState(auto5257F168_var, c_unitStateHighlightable, false);
        UnitSetState(auto5257F168_var, c_unitStateSelectable, false);
        UnitSetState(auto5257F168_var, c_unitStateTargetable, false);
        UnitSetState(auto5257F168_var, c_unitStateInvulnerable, true);
    }
    auto377C8C2A_g = UnitGroup(null, gv_pLAYER_03_MOEBIUS_S02, RegionFromId(33), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto377C8C2A_u = UnitGroupCount(auto377C8C2A_g, c_unitCountAll);
    for (;; auto377C8C2A_u -= 1) {
        auto377C8C2A_var = UnitGroupUnitFromEnd(auto377C8C2A_g, auto377C8C2A_u);
        if (auto377C8C2A_var == null) { break; }
        libNtve_gf_PauseUnit(auto377C8C2A_var, true);
    }
    autoB0EA4610_g = UnitGroup(null, gv_pLAYER_04_MOEBIUS_S03, RegionFromId(48), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoB0EA4610_u = UnitGroupCount(autoB0EA4610_g, c_unitCountAll);
    for (;; autoB0EA4610_u -= 1) {
        autoB0EA4610_var = UnitGroupUnitFromEnd(autoB0EA4610_g, autoB0EA4610_u);
        if (autoB0EA4610_var == null) { break; }
        libNtve_gf_PauseUnit(autoB0EA4610_var, true);
    }
    auto9CE1B6B6_g = UnitGroup("Scientist", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9CE1B6B6_u = UnitGroupCount(auto9CE1B6B6_g, c_unitCountAll);
    for (;; auto9CE1B6B6_u -= 1) {
        auto9CE1B6B6_var = UnitGroupUnitFromEnd(auto9CE1B6B6_g, auto9CE1B6B6_u);
        if (auto9CE1B6B6_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(auto9CE1B6B6_var, "AnimGroupApply Scared");
        UnitSetPropertyFixed(auto9CE1B6B6_var, c_unitPropMovementSpeed, 2.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init04MusicSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mapMusicTrack = "ProtossMissionMusic";
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, false);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04MusicSound_Init () {
    gt_Init04MusicSound = TriggerCreate("gt_Init04MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    libLbty_gf_AutoRevealRegion(RegionFromId(35), RegionFromId(35), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(36), RegionFromId(36), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(37), RegionFromId(37), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(38), RegionFromId(38), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(39), RegionFromId(39), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(40), RegionFromId(40), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(16), RegionFromId(16), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(17), RegionFromId(17), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(18), RegionFromId(18), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(19), RegionFromId(19), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(20), RegionFromId(20), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(56), RegionFromId(56), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(33), RegionFromId(45), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(48), RegionFromId(58), gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto7E0B0009_g;
    int auto7E0B0009_u;
    unit auto7E0B0009_var;
    playergroup auto7FFDD0FE_g;
    int auto7FFDD0FE_var;
    playergroup autoD762701A_g;
    int autoD762701A_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libA3DDD02B_gf_DifficultyValuePrologueInteger(1, 1, 0, 0) == 1)) {
        auto7E0B0009_g = UnitGroup("Raven", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto7E0B0009_u = UnitGroupCount(auto7E0B0009_g, c_unitCountAll);
        for (;; auto7E0B0009_u -= 1) {
            auto7E0B0009_var = UnitGroupUnitFromEnd(auto7E0B0009_g, auto7E0B0009_u);
            if (auto7E0B0009_var == null) { break; }
            UnitIssueOrder(auto7E0B0009_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        }
    }

    if ((libA3DDD02B_gf_DifficultyValuePrologueInteger(0, 0, 1, 1) == 1)) {
        auto7FFDD0FE_g = gv_moebiusPlayerGroup;
        auto7FFDD0FE_var = -1;
        while (true) {
            auto7FFDD0FE_var = PlayerGroupNextPlayer(auto7FFDD0FE_g, auto7FFDD0FE_var);
            if (auto7FFDD0FE_var < 0) { break; }
            TechTreeUpgradeAddLevel(auto7FFDD0FE_var, "ShieldWall", 1);
            TechTreeUpgradeAddLevel(auto7FFDD0FE_var, "PunisherGrenades", 1);
            TechTreeUpgradeAddLevel(auto7FFDD0FE_var, "SiegeTech", 1);
            TechTreeUpgradeAddLevel(auto7FFDD0FE_var, "TerranInfantryWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto7FFDD0FE_var, "TerranVehicleWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto7FFDD0FE_var, "TerranShipWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto7FFDD0FE_var, "TerranInfantryArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(auto7FFDD0FE_var, "TerranVehicleArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(auto7FFDD0FE_var, "TerranShipArmorsLevel1", 1);
        }
        autoD762701A_g = gv_swarmPlayerGroup;
        autoD762701A_var = -1;
        while (true) {
            autoD762701A_var = PlayerGroupNextPlayer(autoD762701A_g, autoD762701A_var);
            if (autoD762701A_var < 0) { break; }
            TechTreeUpgradeAddLevel(autoD762701A_var, "zerglingmovementspeed", 1);
            TechTreeUpgradeAddLevel(autoD762701A_var, "hydraliskspeed", 1);
            TechTreeUpgradeAddLevel(autoD762701A_var, "ZergMeleeWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(autoD762701A_var, "ZergMissileWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(autoD762701A_var, "ZergFlyerWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(autoD762701A_var, "ZergGroundArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(autoD762701A_var, "ZergFlyerArmorsLevel1", 1);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libA3DDD02B_gf_CreateTipCampaign("Colossus", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
    libA3DDD02B_gf_CreateTipCampaign("Immortal", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
    libA3DDD02B_gf_CreateTipCampaign("HighTemplar", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
    libA3DDD02B_gf_CreateTipCampaign("DarkTemplar", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
    libA3DDD02B_gf_CreateTipCampaign("Sentry", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
    libA3DDD02B_gf_CreateTipCampaign("Stalker", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
    libA3DDD02B_gf_CreateTipCampaign("Zealot", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
    libA3DDD02B_gf_CreateTipCampaign("BewareZerg", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Trained Or Constructed
//--------------------------------------------------------------------------------------------------
bool gt_UnitTrainedOrConstructed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_01_USER) || (UnitGetOwner(EventUnitProgressUnit()) == 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_CreateInfoText(EventUnitProgressUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitTrainedOrConstructed_Init () {
    gt_UnitTrainedOrConstructed = TriggerCreate("gt_UnitTrainedOrConstructed_Func");
    TriggerAddEventUnitConstructProgress(gt_UnitTrainedOrConstructed, null, c_unitProgressStageStart);
    TriggerAddEventUnitTrainProgress(gt_UnitTrainedOrConstructed, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gateway/Warpgate Morph
//--------------------------------------------------------------------------------------------------
bool gt_GatewayWarpgateMorph_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER) || (UnitGetOwner(EventUnit()) == 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_CreateInfoText(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GatewayWarpgateMorph_Init () {
    gt_GatewayWarpgateMorph = TriggerCreate("gt_GatewayWarpgateMorph_Func");
    TriggerAddEventUnitAbility(gt_GatewayWarpgateMorph, null, AbilityCommand("UpgradeToWarpGate", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(gt_GatewayWarpgateMorph, null, AbilityCommand("MorphBackToGateway", 0), c_abilMorphStageUnitEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game
//--------------------------------------------------------------------------------------------------
bool gt_StartGame_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoA316DED6_g;
    int autoA316DED6_u;
    unit autoA316DED6_var;
    unitgroup autoBFF199A9_g;
    int autoBFF199A9_u;
    unit autoBFF199A9_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/E95A0106"), null, PointFromId(455));
    autoA316DED6_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA316DED6_u = UnitGroupCount(autoA316DED6_g, c_unitCountAll);
    for (;; autoA316DED6_u -= 1) {
        autoA316DED6_var = UnitGroupUnitFromEnd(autoA316DED6_g, autoA316DED6_u);
        if (autoA316DED6_var == null) { break; }
        gf_CreateInfoText(autoA316DED6_var);
    }
    autoBFF199A9_g = UnitGroup(null, 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBFF199A9_u = UnitGroupCount(autoBFF199A9_g, c_unitCountAll);
    for (;; autoBFF199A9_u -= 1) {
        autoBFF199A9_var = UnitGroupUnitFromEnd(autoBFF199A9_g, autoBFF199A9_u);
        if (autoBFF199A9_var == null) { break; }
        if (((UnitGetType(autoBFF199A9_var) == "MineralField") || (UnitGetType(autoBFF199A9_var) == "VespeneGeyser") || (UnitGetType(autoBFF199A9_var) == "SpacePlatformGeyser") || (UnitGetType(autoBFF199A9_var) == "GasCanisterProtoss") || (UnitGetType(autoBFF199A9_var) == "NaturalMinerals"))) {
            gf_CreateInfoText(autoBFF199A9_var);
        }

    }
    UnitIssueOrder(UnitFromId(2), OrderTargetingUnit(AbilityCommand("RallyNexus", 0), UnitFromId(6)), c_orderQueueReplace);
    TriggerExecute(gt_KerriganController, true, false);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_RevealObjectiveLocation01Q, true, true);
    Wait(10.0, c_timeAI);
    TriggerExecute(gt_KerriganIntroQ, true, true);
    TriggerExecute(gt_TipMissionHelpQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGame_Init () {
    gt_StartGame = TriggerCreate("gt_StartGame_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_KerriganIntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(7), 12.0, false);
    TriggerExecute(gt_ObjectiveStationReactorMustSurviveCreate, true, true);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/8CAC7446"), null, UnitGetPosition(UnitFromId(529)));
    SoundPlay(SoundLink("Ping", -1), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingCircle", UnitGetPosition(UnitFromId(529)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    libHots_gf_StorePingForUnit(UnitFromId(529), 1, PingLastCreated());
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/2A9170DC"));
    PingSetScale(PingLastCreated(), 0.5);
    Wait(2.0, c_timeReal);
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Speech);
    libA3DDD02B_gf_SendTransmissionCampaign(null, "vpMission_VoidPrologue01|Line00046", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_LeavePortraitVisibleAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Game);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(22), 8.0, false);
    libA3DDD02B_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(506), 2.0, Color(100.00, 0.00, 0.00));
    gf_RevealPath(1, 18);
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Speech);
    libA3DDD02B_gf_SendTransmissionCampaign(null, "vpMission_VoidPrologue01|Line00009", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libA3DDD02B_gf_SendTransmissionCampaign(null, "vpMission_VoidPrologue01|Line00010", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganIntroQ_Init () {
    gt_KerriganIntroQ = TriggerCreate("gt_KerriganIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Enters First Door Open
//--------------------------------------------------------------------------------------------------
bool gt_PlayerEntersFirstDoorOpen_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_airlockActor;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(61), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(2145), Order(AbilityCommand("MoebiusLabDoorsWideRightLowered", 0)), c_orderQueueReplace);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(61), 8.0, false);
    Wait(1.0, c_timeAI);
    libNtve_gf_CreateModelWithPointFacing("MoebiusLabDoorsWideAirlockWind", PointFromId(1679));
    lv_airlockActor = libNtve_gf_ActorLastCreated();
    ActorSend(lv_airlockActor, "AnimPlay Spell Stand,Unpowered,Start");
    Wait(2.0, c_timeGame);
    libNtve_gf_KillModel(lv_airlockActor);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerEntersFirstDoorOpen_Init () {
    gt_PlayerEntersFirstDoorOpen = TriggerCreate("gt_PlayerEntersFirstDoorOpen_Func");
    TriggerAddEventTimePeriodic(gt_PlayerEntersFirstDoorOpen, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Second Moebius Group Marine Taunt Q
//--------------------------------------------------------------------------------------------------
bool gt_SecondMoebiusGroupMarineTauntQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(57), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((UnitIsAlive(UnitFromId(156)) == true)) {
        libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Speech);
        libA3DDD02B_gf_SendTransmissionCampaign(UnitFromId(156), "vpMission_VoidPrologue01|Line00011", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SecondMoebiusGroupMarineTauntQ_Init () {
    gt_SecondMoebiusGroupMarineTauntQ = TriggerCreate("gt_SecondMoebiusGroupMarineTauntQ_Func");
    TriggerAddEventTimePeriodic(gt_SecondMoebiusGroupMarineTauntQ, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Enters Door Ambush Area Q
//--------------------------------------------------------------------------------------------------
bool gt_PlayerEntersDoorAmbushAreaQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(64), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Speech);
    libA3DDD02B_gf_SendTransmissionCampaign(null, "vpMission_VoidPrologue01|Line00056", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerEntersDoorAmbushAreaQ_Init () {
    gt_PlayerEntersDoorAmbushAreaQ = TriggerCreate("gt_PlayerEntersDoorAmbushAreaQ_Func");
    TriggerAddEventTimePeriodic(gt_PlayerEntersDoorAmbushAreaQ, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Moebius Reveal 01 Cleared - Door Ambush
//--------------------------------------------------------------------------------------------------
bool gt_MoebiusReveal01ClearedDoorAmbush_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_MOEBIUS_S01, RegionFromId(35), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(183), Order(AbilityCommand("MoebiusLabDoorsThinRightLowered", 0)), c_orderQueueReplace);
    Wait(4.0, c_timeAI);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(31), 16.0, true);
    UnitGroupIssueOrder(UnitGroup(null, gv_pLAYER_02_MOEBIUS_S01, RegionFromId(31), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(580)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoebiusReveal01ClearedDoorAmbush_Init () {
    gt_MoebiusReveal01ClearedDoorAmbush = TriggerCreate("gt_MoebiusReveal01ClearedDoorAmbush_Func");
    TriggerAddEventTimePeriodic(gt_MoebiusReveal01ClearedDoorAmbush, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bridge Generator Discovered
//--------------------------------------------------------------------------------------------------
bool gt_BridgeGeneratorDiscovered_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitIsAlive(UnitFromId(298)) == false)) {
        return true;
    }

    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(11), 2.0, false);
    libA3DDD02B_gf_AttachReticleEffectAndTextTagOnUnit(libA3DDD02B_ge_CampaginReticleType_ProtossEnemy, libA3DDD02B_ge_CampaginReticleSize_Medium, StringExternal("Param/Value/8F9B696F"), UnitFromId(298), "Ref_Center");
    libHots_gf_StoreActorForUnit(UnitFromId(298), 1, libNtve_gf_ActorLastCreated());
    libHots_gf_StoreTextTagForUnit(UnitFromId(298), 1, TextTagLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeGeneratorDiscovered_Init () {
    gt_BridgeGeneratorDiscovered = TriggerCreate("gt_BridgeGeneratorDiscovered_Func");
    TriggerAddEventUnitRegion(gt_BridgeGeneratorDiscovered, null, RegionFromId(11), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bridge Generator Attacked
//--------------------------------------------------------------------------------------------------
bool gt_BridgeGeneratorAttacked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitFromId(298), 1));
    TextTagDestroy(libHots_gf_TextTagForUnit(UnitFromId(298), 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeGeneratorAttacked_Init () {
    gt_BridgeGeneratorAttacked = TriggerCreate("gt_BridgeGeneratorAttacked_Func");
    TriggerAddEventUnitDamaged(gt_BridgeGeneratorAttacked, UnitRefFromUnit(UnitFromId(298)), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bridge Generator Dies Q
//--------------------------------------------------------------------------------------------------
bool gt_BridgeGeneratorDiesQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.25, c_timeAI);
    libNtve_gf_KillDoodadsInRegion(RegionFromId(28), "SpaceDockPowerLines");
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Protoss, RegionGetCenter(RegionFromId(28)));
    Wait(0.25, c_timeAI);
    libNtve_gf_KillDoodadsInRegion(RegionFromId(29), "SpaceDockPowerLines");
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Protoss, RegionGetCenter(RegionFromId(29)));
    Wait(0.25, c_timeAI);
    libNtve_gf_KillDoodadsInRegion(RegionFromId(32), "SpaceDockPowerLines");
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Protoss, RegionGetCenter(RegionFromId(32)));
    Wait(0.25, c_timeAI);
    libNtve_gf_KillDoodadsInRegion(RegionFromId(42), "SpaceDockPowerLines");
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Protoss, RegionGetCenter(RegionFromId(42)));
    Wait(2.0, c_timeAI);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(1), 16.0, false);
    libA3DDD02B_gf_PingMinimapCampaign(PlayerGroupSingle(gv_pLAYER_01_USER), UnitGetPosition(UnitFromId(270)), 3.0, Color(0.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/2545E670"), null, UnitGetPosition(UnitFromId(270)));
    UnitIssueOrder(UnitFromId(270), Order(AbilityCommand("ExtendingBridgeNELong8Out", 0)), c_orderQueueReplace);
    TriggerQueueEnter();
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Speech);
    libA3DDD02B_gf_SendTransmissionCampaign(null, "vpMission_VoidPrologue01|Line00012", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeGeneratorDiesQ_Init () {
    gt_BridgeGeneratorDiesQ = TriggerCreate("gt_BridgeGeneratorDiesQ_Func");
    TriggerAddEventUnitDied(gt_BridgeGeneratorDiesQ, UnitRefFromUnit(UnitFromId(298)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Enters Scientists Run 01
//--------------------------------------------------------------------------------------------------
bool gt_UnitEntersScientistsRun01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_scientistGroup;

    // Automatic Variable Declarations
    unitgroup auto8904C03B_g;
    int auto8904C03B_u;
    unit auto8904C03B_var;

    // Variable Initialization
    lv_scientistGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupAdd(lv_scientistGroup, UnitFromId(1868));
    UnitGroupAdd(lv_scientistGroup, UnitFromId(1869));
    UnitGroupAdd(lv_scientistGroup, UnitFromId(1870));
    while ((gv_gameOver == false)) {
        if ((UnitGroupCount(lv_scientistGroup, c_unitCountAlive) == 0)) {
            return true;
        }

        auto8904C03B_g = lv_scientistGroup;
        auto8904C03B_u = UnitGroupCount(auto8904C03B_g, c_unitCountAll);
        for (;; auto8904C03B_u -= 1) {
            auto8904C03B_var = UnitGroupUnitFromEnd(auto8904C03B_g, auto8904C03B_u);
            if (auto8904C03B_var == null) { break; }
            if ((DistanceBetweenPoints(UnitGetPosition(auto8904C03B_var), PointFromId(2146)) <= 1)) {
                UnitRemove(auto8904C03B_var);
            }

        }
        UnitGroupIssueOrder(lv_scientistGroup, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2146)), c_orderQueueReplace);
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitEntersScientistsRun01_Init () {
    gt_UnitEntersScientistsRun01 = TriggerCreate("gt_UnitEntersScientistsRun01_Func");
    TriggerAddEventUnitRegion(gt_UnitEntersScientistsRun01, null, RegionFromId(62), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Enters Scientists Run 02
//--------------------------------------------------------------------------------------------------
bool gt_UnitEntersScientistsRun02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_scientistGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_scientistGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupAdd(lv_scientistGroup, UnitFromId(1337));
    UnitGroupAdd(lv_scientistGroup, UnitFromId(1338));
    UnitGroupIssueOrder(lv_scientistGroup, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2147)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitEntersScientistsRun02_Init () {
    gt_UnitEntersScientistsRun02 = TriggerCreate("gt_UnitEntersScientistsRun02_Func");
    TriggerAddEventUnitRegion(gt_UnitEntersScientistsRun02, null, RegionFromId(63), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Enters Hybrid Chamber Large Explode 01
//--------------------------------------------------------------------------------------------------
bool gt_UnitEntersHybridChamberLargeExplode01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ActorSend(ActorFromDoodad(DoodadFromId(2149)), "AnimGroupApply Work Stand,Work,Start");
    Wait(0.75, c_timeAI);
    SoundPlayAtPointForPlayer(SoundLink("Aberration_Explode", -1), c_maxPlayers, PlayerGroupAll(), RegionGetCenter(RegionFromId(52)), 0.0, 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitEntersHybridChamberLargeExplode01_Init () {
    gt_UnitEntersHybridChamberLargeExplode01 = TriggerCreate("gt_UnitEntersHybridChamberLargeExplode01_Func");
    TriggerAddEventUnitRegion(gt_UnitEntersHybridChamberLargeExplode01, null, RegionFromId(52), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Enters Hybrid Chamber Large Explode 02
//--------------------------------------------------------------------------------------------------
bool gt_UnitEntersHybridChamberLargeExplode02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ActorSend(ActorFromDoodad(DoodadFromId(2150)), "AnimGroupApply Work Stand,Work,Start");
    SoundPlayAtPointForPlayer(SoundLink("Aberration_Explode", -1), c_maxPlayers, PlayerGroupAll(), RegionGetCenter(RegionFromId(52)), 0.0, 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitEntersHybridChamberLargeExplode02_Init () {
    gt_UnitEntersHybridChamberLargeExplode02 = TriggerCreate("gt_UnitEntersHybridChamberLargeExplode02_Func");
    TriggerAddEventUnitRegion(gt_UnitEntersHybridChamberLargeExplode02, null, RegionFromId(53), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Enters Mech Ambush
//--------------------------------------------------------------------------------------------------
bool gt_UnitEntersMechAmbush_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(166), Order(AbilityCommand("MoebiusLabDoorsWideLeftLowered", 0)), c_orderQueueReplace);
    Wait(2.0, c_timeAI);
    UnitGroupIssueOrder(UnitGroup(null, gv_pLAYER_04_MOEBIUS_S03, RegionFromId(23), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(71)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitEntersMechAmbush_Init () {
    gt_UnitEntersMechAmbush = TriggerCreate("gt_UnitEntersMechAmbush_Func");
    TriggerAddEventUnitRegion(gt_UnitEntersMechAmbush, null, RegionFromId(23), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Enters Last Stretch Discovered Q
//--------------------------------------------------------------------------------------------------
bool gt_UnitEntersLastStretchDiscoveredQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(21), 16.0, false);
    libA3DDD02B_gf_PingMinimapCampaign(PlayerGroupSingle(gv_pLAYER_01_USER), RegionGetCenter(RegionFromId(21)), 3.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/2C2BD713"), null, RegionGetCenter(RegionFromId(21)));
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Speech);
    libA3DDD02B_gf_SendTransmissionCampaign(null, "vpMission_VoidPrologue01|Line00014", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitEntersLastStretchDiscoveredQ_Init () {
    gt_UnitEntersLastStretchDiscoveredQ = TriggerCreate("gt_UnitEntersLastStretchDiscoveredQ_Func");
    TriggerAddEventTimePeriodic(gt_UnitEntersLastStretchDiscoveredQ, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Enters Hercules Fly Away
//--------------------------------------------------------------------------------------------------
bool gt_UnitEntersHerculesFlyAway_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(20), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitIsAlive(UnitFromId(1893)) == true)) {
        UnitIssueOrder(UnitFromId(1893), Order(AbilityCommand("HerculesLiftOff", 0)), c_orderQueueReplace);
        Wait(2.0, c_timeAI);
        libLbty_gf_OrderTransporttoUnloadAllthenDespawn(UnitFromId(1893), UnitGetPosition(UnitFromId(1893)), PointFromId(2181));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitEntersHerculesFlyAway_Init () {
    gt_UnitEntersHerculesFlyAway = TriggerCreate("gt_UnitEntersHerculesFlyAway_Func");
    TriggerAddEventTimePeriodic(gt_UnitEntersHerculesFlyAway, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Starts Attacking Q
//--------------------------------------------------------------------------------------------------
bool gt_HybridStartsAttackingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Speech);
    libA3DDD02B_gf_SendTransmissionCampaign(null, "vpMission_VoidPrologue01|Line00066", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridStartsAttackingQ_Init () {
    gt_HybridStartsAttackingQ = TriggerCreate("gt_HybridStartsAttackingQ_Func");
    TriggerAddEventUnitStartedAttack2(gt_HybridStartsAttackingQ, UnitRefFromUnit(UnitFromId(1485)), null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reveal Objective Location 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_RevealObjectiveLocation01Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    VisRevealArea(1, RegionFromId(13), 2.0, false);
    libA3DDD02B_gf_CreateObjectivePing(true, UnitGetPosition(UnitFromId(1202)), StringExternal("Param/Value/012B3B55"));
    libHots_gf_StorePingForUnit(UnitFromId(1202), 1, PingLastCreated());
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/1920C875"), null, UnitGetPosition(UnitFromId(1202)));
    TriggerExecute(gt_ObjectiveFreeCaptiveProtoss01Create, true, true);
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Speech);
    libA3DDD02B_gf_SendTransmissionCampaign(null, "vpMission_VoidPrologue01|Line00015", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RevealObjectiveLocation01Q_Init () {
    gt_RevealObjectiveLocation01Q = TriggerCreate("gt_RevealObjectiveLocation01Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Kills Holding Pen 01
//--------------------------------------------------------------------------------------------------
bool gt_UnitKillsHoldingPen01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(libHots_gf_PingStoredForUnit(UnitFromId(1202), 1));
    TriggerExecute(gt_ObjectiveFreeCaptiveProtoss01Complete, true, true);
    TriggerExecute(gt_MidQ, true, true);
    libA3DDD02B_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/1711C131"));
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(72)), 6.0), 16.0, false);
    UnitIssueOrder(UnitFromId(72), Order(AbilityCommand("MoebiusLabDoorsWideLeftLowered", 0)), c_orderQueueReplace);
    Wait(2.0, c_timeAI);
    TriggerExecute(gt_RevealObjectiveLocation02Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitKillsHoldingPen01_Init () {
    gt_UnitKillsHoldingPen01 = TriggerCreate("gt_UnitKillsHoldingPen01_Func");
    TriggerAddEventUnitDied(gt_UnitKillsHoldingPen01, UnitRefFromUnit(UnitFromId(1202)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reveal Objective Location 02 Q
//--------------------------------------------------------------------------------------------------
bool gt_RevealObjectiveLocation02Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/7B9A8592"), null, UnitGetPosition(UnitFromId(1203)));
    ObjectiveShow(gv_objectiveFreeCaptiveProtoss01, PlayerGroupAll(), false);
    TriggerExecute(gt_ObjectiveFreeCaptiveProtoss02Create, true, true);
    VisRevealArea(1, RegionFromId(14), 2.0, false);
    libA3DDD02B_gf_CreateObjectivePing(true, UnitGetPosition(UnitFromId(1203)), StringExternal("Param/Value/FC0F917E"));
    libHots_gf_StorePingForUnit(UnitFromId(1203), 1, PingLastCreated());
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Speech);
    libA3DDD02B_gf_SendTransmissionCampaign(null, "vpMission_VoidPrologue01|Line00016", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RevealObjectiveLocation02Q_Init () {
    gt_RevealObjectiveLocation02Q = TriggerCreate("gt_RevealObjectiveLocation02Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Kills Holding Pen 02 Q
//--------------------------------------------------------------------------------------------------
bool gt_UnitKillsHoldingPen02Q_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_rescuedUnits;

    // Automatic Variable Declarations
    unitgroup autoE8D8BF2C_g;
    int autoE8D8BF2C_u;
    unit autoE8D8BF2C_var;
    unitgroup auto9AFB7C81_g;
    int auto9AFB7C81_u;
    unit auto9AFB7C81_var;
    unitgroup auto3C101BAB_g;
    int auto3C101BAB_u;
    unit auto3C101BAB_var;

    // Variable Initialization
    lv_rescuedUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(libHots_gf_PingStoredForUnit(UnitFromId(1203), 1));
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(1203)), 6.0), 16.0, false);
    UnitIssueOrder(UnitFromId(2129), Order(AbilityCommand("MoebiusLabDoorsWideRightLowered", 0)), c_orderQueueReplace);
    autoE8D8BF2C_g = UnitGroup("PathingBlocker4x4Diagonal", c_playerAny, RegionFromId(59), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoE8D8BF2C_u = UnitGroupCount(autoE8D8BF2C_g, c_unitCountAll);
    for (;; autoE8D8BF2C_u -= 1) {
        autoE8D8BF2C_var = UnitGroupUnitFromEnd(autoE8D8BF2C_g, autoE8D8BF2C_u);
        if (autoE8D8BF2C_var == null) { break; }
        UnitRemove(autoE8D8BF2C_var);
    }
    if ((gv_postHoldingPen02DoorSeen == true)) {
        VisRevealArea(gv_pLAYER_01_USER, RegionFromId(51), 6.0, false);
    }

    auto9AFB7C81_g = UnitGroup("PathingBlocker4x4Diagonal", c_playerAny, RegionFromId(14), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto9AFB7C81_u = UnitGroupCount(auto9AFB7C81_g, c_unitCountAll);
    for (;; auto9AFB7C81_u -= 1) {
        auto9AFB7C81_var = UnitGroupUnitFromEnd(auto9AFB7C81_g, auto9AFB7C81_u);
        if (auto9AFB7C81_var == null) { break; }
        UnitRemove(auto9AFB7C81_var);
    }
    UnitGroupAddUnitGroup(lv_rescuedUnits, UnitGroup(null, gv_pLAYER_10_PROTOSS_CAPTIVES, RegionFromId(14), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    auto3C101BAB_g = lv_rescuedUnits;
    auto3C101BAB_u = UnitGroupCount(auto3C101BAB_g, c_unitCountAll);
    for (;; auto3C101BAB_u -= 1) {
        auto3C101BAB_var = UnitGroupUnitFromEnd(auto3C101BAB_g, auto3C101BAB_u);
        if (auto3C101BAB_var == null) { break; }
        libNtve_gf_RescueUnit(auto3C101BAB_var, gv_pLAYER_01_USER, true);
        libNtve_gf_PauseUnit(auto3C101BAB_var, false);
        libNtve_gf_MakeUnitInvulnerable(auto3C101BAB_var, false);
    }
    UnitGroupIssueOrder(lv_rescuedUnits, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(421)), c_orderQueueReplace);
    TriggerExecute(gt_ObjectiveFreeCaptiveProtoss02Complete, true, true);
    libA3DDD02B_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/9549FDCD"));
    TriggerQueueEnter();
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Speech);
    libA3DDD02B_gf_SendTransmissionCampaign(null, "vpMission_VoidPrologue01|Line00081", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libA3DDD02B_gf_SendTransmissionCampaign(null, "vpMission_VoidPrologue01|Line00020", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Game);
    Wait(1.5, c_timeAI);
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Speech);
    libA3DDD02B_gf_SendTransmissionCampaign(null, "vpMission_VoidPrologue01|Line00017", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(2.0, c_timeAI);
    TriggerExecute(gt_RevealObjectiveLocation03, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitKillsHoldingPen02Q_Init () {
    gt_UnitKillsHoldingPen02Q = TriggerCreate("gt_UnitKillsHoldingPen02Q_Func");
    TriggerAddEventUnitDied(gt_UnitKillsHoldingPen02Q, UnitRefFromUnit(UnitFromId(1203)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reveal Objective Location 03
//--------------------------------------------------------------------------------------------------
bool gt_RevealObjectiveLocation03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/44CA44BC"), null, UnitGetPosition(UnitFromId(158)));
    ObjectiveShow(gv_objectiveFreeCaptiveProtoss02, PlayerGroupAll(), false);
    TriggerExecute(gt_ObjectiveFreeCaptiveProtoss03Create, true, true);
    VisRevealArea(1, RegionFromId(15), 2.0, false);
    libA3DDD02B_gf_CreateObjectivePing(true, UnitGetPosition(UnitFromId(158)), StringExternal("Param/Value/7527F2CE"));
    libHots_gf_StorePingForUnit(UnitFromId(158), 1, PingLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RevealObjectiveLocation03_Init () {
    gt_RevealObjectiveLocation03 = TriggerCreate("gt_RevealObjectiveLocation03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Sees Door Near Holding Pen 02
//--------------------------------------------------------------------------------------------------
bool gt_PlayerSeesDoorNearHoldingPen02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_postHoldingPen02DoorSeen = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerSeesDoorNearHoldingPen02_Init () {
    gt_PlayerSeesDoorNearHoldingPen02 = TriggerCreate("gt_PlayerSeesDoorNearHoldingPen02_Func");
    TriggerAddEventUnitRegion(gt_PlayerSeesDoorNearHoldingPen02, null, RegionFromId(59), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Enters Zerg Base Q
//--------------------------------------------------------------------------------------------------
bool gt_UnitEntersZergBaseQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_triggeringPoint;

    // Automatic Variable Declarations
    int auto9D10AFCB_val;

    // Variable Initialization
    lv_triggeringPoint = UnitGetPosition(EventUnit());

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!(((UnitGroupCount(UnitGroup(null, gv_pLAYER_05_KERRIGAN_S01, EventUnitRegion(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_06_KERRIGAN_S02, EventUnitRegion(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_07_KERRIGAN_S03, EventUnitRegion(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libA3DDD02B_gf_PingMinimapCampaign(PlayerGroupAll(), lv_triggeringPoint, 3.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/3E22C200"), null, lv_triggeringPoint);
    Wait(2.0, c_timeAI);
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Speech);
    auto9D10AFCB_val = gv_playerEntersZergBaseCycle;
    if (auto9D10AFCB_val == 1) {
        libA3DDD02B_gf_SendTransmissionCampaign(null, "vpMission_VoidPrologue01|Line00092", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto9D10AFCB_val == 2) {
        libA3DDD02B_gf_SendTransmissionCampaign(null, "vpMission_VoidPrologue01|Line00094", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Game);
    if (gv_playerEntersZergBaseCycle >= 2) {
        gv_playerEntersZergBaseCycle = 1;
    }
    else {
        gv_playerEntersZergBaseCycle = gv_playerEntersZergBaseCycle + 1;
    }
    TriggerQueueExit();
    Wait(60.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitEntersZergBaseQ_Init () {
    gt_UnitEntersZergBaseQ = TriggerCreate("gt_UnitEntersZergBaseQ_Func");
    TriggerAddEventUnitRegion(gt_UnitEntersZergBaseQ, null, RegionFromId(22), true);
    TriggerAddEventUnitRegion(gt_UnitEntersZergBaseQ, null, RegionFromId(4), true);
    TriggerAddEventUnitRegion(gt_UnitEntersZergBaseQ, null, RegionFromId(5), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Kills Zerg Force Q
//--------------------------------------------------------------------------------------------------
bool gt_PlayerKillsZergForceQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_05_KERRIGAN_S01) || (UnitGetOwner(EventUnit()) == gv_pLAYER_06_KERRIGAN_S02) || (UnitGetOwner(EventUnit()) == gv_pLAYER_07_KERRIGAN_S03) || (UnitGetOwner(EventUnit()) == gv_pLAYER_08_KERRIGAN_NOSHAREVISION)))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, UnitGetOwner(EventUnit()), RegionCircle(UnitGetPosition(EventUnit()), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Speech);
    libA3DDD02B_gf_SendTransmissionCampaign(null, "vpMission_VoidPrologue01|Line00093", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerKillsZergForceQ_Init () {
    gt_PlayerKillsZergForceQ = TriggerCreate("gt_PlayerKillsZergForceQ_Func");
    TriggerAddEventUnitDied(gt_PlayerKillsZergForceQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Finds Bonus Objective 1
//--------------------------------------------------------------------------------------------------
bool gt_PlayerFindsBonusObjective1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_warpInGroup;

    // Automatic Variable Declarations
    unitgroup auto8D7F9904_g;
    int auto8D7F9904_u;
    unit auto8D7F9904_var;

    // Variable Initialization
    lv_warpInGroup = UnitGroup(null, gv_pLAYER_03_MOEBIUS_S02, RegionFromId(33), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_CreateBonusObjectiveQ, true, false);
    Wait(2.0, c_timeGame);
    auto8D7F9904_g = lv_warpInGroup;
    auto8D7F9904_u = UnitGroupCount(auto8D7F9904_g, c_unitCountAll);
    for (;; auto8D7F9904_u -= 1) {
        auto8D7F9904_var = UnitGroupUnitFromEnd(auto8D7F9904_g, auto8D7F9904_u);
        if (auto8D7F9904_var == null) { break; }
        gf_WarpInTerranUnit(auto8D7F9904_var);
        Wait(0.25, c_timeGame);
    }
    if ((UnitIsAlive(UnitFromId(1792)) == true)) {
        UnitIssueOrder(UnitFromId(1792), Order(AbilityCommand("HerculesLiftOff", 0)), c_orderQueueReplace);
        Wait(2.0, c_timeGame);
        libLbty_gf_OrderTransporttoUnloadAllthenDespawn(UnitFromId(1792), UnitGetPosition(UnitFromId(1792)), PointFromId(2180));
    }

    if ((UnitIsAlive(UnitFromId(1793)) == true)) {
        UnitIssueOrder(UnitFromId(1793), Order(AbilityCommand("HerculesLiftOff", 0)), c_orderQueueReplace);
        Wait(2.0, c_timeGame);
        libLbty_gf_OrderTransporttoUnloadAllthenDespawn(UnitFromId(1793), UnitGetPosition(UnitFromId(1793)), PointFromId(2180));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerFindsBonusObjective1_Init () {
    gt_PlayerFindsBonusObjective1 = TriggerCreate("gt_PlayerFindsBonusObjective1_Func");
    TriggerAddEventUnitRegion(gt_PlayerFindsBonusObjective1, null, RegionFromId(46), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Finds Bonus Objective 2
//--------------------------------------------------------------------------------------------------
bool gt_PlayerFindsBonusObjective2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_warpInGroup;

    // Automatic Variable Declarations
    unitgroup autoFA1B6871_g;
    int autoFA1B6871_u;
    unit autoFA1B6871_var;

    // Variable Initialization
    lv_warpInGroup = UnitGroup(null, gv_pLAYER_04_MOEBIUS_S03, RegionFromId(48), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_CreateBonusObjectiveQ, true, false);
    Wait(2.0, c_timeGame);
    autoFA1B6871_g = lv_warpInGroup;
    autoFA1B6871_u = UnitGroupCount(autoFA1B6871_g, c_unitCountAll);
    for (;; autoFA1B6871_u -= 1) {
        autoFA1B6871_var = UnitGroupUnitFromEnd(autoFA1B6871_g, autoFA1B6871_u);
        if (autoFA1B6871_var == null) { break; }
        gf_WarpInTerranUnit(autoFA1B6871_var);
        Wait(0.25, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerFindsBonusObjective2_Init () {
    gt_PlayerFindsBonusObjective2 = TriggerCreate("gt_PlayerFindsBonusObjective2_Func");
    TriggerAddEventUnitRegion(gt_PlayerFindsBonusObjective2, null, RegionFromId(60), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Bonus Objective Q
//--------------------------------------------------------------------------------------------------
bool gt_CreateBonusObjectiveQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto2DF59F7B_ae = 2;
    int auto2DF59F7B_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlay(SoundLink("UI_ObjectiveBonusDiscovered", -1), PlayerGroupAll(), 100.0, 0.0);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(12), 16.0, false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(47), 16.0, false);
    TriggerExecute(gt_ObjectivePylonContainmentUnitsCreate, true, false);
    Wait(2.0, c_timeAI);
    auto2DF59F7B_var = 1;
    for ( ; auto2DF59F7B_var <= auto2DF59F7B_ae; auto2DF59F7B_var += 1 ) {
        libA3DDD02B_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_stolenPylon[auto2DF59F7B_var]), 3.0, Color(100.00, 0.00, 0.00));
        UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/D9575E86"), null, UnitGetPosition(gv_stolenPylon[auto2DF59F7B_var]));
        libA3DDD02B_gf_CreateObjectivePing(false, UnitGetPosition(gv_stolenPylon[auto2DF59F7B_var]), StringExternal("Param/Value/224BAC88"));
        libHots_gf_StorePingForUnit(gv_stolenPylon[auto2DF59F7B_var], 1, PingLastCreated());
        if ((libA3DDD02B_gf_DifficultyValuePrologueInteger(1, 1, 0, 0) == 1)) {
            libA3DDD02B_gf_AttachReticleEffectAndTextTagOnUnit(libA3DDD02B_ge_CampaginReticleType_ProtossEnemy, libA3DDD02B_ge_CampaginReticleSize_Medium, StringToText(""), gv_stolenPylon[auto2DF59F7B_var], "Ref_Center");
            libHots_gf_StoreActorForUnit(gv_stolenPylon[auto2DF59F7B_var], 1, libNtve_gf_ActorLastCreated());
        }

    }
    TriggerEnable(gt_ReclaimPylon1Q, true);
    TriggerEnable(gt_ReclaimPylon2Q, true);
    if ((libA3DDD02B_gf_DifficultyValuePrologueInteger(1, 1, 0, 0) == 1)) {
        TriggerEnable(gt_DestroyPylon1Reticle, true);
        TriggerEnable(gt_DestroyPylon2Reticle, true);
    }

    TriggerQueueEnter();
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Speech);
    libA3DDD02B_gf_SendTransmissionCampaign(null, "vpMission_VoidPrologue01|Line00022", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libA3DDD02B_gf_SendTransmissionCampaign(null, "vpMission_VoidPrologue01|Line00023", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateBonusObjectiveQ_Init () {
    gt_CreateBonusObjectiveQ = TriggerCreate("gt_CreateBonusObjectiveQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BO 01 Door Open Vignette
//--------------------------------------------------------------------------------------------------
bool gt_BO01DoorOpenVignette_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_medicGroup;
    actor lv_airlockActor;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_medicGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(45), 16.0, false);
    Wait(0.25, c_timeAI);
    libNtve_gf_AICast(UnitFromId(1907), OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(UnitFromId(72))));
    libNtve_gf_AICast(UnitFromId(1924), OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(UnitFromId(72))));
    libNtve_gf_AICast(UnitFromId(1925), OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(UnitFromId(72))));
    UnitIssueOrder(UnitFromId(1927), Order(AbilityCommand("MoebiusLabDoorsWideRightLowered", 0)), c_orderQueueReplace);
    Wait(1.0, c_timeAI);
    libNtve_gf_CreateModelWithPointFacing("MoebiusLabDoorsWideAirlockWind", PointFromId(2084));
    lv_airlockActor = libNtve_gf_ActorLastCreated();
    ActorSend(lv_airlockActor, "AnimPlay Spell Stand,Unpowered,Start");
    Wait(2.0, c_timeAI);
    UnitIssueOrder(UnitFromId(1907), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1764)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1924), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1928)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1925), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1929)), c_orderQueueReplace);
    libNtve_gf_KillModel(lv_airlockActor);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BO01DoorOpenVignette_Init () {
    gt_BO01DoorOpenVignette = TriggerCreate("gt_BO01DoorOpenVignette_Func");
    TriggerAddEventUnitRegion(gt_BO01DoorOpenVignette, null, RegionFromId(45), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reclaim Pylon 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_ReclaimPylon1Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto43F3D234_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitIsAlive(gv_pylonContainmentUnit01) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.0, c_timeGame);
    gv_objectivePylonContainmentUnitsCount += 1;
    TriggerExecute(gt_ObjectivePylonContainmentUnitsUpdate, true, false);
    if ((gv_objectivePylonContainmentUnitsCount == gv_objectivePylonContainmentUnitsMax)) {
        TriggerExecute(gt_ObjectivePylonContainmentUnitsCompleteQ, true, false);
    }

    PingDestroy(libHots_gf_PingStoredForUnit(gv_stolenPylon[1], 1));
    libNtve_gf_MakeUnitInvulnerable(gv_stolenPylon[1], false);
    UnitSetState(gv_stolenPylon[1], c_unitStateHighlightable, true);
    UnitSetState(gv_stolenPylon[1], c_unitStateTargetable, true);
    UnitSetState(gv_stolenPylon[1], c_unitStateSelectable, true);
    libNtve_gf_RescueUnit(gv_stolenPylon[1], gv_pLAYER_01_USER, true);
    TriggerExecute(gt_ReclaimPylon1WarpInReinforcements, true, false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/D8ECF263"), null, UnitGetPosition(gv_stolenPylon[1]));
    libA3DDD02B_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_stolenPylon[1]), 2.0, Color(0.00, 100.00, 0.00));
    Wait(2.0, c_timeReal);
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Speech);
    auto43F3D234_val = gv_objectivePylonContainmentUnitsCount;
    if (auto43F3D234_val == gv_objectivePylonContainmentUnitsMax) {
        libA3DDD02B_gf_SendTransmissionCampaign(null, "vpMission_VoidPrologue01|Line00025", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        libA3DDD02B_gf_SendTransmissionCampaign(null, "vpMission_VoidPrologue01|Line00024", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReclaimPylon1Q_Init () {
    gt_ReclaimPylon1Q = TriggerCreate("gt_ReclaimPylon1Q_Func");
    TriggerEnable(gt_ReclaimPylon1Q, false);
    TriggerAddEventTimePeriodic(gt_ReclaimPylon1Q, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reclaim Pylon 2 Q
//--------------------------------------------------------------------------------------------------
bool gt_ReclaimPylon2Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoB3C4B69A_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitIsAlive(gv_pylonContainmentUnit02) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.0, c_timeGame);
    gv_objectivePylonContainmentUnitsCount += 1;
    TriggerExecute(gt_ObjectivePylonContainmentUnitsUpdate, true, false);
    if ((gv_objectivePylonContainmentUnitsCount == gv_objectivePylonContainmentUnitsMax)) {
        TriggerExecute(gt_ObjectivePylonContainmentUnitsCompleteQ, true, false);
    }

    PingDestroy(libHots_gf_PingStoredForUnit(gv_stolenPylon[2], 1));
    libNtve_gf_MakeUnitInvulnerable(gv_stolenPylon[2], false);
    UnitSetState(gv_stolenPylon[2], c_unitStateHighlightable, true);
    UnitSetState(gv_stolenPylon[2], c_unitStateTargetable, true);
    UnitSetState(gv_stolenPylon[2], c_unitStateSelectable, true);
    libNtve_gf_RescueUnit(gv_stolenPylon[2], gv_pLAYER_01_USER, true);
    TriggerExecute(gt_ReclaimPylon2WarpInReinforcements, true, false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/E5FB7BCB"), null, UnitGetPosition(gv_stolenPylon[2]));
    libA3DDD02B_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_stolenPylon[2]), 2.0, Color(0.00, 100.00, 0.00));
    Wait(2.0, c_timeReal);
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Speech);
    autoB3C4B69A_val = gv_objectivePylonContainmentUnitsCount;
    if (autoB3C4B69A_val == gv_objectivePylonContainmentUnitsMax) {
        libA3DDD02B_gf_SendTransmissionCampaign(null, "vpMission_VoidPrologue01|Line00025", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        libA3DDD02B_gf_SendTransmissionCampaign(null, "vpMission_VoidPrologue01|Line00024", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReclaimPylon2Q_Init () {
    gt_ReclaimPylon2Q = TriggerCreate("gt_ReclaimPylon2Q_Func");
    TriggerEnable(gt_ReclaimPylon2Q, false);
    TriggerAddEventTimePeriodic(gt_ReclaimPylon2Q, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Destroy Pylon 1 Reticle
//--------------------------------------------------------------------------------------------------
bool gt_DestroyPylon1Reticle_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_KillModel(libHots_gf_ActorForUnit(gv_stolenPylon[1], 1));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DestroyPylon1Reticle_Init () {
    gt_DestroyPylon1Reticle = TriggerCreate("gt_DestroyPylon1Reticle_Func");
    TriggerEnable(gt_DestroyPylon1Reticle, false);
    TriggerAddEventUnitAttacked2(gt_DestroyPylon1Reticle, UnitRefFromUnit(UnitFromId(1593)), null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Destroy Pylon 2 Reticle
//--------------------------------------------------------------------------------------------------
bool gt_DestroyPylon2Reticle_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_KillModel(libHots_gf_ActorForUnit(gv_stolenPylon[2], 1));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DestroyPylon2Reticle_Init () {
    gt_DestroyPylon2Reticle = TriggerCreate("gt_DestroyPylon2Reticle_Func");
    TriggerEnable(gt_DestroyPylon2Reticle, false);
    TriggerAddEventUnitAttacked2(gt_DestroyPylon2Reticle, UnitRefFromUnit(UnitFromId(1594)), null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reclaim Pylon 1 Warp In Reinforcements
//--------------------------------------------------------------------------------------------------
bool gt_ReclaimPylon1WarpInReinforcements_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_10_PROTOSS_CAPTIVES, RegionFromId(12), 16.0, false);
    Wait(4.0, c_timeAI);
    UnitIssueOrder(gv_superWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointFromId(1518)), c_orderQueueReplace);
    Wait(0.2, c_timeAI);
    UnitIssueOrder(gv_superWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointFromId(1519)), c_orderQueueReplace);
    Wait(0.2, c_timeAI);
    UnitIssueOrder(gv_superWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointFromId(1520)), c_orderQueueReplace);
    Wait(0.2, c_timeAI);
    UnitIssueOrder(gv_superWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointFromId(1521)), c_orderQueueReplace);
    Wait(0.2, c_timeAI);
    UnitIssueOrder(gv_superWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointFromId(1522)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReclaimPylon1WarpInReinforcements_Init () {
    gt_ReclaimPylon1WarpInReinforcements = TriggerCreate("gt_ReclaimPylon1WarpInReinforcements_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reclaim Pylon 2 Warp In Reinforcements
//--------------------------------------------------------------------------------------------------
bool gt_ReclaimPylon2WarpInReinforcements_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_10_PROTOSS_CAPTIVES, RegionFromId(47), 16.0, false);
    Wait(4.0, c_timeAI);
    UnitIssueOrder(gv_superWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointFromId(1595)), c_orderQueueReplace);
    Wait(0.2, c_timeAI);
    UnitIssueOrder(gv_superWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointFromId(1596)), c_orderQueueReplace);
    Wait(0.2, c_timeAI);
    UnitIssueOrder(gv_superWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointFromId(1597)), c_orderQueueReplace);
    Wait(0.2, c_timeAI);
    UnitIssueOrder(gv_superWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointFromId(1598)), c_orderQueueReplace);
    Wait(0.2, c_timeAI);
    UnitIssueOrder(gv_superWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointFromId(1599)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReclaimPylon2WarpInReinforcements_Init () {
    gt_ReclaimPylon2WarpInReinforcements = TriggerCreate("gt_ReclaimPylon2WarpInReinforcements_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rescue Super Warp Gate Trained Units
//--------------------------------------------------------------------------------------------------
bool gt_RescueSuperWarpGateTrainedUnits_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_10_PROTOSS_CAPTIVES))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeAI);
    libNtve_gf_RescueUnit(EventUnitProgressUnit(), gv_pLAYER_01_USER, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RescueSuperWarpGateTrainedUnits_Init () {
    gt_RescueSuperWarpGateTrainedUnits = TriggerCreate("gt_RescueSuperWarpGateTrainedUnits_Func");
    TriggerAddEventUnitConstructProgress(gt_RescueSuperWarpGateTrainedUnits, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    cai_startall();
    cai_waves_run(gv_pLAYER_02_MOEBIUS_S01, PlayerGroupSingle(gv_pLAYER_01_USER));
    cai_waves_run(gv_pLAYER_03_MOEBIUS_S02, PlayerGroupSingle(gv_pLAYER_01_USER));
    if ((libA3DDD02B_gf_DifficultyValuePrologueInteger(0, 0, 1, 1) == 1)) {
        TriggerExecute(gt_AIUpgradesHardBrutal, true, false);
    }
    else {
        TriggerExecute(gt_AIUpgradesCasualNormal, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrades - Casual/Normal
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradesCasualNormal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto3688E6DD_g;
    int auto3688E6DD_var;
    playergroup autoC0D7E801_g;
    int autoC0D7E801_var;
    playergroup auto0A277227_g;
    int auto0A277227_var;
    playergroup auto473F2D18_g;
    int auto473F2D18_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(600.0, c_timeAI);
    auto3688E6DD_g = gv_moebiusPlayerGroup;
    auto3688E6DD_var = -1;
    while (true) {
        auto3688E6DD_var = PlayerGroupNextPlayer(auto3688E6DD_g, auto3688E6DD_var);
        if (auto3688E6DD_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto3688E6DD_var, "TerranInfantryWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(auto3688E6DD_var, "TerranVehicleWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(auto3688E6DD_var, "TerranShipWeaponsLevel1", 1);
    }
    autoC0D7E801_g = gv_swarmPlayerGroup;
    autoC0D7E801_var = -1;
    while (true) {
        autoC0D7E801_var = PlayerGroupNextPlayer(autoC0D7E801_g, autoC0D7E801_var);
        if (autoC0D7E801_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoC0D7E801_var, "ZergMeleeWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(autoC0D7E801_var, "ZergMissileWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(autoC0D7E801_var, "ZergFlyerWeaponsLevel1", 1);
    }
    Wait(600.0, c_timeAI);
    auto0A277227_g = gv_moebiusPlayerGroup;
    auto0A277227_var = -1;
    while (true) {
        auto0A277227_var = PlayerGroupNextPlayer(auto0A277227_g, auto0A277227_var);
        if (auto0A277227_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto0A277227_var, "TerranInfantryArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(auto0A277227_var, "TerranVehicleArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(auto0A277227_var, "TerranShipArmorsLevel1", 1);
    }
    auto473F2D18_g = gv_swarmPlayerGroup;
    auto473F2D18_var = -1;
    while (true) {
        auto473F2D18_var = PlayerGroupNextPlayer(auto473F2D18_g, auto473F2D18_var);
        if (auto473F2D18_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto473F2D18_var, "ZergGroundArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(auto473F2D18_var, "ZergFlyerArmorsLevel1", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradesCasualNormal_Init () {
    gt_AIUpgradesCasualNormal = TriggerCreate("gt_AIUpgradesCasualNormal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrades - Hard/Brutal
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradesHardBrutal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoAB3FC6B3_g;
    int autoAB3FC6B3_var;
    playergroup auto76B3F97C_g;
    int auto76B3F97C_var;
    playergroup autoFC948A3C_g;
    int autoFC948A3C_var;
    playergroup auto5D5F4584_g;
    int auto5D5F4584_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(600.0, c_timeAI);
    autoAB3FC6B3_g = gv_moebiusPlayerGroup;
    autoAB3FC6B3_var = -1;
    while (true) {
        autoAB3FC6B3_var = PlayerGroupNextPlayer(autoAB3FC6B3_g, autoAB3FC6B3_var);
        if (autoAB3FC6B3_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoAB3FC6B3_var, "TerranInfantryWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(autoAB3FC6B3_var, "TerranVehicleWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(autoAB3FC6B3_var, "TerranShipWeaponsLevel2", 1);
    }
    auto76B3F97C_g = gv_swarmPlayerGroup;
    auto76B3F97C_var = -1;
    while (true) {
        auto76B3F97C_var = PlayerGroupNextPlayer(auto76B3F97C_g, auto76B3F97C_var);
        if (auto76B3F97C_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto76B3F97C_var, "ZergMeleeWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(auto76B3F97C_var, "ZergMissileWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(auto76B3F97C_var, "ZergFlyerWeaponsLevel2", 1);
    }
    Wait(600.0, c_timeAI);
    autoFC948A3C_g = gv_moebiusPlayerGroup;
    autoFC948A3C_var = -1;
    while (true) {
        autoFC948A3C_var = PlayerGroupNextPlayer(autoFC948A3C_g, autoFC948A3C_var);
        if (autoFC948A3C_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoFC948A3C_var, "TerranInfantryArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(autoFC948A3C_var, "TerranVehicleArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(autoFC948A3C_var, "TerranShipArmorsLevel2", 1);
    }
    auto5D5F4584_g = gv_swarmPlayerGroup;
    auto5D5F4584_var = -1;
    while (true) {
        auto5D5F4584_var = PlayerGroupNextPlayer(auto5D5F4584_g, auto5D5F4584_var);
        if (auto5D5F4584_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto5D5F4584_var, "ZergGroundArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(auto5D5F4584_var, "ZergFlyerArmorsLevel2", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradesHardBrutal_Init () {
    gt_AIUpgradesHardBrutal = TriggerCreate("gt_AIUpgradesHardBrutal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Controller
//--------------------------------------------------------------------------------------------------
bool gt_KerriganController_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(90.0, c_timeAI);
    TriggerEnable(gt_Kerrigan05StopWave, true);
    TriggerExecute(gt_Kerrigan05WaveController, true, false);
    while (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_MOEBIUS_S01, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_Kerrigan05SetupForwardBase, true, true);
    TriggerEnable(gt_Kerrigan06StopWave, true);
    TriggerExecute(gt_Kerrigan06WaveController, true, false);
    while (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_03_MOEBIUS_S02, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_Kerrigan06SetupForwardBase, true, true);
    TriggerExecute(gt_Kerrigan07WaveController, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganController_Init () {
    gt_KerriganController = TriggerCreate("gt_KerriganController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Wave Sent
//--------------------------------------------------------------------------------------------------
bool gt_KerriganWaveSent_Func (bool testConds, bool runActions) {
    // Variable Declarations
    wave lv_triggeringWave;
    unitgroup lv_triggeringWaveGroup;
    timer lv_pingTimer;

    // Automatic Variable Declarations
    unitgroup auto60A19573_g;
    int auto60A19573_u;
    unit auto60A19573_var;

    // Variable Initialization
    lv_triggeringWaveGroup = UnitGroupEmpty();
    lv_pingTimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    VisRevealerDestroy(gv_gatherRevealer);
    PingDestroy(gv_pingGather);
    PingDestroy(gv_pingAttack);
    lv_triggeringWave = EventPlayerWave();
    lv_triggeringWaveGroup = AIWaveGetUnits(lv_triggeringWave);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGroupCenterOfGroup(lv_triggeringWaveGroup), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 30.0, 270.0);
    gv_pingAttack = PingLastCreated();
    PingSetScale(PingLastCreated(), 0.75);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/975FFC5E"));
    TimerStart(lv_pingTimer, PingGetDuration(gv_pingAttack), false, c_timeGame);
    auto60A19573_g = lv_triggeringWaveGroup;
    auto60A19573_u = UnitGroupCount(auto60A19573_g, c_unitCountAll);
    for (;; auto60A19573_u -= 1) {
        auto60A19573_var = UnitGroupUnitFromEnd(auto60A19573_g, auto60A19573_u);
        if (auto60A19573_var == null) { break; }
        libNtve_gf_ShareVisionofUnit(auto60A19573_var, true, gv_pLAYER_01_USER);
    }
    while ((UnitGroupCount(lv_triggeringWaveGroup, c_unitCountAlive) > 0) && (TimerGetRemaining(lv_pingTimer) > 0.0)) {
        PingSetPosition(gv_pingAttack, UnitGroupCenterOfGroup(lv_triggeringWaveGroup));
        Wait(0.25, c_timeGame);
    }
    PingDestroy(gv_pingAttack);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganWaveSent_Init () {
    gt_KerriganWaveSent = TriggerCreate("gt_KerriganWaveSent_Func");
    TriggerAddEventPlayerAIWave(gt_KerriganWaveSent, gv_pLAYER_05_KERRIGAN_S01);
    TriggerAddEventPlayerAIWave(gt_KerriganWaveSent, gv_pLAYER_06_KERRIGAN_S02);
    TriggerAddEventPlayerAIWave(gt_KerriganWaveSent, gv_pLAYER_07_KERRIGAN_S03);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Zerg Wave Gather Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionZergWaveGatherQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoA9F6F7EB_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if (gv_zergWaveGatherTransmissionCount >= 7) {
        gv_zergWaveGatherTransmissionCount = 1;
    }
    else {
        gv_zergWaveGatherTransmissionCount = gv_zergWaveGatherTransmissionCount + 1;
    }
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Speech);
    autoA9F6F7EB_val = gv_zergWaveGatherTransmissionCount;
    if (autoA9F6F7EB_val == 1) {
        SoundPlayForPlayer(SoundLink("Prologue_Zerg_Horde_Low_Rumble", -1), c_maxPlayers, PlayerGroupAll(), 80.0, 0.0);
        libA3DDD02B_gf_SendTransmissionCampaign(null, "vpMission_VoidPrologue01|Line00027", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoA9F6F7EB_val == 2) {
        SoundPlayForPlayer(SoundLink("Prologue_Zerg_Horde_Low_Rumble", -1), c_maxPlayers, PlayerGroupAll(), 80.0, 0.0);
        libA3DDD02B_gf_SendTransmissionCampaign(null, "vpMission_VoidPrologue01|Line00029", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoA9F6F7EB_val == 3) {
        SoundPlayForPlayer(SoundLink("Prologue_Zerg_Horde_Low_Rumble", -1), c_maxPlayers, PlayerGroupAll(), 80.0, 0.0);
        libA3DDD02B_gf_SendTransmissionCampaign(null, "vpMission_VoidPrologue01|Line00030", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoA9F6F7EB_val == 4) {
        SoundPlayForPlayer(SoundLink("Prologue_Zerg_Horde_Low_Rumble", -1), c_maxPlayers, PlayerGroupAll(), 80.0, 0.0);
        libA3DDD02B_gf_SendTransmissionCampaign(null, "vpMission_VoidPrologue01|Line00070", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoA9F6F7EB_val == 5) {
        SoundPlayForPlayer(SoundLink("Prologue_Zerg_Horde_Low_Rumble", -1), c_maxPlayers, PlayerGroupAll(), 80.0, 0.0);
        libA3DDD02B_gf_SendTransmissionCampaign(null, "vpMission_VoidPrologue01|Line00089", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoA9F6F7EB_val == 6) {
        SoundPlayForPlayer(SoundLink("Prologue_Zerg_Horde_Low_Rumble", -1), c_maxPlayers, PlayerGroupAll(), 80.0, 0.0);
        libA3DDD02B_gf_SendTransmissionCampaign(null, "vpMission_VoidPrologue01|Line00090", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoA9F6F7EB_val == 7) {
        SoundPlayForPlayer(SoundLink("Prologue_Zerg_Horde_Low_Rumble", -1), c_maxPlayers, PlayerGroupAll(), 80.0, 0.0);
        libA3DDD02B_gf_SendTransmissionCampaign(null, "vpMission_VoidPrologue01|Line00028", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionZergWaveGatherQ_Init () {
    gt_TransmissionZergWaveGatherQ = TriggerCreate("gt_TransmissionZergWaveGatherQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Zerg Wave Send Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionZergWaveSendQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoFBDE61B7_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Speech);
    if ((gv_firstZergWaveSent == false)) {
        gv_firstZergWaveSent = true;
        libA3DDD02B_gf_SendTransmissionCampaign(null, "vpMission_VoidPrologue01|Line00064", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        if (gv_zergWaveSendTransmissionCount >= 9) {
            gv_zergWaveSendTransmissionCount = 1;
        }
        else {
            gv_zergWaveSendTransmissionCount = gv_zergWaveSendTransmissionCount + 1;
        }
        autoFBDE61B7_val = gv_zergWaveSendTransmissionCount;
        if (autoFBDE61B7_val == 1) {
            SoundPlayForPlayer(SoundLink("Prologue_Zerg_Horde_AmbLow", -1), c_maxPlayers, PlayerGroupAll(), 90.0, 0.0);
            libA3DDD02B_gf_SendTransmissionCampaign(null, "vpMission_VoidPrologue01|Line00033", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (autoFBDE61B7_val == 2) {
            SoundPlayForPlayer(SoundLink("Prologue_Zerg_Horde_AmbLow", -1), c_maxPlayers, PlayerGroupAll(), 90.0, 0.0);
            libA3DDD02B_gf_SendTransmissionCampaign(null, "vpMission_VoidPrologue01|Line00034", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (autoFBDE61B7_val == 3) {
            SoundPlayForPlayer(SoundLink("Prologue_Zerg_Horde_AmbLow", -1), c_maxPlayers, PlayerGroupAll(), 90.0, 0.0);
            libA3DDD02B_gf_SendTransmissionCampaign(null, "vpMission_VoidPrologue01|Line00067", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (autoFBDE61B7_val == 4) {
            SoundPlayForPlayer(SoundLink("Prologue_Zerg_Horde_AmbLow", -1), c_maxPlayers, PlayerGroupAll(), 90.0, 0.0);
            libA3DDD02B_gf_SendTransmissionCampaign(null, "vpMission_VoidPrologue01|Line00068", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (autoFBDE61B7_val == 5) {
            SoundPlayForPlayer(SoundLink("Prologue_Zerg_Horde_AmbLow", -1), c_maxPlayers, PlayerGroupAll(), 90.0, 0.0);
            libA3DDD02B_gf_SendTransmissionCampaign(null, "vpMission_VoidPrologue01|Line00069", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (autoFBDE61B7_val == 6) {
            SoundPlayForPlayer(SoundLink("Prologue_Zerg_Horde_AmbLow", -1), c_maxPlayers, PlayerGroupAll(), 90.0, 0.0);
            libA3DDD02B_gf_SendTransmissionCampaign(null, "vpMission_VoidPrologue01|Line00085", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (autoFBDE61B7_val == 7) {
            SoundPlayForPlayer(SoundLink("Prologue_Zerg_Horde_AmbLow", -1), c_maxPlayers, PlayerGroupAll(), 90.0, 0.0);
            libA3DDD02B_gf_SendTransmissionCampaign(null, "vpMission_VoidPrologue01|Line00086", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (autoFBDE61B7_val == 8) {
            SoundPlayForPlayer(SoundLink("Prologue_Zerg_Horde_AmbLow", -1), c_maxPlayers, PlayerGroupAll(), 90.0, 0.0);
            libA3DDD02B_gf_SendTransmissionCampaign(null, "vpMission_VoidPrologue01|Line00087", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (autoFBDE61B7_val == 9) {
            SoundPlayForPlayer(SoundLink("Prologue_Zerg_Horde_AmbLow", -1), c_maxPlayers, PlayerGroupAll(), 90.0, 0.0);
            libA3DDD02B_gf_SendTransmissionCampaign(null, "vpMission_VoidPrologue01|Line00088", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else {
        }
    }
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionZergWaveSendQ_Init () {
    gt_TransmissionZergWaveSendQ = TriggerCreate("gt_TransmissionZergWaveSendQ_Func");
    TriggerAddEventPlayerAIWave(gt_TransmissionZergWaveSendQ, gv_pLAYER_05_KERRIGAN_S01);
    TriggerAddEventPlayerAIWave(gt_TransmissionZergWaveSendQ, gv_pLAYER_06_KERRIGAN_S02);
    TriggerAddEventPlayerAIWave(gt_TransmissionZergWaveSendQ, gv_pLAYER_07_KERRIGAN_S03);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Creep Tumor Constructed
//--------------------------------------------------------------------------------------------------
bool gt_CreepTumorConstructed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitProgressUnit()) == "CreepTumor") || (UnitGetType(EventUnitProgressUnit()) == "CreepTumorQueen")))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_05_KERRIGAN_S01) || (UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_06_KERRIGAN_S02) || (UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_07_KERRIGAN_S03)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetOwner(EventUnitProgressUnit(), gv_pLAYER_08_KERRIGAN_NOSHAREVISION, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreepTumorConstructed_Init () {
    gt_CreepTumorConstructed = TriggerCreate("gt_CreepTumorConstructed_Func");
    TriggerAddEventUnitConstructProgress(gt_CreepTumorConstructed, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Doors Attacked
//--------------------------------------------------------------------------------------------------
bool gt_DoorsAttacked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventUnitDamageAbsorbed() >= UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitInvulnerable(EventUnit(), true);
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("MoebiusLabDoorsWideLeftLowered", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DoorsAttacked_Init () {
    gt_DoorsAttacked = TriggerCreate("gt_DoorsAttacked_Func");
    TriggerAddEventUnitDamaged(gt_DoorsAttacked, UnitRefFromUnit(UnitFromId(61)), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(gt_DoorsAttacked, UnitRefFromUnit(UnitFromId(59)), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(gt_DoorsAttacked, UnitRefFromUnit(UnitFromId(375)), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(gt_DoorsAttacked, UnitRefFromUnit(UnitFromId(463)), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan 05 Wave Controller
//--------------------------------------------------------------------------------------------------
bool gt_Kerrigan05WaveController_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitInvulnerable(UnitFromId(61), false);
    TriggerExecute(gt_KerriganInitialWave, true, true);
    Wait(gv_waveCooldownTime, c_timeAI);
    while (((UnitGroupCount(UnitGroup(null, gv_pLAYER_05_KERRIGAN_S01, RegionFromId(22), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("Hatchery", gv_pLAYER_05_KERRIGAN_S01, RegionFromId(22), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("Lair", gv_pLAYER_05_KERRIGAN_S01, RegionFromId(22), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("Hive", gv_pLAYER_05_KERRIGAN_S01, RegionFromId(22), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_02_MOEBIUS_S01, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        TriggerExecute(gt_Kerrigan05Wave, true, true);
        Wait(gv_waveCooldownTime, c_timeAI);
        while (!((UnitGroupCount(gv_currentWaveUnitGroup, c_unitCountAlive) < 15))) {
            Wait(1.0, c_timeAI);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Kerrigan05WaveController_Init () {
    gt_Kerrigan05WaveController = TriggerCreate("gt_Kerrigan05WaveController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Initial Wave
//--------------------------------------------------------------------------------------------------
bool gt_KerriganInitialWave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_KerriganInitialWaveGatheringQ, true, false);
    AIAttackWaveSetGatherPoint(gv_pLAYER_05_KERRIGAN_S01, PointFromId(506));
    AIAttackWaveSetTargetRegion(gv_pLAYER_05_KERRIGAN_S01, RegionFromId(4), 0);
    AIAttackWaveSetGatherEarlyNoReplace(gv_pLAYER_05_KERRIGAN_S01);
    AIAttackWaveAddUnits3(30, 30, 30, "HotSRaptor");
    AIAttackWaveAddUnits3(15, 15, 15, "HotSHunter");
    AIAttackWaveAddUnits3(5, 5, 5, "RoachVile");
    AIAttackWaveAddUnits3(5, 5, 5, "HydraliskImpaler");
    AIAttackWaveAddUnits3(4, 4, 4, "InfestedAbomination");
    AIAttackWaveAddUnits3(2, 2, 2, "Queen");
    AIAttackWaveSend(gv_pLAYER_05_KERRIGAN_S01, 60, false);
    gv_currentWave = WaveLastCreated();
    Wait(60.0, c_timeAI);
    UnitGroupClear(gv_currentWaveUnitGroup);
    UnitGroupAddUnitGroup(gv_currentWaveUnitGroup, AIWaveGetUnits(gv_currentWave));
    AISetGroupNotUsableInWaves(gv_currentWaveUnitGroup, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganInitialWave_Init () {
    gt_KerriganInitialWave = TriggerCreate("gt_KerriganInitialWave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Initial Wave Gathering Q
//--------------------------------------------------------------------------------------------------
bool gt_KerriganInitialWaveGatheringQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(15.0, c_timeAI);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/9AEAD0AD"), null, PointFromId(506));
    VisRevealerDestroy(gv_gatherRevealer);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(24));
    gv_gatherRevealer = VisRevealerLastCreated();
    PingDestroy(gv_pingGather);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", PointFromId(506), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    gv_pingGather = PingLastCreated();
    PingSetScale(PingLastCreated(), 0.75);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/264DC875"));
    SoundPlay(SoundLink("Ping", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("Prologue_Zerg_Horde_AmbLow", -1), c_maxPlayers, PlayerGroupAll(), 80.0, 0.0);
    Wait(2.0, c_timeReal);
    gf_RevealPath(1, 18);
    TriggerQueueEnter();
    if ((gv_inCinematic == false)) {
        libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Speech);
        libA3DDD02B_gf_SendTransmissionCampaign(null, "vpMission_VoidPrologue01|Line00028", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganInitialWaveGatheringQ_Init () {
    gt_KerriganInitialWaveGatheringQ = TriggerCreate("gt_KerriganInitialWaveGatheringQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan 05 Wave
//--------------------------------------------------------------------------------------------------
bool gt_Kerrigan05Wave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Kerrigan05WaveGathering, true, false);
    AIAttackWaveSetGatherPoint(gv_pLAYER_05_KERRIGAN_S01, PointFromId(506));
    AIAttackWaveSetTargetRegion(gv_pLAYER_05_KERRIGAN_S01, RegionFromId(4), 0);
    AIAttackWaveSetGatherEarlyNoReplace(gv_pLAYER_05_KERRIGAN_S01);
    AIAttackWaveAddUnits3(30, 30, 30, "HotSRaptor");
    AIAttackWaveAddUnits3(15, 15, 15, "HotSHunter");
    AIAttackWaveAddUnits3(5, 5, 5, "RoachVile");
    AIAttackWaveAddUnits3(5, 5, 5, "HydraliskImpaler");
    AIAttackWaveAddUnits3(4, 4, 4, "InfestedAbomination");
    AIAttackWaveAddUnits3(2, 2, 2, "Queen");
    AIAttackWaveSend(gv_pLAYER_05_KERRIGAN_S01, gv_waveBuildTime, false);
    gv_currentWave = WaveLastCreated();
    Wait(gv_waveBuildTime, c_timeAI);
    UnitGroupClear(gv_currentWaveUnitGroup);
    UnitGroupAddUnitGroup(gv_currentWaveUnitGroup, AIWaveGetUnits(gv_currentWave));
    AISetGroupNotUsableInWaves(gv_currentWaveUnitGroup, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Kerrigan05Wave_Init () {
    gt_Kerrigan05Wave = TriggerCreate("gt_Kerrigan05Wave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan 05 Wave Gathering
//--------------------------------------------------------------------------------------------------
bool gt_Kerrigan05WaveGathering_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait((gv_waveBuildTime - 45.0), c_timeAI);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/C6F4F752"), null, PointFromId(506));
    VisRevealerDestroy(gv_gatherRevealer);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(24));
    gv_gatherRevealer = VisRevealerLastCreated();
    PingDestroy(gv_pingGather);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", PointFromId(506), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    gv_pingGather = PingLastCreated();
    PingSetScale(PingLastCreated(), 0.75);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/31FE2652"));
    SoundPlay(SoundLink("Ping", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeReal);
    gf_RevealPath(1, 18);
    TriggerExecute(gt_TransmissionZergWaveGatherQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Kerrigan05WaveGathering_Init () {
    gt_Kerrigan05WaveGathering = TriggerCreate("gt_Kerrigan05WaveGathering_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan 05 Stop Wave
//--------------------------------------------------------------------------------------------------
bool gt_Kerrigan05StopWave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoAEBA1236_g;
    int autoAEBA1236_u;
    unit autoAEBA1236_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_MOEBIUS_S01, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_KerriganWaveSent);
    TriggerStop(gt_Kerrigan05Wave);
    TriggerStop(gt_Kerrigan05WaveGathering);
    TriggerStop(gt_Kerrigan05WaveController);
    autoAEBA1236_g = UnitGroup(null, gv_pLAYER_05_KERRIGAN_S01, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoAEBA1236_u = UnitGroupCount(autoAEBA1236_g, c_unitCountAll);
    for (;; autoAEBA1236_u -= 1) {
        autoAEBA1236_var = UnitGroupUnitFromEnd(autoAEBA1236_g, autoAEBA1236_u);
        if (autoAEBA1236_var == null) { break; }
        AIRemoveUnitFromAnyWaves(autoAEBA1236_var);
        libNtve_gf_ShareVisionofUnit(autoAEBA1236_var, false, gv_pLAYER_01_USER);
        if ((libNtve_gf_UnitInRegion(autoAEBA1236_var, RegionFromId(4)) == true)) {
            UnitSetOwner(autoAEBA1236_var, gv_pLAYER_06_KERRIGAN_S02, true);
        }

    }
    cai_waves_stop("ai0A40DCBA");
    AIAttackWaveCancel(gv_currentWave);
    PingDestroy(gv_pingGather);
    PingDestroy(gv_pingAttack);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Kerrigan05StopWave_Init () {
    gt_Kerrigan05StopWave = TriggerCreate("gt_Kerrigan05StopWave_Func");
    TriggerEnable(gt_Kerrigan05StopWave, false);
    TriggerAddEventTimePeriodic(gt_Kerrigan05StopWave, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan 05 Setup Forward Base
//--------------------------------------------------------------------------------------------------
bool gt_Kerrigan05SetupForwardBase_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_dropPodUnits01;
    unitgroup lv_dropPodUnits02;
    unitgroup lv_dropPodUnits03;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dropPodUnits01 = UnitGroupEmpty();
    lv_dropPodUnits02 = UnitGroupEmpty();
    lv_dropPodUnits03 = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AIToggleBulliesInRegion(gv_pLAYER_02_MOEBIUS_S01, RegionFromId(4), false);
    AIToggleBulliesInRegion(gv_pLAYER_06_KERRIGAN_S02, RegionFromId(4), true);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(4), 16.0, false);
    UnitIssueOrder(UnitFromId(61), Order(AbilityCommand("HybridDoorsWideLeft", 0)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Lair", c_unitCreateIgnorePlacement, gv_pLAYER_06_KERRIGAN_S02, PointFromId(975));
    UnitGroupAddUnitGroup(lv_dropPodUnits01, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Overseer", 0, gv_pLAYER_06_KERRIGAN_S02, PointFromId(975));
    UnitGroupAddUnitGroup(lv_dropPodUnits01, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "HotSNoxious", 0, gv_pLAYER_06_KERRIGAN_S02, PointFromId(975));
    UnitGroupAddUnitGroup(lv_dropPodUnits01, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(4, "HydraliskImpaler", 0, gv_pLAYER_06_KERRIGAN_S02, PointFromId(975));
    UnitGroupAddUnitGroup(lv_dropPodUnits01, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(4, "InfestedAbomination", 0, gv_pLAYER_06_KERRIGAN_S02, PointFromId(975));
    UnitGroupAddUnitGroup(lv_dropPodUnits01, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Corruptor", 0, gv_pLAYER_06_KERRIGAN_S02, PointFromId(975));
    UnitGroupAddUnitGroup(lv_dropPodUnits01, UnitLastCreatedGroup());
    libA3DDD02B_gf_CreateDropPod(libA3DDD02B_ge_DropPodRace_Zerg, PointFromId(975), lv_dropPodUnits01, false, gv_pLAYER_06_KERRIGAN_S02);
    Wait(0.125, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Lair", c_unitCreateIgnorePlacement, gv_pLAYER_06_KERRIGAN_S02, PointFromId(976));
    UnitGroupAddUnitGroup(lv_dropPodUnits02, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Overseer", c_unitCreateIgnorePlacement, gv_pLAYER_06_KERRIGAN_S02, PointFromId(976));
    UnitGroupAddUnitGroup(lv_dropPodUnits02, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(4, "HydraliskImpaler", 0, gv_pLAYER_06_KERRIGAN_S02, PointFromId(976));
    UnitGroupAddUnitGroup(lv_dropPodUnits02, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(4, "HotSHunter", 0, gv_pLAYER_06_KERRIGAN_S02, PointFromId(976));
    UnitGroupAddUnitGroup(lv_dropPodUnits02, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Queen", 0, gv_pLAYER_06_KERRIGAN_S02, PointFromId(976));
    UnitGroupAddUnitGroup(lv_dropPodUnits02, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Corruptor", 0, gv_pLAYER_06_KERRIGAN_S02, PointFromId(976));
    UnitGroupAddUnitGroup(lv_dropPodUnits02, UnitLastCreatedGroup());
    libA3DDD02B_gf_CreateDropPod(libA3DDD02B_ge_DropPodRace_Zerg, PointFromId(976), lv_dropPodUnits02, false, gv_pLAYER_06_KERRIGAN_S02);
    Wait(0.125, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Lair", c_unitCreateIgnorePlacement, gv_pLAYER_06_KERRIGAN_S02, PointFromId(977));
    UnitGroupAddUnitGroup(lv_dropPodUnits03, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Overseer", c_unitCreateIgnorePlacement, gv_pLAYER_06_KERRIGAN_S02, PointFromId(977));
    UnitGroupAddUnitGroup(lv_dropPodUnits03, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(4, "RoachVile", 0, gv_pLAYER_06_KERRIGAN_S02, PointFromId(977));
    UnitGroupAddUnitGroup(lv_dropPodUnits03, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(4, "HotSHunter", 0, gv_pLAYER_06_KERRIGAN_S02, PointFromId(977));
    UnitGroupAddUnitGroup(lv_dropPodUnits03, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Queen", 0, gv_pLAYER_06_KERRIGAN_S02, PointFromId(977));
    UnitGroupAddUnitGroup(lv_dropPodUnits03, UnitLastCreatedGroup());
    libA3DDD02B_gf_CreateDropPod(libA3DDD02B_ge_DropPodRace_Zerg, PointFromId(977), lv_dropPodUnits03, false, gv_pLAYER_06_KERRIGAN_S02);
    Wait(2.0, c_timeGame);
    UnitBehaviorAdd(UnitFromId(61), "ZergDoorInfestation", UnitFromId(61), 1);
    libA3DDD02B_gf_SetUnitInfoTextCampaignDetailed(UnitFromId(61), null, StringExternal("Param/Value/D267554B"), null);
    Wait(240.0, c_timeAI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Kerrigan05SetupForwardBase_Init () {
    gt_Kerrigan05SetupForwardBase = TriggerCreate("gt_Kerrigan05SetupForwardBase_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan 06 Wave Controller
//--------------------------------------------------------------------------------------------------
bool gt_Kerrigan06WaveController_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitInvulnerable(UnitFromId(59), false);
    UnitSetState(UnitFromId(59), c_unitStateTargetable, true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(375), false);
    UnitSetState(UnitFromId(375), c_unitStateTargetable, true);
    while (((UnitGroupCount(UnitGroup(null, gv_pLAYER_06_KERRIGAN_S02, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("Hatchery", gv_pLAYER_06_KERRIGAN_S02, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("Lair", gv_pLAYER_06_KERRIGAN_S02, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("Hive", gv_pLAYER_06_KERRIGAN_S02, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_03_MOEBIUS_S02, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        TriggerExecute(gt_Kerrigan06Wave, true, true);
        Wait(gv_waveCooldownTime, c_timeGame);
        while (!((UnitGroupCount(gv_currentWaveUnitGroup, c_unitCountAlive) < 15))) {
            Wait(1.0, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Kerrigan06WaveController_Init () {
    gt_Kerrigan06WaveController = TriggerCreate("gt_Kerrigan06WaveController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan 06 Wave
//--------------------------------------------------------------------------------------------------
bool gt_Kerrigan06Wave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Kerrigan06WaveGathering, true, false);
    AIAttackWaveSetGatherPoint(gv_pLAYER_06_KERRIGAN_S02, PointFromId(507));
    AIAttackWaveSetTargetRegion(gv_pLAYER_06_KERRIGAN_S02, RegionFromId(5), 0);
    AIAttackWaveSetGatherEarlyNoReplace(gv_pLAYER_06_KERRIGAN_S02);
    AIAttackWaveAddUnits3(30, 30, 30, "HotSRaptor");
    AIAttackWaveAddUnits3(15, 15, 15, "HotSHunter");
    AIAttackWaveAddUnits3(5, 5, 5, "RoachVile");
    AIAttackWaveAddUnits3(5, 5, 5, "HydraliskImpaler");
    AIAttackWaveAddUnits3(4, 4, 4, "InfestedAbomination");
    AIAttackWaveAddUnits3(2, 2, 2, "Queen");
    AIAttackWaveSend(gv_pLAYER_06_KERRIGAN_S02, gv_waveBuildTime, false);
    gv_currentWave = WaveLastCreated();
    Wait(gv_waveBuildTime, c_timeGame);
    UnitGroupClear(gv_currentWaveUnitGroup);
    UnitGroupAddUnitGroup(gv_currentWaveUnitGroup, AIWaveGetUnits(gv_currentWave));
    AISetGroupNotUsableInWaves(gv_currentWaveUnitGroup, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Kerrigan06Wave_Init () {
    gt_Kerrigan06Wave = TriggerCreate("gt_Kerrigan06Wave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan 06 Wave Gathering
//--------------------------------------------------------------------------------------------------
bool gt_Kerrigan06WaveGathering_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait((gv_waveBuildTime - 45.0), c_timeAI);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/8F587913"), null, PointFromId(507));
    VisRevealerDestroy(gv_gatherRevealer);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(25));
    gv_gatherRevealer = VisRevealerLastCreated();
    PingDestroy(gv_pingGather);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", PointFromId(507), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    gv_pingGather = PingLastCreated();
    PingSetScale(PingLastCreated(), 0.75);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/8412AECF"));
    SoundPlay(SoundLink("Ping", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeReal);
    gf_RevealPath(8, 18);
    TriggerExecute(gt_TransmissionZergWaveGatherQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Kerrigan06WaveGathering_Init () {
    gt_Kerrigan06WaveGathering = TriggerCreate("gt_Kerrigan06WaveGathering_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan 06 Stop Wave
//--------------------------------------------------------------------------------------------------
bool gt_Kerrigan06StopWave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto9765FBD7_g;
    int auto9765FBD7_u;
    unit auto9765FBD7_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_03_MOEBIUS_S02, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_KerriganWaveSent);
    TriggerStop(gt_Kerrigan06Wave);
    TriggerStop(gt_Kerrigan06WaveGathering);
    TriggerStop(gt_Kerrigan06WaveController);
    auto9765FBD7_g = UnitGroup(null, gv_pLAYER_06_KERRIGAN_S02, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9765FBD7_u = UnitGroupCount(auto9765FBD7_g, c_unitCountAll);
    for (;; auto9765FBD7_u -= 1) {
        auto9765FBD7_var = UnitGroupUnitFromEnd(auto9765FBD7_g, auto9765FBD7_u);
        if (auto9765FBD7_var == null) { break; }
        AIRemoveUnitFromAnyWaves(auto9765FBD7_var);
        libNtve_gf_ShareVisionofUnit(auto9765FBD7_var, false, gv_pLAYER_01_USER);
        if ((libNtve_gf_UnitInRegion(auto9765FBD7_var, RegionFromId(5)) == true)) {
            UnitSetOwner(auto9765FBD7_var, gv_pLAYER_07_KERRIGAN_S03, true);
        }

    }
    cai_waves_stop("aiBDC4060E");
    AIAttackWaveCancel(gv_currentWave);
    PingDestroy(gv_pingGather);
    PingDestroy(gv_pingAttack);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Kerrigan06StopWave_Init () {
    gt_Kerrigan06StopWave = TriggerCreate("gt_Kerrigan06StopWave_Func");
    TriggerEnable(gt_Kerrigan06StopWave, false);
    TriggerAddEventTimePeriodic(gt_Kerrigan06StopWave, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan 06 Setup Forward Base
//--------------------------------------------------------------------------------------------------
bool gt_Kerrigan06SetupForwardBase_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_dropPodUnits01;
    unitgroup lv_dropPodUnits02;
    unitgroup lv_dropPodUnits03;
    unitgroup lv_dropPodUnits04;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dropPodUnits01 = UnitGroupEmpty();
    lv_dropPodUnits02 = UnitGroupEmpty();
    lv_dropPodUnits03 = UnitGroupEmpty();
    lv_dropPodUnits04 = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AIToggleBulliesInRegion(gv_pLAYER_03_MOEBIUS_S02, RegionFromId(5), false);
    AIToggleBulliesInRegion(gv_pLAYER_07_KERRIGAN_S03, RegionFromId(5), true);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(5), 16.0, false);
    UnitIssueOrder(UnitFromId(375), Order(AbilityCommand("HybridDoorsWideLeft", 0)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Lair", c_unitCreateIgnorePlacement, gv_pLAYER_07_KERRIGAN_S03, PointFromId(1100));
    UnitGroupAddUnitGroup(lv_dropPodUnits01, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Overseer", c_unitCreateIgnorePlacement, gv_pLAYER_07_KERRIGAN_S03, PointFromId(1100));
    UnitGroupAddUnitGroup(lv_dropPodUnits01, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "HotSNoxious", 0, gv_pLAYER_07_KERRIGAN_S03, PointFromId(1100));
    UnitGroupAddUnitGroup(lv_dropPodUnits01, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Queen", 0, gv_pLAYER_07_KERRIGAN_S03, PointFromId(1100));
    UnitGroupAddUnitGroup(lv_dropPodUnits01, UnitLastCreatedGroup());
    libA3DDD02B_gf_CreateDropPod(libA3DDD02B_ge_DropPodRace_Zerg, PointFromId(1100), lv_dropPodUnits01, false, gv_pLAYER_07_KERRIGAN_S03);
    Wait(0.125, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Lair", c_unitCreateIgnorePlacement, gv_pLAYER_07_KERRIGAN_S03, PointFromId(1101));
    UnitGroupAddUnitGroup(lv_dropPodUnits02, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Overseer", c_unitCreateIgnorePlacement, gv_pLAYER_07_KERRIGAN_S03, PointFromId(1101));
    UnitGroupAddUnitGroup(lv_dropPodUnits02, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "HotSNoxious", 0, gv_pLAYER_07_KERRIGAN_S03, PointFromId(1101));
    UnitGroupAddUnitGroup(lv_dropPodUnits02, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(5, "HydraliskImpaler", 0, gv_pLAYER_07_KERRIGAN_S03, PointFromId(1101));
    UnitGroupAddUnitGroup(lv_dropPodUnits02, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Corruptor", 0, gv_pLAYER_07_KERRIGAN_S03, PointFromId(1101));
    UnitGroupAddUnitGroup(lv_dropPodUnits02, UnitLastCreatedGroup());
    libA3DDD02B_gf_CreateDropPod(libA3DDD02B_ge_DropPodRace_Zerg, PointFromId(1101), lv_dropPodUnits02, false, gv_pLAYER_07_KERRIGAN_S03);
    Wait(0.125, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Lair", c_unitCreateIgnorePlacement, gv_pLAYER_07_KERRIGAN_S03, PointFromId(1102));
    UnitGroupAddUnitGroup(lv_dropPodUnits03, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Overseer", c_unitCreateIgnorePlacement, gv_pLAYER_07_KERRIGAN_S03, PointFromId(1102));
    UnitGroupAddUnitGroup(lv_dropPodUnits03, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(4, "RoachVile", 0, gv_pLAYER_07_KERRIGAN_S03, PointFromId(1102));
    UnitGroupAddUnitGroup(lv_dropPodUnits03, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(4, "HydraliskImpaler", 0, gv_pLAYER_07_KERRIGAN_S03, PointFromId(1102));
    UnitGroupAddUnitGroup(lv_dropPodUnits03, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(4, "InfestedAbomination", 0, gv_pLAYER_07_KERRIGAN_S03, PointFromId(1102));
    UnitGroupAddUnitGroup(lv_dropPodUnits03, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Corruptor", 0, gv_pLAYER_07_KERRIGAN_S03, PointFromId(1102));
    UnitGroupAddUnitGroup(lv_dropPodUnits03, UnitLastCreatedGroup());
    libA3DDD02B_gf_CreateDropPod(libA3DDD02B_ge_DropPodRace_Zerg, PointFromId(1102), lv_dropPodUnits03, false, gv_pLAYER_07_KERRIGAN_S03);
    Wait(0.125, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Lair", c_unitCreateIgnorePlacement, gv_pLAYER_07_KERRIGAN_S03, PointFromId(1103));
    UnitGroupAddUnitGroup(lv_dropPodUnits04, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Overseer", c_unitCreateIgnorePlacement, gv_pLAYER_07_KERRIGAN_S03, PointFromId(1103));
    UnitGroupAddUnitGroup(lv_dropPodUnits04, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(5, "HydraliskImpaler", 0, gv_pLAYER_07_KERRIGAN_S03, PointFromId(1103));
    UnitGroupAddUnitGroup(lv_dropPodUnits04, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(5, "HotSHunter", 0, gv_pLAYER_07_KERRIGAN_S03, PointFromId(1103));
    UnitGroupAddUnitGroup(lv_dropPodUnits04, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Queen", 0, gv_pLAYER_07_KERRIGAN_S03, PointFromId(1103));
    UnitGroupAddUnitGroup(lv_dropPodUnits04, UnitLastCreatedGroup());
    libA3DDD02B_gf_CreateDropPod(libA3DDD02B_ge_DropPodRace_Zerg, PointFromId(1103), lv_dropPodUnits04, false, gv_pLAYER_07_KERRIGAN_S03);
    Wait(2.0, c_timeGame);
    UnitBehaviorAdd(UnitFromId(375), "ZergDoorInfestation", UnitFromId(375), 1);
    libA3DDD02B_gf_SetUnitInfoTextCampaignDetailed(UnitFromId(375), null, StringExternal("Param/Value/9E3D2EEE"), null);
    Wait(240.0, c_timeAI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Kerrigan06SetupForwardBase_Init () {
    gt_Kerrigan06SetupForwardBase = TriggerCreate("gt_Kerrigan06SetupForwardBase_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan 07 Wave Controller
//--------------------------------------------------------------------------------------------------
bool gt_Kerrigan07WaveController_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitInvulnerable(UnitFromId(463), false);
    UnitSetState(UnitFromId(463), c_unitStateTargetable, true);
    TriggerExecute(gt_Kerrigan07InitialWave, true, true);
    Wait(gv_waveCooldownTime, c_timeGame);
    while (!((UnitGroupCount(gv_currentWaveUnitGroup, c_unitCountAlive) < 15))) {
        Wait(1.0, c_timeGame);
    }
    while (((UnitGroupCount(UnitGroup(null, gv_pLAYER_07_KERRIGAN_S03, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("Hatchery", gv_pLAYER_07_KERRIGAN_S03, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("Lair", gv_pLAYER_07_KERRIGAN_S03, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("Hive", gv_pLAYER_07_KERRIGAN_S03, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
        TriggerExecute(gt_Kerrigan07Wave, true, true);
        Wait(gv_waveCooldownTime, c_timeGame);
        while (!((AIWaveUnitCount(gv_currentWave) < 15))) {
            Wait(1.0, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Kerrigan07WaveController_Init () {
    gt_Kerrigan07WaveController = TriggerCreate("gt_Kerrigan07WaveController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan 07 Initial Wave
//--------------------------------------------------------------------------------------------------
bool gt_Kerrigan07InitialWave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_07_KERRIGAN_S03, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Kerrigan07RevealAndWarnFinalBaseTransmissionQ, true, false);
    AIAttackWaveSetGatherPoint(gv_pLAYER_07_KERRIGAN_S03, PointFromId(530));
    AIAttackWaveSetTargetRegion(gv_pLAYER_07_KERRIGAN_S03, RegionFromId(6), 0);
    AIAttackWaveSetGatherEarlyNoReplace(gv_pLAYER_07_KERRIGAN_S03);
    AIAttackWaveAddUnits3(30, 30, 30, "HotSRaptor");
    AIAttackWaveAddUnits3(15, 15, 15, "HotSHunter");
    AIAttackWaveAddUnits3(5, 5, 5, "RoachVile");
    AIAttackWaveAddUnits3(5, 5, 5, "HydraliskImpaler");
    AIAttackWaveAddUnits3(4, 4, 4, "InfestedAbomination");
    AIAttackWaveAddUnits3(2, 2, 2, "Queen");
    AIAttackWaveSend(gv_pLAYER_07_KERRIGAN_S03, gv_waveBuildTime, false);
    gv_currentWave = WaveLastCreated();
    Wait(gv_waveBuildTime, c_timeGame);
    UnitGroupClear(gv_currentWaveUnitGroup);
    UnitGroupAddUnitGroup(gv_currentWaveUnitGroup, AIWaveGetUnits(gv_currentWave));
    AISetGroupNotUsableInWaves(gv_currentWaveUnitGroup, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Kerrigan07InitialWave_Init () {
    gt_Kerrigan07InitialWave = TriggerCreate("gt_Kerrigan07InitialWave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan 07 Reveal And Warn Final Base Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_Kerrigan07RevealAndWarnFinalBaseTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait((gv_waveBuildTime - 45.0), c_timeAI);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/9CC5E0C4"), null, PointFromId(530));
    VisRevealerDestroy(gv_gatherRevealer);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(26));
    gv_gatherRevealer = VisRevealerLastCreated();
    PingDestroy(gv_pingGather);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", PointFromId(530), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    gv_pingGather = PingLastCreated();
    PingSetScale(PingLastCreated(), 0.75);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/18D45599"));
    SoundPlay(SoundLink("Ping", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeReal);
    gf_RevealPath(12, 18);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/250E6D51"), null, UnitGetPosition(UnitFromId(529)));
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(6), 0.0, false);
    libA3DDD02B_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(UnitFromId(529)), 8.0, Color(100.00, 0.00, 0.00));
    SoundPlay(SoundLink("Ping", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("Prologue_Zerg_Horde_AmbLow", -1), c_maxPlayers, PlayerGroupAll(), 90.0, 0.0);
    Wait(2.0, c_timeReal);
    TriggerQueueEnter();
    if ((gv_inCinematic == false)) {
        libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Speech);
        libA3DDD02B_gf_SendTransmissionCampaign(null, "vpMission_VoidPrologue01|Line00031", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Kerrigan07RevealAndWarnFinalBaseTransmissionQ_Init () {
    gt_Kerrigan07RevealAndWarnFinalBaseTransmissionQ = TriggerCreate("gt_Kerrigan07RevealAndWarnFinalBaseTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan 07 Wave
//--------------------------------------------------------------------------------------------------
bool gt_Kerrigan07Wave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Kerrigan07WaveGathering, true, false);
    AIAttackWaveSetGatherPoint(gv_pLAYER_07_KERRIGAN_S03, PointFromId(530));
    AIAttackWaveSetTargetRegion(gv_pLAYER_07_KERRIGAN_S03, RegionFromId(6), 0);
    AIAttackWaveSetGatherEarlyNoReplace(gv_pLAYER_07_KERRIGAN_S03);
    AIAttackWaveAddUnits3(30, 30, 30, "HotSRaptor");
    AIAttackWaveAddUnits3(15, 15, 15, "HotSHunter");
    AIAttackWaveAddUnits3(5, 5, 5, "RoachVile");
    AIAttackWaveAddUnits3(5, 5, 5, "HydraliskImpaler");
    AIAttackWaveAddUnits3(4, 4, 4, "InfestedAbomination");
    AIAttackWaveAddUnits3(2, 2, 2, "Queen");
    AIAttackWaveSend(gv_pLAYER_07_KERRIGAN_S03, gv_waveBuildTime, false);
    gv_currentWave = WaveLastCreated();
    Wait(gv_waveBuildTime, c_timeGame);
    UnitGroupClear(gv_currentWaveUnitGroup);
    UnitGroupAddUnitGroup(gv_currentWaveUnitGroup, AIWaveGetUnits(gv_currentWave));
    AISetGroupNotUsableInWaves(gv_currentWaveUnitGroup, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Kerrigan07Wave_Init () {
    gt_Kerrigan07Wave = TriggerCreate("gt_Kerrigan07Wave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan 07 Wave Gathering
//--------------------------------------------------------------------------------------------------
bool gt_Kerrigan07WaveGathering_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait((gv_waveBuildTime - 45.0), c_timeAI);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/3AFF093D"), null, PointFromId(530));
    VisRevealerDestroy(gv_gatherRevealer);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(26));
    gv_gatherRevealer = VisRevealerLastCreated();
    PingDestroy(gv_pingGather);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", PointFromId(530), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    gv_pingGather = PingLastCreated();
    PingSetScale(PingLastCreated(), 0.75);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/EE34EA5B"));
    SoundPlay(SoundLink("Ping", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeReal);
    gf_RevealPath(12, 18);
    TriggerExecute(gt_TransmissionZergWaveGatherQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Kerrigan07WaveGathering_Init () {
    gt_Kerrigan07WaveGathering = TriggerCreate("gt_Kerrigan07WaveGathering_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Moebius Corps Attack Warning 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_MoebiusCorpsAttackWarning01Q_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_waveGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_waveGroup = AIWaveGetUnits(EventPlayerWave());
    gf_TrackUnitGroupWithPing(lv_waveGroup);
    SoundPlay(SoundLink("UI_ZergWarningPing", -1), PlayerGroupAll(), 100.0, 0.0);
    TriggerQueueEnter();
    Wait(2.0, c_timeReal);
    if ((gv_gameOver == false) && (gv_inCinematic == false) && (UnitIsAlive(UnitGroupUnit(lv_waveGroup, 1)) == true)) {
        libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Speech);
        libA3DDD02B_gf_SendTransmissionCampaign(UnitGroupUnit(lv_waveGroup, 1), "vpMission_VoidPrologue01|Line00035", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoebiusCorpsAttackWarning01Q_Init () {
    gt_MoebiusCorpsAttackWarning01Q = TriggerCreate("gt_MoebiusCorpsAttackWarning01Q_Func");
    TriggerAddEventPlayerAIWave(gt_MoebiusCorpsAttackWarning01Q, gv_pLAYER_03_MOEBIUS_S02);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Moebius Hercules Wave 01 (Brutal Only)
//--------------------------------------------------------------------------------------------------
bool gt_MoebiusHerculesWave01BrutalOnly_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_herculesHasCargo;
    unit lv_hercules;
    unitgroup lv_waveUnits;

    // Automatic Variable Declarations
    unitgroup autoC351DCC5_g;
    int autoC351DCC5_u;
    unit autoC351DCC5_var;

    // Variable Initialization
    lv_herculesHasCargo = true;
    lv_waveUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libA3DDD02B_gf_DifficultyValuePrologueInteger(0, 0, 0, 1) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((TriggerIsEnabled(gt_PlayerEntersFirstDoorOpen) == true)) {
        TriggerExecute(gt_PlayerEntersFirstDoorOpen, false, false);
    }

    UnitCreate(1, "Hercules", 0, gv_pLAYER_02_MOEBIUS_S01, PointFromId(2143), PointGetFacing(PointFromId(2143)));
    lv_hercules = UnitLastCreated();
    UnitCargoCreate(lv_hercules, "Marine", libA3DDD02B_gf_DifficultyValuePrologueInteger(4, 4, 4, 6));
    UnitGroupAddUnitGroup(lv_waveUnits, UnitCargoLastCreatedGroup());
    UnitCargoCreate(lv_hercules, "VikingAssault", libA3DDD02B_gf_DifficultyValuePrologueInteger(1, 1, 2, 2));
    UnitGroupAddUnitGroup(lv_waveUnits, UnitCargoLastCreatedGroup());
    libLbty_gf_OrderTransporttoUnloadAllthenDespawn(lv_hercules, PointFromId(2144), PointFromId(2143));
    while ((lv_herculesHasCargo == true)) {
        if ((UnitGroupCount(lv_waveUnits, c_unitCountAlive) == 0)) {
            return true;
        }

        lv_herculesHasCargo = false;
        autoC351DCC5_g = lv_waveUnits;
        autoC351DCC5_u = UnitGroupCount(autoC351DCC5_g, c_unitCountAll);
        for (;; autoC351DCC5_u -= 1) {
            autoC351DCC5_var = UnitGroupUnitFromEnd(autoC351DCC5_g, autoC351DCC5_u);
            if (autoC351DCC5_var == null) { break; }
            if ((libNtve_gf_UnitIsInsideTransport(autoC351DCC5_var) == true)) {
                lv_herculesHasCargo = true;
            }

        }
        Wait(0.5, c_timeGame);
    }
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_MOEBIUS_S01, PointFromId(2144));
    AIAttackWaveSetTargetPoint(gv_pLAYER_02_MOEBIUS_S01, PointFromId(455));
    AIAttackWaveUseGroup(gv_pLAYER_02_MOEBIUS_S01, lv_waveUnits);
    AIAttackWaveSend(gv_pLAYER_02_MOEBIUS_S01, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoebiusHerculesWave01BrutalOnly_Init () {
    gt_MoebiusHerculesWave01BrutalOnly = TriggerCreate("gt_MoebiusHerculesWave01BrutalOnly_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Moebius Hercules Wave 02 (Brutal Only)
//--------------------------------------------------------------------------------------------------
bool gt_MoebiusHerculesWave02BrutalOnly_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_herculesHasCargo;
    unit lv_hercules;
    unitgroup lv_waveUnits;

    // Automatic Variable Declarations
    unitgroup auto11392D0A_g;
    int auto11392D0A_u;
    unit auto11392D0A_var;

    // Variable Initialization
    lv_herculesHasCargo = true;
    lv_waveUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libA3DDD02B_gf_DifficultyValuePrologueInteger(0, 0, 0, 1) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitCreate(1, "Hercules", 0, gv_pLAYER_02_MOEBIUS_S01, PointFromId(2143), PointGetFacing(PointFromId(2143)));
    lv_hercules = UnitLastCreated();
    UnitCargoCreate(lv_hercules, "Marine", libA3DDD02B_gf_DifficultyValuePrologueInteger(4, 4, 5, 5));
    UnitGroupAddUnitGroup(lv_waveUnits, UnitCargoLastCreatedGroup());
    UnitCargoCreate(lv_hercules, "Medic", libA3DDD02B_gf_DifficultyValuePrologueInteger(1, 1, 2, 2));
    UnitGroupAddUnitGroup(lv_waveUnits, UnitCargoLastCreatedGroup());
    UnitCargoCreate(lv_hercules, "Marauder", libA3DDD02B_gf_DifficultyValuePrologueInteger(1, 1, 1, 2));
    UnitGroupAddUnitGroup(lv_waveUnits, UnitCargoLastCreatedGroup());
    libLbty_gf_OrderTransporttoUnloadAllthenDespawn(lv_hercules, PointFromId(2144), PointFromId(2143));
    while ((lv_herculesHasCargo == true)) {
        if ((UnitGroupCount(lv_waveUnits, c_unitCountAlive) == 0)) {
            return true;
        }

        lv_herculesHasCargo = false;
        auto11392D0A_g = lv_waveUnits;
        auto11392D0A_u = UnitGroupCount(auto11392D0A_g, c_unitCountAll);
        for (;; auto11392D0A_u -= 1) {
            auto11392D0A_var = UnitGroupUnitFromEnd(auto11392D0A_g, auto11392D0A_u);
            if (auto11392D0A_var == null) { break; }
            if ((libNtve_gf_UnitIsInsideTransport(auto11392D0A_var) == true)) {
                lv_herculesHasCargo = true;
            }

        }
        Wait(0.5, c_timeGame);
    }
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_MOEBIUS_S01, PointFromId(2144));
    AIAttackWaveSetTargetPoint(gv_pLAYER_02_MOEBIUS_S01, PointFromId(455));
    AIAttackWaveUseGroup(gv_pLAYER_02_MOEBIUS_S01, lv_waveUnits);
    AIAttackWaveSend(gv_pLAYER_02_MOEBIUS_S01, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoebiusHerculesWave02BrutalOnly_Init () {
    gt_MoebiusHerculesWave02BrutalOnly = TriggerCreate("gt_MoebiusHerculesWave02BrutalOnly_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Moebius Corps Attack Warning 02 Q
//--------------------------------------------------------------------------------------------------
bool gt_MoebiusCorpsAttackWarning02Q_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_waveGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_waveGroup = AIWaveGetUnits(EventPlayerWave());
    gf_TrackUnitGroupWithPing(lv_waveGroup);
    SoundPlay(SoundLink("UI_ZergWarningPing", -1), PlayerGroupAll(), 100.0, 0.0);
    TriggerQueueEnter();
    Wait(2.0, c_timeReal);
    if ((gv_gameOver == false) && (gv_inCinematic == false) && (UnitIsAlive(UnitGroupUnit(lv_waveGroup, 1)) == true)) {
        libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Speech);
        libA3DDD02B_gf_SendTransmissionCampaign(UnitGroupUnit(lv_waveGroup, 1), "vpMission_VoidPrologue01|Line00051", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoebiusCorpsAttackWarning02Q_Init () {
    gt_MoebiusCorpsAttackWarning02Q = TriggerCreate("gt_MoebiusCorpsAttackWarning02Q_Func");
    TriggerAddEventPlayerAIWave(gt_MoebiusCorpsAttackWarning02Q, gv_pLAYER_02_MOEBIUS_S01);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libA3DDD02B_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_01_USER), libA3DDD02B_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/FCAC5425"), libA3DDD02B_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libA3DDD02B_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Station Reactor Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatStationReactorDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveStationReactorMustSurviveFailed, true, false);
    libA3DDD02B_gf_DisplayCampaignMessage(PlayerGroupAll(), libA3DDD02B_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/8E63B89B"), libA3DDD02B_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libA3DDD02B_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatStationReactorDestroyed_Init () {
    gt_DefeatStationReactorDestroyed = TriggerCreate("gt_DefeatStationReactorDestroyed_Func");
    TriggerAddEventUnitDied(gt_DefeatStationReactorDestroyed, UnitRefFromUnit(UnitFromId(529)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Primary Objective Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryPrimaryObjectiveCompleted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    libNtve_gf_ChangeUnitDamage(UnitFromId(529), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    PingDestroy(libHots_gf_PingStoredForUnit(UnitFromId(158), 1));
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveFreeCaptiveProtoss03Complete, true, false);
    TriggerExecute(gt_ObjectiveStationReactorMustSurviveComplete, true, false);
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryPrimaryObjectiveCompleted_Init () {
    gt_VictoryPrimaryObjectiveCompleted = TriggerCreate("gt_VictoryPrimaryObjectiveCompleted_Func");
    TriggerAddEventUnitDied(gt_VictoryPrimaryObjectiveCompleted, UnitRefFromUnit(UnitFromId(158)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.0, c_timeReal);
    libA3DDD02B_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((ObjectiveGetState(gv_objectiveFreeCaptiveProtoss03) == c_objectiveStateCompleted)) {
        libA3DDD02B_gf_CampaignAwardAchievement("PPrologue01_01", gv_pLAYER_01_USER);
    }

    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/619DF54F"), IntToText(gv_unitsLostToZerg));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/9875DFFB"), IntToText(gv_zergUnitsKilled));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/1F73A171"), IntToText(gv_warpingTerranKilled));
    libA3DDD02B_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libA3DDD02B_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_VictoryCheat, false);
    TriggerEnable(gt_DefeatCheat, false);
    TriggerEnable(gt_Defeat, false);
    gv_gameOver = true;
    libA3DDD02B_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_VictoryCheat, false);
    TriggerEnable(gt_DefeatCheat, false);
    TriggerEnable(gt_Victory, false);
    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Mission Help Q
//--------------------------------------------------------------------------------------------------
bool gt_TipMissionHelpQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libA3DDD02B_gf_DisplayMissionTip(StringExternal("Param/Value/A5A6CA4F"));
    Wait(libA3DDD02B_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipMissionHelpQ_Init () {
    gt_TipMissionHelpQ = TriggerCreate("gt_TipMissionHelpQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stat - Unit Dies (Various)
//--------------------------------------------------------------------------------------------------
bool gt_StatUnitDiesVarious_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER) && ((UnitGetOwner(libNtve_gf_KillingUnit()) == gv_pLAYER_05_KERRIGAN_S01) || (UnitGetOwner(libNtve_gf_KillingUnit()) == gv_pLAYER_06_KERRIGAN_S02) || (UnitGetOwner(libNtve_gf_KillingUnit()) == gv_pLAYER_07_KERRIGAN_S03) || (UnitGetOwner(libNtve_gf_KillingUnit()) == gv_pLAYER_08_KERRIGAN_NOSHAREVISION))) {
        gv_unitsLostToZerg += 1;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) == gv_pLAYER_01_USER) && ((UnitGetOwner(EventUnit()) == gv_pLAYER_05_KERRIGAN_S01) || (UnitGetOwner(EventUnit()) == gv_pLAYER_06_KERRIGAN_S02) || (UnitGetOwner(EventUnit()) == gv_pLAYER_07_KERRIGAN_S03) || (UnitGetOwner(EventUnit()) == gv_pLAYER_08_KERRIGAN_NOSHAREVISION))) {
        gv_zergUnitsKilled += 1;
        if ((gv_zergUnitsKilled >= 30)) {
            TriggerExecute(gt_AchievementZergUnitsKilled, true, false);
        }

    }

    if ((UnitGetCustomValue(EventUnit(), 0) == 1.0) && ((UnitGetOwner(EventUnit()) == gv_pLAYER_02_MOEBIUS_S01) || (UnitGetOwner(EventUnit()) == gv_pLAYER_03_MOEBIUS_S02) || (UnitGetOwner(EventUnit()) == gv_pLAYER_04_MOEBIUS_S03) || (UnitGetOwner(EventUnit()) == gv_pLAYER_09_MOEBIUS_FINALAREA))) {
        gv_warpingTerranKilled += 1;
        if ((libA3DDD02B_gf_DifficultyValuePrologueInteger(0, 1, 1, 1) == 1) && (gv_warpingTerranKilled >= 6)) {
            TriggerExecute(gt_AchievementWarpingTerranKilledNormal, true, false);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatUnitDiesVarious_Init () {
    gt_StatUnitDiesVarious = TriggerCreate("gt_StatUnitDiesVarious_Func");
    TriggerAddEventUnitDied(gt_StatUnitDiesVarious, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - Zerg Units Killed
//--------------------------------------------------------------------------------------------------
bool gt_AchievementZergUnitsKilled_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libA3DDD02B_gf_CampaignAwardAchievement("PPrologue01_02", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementZergUnitsKilled_Init () {
    gt_AchievementZergUnitsKilled = TriggerCreate("gt_AchievementZergUnitsKilled_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - Warping Terran Killed (Normal+)
//--------------------------------------------------------------------------------------------------
bool gt_AchievementWarpingTerranKilledNormal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libA3DDD02B_gf_CampaignAwardAchievement("PPrologue01_03", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementWarpingTerranKilledNormal_Init () {
    gt_AchievementWarpingTerranKilledNormal = TriggerCreate("gt_AchievementWarpingTerranKilledNormal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 10th Anniversary Achievement - Destroy all Zerg structures before freeing all captive Protoss
//--------------------------------------------------------------------------------------------------
bool gt__10thAnniversaryAchievementDestroyallZergstructuresbeforefreeingallcaptiveProtoss_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(gv_pLAYER_01_USER, UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }

        if (!(((ObjectiveGetState(gv_objectiveFreeCaptiveProtoss01) == c_objectiveStateActive) || (ObjectiveGetState(gv_objectiveFreeCaptiveProtoss02) == c_objectiveStateActive) || (ObjectiveGetState(gv_objectiveFreeCaptiveProtoss03) == c_objectiveStateActive)))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_05_KERRIGAN_S01, null, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_06_KERRIGAN_S02, null, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_07_KERRIGAN_S03, null, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_08_KERRIGAN_NOSHAREVISION, null, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA3DDD02B_gf_CampaignAwardAchievement("Anniversary_PPrologue01", gv_pLAYER_01_USER);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__10thAnniversaryAchievementDestroyallZergstructuresbeforefreeingallcaptiveProtoss_Init () {
    gt__10thAnniversaryAchievementDestroyallZergstructuresbeforefreeingallcaptiveProtoss = TriggerCreate("gt__10thAnniversaryAchievementDestroyallZergstructuresbeforefreeingallcaptiveProtoss_Func");
    TriggerAddEventUnitDied(gt__10thAnniversaryAchievementDestroyallZergstructuresbeforefreeingallcaptiveProtoss, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Free Captive Protoss 01 Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFreeCaptiveProtoss01Create_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libA3DDD02B_gf_CreateObjectiveCampaign("PPrologue01Primary01");
    gv_objectiveFreeCaptiveProtoss01 = ObjectiveLastCreated();
    Wait(libA3DDD02B_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFreeCaptiveProtoss01Create_Init () {
    gt_ObjectiveFreeCaptiveProtoss01Create = TriggerCreate("gt_ObjectiveFreeCaptiveProtoss01Create_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Free Captive Protoss 01 Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFreeCaptiveProtoss01Complete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveFreeCaptiveProtoss01Create, true, false);
    libA3DDD02B_gf_SetObjectiveStateCampaign("PPrologue01Primary01", libA3DDD02B_ge_MissionObjectiveState_Completed);
    libA3DDD02B_gf_SetMissionObjectiveProgress2("PPrologue01Primary01", 1, true, null, false);
    Wait(libA3DDD02B_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFreeCaptiveProtoss01Complete_Init () {
    gt_ObjectiveFreeCaptiveProtoss01Complete = TriggerCreate("gt_ObjectiveFreeCaptiveProtoss01Complete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Free Captive Protoss 01 Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFreeCaptiveProtoss01Failed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveFreeCaptiveProtoss01Create, true, false);
    libA3DDD02B_gf_SetObjectiveStateCampaign("PPrologue01Primary01", libA3DDD02B_ge_MissionObjectiveState_Failed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFreeCaptiveProtoss01Failed_Init () {
    gt_ObjectiveFreeCaptiveProtoss01Failed = TriggerCreate("gt_ObjectiveFreeCaptiveProtoss01Failed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Free Captive Protoss 02 Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFreeCaptiveProtoss02Create_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libA3DDD02B_gf_CreateObjectiveCampaign("PPrologue01Primary02");
    gv_objectiveFreeCaptiveProtoss02 = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 1);
    Wait(libA3DDD02B_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFreeCaptiveProtoss02Create_Init () {
    gt_ObjectiveFreeCaptiveProtoss02Create = TriggerCreate("gt_ObjectiveFreeCaptiveProtoss02Create_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Free Captive Protoss 02 Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFreeCaptiveProtoss02Complete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveFreeCaptiveProtoss02Create, true, false);
    libA3DDD02B_gf_SetObjectiveStateCampaign("PPrologue01Primary02", libA3DDD02B_ge_MissionObjectiveState_Completed);
    libA3DDD02B_gf_SetMissionObjectiveProgress2("PPrologue01Primary02", 1, true, null, false);
    Wait(libA3DDD02B_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFreeCaptiveProtoss02Complete_Init () {
    gt_ObjectiveFreeCaptiveProtoss02Complete = TriggerCreate("gt_ObjectiveFreeCaptiveProtoss02Complete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Free Captive Protoss 02 Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFreeCaptiveProtoss02Failed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveFreeCaptiveProtoss02Create, true, false);
    libA3DDD02B_gf_SetObjectiveStateCampaign("PPrologue01Primary02", libA3DDD02B_ge_MissionObjectiveState_Failed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFreeCaptiveProtoss02Failed_Init () {
    gt_ObjectiveFreeCaptiveProtoss02Failed = TriggerCreate("gt_ObjectiveFreeCaptiveProtoss02Failed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Free Captive Protoss 03 Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFreeCaptiveProtoss03Create_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libA3DDD02B_gf_CreateObjectiveCampaign("PPrologue01Primary03");
    gv_objectiveFreeCaptiveProtoss03 = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 1);
    Wait(libA3DDD02B_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFreeCaptiveProtoss03Create_Init () {
    gt_ObjectiveFreeCaptiveProtoss03Create = TriggerCreate("gt_ObjectiveFreeCaptiveProtoss03Create_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Free Captive Protoss 03 Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFreeCaptiveProtoss03Complete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveFreeCaptiveProtoss03Create, true, false);
    libA3DDD02B_gf_SetObjectiveStateCampaign("PPrologue01Primary03", libA3DDD02B_ge_MissionObjectiveState_Completed);
    libA3DDD02B_gf_SetMissionObjectiveProgress2("PPrologue01Primary03", 1, true, null, false);
    Wait(libA3DDD02B_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFreeCaptiveProtoss03Complete_Init () {
    gt_ObjectiveFreeCaptiveProtoss03Complete = TriggerCreate("gt_ObjectiveFreeCaptiveProtoss03Complete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Free Captive Protoss 03 Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFreeCaptiveProtoss03Failed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveFreeCaptiveProtoss03Create, true, false);
    libA3DDD02B_gf_SetObjectiveStateCampaign("PPrologue01Primary03", libA3DDD02B_ge_MissionObjectiveState_Failed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFreeCaptiveProtoss03Failed_Init () {
    gt_ObjectiveFreeCaptiveProtoss03Failed = TriggerCreate("gt_ObjectiveFreeCaptiveProtoss03Failed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Station Reactor Must Survive Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveStationReactorMustSurviveCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libA3DDD02B_gf_CreateObjectiveCampaign("PPrologue01Primary04");
    gv_objectiveReactorMustSurvive = ObjectiveLastCreated();
    Wait(libA3DDD02B_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveStationReactorMustSurviveCreate_Init () {
    gt_ObjectiveStationReactorMustSurviveCreate = TriggerCreate("gt_ObjectiveStationReactorMustSurviveCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Station Reactor Must Survive Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveStationReactorMustSurviveComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveStationReactorMustSurviveCreate, true, false);
    libA3DDD02B_gf_SetObjectiveStateCampaign("PPrologue01Primary04", libA3DDD02B_ge_MissionObjectiveState_Completed);
    libA3DDD02B_gf_SetMissionObjectiveProgress2("PPrologue01Primary04", 1, true, null, false);
    Wait(libA3DDD02B_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveStationReactorMustSurviveComplete_Init () {
    gt_ObjectiveStationReactorMustSurviveComplete = TriggerCreate("gt_ObjectiveStationReactorMustSurviveComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Station Reactor Must Survive Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveStationReactorMustSurviveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveStationReactorMustSurviveCreate, true, false);
    libA3DDD02B_gf_SetObjectiveStateCampaign("PPrologue01Primary04", libA3DDD02B_ge_MissionObjectiveState_Failed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveStationReactorMustSurviveFailed_Init () {
    gt_ObjectiveStationReactorMustSurviveFailed = TriggerCreate("gt_ObjectiveStationReactorMustSurviveFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Pylon Containment Units Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePylonContainmentUnitsCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libA3DDD02B_gf_CreateObjectiveCampaign("PPrologue01Bonus01");
    gv_objectivePylonContainmentUnits = ObjectiveLastCreated();
    Wait(libA3DDD02B_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePylonContainmentUnitsCreate_Init () {
    gt_ObjectivePylonContainmentUnitsCreate = TriggerCreate("gt_ObjectivePylonContainmentUnitsCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Pylon Containment Units Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePylonContainmentUnitsUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectivePylonContainmentUnitsCreate, true, false);
    libA3DDD02B_gf_SetMissionObjectiveProgress2("PPrologue01Bonus01", gv_objectivePylonContainmentUnitsCount, true, null, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePylonContainmentUnitsUpdate_Init () {
    gt_ObjectivePylonContainmentUnitsUpdate = TriggerCreate("gt_ObjectivePylonContainmentUnitsUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Pylon Containment Units Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePylonContainmentUnitsCompleteQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectivePylonContainmentUnitsCreate, true, false);
    TriggerQueueEnter();
    ObjectiveSetState(gv_objectivePylonContainmentUnits, c_objectiveStateCompleted);
    libA3DDD02B_gf_SetMissionObjectiveProgress2("PPrologue01Bonus01", 1, true, null, false);
    Wait(libA3DDD02B_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePylonContainmentUnitsCompleteQ_Init () {
    gt_ObjectivePylonContainmentUnitsCompleteQ = TriggerCreate("gt_ObjectivePylonContainmentUnitsCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Pylon Containment Units Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePylonContainmentUnitsFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectivePylonContainmentUnitsCreate, true, false);
    libA3DDD02B_gf_SetObjectiveStateCampaign("PPrologue01Bonus01", libA3DDD02B_ge_MissionObjectiveState_Failed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePylonContainmentUnitsFailed_Init () {
    gt_ObjectivePylonContainmentUnitsFailed = TriggerCreate("gt_ObjectivePylonContainmentUnitsFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoDDF51077_g;
    int autoDDF51077_u;
    unit autoDDF51077_var;
    unitgroup auto0CBC512B_g;
    int auto0CBC512B_u;
    unit auto0CBC512B_var;
    unitgroup autoD2CDB649_g;
    int autoD2CDB649_u;
    unit autoD2CDB649_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    gv_inCinematic = true;
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    gv_introResources[1] = libNtve_gf_UnitGetPropertyResources(UnitFromId(10), c_unitPropCurrent);
    gv_introResources[2] = libNtve_gf_UnitGetPropertyResources(UnitFromId(9), c_unitPropCurrent);
    gv_introResources[3] = libNtve_gf_UnitGetPropertyResources(UnitFromId(8), c_unitPropCurrent);
    gv_introResources[4] = libNtve_gf_UnitGetPropertyResources(UnitFromId(7), c_unitPropCurrent);
    gv_introResources[5] = libNtve_gf_UnitGetPropertyResources(UnitFromId(6), c_unitPropCurrent);
    gv_introResources[6] = libNtve_gf_UnitGetPropertyResources(UnitFromId(5), c_unitPropCurrent);
    gv_introResources[7] = libNtve_gf_UnitGetPropertyResources(UnitFromId(4), c_unitPropCurrent);
    gv_introResources[8] = libNtve_gf_UnitGetPropertyResources(UnitFromId(3), c_unitPropCurrent);
    gv_introResources[9] = PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals);
    gv_introResources[10] = PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene);
    gv_introResources[11] = libNtve_gf_UnitGetPropertyResources(UnitFromId(13), c_unitPropCurrent);
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    autoDDF51077_g = UnitGroup(null, gv_pLAYER_05_KERRIGAN_S01, RegionFromId(22), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDDF51077_u = UnitGroupCount(autoDDF51077_g, c_unitCountAll);
    for (;; autoDDF51077_u -= 1) {
        autoDDF51077_var = UnitGroupUnitFromEnd(autoDDF51077_g, autoDDF51077_u);
        if (autoDDF51077_var == null) { break; }
        UnitGroupAdd(gv_cinematicHiddenUnits, autoDDF51077_var);
        libNtve_gf_ShowHideUnit(autoDDF51077_var, false);
        UnitGroupAdd(gv_cinematicPausedUnits, autoDDF51077_var);
        libNtve_gf_PauseUnit(autoDDF51077_var, true);
        UnitCreate(1, UnitGetType(autoDDF51077_var), 0, gv_pLAYER_05_KERRIGAN_S01, UnitGetPosition(autoDDF51077_var), UnitGetFacing(autoDDF51077_var));
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitGroupAdd(gv_introZergGroup, UnitLastCreated());
    }
    auto0CBC512B_g = UnitGroup(null, gv_pLAYER_02_MOEBIUS_S01, RegionFromId(44), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0CBC512B_u = UnitGroupCount(auto0CBC512B_g, c_unitCountAll);
    for (;; auto0CBC512B_u -= 1) {
        auto0CBC512B_var = UnitGroupUnitFromEnd(auto0CBC512B_g, auto0CBC512B_u);
        if (auto0CBC512B_var == null) { break; }
        UnitGroupAdd(gv_cinematicTempUnits, auto0CBC512B_var);
    }
    UnitSetPropertyFixed(UnitFromId(75), c_unitPropLifeMax, 4000.0);
    UnitSetPropertyFixed(UnitFromId(75), c_unitPropLifePercent, 100.0);
    autoD2CDB649_g = UnitGroup(null, c_playerAny, RegionFromId(27), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD2CDB649_u = UnitGroupCount(autoD2CDB649_g, c_unitCountAll);
    for (;; autoD2CDB649_u -= 1) {
        autoD2CDB649_var = UnitGroupUnitFromEnd(autoD2CDB649_g, autoD2CDB649_u);
        if (autoD2CDB649_var == null) { break; }
        UnitGroupAdd(gv_cinematicHiddenUnits, autoD2CDB649_var);
        libNtve_gf_ShowHideUnit(autoD2CDB649_var, false);
        UnitGroupAdd(gv_cinematicPausedUnits, autoD2CDB649_var);
        libNtve_gf_PauseUnit(autoD2CDB649_var, true);
    }
    UnitGroupAdd(gv_cinematicHiddenUnits, UnitFromId(161));
    libNtve_gf_ShowHideUnit(UnitFromId(161), false);
    UnitCreate(1, "VoidSeeker", 0, 0, PointFromId(1113), 45.0);
    gv_introVoidseeker = UnitLastCreated();
    UnitAbilityEnable(UnitLastCreated(), "attack", false);
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pathIndex;

    // Automatic Variable Declarations
    unitgroup auto8B3C7558_g;
    int auto8B3C7558_u;
    unit auto8B3C7558_var;
    const int autoE28F3394_n = 6;
    int autoE28F3394_i;
    const int auto3AF4712F_n = 4;
    int auto3AF4712F_i;
    const int auto51597160_n = 2;
    int auto51597160_i;
    const int auto45D9EF9F_ae = 6;
    const int auto45D9EF9F_ai = 1;
    fixed auto85BBA5C6_at;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(236), 0.0, -1, 10, true);
    libNtve_gf_StoryMode(PlayerGroupAll(), true);
    libA3DDD02B_gf_CampaignPlayCutscene2("Cutscenes\\PrologueIntro.SC2Cutscene", true, true);
    libNtve_gf_StoryMode(PlayerGroupAll(), false);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, false, true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "IntroMusic", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionFromId(3), gv_pLAYER_01_USER);
    Wait(0.0625, c_timeGame);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(239), (SoundLengthSync(SoundLink(ConversationDataGetSound("vpMission_VoidPrologue01|Line00043", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("vpMission_VoidPrologue01|Line00003", true), c_soundIndexAny))), -1, 10, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libA3DDD02B_gf_SendTransmissionCampaign(null, "vpMission_VoidPrologue01|Line00043", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libA3DDD02B_gf_SendTransmissionCampaign(null, "vpMission_VoidPrologue01|Line00003", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    SoundPlayForPlayer(SoundLink("Event_Prologue_Marine_Grp_Move", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    auto8B3C7558_g = UnitGroup(null, gv_pLAYER_10_PROTOSS_CAPTIVES, RegionFromId(14), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto8B3C7558_u = UnitGroupCount(auto8B3C7558_g, c_unitCountAll);
    for (;; auto8B3C7558_u -= 1) {
        auto8B3C7558_var = UnitGroupUnitFromEnd(auto8B3C7558_g, auto8B3C7558_u);
        if (auto8B3C7558_var == null) { break; }
        UnitCreate(1, "PrisonZealot", 0, gv_pLAYER_10_PROTOSS_CAPTIVES, PointWithOffsetPolar(UnitGetPosition(auto8B3C7558_var), 8.0, 135.0), 315.0);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(auto8B3C7558_var)), c_orderQueueReplace);
    }
    for (autoE28F3394_i = 1; autoE28F3394_i <= autoE28F3394_n; autoE28F3394_i += 1) {
        UnitCreate(1, "Marine", 0, gv_pLAYER_03_MOEBIUS_S02, RegionRandomPoint(RegionFromId(30)), 315.0);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), RandomFixed(5.0, 6.0), 315.0)), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 4), RegionGetCenter(RegionFromId(14))), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    }
    for (auto3AF4712F_i = 1; auto3AF4712F_i <= auto3AF4712F_n; auto3AF4712F_i += 1) {
        UnitCreate(1, "Reaper", 0, gv_pLAYER_03_MOEBIUS_S02, RegionRandomPoint(RegionFromId(30)), 315.0);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), RandomFixed(5.0, 6.0), 315.0)), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 4), RegionGetCenter(RegionFromId(14))), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    }
    for (auto51597160_i = 1; auto51597160_i <= auto51597160_n; auto51597160_i += 1) {
        UnitCreate(1, "Marauder", 0, gv_pLAYER_03_MOEBIUS_S02, RegionRandomPoint(RegionFromId(30)), 315.0);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), RandomFixed(5.0, 6.0), 315.0)), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 4), RegionGetCenter(RegionFromId(14))), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    }
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(240), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(406), 4.0, -1, 10, true);
    SoundPlayForPlayer(SoundLink("MoebiusLabHoldingCageDoorClose", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libA3DDD02B_gf_SendTransmissionCampaign(null, "vpMission_VoidPrologue01|Line00082", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 12.0, 1.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 12.0, 1.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(245), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(246), 4.0, -1, 10, true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(75), false);
    libNtve_gf_ChangeUnitDamage(UnitFromId(75), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitSetPropertyFixed(UnitFromId(75), c_unitPropLife, 1.0);
    UnitGroupIssueOrder(gv_introZergGroup, OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(75)), c_orderQueueReplace);
    UnitGroupIssueOrder(gv_introZergGroup, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(44))), c_orderQueueAddToEnd);
    SoundPlayForPlayer(SoundLink("Prologue_Zerg_Horde_Low_Rumble", 1), c_maxPlayers, PlayerGroupAll(), 90.0, 0.0);
    SoundPlayForPlayer(SoundLink("Prologue_Zerg_Horde_AmbLow", 0), c_maxPlayers, PlayerGroupAll(), 90.0, 0.0);
    SoundPlayForPlayer(SoundLink("Prologue_Zerg_Horde_Quad_Foley", 0), c_maxPlayers, PlayerGroupAll(), 90.0, 0.0);
    libA3DDD02B_gf_SendTransmissionCampaign(null, "vpMission_VoidPrologue01|Line00004", c_transmissionDurationAdd, 0.0, false, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 1.8);
    SoundPlayForPlayer(SoundLink("Prologue_Zerg_Horde_Quad_Aggro", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_ChangeUnitDamage(UnitFromId(75), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    libNtve_gf_CreateModelWithPointFacing("MoebiusLabDoorsWideAirlockWind", PointFromId(1772));
    gv_introAirlockModel = libNtve_gf_ActorLastCreated();
    ActorSend(gv_introAirlockModel, "AnimPlay Spell Stand,Unpowered,Start");
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(247), 4.0, -1, 10, true);
    libA3DDD02B_gf_SendTransmissionCampaign(null, "vpMission_VoidPrologue01|Line00044", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_KillModel(gv_introAirlockModel);
    CinematicFade(false, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 100.0, 1.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 100.0, 1.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1114), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(337), 8.0, -1, 10.0, true);
    libNtve_gf_PauseUnit(gv_introVoidseeker, false);
    UnitSetPropertyFixed(gv_introVoidseeker, c_unitPropMovementSpeed, 4.0);
    CatalogFieldValueSet(c_gameCatalogUnit, "VoidSeeker", "TurningRate", 0, "30");
    UnitIssueOrder(gv_introVoidseeker, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(137)), c_orderQueueReplace);
    SoundPlayForPlayer(SoundLink("Event_Prologue01_VoidSeeker_FlyIn", 0), c_maxPlayers, PlayerGroupAll(), 30.0, 0.0);
    lv_pathIndex = 1;
    for ( ; ( (auto45D9EF9F_ai >= 0 && lv_pathIndex <= auto45D9EF9F_ae) || (auto45D9EF9F_ai < 0 && lv_pathIndex >= auto45D9EF9F_ae) ) ; lv_pathIndex += auto45D9EF9F_ai ) {
        UnitIssueOrder(gv_introVoidseeker, OrderTargetingPoint(AbilityCommand("move", 0), PointFromName(("Void Seeker Path 0" + IntToString(lv_pathIndex)))), c_orderQueueAddToEnd);
    }
    UnitIssueOrder(gv_introVoidseeker, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitFromId(161))), c_orderQueueAddToEnd);
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libA3DDD02B_gf_SendTransmissionCampaign(null, "vpMission_VoidPrologue01|Line00005", c_transmissionDurationAdd, 0.0, false, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(4.5, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(288), 5.0, -1, 10.0, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    SoundPlayForPlayer(SoundLink("Event_Prologue01_VoidSeeker_Land", 0), c_maxPlayers, PlayerGroupAll(), 25.0, 0.0);
    libA3DDD02B_gf_SendTransmissionCampaign(null, "vpMission_VoidPrologue01|Line00006", c_transmissionDurationAdd, 0.0, false, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    auto85BBA5C6_at = 0;
    while (!((DistanceBetweenPoints(UnitGetPosition(gv_introVoidseeker), UnitGetPosition(UnitFromId(161))) <= 2.0)) && auto85BBA5C6_at <= 20.0) {
        Wait(0.25, c_timeGame);
        auto85BBA5C6_at = auto85BBA5C6_at + 0.25;
    }
    libNtve_gf_SendActorMessageToUnit(gv_introVoidseeker, "AnimGroupApply Work Stand,Work,Start Stand,Work,End");
    TransmissionWait(TransmissionLastSent(), 0.0);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup autoF14CB26F_g;
    int autoF14CB26F_u;
    unit autoF14CB26F_var;
    unitgroup autoD31384D2_g;
    int autoD31384D2_u;
    unit autoD31384D2_var;
    unitgroup autoAB68FCCB_g;
    int autoAB68FCCB_u;
    unit autoAB68FCCB_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    if ((gv_cinematicCompleted == true)) {
        UnitRemove(UnitFromId(161));
    }
    else {
        UnitRemove(gv_introVoidseeker);
    }
    autoF14CB26F_g = gv_cinematicTempUnits;
    autoF14CB26F_u = UnitGroupCount(autoF14CB26F_g, c_unitCountAll);
    for (;; autoF14CB26F_u -= 1) {
        autoF14CB26F_var = UnitGroupUnitFromEnd(autoF14CB26F_g, autoF14CB26F_u);
        if (autoF14CB26F_var == null) { break; }
        UnitRemove(autoF14CB26F_var);
    }
    autoD31384D2_g = gv_cinematicHiddenUnits;
    autoD31384D2_u = UnitGroupCount(autoD31384D2_g, c_unitCountAll);
    for (;; autoD31384D2_u -= 1) {
        autoD31384D2_var = UnitGroupUnitFromEnd(autoD31384D2_g, autoD31384D2_u);
        if (autoD31384D2_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoD31384D2_var, true);
    }
    autoAB68FCCB_g = gv_cinematicPausedUnits;
    autoAB68FCCB_u = UnitGroupCount(autoAB68FCCB_g, c_unitCountAll);
    for (;; autoAB68FCCB_u -= 1) {
        autoAB68FCCB_var = UnitGroupUnitFromEnd(autoAB68FCCB_g, autoAB68FCCB_u);
        if (autoAB68FCCB_var == null) { break; }
        libNtve_gf_PauseUnit(autoAB68FCCB_var, false);
    }
    UnitKill(UnitFromId(75));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathingBlocker4x4Diagonal", c_unitCreateIgnorePlacement, 0, PointFromId(462));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathingBlocker4x4Diagonal", c_unitCreateIgnorePlacement, 0, PointFromId(467));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathingBlocker4x4Diagonal", c_unitCreateIgnorePlacement, 0, PointFromId(477));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathingBlocker4x4Diagonal", c_unitCreateIgnorePlacement, 0, PointFromId(527));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathingBlocker4x4Diagonal", c_unitCreateIgnorePlacement, 0, PointFromId(576));
    libNtve_gf_KillModel(gv_introAirlockModel);
    libNtve_gf_StoryMode(PlayerGroupAll(), false);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(2), true, false);
    UnitSetPropertyFixed(UnitFromId(2), c_unitPropEnergyPercent, 0.0);
    UnitSetPropertyFixed(UnitFromId(10), c_unitPropResources, gv_introResources[1]);
    UnitSetPropertyFixed(UnitFromId(9), c_unitPropResources, gv_introResources[2]);
    UnitSetPropertyFixed(UnitFromId(8), c_unitPropResources, gv_introResources[3]);
    UnitSetPropertyFixed(UnitFromId(7), c_unitPropResources, gv_introResources[4]);
    UnitSetPropertyFixed(UnitFromId(6), c_unitPropResources, gv_introResources[5]);
    UnitSetPropertyFixed(UnitFromId(5), c_unitPropResources, gv_introResources[6]);
    UnitSetPropertyFixed(UnitFromId(4), c_unitPropResources, gv_introResources[7]);
    UnitSetPropertyFixed(UnitFromId(3), c_unitPropResources, gv_introResources[8]);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, gv_introResources[9]);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, gv_introResources[10]);
    UnitSetPropertyFixed(UnitFromId(13), c_unitPropResources, gv_introResources[11]);
    TriggerExecute(gt_StartAI, true, false);
    Wait(0.5, c_timeReal);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(307), lv_fadeDuration, -1, 10, true);
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
        libNtve_gf_GlobalCinematicSetting(false);
        gv_inCinematic = false;
        Wait(lv_fadeDuration, c_timeGame);
    }
    else {
        lv_fadeDuration = 1.0;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
        libNtve_gf_GlobalCinematicSetting(false);
        gv_inCinematic = false;
        libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(307)), lv_fadeDuration);
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Q
//--------------------------------------------------------------------------------------------------
bool gt_MidQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_MidSetup, true, true);
    TriggerExecute(gt_MidCinematic, true, true);
    TriggerExecute(gt_MidCinematicEnd, true, true);
    TriggerExecute(gt_MidCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidQ_Init () {
    gt_MidQ = TriggerCreate("gt_MidQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidSetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_rescuedUnits;

    // Automatic Variable Declarations
    unitgroup auto75FBB041_g;
    int auto75FBB041_u;
    unit auto75FBB041_var;
    unitgroup auto5BDE4145_g;
    int auto5BDE4145_u;
    unit auto5BDE4145_var;
    unitgroup auto93F9D5AC_g;
    int auto93F9D5AC_u;
    unit auto93F9D5AC_var;
    unitgroup auto0C3C270E_g;
    int auto0C3C270E_u;
    unit auto0C3C270E_var;

    // Variable Initialization
    lv_rescuedUnits = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    gv_inCinematic = true;
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    CameraSave(gv_pLAYER_01_USER);
    libNtve_gf_StoreUnitSelection(gv_pLAYER_01_USER, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    auto75FBB041_g = UnitGroup(null, gv_pLAYER_02_MOEBIUS_S01, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto75FBB041_u = UnitGroupCount(auto75FBB041_g, c_unitCountAll);
    for (;; auto75FBB041_u -= 1) {
        auto75FBB041_var = UnitGroupUnitFromEnd(auto75FBB041_g, auto75FBB041_u);
        if (auto75FBB041_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto75FBB041_var, false);
        UnitGroupAdd(gv_cinematicHiddenUnits, auto75FBB041_var);
    }
    auto5BDE4145_g = UnitGroup("PathingBlocker4x4Diagonal", c_playerAny, RegionFromId(13), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto5BDE4145_u = UnitGroupCount(auto5BDE4145_g, c_unitCountAll);
    for (;; auto5BDE4145_u -= 1) {
        auto5BDE4145_var = UnitGroupUnitFromEnd(auto5BDE4145_g, auto5BDE4145_u);
        if (auto5BDE4145_var == null) { break; }
        UnitRemove(auto5BDE4145_var);
    }
    UnitGroupIssueOrder(UnitGroup(null, c_playerAny, RegionFromId(36), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    Wait(0.0625, c_timeGame);
    auto93F9D5AC_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto93F9D5AC_u = UnitGroupCount(auto93F9D5AC_g, c_unitCountAll);
    for (;; auto93F9D5AC_u -= 1) {
        auto93F9D5AC_var = UnitGroupUnitFromEnd(auto93F9D5AC_g, auto93F9D5AC_u);
        if (auto93F9D5AC_var == null) { break; }
        if ((libNtve_gf_UnitIsPaused(auto93F9D5AC_var) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, auto93F9D5AC_var);
            libNtve_gf_PauseUnit(auto93F9D5AC_var, true);
        }

    }
    GameDestroyEffects(PointFromId(283), 12.0, 0, "VoidSentryShieldRepair");
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    if ((UnitIsAlive(UnitFromId(1202)) == true)) {
        UnitKill(UnitFromId(1202));
    }

    UnitGroupAddUnitGroup(gv_midZealots, UnitGroup("PrisonZealot", c_playerAny, RegionFromId(13), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    auto0C3C270E_g = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(54), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0C3C270E_u = UnitGroupCount(auto0C3C270E_g, c_unitCountAll);
    for (;; auto0C3C270E_u -= 1) {
        auto0C3C270E_var = UnitGroupUnitFromEnd(auto0C3C270E_g, auto0C3C270E_u);
        if (auto0C3C270E_var == null) { break; }
        UnitSetPosition(auto0C3C270E_var, RegionRandomPoint(RegionFromId(55)), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidSetup_Init () {
    gt_MidSetup = TriggerCreate("gt_MidSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoA67F404E_g;
    int autoA67F404E_u;
    unit autoA67F404E_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1174), 0.0, -1, 10, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "MidMusic", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    gv_midSpeaker = UnitGroupUnit(UnitGroup(null, gv_pLAYER_10_PROTOSS_CAPTIVES, RegionFromId(8), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), 1);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1175), 3.0, -1, 10, true);
    gv_midUnitsRescued = true;
    autoA67F404E_g = gv_midZealots;
    autoA67F404E_u = UnitGroupCount(autoA67F404E_g, c_unitCountAll);
    for (;; autoA67F404E_u -= 1) {
        autoA67F404E_var = UnitGroupUnitFromEnd(autoA67F404E_g, autoA67F404E_u);
        if (autoA67F404E_var == null) { break; }
        libNtve_gf_PauseUnit(autoA67F404E_var, false);
        libNtve_gf_MakeUnitInvulnerable(autoA67F404E_var, false);
        libNtve_gf_RescueUnit(autoA67F404E_var, gv_pLAYER_01_USER, true);
    }
    UnitGroupIssueOrder(gv_midZealots, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(283)), c_orderQueueReplace);
    libA3DDD02B_gf_SendTransmissionCampaign(gv_midSpeaker, "vpMission_VoidPrologue01|Line00072", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libA3DDD02B_gf_SendTransmissionCampaign(null, "vpMission_VoidPrologue01|Line00073", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1176), (SoundLengthSync(SoundLink(ConversationDataGetSound("vpMission_VoidPrologue01|Line00074", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("vpMission_VoidPrologue01|Line00075", true), c_soundIndexAny))), -1, 10, true);
    libA3DDD02B_gf_SendTransmissionCampaign(gv_midSpeaker, "vpMission_VoidPrologue01|Line00074", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libA3DDD02B_gf_SendTransmissionCampaign(null, "vpMission_VoidPrologue01|Line00075", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libA3DDD02B_gf_SendTransmissionCampaign(gv_midSpeaker, "vpMission_VoidPrologue01|Line00076", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libA3DDD02B_gf_SendTransmissionCampaign(null, "vpMission_VoidPrologue01|Line00077", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematic_Init () {
    gt_MidCinematic = TriggerCreate("gt_MidCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematicEnd_Init () {
    gt_MidCinematicEnd = TriggerCreate("gt_MidCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup autoA7D6FB42_g;
    int autoA7D6FB42_u;
    unit autoA7D6FB42_var;
    unitgroup auto9062B060_g;
    int auto9062B060_u;
    unit auto9062B060_var;
    unitgroup autoAE643B2E_g;
    int autoAE643B2E_u;
    unit autoAE643B2E_var;
    unitgroup autoD588310C_g;
    int autoD588310C_u;
    unit autoD588310C_var;
    unitgroup autoD77231FA_g;
    int autoD77231FA_u;
    unit autoD77231FA_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoA7D6FB42_g = gv_cinematicTempUnits;
    autoA7D6FB42_u = UnitGroupCount(autoA7D6FB42_g, c_unitCountAll);
    for (;; autoA7D6FB42_u -= 1) {
        autoA7D6FB42_var = UnitGroupUnitFromEnd(autoA7D6FB42_g, autoA7D6FB42_u);
        if (autoA7D6FB42_var == null) { break; }
        UnitRemove(autoA7D6FB42_var);
    }
    auto9062B060_g = gv_cinematicHiddenUnits;
    auto9062B060_u = UnitGroupCount(auto9062B060_g, c_unitCountAll);
    for (;; auto9062B060_u -= 1) {
        auto9062B060_var = UnitGroupUnitFromEnd(auto9062B060_g, auto9062B060_u);
        if (auto9062B060_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto9062B060_var, true);
    }
    autoAE643B2E_g = gv_cinematicPausedUnits;
    autoAE643B2E_u = UnitGroupCount(autoAE643B2E_g, c_unitCountAll);
    for (;; autoAE643B2E_u -= 1) {
        autoAE643B2E_var = UnitGroupUnitFromEnd(autoAE643B2E_g, autoAE643B2E_u);
        if (autoAE643B2E_var == null) { break; }
        libNtve_gf_PauseUnit(autoAE643B2E_var, false);
    }
    if ((gv_midUnitsRescued == false)) {
        autoD588310C_g = gv_midZealots;
        autoD588310C_u = UnitGroupCount(autoD588310C_g, c_unitCountAll);
        for (;; autoD588310C_u -= 1) {
            autoD588310C_var = UnitGroupUnitFromEnd(autoD588310C_g, autoD588310C_u);
            if (autoD588310C_var == null) { break; }
            libNtve_gf_PauseUnit(autoD588310C_var, false);
            libNtve_gf_MakeUnitInvulnerable(autoD588310C_var, false);
            libNtve_gf_RescueUnit(autoD588310C_var, gv_pLAYER_01_USER, true);
        }
        UnitGroupIssueOrder(gv_midZealots, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(283)), c_orderQueueReplace);
    }

    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    autoD77231FA_g = UnitGroup("PathingBlocker4x4Diagonal", c_playerAny, RegionFromId(50), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD77231FA_u = UnitGroupCount(autoD77231FA_g, c_unitCountAll);
    for (;; autoD77231FA_u -= 1) {
        autoD77231FA_var = UnitGroupUnitFromEnd(autoD77231FA_g, autoD77231FA_u);
        if (autoD77231FA_var == null) { break; }
        UnitRemove(autoD77231FA_var);
    }
    libNtve_gf_RestoreUnitSelection(gv_pLAYER_01_USER);
    CameraRestore(gv_pLAYER_01_USER, 0.0, -1, 10);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    gv_inCinematic = false;
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCleanup_Init () {
    gt_MidCleanup = TriggerCreate("gt_MidCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto663DD8A1_g;
    int auto663DD8A1_u;
    unit auto663DD8A1_var;
    unitgroup autoA5ABD649_g;
    int autoA5ABD649_u;
    unit autoA5ABD649_var;
    unitgroup auto54CC48B2_g;
    int auto54CC48B2_u;
    unit auto54CC48B2_var;
    unitgroup auto91ECEA2C_g;
    int auto91ECEA2C_u;
    unit auto91ECEA2C_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    gv_inCinematic = true;
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UnitClearSelection(gv_pLAYER_01_USER);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    if ((UnitIsAlive(UnitFromId(158)) == true)) {
        UnitKill(UnitFromId(158));
    }

    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    auto663DD8A1_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto663DD8A1_u = UnitGroupCount(auto663DD8A1_g, c_unitCountAll);
    for (;; auto663DD8A1_u -= 1) {
        auto663DD8A1_var = UnitGroupUnitFromEnd(auto663DD8A1_g, auto663DD8A1_u);
        if (auto663DD8A1_var == null) { break; }
        if ((libNtve_gf_UnitIsPaused(auto663DD8A1_var) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, auto663DD8A1_var);
            libNtve_gf_PauseUnit(auto663DD8A1_var, true);
        }

    }
    AITimePause(true);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    UnitGroupRemove(gv_cinematicHiddenUnits, UnitFromId(158));
    UnitGroupRemove(gv_cinematicHiddenUnits, UnitFromId(1223));
    UnitGroupRemove(gv_cinematicHiddenUnits, UnitFromId(1221));
    autoA5ABD649_g = UnitGroup(null, gv_pLAYER_10_PROTOSS_CAPTIVES, RegionFromId(15), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoA5ABD649_u = UnitGroupCount(autoA5ABD649_g, c_unitCountAll);
    for (;; autoA5ABD649_u -= 1) {
        autoA5ABD649_var = UnitGroupUnitFromEnd(autoA5ABD649_g, autoA5ABD649_u);
        if (autoA5ABD649_var == null) { break; }
        UnitGroupRemove(gv_cinematicHiddenUnits, autoA5ABD649_var);
        UnitGroupAdd(gv_victoryRescuedProtoss, autoA5ABD649_var);
        libNtve_gf_PauseUnit(autoA5ABD649_var, false);
    }
    auto54CC48B2_g = gv_cinematicHiddenUnits;
    auto54CC48B2_u = UnitGroupCount(auto54CC48B2_g, c_unitCountAll);
    for (;; auto54CC48B2_u -= 1) {
        auto54CC48B2_var = UnitGroupUnitFromEnd(auto54CC48B2_g, auto54CC48B2_u);
        if (auto54CC48B2_var == null) { break; }
        if ((libNtve_gf_UnitInRegion(auto54CC48B2_var, RegionFromId(34)) == true)) {
            UnitRemove(auto54CC48B2_var);
        }
        else {
            libNtve_gf_ShowHideUnit(auto54CC48B2_var, false);
        }
    }
    UnitCreate(1, "PrologueZeratul", 0, gv_pLAYER_01_USER, PointFromId(1573), 135.0);
    gv_victoryZeratul = UnitLastCreated();
    UnitGroupAdd(gv_victoryZeratulGroup, gv_victoryZeratul);
    UnitBehaviorAdd(gv_victoryZeratul, "SuppressCloak", gv_victoryZeratul, 1);
    UnitSetState(gv_victoryZeratul, c_unitStateFidget, false);
    UnitCreate(1, "Talis", 0, gv_pLAYER_01_USER, PointFromId(1712), 135.0);
    gv_victoryTalis = UnitLastCreated();
    UnitGroupAdd(gv_victoryZeratulGroup, gv_victoryTalis);
    UnitSetState(gv_victoryTalis, c_unitStateFidget, false);
    UnitCreate(1, "Stalker", 0, gv_pLAYER_01_USER, PointFromId(1574), 135.0);
    UnitGroupAdd(gv_victoryZeratulGroup, UnitLastCreated());
    UnitCreate(1, "Stalker", 0, gv_pLAYER_01_USER, PointFromId(1575), 135.0);
    UnitGroupAdd(gv_victoryZeratulGroup, UnitLastCreated());
    UnitCreate(1, "Stalker", 0, gv_pLAYER_01_USER, PointFromId(1576), 135.0);
    UnitGroupAdd(gv_victoryZeratulGroup, UnitLastCreated());
    UnitCreate(1, "HighTemplar", 0, gv_pLAYER_01_USER, PointFromId(1577), 135.0);
    UnitGroupAdd(gv_victoryZeratulGroup, UnitLastCreated());
    UnitCreate(1, "HighTemplar", 0, gv_pLAYER_01_USER, PointFromId(1578), 135.0);
    UnitGroupAdd(gv_victoryZeratulGroup, UnitLastCreated());
    UnitCreate(1, "DarkTemplar", 0, gv_pLAYER_01_USER, PointFromId(1579), 135.0);
    UnitGroupAdd(gv_victoryZeratulGroup, UnitLastCreated());
    UnitBehaviorAdd(UnitLastCreated(), "SuppressCloak", UnitLastCreated(), 1);
    UnitCreate(1, "DarkTemplar", 0, gv_pLAYER_01_USER, PointFromId(1580), 135.0);
    UnitGroupAdd(gv_victoryZeratulGroup, UnitLastCreated());
    UnitBehaviorAdd(UnitLastCreated(), "SuppressCloak", UnitLastCreated(), 1);
    auto91ECEA2C_g = gv_victoryZeratulGroup;
    auto91ECEA2C_u = UnitGroupCount(auto91ECEA2C_g, c_unitCountAll);
    for (;; auto91ECEA2C_u -= 1) {
        auto91ECEA2C_var = UnitGroupUnitFromEnd(auto91ECEA2C_g, auto91ECEA2C_u);
        if (auto91ECEA2C_var == null) { break; }
        UnitIssueOrder(auto91ECEA2C_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        libHots_gf_StorePointForUnit(auto91ECEA2C_var, 1, UnitGetPosition(auto91ECEA2C_var));
        UnitSetPosition(auto91ECEA2C_var, PointWithOffsetPolar(UnitGetPosition(auto91ECEA2C_var), -5.0, UnitGetFacing(auto91ECEA2C_var)), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_victorySpeaker;

    // Automatic Variable Declarations
    unitgroup autoC0435785_g;
    int autoC0435785_u;
    unit autoC0435785_var;
    unitgroup autoF7D49E75_g;
    int autoF7D49E75_u;
    unit autoF7D49E75_var;
    unitgroup auto0AC1DBD6_g;
    int auto0AC1DBD6_u;
    unit auto0AC1DBD6_var;
    unitgroup autoEC46C812_g;
    int autoEC46C812_u;
    unit autoEC46C812_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(177), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1108), 5.0, -1, 10, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "VictoryMusic", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    ActorSend(ActorFromDoodad(DoodadFromId(2098)), "AnimSetTime Stand");
    ActorSend(ActorFromDoodad(DoodadFromId(2098)), "AnimSetPaused Stand");
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    autoC0435785_g = gv_victoryZeratulGroup;
    autoC0435785_u = UnitGroupCount(autoC0435785_g, c_unitCountAll);
    for (;; autoC0435785_u -= 1) {
        autoC0435785_var = UnitGroupUnitFromEnd(autoC0435785_g, autoC0435785_u);
        if (autoC0435785_var == null) { break; }
        UnitIssueOrder(autoC0435785_var, OrderTargetingPoint(AbilityCommand("move", 0), libHots_gf_PointStoredForUnit(autoC0435785_var, 1)), c_orderQueueReplace);
        UnitIssueOrder(autoC0435785_var, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    }
    autoF7D49E75_g = gv_victoryRescuedProtoss;
    autoF7D49E75_u = UnitGroupCount(autoF7D49E75_g, c_unitCountAll);
    for (;; autoF7D49E75_u -= 1) {
        autoF7D49E75_var = UnitGroupUnitFromEnd(autoF7D49E75_g, autoF7D49E75_u);
        if (autoF7D49E75_var == null) { break; }
        UnitIssueOrder(autoF7D49E75_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(autoF7D49E75_var), 5.5, UnitGetFacing(autoF7D49E75_var))), c_orderQueueReplace);
        UnitIssueOrder(autoF7D49E75_var, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    }
    lv_victorySpeaker = UnitGroupClosestToPoint(gv_victoryRescuedProtoss, UnitGetPosition(gv_victoryZeratul));
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 50.0, 1.0);
    libA3DDD02B_gf_SendTransmissionCampaign(UnitFromId(281), "vpMission_VoidPrologue01|Line00038", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1110), (SoundLengthSync(SoundLink(ConversationDataGetSound("vpMission_VoidPrologue01|Line00078", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("vpMission_VoidPrologue01|Line00083", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("vpMission_VoidPrologue01|Line00084", true), c_soundIndexAny)) - 2), -1, 10, true);
    libA3DDD02B_gf_SendTransmissionCampaign(gv_victoryTalis, "vpMission_VoidPrologue01|Line00078", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libA3DDD02B_gf_SendTransmissionCampaign(gv_victoryZeratul, "vpMission_VoidPrologue01|Line00083", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libA3DDD02B_gf_SendTransmissionCampaign(UnitFromId(281), "vpMission_VoidPrologue01|Line00084", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2097), 4.0, -1, 10, true);
    libA3DDD02B_gf_SendTransmissionCampaign(gv_victoryZeratul, "vpMission_VoidPrologue01|Line00071", c_transmissionDurationAdd, 0.0, false, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    UnitIssueOrder(gv_victoryZeratul, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2095)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    auto0AC1DBD6_g = gv_victoryZeratulGroup;
    auto0AC1DBD6_u = UnitGroupCount(auto0AC1DBD6_g, c_unitCountAll);
    for (;; auto0AC1DBD6_u -= 1) {
        auto0AC1DBD6_var = UnitGroupUnitFromEnd(auto0AC1DBD6_g, auto0AC1DBD6_u);
        if (auto0AC1DBD6_var == null) { break; }
        if ((auto0AC1DBD6_var != gv_victoryZeratul)) {
            UnitIssueOrder(auto0AC1DBD6_var, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(2095)), c_orderQueueReplace);
            Wait(0.1, c_timeGame);
        }

    }
    autoEC46C812_g = gv_victoryRescuedProtoss;
    autoEC46C812_u = UnitGroupCount(autoEC46C812_g, c_unitCountAll);
    for (;; autoEC46C812_u -= 1) {
        autoEC46C812_var = UnitGroupUnitFromEnd(autoEC46C812_g, autoEC46C812_u);
        if (autoEC46C812_var == null) { break; }
        UnitIssueOrder(autoEC46C812_var, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(2095)), c_orderQueueReplace);
        Wait(0.1, c_timeGame);
    }
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_victoryZeratul), c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.833, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_victoryZeratul), c_animNameDefault, "Stand Work End", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    SoundPlayForPlayer(SoundLink("Event_Prologue01_Zeratol_ConsoleInteractUI", -1), c_maxPlayers, PlayerGroupAll(), 80.0, 0.0);
    libNtve_gf_CreateModelAtPoint("MoebiusLabHoloPlanetDisplay", PointFromId(2148));
    gv_victoryHoloPlanetDisplayModel = libNtve_gf_ActorLastCreated();
    ActorSend(gv_victoryHoloPlanetDisplayModel, "AnimGroupApply Work Stand,Work,Start Stand,Work,End");
    ActorSend(gv_victoryHoloPlanetDisplayModel, "AnimPlay GLstand GLstand PlayForever");
    Wait(1.0, c_timeGame);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_victoryZeratul), c_animNameDefault);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1582), (SoundLengthSync(SoundLink(ConversationDataGetSound("vpMission_VoidPrologue01|Line00091", true), c_soundIndexAny))), -1, 10, true);
    libA3DDD02B_gf_SendTransmissionCampaign(gv_victoryZeratul, "vpMission_VoidPrologue01|Line00091", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1584), 3.0, -1, 10, true);
    libA3DDD02B_gf_SendTransmissionCampaign(gv_victoryTalis, "vpMission_VoidPrologue01|Line00080", c_transmissionDurationAdd, 0.0, false, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    UnitIssueOrder(gv_victoryTalis, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2096)), c_orderQueueReplace);
    UnitIssueOrder(gv_victoryTalis, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(2095)), c_orderQueueAddToEnd);
    Wait(0.5, c_timeGame);
    UnitIssueOrder(gv_victoryZeratul, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(2096)), c_orderQueueReplace);
    TransmissionWait(TransmissionLastSent(), 0.0);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(false);
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init01aKerriganTechnology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04MusicSound_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_UnitTrainedOrConstructed_Init();
    gt_GatewayWarpgateMorph_Init();
    gt_StartGame_Init();
    gt_KerriganIntroQ_Init();
    gt_PlayerEntersFirstDoorOpen_Init();
    gt_SecondMoebiusGroupMarineTauntQ_Init();
    gt_PlayerEntersDoorAmbushAreaQ_Init();
    gt_MoebiusReveal01ClearedDoorAmbush_Init();
    gt_BridgeGeneratorDiscovered_Init();
    gt_BridgeGeneratorAttacked_Init();
    gt_BridgeGeneratorDiesQ_Init();
    gt_UnitEntersScientistsRun01_Init();
    gt_UnitEntersScientistsRun02_Init();
    gt_UnitEntersHybridChamberLargeExplode01_Init();
    gt_UnitEntersHybridChamberLargeExplode02_Init();
    gt_UnitEntersMechAmbush_Init();
    gt_UnitEntersLastStretchDiscoveredQ_Init();
    gt_UnitEntersHerculesFlyAway_Init();
    gt_HybridStartsAttackingQ_Init();
    gt_RevealObjectiveLocation01Q_Init();
    gt_UnitKillsHoldingPen01_Init();
    gt_RevealObjectiveLocation02Q_Init();
    gt_UnitKillsHoldingPen02Q_Init();
    gt_RevealObjectiveLocation03_Init();
    gt_PlayerSeesDoorNearHoldingPen02_Init();
    gt_UnitEntersZergBaseQ_Init();
    gt_PlayerKillsZergForceQ_Init();
    gt_PlayerFindsBonusObjective1_Init();
    gt_PlayerFindsBonusObjective2_Init();
    gt_CreateBonusObjectiveQ_Init();
    gt_BO01DoorOpenVignette_Init();
    gt_ReclaimPylon1Q_Init();
    gt_ReclaimPylon2Q_Init();
    gt_DestroyPylon1Reticle_Init();
    gt_DestroyPylon2Reticle_Init();
    gt_ReclaimPylon1WarpInReinforcements_Init();
    gt_ReclaimPylon2WarpInReinforcements_Init();
    gt_RescueSuperWarpGateTrainedUnits_Init();
    gt_StartAI_Init();
    gt_AIUpgradesCasualNormal_Init();
    gt_AIUpgradesHardBrutal_Init();
    gt_KerriganController_Init();
    gt_KerriganWaveSent_Init();
    gt_TransmissionZergWaveGatherQ_Init();
    gt_TransmissionZergWaveSendQ_Init();
    gt_CreepTumorConstructed_Init();
    gt_DoorsAttacked_Init();
    gt_Kerrigan05WaveController_Init();
    gt_KerriganInitialWave_Init();
    gt_KerriganInitialWaveGatheringQ_Init();
    gt_Kerrigan05Wave_Init();
    gt_Kerrigan05WaveGathering_Init();
    gt_Kerrigan05StopWave_Init();
    gt_Kerrigan05SetupForwardBase_Init();
    gt_Kerrigan06WaveController_Init();
    gt_Kerrigan06Wave_Init();
    gt_Kerrigan06WaveGathering_Init();
    gt_Kerrigan06StopWave_Init();
    gt_Kerrigan06SetupForwardBase_Init();
    gt_Kerrigan07WaveController_Init();
    gt_Kerrigan07InitialWave_Init();
    gt_Kerrigan07RevealAndWarnFinalBaseTransmissionQ_Init();
    gt_Kerrigan07Wave_Init();
    gt_Kerrigan07WaveGathering_Init();
    gt_MoebiusCorpsAttackWarning01Q_Init();
    gt_MoebiusHerculesWave01BrutalOnly_Init();
    gt_MoebiusHerculesWave02BrutalOnly_Init();
    gt_MoebiusCorpsAttackWarning02Q_Init();
    gt_DefeatBaseDead_Init();
    gt_DefeatStationReactorDestroyed_Init();
    gt_VictoryPrimaryObjectiveCompleted_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_TipMissionHelpQ_Init();
    gt_StatUnitDiesVarious_Init();
    gt_AchievementZergUnitsKilled_Init();
    gt_AchievementWarpingTerranKilledNormal_Init();
    gt__10thAnniversaryAchievementDestroyallZergstructuresbeforefreeingallcaptiveProtoss_Init();
    gt_ObjectiveFreeCaptiveProtoss01Create_Init();
    gt_ObjectiveFreeCaptiveProtoss01Complete_Init();
    gt_ObjectiveFreeCaptiveProtoss01Failed_Init();
    gt_ObjectiveFreeCaptiveProtoss02Create_Init();
    gt_ObjectiveFreeCaptiveProtoss02Complete_Init();
    gt_ObjectiveFreeCaptiveProtoss02Failed_Init();
    gt_ObjectiveFreeCaptiveProtoss03Create_Init();
    gt_ObjectiveFreeCaptiveProtoss03Complete_Init();
    gt_ObjectiveFreeCaptiveProtoss03Failed_Init();
    gt_ObjectiveStationReactorMustSurviveCreate_Init();
    gt_ObjectiveStationReactorMustSurviveComplete_Init();
    gt_ObjectiveStationReactorMustSurviveFailed_Init();
    gt_ObjectivePylonContainmentUnitsCreate_Init();
    gt_ObjectivePylonContainmentUnitsUpdate_Init();
    gt_ObjectivePylonContainmentUnitsCompleteQ_Init();
    gt_ObjectivePylonContainmentUnitsFailed_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_MidQ_Init();
    gt_MidSetup_Init();
    gt_MidCinematic_Init();
    gt_MidCinematicEnd_Init();
    gt_MidCleanup_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}
