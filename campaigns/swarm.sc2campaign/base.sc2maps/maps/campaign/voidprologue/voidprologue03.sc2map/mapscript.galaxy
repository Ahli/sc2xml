//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Evil Awoken
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"
include "LibA3DDD02B"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libHots_InitLib();
    libA3DDD02B_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_TALDARIM = 2;
const int gv_pLAYER_03_AMON = 3;
const int gv_pLAYER_07_TALIS = 7;

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_PRESETHybridType_Destroyer = 0;
const int ge_PRESETHybridType_Reaver = 1;
const int ge_PRESETHybridType_Dominator = 2;
const int ge_PRESETHybridType_Behemoth = 3;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
bool gv_gameOver;
bool gv_inCinematic;
string gv_mapMusicTrack;
unit gv_zeratul;
unit gv_talis;
int gv_currentSection;
int[16] gv_attackUnitCountdowns;
unit[16] gv_attackedUnits;
unitgroup gv_generalAttackers;
unitgroup gv_amonAttackers;
unitgroup gv_s1_TeachBlink_Forcefields;
actor gv_s1_TeachBlink_Reticule;
int gv_s1_TeachBlink_TextTag;
unitgroup gv_s1_TeachBlink_Enemies;
unitgroup gv_s1_TeachShadowStrike_Enemies;
unit gv_s1_PatrollingObserver01;
unit gv_s1_PatrollingObserver02;
unit gv_s1_PatrollingObserver03;
unitgroup gv_s1_ObserverRoomWarpPrism_Enemies;
unit gv_malash;
unit gv_malashDummyUnit;
unit gv_s2_GauntletWarpPrism01;
unit gv_s2_GauntletWarpPrism02;
unit gv_s2_GauntletWarpPrism03;
unit gv_s2_GauntletWarpPrism04;
unit gv_s2_GauntletWarpPrism05;
unitgroup gv_s2_GauntletUnitGroup;
unitgroup gv_s2_GauntletHybridGroup;
int gv_s2_GauntletUnitGroup_MaxCount;
unitgroup gv_s2_GauntletWaveGroup01;
unitgroup gv_s2_GauntletWaveGroup02;
unitgroup gv_s2_GauntletWaveGroup03;
unit gv_s2_VoidCatalyst;
int gv_s2_VoidCatalystPing;
int gv_s3EscapeDialog;
int gv_s3EscapeDialogTitle;
int gv_s3EscapeDialogTimeRemaining;
int gv_s3EscapeRoutePing;
timer gv_s3EscapeTimer;
fixed gv_s3EscapeTimerDuration;
unitgroup gv_s3PlayerStalkers;
revealer gv_s3VortexRevealer;
unit gv_s3ResidualVortex;
unit gv_s3ResidualVortexForwardUnit01;
unit gv_s3ResidualVortexForwardUnit02;
unit gv_s3ResidualVortexForwardUnit03;
unitgroup gv_s3ShadowIslandUnits;
int gv_s3ShadowIslandUnitCap;
unitgroup gv_s3FinalStretchEnemyGroupCombined;
unitgroup gv_s3FinalStretchEnemyGroup1;
unitgroup gv_s3FinalStretchEnemyGroup2;
unitgroup gv_s3FinalStretchTalisGroupCombined;
unitgroup gv_s3FinalStretchTalisGroup1;
unitgroup gv_s3FinalStretchTalisGroup2;
int gv_s3FinalStretchEscalation;
unit gv_particleCannon01;
unit gv_particleCannon02;
unit gv_particleCannon03;
int gv_particleCannonPing01;
int gv_particleCannonPing02;
int gv_particleCannonPing03;
int gv_particleCannonsDestroyed;
int gv_victory_ShadowStrikeKills;
int gv_unitsLostDuringInfiltration;
bool gv_shadowStrikeAchievementAwarded;
int gv_objective_InvestigateTemple;
int gv_objective_DestroyCatalyst;
int gv_objective_Escape;
int gv_objective_ZeratulMustSurvive;
int gv_objectiveDestroyParticleCannons;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicPausedUnits;
unitgroup gv_cinematicTempUnits;
bool gv_cinematicCompleted;
bool gv_midDoor1Open;
bool gv_midDoor2Open;
sound gv_voidCatalystLoop;
sound gv_introBridgeLoop;
sound gv_channelStartSound;
sound gv_amonStinger;
sound gv_amonRoar;
bool gv_midAmonSoundtrackCompleted;
unitgroup gv_midTempPlayerUnits;
bool gv_midUnitsZapped;

void InitGlobals () {
    gv_talis = UnitFromId(922);
    gv_currentSection = 1;
    gv_generalAttackers = UnitGroupEmpty();
    gv_amonAttackers = UnitGroupEmpty();
    gv_s1_TeachBlink_Forcefields = UnitGroupEmpty();
    gv_s1_TeachBlink_TextTag = c_textTagNone;
    gv_s1_TeachBlink_Enemies = UnitGroupEmpty();
    gv_s1_TeachShadowStrike_Enemies = UnitGroupEmpty();
    gv_s1_PatrollingObserver01 = UnitFromId(576);
    gv_s1_PatrollingObserver02 = UnitFromId(590);
    gv_s1_PatrollingObserver03 = UnitFromId(591);
    gv_s1_ObserverRoomWarpPrism_Enemies = UnitGroupEmpty();
    gv_malash = UnitFromId(311);
    gv_s2_GauntletUnitGroup = UnitGroupEmpty();
    gv_s2_GauntletHybridGroup = UnitGroupEmpty();
    gv_s2_GauntletUnitGroup_MaxCount = libA3DDD02B_gf_DifficultyValuePrologueInteger(6, 6, 6, 6);
    gv_s2_GauntletWaveGroup01 = UnitGroupEmpty();
    gv_s2_GauntletWaveGroup02 = UnitGroupEmpty();
    gv_s2_GauntletWaveGroup03 = UnitGroupEmpty();
    gv_s2_VoidCatalyst = UnitFromId(283);
    gv_s2_VoidCatalystPing = c_invalidPingId;
    gv_s3EscapeDialog = c_invalidDialogId;
    gv_s3EscapeDialogTitle = c_invalidDialogControlId;
    gv_s3EscapeDialogTimeRemaining = c_invalidDialogControlId;
    gv_s3EscapeRoutePing = c_invalidPingId;
    gv_s3EscapeTimer = TimerCreate();
    gv_s3PlayerStalkers = UnitGroupEmpty();
    gv_s3ShadowIslandUnits = UnitGroupEmpty();
    gv_s3FinalStretchEnemyGroupCombined = UnitGroupEmpty();
    gv_s3FinalStretchEnemyGroup1 = UnitGroupEmpty();
    gv_s3FinalStretchEnemyGroup2 = UnitGroupEmpty();
    gv_s3FinalStretchTalisGroupCombined = UnitGroupEmpty();
    gv_s3FinalStretchTalisGroup1 = UnitGroupEmpty();
    gv_s3FinalStretchTalisGroup2 = UnitGroupEmpty();
    gv_particleCannon01 = UnitFromId(830);
    gv_particleCannon02 = UnitFromId(833);
    gv_particleCannon03 = UnitFromId(851);
    gv_particleCannonPing01 = c_invalidPingId;
    gv_particleCannonPing02 = c_invalidPingId;
    gv_particleCannonPing03 = c_invalidPingId;
    gv_objective_InvestigateTemple = c_invalidObjectiveId;
    gv_objective_DestroyCatalyst = c_invalidObjectiveId;
    gv_objective_Escape = c_invalidObjectiveId;
    gv_objective_ZeratulMustSurvive = c_invalidObjectiveId;
    gv_objectiveDestroyParticleCannons = c_invalidObjectiveId;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_midTempPlayerUnits = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_ObserverAI (unit lp_observer);
void gf_CreateEarthquake (string lp_amplitude, string lp_frequency);
void gf_FakeBlinkUnittoPoint (unit lp_unit, point lp_point);
void gf_CreateHybridImageEffectatPoint (point lp_spawnPoint);
void gf_S2MainChamberWarpInUnitsAtWarpPrism (string lp_unitType, int lp_count, unit lp_warpPrism);
void gf_S2MainChamberWarpInHybrids (int lp_hybridType, point lp_spawnPoint);
void gf_S2MainChamberHybridBehemothAI (unit lp_hybrid);
void gf_ResidualVortexSpawnUnitAtPoint (string lp_unitType, unit lp_castingUnit, point lp_targetPoint);
void gf_DropInHybridReaveratPoint (point lp_spawnPoint);
void gf_WarpInHybridDestroyeratPoint (point lp_spawnPoint);
void gf_BOFlyAwayWarpPrism (unit lp_warpPrism, region lp_despawnRegion);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04MusicSound;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_DEBUGS2;
trigger gt_DEBUGS3;
trigger gt_StartAI;
trigger gt_GeneralAttackAI;
trigger gt_TaldarimResources;
trigger gt_ShowUnitStatusBarOnDamage;
trigger gt_HideDamagedUnitStatusBar;
trigger gt_S1Earthquake01;
trigger gt_S1Earthquake02;
trigger gt_S1Earthquake03;
trigger gt_S1Earthquake04;
trigger gt_S2Earthquake05;
trigger gt_S2Earthquake06;
trigger gt_StartGameSection1Q;
trigger gt_S1Cleanup;
trigger gt_S1TeachBlinkInitialAttack;
trigger gt_S1TeachBlinkInitialAttackQ;
trigger gt_S1TeachBlinkForcefieldsQ;
trigger gt_S1TeachBlinkWarpPrism;
trigger gt_S1TeachBlinkWarpPrismConstruction;
trigger gt_S1FrontHallDoor1Q;
trigger gt_S1TeachVoidArmorQ;
trigger gt_S1TeachVoidArmorHighlightCancel;
trigger gt_S1TeachShadowStrikeQ;
trigger gt_S1TeachShadowStrikeImmortalDies;
trigger gt_S1TeachShadowStrikeWarpPrism;
trigger gt_S1TeachShadowStrikeWarpPrismConstruction;
trigger gt_S1FrontHallShadowStrikeHighlightCancel;
trigger gt_S1FindFirstHybridQ;
trigger gt_S1ObserverRoomPrep;
trigger gt_S1ObserverRoomTransmissionQ;
trigger gt_S1ObserverRoomEnemyGroup01;
trigger gt_S1ObserverRoomEnemyGroup02;
trigger gt_S1ObserverRoomEnemyGroup03;
trigger gt_S1ObserverRoomWarpAttack01;
trigger gt_S1ObserverRoomWarpAttack02;
trigger gt_S1ObserverRoomWarpPrismConstruction;
trigger gt_S1AmbushOutsideAntechamberRoomQ;
trigger gt_S1ZeratulReachesFirstBeacon;
trigger gt_StartGameSection2Q;
trigger gt_S2Cleanup;
trigger gt_S2FirstHighTemplarGroup;
trigger gt_S2EnemyGroup01;
trigger gt_S2EnemyGroup01TransmissionQ;
trigger gt_S2EnemyGroup02;
trigger gt_S2EnemyGroup02TransmissionQ;
trigger gt_S2EnemyGroup02PsiStorm;
trigger gt_S2EnemyGroup03;
trigger gt_S2EnemyGroup03TransmissionQ;
trigger gt_S2MidCheckpoint;
trigger gt_S2EnemyGroup04;
trigger gt_S2AmonQ;
trigger gt_S2GauntletPrep;
trigger gt_S2GauntletStartQ;
trigger gt_S2GauntletWaveUnits01;
trigger gt_S2GauntletWaveUnits02;
trigger gt_S2GauntletWaveUnits03;
trigger gt_S2GauntletWarpPrisms01;
trigger gt_S2GauntletWarpPrisms02;
trigger gt_S2GauntletHybridsAndMalashWarpsOut;
trigger gt_S2GauntletMalashWarpsOutTransmissionQ;
trigger gt_S2GauntletUnitWarpsIn;
trigger gt_S2VoidCatalystDiesQ;
trigger gt_S2VoidCrystalExplosions;
trigger gt_StartGameSection3Q;
trigger gt_S3EscapeTimer;
trigger gt_S3AmbientTurmoil;
trigger gt_S3ShadowSpawnComplete;
trigger gt_S3ShadowSpawns01;
trigger gt_S3ShadowSpawns02AndEnemyStalkers;
trigger gt_S3HybridSpawn1;
trigger gt_S3ShadowSpawns03;
trigger gt_S3PrepUnitsTryingToEscape;
trigger gt_S3UnitsTryingToEscape;
trigger gt_S3EscapeRouteBlocked1Q;
trigger gt_S3ShadowSpawns04;
trigger gt_S3AmonTaunt1Q;
trigger gt_S3HybridSpawn2;
trigger gt_S3HybridSpawn3;
trigger gt_S3ShadowIsland;
trigger gt_S3EscapeRouteClearQ;
trigger gt_S3HybridShadowSpawn1;
trigger gt_S3HybridShadowSpawn2;
trigger gt_S3WarpPrism;
trigger gt_S3WarpPrismHurryQ;
trigger gt_S3FinalStretch;
trigger gt_S3FinalStretchTalisSacrificeQ;
trigger gt_S3FinalStretchEnemyAI;
trigger gt_S3FinalStretchTalisAI;
trigger gt_S3FinalStretchEnemySpawns1;
trigger gt_S3FinalStretchEnemySpawns2;
trigger gt_S3FinalStretchTalisSpawns1;
trigger gt_S3FinalStretchTalisSpawns2;
trigger gt_S3FinalStretchEscalation1;
trigger gt_S3FinalStretchEscalation2;
trigger gt_S3FinalStretchUnitConstructionCompleted;
trigger gt_S3FinalCollapse;
trigger gt_S3Cleanup;
trigger gt_BOUnitEntersBonusObjectiveReveal;
trigger gt_BODiscoverParticleCannonLocationsQ;
trigger gt_BOOutsideTerrace01;
trigger gt_BOOutsideTerrace02;
trigger gt_BOOutsideTerrace03;
trigger gt_BOPlayerNearsTerrace02Q;
trigger gt_BOPlayerNearsTerrace03Q;
trigger gt_BOParticleCannon01DestroyedQ;
trigger gt_BOParticleCannon02DestroyedQ;
trigger gt_BOParticleCannon03DestroyedQ;
trigger gt_BOUnitWarpsIn;
trigger gt_ParticleCannonTargetLoop01;
trigger gt_ParticleCannonTargetLoop02;
trigger gt_ParticleCannonTargetLoop03;
trigger gt_ShadowStrikeKillsUnit;
trigger gt_UnitLostBeforeCatalystTracking;
trigger gt_AchievementNoUnitsLostBeforeCatalyst;
trigger gt__10thAnniversaryAchievementVoidCatalystdestroyedbefore13minutes;
trigger gt_DefeatZeratulDies;
trigger gt_DefeatEscapeFailed;
trigger gt_VictoryEscapeComplete;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_TipMissionHelpQ;
trigger gt_ObjectiveInvestigateTempleCreate;
trigger gt_ObjectiveInvestigateTempleComplete;
trigger gt_ObjectiveDestroyCatalystCreate;
trigger gt_ObjectiveDestroyCatalystComplete;
trigger gt_ObjectiveEscapeCreate;
trigger gt_ObjectiveEscapeComplete;
trigger gt_ObjectiveEscapeFailed;
trigger gt_ObjectiveZeratulMustSurviveCreate;
trigger gt_ObjectiveZeratulMustSurviveComplete;
trigger gt_ObjectiveZeratulMustSurviveFailed;
trigger gt_ObjectiveDestroyParticleCannonsCreate;
trigger gt_ObjectiveDestroyParticleCannonsUpdate;
trigger gt_ObjectiveDestroyParticleCannonsComplete;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_IntroBridgeSequence;
trigger gt_MidAntechamberQ;
trigger gt_MidAntechamberSetup;
trigger gt_MidAntechamberCinematic;
trigger gt_MidAntechamberEnd;
trigger gt_MidAntechamberCleanup;
trigger gt_MidAnthechamberUnitPlacement;
trigger gt_MidVoidCatalystDestroyedQ;
trigger gt_MidVoidCatalystDestroyedSetup;
trigger gt_MidVoidCatalystDestroyedCinematic;
trigger gt_MidVoidCatalystDestroyedEnd;
trigger gt_MidVoidCatalystDestroyedCleanup;
trigger gt_MidChangeGasOpacity;
trigger gt_MidWhiteQuake;
trigger gt_MidAmonQuake;
trigger gt_MidCollapseQuake;
trigger gt_MidShadowVolley;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;
trigger gt_VictoryEarthquake;

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
trigger auto_gf_ObserverAI_Trigger = null;
unit auto_gf_ObserverAI_lp_observer;

void gf_ObserverAI (unit lp_observer) {
    auto_gf_ObserverAI_lp_observer = lp_observer;

    if (auto_gf_ObserverAI_Trigger == null) {
        auto_gf_ObserverAI_Trigger = TriggerCreate("auto_gf_ObserverAI_TriggerFunc");
    }

    TriggerExecute(auto_gf_ObserverAI_Trigger, false, false);
}

bool auto_gf_ObserverAI_TriggerFunc (bool testConds, bool runActions) {
    unit lp_observer = auto_gf_ObserverAI_lp_observer;

    // Variable Declarations
    unit lv_targetUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while ((UnitIsAlive(lp_observer) == true)) {
        if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lp_observer), 11.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
            if ((libNtve_gf_UnitInRegion(gv_zeratul, RegionCircle(UnitGetPosition(lp_observer), 11.0)) == true)) {
                lv_targetUnit = gv_zeratul;
            }
            else {
                lv_targetUnit = UnitGroupClosestToPoint(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lp_observer), 11.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_observer));
            }
            if ((DistanceBetweenPoints(UnitGetPosition(lp_observer), UnitGetPosition(lv_targetUnit)) > 6.0)) {
                UnitIssueOrder(lp_observer, OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_targetUnit), 3.0, UnitGetPosition(lp_observer))), c_orderQueueReplace);
                UnitIssueOrder(lp_observer, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
            }

        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

void gf_CreateEarthquake (string lp_amplitude, string lp_frequency) {
    // Variable Declarations
    int lv_debrisIndex;
    actor[9] lv_earthquakeDebris;

    // Automatic Variable Declarations
    const int autoCCEBDDF7_ae = 4;
    const int autoCCEBDDF7_ai = 1;
    const int auto69706B25_ae = 4;
    const int auto69706B25_ai = 1;

    // Variable Initialization

    // Implementation
    CameraShake(gv_pLAYER_01_USER, lp_amplitude, lp_frequency, 0.0, 1.0, 3.0);
    SoundPlay(SoundLink("VP03_AmbientTurmoil2", -1), PlayerGroupAll(), 50.0, 0.0);
    lv_debrisIndex = 1;
    for ( ; ( (autoCCEBDDF7_ai >= 0 && lv_debrisIndex <= autoCCEBDDF7_ae) || (autoCCEBDDF7_ai < 0 && lv_debrisIndex >= autoCCEBDDF7_ae) ) ; lv_debrisIndex += autoCCEBDDF7_ai ) {
        libNtve_gf_CreateModelAtPoint("SpaceFallingDebris", PointWithOffsetPolar(UnitGetPosition(gv_zeratul), 8.0, (90*lv_debrisIndex)));
        lv_earthquakeDebris[lv_debrisIndex] = libNtve_gf_ActorLastCreated();
    }
    Wait(3.0, c_timeGame);
    lv_debrisIndex = 1;
    for ( ; ( (auto69706B25_ai >= 0 && lv_debrisIndex <= auto69706B25_ae) || (auto69706B25_ai < 0 && lv_debrisIndex >= auto69706B25_ae) ) ; lv_debrisIndex += auto69706B25_ai ) {
        libNtve_gf_KillModel(lv_earthquakeDebris[lv_debrisIndex]);
    }
}

trigger auto_gf_FakeBlinkUnittoPoint_Trigger = null;
unit auto_gf_FakeBlinkUnittoPoint_lp_unit;
point auto_gf_FakeBlinkUnittoPoint_lp_point;

void gf_FakeBlinkUnittoPoint (unit lp_unit, point lp_point) {
    auto_gf_FakeBlinkUnittoPoint_lp_unit = lp_unit;
    auto_gf_FakeBlinkUnittoPoint_lp_point = lp_point;

    if (auto_gf_FakeBlinkUnittoPoint_Trigger == null) {
        auto_gf_FakeBlinkUnittoPoint_Trigger = TriggerCreate("auto_gf_FakeBlinkUnittoPoint_TriggerFunc");
    }

    TriggerExecute(auto_gf_FakeBlinkUnittoPoint_Trigger, false, false);
}

bool auto_gf_FakeBlinkUnittoPoint_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_FakeBlinkUnittoPoint_lp_unit;
    point lp_point = auto_gf_FakeBlinkUnittoPoint_lp_point;

    // Variable Declarations
    actor lv_originEffect;
    actor lv_targetEffect;
    point lv_randomPoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UnitGetOwner(lp_unit) == 0)) {
        return true;
    }

    libNtve_gf_CreateModelAtPoint("BlinkStopModel", UnitGetPosition(lp_unit));
    lv_originEffect = libNtve_gf_ActorLastCreated();
    libNtve_gf_PlayAnimation(lv_originEffect, c_animNameDefault, "Stand", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    SoundPlayAtPoint(SoundLink("Stalker_Blink", -1), PlayerGroupAll(), UnitGetPosition(lp_unit), 0.0, 100.0, 0.0);
    libNtve_gf_CreateModelAtPoint("BlinkStopModel", lp_point);
    lv_targetEffect = libNtve_gf_ActorLastCreated();
    libNtve_gf_PlayAnimation(lv_targetEffect, c_animNameDefault, "Stand", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    SoundPlayAtPoint(SoundLink("Stalker_Blink", -1), PlayerGroupAll(), lp_point, 0.0, 100.0, 0.0);
    UnitSetPosition(lp_unit, lp_point, false);
    UnitIssueOrder(lp_unit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    Wait(1.333, c_timeGame);
    libNtve_gf_KillModel(lv_originEffect);
    libNtve_gf_KillModel(lv_targetEffect);
    return true;
}

trigger auto_gf_CreateHybridImageEffectatPoint_Trigger = null;
point auto_gf_CreateHybridImageEffectatPoint_lp_spawnPoint;

void gf_CreateHybridImageEffectatPoint (point lp_spawnPoint) {
    auto_gf_CreateHybridImageEffectatPoint_lp_spawnPoint = lp_spawnPoint;

    if (auto_gf_CreateHybridImageEffectatPoint_Trigger == null) {
        auto_gf_CreateHybridImageEffectatPoint_Trigger = TriggerCreate("auto_gf_CreateHybridImageEffectatPoint_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateHybridImageEffectatPoint_Trigger, false, false);
}

bool auto_gf_CreateHybridImageEffectatPoint_TriggerFunc (bool testConds, bool runActions) {
    point lp_spawnPoint = auto_gf_CreateHybridImageEffectatPoint_lp_spawnPoint;

    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateModelAtPoint("HybridWarpOut", lp_spawnPoint);
    libNtve_gf_PlayAnimation(libNtve_gf_ActorLastCreated(), c_animNameDefault, "Stand", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(4.333, c_timeGame);
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    return true;
}

void gf_S2MainChamberWarpInUnitsAtWarpPrism (string lp_unitType, int lp_count, unit lp_warpPrism) {
    // Variable Declarations
    abilcmd lv_abilCmd;

    // Automatic Variable Declarations
    string autoEA21ED2B_val;
    int auto56F96D6E_n;
    int auto56F96D6E_i;

    // Variable Initialization

    // Implementation
    autoEA21ED2B_val = lp_unitType;
    if (autoEA21ED2B_val == "Zealot") {
        lv_abilCmd = AbilityCommand("SuperWarpGateTrain", 0);
    }
    else if (autoEA21ED2B_val == "Stalker") {
        lv_abilCmd = AbilityCommand("SuperWarpGateTrain", 1);
    }
    else if (autoEA21ED2B_val == "Sentry") {
        lv_abilCmd = AbilityCommand("SuperWarpGateTrain", 5);
    }
    else if (autoEA21ED2B_val == "Immortal") {
        lv_abilCmd = AbilityCommand("SuperWarpGateTrain", 2);
    }
    else if (autoEA21ED2B_val == "HighTemplar") {
        lv_abilCmd = AbilityCommand("SuperWarpGateTrain", 3);
    }
    else if (autoEA21ED2B_val == "Archon") {
        lv_abilCmd = AbilityCommand("SuperWarpGateTrain", 9);
    }
    else if (autoEA21ED2B_val == "Colossus") {
        lv_abilCmd = AbilityCommand("SuperWarpGateTrain", 15);
    }
    else {
    }
    if ((lv_abilCmd != null)) {
        auto56F96D6E_n = lp_count;
        for (auto56F96D6E_i = 1; auto56F96D6E_i <= auto56F96D6E_n; auto56F96D6E_i += 1) {
            if ((UnitIsAlive(lp_warpPrism) == true) && (UnitGroupCount(gv_s2_GauntletUnitGroup, c_unitCountAlive) < gv_s2_GauntletUnitGroup_MaxCount)) {
                UnitIssueOrder(UnitFromId(521), OrderTargetingPoint(lv_abilCmd, RegionRandomPoint(RegionCircle(UnitGetPosition(lp_warpPrism), 3.0))), c_orderQueueReplace);
                Wait(0.5, c_timeGame);
            }

        }
    }

}

trigger auto_gf_S2MainChamberWarpInHybrids_Trigger = null;
int auto_gf_S2MainChamberWarpInHybrids_lp_hybridType;
point auto_gf_S2MainChamberWarpInHybrids_lp_spawnPoint;

void gf_S2MainChamberWarpInHybrids (int lp_hybridType, point lp_spawnPoint) {
    auto_gf_S2MainChamberWarpInHybrids_lp_hybridType = lp_hybridType;
    auto_gf_S2MainChamberWarpInHybrids_lp_spawnPoint = lp_spawnPoint;

    if (auto_gf_S2MainChamberWarpInHybrids_Trigger == null) {
        auto_gf_S2MainChamberWarpInHybrids_Trigger = TriggerCreate("auto_gf_S2MainChamberWarpInHybrids_TriggerFunc");
    }

    TriggerExecute(auto_gf_S2MainChamberWarpInHybrids_Trigger, false, false);
}

bool auto_gf_S2MainChamberWarpInHybrids_TriggerFunc (bool testConds, bool runActions) {
    int lp_hybridType = auto_gf_S2MainChamberWarpInHybrids_lp_hybridType;
    point lp_spawnPoint = auto_gf_S2MainChamberWarpInHybrids_lp_spawnPoint;

    // Variable Declarations
    string lv_unitType;
    unit lv_hybridUnit;

    // Automatic Variable Declarations
    int auto6FEDB61B_val;

    // Variable Initialization

    // Implementation
    auto6FEDB61B_val = lp_hybridType;
    if (auto6FEDB61B_val == ge_PRESETHybridType_Destroyer) {
        lv_unitType = "HybridDestroyer";
    }
    else if (auto6FEDB61B_val == ge_PRESETHybridType_Reaver) {
        lv_unitType = "HybridReaver";
    }
    else if (auto6FEDB61B_val == ge_PRESETHybridType_Dominator) {
        lv_unitType = "HybridDominator";
    }
    else if (auto6FEDB61B_val == ge_PRESETHybridType_Behemoth) {
        lv_unitType = "Hybrid";
    }
    else {
    }
    gf_CreateHybridImageEffectatPoint(lp_spawnPoint);
    UnitCreate(1, lv_unitType, 0, gv_pLAYER_03_AMON, lp_spawnPoint, 180.0);
    lv_hybridUnit = UnitLastCreated();
    libNtve_gf_PauseUnit(lv_hybridUnit, true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_hybridUnit), c_animNameDefault, "Stand Work", 0, c_animTimeDefault);
    Wait(1.5, c_timeGame);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(lv_hybridUnit), c_animNameDefault);
    libNtve_gf_PauseUnit(lv_hybridUnit, false);
    UnitGroupAdd(gv_s2_GauntletHybridGroup, lv_hybridUnit);
    if ((lp_hybridType == ge_PRESETHybridType_Reaver)) {
        UnitBehaviorAddPlayer(lv_hybridUnit, "Detector10", gv_pLAYER_03_AMON, 1);
    }

    if ((lp_hybridType == ge_PRESETHybridType_Behemoth)) {
        gf_S2MainChamberHybridBehemothAI(lv_hybridUnit);
    }
    else {
        UnitGroupAdd(gv_generalAttackers, lv_hybridUnit);
    }
    return true;
}

trigger auto_gf_S2MainChamberHybridBehemothAI_Trigger = null;
unit auto_gf_S2MainChamberHybridBehemothAI_lp_hybrid;

void gf_S2MainChamberHybridBehemothAI (unit lp_hybrid) {
    auto_gf_S2MainChamberHybridBehemothAI_lp_hybrid = lp_hybrid;

    if (auto_gf_S2MainChamberHybridBehemothAI_Trigger == null) {
        auto_gf_S2MainChamberHybridBehemothAI_Trigger = TriggerCreate("auto_gf_S2MainChamberHybridBehemothAI_TriggerFunc");
    }

    TriggerExecute(auto_gf_S2MainChamberHybridBehemothAI_Trigger, false, false);
}

bool auto_gf_S2MainChamberHybridBehemothAI_TriggerFunc (bool testConds, bool runActions) {
    unit lp_hybrid = auto_gf_S2MainChamberHybridBehemothAI_lp_hybrid;

    // Variable Declarations
    region lv_attackRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_attackRegion = RegionFromId(109);

    // Implementation
    while (true) {
        if ((UnitIsAlive(lp_hybrid) == true)) {
            if ((libNtve_gf_UnitInRegion(gv_zeratul, lv_attackRegion) == true)) {
                UnitIssueOrder(lp_hybrid, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_zeratul)), c_orderQueueReplace);
            }
            else {
                if ((RandomInt(1, 8) == 1)) {
                    UnitIssueOrder(lp_hybrid, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupClosestToPoint(UnitGroup(null, gv_pLAYER_01_USER, lv_attackRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_hybrid))), c_orderQueueReplace);
                }

            }
        }

        if ((UnitIsAlive(lp_hybrid) == true) && (libNtve_gf_UnitInRegion(gv_zeratul, lv_attackRegion) == true)) {
            UnitIssueOrder(lp_hybrid, OrderTargetingUnit(AbilityCommand("ConsumeDNA", 0), UnitGroupClosestToPoint(UnitGroup(null, gv_pLAYER_01_USER, lv_attackRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_hybrid))), c_orderQueueAddToFront);
            Wait(1.0, c_timeAI);
        }

        if ((UnitIsAlive(lp_hybrid) == true) && (libNtve_gf_UnitInRegion(gv_zeratul, lv_attackRegion) == true) && (libA3DDD02B_gf_DifficultyValuePrologueInteger(0, 0, 0, 1) == 1)) {
            UnitIssueOrder(lp_hybrid, Order(AbilityCommand("HybridFAoEStun", 0)), c_orderQueueAddToFront);
            Wait(1.0, c_timeAI);
        }

        Wait(1.0, c_timeAI);
        if (((UnitIsAlive(lp_hybrid) == false) || (gv_gameOver == true))) {
            return true;
        }

    }
    return true;
}

void gf_ResidualVortexSpawnUnitAtPoint (string lp_unitType, unit lp_castingUnit, point lp_targetPoint) {
    // Variable Declarations
    abilcmd lv_abilCmd;

    // Automatic Variable Declarations
    string auto33D7AEF9_val;

    // Variable Initialization

    // Implementation
    auto33D7AEF9_val = lp_unitType;
    if (auto33D7AEF9_val == "ShadowOfTheVoidZealot") {
        lv_abilCmd = AbilityCommand("ResidualVortexTrain", 0);
    }
    else if (auto33D7AEF9_val == "ShadowOfTheVoidStalker") {
        lv_abilCmd = AbilityCommand("ResidualVortexTrain", 1);
    }
    else if (auto33D7AEF9_val == "ShadowOfTheVoidArchon") {
        lv_abilCmd = AbilityCommand("ResidualVortexTrain", 2);
    }
    else {
    }
    if ((lv_abilCmd != null)) {
        UnitIssueOrder(lp_castingUnit, OrderTargetingPoint(AbilityCommand("Rally", 0), lp_targetPoint), c_orderQueueReplace);
        UnitIssueOrder(lp_castingUnit, Order(lv_abilCmd), c_orderQueueAddToEnd);
    }

}

trigger auto_gf_DropInHybridReaveratPoint_Trigger = null;
point auto_gf_DropInHybridReaveratPoint_lp_spawnPoint;

void gf_DropInHybridReaveratPoint (point lp_spawnPoint) {
    auto_gf_DropInHybridReaveratPoint_lp_spawnPoint = lp_spawnPoint;

    if (auto_gf_DropInHybridReaveratPoint_Trigger == null) {
        auto_gf_DropInHybridReaveratPoint_Trigger = TriggerCreate("auto_gf_DropInHybridReaveratPoint_TriggerFunc");
    }

    TriggerExecute(auto_gf_DropInHybridReaveratPoint_Trigger, false, false);
}

bool auto_gf_DropInHybridReaveratPoint_TriggerFunc (bool testConds, bool runActions) {
    point lp_spawnPoint = auto_gf_DropInHybridReaveratPoint_lp_spawnPoint;

    // Variable Declarations
    unit lv_localHybrid;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((RegionContainsPoint(RegionCircle(lp_spawnPoint, 15.0), CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
        CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 0.25, 0.5, 2.0);
    }

    SoundPlayAtPointForPlayer(SoundLink("VP03_HybridReaver_DropIn", -1), c_maxPlayers, PlayerGroupAll(), lp_spawnPoint, 0.0, 100.0, 0.0);
    libNtve_gf_CreateModelAtPoint("ZerusFallingRockSmall", lp_spawnPoint);
    ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor 80,107,173");
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "HybridReaver", 0, 0, lp_spawnPoint);
    lv_localHybrid = UnitLastCreated();
    UnitSetTeamColorIndex(lv_localHybrid, 1);
    UnitSetHeight(lv_localHybrid, 12.0, 0.0);
    UnitSetState(lv_localHybrid, c_unitStateStatusBar, false);
    UnitSetState(lv_localHybrid, c_unitStateTargetable, false);
    UnitSetState(lv_localHybrid, c_unitStateSelectable, false);
    UnitSetState(lv_localHybrid, c_unitStateTooltipable, false);
    UnitSetState(lv_localHybrid, c_unitStateCursorable, false);
    UnitSetState(lv_localHybrid, c_unitStateInvulnerable, true);
    Wait(0.0625, c_timeGame);
    UnitSetHeight(lv_localHybrid, UnitGetPropertyFixed(UnitLastCreated(), c_unitPropHeight, c_unitPropNormal), 0.5);
    Wait(0.5, c_timeGame);
    SoundPlayAtPointForPlayer(SoundLink("Titan_LandingThud2", -1), c_maxPlayers, PlayerGroupAll(), lp_spawnPoint, 0.0, 80.0, 0.0);
    UnitSetState(lv_localHybrid, c_unitStateStatusBar, true);
    UnitSetState(lv_localHybrid, c_unitStateTargetable, true);
    UnitSetState(lv_localHybrid, c_unitStateSelectable, true);
    UnitSetState(lv_localHybrid, c_unitStateTooltipable, true);
    UnitSetState(lv_localHybrid, c_unitStateCursorable, true);
    UnitSetState(lv_localHybrid, c_unitStateInvulnerable, false);
    UnitSetOwner(lv_localHybrid, gv_pLAYER_03_AMON, true);
    libA3DDD02B_gf_SetUnitInfoTextCampaign(lv_localHybrid, null, StringExternal("Param/Value/F96BA28B"), null);
    UnitBehaviorAddPlayer(lv_localHybrid, "Detector10", gv_pLAYER_03_AMON, 1);
    UnitGroupAdd(gv_generalAttackers, lv_localHybrid);
    return true;
}

trigger auto_gf_WarpInHybridDestroyeratPoint_Trigger = null;
point auto_gf_WarpInHybridDestroyeratPoint_lp_spawnPoint;

void gf_WarpInHybridDestroyeratPoint (point lp_spawnPoint) {
    auto_gf_WarpInHybridDestroyeratPoint_lp_spawnPoint = lp_spawnPoint;

    if (auto_gf_WarpInHybridDestroyeratPoint_Trigger == null) {
        auto_gf_WarpInHybridDestroyeratPoint_Trigger = TriggerCreate("auto_gf_WarpInHybridDestroyeratPoint_TriggerFunc");
    }

    TriggerExecute(auto_gf_WarpInHybridDestroyeratPoint_Trigger, false, false);
}

bool auto_gf_WarpInHybridDestroyeratPoint_TriggerFunc (bool testConds, bool runActions) {
    point lp_spawnPoint = auto_gf_WarpInHybridDestroyeratPoint_lp_spawnPoint;

    // Variable Declarations
    unit lv_localHybrid;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gf_CreateHybridImageEffectatPoint(lp_spawnPoint);
    UnitCreate(1, "HybridDestroyer", 0, gv_pLAYER_03_AMON, lp_spawnPoint, 180.0);
    lv_localHybrid = UnitLastCreated();
    libNtve_gf_PauseUnit(lv_localHybrid, true);
    SoundPlayAtPointForPlayer(SoundLink("VP03_HybridDestroyer_WarpIn", -1), c_maxPlayers, PlayerGroupAll(), lp_spawnPoint, 0.0, 100.0, 0.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_localHybrid), c_animNameDefault, "Stand Work", 0, c_animTimeDefault);
    Wait(1.5, c_timeGame);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(lv_localHybrid), c_animNameDefault);
    libNtve_gf_PauseUnit(lv_localHybrid, false);
    if ((libNtve_gf_UnitInRegion(lv_localHybrid, RegionFromId(163)) == false)) {
        UnitGroupAdd(gv_generalAttackers, lv_localHybrid);
    }
    else {
        UnitGroupAdd(gv_s3FinalStretchEnemyGroupCombined, lv_localHybrid);
        if ((libNtve_gf_UnitInRegion(lv_localHybrid, RegionFromId(166)) == true)) {
            UnitGroupAdd(gv_s3FinalStretchEnemyGroup1, lv_localHybrid);
        }
        else {
            UnitGroupAdd(gv_s3FinalStretchEnemyGroup2, lv_localHybrid);
        }
    }
    return true;
}

trigger auto_gf_BOFlyAwayWarpPrism_Trigger = null;
unit auto_gf_BOFlyAwayWarpPrism_lp_warpPrism;
region auto_gf_BOFlyAwayWarpPrism_lp_despawnRegion;

void gf_BOFlyAwayWarpPrism (unit lp_warpPrism, region lp_despawnRegion) {
    auto_gf_BOFlyAwayWarpPrism_lp_warpPrism = lp_warpPrism;
    auto_gf_BOFlyAwayWarpPrism_lp_despawnRegion = lp_despawnRegion;

    if (auto_gf_BOFlyAwayWarpPrism_Trigger == null) {
        auto_gf_BOFlyAwayWarpPrism_Trigger = TriggerCreate("auto_gf_BOFlyAwayWarpPrism_TriggerFunc");
    }

    TriggerExecute(auto_gf_BOFlyAwayWarpPrism_Trigger, false, false);
}

bool auto_gf_BOFlyAwayWarpPrism_TriggerFunc (bool testConds, bool runActions) {
    unit lp_warpPrism = auto_gf_BOFlyAwayWarpPrism_lp_warpPrism;
    region lp_despawnRegion = auto_gf_BOFlyAwayWarpPrism_lp_despawnRegion;

    // Automatic Variable Declarations
    // Implementation
    while (true) {
        if ((UnitIsAlive(lp_warpPrism) == false)) {
            return true;
        }

        if ((libNtve_gf_UnitInRegion(lp_warpPrism, lp_despawnRegion) == true)) {
            UnitRemove(lp_warpPrism);
            return true;
        }

        if ((UnitGetType(lp_warpPrism) == "WarpPrismPhasing")) {
            UnitIssueOrder(lp_warpPrism, Order(AbilityCommand("TransportMode", 0)), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(lp_warpPrism, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(lp_despawnRegion)), c_orderQueueReplace);
        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libA3DDD02B_gf_ULoadCampaignData("VoidPrologue03");
    TriggerExecute(gt_Init01Technology, true, true);
    libA3DDD02B_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03Units, true, true);
    TriggerExecute(gt_Init04MusicSound, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulties, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    TriggerExecute(gt_IntroQ, true, true);
    TriggerExecute(gt_StartGameSection1Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libA3DDD02B_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    TechTreeUpgradeAddLevel(0, "DarkProtoss", 1);
    libA3DDD02B_gf_EnableCampaignTechUnit(true, "Stalker", gv_pLAYER_01_USER);
    libA3DDD02B_gf_EnableCampaignTechUnit(true, "HighTemplar", gv_pLAYER_01_USER);
    libA3DDD02B_gf_EnableCampaignTechUnit(true, "Archon", gv_pLAYER_01_USER);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_TALDARIM, "DarkProtoss", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_07_TALIS, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_02_TALDARIM, gv_pLAYER_03_AMON, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropSuppliesLimit, c_playerPropOperSetTo, 200);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropSuppliesMade, c_playerPropOperSetTo, 200);
    PlayerModifyPropertyInt(gv_pLAYER_02_TALDARIM, c_playerPropSuppliesLimit, c_playerPropOperSetTo, 400);
    PlayerModifyPropertyInt(gv_pLAYER_02_TALDARIM, c_playerPropSuppliesMade, c_playerPropOperSetTo, 400);
    PlayerModifyPropertyInt(gv_pLAYER_03_AMON, c_playerPropSuppliesLimit, c_playerPropOperSetTo, 200);
    PlayerModifyPropertyInt(gv_pLAYER_03_AMON, c_playerPropSuppliesMade, c_playerPropOperSetTo, 200);
    PlayerModifyPropertyInt(gv_pLAYER_07_TALIS, c_playerPropSuppliesLimit, c_playerPropOperSetTo, 200);
    PlayerModifyPropertyInt(gv_pLAYER_07_TALIS, c_playerPropSuppliesMade, c_playerPropOperSetTo, 200);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackUnitAlly", false);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackUnitAlly_Prot", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    unitgroup autoB55CF7E4_g;
    int autoB55CF7E4_u;
    unit autoB55CF7E4_var;
    unitgroup auto1ADB4FA9_g;
    int auto1ADB4FA9_u;
    unit auto1ADB4FA9_var;
    unitgroup autoAADFF2FB_g;
    int autoAADFF2FB_u;
    unit autoAADFF2FB_var;
    unitgroup auto42DE7B49_g;
    int auto42DE7B49_u;
    unit auto42DE7B49_var;
    unitgroup autoEC3FA565_g;
    int autoEC3FA565_u;
    unit autoEC3FA565_var;
    unitgroup autoDF00822E_g;
    int autoDF00822E_u;
    unit autoDF00822E_var;
    unitgroup auto07B03762_g;
    int auto07B03762_u;
    unit auto07B03762_var;
    unitgroup autoDE50096D_g;
    int autoDE50096D_u;
    unit autoDE50096D_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libA3DDD02B_gf_CreateHero(PointFromId(332), gv_pLAYER_01_USER, libA3DDD02B_ge_HeroUnit_Zeratul, 45.0, 0);
    gv_zeratul = UnitLastCreated();
    UnitAbilityShow(gv_zeratul, "PrologueVoidArmor", false);
    UnitAbilityShow(gv_zeratul, "ShadowBlade", false);
    UnitBehaviorAdd(gv_talis, "GenericDontDie", gv_talis, 1);
    autoB55CF7E4_g = UnitGroup("Observer", gv_pLAYER_02_TALDARIM, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB55CF7E4_u = UnitGroupCount(autoB55CF7E4_g, c_unitCountAll);
    for (;; autoB55CF7E4_u -= 1) {
        autoB55CF7E4_var = UnitGroupUnitFromEnd(autoB55CF7E4_g, autoB55CF7E4_u);
        if (autoB55CF7E4_var == null) { break; }
        AISetUnitScriptControlled(autoB55CF7E4_var, true);
        UnitIssueOrder(autoB55CF7E4_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        gf_ObserverAI(autoB55CF7E4_var);
        UnitBehaviorAdd(autoB55CF7E4_var, "PrologueEnemyObserver", gv_zeratul, 1);
    }
    UnitIssueOrder(UnitFromId(918), Order(AbilityCommand("XelNaga_Caverns_DoorNWOpened", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(392), Order(AbilityCommand("XelNaga_Caverns_DoorNWOpened", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1234), Order(AbilityCommand("XelNaga_Caverns_DoorNWOpened", 0)), c_orderQueueReplace);
    libA3DDD02B_gf_SetUnitInfoTextCampaign(UnitFromId(815), StringExternal("Param/Value/957F04B8"), StringExternal("Param/Value/BBAF8829"), null);
    libNtve_gf_PauseUnit(UnitFromId(442), true);
    auto1ADB4FA9_g = UnitGroup(null, gv_pLAYER_02_TALDARIM, RegionFromId(10), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1ADB4FA9_u = UnitGroupCount(auto1ADB4FA9_g, c_unitCountAll);
    for (;; auto1ADB4FA9_u -= 1) {
        auto1ADB4FA9_var = UnitGroupUnitFromEnd(auto1ADB4FA9_g, auto1ADB4FA9_u);
        if (auto1ADB4FA9_var == null) { break; }
        if ((UnitGetType(auto1ADB4FA9_var) == "Sentry")) {
            AISetUnitScriptControlled(auto1ADB4FA9_var, true);
        }

    }
    libA3DDD02B_gf_SetUnitInfoTextCampaign(UnitFromId(283), null, StringExternal("Param/Value/41C815F7"), null);
    UnitSetState(gv_malash, c_unitStateSelectable, false);
    UnitSetState(gv_malash, c_unitStateTargetable, false);
    UnitSetState(gv_malash, c_unitStateStatusBar, false);
    UnitSetState(gv_malash, c_unitStateCursorable, false);
    UnitSetState(gv_malash, c_unitStateInvulnerable, true);
    UnitSetState(gv_s2_VoidCatalyst, c_unitStateSelectable, false);
    UnitSetState(gv_s2_VoidCatalyst, c_unitStateTargetable, false);
    UnitSetState(gv_s2_VoidCatalyst, c_unitStateStatusBar, false);
    UnitSetState(gv_s2_VoidCatalyst, c_unitStateCursorable, false);
    UnitSetState(gv_s2_VoidCatalyst, c_unitStateInvulnerable, true);
    libA3DDD02B_gf_SetUnitInfoTextCampaign(gv_s2_VoidCatalyst, null, StringExternal("Param/Value/E6534357"), null);
    UnitGroupAdd(gv_s2_GauntletWaveGroup01, UnitFromId(1489));
    UnitGroupAdd(gv_s2_GauntletWaveGroup01, UnitFromId(1490));
    UnitGroupAdd(gv_s2_GauntletWaveGroup01, UnitFromId(1482));
    UnitGroupAdd(gv_s2_GauntletWaveGroup01, UnitFromId(1204));
    UnitGroupAdd(gv_s2_GauntletWaveGroup01, UnitFromId(1199));
    autoAADFF2FB_g = gv_s2_GauntletWaveGroup01;
    autoAADFF2FB_u = UnitGroupCount(autoAADFF2FB_g, c_unitCountAll);
    for (;; autoAADFF2FB_u -= 1) {
        autoAADFF2FB_var = UnitGroupUnitFromEnd(autoAADFF2FB_g, autoAADFF2FB_u);
        if (autoAADFF2FB_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoAADFF2FB_var, false);
        libNtve_gf_PauseUnit(autoAADFF2FB_var, true);
    }
    UnitGroupAdd(gv_s2_GauntletWaveGroup02, UnitFromId(1492));
    UnitGroupAdd(gv_s2_GauntletWaveGroup02, UnitFromId(1491));
    UnitGroupAdd(gv_s2_GauntletWaveGroup02, UnitFromId(1483));
    UnitGroupAdd(gv_s2_GauntletWaveGroup02, UnitFromId(1484));
    UnitGroupAdd(gv_s2_GauntletWaveGroup02, UnitFromId(1485));
    auto42DE7B49_g = gv_s2_GauntletWaveGroup02;
    auto42DE7B49_u = UnitGroupCount(auto42DE7B49_g, c_unitCountAll);
    for (;; auto42DE7B49_u -= 1) {
        auto42DE7B49_var = UnitGroupUnitFromEnd(auto42DE7B49_g, auto42DE7B49_u);
        if (auto42DE7B49_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto42DE7B49_var, false);
        libNtve_gf_PauseUnit(auto42DE7B49_var, true);
    }
    UnitGroupAdd(gv_s2_GauntletWaveGroup03, UnitFromId(1494));
    UnitGroupAdd(gv_s2_GauntletWaveGroup03, UnitFromId(1493));
    UnitGroupAdd(gv_s2_GauntletWaveGroup03, UnitFromId(1486));
    UnitGroupAdd(gv_s2_GauntletWaveGroup03, UnitFromId(1487));
    UnitGroupAdd(gv_s2_GauntletWaveGroup03, UnitFromId(1488));
    autoEC3FA565_g = gv_s2_GauntletWaveGroup03;
    autoEC3FA565_u = UnitGroupCount(autoEC3FA565_g, c_unitCountAll);
    for (;; autoEC3FA565_u -= 1) {
        autoEC3FA565_var = UnitGroupUnitFromEnd(autoEC3FA565_g, autoEC3FA565_u);
        if (autoEC3FA565_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoEC3FA565_var, false);
        libNtve_gf_PauseUnit(autoEC3FA565_var, true);
    }
    autoDF00822E_g = UnitGroup(null, gv_pLAYER_07_TALIS, RegionFromId(163), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDF00822E_u = UnitGroupCount(autoDF00822E_g, c_unitCountAll);
    for (;; autoDF00822E_u -= 1) {
        autoDF00822E_var = UnitGroupUnitFromEnd(autoDF00822E_g, autoDF00822E_u);
        if (autoDF00822E_var == null) { break; }
        UnitGroupAdd(gv_s3FinalStretchTalisGroupCombined, autoDF00822E_var);
        if ((libNtve_gf_UnitInRegion(autoDF00822E_var, RegionFromId(97)) == true)) {
            UnitGroupAdd(gv_s3FinalStretchTalisGroup1, autoDF00822E_var);
        }

        if ((libNtve_gf_UnitInRegion(autoDF00822E_var, RegionFromId(98)) == true)) {
            UnitGroupAdd(gv_s3FinalStretchTalisGroup2, autoDF00822E_var);
        }

        libNtve_gf_PauseUnit(autoDF00822E_var, true);
        libNtve_gf_ShowHideUnit(autoDF00822E_var, false);
    }
    auto07B03762_g = UnitGroup(null, gv_pLAYER_02_TALDARIM, RegionFromId(163), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto07B03762_u = UnitGroupCount(auto07B03762_g, c_unitCountAll);
    for (;; auto07B03762_u -= 1) {
        auto07B03762_var = UnitGroupUnitFromEnd(auto07B03762_g, auto07B03762_u);
        if (auto07B03762_var == null) { break; }
        UnitGroupAdd(gv_s3FinalStretchEnemyGroupCombined, auto07B03762_var);
        if ((libNtve_gf_UnitInRegion(auto07B03762_var, RegionFromId(166)) == true)) {
            UnitGroupAdd(gv_s3FinalStretchEnemyGroup1, auto07B03762_var);
        }

        if ((libNtve_gf_UnitInRegion(auto07B03762_var, RegionFromId(96)) == true)) {
            UnitGroupAdd(gv_s3FinalStretchEnemyGroup2, auto07B03762_var);
        }

        libNtve_gf_PauseUnit(auto07B03762_var, true);
        libNtve_gf_ShowHideUnit(auto07B03762_var, false);
    }
    autoDE50096D_g = UnitGroup(null, gv_pLAYER_03_AMON, RegionFromId(163), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDE50096D_u = UnitGroupCount(autoDE50096D_g, c_unitCountAll);
    for (;; autoDE50096D_u -= 1) {
        autoDE50096D_var = UnitGroupUnitFromEnd(autoDE50096D_g, autoDE50096D_u);
        if (autoDE50096D_var == null) { break; }
        UnitGroupAdd(gv_s3FinalStretchEnemyGroupCombined, autoDE50096D_var);
        if ((libNtve_gf_UnitInRegion(autoDE50096D_var, RegionFromId(166)) == true)) {
            UnitGroupAdd(gv_s3FinalStretchEnemyGroup1, autoDE50096D_var);
        }

        if ((libNtve_gf_UnitInRegion(autoDE50096D_var, RegionFromId(96)) == true)) {
            UnitGroupAdd(gv_s3FinalStretchEnemyGroup2, autoDE50096D_var);
        }

        libNtve_gf_PauseUnit(autoDE50096D_var, true);
        libNtve_gf_ShowHideUnit(autoDE50096D_var, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init04MusicSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mapMusicTrack = "VP03_Music_ErisBackground";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04MusicSound_Init () {
    gt_Init04MusicSound = TriggerCreate("gt_Init04MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    libLbty_gf_AutoRevealRegion(RegionFromId(9), RegionFromId(9), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(66), RegionFromId(66), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(136), RegionFromId(136), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(3), RegionFromId(17), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(5), RegionFromId(5), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(6), RegionFromId(6), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(14), RegionFromId(14), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(13), RegionFromId(13), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(26), RegionFromId(26), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(51), RegionFromId(51), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(40), RegionFromId(40), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(41), RegionFromId(41), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(36), RegionFromId(36), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(53), RegionFromId(53), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(43), RegionFromId(43), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(44), RegionFromId(44), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(45), RegionFromId(45), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(46), RegionFromId(46), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(109), RegionFromId(109), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(27), RegionFromId(27), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(28), RegionFromId(28), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(68), RegionFromId(68), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(118), RegionFromId(118), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(140), RegionFromId(140), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(87), RegionFromId(90), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(164), RegionFromId(164), gv_pLAYER_01_USER);
    ActorSend(ActorFromDoodad(DoodadFromId(31)), "SetOpacity");
    ActorSend(ActorFromDoodad(DoodadFromId(683)), "SetOpacity");
    ActorSend(ActorFromDoodad(DoodadFromId(1022)), "SetOpacity");
    ActorSend(ActorFromDoodad(DoodadFromId(1089)), "SetOpacity");
    ActorSend(ActorFromDoodad(DoodadFromId(1080)), "SetOpacity");
    ActorSend(ActorFromDoodad(DoodadFromId(1079)), "SetOpacity");
    ActorSend(ActorFromDoodad(DoodadFromId(1083)), "SetOpacity");
    ActorSend(ActorFromDoodad(DoodadFromId(1084)), "SetOpacity");
    ActorSend(ActorFromDoodad(DoodadFromId(1087)), "SetOpacity");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_s3EscapeTimerDuration = libA3DDD02B_gf_DifficultyValuePrologueReal(330.0, 280.0, 260.0, 260.0);
    if ((libA3DDD02B_gf_DifficultyValuePrologueInteger(1, 1, 0, 0) == 1)) {
        TechTreeAbilityAllow(gv_pLAYER_02_TALDARIM, AbilityCommand("Charge", 0), false);
    }

    if ((libA3DDD02B_gf_DifficultyValuePrologueInteger(0, 0, 0, 1) == 1)) {
        TechTreeUpgradeAddLevel(gv_pLAYER_02_TALDARIM, "ExtendedThermalLance", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_03_AMON, "ExtendedThermalLance", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libA3DDD02B_gf_CreateTipCampaign("VoidArmor", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
    libA3DDD02B_gf_CreateTipCampaign("ShadowStrike", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
    libA3DDD02B_gf_CreateTipCampaign("Stalker", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
    libA3DDD02B_gf_CreateTipCampaign("Zeratul", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - S2
//--------------------------------------------------------------------------------------------------
bool gt_DEBUGS2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_BOOutsideTerrace01, true, false);
    TriggerExecute(gt_BOOutsideTerrace02, true, false);
    TriggerExecute(gt_BOOutsideTerrace03, true, false);
    if ((TriggerIsEnabled(gt_BODiscoverParticleCannonLocationsQ) == true)) {
        TriggerExecute(gt_ObjectiveDestroyParticleCannonsCreate, true, true);
        libA3DDD02B_gf_CreateObjectivePing(false, PointFromId(560), StringExternal("Param/Value/77FC3E95"));
        gv_particleCannonPing01 = PingLastCreated();
        libA3DDD02B_gf_CreateObjectivePing(false, PointFromId(914), StringExternal("Param/Value/ECF69555"));
        gv_particleCannonPing02 = PingLastCreated();
        libA3DDD02B_gf_CreateObjectivePing(false, PointFromId(561), StringExternal("Param/Value/1611F2FB"));
        gv_particleCannonPing03 = PingLastCreated();
    }

    UnitAbilityShow(gv_zeratul, "PrologueVoidArmor", true);
    UnitAbilityShow(gv_zeratul, "ShadowBlade", true);
    PingDestroy(libHots_gf_PingStoredForUnit(UnitFromId(815), 1));
    UnitKill(UnitFromId(815));
    UnitSetState(gv_s2_VoidCatalyst, c_unitStateSelectable, true);
    UnitSetState(gv_s2_VoidCatalyst, c_unitStateTargetable, true);
    UnitSetState(gv_s2_VoidCatalyst, c_unitStateStatusBar, true);
    UnitSetState(gv_s2_VoidCatalyst, c_unitStateCursorable, true);
    UnitSetState(gv_s2_VoidCatalyst, c_unitStateInvulnerable, false);
    TriggerEnable(gt_S1ZeratulReachesFirstBeacon, false);
    UnitKill(UnitFromId(450));
    UnitKill(UnitFromId(452));
    UnitKill(UnitFromId(451));
    UnitKill(UnitFromId(453));
    UnitKill(UnitFromId(460));
    UnitKill(UnitFromId(815));
    UnitIssueOrder(UnitFromId(918), Order(AbilityCommand("XelNaga_Caverns_DoorNWOpened", 0)), c_orderQueueReplace);
    SoundPlayAtPoint(SoundLink("VP03_XelNagaDoorOpen", 0), PlayerGroupAll(), UnitGetPosition(UnitFromId(918)), 2.0, 100.0, 0.0);
    TriggerExecute(gt_MidAntechamberQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DEBUGS2_Init () {
    gt_DEBUGS2 = TriggerCreate("gt_DEBUGS2_Func");
    TriggerAddEventChatMessage(gt_DEBUGS2, c_playerAny, "s2", true);
    TriggerAddEventChatMessage(gt_DEBUGS2, c_playerAny, "stage2", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - S3
//--------------------------------------------------------------------------------------------------
bool gt_DEBUGS3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(gt_S2VoidCatalystDiesQ) == true))) {
            return false;
        }

        if (!((gv_currentSection != 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_S2VoidCatalystDiesQ, false);
    TriggerQueueEnter();
    UnitKill(gv_s2_VoidCatalyst);
    PingDestroy(libHots_gf_PingStoredForUnit(gv_s2_VoidCatalyst, 1));
    PingDestroy(libHots_gf_PingStoredForUnit(UnitFromId(815), 1));
    TriggerExecute(gt_ObjectiveInvestigateTempleComplete, true, false);
    TriggerExecute(gt_ObjectiveZeratulMustSurviveCreate, true, false);
    TriggerExecute(gt_ObjectiveDestroyCatalystComplete, true, true);
    TriggerExecute(gt_MidVoidCatalystDestroyedQ, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DEBUGS3_Init () {
    gt_DEBUGS3 = TriggerCreate("gt_DEBUGS3_Func");
    TriggerAddEventChatMessage(gt_DEBUGS3, c_playerAny, "s3", true);
    TriggerAddEventChatMessage(gt_DEBUGS3, c_playerAny, "stage3", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CampaignInitAI();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: General Attack AI
//--------------------------------------------------------------------------------------------------
bool gt_GeneralAttackAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_attackTargets;
    unitgroup lv_validTargets;
    unit lv_currentUnit;
    fixed lv_targetSearchThreshold;

    // Automatic Variable Declarations
    unitgroup auto16E4DC23_g;
    int auto16E4DC23_u;
    unit auto16E4DC23_var;
    unitgroup auto4BADDDFF_g;
    int auto4BADDDFF_u;

    // Variable Initialization
    lv_attackTargets = UnitGroupEmpty();
    lv_validTargets = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_attackTargets = UnitGroup(null, gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((libNtve_gf_UnitIsVisibleToPlayer(gv_zeratul, gv_pLAYER_02_TALDARIM) == false) && (libNtve_gf_UnitIsVisibleToPlayer(gv_zeratul, gv_pLAYER_03_AMON) == false)) {
        UnitGroupRemove(lv_attackTargets, gv_zeratul);
    }

    auto16E4DC23_g = gv_generalAttackers;
    auto16E4DC23_u = UnitGroupCount(auto16E4DC23_g, c_unitCountAll);
    for (;; auto16E4DC23_u -= 1) {
        auto16E4DC23_var = UnitGroupUnitFromEnd(auto16E4DC23_g, auto16E4DC23_u);
        if (auto16E4DC23_var == null) { break; }
        lv_validTargets = UnitGroupEmpty();
        auto4BADDDFF_g = lv_attackTargets;
        auto4BADDDFF_u = UnitGroupCount(auto4BADDDFF_g, c_unitCountAll);
        for (;; auto4BADDDFF_u -= 1) {
            lv_currentUnit = UnitGroupUnitFromEnd(auto4BADDDFF_g, auto4BADDDFF_u);
            if (lv_currentUnit == null) { break; }
            if ((PointPathingIsConnected(UnitGetPosition(auto16E4DC23_var), UnitGetPosition(lv_currentUnit)) == true) && (DistanceBetweenPoints(UnitGetPosition(auto16E4DC23_var), UnitGetPosition(lv_currentUnit)) <= 11.0)) {
                UnitGroupAdd(lv_validTargets, lv_currentUnit);
            }

        }
        if ((UnitGroupCount(lv_validTargets, c_unitCountAlive) > 0)) {
            UnitIssueOrder(auto16E4DC23_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(lv_validTargets, UnitGetPosition(auto16E4DC23_var)))), c_orderQueueReplace);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GeneralAttackAI_Init () {
    gt_GeneralAttackAI = TriggerCreate("gt_GeneralAttackAI_Func");
    TriggerAddEventTimePeriodic(gt_GeneralAttackAI, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Taldarim Resources
//--------------------------------------------------------------------------------------------------
bool gt_TaldarimResources_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(gv_pLAYER_02_TALDARIM, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_02_TALDARIM, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TaldarimResources_Init () {
    gt_TaldarimResources = TriggerCreate("gt_TaldarimResources_Func");
    TriggerAddEventTimePeriodic(gt_TaldarimResources, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show Unit Status Bar On Damage
//--------------------------------------------------------------------------------------------------
bool gt_ShowUnitStatusBarOnDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_attackedUnitIndex;
    int lv_triggeringUnitIndex;

    // Automatic Variable Declarations
    const int auto6B5691DE_ae = 15;
    const int auto6B5691DE_ai = 1;
    const int auto38285E56_ae = 15;
    const int auto38285E56_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((EventUnit() != gv_zeratul))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_attackedUnitIndex = 1;
    for ( ; ( (auto6B5691DE_ai >= 0 && lv_attackedUnitIndex <= auto6B5691DE_ae) || (auto6B5691DE_ai < 0 && lv_attackedUnitIndex >= auto6B5691DE_ae) ) ; lv_attackedUnitIndex += auto6B5691DE_ai ) {
        if ((gv_attackedUnits[lv_attackedUnitIndex] == EventUnit())) {
            lv_triggeringUnitIndex = lv_attackedUnitIndex;
            break;
        }

    }
    if ((lv_triggeringUnitIndex == 0)) {
        lv_attackedUnitIndex = 1;
        for ( ; ( (auto38285E56_ai >= 0 && lv_attackedUnitIndex <= auto38285E56_ae) || (auto38285E56_ai < 0 && lv_attackedUnitIndex >= auto38285E56_ae) ) ; lv_attackedUnitIndex += auto38285E56_ai ) {
            if ((gv_attackedUnits[lv_attackedUnitIndex] == null)) {
                gv_attackedUnits[lv_attackedUnitIndex] = EventUnit();
                gv_attackUnitCountdowns[lv_attackedUnitIndex] = 3;
                UnitStatusBarOverride(EventUnit(), c_unitStatusGroupAll);
                return true;
            }

        }
    }
    else {
        gv_attackUnitCountdowns[lv_triggeringUnitIndex] = 3;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowUnitStatusBarOnDamage_Init () {
    gt_ShowUnitStatusBarOnDamage = TriggerCreate("gt_ShowUnitStatusBarOnDamage_Func");
    TriggerAddEventUnitDamaged(gt_ShowUnitStatusBarOnDamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hide Damaged Unit Status Bar
//--------------------------------------------------------------------------------------------------
bool gt_HideDamagedUnitStatusBar_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_attackedUnitIndex;

    // Automatic Variable Declarations
    const int autoA4292E61_ae = 15;
    const int autoA4292E61_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_attackedUnitIndex = 1;
    for ( ; ( (autoA4292E61_ai >= 0 && lv_attackedUnitIndex <= autoA4292E61_ae) || (autoA4292E61_ai < 0 && lv_attackedUnitIndex >= autoA4292E61_ae) ) ; lv_attackedUnitIndex += autoA4292E61_ai ) {
        if ((gv_attackedUnits[lv_attackedUnitIndex] != null)) {
            gv_attackUnitCountdowns[lv_attackedUnitIndex] -= 1;
            if ((gv_attackUnitCountdowns[lv_attackedUnitIndex] <= 0)) {
                UnitStatusBarClearOverride(gv_attackedUnits[lv_attackedUnitIndex]);
                gv_attackedUnits[lv_attackedUnitIndex] = null;
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HideDamagedUnitStatusBar_Init () {
    gt_HideDamagedUnitStatusBar = TriggerCreate("gt_HideDamagedUnitStatusBar_Func");
    TriggerAddEventTimePeriodic(gt_HideDamagedUnitStatusBar, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Earthquake 01
//--------------------------------------------------------------------------------------------------
bool gt_S1Earthquake01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_CreateEarthquake("Light", "Shake");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1Earthquake01_Init () {
    gt_S1Earthquake01 = TriggerCreate("gt_S1Earthquake01_Func");
    TriggerAddEventUnitRegion(gt_S1Earthquake01, null, RegionFromId(54), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Earthquake 02
//--------------------------------------------------------------------------------------------------
bool gt_S1Earthquake02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_CreateEarthquake("Light", "Shake");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1Earthquake02_Init () {
    gt_S1Earthquake02 = TriggerCreate("gt_S1Earthquake02_Func");
    TriggerAddEventUnitRegion(gt_S1Earthquake02, null, RegionFromId(57), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Earthquake 03
//--------------------------------------------------------------------------------------------------
bool gt_S1Earthquake03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.0, c_timeGame);
    gf_CreateEarthquake("Light", "Shake");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1Earthquake03_Init () {
    gt_S1Earthquake03 = TriggerCreate("gt_S1Earthquake03_Func");
    TriggerAddEventUnitRegion(gt_S1Earthquake03, null, RegionFromId(58), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Earthquake 04
//--------------------------------------------------------------------------------------------------
bool gt_S1Earthquake04_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_CreateEarthquake("Light", "Shake");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1Earthquake04_Init () {
    gt_S1Earthquake04 = TriggerCreate("gt_S1Earthquake04_Func");
    TriggerAddEventUnitRegion(gt_S1Earthquake04, null, RegionFromId(59), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Earthquake 05
//--------------------------------------------------------------------------------------------------
bool gt_S2Earthquake05_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_currentSection == 2))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_CreateEarthquake("Light", "Tremor");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2Earthquake05_Init () {
    gt_S2Earthquake05 = TriggerCreate("gt_S2Earthquake05_Func");
    TriggerAddEventUnitRegion(gt_S2Earthquake05, null, RegionFromId(71), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Earthquake 06
//--------------------------------------------------------------------------------------------------
bool gt_S2Earthquake06_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_currentSection == 2))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_CreateEarthquake("Light", "Tremor");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2Earthquake06_Init () {
    gt_S2Earthquake06 = TriggerCreate("gt_S2Earthquake06_Func");
    TriggerAddEventUnitRegion(gt_S2Earthquake06, null, RegionFromId(70), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game - Section 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameSection1Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_S1ObserverRoomPrep, true, false);
    Wait(2.0, c_timeReal);
    TriggerQueueEnter();
    if (((gv_currentSection != 1) || (gv_gameOver == true))) {
        return true;
    }

    TriggerExecute(gt_ObjectiveInvestigateTempleCreate, true, false);
    TriggerExecute(gt_ObjectiveZeratulMustSurviveCreate, true, true);
    if (((gv_currentSection != 1) || (gv_gameOver == true) || (UnitIsAlive(UnitFromId(815)) == false))) {
        return true;
    }

    libA3DDD02B_gf_CreateObjectivePing(true, UnitGetPosition(UnitFromId(815)), StringExternal("Param/Value/C7E6F267"));
    libHots_gf_StorePingForUnit(UnitFromId(815), 1, PingLastCreated());
    TriggerQueueExit();
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_TipMissionHelpQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameSection1Q_Init () {
    gt_StartGameSection1Q = TriggerCreate("gt_StartGameSection1Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_S1Cleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto185FFB9B_g;
    int auto185FFB9B_u;
    unit auto185FFB9B_var;
    unitgroup autoDA19808F_g;
    int autoDA19808F_u;
    unit autoDA19808F_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitUncommandable(gv_zeratul, false);
    UnitSetState(gv_zeratul, c_unitStatePaused, false);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_zeratul), c_animNameDefault);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("ZeratulBlink", 0), false);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("Blink", 0), false);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("PrologueVoidArmor", 0), false);
    UnitAbilityShow(gv_zeratul, "PrologueVoidArmor", true);
    UnitAbilityShow(gv_zeratul, "ShadowBlade", true);
    auto185FFB9B_g = UnitGroup(null, gv_pLAYER_02_TALDARIM, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto185FFB9B_u = UnitGroupCount(auto185FFB9B_g, c_unitCountAll);
    for (;; auto185FFB9B_u -= 1) {
        auto185FFB9B_var = UnitGroupUnitFromEnd(auto185FFB9B_g, auto185FFB9B_u);
        if (auto185FFB9B_var == null) { break; }
        UnitRemove(auto185FFB9B_var);
    }
    autoDA19808F_g = UnitGroup(null, gv_pLAYER_03_AMON, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDA19808F_u = UnitGroupCount(autoDA19808F_g, c_unitCountAll);
    for (;; autoDA19808F_u -= 1) {
        autoDA19808F_var = UnitGroupUnitFromEnd(autoDA19808F_g, autoDA19808F_u);
        if (autoDA19808F_var == null) { break; }
        UnitRemove(autoDA19808F_var);
    }
    TriggerEnable(gt_S1TeachBlinkInitialAttack, false);
    TriggerEnable(gt_S1TeachBlinkForcefieldsQ, false);
    TriggerEnable(gt_S1TeachBlinkWarpPrism, false);
    TriggerEnable(gt_S1TeachVoidArmorHighlightCancel, false);
    TriggerEnable(gt_S1FrontHallDoor1Q, false);
    TriggerEnable(gt_S1TeachVoidArmorQ, false);
    TriggerEnable(gt_BODiscoverParticleCannonLocationsQ, false);
    TriggerEnable(gt_BOOutsideTerrace01, false);
    TriggerEnable(gt_BOOutsideTerrace02, false);
    TriggerEnable(gt_BOOutsideTerrace03, false);
    TriggerEnable(gt_S1ZeratulReachesFirstBeacon, false);
    TriggerEnable(gt_MidAntechamberQ, false);
    TriggerEnable(gt_StartGameSection2Q, false);
    TriggerStop(gt_S1TeachBlinkInitialAttack);
    libNtve_gf_KillModel(gv_s1_TeachBlink_Reticule);
    TextTagDestroy(gv_s1_TeachBlink_TextTag);
    CameraShakeStop(gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1Cleanup_Init () {
    gt_S1Cleanup = TriggerCreate("gt_S1Cleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Teach Blink Initial Attack
//--------------------------------------------------------------------------------------------------
bool gt_S1TeachBlinkInitialAttack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto188EF1B3_g;
    int auto188EF1B3_u;
    unit auto188EF1B3_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto188EF1B3_g = UnitGroup(null, gv_pLAYER_02_TALDARIM, RegionFromId(10), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto188EF1B3_u = UnitGroupCount(auto188EF1B3_g, c_unitCountAll);
    for (;; auto188EF1B3_u -= 1) {
        auto188EF1B3_var = UnitGroupUnitFromEnd(auto188EF1B3_g, auto188EF1B3_u);
        if (auto188EF1B3_var == null) { break; }
        if (((UnitGetType(auto188EF1B3_var) == "Zealot") || (UnitGetType(auto188EF1B3_var) == "Stalker"))) {
            UnitIssueOrder(auto188EF1B3_var, OrderTargetingPoint(AbilityCommand("attack", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(auto188EF1B3_var), 10.0, RegionGetCenter(RegionFromId(11)))), c_orderQueueReplace);
            UnitGroupAdd(gv_generalAttackers, auto188EF1B3_var);
        }

    }
    TriggerExecute(gt_S1TeachBlinkInitialAttackQ, true, false);
    Wait(1.0, c_timeAI);
    TriggerExecute(gt_S1TeachBlinkForcefieldsQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1TeachBlinkInitialAttack_Init () {
    gt_S1TeachBlinkInitialAttack = TriggerCreate("gt_S1TeachBlinkInitialAttack_Func");
    TriggerAddEventUnitRegion(gt_S1TeachBlinkInitialAttack, null, RegionFromId(11), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Teach Blink Initial Attack Q
//--------------------------------------------------------------------------------------------------
bool gt_S1TeachBlinkInitialAttackQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if (((gv_currentSection != 1) || (UnitIsAlive(UnitFromId(473)) == false))) {
        return true;
    }

    libA3DDD02B_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(UnitFromId(473)), 2.0, Color(100.00, 0.00, 0.00));
    Wait(1.0, c_timeReal);
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 12.5, 1.0);
    libA3DDD02B_gf_SendTransmissionCampaign(UnitFromId(473), "pMission_VoidPrologue03|Line00006", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_DontShowPortrait, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Game);
    Wait(2.0, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1TeachBlinkInitialAttackQ_Init () {
    gt_S1TeachBlinkInitialAttackQ = TriggerCreate("gt_S1TeachBlinkInitialAttackQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Teach Blink Forcefields Q
//--------------------------------------------------------------------------------------------------
bool gt_S1TeachBlinkForcefieldsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto275F9BBF_g;
    int auto275F9BBF_u;
    unit auto275F9BBF_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(gt_S1TeachBlinkWarpPrism) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto275F9BBF_g = UnitGroup(null, c_playerAny, RegionFromId(94), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto275F9BBF_u = UnitGroupCount(auto275F9BBF_g, c_unitCountAll);
    for (;; auto275F9BBF_u -= 1) {
        auto275F9BBF_var = UnitGroupUnitFromEnd(auto275F9BBF_g, auto275F9BBF_u);
        if (auto275F9BBF_var == null) { break; }
        gf_FakeBlinkUnittoPoint(auto275F9BBF_var, RegionRandomPoint(RegionFromId(95)));
    }
    SoundPlayAtPoint(SoundLink("Sentry_ForceFieldLaunch", 0), PlayerGroupAll(), PointFromId(517), 2.0, 100.0, 0.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MonlythArtifactForceField", c_unitCreateIgnorePlacement, 0, PointFromId(474));
    UnitGroupAdd(gv_s1_TeachBlink_Forcefields, UnitLastCreated());
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth", 0, c_animTimeDefault);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MonlythArtifactForceField", c_unitCreateIgnorePlacement, 0, PointFromId(517));
    UnitGroupAdd(gv_s1_TeachBlink_Forcefields, UnitLastCreated());
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth", 0, c_animTimeDefault);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MonlythArtifactForceField", c_unitCreateIgnorePlacement, 0, PointFromId(518));
    UnitGroupAdd(gv_s1_TeachBlink_Forcefields, UnitLastCreated());
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth", 0, c_animTimeDefault);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Blocker4x4", c_unitCreateIgnorePlacement, 0, PointFromId(474));
    UnitGroupAdd(gv_s1_TeachBlink_Forcefields, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Blocker4x4", c_unitCreateIgnorePlacement, 0, PointFromId(517));
    UnitGroupAdd(gv_s1_TeachBlink_Forcefields, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Blocker4x4", c_unitCreateIgnorePlacement, 0, PointFromId(518));
    UnitGroupAdd(gv_s1_TeachBlink_Forcefields, UnitLastCreated());
    while (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(12), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0))) {
        Wait(0.1, c_timeGame);
    }
    TriggerQueueEnter();
    if (((TriggerIsEnabled(gt_S1TeachBlinkWarpPrism) == false) || (gv_currentSection != 1) || (libNtve_gf_UnitGroupIsDead(gv_s1_TeachBlink_Forcefields) == true))) {
        return true;
    }

    SoundPlay(SoundLink("VP03_Music_ReticleStinger", 0), PlayerGroupAll(), 75.0, 0.0);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("ZeratulBlink", 0), true);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("Blink", 0), true);
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelectProtoss", PointFromId(524));
    gv_s1_TeachBlink_Reticule = libNtve_gf_ActorLastCreated();
    TextTagCreate(StringExternal("Param/Value/597DD734"), 24, PointFromId(524), 0.0, true, true, PlayerGroupAll());
    gv_s1_TeachBlink_TextTag = TextTagLastCreated();
    TextTagSetFogVisibility(gv_s1_TeachBlink_TextTag, c_visTypeFog);
    Wait(1.0, c_timeReal);
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Speech);
    libA3DDD02B_gf_SendTransmissionCampaign(gv_zeratul, "pMission_VoidPrologue03|Line00007", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Game);
    Wait(2.0, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1TeachBlinkForcefieldsQ_Init () {
    gt_S1TeachBlinkForcefieldsQ = TriggerCreate("gt_S1TeachBlinkForcefieldsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Teach Blink Warp Prism
//--------------------------------------------------------------------------------------------------
bool gt_S1TeachBlinkWarpPrism_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_warpUnitIndex;
    timer lv_cooldownTimer;
    unit lv_warpPrism;

    // Automatic Variable Declarations
    int autoC4F44283_ae;
    const int autoC4F44283_ai = 1;
    unitgroup autoAB6CB8FB_g;
    int autoAB6CB8FB_u;
    unit autoAB6CB8FB_var;
    unitgroup auto4F753E61_g;
    int auto4F753E61_u;
    unit auto4F753E61_var;
    unitgroup auto40A0DEAE_g;
    int auto40A0DEAE_u;
    unit auto40A0DEAE_var;
    int auto73685436_ae;
    const int auto73685436_ai = 1;

    // Variable Initialization
    lv_cooldownTimer = TimerCreate();
    lv_warpPrism = UnitFromId(522);

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(gv_s1_TeachBlink_Reticule);
    TextTagDestroy(gv_s1_TeachBlink_TextTag);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("ZeratulBlink", 0), false);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("Blink", 0), false);
    Wait(1.0, c_timeAI);
    if ((UnitIsAlive(UnitFromId(522)) == true)) {
        autoC4F44283_ae = libA3DDD02B_gf_DifficultyValuePrologueInteger(2, 2, 3, 4);
        lv_warpUnitIndex = 1;
        for ( ; ( (autoC4F44283_ai >= 0 && lv_warpUnitIndex <= autoC4F44283_ae) || (autoC4F44283_ai < 0 && lv_warpUnitIndex >= autoC4F44283_ae) ) ; lv_warpUnitIndex += autoC4F44283_ai ) {
            Wait(libA3DDD02B_gf_DifficultyValuePrologueReal(1.0, 1.0, 1.0, 0.5), c_timeGame);
            if ((UnitIsAlive(lv_warpPrism) == true)) {
                UnitIssueOrder(UnitFromId(521), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointWithOffsetPolar(UnitGetPosition(lv_warpPrism), 3.0, ((360/libA3DDD02B_gf_DifficultyValuePrologueReal(3.0, 3.0, 4.0, 5.0))*lv_warpUnitIndex))), c_orderQueueReplace);
            }

        }
    }

    TimerStart(lv_cooldownTimer, 11.0, false, c_timeAI);
    Wait(4.0, c_timeAI);
    autoAB6CB8FB_g = UnitGroupFilter("MonlythArtifactForceField", c_playerAny, gv_s1_TeachBlink_Forcefields, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoAB6CB8FB_u = UnitGroupCount(autoAB6CB8FB_g, c_unitCountAll);
    for (;; autoAB6CB8FB_u -= 1) {
        autoAB6CB8FB_var = UnitGroupUnitFromEnd(autoAB6CB8FB_g, autoAB6CB8FB_u);
        if (autoAB6CB8FB_var == null) { break; }
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(autoAB6CB8FB_var), c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    }
    SoundPlayAtPoint(SoundLink("Sentry_ForceFieldDeath", 0), PlayerGroupAll(), PointFromId(517), 2.0, 100.0, 0.0);
    auto4F753E61_g = UnitGroup(null, gv_pLAYER_02_TALDARIM, RegionFromId(10), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4F753E61_u = UnitGroupCount(auto4F753E61_g, c_unitCountAll);
    for (;; auto4F753E61_u -= 1) {
        auto4F753E61_var = UnitGroupUnitFromEnd(auto4F753E61_g, auto4F753E61_u);
        if (auto4F753E61_var == null) { break; }
        if ((UnitGetType(auto4F753E61_var) == "Sentry")) {
            UnitGroupAdd(gv_generalAttackers, auto4F753E61_var);
        }

    }
    Wait(1.0, c_timeGame);
    auto40A0DEAE_g = gv_s1_TeachBlink_Forcefields;
    auto40A0DEAE_u = UnitGroupCount(auto40A0DEAE_g, c_unitCountAll);
    for (;; auto40A0DEAE_u -= 1) {
        auto40A0DEAE_var = UnitGroupUnitFromEnd(auto40A0DEAE_g, auto40A0DEAE_u);
        if (auto40A0DEAE_var == null) { break; }
        UnitRemove(auto40A0DEAE_var);
    }
    while (true) {
        if (((UnitIsAlive(lv_warpPrism) == false) || (gv_currentSection != 1) || (gv_gameOver == true))) {
            return true;
        }

        if ((TimerGetRemaining(lv_cooldownTimer) < 1) && (UnitGroupCount(gv_s1_TeachBlink_Enemies, c_unitCountAlive) < libA3DDD02B_gf_DifficultyValuePrologueInteger(1, 1, 2, 2))) {
            auto73685436_ae = libA3DDD02B_gf_DifficultyValuePrologueInteger(2, 2, 3, 4);
            lv_warpUnitIndex = 1;
            for ( ; ( (auto73685436_ai >= 0 && lv_warpUnitIndex <= auto73685436_ae) || (auto73685436_ai < 0 && lv_warpUnitIndex >= auto73685436_ae) ) ; lv_warpUnitIndex += auto73685436_ai ) {
                Wait(libA3DDD02B_gf_DifficultyValuePrologueReal(1.0, 1.0, 1.0, 0.5), c_timeGame);
                if ((UnitIsAlive(lv_warpPrism) == true)) {
                    UnitIssueOrder(UnitFromId(521), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointWithOffsetPolar(UnitGetPosition(lv_warpPrism), 3.0, ((360/libA3DDD02B_gf_DifficultyValuePrologueReal(3.0, 3.0, 4.0, 5.0))*lv_warpUnitIndex))), c_orderQueueReplace);
                }

            }
            TimerStart(lv_cooldownTimer, 11.0, false, c_timeAI);
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1TeachBlinkWarpPrism_Init () {
    gt_S1TeachBlinkWarpPrism = TriggerCreate("gt_S1TeachBlinkWarpPrism_Func");
    TriggerAddEventUnitRegion(gt_S1TeachBlinkWarpPrism, null, RegionFromId(10), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Teach Blink Warp Prism Construction
//--------------------------------------------------------------------------------------------------
bool gt_S1TeachBlinkWarpPrismConstruction_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_currentSection == 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_TALDARIM))) {
            return false;
        }

        if (!((RegionContainsPoint(RegionFromId(10), UnitGetPosition(EventUnitProgressUnit())) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_generalAttackers, EventUnitProgressUnit());
    UnitGroupAdd(gv_s1_TeachBlink_Enemies, EventUnitProgressUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1TeachBlinkWarpPrismConstruction_Init () {
    gt_S1TeachBlinkWarpPrismConstruction = TriggerCreate("gt_S1TeachBlinkWarpPrismConstruction_Func");
    TriggerAddEventUnitConstructProgress(gt_S1TeachBlinkWarpPrismConstruction, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Front Hall Door 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_S1FrontHallDoor1Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_currentSection != 1)) {
        return true;
    }

    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Speech);
    libA3DDD02B_gf_SendTransmissionCampaign(gv_zeratul, "pMission_VoidPrologue03|Line00022", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1FrontHallDoor1Q_Init () {
    gt_S1FrontHallDoor1Q = TriggerCreate("gt_S1FrontHallDoor1Q_Func");
    TriggerAddEventUnitRegion(gt_S1FrontHallDoor1Q, null, RegionFromId(18), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Teach Void Armor Q
//--------------------------------------------------------------------------------------------------
bool gt_S1TeachVoidArmorQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if (((gv_currentSection != 1) || (gv_gameOver == true))) {
        return true;
    }

    if ((UnitCheckAbilCmdState(gv_zeratul, AbilityCommand("PrologueVoidArmor", 0), c_cmdStateHidden) == true)) {
        UnitAbilityShow(gv_zeratul, "PrologueVoidArmor", true);
        UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("PrologueVoidArmor", 0), true);
    }

    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Speech);
    libA3DDD02B_gf_SendTransmissionCampaign(gv_zeratul, "pMission_VoidPrologue03|Line00011", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1TeachVoidArmorQ_Init () {
    gt_S1TeachVoidArmorQ = TriggerCreate("gt_S1TeachVoidArmorQ_Func");
    TriggerAddEventUnitRegion(gt_S1TeachVoidArmorQ, null, RegionFromId(14), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Teach Void Armor Highlight Cancel
//--------------------------------------------------------------------------------------------------
bool gt_S1TeachVoidArmorHighlightCancel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("PrologueVoidArmor", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1TeachVoidArmorHighlightCancel_Init () {
    gt_S1TeachVoidArmorHighlightCancel = TriggerCreate("gt_S1TeachVoidArmorHighlightCancel_Func");
    TriggerAddEventUnitAbility(gt_S1TeachVoidArmorHighlightCancel, UnitRefFromVariable("gv_zeratul"), AbilityCommand("PrologueVoidArmor", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Teach Shadow Strike Q
//--------------------------------------------------------------------------------------------------
bool gt_S1TeachShadowStrikeQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitCheckAbilCmdState(gv_zeratul, AbilityCommand("ShadowBlade", 0), c_cmdStateHidden) == true)) {
        UnitAbilityShow(gv_zeratul, "ShadowBlade", true);
        UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("ShadowBlade", 0), true);
        UnitAbilityShow(gv_zeratul, "PrologueVoidArmor", true);
    }

    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/3AC405CA"), null, UnitGetPosition(UnitFromId(613)));
    libA3DDD02B_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(UnitFromId(613)), 2.0, Color(100.00, 0.00, 0.00));
    libA3DDD02B_gf_AttachReticleEffectAndTextTagOnUnit(libA3DDD02B_ge_CampaginReticleType_ProtossEnemy, libA3DDD02B_ge_CampaginReticleSize_Medium, null, UnitFromId(613), "Ref_Center");
    libHots_gf_StoreActorForUnit(UnitFromId(613), 1, libNtve_gf_ActorLastCreated());
    libHots_gf_StoreTextTagForUnit(UnitFromId(613), 1, TextTagLastCreated());
    Wait(2.0, c_timeGame);
    TriggerQueueEnter();
    if (((gv_currentSection != 1) || (UnitIsAlive(UnitFromId(613)) == false) || (gv_gameOver == true))) {
        return true;
    }

    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Speech);
    libA3DDD02B_gf_SendTransmissionCampaign(gv_zeratul, "pMission_VoidPrologue03|Line00090", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    if ((gv_gameOver == false) && (UnitIsAlive(UnitFromId(613)) == true) && (UnitGroupCount(UnitGroup("Stalker", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
        libA3DDD02B_gf_SendTransmissionCampaign(null, "pMission_VoidPrologue03|Line00089", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }

    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1TeachShadowStrikeQ_Init () {
    gt_S1TeachShadowStrikeQ = TriggerCreate("gt_S1TeachShadowStrikeQ_Func");
    TriggerAddEventUnitRegion(gt_S1TeachShadowStrikeQ, null, RegionFromId(15), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Teach Shadow Strike Immortal Dies
//--------------------------------------------------------------------------------------------------
bool gt_S1TeachShadowStrikeImmortalDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitFromId(613), 1));
    TextTagDestroy(libHots_gf_TextTagForUnit(UnitFromId(613), 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1TeachShadowStrikeImmortalDies_Init () {
    gt_S1TeachShadowStrikeImmortalDies = TriggerCreate("gt_S1TeachShadowStrikeImmortalDies_Func");
    TriggerAddEventUnitDied(gt_S1TeachShadowStrikeImmortalDies, UnitRefFromUnit(UnitFromId(613)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Teach Shadow Strike Warp Prism
//--------------------------------------------------------------------------------------------------
bool gt_S1TeachShadowStrikeWarpPrism_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_warpUnitIndex;
    timer lv_cooldownTimer;
    unit lv_warpPrism;

    // Automatic Variable Declarations
    int autoF63CAED5_ae;
    const int autoF63CAED5_ai = 1;
    int autoFE679612_ae;
    const int autoFE679612_ai = 1;

    // Variable Initialization
    lv_cooldownTimer = TimerCreate();
    lv_warpPrism = UnitFromId(618);

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(1.0, c_timeAI);
    if ((UnitIsAlive(lv_warpPrism) == true)) {
        autoF63CAED5_ae = libA3DDD02B_gf_DifficultyValuePrologueInteger(2, 2, 3, 4);
        lv_warpUnitIndex = 1;
        for ( ; ( (autoF63CAED5_ai >= 0 && lv_warpUnitIndex <= autoF63CAED5_ae) || (autoF63CAED5_ai < 0 && lv_warpUnitIndex >= autoF63CAED5_ae) ) ; lv_warpUnitIndex += autoF63CAED5_ai ) {
            Wait(libA3DDD02B_gf_DifficultyValuePrologueReal(1.0, 1.0, 1.0, 0.5), c_timeGame);
            if ((UnitIsAlive(lv_warpPrism) == true)) {
                UnitIssueOrder(UnitFromId(521), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointWithOffsetPolar(UnitGetPosition(lv_warpPrism), 3.0, ((360/libA3DDD02B_gf_DifficultyValuePrologueReal(3.0, 3.0, 4.0, 5.0))*lv_warpUnitIndex))), c_orderQueueReplace);
            }

        }
    }

    TimerStart(lv_cooldownTimer, 11.0, false, c_timeAI);
    while (true) {
        if (((UnitIsAlive(lv_warpPrism) == false) || (gv_currentSection != 1) || (gv_gameOver == true))) {
            return true;
        }

        if ((TimerGetRemaining(lv_cooldownTimer) < 1) && (UnitGroupCount(gv_s1_TeachShadowStrike_Enemies, c_unitCountAlive) < libA3DDD02B_gf_DifficultyValuePrologueInteger(1, 1, 2, 2))) {
            autoFE679612_ae = libA3DDD02B_gf_DifficultyValuePrologueInteger(2, 2, 3, 4);
            lv_warpUnitIndex = 1;
            for ( ; ( (autoFE679612_ai >= 0 && lv_warpUnitIndex <= autoFE679612_ae) || (autoFE679612_ai < 0 && lv_warpUnitIndex >= autoFE679612_ae) ) ; lv_warpUnitIndex += autoFE679612_ai ) {
                Wait(libA3DDD02B_gf_DifficultyValuePrologueReal(1.0, 1.0, 1.0, 0.5), c_timeGame);
                if ((UnitIsAlive(lv_warpPrism) == true)) {
                    UnitIssueOrder(UnitFromId(521), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointWithOffsetPolar(UnitGetPosition(lv_warpPrism), 3.0, ((360/libA3DDD02B_gf_DifficultyValuePrologueReal(3.0, 3.0, 4.0, 5.0))*lv_warpUnitIndex))), c_orderQueueReplace);
                }

            }
            TimerStart(lv_cooldownTimer, 11.0, false, c_timeAI);
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1TeachShadowStrikeWarpPrism_Init () {
    gt_S1TeachShadowStrikeWarpPrism = TriggerCreate("gt_S1TeachShadowStrikeWarpPrism_Func");
    TriggerAddEventUnitRegion(gt_S1TeachShadowStrikeWarpPrism, null, RegionFromId(19), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Teach Shadow Strike Warp Prism Construction
//--------------------------------------------------------------------------------------------------
bool gt_S1TeachShadowStrikeWarpPrismConstruction_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_currentSection == 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_TALDARIM))) {
            return false;
        }

        if (!((RegionContainsPoint(RegionFromId(19), UnitGetPosition(EventUnitProgressUnit())) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_generalAttackers, EventUnitProgressUnit());
    UnitGroupAdd(gv_s1_TeachShadowStrike_Enemies, EventUnitProgressUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1TeachShadowStrikeWarpPrismConstruction_Init () {
    gt_S1TeachShadowStrikeWarpPrismConstruction = TriggerCreate("gt_S1TeachShadowStrikeWarpPrismConstruction_Func");
    TriggerAddEventUnitConstructProgress(gt_S1TeachShadowStrikeWarpPrismConstruction, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Front Hall Shadow Strike Highlight Cancel
//--------------------------------------------------------------------------------------------------
bool gt_S1FrontHallShadowStrikeHighlightCancel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("ShadowBlade", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1FrontHallShadowStrikeHighlightCancel_Init () {
    gt_S1FrontHallShadowStrikeHighlightCancel = TriggerCreate("gt_S1FrontHallShadowStrikeHighlightCancel_Func");
    TriggerAddEventUnitAbility(gt_S1FrontHallShadowStrikeHighlightCancel, UnitRefFromVariable("gv_zeratul"), AbilityCommand("ShadowBlade", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Find First Hybrid Q
//--------------------------------------------------------------------------------------------------
bool gt_S1FindFirstHybridQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto400392A5_g;
    int auto400392A5_u;
    unit auto400392A5_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto400392A5_g = UnitGroup(null, gv_pLAYER_02_TALDARIM, RegionFromId(26), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto400392A5_u = UnitGroupCount(auto400392A5_g, c_unitCountAll);
    for (;; auto400392A5_u -= 1) {
        auto400392A5_var = UnitGroupUnitFromEnd(auto400392A5_g, auto400392A5_u);
        if (auto400392A5_var == null) { break; }
        UnitGroupAdd(gv_generalAttackers, auto400392A5_var);
    }
    TriggerQueueEnter();
    if (((gv_currentSection != 1) || (gv_gameOver == true) || (UnitIsAlive(UnitFromId(438)) == false))) {
        return true;
    }

    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Speech);
    libA3DDD02B_gf_SendTransmissionCampaign(gv_zeratul, "pMission_VoidPrologue03|Line00014", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1FindFirstHybridQ_Init () {
    gt_S1FindFirstHybridQ = TriggerCreate("gt_S1FindFirstHybridQ_Func");
    TriggerAddEventUnitRegion(gt_S1FindFirstHybridQ, null, RegionFromId(26), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Observer Room Prep
//--------------------------------------------------------------------------------------------------
bool gt_S1ObserverRoomPrep_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetEscort(gv_pLAYER_02_TALDARIM, libNtve_gf_ConvertUnitToUnitGroup(gv_s1_PatrollingObserver01), 2);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "VoidRay", 0, gv_pLAYER_02_TALDARIM, PointFromId(1170));
    AIAttackWaveAddEscortUnit(gv_pLAYER_02_TALDARIM, UnitLastCreated(), gv_s1_PatrollingObserver01, 4.0, 140.0);
    if ((libA3DDD02B_gf_DifficultyValuePrologueInteger(0, 0, 1, 1) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "VoidRay", 0, gv_pLAYER_02_TALDARIM, PointFromId(1181));
        AIAttackWaveAddEscortUnit(gv_pLAYER_02_TALDARIM, UnitLastCreated(), gv_s1_PatrollingObserver01, 4.0, 220.0);
    }

    AIAttackWaveSend(gv_pLAYER_02_TALDARIM, 0, false);
    AIAttackWaveSetTargetEscort(gv_pLAYER_02_TALDARIM, libNtve_gf_ConvertUnitToUnitGroup(gv_s1_PatrollingObserver02), 2);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "VoidRay", 0, gv_pLAYER_02_TALDARIM, PointFromId(1182));
    AIAttackWaveAddEscortUnit(gv_pLAYER_02_TALDARIM, UnitLastCreated(), gv_s1_PatrollingObserver02, 4.0, 240.0);
    if ((libA3DDD02B_gf_DifficultyValuePrologueInteger(0, 0, 1, 1) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "VoidRay", 0, gv_pLAYER_02_TALDARIM, PointFromId(1183));
        AIAttackWaveAddEscortUnit(gv_pLAYER_02_TALDARIM, UnitLastCreated(), gv_s1_PatrollingObserver02, 4.0, 120.0);
    }

    AIAttackWaveSend(gv_pLAYER_02_TALDARIM, 0, false);
    AIAttackWaveSetTargetEscort(gv_pLAYER_02_TALDARIM, libNtve_gf_ConvertUnitToUnitGroup(gv_s1_PatrollingObserver03), 2);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "VoidRay", 0, gv_pLAYER_02_TALDARIM, PointFromId(1184));
    AIAttackWaveAddEscortUnit(gv_pLAYER_02_TALDARIM, UnitLastCreated(), gv_s1_PatrollingObserver03, 4.0, 120.0);
    if ((libA3DDD02B_gf_DifficultyValuePrologueInteger(0, 0, 1, 1) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "VoidRay", 0, gv_pLAYER_02_TALDARIM, PointFromId(1185));
        AIAttackWaveAddEscortUnit(gv_pLAYER_02_TALDARIM, UnitLastCreated(), gv_s1_PatrollingObserver03, 4.0, 240.0);
    }

    AIAttackWaveSend(gv_pLAYER_02_TALDARIM, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1ObserverRoomPrep_Init () {
    gt_S1ObserverRoomPrep = TriggerCreate("gt_S1ObserverRoomPrep_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Observer Room Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_S1ObserverRoomTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if (((gv_currentSection != 1) || (gv_gameOver == true))) {
        return true;
    }

    libA3DDD02B_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(394), 2.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Speech);
    libA3DDD02B_gf_SendTransmissionCampaign(gv_zeratul, "pMission_VoidPrologue03|Line00092", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1ObserverRoomTransmissionQ_Init () {
    gt_S1ObserverRoomTransmissionQ = TriggerCreate("gt_S1ObserverRoomTransmissionQ_Func");
    TriggerAddEventUnitRegion(gt_S1ObserverRoomTransmissionQ, null, RegionFromId(89), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Observer Room Enemy Group 01
//--------------------------------------------------------------------------------------------------
bool gt_S1ObserverRoomEnemyGroup01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto2971BB77_g;
    int auto2971BB77_u;
    unit auto2971BB77_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto2971BB77_g = UnitGroup(null, gv_pLAYER_02_TALDARIM, RegionFromId(35), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2971BB77_u = UnitGroupCount(auto2971BB77_g, c_unitCountAll);
    for (;; auto2971BB77_u -= 1) {
        auto2971BB77_var = UnitGroupUnitFromEnd(auto2971BB77_g, auto2971BB77_u);
        if (auto2971BB77_var == null) { break; }
        if (((UnitGetType(auto2971BB77_var) == "Zealot") || (UnitGetType(auto2971BB77_var) == "Stalker") || (UnitGetType(auto2971BB77_var) == "Immortal") || (UnitGetType(auto2971BB77_var) == "HybridDestroyer"))) {
            UnitGroupAdd(gv_generalAttackers, auto2971BB77_var);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1ObserverRoomEnemyGroup01_Init () {
    gt_S1ObserverRoomEnemyGroup01 = TriggerCreate("gt_S1ObserverRoomEnemyGroup01_Func");
    TriggerAddEventUnitRegion(gt_S1ObserverRoomEnemyGroup01, null, RegionFromId(35), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Observer Room Enemy Group 02
//--------------------------------------------------------------------------------------------------
bool gt_S1ObserverRoomEnemyGroup02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto0414FDAD_g;
    int auto0414FDAD_u;
    unit auto0414FDAD_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto0414FDAD_g = UnitGroup(null, gv_pLAYER_02_TALDARIM, RegionFromId(38), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0414FDAD_u = UnitGroupCount(auto0414FDAD_g, c_unitCountAll);
    for (;; auto0414FDAD_u -= 1) {
        auto0414FDAD_var = UnitGroupUnitFromEnd(auto0414FDAD_g, auto0414FDAD_u);
        if (auto0414FDAD_var == null) { break; }
        if (((UnitGetType(auto0414FDAD_var) == "Zealot") || (UnitGetType(auto0414FDAD_var) == "Stalker") || (UnitGetType(auto0414FDAD_var) == "Immortal") || (UnitGetType(auto0414FDAD_var) == "HybridDestroyer"))) {
            UnitGroupAdd(gv_generalAttackers, auto0414FDAD_var);
        }

    }
    TriggerExecute(gt_S1ObserverRoomWarpAttack01, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1ObserverRoomEnemyGroup02_Init () {
    gt_S1ObserverRoomEnemyGroup02 = TriggerCreate("gt_S1ObserverRoomEnemyGroup02_Func");
    TriggerAddEventUnitRegion(gt_S1ObserverRoomEnemyGroup02, null, RegionFromId(38), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Observer Room Enemy Group 03
//--------------------------------------------------------------------------------------------------
bool gt_S1ObserverRoomEnemyGroup03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto8509A740_g;
    int auto8509A740_u;
    unit auto8509A740_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto8509A740_g = UnitGroup(null, gv_pLAYER_02_TALDARIM, RegionFromId(39), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8509A740_u = UnitGroupCount(auto8509A740_g, c_unitCountAll);
    for (;; auto8509A740_u -= 1) {
        auto8509A740_var = UnitGroupUnitFromEnd(auto8509A740_g, auto8509A740_u);
        if (auto8509A740_var == null) { break; }
        if (((UnitGetType(auto8509A740_var) == "Zealot") || (UnitGetType(auto8509A740_var) == "Stalker") || (UnitGetType(auto8509A740_var) == "Immortal") || (UnitGetType(auto8509A740_var) == "HybridDestroyer"))) {
            UnitGroupAdd(gv_generalAttackers, auto8509A740_var);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1ObserverRoomEnemyGroup03_Init () {
    gt_S1ObserverRoomEnemyGroup03 = TriggerCreate("gt_S1ObserverRoomEnemyGroup03_Func");
    TriggerAddEventUnitRegion(gt_S1ObserverRoomEnemyGroup03, null, RegionFromId(39), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Observer Room Warp Attack 01
//--------------------------------------------------------------------------------------------------
bool gt_S1ObserverRoomWarpAttack01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_warpUnitIndex;
    timer lv_cooldownTimer;
    unit lv_powerSource;

    // Automatic Variable Declarations
    int auto93D982DB_ae;
    const int auto93D982DB_ai = 1;
    int autoDC1FB24F_ae;
    const int autoDC1FB24F_ai = 1;

    // Variable Initialization
    lv_cooldownTimer = TimerCreate();
    lv_powerSource = UnitFromId(446);

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(1.0, c_timeAI);
    if ((UnitIsAlive(lv_powerSource) == true)) {
        auto93D982DB_ae = libA3DDD02B_gf_DifficultyValuePrologueInteger(2, 2, 3, 4);
        lv_warpUnitIndex = 1;
        for ( ; ( (auto93D982DB_ai >= 0 && lv_warpUnitIndex <= auto93D982DB_ae) || (auto93D982DB_ai < 0 && lv_warpUnitIndex >= auto93D982DB_ae) ) ; lv_warpUnitIndex += auto93D982DB_ai ) {
            Wait(libA3DDD02B_gf_DifficultyValuePrologueReal(1.0, 1.0, 1.0, 0.5), c_timeGame);
            if ((UnitIsAlive(lv_powerSource) == true)) {
                UnitIssueOrder(UnitFromId(521), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointWithOffsetPolar(UnitGetPosition(lv_powerSource), 3.0, ((360/libA3DDD02B_gf_DifficultyValuePrologueReal(3.0, 3.0, 4.0, 5.0))*lv_warpUnitIndex))), c_orderQueueReplace);
            }

        }
    }

    TimerStart(lv_cooldownTimer, 11.0, false, c_timeAI);
    while (true) {
        if (((UnitIsAlive(lv_powerSource) == false) || (gv_currentSection != 1) || (gv_gameOver == true))) {
            return true;
        }

        if ((TimerGetRemaining(lv_cooldownTimer) < 1) && (UnitGroupCount(gv_s1_ObserverRoomWarpPrism_Enemies, c_unitCountAlive) < libA3DDD02B_gf_DifficultyValuePrologueInteger(1, 1, 2, 2))) {
            autoDC1FB24F_ae = libA3DDD02B_gf_DifficultyValuePrologueInteger(1, 1, 2, 2);
            lv_warpUnitIndex = 1;
            for ( ; ( (autoDC1FB24F_ai >= 0 && lv_warpUnitIndex <= autoDC1FB24F_ae) || (autoDC1FB24F_ai < 0 && lv_warpUnitIndex >= autoDC1FB24F_ae) ) ; lv_warpUnitIndex += autoDC1FB24F_ai ) {
                Wait(libA3DDD02B_gf_DifficultyValuePrologueReal(1.0, 1.0, 1.0, 0.5), c_timeGame);
                if ((UnitIsAlive(lv_powerSource) == true)) {
                    UnitIssueOrder(UnitFromId(521), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointWithOffsetPolar(UnitGetPosition(lv_powerSource), 3.0, ((360/libA3DDD02B_gf_DifficultyValuePrologueReal(3.0, 3.0, 4.0, 5.0))*lv_warpUnitIndex))), c_orderQueueReplace);
                }

            }
            TimerStart(lv_cooldownTimer, 11.0, false, c_timeAI);
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1ObserverRoomWarpAttack01_Init () {
    gt_S1ObserverRoomWarpAttack01 = TriggerCreate("gt_S1ObserverRoomWarpAttack01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Observer Room Warp Attack 02
//--------------------------------------------------------------------------------------------------
bool gt_S1ObserverRoomWarpAttack02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_warpUnitIndex;
    timer lv_cooldownTimer;
    unit lv_powerSource;

    // Automatic Variable Declarations
    int auto53A61CD2_ae;
    const int auto53A61CD2_ai = 1;
    int auto48CC7FDC_ae;
    const int auto48CC7FDC_ai = 1;

    // Variable Initialization
    lv_cooldownTimer = TimerCreate();
    lv_powerSource = UnitFromId(444);

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(1.0, c_timeAI);
    if ((UnitIsAlive(lv_powerSource) == true)) {
        auto53A61CD2_ae = libA3DDD02B_gf_DifficultyValuePrologueInteger(3, 3, 3, 4);
        lv_warpUnitIndex = 1;
        for ( ; ( (auto53A61CD2_ai >= 0 && lv_warpUnitIndex <= auto53A61CD2_ae) || (auto53A61CD2_ai < 0 && lv_warpUnitIndex >= auto53A61CD2_ae) ) ; lv_warpUnitIndex += auto53A61CD2_ai ) {
            Wait(libA3DDD02B_gf_DifficultyValuePrologueReal(1.0, 1.0, 1.0, 0.5), c_timeGame);
            if ((UnitIsAlive(lv_powerSource) == true)) {
                UnitIssueOrder(UnitFromId(521), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointWithOffsetPolar(UnitGetPosition(lv_powerSource), 3.0, ((360/libA3DDD02B_gf_DifficultyValuePrologueReal(3.0, 3.0, 4.0, 5.0))*lv_warpUnitIndex))), c_orderQueueReplace);
            }

        }
    }

    TimerStart(lv_cooldownTimer, 11.0, false, c_timeAI);
    while (true) {
        if (((UnitIsAlive(lv_powerSource) == false) || (gv_currentSection != 1) || (gv_gameOver == true))) {
            return true;
        }

        if ((TimerGetRemaining(lv_cooldownTimer) < 1) && (UnitGroupCount(gv_s1_ObserverRoomWarpPrism_Enemies, c_unitCountAlive) < libA3DDD02B_gf_DifficultyValuePrologueInteger(1, 1, 2, 2))) {
            auto48CC7FDC_ae = libA3DDD02B_gf_DifficultyValuePrologueInteger(2, 2, 3, 4);
            lv_warpUnitIndex = 1;
            for ( ; ( (auto48CC7FDC_ai >= 0 && lv_warpUnitIndex <= auto48CC7FDC_ae) || (auto48CC7FDC_ai < 0 && lv_warpUnitIndex >= auto48CC7FDC_ae) ) ; lv_warpUnitIndex += auto48CC7FDC_ai ) {
                Wait(libA3DDD02B_gf_DifficultyValuePrologueReal(1.0, 1.0, 1.0, 0.5), c_timeGame);
                if ((UnitIsAlive(lv_powerSource) == true)) {
                    UnitIssueOrder(UnitFromId(521), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointWithOffsetPolar(UnitGetPosition(lv_powerSource), 3.0, ((360/libA3DDD02B_gf_DifficultyValuePrologueReal(3.0, 3.0, 4.0, 5.0))*lv_warpUnitIndex))), c_orderQueueReplace);
                }

            }
            TimerStart(lv_cooldownTimer, 11.0, false, c_timeAI);
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1ObserverRoomWarpAttack02_Init () {
    gt_S1ObserverRoomWarpAttack02 = TriggerCreate("gt_S1ObserverRoomWarpAttack02_Func");
    TriggerAddEventUnitRegion(gt_S1ObserverRoomWarpAttack02, null, RegionFromId(42), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Observer Room Warp Prism Construction
//--------------------------------------------------------------------------------------------------
bool gt_S1ObserverRoomWarpPrismConstruction_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_currentSection == 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_TALDARIM))) {
            return false;
        }

        if (!(((RegionContainsPoint(RegionFromId(38), UnitGetPosition(EventUnitProgressUnit())) == true) || (RegionContainsPoint(RegionFromId(42), UnitGetPosition(EventUnitProgressUnit())) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_generalAttackers, EventUnitProgressUnit());
    UnitGroupAdd(gv_s1_ObserverRoomWarpPrism_Enemies, EventUnitProgressUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1ObserverRoomWarpPrismConstruction_Init () {
    gt_S1ObserverRoomWarpPrismConstruction = TriggerCreate("gt_S1ObserverRoomWarpPrismConstruction_Func");
    TriggerAddEventUnitConstructProgress(gt_S1ObserverRoomWarpPrismConstruction, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Ambush Outside Antechamber Room Q
//--------------------------------------------------------------------------------------------------
bool gt_S1AmbushOutsideAntechamberRoomQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_transmissionUnit;

    // Automatic Variable Declarations
    unitgroup autoE4AD0160_g;
    int autoE4AD0160_u;
    unit autoE4AD0160_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoE4AD0160_g = UnitGroup(null, gv_pLAYER_02_TALDARIM, RegionFromId(72), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE4AD0160_u = UnitGroupCount(autoE4AD0160_g, c_unitCountAll);
    for (;; autoE4AD0160_u -= 1) {
        autoE4AD0160_var = UnitGroupUnitFromEnd(autoE4AD0160_g, autoE4AD0160_u);
        if (autoE4AD0160_var == null) { break; }
        if ((UnitGetType(autoE4AD0160_var) != "Observer")) {
            UnitGroupAdd(gv_generalAttackers, autoE4AD0160_var);
        }

    }
    TriggerQueueEnter();
    lv_transmissionUnit = UnitGroupRandomUnit(UnitGroup("Stalker", gv_pLAYER_02_TALDARIM, RegionFromId(40), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    if (((gv_currentSection != 1) || (gv_gameOver == true) || (lv_transmissionUnit == null))) {
        return true;
    }

    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Speech);
    libA3DDD02B_gf_SendTransmissionCampaign(lv_transmissionUnit, "pMission_VoidPrologue03|Line00093", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_DontShowPortrait, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1AmbushOutsideAntechamberRoomQ_Init () {
    gt_S1AmbushOutsideAntechamberRoomQ = TriggerCreate("gt_S1AmbushOutsideAntechamberRoomQ_Func");
    TriggerAddEventUnitRegion(gt_S1AmbushOutsideAntechamberRoomQ, null, RegionFromId(72), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Zeratul Reaches First Beacon
//--------------------------------------------------------------------------------------------------
bool gt_S1ZeratulReachesFirstBeacon_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_DEBUGS2, false);
    PingDestroy(libHots_gf_PingStoredForUnit(UnitFromId(815), 1));
    UnitKill(UnitFromId(815));
    libNtve_gf_MakeUnitUncommandable(gv_zeratul, true);
    UnitIssueOrder(gv_zeratul, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(47))), c_orderQueueReplace);
    UnitIssueOrder(gv_zeratul, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(RegionGetCenter(RegionFromId(47)), 1.0, 0.0)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_zeratul, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_ObjectiveInvestigateTempleComplete, true, false);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_MidAntechamberQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1ZeratulReachesFirstBeacon_Init () {
    gt_S1ZeratulReachesFirstBeacon = TriggerCreate("gt_S1ZeratulReachesFirstBeacon_Func");
    TriggerAddEventUnitRegion(gt_S1ZeratulReachesFirstBeacon, UnitRefFromVariable("gv_zeratul"), RegionFromId(47), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game - Section 2 Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameSection2Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto03D406C4_g;
    int auto03D406C4_u;
    unit auto03D406C4_var;
    unitgroup auto92E00B65_g;
    int auto92E00B65_u;
    unit auto92E00B65_var;
    unitgroup auto5E9B51B6_g;
    int auto5E9B51B6_u;
    unit auto5E9B51B6_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libA3DDD02B_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/7846AA95"));
    UnitSelect(gv_zeratul, gv_pLAYER_01_USER, true);
    auto03D406C4_g = UnitGroup("Stalker", gv_pLAYER_01_USER, RegionFromId(62), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto03D406C4_u = UnitGroupCount(auto03D406C4_g, c_unitCountAll);
    for (;; auto03D406C4_u -= 1) {
        auto03D406C4_var = UnitGroupUnitFromEnd(auto03D406C4_g, auto03D406C4_u);
        if (auto03D406C4_var == null) { break; }
        UnitSelect(auto03D406C4_var, gv_pLAYER_01_USER, true);
    }
    auto92E00B65_g = UnitGroup("HighTemplar", gv_pLAYER_01_USER, RegionFromId(62), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto92E00B65_u = UnitGroupCount(auto92E00B65_g, c_unitCountAll);
    for (;; auto92E00B65_u -= 1) {
        auto92E00B65_var = UnitGroupUnitFromEnd(auto92E00B65_g, auto92E00B65_u);
        if (auto92E00B65_var == null) { break; }
        UnitSelect(auto92E00B65_var, gv_pLAYER_01_USER, true);
    }
    auto5E9B51B6_g = UnitGroup("Archon", gv_pLAYER_01_USER, RegionFromId(62), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5E9B51B6_u = UnitGroupCount(auto5E9B51B6_g, c_unitCountAll);
    for (;; auto5E9B51B6_u -= 1) {
        auto5E9B51B6_var = UnitGroupUnitFromEnd(auto5E9B51B6_g, auto5E9B51B6_u);
        if (auto5E9B51B6_var == null) { break; }
        UnitSelect(auto5E9B51B6_var, gv_pLAYER_01_USER, true);
    }
    Wait(2.0, c_timeReal);
    TriggerQueueEnter();
    if (((gv_currentSection != 2) || (gv_gameOver == true))) {
        return true;
    }

    TriggerExecute(gt_ObjectiveInvestigateTempleComplete, true, true);
    TriggerExecute(gt_ObjectiveDestroyCatalystCreate, true, true);
    TriggerExecute(gt_ObjectiveZeratulMustSurviveCreate, true, true);
    if ((libA3DDD02B_gf_MissionObjectiveStateCheck("PPrologue03Primary02", libA3DDD02B_ge_MissionObjectiveState_Completed) == false)) {
        libA3DDD02B_gf_CreateObjectivePing(true, UnitGetPosition(gv_s2_VoidCatalyst), StringExternal("Param/Value/A595A944"));
        gv_s2_VoidCatalystPing = PingLastCreated();
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameSection2Q_Init () {
    gt_StartGameSection2Q = TriggerCreate("gt_StartGameSection2Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_S2Cleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_DEBUGS2, false);
    TriggerEnable(gt_S2AmonQ, false);
    TriggerEnable(gt_S2VoidCatalystDiesQ, false);
    TriggerStop(gt_S1TeachBlinkInitialAttack);
    CameraShakeStop(gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2Cleanup_Init () {
    gt_S2Cleanup = TriggerCreate("gt_S2Cleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - First High Templar Group
//--------------------------------------------------------------------------------------------------
bool gt_S2FirstHighTemplarGroup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_archonMergeUnits;

    // Automatic Variable Declarations
    unitgroup autoE54D62F2_g;
    int autoE54D62F2_u;
    unit autoE54D62F2_var;

    // Variable Initialization
    lv_archonMergeUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_currentSection == 2))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoE54D62F2_g = UnitGroup(null, gv_pLAYER_02_TALDARIM, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE54D62F2_u = UnitGroupCount(autoE54D62F2_g, c_unitCountAll);
    for (;; autoE54D62F2_u -= 1) {
        autoE54D62F2_var = UnitGroupUnitFromEnd(autoE54D62F2_g, autoE54D62F2_u);
        if (autoE54D62F2_var == null) { break; }
        if ((UnitGetType(autoE54D62F2_var) != "Observer") && (UnitGetType(autoE54D62F2_var) != "HighTemplar")) {
            UnitGroupAdd(gv_generalAttackers, autoE54D62F2_var);
        }

    }
    UnitSetPropertyFixed(UnitFromId(637), c_unitPropEnergyPercent, 100.0);
    UnitSetPropertyFixed(UnitFromId(642), c_unitPropEnergyPercent, 100.0);
    UnitGroupAdd(lv_archonMergeUnits, UnitFromId(637));
    UnitGroupAdd(lv_archonMergeUnits, UnitFromId(642));
    Wait(1.0, c_timeGame);
    UnitIssueOrder(UnitFromId(637), OrderTargetingPoint(AbilityCommand("PsiStorm", 0), PointFromId(464)), c_orderQueueReplace);
    if ((libA3DDD02B_gf_DifficultyValuePrologueBoolean(false, false, true, true) == true) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        Wait(1.0, c_timeGame);
        UnitIssueOrder(UnitFromId(642), OrderTargetingPoint(AbilityCommand("PsiStorm", 0), UnitGroupCenterOfGroup(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0))), c_orderQueueReplace);
    }

    Wait(4.0, c_timeGame);
    UnitGroupIssueOrder(lv_archonMergeUnits, Order(AbilityCommand("ArchonWarp", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2FirstHighTemplarGroup_Init () {
    gt_S2FirstHighTemplarGroup = TriggerCreate("gt_S2FirstHighTemplarGroup_Func");
    TriggerAddEventUnitRegion(gt_S2FirstHighTemplarGroup, null, RegionFromId(21), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Enemy Group 01
//--------------------------------------------------------------------------------------------------
bool gt_S2EnemyGroup01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_archonMergeUnits;

    // Automatic Variable Declarations
    unitgroup auto95C50FAA_g;
    int auto95C50FAA_u;
    unit auto95C50FAA_var;

    // Variable Initialization
    lv_archonMergeUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_currentSection == 2))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_PauseUnit(UnitFromId(442), false);
    UnitIssueOrder(UnitFromId(442), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(443)), c_orderQueueReplace);
    auto95C50FAA_g = UnitGroup(null, gv_pLAYER_02_TALDARIM, RegionFromId(67), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto95C50FAA_u = UnitGroupCount(auto95C50FAA_g, c_unitCountAll);
    for (;; auto95C50FAA_u -= 1) {
        auto95C50FAA_var = UnitGroupUnitFromEnd(auto95C50FAA_g, auto95C50FAA_u);
        if (auto95C50FAA_var == null) { break; }
        if ((UnitGetType(auto95C50FAA_var) != "Observer")) {
            UnitGroupAdd(gv_generalAttackers, auto95C50FAA_var);
            UnitIssueOrder(auto95C50FAA_var, OrderTargetingPoint(AbilityCommand("Blink", 0), PointFromId(634)), c_orderQueueReplace);
        }

    }
    TriggerExecute(gt_S2EnemyGroup01TransmissionQ, true, false);
    Wait(2.0, c_timeGame);
    if ((UnitIsAlive(UnitFromId(442)) == true)) {
        UnitGroupAdd(gv_generalAttackers, UnitFromId(442));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2EnemyGroup01_Init () {
    gt_S2EnemyGroup01 = TriggerCreate("gt_S2EnemyGroup01_Func");
    TriggerAddEventUnitRegion(gt_S2EnemyGroup01, null, RegionFromId(67), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Enemy Group 01 Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_S2EnemyGroup01TransmissionQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_transmissionUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    lv_transmissionUnit = UnitGroupUnit(UnitGroup("Stalker", gv_pLAYER_02_TALDARIM, RegionFromId(67), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    if (((gv_gameOver == true) || (lv_transmissionUnit == null))) {
        return true;
    }

    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Speech);
    libA3DDD02B_gf_SendTransmissionCampaign(lv_transmissionUnit, "pMission_VoidPrologue03|Line00100", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_DontShowPortrait, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2EnemyGroup01TransmissionQ_Init () {
    gt_S2EnemyGroup01TransmissionQ = TriggerCreate("gt_S2EnemyGroup01TransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Enemy Group 02
//--------------------------------------------------------------------------------------------------
bool gt_S2EnemyGroup02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_archonMergeUnits;

    // Automatic Variable Declarations
    unitgroup autoAB5A8B7A_g;
    int autoAB5A8B7A_u;
    unit autoAB5A8B7A_var;
    unitgroup autoC6640B41_g;
    int autoC6640B41_u;
    unit autoC6640B41_var;

    // Variable Initialization
    lv_archonMergeUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_currentSection == 2))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoAB5A8B7A_g = UnitGroup(null, gv_pLAYER_02_TALDARIM, RegionFromId(55), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoAB5A8B7A_u = UnitGroupCount(autoAB5A8B7A_g, c_unitCountAll);
    for (;; autoAB5A8B7A_u -= 1) {
        autoAB5A8B7A_var = UnitGroupUnitFromEnd(autoAB5A8B7A_g, autoAB5A8B7A_u);
        if (autoAB5A8B7A_var == null) { break; }
        if ((UnitGetType(autoAB5A8B7A_var) == "Zealot")) {
            UnitGroupAdd(gv_generalAttackers, autoAB5A8B7A_var);
        }

    }
    UnitSetPropertyFixed(UnitFromId(556), c_unitPropEnergyPercent, 100.0);
    UnitSetPropertyFixed(UnitFromId(557), c_unitPropEnergyPercent, 100.0);
    UnitSetPropertyFixed(UnitFromId(598), c_unitPropEnergyPercent, 100.0);
    UnitSetPropertyFixed(UnitFromId(599), c_unitPropEnergyPercent, 100.0);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(UnitFromId(556), OrderTargetingPoint(AbilityCommand("ForceField", 0), PointFromId(602)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(557), OrderTargetingPoint(AbilityCommand("ForceField", 0), PointFromId(603)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(557), OrderTargetingPoint(AbilityCommand("ForceField", 0), PointFromId(604)), c_orderQueueAddToFront);
    if ((libA3DDD02B_gf_DifficultyValuePrologueInteger(0, 0, 1, 1) == 1)) {
        Wait(1.0, c_timeGame);
        UnitIssueOrder(UnitFromId(599), OrderTargetingPoint(AbilityCommand("PsiStorm", 0), UnitGroupCenterOfGroup(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(55), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0))), c_orderQueueReplace);
    }

    TriggerExecute(gt_S2EnemyGroup02TransmissionQ, true, false);
    while (!(((gv_currentSection != 2) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_02_TALDARIM, RegionFromId(55), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) == 0)))) {
        Wait(1.0, c_timeGame);
    }
    autoC6640B41_g = UnitGroup("ForceField", c_playerAny, RegionFromId(55), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC6640B41_u = UnitGroupCount(autoC6640B41_g, c_unitCountAll);
    for (;; autoC6640B41_u -= 1) {
        autoC6640B41_var = UnitGroupUnitFromEnd(autoC6640B41_g, autoC6640B41_u);
        if (autoC6640B41_var == null) { break; }
        UnitKill(autoC6640B41_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2EnemyGroup02_Init () {
    gt_S2EnemyGroup02 = TriggerCreate("gt_S2EnemyGroup02_Func");
    TriggerAddEventUnitRegion(gt_S2EnemyGroup02, null, RegionFromId(55), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Enemy Group 02 Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_S2EnemyGroup02TransmissionQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_transmissionUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    lv_transmissionUnit = UnitGroupUnit(UnitGroup("HighTemplar", gv_pLAYER_02_TALDARIM, RegionFromId(55), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    if (((gv_gameOver == true) || (lv_transmissionUnit == null))) {
        return true;
    }

    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Speech);
    libA3DDD02B_gf_SendTransmissionCampaign(lv_transmissionUnit, "pMission_VoidPrologue03|Line00107", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_DontShowPortrait, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2EnemyGroup02TransmissionQ_Init () {
    gt_S2EnemyGroup02TransmissionQ = TriggerCreate("gt_S2EnemyGroup02TransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Enemy Group 02 Psi Storm
//--------------------------------------------------------------------------------------------------
bool gt_S2EnemyGroup02PsiStorm_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_archonMergeUnits;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_archonMergeUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_currentSection == 2))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupAdd(lv_archonMergeUnits, UnitFromId(598));
    UnitGroupAdd(lv_archonMergeUnits, UnitFromId(599));
    UnitIssueOrder(UnitFromId(598), OrderTargetingPoint(AbilityCommand("PsiStorm", 0), PointFromId(601)), c_orderQueueReplace);
    Wait(6.0, c_timeGame);
    UnitGroupIssueOrder(lv_archonMergeUnits, Order(AbilityCommand("ArchonWarp", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2EnemyGroup02PsiStorm_Init () {
    gt_S2EnemyGroup02PsiStorm = TriggerCreate("gt_S2EnemyGroup02PsiStorm_Func");
    TriggerAddEventUnitRegion(gt_S2EnemyGroup02PsiStorm, null, RegionFromId(48), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Enemy Group 03
//--------------------------------------------------------------------------------------------------
bool gt_S2EnemyGroup03_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_archonMergeUnits;
    unitgroup lv_remainingAscendants;

    // Automatic Variable Declarations
    unitgroup auto1DE800B2_g;
    int auto1DE800B2_u;
    unit auto1DE800B2_var;

    // Variable Initialization
    lv_archonMergeUnits = UnitGroupEmpty();
    lv_remainingAscendants = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_currentSection == 2))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto1DE800B2_g = UnitGroup(null, gv_pLAYER_02_TALDARIM, RegionFromId(52), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1DE800B2_u = UnitGroupCount(auto1DE800B2_g, c_unitCountAll);
    for (;; auto1DE800B2_u -= 1) {
        auto1DE800B2_var = UnitGroupUnitFromEnd(auto1DE800B2_g, auto1DE800B2_u);
        if (auto1DE800B2_var == null) { break; }
        if ((UnitGetType(auto1DE800B2_var) != "HighTemplar") && (UnitGetType(auto1DE800B2_var) != "Sentry")) {
            UnitGroupAdd(gv_generalAttackers, auto1DE800B2_var);
        }

        if ((UnitGetType(auto1DE800B2_var) == "HighTemplar")) {
            UnitGroupAdd(lv_archonMergeUnits, auto1DE800B2_var);
        }

    }
    UnitGroupIssueOrder(lv_archonMergeUnits, Order(AbilityCommand("ArchonWarp", 0)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    lv_remainingAscendants = UnitGroup("HighTemplar", gv_pLAYER_02_TALDARIM, RegionFromId(52), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((UnitGroupCount(lv_remainingAscendants, c_unitCountAlive) > 0)) {
        if ((libA3DDD02B_gf_DifficultyValuePrologueInteger(0, 0, 1, 1) == 1)) {
            UnitIssueOrder(UnitGroupUnit(lv_remainingAscendants, 1), OrderTargetingPoint(AbilityCommand("PsiStorm", 0), UnitGetPosition(UnitGroupClosestToPoint(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(52), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(UnitGroupUnit(lv_remainingAscendants, 1))))), c_orderQueueReplace);
            UnitIssueOrder(UnitGroupUnit(lv_remainingAscendants, 2), OrderTargetingPoint(AbilityCommand("PsiStorm", 0), UnitGroupCenterOfGroup(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(52), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0))), c_orderQueueReplace);
        }

        TriggerExecute(gt_S2EnemyGroup03TransmissionQ, true, false);
        Wait(4.0, c_timeGame);
        UnitGroupIssueOrder(lv_archonMergeUnits, Order(AbilityCommand("ArchonWarp", 0)), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2EnemyGroup03_Init () {
    gt_S2EnemyGroup03 = TriggerCreate("gt_S2EnemyGroup03_Func");
    TriggerAddEventUnitRegion(gt_S2EnemyGroup03, null, RegionFromId(52), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Enemy Group 03 Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_S2EnemyGroup03TransmissionQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_transmissionUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    lv_transmissionUnit = UnitGroupUnit(UnitGroup("HighTemplar", gv_pLAYER_02_TALDARIM, RegionFromId(52), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    if (((gv_gameOver == true) || (lv_transmissionUnit == null))) {
        return true;
    }

    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Speech);
    libA3DDD02B_gf_SendTransmissionCampaign(lv_transmissionUnit, "pMission_VoidPrologue03|Line00106", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_DontShowPortrait, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2EnemyGroup03TransmissionQ_Init () {
    gt_S2EnemyGroup03TransmissionQ = TriggerCreate("gt_S2EnemyGroup03TransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Mid Checkpoint
//--------------------------------------------------------------------------------------------------
bool gt_S2MidCheckpoint_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_currentSection == 2))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libA3DDD02B_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/3FC98B0B"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2MidCheckpoint_Init () {
    gt_S2MidCheckpoint = TriggerCreate("gt_S2MidCheckpoint_Func");
    TriggerAddEventUnitRegion(gt_S2MidCheckpoint, null, RegionFromId(52), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Enemy Group 04
//--------------------------------------------------------------------------------------------------
bool gt_S2EnemyGroup04_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoFB59136C_g;
    int autoFB59136C_u;
    unit autoFB59136C_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_currentSection == 2))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoFB59136C_g = UnitGroup(null, gv_pLAYER_02_TALDARIM, RegionFromId(50), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFB59136C_u = UnitGroupCount(autoFB59136C_g, c_unitCountAll);
    for (;; autoFB59136C_u -= 1) {
        autoFB59136C_var = UnitGroupUnitFromEnd(autoFB59136C_g, autoFB59136C_u);
        if (autoFB59136C_var == null) { break; }
        if ((UnitGetType(autoFB59136C_var) != "Colossus") && (UnitGetType(autoFB59136C_var) != "Observer")) {
            UnitGroupAdd(gv_generalAttackers, autoFB59136C_var);
        }

    }
    Wait(2.0, c_timeGame);
    UnitIssueOrder(UnitFromId(586), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(456)), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    if ((UnitIsAlive(UnitFromId(586)) == true)) {
        UnitGroupAdd(gv_generalAttackers, UnitFromId(586));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2EnemyGroup04_Init () {
    gt_S2EnemyGroup04 = TriggerCreate("gt_S2EnemyGroup04_Func");
    TriggerAddEventUnitRegion(gt_S2EnemyGroup04, null, RegionFromId(50), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Amon Q
//--------------------------------------------------------------------------------------------------
bool gt_S2AmonQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_currentSection == 2))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/810DD319"), null, gv_s2_VoidCatalyst);
    libA3DDD02B_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_s2_VoidCatalyst), 2.0, Color(0.00, 100.00, 0.00));
    Wait(2.0, c_timeGame);
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Speech);
    libA3DDD02B_gf_SendTransmissionCampaign(gv_zeratul, "pMission_VoidPrologue03|Line00037", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2AmonQ_Init () {
    gt_S2AmonQ = TriggerCreate("gt_S2AmonQ_Func");
    TriggerAddEventUnitRegion(gt_S2AmonQ, null, RegionFromId(114), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Gauntlet Prep
//--------------------------------------------------------------------------------------------------
bool gt_S2GauntletPrep_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto9F2FDF59_g;
    int auto9F2FDF59_u;
    unit auto9F2FDF59_var;
    unitgroup auto089BEB6A_g;
    int auto089BEB6A_u;
    unit auto089BEB6A_var;
    unitgroup autoCDEB48A0_g;
    int autoCDEB48A0_u;
    unit autoCDEB48A0_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_currentSection == 2))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WarpPrismPhasing", 0, gv_pLAYER_02_TALDARIM, PointFromId(375));
    gv_s2_GauntletWarpPrism01 = UnitLastCreated();
    AISetUnitScriptControlled(UnitLastCreated(), true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Pylon", 0, gv_pLAYER_02_TALDARIM, PointFromId(376));
    gv_s2_GauntletWarpPrism02 = UnitLastCreated();
    AISetUnitScriptControlled(UnitLastCreated(), true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WarpPrismPhasing", 0, gv_pLAYER_02_TALDARIM, PointFromId(377));
    gv_s2_GauntletWarpPrism03 = UnitLastCreated();
    AISetUnitScriptControlled(UnitLastCreated(), true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Pylon", 0, gv_pLAYER_02_TALDARIM, PointFromId(429));
    gv_s2_GauntletWarpPrism04 = UnitLastCreated();
    AISetUnitScriptControlled(UnitLastCreated(), true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Pylon", 0, gv_pLAYER_02_TALDARIM, PointFromId(435));
    gv_s2_GauntletWarpPrism05 = UnitLastCreated();
    AISetUnitScriptControlled(UnitLastCreated(), true);
    auto9F2FDF59_g = gv_s2_GauntletWaveGroup01;
    auto9F2FDF59_u = UnitGroupCount(auto9F2FDF59_g, c_unitCountAll);
    for (;; auto9F2FDF59_u -= 1) {
        auto9F2FDF59_var = UnitGroupUnitFromEnd(auto9F2FDF59_g, auto9F2FDF59_u);
        if (auto9F2FDF59_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto9F2FDF59_var, true);
        libNtve_gf_PauseUnit(auto9F2FDF59_var, false);
    }
    auto089BEB6A_g = gv_s2_GauntletWaveGroup02;
    auto089BEB6A_u = UnitGroupCount(auto089BEB6A_g, c_unitCountAll);
    for (;; auto089BEB6A_u -= 1) {
        auto089BEB6A_var = UnitGroupUnitFromEnd(auto089BEB6A_g, auto089BEB6A_u);
        if (auto089BEB6A_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto089BEB6A_var, true);
        libNtve_gf_PauseUnit(auto089BEB6A_var, false);
    }
    autoCDEB48A0_g = gv_s2_GauntletWaveGroup03;
    autoCDEB48A0_u = UnitGroupCount(autoCDEB48A0_g, c_unitCountAll);
    for (;; autoCDEB48A0_u -= 1) {
        autoCDEB48A0_var = UnitGroupUnitFromEnd(autoCDEB48A0_g, autoCDEB48A0_u);
        if (autoCDEB48A0_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoCDEB48A0_var, true);
        libNtve_gf_PauseUnit(autoCDEB48A0_var, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2GauntletPrep_Init () {
    gt_S2GauntletPrep = TriggerCreate("gt_S2GauntletPrep_Func");
    TriggerAddEventUnitRegion(gt_S2GauntletPrep, null, RegionFromId(109), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Gauntlet Start Q
//--------------------------------------------------------------------------------------------------
bool gt_S2GauntletStartQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_currentSection == 2))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_S2GauntletUnitWarpsIn, true);
    TriggerExecute(gt_S2GauntletWarpPrisms01, true, false);
    TriggerQueueEnter();
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Speech);
    libA3DDD02B_gf_SendTransmissionCampaign(gv_zeratul, "pMission_VoidPrologue03|Line00040", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2GauntletStartQ_Init () {
    gt_S2GauntletStartQ = TriggerCreate("gt_S2GauntletStartQ_Func");
    TriggerAddEventUnitRegion(gt_S2GauntletStartQ, null, RegionFromId(60), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Gauntlet Wave Units 01
//--------------------------------------------------------------------------------------------------
bool gt_S2GauntletWaveUnits01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoA67C2084_g;
    int autoA67C2084_u;
    unit autoA67C2084_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_currentSection == 2))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupIssueOrder(gv_s2_GauntletWaveGroup01, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1165)), c_orderQueueReplace);
    autoA67C2084_g = gv_s2_GauntletWaveGroup01;
    autoA67C2084_u = UnitGroupCount(autoA67C2084_g, c_unitCountAll);
    for (;; autoA67C2084_u -= 1) {
        autoA67C2084_var = UnitGroupUnitFromEnd(autoA67C2084_g, autoA67C2084_u);
        if (autoA67C2084_var == null) { break; }
        UnitGroupAdd(gv_generalAttackers, autoA67C2084_var);
        UnitGroupAdd(gv_s2_GauntletUnitGroup, autoA67C2084_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2GauntletWaveUnits01_Init () {
    gt_S2GauntletWaveUnits01 = TriggerCreate("gt_S2GauntletWaveUnits01_Func");
    TriggerAddEventUnitRegion(gt_S2GauntletWaveUnits01, null, RegionFromId(49), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Gauntlet Wave Units 02
//--------------------------------------------------------------------------------------------------
bool gt_S2GauntletWaveUnits02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoD63D7D51_g;
    int autoD63D7D51_u;
    unit autoD63D7D51_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_currentSection == 2))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupIssueOrder(gv_s2_GauntletWaveGroup02, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1166)), c_orderQueueReplace);
    autoD63D7D51_g = gv_s2_GauntletWaveGroup02;
    autoD63D7D51_u = UnitGroupCount(autoD63D7D51_g, c_unitCountAll);
    for (;; autoD63D7D51_u -= 1) {
        autoD63D7D51_var = UnitGroupUnitFromEnd(autoD63D7D51_g, autoD63D7D51_u);
        if (autoD63D7D51_var == null) { break; }
        UnitGroupAdd(gv_generalAttackers, autoD63D7D51_var);
        UnitGroupAdd(gv_s2_GauntletUnitGroup, autoD63D7D51_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2GauntletWaveUnits02_Init () {
    gt_S2GauntletWaveUnits02 = TriggerCreate("gt_S2GauntletWaveUnits02_Func");
    TriggerAddEventUnitRegion(gt_S2GauntletWaveUnits02, null, RegionFromId(56), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Gauntlet Wave Units 03
//--------------------------------------------------------------------------------------------------
bool gt_S2GauntletWaveUnits03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto5234FC05_g;
    int auto5234FC05_u;
    unit auto5234FC05_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_currentSection == 2))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupIssueOrder(gv_s2_GauntletWaveGroup03, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1167)), c_orderQueueReplace);
    auto5234FC05_g = gv_s2_GauntletWaveGroup03;
    auto5234FC05_u = UnitGroupCount(auto5234FC05_g, c_unitCountAll);
    for (;; auto5234FC05_u -= 1) {
        auto5234FC05_var = UnitGroupUnitFromEnd(auto5234FC05_g, auto5234FC05_u);
        if (auto5234FC05_var == null) { break; }
        UnitGroupAdd(gv_generalAttackers, auto5234FC05_var);
        UnitGroupAdd(gv_s2_GauntletUnitGroup, auto5234FC05_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2GauntletWaveUnits03_Init () {
    gt_S2GauntletWaveUnits03 = TriggerCreate("gt_S2GauntletWaveUnits03_Func");
    TriggerAddEventUnitRegion(gt_S2GauntletWaveUnits03, null, RegionFromId(69), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Gauntlet Warp Prisms 01
//--------------------------------------------------------------------------------------------------
bool gt_S2GauntletWarpPrisms01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_currentSection == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_S2MainChamberWarpInUnitsAtWarpPrism("Zealot", libA3DDD02B_gf_DifficultyValuePrologueInteger(1, 1, 2, 2), gv_s2_GauntletWarpPrism01);
    gf_S2MainChamberWarpInUnitsAtWarpPrism("Stalker", libA3DDD02B_gf_DifficultyValuePrologueInteger(1, 1, 1, 1), gv_s2_GauntletWarpPrism01);
    Wait(5.0, c_timeGame);
    gf_S2MainChamberWarpInUnitsAtWarpPrism("Zealot", libA3DDD02B_gf_DifficultyValuePrologueInteger(1, 1, 2, 2), gv_s2_GauntletWarpPrism02);
    gf_S2MainChamberWarpInUnitsAtWarpPrism("Stalker", libA3DDD02B_gf_DifficultyValuePrologueInteger(0, 0, 1, 2), gv_s2_GauntletWarpPrism02);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2GauntletWarpPrisms01_Init () {
    gt_S2GauntletWarpPrisms01 = TriggerCreate("gt_S2GauntletWarpPrisms01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Gauntlet Warp Prisms 02
//--------------------------------------------------------------------------------------------------
bool gt_S2GauntletWarpPrisms02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_currentSection == 2))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_S2MainChamberWarpInUnitsAtWarpPrism("Zealot", libA3DDD02B_gf_DifficultyValuePrologueInteger(1, 1, 2, 2), gv_s2_GauntletWarpPrism03);
    gf_S2MainChamberWarpInUnitsAtWarpPrism("Stalker", libA3DDD02B_gf_DifficultyValuePrologueInteger(1, 1, 1, 1), gv_s2_GauntletWarpPrism03);
    Wait(5.0, c_timeGame);
    gf_S2MainChamberWarpInUnitsAtWarpPrism("Zealot", libA3DDD02B_gf_DifficultyValuePrologueInteger(2, 2, 0, 0), gv_s2_GauntletWarpPrism04);
    gf_S2MainChamberWarpInUnitsAtWarpPrism("Immortal", libA3DDD02B_gf_DifficultyValuePrologueInteger(0, 0, 1, 2), gv_s2_GauntletWarpPrism04);
    Wait(5.0, c_timeGame);
    gf_S2MainChamberWarpInUnitsAtWarpPrism("Stalker", libA3DDD02B_gf_DifficultyValuePrologueInteger(1, 1, 2, 2), gv_s2_GauntletWarpPrism05);
    gf_S2MainChamberWarpInUnitsAtWarpPrism("Zealot", libA3DDD02B_gf_DifficultyValuePrologueInteger(1, 1, 1, 1), gv_s2_GauntletWarpPrism05);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2GauntletWarpPrisms02_Init () {
    gt_S2GauntletWarpPrisms02 = TriggerCreate("gt_S2GauntletWarpPrisms02_Func");
    TriggerAddEventUnitRegion(gt_S2GauntletWarpPrisms02, null, RegionFromId(61), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Gauntlet Hybrids And Malash Warps Out
//--------------------------------------------------------------------------------------------------
bool gt_S2GauntletHybridsAndMalashWarpsOut_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_currentSection == 2))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_S2GauntletMalashWarpsOutTransmissionQ, true, false);
    Wait(2.0, c_timeGame);
    gf_S2MainChamberWarpInHybrids(ge_PRESETHybridType_Reaver, PointFromId(612));
    Wait(2.0, c_timeGame);
    if ((libA3DDD02B_gf_DifficultyValuePrologueInteger(0, 0, 1, 1) == 1)) {
        gf_S2MainChamberWarpInHybrids(ge_PRESETHybridType_Destroyer, PointFromId(609));
        Wait(0.5, c_timeGame);
    }

    if ((libA3DDD02B_gf_DifficultyValuePrologueInteger(0, 0, 0, 1) == 1)) {
        gf_S2MainChamberWarpInHybrids(ge_PRESETHybridType_Destroyer, PointFromId(611));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2GauntletHybridsAndMalashWarpsOut_Init () {
    gt_S2GauntletHybridsAndMalashWarpsOut = TriggerCreate("gt_S2GauntletHybridsAndMalashWarpsOut_Func");
    TriggerAddEventUnitRegion(gt_S2GauntletHybridsAndMalashWarpsOut, null, RegionFromId(63), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Gauntlet Malash Warps Out Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_S2GauntletMalashWarpsOutTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.5, c_timeGame);
    TriggerQueueEnter();
    if ((gv_currentSection != 2)) {
        return true;
    }

    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Speech);
    libA3DDD02B_gf_SendTransmissionCampaign(gv_malash, "pMission_VoidPrologue03|Line00101", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    libNtve_gf_AttachModelToUnitInheritVisibility(gv_malash, "ProtossGenericWarpOut", "Ref_Origin");
    libNtve_gf_SendActorMessageToUnit(gv_malash, "SetOpacity 0.000000 1.500000");
    Wait(1.5, c_timeGame);
    UnitRemove(gv_malash);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2GauntletMalashWarpsOutTransmissionQ_Init () {
    gt_S2GauntletMalashWarpsOutTransmissionQ = TriggerCreate("gt_S2GauntletMalashWarpsOutTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Gauntlet Unit Warps In
//--------------------------------------------------------------------------------------------------
bool gt_S2GauntletUnitWarpsIn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentSection == 2))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_02_TALDARIM))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_generalAttackers, EventUnitProgressUnit());
    UnitGroupAdd(gv_s2_GauntletUnitGroup, EventUnitProgressUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2GauntletUnitWarpsIn_Init () {
    gt_S2GauntletUnitWarpsIn = TriggerCreate("gt_S2GauntletUnitWarpsIn_Func");
    TriggerEnable(gt_S2GauntletUnitWarpsIn, false);
    TriggerAddEventUnitConstructProgress(gt_S2GauntletUnitWarpsIn, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Void Catalyst Dies Q
//--------------------------------------------------------------------------------------------------
bool gt_S2VoidCatalystDiesQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_currentSection == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_AchievementNoUnitsLostBeforeCatalyst, true, false);
    TriggerExecute(gt_S2VoidCrystalExplosions, true, false);
    Wait(2.0, c_timeReal);
    PingDestroy(gv_s2_VoidCatalystPing);
    TriggerExecute(gt_ObjectiveInvestigateTempleComplete, true, false);
    TriggerExecute(gt_ObjectiveDestroyCatalystComplete, true, true);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Speech);
    libA3DDD02B_gf_SendTransmissionCampaign(gv_zeratul, "pMission_VoidPrologue03|Line00038", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    TriggerExecute(gt_MidVoidCatalystDestroyedQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2VoidCatalystDiesQ_Init () {
    gt_S2VoidCatalystDiesQ = TriggerCreate("gt_S2VoidCatalystDiesQ_Func");
    TriggerAddEventUnitDied(gt_S2VoidCatalystDiesQ, UnitRefFromVariable("gv_s2_VoidCatalyst"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Void Crystal Explosions
//--------------------------------------------------------------------------------------------------
bool gt_S2VoidCrystalExplosions_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_currentSection == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    CameraShake(gv_pLAYER_01_USER, "Heavy", "Earthquake", 0.0, 1.0, 4.0);
    SoundPlay(SoundLink("Event_EarthShakeCaveInDebris", -1), PlayerGroupAll(), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2VoidCrystalExplosions_Init () {
    gt_S2VoidCrystalExplosions = TriggerCreate("gt_S2VoidCrystalExplosions_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game - Section 3 Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameSection3Q_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_debrisIndex;
    actor[9] lv_earthquakeDebris;

    // Automatic Variable Declarations
    unitgroup auto478E7D7D_g;
    int auto478E7D7D_u;
    unit auto478E7D7D_var;
    const int autoB75D3B4B_ae = 8;
    const int autoB75D3B4B_ai = 1;
    const int auto340D4784_ae = 8;
    const int auto340D4784_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UIAlertClear(gv_pLAYER_01_USER);
    libA3DDD02B_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/06231C9F"));
    UnitSelect(gv_zeratul, gv_pLAYER_01_USER, true);
    auto478E7D7D_g = gv_s3PlayerStalkers;
    auto478E7D7D_u = UnitGroupCount(auto478E7D7D_g, c_unitCountAll);
    for (;; auto478E7D7D_u -= 1) {
        auto478E7D7D_var = UnitGroupUnitFromEnd(auto478E7D7D_g, auto478E7D7D_u);
        if (auto478E7D7D_var == null) { break; }
        UnitSelect(auto478E7D7D_var, gv_pLAYER_01_USER, true);
    }
    libLbty_gf_AutoRevealRegion(RegionFromId(117), RegionFromId(117), gv_pLAYER_01_USER);
    TriggerExecute(gt_S3AmbientTurmoil, true, false);
    TriggerExecute(gt_S3EscapeRouteBlocked1Q, true, false);
    TriggerExecute(gt_S3EscapeRouteClearQ, true, false);
    TriggerExecute(gt_S3PrepUnitsTryingToEscape, true, false);
    SoundPlay(SoundLink("VP03_AmbientTurmoil2", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundPlay(SoundLink("VP03_BridgeRockCrumble", -1), PlayerGroupAll(), 100.0, 0.0);
    lv_debrisIndex = 1;
    for ( ; ( (autoB75D3B4B_ai >= 0 && lv_debrisIndex <= autoB75D3B4B_ae) || (autoB75D3B4B_ai < 0 && lv_debrisIndex >= autoB75D3B4B_ae) ) ; lv_debrisIndex += autoB75D3B4B_ai ) {
        libNtve_gf_CreateModelAtPoint("SpaceFallingDebris", PointFromName(("Earthquake Debris " + IntToString(lv_debrisIndex))));
        lv_earthquakeDebris[lv_debrisIndex] = libNtve_gf_ActorLastCreated();
    }
    CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 0.0, 1.0, 4.0);
    Wait(3.0, c_timeAI);
    lv_debrisIndex = 1;
    for ( ; ( (auto340D4784_ai >= 0 && lv_debrisIndex <= auto340D4784_ae) || (auto340D4784_ai < 0 && lv_debrisIndex >= auto340D4784_ae) ) ; lv_debrisIndex += auto340D4784_ai ) {
        libNtve_gf_KillModel(lv_earthquakeDebris[lv_debrisIndex]);
    }
    CameraShake(gv_pLAYER_01_USER, "Medium", "Tremor", 0.0, 1.0, 3.0);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveEscapeCreate, true, true);
    libA3DDD02B_gf_CreateObjectivePing(true, PointFromId(1650), StringExternal("Param/Value/750B5418"));
    gv_s3EscapeRoutePing = PingLastCreated();
    TimerStart(gv_s3EscapeTimer, gv_s3EscapeTimerDuration, false, c_timeAI);
    TriggerExecute(gt_S3EscapeTimer, true, false);
    GameSetLighting("AmonShadowLight", gv_s3EscapeTimerDuration);
    Wait(2.0, c_timeGame);
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Speech);
    libA3DDD02B_gf_SendTransmissionCampaign(null, "pMission_VoidPrologue03|Line00047", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libA3DDD02B_gf_SendTransmissionCampaign(gv_zeratul, "pMission_VoidPrologue03|Line00048", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameSection3Q_Init () {
    gt_StartGameSection3Q = TriggerCreate("gt_StartGameSection3Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Escape Timer
//--------------------------------------------------------------------------------------------------
bool gt_S3EscapeTimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_currentSection == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlay(SoundLink("VP03_UI_EscapeTimer", -1), PlayerGroupAll(), 100.0, 0.0);
    DialogCreate(500, 400, c_anchorTop, 0, 60, false);
    gv_s3EscapeDialog = DialogLastCreated();
    DialogSetImageVisible(gv_s3EscapeDialog, false);
    libNtve_gf_CreateDialogItemLabel(gv_s3EscapeDialog, 500, 50, c_anchorTop, 0, 0, StringExternal("Param/Value/4EFBCEEE"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_s3EscapeDialogTitle = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_s3EscapeDialogTitle, "AmonShadowTextTitle", PlayerGroupAll());
    DialogControlSetVisible(gv_s3EscapeDialogTitle, PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemLabel(gv_s3EscapeDialog, 500, 50, c_anchorTop, 0, 50, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(gv_s3EscapeTimer))), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_s3EscapeDialogTimeRemaining = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_s3EscapeDialogTimeRemaining, "AmonShadowTextScore", PlayerGroupAll());
    DialogControlSetVisible(gv_s3EscapeDialogTimeRemaining, PlayerGroupAll(), true);
    DialogSetVisible(gv_s3EscapeDialog, PlayerGroupAll(), true);
    while (true) {
        Wait(1.0, c_timeAI);
        if (((gv_gameOver == true) || (ObjectiveGetState(gv_objective_Escape) == c_objectiveStateCompleted) || (gv_currentSection != 3))) {
            DialogSetVisible(gv_s3EscapeDialog, PlayerGroupAll(), false);
            return true;
        }

        libNtve_gf_SetDialogItemText(gv_s3EscapeDialogTimeRemaining, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(gv_s3EscapeTimer))), PlayerGroupAll());
        if ((TimerGetRemaining(gv_s3EscapeTimer) < 0.1)) {
            TriggerExecute(gt_ObjectiveEscapeFailed, true, false);
            libNtve_gf_SetDialogItemColor(gv_s3EscapeDialogTimeRemaining, Color(100.00, 0.00, 0.00), PlayerGroupAll());
            TriggerExecute(gt_DefeatEscapeFailed, true, false);
            TriggerExecute(gt_S3FinalCollapse, true, false);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3EscapeTimer_Init () {
    gt_S3EscapeTimer = TriggerCreate("gt_S3EscapeTimer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Ambient Turmoil
//--------------------------------------------------------------------------------------------------
bool gt_S3AmbientTurmoil_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    actor[9] lv_earthquakeDebris;

    // Automatic Variable Declarations
    const int autoF452D6AE_ae = 4;
    const int autoF452D6AE_ai = 1;
    const int autoC2628300_ae = 4;
    const int autoC2628300_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_currentSection == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 0.0, 1.0, 3.0);
    SoundPlay(SoundLink("VP03_AmbientTurmoil2", -1), PlayerGroupAll(), 80.0, 0.0);
    while (true) {
        Wait(RandomFixed(10.0, 15.0), c_timeReal);
        if (((gv_currentSection != 3) || (gv_gameOver == true) || (TimerGetRemaining(gv_s3EscapeTimer) < 5.0))) {
            return true;
        }

        if ((RandomInt(1, 4) == 1)) {
            CameraShake(gv_pLAYER_01_USER, "Heavy", "Earthquake", 0.0, 1.0, 4.0);
            SoundPlay(SoundLink("VP03_AmbientTurmoil2", -1), PlayerGroupAll(), 100.0, 0.0);
            lv_i = 1;
            for ( ; ( (autoF452D6AE_ai >= 0 && lv_i <= autoF452D6AE_ae) || (autoF452D6AE_ai < 0 && lv_i >= autoF452D6AE_ae) ) ; lv_i += autoF452D6AE_ai ) {
                libNtve_gf_CreateModelAtPoint("SpaceFallingDebris", PointWithOffsetPolar(UnitGetPosition(gv_zeratul), 8.0, (90*lv_i)));
                lv_earthquakeDebris[lv_i] = libNtve_gf_ActorLastCreated();
            }
            Wait(3.0, c_timeGame);
            lv_i = 1;
            for ( ; ( (autoC2628300_ai >= 0 && lv_i <= autoC2628300_ae) || (autoC2628300_ai < 0 && lv_i >= autoC2628300_ae) ) ; lv_i += autoC2628300_ai ) {
                libNtve_gf_KillModel(lv_earthquakeDebris[lv_i]);
            }
        }
        else {
            CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 0.0, 1.0, 3.0);
            SoundPlay(SoundLink("VP03_AmbientTurmoil2", -1), PlayerGroupAll(), 100.0, 0.0);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3AmbientTurmoil_Init () {
    gt_S3AmbientTurmoil = TriggerCreate("gt_S3AmbientTurmoil_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Shadow Spawn Complete
//--------------------------------------------------------------------------------------------------
bool gt_S3ShadowSpawnComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentSection == 3))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_03_AMON))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "ResidualVortex"))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnitProgressUnit(), RegionFromId(163)) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_generalAttackers, EventUnitProgressUnit());
    if ((libNtve_gf_UnitInRegion(EventUnitProgressUnit(), RegionFromId(160)) == true)) {
        UnitGroupAdd(gv_s3ShadowIslandUnits, EventUnitProgressUnit());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3ShadowSpawnComplete_Init () {
    gt_S3ShadowSpawnComplete = TriggerCreate("gt_S3ShadowSpawnComplete_Func");
    TriggerAddEventUnitTrainProgress(gt_S3ShadowSpawnComplete, null, c_unitProgressStageComplete);
    TriggerAddEventUnitConstructProgress(gt_S3ShadowSpawnComplete, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Shadow Spawns 01
//--------------------------------------------------------------------------------------------------
bool gt_S3ShadowSpawns01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentSection == 3))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((libA3DDD02B_gf_DifficultyValuePrologueInteger(0, 0, 1, 1) == 1)) {
        gf_ResidualVortexSpawnUnitAtPoint("ShadowOfTheVoidZealot", gv_s3ResidualVortex, PointFromId(2061));
    }

    Wait(0.25, c_timeGame);
    gf_ResidualVortexSpawnUnitAtPoint("ShadowOfTheVoidZealot", gv_s3ResidualVortex, PointFromId(2062));
    Wait(0.25, c_timeGame);
    gf_ResidualVortexSpawnUnitAtPoint("ShadowOfTheVoidStalker", gv_s3ResidualVortex, PointFromId(2063));
    Wait(0.25, c_timeGame);
    gf_ResidualVortexSpawnUnitAtPoint("ShadowOfTheVoidZealot", gv_s3ResidualVortex, PointFromId(2064));
    Wait(0.25, c_timeGame);
    gf_ResidualVortexSpawnUnitAtPoint("ShadowOfTheVoidStalker", gv_s3ResidualVortex, PointFromId(2065));
    Wait(0.25, c_timeGame);
    gf_ResidualVortexSpawnUnitAtPoint("ShadowOfTheVoidArchon", gv_s3ResidualVortex, PointFromId(2111));
    Wait(0.25, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3ShadowSpawns01_Init () {
    gt_S3ShadowSpawns01 = TriggerCreate("gt_S3ShadowSpawns01_Func");
    TriggerAddEventUnitRegion(gt_S3ShadowSpawns01, null, RegionFromId(130), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Shadow Spawns 02 And Enemy Stalkers
//--------------------------------------------------------------------------------------------------
bool gt_S3ShadowSpawns02AndEnemyStalkers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto4AC93011_g;
    int auto4AC93011_u;
    unit auto4AC93011_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentSection == 3))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto4AC93011_g = UnitGroup(null, gv_pLAYER_02_TALDARIM, RegionFromId(155), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4AC93011_u = UnitGroupCount(auto4AC93011_g, c_unitCountAll);
    for (;; auto4AC93011_u -= 1) {
        auto4AC93011_var = UnitGroupUnitFromEnd(auto4AC93011_g, auto4AC93011_u);
        if (auto4AC93011_var == null) { break; }
        if ((UnitGetType(auto4AC93011_var) != "Observer")) {
            UnitGroupAdd(gv_generalAttackers, auto4AC93011_var);
            UnitIssueOrder(auto4AC93011_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(131))), c_orderQueueReplace);
        }

    }
    gf_ResidualVortexSpawnUnitAtPoint("ShadowOfTheVoidZealot", gv_s3ResidualVortex, PointFromId(2113));
    Wait(0.25, c_timeGame);
    gf_ResidualVortexSpawnUnitAtPoint("ShadowOfTheVoidZealot", gv_s3ResidualVortex, PointFromId(2114));
    Wait(0.25, c_timeGame);
    gf_ResidualVortexSpawnUnitAtPoint("ShadowOfTheVoidZealot", gv_s3ResidualVortex, PointFromId(2115));
    Wait(0.25, c_timeGame);
    if ((libA3DDD02B_gf_DifficultyValuePrologueInteger(1, 1, 0, 0) == 1)) {
        gf_ResidualVortexSpawnUnitAtPoint("ShadowOfTheVoidZealot", gv_s3ResidualVortex, PointFromId(2116));
        Wait(0.25, c_timeGame);
        gf_ResidualVortexSpawnUnitAtPoint("ShadowOfTheVoidZealot", gv_s3ResidualVortex, PointFromId(2117));
    }
    else {
        gf_ResidualVortexSpawnUnitAtPoint("ShadowOfTheVoidArchon", gv_s3ResidualVortex, PointFromId(2116));
        Wait(0.25, c_timeGame);
        gf_ResidualVortexSpawnUnitAtPoint("ShadowOfTheVoidArchon", gv_s3ResidualVortex, PointFromId(2117));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3ShadowSpawns02AndEnemyStalkers_Init () {
    gt_S3ShadowSpawns02AndEnemyStalkers = TriggerCreate("gt_S3ShadowSpawns02AndEnemyStalkers_Func");
    TriggerAddEventUnitRegion(gt_S3ShadowSpawns02AndEnemyStalkers, null, RegionFromId(131), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Hybrid Spawn 1
//--------------------------------------------------------------------------------------------------
bool gt_S3HybridSpawn1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentSection == 3))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_DropInHybridReaveratPoint(PointFromId(596));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3HybridSpawn1_Init () {
    gt_S3HybridSpawn1 = TriggerCreate("gt_S3HybridSpawn1_Func");
    TriggerAddEventUnitRegion(gt_S3HybridSpawn1, null, RegionFromId(85), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Shadow Spawns 03
//--------------------------------------------------------------------------------------------------
bool gt_S3ShadowSpawns03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentSection == 3))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_ResidualVortexSpawnUnitAtPoint("ShadowOfTheVoidZealot", gv_s3ResidualVortexForwardUnit01, PointFromId(2119));
    Wait(0.25, c_timeGame);
    gf_ResidualVortexSpawnUnitAtPoint("ShadowOfTheVoidZealot", gv_s3ResidualVortexForwardUnit01, PointFromId(2120));
    Wait(0.25, c_timeGame);
    gf_ResidualVortexSpawnUnitAtPoint("ShadowOfTheVoidStalker", gv_s3ResidualVortexForwardUnit01, PointFromId(2121));
    Wait(0.25, c_timeGame);
    gf_ResidualVortexSpawnUnitAtPoint("ShadowOfTheVoidZealot", gv_s3ResidualVortexForwardUnit01, PointFromId(2122));
    Wait(0.25, c_timeGame);
    gf_ResidualVortexSpawnUnitAtPoint("ShadowOfTheVoidZealot", gv_s3ResidualVortexForwardUnit01, PointFromId(2123));
    Wait(0.25, c_timeGame);
    gf_ResidualVortexSpawnUnitAtPoint("ShadowOfTheVoidZealot", gv_s3ResidualVortexForwardUnit01, PointFromId(2124));
    Wait(0.25, c_timeGame);
    gf_ResidualVortexSpawnUnitAtPoint("ShadowOfTheVoidZealot", gv_s3ResidualVortexForwardUnit01, PointFromId(2125));
    Wait(0.25, c_timeGame);
    gf_ResidualVortexSpawnUnitAtPoint("ShadowOfTheVoidStalker", gv_s3ResidualVortexForwardUnit01, PointFromId(2126));
    if ((libA3DDD02B_gf_DifficultyValuePrologueInteger(0, 0, 1, 1) == 1)) {
        Wait(0.25, c_timeGame);
        gf_ResidualVortexSpawnUnitAtPoint("ShadowOfTheVoidArchon", gv_s3ResidualVortexForwardUnit01, PointFromId(1188));
        Wait(0.25, c_timeGame);
        gf_ResidualVortexSpawnUnitAtPoint("ShadowOfTheVoidArchon", gv_s3ResidualVortexForwardUnit01, PointFromId(1189));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3ShadowSpawns03_Init () {
    gt_S3ShadowSpawns03 = TriggerCreate("gt_S3ShadowSpawns03_Func");
    TriggerAddEventUnitRegion(gt_S3ShadowSpawns03, null, RegionFromId(153), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Prep Units Trying To Escape
//--------------------------------------------------------------------------------------------------
bool gt_S3PrepUnitsTryingToEscape_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(UnitFromId(1571), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(1585)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1578), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(1581)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1577), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(1580)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1579), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(1580)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(606), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(1580)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3PrepUnitsTryingToEscape_Init () {
    gt_S3PrepUnitsTryingToEscape = TriggerCreate("gt_S3PrepUnitsTryingToEscape_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Units Trying To Escape
//--------------------------------------------------------------------------------------------------
bool gt_S3UnitsTryingToEscape_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto6C6EFFF3_g;
    int auto6C6EFFF3_u;
    unit auto6C6EFFF3_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_currentSection == 3))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(156), 6.0, false);
    Wait(2.0, c_timeGame);
    auto6C6EFFF3_g = UnitGroup(null, gv_pLAYER_02_TALDARIM, RegionFromId(156), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6C6EFFF3_u = UnitGroupCount(auto6C6EFFF3_g, c_unitCountAll);
    for (;; auto6C6EFFF3_u -= 1) {
        auto6C6EFFF3_var = UnitGroupUnitFromEnd(auto6C6EFFF3_g, auto6C6EFFF3_u);
        if (auto6C6EFFF3_var == null) { break; }
        if ((UnitGetType(auto6C6EFFF3_var) != "Observer")) {
            UnitIssueOrder(auto6C6EFFF3_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            UnitGroupAdd(gv_generalAttackers, auto6C6EFFF3_var);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3UnitsTryingToEscape_Init () {
    gt_S3UnitsTryingToEscape = TriggerCreate("gt_S3UnitsTryingToEscape_Func");
    TriggerAddEventUnitRegion(gt_S3UnitsTryingToEscape, null, RegionFromId(156), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Escape Route Blocked 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_S3EscapeRouteBlocked1Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_currentSection == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        Wait(1.0, c_timeAI);
        if (((gv_gameOver == true) || (ObjectiveGetState(gv_objective_Escape) == c_objectiveStateCompleted) || (gv_currentSection != 3))) {
            return true;
        }

        if ((libNtve_gf_UnitInRegion(gv_zeratul, RegionFromId(99)) == true)) {
            TriggerQueueEnter();
            if (((gv_gameOver == true) || (ObjectiveGetState(gv_objective_Escape) == c_objectiveStateCompleted) || (gv_currentSection != 3))) {
                return true;
            }

            libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Speech);
            libA3DDD02B_gf_SendTransmissionCampaign(gv_zeratul, "pMission_VoidPrologue03|Line00049", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Game);
            TriggerQueueExit();
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3EscapeRouteBlocked1Q_Init () {
    gt_S3EscapeRouteBlocked1Q = TriggerCreate("gt_S3EscapeRouteBlocked1Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Shadow Spawns 04
//--------------------------------------------------------------------------------------------------
bool gt_S3ShadowSpawns04_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int autoB0C739E7_ae = 6;
    const int autoB0C739E7_ai = 1;
    const int auto64EAE919_ae = 12;
    const int auto64EAE919_ai = 1;
    const int auto38BA458D_ae = 15;
    const int auto38BA458D_ai = 1;
    const int autoD92F7E8A_ae = 17;
    const int autoD92F7E8A_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentSection == 3))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_S3AmonTaunt1Q, true, false);
    lv_i = 1;
    for ( ; ( (autoB0C739E7_ai >= 0 && lv_i <= autoB0C739E7_ae) || (autoB0C739E7_ai < 0 && lv_i >= autoB0C739E7_ae) ) ; lv_i += autoB0C739E7_ai ) {
        gf_ResidualVortexSpawnUnitAtPoint("ShadowOfTheVoidZealot", gv_s3ResidualVortexForwardUnit02, PointFromName(("S3 - Shadow Spawns 4-" + IntToString(lv_i))));
        Wait(0.25, c_timeGame);
    }
    Wait(2.0, c_timeGame);
    lv_i = 7;
    for ( ; ( (auto64EAE919_ai >= 0 && lv_i <= auto64EAE919_ae) || (auto64EAE919_ai < 0 && lv_i >= auto64EAE919_ae) ) ; lv_i += auto64EAE919_ai ) {
        gf_ResidualVortexSpawnUnitAtPoint("ShadowOfTheVoidZealot", gv_s3ResidualVortexForwardUnit02, PointFromName(("S3 - Shadow Spawns 4-" + IntToString(lv_i))));
        Wait(0.25, c_timeGame);
    }
    lv_i = 13;
    for ( ; ( (auto38BA458D_ai >= 0 && lv_i <= auto38BA458D_ae) || (auto38BA458D_ai < 0 && lv_i >= auto38BA458D_ae) ) ; lv_i += auto38BA458D_ai ) {
        gf_ResidualVortexSpawnUnitAtPoint("ShadowOfTheVoidStalker", gv_s3ResidualVortexForwardUnit02, PointFromName(("S3 - Shadow Spawns 4-" + IntToString(lv_i))));
        Wait(0.25, c_timeGame);
    }
    if ((libA3DDD02B_gf_DifficultyValuePrologueInteger(0, 0, 1, 1) == 1)) {
        Wait(2.0, c_timeGame);
        lv_i = 16;
        for ( ; ( (autoD92F7E8A_ai >= 0 && lv_i <= autoD92F7E8A_ae) || (autoD92F7E8A_ai < 0 && lv_i >= autoD92F7E8A_ae) ) ; lv_i += autoD92F7E8A_ai ) {
            gf_ResidualVortexSpawnUnitAtPoint("ShadowOfTheVoidArchon", gv_s3ResidualVortexForwardUnit02, PointFromName(("S3 - Shadow Spawns 4-" + IntToString(lv_i))));
            Wait(0.25, c_timeGame);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3ShadowSpawns04_Init () {
    gt_S3ShadowSpawns04 = TriggerCreate("gt_S3ShadowSpawns04_Func");
    TriggerAddEventUnitRegion(gt_S3ShadowSpawns04, null, RegionFromId(138), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Amon Taunt 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_S3AmonTaunt1Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_currentSection == 3))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Speech);
    libA3DDD02B_gf_SendTransmissionCampaign(null, "pMission_VoidPrologue03|Line00043", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3AmonTaunt1Q_Init () {
    gt_S3AmonTaunt1Q = TriggerCreate("gt_S3AmonTaunt1Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Hybrid Spawn 2
//--------------------------------------------------------------------------------------------------
bool gt_S3HybridSpawn2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentSection == 3))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_WarpInHybridDestroyeratPoint(PointFromId(1223));
    Wait(0.25, c_timeGame);
    gf_WarpInHybridDestroyeratPoint(PointFromId(1224));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3HybridSpawn2_Init () {
    gt_S3HybridSpawn2 = TriggerCreate("gt_S3HybridSpawn2_Func");
    TriggerAddEventUnitRegion(gt_S3HybridSpawn2, null, RegionFromId(158), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Hybrid Spawn 3
//--------------------------------------------------------------------------------------------------
bool gt_S3HybridSpawn3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentSection == 3))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_DropInHybridReaveratPoint(PointFromId(1226));
    if ((libA3DDD02B_gf_DifficultyValuePrologueInteger(0, 0, 1, 1) == 1)) {
        Wait(0.5, c_timeGame);
        gf_WarpInHybridDestroyeratPoint(PointFromId(1227));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3HybridSpawn3_Init () {
    gt_S3HybridSpawn3 = TriggerCreate("gt_S3HybridSpawn3_Func");
    TriggerAddEventUnitRegion(gt_S3HybridSpawn3, null, RegionFromId(86), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Shadow Island
//--------------------------------------------------------------------------------------------------
bool gt_S3ShadowIsland_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto918E5103_n;
    int auto918E5103_i;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentSection == 3))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_s3ShadowIslandUnitCap = libA3DDD02B_gf_DifficultyValuePrologueInteger(6, 6, 6, 6);
    auto918E5103_n = libA3DDD02B_gf_DifficultyValuePrologueInteger(2, 2, 3, 3);
    for (auto918E5103_i = 1; auto918E5103_i <= auto918E5103_n; auto918E5103_i += 1) {
        if ((UnitGroupCount(gv_s3ShadowIslandUnits, c_unitCountAlive) >= gv_s3ShadowIslandUnitCap)) {
            while (!((UnitGroupCount(gv_s3ShadowIslandUnits, c_unitCountAlive) < gv_s3ShadowIslandUnitCap))) {
                Wait(0.5, c_timeGame);
            }
        }

        gf_ResidualVortexSpawnUnitAtPoint("ShadowOfTheVoidZealot", gv_s3ResidualVortexForwardUnit02, PointFromId(1233));
        Wait(0.25, c_timeGame);
        gf_ResidualVortexSpawnUnitAtPoint("ShadowOfTheVoidZealot", gv_s3ResidualVortexForwardUnit02, PointFromId(1235));
        Wait(0.25, c_timeGame);
        gf_ResidualVortexSpawnUnitAtPoint("ShadowOfTheVoidZealot", gv_s3ResidualVortexForwardUnit02, PointFromId(1236));
        Wait(0.5, c_timeGame);
        gf_ResidualVortexSpawnUnitAtPoint("ShadowOfTheVoidStalker", gv_s3ResidualVortexForwardUnit02, PointFromId(1237));
        Wait(0.25, c_timeGame);
        gf_ResidualVortexSpawnUnitAtPoint("ShadowOfTheVoidStalker", gv_s3ResidualVortexForwardUnit02, PointFromId(1238));
        Wait(0.25, c_timeGame);
        gf_ResidualVortexSpawnUnitAtPoint("ShadowOfTheVoidStalker", gv_s3ResidualVortexForwardUnit02, PointFromId(1239));
        Wait(0.5, c_timeGame);
        gf_ResidualVortexSpawnUnitAtPoint("ShadowOfTheVoidArchon", gv_s3ResidualVortexForwardUnit02, PointFromId(1230));
        Wait(0.25, c_timeGame);
        gf_ResidualVortexSpawnUnitAtPoint("ShadowOfTheVoidArchon", gv_s3ResidualVortexForwardUnit02, PointFromId(1232));
        Wait(4.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3ShadowIsland_Init () {
    gt_S3ShadowIsland = TriggerCreate("gt_S3ShadowIsland_Func");
    TriggerAddEventUnitRegion(gt_S3ShadowIsland, null, RegionFromId(160), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Escape Route Clear Q
//--------------------------------------------------------------------------------------------------
bool gt_S3EscapeRouteClearQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_currentSection == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        Wait(1.0, c_timeAI);
        if (((gv_gameOver == true) || (ObjectiveGetState(gv_objective_Escape) == c_objectiveStateCompleted) || (gv_currentSection != 3))) {
            return true;
        }

        if ((libNtve_gf_UnitInRegion(gv_zeratul, RegionFromId(100)) == true)) {
            TriggerQueueEnter();
            if (((gv_gameOver == true) || (ObjectiveGetState(gv_objective_Escape) == c_objectiveStateCompleted) || (gv_currentSection != 3))) {
                return true;
            }

            libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Speech);
            libA3DDD02B_gf_SendTransmissionCampaign(gv_zeratul, "pMission_VoidPrologue03|Line00051", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Game);
            TriggerQueueExit();
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3EscapeRouteClearQ_Init () {
    gt_S3EscapeRouteClearQ = TriggerCreate("gt_S3EscapeRouteClearQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Hybrid & Shadow Spawn 1
//--------------------------------------------------------------------------------------------------
bool gt_S3HybridShadowSpawn1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto84C79C16_ae = 6;
    const int auto84C79C16_ai = 1;
    const int auto912F2A36_ae = 10;
    const int auto912F2A36_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentSection == 3))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_WarpInHybridDestroyeratPoint(PointFromId(1244));
    lv_i = 1;
    for ( ; ( (auto84C79C16_ai >= 0 && lv_i <= auto84C79C16_ae) || (auto84C79C16_ai < 0 && lv_i >= auto84C79C16_ae) ) ; lv_i += auto84C79C16_ai ) {
        gf_ResidualVortexSpawnUnitAtPoint("ShadowOfTheVoidZealot", gv_s3ResidualVortexForwardUnit03, PointFromName(("S3 - Shadow Spawns 5-" + IntToString(lv_i))));
        Wait(0.25, c_timeGame);
    }
    lv_i = 7;
    for ( ; ( (auto912F2A36_ai >= 0 && lv_i <= auto912F2A36_ae) || (auto912F2A36_ai < 0 && lv_i >= auto912F2A36_ae) ) ; lv_i += auto912F2A36_ai ) {
        gf_ResidualVortexSpawnUnitAtPoint("ShadowOfTheVoidStalker", gv_s3ResidualVortexForwardUnit03, PointFromName(("S3 - Shadow Spawns 5-" + IntToString(lv_i))));
        Wait(0.25, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3HybridShadowSpawn1_Init () {
    gt_S3HybridShadowSpawn1 = TriggerCreate("gt_S3HybridShadowSpawn1_Func");
    TriggerAddEventUnitRegion(gt_S3HybridShadowSpawn1, null, RegionFromId(92), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Hybrid & Shadow Spawn 2
//--------------------------------------------------------------------------------------------------
bool gt_S3HybridShadowSpawn2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int autoBC1706EE_ae = 3;
    const int autoBC1706EE_ai = 1;
    int auto254CB408_ae;
    const int auto254CB408_ai = 1;
    const int auto9E2CBBDF_ae = 11;
    const int auto9E2CBBDF_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentSection == 3))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_DropInHybridReaveratPoint(PointFromId(1246));
    lv_i = 1;
    for ( ; ( (autoBC1706EE_ai >= 0 && lv_i <= autoBC1706EE_ae) || (autoBC1706EE_ai < 0 && lv_i >= autoBC1706EE_ae) ) ; lv_i += autoBC1706EE_ai ) {
        gf_ResidualVortexSpawnUnitAtPoint("ShadowOfTheVoidStalker", gv_s3ResidualVortexForwardUnit03, PointFromName(("S3 - Shadow Spawns 6-" + IntToString(lv_i))));
        Wait(0.25, c_timeGame);
    }
    auto254CB408_ae = libA3DDD02B_gf_DifficultyValuePrologueInteger(7, 7, 9, 9);
    lv_i = 4;
    for ( ; ( (auto254CB408_ai >= 0 && lv_i <= auto254CB408_ae) || (auto254CB408_ai < 0 && lv_i >= auto254CB408_ae) ) ; lv_i += auto254CB408_ai ) {
        gf_ResidualVortexSpawnUnitAtPoint("ShadowOfTheVoidZealot", gv_s3ResidualVortexForwardUnit03, PointFromName(("S3 - Shadow Spawns 6-" + IntToString(lv_i))));
        Wait(0.25, c_timeGame);
    }
    if ((libA3DDD02B_gf_DifficultyValuePrologueInteger(0, 0, 1, 1) == 1)) {
        lv_i = 10;
        for ( ; ( (auto9E2CBBDF_ai >= 0 && lv_i <= auto9E2CBBDF_ae) || (auto9E2CBBDF_ai < 0 && lv_i >= auto9E2CBBDF_ae) ) ; lv_i += auto9E2CBBDF_ai ) {
            gf_ResidualVortexSpawnUnitAtPoint("ShadowOfTheVoidStalker", gv_s3ResidualVortexForwardUnit03, PointFromName(("S3 - Shadow Spawns 6-" + IntToString(lv_i))));
            Wait(0.25, c_timeGame);
        }
    }

    Wait(libA3DDD02B_gf_DifficultyValuePrologueReal(8.0, 8.0, 6.0, 4.0), c_timeGame);
    gf_DropInHybridReaveratPoint(PointFromId(1264));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3HybridShadowSpawn2_Init () {
    gt_S3HybridShadowSpawn2 = TriggerCreate("gt_S3HybridShadowSpawn2_Func");
    TriggerAddEventUnitRegion(gt_S3HybridShadowSpawn2, null, RegionFromId(93), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Warp Prism
//--------------------------------------------------------------------------------------------------
bool gt_S3WarpPrism_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_powerSource;
    unit lv_superWarpGate;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_powerSource = UnitFromId(1589);
    lv_superWarpGate = UnitFromId(521);

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentSection == 3))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_S3WarpPrismHurryQ, true, false);
    if ((libA3DDD02B_gf_DifficultyValuePrologueInteger(1, 1, 0, 0) == 1)) {
        UnitIssueOrder(lv_superWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointFromId(1282)), c_orderQueueReplace);
        Wait(0.5, c_timeAI);
        if ((UnitIsAlive(lv_powerSource) == false)) {
            return true;
        }

        UnitIssueOrder(lv_superWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointFromId(1283)), c_orderQueueReplace);
    }

    Wait(0.5, c_timeAI);
    if ((UnitIsAlive(lv_powerSource) == false)) {
        return true;
    }

    UnitIssueOrder(lv_superWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointFromId(1284)), c_orderQueueReplace);
    if ((libA3DDD02B_gf_DifficultyValuePrologueInteger(0, 0, 1, 1) == 1)) {
        Wait(0.5, c_timeAI);
        if ((UnitIsAlive(lv_powerSource) == false)) {
            return true;
        }

        UnitIssueOrder(lv_superWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 2), PointFromId(1285)), c_orderQueueReplace);
    }

    if ((libA3DDD02B_gf_DifficultyValuePrologueInteger(0, 0, 0, 1) == 1)) {
        Wait(0.5, c_timeAI);
        if ((UnitIsAlive(lv_powerSource) == false)) {
            return true;
        }

        UnitIssueOrder(lv_superWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 15), PointFromId(1285)), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3WarpPrism_Init () {
    gt_S3WarpPrism = TriggerCreate("gt_S3WarpPrism_Func");
    TriggerAddEventUnitRegion(gt_S3WarpPrism, null, RegionFromId(91), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Warp Prism Hurry Q
//--------------------------------------------------------------------------------------------------
bool gt_S3WarpPrismHurryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_currentSection == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(1.0, c_timeReal);
    TriggerQueueEnter();
    if (((gv_gameOver == true) || (gv_currentSection != 3))) {
        return true;
    }

    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Speech);
    libA3DDD02B_gf_SendTransmissionCampaign(null, "pMission_VoidPrologue03|Line00052", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3WarpPrismHurryQ_Init () {
    gt_S3WarpPrismHurryQ = TriggerCreate("gt_S3WarpPrismHurryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Final Stretch
//--------------------------------------------------------------------------------------------------
bool gt_S3FinalStretch_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto6541A5E9_g;
    int auto6541A5E9_u;
    unit auto6541A5E9_var;
    unitgroup auto5D0D2C66_g;
    int auto5D0D2C66_u;
    unit auto5D0D2C66_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentSection == 3))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(1, RegionFromId(163), 0.0, false);
    PlayerSetAlliance(gv_pLAYER_07_TALIS, c_allianceIdPushable, gv_pLAYER_01_USER, true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, false);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "VP03_Music_ErisEscape", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    auto6541A5E9_g = gv_s3FinalStretchEnemyGroupCombined;
    auto6541A5E9_u = UnitGroupCount(auto6541A5E9_g, c_unitCountAll);
    for (;; auto6541A5E9_u -= 1) {
        auto6541A5E9_var = UnitGroupUnitFromEnd(auto6541A5E9_g, auto6541A5E9_u);
        if (auto6541A5E9_var == null) { break; }
        libNtve_gf_PauseUnit(auto6541A5E9_var, false);
        libNtve_gf_ShowHideUnit(auto6541A5E9_var, true);
    }
    auto5D0D2C66_g = gv_s3FinalStretchTalisGroupCombined;
    auto5D0D2C66_u = UnitGroupCount(auto5D0D2C66_g, c_unitCountAll);
    for (;; auto5D0D2C66_u -= 1) {
        auto5D0D2C66_var = UnitGroupUnitFromEnd(auto5D0D2C66_g, auto5D0D2C66_u);
        if (auto5D0D2C66_var == null) { break; }
        libNtve_gf_PauseUnit(auto5D0D2C66_var, false);
        libNtve_gf_ShowHideUnit(auto5D0D2C66_var, true);
    }
    TriggerExecute(gt_S3FinalStretchEnemyAI, true, false);
    TriggerExecute(gt_S3FinalStretchTalisAI, true, false);
    TriggerEnable(gt_S3FinalStretchTalisSpawns1, true);
    TriggerEnable(gt_S3FinalStretchTalisSpawns2, true);
    TriggerEnable(gt_S3FinalStretchEnemySpawns1, true);
    TriggerEnable(gt_S3FinalStretchEnemySpawns2, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3FinalStretch_Init () {
    gt_S3FinalStretch = TriggerCreate("gt_S3FinalStretch_Func");
    TriggerAddEventUnitRegion(gt_S3FinalStretch, null, RegionFromId(163), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Final Stretch Talis Sacrifice Q
//--------------------------------------------------------------------------------------------------
bool gt_S3FinalStretchTalisSacrificeQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentSection == 3))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Speech);
    libA3DDD02B_gf_SendTransmissionCampaign(gv_talis, "pMission_VoidPrologue03|Line00061", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libA3DDD02B_gf_SendTransmissionCampaign(gv_zeratul, "pMission_VoidPrologue03|Line00104", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libA3DDD02B_gf_SendTransmissionCampaign(gv_talis, "pMission_VoidPrologue03|Line00105", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3FinalStretchTalisSacrificeQ_Init () {
    gt_S3FinalStretchTalisSacrificeQ = TriggerCreate("gt_S3FinalStretchTalisSacrificeQ_Func");
    TriggerAddEventUnitRegion(gt_S3FinalStretchTalisSacrificeQ, null, RegionFromId(165), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Final Stretch Enemy AI
//--------------------------------------------------------------------------------------------------
bool gt_S3FinalStretchEnemyAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_attackTargets;
    unitgroup lv_validTargets;
    unit lv_currentUnit;

    // Automatic Variable Declarations
    unitgroup autoB0D64614_g;
    int autoB0D64614_u;
    unit autoB0D64614_var;
    unitgroup auto938C084D_g;
    int auto938C084D_u;

    // Variable Initialization
    lv_attackTargets = UnitGroupEmpty();
    lv_validTargets = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    while ((gv_gameOver == false)) {
        if ((gv_inCinematic == false)) {
            lv_attackTargets = UnitGroupAlliance(gv_pLAYER_02_TALDARIM, c_unitAllianceEnemy, RegionFromId(163), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            UnitGroupRemove(lv_attackTargets, gv_zeratul);
            autoB0D64614_g = gv_s3FinalStretchEnemyGroupCombined;
            autoB0D64614_u = UnitGroupCount(autoB0D64614_g, c_unitCountAll);
            for (;; autoB0D64614_u -= 1) {
                autoB0D64614_var = UnitGroupUnitFromEnd(autoB0D64614_g, autoB0D64614_u);
                if (autoB0D64614_var == null) { break; }
                lv_validTargets = UnitGroupEmpty();
                auto938C084D_g = lv_attackTargets;
                auto938C084D_u = UnitGroupCount(auto938C084D_g, c_unitCountAll);
                for (;; auto938C084D_u -= 1) {
                    lv_currentUnit = UnitGroupUnitFromEnd(auto938C084D_g, auto938C084D_u);
                    if (lv_currentUnit == null) { break; }
                    if ((PointPathingIsConnected(UnitGetPosition(autoB0D64614_var), UnitGetPosition(lv_currentUnit)) == true)) {
                        UnitGroupAdd(lv_validTargets, lv_currentUnit);
                    }

                }
                if ((UnitGroupCount(lv_validTargets, c_unitCountAlive) > 0)) {
                    UnitIssueOrder(autoB0D64614_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(lv_validTargets, UnitGetPosition(autoB0D64614_var)))), c_orderQueueReplace);
                }

            }
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3FinalStretchEnemyAI_Init () {
    gt_S3FinalStretchEnemyAI = TriggerCreate("gt_S3FinalStretchEnemyAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Final Stretch Talis AI
//--------------------------------------------------------------------------------------------------
bool gt_S3FinalStretchTalisAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_attackTargets;
    unitgroup lv_validTargets;
    unit lv_currentUnit;

    // Automatic Variable Declarations
    unitgroup autoFA044A09_g;
    int autoFA044A09_u;
    unit autoFA044A09_var;
    unitgroup auto398F5ACC_g;
    int auto398F5ACC_u;

    // Variable Initialization
    lv_attackTargets = UnitGroupEmpty();
    lv_validTargets = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    while ((gv_gameOver == false)) {
        if ((gv_inCinematic == false)) {
            lv_attackTargets = UnitGroupAlliance(gv_pLAYER_07_TALIS, c_unitAllianceEnemy, RegionFromId(163), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoFA044A09_g = gv_s3FinalStretchTalisGroupCombined;
            autoFA044A09_u = UnitGroupCount(autoFA044A09_g, c_unitCountAll);
            for (;; autoFA044A09_u -= 1) {
                autoFA044A09_var = UnitGroupUnitFromEnd(autoFA044A09_g, autoFA044A09_u);
                if (autoFA044A09_var == null) { break; }
                lv_validTargets = UnitGroupEmpty();
                auto398F5ACC_g = lv_attackTargets;
                auto398F5ACC_u = UnitGroupCount(auto398F5ACC_g, c_unitCountAll);
                for (;; auto398F5ACC_u -= 1) {
                    lv_currentUnit = UnitGroupUnitFromEnd(auto398F5ACC_g, auto398F5ACC_u);
                    if (lv_currentUnit == null) { break; }
                    if ((PointPathingIsConnected(UnitGetPosition(autoFA044A09_var), UnitGetPosition(lv_currentUnit)) == true)) {
                        UnitGroupAdd(lv_validTargets, lv_currentUnit);
                    }

                }
                if ((UnitGroupCount(lv_validTargets, c_unitCountAlive) > 0)) {
                    UnitIssueOrder(autoFA044A09_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(lv_validTargets, UnitGetPosition(autoFA044A09_var)))), c_orderQueueReplace);
                }

            }
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3FinalStretchTalisAI_Init () {
    gt_S3FinalStretchTalisAI = TriggerCreate("gt_S3FinalStretchTalisAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Final Stretch Enemy Spawns 1
//--------------------------------------------------------------------------------------------------
bool gt_S3FinalStretchEnemySpawns1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_hybridCap;
    int lv_zealotCap;
    int lv_stalkerCap;
    int lv_archonCap;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_s3FinalStretchEscalation >= 2)) {
        lv_hybridCap = 3;
        lv_zealotCap = 6;
        lv_stalkerCap = 6;
        lv_archonCap = 3;
    }
    else {
        lv_hybridCap = 1;
        lv_zealotCap = 4;
        lv_stalkerCap = 3;
        lv_archonCap = 1;
    }
    if ((UnitGroupCount(UnitGroupFilter("HybridDestroyer", c_playerAny, gv_s3FinalStretchEnemyGroup1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) < lv_hybridCap)) {
        gf_WarpInHybridDestroyeratPoint(RegionRandomPoint(RegionFromId(166)));
        Wait(0.25, c_timeGame);
    }

    if ((UnitGroupCount(UnitGroupFilter("Zealot", c_playerAny, gv_s3FinalStretchEnemyGroup1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroupFilter("ShadowOfTheVoidZealot", c_playerAny, gv_s3FinalStretchEnemyGroup1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) < lv_zealotCap)) {
        gf_ResidualVortexSpawnUnitAtPoint("ShadowOfTheVoidZealot", gv_s3ResidualVortexForwardUnit02, RegionRandomPoint(RegionFromId(166)));
        Wait(0.25, c_timeGame);
    }

    if ((UnitGroupCount(UnitGroupFilter("Stalker", c_playerAny, gv_s3FinalStretchEnemyGroup1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroupFilter("ShadowOfTheVoidStalker", c_playerAny, gv_s3FinalStretchEnemyGroup1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) < lv_stalkerCap)) {
        gf_ResidualVortexSpawnUnitAtPoint("ShadowOfTheVoidStalker", gv_s3ResidualVortexForwardUnit02, RegionRandomPoint(RegionFromId(166)));
        Wait(0.25, c_timeGame);
    }

    if ((UnitGroupCount(UnitGroupFilter("Zealot", c_playerAny, gv_s3FinalStretchEnemyGroup1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroupFilter("Stalker", c_playerAny, gv_s3FinalStretchEnemyGroup1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroupFilter("ShadowOfTheVoidArchon", c_playerAny, gv_s3FinalStretchEnemyGroup1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) < lv_archonCap)) {
        gf_ResidualVortexSpawnUnitAtPoint("ShadowOfTheVoidArchon", gv_s3ResidualVortexForwardUnit02, RegionRandomPoint(RegionFromId(166)));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3FinalStretchEnemySpawns1_Init () {
    gt_S3FinalStretchEnemySpawns1 = TriggerCreate("gt_S3FinalStretchEnemySpawns1_Func");
    TriggerEnable(gt_S3FinalStretchEnemySpawns1, false);
    TriggerAddEventTimePeriodic(gt_S3FinalStretchEnemySpawns1, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Final Stretch Enemy Spawns 2
//--------------------------------------------------------------------------------------------------
bool gt_S3FinalStretchEnemySpawns2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_hybridCap;
    int lv_zealotCap;
    int lv_stalkerCap;
    int lv_archonCap;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_s3FinalStretchEscalation >= 1)) {
        lv_hybridCap = 3;
        lv_zealotCap = 6;
        lv_stalkerCap = 6;
        lv_archonCap = 3;
    }
    else {
        lv_hybridCap = 1;
        lv_zealotCap = 4;
        lv_stalkerCap = 3;
        lv_archonCap = 1;
    }
    if ((UnitGroupCount(UnitGroupFilter("HybridDestroyer", c_playerAny, gv_s3FinalStretchEnemyGroup2, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) < lv_hybridCap)) {
        gf_WarpInHybridDestroyeratPoint(RegionRandomPoint(RegionFromId(96)));
        Wait(0.25, c_timeGame);
    }

    if ((UnitGroupCount(UnitGroupFilter("Zealot", c_playerAny, gv_s3FinalStretchEnemyGroup2, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroupFilter("ShadowOfTheVoidZealot", c_playerAny, gv_s3FinalStretchEnemyGroup2, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) < lv_zealotCap)) {
        gf_ResidualVortexSpawnUnitAtPoint("ShadowOfTheVoidZealot", gv_s3ResidualVortexForwardUnit03, RegionRandomPoint(RegionFromId(96)));
        Wait(0.25, c_timeGame);
    }

    if ((UnitGroupCount(UnitGroupFilter("Stalker", c_playerAny, gv_s3FinalStretchEnemyGroup2, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroupFilter("ShadowOfTheVoidStalker", c_playerAny, gv_s3FinalStretchEnemyGroup2, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) < lv_stalkerCap)) {
        gf_ResidualVortexSpawnUnitAtPoint("ShadowOfTheVoidStalker", gv_s3ResidualVortexForwardUnit03, RegionRandomPoint(RegionFromId(96)));
        Wait(0.25, c_timeGame);
    }

    if ((UnitGroupCount(UnitGroupFilter("Zealot", c_playerAny, gv_s3FinalStretchEnemyGroup2, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroupFilter("Stalker", c_playerAny, gv_s3FinalStretchEnemyGroup2, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroupFilter("ShadowOfTheVoidArchon", c_playerAny, gv_s3FinalStretchEnemyGroup2, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) < lv_archonCap)) {
        gf_ResidualVortexSpawnUnitAtPoint("ShadowOfTheVoidArchon", gv_s3ResidualVortexForwardUnit03, RegionRandomPoint(RegionFromId(96)));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3FinalStretchEnemySpawns2_Init () {
    gt_S3FinalStretchEnemySpawns2 = TriggerCreate("gt_S3FinalStretchEnemySpawns2_Func");
    TriggerEnable(gt_S3FinalStretchEnemySpawns2, false);
    TriggerAddEventTimePeriodic(gt_S3FinalStretchEnemySpawns2, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Final Stretch Talis Spawns 1
//--------------------------------------------------------------------------------------------------
bool gt_S3FinalStretchTalisSpawns1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_zealotCount;
    int lv_stalkerCount;

    // Automatic Variable Declarations
    int auto30397A58_n;
    int auto30397A58_i;
    int autoB1C88168_n;
    int autoB1C88168_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(UnitFromId(1955)) == true)) {
        lv_zealotCount = UnitGroupCount(UnitGroupFilter("Zealot", c_playerAny, gv_s3FinalStretchTalisGroup1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive);
        if ((lv_zealotCount < 2)) {
            auto30397A58_n = (2 - lv_zealotCount);
            for (auto30397A58_i = 1; auto30397A58_i <= auto30397A58_n; auto30397A58_i += 1) {
                UnitIssueOrder(UnitFromId(467), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), RegionRandomPoint(RegionFromId(101))), c_orderQueueReplace);
            }
            Wait(0.25, c_timeGame);
        }

        lv_stalkerCount = UnitGroupCount(UnitGroupFilter("Stalker", c_playerAny, gv_s3FinalStretchTalisGroup1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive);
        if ((lv_stalkerCount < 2)) {
            autoB1C88168_n = (2 - lv_stalkerCount);
            for (autoB1C88168_i = 1; autoB1C88168_i <= autoB1C88168_n; autoB1C88168_i += 1) {
                UnitIssueOrder(UnitFromId(467), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), RegionRandomPoint(RegionFromId(101))), c_orderQueueReplace);
            }
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3FinalStretchTalisSpawns1_Init () {
    gt_S3FinalStretchTalisSpawns1 = TriggerCreate("gt_S3FinalStretchTalisSpawns1_Func");
    TriggerEnable(gt_S3FinalStretchTalisSpawns1, false);
    TriggerAddEventTimePeriodic(gt_S3FinalStretchTalisSpawns1, 7.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Final Stretch Talis Spawns 2
//--------------------------------------------------------------------------------------------------
bool gt_S3FinalStretchTalisSpawns2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_zealotCount;
    int lv_stalkerCount;

    // Automatic Variable Declarations
    int autoE08A6D44_n;
    int autoE08A6D44_i;
    int auto89B36459_n;
    int auto89B36459_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(UnitFromId(2057)) == true)) {
        lv_zealotCount = UnitGroupCount(UnitGroupFilter("Zealot", c_playerAny, gv_s3FinalStretchTalisGroup2, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive);
        if ((lv_zealotCount < 3)) {
            autoE08A6D44_n = (3 - lv_zealotCount);
            for (autoE08A6D44_i = 1; autoE08A6D44_i <= autoE08A6D44_n; autoE08A6D44_i += 1) {
                UnitIssueOrder(UnitFromId(467), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), RegionRandomPoint(RegionFromId(102))), c_orderQueueReplace);
            }
            Wait(0.25, c_timeGame);
        }

        lv_stalkerCount = UnitGroupCount(UnitGroupFilter("Stalker", c_playerAny, gv_s3FinalStretchTalisGroup2, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive);
        if ((lv_stalkerCount < 2)) {
            auto89B36459_n = (2 - lv_stalkerCount);
            for (auto89B36459_i = 1; auto89B36459_i <= auto89B36459_n; auto89B36459_i += 1) {
                UnitIssueOrder(UnitFromId(467), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), RegionRandomPoint(RegionFromId(102))), c_orderQueueReplace);
            }
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3FinalStretchTalisSpawns2_Init () {
    gt_S3FinalStretchTalisSpawns2 = TriggerCreate("gt_S3FinalStretchTalisSpawns2_Func");
    TriggerEnable(gt_S3FinalStretchTalisSpawns2, false);
    TriggerAddEventTimePeriodic(gt_S3FinalStretchTalisSpawns2, 6.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Final Stretch Escalation 1
//--------------------------------------------------------------------------------------------------
bool gt_S3FinalStretchEscalation1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentSection == 3))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_s3FinalStretchEscalation += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3FinalStretchEscalation1_Init () {
    gt_S3FinalStretchEscalation1 = TriggerCreate("gt_S3FinalStretchEscalation1_Func");
    TriggerAddEventUnitRegion(gt_S3FinalStretchEscalation1, null, RegionFromId(29), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Final Stretch Escalation 2
//--------------------------------------------------------------------------------------------------
bool gt_S3FinalStretchEscalation2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentSection == 3))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_s3FinalStretchEscalation += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3FinalStretchEscalation2_Init () {
    gt_S3FinalStretchEscalation2 = TriggerCreate("gt_S3FinalStretchEscalation2_Func");
    TriggerAddEventUnitRegion(gt_S3FinalStretchEscalation2, null, RegionFromId(30), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Final Stretch Unit Construction Completed
//--------------------------------------------------------------------------------------------------
bool gt_S3FinalStretchUnitConstructionCompleted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_targetRegion;
    unit lv_constructedUnit;

    // Automatic Variable Declarations
    int auto93CB964C_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_03_AMON) || (UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_07_TALIS)))) {
            return false;
        }

        if (!((RegionContainsPoint(RegionFromId(163), UnitGetPosition(EventUnitProgressUnit())) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_constructedUnit = EventUnitProgressUnit();
    auto93CB964C_val = EventPlayer();
    if (auto93CB964C_val == gv_pLAYER_03_AMON) {
        if (((EventUnit() == gv_s3ResidualVortexForwardUnit02) || (RegionContainsPoint(RegionFromId(103), UnitGetPosition(lv_constructedUnit)) == true))) {
            UnitGroupAdd(gv_s3FinalStretchEnemyGroup1, lv_constructedUnit);
        }
        else {
            if (((EventUnit() == gv_s3ResidualVortexForwardUnit03) || (RegionContainsPoint(RegionFromId(104), UnitGetPosition(lv_constructedUnit)) == true))) {
                UnitGroupAdd(gv_s3FinalStretchEnemyGroup2, lv_constructedUnit);
            }

        }
        UnitGroupAdd(gv_s3FinalStretchEnemyGroupCombined, lv_constructedUnit);
    }
    else if (auto93CB964C_val == gv_pLAYER_07_TALIS) {
        if ((RegionContainsPoint(RegionFromId(101), UnitGetPosition(lv_constructedUnit)) == true)) {
            UnitGroupAdd(gv_s3FinalStretchTalisGroup1, lv_constructedUnit);
            lv_targetRegion = RegionFromId(97);
        }
        else {
            UnitGroupAdd(gv_s3FinalStretchTalisGroup2, lv_constructedUnit);
            lv_targetRegion = RegionFromId(98);
        }
        UnitIssueOrder(lv_constructedUnit, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(lv_targetRegion)), c_orderQueueReplace);
        while (!(((libNtve_gf_UnitInRegion(lv_constructedUnit, lv_targetRegion) == true) || (UnitGetPropertyFixed(lv_constructedUnit, c_unitPropVitalityPercent, c_unitPropCurrent) < 100.0)))) {
            Wait(1.0, c_timeGame);
        }
        UnitIssueOrder(lv_constructedUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitGroupAdd(gv_s3FinalStretchTalisGroupCombined, lv_constructedUnit);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3FinalStretchUnitConstructionCompleted_Init () {
    gt_S3FinalStretchUnitConstructionCompleted = TriggerCreate("gt_S3FinalStretchUnitConstructionCompleted_Func");
    TriggerAddEventUnitConstructProgress(gt_S3FinalStretchUnitConstructionCompleted, null, c_unitProgressStageComplete);
    TriggerAddEventUnitTrainProgress(gt_S3FinalStretchUnitConstructionCompleted, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Final Collapse
//--------------------------------------------------------------------------------------------------
bool gt_S3FinalCollapse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    actor[9] lv_earthquakeDebris;

    // Automatic Variable Declarations
    const int auto359D9209_ae = 4;
    const int auto359D9209_ai = 1;
    const int auto54063B10_ae = 4;
    const int auto54063B10_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CameraShake(gv_pLAYER_01_USER, "Massive", "Earthquake", 0.0, 1.0, 4.0);
    SoundPlay(SoundLink("VP03_AmbientTurmoil2", -1), PlayerGroupAll(), 80.0, 0.0);
    lv_i = 1;
    for ( ; ( (auto359D9209_ai >= 0 && lv_i <= auto359D9209_ae) || (auto359D9209_ai < 0 && lv_i >= auto359D9209_ae) ) ; lv_i += auto359D9209_ai ) {
        libNtve_gf_CreateModelAtPoint("SpaceFallingDebris", PointWithOffsetPolar(UnitGetPosition(gv_zeratul), 8.0, (90*lv_i)));
        lv_earthquakeDebris[lv_i] = libNtve_gf_ActorLastCreated();
    }
    Wait(3.0, c_timeGame);
    lv_i = 1;
    for ( ; ( (auto54063B10_ai >= 0 && lv_i <= auto54063B10_ae) || (auto54063B10_ai < 0 && lv_i >= auto54063B10_ae) ) ; lv_i += auto54063B10_ai ) {
        libNtve_gf_KillModel(lv_earthquakeDebris[lv_i]);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3FinalCollapse_Init () {
    gt_S3FinalCollapse = TriggerCreate("gt_S3FinalCollapse_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_S3Cleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto34E4EB26_g;
    int auto34E4EB26_u;
    unit auto34E4EB26_var;
    unitgroup auto8FB32104_g;
    int auto8FB32104_u;
    unit auto8FB32104_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto34E4EB26_g = UnitGroup(null, gv_pLAYER_02_TALDARIM, RegionFromId(127), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto34E4EB26_u = UnitGroupCount(auto34E4EB26_g, c_unitCountAll);
    for (;; auto34E4EB26_u -= 1) {
        auto34E4EB26_var = UnitGroupUnitFromEnd(auto34E4EB26_g, auto34E4EB26_u);
        if (auto34E4EB26_var == null) { break; }
        UnitRemove(auto34E4EB26_var);
    }
    auto8FB32104_g = UnitGroup(null, gv_pLAYER_03_AMON, RegionFromId(127), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8FB32104_u = UnitGroupCount(auto8FB32104_g, c_unitCountAll);
    for (;; auto8FB32104_u -= 1) {
        auto8FB32104_var = UnitGroupUnitFromEnd(auto8FB32104_g, auto8FB32104_u);
        if (auto8FB32104_var == null) { break; }
        UnitRemove(auto8FB32104_var);
    }
    TriggerEnable(gt_S3AmbientTurmoil, false);
    TriggerEnable(gt_S3EscapeTimer, false);
    TriggerEnable(gt_S3EscapeRouteBlocked1Q, false);
    TriggerEnable(gt_S3EscapeRouteClearQ, false);
    TriggerEnable(gt_S3WarpPrismHurryQ, false);
    DialogSetVisible(gv_s3EscapeDialog, PlayerGroupAll(), false);
    CameraShakeStop(gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3Cleanup_Init () {
    gt_S3Cleanup = TriggerCreate("gt_S3Cleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BO - Unit Enters Bonus Objective Reveal
//--------------------------------------------------------------------------------------------------
bool gt_BOUnitEntersBonusObjectiveReveal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libA3DDD02B_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/0DA29BB8"));
    TriggerExecute(gt_ParticleCannonTargetLoop01, true, false);
    TriggerExecute(gt_ParticleCannonTargetLoop02, true, false);
    TriggerExecute(gt_ParticleCannonTargetLoop03, true, false);
    TriggerExecute(gt_BOOutsideTerrace01, true, false);
    TriggerExecute(gt_BOOutsideTerrace02, true, false);
    TriggerExecute(gt_BOOutsideTerrace03, true, false);
    TriggerExecute(gt_BODiscoverParticleCannonLocationsQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BOUnitEntersBonusObjectiveReveal_Init () {
    gt_BOUnitEntersBonusObjectiveReveal = TriggerCreate("gt_BOUnitEntersBonusObjectiveReveal_Func");
    TriggerAddEventUnitRegion(gt_BOUnitEntersBonusObjectiveReveal, null, RegionFromId(16), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: BO - Discover Particle Cannon Locations Q
//--------------------------------------------------------------------------------------------------
bool gt_BODiscoverParticleCannonLocationsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!(((gv_currentSection == 1) || (gv_currentSection == 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if (((gv_currentSection == 3) || (gv_gameOver == true))) {
        return true;
    }

    TriggerExecute(gt_ObjectiveDestroyParticleCannonsCreate, true, true);
    libA3DDD02B_gf_CreateObjectivePing(false, PointFromId(560), StringExternal("Param/Value/A08E36A6"));
    gv_particleCannonPing01 = PingLastCreated();
    libA3DDD02B_gf_CreateObjectivePing(false, PointFromId(914), StringExternal("Param/Value/F31974D8"));
    gv_particleCannonPing02 = PingLastCreated();
    libA3DDD02B_gf_CreateObjectivePing(false, PointFromId(561), StringExternal("Param/Value/517E0999"));
    gv_particleCannonPing03 = PingLastCreated();
    Wait(2.0, c_timeGame);
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Speech);
    libA3DDD02B_gf_SendTransmissionCampaign(null, "pMission_VoidPrologue03|Line00091", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BODiscoverParticleCannonLocationsQ_Init () {
    gt_BODiscoverParticleCannonLocationsQ = TriggerCreate("gt_BODiscoverParticleCannonLocationsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BO - Outside Terrace 01
//--------------------------------------------------------------------------------------------------
bool gt_BOOutsideTerrace01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_warpPrism;

    // Automatic Variable Declarations
    const int auto8C2DEC3E_n = 3;
    int auto8C2DEC3E_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!(((gv_currentSection == 1) || (gv_currentSection == 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(1.0, c_timeAI);
    while (true) {
        if (((gv_gameOver == true) || (gv_currentSection == 3))) {
            PingDestroy(gv_particleCannonPing01);
            gf_BOFlyAwayWarpPrism(lv_warpPrism, RegionFromId(22));
            return true;
        }

        if ((UnitIsAlive(gv_particleCannon01) == false)) {
            PingDestroy(gv_particleCannonPing01);
            TriggerExecute(gt_BOParticleCannon01DestroyedQ, true, false);
            break;
        }

        Wait(0.5, c_timeAI);
    }
    libNtve_gf_UnitCreateFacingPoint(1, "WarpPrism", 0, gv_pLAYER_01_USER, RegionGetCenter(RegionFromId(22)), PointFromId(560));
    lv_warpPrism = UnitLastCreated();
    UnitSetState(lv_warpPrism, c_unitStateInvulnerable, true);
    UnitSetState(lv_warpPrism, c_unitStateTooltipable, false);
    UnitSetState(lv_warpPrism, c_unitStateSelectable, false);
    UnitSetState(lv_warpPrism, c_unitStateTargetable, false);
    UnitSetState(lv_warpPrism, c_unitStateCursorable, false);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    while (true) {
        if (((gv_gameOver == true) || (gv_currentSection == 3))) {
            PingDestroy(gv_particleCannonPing01);
            gf_BOFlyAwayWarpPrism(lv_warpPrism, RegionFromId(22));
            return true;
        }

        if ((UnitGetType(lv_warpPrism) == "WarpPrismPhasing")) {
            break;
        }
        else {
            UnitIssueOrder(lv_warpPrism, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(562)), c_orderQueueReplace);
            UnitIssueOrder(lv_warpPrism, Order(AbilityCommand("PhasingMode", 0)), c_orderQueueAddToEnd);
        }
        Wait(0.5, c_timeAI);
    }
    for (auto8C2DEC3E_i = 1; auto8C2DEC3E_i <= auto8C2DEC3E_n; auto8C2DEC3E_i += 1) {
        UnitIssueOrder(UnitFromId(565), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), RegionRandomPoint(RegionFromId(24))), c_orderQueueReplace);
        Wait(0.25, c_timeGame);
    }
    Wait(7.0, c_timeAI);
    gf_BOFlyAwayWarpPrism(lv_warpPrism, RegionFromId(22));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BOOutsideTerrace01_Init () {
    gt_BOOutsideTerrace01 = TriggerCreate("gt_BOOutsideTerrace01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BO - Outside Terrace 02
//--------------------------------------------------------------------------------------------------
bool gt_BOOutsideTerrace02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_warpPrism;

    // Automatic Variable Declarations
    const int auto30329511_n = 2;
    int auto30329511_i;
    const int autoD7CD8A4A_n = 2;
    int autoD7CD8A4A_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!(((gv_currentSection == 1) || (gv_currentSection == 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(1.0, c_timeAI);
    while (true) {
        if (((gv_gameOver == true) || (gv_currentSection == 3))) {
            PingDestroy(gv_particleCannonPing02);
            gf_BOFlyAwayWarpPrism(lv_warpPrism, RegionFromId(65));
            return true;
        }

        if ((UnitIsAlive(gv_particleCannon02) == false)) {
            PingDestroy(gv_particleCannonPing02);
            TriggerExecute(gt_BOParticleCannon02DestroyedQ, true, false);
            break;
        }

        Wait(0.5, c_timeAI);
    }
    libNtve_gf_UnitCreateFacingPoint(1, "WarpPrism", 0, gv_pLAYER_01_USER, RegionGetCenter(RegionFromId(65)), PointFromId(914));
    lv_warpPrism = UnitLastCreated();
    UnitSetState(lv_warpPrism, c_unitStateInvulnerable, true);
    UnitSetState(lv_warpPrism, c_unitStateTooltipable, false);
    UnitSetState(lv_warpPrism, c_unitStateSelectable, false);
    UnitSetState(lv_warpPrism, c_unitStateTargetable, false);
    UnitSetState(lv_warpPrism, c_unitStateCursorable, false);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    while (true) {
        if (((gv_gameOver == true) || (gv_currentSection == 3))) {
            PingDestroy(gv_particleCannonPing02);
            gf_BOFlyAwayWarpPrism(lv_warpPrism, RegionFromId(65));
            return true;
        }

        if ((UnitGetType(lv_warpPrism) == "WarpPrismPhasing")) {
            break;
        }
        else {
            UnitIssueOrder(lv_warpPrism, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(915)), c_orderQueueReplace);
            UnitIssueOrder(lv_warpPrism, Order(AbilityCommand("PhasingMode", 0)), c_orderQueueAddToEnd);
        }
        Wait(0.5, c_timeAI);
    }
    for (auto30329511_i = 1; auto30329511_i <= auto30329511_n; auto30329511_i += 1) {
        UnitIssueOrder(UnitFromId(565), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), RegionRandomPoint(RegionFromId(64))), c_orderQueueReplace);
        Wait(0.25, c_timeGame);
    }
    for (autoD7CD8A4A_i = 1; autoD7CD8A4A_i <= autoD7CD8A4A_n; autoD7CD8A4A_i += 1) {
        UnitIssueOrder(UnitFromId(565), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 3), RegionRandomPoint(RegionFromId(64))), c_orderQueueReplace);
        Wait(0.25, c_timeGame);
    }
    Wait(7.0, c_timeAI);
    gf_BOFlyAwayWarpPrism(lv_warpPrism, RegionFromId(65));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BOOutsideTerrace02_Init () {
    gt_BOOutsideTerrace02 = TriggerCreate("gt_BOOutsideTerrace02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BO - Outside Terrace 03
//--------------------------------------------------------------------------------------------------
bool gt_BOOutsideTerrace03_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_firstReinforcements;
    unit lv_warpPrism;
    bool lv_skipReinforcements;

    // Automatic Variable Declarations
    const int autoDEA42335_n = 2;
    int autoDEA42335_i;
    const int auto2FD10033_n = 2;
    int auto2FD10033_i;

    // Variable Initialization
    lv_firstReinforcements = true;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!(((gv_currentSection == 1) || (gv_currentSection == 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(1.0, c_timeAI);
    lv_skipReinforcements = false;
    while (true) {
        if (((gv_gameOver == true) || (gv_currentSection == 3))) {
            PingDestroy(gv_particleCannonPing03);
            gf_BOFlyAwayWarpPrism(lv_warpPrism, RegionFromId(23));
            return true;
        }

        if ((UnitIsAlive(gv_particleCannon03) == false)) {
            PingDestroy(gv_particleCannonPing03);
            TriggerExecute(gt_BOParticleCannon03DestroyedQ, true, false);
            break;
        }

        Wait(0.5, c_timeAI);
    }
    if ((lv_skipReinforcements == false)) {
        libNtve_gf_UnitCreateFacingPoint(1, "WarpPrism", 0, gv_pLAYER_01_USER, RegionGetCenter(RegionFromId(23)), PointFromId(561));
        lv_warpPrism = UnitLastCreated();
        UnitSetState(lv_warpPrism, c_unitStateInvulnerable, true);
        UnitSetState(lv_warpPrism, c_unitStateTooltipable, false);
        UnitSetState(lv_warpPrism, c_unitStateSelectable, false);
        UnitSetState(lv_warpPrism, c_unitStateTargetable, false);
        UnitSetState(lv_warpPrism, c_unitStateCursorable, false);
        PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
        PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 10000);
        while (true) {
            if (((gv_gameOver == true) || (gv_currentSection == 3))) {
                PingDestroy(gv_particleCannonPing03);
                gf_BOFlyAwayWarpPrism(lv_warpPrism, RegionFromId(23));
                return true;
            }

            if ((UnitGetType(lv_warpPrism) == "WarpPrismPhasing")) {
                break;
            }
            else {
                UnitIssueOrder(lv_warpPrism, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(563)), c_orderQueueReplace);
                UnitIssueOrder(lv_warpPrism, Order(AbilityCommand("PhasingMode", 0)), c_orderQueueAddToEnd);
            }
            Wait(0.5, c_timeAI);
        }
        for (autoDEA42335_i = 1; autoDEA42335_i <= autoDEA42335_n; autoDEA42335_i += 1) {
            UnitIssueOrder(UnitFromId(565), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), RegionRandomPoint(RegionFromId(25))), c_orderQueueReplace);
            Wait(0.25, c_timeGame);
        }
        for (auto2FD10033_i = 1; auto2FD10033_i <= auto2FD10033_n; auto2FD10033_i += 1) {
            UnitIssueOrder(UnitFromId(565), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 3), RegionRandomPoint(RegionFromId(25))), c_orderQueueReplace);
            Wait(0.25, c_timeGame);
        }
        Wait(7.0, c_timeAI);
        gf_BOFlyAwayWarpPrism(lv_warpPrism, RegionFromId(23));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BOOutsideTerrace03_Init () {
    gt_BOOutsideTerrace03 = TriggerCreate("gt_BOOutsideTerrace03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BO - Player Nears Terrace 02 Q
//--------------------------------------------------------------------------------------------------
bool gt_BOPlayerNearsTerrace02Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Speech);
    libA3DDD02B_gf_SendTransmissionCampaign(gv_zeratul, "pMission_VoidPrologue03|Line00119", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BOPlayerNearsTerrace02Q_Init () {
    gt_BOPlayerNearsTerrace02Q = TriggerCreate("gt_BOPlayerNearsTerrace02Q_Func");
    TriggerAddEventUnitRegion(gt_BOPlayerNearsTerrace02Q, null, RegionFromId(66), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: BO - Player Nears Terrace 03 Q
//--------------------------------------------------------------------------------------------------
bool gt_BOPlayerNearsTerrace03Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Speech);
    libA3DDD02B_gf_SendTransmissionCampaign(gv_zeratul, "pMission_VoidPrologue03|Line00118", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BOPlayerNearsTerrace03Q_Init () {
    gt_BOPlayerNearsTerrace03Q = TriggerCreate("gt_BOPlayerNearsTerrace03Q_Func");
    TriggerAddEventUnitRegion(gt_BOPlayerNearsTerrace03Q, null, RegionFromId(136), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: BO - Particle Cannon 01 Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_BOParticleCannon01DestroyedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto93A0B3C1_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!(((gv_currentSection == 1) || (gv_currentSection == 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_particleCannonsDestroyed += 1;
    TriggerExecute(gt_ObjectiveDestroyParticleCannonsUpdate, true, false);
    if ((gv_particleCannonsDestroyed == 3)) {
        TriggerExecute(gt_ObjectiveDestroyParticleCannonsComplete, true, false);
    }

    TriggerQueueEnter();
    if (((gv_gameOver == true) || (gv_currentSection == 3))) {
        return true;
    }

    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/0B702142"), null, PointFromId(560));
    libA3DDD02B_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(560), 2.0, Color(0.00, 100.00, 0.00));
    Wait(2.0, c_timeGame);
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Speech);
    auto93A0B3C1_val = gv_particleCannonsDestroyed;
    if (auto93A0B3C1_val == 1) {
        libA3DDD02B_gf_SendTransmissionCampaign(null, "pMission_VoidPrologue03|Line00071", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto93A0B3C1_val == 2) {
        libA3DDD02B_gf_SendTransmissionCampaign(null, "pMission_VoidPrologue03|Line00072", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto93A0B3C1_val == 3) {
        libA3DDD02B_gf_SendTransmissionCampaign(null, "pMission_VoidPrologue03|Line00073", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BOParticleCannon01DestroyedQ_Init () {
    gt_BOParticleCannon01DestroyedQ = TriggerCreate("gt_BOParticleCannon01DestroyedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BO - Particle Cannon 02 Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_BOParticleCannon02DestroyedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto55F86500_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!(((gv_currentSection == 1) || (gv_currentSection == 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_particleCannonsDestroyed += 1;
    TriggerExecute(gt_ObjectiveDestroyParticleCannonsUpdate, true, false);
    if ((gv_particleCannonsDestroyed == 3)) {
        TriggerExecute(gt_ObjectiveDestroyParticleCannonsComplete, true, false);
    }

    TriggerQueueEnter();
    if (((gv_gameOver == true) || (gv_currentSection == 3))) {
        return true;
    }

    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/7923BF8A"), null, PointFromId(914));
    libA3DDD02B_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(914), 2.0, Color(0.00, 100.00, 0.00));
    Wait(2.0, c_timeGame);
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Speech);
    auto55F86500_val = gv_particleCannonsDestroyed;
    if (auto55F86500_val == 1) {
        libA3DDD02B_gf_SendTransmissionCampaign(null, "pMission_VoidPrologue03|Line00071", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto55F86500_val == 2) {
        libA3DDD02B_gf_SendTransmissionCampaign(null, "pMission_VoidPrologue03|Line00072", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto55F86500_val == 3) {
        libA3DDD02B_gf_SendTransmissionCampaign(null, "pMission_VoidPrologue03|Line00073", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BOParticleCannon02DestroyedQ_Init () {
    gt_BOParticleCannon02DestroyedQ = TriggerCreate("gt_BOParticleCannon02DestroyedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BO - Particle Cannon 03 Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_BOParticleCannon03DestroyedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoD9328283_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!(((gv_currentSection == 1) || (gv_currentSection == 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_particleCannonsDestroyed += 1;
    TriggerExecute(gt_ObjectiveDestroyParticleCannonsUpdate, true, false);
    if ((gv_particleCannonsDestroyed == 3)) {
        TriggerExecute(gt_ObjectiveDestroyParticleCannonsComplete, true, false);
    }

    TriggerQueueEnter();
    if (((gv_gameOver == true) || (gv_currentSection == 3))) {
        return true;
    }

    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/201344EE"), null, PointFromId(561));
    libA3DDD02B_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(561), 2.0, Color(0.00, 100.00, 0.00));
    Wait(2.0, c_timeGame);
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Speech);
    autoD9328283_val = gv_particleCannonsDestroyed;
    if (autoD9328283_val == 1) {
        libA3DDD02B_gf_SendTransmissionCampaign(null, "pMission_VoidPrologue03|Line00071", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoD9328283_val == 2) {
        libA3DDD02B_gf_SendTransmissionCampaign(null, "pMission_VoidPrologue03|Line00072", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoD9328283_val == 3) {
        libA3DDD02B_gf_SendTransmissionCampaign(null, "pMission_VoidPrologue03|Line00073", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign(libA3DDD02B_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BOParticleCannon03DestroyedQ_Init () {
    gt_BOParticleCannon03DestroyedQ = TriggerCreate("gt_BOParticleCannon03DestroyedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BO - Unit Warps In
//--------------------------------------------------------------------------------------------------
bool gt_BOUnitWarpsIn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentSection != 3))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(EventUnitProgressUnit(), c_unitPropEnergyMax, c_unitPropCurrent) > 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventUnitProgressUnit(), c_unitPropEnergyPercent, 100.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BOUnitWarpsIn_Init () {
    gt_BOUnitWarpsIn = TriggerCreate("gt_BOUnitWarpsIn_Func");
    TriggerAddEventUnitConstructProgress(gt_BOUnitWarpsIn, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Particle Cannon Target Loop 01
//--------------------------------------------------------------------------------------------------
bool gt_ParticleCannonTargetLoop01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_flyerDummy;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while ((gv_gameOver == false) && (UnitIsAlive(gv_particleCannon01) == true)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Phoenix", 0, 15, RegionRandomPoint(RegionFromId(8)));
        lv_flyerDummy = UnitLastCreated();
        ActorSend(libNtve_gf_MainActorofUnit(lv_flyerDummy), "SetVisibility");
        UnitAbilityEnable(lv_flyerDummy, "attack", false);
        libNtve_gf_ShareVisionofUnit(lv_flyerDummy, true, gv_pLAYER_02_TALDARIM);
        UnitIssueOrder(lv_flyerDummy, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1037)), c_orderQueueReplace);
        Wait(4.0, c_timeGame);
        if ((UnitIsAlive(lv_flyerDummy) == true)) {
            UnitRemove(lv_flyerDummy);
        }

        Wait(RandomFixed(0.5, 2.5), c_timeGame);
        if ((UnitIsAlive(gv_particleCannon01) == false)) {
            return true;
        }

        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Phoenix", 0, 15, RegionRandomPoint(RegionFromId(74)));
        lv_flyerDummy = UnitLastCreated();
        ActorSend(libNtve_gf_MainActorofUnit(lv_flyerDummy), "SetVisibility");
        UnitAbilityEnable(lv_flyerDummy, "attack", false);
        libNtve_gf_ShareVisionofUnit(lv_flyerDummy, true, gv_pLAYER_02_TALDARIM);
        UnitIssueOrder(lv_flyerDummy, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1034)), c_orderQueueReplace);
        Wait(4.0, c_timeGame);
        if ((UnitIsAlive(lv_flyerDummy) == true)) {
            UnitRemove(lv_flyerDummy);
        }

        Wait(RandomFixed(0.5, 2.5), c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ParticleCannonTargetLoop01_Init () {
    gt_ParticleCannonTargetLoop01 = TriggerCreate("gt_ParticleCannonTargetLoop01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Particle Cannon Target Loop 02
//--------------------------------------------------------------------------------------------------
bool gt_ParticleCannonTargetLoop02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_flyerDummy;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while ((gv_gameOver == false) && (UnitIsAlive(gv_particleCannon02) == true)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Phoenix", 0, 15, RegionRandomPoint(RegionFromId(77)));
        lv_flyerDummy = UnitLastCreated();
        ActorSend(libNtve_gf_MainActorofUnit(lv_flyerDummy), "SetVisibility");
        UnitAbilityEnable(lv_flyerDummy, "attack", false);
        libNtve_gf_ShareVisionofUnit(lv_flyerDummy, true, gv_pLAYER_02_TALDARIM);
        UnitIssueOrder(lv_flyerDummy, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1040)), c_orderQueueReplace);
        Wait(4.0, c_timeGame);
        if ((UnitIsAlive(lv_flyerDummy) == true)) {
            UnitRemove(lv_flyerDummy);
        }

        Wait(RandomFixed(0.5, 2.5), c_timeGame);
        if ((UnitIsAlive(gv_particleCannon02) == false)) {
            return true;
        }

        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Phoenix", 0, 15, RegionRandomPoint(RegionFromId(78)));
        lv_flyerDummy = UnitLastCreated();
        ActorSend(libNtve_gf_MainActorofUnit(lv_flyerDummy), "SetVisibility");
        UnitAbilityEnable(lv_flyerDummy, "attack", false);
        libNtve_gf_ShareVisionofUnit(lv_flyerDummy, true, gv_pLAYER_02_TALDARIM);
        UnitIssueOrder(lv_flyerDummy, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1041)), c_orderQueueReplace);
        Wait(4.0, c_timeGame);
        if ((UnitIsAlive(lv_flyerDummy) == true)) {
            UnitRemove(lv_flyerDummy);
        }

        Wait(RandomFixed(0.5, 2.5), c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ParticleCannonTargetLoop02_Init () {
    gt_ParticleCannonTargetLoop02 = TriggerCreate("gt_ParticleCannonTargetLoop02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Particle Cannon Target Loop 03
//--------------------------------------------------------------------------------------------------
bool gt_ParticleCannonTargetLoop03_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_flyerDummy;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while ((gv_gameOver == false) && (UnitIsAlive(gv_particleCannon03) == true)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Phoenix", 0, 15, RegionRandomPoint(RegionFromId(75)));
        lv_flyerDummy = UnitLastCreated();
        ActorSend(libNtve_gf_MainActorofUnit(lv_flyerDummy), "SetVisibility");
        UnitAbilityEnable(lv_flyerDummy, "attack", false);
        libNtve_gf_ShareVisionofUnit(lv_flyerDummy, true, gv_pLAYER_02_TALDARIM);
        UnitIssueOrder(lv_flyerDummy, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1039)), c_orderQueueReplace);
        Wait(4.0, c_timeGame);
        if ((UnitIsAlive(lv_flyerDummy) == true)) {
            UnitRemove(lv_flyerDummy);
        }

        Wait(RandomFixed(0.5, 2.5), c_timeGame);
        if ((UnitIsAlive(gv_particleCannon03) == false)) {
            return true;
        }

        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Phoenix", 0, 15, RegionRandomPoint(RegionFromId(76)));
        lv_flyerDummy = UnitLastCreated();
        ActorSend(libNtve_gf_MainActorofUnit(lv_flyerDummy), "SetVisibility");
        UnitAbilityEnable(lv_flyerDummy, "attack", false);
        libNtve_gf_ShareVisionofUnit(lv_flyerDummy, true, gv_pLAYER_02_TALDARIM);
        UnitIssueOrder(lv_flyerDummy, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1038)), c_orderQueueReplace);
        Wait(4.0, c_timeGame);
        if ((UnitIsAlive(lv_flyerDummy) == true)) {
            UnitRemove(lv_flyerDummy);
        }

        Wait(RandomFixed(0.5, 2.5), c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ParticleCannonTargetLoop03_Init () {
    gt_ParticleCannonTargetLoop03 = TriggerCreate("gt_ParticleCannonTargetLoop03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shadow Strike Kills Unit
//--------------------------------------------------------------------------------------------------
bool gt_ShadowStrikeKillsUnit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((EventUnitDamageEffect() == "ShadowBladeDamage"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_victory_ShadowStrikeKills += 1;
    if ((gv_victory_ShadowStrikeKills == 20) && (gv_shadowStrikeAchievementAwarded == false)) {
        gv_shadowStrikeAchievementAwarded = true;
        libA3DDD02B_gf_CampaignAwardAchievement("PPrologue03_02", gv_pLAYER_01_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShadowStrikeKillsUnit_Init () {
    gt_ShadowStrikeKillsUnit = TriggerCreate("gt_ShadowStrikeKillsUnit_Func");
    TriggerAddEventUnitDied(gt_ShadowStrikeKillsUnit, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Lost Before Catalyst Tracking
//--------------------------------------------------------------------------------------------------
bool gt_UnitLostBeforeCatalystTracking_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!(((gv_currentSection == 1) || (gv_currentSection == 2)))) {
            return false;
        }

        if (!((UnitIsAlive(gv_s2_VoidCatalyst) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_unitsLostDuringInfiltration += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitLostBeforeCatalystTracking_Init () {
    gt_UnitLostBeforeCatalystTracking = TriggerCreate("gt_UnitLostBeforeCatalystTracking_Func");
    TriggerAddEventUnitDied(gt_UnitLostBeforeCatalystTracking, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - No Units Lost Before Catalyst
//--------------------------------------------------------------------------------------------------
bool gt_AchievementNoUnitsLostBeforeCatalyst_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((libA3DDD02B_gf_DifficultyValuePrologueInteger(0, 1, 1, 1) == 1) && (gv_unitsLostDuringInfiltration == 0)) {
        libA3DDD02B_gf_CampaignAwardAchievement("PPrologue03_03", gv_pLAYER_01_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementNoUnitsLostBeforeCatalyst_Init () {
    gt_AchievementNoUnitsLostBeforeCatalyst = TriggerCreate("gt_AchievementNoUnitsLostBeforeCatalyst_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 10th Anniversary Achievement - Void Catalyst destroyed before 13 minutes
//--------------------------------------------------------------------------------------------------
bool gt__10thAnniversaryAchievementVoidCatalystdestroyedbefore13minutes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1))) {
            return false;
        }

        if (!((GameGetMissionTime() <= 780.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA3DDD02B_gf_CampaignAwardAchievement("Anniversary_PPrologue03", gv_pLAYER_01_USER);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__10thAnniversaryAchievementVoidCatalystdestroyedbefore13minutes_Init () {
    gt__10thAnniversaryAchievementVoidCatalystdestroyedbefore13minutes = TriggerCreate("gt__10thAnniversaryAchievementVoidCatalystdestroyedbefore13minutes_Func");
    TriggerAddEventUnitDied(gt__10thAnniversaryAchievementVoidCatalystdestroyedbefore13minutes, UnitRefFromVariable("gv_s2_VoidCatalyst"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat - Zeratul Dies
//--------------------------------------------------------------------------------------------------
bool gt_DefeatZeratulDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveZeratulMustSurviveFailed, true, false);
    libA3DDD02B_gf_DisplayCampaignMessage(PlayerGroupAll(), libA3DDD02B_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/E22F22F9"), libA3DDD02B_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libA3DDD02B_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatZeratulDies_Init () {
    gt_DefeatZeratulDies = TriggerCreate("gt_DefeatZeratulDies_Func");
    TriggerAddEventUnitDied(gt_DefeatZeratulDies, UnitRefFromVariable("gv_zeratul"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat - Escape Failed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatEscapeFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    UnitKill(UnitFromId(1651));
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libA3DDD02B_gf_DisplayCampaignMessage(PlayerGroupAll(), libA3DDD02B_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/4D068F5D"), libA3DDD02B_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libA3DDD02B_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatEscapeFailed_Init () {
    gt_DefeatEscapeFailed = TriggerCreate("gt_DefeatEscapeFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory - Escape Complete
//--------------------------------------------------------------------------------------------------
bool gt_VictoryEscapeComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitKill(UnitFromId(1651));
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryEscapeComplete_Init () {
    gt_VictoryEscapeComplete = TriggerCreate("gt_VictoryEscapeComplete_Func");
    TriggerAddEventUnitRegion(gt_VictoryEscapeComplete, UnitRefFromVariable("gv_zeratul"), RegionFromId(88), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveInvestigateTempleComplete, true, true);
    libA3DDD02B_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libA3DDD02B_gf_CampaignAwardAchievement("PPrologue03_01", gv_pLAYER_01_USER);
    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/22602358"), IntToText(gv_victory_ShadowStrikeKills));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/D52255E5"), IntToText(gv_particleCannonsDestroyed));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/CE64ECC9"), IntToText(gv_unitsLostDuringInfiltration));
    libA3DDD02B_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libA3DDD02B_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_VictoryCheat, false);
    TriggerEnable(gt_DefeatCheat, false);
    TriggerEnable(gt_Defeat, false);
    TriggerExecute(gt_S1Cleanup, true, false);
    TriggerExecute(gt_S2Cleanup, true, false);
    TriggerExecute(gt_S3Cleanup, true, false);
    gv_gameOver = true;
    libA3DDD02B_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_VictoryCheat, false);
    TriggerEnable(gt_DefeatCheat, false);
    TriggerEnable(gt_Victory, false);
    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Mission Help Q
//--------------------------------------------------------------------------------------------------
bool gt_TipMissionHelpQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libA3DDD02B_gf_DisplayMissionTip(StringExternal("Param/Value/01DA8906"));
    Wait(libA3DDD02B_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipMissionHelpQ_Init () {
    gt_TipMissionHelpQ = TriggerCreate("gt_TipMissionHelpQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Investigate Temple - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveInvestigateTempleCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libA3DDD02B_gf_CreateObjectiveCampaign("PPrologue03Primary01");
    gv_objective_InvestigateTemple = ObjectiveLastCreated();
    Wait(libA3DDD02B_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveInvestigateTempleCreate_Init () {
    gt_ObjectiveInvestigateTempleCreate = TriggerCreate("gt_ObjectiveInvestigateTempleCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Investigate Temple - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveInvestigateTempleComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveInvestigateTempleCreate, true, false);
    libA3DDD02B_gf_SetObjectiveStateCampaign("PPrologue03Primary01", libA3DDD02B_ge_MissionObjectiveState_Completed);
    Wait(libA3DDD02B_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveInvestigateTempleComplete_Init () {
    gt_ObjectiveInvestigateTempleComplete = TriggerCreate("gt_ObjectiveInvestigateTempleComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Destroy Catalyst - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyCatalystCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libA3DDD02B_gf_CreateObjectiveCampaign("PPrologue03Primary02");
    gv_objective_DestroyCatalyst = ObjectiveLastCreated();
    ObjectiveSetAfter(ObjectiveLastCreated(), gv_objective_InvestigateTemple);
    Wait(libA3DDD02B_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyCatalystCreate_Init () {
    gt_ObjectiveDestroyCatalystCreate = TriggerCreate("gt_ObjectiveDestroyCatalystCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Destroy Catalyst - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyCatalystComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyCatalystCreate, true, false);
    libA3DDD02B_gf_SetObjectiveStateCampaign("PPrologue03Primary02", libA3DDD02B_ge_MissionObjectiveState_Completed);
    Wait(libA3DDD02B_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyCatalystComplete_Init () {
    gt_ObjectiveDestroyCatalystComplete = TriggerCreate("gt_ObjectiveDestroyCatalystComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Escape - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveEscapeCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libA3DDD02B_gf_CreateObjectiveCampaign("PPrologue03Primary04");
    gv_objective_Escape = ObjectiveLastCreated();
    ObjectiveSetBefore(ObjectiveLastCreated(), gv_objective_ZeratulMustSurvive);
    Wait(libA3DDD02B_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveEscapeCreate_Init () {
    gt_ObjectiveEscapeCreate = TriggerCreate("gt_ObjectiveEscapeCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Escape - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveEscapeComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveEscapeCreate, true, false);
    libA3DDD02B_gf_SetObjectiveStateCampaign("PPrologue03Primary04", libA3DDD02B_ge_MissionObjectiveState_Completed);
    Wait(libA3DDD02B_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveEscapeComplete_Init () {
    gt_ObjectiveEscapeComplete = TriggerCreate("gt_ObjectiveEscapeComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Escape - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveEscapeFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveEscapeCreate, true, false);
    libA3DDD02B_gf_SetObjectiveStateCampaign("PPrologue03Primary04", libA3DDD02B_ge_MissionObjectiveState_Failed);
    Wait(libA3DDD02B_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveEscapeFailed_Init () {
    gt_ObjectiveEscapeFailed = TriggerCreate("gt_ObjectiveEscapeFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Zeratul Must Survive - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveZeratulMustSurviveCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libA3DDD02B_gf_CreateObjectiveCampaign("PPrologue03Primary05");
    gv_objective_ZeratulMustSurvive = ObjectiveLastCreated();
    Wait(libA3DDD02B_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveZeratulMustSurviveCreate_Init () {
    gt_ObjectiveZeratulMustSurviveCreate = TriggerCreate("gt_ObjectiveZeratulMustSurviveCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Zeratul Must Survive - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveZeratulMustSurviveComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveZeratulMustSurviveCreate, true, false);
    libA3DDD02B_gf_SetObjectiveStateCampaign("PPrologue03Primary05", libA3DDD02B_ge_MissionObjectiveState_Completed);
    Wait(libA3DDD02B_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveZeratulMustSurviveComplete_Init () {
    gt_ObjectiveZeratulMustSurviveComplete = TriggerCreate("gt_ObjectiveZeratulMustSurviveComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Zeratul Must Survive - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveZeratulMustSurviveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveZeratulMustSurviveCreate, true, false);
    libA3DDD02B_gf_SetObjectiveStateCampaign("PPrologue03Primary05", libA3DDD02B_ge_MissionObjectiveState_Failed);
    Wait(libA3DDD02B_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveZeratulMustSurviveFailed_Init () {
    gt_ObjectiveZeratulMustSurviveFailed = TriggerCreate("gt_ObjectiveZeratulMustSurviveFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Destroy Particle Cannons Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyParticleCannonsCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libA3DDD02B_gf_CreateObjectiveCampaign("PPrologue03Bonus01");
    gv_objectiveDestroyParticleCannons = ObjectiveLastCreated();
    libA3DDD02B_gf_SetMissionObjectiveProgress2("PPrologue03Bonus01", gv_particleCannonsDestroyed, true, null, true);
    Wait(libA3DDD02B_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyParticleCannonsCreate_Init () {
    gt_ObjectiveDestroyParticleCannonsCreate = TriggerCreate("gt_ObjectiveDestroyParticleCannonsCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Destroy Particle Cannons Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyParticleCannonsUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveDestroyParticleCannonsCreate, true, false);
    libA3DDD02B_gf_SetMissionObjectiveProgress2("PPrologue03Bonus01", gv_particleCannonsDestroyed, true, null, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyParticleCannonsUpdate_Init () {
    gt_ObjectiveDestroyParticleCannonsUpdate = TriggerCreate("gt_ObjectiveDestroyParticleCannonsUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Destroy Particle Cannons Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyParticleCannonsComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_ObjectiveDestroyParticleCannonsUpdate, false);
    TriggerExecute(gt_ObjectiveDestroyParticleCannonsCreate, true, false);
    libA3DDD02B_gf_SetMissionObjectiveProgress2("PPrologue03Bonus01", gv_particleCannonsDestroyed, true, null, true);
    libA3DDD02B_gf_SetObjectiveStateCampaign("PPrologue03Bonus01", libA3DDD02B_ge_MissionObjectiveState_Completed);
    Wait(libA3DDD02B_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyParticleCannonsComplete_Init () {
    gt_ObjectiveDestroyParticleCannonsComplete = TriggerCreate("gt_ObjectiveDestroyParticleCannonsComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto63F60915_g;
    int auto63F60915_u;
    unit auto63F60915_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    gv_inCinematic = true;
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    gv_cinematicTempUnits = UnitGroupEmpty();
    UnitSetHeight(UnitFromId(324), 4.0, 0.0);
    UnitBehaviorAdd(gv_zeratul, "SuppressCloak", gv_zeratul, 1);
    UnitSetState(gv_malash, c_unitStateFidget, false);
    UnitGroupAdd(gv_cinematicTempUnits, UnitFromId(312));
    UnitSetState(UnitFromId(312), c_unitStateFidget, false);
    UnitIssueOrder(UnitFromId(312), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(315)), c_orderQueueReplace);
    UnitGroupAdd(gv_cinematicTempUnits, UnitFromId(314));
    UnitSetState(UnitFromId(314), c_unitStateFidget, false);
    UnitIssueOrder(UnitFromId(314), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(316)), c_orderQueueReplace);
    UnitGroupAdd(gv_cinematicTempUnits, UnitFromId(313));
    UnitSetState(UnitFromId(313), c_unitStateFidget, false);
    UnitIssueOrder(UnitFromId(313), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(317)), c_orderQueueReplace);
    auto63F60915_g = UnitGroup("Stalker", gv_pLAYER_01_USER, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto63F60915_u = UnitGroupCount(auto63F60915_g, c_unitCountAll);
    for (;; auto63F60915_u -= 1) {
        auto63F60915_var = UnitGroupUnitFromEnd(auto63F60915_g, auto63F60915_u);
        if (auto63F60915_var == null) { break; }
        UnitSetState(auto63F60915_var, c_unitStateFidget, false);
    }
    UnitKill(UnitFromId(147));
    libNtve_gf_ShowHideUnit(UnitFromId(1353), false);
    libNtve_gf_ShowHideUnit(UnitFromId(1351), false);
    libNtve_gf_ShowHideUnit(UnitFromId(1350), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto4A752CC8_g;
    int auto4A752CC8_u;
    unit auto4A752CC8_var;
    unitgroup auto9404852C_g;
    int auto9404852C_u;
    unit auto9404852C_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(321), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(322), 4.0, -1, 10, true);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 25.0, 0.1);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 25.0, 0.1);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "VP03_Music_IntroMusic1", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gv_voidCatalystLoop = SoundLastPlayed();
    UnitSetPosition(gv_zeratul, PointFromId(334), false);
    UnitSetFacing(gv_zeratul, PointGetFacing(PointFromId(332)), 0.0);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libA3DDD02B_gf_SendTransmissionCampaign(UnitFromId(314), "pMission_VoidPrologue03|Line00001", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_DontShowPortrait, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(323), (SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_VoidPrologue03|Line00002", true), c_soundIndexAny))), -1, 10, true);
    libA3DDD02B_gf_SendTransmissionCampaign(gv_malash, "pMission_VoidPrologue03|Line00002", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libA3DDD02B_gf_SendTransmissionCampaign(UnitFromId(314), "pMission_VoidPrologue03|Line00003", c_transmissionDurationAdd, 0.0, false, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_DontShowPortrait, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    SoundPlay(SoundLink("VP03_VoidCatalyst_Whispy_Vox_CS_Intro", -1), PlayerGroupAll(), 80.0, 0.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1056), 4.0, -1, 10, true);
    SoundPlay(SoundLink("VP03_Music_AmonTransitionStinger", -1), PlayerGroupAll(), 80.0, 0.0);
    gv_channelStartSound = SoundLastPlayed();
    UnitIssueOrder(gv_malash, OrderTargetingUnit(AbilityCommand("MalashChannel", 0), UnitFromId(324)), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(UnitFromId(283), Order(AbilityCommand("VoidCatalystStage2", 0)), c_orderQueueReplace);
    SoundPlayForPlayer(SoundLink("XelNagaBridgeHit1", -1), c_maxPlayers, PlayerGroupAll(), 80.0, 0.0);
    Wait(2.0, c_timeGame);
    SoundPlayForPlayer(SoundLink("XelNagaBridgeFinalHit", -1), c_maxPlayers, PlayerGroupAll(), 80.0, 0.0);
    TransmissionWait(TransmissionLastSent(), 0.0);
    UnitIssueOrder(UnitFromId(312), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(318)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(314), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(319)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(313), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(320)), c_orderQueueReplace);
    CinematicFade(false, 3.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    SoundStop(gv_voidCatalystLoop, true);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 1.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(335), 0.0, -1, 10, true);
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    Wait(1.0, c_timeGame);
    UnitIssueOrder(gv_zeratul, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(332)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    TriggerExecute(gt_IntroBridgeSequence, true, false);
    libA3DDD02B_gf_SendTransmissionCampaign(null, "pMission_VoidPrologue03|Line00054", c_transmissionDurationAdd, 0.0, false, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 3.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(336), 3.0, -1, 10, true);
    UnitIssueOrder(gv_zeratul, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(554)), c_orderQueueReplace);
    auto4A752CC8_g = UnitGroup("Stalker", gv_pLAYER_01_USER, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4A752CC8_u = UnitGroupCount(auto4A752CC8_g, c_unitCountAll);
    for (;; auto4A752CC8_u -= 1) {
        auto4A752CC8_var = UnitGroupUnitFromEnd(auto4A752CC8_g, auto4A752CC8_u);
        if (auto4A752CC8_var == null) { break; }
        UnitIssueOrder(auto4A752CC8_var, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(326)), c_orderQueueReplace);
        Wait(0.1, c_timeGame);
    }
    TransmissionWait(TransmissionLastSent(), 0.0);
    libA3DDD02B_gf_SendTransmissionCampaign(gv_zeratul, "pMission_VoidPrologue03|Line00004", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libA3DDD02B_gf_SendTransmissionCampaign(null, "pMission_VoidPrologue03|Line00055", c_transmissionDurationAdd, 0.0, false, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 1.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(338), 4.0, -1, 10, true);
    UnitIssueOrder(gv_zeratul, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(332)), c_orderQueueReplace);
    UnitIssueOrder(gv_zeratul, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(554)), c_orderQueueAddToEnd);
    auto9404852C_g = UnitGroup("Stalker", gv_pLAYER_01_USER, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9404852C_u = UnitGroupCount(auto9404852C_g, c_unitCountAll);
    for (;; auto9404852C_u -= 1) {
        auto9404852C_var = UnitGroupUnitFromEnd(auto9404852C_g, auto9404852C_u);
        if (auto9404852C_var == null) { break; }
        Wait(0.1, c_timeGame);
        UnitIssueOrder(auto9404852C_var, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(332)), c_orderQueueReplace);
    }
    TransmissionWait(TransmissionLastSent(), 0.0);
    libA3DDD02B_gf_SendTransmissionCampaign(gv_zeratul, "pMission_VoidPrologue03|Line00057", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto1DF0D706_g;
    int auto1DF0D706_u;
    unit auto1DF0D706_var;
    unitgroup autoD1B6C23D_g;
    int autoD1B6C23D_u;
    unit autoD1B6C23D_var;
    unitgroup auto4F3EAA40_g;
    int auto4F3EAA40_u;
    unit auto4F3EAA40_var;
    unitgroup auto343F4C8B_g;
    int auto343F4C8B_u;
    unit auto343F4C8B_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto1DF0D706_g = gv_cinematicTempUnits;
    auto1DF0D706_u = UnitGroupCount(auto1DF0D706_g, c_unitCountAll);
    for (;; auto1DF0D706_u -= 1) {
        auto1DF0D706_var = UnitGroupUnitFromEnd(auto1DF0D706_g, auto1DF0D706_u);
        if (auto1DF0D706_var == null) { break; }
        UnitRemove(auto1DF0D706_var);
    }
    if ((gv_cinematicCompleted == false)) {
        UnitIssueOrder(gv_malash, OrderTargetingUnit(AbilityCommand("MalashChannel", 0), UnitFromId(324)), c_orderQueueReplace);
        UnitIssueOrder(UnitFromId(283), Order(AbilityCommand("VoidCatalystStage2", 0)), c_orderQueueReplace);
        UnitIssueOrder(gv_zeratul, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitSetPosition(gv_zeratul, PointFromId(332), false);
        UnitSetFacing(gv_zeratul, 0.0, 0.0);
        autoD1B6C23D_g = UnitGroup("Stalker", gv_pLAYER_01_USER, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoD1B6C23D_u = UnitGroupCount(autoD1B6C23D_g, c_unitCountAll);
        for (;; autoD1B6C23D_u -= 1) {
            autoD1B6C23D_var = UnitGroupUnitFromEnd(autoD1B6C23D_g, autoD1B6C23D_u);
            if (autoD1B6C23D_var == null) { break; }
            UnitIssueOrder(autoD1B6C23D_var, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(332)), c_orderQueueReplace);
        }
    }
    else {
        UnitIssueOrder(gv_zeratul, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(PointFromId(332), 1.0, 0.0)), c_orderQueueReplace);
    }
    auto4F3EAA40_g = UnitGroup("Stalker", gv_pLAYER_01_USER, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4F3EAA40_u = UnitGroupCount(auto4F3EAA40_g, c_unitCountAll);
    for (;; auto4F3EAA40_u -= 1) {
        auto4F3EAA40_var = UnitGroupUnitFromEnd(auto4F3EAA40_g, auto4F3EAA40_u);
        if (auto4F3EAA40_var == null) { break; }
        UnitSetState(auto4F3EAA40_var, c_unitStateFidget, true);
    }
    libNtve_gf_ShowHideUnit(UnitFromId(1353), true);
    libNtve_gf_ShowHideUnit(UnitFromId(1351), true);
    libNtve_gf_ShowHideUnit(UnitFromId(1350), true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(283)), c_animNameDefault, "Stand Morph", c_animFlagPlayForever, c_animTimeDefault);
    TriggerStop(gt_IntroBridgeSequence);
    libNtve_gf_ReplaceUnit(UnitFromId(1020), "XelNaga_Caverns_Floating_BridgeH8", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    CameraShakeStop(gv_pLAYER_01_USER);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    SoundStop(gv_voidCatalystLoop, true);
    SoundStop(gv_introBridgeLoop, true);
    SoundStop(gv_channelStartSound, true);
    RegionPlayableMapSet(RegionFromId(4));
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    UnitBehaviorRemove(gv_zeratul, "SuppressCloak", 1);
    UnitSelect(gv_zeratul, gv_pLAYER_01_USER, true);
    auto343F4C8B_g = UnitGroup("Stalker", gv_pLAYER_01_USER, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto343F4C8B_u = UnitGroupCount(auto343F4C8B_g, c_unitCountAll);
    for (;; auto343F4C8B_u -= 1) {
        auto343F4C8B_var = UnitGroupUnitFromEnd(auto343F4C8B_g, auto343F4C8B_u);
        if (auto343F4C8B_var == null) { break; }
        UnitSelect(auto343F4C8B_var, gv_pLAYER_01_USER, true);
    }
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    TriggerExecute(gt_StartAI, true, false);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
        libNtve_gf_GlobalCinematicSetting(false);
        gv_inCinematic = false;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(339), lv_fadeDuration, -1, 10.0, true);
        Wait(lv_fadeDuration, c_timeGame);
    }
    else {
        lv_fadeDuration = 1.0;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
        libNtve_gf_GlobalCinematicSetting(false);
        gv_inCinematic = false;
        libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(339)), lv_fadeDuration);
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    libNtve_gf_PauseUnit(gv_malash, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Bridge Sequence
//--------------------------------------------------------------------------------------------------
bool gt_IntroBridgeSequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(UnitFromId(1020)), "Work");
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(1020)), c_animNameDefault, "Stand Work End", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(13.0, c_timeReal);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(1020)), c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroBridgeSequence_Init () {
    gt_IntroBridgeSequence = TriggerCreate("gt_IntroBridgeSequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Antechamber Q
//--------------------------------------------------------------------------------------------------
bool gt_MidAntechamberQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_MidAntechamberSetup, true, true);
    TriggerExecute(gt_MidAntechamberCinematic, true, true);
    TriggerExecute(gt_MidAntechamberEnd, true, true);
    TriggerExecute(gt_MidAntechamberCleanup, true, true);
    TriggerQueueExit();
    TriggerExecute(gt_StartGameSection2Q, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidAntechamberQ_Init () {
    gt_MidAntechamberQ = TriggerCreate("gt_MidAntechamberQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Antechamber Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidAntechamberSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoBA5A515F_g;
    int autoBA5A515F_u;
    unit autoBA5A515F_var;
    unitgroup autoABCE1033_g;
    int autoABCE1033_u;
    unit autoABCE1033_var;
    unitgroup auto395B2E1F_g;
    int auto395B2E1F_u;
    unit auto395B2E1F_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    gv_inCinematic = true;
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_TALDARIM, libNtve_ge_AllianceSetting_Neutral);
    gv_currentSection = 2;
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitPauseAll(true);
    libNtve_gf_PauseUnit(gv_zeratul, false);
    libNtve_gf_PauseUnit(gv_malashDummyUnit, false);
    autoBA5A515F_g = UnitGroup("PathingBlocker4x4Diagonal", c_playerAny, RegionFromId(32), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBA5A515F_u = UnitGroupCount(autoBA5A515F_g, c_unitCountAll);
    for (;; autoBA5A515F_u -= 1) {
        autoBA5A515F_var = UnitGroupUnitFromEnd(autoBA5A515F_g, autoBA5A515F_u);
        if (autoBA5A515F_var == null) { break; }
        UnitRemove(autoBA5A515F_var);
    }
    autoABCE1033_g = UnitGroup(null, gv_pLAYER_02_TALDARIM, RegionFromId(20), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoABCE1033_u = UnitGroupCount(autoABCE1033_g, c_unitCountAll);
    for (;; autoABCE1033_u -= 1) {
        autoABCE1033_var = UnitGroupUnitFromEnd(autoABCE1033_g, autoABCE1033_u);
        if (autoABCE1033_var == null) { break; }
        libNtve_gf_PauseUnit(autoABCE1033_var, false);
        AISetUnitScriptControlled(autoABCE1033_var, true);
    }
    libNtve_gf_PauseUnit(UnitFromId(127), false);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_zeratul), c_animNameDefault);
    libNtve_gf_MakeUnitUncommandable(gv_zeratul, false);
    UnitSetState(gv_zeratul, c_unitStatePaused, false);
    UnitSetState(gv_zeratul, c_unitStateFidget, false);
    UnitSetPosition(gv_zeratul, PointFromId(894), false);
    UnitSetFacing(gv_zeratul, PointGetFacing(PointFromId(894)), 0.0);
    UnitIssueOrder(gv_zeratul, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    auto395B2E1F_g = UnitGroup(null, gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto395B2E1F_u = UnitGroupCount(auto395B2E1F_g, c_unitCountAll);
    for (;; auto395B2E1F_u -= 1) {
        auto395B2E1F_var = UnitGroupUnitFromEnd(auto395B2E1F_g, auto395B2E1F_u);
        if (auto395B2E1F_var == null) { break; }
        libNtve_gf_PauseUnit(auto395B2E1F_var, false);
        UnitSetPropertyFixed(auto395B2E1F_var, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(auto395B2E1F_var, c_unitPropShieldsPercent, 100.0);
    }
    TriggerExecute(gt_MidAnthechamberUnitPlacement, true, false);
    libNtve_gf_PauseUnit(UnitFromId(283), false);
    libNtve_gf_PauseUnit(gv_malash, false);
    libNtve_gf_ShowHideUnit(UnitFromId(1353), false);
    libNtve_gf_ShowHideUnit(UnitFromId(1351), false);
    libNtve_gf_ShowHideUnit(UnitFromId(1350), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidAntechamberSetup_Init () {
    gt_MidAntechamberSetup = TriggerCreate("gt_MidAntechamberSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Antechamber Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidAntechamberCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(896), 0.0, -1, 10, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 70.0, 2.0);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "VP03_Music_MidMission", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(895), 9.0, -1, 10, true);
    libA3DDD02B_gf_SendTransmissionCampaign(gv_zeratul, "pMission_VoidPrologue03|Line00025", c_transmissionDurationAdd, 0.0, false, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(1.0, c_timeGame);
    UnitIssueOrder(gv_zeratul, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(898)), c_orderQueueReplace);
    TransmissionWait(TransmissionLastSent(), 0.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 2.0);
    SoundPlay(SoundLink("VP03_VoidCatalyst_Vx_Fx_Long_RedGas", -1), PlayerGroupAll(), 120.0, 0.0);
    gv_amonStinger = SoundLastPlayed();
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(897), 9.0, -1, 10, true);
    Wait(4.0, c_timeGame);
    GameSetLighting("AmonSummonLight", 5.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(890), 9.0, -1, 10, true);
    SoundPlay(SoundLink("VP03_Quake_Rumble_Crunchy", -1), PlayerGroupAll(), 90.0, 0.0);
    Wait(5.0, c_timeGame);
    CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 0.0, 0.0, 3.0);
    SoundPlay(SoundLink("VP03_Quake_Rumble_Long_2D", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundPlay(SoundLink("Prologue_Vespene_Crack_Rock_Explode", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(2.5, c_timeGame);
    UnitIssueOrder(gv_malash, Order(AbilityCommand("MalashChannel", 1)), c_orderQueueReplace);
    SoundPlay(SoundLink("VP03_VoidCatalyst_Vx_Fx_Morph", 0), PlayerGroupAll(), 120.0, 0.0);
    gv_amonRoar = SoundLastPlayed();
    UnitIssueOrder(UnitFromId(283), Order(AbilityCommand("VoidCatalystStage3", 0)), c_orderQueueReplace);
    SoundPlayForPlayer(SoundLink("XelNagaBridgeFirstLights", -1), c_maxPlayers, PlayerGroupAll(), 60.0, 0.0);
    SoundPlayForPlayer(SoundLink("Prologue_Vespene_Crack_Rumble_2D", -1), c_maxPlayers, PlayerGroupAll(), 80.0, 0.0);
    CameraShake(gv_pLAYER_01_USER, "Heavy", "Earthquake", 0.0, 1.0, 4.0);
    Wait(0.5, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(891), 1.5, -1, 10.0, true);
    Wait(1.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(892), 1.0, -1, 10.0, true);
    Wait(0.5, c_timeGame);
    SoundPlayForPlayer(SoundLink("VP03_AmonThunder", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("VP03_VoidCatalyst_Vx_Fx_Long_WhiteGas", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(7.0, c_timeGame);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 15.0, 4.5);
    CinematicFade(false, 1.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(905), 0.0, -1, 10.0, true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "VP03_Music_SummonAmon", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    CinematicFade(true, 1.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(393), 20.0, -1, 10.0, true);
    libA3DDD02B_gf_SendTransmissionCampaign(gv_malash, "pMission_VoidPrologue03|Line00069", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libA3DDD02B_gf_SendTransmissionCampaign(null, "pMission_VoidPrologue03|Line00026", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libA3DDD02B_gf_SendTransmissionCampaign(null, "pMission_VoidPrologue03|Line00027", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libA3DDD02B_gf_SendTransmissionCampaign(gv_malash, "pMission_VoidPrologue03|Line00070", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CinematicFade(false, 3.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 3.0);
    gv_midAmonSoundtrackCompleted = true;
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, false);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    GameSetLighting("XelNaga_Caverns", 0.0);
    UnitIssueOrder(gv_zeratul, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(907)), c_orderQueueReplace);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(909), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(901), 3.0, -1, 10.0, true);
    CinematicFade(true, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    Wait(1.0, c_timeReal);
    libA3DDD02B_gf_SendTransmissionCampaign(gv_zeratul, "pMission_VoidPrologue03|Line00029", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1054), 10.0, -1, 10.0, true);
    libA3DDD02B_gf_SendTransmissionCampaign(null, "pMission_VoidPrologue03|Line00030", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libA3DDD02B_gf_SendTransmissionCampaign(gv_zeratul, "pMission_VoidPrologue03|Line00031", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(893), 4.0, -1, 10, true);
    Wait(3.0, c_timeGame);
    UnitIssueOrder(UnitFromId(127), Order(AbilityCommand("XelNaga_Caverns_DoorNEOpened", 0)), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(UnitFromId(642), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(645)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(642), OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(PointFromId(645), 1.0, PointGetFacing(PointFromId(645)))), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(637), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(646)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(637), OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(PointFromId(646), 1.0, PointGetFacing(PointFromId(646)))), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(643), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(647)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(643), OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(PointFromId(647), 1.0, PointGetFacing(PointFromId(647)))), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(639), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(648)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(639), OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(PointFromId(648), 1.0, PointGetFacing(PointFromId(648)))), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(638), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(649)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(638), OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(PointFromId(649), 1.0, PointGetFacing(PointFromId(649)))), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(641), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(650)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(641), OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(PointFromId(650), 1.0, PointGetFacing(PointFromId(650)))), c_orderQueueAddToEnd);
    Wait(2.5, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1055), 4.0, -1, 10, true);
    libA3DDD02B_gf_SendTransmissionCampaign(UnitFromId(637), "pMission_VoidPrologue03|Line00094", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_DontShowPortrait, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(1.0, c_timeGame);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidAntechamberCinematic_Init () {
    gt_MidAntechamberCinematic = TriggerCreate("gt_MidAntechamberCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Antechamber End
//--------------------------------------------------------------------------------------------------
bool gt_MidAntechamberEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidAntechamberEnd_Init () {
    gt_MidAntechamberEnd = TriggerCreate("gt_MidAntechamberEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Antechamber Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidAntechamberCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;
    int lv_i;

    // Automatic Variable Declarations
    unitgroup autoC54BC2B0_g;
    int autoC54BC2B0_u;
    unit autoC54BC2B0_var;
    unitgroup auto87957E1E_g;
    int auto87957E1E_u;
    unit auto87957E1E_var;
    unitgroup auto6DBCCB42_g;
    int auto6DBCCB42_u;
    unit auto6DBCCB42_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitPauseAll(false);
    UnitSetState(gv_s2_VoidCatalyst, c_unitStateSelectable, true);
    UnitSetState(gv_s2_VoidCatalyst, c_unitStateTargetable, true);
    UnitSetState(gv_s2_VoidCatalyst, c_unitStateStatusBar, true);
    UnitSetState(gv_s2_VoidCatalyst, c_unitStateCursorable, true);
    UnitSetState(gv_s2_VoidCatalyst, c_unitStateInvulnerable, false);
    UnitSetState(gv_zeratul, c_unitStateFidget, true);
    UnitIssueOrder(gv_zeratul, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitSetPosition(gv_zeratul, PointFromId(900), false);
    UnitSetFacing(gv_zeratul, PointGetFacing(PointFromId(900)), 0.0);
    UnitIssueOrder(gv_malash, Order(AbilityCommand("MalashChannel", 1)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(283), Order(AbilityCommand("VoidCatalystStage3", 0)), c_orderQueueReplace);
    autoC54BC2B0_g = UnitGroup(null, gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC54BC2B0_u = UnitGroupCount(autoC54BC2B0_g, c_unitCountAll);
    for (;; autoC54BC2B0_u -= 1) {
        autoC54BC2B0_var = UnitGroupUnitFromEnd(autoC54BC2B0_g, autoC54BC2B0_u);
        if (autoC54BC2B0_var == null) { break; }
        if (((UnitGetType(autoC54BC2B0_var) == "Stalker") || (UnitGetType(autoC54BC2B0_var) == "HighTemplar") || (UnitGetType(autoC54BC2B0_var) == "Archon"))) {
            UnitSetState(autoC54BC2B0_var, c_unitStateFidget, true);
            UnitSetPosition(autoC54BC2B0_var, RegionRandomPoint(RegionFromId(81)), false);
            UnitIssueOrder(autoC54BC2B0_var, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(900)), c_orderQueueReplace);
        }

    }
    libNtve_gf_ShowHideUnit(UnitFromId(1353), true);
    libNtve_gf_ShowHideUnit(UnitFromId(1351), true);
    libNtve_gf_ShowHideUnit(UnitFromId(1350), true);
    UnitIssueOrder(UnitFromId(642), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitSetPosition(UnitFromId(642), PointFromId(645), false);
    UnitSetFacing(UnitFromId(642), PointGetFacing(PointFromId(645)), 0.0);
    UnitIssueOrder(UnitFromId(637), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitSetPosition(UnitFromId(637), PointFromId(646), false);
    UnitSetFacing(UnitFromId(637), PointGetFacing(PointFromId(646)), 0.0);
    UnitIssueOrder(UnitFromId(643), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitSetPosition(UnitFromId(643), PointFromId(647), false);
    UnitSetFacing(UnitFromId(643), PointGetFacing(PointFromId(647)), 0.0);
    UnitIssueOrder(UnitFromId(639), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitSetPosition(UnitFromId(639), PointFromId(648), false);
    UnitSetFacing(UnitFromId(639), PointGetFacing(PointFromId(648)), 0.0);
    UnitIssueOrder(UnitFromId(638), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitSetPosition(UnitFromId(638), PointFromId(649), false);
    UnitSetFacing(UnitFromId(638), PointGetFacing(PointFromId(649)), 0.0);
    if ((libA3DDD02B_gf_DifficultyValuePrologueInteger(0, 0, 1, 1) == 1)) {
        UnitIssueOrder(UnitFromId(641), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitSetPosition(UnitFromId(641), PointFromId(650), false);
        UnitSetFacing(UnitFromId(641), PointGetFacing(PointFromId(650)), 0.0);
    }

    if ((gv_cinematicCompleted == false)) {
        UnitIssueOrder(UnitFromId(127), Order(AbilityCommand("XelNaga_Caverns_DoorNEOpened", 0)), c_orderQueueReplace);
    }

    auto87957E1E_g = gv_cinematicTempUnits;
    auto87957E1E_u = UnitGroupCount(auto87957E1E_g, c_unitCountAll);
    for (;; auto87957E1E_u -= 1) {
        auto87957E1E_var = UnitGroupUnitFromEnd(auto87957E1E_g, auto87957E1E_u);
        if (auto87957E1E_var == null) { break; }
        UnitRemove(auto87957E1E_var);
    }
    auto6DBCCB42_g = gv_cinematicHiddenUnits;
    auto6DBCCB42_u = UnitGroupCount(auto6DBCCB42_g, c_unitCountAll);
    for (;; auto6DBCCB42_u -= 1) {
        auto6DBCCB42_var = UnitGroupUnitFromEnd(auto6DBCCB42_g, auto6DBCCB42_u);
        if (auto6DBCCB42_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto6DBCCB42_var, true);
    }
    CameraShakeStop(gv_pLAYER_01_USER);
    SoundStop(gv_amonStinger, true);
    SoundStop(gv_amonRoar, true);
    if ((gv_midAmonSoundtrackCompleted == false)) {
        SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, false);
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }

    GameSetLighting("XelNaga_Caverns", 0.0);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_TALDARIM, libNtve_ge_AllianceSetting_Enemy);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(899), 0.0, -1, 10.0, true);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    gv_inCinematic = false;
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(62), true, false);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_malash), c_animNameDefault, "Stand Channel", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PauseUnit(gv_malash, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidAntechamberCleanup_Init () {
    gt_MidAntechamberCleanup = TriggerCreate("gt_MidAntechamberCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Anthechamber Unit Placement
//--------------------------------------------------------------------------------------------------
bool gt_MidAnthechamberUnitPlacement_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_midStalkerGroup;
    int lv_midStalkerCount;
    unitgroup lv_midTemplarGroup;
    int lv_midTemplarCount;
    unitgroup lv_midArchonGroup;
    int lv_midArchonCount;

    // Automatic Variable Declarations
    int auto55FC4DB4_ae;
    int auto55FC4DB4_var;
    int auto5480880A_ae;
    int auto5480880A_var;
    int autoE6C15A2A_ae;
    int autoE6C15A2A_var;

    // Variable Initialization
    lv_midStalkerGroup = UnitGroupEmpty();
    lv_midTemplarGroup = UnitGroupEmpty();
    lv_midArchonGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_midStalkerGroup = UnitGroup("Stalker", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_midStalkerCount = UnitGroupCount(lv_midStalkerGroup, c_unitCountAlive);
    lv_midTemplarGroup = UnitGroup("HighTemplar", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_midTemplarCount = UnitGroupCount(lv_midTemplarGroup, c_unitCountAlive);
    lv_midArchonGroup = UnitGroup("Archon", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_midArchonCount = UnitGroupCount(lv_midArchonGroup, c_unitCountAlive);
    if ((lv_midStalkerCount > 0)) {
        auto55FC4DB4_ae = lv_midStalkerCount;
        auto55FC4DB4_var = 1;
        for ( ; auto55FC4DB4_var <= auto55FC4DB4_ae; auto55FC4DB4_var += 1 ) {
            UnitSetState(UnitGroupUnit(lv_midStalkerGroup, auto55FC4DB4_var), c_unitStateFidget, false);
            if ((auto55FC4DB4_var <= 13)) {
                UnitSetPosition(UnitGroupUnit(lv_midStalkerGroup, auto55FC4DB4_var), PointFromName(("Mid Stalker " + IntToString(auto55FC4DB4_var))), false);
            }
            else {
                UnitSetPosition(UnitGroupUnit(lv_midStalkerGroup, auto55FC4DB4_var), RegionRandomPoint(RegionFromId(31)), false);
            }
            UnitIssueOrder(UnitGroupUnit(lv_midStalkerGroup, auto55FC4DB4_var), OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(894)), c_orderQueueReplace);
        }
    }

    if ((lv_midTemplarCount > 0)) {
        auto5480880A_ae = lv_midTemplarCount;
        auto5480880A_var = 1;
        for ( ; auto5480880A_var <= auto5480880A_ae; auto5480880A_var += 1 ) {
            UnitSetState(UnitGroupUnit(lv_midTemplarGroup, auto5480880A_var), c_unitStateFidget, false);
            if ((auto5480880A_var <= 4)) {
                UnitSetPosition(UnitGroupUnit(lv_midTemplarGroup, auto5480880A_var), PointFromName(("Mid Templar " + IntToString(auto5480880A_var))), false);
            }
            else {
                UnitSetPosition(UnitGroupUnit(lv_midTemplarGroup, auto5480880A_var), RegionRandomPoint(RegionFromId(31)), false);
            }
            UnitIssueOrder(UnitGroupUnit(lv_midTemplarGroup, auto5480880A_var), OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(894)), c_orderQueueReplace);
        }
    }

    if ((lv_midArchonCount > 0)) {
        autoE6C15A2A_ae = lv_midArchonCount;
        autoE6C15A2A_var = 1;
        for ( ; autoE6C15A2A_var <= autoE6C15A2A_ae; autoE6C15A2A_var += 1 ) {
            UnitSetState(UnitGroupUnit(lv_midArchonGroup, autoE6C15A2A_var), c_unitStateFidget, false);
            if ((autoE6C15A2A_var <= 2)) {
                UnitSetPosition(UnitGroupUnit(lv_midArchonGroup, autoE6C15A2A_var), PointFromName(("Mid Archon " + IntToString(autoE6C15A2A_var))), false);
            }
            else {
                UnitSetPosition(UnitGroupUnit(lv_midArchonGroup, autoE6C15A2A_var), RegionRandomPoint(RegionFromId(31)), false);
            }
            UnitIssueOrder(UnitGroupUnit(lv_midArchonGroup, autoE6C15A2A_var), OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(894)), c_orderQueueReplace);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidAnthechamberUnitPlacement_Init () {
    gt_MidAnthechamberUnitPlacement = TriggerCreate("gt_MidAnthechamberUnitPlacement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Void Catalyst Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_MidVoidCatalystDestroyedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_MidVoidCatalystDestroyedSetup, true, true);
    TriggerExecute(gt_MidVoidCatalystDestroyedCinematic, true, true);
    TriggerExecute(gt_MidVoidCatalystDestroyedEnd, true, true);
    TriggerExecute(gt_MidVoidCatalystDestroyedCleanup, true, true);
    TriggerQueueExit();
    TriggerExecute(gt_StartGameSection3Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidVoidCatalystDestroyedQ_Init () {
    gt_MidVoidCatalystDestroyedQ = TriggerCreate("gt_MidVoidCatalystDestroyedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Void Catalyst Destroyed Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidVoidCatalystDestroyedSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto20D67E7A_g;
    int auto20D67E7A_u;
    unit auto20D67E7A_var;
    int auto91FA8EE1_n;
    int auto91FA8EE1_i;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    gv_inCinematic = true;
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_TALDARIM, libNtve_ge_AllianceSetting_Neutral);
    TriggerExecute(gt_S1Cleanup, true, false);
    TriggerExecute(gt_S2Cleanup, true, false);
    gv_currentSection = 3;
    RegionPlayableMapSet(RegionFromId(127));
    libA3DDD02B_gf_SetObjectiveStateCampaign("PPrologue03Primary01", libA3DDD02B_ge_MissionObjectiveState_Undiscovered);
    libA3DDD02B_gf_SetObjectiveStateCampaign("PPrologue03Primary02", libA3DDD02B_ge_MissionObjectiveState_Undiscovered);
    libA3DDD02B_gf_SetObjectiveStateCampaign("PPrologue03Bonus01", libA3DDD02B_ge_MissionObjectiveState_Undiscovered);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_TALDARIM, libNtve_ge_AllianceSetting_Neutral);
    Wait(0.0625, c_timeGame);
    gv_cinematicTempUnits = UnitGroupEmpty();
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitSetState(gv_zeratul, c_unitStateFidget, false);
    UnitIssueOrder(gv_zeratul, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitSetPosition(gv_zeratul, PointFromId(185), false);
    UnitSetFacing(gv_zeratul, PointGetFacing(PointFromId(185)), 0.0);
    UnitBehaviorAdd(gv_zeratul, "SuppressCloak", gv_zeratul, 1);
    auto20D67E7A_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto20D67E7A_u = UnitGroupCount(auto20D67E7A_g, c_unitCountAll);
    for (;; auto20D67E7A_u -= 1) {
        auto20D67E7A_var = UnitGroupUnitFromEnd(auto20D67E7A_g, auto20D67E7A_u);
        if (auto20D67E7A_var == null) { break; }
        if (((UnitGetType(auto20D67E7A_var) == "Stalker") || (UnitGetType(auto20D67E7A_var) == "HighTemplar") || (UnitGetType(auto20D67E7A_var) == "Archon"))) {
            libNtve_gf_UnitCreateFacingPoint(1, UnitGetType(auto20D67E7A_var), c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(73)), PointFromId(1591));
            UnitGroupAdd(gv_midTempPlayerUnits, UnitLastCreated());
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropKills, UnitGetPropertyFixed(auto20D67E7A_var, c_unitPropKills, c_unitPropCurrent));
            UnitRemove(auto20D67E7A_var);
        }

    }
    auto91FA8EE1_n = (10 - UnitGroupCount(UnitGroupFilter("Stalker", gv_pLAYER_01_USER, gv_midTempPlayerUnits, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
    for (auto91FA8EE1_i = 1; auto91FA8EE1_i <= auto91FA8EE1_n; auto91FA8EE1_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "Stalker", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(73)), PointFromId(1591));
        UnitGroupAdd(gv_midTempPlayerUnits, UnitLastCreated());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidVoidCatalystDestroyedSetup_Init () {
    gt_MidVoidCatalystDestroyedSetup = TriggerCreate("gt_MidVoidCatalystDestroyedSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Void Catalyst Destroyed Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidVoidCatalystDestroyedCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(91), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(871), (SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_VoidPrologue03|Line00077", true), c_soundIndexAny)) + 1.0), -1, 10, true);
    UnitIssueOrder(gv_zeratul, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1469)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ResidualVortex", c_unitCreateIgnorePlacement, gv_pLAYER_03_AMON, PointFromId(1591));
    gv_s3ResidualVortex = UnitLastCreated();
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libA3DDD02B_gf_SendTransmissionCampaign(null, "pMission_VoidPrologue03|Line00077", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_zeratul), c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.833, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_zeratul), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    SoundPlay(SoundLink("WhiteTransitionStinger", -1), PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(gt_MidWhiteQuake, true, false);
    GameSetLighting("SummonLightWhite", 1.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(870), 3.0, -1, 10, true);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(100.00, 100.00, 100.00), 0.0, false);
    Wait(1.0, c_timeGame);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_zeratul), c_animNameDefault);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(147)), c_animNameDefault, "Dead A", c_animFlagPlayForever, c_animTimeDefault);
    SoundPlay(SoundLink("VoidCatalystLoop", 0), PlayerGroupAll(), 100.0, 0.0);
    gv_voidCatalystLoop = SoundLastPlayed();
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "VP03_Music_SummonAmon", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(100.00, 100.00, 100.00), 0.0, false);
    Wait(5.0, c_timeReal);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 50.0, 1.0);
    libA3DDD02B_gf_SendTransmissionCampaign(null, "pMission_VoidPrologue03|Line00082", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_DontShowPortrait, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 2.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2091), (SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_VoidPrologue03|Line00115", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_VoidPrologue03|Line00076", true), c_soundIndexAny)) + 2), -1, 10, true);
    libA3DDD02B_gf_SendTransmissionCampaign(gv_zeratul, "pMission_VoidPrologue03|Line00115", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    SoundPlay(SoundLink("VoidCatalystSweetener", 0), PlayerGroupAll(), 50.0, 0.0);
    Wait(3.0, c_timeReal);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 25.0, 0.7);
    libA3DDD02B_gf_SendTransmissionCampaign(gv_zeratul, "pMission_VoidPrologue03|Line00076", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 1.0);
    TriggerExecute(gt_MidAmonQuake, true, false);
    SoundPlay(SoundLink("VP03_Music_AmonTransitionStinger", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundStop(gv_voidCatalystLoop, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(872), 3.0, -1, 10, true);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    GameSetLighting("AmonSummonLight", 1.0);
    Wait(1.0, c_timeGame);
    SoundPlay(SoundLink("AmonQuake12", -1), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(147)), c_animNameDefault, "Dead", c_animFlagPlayForever, c_animTimeDefault);
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    Wait(3.0, c_timeReal);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1071), 3.0, -1, 10, true);
    GameSetLighting("AmonShadowLight", 3.0);
    TriggerExecute(gt_MidShadowVolley, true, false);
    Wait(0.5, c_timeGame);
    UnitIssueOrder(gv_zeratul, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(185)), c_orderQueueReplace);
    Wait(1.0, c_timeReal);
    UnitIssueOrder(gv_zeratul, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1091)), c_orderQueueReplace);
    Wait(2.5, c_timeReal);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1073), SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_VoidPrologue03|Line00103", true), c_soundIndexAny)), -1, 10, true);
    libA3DDD02B_gf_SendTransmissionCampaign(null, "pMission_VoidPrologue03|Line00103", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TriggerExecute(gt_MidCollapseQuake, true, false);
    Wait(1.0, c_timeGame);
    SoundPlay(SoundLink("GasEruption", -1), PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(gt_MidChangeGasOpacity, true, false);
    Wait(3.0, c_timeReal);
    libA3DDD02B_gf_SendTransmissionCampaign(gv_zeratul, "pMission_VoidPrologue03|Line00113", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidVoidCatalystDestroyedCinematic_Init () {
    gt_MidVoidCatalystDestroyedCinematic = TriggerCreate("gt_MidVoidCatalystDestroyedCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Void Catalyst Destroyed End
//--------------------------------------------------------------------------------------------------
bool gt_MidVoidCatalystDestroyedEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidVoidCatalystDestroyedEnd_Init () {
    gt_MidVoidCatalystDestroyedEnd = TriggerCreate("gt_MidVoidCatalystDestroyedEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Void Catalyst Destroyed Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidVoidCatalystDestroyedCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto69C151F4_g;
    int auto69C151F4_u;
    unit auto69C151F4_var;
    const int autoA9CEA7B7_n = 4;
    int autoA9CEA7B7_i;
    unitgroup auto42D28136_g;
    int auto42D28136_u;
    unit auto42D28136_var;
    unitgroup auto992F18D5_g;
    int auto992F18D5_u;
    unit auto992F18D5_var;
    unitgroup auto00F50C45_g;
    int auto00F50C45_u;
    unit auto00F50C45_var;
    unitgroup auto9B231310_g;
    int auto9B231310_u;
    unit auto9B231310_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitPauseAll(false);
    auto69C151F4_g = gv_cinematicTempUnits;
    auto69C151F4_u = UnitGroupCount(auto69C151F4_g, c_unitCountAll);
    for (;; auto69C151F4_u -= 1) {
        auto69C151F4_var = UnitGroupUnitFromEnd(auto69C151F4_g, auto69C151F4_u);
        if (auto69C151F4_var == null) { break; }
        UnitRemove(auto69C151F4_var);
    }
    if ((gv_midUnitsZapped == false)) {
        for (autoA9CEA7B7_i = 1; autoA9CEA7B7_i <= autoA9CEA7B7_n; autoA9CEA7B7_i += 1) {
            UnitGroupRemove(gv_midTempPlayerUnits, UnitGroupRandomUnit(UnitGroupFilter("Stalker", gv_pLAYER_01_USER, gv_midTempPlayerUnits, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
        }
        auto42D28136_g = gv_midTempPlayerUnits;
        auto42D28136_u = UnitGroupCount(auto42D28136_g, c_unitCountAll);
        for (;; auto42D28136_u -= 1) {
            auto42D28136_var = UnitGroupUnitFromEnd(auto42D28136_g, auto42D28136_u);
            if (auto42D28136_var == null) { break; }
            UnitRemove(auto42D28136_var);
        }
    }

    auto992F18D5_g = UnitGroup("Stalker", gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_zeratul), 16.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto992F18D5_u = UnitGroupCount(auto992F18D5_g, c_unitCountAll);
    for (;; auto992F18D5_u -= 1) {
        auto992F18D5_var = UnitGroupUnitFromEnd(auto992F18D5_g, auto992F18D5_u);
        if (auto992F18D5_var == null) { break; }
        UnitGroupAdd(gv_s3PlayerStalkers, auto992F18D5_var);
        UnitIssueOrder(auto992F18D5_var, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(1090)), c_orderQueueReplace);
    }
    if ((gv_cinematicCompleted == false)) {
        UnitIssueOrder(gv_zeratul, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitSetPosition(gv_zeratul, PointFromId(1091), false);
        UnitIssueOrder(gv_zeratul, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(185)), c_orderQueueAddToEnd);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(147)), c_animNameDefault, "Dead", c_animFlagPlayForever, c_animTimeDefault);
        auto00F50C45_g = gv_midTempPlayerUnits;
        auto00F50C45_u = UnitGroupCount(auto00F50C45_g, c_unitCountAll);
        for (;; auto00F50C45_u -= 1) {
            auto00F50C45_var = UnitGroupUnitFromEnd(auto00F50C45_g, auto00F50C45_u);
            if (auto00F50C45_var == null) { break; }
            UnitRemove(auto00F50C45_var);
        }
    }

    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_zeratul), c_animNameDefault);
    UnitBehaviorRemove(gv_zeratul, "SuppressCloak", 1);
    UnitSetState(gv_zeratul, c_unitStateFidget, true);
    auto9B231310_g = UnitGroup(null, gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9B231310_u = UnitGroupCount(auto9B231310_g, c_unitCountAll);
    for (;; auto9B231310_u -= 1) {
        auto9B231310_var = UnitGroupUnitFromEnd(auto9B231310_g, auto9B231310_u);
        if (auto9B231310_var == null) { break; }
        UnitSetPropertyFixed(auto9B231310_var, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(auto9B231310_var, c_unitPropShieldsPercent, 100.0);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ResidualVortex", c_unitCreateIgnorePlacement, gv_pLAYER_03_AMON, PointFromId(1556));
    gv_s3ResidualVortexForwardUnit01 = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ResidualVortex", c_unitCreateIgnorePlacement, gv_pLAYER_03_AMON, PointFromId(1588));
    gv_s3ResidualVortexForwardUnit02 = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ResidualVortex", c_unitCreateIgnorePlacement, gv_pLAYER_03_AMON, PointFromId(2059));
    gv_s3ResidualVortexForwardUnit03 = UnitLastCreated();
    CameraShakeStop(gv_pLAYER_01_USER);
    TriggerExecute(gt_MidChangeGasOpacity, true, false);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "VP03_Music_CentralChamberBattle", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    SoundStop(gv_voidCatalystLoop, true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_TALDARIM, libNtve_ge_AllianceSetting_Enemy);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(37));
    gv_s3VortexRevealer = VisRevealerLastCreated();
    VisRevealerEnable(gv_s3VortexRevealer, true);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(117), 8.0, false);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 3.0;
        GameSetLighting("XelNaga_Caverns", lv_fadeDuration);
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1590), lv_fadeDuration, -1, 10.0, true);
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
        libNtve_gf_GlobalCinematicSetting(false);
        gv_inCinematic = false;
        Wait(lv_fadeDuration, c_timeGame);
    }
    else {
        lv_fadeDuration = 1.0;
        GameSetLighting("XelNaga_Caverns", 0.0);
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1590), 0.0, -1, 10.0, true);
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
        libNtve_gf_GlobalCinematicSetting(false);
        gv_inCinematic = false;
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(117), true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidVoidCatalystDestroyedCleanup_Init () {
    gt_MidVoidCatalystDestroyedCleanup = TriggerCreate("gt_MidVoidCatalystDestroyedCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Change Gas Opacity
//--------------------------------------------------------------------------------------------------
bool gt_MidChangeGasOpacity_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    ActorSend(ActorFromDoodad(DoodadFromId(1077)), "SetOpacity");
    ActorSend(ActorFromDoodad(DoodadFromId(1075)), "SetOpacity");
    ActorSend(ActorFromDoodad(DoodadFromId(1074)), "SetOpacity");
    ActorSend(ActorFromDoodad(DoodadFromId(31)), "SetOpacity 1.000000 1.000000");
    ActorSend(ActorFromDoodad(DoodadFromId(683)), "SetOpacity 1.000000 1.000000");
    ActorSend(ActorFromDoodad(DoodadFromId(1022)), "SetOpacity 1.000000 1.000000");
    ActorSend(ActorFromDoodad(DoodadFromId(1089)), "SetOpacity 1.000000 1.000000");
    ActorSend(ActorFromDoodad(DoodadFromId(1080)), "SetOpacity 1.000000 1.000000");
    ActorSend(ActorFromDoodad(DoodadFromId(1079)), "SetOpacity 1.000000 1.000000");
    ActorSend(ActorFromDoodad(DoodadFromId(1083)), "SetOpacity 1.000000 1.000000");
    ActorSend(ActorFromDoodad(DoodadFromId(1084)), "SetOpacity 1.000000 1.000000");
    ActorSend(ActorFromDoodad(DoodadFromId(1087)), "SetOpacity 1.000000 1.000000");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidChangeGasOpacity_Init () {
    gt_MidChangeGasOpacity = TriggerCreate("gt_MidChangeGasOpacity_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - White Quake
//--------------------------------------------------------------------------------------------------
bool gt_MidWhiteQuake_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_debrisIndex;
    actor[9] lv_earthquakeDebris;

    // Automatic Variable Declarations
    const int auto1A97CFB0_ae = 4;
    const int auto1A97CFB0_ai = 1;
    const int auto98CD4F6F_ae = 4;
    const int auto98CD4F6F_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("VP03_AmbientTurmoil2", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundPlay(SoundLink("VP03_Quake_Rumble_Long_2D", -1), PlayerGroupAll(), 100.0, 0.0);
    CameraShake(gv_pLAYER_01_USER, "Heavy", "Earthquake", 0.0, 1.0, 4.0);
    lv_debrisIndex = 1;
    for ( ; ( (auto1A97CFB0_ai >= 0 && lv_debrisIndex <= auto1A97CFB0_ae) || (auto1A97CFB0_ai < 0 && lv_debrisIndex >= auto1A97CFB0_ae) ) ; lv_debrisIndex += auto1A97CFB0_ai ) {
        libNtve_gf_CreateModelAtPoint("SpaceFallingDebris", PointWithOffsetPolar(PointFromId(1591), 8.0, (90*lv_debrisIndex)));
        lv_earthquakeDebris[lv_debrisIndex] = libNtve_gf_ActorLastCreated();
    }
    Wait(3.0, c_timeGame);
    lv_debrisIndex = 1;
    for ( ; ( (auto98CD4F6F_ai >= 0 && lv_debrisIndex <= auto98CD4F6F_ae) || (auto98CD4F6F_ai < 0 && lv_debrisIndex >= auto98CD4F6F_ae) ) ; lv_debrisIndex += auto98CD4F6F_ai ) {
        libNtve_gf_KillModel(lv_earthquakeDebris[lv_debrisIndex]);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidWhiteQuake_Init () {
    gt_MidWhiteQuake = TriggerCreate("gt_MidWhiteQuake_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Amon Quake
//--------------------------------------------------------------------------------------------------
bool gt_MidAmonQuake_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_debrisIndex;
    actor[9] lv_earthquakeDebris;

    // Automatic Variable Declarations
    const int auto659F6BAB_ae = 4;
    const int auto659F6BAB_ai = 1;
    const int autoFAAC8917_ae = 8;
    const int autoFAAC8917_ai = 1;
    const int auto53F192D5_ae = 8;
    const int auto53F192D5_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("Prologue_Vespene_Crack_Rock_Explode", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundPlay(SoundLink("VP03_Quake_Rumble_Crunchy", -1), PlayerGroupAll(), 100.0, 0.0);
    CameraShake(gv_pLAYER_01_USER, "Heavy", "Earthquake", 0.0, 1.0, 4.0);
    lv_debrisIndex = 1;
    for ( ; ( (auto659F6BAB_ai >= 0 && lv_debrisIndex <= auto659F6BAB_ae) || (auto659F6BAB_ai < 0 && lv_debrisIndex >= auto659F6BAB_ae) ) ; lv_debrisIndex += auto659F6BAB_ai ) {
        libNtve_gf_CreateModelAtPoint("SpaceFallingDebris", PointWithOffsetPolar(PointFromId(1591), 8.0, (90*lv_debrisIndex)));
        lv_earthquakeDebris[lv_debrisIndex] = libNtve_gf_ActorLastCreated();
    }
    lv_debrisIndex = 5;
    for ( ; ( (autoFAAC8917_ai >= 0 && lv_debrisIndex <= autoFAAC8917_ae) || (autoFAAC8917_ai < 0 && lv_debrisIndex >= autoFAAC8917_ae) ) ; lv_debrisIndex += autoFAAC8917_ai ) {
        libNtve_gf_CreateModelAtPoint("SpaceFallingDebris", PointWithOffsetPolar(PointFromId(1591), 16.0, ((90*lv_debrisIndex)+45)));
        lv_earthquakeDebris[lv_debrisIndex] = libNtve_gf_ActorLastCreated();
    }
    Wait(3.0, c_timeGame);
    lv_debrisIndex = 1;
    for ( ; ( (auto53F192D5_ai >= 0 && lv_debrisIndex <= auto53F192D5_ae) || (auto53F192D5_ai < 0 && lv_debrisIndex >= auto53F192D5_ae) ) ; lv_debrisIndex += auto53F192D5_ai ) {
        libNtve_gf_KillModel(lv_earthquakeDebris[lv_debrisIndex]);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidAmonQuake_Init () {
    gt_MidAmonQuake = TriggerCreate("gt_MidAmonQuake_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Collapse Quake
//--------------------------------------------------------------------------------------------------
bool gt_MidCollapseQuake_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_debrisIndex;
    actor[9] lv_earthquakeDebris;

    // Automatic Variable Declarations
    const int autoF1E40A76_ae = 4;
    const int autoF1E40A76_ai = 1;
    const int auto0312683E_ae = 8;
    const int auto0312683E_ai = 1;
    const int auto60C9F31B_ae = 8;
    const int auto60C9F31B_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("VP03_AmbientTurmoil2", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundPlay(SoundLink("VP03_Quake_Rumble_Long_2D", -1), PlayerGroupAll(), 100.0, 0.0);
    CameraShake(gv_pLAYER_01_USER, "Heavy", "Earthquake", 0.0, 1.0, 4.0);
    lv_debrisIndex = 1;
    for ( ; ( (autoF1E40A76_ai >= 0 && lv_debrisIndex <= autoF1E40A76_ae) || (autoF1E40A76_ai < 0 && lv_debrisIndex >= autoF1E40A76_ae) ) ; lv_debrisIndex += autoF1E40A76_ai ) {
        libNtve_gf_CreateModelAtPoint("SpaceFallingDebris", PointWithOffsetPolar(UnitGetPosition(gv_zeratul), 8.0, (90*lv_debrisIndex)));
        lv_earthquakeDebris[lv_debrisIndex] = libNtve_gf_ActorLastCreated();
    }
    lv_debrisIndex = 5;
    for ( ; ( (auto0312683E_ai >= 0 && lv_debrisIndex <= auto0312683E_ae) || (auto0312683E_ai < 0 && lv_debrisIndex >= auto0312683E_ae) ) ; lv_debrisIndex += auto0312683E_ai ) {
        libNtve_gf_CreateModelAtPoint("SpaceFallingDebris", PointWithOffsetPolar(UnitGetPosition(gv_zeratul), 16.0, ((90*lv_debrisIndex)+45)));
        lv_earthquakeDebris[lv_debrisIndex] = libNtve_gf_ActorLastCreated();
    }
    Wait(3.0, c_timeGame);
    lv_debrisIndex = 1;
    for ( ; ( (auto60C9F31B_ai >= 0 && lv_debrisIndex <= auto60C9F31B_ae) || (auto60C9F31B_ai < 0 && lv_debrisIndex >= auto60C9F31B_ae) ) ; lv_debrisIndex += auto60C9F31B_ai ) {
        libNtve_gf_KillModel(lv_earthquakeDebris[lv_debrisIndex]);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCollapseQuake_Init () {
    gt_MidCollapseQuake = TriggerCreate("gt_MidCollapseQuake_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Shadow Volley
//--------------------------------------------------------------------------------------------------
bool gt_MidShadowVolley_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_currentUnit;

    // Automatic Variable Declarations
    const int auto27DD4A93_n = 4;
    int auto27DD4A93_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_midUnitsZapped = true;
    for (auto27DD4A93_i = 1; auto27DD4A93_i <= auto27DD4A93_n; auto27DD4A93_i += 1) {
        UnitGroupRemove(gv_midTempPlayerUnits, UnitGroupRandomUnit(UnitGroupFilter("Stalker", gv_pLAYER_01_USER, gv_midTempPlayerUnits, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
    }
    SoundPlayForPlayer(SoundLink("AmonShadowVolley", -1), c_maxPlayers, PlayerGroupAll(), 80.0, 0.0);
    while ((libNtve_gf_UnitGroupIsDead(gv_midTempPlayerUnits) == false)) {
        lv_currentUnit = UnitGroupRandomUnit(gv_midTempPlayerUnits, c_unitCountAlive);
        UnitGroupRemove(gv_midTempPlayerUnits, lv_currentUnit);
        libNtve_gf_ChangeUnitDamage(lv_currentUnit, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Mega);
        UnitIssueOrder(gv_s3ResidualVortex, OrderTargetingUnit(AbilityCommand("ShadowMissile", 0), lv_currentUnit), c_orderQueueReplace);
        Wait(0.25, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidShadowVolley_Init () {
    gt_MidShadowVolley = TriggerCreate("gt_MidShadowVolley_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    gv_inCinematic = true;
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UnitClearSelection(gv_pLAYER_01_USER);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UnitClearSelection(gv_pLAYER_01_USER);
    TriggerExecute(gt_S1Cleanup, true, false);
    TriggerExecute(gt_S2Cleanup, true, false);
    TriggerExecute(gt_S3Cleanup, true, false);
    RegionPlayableMapSet(RegionFromId(127));
    AITimePause(true);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    UnitRemove(UnitFromId(1651));
    UnitSetState(gv_zeratul, c_unitStateFidget, false);
    UnitIssueOrder(gv_zeratul, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitSetPosition(gv_zeratul, PointFromId(1959), false);
    UnitSetFacing(gv_zeratul, PointGetFacing(PointFromId(1959)), 0.0);
    UnitBehaviorAdd(gv_zeratul, "SuppressCloak", gv_zeratul, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_voidSeeker;

    // Automatic Variable Declarations
    unitgroup autoAA06EE78_g;
    int autoAA06EE78_u;
    unit autoAA06EE78_var;
    unitgroup autoAB123A0A_g;
    int autoAB123A0A_u;
    unit autoAB123A0A_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1756), 0.0, -1, 10, true);
    UnitCreate(1, "VoidSeeker", 0, gv_pLAYER_01_USER, PointFromId(1960), 135.0);
    lv_voidSeeker = UnitLastCreated();
    UnitIssueOrder(lv_voidSeeker, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1650)), c_orderQueueReplace);
    CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 0.0, 1.0, 3.0);
    SoundPlay(SoundLink("Prologue_Vespene_Crack_Rock_Explode", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundPlay(SoundLink("Prologue_Vespene_Crack_Rumble_2D", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundPlay(SoundLink("Prologue_Volcanic_Rumble_Swells", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "VP03_Music_Victory", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    SoundPlayForPlayer(SoundLink("Event_Prologue03_VoidSeeker_FlyIn", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2054), 8.0, -1, 10, true);
    libA3DDD02B_gf_SendTransmissionCampaign(gv_zeratul, "pMission_VoidPrologue03|Line00064", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libA3DDD02B_gf_SendTransmissionCampaign(null, "pMission_VoidPrologue03|Line00063", c_transmissionDurationAdd, 0.0, true, libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TriggerExecute(gt_VictoryEarthquake, true, false);
    UnitIssueOrder(gv_zeratul, OrderTargetingUnit(null, lv_voidSeeker), c_orderQueueReplace);
    SoundPlayForPlayer(SoundLink("Event_Prologue03_VoidSeeker_Exit", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    autoAA06EE78_g = gv_s3PlayerStalkers;
    autoAA06EE78_u = UnitGroupCount(autoAA06EE78_g, c_unitCountAll);
    for (;; autoAA06EE78_u -= 1) {
        autoAA06EE78_var = UnitGroupUnitFromEnd(autoAA06EE78_g, autoAA06EE78_u);
        if (autoAA06EE78_var == null) { break; }
        UnitIssueOrder(autoAA06EE78_var, OrderTargetingUnit(null, lv_voidSeeker), c_orderQueueReplace);
    }
    Wait(3.0, c_timeGame);
    autoAB123A0A_g = gv_s3PlayerStalkers;
    autoAB123A0A_u = UnitGroupCount(autoAB123A0A_g, c_unitCountAll);
    for (;; autoAB123A0A_u -= 1) {
        autoAB123A0A_var = UnitGroupUnitFromEnd(autoAB123A0A_g, autoAB123A0A_u);
        if (autoAB123A0A_var == null) { break; }
        UnitIssueOrder(autoAB123A0A_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(908)), c_orderQueueReplace);
    }
    UnitIssueOrder(lv_voidSeeker, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1961)), c_orderQueueAddToEnd);
    UnitIssueOrder(lv_voidSeeker, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1962)), c_orderQueueAddToEnd);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 3.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(false);
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Earthquake
//--------------------------------------------------------------------------------------------------
bool gt_VictoryEarthquake_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_debrisIndex;
    actor[9] lv_earthquakeDebris;

    // Automatic Variable Declarations
    const int auto0A2EC146_ae = 4;
    const int auto0A2EC146_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CameraShake(gv_pLAYER_01_USER, "Massive", "Earthquake", 0.0, 1.0, 4.0);
    SoundPlay(SoundLink("VP03_AmbientTurmoil2", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundPlay(SoundLink("Prologue_Vespene_Crack_Rumble_2D", -1), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreateModelAtPoint("SpaceFallingDebris", PointFromId(1971));
    lv_earthquakeDebris[1] = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateModelAtPoint("SpaceFallingDebris", PointFromId(2051));
    lv_earthquakeDebris[2] = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateModelAtPoint("SpaceFallingDebris", PointFromId(2052));
    lv_earthquakeDebris[3] = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateModelAtPoint("SpaceFallingDebris", PointFromId(2053));
    lv_earthquakeDebris[4] = libNtve_gf_ActorLastCreated();
    Wait(3.0, c_timeGame);
    lv_debrisIndex = 1;
    for ( ; ( (auto0A2EC146_ai >= 0 && lv_debrisIndex <= auto0A2EC146_ae) || (auto0A2EC146_ai < 0 && lv_debrisIndex >= auto0A2EC146_ae) ) ; lv_debrisIndex += auto0A2EC146_ai ) {
        libNtve_gf_KillModel(lv_earthquakeDebris[lv_debrisIndex]);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryEarthquake_Init () {
    gt_VictoryEarthquake = TriggerCreate("gt_VictoryEarthquake_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04MusicSound_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_DEBUGS2_Init();
    gt_DEBUGS3_Init();
    gt_StartAI_Init();
    gt_GeneralAttackAI_Init();
    gt_TaldarimResources_Init();
    gt_ShowUnitStatusBarOnDamage_Init();
    gt_HideDamagedUnitStatusBar_Init();
    gt_S1Earthquake01_Init();
    gt_S1Earthquake02_Init();
    gt_S1Earthquake03_Init();
    gt_S1Earthquake04_Init();
    gt_S2Earthquake05_Init();
    gt_S2Earthquake06_Init();
    gt_StartGameSection1Q_Init();
    gt_S1Cleanup_Init();
    gt_S1TeachBlinkInitialAttack_Init();
    gt_S1TeachBlinkInitialAttackQ_Init();
    gt_S1TeachBlinkForcefieldsQ_Init();
    gt_S1TeachBlinkWarpPrism_Init();
    gt_S1TeachBlinkWarpPrismConstruction_Init();
    gt_S1FrontHallDoor1Q_Init();
    gt_S1TeachVoidArmorQ_Init();
    gt_S1TeachVoidArmorHighlightCancel_Init();
    gt_S1TeachShadowStrikeQ_Init();
    gt_S1TeachShadowStrikeImmortalDies_Init();
    gt_S1TeachShadowStrikeWarpPrism_Init();
    gt_S1TeachShadowStrikeWarpPrismConstruction_Init();
    gt_S1FrontHallShadowStrikeHighlightCancel_Init();
    gt_S1FindFirstHybridQ_Init();
    gt_S1ObserverRoomPrep_Init();
    gt_S1ObserverRoomTransmissionQ_Init();
    gt_S1ObserverRoomEnemyGroup01_Init();
    gt_S1ObserverRoomEnemyGroup02_Init();
    gt_S1ObserverRoomEnemyGroup03_Init();
    gt_S1ObserverRoomWarpAttack01_Init();
    gt_S1ObserverRoomWarpAttack02_Init();
    gt_S1ObserverRoomWarpPrismConstruction_Init();
    gt_S1AmbushOutsideAntechamberRoomQ_Init();
    gt_S1ZeratulReachesFirstBeacon_Init();
    gt_StartGameSection2Q_Init();
    gt_S2Cleanup_Init();
    gt_S2FirstHighTemplarGroup_Init();
    gt_S2EnemyGroup01_Init();
    gt_S2EnemyGroup01TransmissionQ_Init();
    gt_S2EnemyGroup02_Init();
    gt_S2EnemyGroup02TransmissionQ_Init();
    gt_S2EnemyGroup02PsiStorm_Init();
    gt_S2EnemyGroup03_Init();
    gt_S2EnemyGroup03TransmissionQ_Init();
    gt_S2MidCheckpoint_Init();
    gt_S2EnemyGroup04_Init();
    gt_S2AmonQ_Init();
    gt_S2GauntletPrep_Init();
    gt_S2GauntletStartQ_Init();
    gt_S2GauntletWaveUnits01_Init();
    gt_S2GauntletWaveUnits02_Init();
    gt_S2GauntletWaveUnits03_Init();
    gt_S2GauntletWarpPrisms01_Init();
    gt_S2GauntletWarpPrisms02_Init();
    gt_S2GauntletHybridsAndMalashWarpsOut_Init();
    gt_S2GauntletMalashWarpsOutTransmissionQ_Init();
    gt_S2GauntletUnitWarpsIn_Init();
    gt_S2VoidCatalystDiesQ_Init();
    gt_S2VoidCrystalExplosions_Init();
    gt_StartGameSection3Q_Init();
    gt_S3EscapeTimer_Init();
    gt_S3AmbientTurmoil_Init();
    gt_S3ShadowSpawnComplete_Init();
    gt_S3ShadowSpawns01_Init();
    gt_S3ShadowSpawns02AndEnemyStalkers_Init();
    gt_S3HybridSpawn1_Init();
    gt_S3ShadowSpawns03_Init();
    gt_S3PrepUnitsTryingToEscape_Init();
    gt_S3UnitsTryingToEscape_Init();
    gt_S3EscapeRouteBlocked1Q_Init();
    gt_S3ShadowSpawns04_Init();
    gt_S3AmonTaunt1Q_Init();
    gt_S3HybridSpawn2_Init();
    gt_S3HybridSpawn3_Init();
    gt_S3ShadowIsland_Init();
    gt_S3EscapeRouteClearQ_Init();
    gt_S3HybridShadowSpawn1_Init();
    gt_S3HybridShadowSpawn2_Init();
    gt_S3WarpPrism_Init();
    gt_S3WarpPrismHurryQ_Init();
    gt_S3FinalStretch_Init();
    gt_S3FinalStretchTalisSacrificeQ_Init();
    gt_S3FinalStretchEnemyAI_Init();
    gt_S3FinalStretchTalisAI_Init();
    gt_S3FinalStretchEnemySpawns1_Init();
    gt_S3FinalStretchEnemySpawns2_Init();
    gt_S3FinalStretchTalisSpawns1_Init();
    gt_S3FinalStretchTalisSpawns2_Init();
    gt_S3FinalStretchEscalation1_Init();
    gt_S3FinalStretchEscalation2_Init();
    gt_S3FinalStretchUnitConstructionCompleted_Init();
    gt_S3FinalCollapse_Init();
    gt_S3Cleanup_Init();
    gt_BOUnitEntersBonusObjectiveReveal_Init();
    gt_BODiscoverParticleCannonLocationsQ_Init();
    gt_BOOutsideTerrace01_Init();
    gt_BOOutsideTerrace02_Init();
    gt_BOOutsideTerrace03_Init();
    gt_BOPlayerNearsTerrace02Q_Init();
    gt_BOPlayerNearsTerrace03Q_Init();
    gt_BOParticleCannon01DestroyedQ_Init();
    gt_BOParticleCannon02DestroyedQ_Init();
    gt_BOParticleCannon03DestroyedQ_Init();
    gt_BOUnitWarpsIn_Init();
    gt_ParticleCannonTargetLoop01_Init();
    gt_ParticleCannonTargetLoop02_Init();
    gt_ParticleCannonTargetLoop03_Init();
    gt_ShadowStrikeKillsUnit_Init();
    gt_UnitLostBeforeCatalystTracking_Init();
    gt_AchievementNoUnitsLostBeforeCatalyst_Init();
    gt__10thAnniversaryAchievementVoidCatalystdestroyedbefore13minutes_Init();
    gt_DefeatZeratulDies_Init();
    gt_DefeatEscapeFailed_Init();
    gt_VictoryEscapeComplete_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_TipMissionHelpQ_Init();
    gt_ObjectiveInvestigateTempleCreate_Init();
    gt_ObjectiveInvestigateTempleComplete_Init();
    gt_ObjectiveDestroyCatalystCreate_Init();
    gt_ObjectiveDestroyCatalystComplete_Init();
    gt_ObjectiveEscapeCreate_Init();
    gt_ObjectiveEscapeComplete_Init();
    gt_ObjectiveEscapeFailed_Init();
    gt_ObjectiveZeratulMustSurviveCreate_Init();
    gt_ObjectiveZeratulMustSurviveComplete_Init();
    gt_ObjectiveZeratulMustSurviveFailed_Init();
    gt_ObjectiveDestroyParticleCannonsCreate_Init();
    gt_ObjectiveDestroyParticleCannonsUpdate_Init();
    gt_ObjectiveDestroyParticleCannonsComplete_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_IntroBridgeSequence_Init();
    gt_MidAntechamberQ_Init();
    gt_MidAntechamberSetup_Init();
    gt_MidAntechamberCinematic_Init();
    gt_MidAntechamberEnd_Init();
    gt_MidAntechamberCleanup_Init();
    gt_MidAnthechamberUnitPlacement_Init();
    gt_MidVoidCatalystDestroyedQ_Init();
    gt_MidVoidCatalystDestroyedSetup_Init();
    gt_MidVoidCatalystDestroyedCinematic_Init();
    gt_MidVoidCatalystDestroyedEnd_Init();
    gt_MidVoidCatalystDestroyedCleanup_Init();
    gt_MidChangeGasOpacity_Init();
    gt_MidWhiteQuake_Init();
    gt_MidAmonQuake_Init();
    gt_MidCollapseQuake_Init();
    gt_MidShadowVolley_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
    gt_VictoryEarthquake_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
