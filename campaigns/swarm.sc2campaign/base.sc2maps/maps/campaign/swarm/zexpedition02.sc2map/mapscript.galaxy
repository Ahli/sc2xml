//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Shoot the Messenger
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"
include "TriggerLibs/SwarmCampaignLib"
include "aiFD078E3C"
include "ai96FA581E"
include "ai3E812353"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libHots_InitLib();
    libSwaC_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_SHUTTLE_BLUE = 2;
const int gv_pLAYER_03_PROTOSS_GREEN = 3;
const int gv_pLAYER_04_PROTOSS_RED = 4;
const int gv_pLAYER_05_JUMPGATES = 5;
const int gv_pLAYER_06_STASIS_CHAMBER = 6;
const int gv_pLAYER_07_FROZENZERG = 7;
const int gv_launchFacGroups_SizeOf = 3;
const fixed gv_shuttleIdentifier_cv = 3.7;
const int gv_shuttleIDStore_cv = 9;
const int gv_shuttleStoreDestination_cv = 7;
const fixed gv_warningDistance = 25.0;
const int gv_stasisChamberPingIndex = 0;
const string gv_launchFacilityType = "ProtossDockingBayUnit";

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_LaunchLocation_LEFT = 0;
const int ge_LaunchLocation_MIDDLE = 1;
const int ge_LaunchLocation_RIGHT = 2;
const int ge_ExitLocation_LEFT = 0;
const int ge_ExitLocation_MIDDLE = 1;
const int ge_ExitLocation_RIGHT = 2;
const int ge_AnimateFacility_Open = 0;
const int ge_AnimateFacility_Close = 1;
const int ge_JumpGateState_Activate = 0;
const int ge_JumpGateState_Deactivate = 1;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
bool gv_gameOver;
bool gv_inCinematic;
string gv_mapMusicTrack;
unit gv_kerrigan;
playergroup gv_protossPlayers;
unitgroup gv_frozenZergGroupGlobal;
fixed gv_shuttleShields;
fixed gv_shuttleLife;
fixed gv_shuttleSpeed;
int gv_inCombatIndicator;
string gv_evacShuttleType;
unit[7] gv_dockingBayUnits;
bool[7] gv_dockingBayBusy;
point[6] gv_shuttleEscapePoint;
fixed gv_launchTrans_WAIT;
unit gv_shuttleUnit;
unitgroup gv_evacShuttles;
bool gv_shuttleLaunched;
unitgroup[7] gv_shuttlePingGroups;
fixed gv_nextShuttleLaunchTime;
int gv_escortIncrement;
int gv_warningCounter;
unit gv_warningShuttle;
int gv_warningTransmission;
revealer gv_revealLeftGate;
revealer gv_revealRightGate;
unitgroup gv_frozenExpansionProtoss;
unitgroup gv_stasisChamberGroup;
int gv_stasisChamberDestroyed;
string gv_stasisChamberType;
int[4] gv_stasisChamberPingArray;
bool gv_alternateVictory;
bool gv_noShuttleHasSlowedDown;
int gv_nexusDestroyedCount;
int gv_feralZergUnfrozen;
int gv_feralZergFrozenTotal;
int gv_dockingBaysDestroyed;
int gv_objectiveDestroyDominionBase;
int gv_shuttleWavesRemaining;
int gv_objectiveNoShuttleCanEscape;
int gv_objectiveBonusDestroyStasisChamber;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicPausedUnits;
unitgroup gv_cinematicTempUnits;
bool gv_cinematicCompleted;
unit gv_introKerrigan;
unitgroup gv_introHydras;
unit gv_introShuttle;
unit gv_introHydra3;
bool gv_introMusicCompleted;
sound[21] gv_introSounds;
int gv_introSoundCount;
bool gv_victoryCinematicCompleted;
unitgroup gv_victoryHiddenUnitGroup;
unit gv_victoryKerrigan;

void InitGlobals () {
    int init_i;

    gv_protossPlayers = PlayerGroupEmpty();
    gv_frozenZergGroupGlobal = UnitGroupEmpty();
    gv_evacShuttleType = "ProtossFrigate";
    gv_launchTrans_WAIT = 2.0;
    gv_evacShuttles = UnitGroupEmpty();
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_shuttlePingGroups[init_i] = UnitGroupEmpty();
    }
    gv_warningTransmission = c_invalidTransmissionId;
    gv_frozenExpansionProtoss = UnitGroupEmpty();
    gv_stasisChamberGroup = UnitGroupEmpty();
    gv_stasisChamberType = "ProtossBaseBioMassStorage";
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_stasisChamberPingArray[init_i] = c_invalidPingId;
    }
    gv_noShuttleHasSlowedDown = true;
    gv_objectiveDestroyDominionBase = c_invalidObjectiveId;
    gv_shuttleWavesRemaining = 8;
    gv_objectiveNoShuttleCanEscape = c_invalidObjectiveId;
    gv_objectiveBonusDestroyStasisChamber = c_invalidObjectiveId;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_introHydras = UnitGroupEmpty();
    gv_victoryHiddenUnitGroup = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
bool gf_PlayerIsInCombat (int lp_player);
unitgroup gf_EscortShuttles (unit lp_escort);
unitgroup gf_ShuttleEscorts (unit lp_shuttle);
void gf_ShuttleCreateWave (string lp_p_ShuttleType, int lp_p_ShuttleCount, string lp_p_EscortType1, int lp_p_EscortCount1, string lp_p_EscortType2, int lp_p_EscortCount2, string lp_p_EscortType3, int lp_p_EscortCount3, int lp_p_DockingBay, int lp_p_ShuttleDestination);
void gf_ShuttleBirth (unit lp_shuttle);
void gf_SaveEscortShuttles (unitgroup lp_shuttles, unit lp_escort, unitgroup lp_allEscorts);
void gf_AssignEscortsToShuttles (unitgroup lp_shuttleGroup, unitgroup lp_escortGroup);
void gf_DoShuttleWaveOlder2 (string lp_escortType, int lp_dockingBay, unitgroup lp_escortGroup, point lp_destination);
void gf_ShuttleLaunchAnimate (unit lp_dockingBay, int lp_statetoenter);
void gf_DoArrowPings (unitgroup lp_unitgroup, point lp_endpoint);
void gf_ActivateDeactivateWarpConduit (unit lp_unit, int lp_state);
void gf_SaveFrozenZerg (unit lp_cHOSEN_UNIT);
text gf_Objective_LabelText ();

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04MusicSound;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_PlayerIsInCombat;
trigger gt_PlayerIsInCombatIndicatorDiminish;
trigger gt_SporeCrawlerRootUsed;
trigger gt_PrepareKerriganRevive;
trigger gt_StartGameQ;
trigger gt_CreateWarpConduitPingLeft;
trigger gt_CreateAutoSaves;
trigger gt_ProtossBaseWarningLeftQ;
trigger gt_ProtossBaseWarningRightQ;
trigger gt_ShuttleSendWave01;
trigger gt_ShuttleSendWave02;
trigger gt_ShuttleSendWave03;
trigger gt_ShuttleSendWave04;
trigger gt_ShuttleSendWave05;
trigger gt_ShuttleSendWave06;
trigger gt_ShuttleSendWave07;
trigger gt_ShuttleSendWave08;
trigger gt_ShuttleEscapeWarning;
trigger gt_TransmissionEscapeWarningQ;
trigger gt_EscapingShuttleDestroyed;
trigger gt_CreateShuttleReticule;
trigger gt_ShuttleJumpProgressBar;
trigger gt_ShuttlebecomesCloaked;
trigger gt_ShuttlebecomesunCloaked;
trigger gt_CreateWarpConduitPings;
trigger gt_ActivateWarpConduitLeft;
trigger gt_ActivateWarpConduitMiddle;
trigger gt_ActivateWarpConduitRight;
trigger gt_TransmissionDockingBayDestroyedQ;
trigger gt_TransmissionShuttleLaunch01Q;
trigger gt_TransmissionShuttleLaunch02Q;
trigger gt_TransmissionShuttleLaunch03Q;
trigger gt_TransmissionShuttleLaunch04Q;
trigger gt_TransmissionShuttleLaunch05Q;
trigger gt_TransmissionShuttleLaunch06Q;
trigger gt_TransmissionShuttleLaunch07Q;
trigger gt_TransmissionShuttleLaunch08Q;
trigger gt_TransmissionDefendMiddleQ;
trigger gt_DiscoverFrozenExpansion;
trigger gt_RescueFrozenZergUnits;
trigger gt_RescueFrozenZergExpansion;
trigger gt_TransmissionFrozenBaseRescuedQ;
trigger gt_GroundIceCrack01;
trigger gt_IceWallCollapse01;
trigger gt_IceWallCollapse02;
trigger gt_IceWallCollapse03;
trigger gt_IceWallCollapse04;
trigger gt_IceWallCollapse05;
trigger gt_IceWallCollapse06;
trigger gt_ShowBonusObjectiveProximity;
trigger gt_BonusObjectiveIntroQ;
trigger gt_StasisChamberDestroyed;
trigger gt_TransmissionStasisChamberIntroQ;
trigger gt_TransmissionStasisChamberDestroyedQ;
trigger gt_StartAI;
trigger gt_StartUpgradesNormal;
trigger gt_StartUpgradesHard;
trigger gt_AIGiveMinerals;
trigger gt_AIGiveGas;
trigger gt_AIShuttleKilledSendAttackWave;
trigger gt_DisableMiniBaseBullies;
trigger gt_BonusObjectiveSentryForceFields;
trigger gt_FirstAttackAndBonusIntro;
trigger gt_TransmissionFirstAttackQ;
trigger gt_TransmissionSecondAttackQ;
trigger gt_DefeatBaseDead;
trigger gt_DefeatPrimaryObjectiveFailed;
trigger gt_VictoryDockingBaysDestroyed;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_AchievementNoShuttleSlowdown;
trigger gt_AchievementDestroyNexusNH;
trigger gt_AchievementDestroyShuttleBaysH;
trigger gt_TipMissionHelpQ;
trigger gt_ObjectiveDestroyAllProtossShuttlesCreate;
trigger gt_ObjectiveDestroyAllProtossShuttlesUpdate;
trigger gt_ObjectiveDestroyAllProtossShuttlesComplete;
trigger gt_ObjectiveDestroyAllProtossShuttlesFailed;
trigger gt_ObjectiveNoShuttleCanEscapeCreate;
trigger gt_ObjectiveNoShuttleCanEscapeComplete;
trigger gt_ObjectiveNoShuttleCanEscapeFailed;
trigger gt_ObjectiveDestroyStasisChamberCreate;
trigger gt_ObjectiveDestroyStasisChamberUpdate;
trigger gt_ObjectiveDestroyStasisChamberComplete;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_IntroSpawnShuttle;
trigger gt_IntroHydrasSetup;
trigger gt_IntroHydrasAttack;
trigger gt_IntroMusic;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;
trigger gt_VictoryZerg;

//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;

//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        cai_playerAI[init_i] = null;
    }
}

//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;

    if (cai_playerAI[p] == "aiFD078E3C") { aiFD078E3C_start(p); }
    if (cai_playerAI[p] == "ai96FA581E") { ai96FA581E_start(p); }
    if (cai_playerAI[p] == "ai3E812353") { ai3E812353_start(p); }
}

//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiFD078E3C") { aiFD078E3C_setDefGather(p, val); }
    if (cai_playerAI[p] == "ai96FA581E") { ai96FA581E_setDefGather(p, val); }
    if (cai_playerAI[p] == "ai3E812353") { ai3E812353_setDefGather(p, val); }
}

//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiFD078E3C") { return aiFD078E3C_getCustomData(p); }
    if (cai_playerAI[p] == "ai96FA581E") { return ai96FA581E_getCustomData(p); }
    if (cai_playerAI[p] == "ai3E812353") { return ai3E812353_getCustomData(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiFD078E3C") { return aiFD078E3C_getLastWave(p); }
    if (cai_playerAI[p] == "ai96FA581E") { return ai96FA581E_getLastWave(p); }
    if (cai_playerAI[p] == "ai3E812353") { return ai3E812353_getLastWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiFD078E3C") { aiFD078E3C_waves_run(p, target); }
    if (cai_playerAI[p] == "ai96FA581E") { ai96FA581E_waves_run(p, target); }
    if (cai_playerAI[p] == "ai3E812353") { ai3E812353_waves_run(p, target); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiFD078E3C") { aiFD078E3C_waves_enable(p, val); }
    if (cai_playerAI[p] == "ai96FA581E") { ai96FA581E_waves_enable(p, val); }
    if (cai_playerAI[p] == "ai3E812353") { ai3E812353_waves_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "aiFD078E3C") { aiFD078E3C_waves_stop(); }
    if (ai == "ai96FA581E") { ai96FA581E_waves_stop(); }
    if (ai == "ai3E812353") { ai3E812353_waves_stop(); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiFD078E3C") { aiFD078E3C_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "ai96FA581E") { ai96FA581E_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "ai3E812353") { ai3E812353_wave_run(w, p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiFD078E3C") { aiFD078E3C_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "ai96FA581E") { ai96FA581E_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "ai3E812353") { ai3E812353_wave_enable(w, p, val); }
}

//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "aiFD078E3C") { return aiFD078E3C_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "ai96FA581E") { return ai96FA581E_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "ai3E812353") { return ai3E812353_wave_isEnabled(w, p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiFD078E3C") { return aiFD078E3C_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "ai96FA581E") { return ai96FA581E_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "ai3E812353") { return ai3E812353_wave_createdUnits(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiFD078E3C") { return aiFD078E3C_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "ai96FA581E") { return ai96FA581E_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "ai3E812353") { return ai3E812353_wave_createdWave(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_startall () {
    cai_start("aiFD078E3C", 3);
    cai_start("ai96FA581E", 4);
    cai_start("ai3E812353", 2);
    AICampaignStart(5);
    AICampaignStart(6);
    AICampaignStart(7);
}

//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(3, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(4, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(2, target);
}

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
bool gf_PlayerIsInCombat (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_inCombatIndicator > 0)) {
        return true;
    }
    else {
        return false;
    }
}

unitgroup gf_EscortShuttles (unit lp_escort) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnitGroup(true, ("EscortShuttles_" + IntToString(UnitGetTag(lp_escort))));
}

unitgroup gf_ShuttleEscorts (unit lp_shuttle) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnitGroup(true, ("ShuttleEscorts_" + IntToString(UnitGetTag(lp_shuttle))));
}

trigger auto_gf_ShuttleCreateWave_Trigger = null;
string auto_gf_ShuttleCreateWave_lp_p_ShuttleType;
int auto_gf_ShuttleCreateWave_lp_p_ShuttleCount;
string auto_gf_ShuttleCreateWave_lp_p_EscortType1;
int auto_gf_ShuttleCreateWave_lp_p_EscortCount1;
string auto_gf_ShuttleCreateWave_lp_p_EscortType2;
int auto_gf_ShuttleCreateWave_lp_p_EscortCount2;
string auto_gf_ShuttleCreateWave_lp_p_EscortType3;
int auto_gf_ShuttleCreateWave_lp_p_EscortCount3;
int auto_gf_ShuttleCreateWave_lp_p_DockingBay;
int auto_gf_ShuttleCreateWave_lp_p_ShuttleDestination;

void gf_ShuttleCreateWave (string lp_p_ShuttleType, int lp_p_ShuttleCount, string lp_p_EscortType1, int lp_p_EscortCount1, string lp_p_EscortType2, int lp_p_EscortCount2, string lp_p_EscortType3, int lp_p_EscortCount3, int lp_p_DockingBay, int lp_p_ShuttleDestination) {
    auto_gf_ShuttleCreateWave_lp_p_ShuttleType = lp_p_ShuttleType;
    auto_gf_ShuttleCreateWave_lp_p_ShuttleCount = lp_p_ShuttleCount;
    auto_gf_ShuttleCreateWave_lp_p_EscortType1 = lp_p_EscortType1;
    auto_gf_ShuttleCreateWave_lp_p_EscortCount1 = lp_p_EscortCount1;
    auto_gf_ShuttleCreateWave_lp_p_EscortType2 = lp_p_EscortType2;
    auto_gf_ShuttleCreateWave_lp_p_EscortCount2 = lp_p_EscortCount2;
    auto_gf_ShuttleCreateWave_lp_p_EscortType3 = lp_p_EscortType3;
    auto_gf_ShuttleCreateWave_lp_p_EscortCount3 = lp_p_EscortCount3;
    auto_gf_ShuttleCreateWave_lp_p_DockingBay = lp_p_DockingBay;
    auto_gf_ShuttleCreateWave_lp_p_ShuttleDestination = lp_p_ShuttleDestination;

    if (auto_gf_ShuttleCreateWave_Trigger == null) {
        auto_gf_ShuttleCreateWave_Trigger = TriggerCreate("auto_gf_ShuttleCreateWave_TriggerFunc");
    }

    TriggerExecute(auto_gf_ShuttleCreateWave_Trigger, false, false);
}

bool auto_gf_ShuttleCreateWave_TriggerFunc (bool testConds, bool runActions) {
    string lp_p_ShuttleType = auto_gf_ShuttleCreateWave_lp_p_ShuttleType;
    int lp_p_ShuttleCount = auto_gf_ShuttleCreateWave_lp_p_ShuttleCount;
    string lp_p_EscortType1 = auto_gf_ShuttleCreateWave_lp_p_EscortType1;
    int lp_p_EscortCount1 = auto_gf_ShuttleCreateWave_lp_p_EscortCount1;
    string lp_p_EscortType2 = auto_gf_ShuttleCreateWave_lp_p_EscortType2;
    int lp_p_EscortCount2 = auto_gf_ShuttleCreateWave_lp_p_EscortCount2;
    string lp_p_EscortType3 = auto_gf_ShuttleCreateWave_lp_p_EscortType3;
    int lp_p_EscortCount3 = auto_gf_ShuttleCreateWave_lp_p_EscortCount3;
    int lp_p_DockingBay = auto_gf_ShuttleCreateWave_lp_p_DockingBay;
    int lp_p_ShuttleDestination = auto_gf_ShuttleCreateWave_lp_p_ShuttleDestination;

    // Variable Declarations
    unitgroup lv_lv_ShuttleGroup;
    unitgroup lv_lv_EscortGroup;
    int lv_lv_Index;
    point lv_lv_ShuttlePosition;
    int lv_lv_DockingBayIndex;
    int lv_lv_i;
    point lv_lv_EvacPoint;
    int lv_lv_EvacPointIndex;

    // Automatic Variable Declarations
    const int auto9DDF50E8_ae = gv_launchFacGroups_SizeOf;
    int auto9DDF50E8_var;
    const int autoA022C383_ae = gv_launchFacGroups_SizeOf;
    int autoA022C383_var;
    int autoC41223E0_ae;
    const int autoC41223E0_ai = 1;
    int auto0537874F_ae;
    const int auto0537874F_ai = 1;
    int autoF4B3C8C5_ae;
    const int autoF4B3C8C5_ai = 1;
    int auto7024B28F_ae;
    const int auto7024B28F_ai = 1;
    unitgroup auto88629E3B_g;
    int auto88629E3B_u;
    unit auto88629E3B_var;

    // Variable Initialization
    lv_lv_ShuttleGroup = UnitGroupEmpty();
    lv_lv_EscortGroup = UnitGroupEmpty();

    // Implementation
    if ((gv_gameOver == true)) {
        return true;
    }

    lv_lv_DockingBayIndex = (lp_p_DockingBay);
    lv_lv_EvacPointIndex = (lp_p_ShuttleDestination);
    lv_lv_EvacPoint = gv_shuttleEscapePoint[lv_lv_EvacPointIndex];
    while (((lv_lv_DockingBayIndex == -1) || (UnitIsAlive(gv_dockingBayUnits[lv_lv_DockingBayIndex]) == false) || (gv_dockingBayBusy[lv_lv_DockingBayIndex] == true))) {
        if (((UnitIsAlive(gv_dockingBayUnits[lv_lv_DockingBayIndex]) == false) || (gv_dockingBayBusy[lv_lv_DockingBayIndex] == true))) {
            lv_lv_DockingBayIndex = -1;
            auto9DDF50E8_var = 0;
            for ( ; auto9DDF50E8_var <= auto9DDF50E8_ae; auto9DDF50E8_var += 1 ) {
                if ((UnitIsAlive(gv_dockingBayUnits[auto9DDF50E8_var]) == true) && (gv_dockingBayBusy[auto9DDF50E8_var] == false)) {
                    lv_lv_DockingBayIndex = auto9DDF50E8_var;
                    break;
                }

            }
            if ((lv_lv_DockingBayIndex == -1)) {
                autoA022C383_var = 0;
                for ( ; autoA022C383_var <= autoA022C383_ae; autoA022C383_var += 1 ) {
                    if ((UnitIsAlive(gv_dockingBayUnits[autoA022C383_var]) == true)) {
                        lv_lv_DockingBayIndex = autoA022C383_var;
                        break;
                    }

                }
            }

            if ((lv_lv_DockingBayIndex == -1)) {
                return true;
            }

            while (!(((UnitIsAlive(gv_dockingBayUnits[lv_lv_DockingBayIndex]) == false) || (gv_dockingBayBusy[lv_lv_DockingBayIndex] == false)))) {
                Wait(1.0, c_timeGame);
            }
            if ((UnitIsAlive(gv_dockingBayUnits[lv_lv_DockingBayIndex]) == false)) {
                lv_lv_DockingBayIndex = -1;
            }

        }

    }
    gv_dockingBayBusy[lv_lv_DockingBayIndex] = true;
    libNtve_gf_ShareVisionofUnit(gv_dockingBayUnits[lv_lv_DockingBayIndex], true, gv_pLAYER_01_USER);
    gf_ShuttleLaunchAnimate(gv_dockingBayUnits[lv_lv_DockingBayIndex], ge_AnimateFacility_Open);
    gv_escortIncrement = 0;
    lv_lv_ShuttlePosition = UnitGetPosition(gv_dockingBayUnits[lv_lv_DockingBayIndex]);
    autoC41223E0_ae = lp_p_ShuttleCount;
    lv_lv_i = 1;
    for ( ; ( (autoC41223E0_ai >= 0 && lv_lv_i <= autoC41223E0_ae) || (autoC41223E0_ai < 0 && lv_lv_i >= autoC41223E0_ae) ) ; lv_lv_i += autoC41223E0_ai ) {
        if ((gv_gameOver == true)) {
            return true;
        }

        Wait(1.3, c_timeAI);
        libNtve_gf_UnitCreateFacingPoint(1, lp_p_ShuttleType, 0, gv_pLAYER_02_SHUTTLE_BLUE, lv_lv_ShuttlePosition, lv_lv_EvacPoint);
        libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, gv_pLAYER_01_USER);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_shuttleLife);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsMax, gv_shuttleShields);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsPercent, 100.0);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBaseMovementSpeed, gv_shuttleSpeed);
        libSwaC_gf_SetUnitInfoTextCampaign(UnitLastCreated(), StringExternal("Param/Value/0B2C4D0E"), StringExternal("Param/Value/80CD22D7"), null);
        gv_shuttleUnit = UnitLastCreated();
        gf_ShuttleBirth(gv_shuttleUnit);
        TriggerExecute(gt_CreateShuttleReticule, true, false);
        AISetUnitScriptControlled(UnitLastCreated(), true);
        UnitGroupAdd(gv_evacShuttles, gv_shuttleUnit);
        UnitGroupAdd(lv_lv_ShuttleGroup, gv_shuttleUnit);
        UnitSetCustomValue(UnitLastCreated(), gv_shuttleIDStore_cv, gv_shuttleIdentifier_cv);
        UnitSetCustomValue(UnitLastCreated(), gv_shuttleStoreDestination_cv, IntToFixed(lv_lv_EvacPointIndex));
        UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/CF204BCA"), null, UnitLastCreated());
        libSwaC_gf_CreateObjectivePing(true, UnitGetPosition(UnitLastCreated()), StringExternal("Param/Value/4D6439E7"));
        PingSetUnit(PingLastCreated(), UnitLastCreated());
        Wait(3.0, c_timeAI);
        gv_shuttleLaunched = true;
    }
    auto0537874F_ae = lp_p_EscortCount1;
    lv_lv_i = 1;
    for ( ; ( (auto0537874F_ai >= 0 && lv_lv_i <= auto0537874F_ae) || (auto0537874F_ai < 0 && lv_lv_i >= auto0537874F_ae) ) ; lv_lv_i += auto0537874F_ai ) {
        if ((gv_gameOver == true)) {
            return true;
        }

        if ((UnitIsAlive(gv_dockingBayUnits[lv_lv_DockingBayIndex]) == true)) {
            gf_DoShuttleWaveOlder2(lp_p_EscortType1, lv_lv_DockingBayIndex, lv_lv_EscortGroup, lv_lv_EvacPoint);
        }

        Wait(1.5, c_timeAI);
    }
    autoF4B3C8C5_ae = lp_p_EscortCount2;
    lv_lv_i = 1;
    for ( ; ( (autoF4B3C8C5_ai >= 0 && lv_lv_i <= autoF4B3C8C5_ae) || (autoF4B3C8C5_ai < 0 && lv_lv_i >= autoF4B3C8C5_ae) ) ; lv_lv_i += autoF4B3C8C5_ai ) {
        if ((gv_gameOver == true)) {
            return true;
        }

        if ((UnitIsAlive(gv_dockingBayUnits[lv_lv_DockingBayIndex]) == true)) {
            gf_DoShuttleWaveOlder2(lp_p_EscortType2, lv_lv_DockingBayIndex, lv_lv_EscortGroup, lv_lv_EvacPoint);
        }

        Wait(1.5, c_timeAI);
    }
    auto7024B28F_ae = lp_p_EscortCount3;
    lv_lv_i = 1;
    for ( ; ( (auto7024B28F_ai >= 0 && lv_lv_i <= auto7024B28F_ae) || (auto7024B28F_ai < 0 && lv_lv_i >= auto7024B28F_ae) ) ; lv_lv_i += auto7024B28F_ai ) {
        if ((gv_gameOver == true)) {
            return true;
        }

        if ((UnitIsAlive(gv_dockingBayUnits[lv_lv_DockingBayIndex]) == true)) {
            gf_DoShuttleWaveOlder2(lp_p_EscortType3, lv_lv_DockingBayIndex, lv_lv_EscortGroup, lv_lv_EvacPoint);
        }

        Wait(1.5, c_timeAI);
    }
    AIAttackWaveSetTargetEscort(gv_pLAYER_02_SHUTTLE_BLUE, lv_lv_ShuttleGroup, 0);
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_SHUTTLE_BLUE, UnitGetPosition(gv_dockingBayUnits[lv_lv_DockingBayIndex]));
    gf_AssignEscortsToShuttles(lv_lv_ShuttleGroup, lv_lv_EscortGroup);
    AIAttackWaveSend(gv_pLAYER_02_SHUTTLE_BLUE, 0, false);
    Wait(10.0, c_timeAI);
    UnitGroupIssueOrder(lv_lv_ShuttleGroup, OrderTargetingPoint(AbilityCommand("move", 0), lv_lv_EvacPoint), c_orderQueueReplace);
    if ((UnitGroupCount(lv_lv_ShuttleGroup, c_unitCountAlive) > 0)) {
        gf_DoArrowPings(lv_lv_ShuttleGroup, lv_lv_EvacPoint);
    }

    Wait(2.0, c_timeAI);
    gf_ShuttleLaunchAnimate(gv_dockingBayUnits[lv_lv_DockingBayIndex], ge_AnimateFacility_Close);
    gv_dockingBayBusy[lv_lv_DockingBayIndex] = false;
    while (true) {
        if ((UnitGroupCount(lv_lv_ShuttleGroup, c_unitCountAlive) == 0)) {
            PingDestroy(PingLastCreated());
            break;
        }

        UnitGroupIssueOrder(lv_lv_ShuttleGroup, OrderTargetingPoint(AbilityCommand("move", 0), lv_lv_EvacPoint), c_orderQueueReplace);
        Wait(1.0, c_timeAI);
    }
    auto88629E3B_g = lv_lv_EscortGroup;
    auto88629E3B_u = UnitGroupCount(auto88629E3B_g, c_unitCountAll);
    for (;; auto88629E3B_u -= 1) {
        auto88629E3B_var = UnitGroupUnitFromEnd(auto88629E3B_g, auto88629E3B_u);
        if (auto88629E3B_var == null) { break; }
        UnitIssueOrder(auto88629E3B_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitResetSpeed(auto88629E3B_var);
        AISetUnitScriptControlled(auto88629E3B_var, false);
        AIAttackWaveUseUnit(gv_pLAYER_02_SHUTTLE_BLUE, auto88629E3B_var);
    }
    AIAttackWaveSend(gv_pLAYER_02_SHUTTLE_BLUE, 0, false);
    return true;
}

trigger auto_gf_ShuttleBirth_Trigger = null;
unit auto_gf_ShuttleBirth_lp_shuttle;

void gf_ShuttleBirth (unit lp_shuttle) {
    auto_gf_ShuttleBirth_lp_shuttle = lp_shuttle;

    if (auto_gf_ShuttleBirth_Trigger == null) {
        auto_gf_ShuttleBirth_Trigger = TriggerCreate("auto_gf_ShuttleBirth_TriggerFunc");
    }

    TriggerExecute(auto_gf_ShuttleBirth_Trigger, false, false);
}

bool auto_gf_ShuttleBirth_TriggerFunc (bool testConds, bool runActions) {
    unit lp_shuttle = auto_gf_ShuttleBirth_lp_shuttle;

    // Automatic Variable Declarations
    // Implementation
    UnitSetState(lp_shuttle, c_unitStateInvulnerable, true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_shuttle), c_animNameDefault, "Birth", 0, 0.0);
    UnitIssueOrder(lp_shuttle, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    Wait(2.9, c_timeGame);
    UnitSetState(lp_shuttle, c_unitStateInvulnerable, false);
    UnitSetState(lp_shuttle, c_unitStateTooltipable, true);
    return true;
}

void gf_SaveEscortShuttles (unitgroup lp_shuttles, unit lp_escort, unitgroup lp_allEscorts) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetUnitGroup(true, ("EscortShuttles_" + IntToString(UnitGetTag(lp_escort))), lp_shuttles);
    DataTableSetUnit(true, ("EscortShuttle_" + IntToString(UnitGetTag(lp_escort))), UnitGroupUnit(lp_shuttles, 1));
    DataTableSetUnitGroup(true, ("ShuttleEscorts_" + IntToString(UnitGetTag(UnitGroupUnit(lp_shuttles, 1)))), lp_allEscorts);
}

void gf_AssignEscortsToShuttles (unitgroup lp_shuttleGroup, unitgroup lp_escortGroup) {
    // Variable Declarations
    int lv_index;
    fixed lv_angle;
    const fixed lv_radius = 5.0;
    const fixed lv_distance = 6.0;
    fixed lv_offset;
    fixed lv_distanceModifier;
    fixed lv_x;
    fixed lv_y;
    unit lv_shuttleToEscort;

    // Automatic Variable Declarations
    unitgroup auto444FEC11_g;
    int auto444FEC11_u;
    unit auto444FEC11_var;

    // Variable Initialization
    lv_distanceModifier = 0.5;

    // Implementation
    lv_index = 0;
    lv_shuttleToEscort = UnitGroupUnit(lp_shuttleGroup, 1);
    lv_x = (-1.0*IntToFixed(UnitGroupCount(lp_escortGroup, c_unitCountAlive))*lv_distance/4.0);
    lv_y = lv_radius;
    while (true) {
        lv_index += 1;
        if ((lv_index > UnitGroupCount(lp_escortGroup, c_unitCountAlive))) {
            break;
        }

        lv_offset = SquareRoot((lv_x*lv_x+lv_y*lv_y));
        if ((lv_x == 0.0)) {
            lv_angle = 90.0;
        }
        else {
            lv_angle = ATan((lv_y/lv_x));
        }
        AIAttackWaveAddEscortUnit(gv_pLAYER_02_SHUTTLE_BLUE, UnitGroupUnit(lp_escortGroup, lv_index), lv_shuttleToEscort, (lv_offset * lv_distanceModifier), lv_angle);
        lv_index += 1;
        if ((lv_index > UnitGroupCount(lp_escortGroup, c_unitCountAlive))) {
            break;
        }

        lv_angle = (360.0 - lv_angle);
        AIAttackWaveAddEscortUnit(gv_pLAYER_02_SHUTTLE_BLUE, UnitGroupUnit(lp_escortGroup, lv_index), lv_shuttleToEscort, (lv_offset * lv_distanceModifier), lv_angle);
        lv_x += lv_distance;
    }
    auto444FEC11_g = lp_escortGroup;
    auto444FEC11_u = UnitGroupCount(auto444FEC11_g, c_unitCountAll);
    for (;; auto444FEC11_u -= 1) {
        auto444FEC11_var = UnitGroupUnitFromEnd(auto444FEC11_g, auto444FEC11_u);
        if (auto444FEC11_var == null) { break; }
        AISetUnitScriptControlled(auto444FEC11_var, false);
        gf_SaveEscortShuttles(lp_shuttleGroup, auto444FEC11_var, lp_escortGroup);
    }
}

trigger auto_gf_DoShuttleWaveOlder2_Trigger = null;
string auto_gf_DoShuttleWaveOlder2_lp_escortType;
int auto_gf_DoShuttleWaveOlder2_lp_dockingBay;
unitgroup auto_gf_DoShuttleWaveOlder2_lp_escortGroup;
point auto_gf_DoShuttleWaveOlder2_lp_destination;

void gf_DoShuttleWaveOlder2 (string lp_escortType, int lp_dockingBay, unitgroup lp_escortGroup, point lp_destination) {
    auto_gf_DoShuttleWaveOlder2_lp_escortType = lp_escortType;
    auto_gf_DoShuttleWaveOlder2_lp_dockingBay = lp_dockingBay;
    auto_gf_DoShuttleWaveOlder2_lp_escortGroup = lp_escortGroup;
    auto_gf_DoShuttleWaveOlder2_lp_destination = lp_destination;

    if (auto_gf_DoShuttleWaveOlder2_Trigger == null) {
        auto_gf_DoShuttleWaveOlder2_Trigger = TriggerCreate("auto_gf_DoShuttleWaveOlder2_TriggerFunc");
    }

    TriggerExecute(auto_gf_DoShuttleWaveOlder2_Trigger, false, false);
}

bool auto_gf_DoShuttleWaveOlder2_TriggerFunc (bool testConds, bool runActions) {
    string lp_escortType = auto_gf_DoShuttleWaveOlder2_lp_escortType;
    int lp_dockingBay = auto_gf_DoShuttleWaveOlder2_lp_dockingBay;
    unitgroup lp_escortGroup = auto_gf_DoShuttleWaveOlder2_lp_escortGroup;
    point lp_destination = auto_gf_DoShuttleWaveOlder2_lp_destination;

    // Variable Declarations
    fixed lv_escortHeight;

    // Automatic Variable Declarations
    int auto63A87EC9_val;

    // Variable Initialization

    // Implementation
    libNtve_gf_UnitCreateFacingPoint(1, lp_escortType, 0, gv_pLAYER_02_SHUTTLE_BLUE, UnitGetPosition(gv_dockingBayUnits[lp_dockingBay]), lp_destination);
    lv_escortHeight = UnitGetHeight(UnitLastCreated());
    if ((lp_escortType == "Carrier")) {
        UnitMagazineArm(UnitLastCreated(), AbilityCommand("CarrierHangar", 0), libHots_gf_DifficultyValueInt2(3, 3, 6));
    }

    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
    UnitSetHeight(UnitLastCreated(), 0.0, 0.0);
    UnitSetHeight(UnitLastCreated(), lv_escortHeight, 1.5);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lp_escortGroup);
    SoundPlayOnUnit(SoundLink("Hybrid_Blink", -1), PlayerGroupAll(), UnitLastCreated(), 4.0, 100.0, 0.0);
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitBehaviorAddPlayer(UnitLastCreated(), "Reveal", gv_pLAYER_01_USER, 1);
    Wait(1.5, c_timeGame);
    gv_escortIncrement += 1;
    auto63A87EC9_val = gv_escortIncrement;
    if (auto63A87EC9_val == 1) {
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 8.0, (UnitGetFacing(UnitLastCreated()) + 90.0))), c_orderQueueReplace);
    }
    else if (auto63A87EC9_val == 2) {
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 8.0, (UnitGetFacing(UnitLastCreated()) - 90.0))), c_orderQueueReplace);
    }
    else if (auto63A87EC9_val == 3) {
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 8.0, (UnitGetFacing(UnitLastCreated()) + 135.0))), c_orderQueueReplace);
    }
    else if (auto63A87EC9_val == 4) {
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 8.0, (UnitGetFacing(UnitLastCreated()) - 135.0))), c_orderQueueReplace);
    }
    else if (auto63A87EC9_val == 5) {
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 8.0, (UnitGetFacing(UnitLastCreated()) + 45.0))), c_orderQueueReplace);
    }
    else if (auto63A87EC9_val == 6) {
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 8.0, (UnitGetFacing(UnitLastCreated()) - 45.0))), c_orderQueueReplace);
    }
    else if (auto63A87EC9_val == 7) {
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 8.0, (UnitGetFacing(UnitLastCreated()) - 180.0))), c_orderQueueReplace);
    }
    else if (auto63A87EC9_val == 8) {
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 8.0, (UnitGetFacing(UnitLastCreated()) - 0.0))), c_orderQueueReplace);
    }
    else {
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 11.0, (UnitGetFacing(UnitLastCreated()) + (90.0 + ((IntToFixed(gv_escortIncrement) - 8.0) * 30.0))))), c_orderQueueReplace);
    }
    if ((lp_escortType == "Mothership")) {
        libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, gv_pLAYER_01_USER);
    }

    return true;
}

trigger auto_gf_ShuttleLaunchAnimate_Trigger = null;
unit auto_gf_ShuttleLaunchAnimate_lp_dockingBay;
int auto_gf_ShuttleLaunchAnimate_lp_statetoenter;

void gf_ShuttleLaunchAnimate (unit lp_dockingBay, int lp_statetoenter) {
    auto_gf_ShuttleLaunchAnimate_lp_dockingBay = lp_dockingBay;
    auto_gf_ShuttleLaunchAnimate_lp_statetoenter = lp_statetoenter;

    if (auto_gf_ShuttleLaunchAnimate_Trigger == null) {
        auto_gf_ShuttleLaunchAnimate_Trigger = TriggerCreate("auto_gf_ShuttleLaunchAnimate_TriggerFunc");
    }

    TriggerExecute(auto_gf_ShuttleLaunchAnimate_Trigger, false, false);
}

bool auto_gf_ShuttleLaunchAnimate_TriggerFunc (bool testConds, bool runActions) {
    unit lp_dockingBay = auto_gf_ShuttleLaunchAnimate_lp_dockingBay;
    int lp_statetoenter = auto_gf_ShuttleLaunchAnimate_lp_statetoenter;

    // Variable Declarations
    revealer lv_launchfacrevealer;

    // Automatic Variable Declarations
    int auto48727F89_val;

    // Variable Initialization

    // Implementation
    auto48727F89_val = lp_statetoenter;
    if (auto48727F89_val == ge_AnimateFacility_Open) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_dockingBay), c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
        Wait(3.3, c_timeReal);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_dockingBay), c_animNameDefault, "Stand Work A", c_animFlagPlayForever, c_animTimeDefault);
    }
    else if (auto48727F89_val == ge_AnimateFacility_Close) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_dockingBay), c_animNameDefault, "Stand Work End", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
        Wait(3.3, c_timeReal);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_dockingBay), c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    }
    else {
    }
    return true;
}

trigger auto_gf_DoArrowPings_Trigger = null;
unitgroup auto_gf_DoArrowPings_lp_unitgroup;
point auto_gf_DoArrowPings_lp_endpoint;

void gf_DoArrowPings (unitgroup lp_unitgroup, point lp_endpoint) {
    auto_gf_DoArrowPings_lp_unitgroup = lp_unitgroup;
    auto_gf_DoArrowPings_lp_endpoint = lp_endpoint;

    if (auto_gf_DoArrowPings_Trigger == null) {
        auto_gf_DoArrowPings_Trigger = TriggerCreate("auto_gf_DoArrowPings_TriggerFunc");
    }

    TriggerExecute(auto_gf_DoArrowPings_Trigger, false, false);
}

bool auto_gf_DoArrowPings_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_unitgroup = auto_gf_DoArrowPings_lp_unitgroup;
    point lp_endpoint = auto_gf_DoArrowPings_lp_endpoint;

    int init_i;

    // Variable Declarations
    fixed lv_distancebetweenlaunchandevac;
    int[32] lv_pings;
    int lv_foreachint_i;
    int lv_distancechunks;
    fixed lv_distbwpings;
    fixed lv_delaybetweencreatingnewping;
    fixed lv_pinglifetime;

    // Automatic Variable Declarations
    int auto904DF92E_ae;
    const int auto904DF92E_ai = 1;
    fixed autoA8B1B723_at;
    const int auto614A30CE_ae = 31;
    const int auto614A30CE_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 31; init_i += 1) {
        lv_pings[init_i] = c_invalidPingId;
    }
    lv_distbwpings = 12.0;
    lv_delaybetweencreatingnewping = 0.1;
    lv_pinglifetime = 3.0;

    // Implementation
    while ((UnitGroupCount(lp_unitgroup, c_unitCountAlive) > 0)) {
        lv_distancebetweenlaunchandevac = DistanceBetweenPoints(libNtve_gf_CenterOfUnitGroup(lp_unitgroup), lp_endpoint);
        lv_distancechunks = FixedToInt((lv_distancebetweenlaunchandevac / lv_distbwpings));
        auto904DF92E_ae = lv_distancechunks;
        lv_foreachint_i = 1;
        for ( ; ( (auto904DF92E_ai >= 0 && lv_foreachint_i <= auto904DF92E_ae) || (auto904DF92E_ai < 0 && lv_foreachint_i >= auto904DF92E_ae) ) ; lv_foreachint_i += auto904DF92E_ai ) {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingArrow", libNtve_gf_PointOffsetTowardsPoint(libNtve_gf_CenterOfUnitGroup(lp_unitgroup), (lv_distbwpings * IntToFixed(lv_foreachint_i)), lp_endpoint), ColorWithAlpha(100.00, 0.00, 0.00, 24.71), lv_pinglifetime, AngleBetweenPoints(libNtve_gf_CenterOfUnitGroup(lp_unitgroup), lp_endpoint));
            PingSetScale(PingLastCreated(), 0.5);
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/19D6601D"));
            lv_pings[lv_foreachint_i] = PingLastCreated();
            Wait(lv_delaybetweencreatingnewping, c_timeReal);
            if ((UnitGroupCount(lp_unitgroup, c_unitCountAlive) == 0)) {
                break;
            }

        }
        autoA8B1B723_at = 0;
        while (!((UnitGroupCount(lp_unitgroup, c_unitCountAlive) == 0)) && autoA8B1B723_at <= lv_pinglifetime) {
            Wait(1.0, c_timeGame);
            autoA8B1B723_at = autoA8B1B723_at + 1.0;
        }
    }
    lv_foreachint_i = 0;
    for ( ; ( (auto614A30CE_ai >= 0 && lv_foreachint_i <= auto614A30CE_ae) || (auto614A30CE_ai < 0 && lv_foreachint_i >= auto614A30CE_ae) ) ; lv_foreachint_i += auto614A30CE_ai ) {
        PingDestroy(lv_pings[lv_foreachint_i]);
    }
    return true;
}

void gf_ActivateDeactivateWarpConduit (unit lp_unit, int lp_state) {
    // Automatic Variable Declarations
    int auto7B95EBDC_val;

    // Implementation
    auto7B95EBDC_val = lp_state;
    if (auto7B95EBDC_val == ge_JumpGateState_Activate) {
        libNtve_gf_SendActorMessageToUnit(lp_unit, "Signal On");
    }
    else {
    }
}

trigger auto_gf_SaveFrozenZerg_Trigger = null;
unit auto_gf_SaveFrozenZerg_lp_cHOSEN_UNIT;

void gf_SaveFrozenZerg (unit lp_cHOSEN_UNIT) {
    auto_gf_SaveFrozenZerg_lp_cHOSEN_UNIT = lp_cHOSEN_UNIT;

    if (auto_gf_SaveFrozenZerg_Trigger == null) {
        auto_gf_SaveFrozenZerg_Trigger = TriggerCreate("auto_gf_SaveFrozenZerg_TriggerFunc");
    }

    TriggerExecute(auto_gf_SaveFrozenZerg_Trigger, false, false);
}

bool auto_gf_SaveFrozenZerg_TriggerFunc (bool testConds, bool runActions) {
    unit lp_cHOSEN_UNIT = auto_gf_SaveFrozenZerg_lp_cHOSEN_UNIT;

    // Automatic Variable Declarations
    string autoF1E1B0C6_val;

    // Implementation
    UnitSetOwner(lp_cHOSEN_UNIT, gv_pLAYER_01_USER, true);
    libNtve_gf_PauseUnit(lp_cHOSEN_UNIT, false);
    libNtve_gf_MakeUnitUncommandable(lp_cHOSEN_UNIT, false);
    UnitGroupRemove(gv_frozenZergGroupGlobal, lp_cHOSEN_UNIT);
    UnitBehaviorRemove(lp_cHOSEN_UNIT, "FlashFreeze", 1);
    UnitBehaviorAdd(lp_cHOSEN_UNIT, "ThawUnit", lp_cHOSEN_UNIT, 1);
    autoF1E1B0C6_val = UnitGetType(lp_cHOSEN_UNIT);
    if (autoF1E1B0C6_val == "Hatchery") {
        UnitBehaviorAdd(lp_cHOSEN_UNIT, "SpawnLarva", lp_cHOSEN_UNIT, 1);
        UnitBehaviorAdd(lp_cHOSEN_UNIT, "makeCreep8x6", lp_cHOSEN_UNIT, 1);
        UnitBehaviorAdd(lp_cHOSEN_UNIT, "makeCreep8x6Enhanced", lp_cHOSEN_UNIT, 1);
        libSwaC_gf_SpawnLarvaForHatchery(lp_cHOSEN_UNIT, 3);
    }
    else {
    }
    Wait(0.5, c_timeGame);
    libNtve_gf_RescueUnit(lp_cHOSEN_UNIT, gv_pLAYER_01_USER, true);
    if ((UnitTypeTestAttribute(UnitGetType(lp_cHOSEN_UNIT), c_unitAttributeStructure) == false)) {
        gv_feralZergUnfrozen += 1;
    }

    return true;
}

text gf_Objective_LabelText () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_shuttleWavesRemaining == 1)) {
        return StringExternal("Param/Value/9594FB1A");
    }
    else {
        return StringExternal("Param/Value/06A14697");
    }
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_ULoadCampaignData("ZExpedition2");
    TriggerExecute(gt_Init01Technology, true, true);
    libSwaC_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03Units, true, true);
    TriggerExecute(gt_Init04MusicSound, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulties, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    TriggerExecute(gt_IntroQ, true, true);
    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    libSwaC_gf_EnableCampaignTechUnit(true, "Hydralisk", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_visionGroup;

    // Automatic Variable Declarations
    playergroup auto69233DEF_g;
    int auto69233DEF_var;
    playergroup auto82B837FB_g;
    int auto82B837FB_var;

    // Variable Initialization
    lv_visionGroup = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupAdd(gv_protossPlayers, gv_pLAYER_02_SHUTTLE_BLUE);
    PlayerGroupAdd(gv_protossPlayers, gv_pLAYER_03_PROTOSS_GREEN);
    PlayerGroupAdd(gv_protossPlayers, gv_pLAYER_04_PROTOSS_RED);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_05_JUMPGATES, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_06_STASIS_CHAMBER, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_07_FROZENZERG, libNtve_ge_AllianceSetting_Neutral);
    auto69233DEF_g = gv_protossPlayers;
    auto69233DEF_var = -1;
    while (true) {
        auto69233DEF_var = PlayerGroupNextPlayer(auto69233DEF_g, auto69233DEF_var);
        if (auto69233DEF_var < 0) { break; }
        PlayerSetColorIndex(auto69233DEF_var, 2, true);
        libNtve_gf_SetAlliance(auto69233DEF_var, gv_pLAYER_02_SHUTTLE_BLUE, libNtve_ge_AllianceSetting_AllyWithSharedVision);
        libNtve_gf_SetAlliance(auto69233DEF_var, gv_pLAYER_03_PROTOSS_GREEN, libNtve_ge_AllianceSetting_AllyWithSharedVision);
        libNtve_gf_SetAlliance(auto69233DEF_var, gv_pLAYER_04_PROTOSS_RED, libNtve_ge_AllianceSetting_AllyWithSharedVision);
        libNtve_gf_SetAlliance(auto69233DEF_var, gv_pLAYER_05_JUMPGATES, libNtve_ge_AllianceSetting_AllyWithSharedVision);
        libNtve_gf_SetAlliance(auto69233DEF_var, gv_pLAYER_06_STASIS_CHAMBER, libNtve_ge_AllianceSetting_Neutral);
        libNtve_gf_SetAlliance(auto69233DEF_var, gv_pLAYER_07_FROZENZERG, libNtve_ge_AllianceSetting_Neutral);
    }
    PlayerGroupAdd(lv_visionGroup, gv_pLAYER_02_SHUTTLE_BLUE);
    PlayerGroupAdd(lv_visionGroup, gv_pLAYER_03_PROTOSS_GREEN);
    PlayerGroupAdd(lv_visionGroup, gv_pLAYER_04_PROTOSS_RED);
    PlayerGroupAdd(lv_visionGroup, gv_pLAYER_05_JUMPGATES);
    PlayerGroupAdd(lv_visionGroup, gv_pLAYER_06_STASIS_CHAMBER);
    PlayerGroupAdd(lv_visionGroup, gv_pLAYER_07_FROZENZERG);
    libSwaC_gf_ShareVisionAmongPlayers(lv_visionGroup);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 250);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 100);
    auto82B837FB_g = gv_protossPlayers;
    auto82B837FB_var = -1;
    while (true) {
        auto82B837FB_var = PlayerGroupNextPlayer(auto82B837FB_g, auto82B837FB_var);
        if (auto82B837FB_var < 0) { break; }
        PlayerModifyPropertyInt(auto82B837FB_var, c_playerPropMinerals, c_playerPropOperSetTo, 2000);
        PlayerModifyPropertyInt(auto82B837FB_var, c_playerPropVespene, c_playerPropOperSetTo, 2000);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    unitgroup autoDE72E19D_g;
    int autoDE72E19D_u;
    unit autoDE72E19D_var;
    unitgroup auto45E71F06_g;
    int auto45E71F06_u;
    unit auto45E71F06_var;
    unitgroup auto7B6F72DC_g;
    int auto7B6F72DC_u;
    unit auto7B6F72DC_var;
    unitgroup auto1921DFD1_g;
    int auto1921DFD1_u;
    unit auto1921DFD1_var;
    string auto979593C3_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_CreateHero2(PointFromId(229), gv_pLAYER_01_USER, libSwaC_ge_HeroUnit_Kerrigan, PointGetFacing(PointFromId(229)), 0, libSwaC_ge_KerriganCreatePurpose_GamePlay);
    gv_kerrigan = UnitLastCreated();
    libSwaC_gf_SetHeroPanelUnit(1, UnitLastCreated());
    libSwaC_gf_SetHatcheryRallyPoint(UnitFromId(37), PointFromId(196));
    libSwaC_gf_ZerglingRespawnSetPrimaryHatchery(UnitFromId(37));
    if ((libHots_gf_DifficultyValueSwarmBoolean(true, true, false) == true)) {
        libSwaC_gf_SetUnitInfoTextCampaignDetailed(UnitFromId(148), StringExternal("Param/Value/CC0F95E0"), UnitTypeGetName(UnitGetType(UnitFromId(148))), StringExternal("Param/Value/964AE21C"));
        UnitSetState(UnitFromId(148), c_unitStateTooltipable, true);
        UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("SporeCrawlerRoot", 0), true);
    }

    gv_dockingBayUnits[0] = UnitFromId(22);
    gv_dockingBayUnits[1] = UnitFromId(151);
    gv_dockingBayUnits[2] = UnitFromId(153);
    gv_shuttleEscapePoint[0] = UnitGetPosition(UnitFromId(1041));
    gv_shuttleEscapePoint[1] = UnitGetPosition(UnitFromId(1042));
    gv_shuttleEscapePoint[2] = UnitGetPosition(UnitFromId(1043));
    autoDE72E19D_g = UnitGroup("ProtossDockingBayUnit", gv_pLAYER_02_SHUTTLE_BLUE, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDE72E19D_u = UnitGroupCount(autoDE72E19D_g, c_unitCountAll);
    for (;; autoDE72E19D_u -= 1) {
        autoDE72E19D_var = UnitGroupUnitFromEnd(autoDE72E19D_g, autoDE72E19D_u);
        if (autoDE72E19D_var == null) { break; }
        libSwaC_gf_SetUnitInfoTextCampaign(autoDE72E19D_var, StringExternal("Param/Value/26A69D2A"), StringExternal("Param/Value/9211C647"), null);
        UnitBehaviorAddPlayer(autoDE72E19D_var, "SuppressCloak", gv_pLAYER_02_SHUTTLE_BLUE, 1);
    }
    auto45E71F06_g = UnitGroup("ExpeditionJumpGate", gv_pLAYER_05_JUMPGATES, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto45E71F06_u = UnitGroupCount(auto45E71F06_g, c_unitCountAll);
    for (;; auto45E71F06_u -= 1) {
        auto45E71F06_var = UnitGroupUnitFromEnd(auto45E71F06_g, auto45E71F06_u);
        if (auto45E71F06_var == null) { break; }
        UnitSetState(auto45E71F06_var, c_unitStateInvulnerable, true);
        UnitSetState(auto45E71F06_var, c_unitStateTargetable, false);
        UnitSetState(auto45E71F06_var, c_unitStateStatusBar, false);
        UnitSetState(auto45E71F06_var, c_unitStateSelectable, true);
        libSwaC_gf_SetUnitInfoTextCampaign(auto45E71F06_var, StringExternal("Param/Value/D8D7A31A"), StringExternal("Param/Value/38E8E8A1"), null);
        UnitBehaviorAddPlayer(auto45E71F06_var, "SuppressCloak", gv_pLAYER_02_SHUTTLE_BLUE, 1);
    }
    gv_stasisChamberGroup = UnitGroup(gv_stasisChamberType, gv_pLAYER_06_STASIS_CHAMBER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7B6F72DC_g = gv_stasisChamberGroup;
    auto7B6F72DC_u = UnitGroupCount(auto7B6F72DC_g, c_unitCountAll);
    for (;; auto7B6F72DC_u -= 1) {
        auto7B6F72DC_var = UnitGroupUnitFromEnd(auto7B6F72DC_g, auto7B6F72DC_u);
        if (auto7B6F72DC_var == null) { break; }
        libSwaC_gf_SetUnitInfoTextCampaign(auto7B6F72DC_var, StringExternal("Param/Value/8A8A7A3F"), StringExternal("Param/Value/8A836906"), null);
    }
    UnitGroupAddUnitGroup(gv_frozenExpansionProtoss, UnitGroup(null, gv_pLAYER_02_SHUTTLE_BLUE, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(gv_frozenZergGroupGlobal, UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(8), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(gv_frozenZergGroupGlobal, UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(gv_frozenZergGroupGlobal, UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(10), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(gv_frozenZergGroupGlobal, UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(gv_frozenZergGroupGlobal, UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(13), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    auto1921DFD1_g = gv_frozenZergGroupGlobal;
    auto1921DFD1_u = UnitGroupCount(auto1921DFD1_g, c_unitCountAll);
    for (;; auto1921DFD1_u -= 1) {
        auto1921DFD1_var = UnitGroupUnitFromEnd(auto1921DFD1_g, auto1921DFD1_u);
        if (auto1921DFD1_var == null) { break; }
        libNtve_gf_PauseUnit(auto1921DFD1_var, true);
        UnitSetOwner(auto1921DFD1_var, gv_pLAYER_07_FROZENZERG, true);
        UnitBehaviorAdd(auto1921DFD1_var, "FlashFreeze", auto1921DFD1_var, 1);
        auto979593C3_val = UnitGetType(auto1921DFD1_var);
        if (auto979593C3_val == "Larva") {
            UnitRemove(auto1921DFD1_var);
        }
        else if (auto979593C3_val == "Hatchery") {
            UnitBehaviorRemove(auto1921DFD1_var, "SpawnLarva", 1);
            UnitBehaviorRemove(auto1921DFD1_var, "makeCreep8x6", 1);
            UnitBehaviorRemove(auto1921DFD1_var, "makeCreep8x6Enhanced", 1);
        }
        else if (auto979593C3_val == "CreepTumorBurrowed") {
            UnitBehaviorAdd(auto1921DFD1_var, "FlashFreeze", auto1921DFD1_var, 1);
            UnitBehaviorRemove(auto1921DFD1_var, "makeCreep8x6", 1);
        }
        else if (auto979593C3_val == "CreepTumorUsed") {
            UnitBehaviorAdd(auto1921DFD1_var, "FlashFreeze", auto1921DFD1_var, 1);
            UnitBehaviorRemove(auto1921DFD1_var, "makeCreep8x6", 1);
        }
        else {
        }
    }
    gv_feralZergFrozenTotal = UnitGroupCount(UnitGroupFilter(null, c_playerAny, gv_frozenZergGroupGlobal, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init04MusicSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mapMusicTrack = "ZExpedition02MusicMain";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04MusicSound_Init () {
    gt_Init04MusicSound = TriggerCreate("gt_Init04MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    libLbty_gf_AutoRevealRegion(RegionFromId(5), RegionFromId(5), gv_pLAYER_01_USER);
    CreepModify(RegionGetCenter(RegionFromId(2)), 30.0, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoF0A768B6_g;
    int autoF0A768B6_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeAbilityAllow(gv_pLAYER_02_SHUTTLE_BLUE, AbilityCommand("Vortex", 0), false);
    gv_shuttleShields = libHots_gf_DifficultyValueFixed2(200.0, 400.0, 600.0);
    gv_shuttleLife = libHots_gf_DifficultyValueFixed2(200.0, 200.0, 400.0);
    gv_shuttleSpeed = libHots_gf_DifficultyValueFixed2(1.15, 1.15, 1.25);
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        autoF0A768B6_g = gv_protossPlayers;
        autoF0A768B6_var = -1;
        while (true) {
            autoF0A768B6_var = PlayerGroupNextPlayer(autoF0A768B6_g, autoF0A768B6_var);
            if (autoF0A768B6_var < 0) { break; }
            TechTreeUpgradeAddLevel(autoF0A768B6_var, "ProtossAirWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(autoF0A768B6_var, "ProtossGroundWeaponsLevel1", 1);
            TechTreeAbilityAllow(autoF0A768B6_var, AbilityCommand("Charge", 0), true);
            TechTreeUpgradeAddLevel(autoF0A768B6_var, "BlinkTech", 1);
            TechTreeUpgradeAddLevel(autoF0A768B6_var, "PsiStormTech", 1);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_AddMissionTipUserData("Air Defense");
    libSwaC_gf_AddMissionTipUserData("Zerg Structures");
    libSwaC_gf_AddMissionTipUserData("Upgrades");
    libSwaC_gf_AddMissionTipUserData("Hydralisk");
    libSwaC_gf_AddMissionTipUserData("Shuttles");
    libSwaC_gf_AddMissionTipUserData("Focus Fire");
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("ProtossFrigate", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Probe", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Zealot", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Sentry", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Stalker", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("HighTemplar", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Archon", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("PhotonCannon", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Immortal", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Scout", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Colossus", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("VoidRay", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Carrier", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Mothership", false, gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Is In Combat
//--------------------------------------------------------------------------------------------------
bool gt_PlayerIsInCombat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER) || (UnitGetOwner(EventUnitTarget()) == gv_pLAYER_01_USER)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_inCombatIndicator = 4;
    Wait(0.5, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerIsInCombat_Init () {
    gt_PlayerIsInCombat = TriggerCreate("gt_PlayerIsInCombat_Func");
    TriggerAddEventUnitAttacked(gt_PlayerIsInCombat, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Is In Combat Indicator Diminish
//--------------------------------------------------------------------------------------------------
bool gt_PlayerIsInCombatIndicatorDiminish_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_inCombatIndicator > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCombatIndicator = (gv_inCombatIndicator - 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerIsInCombatIndicatorDiminish_Init () {
    gt_PlayerIsInCombatIndicatorDiminish = TriggerCreate("gt_PlayerIsInCombatIndicatorDiminish_Func");
    TriggerAddEventTimePeriodic(gt_PlayerIsInCombatIndicatorDiminish, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spore Crawler: Root Used
//--------------------------------------------------------------------------------------------------
bool gt_SporeCrawlerRootUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("SporeCrawlerRoot", 0), false);
    UnitSetInfoTip(EventUnit(), StringToText(""));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SporeCrawlerRootUsed_Init () {
    gt_SporeCrawlerRootUsed = TriggerCreate("gt_SporeCrawlerRootUsed_Func");
    TriggerAddEventUnitAbility(gt_SporeCrawlerRootUsed, null, AbilityCommand("SporeCrawlerRoot", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prepare Kerrigan Revive
//--------------------------------------------------------------------------------------------------
bool gt_PrepareKerriganRevive_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_StartKerriganReviveCooldown();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrepareKerriganRevive_Init () {
    gt_PrepareKerriganRevive = TriggerCreate("gt_PrepareKerriganRevive_Func");
    TriggerAddEventUnitDied(gt_PrepareKerriganRevive, UnitRefFromVariable("gv_kerrigan"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_StartingWorkersAutoHarvest(RegionFromId(17), RegionFromId(30));
    if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
        libSwaC_gf_RemindPlayertoSpawnDrones(230.0, 6);
        libSwaC_gf_RemindPlayertoAssign3DronestoExtractor(UnitFromId(122), 300.0);
        libSwaC_gf_RemindPlayertoCreateAntiAirUnits();
    }

    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/2A8FB0FB"), null, PointFromId(74));
    Wait(3.0, c_timeReal);
    TriggerExecute(gt_CreateAutoSaves, true, false);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveDestroyAllProtossShuttlesCreate, true, false);
    TriggerExecute(gt_ObjectiveNoShuttleCanEscapeCreate, true, true);
    TriggerExecute(gt_CreateWarpConduitPingLeft, true, false);
    TriggerQueueExit();
    Wait(8.0, c_timeAI);
    TriggerExecute(gt_TipMissionHelpQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Warp Conduit Ping (Left)
//--------------------------------------------------------------------------------------------------
bool gt_CreateWarpConduitPingLeft_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(1041)), 8.0));
    gv_revealLeftGate = VisRevealerLastCreated();
    VisRevealerEnable(gv_revealLeftGate, true);
    libSwaC_gf_CreateObjectivePing(true, UnitGetPosition(UnitFromId(1041)), StringExternal("Param/Value/7F061729"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateWarpConduitPingLeft_Init () {
    gt_CreateWarpConduitPingLeft = TriggerCreate("gt_CreateWarpConduitPingLeft_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Auto Saves
//--------------------------------------------------------------------------------------------------
bool gt_CreateAutoSaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((gv_shuttleWavesRemaining == 6))) {
        Wait(1.0, c_timeGame);
    }
    Wait(4.0, c_timeGame);
    if ((gv_gameOver == true)) {
        return true;
    }

    libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/4264FA75"));
    while (!((gv_shuttleWavesRemaining == 4))) {
        Wait(0.3, c_timeGame);
    }
    Wait(4.0, c_timeGame);
    if ((gv_gameOver == true)) {
        return true;
    }

    libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/2E362D3F"));
    while (!((gv_shuttleWavesRemaining == 2))) {
        Wait(0.3, c_timeGame);
    }
    Wait(4.0, c_timeGame);
    if ((gv_gameOver == true)) {
        return true;
    }

    libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/C298B8F5"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateAutoSaves_Init () {
    gt_CreateAutoSaves = TriggerCreate("gt_CreateAutoSaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Base Warning Left Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossBaseWarningLeftQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition02|Line00152", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossBaseWarningLeftQ_Init () {
    gt_ProtossBaseWarningLeftQ = TriggerCreate("gt_ProtossBaseWarningLeftQ_Func");
    TriggerAddEventUnitRegion(gt_ProtossBaseWarningLeftQ, null, RegionFromId(7), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Base Warning Right Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossBaseWarningRightQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition02|Line00151", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossBaseWarningRightQ_Init () {
    gt_ProtossBaseWarningRightQ = TriggerCreate("gt_ProtossBaseWarningRightQ_Func");
    TriggerAddEventUnitRegion(gt_ProtossBaseWarningRightQ, null, RegionFromId(16), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shuttle Send Wave 01
//--------------------------------------------------------------------------------------------------
bool gt_ShuttleSendWave01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_shuttleLaunched = false;
    if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
        gf_ShuttleCreateWave(gv_evacShuttleType, 1, null, 0, null, 0, null, 0, ge_LaunchLocation_MIDDLE, ge_ExitLocation_LEFT);
    }
    else {
        gf_ShuttleCreateWave(gv_evacShuttleType, 1, null, 0, null, 0, null, 0, ge_LaunchLocation_MIDDLE, ge_ExitLocation_LEFT);
    }
    Wait(gv_launchTrans_WAIT, c_timeAI);
    TriggerExecute(gt_TransmissionShuttleLaunch01Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShuttleSendWave01_Init () {
    gt_ShuttleSendWave01 = TriggerCreate("gt_ShuttleSendWave01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shuttle Send Wave 02
//--------------------------------------------------------------------------------------------------
bool gt_ShuttleSendWave02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_shuttleLaunched = false;
    if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
        gf_ShuttleCreateWave(gv_evacShuttleType, 1, "Scout", 2, null, 0, null, 0, ge_LaunchLocation_MIDDLE, ge_ExitLocation_LEFT);
    }
    else {
        gf_ShuttleCreateWave(gv_evacShuttleType, 1, "Scout", 3, null, 0, null, 0, ge_LaunchLocation_MIDDLE, ge_ExitLocation_LEFT);
    }
    Wait(gv_launchTrans_WAIT, c_timeAI);
    TriggerExecute(gt_TransmissionShuttleLaunch02Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShuttleSendWave02_Init () {
    gt_ShuttleSendWave02 = TriggerCreate("gt_ShuttleSendWave02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shuttle Send Wave 03
//--------------------------------------------------------------------------------------------------
bool gt_ShuttleSendWave03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_shuttleLaunched = false;
    TriggerExecute(gt_TransmissionShuttleLaunch03Q, true, false);
    TriggerExecute(gt_ActivateWarpConduitMiddle, true, false);
    TriggerExecute(gt_ActivateWarpConduitRight, true, false);
    if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
        gf_ShuttleCreateWave(gv_evacShuttleType, 1, "VoidRay", 1, null, 0, null, 0, ge_LaunchLocation_MIDDLE, ge_ExitLocation_MIDDLE);
    }
    else {
        gf_ShuttleCreateWave(gv_evacShuttleType, 1, "VoidRay", 2, "Scout", 1, null, 0, ge_LaunchLocation_MIDDLE, ge_ExitLocation_MIDDLE);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShuttleSendWave03_Init () {
    gt_ShuttleSendWave03 = TriggerCreate("gt_ShuttleSendWave03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shuttle Send Wave 04
//--------------------------------------------------------------------------------------------------
bool gt_ShuttleSendWave04_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_shuttleLaunched = false;
    if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
        gf_ShuttleCreateWave(gv_evacShuttleType, 1, "VoidRay", 1, "Scout", 1, null, 0, ge_LaunchLocation_LEFT, ge_ExitLocation_RIGHT);
    }
    else {
        gf_ShuttleCreateWave(gv_evacShuttleType, 1, "Carrier", 1, "VoidRay", 2, "Scout", 1, ge_LaunchLocation_LEFT, ge_ExitLocation_RIGHT);
    }
    Wait(gv_launchTrans_WAIT, c_timeAI);
    TriggerExecute(gt_TransmissionShuttleLaunch04Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShuttleSendWave04_Init () {
    gt_ShuttleSendWave04 = TriggerCreate("gt_ShuttleSendWave04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shuttle Send Wave 05
//--------------------------------------------------------------------------------------------------
bool gt_ShuttleSendWave05_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_shuttleLaunched = false;
    if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
        gf_ShuttleCreateWave(gv_evacShuttleType, 1, "Scout", 2, null, 0, null, 0, ge_LaunchLocation_MIDDLE, ge_ExitLocation_LEFT);
        Wait(10.0, c_timeAI);
        gf_ShuttleCreateWave(gv_evacShuttleType, 1, "Scout", 2, null, 0, null, 0, ge_LaunchLocation_RIGHT, ge_ExitLocation_MIDDLE);
    }
    else {
        gf_ShuttleCreateWave(gv_evacShuttleType, 1, "VoidRay", 2, "Carrier", 1, null, 0, ge_LaunchLocation_MIDDLE, ge_ExitLocation_LEFT);
        gf_ShuttleCreateWave(gv_evacShuttleType, 1, "VoidRay", 2, "Carrier", 1, null, 0, ge_LaunchLocation_RIGHT, ge_ExitLocation_MIDDLE);
    }
    Wait(gv_launchTrans_WAIT, c_timeAI);
    TriggerExecute(gt_TransmissionShuttleLaunch05Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShuttleSendWave05_Init () {
    gt_ShuttleSendWave05 = TriggerCreate("gt_ShuttleSendWave05_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shuttle Send Wave 06
//--------------------------------------------------------------------------------------------------
bool gt_ShuttleSendWave06_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_shuttleLaunched = false;
    if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
        gf_ShuttleCreateWave(gv_evacShuttleType, 1, "VoidRay", 2, null, 0, null, 0, ge_LaunchLocation_LEFT, ge_ExitLocation_RIGHT);
        Wait(10.0, c_timeAI);
        gf_ShuttleCreateWave(gv_evacShuttleType, 1, "VoidRay", 1, "Scout", 1, null, 0, ge_LaunchLocation_RIGHT, ge_ExitLocation_MIDDLE);
    }
    else {
        gf_ShuttleCreateWave(gv_evacShuttleType, 1, "VoidRay", 4, null, 0, null, 0, ge_LaunchLocation_LEFT, ge_ExitLocation_MIDDLE);
        gf_ShuttleCreateWave(gv_evacShuttleType, 1, "Scout", 3, "Carrier", 1, null, 0, ge_LaunchLocation_RIGHT, ge_ExitLocation_LEFT);
    }
    Wait(gv_launchTrans_WAIT, c_timeAI);
    TriggerExecute(gt_TransmissionShuttleLaunch06Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShuttleSendWave06_Init () {
    gt_ShuttleSendWave06 = TriggerCreate("gt_ShuttleSendWave06_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shuttle Send Wave 07
//--------------------------------------------------------------------------------------------------
bool gt_ShuttleSendWave07_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_shuttleLaunched = false;
    if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
        gf_ShuttleCreateWave(gv_evacShuttleType, 1, "Carrier", 1, "Scout", 1, null, 0, ge_LaunchLocation_RIGHT, ge_ExitLocation_LEFT);
        Wait(10.0, c_timeAI);
        gf_ShuttleCreateWave(gv_evacShuttleType, 1, "Carrier", 1, "Scout", 1, null, 0, ge_LaunchLocation_MIDDLE, ge_ExitLocation_MIDDLE);
    }
    else {
        gf_ShuttleCreateWave(gv_evacShuttleType, 1, "VoidRay", 2, "Scout", 2, "Colossus", 1, ge_LaunchLocation_RIGHT, ge_ExitLocation_LEFT);
        gf_ShuttleCreateWave(gv_evacShuttleType, 1, "VoidRay", 2, "Scout", 2, "Colossus", 1, ge_LaunchLocation_MIDDLE, ge_ExitLocation_RIGHT);
    }
    Wait(gv_launchTrans_WAIT, c_timeAI);
    TriggerExecute(gt_TransmissionShuttleLaunch07Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShuttleSendWave07_Init () {
    gt_ShuttleSendWave07 = TriggerCreate("gt_ShuttleSendWave07_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shuttle Send Wave 08
//--------------------------------------------------------------------------------------------------
bool gt_ShuttleSendWave08_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_shuttleLaunched = false;
    if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
        gf_ShuttleCreateWave(gv_evacShuttleType, 1, "VoidRay", 1, null, 0, null, 0, ge_LaunchLocation_LEFT, ge_ExitLocation_MIDDLE);
        gf_ShuttleCreateWave(gv_evacShuttleType, 1, "Mothership", 1, null, 0, null, 0, ge_LaunchLocation_MIDDLE, ge_ExitLocation_MIDDLE);
        gf_ShuttleCreateWave(gv_evacShuttleType, 1, "Scout", 2, null, 0, null, 0, ge_LaunchLocation_RIGHT, ge_ExitLocation_MIDDLE);
    }
    else {
        gf_ShuttleCreateWave(gv_evacShuttleType, 1, "VoidRay", 1, "Colossus", 2, null, 0, ge_LaunchLocation_LEFT, ge_ExitLocation_MIDDLE);
        gf_ShuttleCreateWave(gv_evacShuttleType, 1, "Mothership", 1, "VoidRay", 2, null, 0, ge_LaunchLocation_MIDDLE, ge_ExitLocation_MIDDLE);
        gf_ShuttleCreateWave(gv_evacShuttleType, 1, "Scout", 2, "Carrier", 1, null, 0, ge_LaunchLocation_RIGHT, ge_ExitLocation_MIDDLE);
    }
    Wait(gv_launchTrans_WAIT, c_timeAI);
    TriggerExecute(gt_TransmissionShuttleLaunch08Q, true, false);
    Wait(25.0, c_timeAI);
    TriggerExecute(gt_TransmissionDefendMiddleQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShuttleSendWave08_Init () {
    gt_ShuttleSendWave08 = TriggerCreate("gt_ShuttleSendWave08_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shuttle Escape Warning
//--------------------------------------------------------------------------------------------------
bool gt_ShuttleEscapeWarning_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == gv_evacShuttleType))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_noShuttleHasSlowedDown = false;
    gv_warningCounter += 1;
    gv_warningShuttle = EventUnit();
    SoundPlay(SoundLink("UI_ZergWarning", -1), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "MinimapPing", UnitGetPosition(EventUnit()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 2.0, 270.0);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/A9FFDC4F"), null, UnitGetPosition(EventUnit()));
    Wait(1.0, c_timeReal);
    TriggerExecute(gt_TransmissionEscapeWarningQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShuttleEscapeWarning_Init () {
    gt_ShuttleEscapeWarning = TriggerCreate("gt_ShuttleEscapeWarning_Func");
    TriggerAddEventUnitBehaviorChange(gt_ShuttleEscapeWarning, null, "ProtossWarpAwayTarget", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Escape Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionEscapeWarningQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto2BF3E4E7_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitIsAlive(gv_warningShuttle) == false)) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    if ((gv_warningCounter == 1)) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition02|Line00125", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        auto2BF3E4E7_val = RandomInt(1, 3);
        if (auto2BF3E4E7_val == 1) {
            libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Expedition02|Line00126", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto2BF3E4E7_val == 2) {
            libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition02|Line00127", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto2BF3E4E7_val == 3) {
            libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition02|Line00128", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else {
        }
    }
    gv_warningTransmission = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(30.0, c_timeReal);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionEscapeWarningQ_Init () {
    gt_TransmissionEscapeWarningQ = TriggerCreate("gt_TransmissionEscapeWarningQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escaping Shuttle Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_EscapingShuttleDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TransmissionClear(gv_warningTransmission);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapingShuttleDestroyed_Init () {
    gt_EscapingShuttleDestroyed = TriggerCreate("gt_EscapingShuttleDestroyed_Func");
    TriggerAddEventUnitDied(gt_EscapingShuttleDestroyed, UnitRefFromVariable("gv_warningShuttle"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Shuttle Reticule
//--------------------------------------------------------------------------------------------------
bool gt_CreateShuttleReticule_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_shuttle;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_shuttle = gv_shuttleUnit;
    libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(libSwaC_ge_CampaginReticleType_ZergEnemy, libSwaC_ge_CampaginReticleSize_Large, null, lv_shuttle, "Ref_Center");
    while (!((AILastAttacker(lv_shuttle) != null))) {
        Wait(1.0, c_timeGame);
    }
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateShuttleReticule_Init () {
    gt_CreateShuttleReticule = TriggerCreate("gt_CreateShuttleReticule_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shuttle Jump Progress Bar
//--------------------------------------------------------------------------------------------------
bool gt_ShuttleJumpProgressBar_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_warpAwayBar;
    int lv_warpAwayPanel;
    int lv_warpAwayLabel;
    int lv_warpAwayValue;
    int lv_warpAwayProgressBar;
    const int lv_c_Width = 180;
    const int lv_c_Height = 12;
    color lv_color;
    fixed lv_movementSpeed;
    fixed lv_distancetoTarget;
    fixed lv_timetoTarget;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_warpAwayBar = c_invalidDialogId;
    lv_warpAwayPanel = c_invalidDialogControlId;
    lv_warpAwayLabel = c_invalidDialogControlId;
    lv_warpAwayValue = c_invalidDialogControlId;
    lv_warpAwayProgressBar = c_invalidDialogControlId;
    lv_color = Color(0,0,0);

    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((DataTableGetDialog(true, ("Shuttle_" + IntToString(UnitGetTag(EventUnitTargetUnit())))) == c_invalidDialogId))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(210, 75, c_anchorCenter, 0, 0, true);
    lv_warpAwayBar = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetPositionRelativeToUnit(DialogLastCreated(), EventUnitTargetUnit(), "Ref_Center", -100, -30);
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "HotS_GameUnitFrame/SmallProgressUnitFrameTemplate");
    lv_warpAwayPanel = DialogControlLastCreated();
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlHookup(lv_warpAwayPanel, c_triggerControlTypeLabel, "NameLabel");
    lv_warpAwayLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(lv_warpAwayLabel, StringExternal("Param/Value/B51869CD"), PlayerGroupAll());
    DialogControlHookup(lv_warpAwayPanel, c_triggerControlTypeLabel, "ValueLabel");
    lv_warpAwayValue = DialogControlLastCreated();
    DialogControlHookup(lv_warpAwayPanel, c_triggerControlTypeImage, "BarImage");
    lv_warpAwayProgressBar = DialogControlLastCreated();
    DialogSetVisible(lv_warpAwayBar, PlayerGroupAll(), true);
    DataTableSetDialog(true, ("Shuttle_" + IntToString(UnitGetTag(EventUnitTargetUnit()))), lv_warpAwayBar);
    while ((UnitIsAlive(EventUnitTargetUnit()) == true)) {
        DialogSetPositionRelativeToUnit(lv_warpAwayBar, EventUnitTargetUnit(), "Ref_Center", -100, -90);
        lv_distancetoTarget = (DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(EventUnitTargetUnit())) - 1.0);
        if ((UnitGetPropertyFixed(EventUnitTargetUnit(), c_unitPropMovementSpeed, c_unitPropCurrent) > 0.0) && (lv_distancetoTarget >= 0.0)) {
            lv_timetoTarget = (lv_distancetoTarget / UnitGetPropertyFixed(EventUnitTargetUnit(), c_unitPropMovementSpeed, c_unitPropCurrent));
        }
        else {
            lv_timetoTarget = -1.0;
        }
        if (((lv_timetoTarget < 0.0) || (lv_distancetoTarget < 0.0))) {
            DialogSetVisible(lv_warpAwayBar, PlayerGroupAll(), false);
        }
        else {
            libNtve_gf_SetDialogItemText(lv_warpAwayValue, TextTimeFormat(StringToText("<sectotal/>"), FixedToInt(lv_timetoTarget)), PlayerGroupAll());
            DialogControlSetSize(lv_warpAwayProgressBar, PlayerGroupAll(), FixedToInt((IntToFixed(lv_c_Width) * ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(EventUnitTargetUnit())) - 1.0) / 19.0))), lv_c_Height);
            libNtve_gf_SetDialogItemColor(lv_warpAwayProgressBar, libSwaC_gf_GetProgressBarColorCampaign(), PlayerGroupAll());
            DialogSetVisible(lv_warpAwayBar, PlayerGroupAll(), true);
        }
        Wait(0.0625, c_timeReal);
    }
    DialogDestroy(lv_warpAwayBar);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShuttleJumpProgressBar_Init () {
    gt_ShuttleJumpProgressBar = TriggerCreate("gt_ShuttleJumpProgressBar_Func");
    TriggerAddEventUnitAbility(gt_ShuttleJumpProgressBar, null, AbilityCommand("ProtossWarpAwayImminent", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shuttle becomes Cloaked
//--------------------------------------------------------------------------------------------------
bool gt_ShuttlebecomesCloaked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == gv_evacShuttleType))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ShareVisionofUnit(EventUnit(), false, gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShuttlebecomesCloaked_Init () {
    gt_ShuttlebecomesCloaked = TriggerCreate("gt_ShuttlebecomesCloaked_Func");
    TriggerAddEventUnitBehaviorChange(gt_ShuttlebecomesCloaked, null, "CloakFieldEffect", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shuttle becomes unCloaked
//--------------------------------------------------------------------------------------------------
bool gt_ShuttlebecomesunCloaked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == gv_evacShuttleType))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ShareVisionofUnit(EventUnit(), true, gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShuttlebecomesunCloaked_Init () {
    gt_ShuttlebecomesunCloaked = TriggerCreate("gt_ShuttlebecomesunCloaked_Func");
    TriggerAddEventUnitBehaviorChange(gt_ShuttlebecomesunCloaked, null, "CloakFieldEffect", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Warp Conduit Pings
//--------------------------------------------------------------------------------------------------
bool gt_CreateWarpConduitPings_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectivePing(true, UnitGetPosition(UnitFromId(1042)), StringExternal("Param/Value/3ED20ACD"));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/46C2E7E8"), null, UnitGetPosition(UnitFromId(1042)));
    VisRevealerCreate(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(1042)), 8.0));
    gv_revealLeftGate = VisRevealerLastCreated();
    libSwaC_gf_CreateObjectivePing(true, UnitGetPosition(UnitFromId(1043)), StringExternal("Param/Value/E8A25D96"));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/01CCEFB8"), null, UnitGetPosition(UnitFromId(1043)));
    VisRevealerCreate(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(1043)), 8.0));
    gv_revealRightGate = VisRevealerLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateWarpConduitPings_Init () {
    gt_CreateWarpConduitPings = TriggerCreate("gt_CreateWarpConduitPings_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Warp Conduit Left
//--------------------------------------------------------------------------------------------------
bool gt_ActivateWarpConduitLeft_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_ActivateDeactivateWarpConduit(UnitFromId(1041), ge_JumpGateState_Activate);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateWarpConduitLeft_Init () {
    gt_ActivateWarpConduitLeft = TriggerCreate("gt_ActivateWarpConduitLeft_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Warp Conduit Middle
//--------------------------------------------------------------------------------------------------
bool gt_ActivateWarpConduitMiddle_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_ActivateDeactivateWarpConduit(UnitFromId(1042), ge_JumpGateState_Activate);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateWarpConduitMiddle_Init () {
    gt_ActivateWarpConduitMiddle = TriggerCreate("gt_ActivateWarpConduitMiddle_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Warp Conduit Right
//--------------------------------------------------------------------------------------------------
bool gt_ActivateWarpConduitRight_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_ActivateDeactivateWarpConduit(UnitFromId(1043), ge_JumpGateState_Activate);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateWarpConduitRight_Init () {
    gt_ActivateWarpConduitRight = TriggerCreate("gt_ActivateWarpConduitRight_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Docking Bay Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionDockingBayDestroyedQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_numberOfDockingBays;

    // Automatic Variable Declarations
    int auto139C2A93_val;

    // Variable Initialization
    lv_numberOfDockingBays = UnitGroupCount(UnitGroup(gv_launchFacilityType, gv_pLAYER_02_SHUTTLE_BLUE, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto139C2A93_val = lv_numberOfDockingBays;
    if (auto139C2A93_val == 2) {
        TriggerQueueEnter();
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition02|Line00078", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }
    else if (auto139C2A93_val == 1) {
        TriggerQueueEnter();
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition02|Line00079", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }
    else if (auto139C2A93_val == 0) {
        TriggerQueueEnter();
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition02|Line00083", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionDockingBayDestroyedQ_Init () {
    gt_TransmissionDockingBayDestroyedQ = TriggerCreate("gt_TransmissionDockingBayDestroyedQ_Func");
    TriggerAddEventUnitDied(gt_TransmissionDockingBayDestroyedQ, UnitRefFromUnit(UnitFromId(22)));
    TriggerAddEventUnitDied(gt_TransmissionDockingBayDestroyedQ, UnitRefFromUnit(UnitFromId(151)));
    TriggerAddEventUnitDied(gt_TransmissionDockingBayDestroyedQ, UnitRefFromUnit(UnitFromId(153)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Shuttle Launch 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionShuttleLaunch01Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((gv_shuttleLaunched == true))) {
        Wait(1.0, c_timeAI);
    }
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition02|Line00002", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Expedition02|Line00001", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionShuttleLaunch01Q_Init () {
    gt_TransmissionShuttleLaunch01Q = TriggerCreate("gt_TransmissionShuttleLaunch01Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Shuttle Launch 02 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionShuttleLaunch02Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((gv_shuttleLaunched == true))) {
        Wait(1.0, c_timeAI);
    }
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition02|Line00005", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition02|Line00022", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionShuttleLaunch02Q_Init () {
    gt_TransmissionShuttleLaunch02Q = TriggerCreate("gt_TransmissionShuttleLaunch02Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Shuttle Launch 03 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionShuttleLaunch03Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_CreateWarpConduitPings, true, false);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition02|Line00006", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Expedition02|Line00007", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionShuttleLaunch03Q_Init () {
    gt_TransmissionShuttleLaunch03Q = TriggerCreate("gt_TransmissionShuttleLaunch03Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Shuttle Launch 04 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionShuttleLaunch04Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((gv_shuttleLaunched == true))) {
        Wait(1.0, c_timeAI);
    }
    if ((UnitGroupCount(UnitGroup(gv_launchFacilityType, gv_pLAYER_02_SHUTTLE_BLUE, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 3)) {
        TriggerQueueEnter();
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition02|Line00008", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Expedition02|Line00009", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }
    else {
        TriggerQueueEnter();
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Expedition02|Line00027", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionShuttleLaunch04Q_Init () {
    gt_TransmissionShuttleLaunch04Q = TriggerCreate("gt_TransmissionShuttleLaunch04Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Shuttle Launch 05 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionShuttleLaunch05Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((gv_shuttleLaunched == true))) {
        Wait(1.0, c_timeAI);
    }
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    if ((UnitGroupCount(UnitGroup(gv_launchFacilityType, gv_pLAYER_02_SHUTTLE_BLUE, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 2)) {
        libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Expedition02|Line00011", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Expedition02|Line00110", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionShuttleLaunch05Q_Init () {
    gt_TransmissionShuttleLaunch05Q = TriggerCreate("gt_TransmissionShuttleLaunch05Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Shuttle Launch 06 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionShuttleLaunch06Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((gv_shuttleLaunched == true))) {
        Wait(1.0, c_timeAI);
    }
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition02|Line00110", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition02|Line00024", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionShuttleLaunch06Q_Init () {
    gt_TransmissionShuttleLaunch06Q = TriggerCreate("gt_TransmissionShuttleLaunch06Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Shuttle Launch 07 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionShuttleLaunch07Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((gv_shuttleLaunched == true))) {
        Wait(1.0, c_timeAI);
    }
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition02|Line00110", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionShuttleLaunch07Q_Init () {
    gt_TransmissionShuttleLaunch07Q = TriggerCreate("gt_TransmissionShuttleLaunch07Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Shuttle Launch 08 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionShuttleLaunch08Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((gv_shuttleLaunched == true))) {
        Wait(1.0, c_timeAI);
    }
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    if ((UnitGroupCount(UnitGroup(gv_launchFacilityType, gv_pLAYER_02_SHUTTLE_BLUE, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 3)) {
        libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Expedition02|Line00142", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }

    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition02|Line00081", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZExpedition02MusicEvent02_Mothership", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Expedition02|Line00082", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionShuttleLaunch08Q_Init () {
    gt_TransmissionShuttleLaunch08Q = TriggerCreate("gt_TransmissionShuttleLaunch08Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Defend Middle Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionDefendMiddleQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Expedition02|Line00138", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionDefendMiddleQ_Init () {
    gt_TransmissionDefendMiddleQ = TriggerCreate("gt_TransmissionDefendMiddleQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Discover Frozen Expansion
//--------------------------------------------------------------------------------------------------
bool gt_DiscoverFrozenExpansion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(13), 10.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DiscoverFrozenExpansion_Init () {
    gt_DiscoverFrozenExpansion = TriggerCreate("gt_DiscoverFrozenExpansion_Func");
    TriggerAddEventUnitRegion(gt_DiscoverFrozenExpansion, null, RegionFromId(12), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rescue Frozen Zerg Units
//--------------------------------------------------------------------------------------------------
bool gt_RescueFrozenZergUnits_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoC52CAB03_g;
    int autoC52CAB03_u;
    unit autoC52CAB03_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoC52CAB03_g = UnitGroup(null, gv_pLAYER_07_FROZENZERG, EventUnitRegion(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC52CAB03_u = UnitGroupCount(autoC52CAB03_g, c_unitCountAll);
    for (;; autoC52CAB03_u -= 1) {
        autoC52CAB03_var = UnitGroupUnitFromEnd(autoC52CAB03_g, autoC52CAB03_u);
        if (autoC52CAB03_var == null) { break; }
        gf_SaveFrozenZerg(autoC52CAB03_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RescueFrozenZergUnits_Init () {
    gt_RescueFrozenZergUnits = TriggerCreate("gt_RescueFrozenZergUnits_Func");
    TriggerAddEventUnitRegion(gt_RescueFrozenZergUnits, null, RegionFromId(8), true);
    TriggerAddEventUnitRegion(gt_RescueFrozenZergUnits, null, RegionFromId(9), true);
    TriggerAddEventUnitRegion(gt_RescueFrozenZergUnits, null, RegionFromId(10), true);
    TriggerAddEventUnitRegion(gt_RescueFrozenZergUnits, null, RegionFromId(3), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rescue Frozen Zerg Expansion
//--------------------------------------------------------------------------------------------------
bool gt_RescueFrozenZergExpansion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto5E51DAD4_g;
    int auto5E51DAD4_u;
    unit auto5E51DAD4_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNtve_gf_UnitGroupIsDead(gv_frozenExpansionProtoss) == true))) {
        Wait(1.0, c_timeGame);
    }
    libSwaC_gf_PingMinimapCampaign(PlayerGroupSingle(gv_pLAYER_01_USER), UnitGetPosition(UnitFromId(1)), 2.0, Color(0.00, 100.00, 0.00));
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/66AC2FE8"), null, UnitFromId(1));
    TriggerExecute(gt_TransmissionFrozenBaseRescuedQ, true, false);
    auto5E51DAD4_g = UnitGroup(null, gv_pLAYER_07_FROZENZERG, RegionFromId(13), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5E51DAD4_u = UnitGroupCount(auto5E51DAD4_g, c_unitCountAll);
    for (;; auto5E51DAD4_u -= 1) {
        auto5E51DAD4_var = UnitGroupUnitFromEnd(auto5E51DAD4_g, auto5E51DAD4_u);
        if (auto5E51DAD4_var == null) { break; }
        gf_SaveFrozenZerg(auto5E51DAD4_var);
    }
    libSwaC_gf_SetHatcheryRallyPoint(UnitFromId(1), PointFromId(184));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RescueFrozenZergExpansion_Init () {
    gt_RescueFrozenZergExpansion = TriggerCreate("gt_RescueFrozenZergExpansion_Func");
    TriggerAddEventUnitRegion(gt_RescueFrozenZergExpansion, null, RegionFromId(11), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Frozen Base Rescued Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionFrozenBaseRescuedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Expedition02|Line00093", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionFrozenBaseRescuedQ_Init () {
    gt_TransmissionFrozenBaseRescuedQ = TriggerCreate("gt_TransmissionFrozenBaseRescuedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ground Ice Crack 01
//--------------------------------------------------------------------------------------------------
bool gt_GroundIceCrack01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(972)), c_animNameDefault, "Stand Work Start", c_animFlagNonLooping, c_animTimeDefault);
    Wait(1.0, c_timeGame);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(972)), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GroundIceCrack01_Init () {
    gt_GroundIceCrack01 = TriggerCreate("gt_GroundIceCrack01_Func");
    TriggerAddEventUnitRegion(gt_GroundIceCrack01, null, RegionFromId(21), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ice Wall Collapse 01
//--------------------------------------------------------------------------------------------------
bool gt_IceWallCollapse01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(511)), c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(6.667, c_timeGame);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(511)), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IceWallCollapse01_Init () {
    gt_IceWallCollapse01 = TriggerCreate("gt_IceWallCollapse01_Func");
    TriggerAddEventUnitRegion(gt_IceWallCollapse01, null, RegionFromId(23), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ice Wall Collapse 02
//--------------------------------------------------------------------------------------------------
bool gt_IceWallCollapse02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(679)), c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(6.667, c_timeGame);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(679)), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IceWallCollapse02_Init () {
    gt_IceWallCollapse02 = TriggerCreate("gt_IceWallCollapse02_Func");
    TriggerAddEventUnitRegion(gt_IceWallCollapse02, null, RegionFromId(24), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ice Wall Collapse 03
//--------------------------------------------------------------------------------------------------
bool gt_IceWallCollapse03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(698)), c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(6.667, c_timeGame);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(698)), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IceWallCollapse03_Init () {
    gt_IceWallCollapse03 = TriggerCreate("gt_IceWallCollapse03_Func");
    TriggerAddEventUnitRegion(gt_IceWallCollapse03, null, RegionFromId(25), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ice Wall Collapse 04
//--------------------------------------------------------------------------------------------------
bool gt_IceWallCollapse04_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(337)), c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(6.667, c_timeGame);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(337)), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IceWallCollapse04_Init () {
    gt_IceWallCollapse04 = TriggerCreate("gt_IceWallCollapse04_Func");
    TriggerAddEventUnitRegion(gt_IceWallCollapse04, null, RegionFromId(26), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ice Wall Collapse 05
//--------------------------------------------------------------------------------------------------
bool gt_IceWallCollapse05_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(505)), c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(6.667, c_timeGame);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(505)), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IceWallCollapse05_Init () {
    gt_IceWallCollapse05 = TriggerCreate("gt_IceWallCollapse05_Func");
    TriggerAddEventUnitRegion(gt_IceWallCollapse05, null, RegionFromId(27), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ice Wall Collapse 06
//--------------------------------------------------------------------------------------------------
bool gt_IceWallCollapse06_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(974)), c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(6.667, c_timeGame);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(974)), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IceWallCollapse06_Init () {
    gt_IceWallCollapse06 = TriggerCreate("gt_IceWallCollapse06_Func");
    TriggerAddEventUnitRegion(gt_IceWallCollapse06, null, RegionFromId(28), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show Bonus Objective (Proximity)
//--------------------------------------------------------------------------------------------------
bool gt_ShowBonusObjectiveProximity_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_BonusObjectiveIntroQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowBonusObjectiveProximity_Init () {
    gt_ShowBonusObjectiveProximity = TriggerCreate("gt_ShowBonusObjectiveProximity_Func");
    TriggerAddEventUnitRegion(gt_ShowBonusObjectiveProximity, null, RegionFromId(4), true);
    TriggerAddEventUnitRegion(gt_ShowBonusObjectiveProximity, null, RegionFromId(1), true);
    TriggerAddEventUnitRegion(gt_ShowBonusObjectiveProximity, null, RegionFromId(29), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveIntroQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    unitgroup auto3CF6BF0B_g;
    int auto3CF6BF0B_u;
    unit auto3CF6BF0B_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionStasisChamberIntroQ, true, false);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveDestroyStasisChamberCreate, true, true);
    TriggerQueueExit();
    auto3CF6BF0B_g = gv_stasisChamberGroup;
    auto3CF6BF0B_u = UnitGroupCount(auto3CF6BF0B_g, c_unitCountAll);
    for (;; auto3CF6BF0B_u -= 1) {
        auto3CF6BF0B_var = UnitGroupUnitFromEnd(auto3CF6BF0B_g, auto3CF6BF0B_u);
        if (auto3CF6BF0B_var == null) { break; }
        libSwaC_gf_CreateObjectivePing(false, UnitGetPosition(auto3CF6BF0B_var), StringExternal("Param/Value/9914D433"));
        gv_stasisChamberPingArray[lv_index] = PingLastCreated();
        UnitSetCustomValue(auto3CF6BF0B_var, gv_stasisChamberPingIndex, IntToFixed(lv_index));
        lv_index = (lv_index + 1);
        VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(auto3CF6BF0B_var), 5.0), 0.1, false);
    }
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveIntroQ_Init () {
    gt_BonusObjectiveIntroQ = TriggerCreate("gt_BonusObjectiveIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stasis Chamber Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_StasisChamberDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_stasisChamberDestroyed += 1;
    PingDestroy(gv_stasisChamberPingArray[FixedToInt(UnitGetCustomValue(EventUnit(), gv_stasisChamberPingIndex))]);
    TriggerExecute(gt_ObjectiveDestroyStasisChamberUpdate, true, false);
    libSwaC_gf_DisplayMissionObjectiveRewardFloatingText(UnitGetPosition(EventUnit()), "ZExpedition02Objective1", gv_pLAYER_01_USER);
    if ((gv_stasisChamberDestroyed == 3)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_ObjectiveDestroyStasisChamberComplete, true, false);
    }

    TriggerExecute(gt_TransmissionStasisChamberDestroyedQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StasisChamberDestroyed_Init () {
    gt_StasisChamberDestroyed = TriggerCreate("gt_StasisChamberDestroyed_Func");
    TriggerAddEventUnitDied(gt_StasisChamberDestroyed, UnitRefFromUnit(UnitFromId(272)));
    TriggerAddEventUnitDied(gt_StasisChamberDestroyed, UnitRefFromUnit(UnitFromId(266)));
    TriggerAddEventUnitDied(gt_StasisChamberDestroyed, UnitRefFromUnit(UnitFromId(274)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Stasis Chamber Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionStasisChamberIntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_RemindPlayertoCompleteBonusObjective("ZExpedition02Objective1", 600.0);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition02|Line00033", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Expedition02|Line00035", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionStasisChamberIntroQ_Init () {
    gt_TransmissionStasisChamberIntroQ = TriggerCreate("gt_TransmissionStasisChamberIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Stasis Chamber Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionStasisChamberDestroyedQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentBiomas;

    // Automatic Variable Declarations
    int auto5483C073_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentBiomas = gv_stasisChamberDestroyed;
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    auto5483C073_val = lv_currentBiomas;
    if (auto5483C073_val == 1) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition02|Line00034", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto5483C073_val == 2) {
        libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Expedition02|Line00039", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto5483C073_val == 3) {
        libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Expedition02|Line00113", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition02|Line00114", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionStasisChamberDestroyedQ_Init () {
    gt_TransmissionStasisChamberDestroyedQ = TriggerCreate("gt_TransmissionStasisChamberDestroyedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AINearestTownBullyRebuild(gv_pLAYER_02_SHUTTLE_BLUE, true);
    AINearestTownBullyRebuild(gv_pLAYER_03_PROTOSS_GREEN, true);
    AINearestTownBullyRebuild(gv_pLAYER_04_PROTOSS_RED, true);
    cai_startall();
    cai_runall();
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        TriggerExecute(gt_StartUpgradesHard, true, false);
    }
    else {
        TriggerExecute(gt_StartUpgradesNormal, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Upgrades (Normal)
//--------------------------------------------------------------------------------------------------
bool gt_StartUpgradesNormal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto0F50F8EF_g;
    int auto0F50F8EF_var;
    playergroup auto48AD9CC3_g;
    int auto48AD9CC3_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(660.0, c_timeAI);
    auto0F50F8EF_g = gv_protossPlayers;
    auto0F50F8EF_var = -1;
    while (true) {
        auto0F50F8EF_var = PlayerGroupNextPlayer(auto0F50F8EF_g, auto0F50F8EF_var);
        if (auto0F50F8EF_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto0F50F8EF_var, "ProtossGroundArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(auto0F50F8EF_var, "ProtossAirArmorsLevel1", 1);
    }
    Wait(420.0, c_timeAI);
    auto48AD9CC3_g = gv_protossPlayers;
    auto48AD9CC3_var = -1;
    while (true) {
        auto48AD9CC3_var = PlayerGroupNextPlayer(auto48AD9CC3_g, auto48AD9CC3_var);
        if (auto48AD9CC3_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto48AD9CC3_var, "ProtossShieldsLevel1", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartUpgradesNormal_Init () {
    gt_StartUpgradesNormal = TriggerCreate("gt_StartUpgradesNormal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Upgrades (Hard)
//--------------------------------------------------------------------------------------------------
bool gt_StartUpgradesHard_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoFB8882D7_g;
    int autoFB8882D7_var;
    playergroup auto0754E68E_g;
    int auto0754E68E_var;
    playergroup autoA0C6FFB4_g;
    int autoA0C6FFB4_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(360.0, c_timeAI);
    autoFB8882D7_g = gv_protossPlayers;
    autoFB8882D7_var = -1;
    while (true) {
        autoFB8882D7_var = PlayerGroupNextPlayer(autoFB8882D7_g, autoFB8882D7_var);
        if (autoFB8882D7_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoFB8882D7_var, "ProtossGroundArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(autoFB8882D7_var, "ProtossAirArmorsLevel1", 1);
    }
    Wait(240.0, c_timeAI);
    auto0754E68E_g = gv_protossPlayers;
    auto0754E68E_var = -1;
    while (true) {
        auto0754E68E_var = PlayerGroupNextPlayer(auto0754E68E_g, auto0754E68E_var);
        if (auto0754E68E_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto0754E68E_var, "ProtossShieldsLevel1", 1);
    }
    Wait(360.0, c_timeAI);
    autoA0C6FFB4_g = gv_protossPlayers;
    autoA0C6FFB4_var = -1;
    while (true) {
        autoA0C6FFB4_var = PlayerGroupNextPlayer(autoA0C6FFB4_g, autoA0C6FFB4_var);
        if (autoA0C6FFB4_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoA0C6FFB4_var, "ProtossAirWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(autoA0C6FFB4_var, "ProtossGroundWeaponsLevel2", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartUpgradesHard_Init () {
    gt_StartUpgradesHard = TriggerCreate("gt_StartUpgradesHard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Minerals
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveMinerals_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveMinerals_Init () {
    gt_AIGiveMinerals = TriggerCreate("gt_AIGiveMinerals_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_pLAYER_02_SHUTTLE_BLUE, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_pLAYER_03_PROTOSS_GREEN, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_pLAYER_04_PROTOSS_RED, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Gas
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveGas_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveGas_Init () {
    gt_AIGiveGas = TriggerCreate("gt_AIGiveGas_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_pLAYER_02_SHUTTLE_BLUE, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_pLAYER_03_PROTOSS_GREEN, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_pLAYER_04_PROTOSS_RED, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Shuttle Killed - Send Attack Wave
//--------------------------------------------------------------------------------------------------
bool gt_AIShuttleKilledSendAttackWave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoBD70B6C1_val;

    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == gv_evacShuttleType))) {
            return false;
        }

        if (!((UnitGroupCount(gv_evacShuttles, c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoBD70B6C1_val = gv_shuttleWavesRemaining;
    if (autoBD70B6C1_val == 8) {
    }
    else if (autoBD70B6C1_val == 7) {
        cai_wave_enable(2, gv_pLAYER_04_PROTOSS_RED, true);
        cai_wave_run(2, gv_pLAYER_04_PROTOSS_RED, PlayerGroupSingle(gv_pLAYER_01_USER), false);
    }
    else if (autoBD70B6C1_val == 6) {
        cai_wave_enable(7, gv_pLAYER_03_PROTOSS_GREEN, true);
        cai_wave_run(7, gv_pLAYER_03_PROTOSS_GREEN, PlayerGroupSingle(gv_pLAYER_01_USER), false);
    }
    else if (autoBD70B6C1_val == 5) {
        cai_wave_enable(8, gv_pLAYER_03_PROTOSS_GREEN, true);
        cai_wave_run(8, gv_pLAYER_03_PROTOSS_GREEN, PlayerGroupSingle(gv_pLAYER_01_USER), false);
    }
    else if (autoBD70B6C1_val == 4) {
        cai_wave_enable(5, gv_pLAYER_04_PROTOSS_RED, true);
        cai_wave_run(5, gv_pLAYER_04_PROTOSS_RED, PlayerGroupSingle(gv_pLAYER_01_USER), false);
    }
    else if (autoBD70B6C1_val == 3) {
        cai_wave_enable(6, gv_pLAYER_04_PROTOSS_RED, true);
        cai_wave_run(6, gv_pLAYER_04_PROTOSS_RED, PlayerGroupSingle(gv_pLAYER_01_USER), false);
    }
    else if (autoBD70B6C1_val == 2) {
        cai_wave_enable(9, gv_pLAYER_03_PROTOSS_GREEN, true);
        cai_wave_run(9, gv_pLAYER_03_PROTOSS_GREEN, PlayerGroupSingle(gv_pLAYER_01_USER), false);
        cai_wave_enable(7, gv_pLAYER_04_PROTOSS_RED, true);
        cai_wave_run(7, gv_pLAYER_04_PROTOSS_RED, PlayerGroupSingle(gv_pLAYER_01_USER), false);
    }
    else if (autoBD70B6C1_val == 1) {
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIShuttleKilledSendAttackWave_Init () {
    gt_AIShuttleKilledSendAttackWave = TriggerCreate("gt_AIShuttleKilledSendAttackWave_Func");
    TriggerAddEventUnitDied(gt_AIShuttleKilledSendAttackWave, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disable Mini-Base Bullies
//--------------------------------------------------------------------------------------------------
bool gt_DisableMiniBaseBullies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AIToggleBulliesInRegion(gv_pLAYER_04_PROTOSS_RED, RegionFromId(6), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisableMiniBaseBullies_Init () {
    gt_DisableMiniBaseBullies = TriggerCreate("gt_DisableMiniBaseBullies_Func");
    TriggerAddEventUnitDied(gt_DisableMiniBaseBullies, UnitRefFromUnit(UnitFromId(29)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective Sentry Force Fields
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveSentryForceFields_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(187), OrderTargetingPoint(AbilityCommand("ForceField", 0), PointFromId(1243)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(187), OrderTargetingPoint(AbilityCommand("ForceField", 0), PointFromId(46)), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveSentryForceFields_Init () {
    gt_BonusObjectiveSentryForceFields = TriggerCreate("gt_BonusObjectiveSentryForceFields_Func");
    TriggerAddEventUnitRegion(gt_BonusObjectiveSentryForceFields, null, RegionFromId(14), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Attack And Bonus Intro
//--------------------------------------------------------------------------------------------------
bool gt_FirstAttackAndBonusIntro_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_firstWave;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_firstWave = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionFirstAttackQ, true, false);
    lv_firstWave = AIWaveGetUnits(cai_wave_createdWave(1, gv_pLAYER_04_PROTOSS_RED));
    while (!((UnitGroupCount(lv_firstWave, c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeAI);
    }
    Wait(5.0, c_timeAI);
    TriggerExecute(gt_BonusObjectiveIntroQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstAttackAndBonusIntro_Init () {
    gt_FirstAttackAndBonusIntro = TriggerCreate("gt_FirstAttackAndBonusIntro_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: First Attack Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionFirstAttackQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition02|Line00122", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Expedition02|Line00032", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionFirstAttackQ_Init () {
    gt_TransmissionFirstAttackQ = TriggerCreate("gt_TransmissionFirstAttackQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Second Attack Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionSecondAttackQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition02|Line00017", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionSecondAttackQ_Init () {
    gt_TransmissionSecondAttackQ = TriggerCreate("gt_TransmissionSecondAttackQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), libSwaC_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/FBA8F002"), libSwaC_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Primary Objective Failed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatPrimaryObjectiveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    CameraPan(gv_pLAYER_01_USER, UnitGetPosition(EventUnit()), 1.5, 0, 10, false);
    TriggerEnable(gt_ObjectiveDestroyAllProtossShuttlesUpdate, false);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerExecute(gt_ObjectiveDestroyAllProtossShuttlesFailed, true, false);
    TriggerExecute(gt_ObjectiveNoShuttleCanEscapeFailed, true, false);
    Wait(2.0, c_timeReal);
    libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), libSwaC_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/EF364743"), libSwaC_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatPrimaryObjectiveFailed_Init () {
    gt_DefeatPrimaryObjectiveFailed = TriggerCreate("gt_DefeatPrimaryObjectiveFailed_Func");
    TriggerAddEventUnitAbility(gt_DefeatPrimaryObjectiveFailed, null, AbilityCommand("ProtossWarpAway", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Docking Bays Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryDockingBaysDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("ProtossFrigate", gv_pLAYER_02_SHUTTLE_BLUE, null, UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 1), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(22)) == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(151)) == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(153)) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_UpdateMissionObjectiveText("ZExpedition02Objective2", 0, false, StringExternal("Param/Value/DCC58208"));
    gv_alternateVictory = true;
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryDockingBaysDestroyed_Init () {
    gt_VictoryDockingBaysDestroyed = TriggerCreate("gt_VictoryDockingBaysDestroyed_Func");
    TriggerAddEventTimePeriodic(gt_VictoryDockingBaysDestroyed, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZExpedition02MusicCutscene_MissionVictoryStinger", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    if ((UnitIsAlive(gv_kerrigan) == true)) {
        libNtve_gf_MakeUnitInvulnerable(gv_kerrigan, true);
    }

    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveDestroyAllProtossShuttlesComplete, true, true);
    TriggerExecute(gt_ObjectiveNoShuttleCanEscapeComplete, true, true);
    libSwaC_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((ObjectiveGetState(gv_objectiveDestroyDominionBase) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objectiveNoShuttleCanEscape) == c_objectiveStateCompleted)) {
        libSwaC_gf_CampaignAwardAchievement("ZKaldir02_1", gv_pLAYER_01_USER);
    }

    TriggerExecute(gt_AchievementNoShuttleSlowdown, true, false);
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/8711F646"), IntToText(libNtve_gf_UnitGetPropertyKills(gv_kerrigan, c_unitPropCurrent)));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/5493585C"), IntToText(PlayerScoreValueGetAsInt(gv_pLAYER_01_USER, "UnitsKilledCount")));
    TextExpressionSetToken("Param/Expression/8D3FDEBE", "ZergUnfrozen", IntToText(gv_feralZergUnfrozen));
    TextExpressionSetToken("Param/Expression/8D3FDEBE", "TotalFrozen", IntToText(gv_feralZergFrozenTotal));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/0763F1A2"), TextExpressionAssemble("Param/Expression/8D3FDEBE"));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/52CCA2C9"), IntToText(gv_warningCounter));
    TextExpressionSetToken("Param/Expression/ECEF26EA", "NexusDestroyed", IntToText(gv_nexusDestroyedCount));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/7032D329"), TextExpressionAssemble("Param/Expression/ECEF26EA"));
    TextExpressionSetToken("Param/Expression/7B00F4D6", "NexusDestroyed", IntToText(gv_dockingBaysDestroyed));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/0D4896CF"), TextExpressionAssemble("Param/Expression/7B00F4D6"));
    libSwaC_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_Defeat, false);
    TriggerEnable(gt_DefeatCheat, false);
    gv_gameOver = true;
    libSwaC_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_Victory, false);
    TriggerEnable(gt_VictoryCheat, false);
    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: No Shuttle Slowdown
//--------------------------------------------------------------------------------------------------
bool gt_AchievementNoShuttleSlowdown_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_noShuttleHasSlowedDown == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CampaignAwardAchievement("ZKaldir02_2", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementNoShuttleSlowdown_Init () {
    gt_AchievementNoShuttleSlowdown = TriggerCreate("gt_AchievementNoShuttleSlowdown_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Destroy Nexus N/H
//--------------------------------------------------------------------------------------------------
bool gt_AchievementDestroyNexusNH_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_nexusDestroyedCount += 1;
    if ((libHots_gf_DifficultyValueInt2(0, 1, 1) == 1) && (gv_nexusDestroyedCount == 2)) {
        libSwaC_gf_CampaignAwardAchievement("ZKaldir02_3", gv_pLAYER_01_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementDestroyNexusNH_Init () {
    gt_AchievementDestroyNexusNH = TriggerCreate("gt_AchievementDestroyNexusNH_Func");
    TriggerAddEventUnitDied(gt_AchievementDestroyNexusNH, UnitRefFromUnit(UnitFromId(361)));
    TriggerAddEventUnitDied(gt_AchievementDestroyNexusNH, UnitRefFromUnit(UnitFromId(29)));
    TriggerAddEventUnitDied(gt_AchievementDestroyNexusNH, UnitRefFromUnit(UnitFromId(135)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Destroy Shuttle Bays H
//--------------------------------------------------------------------------------------------------
bool gt_AchievementDestroyShuttleBaysH_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_dockingBaysDestroyed += 1;
    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (GameGetMissionTime() < 661.0)) {
        libSwaC_gf_CampaignAwardAchievement("Anniversary_ZExpedition02", gv_pLAYER_01_USER);
        TriggerDebugOutput(1, StringExternal("Param/Value/4823D88D"), false);
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        if ((UnitIsAlive(UnitFromId(22)) == false) && (UnitIsAlive(UnitFromId(151)) == false) && (UnitIsAlive(UnitFromId(153)) == false)) {
            TriggerEnable(TriggerGetCurrent(), false);
            libSwaC_gf_CampaignAwardAchievement("Mastery_Kaldir2", gv_pLAYER_01_USER);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementDestroyShuttleBaysH_Init () {
    gt_AchievementDestroyShuttleBaysH = TriggerCreate("gt_AchievementDestroyShuttleBaysH_Func");
    TriggerAddEventUnitDied(gt_AchievementDestroyShuttleBaysH, UnitRefFromUnit(UnitFromId(22)));
    TriggerAddEventUnitDied(gt_AchievementDestroyShuttleBaysH, UnitRefFromUnit(UnitFromId(151)));
    TriggerAddEventUnitDied(gt_AchievementDestroyShuttleBaysH, UnitRefFromUnit(UnitFromId(153)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Mission Help Q
//--------------------------------------------------------------------------------------------------
bool gt_TipMissionHelpQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition02|Line00150", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    }

    libSwaC_gf_DisplayMissionTip(StringExternal("Param/Value/8AF6FAD6"));
    Wait(libSwaC_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipMissionHelpQ_Init () {
    gt_TipMissionHelpQ = TriggerCreate("gt_TipMissionHelpQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy All Protoss Shuttles Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyAllProtossShuttlesCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZExpedition02Objective2");
    gv_objectiveDestroyDominionBase = ObjectiveLastCreated();
    libSwaC_gf_UpdateMissionObjectiveText("ZExpedition02Objective2", gv_shuttleWavesRemaining, false, gf_Objective_LabelText());
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyAllProtossShuttlesCreate_Init () {
    gt_ObjectiveDestroyAllProtossShuttlesCreate = TriggerCreate("gt_ObjectiveDestroyAllProtossShuttlesCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy All Protoss Shuttles Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyAllProtossShuttlesUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_decrementamount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_evacShuttles, EventUnit()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(gv_evacShuttles, c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveDestroyAllProtossShuttlesCreate, true, false);
    gv_shuttleWavesRemaining -= 1;
    libSwaC_gf_UpdateMissionObjectiveText("ZExpedition02Objective2", gv_shuttleWavesRemaining, false, gf_Objective_LabelText());
    if ((gv_shuttleWavesRemaining <= 0)) {
        TriggerExecute(gt_VictorySequence, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyAllProtossShuttlesUpdate_Init () {
    gt_ObjectiveDestroyAllProtossShuttlesUpdate = TriggerCreate("gt_ObjectiveDestroyAllProtossShuttlesUpdate_Func");
    TriggerAddEventUnitDied(gt_ObjectiveDestroyAllProtossShuttlesUpdate, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy All Protoss Shuttles Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyAllProtossShuttlesComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyAllProtossShuttlesCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZExpedition02Objective2", libSwaC_ge_MissionObjectiveState_Completed);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyAllProtossShuttlesComplete_Init () {
    gt_ObjectiveDestroyAllProtossShuttlesComplete = TriggerCreate("gt_ObjectiveDestroyAllProtossShuttlesComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy All Protoss Shuttles Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyAllProtossShuttlesFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyAllProtossShuttlesCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZExpedition02Objective2", libSwaC_ge_MissionObjectiveState_Failed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyAllProtossShuttlesFailed_Init () {
    gt_ObjectiveDestroyAllProtossShuttlesFailed = TriggerCreate("gt_ObjectiveDestroyAllProtossShuttlesFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective No Shuttle Can Escape Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveNoShuttleCanEscapeCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZExpedition02Objective3");
    gv_objectiveNoShuttleCanEscape = ObjectiveLastCreated();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveNoShuttleCanEscapeCreate_Init () {
    gt_ObjectiveNoShuttleCanEscapeCreate = TriggerCreate("gt_ObjectiveNoShuttleCanEscapeCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective No Shuttle Can Escape Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveNoShuttleCanEscapeComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveNoShuttleCanEscapeCreate, true, false);
    libSwaC_gf_SetMissionObjectiveProgress2("ZExpedition02Objective3", 1, true, null, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZExpedition02Objective3", libSwaC_ge_MissionObjectiveState_Completed);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveNoShuttleCanEscapeComplete_Init () {
    gt_ObjectiveNoShuttleCanEscapeComplete = TriggerCreate("gt_ObjectiveNoShuttleCanEscapeComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective No Shuttle Can Escape Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveNoShuttleCanEscapeFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveNoShuttleCanEscapeCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZExpedition02Objective3", libSwaC_ge_MissionObjectiveState_Failed);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeGame);
    TriggerExecute(gt_DefeatPrimaryObjectiveFailed, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveNoShuttleCanEscapeFailed_Init () {
    gt_ObjectiveNoShuttleCanEscapeFailed = TriggerCreate("gt_ObjectiveNoShuttleCanEscapeFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Stasis Chamber Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyStasisChamberCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZExpedition02Objective1");
    gv_objectiveBonusDestroyStasisChamber = ObjectiveLastCreated();
    libSwaC_gf_SetMissionObjectiveProgress2("ZExpedition02Objective1", 0, true, null, true);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyStasisChamberCreate_Init () {
    gt_ObjectiveDestroyStasisChamberCreate = TriggerCreate("gt_ObjectiveDestroyStasisChamberCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Stasis Chamber Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyStasisChamberUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveDestroyStasisChamberCreate, true, false);
    libSwaC_gf_SetMissionObjectiveProgress2("ZExpedition02Objective1", gv_stasisChamberDestroyed, true, null, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyStasisChamberUpdate_Init () {
    gt_ObjectiveDestroyStasisChamberUpdate = TriggerCreate("gt_ObjectiveDestroyStasisChamberUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Stasis Chamber Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyStasisChamberComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyStasisChamberCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZExpedition02Objective1", libSwaC_ge_MissionObjectiveState_Completed);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyStasisChamberComplete_Init () {
    gt_ObjectiveDestroyStasisChamberComplete = TriggerCreate("gt_ObjectiveDestroyStasisChamberComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    libSwaC_gf_EnableDisableZerglingRespawn(false);
    UnitPauseAll(true);
    UnitGroupAdd(gv_cinematicHiddenUnits, UnitFromId(1357));
    libNtve_gf_ShowHideUnit(UnitFromId(1357), false);
    UnitGroupAdd(gv_cinematicHiddenUnits, UnitFromId(148));
    libNtve_gf_ShowHideUnit(UnitFromId(148), false);
    gv_cinematicTempUnits = UnitGroupEmpty();
    TriggerExecute(gt_IntroHydrasSetup, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(199), 0.0, -1, 10.0, true);
    TriggerExecute(gt_IntroSpawnShuttle, true, false);
    TriggerExecute(gt_IntroMusic, true, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicInTransmission);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Expedition022|Line00002", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(333), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(336), (SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Expedition022|Line00001", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Expedition022|Line00003", true), c_soundIndexAny)) - 1), -1, 10.0, true);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 75.0, 1.0);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zBriefing_Expedition022|Line00001", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zBriefing_Expedition022|Line00003", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Expedition022|Line00004", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zBriefing_Expedition022|Line00005", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 3.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(334), 4.0, -1, 10.0, true);
    TriggerExecute(gt_IntroHydrasAttack, true, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 40.0, 1.0);
    Wait(1.0, c_timeGame);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zBriefing_Expedition022|Line00010", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zBriefing_Expedition022|Line00014", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition02|Line00149", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zBriefing_Expedition022|Line00012", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    while (!((UnitIsAlive(gv_introShuttle) == false))) {
        Wait(0.1, c_timeGame);
    }
    Wait(2.0, c_timeReal);
    TransmissionWait(TransmissionLastSent(), 0.0);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto3C2B5271_g;
    int auto3C2B5271_u;
    unit auto3C2B5271_var;
    unitgroup autoEA6FEB41_g;
    int autoEA6FEB41_u;
    unit autoEA6FEB41_var;
    int auto4F4DDCA7_ae;
    int auto4F4DDCA7_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_IntroSpawnShuttle);
    TriggerStop(gt_IntroHydrasAttack);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(153)), c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    if ((gv_introMusicCompleted == false)) {
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    }

    auto3C2B5271_g = gv_cinematicTempUnits;
    auto3C2B5271_u = UnitGroupCount(auto3C2B5271_g, c_unitCountAll);
    for (;; auto3C2B5271_u -= 1) {
        auto3C2B5271_var = UnitGroupUnitFromEnd(auto3C2B5271_g, auto3C2B5271_u);
        if (auto3C2B5271_var == null) { break; }
        UnitRemove(auto3C2B5271_var);
    }
    autoEA6FEB41_g = gv_cinematicHiddenUnits;
    autoEA6FEB41_u = UnitGroupCount(autoEA6FEB41_g, c_unitCountAll);
    for (;; autoEA6FEB41_u -= 1) {
        autoEA6FEB41_var = UnitGroupUnitFromEnd(autoEA6FEB41_g, autoEA6FEB41_u);
        if (autoEA6FEB41_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoEA6FEB41_var, true);
    }
    UnitPauseAll(false);
    UnitIssueOrder(gv_kerrigan, OrderTargetingUnit(AbilityCommand("move", 4), UnitFromId(143)), c_orderQueueReplace);
    UnitSetFacing(gv_kerrigan, PointGetFacing(PointFromId(229)), 0.0);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    auto4F4DDCA7_ae = gv_introSoundCount;
    auto4F4DDCA7_var = 1;
    for ( ; auto4F4DDCA7_var <= auto4F4DDCA7_ae; auto4F4DDCA7_var += 1 ) {
        SoundStop(gv_introSounds[auto4F4DDCA7_var], true);
    }
    libSwaC_gf_EnableDisableZerglingRespawn(true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    TriggerExecute(gt_StartAI, true, false);
    TriggerExecute(gt_ActivateWarpConduitLeft, true, false);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PointFromId(346), lv_fadeDuration);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gv_inCinematic = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Spawn Shuttle
//--------------------------------------------------------------------------------------------------
bool gt_IntroSpawnShuttle_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(153)), c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(1.3, c_timeGame);
    libNtve_gf_UnitCreateFacingPoint(1, gv_evacShuttleType, c_unitCreateIgnorePlacement, gv_pLAYER_02_SHUTTLE_BLUE, UnitGetPosition(UnitFromId(153)), UnitGetPosition(UnitFromId(1041)));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth", 0, c_animTimeDefault);
    Wait(0.1, c_timeGame);
    libNtve_gf_ShowHideUnit(UnitLastCreated(), true);
    Wait(1.9, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(153)), c_animNameDefault, "Stand Work A", c_animFlagPlayForever, c_animTimeDefault);
    Wait(1.0, c_timeGame);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(36)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSpawnShuttle_Init () {
    gt_IntroSpawnShuttle = TriggerCreate("gt_IntroSpawnShuttle_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Hydras Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroHydrasSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto5D48BC82_g;
    int auto5D48BC82_u;
    unit auto5D48BC82_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ActivateDeactivateWarpConduit(UnitFromId(1041), ge_JumpGateState_Activate);
    libSwaC_gf_CreateHero2(PointFromId(72), gv_pLAYER_01_USER, libSwaC_ge_HeroUnit_Kerrigan, 270.0, 0, libSwaC_ge_KerriganCreatePurpose_Cinematic);
    gv_introKerrigan = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, gv_introKerrigan);
    UnitSetState(gv_introKerrigan, c_unitStateFidget, false);
    UnitCreate(1, "Hydralisk", 0, gv_pLAYER_01_USER, PointFromId(86), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_introHydras, UnitLastCreated());
    UnitCreate(1, "Hydralisk", 0, gv_pLAYER_01_USER, PointFromId(425), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_introHydras, UnitLastCreated());
    UnitCreate(1, "Hydralisk", 0, gv_pLAYER_01_USER, PointFromId(691), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_introHydras, UnitLastCreated());
    gv_introHydra3 = UnitLastCreated();
    auto5D48BC82_g = gv_introHydras;
    auto5D48BC82_u = UnitGroupCount(auto5D48BC82_g, c_unitCountAll);
    for (;; auto5D48BC82_u -= 1) {
        auto5D48BC82_var = UnitGroupUnitFromEnd(auto5D48BC82_g, auto5D48BC82_u);
        if (auto5D48BC82_var == null) { break; }
        UnitBehaviorAdd(auto5D48BC82_var, "FlashFreeze", auto5D48BC82_var, 1);
        UnitGroupAdd(gv_cinematicTempUnits, auto5D48BC82_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroHydrasSetup_Init () {
    gt_IntroHydrasSetup = TriggerCreate("gt_IntroHydrasSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Hydras Attack
//--------------------------------------------------------------------------------------------------
bool gt_IntroHydrasAttack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoE0BC5D50_g;
    int autoE0BC5D50_u;
    unit autoE0BC5D50_var;
    unitgroup auto56EBB745_g;
    int auto56EBB745_u;
    unit auto56EBB745_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(gv_introKerrigan, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1239)), c_orderQueueReplace);
    UnitCreate(1, gv_evacShuttleType, 0, gv_pLAYER_02_SHUTTLE_BLUE, PointFromId(183), 225.0);
    gv_introShuttle = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, gv_introShuttle);
    UnitIssueOrder(gv_introShuttle, OrderTargetingUnit(AbilityCommand("move", 0), UnitFromId(1041)), c_orderQueueReplace);
    UnitSetState(gv_introShuttle, c_unitStateInvulnerable, true);
    Wait(5.0, c_timeGame);
    gv_introSoundCount = UnitGroupCount(gv_introHydras, c_unitCountAlive);
    autoE0BC5D50_g = gv_introHydras;
    autoE0BC5D50_u = UnitGroupCount(autoE0BC5D50_g, c_unitCountAll);
    for (;; autoE0BC5D50_u -= 1) {
        autoE0BC5D50_var = UnitGroupUnitFromEnd(autoE0BC5D50_g, autoE0BC5D50_u);
        if (autoE0BC5D50_var == null) { break; }
        SoundPlay(SoundLink("UI_TerranRescueUnit", -1), PlayerGroupAll(), 100.0, 0.0);
        gv_introSoundCount += 1;
        gv_introSounds[gv_introSoundCount] = SoundLastPlayed();
        UnitFlashSelection(autoE0BC5D50_var, 3.0);
        UnitBehaviorRemove(autoE0BC5D50_var, "FlashFreeze", 1);
        Wait(0.3, c_timeGame);
    }
    UnitSetState(UnitLastCreated(), c_unitStateInvulnerable, false);
    libNtve_gf_PauseUnit(UnitFromId(1041), false);
    Wait(1.5, c_timeGame);
    UnitIssueOrder(gv_introKerrigan, OrderTargetingUnit(AbilityCommand("attack", 0), gv_introShuttle), c_orderQueueReplace);
    auto56EBB745_g = gv_introHydras;
    auto56EBB745_u = UnitGroupCount(auto56EBB745_g, c_unitCountAll);
    for (;; auto56EBB745_u -= 1) {
        auto56EBB745_var = UnitGroupUnitFromEnd(auto56EBB745_g, auto56EBB745_u);
        if (auto56EBB745_var == null) { break; }
        if ((auto56EBB745_var != gv_introHydra3)) {
            UnitIssueOrder(auto56EBB745_var, OrderTargetingUnit(AbilityCommand("attack", 0), gv_introShuttle), c_orderQueueReplace);
        }

    }
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(335), 4.0, -1, 10.0, true);
    Wait(0.5, c_timeGame);
    UnitIssueOrder(gv_introHydra3, OrderTargetingUnit(AbilityCommand("attack", 0), gv_introShuttle), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroHydrasAttack_Init () {
    gt_IntroHydrasAttack = TriggerCreate("gt_IntroHydrasAttack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Music
//--------------------------------------------------------------------------------------------------
bool gt_IntroMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_soundtrack = "ZExpedition02MusicIntro";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    gv_introMusicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroMusic_Init () {
    gt_IntroMusic = TriggerCreate("gt_IntroMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoF5355697_g;
    int autoF5355697_u;
    unit autoF5355697_var;
    unitgroup autoEC81C6BA_g;
    int autoEC81C6BA_u;
    unit autoEC81C6BA_var;
    unitgroup auto687F047E_g;
    int auto687F047E_u;
    unit auto687F047E_var;
    unitgroup autoB72C270E_g;
    int autoB72C270E_u;
    unit autoB72C270E_var;
    unitgroup auto334AE351_g;
    int auto334AE351_u;
    unit auto334AE351_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UnitClearSelection(gv_pLAYER_01_USER);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UnitPauseAll(true);
    AITimePause(true);
    gv_victoryHiddenUnitGroup = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure), (1 << (c_targetFilterDead - 32))), 0);
    autoF5355697_g = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(19), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF5355697_u = UnitGroupCount(autoF5355697_g, c_unitCountAll);
    for (;; autoF5355697_u -= 1) {
        autoF5355697_var = UnitGroupUnitFromEnd(autoF5355697_g, autoF5355697_u);
        if (autoF5355697_var == null) { break; }
        if ((UnitGetType(autoF5355697_var) != "CreepTumor") && (UnitGetType(autoF5355697_var) != "CreepTumorBurrowed") && (UnitGetType(autoF5355697_var) != "CreepTumorUsed")) {
            UnitGroupAdd(gv_victoryHiddenUnitGroup, autoF5355697_var);
        }

    }
    autoEC81C6BA_g = gv_victoryHiddenUnitGroup;
    autoEC81C6BA_u = UnitGroupCount(autoEC81C6BA_g, c_unitCountAll);
    for (;; autoEC81C6BA_u -= 1) {
        autoEC81C6BA_var = UnitGroupUnitFromEnd(autoEC81C6BA_g, autoEC81C6BA_u);
        if (autoEC81C6BA_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoEC81C6BA_var, false);
    }
    auto687F047E_g = UnitGroup(null, gv_pLAYER_02_SHUTTLE_BLUE, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto687F047E_u = UnitGroupCount(auto687F047E_g, c_unitCountAll);
    for (;; auto687F047E_u -= 1) {
        auto687F047E_var = UnitGroupUnitFromEnd(auto687F047E_g, auto687F047E_u);
        if (auto687F047E_var == null) { break; }
        if ((auto687F047E_var != UnitFromId(1041))) {
            UnitRemove(auto687F047E_var);
        }

    }
    autoB72C270E_g = UnitGroup(null, gv_pLAYER_03_PROTOSS_GREEN, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB72C270E_u = UnitGroupCount(autoB72C270E_g, c_unitCountAll);
    for (;; autoB72C270E_u -= 1) {
        autoB72C270E_var = UnitGroupUnitFromEnd(autoB72C270E_g, autoB72C270E_u);
        if (autoB72C270E_var == null) { break; }
        UnitRemove(autoB72C270E_var);
    }
    auto334AE351_g = UnitGroup(null, gv_pLAYER_04_PROTOSS_RED, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto334AE351_u = UnitGroupCount(auto334AE351_g, c_unitCountAll);
    for (;; auto334AE351_u -= 1) {
        auto334AE351_var = UnitGroupUnitFromEnd(auto334AE351_g, auto334AE351_u);
        if (auto334AE351_var == null) { break; }
        UnitRemove(auto334AE351_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(186), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(61), 3.0, -1, 10.0, true);
    libSwaC_gf_CreateHero2(PointFromId(692), gv_pLAYER_01_USER, libSwaC_ge_HeroUnit_Kerrigan, PointGetFacing(PointFromId(692)), 0, libSwaC_ge_KerriganCreatePurpose_Cinematic);
    gv_victoryKerrigan = UnitLastCreated();
    UnitSetState(gv_victoryKerrigan, c_unitStateFidget, false);
    UnitBehaviorAdd(gv_victoryKerrigan, "KerriganWalk", gv_victoryKerrigan, 1);
    UnitIssueOrder(gv_victoryKerrigan, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(38)), c_orderQueueReplace);
    TriggerExecute(gt_VictoryZerg, true, false);
    ActorSend(libHots_gf_ActorForUnit(UnitFromId(1041), 1), "Signal Off");
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZExpedition02MusicCutscene_MissionVictory", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_victoryCinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicInTransmission);
    if ((gv_alternateVictory == false)) {
        libSwaC_gf_SendTransmissionCampaign(gv_victoryKerrigan, "zMission_Expedition02|Line00041", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        libSwaC_gf_SendTransmissionCampaign(gv_victoryKerrigan, "zMission_Expedition02|Line00084", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(200), (SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Expedition02|Line00043", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Expedition02|Line00042", true), c_soundIndexAny))), -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition02|Line00042", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_victoryKerrigan, "zMission_Expedition02|Line00043", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_victoryCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuratioin;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_victoryCinematicCompleted == true)) {
        lv_fadeDuratioin = 2.0;
    }
    else {
        lv_fadeDuratioin = 0.5;
    }
    CinematicFade(false, lv_fadeDuratioin, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_VictoryZerg);
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Zerg
//--------------------------------------------------------------------------------------------------
bool gt_VictoryZerg_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_victoryZerg;

    // Automatic Variable Declarations
    const int auto42515511_n = 4;
    int auto42515511_i;
    const int auto73832F4D_n = 16;
    int auto73832F4D_i;
    unitgroup auto0BEACFB8_g;
    int auto0BEACFB8_u;
    unit auto0BEACFB8_var;

    // Variable Initialization
    lv_victoryZerg = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    for (auto42515511_i = 1; auto42515511_i <= auto42515511_n; auto42515511_i += 1) {
        UnitCreate(1, "Hydralisk", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(20)), libNtve_gf_RandomAngle());
        UnitGroupAddUnitGroup(lv_victoryZerg, UnitLastCreatedGroup());
    }
    for (auto73832F4D_i = 1; auto73832F4D_i <= auto73832F4D_n; auto73832F4D_i += 1) {
        UnitCreate(1, "Zergling", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(20)), libNtve_gf_RandomAngle());
        UnitGroupAddUnitGroup(lv_victoryZerg, UnitLastCreatedGroup());
    }
    while (true) {
        auto0BEACFB8_g = lv_victoryZerg;
        auto0BEACFB8_u = UnitGroupCount(auto0BEACFB8_g, c_unitCountAll);
        for (;; auto0BEACFB8_u -= 1) {
            auto0BEACFB8_var = UnitGroupUnitFromEnd(auto0BEACFB8_g, auto0BEACFB8_u);
            if (auto0BEACFB8_var == null) { break; }
            if ((RandomInt(1, 8) == 1)) {
                UnitIssueOrder(auto0BEACFB8_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(20))), c_orderQueueReplace);
            }

        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryZerg_Init () {
    gt_VictoryZerg = TriggerCreate("gt_VictoryZerg_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04MusicSound_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_PlayerIsInCombat_Init();
    gt_PlayerIsInCombatIndicatorDiminish_Init();
    gt_SporeCrawlerRootUsed_Init();
    gt_PrepareKerriganRevive_Init();
    gt_StartGameQ_Init();
    gt_CreateWarpConduitPingLeft_Init();
    gt_CreateAutoSaves_Init();
    gt_ProtossBaseWarningLeftQ_Init();
    gt_ProtossBaseWarningRightQ_Init();
    gt_ShuttleSendWave01_Init();
    gt_ShuttleSendWave02_Init();
    gt_ShuttleSendWave03_Init();
    gt_ShuttleSendWave04_Init();
    gt_ShuttleSendWave05_Init();
    gt_ShuttleSendWave06_Init();
    gt_ShuttleSendWave07_Init();
    gt_ShuttleSendWave08_Init();
    gt_ShuttleEscapeWarning_Init();
    gt_TransmissionEscapeWarningQ_Init();
    gt_EscapingShuttleDestroyed_Init();
    gt_CreateShuttleReticule_Init();
    gt_ShuttleJumpProgressBar_Init();
    gt_ShuttlebecomesCloaked_Init();
    gt_ShuttlebecomesunCloaked_Init();
    gt_CreateWarpConduitPings_Init();
    gt_ActivateWarpConduitLeft_Init();
    gt_ActivateWarpConduitMiddle_Init();
    gt_ActivateWarpConduitRight_Init();
    gt_TransmissionDockingBayDestroyedQ_Init();
    gt_TransmissionShuttleLaunch01Q_Init();
    gt_TransmissionShuttleLaunch02Q_Init();
    gt_TransmissionShuttleLaunch03Q_Init();
    gt_TransmissionShuttleLaunch04Q_Init();
    gt_TransmissionShuttleLaunch05Q_Init();
    gt_TransmissionShuttleLaunch06Q_Init();
    gt_TransmissionShuttleLaunch07Q_Init();
    gt_TransmissionShuttleLaunch08Q_Init();
    gt_TransmissionDefendMiddleQ_Init();
    gt_DiscoverFrozenExpansion_Init();
    gt_RescueFrozenZergUnits_Init();
    gt_RescueFrozenZergExpansion_Init();
    gt_TransmissionFrozenBaseRescuedQ_Init();
    gt_GroundIceCrack01_Init();
    gt_IceWallCollapse01_Init();
    gt_IceWallCollapse02_Init();
    gt_IceWallCollapse03_Init();
    gt_IceWallCollapse04_Init();
    gt_IceWallCollapse05_Init();
    gt_IceWallCollapse06_Init();
    gt_ShowBonusObjectiveProximity_Init();
    gt_BonusObjectiveIntroQ_Init();
    gt_StasisChamberDestroyed_Init();
    gt_TransmissionStasisChamberIntroQ_Init();
    gt_TransmissionStasisChamberDestroyedQ_Init();
    gt_StartAI_Init();
    gt_StartUpgradesNormal_Init();
    gt_StartUpgradesHard_Init();
    gt_AIGiveMinerals_Init();
    gt_AIGiveGas_Init();
    gt_AIShuttleKilledSendAttackWave_Init();
    gt_DisableMiniBaseBullies_Init();
    gt_BonusObjectiveSentryForceFields_Init();
    gt_FirstAttackAndBonusIntro_Init();
    gt_TransmissionFirstAttackQ_Init();
    gt_TransmissionSecondAttackQ_Init();
    gt_DefeatBaseDead_Init();
    gt_DefeatPrimaryObjectiveFailed_Init();
    gt_VictoryDockingBaysDestroyed_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_AchievementNoShuttleSlowdown_Init();
    gt_AchievementDestroyNexusNH_Init();
    gt_AchievementDestroyShuttleBaysH_Init();
    gt_TipMissionHelpQ_Init();
    gt_ObjectiveDestroyAllProtossShuttlesCreate_Init();
    gt_ObjectiveDestroyAllProtossShuttlesUpdate_Init();
    gt_ObjectiveDestroyAllProtossShuttlesComplete_Init();
    gt_ObjectiveDestroyAllProtossShuttlesFailed_Init();
    gt_ObjectiveNoShuttleCanEscapeCreate_Init();
    gt_ObjectiveNoShuttleCanEscapeComplete_Init();
    gt_ObjectiveNoShuttleCanEscapeFailed_Init();
    gt_ObjectiveDestroyStasisChamberCreate_Init();
    gt_ObjectiveDestroyStasisChamberUpdate_Init();
    gt_ObjectiveDestroyStasisChamberComplete_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_IntroSpawnShuttle_Init();
    gt_IntroHydrasSetup_Init();
    gt_IntroHydrasAttack_Init();
    gt_IntroMusic_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
    gt_VictoryZerg_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}
