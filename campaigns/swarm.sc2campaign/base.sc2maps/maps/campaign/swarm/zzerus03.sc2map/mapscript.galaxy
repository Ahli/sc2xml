//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Supreme
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"
include "TriggerLibs/SwarmCampaignLib"
include "TriggerLibs/SwarmCampaignDataHelperLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libHots_InitLib();
    libSwaC_InitLib();
    libSCDH_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_DOMINION = 2;
const int gv_pLAYER_02_DOMINION2 = 3;
const int gv_pLAYER_02_DOMINION22 = 4;
const int gv_pLAYER_02_DOMINION222 = 5;
const int gv_pLAYER_02_DOMINION2222 = 6;
const int gv_sPORE_RAY_MAX_COUNT = 2;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_RECORD_SporeRayPatroller {
    unit lv_sporeRay;
    point[32] lv_patrolRoute;
    int lv_patrolPointCount;
    int lv_currentPatrolPoint;
};

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
playergroup gv_enemyPlayers;
unit gv_kerrigan;
bool gv_gameOver;
bool gv_inCinematic;
unit[16] gv_attackedUnits;
int[16] gv_attackUnitCountdowns;
unitgroup gv_primalZergAttackers;
unitgroup gv_primalZergWanderers;
unitgroup gv_primalCritterAttackers;
unitgroup gv_primalCritterTargets;
gs_RECORD_SporeRayPatroller[16] gv_sporeRayPatrollers;
int gv_lastCreatedSporeRayIndex;
int gv_relicsFound;
int gv_relicsRemainingInArea;
unit gv_yagdra;
revealer gv_yagdraRescueRevealer;
revealer gv_yagdraBossRevealer;
revealer gv_yagdraBossRevealerEnemy;
point[9] gv_yagdraTunnelPoints;
bool gv_yagdraIdle;
bool gv_yagdraAbilityUsed;
bool gv_yagdraEngaged;
unit gv_yagdraHelperUnit;
int gv_eggCounter;
int gv_yagdraPing;
bool gv_firstRoachesRescued;
unitgroup gv_relicGroup;
int gv_psiStrikeTransmission;
bool gv_yagdraRescueKill;
point[64] gv_yagdraFireballPoints;
bool gv_yagdraFirstTunnel;
timer gv_yagdraTimer;
unit gv_kraith;
revealer gv_kraithBossRevealer;
bool gv_kraithIdle;
point[32] gv_kraithRockPoints;
actor[32] gv_kraithRocks;
bool[32] gv_kraithRocksAlive;
int gv_numberOfKraithRocks;
bool gv_kraithEngaged;
bool gv_kraithReinforcements1Rescued;
int gv_kraithPing;
bool gv_kraithChargeFirstTime;
unit gv_dehakaLimb;
timer gv_kraithTimer;
unit gv_slivan;
unitgroup gv_slivanCreepersInitial;
unitgroup gv_slivanMeleeGroup1;
unitgroup gv_slivanMeleeGroup2;
unitgroup gv_pondCreepers1;
unitgroup gv_pondCreepers2;
unitgroup gv_pondCreepers3;
bool gv_waterfallRavasaurIntro;
bool gv_slivanEngaged;
revealer gv_slivanBossRevealer;
unitgroup gv_slivanBossCreepers;
int gv_slivanPing;
unit gv_slivanPathingDummy;
int gv_slivanCreepSpawnIndex;
timer gv_slivanTimer;
bool gv_zurvanEngaged;
unit gv_zurvan;
revealer gv_zurvanBossRevealer;
unit[7] gv_zurvanTentacles;
region[7] gv_zurvanTentacleRegions;
bool[7] gv_zurvanTenctaclesActive;
revealer gv_zurvanBossRevealerEnemy;
unit gv_zurvanLightningBreather;
bool gv_zurvanPhase2;
int gv_zurvanPing;
unit gv_zurvanHelper;
int gv_zurvanAddCount;
int gv_zurvanBanterTimers;
timer gv_zurvanTimer;
fixed gv_kerriganLowestLife;
timer gv_achievementTimedRunTimer;
int gv_objectiveDestroyDominionBase;
int gv_objectiveDestroyDominionBase2;
int gv_objectiveDestroyDominionBase3;
int gv_objectiveDestroyDominionBase22;
unitgroup gv_cinematicTempUnits;
bool gv_introCinematicCompleted;
sound gv_cinematicStinger;
point gv_bossLocation;
point gv_channelLocation;
fixed gv_bossFacing;
bool gv_victoryShotCompleted;
bool gv_victoryShotChanneling;
unit gv_introKraith;
bool gv_introMusicCompleted;
sound gv_introSound1;
sound gv_introSound2;
unit gv_introYagdra;
bool gv_yagdraMusicCompleted;
bool gv_kraithIntroCinematicMoveOccured;
bool gv_kraithMusicCompleted;
int gv_cinematicCreepersSpawned;
bool gv_slivanMusicCompleted;
bool gv_zurvanRangedMoved;
bool gv_zurvanMusicCompleted;
sound gv_zurvanQuakeSound1;
sound gv_zurvanStingerFade;
sound gv_zurvanIntroSound;
sound gv_zurvanQuakeSound2;
sound gv_zurvanRockSound;

void InitGlobals () {
    int init_i;

    gv_enemyPlayers = PlayerGroupEmpty();
    gv_primalZergAttackers = UnitGroupEmpty();
    gv_primalZergWanderers = UnitGroupEmpty();
    gv_primalCritterAttackers = UnitGroupEmpty();
    gv_primalCritterTargets = UnitGroupEmpty();
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_sporeRayPatrollers[init_i].lv_currentPatrolPoint = 1;
    }
    gv_lastCreatedSporeRayIndex = -1;
    gv_relicsRemainingInArea = 2;
    gv_yagdraIdle = true;
    gv_yagdraPing = c_invalidPingId;
    gv_relicGroup = UnitGroupEmpty();
    gv_psiStrikeTransmission = c_invalidTransmissionId;
    gv_yagdraFirstTunnel = true;
    gv_yagdraTimer = TimerCreate();
    gv_kraithIdle = true;
    for (init_i = 0; init_i <= 31; init_i += 1) {
        gv_kraithRocksAlive[init_i] = true;
    }
    gv_kraithPing = c_invalidPingId;
    gv_kraithChargeFirstTime = true;
    gv_kraithTimer = TimerCreate();
    gv_slivanCreepersInitial = UnitGroupEmpty();
    gv_slivanMeleeGroup1 = UnitGroupEmpty();
    gv_slivanMeleeGroup2 = UnitGroupEmpty();
    gv_pondCreepers1 = UnitGroupEmpty();
    gv_pondCreepers2 = UnitGroupEmpty();
    gv_pondCreepers3 = UnitGroupEmpty();
    gv_slivanBossCreepers = UnitGroupEmpty();
    gv_slivanPing = c_invalidPingId;
    gv_slivanTimer = TimerCreate();
    gv_zurvanPing = c_invalidPingId;
    gv_zurvanTimer = TimerCreate();
    gv_kerriganLowestLife = 5000.0;
    gv_achievementTimedRunTimer = TimerCreate();
    gv_objectiveDestroyDominionBase = c_invalidObjectiveId;
    gv_objectiveDestroyDominionBase2 = c_invalidObjectiveId;
    gv_objectiveDestroyDominionBase3 = c_invalidObjectiveId;
    gv_objectiveDestroyDominionBase22 = c_invalidObjectiveId;
    gv_cinematicTempUnits = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_SetAllSoundChannelVolumesforZerus03CinematicSpeech ();
int gf_GetRoachCount (int lp_player);
int gf_GetHydraliskCount (int lp_player);
int gf_GetUltraliskCount (int lp_player);
void gf_FlashCommandforCasteruntilUsed (unit lp_caster, unit lp_target, abilcmd lp_command);
void gf_AddUnittoPrimalZergWanderers (unit lp_unit);
void gf_AddUnittoPrimalZergAttackers (unit lp_unit, point lp_homepoint);
void gf_CreatePrimalEggs (int lp_smallEggs, int lp_bigEggs, region lp_region, int lp_player);
void gf_OrderPrimaltoAttackCritter (unit lp_primal, unit lp_critter);
void gf_TurnSporeRayintoSporeRayPatroller (unit lp_sporeRay);
void gf_AddPatrolPointtoSporeRayPatroller (point lp_patrolPoint);
void gf_SpawnTarPitGuy (point lp_point);
void gf_YagdraMultipleFireballs (point lp_originalTarget);
void gf_BreakUltraliskSpikesinRegion (region lp_region);
void gf_KraithHelperUnitMovement (unit lp_helperUnit, unit lp_targetUnit);
void gf_KraithEarthquake (point lp_crashingChargePoint);
void gf_KraithSpineBarrageTargetingUI (unit lp_helperUnit);
void gf_KraithCrashingChargeTargetingUI (point lp_target);
point gf_FindCrashingChargePoint ();
void gf_SpawnSlivanRavasaur ();
void gf_SlivanBossCreeperSpawnAddBehavior ();
void gf_ZurvanTentacleSlap (int lp_tentacle, bool lp_intelligentTargeting);
void gf_RandomZurvanTentacleSlap ();
void gf_RandomZurvanTentaclePattern ();
void gf_ZurvanAddSpawn ();
void gf_ZurvanLatentEnergy (region lp_region);
void gf_BossVictoryMovement (point lp_bossLocation, point lp_channelLocation);
void gf_BossVictoryMovementZurvan (point lp_bossLocation);
void gf_KraithEarthquakeIntro (point lp_crashingChargePoint);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04MusicSound;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_DEBUGYagdraBoss;
trigger gt_DEBUGKraithBoss;
trigger gt_DEBUGSlivanBoss;
trigger gt_DEBUGZurvanBoss;
trigger gt_StartGameQ;
trigger gt_UnitTakesDamage;
trigger gt_AttackedUnitCountdowns;
trigger gt_PrimalZergAttacks;
trigger gt_PrimalZergWandering;
trigger gt_EggUnitTrained;
trigger gt_ZerusCritterAttacks;
trigger gt_SporeRayPatrols;
trigger gt_InitializeSporeRayPatrols;
trigger gt_XelNagaRelicPickups;
trigger gt_YagdraInit;
trigger gt_LeapingStrikeTipQ;
trigger gt_PsionicShiftTipQ;
trigger gt_PsionicShiftTripwire;
trigger gt_XelNagaRelicIntroQ;
trigger gt_YagdraRescueQ;
trigger gt_MendTipQ;
trigger gt_YagdraRescueCave;
trigger gt_ShowArmyButtonForRescue;
trigger gt_TarPitToughGuyTripwire1;
trigger gt_TarPitToughGuyTripwire2;
trigger gt_TarPitRelicTripwire;
trigger gt_TarPitMegaTripwire;
trigger gt_YagdraFinalAttack;
trigger gt_YagdraReinforcements2;
trigger gt_YagdraReinforcements2Q;
trigger gt_YagdraBossFightController;
trigger gt_YagdraInitFireballPoints;
trigger gt_YagdraFireballQ;
trigger gt_YagdraFirebreathQ;
trigger gt_YagdraTunnelQ;
trigger gt_YagdraIdle;
trigger gt_YagdraAbilityUsed;
trigger gt_YagdraAutosave;
trigger gt_YagdraEggs;
trigger gt_YagdraDies;
trigger gt_KraithInitQ;
trigger gt_KraithReinforcements1;
trigger gt_KraithReinforcements1Q;
trigger gt_InitEggRoom;
trigger gt_EggRoomTripwire12;
trigger gt_EggRoomTripwire34;
trigger gt_EggRoomQ;
trigger gt_BigEggsRelicTripwire;
trigger gt_CaveSpawning1;
trigger gt_CaveSpawning2;
trigger gt_SwitchToLavaAmbience;
trigger gt_SwitchToZerusAmbience;
trigger gt_CliffSpikeTripwire1;
trigger gt_CliffSpikeTripwire2;
trigger gt_KraithReinforcements2;
trigger gt_KraithReinforcements2Q;
trigger gt_PreKraithTripwire;
trigger gt_KraithBossFightController;
trigger gt_KraithSpineBarrageQ;
trigger gt_KraithChargeQ;
trigger gt_KraithIdle;
trigger gt_KraithAdds;
trigger gt_KraithAutosave;
trigger gt_InitKraithPoints;
trigger gt_KraithDies;
trigger gt_SlivanInitQ;
trigger gt_SlivanReinforcements1;
trigger gt_SilvanReinforcements1Q;
trigger gt_SlivanCreepersQ;
trigger gt_SwitchToSwampAmbience;
trigger gt_SlivanCreepersInitial;
trigger gt_WaterfallTripwire;
trigger gt_RavasaurTripwire;
trigger gt_RavasaurIntroQ;
trigger gt_SlivanMeleeTripwire1;
trigger gt_PondSiegeGuys1;
trigger gt_PondSiegeGuys2;
trigger gt_PondSiegeGuys3;
trigger gt_PondCreepers1;
trigger gt_PondCreepers2;
trigger gt_PondCreepers3;
trigger gt_SlivanMeleeTripwire2;
trigger gt_SlivanReinforcements2;
trigger gt_SlivanReinforcements2Q;
trigger gt_SlivanAutosave;
trigger gt_SlivanIntroReveal;
trigger gt_SlivanBossFightController;
trigger gt_SlivanAcidPoolQ;
trigger gt_SlivanAddsQ;
trigger gt_SlivanBossCreepers;
trigger gt_SlivanBossCreeperMovement;
trigger gt_SlivanBossCreeperSpawning;
trigger gt_SlivanPathingDummy;
trigger gt_SlivanDies;
trigger gt_ZurvanAutosave;
trigger gt_ZurvanInitQ;
trigger gt_ZurvanBossFightController;
trigger gt_ZurvanBanterPhase1Q;
trigger gt_ZurvanBanterPhase2Q;
trigger gt_ZurvanTentacleSlam;
trigger gt_ZurvanLightningBreath;
trigger gt_ZurvanAdds;
trigger gt_ZurvanDies;
trigger gt_DefeatKerriganDies;
trigger gt_VictoryZurvanSlain;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_AchievementKill300EnemieswithKerrigan;
trigger gt_AchievementKerriganLifeNH;
trigger gt_AchievementTimedRunH;
trigger gt_KerriganLifeTooLow;
trigger gt_ObjectiveSlayPrimarchsCreate;
trigger gt_ObjectiveSlayPrimarchsComplete;
trigger gt_ObjectiveSurviveCreate;
trigger gt_ObjectiveSurviveComplete;
trigger gt_ObjectiveSurviveFailed;
trigger gt_ObjectiveSlayZurvanCreate;
trigger gt_ObjectiveSlayZurvanComplete;
trigger gt_ObjectiveXelNagaRelicsCreate;
trigger gt_ObjectiveXelNagaRelicsComplete;
trigger gt_TipMissionHelpQ;
trigger gt_YagdraVictoryShot;
trigger gt_KraithVictoryShot;
trigger gt_SlivanVictoryShot;
trigger gt_ZurvanVictoryShot;
trigger gt_ZurvanVictorySpellB;
trigger gt_BossVictoryShotCleanup;
trigger gt_ZurvanVictoryShotCleanup;
trigger gt_ZurvanVictoryExplosions;
trigger gt_VictoryShotMusicYagdra;
trigger gt_VictoryShotMusicKraith;
trigger gt_VictoryShotMusicSlivan;
trigger gt_VictoryShotMusicZurvan;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_IntroSlivanMovement;
trigger gt_IntroSlivanCreeperSpawning;
trigger gt_IntroKraithEffects;
trigger gt_IntroMusic;
trigger gt_YagdraIntroQ;
trigger gt_YagdraIntroSetup;
trigger gt_YagdraIntroCinematic;
trigger gt_YagdraIntroCinematicEnd;
trigger gt_YagdraIntroCleanupNotSkipped;
trigger gt_YagdraIntroCleanupSkipped;
trigger gt_YagdraMusic;
trigger gt_KraithIntroQ;
trigger gt_KraithIntroSetup;
trigger gt_KraithIntroCinematic;
trigger gt_KraithIntroCinematicEnd;
trigger gt_KraithIntroCleanupNotSkipped;
trigger gt_KraithIntroCleanupSkipped;
trigger gt_KraithMusic;
trigger gt_SlivanIntroQ;
trigger gt_SlivanIntroSetup;
trigger gt_SlivanIntroCinematic;
trigger gt_SlivanIntroCinematicEnd;
trigger gt_SlivanIntroCleanupNotSkipped;
trigger gt_SlivanIntroCleanupSkipped;
trigger gt_SlivanIntroAnimations;
trigger gt_SlivanMusic;
trigger gt_ZurvanIntroQ;
trigger gt_ZurvanIntroSetup;
trigger gt_ZurvanIntroCinematic;
trigger gt_ZurvanIntroCinematicEnd;
trigger gt_ZurvanIntroCleanupNotSkipped;
trigger gt_ZurvanIntroCleanupSkipped;
trigger gt_ZurvanIntroMusic;
trigger gt_ZurvanReinforcements;
trigger gt_VictoryQ;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_SetAllSoundChannelVolumesforZerus03CinematicSpeech () {
    // Automatic Variable Declarations
    // Implementation
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 100.0, 0.1);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 100.0, 0.1);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 25.0, 0.1);
}

int gf_GetRoachCount (int lp_player) {
    // Variable Declarations
    int lv_count;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_count += UnitGroupCount(UnitGroup("PrimalRoach", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    lv_count += UnitGroupCount(UnitGroup("PrimalRoachBurrowed", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    return lv_count;
}

int gf_GetHydraliskCount (int lp_player) {
    // Variable Declarations
    int lv_count;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_count += UnitGroupCount(UnitGroup("PrimalHydralisk", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    lv_count += UnitGroupCount(UnitGroup("PrimalHydraliskBurrowed", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    return lv_count;
}

int gf_GetUltraliskCount (int lp_player) {
    // Variable Declarations
    int lv_count;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_count += UnitGroupCount(UnitGroup("PrimalUltralisk", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    lv_count += UnitGroupCount(UnitGroup("PrimalUltraliskBurrowed", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    return lv_count;
}

trigger auto_gf_FlashCommandforCasteruntilUsed_Trigger = null;
unit auto_gf_FlashCommandforCasteruntilUsed_lp_caster;
unit auto_gf_FlashCommandforCasteruntilUsed_lp_target;
abilcmd auto_gf_FlashCommandforCasteruntilUsed_lp_command;

void gf_FlashCommandforCasteruntilUsed (unit lp_caster, unit lp_target, abilcmd lp_command) {
    auto_gf_FlashCommandforCasteruntilUsed_lp_caster = lp_caster;
    auto_gf_FlashCommandforCasteruntilUsed_lp_target = lp_target;
    auto_gf_FlashCommandforCasteruntilUsed_lp_command = lp_command;

    if (auto_gf_FlashCommandforCasteruntilUsed_Trigger == null) {
        auto_gf_FlashCommandforCasteruntilUsed_Trigger = TriggerCreate("auto_gf_FlashCommandforCasteruntilUsed_TriggerFunc");
    }

    TriggerExecute(auto_gf_FlashCommandforCasteruntilUsed_Trigger, false, false);
}

bool auto_gf_FlashCommandforCasteruntilUsed_TriggerFunc (bool testConds, bool runActions) {
    unit lp_caster = auto_gf_FlashCommandforCasteruntilUsed_lp_caster;
    unit lp_target = auto_gf_FlashCommandforCasteruntilUsed_lp_target;
    abilcmd lp_command = auto_gf_FlashCommandforCasteruntilUsed_lp_command;

    // Variable Declarations
    actor lv_indicator;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((UnitIsAlive(lp_caster) == false) || (UnitIsAlive(lp_target) == false))) {
        return true;
    }

    UISetButtonHighlighted(PlayerGroupAll(), lp_command, true);
    if ((lp_command == AbilityCommand("PrimalHeal", 0))) {
        while (!(((UnitCheckAbilCmdState(lp_caster, lp_command, c_cmdStateCooldown) == true) || (UnitIsAlive(lp_caster) == false)))) {
            Wait(0.1, c_timeGame);
        }
    }
    else {
        while (!(((UnitCheckAbilCmdState(lp_caster, lp_command, c_cmdStateCooldown) == true) || (UnitIsAlive(lp_caster) == false) || (UnitIsAlive(lp_target) == false) || (UnitGetPropertyFixed(lp_target, c_unitPropLife, c_unitPropCurrent) < UnitGetPropertyFixed(lp_target, c_unitPropLifeMax, c_unitPropCurrent))))) {
            Wait(0.1, c_timeGame);
        }
    }
    if ((UnitTestState(lp_target, c_unitStateStunned) == true)) {
        UnitSetState(lp_target, c_unitStateStunned, false);
        UnitBehaviorRemove(lp_target, "GhostHoldFireB", 1);
    }

    UISetButtonHighlighted(PlayerGroupAll(), lp_command, false);
    return true;
}

void gf_AddUnittoPrimalZergWanderers (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    UnitSetCustomValue(lp_unit, 0, PointGetX(UnitGetPosition(lp_unit)));
    UnitSetCustomValue(lp_unit, 1, PointGetY(UnitGetPosition(lp_unit)));
    UnitGroupAdd(gv_primalZergWanderers, lp_unit);
}

void gf_AddUnittoPrimalZergAttackers (unit lp_unit, point lp_homepoint) {
    // Automatic Variable Declarations
    // Implementation
    UnitSetCustomValue(lp_unit, 0, PointGetX(lp_homepoint));
    UnitSetCustomValue(lp_unit, 1, PointGetY(lp_homepoint));
    UnitGroupAdd(gv_primalZergAttackers, lp_unit);
}

trigger auto_gf_CreatePrimalEggs_Trigger = null;
int auto_gf_CreatePrimalEggs_lp_smallEggs;
int auto_gf_CreatePrimalEggs_lp_bigEggs;
region auto_gf_CreatePrimalEggs_lp_region;
int auto_gf_CreatePrimalEggs_lp_player;

void gf_CreatePrimalEggs (int lp_smallEggs, int lp_bigEggs, region lp_region, int lp_player) {
    auto_gf_CreatePrimalEggs_lp_smallEggs = lp_smallEggs;
    auto_gf_CreatePrimalEggs_lp_bigEggs = lp_bigEggs;
    auto_gf_CreatePrimalEggs_lp_region = lp_region;
    auto_gf_CreatePrimalEggs_lp_player = lp_player;

    if (auto_gf_CreatePrimalEggs_Trigger == null) {
        auto_gf_CreatePrimalEggs_Trigger = TriggerCreate("auto_gf_CreatePrimalEggs_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreatePrimalEggs_Trigger, false, false);
}

bool auto_gf_CreatePrimalEggs_TriggerFunc (bool testConds, bool runActions) {
    int lp_smallEggs = auto_gf_CreatePrimalEggs_lp_smallEggs;
    int lp_bigEggs = auto_gf_CreatePrimalEggs_lp_bigEggs;
    region lp_region = auto_gf_CreatePrimalEggs_lp_region;
    int lp_player = auto_gf_CreatePrimalEggs_lp_player;

    // Variable Declarations
    unitgroup lv_delayedHatchBigEggs;
    unitgroup lv_delayedHatchSmallEggs;

    // Automatic Variable Declarations
    int auto81FC8F35_n;
    int auto81FC8F35_i;
    int auto6D9528E7_n;
    int auto6D9528E7_i;
    unitgroup auto95329203_g;
    int auto95329203_u;
    unit auto95329203_var;
    unitgroup auto569F6378_g;
    int auto569F6378_u;
    unit auto569F6378_var;

    // Variable Initialization
    lv_delayedHatchBigEggs = UnitGroupEmpty();
    lv_delayedHatchSmallEggs = UnitGroupEmpty();

    // Implementation
    auto81FC8F35_n = lp_bigEggs;
    for (auto81FC8F35_i = 1; auto81FC8F35_i <= auto81FC8F35_n; auto81FC8F35_i += 1) {
        if ((lp_player == gv_pLAYER_02_DOMINION)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "YagdraEggBig", c_unitCreateIgnorePlacement, lp_player, RegionRandomPoint(lp_region));
            UnitGroupAdd(lv_delayedHatchBigEggs, UnitLastCreated());
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "YagdraEggBig", 0, lp_player, RegionGetCenter(lp_region));
        }
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, libNtve_gf_DifficultyValueFixed(150.0, 150.0, 150.0, 200.0));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
    }
    auto6D9528E7_n = lp_smallEggs;
    for (auto6D9528E7_i = 1; auto6D9528E7_i <= auto6D9528E7_n; auto6D9528E7_i += 1) {
        if ((lp_player == gv_pLAYER_02_DOMINION)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "YagdraEggSmall", c_unitCreateIgnorePlacement, lp_player, RegionRandomPoint(lp_region));
            UnitGroupAdd(lv_delayedHatchSmallEggs, UnitLastCreated());
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "YagdraEggSmall", 0, lp_player, RegionRandomPoint(lp_region));
        }
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, libNtve_gf_DifficultyValueFixed(25.0, 25.0, 45.0, 50.0));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
    }
    Wait(1.0, c_timeAI);
    auto95329203_g = lv_delayedHatchSmallEggs;
    auto95329203_u = UnitGroupCount(auto95329203_g, c_unitCountAll);
    for (;; auto95329203_u -= 1) {
        auto95329203_var = UnitGroupUnitFromEnd(auto95329203_g, auto95329203_u);
        if (auto95329203_var == null) { break; }
        gv_eggCounter += 1;
        if ((gv_eggCounter == libHots_gf_DifficultyValueInt2(6, 6, 6))) {
            gv_eggCounter = 0;
            UnitIssueOrder(auto95329203_var, Order(AbilityCommand("YagdraEggTrain", 1)), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(auto95329203_var, Order(AbilityCommand("YagdraEggTrain", 0)), c_orderQueueReplace);
        }
    }
    auto569F6378_g = lv_delayedHatchBigEggs;
    auto569F6378_u = UnitGroupCount(auto569F6378_g, c_unitCountAll);
    for (;; auto569F6378_u -= 1) {
        auto569F6378_var = UnitGroupUnitFromEnd(auto569F6378_g, auto569F6378_u);
        if (auto569F6378_var == null) { break; }
        UnitIssueOrder(auto569F6378_var, Order(AbilityCommand("YagdraEggTrain", 2)), c_orderQueueReplace);
    }
    return true;
}

trigger auto_gf_OrderPrimaltoAttackCritter_Trigger = null;
unit auto_gf_OrderPrimaltoAttackCritter_lp_primal;
unit auto_gf_OrderPrimaltoAttackCritter_lp_critter;

void gf_OrderPrimaltoAttackCritter (unit lp_primal, unit lp_critter) {
    auto_gf_OrderPrimaltoAttackCritter_lp_primal = lp_primal;
    auto_gf_OrderPrimaltoAttackCritter_lp_critter = lp_critter;

    if (auto_gf_OrderPrimaltoAttackCritter_Trigger == null) {
        auto_gf_OrderPrimaltoAttackCritter_Trigger = TriggerCreate("auto_gf_OrderPrimaltoAttackCritter_TriggerFunc");
    }

    TriggerExecute(auto_gf_OrderPrimaltoAttackCritter_Trigger, false, false);
}

bool auto_gf_OrderPrimaltoAttackCritter_TriggerFunc (bool testConds, bool runActions) {
    unit lp_primal = auto_gf_OrderPrimaltoAttackCritter_lp_primal;
    unit lp_critter = auto_gf_OrderPrimaltoAttackCritter_lp_critter;

    // Variable Declarations
    point lv_idlePosition;
    bool lv_forceLeash;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((UnitIsAlive(lp_primal) == false) || (UnitIsAlive(lp_critter) == false))) {
        return true;
    }

    lv_idlePosition = UnitGetPosition(lp_primal);
    UnitGroupAdd(gv_primalCritterAttackers, lp_primal);
    UnitGroupAdd(gv_primalCritterTargets, lp_critter);
    UnitIssueOrder(lp_primal, OrderTargetingUnit(AbilityCommand("attack", 0), lp_critter), c_orderQueueReplace);
    UnitIssueOrder(lp_primal, OrderTargetingPoint(AbilityCommand("attack", 0), lv_idlePosition), c_orderQueueAddToEnd);
    while (true) {
        Wait(1.0, c_timeAI);
        if ((UnitIsAlive(lp_primal) == false)) {
            UnitGroupRemove(gv_primalCritterTargets, lp_critter);
            return true;
        }

        if (((UnitTestState(lp_primal, c_unitStateIdle) == true) || (UnitOrder(lp_primal, 0) == OrderTargetingUnit(AbilityCommand("attack", 0), lp_critter)) || (UnitOrder(lp_primal, 0) == OrderTargetingPoint(AbilityCommand("attack", 0), lv_idlePosition)) || (UnitOrder(lp_primal, 1) == OrderTargetingPoint(AbilityCommand("attack", 0), lv_idlePosition)))) {
        }
        else {
            UnitGroupRemove(gv_primalCritterTargets, lp_critter);
            UnitGroupRemove(gv_primalCritterAttackers, lp_primal);
            return true;
        }
        if (((UnitIsAlive(lp_critter) == false) || (lv_forceLeash == true) || (DistanceBetweenPoints(UnitGetPosition(lp_critter), UnitGetPosition(lp_primal)) > 7.0))) {
            if ((DistanceBetweenPoints(UnitGetPosition(lp_primal), lv_idlePosition) <= 1.0)) {
                AISetUnitScriptControlled(lp_primal, false);
                UnitGroupRemove(gv_primalCritterAttackers, lp_primal);
                UnitGroupRemove(gv_primalCritterTargets, lp_critter);
                return true;
            }
            else {
                UnitIssueOrder(lp_primal, OrderTargetingPoint(AbilityCommand("attack", 0), lv_idlePosition), c_orderQueueReplace);
            }
        }
        else {
            if ((DistanceBetweenPoints(UnitGetPosition(lp_primal), lv_idlePosition) > 6.0)) {
                lv_forceLeash = true;
                UnitIssueOrder(lp_primal, OrderTargetingPoint(AbilityCommand("attack", 0), lv_idlePosition), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(lp_primal, OrderTargetingUnit(AbilityCommand("attack", 0), lp_critter), c_orderQueueReplace);
                UnitIssueOrder(lp_primal, OrderTargetingPoint(AbilityCommand("attack", 0), lv_idlePosition), c_orderQueueAddToEnd);
            }
        }
    }
    return true;
}

void gf_TurnSporeRayintoSporeRayPatroller (unit lp_sporeRay) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto2C39EA25_ae = gv_sPORE_RAY_MAX_COUNT;
    const int auto2C39EA25_ai = 1;

    // Variable Initialization

    // Implementation
    gv_lastCreatedSporeRayIndex = -1;
    if ((UnitIsAlive(lp_sporeRay) == false)) {
        return ;
    }

    lv_i = 0;
    for ( ; ( (auto2C39EA25_ai >= 0 && lv_i <= auto2C39EA25_ae) || (auto2C39EA25_ai < 0 && lv_i >= auto2C39EA25_ae) ) ; lv_i += auto2C39EA25_ai ) {
        if (((gv_sporeRayPatrollers[lv_i].lv_sporeRay == null) || (UnitIsAlive(gv_sporeRayPatrollers[lv_i].lv_sporeRay) == false))) {
            gv_lastCreatedSporeRayIndex = lv_i;
            break;
        }

    }
    if ((gv_lastCreatedSporeRayIndex == -1)) {
        return ;
    }

    gv_sporeRayPatrollers[gv_lastCreatedSporeRayIndex].lv_sporeRay = lp_sporeRay;
    gv_sporeRayPatrollers[gv_lastCreatedSporeRayIndex].lv_patrolPointCount = 0;
    gv_sporeRayPatrollers[gv_lastCreatedSporeRayIndex].lv_currentPatrolPoint = 1;
    UnitIssueOrder(lp_sporeRay, OrderSetAutoCast(AbilityCommand("CritterFlee", 0), false), c_orderQueueReplace);
    UnitSetPropertyFixed(lp_sporeRay, c_unitPropMovementSpeed, 0.5);
}

void gf_AddPatrolPointtoSporeRayPatroller (point lp_patrolPoint) {
    // Automatic Variable Declarations
    // Implementation
    if (((gv_lastCreatedSporeRayIndex == -1) || (lp_patrolPoint == null))) {
        return ;
    }

    if ((gv_sporeRayPatrollers[gv_lastCreatedSporeRayIndex].lv_patrolPointCount == 31)) {
        return ;
    }
    else {
        gv_sporeRayPatrollers[gv_lastCreatedSporeRayIndex].lv_patrolPointCount += 1;
        gv_sporeRayPatrollers[gv_lastCreatedSporeRayIndex].lv_patrolRoute[gv_sporeRayPatrollers[gv_lastCreatedSporeRayIndex].lv_patrolPointCount] = lp_patrolPoint;
    }
}

trigger auto_gf_SpawnTarPitGuy_Trigger = null;
point auto_gf_SpawnTarPitGuy_lp_point;

void gf_SpawnTarPitGuy (point lp_point) {
    auto_gf_SpawnTarPitGuy_lp_point = lp_point;

    if (auto_gf_SpawnTarPitGuy_Trigger == null) {
        auto_gf_SpawnTarPitGuy_Trigger = TriggerCreate("auto_gf_SpawnTarPitGuy_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpawnTarPitGuy_Trigger, false, false);
}

bool auto_gf_SpawnTarPitGuy_TriggerFunc (bool testConds, bool runActions) {
    point lp_point = auto_gf_SpawnTarPitGuy_lp_point;

    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateModelAtPoint("PrimalLocustFlyingBirthModel", lp_point);
    UnitCreate(1, "PrimalZergling", 0, gv_pLAYER_02_DOMINION, lp_point, libNtve_gf_RandomAngle());
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth", 0, c_animTimeDefault);
    Wait(0.9, c_timeGame);
    libNtve_gf_PauseUnit(UnitLastCreated(), false);
    gf_AddUnittoPrimalZergAttackers(UnitLastCreated(), UnitGetPosition(UnitLastCreated()));
    return true;
}

void gf_YagdraMultipleFireballs (point lp_originalTarget) {
    // Variable Declarations
    int lv_i;
    int lv_b;
    point[64] lv_validPoints;
    int lv_numberOfValidPoints;
    int lv_numberOfFireballs;
    point[8] lv_fireballTargets;
    int lv_randomPoint;

    // Automatic Variable Declarations
    const int auto66F17AA2_ae = 63;
    const int auto66F17AA2_ai = 1;
    int autoC6B36913_ae;
    const int autoC6B36913_ai = 1;
    int autoBED80D9B_ae;
    const int autoBED80D9B_ai = 1;
    int auto97223DA6_ae;
    const int auto97223DA6_ai = 1;

    // Variable Initialization

    // Implementation
    RegionSetCenter(RegionFromId(165), lp_originalTarget);
    lv_i = 1;
    for ( ; ( (auto66F17AA2_ai >= 0 && lv_i <= auto66F17AA2_ae) || (auto66F17AA2_ai < 0 && lv_i >= auto66F17AA2_ae) ) ; lv_i += auto66F17AA2_ai ) {
        if ((RegionContainsPoint(RegionFromId(165), gv_yagdraFireballPoints[lv_i]) == true) && (RegionContainsPoint(RegionCircle(UnitGetPosition(gv_yagdra), 3.0), gv_yagdraFireballPoints[lv_i]) == false) && (RegionContainsPoint(RegionCircle(lp_originalTarget, 3.0), gv_yagdraFireballPoints[lv_i]) == false)) {
            lv_numberOfValidPoints += 1;
            lv_validPoints[lv_numberOfValidPoints] = gv_yagdraFireballPoints[lv_i];
        }

    }
    if ((UnitGetPropertyFixed(gv_yagdra, c_unitPropLifePercent, c_unitPropCurrent) <= 25.0)) {
        lv_numberOfFireballs = 6;
    }
    else {
        if ((UnitGetPropertyFixed(gv_yagdra, c_unitPropLifePercent, c_unitPropCurrent) <= 50.0)) {
            lv_numberOfFireballs = 5;
        }
        else {
            if ((UnitGetPropertyFixed(gv_yagdra, c_unitPropLifePercent, c_unitPropCurrent) <= 75.0)) {
                lv_numberOfFireballs = 4;
            }
            else {
                lv_numberOfFireballs = 3;
            }
        }
    }
    if ((lv_numberOfValidPoints <= lv_numberOfFireballs)) {
        lv_numberOfFireballs = lv_numberOfValidPoints;
    }
    else {
        autoC6B36913_ae = lv_numberOfFireballs;
        lv_i = 1;
        for ( ; ( (autoC6B36913_ai >= 0 && lv_i <= autoC6B36913_ae) || (autoC6B36913_ai < 0 && lv_i >= autoC6B36913_ae) ) ; lv_i += autoC6B36913_ai ) {
            lv_randomPoint = RandomInt(1, lv_numberOfValidPoints);
            lv_fireballTargets[lv_i] = lv_validPoints[lv_randomPoint];
            autoBED80D9B_ae = (lv_numberOfValidPoints - 1);
            lv_b = lv_randomPoint;
            for ( ; ( (autoBED80D9B_ai >= 0 && lv_b <= autoBED80D9B_ae) || (autoBED80D9B_ai < 0 && lv_b >= autoBED80D9B_ae) ) ; lv_b += autoBED80D9B_ai ) {
                lv_validPoints[lv_b] = lv_validPoints[(lv_b + 1)];
            }
            lv_numberOfValidPoints -= 1;
        }
    }
    auto97223DA6_ae = lv_numberOfFireballs;
    lv_i = 1;
    for ( ; ( (auto97223DA6_ai >= 0 && lv_i <= auto97223DA6_ae) || (auto97223DA6_ai < 0 && lv_i >= auto97223DA6_ae) ) ; lv_i += auto97223DA6_ai ) {
        if ((lv_fireballTargets[lv_i] != null)) {
            UnitIssueOrder(gv_yagdra, OrderTargetingPoint(AbilityCommand("YagdraFireballHard", 0), lv_fireballTargets[lv_i]), c_orderQueueReplace);
        }

        Wait(0.1, c_timeAI);
        if ((UnitIsAlive(gv_yagdra) == false)) {
            return ;
        }

    }
    UnitIssueOrder(gv_yagdra, OrderTargetingPoint(AbilityCommand("YagdraFireball", 0), lp_originalTarget), c_orderQueueReplace);
}

void gf_BreakUltraliskSpikesinRegion (region lp_region) {
    // Variable Declarations
    point[16] lv_spikePathingBlockerPoints;
    string[16] lv_spikePathingBlockerTypes;
    int lv_numberOfSpikePathingBlockers;
    int lv_i;

    // Automatic Variable Declarations
    unitgroup auto48258C3B_g;
    int auto48258C3B_u;
    unit auto48258C3B_var;
    unitgroup auto6941FFD1_g;
    int auto6941FFD1_u;
    unit auto6941FFD1_var;
    unitgroup autoB4BFBEB5_g;
    int autoB4BFBEB5_u;
    unit autoB4BFBEB5_var;
    int auto69E37F81_ae;
    const int auto69E37F81_ai = 1;

    // Variable Initialization

    // Implementation
    auto48258C3B_g = UnitGroup("PathingBlocker2x2", 0, lp_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto48258C3B_u = UnitGroupCount(auto48258C3B_g, c_unitCountAll);
    for (;; auto48258C3B_u -= 1) {
        auto48258C3B_var = UnitGroupUnitFromEnd(auto48258C3B_g, auto48258C3B_u);
        if (auto48258C3B_var == null) { break; }
        lv_numberOfSpikePathingBlockers += 1;
        lv_spikePathingBlockerPoints[lv_numberOfSpikePathingBlockers] = UnitGetPosition(auto48258C3B_var);
        lv_spikePathingBlockerTypes[lv_numberOfSpikePathingBlockers] = UnitGetType(auto48258C3B_var);
        UnitRemove(auto48258C3B_var);
    }
    auto6941FFD1_g = UnitGroup("PathingBlocker1x1", 0, lp_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6941FFD1_u = UnitGroupCount(auto6941FFD1_g, c_unitCountAll);
    for (;; auto6941FFD1_u -= 1) {
        auto6941FFD1_var = UnitGroupUnitFromEnd(auto6941FFD1_g, auto6941FFD1_u);
        if (auto6941FFD1_var == null) { break; }
        lv_numberOfSpikePathingBlockers += 1;
        lv_spikePathingBlockerPoints[lv_numberOfSpikePathingBlockers] = UnitGetPosition(auto6941FFD1_var);
        lv_spikePathingBlockerTypes[lv_numberOfSpikePathingBlockers] = UnitGetType(auto6941FFD1_var);
        UnitRemove(auto6941FFD1_var);
    }
    autoB4BFBEB5_g = UnitGroup("PrimalUltralisk", gv_pLAYER_02_DOMINION2, lp_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoB4BFBEB5_u = UnitGroupCount(autoB4BFBEB5_g, c_unitCountAll);
    for (;; autoB4BFBEB5_u -= 1) {
        autoB4BFBEB5_var = UnitGroupUnitFromEnd(autoB4BFBEB5_g, autoB4BFBEB5_u);
        if (autoB4BFBEB5_var == null) { break; }
        libNtve_gf_PauseUnit(autoB4BFBEB5_var, false);
        libNtve_gf_ShowHideUnit(autoB4BFBEB5_var, true);
        gf_AddUnittoPrimalZergAttackers(autoB4BFBEB5_var, PointWithOffsetPolar(UnitGetPosition(autoB4BFBEB5_var), 3.0, UnitGetFacing(autoB4BFBEB5_var)));
        UnitIssueOrder(autoB4BFBEB5_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1311)), c_orderQueueReplace);
    }
    if ((lp_region == RegionFromId(44))) {
        libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(1063)), c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
        libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(1064)), c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
        libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(1065)), c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    }
    else {
        if ((lp_region == RegionFromId(43))) {
            libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(1016)), c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
            libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(1057)), c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
            libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(1058)), c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
            libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(1061)), c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
        }
        else {
            libNtve_gf_KillDoodadsInRegion(lp_region, "CliffSpikesDestructible");
        }
    }
    SoundPlay(SoundLink("Aberration_Unburrow", -1), PlayerGroupAll(), 80.0, 0.0);
    CameraShakeStart(gv_pLAYER_01_USER, c_cameraPositionEye, c_cameraDirectionXYZ, 0.2, 2.0, 100.0, 2.0);
    Wait(2.0, c_timeAI);
    auto69E37F81_ae = lv_numberOfSpikePathingBlockers;
    lv_i = 1;
    for ( ; ( (auto69E37F81_ai >= 0 && lv_i <= auto69E37F81_ae) || (auto69E37F81_ai < 0 && lv_i >= auto69E37F81_ae) ) ; lv_i += auto69E37F81_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_spikePathingBlockerTypes[lv_i], c_unitCreateIgnorePlacement, 0, lv_spikePathingBlockerPoints[lv_i]);
    }
}

trigger auto_gf_KraithHelperUnitMovement_Trigger = null;
unit auto_gf_KraithHelperUnitMovement_lp_helperUnit;
unit auto_gf_KraithHelperUnitMovement_lp_targetUnit;

void gf_KraithHelperUnitMovement (unit lp_helperUnit, unit lp_targetUnit) {
    auto_gf_KraithHelperUnitMovement_lp_helperUnit = lp_helperUnit;
    auto_gf_KraithHelperUnitMovement_lp_targetUnit = lp_targetUnit;

    if (auto_gf_KraithHelperUnitMovement_Trigger == null) {
        auto_gf_KraithHelperUnitMovement_Trigger = TriggerCreate("auto_gf_KraithHelperUnitMovement_TriggerFunc");
    }

    TriggerExecute(auto_gf_KraithHelperUnitMovement_Trigger, false, false);
}

bool auto_gf_KraithHelperUnitMovement_TriggerFunc (bool testConds, bool runActions) {
    unit lp_helperUnit = auto_gf_KraithHelperUnitMovement_lp_helperUnit;
    unit lp_targetUnit = auto_gf_KraithHelperUnitMovement_lp_targetUnit;

    // Variable Declarations
    point lv_initialPoint;
    unit lv_closestTarget;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_initialPoint = UnitGetPosition(lp_targetUnit);
    while (true) {
        if (((libNtve_gf_UnitInRegion(lp_helperUnit, RegionCircle(lv_initialPoint, 3.0)) == true) || (UnitIsAlive(lp_helperUnit) == false) || (UnitIsAlive(gv_kraith) == false) || (gv_gameOver == true) || (gv_inCinematic == true))) {
            break;
        }
        else {
            UnitIssueOrder(lp_helperUnit, OrderTargetingPoint(AbilityCommand("move", 0), lv_initialPoint), c_orderQueueReplace);
        }
        Wait(1.0, c_timeAI);
    }
    while (true) {
        if (((UnitIsAlive(lp_helperUnit) == false) || (UnitIsAlive(gv_kraith) == false) || (gv_gameOver == true) || (gv_inCinematic == true))) {
            break;
        }
        else {
            lv_closestTarget = libNtve_gf_ClosestUnitToPoint(UnitGetPosition(lp_helperUnit), UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(47), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            UnitIssueOrder(lp_helperUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_closestTarget), 1.0, AngleBetweenPoints(UnitGetPosition(gv_kraith), UnitGetPosition(lv_closestTarget)))), c_orderQueueReplace);
        }
        Wait(1.0, c_timeAI);
    }
    UnitRemove(lp_helperUnit);
    return true;
}

trigger auto_gf_KraithEarthquake_Trigger = null;
point auto_gf_KraithEarthquake_lp_crashingChargePoint;

void gf_KraithEarthquake (point lp_crashingChargePoint) {
    auto_gf_KraithEarthquake_lp_crashingChargePoint = lp_crashingChargePoint;

    if (auto_gf_KraithEarthquake_Trigger == null) {
        auto_gf_KraithEarthquake_Trigger = TriggerCreate("auto_gf_KraithEarthquake_TriggerFunc");
    }

    TriggerExecute(auto_gf_KraithEarthquake_Trigger, false, false);
}

bool auto_gf_KraithEarthquake_TriggerFunc (bool testConds, bool runActions) {
    point lp_crashingChargePoint = auto_gf_KraithEarthquake_lp_crashingChargePoint;

    // Variable Declarations
    int lv_i;
    region lv_rockRegion;
    bool lv_rockKilled;

    // Automatic Variable Declarations
    int autoD6EC79AF_ae;
    const int autoD6EC79AF_ai = 1;
    const int autoC6D5C609_n = 12;
    int autoC6D5C609_i;
    const int autoC5A35846_n = 16;
    int autoC5A35846_i;
    const int auto2F22B8E2_n = 6;
    int auto2F22B8E2_i;
    const int auto1E49083F_n = 8;
    int auto1E49083F_i;

    // Variable Initialization

    // Implementation
    CameraShake(gv_pLAYER_01_USER, "Heavy", "Earthquake", 0.25, 0.5, 2.0);
    SoundPlay(SoundLink("Destructible_RockDeath", -1), PlayerGroupAll(), 100.0, 0.0);
    lv_rockRegion = RegionCircle(lp_crashingChargePoint, 2.5);
    autoD6EC79AF_ae = gv_numberOfKraithRocks;
    lv_i = 1;
    for ( ; ( (autoD6EC79AF_ai >= 0 && lv_i <= autoD6EC79AF_ae) || (autoD6EC79AF_ai < 0 && lv_i >= autoD6EC79AF_ae) ) ; lv_i += autoD6EC79AF_ai ) {
        if ((RegionContainsPoint(lv_rockRegion, gv_kraithRockPoints[lv_i]) == true) && (gv_kraithRocksAlive[lv_i] == true)) {
            libNtve_gf_PlayAnimation(gv_kraithRocks[lv_i], c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
            gv_kraithRocksAlive[lv_i] = false;
            lv_rockKilled = true;
        }

    }
    if ((lv_rockKilled == true)) {
        SoundPlay(SoundLink("Aberration_Unburrow", -1), PlayerGroupAll(), 80.0, 0.0);
    }

    RegionSetCenter(RegionFromId(122), PointWithOffsetPolar(lp_crashingChargePoint, 3.0, AngleBetweenPoints(lp_crashingChargePoint, RegionGetCenter(RegionFromId(54)))));
    if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
        if ((UnitGetPropertyFixed(gv_kraith, c_unitPropLifePercent, c_unitPropCurrent) > 15.0)) {
            for (auto1E49083F_i = 1; auto1E49083F_i <= auto1E49083F_n; auto1E49083F_i += 1) {
                PlayerCreateEffectPoint(gv_pLAYER_02_DOMINION2, "KraithFallingRocksPersistent", RegionRandomPoint(RegionFromId(122)));
                Wait(0.1, c_timeAI);
                if ((UnitIsAlive(gv_kraith) == false)) {
                    return true;
                }

            }
        }
        else {
            for (auto2F22B8E2_i = 1; auto2F22B8E2_i <= auto2F22B8E2_n; auto2F22B8E2_i += 1) {
                PlayerCreateEffectPoint(gv_pLAYER_02_DOMINION2, "KraithFallingRocksPersistent", RegionRandomPoint(RegionFromId(122)));
                Wait(0.1, c_timeAI);
                if ((UnitIsAlive(gv_kraith) == false)) {
                    return true;
                }

            }
        }
    }
    else {
        if ((UnitGetPropertyFixed(gv_kraith, c_unitPropLifePercent, c_unitPropCurrent) > 15.0)) {
            for (autoC5A35846_i = 1; autoC5A35846_i <= autoC5A35846_n; autoC5A35846_i += 1) {
                PlayerCreateEffectPoint(gv_pLAYER_02_DOMINION2, "KraithFallingRocksPersistent", RegionRandomPoint(RegionFromId(37)));
                Wait(0.05, c_timeAI);
                if ((UnitIsAlive(gv_kraith) == false)) {
                    return true;
                }

            }
        }
        else {
            for (autoC6D5C609_i = 1; autoC6D5C609_i <= autoC6D5C609_n; autoC6D5C609_i += 1) {
                PlayerCreateEffectPoint(gv_pLAYER_02_DOMINION2, "KraithFallingRocksPersistent", RegionRandomPoint(RegionFromId(37)));
                Wait(0.05, c_timeAI);
                if ((UnitIsAlive(gv_kraith) == false)) {
                    return true;
                }

            }
        }
    }
    return true;
}

trigger auto_gf_KraithSpineBarrageTargetingUI_Trigger = null;
unit auto_gf_KraithSpineBarrageTargetingUI_lp_helperUnit;

void gf_KraithSpineBarrageTargetingUI (unit lp_helperUnit) {
    auto_gf_KraithSpineBarrageTargetingUI_lp_helperUnit = lp_helperUnit;

    if (auto_gf_KraithSpineBarrageTargetingUI_Trigger == null) {
        auto_gf_KraithSpineBarrageTargetingUI_Trigger = TriggerCreate("auto_gf_KraithSpineBarrageTargetingUI_TriggerFunc");
    }

    TriggerExecute(auto_gf_KraithSpineBarrageTargetingUI_Trigger, false, false);
}

bool auto_gf_KraithSpineBarrageTargetingUI_TriggerFunc (bool testConds, bool runActions) {
    unit lp_helperUnit = auto_gf_KraithSpineBarrageTargetingUI_lp_helperUnit;

    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_AttachModelToUnit(lp_helperUnit, "ZergGenericAOECursor", "Ref_Center");
    Wait(3.0, c_timeGame);
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    return true;
}

trigger auto_gf_KraithCrashingChargeTargetingUI_Trigger = null;
point auto_gf_KraithCrashingChargeTargetingUI_lp_target;

void gf_KraithCrashingChargeTargetingUI (point lp_target) {
    auto_gf_KraithCrashingChargeTargetingUI_lp_target = lp_target;

    if (auto_gf_KraithCrashingChargeTargetingUI_Trigger == null) {
        auto_gf_KraithCrashingChargeTargetingUI_Trigger = TriggerCreate("auto_gf_KraithCrashingChargeTargetingUI_TriggerFunc");
    }

    TriggerExecute(auto_gf_KraithCrashingChargeTargetingUI_Trigger, false, false);
}

bool auto_gf_KraithCrashingChargeTargetingUI_TriggerFunc (bool testConds, bool runActions) {
    point lp_target = auto_gf_KraithCrashingChargeTargetingUI_lp_target;

    // Variable Declarations
    actor lv_targetActor;
    point lv_kraithPosition;
    fixed lv_distance;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_kraithPosition = UnitGetPosition(gv_kraith);
    lv_distance = DistanceBetweenPoints(lp_target, lv_kraithPosition);
    if ((lv_distance < 6.0)) {
        libNtve_gf_AttachActorToUnit(gv_kraith, "KraithCrashingChargeIndicator4", "Ref_Origin");
        lv_targetActor = libNtve_gf_ActorLastCreated();
    }
    else {
        if ((lv_distance < 10.0)) {
            libNtve_gf_AttachActorToUnit(gv_kraith, "KraithCrashingChargeIndicator8", "Ref_Origin");
            lv_targetActor = libNtve_gf_ActorLastCreated();
        }
        else {
            if ((lv_distance < 12.0)) {
                libNtve_gf_AttachActorToUnit(gv_kraith, "KraithCrashingChargeIndicator12", "Ref_Origin");
                lv_targetActor = libNtve_gf_ActorLastCreated();
            }
            else {
                libNtve_gf_AttachActorToUnit(gv_kraith, "KraithCrashingChargeIndicator16", "Ref_Origin");
                lv_targetActor = libNtve_gf_ActorLastCreated();
            }
        }
    }
    Wait(2.5, c_timeGame);
    ActorSend(lv_targetActor, "Destroy");
    return true;
}

point gf_FindCrashingChargePoint () {
    // Variable Declarations
    unit lv_randomUnit;
    point lv_crashingChargePoint;
    int lv_increments;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_randomUnit = UnitGroupRandomUnit(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(47), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    lv_crashingChargePoint = UnitGetPosition(lv_randomUnit);
    while (true) {
        if ((lv_increments >= 64)) {
            lv_crashingChargePoint = PointFromId(4623);
            break;
        }

        if ((RegionContainsPoint(RegionFromId(54), lv_crashingChargePoint) == true)) {
            break;
        }
        else {
            lv_crashingChargePoint = PointWithOffsetPolar(lv_crashingChargePoint, 0.25, AngleBetweenPoints(UnitGetPosition(gv_kraith), lv_crashingChargePoint));
            lv_increments += 1;
        }
    }
    return lv_crashingChargePoint;
}

trigger auto_gf_SpawnSlivanRavasaur_Trigger = null;

void gf_SpawnSlivanRavasaur () {
    if (auto_gf_SpawnSlivanRavasaur_Trigger == null) {
        auto_gf_SpawnSlivanRavasaur_Trigger = TriggerCreate("auto_gf_SpawnSlivanRavasaur_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpawnSlivanRavasaur_Trigger, false, false);
}

bool auto_gf_SpawnSlivanRavasaur_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto590DD882_val;

    // Implementation
    auto590DD882_val = RandomInt(1, 3);
    if (auto590DD882_val == 1) {
        libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(3764)), c_animNameDefault, "Cover End", 0, c_animTimeDefault);
        UnitCreate(1, "Ravasaur", 0, gv_pLAYER_02_DOMINION22, PointFromId(3771), 0.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(3772)), c_orderQueueReplace);
        Wait(2.0, c_timeGame);
        gf_AddUnittoPrimalZergAttackers(UnitLastCreated(), UnitGetPosition(UnitLastCreated()));
    }
    else if (auto590DD882_val == 2) {
        libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(3763)), c_animNameDefault, "Cover End", 0, c_animTimeDefault);
        UnitCreate(1, "Ravasaur", 0, gv_pLAYER_02_DOMINION22, PointFromId(3773), 90.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(3774)), c_orderQueueReplace);
        Wait(2.0, c_timeGame);
        gf_AddUnittoPrimalZergAttackers(UnitLastCreated(), UnitGetPosition(UnitLastCreated()));
    }
    else if (auto590DD882_val == 3) {
        libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(3765)), c_animNameDefault, "Cover End", 0, c_animTimeDefault);
        UnitCreate(1, "Ravasaur", 0, gv_pLAYER_02_DOMINION22, PointFromId(3775), 180.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(3776)), c_orderQueueReplace);
        Wait(2.0, c_timeGame);
        gf_AddUnittoPrimalZergAttackers(UnitLastCreated(), UnitGetPosition(UnitLastCreated()));
    }
    else {
    }
    return true;
}

void gf_SlivanBossCreeperSpawnAddBehavior () {
    // Automatic Variable Declarations
    int autoBA9A565A_val;

    // Implementation
    gv_slivanCreepSpawnIndex += 1;
    if ((gv_slivanCreepSpawnIndex >= 12)) {
        gv_slivanCreepSpawnIndex = 0;
    }

    autoBA9A565A_val = gv_slivanCreepSpawnIndex;
    if (autoBA9A565A_val == 0) {
        UnitBehaviorAdd(gv_slivan, "SlivanCreepSpawn00", gv_slivan, 1);
    }
    else if (autoBA9A565A_val == 1) {
        UnitBehaviorAdd(gv_slivan, "SlivanCreepSpawn01", gv_slivan, 1);
    }
    else if (autoBA9A565A_val == 2) {
        UnitBehaviorAdd(gv_slivan, "SlivanCreepSpawn02", gv_slivan, 1);
    }
    else if (autoBA9A565A_val == 3) {
        UnitBehaviorAdd(gv_slivan, "SlivanCreepSpawn03", gv_slivan, 1);
    }
    else if (autoBA9A565A_val == 4) {
        UnitBehaviorAdd(gv_slivan, "SlivanCreepSpawn04", gv_slivan, 1);
    }
    else if (autoBA9A565A_val == 5) {
        UnitBehaviorAdd(gv_slivan, "SlivanCreepSpawn05", gv_slivan, 1);
    }
    else if (autoBA9A565A_val == 6) {
        UnitBehaviorAdd(gv_slivan, "SlivanCreepSpawn06", gv_slivan, 1);
    }
    else if (autoBA9A565A_val == 7) {
        UnitBehaviorAdd(gv_slivan, "SlivanCreepSpawn07", gv_slivan, 1);
    }
    else if (autoBA9A565A_val == 8) {
        UnitBehaviorAdd(gv_slivan, "SlivanCreepSpawn08", gv_slivan, 1);
    }
    else if (autoBA9A565A_val == 9) {
        UnitBehaviorAdd(gv_slivan, "SlivanCreepSpawn09", gv_slivan, 1);
    }
    else if (autoBA9A565A_val == 10) {
        UnitBehaviorAdd(gv_slivan, "SlivanCreepSpawn10", gv_slivan, 1);
    }
    else if (autoBA9A565A_val == 11) {
        UnitBehaviorAdd(gv_slivan, "SlivanCreepSpawn11", gv_slivan, 1);
    }
    else {
    }
}

trigger auto_gf_ZurvanTentacleSlap_Trigger = null;
int auto_gf_ZurvanTentacleSlap_lp_tentacle;
bool auto_gf_ZurvanTentacleSlap_lp_intelligentTargeting;

void gf_ZurvanTentacleSlap (int lp_tentacle, bool lp_intelligentTargeting) {
    auto_gf_ZurvanTentacleSlap_lp_tentacle = lp_tentacle;
    auto_gf_ZurvanTentacleSlap_lp_intelligentTargeting = lp_intelligentTargeting;

    if (auto_gf_ZurvanTentacleSlap_Trigger == null) {
        auto_gf_ZurvanTentacleSlap_Trigger = TriggerCreate("auto_gf_ZurvanTentacleSlap_TriggerFunc");
    }

    TriggerExecute(auto_gf_ZurvanTentacleSlap_Trigger, false, false);
}

bool auto_gf_ZurvanTentacleSlap_TriggerFunc (bool testConds, bool runActions) {
    int lp_tentacle = auto_gf_ZurvanTentacleSlap_lp_tentacle;
    bool lp_intelligentTargeting = auto_gf_ZurvanTentacleSlap_lp_intelligentTargeting;

    // Automatic Variable Declarations
    // Implementation
    if ((gv_zurvanTenctaclesActive[lp_tentacle] == true)) {
        while (!(((gv_zurvanTenctaclesActive[lp_tentacle] == false) || (gv_zurvanPhase2 == true)))) {
            Wait(0.5, c_timeGame);
        }
    }

    if ((gv_zurvanPhase2 == true)) {
        return true;
    }

    gv_zurvanTenctaclesActive[lp_tentacle] = true;
    UnitBehaviorAdd(gv_zurvanTentacles[lp_tentacle], "ZurvanTentacleReady", gv_zurvanTentacles[lp_tentacle], 1);
    Wait(2.0, c_timeGame);
    if ((lp_intelligentTargeting == true) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, gv_zurvanTentacleRegions[lp_tentacle], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) >= 1)) {
        UnitIssueOrder(gv_zurvanTentacles[lp_tentacle], OrderTargetingPoint(AbilityCommand("ZurvanTentacleSlam", 0), UnitGetPosition(UnitGroupClosestToPoint(UnitGroup(null, gv_pLAYER_01_USER, gv_zurvanTentacleRegions[lp_tentacle], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), RegionGetCenter(gv_zurvanTentacleRegions[lp_tentacle])))), c_orderQueueReplace);
    }
    else {
        UnitIssueOrder(gv_zurvanTentacles[lp_tentacle], OrderTargetingPoint(AbilityCommand("ZurvanTentacleSlam", 0), RegionGetCenter(gv_zurvanTentacleRegions[lp_tentacle])), c_orderQueueReplace);
    }
    Wait(5.0, c_timeGame);
    UnitBehaviorRemove(gv_zurvanTentacles[lp_tentacle], "ZurvanTentacleReady", 1);
    Wait(1.0, c_timeGame);
    gv_zurvanTenctaclesActive[lp_tentacle] = false;
    if ((gv_zurvanPhase2 == true)) {
        UnitBehaviorRemove(gv_zurvanTentacles[lp_tentacle], "ZurvanTentacleExtend", 1);
    }

    return true;
}

void gf_RandomZurvanTentacleSlap () {
    // Variable Declarations
    int[7] lv_validTentacles;
    int lv_numberOfValidTentacles;
    int lv_index;
    int lv_randomTentacle;

    // Automatic Variable Declarations
    const int auto77D4C87B_ae = 6;
    const int auto77D4C87B_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (auto77D4C87B_ai >= 0 && lv_index <= auto77D4C87B_ae) || (auto77D4C87B_ai < 0 && lv_index >= auto77D4C87B_ae) ) ; lv_index += auto77D4C87B_ai ) {
        if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, gv_zurvanTentacleRegions[lv_index], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) >= 1)) {
            lv_numberOfValidTentacles += 1;
            lv_validTentacles[lv_numberOfValidTentacles] = lv_index;
        }

    }
    if ((lv_numberOfValidTentacles == 0)) {
        gf_ZurvanAddSpawn();
        return ;
    }

    lv_randomTentacle = RandomInt(1, lv_numberOfValidTentacles);
    gf_ZurvanTentacleSlap(lv_validTentacles[lv_randomTentacle], true);
}

void gf_RandomZurvanTentaclePattern () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int auto2F3E2213_val;

    // Variable Initialization

    // Implementation
    auto2F3E2213_val = RandomInt(libHots_gf_DifficultyValueInt2(1, 1, 1), libHots_gf_DifficultyValueInt2(4, 4, 8));
    if (auto2F3E2213_val == 1) {
        gf_ZurvanTentacleSlap(3, false);
        gf_ZurvanTentacleSlap(4, false);
        Wait(3.0, c_timeAI);
        if ((UnitGetPropertyFixed(gv_zurvan, c_unitPropLifePercent, c_unitPropCurrent) <= 25.0)) {
            return ;
        }

        gf_ZurvanTentacleSlap(2, false);
        gf_ZurvanTentacleSlap(5, false);
        Wait(3.0, c_timeAI);
        gf_ZurvanTentacleSlap(1, false);
        gf_ZurvanTentacleSlap(6, false);
    }
    else if (auto2F3E2213_val == 2) {
        gf_ZurvanTentacleSlap(1, false);
        gf_ZurvanTentacleSlap(2, false);
        gf_ZurvanTentacleSlap(5, false);
        gf_ZurvanTentacleSlap(6, false);
        Wait(5.0, c_timeAI);
        gf_ZurvanTentacleSlap(4, false);
        gf_ZurvanTentacleSlap(3, false);
    }
    else if (auto2F3E2213_val == 3) {
        gf_ZurvanTentacleSlap(1, false);
        gf_ZurvanTentacleSlap(3, false);
        gf_ZurvanTentacleSlap(5, false);
        Wait(5.0, c_timeAI);
        gf_ZurvanTentacleSlap(2, false);
        gf_ZurvanTentacleSlap(4, false);
        gf_ZurvanTentacleSlap(6, false);
    }
    else if (auto2F3E2213_val == 4) {
        gf_ZurvanTentacleSlap(2, false);
        gf_ZurvanTentacleSlap(4, false);
        gf_ZurvanTentacleSlap(6, false);
        Wait(5.0, c_timeAI);
        gf_ZurvanTentacleSlap(1, false);
        gf_ZurvanTentacleSlap(3, false);
        gf_ZurvanTentacleSlap(5, false);
    }
    else if (auto2F3E2213_val == 5) {
        gf_ZurvanTentacleSlap(1, false);
        gf_ZurvanTentacleSlap(3, false);
        gf_ZurvanTentacleSlap(4, false);
        gf_ZurvanTentacleSlap(5, false);
        gf_ZurvanTentacleSlap(6, false);
    }
    else if (auto2F3E2213_val == 6) {
        gf_ZurvanTentacleSlap(1, false);
        gf_ZurvanTentacleSlap(2, false);
        gf_ZurvanTentacleSlap(3, false);
        gf_ZurvanTentacleSlap(4, false);
        gf_ZurvanTentacleSlap(6, false);
    }
    else if (auto2F3E2213_val == 7) {
        gf_ZurvanTentacleSlap(1, false);
        gf_ZurvanTentacleSlap(2, false);
        gf_ZurvanTentacleSlap(3, false);
        gf_ZurvanTentacleSlap(5, false);
        gf_ZurvanTentacleSlap(6, false);
    }
    else if (auto2F3E2213_val == 8) {
        gf_ZurvanTentacleSlap(1, false);
        gf_ZurvanTentacleSlap(2, false);
        gf_ZurvanTentacleSlap(4, false);
        gf_ZurvanTentacleSlap(5, false);
        gf_ZurvanTentacleSlap(6, false);
    }
    else {
    }
}

trigger auto_gf_ZurvanAddSpawn_Trigger = null;

void gf_ZurvanAddSpawn () {
    if (auto_gf_ZurvanAddSpawn_Trigger == null) {
        auto_gf_ZurvanAddSpawn_Trigger = TriggerCreate("auto_gf_ZurvanAddSpawn_TriggerFunc");
    }

    TriggerExecute(auto_gf_ZurvanAddSpawn_Trigger, false, false);
}

bool auto_gf_ZurvanAddSpawn_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto73D0A06F_val;
    int auto7DFAC5C0_n;
    int auto7DFAC5C0_i;
    int autoA7D95412_n;
    int autoA7D95412_i;
    int auto6E565FA6_n;
    int auto6E565FA6_i;

    // Implementation
    auto73D0A06F_val = RandomInt(libNtve_gf_DifficultyValueInt(1, 1, 1, 2), 3);
    if (auto73D0A06F_val == 1) {
        auto7DFAC5C0_n = libNtve_gf_DifficultyValueInt(10, 10, 12, 12);
        for (auto7DFAC5C0_i = 1; auto7DFAC5C0_i <= auto7DFAC5C0_n; auto7DFAC5C0_i += 1) {
            gv_zurvanAddCount += 1;
            if ((gv_zurvanAddCount == libNtve_gf_DifficultyValueInt(4, 4, 4, 3))) {
                gv_zurvanAddCount = 0;
                UnitIssueOrder(gv_zurvan, OrderTargetingPoint(AbilityCommand("ZurvanSpawnPrimalHydralisk", 0), RegionRandomPoint(RegionFromId(157))), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(gv_zurvan, OrderTargetingPoint(AbilityCommand("ZurvanSpawnPrimalZergling", 0), RegionRandomPoint(RegionFromId(157))), c_orderQueueReplace);
            }
            Wait(0.1, c_timeAI);
        }
    }
    else if (auto73D0A06F_val == 2) {
        autoA7D95412_n = libNtve_gf_DifficultyValueInt(10, 10, 12, 12);
        for (autoA7D95412_i = 1; autoA7D95412_i <= autoA7D95412_n; autoA7D95412_i += 1) {
            gv_zurvanAddCount += 1;
            if ((gv_zurvanAddCount == libNtve_gf_DifficultyValueInt(4, 4, 4, 3))) {
                gv_zurvanAddCount = 0;
                UnitIssueOrder(gv_zurvan, OrderTargetingPoint(AbilityCommand("ZurvanSpawnPrimalHydralisk", 0), RegionRandomPoint(RegionFromId(157))), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(gv_zurvan, OrderTargetingPoint(AbilityCommand("ZurvanSpawnPrimalZergling", 0), RegionRandomPoint(RegionFromId(157))), c_orderQueueReplace);
            }
            Wait(0.1, c_timeAI);
        }
    }
    else if (auto73D0A06F_val == 3) {
        UnitIssueOrder(gv_zurvan, OrderTargetingPoint(AbilityCommand("ZurvanSpawnPrimalUltralisk", 0), RegionRandomPoint(RegionFromId(157))), c_orderQueueReplace);
        Wait(0.1, c_timeAI);
        auto6E565FA6_n = libNtve_gf_DifficultyValueInt(1, 1, 2, 2);
        for (auto6E565FA6_i = 1; auto6E565FA6_i <= auto6E565FA6_n; auto6E565FA6_i += 1) {
            UnitIssueOrder(gv_zurvan, OrderTargetingPoint(AbilityCommand("ZurvanSpawnRavasaur", 0), RegionRandomPoint(RegionFromId(157))), c_orderQueueReplace);
            Wait(0.1, c_timeAI);
        }
    }
    else {
    }
    return true;
}

trigger auto_gf_ZurvanLatentEnergy_Trigger = null;
region auto_gf_ZurvanLatentEnergy_lp_region;

void gf_ZurvanLatentEnergy (region lp_region) {
    auto_gf_ZurvanLatentEnergy_lp_region = lp_region;

    if (auto_gf_ZurvanLatentEnergy_Trigger == null) {
        auto_gf_ZurvanLatentEnergy_Trigger = TriggerCreate("auto_gf_ZurvanLatentEnergy_TriggerFunc");
    }

    TriggerExecute(auto_gf_ZurvanLatentEnergy_Trigger, false, false);
}

bool auto_gf_ZurvanLatentEnergy_TriggerFunc (bool testConds, bool runActions) {
    region lp_region = auto_gf_ZurvanLatentEnergy_lp_region;

    // Automatic Variable Declarations
    region autoC8076526_val;

    // Implementation
    Wait(4.0, c_timeAI);
    if ((UnitIsAlive(gv_zurvan) == false)) {
        return true;
    }

    autoC8076526_val = lp_region;
    if (autoC8076526_val == RegionFromId(159)) {
        UnitCreate(1, "ZurvanLatentEnergy", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION222, RegionRandomPoint(RegionFromId(173)), libNtve_gf_RandomAngle());
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Terran, UnitGetPosition(UnitLastCreated()));
        UnitCreate(1, "ZurvanLatentEnergy", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION222, RegionRandomPoint(RegionFromId(174)), libNtve_gf_RandomAngle());
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Terran, UnitGetPosition(UnitLastCreated()));
        UnitCreate(1, "ZurvanLatentEnergy", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION222, RegionRandomPoint(RegionFromId(175)), libNtve_gf_RandomAngle());
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Terran, UnitGetPosition(UnitLastCreated()));
    }
    else if (autoC8076526_val == RegionFromId(161)) {
        UnitCreate(1, "ZurvanLatentEnergy", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION222, RegionRandomPoint(RegionFromId(176)), libNtve_gf_RandomAngle());
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Terran, UnitGetPosition(UnitLastCreated()));
        UnitCreate(1, "ZurvanLatentEnergy", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION222, RegionRandomPoint(RegionFromId(177)), libNtve_gf_RandomAngle());
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Terran, UnitGetPosition(UnitLastCreated()));
        UnitCreate(1, "ZurvanLatentEnergy", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION222, RegionRandomPoint(RegionFromId(178)), libNtve_gf_RandomAngle());
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Terran, UnitGetPosition(UnitLastCreated()));
    }
    else if (autoC8076526_val == RegionFromId(160)) {
        UnitCreate(1, "ZurvanLatentEnergy", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION222, RegionRandomPoint(RegionFromId(179)), libNtve_gf_RandomAngle());
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Terran, UnitGetPosition(UnitLastCreated()));
        UnitCreate(1, "ZurvanLatentEnergy", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION222, RegionRandomPoint(RegionFromId(180)), libNtve_gf_RandomAngle());
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Terran, UnitGetPosition(UnitLastCreated()));
        UnitCreate(1, "ZurvanLatentEnergy", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION222, RegionRandomPoint(RegionFromId(181)), libNtve_gf_RandomAngle());
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Terran, UnitGetPosition(UnitLastCreated()));
    }
    else {
    }
    return true;
}

trigger auto_gf_BossVictoryMovement_Trigger = null;
point auto_gf_BossVictoryMovement_lp_bossLocation;
point auto_gf_BossVictoryMovement_lp_channelLocation;

void gf_BossVictoryMovement (point lp_bossLocation, point lp_channelLocation) {
    auto_gf_BossVictoryMovement_lp_bossLocation = lp_bossLocation;
    auto_gf_BossVictoryMovement_lp_channelLocation = lp_channelLocation;

    if (auto_gf_BossVictoryMovement_Trigger == null) {
        auto_gf_BossVictoryMovement_Trigger = TriggerCreate("auto_gf_BossVictoryMovement_TriggerFunc");
    }

    TriggerExecute(auto_gf_BossVictoryMovement_Trigger, false, false);
}

bool auto_gf_BossVictoryMovement_TriggerFunc (bool testConds, bool runActions) {
    point lp_bossLocation = auto_gf_BossVictoryMovement_lp_bossLocation;
    point lp_channelLocation = auto_gf_BossVictoryMovement_lp_channelLocation;

    // Variable Declarations
    region lv_playableArea;

    // Automatic Variable Declarations
    unitgroup autoE3F00943_g;
    int autoE3F00943_u;
    unit autoE3F00943_var;
    unitgroup auto91679A28_g;
    int auto91679A28_u;
    unit auto91679A28_var;

    // Variable Initialization

    // Implementation
    if ((RegionContainsPoint(RegionFromId(23), lp_bossLocation) == true)) {
        lv_playableArea = RegionFromId(23);
    }

    if ((RegionContainsPoint(RegionFromId(47), lp_bossLocation) == true)) {
        lv_playableArea = RegionFromId(47);
    }

    if ((RegionContainsPoint(RegionFromId(120), lp_bossLocation) == true)) {
        lv_playableArea = RegionFromId(120);
    }

    autoE3F00943_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE3F00943_u = UnitGroupCount(autoE3F00943_g, c_unitCountAll);
    for (;; autoE3F00943_u -= 1) {
        autoE3F00943_var = UnitGroupUnitFromEnd(autoE3F00943_g, autoE3F00943_u);
        if (autoE3F00943_var == null) { break; }
        UnitIssueOrder(autoE3F00943_var, OrderTargetingPoint(AbilityCommand("move", 4), lp_bossLocation), c_orderQueueReplace);
    }
    while (true) {
        UnitIssueOrder(gv_kerrigan, Order(AbilityCommand("K5KerriganUnburrow", 0)), c_orderQueueReplace);
        UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("move", 0), lp_channelLocation), c_orderQueueAddToEnd);
        UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("move", 4), lp_bossLocation), c_orderQueueAddToEnd);
        auto91679A28_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto91679A28_u = UnitGroupCount(auto91679A28_g, c_unitCountAll);
        for (;; auto91679A28_u -= 1) {
            auto91679A28_var = UnitGroupUnitFromEnd(auto91679A28_g, auto91679A28_u);
            if (auto91679A28_var == null) { break; }
            if ((auto91679A28_var != gv_kerrigan)) {
                if (((libNtve_gf_UnitInRegion(auto91679A28_var, RegionCircle(lp_bossLocation, 5.0)) == true) || (libNtve_gf_UnitInRegion(auto91679A28_var, RegionCircle(lp_channelLocation, 5.0)) == true))) {
                    if ((libNtve_gf_UnitInRegion(auto91679A28_var, RegionCircle(RegionGetCenter(lv_playableArea), 8.0)) == true)) {
                        UnitIssueOrder(auto91679A28_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(auto91679A28_var), 5.0, AngleBetweenPoints(Point(((PointGetX(lp_bossLocation) + PointGetX(lp_channelLocation))/2), ((PointGetY(lp_bossLocation) + PointGetY(lp_channelLocation))/2)), UnitGetPosition(auto91679A28_var)))), c_orderQueueReplace);
                        UnitIssueOrder(auto91679A28_var, OrderTargetingPoint(AbilityCommand("move", 4), lp_bossLocation), c_orderQueueAddToEnd);
                    }
                    else {
                        UnitIssueOrder(auto91679A28_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(auto91679A28_var), 5.0, AngleBetweenPoints(UnitGetPosition(auto91679A28_var), RegionGetCenter(lv_playableArea)))), c_orderQueueReplace);
                        UnitIssueOrder(auto91679A28_var, OrderTargetingPoint(AbilityCommand("move", 4), lp_bossLocation), c_orderQueueAddToEnd);
                    }
                }

            }

        }
        Wait(1.0, c_timeGame);
        if (((gv_inCinematic == false) || (gv_gameOver == true) || (gv_victoryShotChanneling == true))) {
            return true;
        }

    }
    return true;
}

trigger auto_gf_BossVictoryMovementZurvan_Trigger = null;
point auto_gf_BossVictoryMovementZurvan_lp_bossLocation;

void gf_BossVictoryMovementZurvan (point lp_bossLocation) {
    auto_gf_BossVictoryMovementZurvan_lp_bossLocation = lp_bossLocation;

    if (auto_gf_BossVictoryMovementZurvan_Trigger == null) {
        auto_gf_BossVictoryMovementZurvan_Trigger = TriggerCreate("auto_gf_BossVictoryMovementZurvan_TriggerFunc");
    }

    TriggerExecute(auto_gf_BossVictoryMovementZurvan_Trigger, false, false);
}

bool auto_gf_BossVictoryMovementZurvan_TriggerFunc (bool testConds, bool runActions) {
    point lp_bossLocation = auto_gf_BossVictoryMovementZurvan_lp_bossLocation;

    // Variable Declarations
    region lv_playableArea;

    // Automatic Variable Declarations
    unitgroup auto8F18AE46_g;
    int auto8F18AE46_u;
    unit auto8F18AE46_var;
    unitgroup auto149A6404_g;
    int auto149A6404_u;
    unit auto149A6404_var;

    // Variable Initialization

    // Implementation
    auto8F18AE46_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8F18AE46_u = UnitGroupCount(auto8F18AE46_g, c_unitCountAll);
    for (;; auto8F18AE46_u -= 1) {
        auto8F18AE46_var = UnitGroupUnitFromEnd(auto8F18AE46_g, auto8F18AE46_u);
        if (auto8F18AE46_var == null) { break; }
        UnitIssueOrder(auto8F18AE46_var, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(4148)), c_orderQueueReplace);
    }
    TriggerExecute(gt_ZurvanVictorySpellB, true, false);
    while (true) {
        auto149A6404_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto149A6404_u = UnitGroupCount(auto149A6404_g, c_unitCountAll);
        for (;; auto149A6404_u -= 1) {
            auto149A6404_var = UnitGroupUnitFromEnd(auto149A6404_g, auto149A6404_u);
            if (auto149A6404_var == null) { break; }
            if ((auto149A6404_var != gv_kerrigan)) {
                if ((libNtve_gf_UnitInRegion(auto149A6404_var, RegionCircle(gv_channelLocation, 5.0)) == true)) {
                    if ((AngleBetweenPoints(gv_channelLocation, UnitGetPosition(auto149A6404_var)) > 90.0) && (AngleBetweenPoints(gv_channelLocation, UnitGetPosition(auto149A6404_var)) <= 270.0)) {
                        UnitIssueOrder(auto149A6404_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(auto149A6404_var), 5.0, 150.0)), c_orderQueueReplace);
                    }
                    else {
                        UnitIssueOrder(auto149A6404_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(auto149A6404_var), 5.0, 30.0)), c_orderQueueReplace);
                    }
                    UnitIssueOrder(auto149A6404_var, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(4148)), c_orderQueueAddToEnd);
                }

            }

        }
        Wait(1.0, c_timeGame);
        if (((gv_inCinematic == false) || (gv_gameOver == true) || (gv_victoryShotChanneling == true))) {
            return true;
        }

    }
    return true;
}

trigger auto_gf_KraithEarthquakeIntro_Trigger = null;
point auto_gf_KraithEarthquakeIntro_lp_crashingChargePoint;

void gf_KraithEarthquakeIntro (point lp_crashingChargePoint) {
    auto_gf_KraithEarthquakeIntro_lp_crashingChargePoint = lp_crashingChargePoint;

    if (auto_gf_KraithEarthquakeIntro_Trigger == null) {
        auto_gf_KraithEarthquakeIntro_Trigger = TriggerCreate("auto_gf_KraithEarthquakeIntro_TriggerFunc");
    }

    TriggerExecute(auto_gf_KraithEarthquakeIntro_Trigger, false, false);
}

bool auto_gf_KraithEarthquakeIntro_TriggerFunc (bool testConds, bool runActions) {
    point lp_crashingChargePoint = auto_gf_KraithEarthquakeIntro_lp_crashingChargePoint;

    // Variable Declarations
    int lv_i;
    region lv_rockRegion;
    bool lv_rockKilled;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    CameraShake(gv_pLAYER_01_USER, "Heavy", "Earthquake", 0.25, 0.5, 2.0);
    SoundPlay(SoundLink("Destructible_RockDeath", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introSound1 = SoundLastPlayed();
    lv_rockRegion = RegionCircle(lp_crashingChargePoint, 2.0);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(1050)), c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    gv_kraithRocksAlive[2] = false;
    SoundPlay(SoundLink("Aberration_Unburrow", -1), PlayerGroupAll(), 80.0, 0.0);
    gv_introSound2 = SoundLastPlayed();
    return true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_ULoadCampaignData("ZZerus3");
    TriggerExecute(gt_Init01Technology, true, true);
    libSwaC_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03Units, true, true);
    TriggerExecute(gt_Init04MusicSound, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulties, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    TriggerExecute(gt_IntroQ, true, true);
    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("PsiStrikeWalk", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("PrimalSlash", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("PrimalHeal", 0), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_visionGroup01;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_visionGroup01 = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    UISetResourceVisible(PlayerGroupAll(), c_resourceTypeMinerals, false);
    UISetResourceVisible(PlayerGroupAll(), c_resourceTypeVespene, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeIdleWorkerButton, false);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackUnitAlly", false);
    PlayerGroupAdd(gv_enemyPlayers, gv_pLAYER_02_DOMINION);
    PlayerGroupAdd(gv_enemyPlayers, gv_pLAYER_02_DOMINION2);
    PlayerGroupAdd(gv_enemyPlayers, gv_pLAYER_02_DOMINION22);
    PlayerGroupAdd(gv_enemyPlayers, gv_pLAYER_02_DOMINION222);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION2, gv_pLAYER_02_DOMINION222, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION2222, libNtve_ge_AllianceSetting_Neutral);
    PlayerSetState(gv_pLAYER_02_DOMINION, c_playerStateFoodIgnored, true);
    PlayerSetState(gv_pLAYER_02_DOMINION2, c_playerStateFoodIgnored, true);
    PlayerSetState(gv_pLAYER_02_DOMINION22, c_playerStateFoodIgnored, true);
    PlayerSetState(gv_pLAYER_02_DOMINION222, c_playerStateFoodIgnored, true);
    PlayerGroupAdd(lv_visionGroup01, gv_pLAYER_02_DOMINION);
    PlayerGroupAdd(lv_visionGroup01, gv_pLAYER_02_DOMINION2);
    PlayerGroupAdd(lv_visionGroup01, gv_pLAYER_02_DOMINION22);
    PlayerGroupAdd(lv_visionGroup01, gv_pLAYER_02_DOMINION222);
    PlayerGroupAdd(lv_visionGroup01, gv_pLAYER_02_DOMINION2222);
    libSwaC_gf_ShareVisionAmongPlayers(lv_visionGroup01);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto70E4FFE8_g;
    int auto70E4FFE8_u;
    unit auto70E4FFE8_var;
    unitgroup auto577FEBC9_g;
    int auto577FEBC9_u;
    unit auto577FEBC9_var;
    unitgroup auto3C40935B_g;
    int auto3C40935B_u;
    unit auto3C40935B_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_CreateHero2(PointFromId(3), gv_pLAYER_01_USER, libSwaC_ge_HeroUnit_Kerrigan, PointGetFacing(PointFromId(3)), 0, libSwaC_ge_KerriganCreatePurpose_GamePlay);
    gv_kerrigan = UnitLastCreated();
    libSwaC_gf_SetHeroPanelUnit(1, UnitLastCreated());
    UnitControlGroupAddUnit(gv_pLAYER_01_USER, 1, gv_kerrigan);
    UnitAbilityShow(gv_kerrigan, "PrimalSlash", false);
    UnitAbilityShow(gv_kerrigan, "PsiStrikeWalk", false);
    UnitAbilityShow(gv_kerrigan, "PrimalHeal", false);
    libSwaC_gf_EnableDisableZerglingRespawn(false);
    auto70E4FFE8_g = UnitGroup("PickupChronoRiftChargeSwarm", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto70E4FFE8_u = UnitGroupCount(auto70E4FFE8_g, c_unitCountAll);
    for (;; auto70E4FFE8_u -= 1) {
        auto70E4FFE8_var = UnitGroupUnitFromEnd(auto70E4FFE8_g, auto70E4FFE8_u);
        if (auto70E4FFE8_var == null) { break; }
        libSwaC_gf_SetUnitInfoTextCampaign(auto70E4FFE8_var, null, StringExternal("Param/Value/E4B5AD80"), null);
    }
    auto577FEBC9_g = UnitGroup("ZerusAlienTreeViper", gv_pLAYER_02_DOMINION22, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto577FEBC9_u = UnitGroupCount(auto577FEBC9_g, c_unitCountAll);
    for (;; auto577FEBC9_u -= 1) {
        auto577FEBC9_var = UnitGroupUnitFromEnd(auto577FEBC9_g, auto577FEBC9_u);
        if (auto577FEBC9_var == null) { break; }
        libSwaC_gf_SetUnitInfoTextCampaign(auto577FEBC9_var, null, StringExternal("Param/Value/402D70E9"), null);
    }
    gv_yagdra = UnitFromId(452);
    gv_kraith = UnitFromId(453);
    gv_slivan = UnitFromId(446);
    gv_zurvan = UnitFromId(3484);
    auto3C40935B_g = UnitGroup("ZurvanTentacle", gv_pLAYER_02_DOMINION222, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3C40935B_u = UnitGroupCount(auto3C40935B_g, c_unitCountAll);
    for (;; auto3C40935B_u -= 1) {
        auto3C40935B_var = UnitGroupUnitFromEnd(auto3C40935B_g, auto3C40935B_u);
        if (auto3C40935B_var == null) { break; }
        UnitSetState(auto3C40935B_var, c_unitStateTooltipable, false);
        UnitSetState(auto3C40935B_var, c_unitStateSelectable, false);
        UnitSetState(auto3C40935B_var, c_unitStateTargetable, false);
        UnitSetState(auto3C40935B_var, c_unitStateStatusBar, false);
        UnitSetState(auto3C40935B_var, c_unitStateInvulnerable, true);
    }
    UnitCreate(1, "SlivanCollisionDummy", 0, gv_pLAYER_02_DOMINION22, UnitGetPosition(gv_slivan), 270.0);
    UnitSetState(UnitLastCreated(), c_unitStateTooltipable, false);
    gv_slivanPathingDummy = UnitLastCreated();
    libSwaC_gf_SetUnitInfoTextCampaign(gv_yagdra, null, StringExternal("Param/Value/C1432651"), null);
    libSwaC_gf_SetUnitInfoTextCampaign(gv_kraith, null, StringExternal("Param/Value/115B533F"), null);
    libSwaC_gf_SetUnitInfoTextCampaign(gv_slivan, null, StringExternal("Param/Value/F9AF7107"), null);
    libSwaC_gf_SetUnitInfoTextCampaign(gv_zurvan, null, StringExternal("Param/Value/47A48363"), null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init04MusicSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_ZerusLava", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZZerus03MusicMain", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04MusicSound_Init () {
    gt_Init04MusicSound = TriggerCreate("gt_Init04MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto72C2425D_g;
    int auto72C2425D_u;
    unit auto72C2425D_var;
    unitgroup autoB98F7508_g;
    int autoB98F7508_u;
    unit autoB98F7508_var;

    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    libLbty_gf_AutoRevealRegion(RegionFromId(18), RegionFromId(18), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(15), RegionFromId(15), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(60), RegionFromId(60), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(13), RegionFromId(12), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(7), RegionFromId(7), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(26), RegionFromId(26), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(58), RegionFromId(58), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(162), RegionFromId(162), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(20), RegionFromId(25), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(59), RegionFromId(59), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(38), RegionFromId(38), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(39), RegionFromId(39), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(28), RegionFromId(28), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(130), RegionFromId(130), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(29), RegionFromId(29), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(46), RegionFromId(46), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(45), RegionFromId(45), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(89), RegionFromId(89), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(47), RegionFromId(47), gv_pLAYER_02_DOMINION2);
    libLbty_gf_AutoRevealRegion(RegionFromId(72), RegionFromId(72), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(73), RegionFromId(73), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(80), RegionFromId(79), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(129), RegionFromId(129), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(102), RegionFromId(102), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(103), RegionFromId(103), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(104), RegionFromId(104), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(105), RegionFromId(105), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(109), RegionFromId(109), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(106), RegionFromId(107), gv_pLAYER_01_USER);
    auto72C2425D_g = UnitGroup("ZerusDestructibleArch", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto72C2425D_u = UnitGroupCount(auto72C2425D_g, c_unitCountAll);
    for (;; auto72C2425D_u -= 1) {
        auto72C2425D_var = UnitGroupUnitFromEnd(auto72C2425D_g, auto72C2425D_u);
        if (auto72C2425D_var == null) { break; }
        UnitSetState(auto72C2425D_var, c_unitStateTooltipable, false);
    }
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "CharRibs", c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(2657)), c_animNameDefault, "Stand Morph", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(1815)), c_animNameDefault, "Stand Morph", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(3380)), c_animNameDefault, "Stand Morph", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(3366)), c_animNameDefault, "Stand Morph", c_animFlagPlayForever, c_animTimeDefault);
    UnitSetState(UnitFromId(2047), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(2047), c_unitStateTooltipable, false);
    UnitSetState(UnitFromId(2047), c_unitStateCursorable, false);
    UnitSetState(UnitFromId(2047), c_unitStateStatusBar, false);
    ActorSend(ActorFromDoodad(DoodadFromId(1312)), "SetVisibility");
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(1312)), c_animNameDefault, "Stand Cover", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    ActorSend(ActorFromDoodad(DoodadFromId(1306)), "SetVisibility");
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(1306)), c_animNameDefault, "Stand Cover", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    autoB98F7508_g = UnitGroup(null, 0, RegionFromId(120), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB98F7508_u = UnitGroupCount(autoB98F7508_g, c_unitCountAll);
    for (;; autoB98F7508_u -= 1) {
        autoB98F7508_var = UnitGroupUnitFromEnd(autoB98F7508_g, autoB98F7508_u);
        if (autoB98F7508_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoB98F7508_var, false);
    }
    libNtve_gf_ShowHideUnit(UnitFromId(4700), true);
    libNtve_gf_ShowHideUnit(UnitFromId(4701), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoFBE48AC2_g;
    int autoFBE48AC2_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        autoFBE48AC2_g = gv_enemyPlayers;
        autoFBE48AC2_var = -1;
        while (true) {
            autoFBE48AC2_var = PlayerGroupNextPlayer(autoFBE48AC2_g, autoFBE48AC2_var);
            if (autoFBE48AC2_var < 0) { break; }
            TechTreeUpgradeAddLevel(autoFBE48AC2_var, "ZergMeleeWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(autoFBE48AC2_var, "ZergMissileWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(autoFBE48AC2_var, "ZergFlyerWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(autoFBE48AC2_var, "ZergGroundArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(autoFBE48AC2_var, "ZergFlyerArmorsLevel1", 1);
        }
    }

    UnitSetPropertyFixed(gv_yagdra, c_unitPropLifeMax, libNtve_gf_DifficultyValueFixed(2500.0, 2500.0, 3500.0, 4500.0));
    UnitSetPropertyFixed(gv_yagdra, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_kraith, c_unitPropLifeMax, libNtve_gf_DifficultyValueFixed(3500.0, 3500.0, 4500.0, 6000.0));
    UnitSetPropertyFixed(gv_kraith, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_slivan, c_unitPropLifeMax, libNtve_gf_DifficultyValueFixed(2500.0, 2500.0, 3500.0, 4000.0));
    UnitSetPropertyFixed(gv_slivan, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_zurvan, c_unitPropLifeMax, libNtve_gf_DifficultyValueFixed(6000.0, 6000.0, 7500.0, 9000.0));
    UnitSetPropertyFixed(gv_zurvan, c_unitPropLifePercent, 100.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_AddMissionTipUserData("Primal Queen of Blades");
    libSwaC_gf_AddMissionTipUserData("Leaping Strike");
    libSwaC_gf_AddMissionTipUserData("Mend (Zerus03)");
    libSwaC_gf_AddMissionTipUserData("Psi-Strike");
    libSwaC_gf_AddMissionTipUserData("Yagdra");
    libSwaC_gf_AddMissionTipUserData("Kraith");
    libSwaC_gf_AddMissionTipUserData("Slivan");
    libSwaC_gf_AddMissionTipUserData("Final Boss");
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("PrimalZergling", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("PrimalRoach", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("PrimalHydralisk", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("PrimalUltralisk", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Ravasaur", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Yagdra", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Kraith", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Slivan", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("SlivanCreep", false, gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Yagdra Boss
//--------------------------------------------------------------------------------------------------
bool gt_DEBUGYagdraBoss_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_friendlyRoaches;

    // Automatic Variable Declarations
    unitgroup autoE94C6FA4_g;
    int autoE94C6FA4_u;
    unit autoE94C6FA4_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(gt_YagdraIntroQ) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoE94C6FA4_g = UnitGroup(null, gv_pLAYER_02_DOMINION2222, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE94C6FA4_u = UnitGroupCount(autoE94C6FA4_g, c_unitCountAll);
    for (;; autoE94C6FA4_u -= 1) {
        autoE94C6FA4_var = UnitGroupUnitFromEnd(autoE94C6FA4_g, autoE94C6FA4_u);
        if (autoE94C6FA4_var == null) { break; }
        UnitRemove(autoE94C6FA4_var);
    }
    UnitKill(UnitFromId(3010));
    UnitKill(UnitFromId(305));
    lv_friendlyRoaches = gf_GetRoachCount(gv_pLAYER_01_USER);
    if ((lv_friendlyRoaches >= 6)) {
    }
    else {
        libNtve_gf_CreateUnitsAtPoint2((6 - lv_friendlyRoaches), "PrimalRoach", 0, gv_pLAYER_01_USER, UnitGetPosition(gv_kerrigan));
    }
    UnitAbilityShow(gv_kerrigan, "PsiStrikeWalk", true);
    UnitAbilityShow(gv_kerrigan, "PrimalSlash", true);
    UnitAbilityShow(gv_kerrigan, "PrimalHeal", true);
    TriggerStop(gt_MendTipQ);
    TriggerExecute(gt_YagdraIntroQ, false, false);
    TriggerEnable(gt_YagdraInit, false);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION2222, libNtve_ge_AllianceSetting_Ally);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DEBUGYagdraBoss_Init () {
    gt_DEBUGYagdraBoss = TriggerCreate("gt_DEBUGYagdraBoss_Func");
    TriggerAddEventChatMessage(gt_DEBUGYagdraBoss, c_playerAny, "Yagdra", true);
    TriggerAddEventChatMessage(gt_DEBUGYagdraBoss, c_playerAny, "s2", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Kraith Boss
//--------------------------------------------------------------------------------------------------
bool gt_DEBUGKraithBoss_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_friendlyRoaches;
    int lv_friendlyHydras;

    // Automatic Variable Declarations
    unitgroup autoEA7A09C2_g;
    int autoEA7A09C2_u;
    unit autoEA7A09C2_var;
    unitgroup autoFC10BD74_g;
    int autoFC10BD74_u;
    unit autoFC10BD74_var;
    unitgroup auto00719152_g;
    int auto00719152_u;
    unit auto00719152_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(gt_KraithIntroQ) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_yagdraEngaged = true;
    UnitRemove(gv_yagdraHelperUnit);
    autoEA7A09C2_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEA7A09C2_u = UnitGroupCount(autoEA7A09C2_g, c_unitCountAll);
    for (;; autoEA7A09C2_u -= 1) {
        autoEA7A09C2_var = UnitGroupUnitFromEnd(autoEA7A09C2_g, autoEA7A09C2_u);
        if (autoEA7A09C2_var == null) { break; }
        UnitRemove(autoEA7A09C2_var);
    }
    autoFC10BD74_g = UnitGroup(null, gv_pLAYER_02_DOMINION2222, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFC10BD74_u = UnitGroupCount(autoFC10BD74_g, c_unitCountAll);
    for (;; autoFC10BD74_u -= 1) {
        autoFC10BD74_var = UnitGroupUnitFromEnd(autoFC10BD74_g, autoFC10BD74_u);
        if (autoFC10BD74_var == null) { break; }
        UnitRemove(autoFC10BD74_var);
    }
    VisRevealerDestroy(gv_yagdraBossRevealerEnemy);
    lv_friendlyRoaches = gf_GetRoachCount(gv_pLAYER_01_USER);
    lv_friendlyHydras = gf_GetHydraliskCount(gv_pLAYER_01_USER);
    if ((lv_friendlyRoaches >= 6)) {
    }
    else {
        libNtve_gf_CreateUnitsAtPoint2((6 - lv_friendlyRoaches), "PrimalRoach", 0, gv_pLAYER_01_USER, UnitGetPosition(gv_kerrigan));
    }
    if ((lv_friendlyHydras >= 4)) {
    }
    else {
        libNtve_gf_CreateUnitsAtPoint2((4 - lv_friendlyHydras), "PrimalHydralisk", 0, gv_pLAYER_01_USER, UnitGetPosition(gv_kerrigan));
    }
    UnitAbilityShow(gv_kerrigan, "PsiStrikeWalk", true);
    UnitAbilityShow(gv_kerrigan, "PrimalSlash", true);
    UnitAbilityShow(gv_kerrigan, "PrimalHeal", true);
    TriggerStop(gt_MendTipQ);
    libSwaC_gf_SetMissionObjectiveProgress2("ZZerus03Objective01", 1, true, null, true);
    PingDestroy(gv_yagdraPing);
    PingDestroy(gv_kraithPing);
    PingCreate(PlayerGroupAll(), "PingBoss", PointFromId(316), ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0);
    PingSetScale(PingLastCreated(), 0.6);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/4D6617C0"));
    gv_kraithPing = PingLastCreated();
    TriggerEnable(gt_YagdraIdle, false);
    TriggerEnable(gt_YagdraIntroQ, false);
    TriggerStop(gt_YagdraBossFightController);
    TriggerStop(gt_YagdraMusic);
    TriggerStop(gt_VictoryShotMusicYagdra);
    libSwaC_gf_ShowHideSingularBossBarSwarmCampaign(false);
    TriggerEnable(gt_YagdraInit, false);
    TriggerExecute(gt_KraithIntroQ, false, false);
    auto00719152_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto00719152_u = UnitGroupCount(auto00719152_g, c_unitCountAll);
    for (;; auto00719152_u -= 1) {
        auto00719152_var = UnitGroupUnitFromEnd(auto00719152_g, auto00719152_u);
        if (auto00719152_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto00719152_var, true);
    }
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION222, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION2222, libNtve_ge_AllianceSetting_Ally);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DEBUGKraithBoss_Init () {
    gt_DEBUGKraithBoss = TriggerCreate("gt_DEBUGKraithBoss_Func");
    TriggerAddEventChatMessage(gt_DEBUGKraithBoss, c_playerAny, "Kraith", true);
    TriggerAddEventChatMessage(gt_DEBUGKraithBoss, c_playerAny, "s3", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Slivan Boss
//--------------------------------------------------------------------------------------------------
bool gt_DEBUGSlivanBoss_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_friendlyRoaches;
    int lv_friendlyHydras;
    int lv_friendlyUltras;

    // Automatic Variable Declarations
    unitgroup autoBF27DECD_g;
    int autoBF27DECD_u;
    unit autoBF27DECD_var;
    unitgroup auto051424A9_g;
    int auto051424A9_u;
    unit auto051424A9_var;
    unitgroup auto74C93D7A_g;
    int auto74C93D7A_u;
    unit auto74C93D7A_var;
    unitgroup auto64B2A652_g;
    int auto64B2A652_u;
    unit auto64B2A652_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(gt_SlivanIntroQ) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_yagdraEngaged = true;
    gv_kraithEngaged = true;
    UnitRemove(gv_yagdraHelperUnit);
    autoBF27DECD_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBF27DECD_u = UnitGroupCount(autoBF27DECD_g, c_unitCountAll);
    for (;; autoBF27DECD_u -= 1) {
        autoBF27DECD_var = UnitGroupUnitFromEnd(autoBF27DECD_g, autoBF27DECD_u);
        if (autoBF27DECD_var == null) { break; }
        UnitRemove(autoBF27DECD_var);
    }
    auto051424A9_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto051424A9_u = UnitGroupCount(auto051424A9_g, c_unitCountAll);
    for (;; auto051424A9_u -= 1) {
        auto051424A9_var = UnitGroupUnitFromEnd(auto051424A9_g, auto051424A9_u);
        if (auto051424A9_var == null) { break; }
        UnitRemove(auto051424A9_var);
    }
    auto74C93D7A_g = UnitGroup(null, gv_pLAYER_02_DOMINION2222, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto74C93D7A_u = UnitGroupCount(auto74C93D7A_g, c_unitCountAll);
    for (;; auto74C93D7A_u -= 1) {
        auto74C93D7A_var = UnitGroupUnitFromEnd(auto74C93D7A_g, auto74C93D7A_u);
        if (auto74C93D7A_var == null) { break; }
        UnitRemove(auto74C93D7A_var);
    }
    VisRevealerDestroy(gv_yagdraBossRevealerEnemy);
    lv_friendlyRoaches = gf_GetRoachCount(gv_pLAYER_01_USER);
    lv_friendlyHydras = gf_GetHydraliskCount(gv_pLAYER_01_USER);
    lv_friendlyUltras = gf_GetUltraliskCount(gv_pLAYER_01_USER);
    if ((lv_friendlyRoaches >= 6)) {
    }
    else {
        libNtve_gf_CreateUnitsAtPoint2((6 - lv_friendlyRoaches), "PrimalRoach", 0, gv_pLAYER_01_USER, UnitGetPosition(gv_kerrigan));
    }
    if ((lv_friendlyHydras >= 4)) {
    }
    else {
        libNtve_gf_CreateUnitsAtPoint2((4 - lv_friendlyHydras), "PrimalHydralisk", 0, gv_pLAYER_01_USER, UnitGetPosition(gv_kerrigan));
    }
    if ((lv_friendlyUltras >= 1)) {
    }
    else {
        libNtve_gf_CreateUnitsAtPoint2((1 - lv_friendlyUltras), "PrimalUltralisk", 0, gv_pLAYER_01_USER, UnitGetPosition(gv_kerrigan));
    }
    UnitAbilityShow(gv_kerrigan, "PsiStrikeWalk", true);
    UnitAbilityShow(gv_kerrigan, "PrimalSlash", true);
    UnitAbilityShow(gv_kerrigan, "PrimalHeal", true);
    TriggerStop(gt_MendTipQ);
    libSwaC_gf_SetMissionObjectiveProgress2("ZZerus03Objective01", 2, true, null, true);
    PingDestroy(gv_yagdraPing);
    PingDestroy(gv_kraithPing);
    PingDestroy(gv_slivanPing);
    PingCreate(PlayerGroupAll(), "PingBoss", PointFromId(317), ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0);
    PingSetScale(PingLastCreated(), 0.6);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/CE1DA88B"));
    gv_slivanPing = PingLastCreated();
    TriggerEnable(gt_YagdraIdle, false);
    TriggerEnable(gt_YagdraIntroQ, false);
    TriggerEnable(gt_KraithIdle, false);
    TriggerEnable(gt_KraithIntroQ, false);
    TriggerStop(gt_CaveSpawning1);
    TriggerStop(gt_YagdraBossFightController);
    TriggerStop(gt_YagdraMusic);
    TriggerStop(gt_VictoryShotMusicYagdra);
    TriggerStop(gt_KraithBossFightController);
    TriggerStop(gt_KraithMusic);
    TriggerStop(gt_VictoryShotMusicKraith);
    libSwaC_gf_ShowHideSingularBossBarSwarmCampaign(false);
    TriggerEnable(gt_YagdraInit, false);
    TriggerExecute(gt_SlivanIntroQ, false, false);
    auto64B2A652_g = UnitGroup(null, gv_pLAYER_02_DOMINION22, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto64B2A652_u = UnitGroupCount(auto64B2A652_g, c_unitCountAll);
    for (;; auto64B2A652_u -= 1) {
        auto64B2A652_var = UnitGroupUnitFromEnd(auto64B2A652_g, auto64B2A652_u);
        if (auto64B2A652_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto64B2A652_var, true);
    }
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION222, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION2222, libNtve_ge_AllianceSetting_Ally);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DEBUGSlivanBoss_Init () {
    gt_DEBUGSlivanBoss = TriggerCreate("gt_DEBUGSlivanBoss_Func");
    TriggerAddEventChatMessage(gt_DEBUGSlivanBoss, c_playerAny, "Slivan", true);
    TriggerAddEventChatMessage(gt_DEBUGSlivanBoss, c_playerAny, "s4", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Zurvan Boss
//--------------------------------------------------------------------------------------------------
bool gt_DEBUGZurvanBoss_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_friendlyRoaches;
    int lv_friendlyHydras;
    int lv_friendlyUltras;

    // Automatic Variable Declarations
    unitgroup auto7594E997_g;
    int auto7594E997_u;
    unit auto7594E997_var;
    unitgroup auto1D5DE79D_g;
    int auto1D5DE79D_u;
    unit auto1D5DE79D_var;
    unitgroup autoE09091B2_g;
    int autoE09091B2_u;
    unit autoE09091B2_var;
    unitgroup auto0AC0B775_g;
    int auto0AC0B775_u;
    unit auto0AC0B775_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(gt_SlivanIntroQ) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_yagdraEngaged = true;
    gv_kraithEngaged = true;
    gv_zurvanEngaged = true;
    UnitRemove(gv_yagdraHelperUnit);
    auto7594E997_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7594E997_u = UnitGroupCount(auto7594E997_g, c_unitCountAll);
    for (;; auto7594E997_u -= 1) {
        auto7594E997_var = UnitGroupUnitFromEnd(auto7594E997_g, auto7594E997_u);
        if (auto7594E997_var == null) { break; }
        UnitRemove(auto7594E997_var);
    }
    auto1D5DE79D_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1D5DE79D_u = UnitGroupCount(auto1D5DE79D_g, c_unitCountAll);
    for (;; auto1D5DE79D_u -= 1) {
        auto1D5DE79D_var = UnitGroupUnitFromEnd(auto1D5DE79D_g, auto1D5DE79D_u);
        if (auto1D5DE79D_var == null) { break; }
        UnitRemove(auto1D5DE79D_var);
    }
    autoE09091B2_g = UnitGroup(null, gv_pLAYER_02_DOMINION22, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE09091B2_u = UnitGroupCount(autoE09091B2_g, c_unitCountAll);
    for (;; autoE09091B2_u -= 1) {
        autoE09091B2_var = UnitGroupUnitFromEnd(autoE09091B2_g, autoE09091B2_u);
        if (autoE09091B2_var == null) { break; }
        UnitRemove(autoE09091B2_var);
    }
    auto0AC0B775_g = UnitGroup(null, gv_pLAYER_02_DOMINION2222, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0AC0B775_u = UnitGroupCount(auto0AC0B775_g, c_unitCountAll);
    for (;; auto0AC0B775_u -= 1) {
        auto0AC0B775_var = UnitGroupUnitFromEnd(auto0AC0B775_g, auto0AC0B775_u);
        if (auto0AC0B775_var == null) { break; }
        UnitRemove(auto0AC0B775_var);
    }
    VisRevealerDestroy(gv_yagdraBossRevealerEnemy);
    lv_friendlyRoaches = gf_GetRoachCount(gv_pLAYER_01_USER);
    lv_friendlyHydras = gf_GetHydraliskCount(gv_pLAYER_01_USER);
    lv_friendlyUltras = gf_GetUltraliskCount(gv_pLAYER_01_USER);
    if ((lv_friendlyRoaches >= 6)) {
    }
    else {
        libNtve_gf_CreateUnitsAtPoint2((6 - lv_friendlyRoaches), "PrimalRoach", 0, gv_pLAYER_01_USER, UnitGetPosition(gv_kerrigan));
    }
    if ((lv_friendlyHydras >= 4)) {
    }
    else {
        libNtve_gf_CreateUnitsAtPoint2((4 - lv_friendlyHydras), "PrimalHydralisk", 0, gv_pLAYER_01_USER, UnitGetPosition(gv_kerrigan));
    }
    if ((lv_friendlyUltras >= 1)) {
    }
    else {
        libNtve_gf_CreateUnitsAtPoint2((1 - lv_friendlyUltras), "PrimalUltralisk", 0, gv_pLAYER_01_USER, UnitGetPosition(gv_kerrigan));
    }
    UnitAbilityShow(gv_kerrigan, "PsiStrikeWalk", true);
    UnitAbilityShow(gv_kerrigan, "PrimalSlash", true);
    UnitAbilityShow(gv_kerrigan, "PrimalHeal", true);
    TriggerStop(gt_MendTipQ);
    libSwaC_gf_SetMissionObjectiveProgress2("ZZerus03Objective01", 3, true, null, true);
    TriggerExecute(gt_ObjectiveSlayPrimarchsComplete, true, false);
    PingDestroy(gv_yagdraPing);
    PingDestroy(gv_kraithPing);
    PingDestroy(gv_slivanPing);
    TriggerEnable(gt_YagdraIdle, false);
    TriggerEnable(gt_YagdraIntroQ, false);
    TriggerEnable(gt_KraithIdle, false);
    TriggerEnable(gt_KraithIntroQ, false);
    TriggerEnable(gt_SlivanIntroQ, false);
    TriggerStop(gt_CaveSpawning1);
    TriggerStop(gt_YagdraBossFightController);
    TriggerStop(gt_YagdraMusic);
    TriggerStop(gt_VictoryShotMusicYagdra);
    TriggerStop(gt_KraithBossFightController);
    TriggerStop(gt_KraithMusic);
    TriggerStop(gt_VictoryShotMusicKraith);
    TriggerStop(gt_SlivanBossFightController);
    TriggerStop(gt_SlivanMusic);
    TriggerStop(gt_VictoryShotMusicSlivan);
    libSwaC_gf_ShowHideSingularBossBarSwarmCampaign(false);
    TriggerEnable(gt_YagdraInit, false);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION222, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION2222, libNtve_ge_AllianceSetting_Ally);
    TriggerExecute(gt_ZurvanIntroQ, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DEBUGZurvanBoss_Init () {
    gt_DEBUGZurvanBoss = TriggerCreate("gt_DEBUGZurvanBoss_Func");
    TriggerAddEventChatMessage(gt_DEBUGZurvanBoss, c_playerAny, "Zurvan", true);
    TriggerAddEventChatMessage(gt_DEBUGZurvanBoss, c_playerAny, "s5", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_achievementTimedRunTimer, 720.0, false, c_timeAI);
    TriggerExecute(gt_YagdraInit, true, false);
    TriggerExecute(gt_YagdraRescueCave, true, false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/F92D94B7"), null, PointFromId(3));
    Wait(3.0, c_timeReal);
    TriggerExecute(gt_ObjectiveSlayPrimarchsCreate, true, true);
    TriggerExecute(gt_ObjectiveSurviveCreate, true, true);
    libSwaC_gf_CreateObjectivePing(true, PointFromId(302), StringExternal("Param/Value/7A62DF68"));
    gv_yagdraPing = PingLastCreated();
    TriggerQueueExit();
    TriggerExecute(gt_TipMissionHelpQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Takes Damage
//--------------------------------------------------------------------------------------------------
bool gt_UnitTakesDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_index;

    // Automatic Variable Declarations
    const int auto5FB0B979_ae = 15;
    const int auto5FB0B979_ai = 1;
    const int auto17837B83_ae = 15;
    const int auto17837B83_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((EventUnit() != gv_kerrigan))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 1;
    for ( ; ( (auto5FB0B979_ai >= 0 && lv_i <= auto5FB0B979_ae) || (auto5FB0B979_ai < 0 && lv_i >= auto5FB0B979_ae) ) ; lv_i += auto5FB0B979_ai ) {
        if ((gv_attackedUnits[lv_i] == EventUnit())) {
            lv_index = lv_i;
            break;
        }

    }
    if ((lv_index == 0)) {
        lv_i = 1;
        for ( ; ( (auto17837B83_ai >= 0 && lv_i <= auto17837B83_ae) || (auto17837B83_ai < 0 && lv_i >= auto17837B83_ae) ) ; lv_i += auto17837B83_ai ) {
            if ((gv_attackedUnits[lv_i] == null)) {
                gv_attackedUnits[lv_i] = EventUnit();
                gv_attackUnitCountdowns[lv_i] = 3;
                UnitStatusBarOverride(EventUnit(), c_unitStatusGroupAll);
            }

        }
        return true;
    }
    else {
        gv_attackUnitCountdowns[lv_index] = 3;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitTakesDamage_Init () {
    gt_UnitTakesDamage = TriggerCreate("gt_UnitTakesDamage_Func");
    TriggerEnable(gt_UnitTakesDamage, false);
    TriggerAddEventUnitDamaged(gt_UnitTakesDamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attacked Unit Countdowns
//--------------------------------------------------------------------------------------------------
bool gt_AttackedUnitCountdowns_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto76BB7825_ae = 15;
    const int auto76BB7825_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 1;
    for ( ; ( (auto76BB7825_ai >= 0 && lv_i <= auto76BB7825_ae) || (auto76BB7825_ai < 0 && lv_i >= auto76BB7825_ae) ) ; lv_i += auto76BB7825_ai ) {
        if ((gv_attackedUnits[lv_i] != null)) {
            gv_attackUnitCountdowns[lv_i] -= 1;
            if ((gv_attackUnitCountdowns[lv_i] <= 0)) {
                UnitStatusBarClearOverride(gv_attackedUnits[lv_i]);
                gv_attackedUnits[lv_i] = null;
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackedUnitCountdowns_Init () {
    gt_AttackedUnitCountdowns = TriggerCreate("gt_AttackedUnitCountdowns_Func");
    TriggerAddEventTimePeriodic(gt_AttackedUnitCountdowns, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Primal Zerg Attacks
//--------------------------------------------------------------------------------------------------
bool gt_PrimalZergAttacks_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_playerUnits;
    unit lv_closestUnit;

    // Automatic Variable Declarations
    unitgroup auto19DA7AFD_g;
    int auto19DA7AFD_u;
    unit auto19DA7AFD_var;
    unitgroup auto43C9DCDF_g;
    int auto43C9DCDF_u;
    unit auto43C9DCDF_var;

    // Variable Initialization
    lv_playerUnits = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto19DA7AFD_g = UnitGroup(null, gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto19DA7AFD_u = UnitGroupCount(auto19DA7AFD_g, c_unitCountAll);
    for (;; auto19DA7AFD_u -= 1) {
        auto19DA7AFD_var = UnitGroupUnitFromEnd(auto19DA7AFD_g, auto19DA7AFD_u);
        if (auto19DA7AFD_var == null) { break; }
        if ((libNtve_gf_UnitInRegion(auto19DA7AFD_var, RegionFromId(90)) == false)) {
            UnitGroupAdd(lv_playerUnits, auto19DA7AFD_var);
        }

    }
    auto43C9DCDF_g = gv_primalZergAttackers;
    auto43C9DCDF_u = UnitGroupCount(auto43C9DCDF_g, c_unitCountAll);
    for (;; auto43C9DCDF_u -= 1) {
        auto43C9DCDF_var = UnitGroupUnitFromEnd(auto43C9DCDF_g, auto43C9DCDF_u);
        if (auto43C9DCDF_var == null) { break; }
        if ((UnitGroupCount(lv_playerUnits, c_unitCountAlive) >= 1)) {
            lv_closestUnit = UnitGroupClosestToPoint(lv_playerUnits, UnitGetPosition(auto43C9DCDF_var));
            if ((UnitGetType(auto43C9DCDF_var) == "SlivanCreep")) {
                UnitIssueOrder(auto43C9DCDF_var, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv_closestUnit)), c_orderQueueReplace);
                libNtve_gf_SendActorMessageToUnit(auto43C9DCDF_var, "Signal Aggro");
                if ((UnitHasBehavior(auto43C9DCDF_var, "SlivanCreepBoom") == false)) {
                    if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(auto43C9DCDF_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
                        UnitBehaviorAdd(auto43C9DCDF_var, "SlivanCreepBoom", auto43C9DCDF_var, 1);
                    }

                }

            }
            else {
                UnitIssueOrder(auto43C9DCDF_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(lv_closestUnit)), c_orderQueueReplace);
            }
        }
        else {
            if ((RandomInt(1, 5) == 1)) {
                UnitIssueOrder(auto43C9DCDF_var, OrderTargetingPoint(AbilityCommand("move", 0), Point(UnitGetCustomValue(auto43C9DCDF_var, 0), UnitGetCustomValue(auto43C9DCDF_var, 1))), c_orderQueueReplace);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrimalZergAttacks_Init () {
    gt_PrimalZergAttacks = TriggerCreate("gt_PrimalZergAttacks_Func");
    TriggerAddEventTimePeriodic(gt_PrimalZergAttacks, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Primal Zerg Wandering
//--------------------------------------------------------------------------------------------------
bool gt_PrimalZergWandering_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto72FFE7BC_g;
    int auto72FFE7BC_u;
    unit auto72FFE7BC_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto72FFE7BC_g = gv_primalZergWanderers;
    auto72FFE7BC_u = UnitGroupCount(auto72FFE7BC_g, c_unitCountAll);
    for (;; auto72FFE7BC_u -= 1) {
        auto72FFE7BC_var = UnitGroupUnitFromEnd(auto72FFE7BC_g, auto72FFE7BC_u);
        if (auto72FFE7BC_var == null) { break; }
        if ((RandomInt(1, 6) == 1)) {
            if ((UnitGetType(auto72FFE7BC_var) != "SlivanCreep")) {
                UnitIssueOrder(auto72FFE7BC_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionCircle(Point(UnitGetCustomValue(auto72FFE7BC_var, 0), UnitGetCustomValue(auto72FFE7BC_var, 1)), 3.0))), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(auto72FFE7BC_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(Point(UnitGetCustomValue(auto72FFE7BC_var, 0), UnitGetCustomValue(auto72FFE7BC_var, 1)), 3.0))), c_orderQueueReplace);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrimalZergWandering_Init () {
    gt_PrimalZergWandering = TriggerCreate("gt_PrimalZergWandering_Func");
    TriggerAddEventTimePeriodic(gt_PrimalZergWandering, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Egg Unit Trained
//--------------------------------------------------------------------------------------------------
bool gt_EggUnitTrained_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventPlayer() == gv_pLAYER_02_DOMINION) || (EventPlayer() == gv_pLAYER_02_DOMINION2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_AddUnittoPrimalZergAttackers(EventUnitProgressUnit(), UnitGetPosition(EventUnitProgressUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EggUnitTrained_Init () {
    gt_EggUnitTrained = TriggerCreate("gt_EggUnitTrained_Func");
    TriggerAddEventUnitTrainProgress(gt_EggUnitTrained, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerus Critter Attacks
//--------------------------------------------------------------------------------------------------
bool gt_ZerusCritterAttacks_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_attackRegion;
    unitgroup lv_critterGroup;
    unitgroup lv_primalGroup;
    unit lv_currentCritter;

    // Automatic Variable Declarations
    unitgroup auto87BBF975_g;
    int auto87BBF975_u;
    unitgroup auto27257508_g;
    int auto27257508_u;
    unit auto27257508_var;

    // Variable Initialization
    lv_critterGroup = UnitGroupEmpty();
    lv_primalGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((VisIsVisibleForPlayer(gv_pLAYER_01_USER, CameraGetTarget(gv_pLAYER_01_USER)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_attackRegion = RegionCircle(CameraGetTarget(gv_pLAYER_01_USER), 10.0);
    UnitGroupAddUnitGroup(lv_critterGroup, UnitGroup("Crabeetle", 0, lv_attackRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_critterGroup, UnitGroup("Artosilope", 0, lv_attackRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_critterGroup, UnitGroup("Anteplott", 0, lv_attackRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_critterGroup, UnitGroup("ZerusAlienTreeHover", 0, lv_attackRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    auto87BBF975_g = lv_critterGroup;
    auto87BBF975_u = UnitGroupCount(auto87BBF975_g, c_unitCountAll);
    for (;; auto87BBF975_u -= 1) {
        lv_currentCritter = UnitGroupUnitFromEnd(auto87BBF975_g, auto87BBF975_u);
        if (lv_currentCritter == null) { break; }
        if ((UnitGroupHasUnit(gv_primalCritterTargets, lv_currentCritter) == false) && (libNtve_gf_UnitIsPaused(lv_currentCritter) == false)) {
            lv_primalGroup = UnitGroupEmpty();
            auto27257508_g = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lv_currentCritter), 6.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 0);
            auto27257508_u = UnitGroupCount(auto27257508_g, c_unitCountAll);
            for (;; auto27257508_u -= 1) {
                auto27257508_var = UnitGroupUnitFromEnd(auto27257508_g, auto27257508_u);
                if (auto27257508_var == null) { break; }
                if ((UnitTestState(auto27257508_var, c_unitStateIdle) == true) && (UnitGroupHasUnit(gv_primalCritterAttackers, auto27257508_var) == false) && (UnitCanAttackTarget(auto27257508_var, lv_currentCritter) == true) && (libNtve_gf_UnitIsPaused(auto27257508_var) == false) && ((UnitGetType(auto27257508_var) == "PrimalZergling") || (UnitGetType(auto27257508_var) == "PrimalHydralisk") || (UnitGetType(auto27257508_var) == "PrimalRoach") || (UnitGetType(auto27257508_var) == "PrimalUltralisk") || (UnitGetType(auto27257508_var) == "PrimalFlyer") || (UnitGetType(auto27257508_var) == "PrimalMutalisk") || (UnitGetType(auto27257508_var) == "Ravasaur"))) {
                    UnitGroupAdd(lv_primalGroup, auto27257508_var);
                }

            }
            if ((UnitGroupCount(lv_primalGroup, c_unitCountAlive) > 0)) {
                gf_OrderPrimaltoAttackCritter(UnitGroupClosestToPoint(lv_primalGroup, UnitGetPosition(lv_currentCritter)), lv_currentCritter);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZerusCritterAttacks_Init () {
    gt_ZerusCritterAttacks = TriggerCreate("gt_ZerusCritterAttacks_Func");
    TriggerAddEventTimePeriodic(gt_ZerusCritterAttacks, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spore Ray Patrols
//--------------------------------------------------------------------------------------------------
bool gt_SporeRayPatrols_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto3816780A_ae = gv_sPORE_RAY_MAX_COUNT;
    const int auto3816780A_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 0;
    for ( ; ( (auto3816780A_ai >= 0 && lv_i <= auto3816780A_ae) || (auto3816780A_ai < 0 && lv_i >= auto3816780A_ae) ) ; lv_i += auto3816780A_ai ) {
        if ((UnitIsAlive(gv_sporeRayPatrollers[lv_i].lv_sporeRay) == true) && (gv_sporeRayPatrollers[lv_i].lv_patrolPointCount > 0)) {
            if ((DistanceBetweenPoints(UnitGetPosition(gv_sporeRayPatrollers[lv_i].lv_sporeRay), gv_sporeRayPatrollers[lv_i].lv_patrolRoute[gv_sporeRayPatrollers[lv_i].lv_currentPatrolPoint]) <= 1)) {
                if ((gv_sporeRayPatrollers[lv_i].lv_currentPatrolPoint < gv_sporeRayPatrollers[lv_i].lv_patrolPointCount)) {
                    gv_sporeRayPatrollers[lv_i].lv_currentPatrolPoint += 1;
                }
                else {
                    gv_sporeRayPatrollers[lv_i].lv_currentPatrolPoint = 1;
                }
            }

            UnitIssueOrder(gv_sporeRayPatrollers[lv_i].lv_sporeRay, OrderTargetingPoint(AbilityCommand("move", 0), gv_sporeRayPatrollers[lv_i].lv_patrolRoute[gv_sporeRayPatrollers[lv_i].lv_currentPatrolPoint]), c_orderQueueReplace);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SporeRayPatrols_Init () {
    gt_SporeRayPatrols = TriggerCreate("gt_SporeRayPatrols_Func");
    TriggerAddEventTimePeriodic(gt_SporeRayPatrols, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Spore Ray Patrols
//--------------------------------------------------------------------------------------------------
bool gt_InitializeSporeRayPatrols_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TurnSporeRayintoSporeRayPatroller(UnitFromId(3973));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(3975));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(3988));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(4300));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(4647));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(4648));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(4649));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(4650));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(4651));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(4652));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(4653));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(4654));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(4655));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(4656));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(4657));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(4658));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(4659));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(4660));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(4661));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(4662));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(4663));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(4664));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(4665));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(4666));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(4667));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(4668));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(4669));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(4670));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(4671));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(4672));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(4673));
    gf_TurnSporeRayintoSporeRayPatroller(UnitFromId(3974));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(4660));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(4661));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(4662));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(4663));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(4664));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(4665));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(4666));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(4667));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(4668));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(4669));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(4670));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(4671));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(4672));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(4673));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(3975));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(3988));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(4300));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(4647));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(4648));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(4649));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(4650));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(4651));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(4652));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(4653));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(4654));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(4655));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(4656));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(4657));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(4658));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(4659));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitializeSporeRayPatrols_Init () {
    gt_InitializeSporeRayPatrols = TriggerCreate("gt_InitializeSporeRayPatrols_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Xel'Naga Relic Pickups
//--------------------------------------------------------------------------------------------------
bool gt_XelNagaRelicPickups_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_tempUnit;

    // Automatic Variable Declarations
    unitgroup auto1591FA58_g;
    int auto1591FA58_u;
    unit auto1591FA58_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "PickupChronoRiftChargeSwarm"))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(gv_kerrigan, RegionCircle(UnitGetPosition(EventUnit()), 3.0)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_relicsFound == 0)) {
        auto1591FA58_g = UnitGroup("PickupChronoRiftChargeSwarm", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto1591FA58_u = UnitGroupCount(auto1591FA58_g, c_unitCountAll);
        for (;; auto1591FA58_u -= 1) {
            auto1591FA58_var = UnitGroupUnitFromEnd(auto1591FA58_g, auto1591FA58_u);
            if (auto1591FA58_var == null) { break; }
            libNtve_gf_KillModel(libHots_gf_ActorForUnit(auto1591FA58_var, 1));
        }
    }

    UnitKill(EventUnit());
    libSwaC_gf_DisplayMissionObjectiveRewardFloatingText(UnitGetPosition(gv_kerrigan), "ZZerus03Objective03", gv_pLAYER_01_USER);
    SoundPlayAtPoint(SoundLink("UI_ResourcePickup", -1), PlayerGroupAll(), UnitGetPosition(EventUnit()), 8.0, 100.0, 0.0);
    SoundPlayAtPoint(SoundLink("ChronoRift_PkUp", -1), PlayerGroupAll(), UnitGetPosition(EventUnit()), 8.0, 100.0, 0.0);
    gv_relicsFound += 1;
    gv_relicsRemainingInArea -= 1;
    TriggerExecute(gt_ObjectiveXelNagaRelicsCreate, true, false);
    if ((gv_relicsRemainingInArea == 0)) {
        libSwaC_gf_SetMissionObjectiveProgress2("ZZerus03Objective03", gv_relicsFound, true, TextReplaceWord(StringExternal("Param/Value/A2E9EC88"), StringExternal("Param/Value/CEF3FA31"), IntToText(gv_relicsRemainingInArea), c_stringReplaceAll, c_stringCase), true);
    }
    else {
        if ((gv_relicsRemainingInArea == 1)) {
            libSwaC_gf_SetMissionObjectiveProgress2("ZZerus03Objective03", gv_relicsFound, true, TextReplaceWord(StringExternal("Param/Value/B7019BCF"), StringExternal("Param/Value/623B89F8"), IntToText(gv_relicsRemainingInArea), c_stringReplaceAll, c_stringCase), true);
        }
        else {
            libSwaC_gf_SetMissionObjectiveProgress2("ZZerus03Objective03", gv_relicsFound, true, TextReplaceWord(StringExternal("Param/Value/E7C4511D"), StringExternal("Param/Value/22436B2C"), IntToText(gv_relicsRemainingInArea), c_stringReplaceAll, c_stringCase), true);
        }
    }
    if ((gv_relicsFound >= 4)) {
        libSwaC_gf_SetMissionObjectiveProgress2("ZZerus03Objective03", gv_relicsFound, true, null, true);
        TriggerExecute(gt_ObjectiveXelNagaRelicsComplete, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_XelNagaRelicPickups_Init () {
    gt_XelNagaRelicPickups = TriggerCreate("gt_XelNagaRelicPickups_Func");
    TriggerAddEventUnitAbility(gt_XelNagaRelicPickups, null, AbilityCommand("Pickup", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Yagdra Init
//--------------------------------------------------------------------------------------------------
bool gt_YagdraInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoD8830F50_g;
    int autoD8830F50_u;
    unit autoD8830F50_var;
    unitgroup autoE840BA97_g;
    int autoE840BA97_u;
    unit autoE840BA97_var;
    unitgroup autoA9D424FB_g;
    int autoA9D424FB_u;
    unit autoA9D424FB_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoD8830F50_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(95), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD8830F50_u = UnitGroupCount(autoD8830F50_g, c_unitCountAll);
    for (;; autoD8830F50_u -= 1) {
        autoD8830F50_var = UnitGroupUnitFromEnd(autoD8830F50_g, autoD8830F50_u);
        if (autoD8830F50_var == null) { break; }
        UnitIssueOrder(autoD8830F50_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    }
    autoE840BA97_g = UnitGroup("PrimalZergling", c_playerAny, RegionFromId(65), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE840BA97_u = UnitGroupCount(autoE840BA97_g, c_unitCountAll);
    for (;; autoE840BA97_u -= 1) {
        autoE840BA97_var = UnitGroupUnitFromEnd(autoE840BA97_g, autoE840BA97_u);
        if (autoE840BA97_var == null) { break; }
        gf_AddUnittoPrimalZergWanderers(autoE840BA97_var);
    }
    autoA9D424FB_g = UnitGroup("PrimalHydralisk", c_playerAny, RegionFromId(65), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA9D424FB_u = UnitGroupCount(autoA9D424FB_g, c_unitCountAll);
    for (;; autoA9D424FB_u -= 1) {
        autoA9D424FB_var = UnitGroupUnitFromEnd(autoA9D424FB_g, autoA9D424FB_u);
        if (autoA9D424FB_var == null) { break; }
        gf_AddUnittoPrimalZergWanderers(autoA9D424FB_var);
    }
    libNtve_gf_ShowHideUnit(gv_yagdra, false);
    libNtve_gf_ShowHideUnit(gv_kraith, false);
    gv_kerriganLowestLife = UnitGetPropertyFixed(gv_kerrigan, c_unitPropLifeMax, c_unitPropCurrent);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_YagdraInit_Init () {
    gt_YagdraInit = TriggerCreate("gt_YagdraInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leaping Strike Tip Q
//--------------------------------------------------------------------------------------------------
bool gt_LeapingStrikeTipQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_target;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_target = UnitFromId(3360);
    UnitSetState(lv_target, c_unitStateStunned, true);
    TriggerQueueEnter();
    UnitAbilityShow(gv_kerrigan, "PrimalSlash", true);
    libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(libSwaC_ge_CampaginReticleType_ZergEnemy, libSwaC_ge_CampaginReticleSize_Medium, null, lv_target, "Ref_Center");
    gf_FlashCommandforCasteruntilUsed(gv_kerrigan, lv_target, AbilityCommand("PrimalSlash", 0));
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus03|Line00006", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LeapingStrikeTipQ_Init () {
    gt_LeapingStrikeTipQ = TriggerCreate("gt_LeapingStrikeTipQ_Func");
    TriggerAddEventUnitRegion(gt_LeapingStrikeTipQ, UnitRefFromVariable("gv_kerrigan"), RegionFromId(2), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Psionic Shift Tip Q
//--------------------------------------------------------------------------------------------------
bool gt_PsionicShiftTipQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_attackGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_attackGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    CameraLockInput(gv_pLAYER_01_USER, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(303), 2.5, -1, 10, true);
    libNtve_gf_MakeUnitUncommandable(gv_kerrigan, true);
    UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(96)), c_orderQueueReplace);
    UnitIssueOrder(gv_kerrigan, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(libSwaC_ge_CampaginReticleType_ZergEnemy, libSwaC_ge_CampaginReticleSize_Medium, null, UnitFromId(529), "Ref_Center");
    UnitAbilityShow(gv_kerrigan, "PsiStrikeWalk", true);
    gf_FlashCommandforCasteruntilUsed(gv_kerrigan, UnitFromId(529), AbilityCommand("PsiStrikeWalk", 0));
    Wait(1.0, c_timeGame);
    libNtve_gf_MakeUnitUncommandable(gv_kerrigan, false);
    CameraLockInput(gv_pLAYER_01_USER, false);
    TransmissionClearAll();
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus03|Line00076", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PsionicShiftTipQ_Init () {
    gt_PsionicShiftTipQ = TriggerCreate("gt_PsionicShiftTipQ_Func");
    TriggerAddEventUnitRegion(gt_PsionicShiftTipQ, UnitRefFromVariable("gv_kerrigan"), RegionFromId(34), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Psionic Shift Tripwire
//--------------------------------------------------------------------------------------------------
bool gt_PsionicShiftTripwire_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_psionicShiftZerglings;

    // Automatic Variable Declarations
    unitgroup autoC26D8E79_g;
    int autoC26D8E79_u;
    unit autoC26D8E79_var;
    unitgroup auto1F3747B9_g;
    int auto1F3747B9_u;
    unit auto1F3747B9_var;
    unitgroup auto9AF57DAB_g;
    int auto9AF57DAB_u;
    unit auto9AF57DAB_var;

    // Variable Initialization
    lv_psionicShiftZerglings = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoC26D8E79_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(95), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC26D8E79_u = UnitGroupCount(autoC26D8E79_g, c_unitCountAll);
    for (;; autoC26D8E79_u -= 1) {
        autoC26D8E79_var = UnitGroupUnitFromEnd(autoC26D8E79_g, autoC26D8E79_u);
        if (autoC26D8E79_var == null) { break; }
        UnitGroupAdd(lv_psionicShiftZerglings, autoC26D8E79_var);
    }
    while (true) {
        if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(99), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
            auto9AF57DAB_g = lv_psionicShiftZerglings;
            auto9AF57DAB_u = UnitGroupCount(auto9AF57DAB_g, c_unitCountAll);
            for (;; auto9AF57DAB_u -= 1) {
                auto9AF57DAB_var = UnitGroupUnitFromEnd(auto9AF57DAB_g, auto9AF57DAB_u);
                if (auto9AF57DAB_var == null) { break; }
                UnitIssueOrder(auto9AF57DAB_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(libNtve_gf_ClosestUnitToPoint(UnitGetPosition(auto9AF57DAB_var), UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(99), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)))), c_orderQueueReplace);
            }
        }
        else {
            auto1F3747B9_g = lv_psionicShiftZerglings;
            auto1F3747B9_u = UnitGroupCount(auto1F3747B9_g, c_unitCountAll);
            for (;; auto1F3747B9_u -= 1) {
                auto1F3747B9_var = UnitGroupUnitFromEnd(auto1F3747B9_g, auto1F3747B9_u);
                if (auto1F3747B9_var == null) { break; }
                if ((RandomInt(1, 5) == 1)) {
                    UnitIssueOrder(auto1F3747B9_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(95))), c_orderQueueReplace);
                }

            }
        }
        Wait(1.0, c_timeAI);
        if (((UnitGroupCount(lv_psionicShiftZerglings, c_unitCountAlive) == 0) || (gv_yagdraEngaged == true))) {
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PsionicShiftTripwire_Init () {
    gt_PsionicShiftTripwire = TriggerCreate("gt_PsionicShiftTripwire_Func");
    TriggerAddEventUnitRegion(gt_PsionicShiftTripwire, UnitRefFromVariable("gv_kerrigan"), RegionFromId(17), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Xel'Naga Relic Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_XelNagaRelicIntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoC78B6E0C_g;
    int autoC78B6E0C_u;
    unit autoC78B6E0C_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TransmissionClearAll();
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveXelNagaRelicsCreate, true, true);
    autoC78B6E0C_g = UnitGroup("PickupChronoRiftChargeSwarm", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC78B6E0C_u = UnitGroupCount(autoC78B6E0C_g, c_unitCountAll);
    for (;; autoC78B6E0C_u -= 1) {
        autoC78B6E0C_var = UnitGroupUnitFromEnd(autoC78B6E0C_g, autoC78B6E0C_u);
        if (autoC78B6E0C_var == null) { break; }
        libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(libSwaC_ge_CampaginReticleType_ZergBonusObjective, libSwaC_ge_CampaginReticleSize_Medium, null, autoC78B6E0C_var, "Ref_Center");
        libHots_gf_StoreActorForUnit(autoC78B6E0C_var, 1, libNtve_gf_ActorLastCreated());
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus03|Line00015", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_XelNagaRelicIntroQ_Init () {
    gt_XelNagaRelicIntroQ = TriggerCreate("gt_XelNagaRelicIntroQ_Func");
    TriggerAddEventUnitRegion(gt_XelNagaRelicIntroQ, UnitRefFromVariable("gv_kerrigan"), RegionFromId(13), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Yagdra Rescue Q
//--------------------------------------------------------------------------------------------------
bool gt_YagdraRescueQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }

        if (!((gv_yagdraEngaged == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TransmissionClearAll();
    TriggerQueueEnter();
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(66));
    gv_yagdraRescueRevealer = VisRevealerLastCreated();
    VisRevealerEnable(gv_yagdraRescueRevealer, true);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION2222, libNtve_ge_AllianceSetting_Ally);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus03|Line00014", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_YagdraRescueQ_Init () {
    gt_YagdraRescueQ = TriggerCreate("gt_YagdraRescueQ_Func");
    TriggerAddEventUnitRegion(gt_YagdraRescueQ, null, RegionFromId(3), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mend Tip Q
//--------------------------------------------------------------------------------------------------
bool gt_MendTipQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_yagdraEngaged == false))) {
            return false;
        }

        if (!(((UnitGetPropertyFixed(gv_kerrigan, c_unitPropLifePercent, c_unitPropCurrent) <= 50.0) || (gv_firstRoachesRescued == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UnitAbilityShow(gv_kerrigan, "PrimalHeal", true);
    gf_FlashCommandforCasteruntilUsed(gv_kerrigan, gv_kerrigan, AbilityCommand("PrimalHeal", 0));
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus03|Line00013", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MendTipQ_Init () {
    gt_MendTipQ = TriggerCreate("gt_MendTipQ_Func");
    TriggerAddEventUnitProperty(gt_MendTipQ, UnitRefFromVariable("gv_kerrigan"), c_unitPropLife);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Yagdra Rescue Cave
//--------------------------------------------------------------------------------------------------
bool gt_YagdraRescueCave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_friendlyRoaches;
    timer lv_respawnTimer;

    // Automatic Variable Declarations
    unitgroup autoC92B3790_g;
    int autoC92B3790_u;
    unit autoC92B3790_var;
    unitgroup auto18BF914F_g;
    int auto18BF914F_u;
    unit auto18BF914F_var;
    unitgroup auto63F62738_g;
    int auto63F62738_u;
    unit auto63F62738_var;

    // Variable Initialization
    lv_respawnTimer = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeAI);
        if ((gv_yagdraEngaged == true)) {
            VisRevealerEnable(gv_yagdraRescueRevealer, false);
            VisRevealerDestroy(gv_yagdraRescueRevealer);
            return true;
        }

        if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION2222, RegionFromId(66), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 4) && (gv_yagdraRescueKill == false)) {
            libNtve_gf_CreateUnitsAtPoint2(1, "PrimalRoach", 0, gv_pLAYER_02_DOMINION2222, PointFromId(2021));
            autoC92B3790_g = UnitLastCreatedGroup();
            autoC92B3790_u = UnitGroupCount(autoC92B3790_g, c_unitCountAll);
            for (;; autoC92B3790_u -= 1) {
                autoC92B3790_var = UnitGroupUnitFromEnd(autoC92B3790_g, autoC92B3790_u);
                if (autoC92B3790_var == null) { break; }
                UnitSetState(autoC92B3790_var, c_unitStateTargetable, false);
                UnitIssueOrder(autoC92B3790_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2022)), c_orderQueueReplace);
                UnitIssueOrder(autoC92B3790_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(2023)), c_orderQueueAddToEnd);
            }
        }

        if ((TimerGetRemaining(lv_respawnTimer) <= 0.1)) {
            if ((UnitGroupCount(UnitGroup("PrimalHydralisk", gv_pLAYER_02_DOMINION, RegionFromId(66), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 7)) {
                libNtve_gf_CreateUnitsAtPoint2(1, "PrimalHydralisk", 0, gv_pLAYER_02_DOMINION, PointFromId(2024));
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2023)), c_orderQueueReplace);
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(2022)), c_orderQueueAddToEnd);
            }

            if ((libNtve_gf_UnitInRegion(gv_kerrigan, RegionFromId(66)) == true)) {
                TimerStart(lv_respawnTimer, 6.0, false, c_timeAI);
            }
            else {
                TimerStart(lv_respawnTimer, 1.0, false, c_timeAI);
            }
        }

        if ((libNtve_gf_UnitInRegion(gv_kerrigan, RegionFromId(66)) == true) && (UnitGroupCount(UnitGroup("PrimalHydralisk", gv_pLAYER_02_DOMINION, RegionFromId(66), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            lv_friendlyRoaches = UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION2222, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
            if ((lv_friendlyRoaches < 4)) {
                libNtve_gf_CreateUnitsAtPoint2((4 - lv_friendlyRoaches), "PrimalRoach", 0, gv_pLAYER_02_DOMINION2222, PointFromId(2021));
                auto18BF914F_g = UnitLastCreatedGroup();
                auto18BF914F_u = UnitGroupCount(auto18BF914F_g, c_unitCountAll);
                for (;; auto18BF914F_u -= 1) {
                    auto18BF914F_var = UnitGroupUnitFromEnd(auto18BF914F_g, auto18BF914F_u);
                    if (auto18BF914F_var == null) { break; }
                    UnitSetState(auto18BF914F_var, c_unitStateTargetable, false);
                    UnitIssueOrder(auto18BF914F_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2022)), c_orderQueueReplace);
                }
            }

            Wait(1.0, c_timeReal);
            auto63F62738_g = UnitGroup(null, gv_pLAYER_02_DOMINION2222, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto63F62738_u = UnitGroupCount(auto63F62738_g, c_unitCountAll);
            for (;; auto63F62738_u -= 1) {
                auto63F62738_var = UnitGroupUnitFromEnd(auto63F62738_g, auto63F62738_u);
                if (auto63F62738_var == null) { break; }
                libNtve_gf_RescueUnit(auto63F62738_var, gv_pLAYER_01_USER, true);
                UnitSetState(auto63F62738_var, c_unitStateTargetable, true);
            }
            VisRevealerEnable(gv_yagdraRescueRevealer, false);
            VisRevealerDestroy(gv_yagdraRescueRevealer);
            gv_firstRoachesRescued = true;
            TriggerExecute(gt_MendTipQ, true, false);
            TriggerExecute(gt_ShowArmyButtonForRescue, true, false);
            return true;
        }

        if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION2222, RegionFromId(66), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (gv_yagdraRescueKill == true)) {
            VisRevealerEnable(gv_yagdraRescueRevealer, false);
            VisRevealerDestroy(gv_yagdraRescueRevealer);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_YagdraRescueCave_Init () {
    gt_YagdraRescueCave = TriggerCreate("gt_YagdraRescueCave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show Army Button For Rescue
//--------------------------------------------------------------------------------------------------
bool gt_ShowArmyButtonForRescue_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_DisplayArmyButton(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowArmyButtonForRescue_Init () {
    gt_ShowArmyButtonForRescue = TriggerCreate("gt_ShowArmyButtonForRescue_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tar Pit Tough Guy Tripwire 1
//--------------------------------------------------------------------------------------------------
bool gt_TarPitToughGuyTripwire1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto4B5CBF2A_g;
    int auto4B5CBF2A_u;
    unit auto4B5CBF2A_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto4B5CBF2A_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4B5CBF2A_u = UnitGroupCount(auto4B5CBF2A_g, c_unitCountAll);
    for (;; auto4B5CBF2A_u -= 1) {
        auto4B5CBF2A_var = UnitGroupUnitFromEnd(auto4B5CBF2A_g, auto4B5CBF2A_u);
        if (auto4B5CBF2A_var == null) { break; }
        gf_AddUnittoPrimalZergAttackers(auto4B5CBF2A_var, UnitGetPosition(auto4B5CBF2A_var));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TarPitToughGuyTripwire1_Init () {
    gt_TarPitToughGuyTripwire1 = TriggerCreate("gt_TarPitToughGuyTripwire1_Func");
    TriggerAddEventUnitRegion(gt_TarPitToughGuyTripwire1, null, RegionFromId(9), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tar Pit Tough Guy Tripwire 2
//--------------------------------------------------------------------------------------------------
bool gt_TarPitToughGuyTripwire2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoD4D44E01_g;
    int autoD4D44E01_u;
    unit autoD4D44E01_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoD4D44E01_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD4D44E01_u = UnitGroupCount(autoD4D44E01_g, c_unitCountAll);
    for (;; autoD4D44E01_u -= 1) {
        autoD4D44E01_var = UnitGroupUnitFromEnd(autoD4D44E01_g, autoD4D44E01_u);
        if (autoD4D44E01_var == null) { break; }
        gf_AddUnittoPrimalZergAttackers(autoD4D44E01_var, UnitGetPosition(autoD4D44E01_var));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TarPitToughGuyTripwire2_Init () {
    gt_TarPitToughGuyTripwire2 = TriggerCreate("gt_TarPitToughGuyTripwire2_Func");
    TriggerAddEventUnitRegion(gt_TarPitToughGuyTripwire2, null, RegionFromId(6), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tar Pit Relic Tripwire
//--------------------------------------------------------------------------------------------------
bool gt_TarPitRelicTripwire_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_relicZerglings;

    // Automatic Variable Declarations
    unitgroup auto8DA85543_g;
    int auto8DA85543_u;
    unit auto8DA85543_var;
    unitgroup auto5A7009F4_g;
    int auto5A7009F4_u;
    unit auto5A7009F4_var;
    unitgroup auto8153D5F4_g;
    int auto8153D5F4_u;
    unit auto8153D5F4_var;

    // Variable Initialization
    lv_relicZerglings = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto8DA85543_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(91), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8DA85543_u = UnitGroupCount(auto8DA85543_g, c_unitCountAll);
    for (;; auto8DA85543_u -= 1) {
        auto8DA85543_var = UnitGroupUnitFromEnd(auto8DA85543_g, auto8DA85543_u);
        if (auto8DA85543_var == null) { break; }
        UnitGroupRemove(gv_primalZergWanderers, auto8DA85543_var);
        UnitGroupAdd(lv_relicZerglings, auto8DA85543_var);
    }
    while (true) {
        if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(91), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
            auto8153D5F4_g = lv_relicZerglings;
            auto8153D5F4_u = UnitGroupCount(auto8153D5F4_g, c_unitCountAll);
            for (;; auto8153D5F4_u -= 1) {
                auto8153D5F4_var = UnitGroupUnitFromEnd(auto8153D5F4_g, auto8153D5F4_u);
                if (auto8153D5F4_var == null) { break; }
                UnitIssueOrder(auto8153D5F4_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(libNtve_gf_ClosestUnitToPoint(UnitGetPosition(auto8153D5F4_var), UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(91), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)))), c_orderQueueReplace);
            }
        }
        else {
            auto5A7009F4_g = lv_relicZerglings;
            auto5A7009F4_u = UnitGroupCount(auto5A7009F4_g, c_unitCountAll);
            for (;; auto5A7009F4_u -= 1) {
                auto5A7009F4_var = UnitGroupUnitFromEnd(auto5A7009F4_g, auto5A7009F4_u);
                if (auto5A7009F4_var == null) { break; }
                if ((RandomInt(1, 5) == 1)) {
                    UnitIssueOrder(auto5A7009F4_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(91))), c_orderQueueReplace);
                }

            }
        }
        Wait(1.0, c_timeAI);
        if (((UnitGroupCount(lv_relicZerglings, c_unitCountAlive) == 0) || (gv_yagdraEngaged == true))) {
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TarPitRelicTripwire_Init () {
    gt_TarPitRelicTripwire = TriggerCreate("gt_TarPitRelicTripwire_Func");
    TriggerAddEventUnitRegion(gt_TarPitRelicTripwire, null, RegionFromId(91), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tar Pit Mega Tripwire
//--------------------------------------------------------------------------------------------------
bool gt_TarPitMegaTripwire_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoC4FCFB1F_n;
    int autoC4FCFB1F_i;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_yagdraRescueKill = true;
    autoC4FCFB1F_n = libHots_gf_DifficultyValueInt2(12, 12, 20);
    for (autoC4FCFB1F_i = 1; autoC4FCFB1F_i <= autoC4FCFB1F_n; autoC4FCFB1F_i += 1) {
        if ((gv_yagdraEngaged == true)) {
            return true;
        }

        gf_SpawnTarPitGuy(RegionRandomPoint(RegionFromId(11)));
        Wait(0.1, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TarPitMegaTripwire_Init () {
    gt_TarPitMegaTripwire = TriggerCreate("gt_TarPitMegaTripwire_Func");
    TriggerAddEventUnitRegion(gt_TarPitMegaTripwire, null, RegionFromId(10), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Yagdra Final Attack
//--------------------------------------------------------------------------------------------------
bool gt_YagdraFinalAttack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoC5414AD6_g;
    int autoC5414AD6_u;
    unit autoC5414AD6_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoC5414AD6_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(20), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC5414AD6_u = UnitGroupCount(autoC5414AD6_g, c_unitCountAll);
    for (;; autoC5414AD6_u -= 1) {
        autoC5414AD6_var = UnitGroupUnitFromEnd(autoC5414AD6_g, autoC5414AD6_u);
        if (autoC5414AD6_var == null) { break; }
        gf_AddUnittoPrimalZergAttackers(autoC5414AD6_var, UnitGetPosition(autoC5414AD6_var));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_YagdraFinalAttack_Init () {
    gt_YagdraFinalAttack = TriggerCreate("gt_YagdraFinalAttack_Func");
    TriggerAddEventUnitRegion(gt_YagdraFinalAttack, null, RegionFromId(20), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Yagdra Reinforcements 2
//--------------------------------------------------------------------------------------------------
bool gt_YagdraReinforcements2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_friendlyRoaches;

    // Automatic Variable Declarations
    unitgroup autoC92C2A08_g;
    int autoC92C2A08_u;
    unit autoC92C2A08_var;
    unitgroup autoEFC9D74A_g;
    int autoEFC9D74A_u;
    unit autoEFC9D74A_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }

        if (!((gv_yagdraEngaged == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_friendlyRoaches = gf_GetRoachCount(gv_pLAYER_01_USER);
    if ((lv_friendlyRoaches >= 6)) {
        return true;
    }
    else {
        lv_friendlyRoaches = (6 - lv_friendlyRoaches);
        if ((lv_friendlyRoaches > libHots_gf_DifficultyValueInt2(6, 6, 5))) {
            lv_friendlyRoaches = libHots_gf_DifficultyValueInt2(6, 6, 5);
        }

        libNtve_gf_CreateUnitsAtPoint2(lv_friendlyRoaches, "PrimalRoach", 0, gv_pLAYER_02_DOMINION2222, PointFromId(659));
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(660)), c_orderQueueReplace);
        autoC92C2A08_g = UnitLastCreatedGroup();
        autoC92C2A08_u = UnitGroupCount(autoC92C2A08_g, c_unitCountAll);
        for (;; autoC92C2A08_u -= 1) {
            autoC92C2A08_var = UnitGroupUnitFromEnd(autoC92C2A08_g, autoC92C2A08_u);
            if (autoC92C2A08_var == null) { break; }
            UnitSetState(autoC92C2A08_var, c_unitStateTargetable, false);
        }
        SoundPlay(SoundLink("Event_Zerus03_RoachGroupVox", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(1.0, c_timeReal);
        TriggerExecute(gt_YagdraReinforcements2Q, true, false);
        Wait(1.0, c_timeReal);
        autoEFC9D74A_g = UnitGroup(null, gv_pLAYER_02_DOMINION2222, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoEFC9D74A_u = UnitGroupCount(autoEFC9D74A_g, c_unitCountAll);
        for (;; autoEFC9D74A_u -= 1) {
            autoEFC9D74A_var = UnitGroupUnitFromEnd(autoEFC9D74A_g, autoEFC9D74A_u);
            if (autoEFC9D74A_var == null) { break; }
            libNtve_gf_RescueUnit(autoEFC9D74A_var, gv_pLAYER_01_USER, true);
            UnitSetState(autoEFC9D74A_var, c_unitStateTargetable, true);
        }
        TriggerExecute(gt_ShowArmyButtonForRescue, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_YagdraReinforcements2_Init () {
    gt_YagdraReinforcements2 = TriggerCreate("gt_YagdraReinforcements2_Func");
    TriggerAddEventUnitRegion(gt_YagdraReinforcements2, null, RegionFromId(59), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Yagdra Reinforcements 2 Q
//--------------------------------------------------------------------------------------------------
bool gt_YagdraReinforcements2Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus03|Line00016", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_YagdraReinforcements2Q_Init () {
    gt_YagdraReinforcements2Q = TriggerCreate("gt_YagdraReinforcements2Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Yagdra Boss Fight Controller
//--------------------------------------------------------------------------------------------------
bool gt_YagdraBossFightController_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    timer lv_tunnelTimer;
    bool lv_tunnelTimerStarted;
    point lv_fireballTarget;
    int lv_currentTunnelPoint;
    int lv_tunnelPointIndex;
    int lv_randomTunnelIndex;
    int[6] lv_randomTunnelArray;
    int lv_targetTunnelPoint;
    int lv_firebreathReady;
    point lv_targetPoint;
    point lv_eggSpawnPoint;
    unit lv_collisionDummy;

    // Automatic Variable Declarations
    const int autoBE609019_n = 3;
    int autoBE609019_i;
    const int autoEF96D1AC_ae = 8;
    const int autoEF96D1AC_ai = 1;

    // Variable Initialization
    lv_tunnelTimer = TimerCreate();
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_randomTunnelArray[init_i] = 1;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_yagdraTimer, c_timerDurationInfinite, false, c_timeAI);
    VisRevealerCreate(gv_pLAYER_02_DOMINION, RegionFromId(23));
    VisRevealerEnable(VisRevealerLastCreated(), true);
    gv_yagdraBossRevealerEnemy = VisRevealerLastCreated();
    libSwaC_gf_DisplaySingularBossBarSwarmCampaign("Assets\\Textures\\btn-boss-yagdra.dds", StringExternal("Param/Value/E76E14FD"), 100);
    libSwaC_gf_SetSingularBossBarBossSwarmCampaign(gv_yagdra, true);
    libSwaC_gf_ShowHideSingularBossBarSwarmCampaign(true);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackUnit_Zerg", false);
    PingDestroy(gv_yagdraPing);
    libSCDH_gf_CreateHeroPing(gv_yagdra, libSCDH_ge_HeroPingType_Enemy);
    gv_yagdraPing = PingLastCreated();
    PingSetTooltip(gv_yagdraPing, StringExternal("Param/Value/5F0279A7"));
    gv_yagdraTunnelPoints[1] = PointFromId(668);
    gv_yagdraTunnelPoints[2] = PointFromId(669);
    gv_yagdraTunnelPoints[3] = PointFromId(670);
    gv_yagdraTunnelPoints[4] = PointFromId(675);
    gv_yagdraTunnelPoints[5] = PointFromId(674);
    gv_yagdraTunnelPoints[6] = PointFromId(673);
    gv_yagdraTunnelPoints[7] = PointFromId(672);
    gv_yagdraTunnelPoints[8] = PointFromId(671);
    TriggerExecute(gt_YagdraInitFireballPoints, true, false);
    UnitSetCustomValue(gv_yagdra, 0, 8.0);
    TriggerEnable(gt_YagdraIdle, true);
    TriggerEnable(gt_UnitTakesDamage, true);
    lv_firebreathReady = RandomInt(6, 8);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION222, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SlivanCollisionDummy", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION, UnitGetPosition(gv_yagdra));
    lv_collisionDummy = UnitLastCreated();
    libNtve_gf_PauseUnit(lv_collisionDummy, true);
    while (true) {
        lv_firebreathReady -= 1;
        if ((lv_tunnelTimerStarted == false) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_yagdra), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
            lv_tunnelTimerStarted = true;
            if ((UnitGetPropertyFixed(gv_yagdra, c_unitPropLifePercent, c_unitPropCurrent) < 40.0)) {
                TimerStart(lv_tunnelTimer, libHots_gf_DifficultyValueFixed2(5.0, 5.0, 3.0), false, c_timeAI);
            }
            else {
                TimerStart(lv_tunnelTimer, 6.0, false, c_timeAI);
            }
        }

        if ((lv_firebreathReady <= 0) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_yagdra), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_yagdra), 16.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
            lv_firebreathReady = RandomInt(7, 10);
            gv_yagdraAbilityUsed = false;
            libNtve_gf_UnitCreateFacingPoint(1, "ZerusBossTarget", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION222, UnitGetPosition(gv_kerrigan), UnitGetPosition(gv_yagdra));
            gv_yagdraHelperUnit = UnitLastCreated();
            UnitIssueOrder(gv_yagdra, OrderTargetingUnit(AbilityCommand("YagdraFirebreath", 0), gv_yagdraHelperUnit), c_orderQueueReplace);
            TriggerExecute(gt_YagdraFirebreathQ, true, false);
            while (true) {
                Wait(0.1, c_timeAI);
                if ((gv_yagdraAbilityUsed == true)) {
                    break;
                }
                else {
                    UnitSetPosition(gv_yagdraHelperUnit, UnitGetPosition(gv_kerrigan), false);
                    UnitIssueOrder(gv_yagdra, OrderTargetingUnit(AbilityCommand("YagdraFirebreath", 0), gv_yagdraHelperUnit), c_orderQueueReplace);
                }
            }
            gv_yagdraIdle = false;
            Wait(2.0, c_timeAI);
            for (autoBE609019_i = 1; autoBE609019_i <= autoBE609019_n; autoBE609019_i += 1) {
                UnitIssueOrder(gv_yagdraHelperUnit, OrderTargetingUnit(AbilityCommand("move", 0), gv_kerrigan), c_orderQueueReplace);
                Wait(1.0, c_timeAI);
            }
            while (!((gv_yagdraIdle == true))) {
                Wait(0.1, c_timeAI);
            }
            UnitRemove(gv_yagdraHelperUnit);
            Wait(0.1, c_timeAI);
        }
        else {
            lv_fireballTarget = UnitGetPosition(UnitGroupRandomUnit(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(23), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
            gv_yagdraAbilityUsed = false;
            TriggerExecute(gt_YagdraFireballQ, true, false);
            UnitIssueOrder(gv_yagdra, OrderTargetingPoint(AbilityCommand("YagdraFireball", 0), lv_fireballTarget), c_orderQueueReplace);
            while (true) {
                Wait(0.1, c_timeAI);
                if ((gv_yagdraAbilityUsed == true)) {
                    break;
                }
                else {
                    UnitIssueOrder(gv_yagdra, OrderTargetingPoint(AbilityCommand("YagdraFireball", 0), lv_fireballTarget), c_orderQueueReplace);
                }
            }
            if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
                while (!((UnitGetFacing(gv_yagdra) >= (AngleBetweenPoints(UnitGetPosition(gv_yagdra), lv_fireballTarget) - 5.0)) && (UnitGetFacing(gv_yagdra) <= (AngleBetweenPoints(UnitGetPosition(gv_yagdra), lv_fireballTarget) + 5.0)))) {
                    Wait(0.1, c_timeAI);
                }
                gf_YagdraMultipleFireballs(lv_fireballTarget);
            }

            gv_yagdraIdle = false;
            while (!((gv_yagdraIdle == true))) {
                Wait(0.1, c_timeAI);
            }
            Wait(0.1, c_timeAI);
        }
        if ((lv_tunnelTimerStarted == true) && (TimerGetRemaining(lv_tunnelTimer) < 0.2)) {
            lv_tunnelTimerStarted = false;
            lv_currentTunnelPoint = FixedToInt(UnitGetCustomValue(gv_yagdra, 0));
            lv_randomTunnelIndex = 0;
            lv_tunnelPointIndex = 1;
            for ( ; ( (autoEF96D1AC_ai >= 0 && lv_tunnelPointIndex <= autoEF96D1AC_ae) || (autoEF96D1AC_ai < 0 && lv_tunnelPointIndex >= autoEF96D1AC_ae) ) ; lv_tunnelPointIndex += autoEF96D1AC_ai ) {
                if ((lv_randomTunnelIndex >= 5)) {
                    break;
                }

                if (((lv_tunnelPointIndex == lv_currentTunnelPoint) || (lv_tunnelPointIndex == (lv_currentTunnelPoint + 1)) || (lv_tunnelPointIndex == (lv_currentTunnelPoint - 1)) || ((lv_tunnelPointIndex == 1) && (lv_currentTunnelPoint == 8)) || ((lv_tunnelPointIndex == 8) && (lv_currentTunnelPoint == 1)))) {
                }
                else {
                    lv_randomTunnelIndex += 1;
                    lv_randomTunnelArray[lv_randomTunnelIndex] = lv_tunnelPointIndex;
                }
            }
            lv_targetTunnelPoint = lv_randomTunnelArray[RandomInt(1, 5)];
            lv_targetPoint = gv_yagdraTunnelPoints[lv_targetTunnelPoint];
            gv_yagdraAbilityUsed = false;
            lv_eggSpawnPoint = UnitGetPosition(gv_yagdra);
            UnitIssueOrder(gv_yagdra, OrderTargetingPoint(AbilityCommand("YagdraTunnel", 0), lv_targetPoint), c_orderQueueReplace);
            UnitSetCustomValue(gv_yagdra, 0, IntToFixed(lv_targetTunnelPoint));
            while (true) {
                Wait(0.1, c_timeAI);
                if ((gv_yagdraAbilityUsed == true)) {
                    break;
                }
                else {
                    lv_targetPoint = gv_yagdraTunnelPoints[lv_targetTunnelPoint];
                    UnitIssueOrder(gv_yagdra, OrderTargetingPoint(AbilityCommand("YagdraTunnel", 0), lv_targetPoint), c_orderQueueReplace);
                }
            }
            UnitSetState(gv_yagdra, c_unitStateTargetable, false);
            UnitSetState(gv_yagdra, c_unitStateSelectable, false);
            UnitSetState(gv_yagdra, c_unitStateStatusBar, false);
            UnitSetState(gv_yagdra, c_unitStateInvulnerable, true);
            gv_yagdraIdle = false;
            Wait(0.9, c_timeAI);
            UnitRemove(lv_collisionDummy);
            if ((gv_yagdraFirstTunnel == false)) {
                if ((RandomInt(1, 2) == 1)) {
                    gf_CreatePrimalEggs(libHots_gf_DifficultyValueInt2(6, 6, 10), 0, RegionCircle(lv_eggSpawnPoint, 2.5), gv_pLAYER_02_DOMINION);
                }
                else {
                    gf_CreatePrimalEggs(libHots_gf_DifficultyValueInt2(0, 0, 3), 1, RegionCircle(lv_eggSpawnPoint, 2.0), gv_pLAYER_02_DOMINION);
                }
            }
            else {
                gf_CreatePrimalEggs(libHots_gf_DifficultyValueInt2(0, 0, 3), 1, RegionCircle(lv_eggSpawnPoint, 2.0), gv_pLAYER_02_DOMINION);
            }
            Wait(2.0, c_timeAI);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "SlivanCollisionDummy", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION, UnitGetPosition(gv_yagdra));
            lv_collisionDummy = UnitLastCreated();
            libNtve_gf_PauseUnit(lv_collisionDummy, true);
            Wait(1.0, c_timeAI);
            CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 0.25, 0.5, 1.5);
            SoundPlayOnUnit(SoundLink("Aberration_Unburrow", -1), PlayerGroupAll(), gv_yagdra, 8.0, 100.0, 0.0);
            while (!((gv_yagdraIdle == true))) {
                Wait(0.1, c_timeAI);
            }
            UnitSetState(gv_yagdra, c_unitStateTargetable, true);
            UnitSetState(gv_yagdra, c_unitStateSelectable, true);
            UnitSetState(gv_yagdra, c_unitStateStatusBar, true);
            UnitSetState(gv_yagdra, c_unitStateInvulnerable, false);
        }

        Wait(0.1, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_YagdraBossFightController_Init () {
    gt_YagdraBossFightController = TriggerCreate("gt_YagdraBossFightController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Yagdra Init Fireball Points
//--------------------------------------------------------------------------------------------------
bool gt_YagdraInitFireballPoints_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_yagdraFireballPoints[1] = PointFromId(3699);
    gv_yagdraFireballPoints[2] = PointFromId(3700);
    gv_yagdraFireballPoints[3] = PointFromId(3701);
    gv_yagdraFireballPoints[4] = PointFromId(3703);
    gv_yagdraFireballPoints[5] = PointFromId(3704);
    gv_yagdraFireballPoints[6] = PointFromId(3705);
    gv_yagdraFireballPoints[7] = PointFromId(3706);
    gv_yagdraFireballPoints[8] = PointFromId(3707);
    gv_yagdraFireballPoints[9] = PointFromId(3708);
    gv_yagdraFireballPoints[10] = PointFromId(3709);
    gv_yagdraFireballPoints[11] = PointFromId(3710);
    gv_yagdraFireballPoints[12] = PointFromId(3711);
    gv_yagdraFireballPoints[13] = PointFromId(3712);
    gv_yagdraFireballPoints[14] = PointFromId(3713);
    gv_yagdraFireballPoints[15] = PointFromId(3714);
    gv_yagdraFireballPoints[16] = PointFromId(3715);
    gv_yagdraFireballPoints[17] = PointFromId(3717);
    gv_yagdraFireballPoints[18] = PointFromId(3716);
    gv_yagdraFireballPoints[19] = PointFromId(3718);
    gv_yagdraFireballPoints[20] = PointFromId(3719);
    gv_yagdraFireballPoints[21] = PointFromId(3720);
    gv_yagdraFireballPoints[22] = PointFromId(3721);
    gv_yagdraFireballPoints[23] = PointFromId(3722);
    gv_yagdraFireballPoints[24] = PointFromId(3723);
    gv_yagdraFireballPoints[25] = PointFromId(3724);
    gv_yagdraFireballPoints[26] = PointFromId(3725);
    gv_yagdraFireballPoints[27] = PointFromId(3726);
    gv_yagdraFireballPoints[28] = PointFromId(3727);
    gv_yagdraFireballPoints[29] = PointFromId(3728);
    gv_yagdraFireballPoints[30] = PointFromId(3729);
    gv_yagdraFireballPoints[31] = PointFromId(3730);
    gv_yagdraFireballPoints[32] = PointFromId(3731);
    gv_yagdraFireballPoints[33] = PointFromId(3761);
    gv_yagdraFireballPoints[34] = PointFromId(3732);
    gv_yagdraFireballPoints[35] = PointFromId(3733);
    gv_yagdraFireballPoints[36] = PointFromId(3734);
    gv_yagdraFireballPoints[37] = PointFromId(3762);
    gv_yagdraFireballPoints[38] = PointFromId(3735);
    gv_yagdraFireballPoints[39] = PointFromId(3736);
    gv_yagdraFireballPoints[40] = PointFromId(3737);
    gv_yagdraFireballPoints[41] = PointFromId(3738);
    gv_yagdraFireballPoints[42] = PointFromId(3739);
    gv_yagdraFireballPoints[43] = PointFromId(3740);
    gv_yagdraFireballPoints[44] = PointFromId(3741);
    gv_yagdraFireballPoints[45] = PointFromId(3742);
    gv_yagdraFireballPoints[46] = PointFromId(3743);
    gv_yagdraFireballPoints[47] = PointFromId(3744);
    gv_yagdraFireballPoints[48] = PointFromId(3745);
    gv_yagdraFireballPoints[49] = PointFromId(3746);
    gv_yagdraFireballPoints[50] = PointFromId(3747);
    gv_yagdraFireballPoints[51] = PointFromId(3748);
    gv_yagdraFireballPoints[52] = PointFromId(3749);
    gv_yagdraFireballPoints[53] = PointFromId(3750);
    gv_yagdraFireballPoints[54] = PointFromId(3751);
    gv_yagdraFireballPoints[55] = PointFromId(3752);
    gv_yagdraFireballPoints[56] = PointFromId(3753);
    gv_yagdraFireballPoints[57] = PointFromId(3754);
    gv_yagdraFireballPoints[58] = PointFromId(3755);
    gv_yagdraFireballPoints[59] = PointFromId(3756);
    gv_yagdraFireballPoints[60] = PointFromId(3757);
    gv_yagdraFireballPoints[61] = PointFromId(3758);
    gv_yagdraFireballPoints[62] = PointFromId(3759);
    gv_yagdraFireballPoints[63] = PointFromId(3760);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_YagdraInitFireballPoints_Init () {
    gt_YagdraInitFireballPoints = TriggerCreate("gt_YagdraInitFireballPoints_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Yagdra Fireball Q
//--------------------------------------------------------------------------------------------------
bool gt_YagdraFireballQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    Wait(1.0, c_timeReal);
    if ((UnitIsAlive(gv_yagdra) == false)) {
        return true;
    }

    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    if ((TriggerGetExecCount(TriggerGetCurrent()) > 1)) {
        libSwaC_gf_SendTransmissionCampaign(gv_yagdra, "zMission_Zerus03|Line00072", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_DontShowPortrait, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        libSwaC_gf_SendTransmissionCampaign(gv_yagdra, "zMission_Zerus03|Line00005", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_DontShowPortrait, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    if ((gv_inCinematic == false)) {
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    }

    TriggerQueueExit();
    Wait(30.0, c_timeReal);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_YagdraFireballQ_Init () {
    gt_YagdraFireballQ = TriggerCreate("gt_YagdraFireballQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Yagdra Firebreath Q
//--------------------------------------------------------------------------------------------------
bool gt_YagdraFirebreathQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((UnitIsAlive(gv_yagdra) == false)) {
        return true;
    }

    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    libSwaC_gf_SendTransmissionCampaign(gv_yagdra, "zMission_Zerus03|Line00008", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_DontShowPortrait, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    if ((gv_inCinematic == false)) {
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_YagdraFirebreathQ_Init () {
    gt_YagdraFirebreathQ = TriggerCreate("gt_YagdraFirebreathQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Yagdra Tunnel Q
//--------------------------------------------------------------------------------------------------
bool gt_YagdraTunnelQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    Wait(1.0, c_timeReal);
    if ((UnitIsAlive(gv_yagdra) == false)) {
        return true;
    }

    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Zerus03|Line00029", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    if ((gv_inCinematic == false)) {
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_YagdraTunnelQ_Init () {
    gt_YagdraTunnelQ = TriggerCreate("gt_YagdraTunnelQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Yagdra Idle
//--------------------------------------------------------------------------------------------------
bool gt_YagdraIdle_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.1, c_timeGame);
    gv_yagdraIdle = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_YagdraIdle_Init () {
    gt_YagdraIdle = TriggerCreate("gt_YagdraIdle_Func");
    TriggerEnable(gt_YagdraIdle, false);
    TriggerAddEventUnitBecomesIdle(gt_YagdraIdle, UnitRefFromVariable("gv_yagdra"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Yagdra Ability Used
//--------------------------------------------------------------------------------------------------
bool gt_YagdraAbilityUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_yagdraAbilityUsed = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_YagdraAbilityUsed_Init () {
    gt_YagdraAbilityUsed = TriggerCreate("gt_YagdraAbilityUsed_Func");
    TriggerAddEventUnitAbility(gt_YagdraAbilityUsed, UnitRefFromVariable("gv_yagdra"), AbilityCommand("YagdraFireball", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_YagdraAbilityUsed, UnitRefFromVariable("gv_yagdra"), AbilityCommand("YagdraFirebreath", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_YagdraAbilityUsed, UnitRefFromVariable("gv_yagdra"), AbilityCommand("YagdraTunnel", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Yagdra Autosave
//--------------------------------------------------------------------------------------------------
bool gt_YagdraAutosave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/284CB2FA"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_YagdraAutosave_Init () {
    gt_YagdraAutosave = TriggerCreate("gt_YagdraAutosave_Func");
    TriggerAddEventUnitRegion(gt_YagdraAutosave, null, RegionFromId(52), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Yagdra Eggs
//--------------------------------------------------------------------------------------------------
bool gt_YagdraEggs_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "YagdraEggSmall") || (UnitGetType(EventUnit()) == "YagdraEggBig")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_yagdraFirstTunnel == true) && (UnitGetType(EventUnit()) == "YagdraEggBig")) {
        gv_yagdraFirstTunnel = false;
        libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(libSwaC_ge_CampaginReticleType_ZergEnemy, libSwaC_ge_CampaginReticleSize_Medium, null, EventUnit(), "Ref_Origin");
    }

    SoundPlay(SoundLink("SS_LeviathanSpawnBomb", -1), PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(gt_YagdraTunnelQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_YagdraEggs_Init () {
    gt_YagdraEggs = TriggerCreate("gt_YagdraEggs_Func");
    TriggerAddEventUnitRegion(gt_YagdraEggs, null, RegionFromId(23), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Yagdra Dies
//--------------------------------------------------------------------------------------------------
bool gt_YagdraDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto4681D162_g;
    int auto4681D162_u;
    unit auto4681D162_var;
    unitgroup autoC38911A3_g;
    int autoC38911A3_u;
    unit autoC38911A3_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerPause(gv_yagdraTimer, true);
    PingDestroy(libHots_gf_PingStoredForUnit(EventUnit(), 1));
    gv_bossLocation = UnitGetPosition(EventUnit());
    gv_bossFacing = UnitGetFacing(EventUnit());
    gv_channelLocation = PointWithOffsetPolar(gv_bossLocation, 4.5, AngleBetweenPoints(gv_bossLocation, UnitGetPosition(gv_kerrigan)));
    if ((RegionContainsPoint(RegionCircle(PointWithOffsetPolar(gv_bossLocation, 4.5, gv_bossFacing), 3.5), gv_channelLocation) == true)) {
        if ((gv_bossFacing >= 90.0) && (gv_bossFacing < 270.0)) {
            gv_channelLocation = PointWithOffsetPolar(gv_bossLocation, 4.5, (AngleBetweenPoints(gv_bossLocation, UnitGetPosition(gv_kerrigan)) + 80.0));
        }
        else {
            gv_channelLocation = PointWithOffsetPolar(gv_bossLocation, 4.5, (AngleBetweenPoints(gv_bossLocation, UnitGetPosition(gv_kerrigan)) - 80.0));
        }
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackUnit_Zerg", true);
    UnitRemove(gv_yagdraHelperUnit);
    TriggerEnable(gt_YagdraIdle, false);
    TriggerEnable(gt_UnitTakesDamage, false);
    TriggerStop(gt_YagdraBossFightController);
    PingDestroy(gv_yagdraPing);
    VisRevealerDestroy(gv_yagdraBossRevealerEnemy);
    if ((UnitIsAlive(gv_kerrigan) == false)) {
        return true;
    }

    auto4681D162_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(23), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4681D162_u = UnitGroupCount(auto4681D162_g, c_unitCountAll);
    for (;; auto4681D162_u -= 1) {
        auto4681D162_var = UnitGroupUnitFromEnd(auto4681D162_g, auto4681D162_u);
        if (auto4681D162_var == null) { break; }
        UnitKill(auto4681D162_var);
    }
    autoC38911A3_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC38911A3_u = UnitGroupCount(autoC38911A3_g, c_unitCountAll);
    for (;; autoC38911A3_u -= 1) {
        autoC38911A3_var = UnitGroupUnitFromEnd(autoC38911A3_g, autoC38911A3_u);
        if (autoC38911A3_var == null) { break; }
        UnitSetState(autoC38911A3_var, c_unitStateInvulnerable, true);
    }
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION222, libNtve_ge_AllianceSetting_Enemy);
    libSwaC_gf_ShowHideSingularBossBarSwarmCampaign(false);
    TriggerExecute(gt_YagdraVictoryShot, true, true);
    TriggerExecute(gt_BossVictoryShotCleanup, true, true);
    TriggerExecute(gt_ObjectiveSlayPrimarchsCreate, true, false);
    libSwaC_gf_SetMissionObjectiveProgress2("ZZerus03Objective01", 1, true, null, true);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    SoundPlay(SoundLink("UI_ObjectiveDiscoveredStinger", -1), PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(gt_KraithInitQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_YagdraDies_Init () {
    gt_YagdraDies = TriggerCreate("gt_YagdraDies_Func");
    TriggerAddEventUnitDied(gt_YagdraDies, UnitRefFromVariable("gv_yagdra"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kraith Init Q
//--------------------------------------------------------------------------------------------------
bool gt_KraithInitQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoB5D25F71_g;
    int autoB5D25F71_u;
    unit autoB5D25F71_var;
    unitgroup auto1580CB7F_g;
    int auto1580CB7F_u;
    unit auto1580CB7F_var;
    unitgroup auto2A400AE2_g;
    int auto2A400AE2_u;
    unit auto2A400AE2_var;
    unitgroup auto3CCD57BF_g;
    int auto3CCD57BF_u;
    unit auto3CCD57BF_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CameraSetData(PlayerGroupAll(), "ZoomedCamera");
    RegionPlayableMapSet(RegionFromId(24));
    gv_relicsRemainingInArea = 1;
    if ((gv_relicsFound >= 1)) {
        libSwaC_gf_SetMissionObjectiveProgress2("ZZerus03Objective03", gv_relicsFound, true, TextReplaceWord(StringExternal("Param/Value/AF3506AA"), StringExternal("Param/Value/B4B53686"), IntToText(gv_relicsRemainingInArea), c_stringReplaceAll, c_stringCase), true);
    }

    TriggerExecute(gt_KraithReinforcements1, true, false);
    TriggerExecute(gt_CaveSpawning1, true, false);
    autoB5D25F71_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionPlayableMap(), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoB5D25F71_u = UnitGroupCount(autoB5D25F71_g, c_unitCountAll);
    for (;; autoB5D25F71_u -= 1) {
        autoB5D25F71_var = UnitGroupUnitFromEnd(autoB5D25F71_g, autoB5D25F71_u);
        if (autoB5D25F71_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoB5D25F71_var, true);
    }
    libNtve_gf_ShowHideUnit(gv_kraith, false);
    libNtve_gf_PauseUnit(gv_kraith, true);
    auto1580CB7F_g = UnitGroup("PrimalUltralisk", gv_pLAYER_02_DOMINION2, RegionFromId(43), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1580CB7F_u = UnitGroupCount(auto1580CB7F_g, c_unitCountAll);
    for (;; auto1580CB7F_u -= 1) {
        auto1580CB7F_var = UnitGroupUnitFromEnd(auto1580CB7F_g, auto1580CB7F_u);
        if (auto1580CB7F_var == null) { break; }
        libNtve_gf_PauseUnit(auto1580CB7F_var, true);
        libNtve_gf_ShowHideUnit(auto1580CB7F_var, false);
    }
    auto2A400AE2_g = UnitGroup("PrimalUltralisk", gv_pLAYER_02_DOMINION2, RegionFromId(44), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2A400AE2_u = UnitGroupCount(auto2A400AE2_g, c_unitCountAll);
    for (;; auto2A400AE2_u -= 1) {
        auto2A400AE2_var = UnitGroupUnitFromEnd(auto2A400AE2_g, auto2A400AE2_u);
        if (auto2A400AE2_var == null) { break; }
        libNtve_gf_PauseUnit(auto2A400AE2_var, true);
        libNtve_gf_ShowHideUnit(auto2A400AE2_var, false);
    }
    auto3CCD57BF_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionFromId(42), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3CCD57BF_u = UnitGroupCount(auto3CCD57BF_g, c_unitCountAll);
    for (;; auto3CCD57BF_u -= 1) {
        auto3CCD57BF_var = UnitGroupUnitFromEnd(auto3CCD57BF_g, auto3CCD57BF_u);
        if (auto3CCD57BF_var == null) { break; }
        gf_AddUnittoPrimalZergWanderers(auto3CCD57BF_var);
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "DehakaRightArm", 0, gv_pLAYER_02_DOMINION2222, PointFromId(4592));
    gv_dehakaLimb = UnitLastCreated();
    libSwaC_gf_SetUnitInfoTextCampaign(UnitLastCreated(), StringExternal("Param/Value/DB7020E3"), StringExternal("Param/Value/9AF4770E"), null);
    libNtve_gf_CreateUnitsAtPoint2(1, "Crabeetle", 0, 0, PointFromId(2476));
    libNtve_gf_CreateUnitsAtPoint2(1, "Crabeetle", 0, 0, PointFromId(3053));
    Wait(1.0, c_timeReal);
    libSwaC_gf_CreateObjectivePing(true, PointFromId(316), StringExternal("Param/Value/152FD787"));
    gv_kraithPing = PingLastCreated();
    VisRevealerEnable(gv_yagdraBossRevealer, false);
    TriggerExecute(gt_InitEggRoom, true, false);
    Wait(6.0, c_timeGame);
    TriggerQueueEnter();
    libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/7720B73D"));
    TriggerQueueExit();
    Wait(2.0, c_timeGame);
    if ((gv_kraithReinforcements1Rescued == false)) {
        SoundPlay(SoundLink("UI_MiniMapPing", -1), PlayerGroupAll(), 100.0, 0.0);
        UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/E19A4E6D"), null, RegionGetCenter(RegionFromId(61)));
        PingCreate(PlayerGroupAll(), "PingAlert", RegionGetCenter(RegionFromId(61)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 6.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KraithInitQ_Init () {
    gt_KraithInitQ = TriggerCreate("gt_KraithInitQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kraith Reinforcements 1
//--------------------------------------------------------------------------------------------------
bool gt_KraithReinforcements1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_friendlyRoaches;
    int lv_friendlyHydras;
    unitgroup lv_reinforcements;

    // Automatic Variable Declarations
    int autoE664DC87_n;
    int autoE664DC87_i;
    int auto0DAC88C7_n;
    int auto0DAC88C7_i;
    unitgroup autoC7293722_g;
    int autoC7293722_u;
    unit autoC7293722_var;
    unitgroup auto779D5F49_g;
    int auto779D5F49_u;
    unit auto779D5F49_var;

    // Variable Initialization
    lv_reinforcements = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_friendlyRoaches = gf_GetRoachCount(gv_pLAYER_01_USER);
    lv_friendlyHydras = gf_GetHydraliskCount(gv_pLAYER_01_USER);
    if ((lv_friendlyRoaches >= 6) && (lv_friendlyHydras >= 4)) {
        return true;
    }
    else {
        lv_friendlyRoaches = (6 - lv_friendlyRoaches);
        lv_friendlyHydras = (4 - lv_friendlyHydras);
        autoE664DC87_n = lv_friendlyRoaches;
        for (autoE664DC87_i = 1; autoE664DC87_i <= autoE664DC87_n; autoE664DC87_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalRoach", 0, gv_pLAYER_02_DOMINION2222, RegionRandomPoint(RegionCircle(PointFromId(661), 3.0)));
            UnitGroupAdd(lv_reinforcements, UnitLastCreated());
        }
        auto0DAC88C7_n = lv_friendlyHydras;
        for (auto0DAC88C7_i = 1; auto0DAC88C7_i <= auto0DAC88C7_n; auto0DAC88C7_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalHydralisk", 0, gv_pLAYER_02_DOMINION2222, RegionRandomPoint(RegionCircle(PointFromId(661), 3.0)));
            UnitGroupAdd(lv_reinforcements, UnitLastCreated());
        }
        while (!((libNtve_gf_UnitInRegion(gv_kerrigan, RegionFromId(61)) == true))) {
            Wait(0.25, c_timeGame);
        }
        gv_kraithReinforcements1Rescued = true;
        autoC7293722_g = lv_reinforcements;
        autoC7293722_u = UnitGroupCount(autoC7293722_g, c_unitCountAll);
        for (;; autoC7293722_u -= 1) {
            autoC7293722_var = UnitGroupUnitFromEnd(autoC7293722_g, autoC7293722_u);
            if (autoC7293722_var == null) { break; }
            UnitIssueOrder(autoC7293722_var, OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(autoC7293722_var), 4.0, UnitGetPosition(gv_kerrigan))), c_orderQueueReplace);
            UnitSetState(autoC7293722_var, c_unitStateTargetable, false);
        }
        SoundPlay(SoundLink("Event_Zerus03_RoachHydraVox", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(1.5, c_timeGame);
        auto779D5F49_g = lv_reinforcements;
        auto779D5F49_u = UnitGroupCount(auto779D5F49_g, c_unitCountAll);
        for (;; auto779D5F49_u -= 1) {
            auto779D5F49_var = UnitGroupUnitFromEnd(auto779D5F49_g, auto779D5F49_u);
            if (auto779D5F49_var == null) { break; }
            libNtve_gf_RescueUnit(auto779D5F49_var, gv_pLAYER_01_USER, true);
            UnitSetState(auto779D5F49_var, c_unitStateTargetable, true);
        }
        TriggerExecute(gt_KraithReinforcements1Q, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KraithReinforcements1_Init () {
    gt_KraithReinforcements1 = TriggerCreate("gt_KraithReinforcements1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kraith Reinforcements 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_KraithReinforcements1Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus03|Line00019", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KraithReinforcements1Q_Init () {
    gt_KraithReinforcements1Q = TriggerCreate("gt_KraithReinforcements1Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Egg Room
//--------------------------------------------------------------------------------------------------
bool gt_InitEggRoom_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_CreatePrimalEggs(libHots_gf_DifficultyValueInt2(10, 10, 12), 0, RegionFromId(76), gv_pLAYER_02_DOMINION2);
    gf_CreatePrimalEggs(libHots_gf_DifficultyValueInt2(12, 12, 16), 0, RegionFromId(124), gv_pLAYER_02_DOMINION2);
    gf_CreatePrimalEggs(libHots_gf_DifficultyValueInt2(16, 16, 20), 0, RegionFromId(125), gv_pLAYER_02_DOMINION2);
    gf_CreatePrimalEggs(libHots_gf_DifficultyValueInt2(20, 20, 24), 0, RegionFromId(127), gv_pLAYER_02_DOMINION2);
    gf_CreatePrimalEggs(0, 1, RegionFromId(70), gv_pLAYER_02_DOMINION2);
    gf_CreatePrimalEggs(0, 1, RegionFromId(123), gv_pLAYER_02_DOMINION2);
    gf_CreatePrimalEggs(0, 1, RegionFromId(126), gv_pLAYER_02_DOMINION2);
    gf_CreatePrimalEggs(0, 1, RegionFromId(128), gv_pLAYER_02_DOMINION2);
    gf_CreatePrimalEggs(0, 1, RegionFromId(133), gv_pLAYER_02_DOMINION2);
    gf_CreatePrimalEggs(0, 1, RegionFromId(134), gv_pLAYER_02_DOMINION2);
    gf_CreatePrimalEggs(0, 1, RegionFromId(135), gv_pLAYER_02_DOMINION2);
    gf_CreatePrimalEggs(0, libHots_gf_DifficultyValueInt2(0, 0, 1), RegionFromId(33), gv_pLAYER_02_DOMINION2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitEggRoom_Init () {
    gt_InitEggRoom = TriggerCreate("gt_InitEggRoom_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Egg Room Tripwire 1 2
//--------------------------------------------------------------------------------------------------
bool gt_EggRoomTripwire12_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto112E1CF6_g;
    int auto112E1CF6_u;
    unit auto112E1CF6_var;
    unitgroup auto129C947A_g;
    int auto129C947A_u;
    unit auto129C947A_var;
    unitgroup autoDAEF5093_g;
    int autoDAEF5093_u;
    unit autoDAEF5093_var;
    unitgroup autoA840B39F_g;
    int autoA840B39F_u;
    unit autoA840B39F_var;
    unitgroup autoDD34E219_g;
    int autoDD34E219_u;
    unit autoDD34E219_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_EggRoomQ, true, false);
    auto112E1CF6_g = UnitGroup("YagdraEggSmall", gv_pLAYER_02_DOMINION2, RegionFromId(76), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto112E1CF6_u = UnitGroupCount(auto112E1CF6_g, c_unitCountAll);
    for (;; auto112E1CF6_u -= 1) {
        auto112E1CF6_var = UnitGroupUnitFromEnd(auto112E1CF6_g, auto112E1CF6_u);
        if (auto112E1CF6_var == null) { break; }
        gv_eggCounter += 1;
        if ((gv_eggCounter == libHots_gf_DifficultyValueInt2(8, 8, 6))) {
            gv_eggCounter = 0;
            UnitIssueOrder(auto112E1CF6_var, Order(AbilityCommand("YagdraEggTrain", 1)), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(auto112E1CF6_var, Order(AbilityCommand("YagdraEggTrain", 0)), c_orderQueueReplace);
        }
        Wait(libHots_gf_DifficultyValueFixed2(0.8, 0.8, 0.7), c_timeAI);
        if ((gv_kraithEngaged == true)) {
            return true;
        }

    }
    auto129C947A_g = UnitGroup("YagdraEggBig", gv_pLAYER_02_DOMINION2, RegionFromId(70), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto129C947A_u = UnitGroupCount(auto129C947A_g, c_unitCountAll);
    for (;; auto129C947A_u -= 1) {
        auto129C947A_var = UnitGroupUnitFromEnd(auto129C947A_g, auto129C947A_u);
        if (auto129C947A_var == null) { break; }
        UnitIssueOrder(auto129C947A_var, Order(AbilityCommand("YagdraEggTrain", 2)), c_orderQueueReplace);
    }
    Wait(libHots_gf_DifficultyValueFixed2(4.0, 4.0, 2.0), c_timeAI);
    autoDAEF5093_g = UnitGroup("YagdraEggSmall", gv_pLAYER_02_DOMINION2, RegionFromId(124), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDAEF5093_u = UnitGroupCount(autoDAEF5093_g, c_unitCountAll);
    for (;; autoDAEF5093_u -= 1) {
        autoDAEF5093_var = UnitGroupUnitFromEnd(autoDAEF5093_g, autoDAEF5093_u);
        if (autoDAEF5093_var == null) { break; }
        gv_eggCounter += 1;
        if ((gv_eggCounter == libHots_gf_DifficultyValueInt2(8, 8, 6))) {
            gv_eggCounter = 0;
            UnitIssueOrder(autoDAEF5093_var, Order(AbilityCommand("YagdraEggTrain", 1)), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(autoDAEF5093_var, Order(AbilityCommand("YagdraEggTrain", 0)), c_orderQueueReplace);
        }
        Wait(libHots_gf_DifficultyValueFixed2(0.8, 0.8, 0.7), c_timeAI);
        if ((gv_kraithEngaged == true)) {
            return true;
        }

    }
    autoA840B39F_g = UnitGroup("YagdraEggBig", gv_pLAYER_02_DOMINION2, RegionFromId(123), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA840B39F_u = UnitGroupCount(autoA840B39F_g, c_unitCountAll);
    for (;; autoA840B39F_u -= 1) {
        autoA840B39F_var = UnitGroupUnitFromEnd(autoA840B39F_g, autoA840B39F_u);
        if (autoA840B39F_var == null) { break; }
        UnitIssueOrder(autoA840B39F_var, Order(AbilityCommand("YagdraEggTrain", 2)), c_orderQueueReplace);
    }
    autoDD34E219_g = UnitGroup("YagdraEggSmall", gv_pLAYER_02_DOMINION2, RegionFromId(93), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDD34E219_u = UnitGroupCount(autoDD34E219_g, c_unitCountAll);
    for (;; autoDD34E219_u -= 1) {
        autoDD34E219_var = UnitGroupUnitFromEnd(autoDD34E219_g, autoDD34E219_u);
        if (autoDD34E219_var == null) { break; }
        gv_eggCounter += 1;
        if ((gv_eggCounter == libHots_gf_DifficultyValueInt2(8, 8, 6))) {
            gv_eggCounter = 0;
            UnitIssueOrder(autoDD34E219_var, Order(AbilityCommand("YagdraEggTrain", 1)), c_orderQueueAddToEnd);
        }
        else {
            UnitIssueOrder(autoDD34E219_var, Order(AbilityCommand("YagdraEggTrain", 0)), c_orderQueueAddToEnd);
        }
        Wait(libHots_gf_DifficultyValueFixed2(0.8, 0.8, 0.7), c_timeAI);
        if ((gv_kraithEngaged == true)) {
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EggRoomTripwire12_Init () {
    gt_EggRoomTripwire12 = TriggerCreate("gt_EggRoomTripwire12_Func");
    TriggerAddEventUnitRegion(gt_EggRoomTripwire12, null, RegionFromId(149), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Egg Room Tripwire 3 4
//--------------------------------------------------------------------------------------------------
bool gt_EggRoomTripwire34_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoC6EADB85_g;
    int autoC6EADB85_u;
    unit autoC6EADB85_var;
    unitgroup auto884A9507_g;
    int auto884A9507_u;
    unit auto884A9507_var;
    unitgroup auto0996A9A0_g;
    int auto0996A9A0_u;
    unit auto0996A9A0_var;
    unitgroup auto77444B5D_g;
    int auto77444B5D_u;
    unit auto77444B5D_var;
    unitgroup autoDB2CE2E0_g;
    int autoDB2CE2E0_u;
    unit autoDB2CE2E0_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoC6EADB85_g = UnitGroup("YagdraEggSmall", gv_pLAYER_02_DOMINION2, RegionFromId(125), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC6EADB85_u = UnitGroupCount(autoC6EADB85_g, c_unitCountAll);
    for (;; autoC6EADB85_u -= 1) {
        autoC6EADB85_var = UnitGroupUnitFromEnd(autoC6EADB85_g, autoC6EADB85_u);
        if (autoC6EADB85_var == null) { break; }
        gv_eggCounter += 1;
        if ((gv_eggCounter == libHots_gf_DifficultyValueInt2(8, 8, 6))) {
            gv_eggCounter = 0;
            UnitIssueOrder(autoC6EADB85_var, Order(AbilityCommand("YagdraEggTrain", 1)), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(autoC6EADB85_var, Order(AbilityCommand("YagdraEggTrain", 0)), c_orderQueueReplace);
        }
        Wait(libHots_gf_DifficultyValueFixed2(0.8, 0.8, 0.7), c_timeAI);
        if ((gv_kraithEngaged == true)) {
            return true;
        }

    }
    auto884A9507_g = UnitGroup("YagdraEggBig", gv_pLAYER_02_DOMINION2, RegionFromId(126), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto884A9507_u = UnitGroupCount(auto884A9507_g, c_unitCountAll);
    for (;; auto884A9507_u -= 1) {
        auto884A9507_var = UnitGroupUnitFromEnd(auto884A9507_g, auto884A9507_u);
        if (auto884A9507_var == null) { break; }
        UnitIssueOrder(auto884A9507_var, Order(AbilityCommand("YagdraEggTrain", 2)), c_orderQueueReplace);
    }
    Wait(libHots_gf_DifficultyValueFixed2(4.0, 4.0, 3.0), c_timeAI);
    auto0996A9A0_g = UnitGroup("YagdraEggBig", gv_pLAYER_02_DOMINION2, RegionFromId(128), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0996A9A0_u = UnitGroupCount(auto0996A9A0_g, c_unitCountAll);
    for (;; auto0996A9A0_u -= 1) {
        auto0996A9A0_var = UnitGroupUnitFromEnd(auto0996A9A0_g, auto0996A9A0_u);
        if (auto0996A9A0_var == null) { break; }
        UnitIssueOrder(auto0996A9A0_var, Order(AbilityCommand("YagdraEggTrain", 2)), c_orderQueueReplace);
    }
    auto77444B5D_g = UnitGroup("YagdraEggSmall", gv_pLAYER_02_DOMINION2, RegionFromId(127), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto77444B5D_u = UnitGroupCount(auto77444B5D_g, c_unitCountAll);
    for (;; auto77444B5D_u -= 1) {
        auto77444B5D_var = UnitGroupUnitFromEnd(auto77444B5D_g, auto77444B5D_u);
        if (auto77444B5D_var == null) { break; }
        gv_eggCounter += 1;
        if ((gv_eggCounter == libHots_gf_DifficultyValueInt2(8, 8, 6))) {
            gv_eggCounter = 0;
            UnitIssueOrder(auto77444B5D_var, Order(AbilityCommand("YagdraEggTrain", 1)), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(auto77444B5D_var, Order(AbilityCommand("YagdraEggTrain", 0)), c_orderQueueReplace);
        }
        Wait(libHots_gf_DifficultyValueFixed2(0.8, 0.8, 0.7), c_timeAI);
        if ((gv_kraithEngaged == true)) {
            return true;
        }

    }
    autoDB2CE2E0_g = UnitGroup("YagdraEggSmall", gv_pLAYER_02_DOMINION2, RegionFromId(94), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDB2CE2E0_u = UnitGroupCount(autoDB2CE2E0_g, c_unitCountAll);
    for (;; autoDB2CE2E0_u -= 1) {
        autoDB2CE2E0_var = UnitGroupUnitFromEnd(autoDB2CE2E0_g, autoDB2CE2E0_u);
        if (autoDB2CE2E0_var == null) { break; }
        gv_eggCounter += 1;
        if ((gv_eggCounter == libHots_gf_DifficultyValueInt2(8, 8, 6))) {
            gv_eggCounter = 0;
            UnitIssueOrder(autoDB2CE2E0_var, Order(AbilityCommand("YagdraEggTrain", 1)), c_orderQueueAddToEnd);
        }
        else {
            UnitIssueOrder(autoDB2CE2E0_var, Order(AbilityCommand("YagdraEggTrain", 0)), c_orderQueueAddToEnd);
        }
        Wait(libHots_gf_DifficultyValueFixed2(0.8, 0.8, 0.7), c_timeAI);
        if ((gv_kraithEngaged == true)) {
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EggRoomTripwire34_Init () {
    gt_EggRoomTripwire34 = TriggerCreate("gt_EggRoomTripwire34_Func");
    TriggerAddEventUnitRegion(gt_EggRoomTripwire34, null, RegionFromId(131), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Egg Room Q
//--------------------------------------------------------------------------------------------------
bool gt_EggRoomQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto66EFD10E_g;
    int auto66EFD10E_u;
    unit auto66EFD10E_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto66EFD10E_g = UnitGroup("YagdraEggBig", gv_pLAYER_02_DOMINION2, RegionFromId(150), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto66EFD10E_u = UnitGroupCount(auto66EFD10E_g, c_unitCountAll);
    for (;; auto66EFD10E_u -= 1) {
        auto66EFD10E_var = UnitGroupUnitFromEnd(auto66EFD10E_g, auto66EFD10E_u);
        if (auto66EFD10E_var == null) { break; }
        libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(libSwaC_ge_CampaginReticleType_ZergEnemy, libSwaC_ge_CampaginReticleSize_Medium, null, auto66EFD10E_var, "Ref_Origin");
    }
    Wait(0.25, c_timeReal);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Zerus03|Line00020", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EggRoomQ_Init () {
    gt_EggRoomQ = TriggerCreate("gt_EggRoomQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Big Eggs Relic Tripwire
//--------------------------------------------------------------------------------------------------
bool gt_BigEggsRelicTripwire_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto73327380_g;
    int auto73327380_u;
    unit auto73327380_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto73327380_g = UnitGroup("YagdraEggBig", gv_pLAYER_02_DOMINION2, RegionFromId(139), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto73327380_u = UnitGroupCount(auto73327380_g, c_unitCountAll);
    for (;; auto73327380_u -= 1) {
        auto73327380_var = UnitGroupUnitFromEnd(auto73327380_g, auto73327380_u);
        if (auto73327380_var == null) { break; }
        UnitIssueOrder(auto73327380_var, Order(AbilityCommand("YagdraEggTrain", 2)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BigEggsRelicTripwire_Init () {
    gt_BigEggsRelicTripwire = TriggerCreate("gt_BigEggsRelicTripwire_Func");
    TriggerAddEventUnitRegion(gt_BigEggsRelicTripwire, null, RegionFromId(139), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cave Spawning 1
//--------------------------------------------------------------------------------------------------
bool gt_CaveSpawning1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto4D51A705_n;
    int auto4D51A705_i;
    int auto6E07CA61_n;
    int auto6E07CA61_i;
    int auto724B0C1A_n;
    int auto724B0C1A_i;
    int auto2EA2D14A_n;
    int auto2EA2D14A_i;
    int autoAA7D546A_n;
    int autoAA7D546A_i;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto4D51A705_n = libHots_gf_DifficultyValueInt2(3, 3, 4);
    for (auto4D51A705_i = 1; auto4D51A705_i <= auto4D51A705_n; auto4D51A705_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, "PrimalZergling", 0, gv_pLAYER_02_DOMINION2, PointFromId(767));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(770)), c_orderQueueReplace);
        gf_AddUnittoPrimalZergAttackers(UnitLastCreated(), RegionRandomPoint(RegionFromId(144)));
        libNtve_gf_CreateUnitsAtPoint2(1, "PrimalZergling", 0, gv_pLAYER_02_DOMINION2, PointFromId(768));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(771)), c_orderQueueReplace);
        gf_AddUnittoPrimalZergAttackers(UnitLastCreated(), RegionRandomPoint(RegionFromId(144)));
        libNtve_gf_CreateUnitsAtPoint2(1, "PrimalZergling", 0, gv_pLAYER_02_DOMINION2, PointFromId(769));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(772)), c_orderQueueReplace);
        gf_AddUnittoPrimalZergAttackers(UnitLastCreated(), RegionRandomPoint(RegionFromId(144)));
        Wait(0.0625, c_timeGame);
    }
    auto6E07CA61_n = libHots_gf_DifficultyValueInt2(1, 1, 1);
    for (auto6E07CA61_i = 1; auto6E07CA61_i <= auto6E07CA61_n; auto6E07CA61_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, "PrimalHydralisk", 0, gv_pLAYER_02_DOMINION2, PointFromId(768));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(771)), c_orderQueueReplace);
        gf_AddUnittoPrimalZergAttackers(UnitLastCreated(), RegionRandomPoint(RegionFromId(144)));
    }
    Wait(10.0, c_timeAI);
    auto724B0C1A_n = libHots_gf_DifficultyValueInt2(3, 3, 4);
    for (auto724B0C1A_i = 1; auto724B0C1A_i <= auto724B0C1A_n; auto724B0C1A_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, "PrimalZergling", 0, gv_pLAYER_02_DOMINION2, PointFromId(767));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(770)), c_orderQueueReplace);
        gf_AddUnittoPrimalZergAttackers(UnitLastCreated(), RegionRandomPoint(RegionFromId(144)));
        libNtve_gf_CreateUnitsAtPoint2(1, "PrimalZergling", 0, gv_pLAYER_02_DOMINION2, PointFromId(768));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(771)), c_orderQueueReplace);
        gf_AddUnittoPrimalZergAttackers(UnitLastCreated(), RegionRandomPoint(RegionFromId(144)));
        libNtve_gf_CreateUnitsAtPoint2(1, "PrimalZergling", 0, gv_pLAYER_02_DOMINION2, PointFromId(769));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(772)), c_orderQueueReplace);
        gf_AddUnittoPrimalZergAttackers(UnitLastCreated(), RegionRandomPoint(RegionFromId(144)));
        Wait(0.0625, c_timeGame);
    }
    auto2EA2D14A_n = libHots_gf_DifficultyValueInt2(1, 1, 1);
    for (auto2EA2D14A_i = 1; auto2EA2D14A_i <= auto2EA2D14A_n; auto2EA2D14A_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, "PrimalHydralisk", 0, gv_pLAYER_02_DOMINION2, PointFromId(767));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(770)), c_orderQueueReplace);
        gf_AddUnittoPrimalZergAttackers(UnitLastCreated(), RegionRandomPoint(RegionFromId(144)));
        libNtve_gf_CreateUnitsAtPoint2(1, "PrimalHydralisk", 0, gv_pLAYER_02_DOMINION2, PointFromId(768));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(771)), c_orderQueueReplace);
        gf_AddUnittoPrimalZergAttackers(UnitLastCreated(), RegionRandomPoint(RegionFromId(144)));
    }
    autoAA7D546A_n = libHots_gf_DifficultyValueInt2(0, 0, 1);
    for (autoAA7D546A_i = 1; autoAA7D546A_i <= autoAA7D546A_n; autoAA7D546A_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, "PrimalHydralisk", 0, gv_pLAYER_02_DOMINION2, PointFromId(769));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(772)), c_orderQueueReplace);
        gf_AddUnittoPrimalZergAttackers(UnitLastCreated(), RegionRandomPoint(RegionFromId(144)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CaveSpawning1_Init () {
    gt_CaveSpawning1 = TriggerCreate("gt_CaveSpawning1_Func");
    TriggerAddEventUnitRegion(gt_CaveSpawning1, null, RegionFromId(14), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cave Spawning 2
//--------------------------------------------------------------------------------------------------
bool gt_CaveSpawning2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto2BE31052_n;
    int auto2BE31052_i;
    int auto3DF0DFB8_n;
    int auto3DF0DFB8_i;
    int auto280BA31B_n;
    int auto280BA31B_i;
    int auto96FBF300_n;
    int auto96FBF300_i;
    int autoEE48DCCB_n;
    int autoEE48DCCB_i;
    int auto249A7775_n;
    int auto249A7775_i;
    int auto4084B139_n;
    int auto4084B139_i;
    int auto77B81813_n;
    int auto77B81813_i;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto2BE31052_n = libHots_gf_DifficultyValueInt2(3, 3, 4);
    for (auto2BE31052_i = 1; auto2BE31052_i <= auto2BE31052_n; auto2BE31052_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, "PrimalZergling", 0, gv_pLAYER_02_DOMINION2, PointFromId(767));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(770)), c_orderQueueReplace);
        gf_AddUnittoPrimalZergAttackers(UnitLastCreated(), RegionRandomPoint(RegionFromId(144)));
        libNtve_gf_CreateUnitsAtPoint2(1, "PrimalZergling", 0, gv_pLAYER_02_DOMINION2, PointFromId(768));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(771)), c_orderQueueReplace);
        gf_AddUnittoPrimalZergAttackers(UnitLastCreated(), RegionRandomPoint(RegionFromId(144)));
        libNtve_gf_CreateUnitsAtPoint2(1, "PrimalZergling", 0, gv_pLAYER_02_DOMINION2, PointFromId(769));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(772)), c_orderQueueReplace);
        gf_AddUnittoPrimalZergAttackers(UnitLastCreated(), RegionRandomPoint(RegionFromId(144)));
        Wait(0.0625, c_timeGame);
    }
    auto3DF0DFB8_n = libHots_gf_DifficultyValueInt2(1, 1, 1);
    for (auto3DF0DFB8_i = 1; auto3DF0DFB8_i <= auto3DF0DFB8_n; auto3DF0DFB8_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, "PrimalHydralisk", 0, gv_pLAYER_02_DOMINION2, PointFromId(767));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(770)), c_orderQueueReplace);
        gf_AddUnittoPrimalZergAttackers(UnitLastCreated(), RegionRandomPoint(RegionFromId(144)));
        libNtve_gf_CreateUnitsAtPoint2(1, "PrimalHydralisk", 0, gv_pLAYER_02_DOMINION2, PointFromId(768));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(771)), c_orderQueueReplace);
        gf_AddUnittoPrimalZergAttackers(UnitLastCreated(), RegionRandomPoint(RegionFromId(144)));
    }
    auto280BA31B_n = libHots_gf_DifficultyValueInt2(0, 0, 1);
    for (auto280BA31B_i = 1; auto280BA31B_i <= auto280BA31B_n; auto280BA31B_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, "PrimalHydralisk", 0, gv_pLAYER_02_DOMINION2, PointFromId(769));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(772)), c_orderQueueReplace);
        gf_AddUnittoPrimalZergAttackers(UnitLastCreated(), RegionRandomPoint(RegionFromId(144)));
    }
    Wait(10.0, c_timeAI);
    SoundPlay(SoundLink("Event_Zerus03_PrimalGroupAttackVox", -1), PlayerGroupAll(), 100.0, 0.0);
    auto96FBF300_n = libHots_gf_DifficultyValueInt2(1, 1, 1);
    for (auto96FBF300_i = 1; auto96FBF300_i <= auto96FBF300_n; auto96FBF300_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, "PrimalUltralisk", 0, gv_pLAYER_02_DOMINION2, PointFromId(767));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(770)), c_orderQueueReplace);
        gf_AddUnittoPrimalZergAttackers(UnitLastCreated(), RegionRandomPoint(RegionFromId(144)));
    }
    autoEE48DCCB_n = libHots_gf_DifficultyValueInt2(0, 0, 1);
    for (autoEE48DCCB_i = 1; autoEE48DCCB_i <= autoEE48DCCB_n; autoEE48DCCB_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, "PrimalUltralisk", 0, gv_pLAYER_02_DOMINION2, PointFromId(769));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(772)), c_orderQueueReplace);
        gf_AddUnittoPrimalZergAttackers(UnitLastCreated(), RegionRandomPoint(RegionFromId(144)));
    }
    auto249A7775_n = libHots_gf_DifficultyValueInt2(1, 1, 1);
    for (auto249A7775_i = 1; auto249A7775_i <= auto249A7775_n; auto249A7775_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, "PrimalRoach", 0, gv_pLAYER_02_DOMINION2, PointFromId(768));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(771)), c_orderQueueReplace);
        gf_AddUnittoPrimalZergAttackers(UnitLastCreated(), RegionRandomPoint(RegionFromId(144)));
    }
    Wait(1.0, c_timeAI);
    auto4084B139_n = libHots_gf_DifficultyValueInt2(3, 3, 4);
    for (auto4084B139_i = 1; auto4084B139_i <= auto4084B139_n; auto4084B139_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, "PrimalZergling", 0, gv_pLAYER_02_DOMINION2, PointFromId(767));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(770)), c_orderQueueReplace);
        gf_AddUnittoPrimalZergAttackers(UnitLastCreated(), RegionRandomPoint(RegionFromId(144)));
        libNtve_gf_CreateUnitsAtPoint2(1, "PrimalZergling", 0, gv_pLAYER_02_DOMINION2, PointFromId(768));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(771)), c_orderQueueReplace);
        gf_AddUnittoPrimalZergAttackers(UnitLastCreated(), RegionRandomPoint(RegionFromId(144)));
        libNtve_gf_CreateUnitsAtPoint2(1, "PrimalZergling", 0, gv_pLAYER_02_DOMINION2, PointFromId(769));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(772)), c_orderQueueReplace);
        gf_AddUnittoPrimalZergAttackers(UnitLastCreated(), RegionRandomPoint(RegionFromId(144)));
        Wait(0.0625, c_timeGame);
    }
    auto77B81813_n = libHots_gf_DifficultyValueInt2(1, 1, 1);
    for (auto77B81813_i = 1; auto77B81813_i <= auto77B81813_n; auto77B81813_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, "PrimalRoach", 0, gv_pLAYER_02_DOMINION2, PointFromId(768));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(771)), c_orderQueueReplace);
        gf_AddUnittoPrimalZergAttackers(UnitLastCreated(), RegionRandomPoint(RegionFromId(144)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CaveSpawning2_Init () {
    gt_CaveSpawning2 = TriggerCreate("gt_CaveSpawning2_Func");
    TriggerAddEventUnitRegion(gt_CaveSpawning2, null, RegionFromId(31), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Switch To Lava Ambience
//--------------------------------------------------------------------------------------------------
bool gt_SwitchToLavaAmbience_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_SwitchToZerusAmbience, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_ZerusLava", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwitchToLavaAmbience_Init () {
    gt_SwitchToLavaAmbience = TriggerCreate("gt_SwitchToLavaAmbience_Func");
    TriggerEnable(gt_SwitchToLavaAmbience, false);
    TriggerAddEventUnitRegion(gt_SwitchToLavaAmbience, UnitRefFromVariable("gv_kerrigan"), RegionFromId(63), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Switch To Zerus Ambience
//--------------------------------------------------------------------------------------------------
bool gt_SwitchToZerusAmbience_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_SwitchToLavaAmbience, true);
    TriggerEnable(gt_SwitchToSwampAmbience, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Zerus", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwitchToZerusAmbience_Init () {
    gt_SwitchToZerusAmbience = TriggerCreate("gt_SwitchToZerusAmbience_Func");
    TriggerAddEventUnitRegion(gt_SwitchToZerusAmbience, UnitRefFromVariable("gv_kerrigan"), RegionFromId(110), true);
    TriggerAddEventUnitRegion(gt_SwitchToZerusAmbience, UnitRefFromVariable("gv_kerrigan"), RegionFromId(69), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cliff Spike Tripwire 1
//--------------------------------------------------------------------------------------------------
bool gt_CliffSpikeTripwire1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }

        if (!((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlay(SoundLink("Brutalisk_Roar", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(0.5, c_timeAI);
    gf_BreakUltraliskSpikesinRegion(RegionFromId(44));
    UnitRemove(UnitFromId(1310));
    UnitRemove(UnitFromId(1309));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CliffSpikeTripwire1_Init () {
    gt_CliffSpikeTripwire1 = TriggerCreate("gt_CliffSpikeTripwire1_Func");
    TriggerAddEventUnitRegion(gt_CliffSpikeTripwire1, null, RegionFromId(68), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cliff Spike Tripwire 2
//--------------------------------------------------------------------------------------------------
bool gt_CliffSpikeTripwire2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto055E9330_g;
    int auto055E9330_u;
    unit auto055E9330_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto055E9330_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionFromId(36), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto055E9330_u = UnitGroupCount(auto055E9330_g, c_unitCountAll);
    for (;; auto055E9330_u -= 1) {
        auto055E9330_var = UnitGroupUnitFromEnd(auto055E9330_g, auto055E9330_u);
        if (auto055E9330_var == null) { break; }
        gf_AddUnittoPrimalZergAttackers(auto055E9330_var, UnitGetPosition(auto055E9330_var));
    }
    SoundPlay(SoundLink("Brutalisk_Roar", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(0.5, c_timeAI);
    gf_BreakUltraliskSpikesinRegion(RegionFromId(43));
    Wait(1.0, c_timeAI);
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        gf_BreakUltraliskSpikesinRegion(RegionFromId(44));
        UnitRemove(UnitFromId(1310));
        UnitRemove(UnitFromId(1309));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CliffSpikeTripwire2_Init () {
    gt_CliffSpikeTripwire2 = TriggerCreate("gt_CliffSpikeTripwire2_Func");
    TriggerAddEventUnitRegion(gt_CliffSpikeTripwire2, null, RegionFromId(40), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kraith Reinforcements 2
//--------------------------------------------------------------------------------------------------
bool gt_KraithReinforcements2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_friendlyRoaches;
    int lv_friendlyHydras;

    // Automatic Variable Declarations
    unitgroup auto0298F8B3_g;
    int auto0298F8B3_u;
    unit auto0298F8B3_var;
    unitgroup autoE11FC8CB_g;
    int autoE11FC8CB_u;
    unit autoE11FC8CB_var;
    unitgroup auto7C75D84D_g;
    int auto7C75D84D_u;
    unit auto7C75D84D_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_friendlyRoaches = gf_GetRoachCount(gv_pLAYER_01_USER);
    lv_friendlyHydras = gf_GetHydraliskCount(gv_pLAYER_01_USER);
    if ((lv_friendlyRoaches >= 6) && (lv_friendlyHydras >= 4)) {
        return true;
    }
    else {
        lv_friendlyRoaches = (6 - lv_friendlyRoaches);
        if ((lv_friendlyRoaches > libHots_gf_DifficultyValueInt2(6, 6, 5))) {
            lv_friendlyRoaches = libHots_gf_DifficultyValueInt2(6, 6, 5);
        }

        lv_friendlyHydras = (4 - lv_friendlyHydras);
        if ((lv_friendlyHydras > libHots_gf_DifficultyValueInt2(4, 4, 3))) {
            lv_friendlyHydras = libHots_gf_DifficultyValueInt2(4, 4, 3);
        }

        if ((lv_friendlyRoaches > 0)) {
            libNtve_gf_CreateUnitsAtPoint2(lv_friendlyRoaches, "PrimalRoach", 0, gv_pLAYER_02_DOMINION2222, PointFromId(1651));
            auto0298F8B3_g = UnitLastCreatedGroup();
            auto0298F8B3_u = UnitGroupCount(auto0298F8B3_g, c_unitCountAll);
            for (;; auto0298F8B3_u -= 1) {
                auto0298F8B3_var = UnitGroupUnitFromEnd(auto0298F8B3_g, auto0298F8B3_u);
                if (auto0298F8B3_var == null) { break; }
                UnitSetState(auto0298F8B3_var, c_unitStateTargetable, false);
            }
            UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1652)), c_orderQueueReplace);
        }

        if ((lv_friendlyHydras > 0)) {
            libNtve_gf_CreateUnitsAtPoint2(lv_friendlyHydras, "PrimalHydralisk", 0, gv_pLAYER_02_DOMINION2222, PointFromId(1651));
            autoE11FC8CB_g = UnitLastCreatedGroup();
            autoE11FC8CB_u = UnitGroupCount(autoE11FC8CB_g, c_unitCountAll);
            for (;; autoE11FC8CB_u -= 1) {
                autoE11FC8CB_var = UnitGroupUnitFromEnd(autoE11FC8CB_g, autoE11FC8CB_u);
                if (autoE11FC8CB_var == null) { break; }
                UnitSetState(autoE11FC8CB_var, c_unitStateTargetable, false);
            }
            UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1652)), c_orderQueueReplace);
        }

        Wait(1.0, c_timeReal);
        SoundPlay(SoundLink("Event_Zerus03_RoachHydraVox", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(1.0, c_timeReal);
        TriggerExecute(gt_KraithReinforcements2Q, true, false);
        Wait(1.0, c_timeReal);
        auto7C75D84D_g = UnitGroup(null, gv_pLAYER_02_DOMINION2222, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto7C75D84D_u = UnitGroupCount(auto7C75D84D_g, c_unitCountAll);
        for (;; auto7C75D84D_u -= 1) {
            auto7C75D84D_var = UnitGroupUnitFromEnd(auto7C75D84D_g, auto7C75D84D_u);
            if (auto7C75D84D_var == null) { break; }
            libNtve_gf_RescueUnit(auto7C75D84D_var, gv_pLAYER_01_USER, true);
            UnitSetState(auto7C75D84D_var, c_unitStateTargetable, true);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KraithReinforcements2_Init () {
    gt_KraithReinforcements2 = TriggerCreate("gt_KraithReinforcements2_Func");
    TriggerAddEventUnitRegion(gt_KraithReinforcements2, null, RegionFromId(67), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kraith Reinforcements 2 Q
//--------------------------------------------------------------------------------------------------
bool gt_KraithReinforcements2Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus03|Line00051", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KraithReinforcements2Q_Init () {
    gt_KraithReinforcements2Q = TriggerCreate("gt_KraithReinforcements2Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pre Kraith Tripwire
//--------------------------------------------------------------------------------------------------
bool gt_PreKraithTripwire_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_musicPlaying;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        if ((gv_kraithEngaged == true)) {
            return true;
        }

        if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(51), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 0), c_unitCountAlive) >= 1)) {
            if ((lv_musicPlaying == false)) {
                lv_musicPlaying = true;
                SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZZerus03MusicPreBoss", c_soundtrackCueAny, c_soundtrackIndexAny, true);
            }

        }
        else {
            if ((lv_musicPlaying == true)) {
                lv_musicPlaying = false;
                SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZZerus03MusicMain", c_soundtrackCueAny, c_soundtrackIndexAny, true);
            }

        }
        Wait(1.0, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PreKraithTripwire_Init () {
    gt_PreKraithTripwire = TriggerCreate("gt_PreKraithTripwire_Func");
    TriggerAddEventUnitRegion(gt_PreKraithTripwire, null, RegionFromId(51), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kraith Boss Fight Controller
//--------------------------------------------------------------------------------------------------
bool gt_KraithBossFightController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_helperUnit;
    unit lv_barrageTarget;
    timer lv_spineBarrageTimer;
    point lv_crashingChargePoint;

    // Automatic Variable Declarations
    int auto09BACD8A_n;
    int auto09BACD8A_i;

    // Variable Initialization
    lv_spineBarrageTimer = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_kraithTimer, c_timerDurationInfinite, false, c_timeAI);
    libSwaC_gf_DisplaySingularBossBarSwarmCampaign("Assets\\Textures\\btn-boss-kraith.dds", StringExternal("Param/Value/379B3BB7"), 100);
    libSwaC_gf_SetSingularBossBarBossSwarmCampaign(gv_kraith, true);
    libSwaC_gf_ShowHideSingularBossBarSwarmCampaign(true);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackUnit_Zerg", false);
    TriggerEnable(gt_KraithIdle, true);
    TriggerEnable(gt_UnitTakesDamage, true);
    PingDestroy(gv_yagdraPing);
    PingDestroy(gv_kraithPing);
    libSCDH_gf_CreateHeroPing(gv_kraith, libSCDH_ge_HeroPingType_Enemy);
    gv_kraithPing = PingLastCreated();
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/03688D93"));
    PingSetScale(PingLastCreated(), 1.0);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION222, libNtve_ge_AllianceSetting_Neutral);
    TriggerExecute(gt_InitKraithPoints, true, false);
    TriggerEnable(gt_KraithAdds, true);
    while (true) {
        if ((UnitGetPropertyFixed(gv_kraith, c_unitPropLifePercent, c_unitPropCurrent) > 15.0)) {
            TriggerExecute(gt_KraithSpineBarrageQ, true, false);
            lv_barrageTarget = UnitGroupRandomUnit(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(47), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
            libNtve_gf_UnitCreateFacingPoint(1, "ZerusBossTarget", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION222, PointWithOffsetPolar(UnitGetPosition(gv_kraith), 3.0, AngleBetweenPoints(UnitGetPosition(gv_kraith), UnitGetPosition(lv_barrageTarget))), UnitGetPosition(lv_barrageTarget));
            lv_helperUnit = UnitLastCreated();
            UnitSetPropertyFixed(lv_helperUnit, c_unitPropMovementSpeed, libNtve_gf_DifficultyValueFixed(1.2, 1.2, 1.8, 2.0));
            gf_KraithHelperUnitMovement(lv_helperUnit, lv_barrageTarget);
            UnitIssueOrder(gv_kraith, OrderTargetingUnit(AbilityCommand("KraithSpineVolley", 0), lv_helperUnit), c_orderQueueReplace);
            gf_KraithSpineBarrageTargetingUI(lv_helperUnit);
            gv_kraithIdle = false;
            TimerStart(lv_spineBarrageTimer, 12.0, false, c_timeAI);
            while (!(((gv_kraithIdle == true) || (TimerGetRemaining(lv_spineBarrageTimer) < 0.1)))) {
                Wait(0.1, c_timeAI);
            }
            UnitIssueOrder(gv_kraith, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            UnitRemove(lv_helperUnit);
        }

        auto09BACD8A_n = RandomInt(1, 2);
        for (auto09BACD8A_i = 1; auto09BACD8A_i <= auto09BACD8A_n; auto09BACD8A_i += 1) {
            TriggerExecute(gt_KraithChargeQ, true, false);
            UnitIssueOrder(gv_kraith, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(54))), c_orderQueueReplace);
            UnitIssueOrder(gv_kraith, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
            if ((UnitGetPropertyFixed(gv_kraith, c_unitPropLifePercent, c_unitPropCurrent) > 15.0)) {
                Wait(4.0, c_timeAI);
            }
            else {
                Wait(2.0, c_timeAI);
            }
            lv_crashingChargePoint = gf_FindCrashingChargePoint();
            UnitIssueOrder(gv_kraith, OrderTargetingPoint(AbilityCommand("KraithCrashingCharge", 0), lv_crashingChargePoint), c_orderQueueReplace);
            gf_KraithCrashingChargeTargetingUI(lv_crashingChargePoint);
            gv_kraithIdle = false;
            while (!(((gv_kraithIdle == true) || (libNtve_gf_UnitInRegion(gv_kraith, RegionCircle(lv_crashingChargePoint, 2.5)) == true)))) {
                Wait(0.1, c_timeAI);
            }
            if ((libNtve_gf_UnitInRegion(gv_kraith, RegionCircle(lv_crashingChargePoint, 2.5)) == true)) {
                gf_KraithEarthquake(lv_crashingChargePoint);
            }

            UnitIssueOrder(gv_kraith, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
            Wait(3.0, c_timeAI);
        }
        if ((UnitGetPropertyFixed(gv_kraith, c_unitPropLifePercent, c_unitPropCurrent) > 15.0)) {
            UnitIssueOrder(gv_kraith, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(RegionGetCenter(RegionFromId(54)), 10.0))), c_orderQueueReplace);
            UnitIssueOrder(gv_kraith, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
            Wait(2.0, c_timeAI);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KraithBossFightController_Init () {
    gt_KraithBossFightController = TriggerCreate("gt_KraithBossFightController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kraith Spine Barrage Q
//--------------------------------------------------------------------------------------------------
bool gt_KraithSpineBarrageQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    libSwaC_gf_SendTransmissionCampaign(gv_kraith, "zMission_Zerus03|Line00007", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_DontShowPortrait, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    if ((gv_inCinematic == false)) {
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    }

    TriggerQueueExit();
    Wait(30.0, c_timeReal);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KraithSpineBarrageQ_Init () {
    gt_KraithSpineBarrageQ = TriggerCreate("gt_KraithSpineBarrageQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kraith Charge Q
//--------------------------------------------------------------------------------------------------
bool gt_KraithChargeQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoB08A73E1_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_kraith, c_unitPropLifePercent, c_unitPropCurrent) > 15.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    if ((gv_kraithChargeFirstTime == true)) {
        gv_kraithChargeFirstTime = false;
        libSwaC_gf_SendTransmissionCampaign(gv_kraith, "zMission_Zerus03|Line00003", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_DontShowPortrait, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        autoB08A73E1_val = RandomInt(1, 4);
        if (autoB08A73E1_val == 1) {
            libSwaC_gf_SendTransmissionCampaign(gv_kraith, "zMission_Zerus03|Line00041", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_DontShowPortrait, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (autoB08A73E1_val == 2) {
            libSwaC_gf_SendTransmissionCampaign(gv_kraith, "zMission_Zerus03|Line00044", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_DontShowPortrait, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (autoB08A73E1_val == 3) {
            libSwaC_gf_SendTransmissionCampaign(gv_kraith, "zMission_Zerus03|Line00002", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_DontShowPortrait, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (autoB08A73E1_val == 4) {
            libSwaC_gf_SendTransmissionCampaign(gv_kraith, "zMission_Zerus03|Line00003", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_DontShowPortrait, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else {
        }
    }
    if ((gv_inCinematic == false)) {
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    }

    TriggerQueueExit();
    Wait(20.0, c_timeReal);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KraithChargeQ_Init () {
    gt_KraithChargeQ = TriggerCreate("gt_KraithChargeQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kraith Idle
//--------------------------------------------------------------------------------------------------
bool gt_KraithIdle_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.1, c_timeGame);
    gv_kraithIdle = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KraithIdle_Init () {
    gt_KraithIdle = TriggerCreate("gt_KraithIdle_Func");
    TriggerEnable(gt_KraithIdle, false);
    TriggerAddEventUnitBecomesIdle(gt_KraithIdle, UnitRefFromVariable("gv_kraith"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kraith Adds
//--------------------------------------------------------------------------------------------------
bool gt_KraithAdds_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION2))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "PrimalZergling"))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(gv_kraith) == false)) {
        UnitRemove(EventUnit());
        return true;
    }

    UnitSetPropertyFixed(EventUnit(), c_unitPropHeight, 8.0);
    UnitSetHeight(EventUnit(), 0.0, 0.5);
    Wait(0.5, c_timeGame);
    SoundPlayOnUnit(SoundLink("Uni_LandingThudSmall", -1), PlayerGroupAll(), EventUnit(), 0.0, 100.0, 0.0);
    Wait(0.5, c_timeGame);
    gf_AddUnittoPrimalZergAttackers(EventUnit(), UnitGetPosition(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KraithAdds_Init () {
    gt_KraithAdds = TriggerCreate("gt_KraithAdds_Func");
    TriggerEnable(gt_KraithAdds, false);
    TriggerAddEventUnitRegion(gt_KraithAdds, null, RegionFromId(47), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kraith Autosave
//--------------------------------------------------------------------------------------------------
bool gt_KraithAutosave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/0FC1641B"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KraithAutosave_Init () {
    gt_KraithAutosave = TriggerCreate("gt_KraithAutosave_Func");
    TriggerAddEventUnitRegion(gt_KraithAutosave, null, RegionFromId(53), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Kraith Points
//--------------------------------------------------------------------------------------------------
bool gt_InitKraithPoints_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_numberOfKraithRocks += 1;
    gv_kraithRockPoints[gv_numberOfKraithRocks] = PointFromId(1391);
    gv_kraithRocks[gv_numberOfKraithRocks] = ActorFromDoodad(DoodadFromId(1415));
    gv_numberOfKraithRocks += 1;
    gv_kraithRockPoints[gv_numberOfKraithRocks] = PointFromId(1392);
    gv_kraithRocks[gv_numberOfKraithRocks] = ActorFromDoodad(DoodadFromId(1050));
    gv_numberOfKraithRocks += 1;
    gv_kraithRockPoints[gv_numberOfKraithRocks] = PointFromId(1393);
    gv_kraithRocks[gv_numberOfKraithRocks] = ActorFromDoodad(DoodadFromId(1049));
    gv_numberOfKraithRocks += 1;
    gv_kraithRockPoints[gv_numberOfKraithRocks] = PointFromId(1394);
    gv_kraithRocks[gv_numberOfKraithRocks] = ActorFromDoodad(DoodadFromId(1048));
    gv_numberOfKraithRocks += 1;
    gv_kraithRockPoints[gv_numberOfKraithRocks] = PointFromId(1395);
    gv_kraithRocks[gv_numberOfKraithRocks] = ActorFromDoodad(DoodadFromId(1417));
    gv_numberOfKraithRocks += 1;
    gv_kraithRockPoints[gv_numberOfKraithRocks] = PointFromId(1396);
    gv_kraithRocks[gv_numberOfKraithRocks] = ActorFromDoodad(DoodadFromId(1416));
    gv_numberOfKraithRocks += 1;
    gv_kraithRockPoints[gv_numberOfKraithRocks] = PointFromId(1397);
    gv_kraithRocks[gv_numberOfKraithRocks] = ActorFromDoodad(DoodadFromId(1365));
    gv_numberOfKraithRocks += 1;
    gv_kraithRockPoints[gv_numberOfKraithRocks] = PointFromId(1398);
    gv_kraithRocks[gv_numberOfKraithRocks] = ActorFromDoodad(DoodadFromId(998));
    gv_numberOfKraithRocks += 1;
    gv_kraithRockPoints[gv_numberOfKraithRocks] = PointFromId(1399);
    gv_kraithRocks[gv_numberOfKraithRocks] = ActorFromDoodad(DoodadFromId(1047));
    gv_numberOfKraithRocks += 1;
    gv_kraithRockPoints[gv_numberOfKraithRocks] = PointFromId(1400);
    gv_kraithRocks[gv_numberOfKraithRocks] = ActorFromDoodad(DoodadFromId(997));
    gv_numberOfKraithRocks += 1;
    gv_kraithRockPoints[gv_numberOfKraithRocks] = PointFromId(1401);
    gv_kraithRocks[gv_numberOfKraithRocks] = ActorFromDoodad(DoodadFromId(995));
    gv_numberOfKraithRocks += 1;
    gv_kraithRockPoints[gv_numberOfKraithRocks] = PointFromId(1402);
    gv_kraithRocks[gv_numberOfKraithRocks] = ActorFromDoodad(DoodadFromId(994));
    gv_numberOfKraithRocks += 1;
    gv_kraithRockPoints[gv_numberOfKraithRocks] = PointFromId(1403);
    gv_kraithRocks[gv_numberOfKraithRocks] = ActorFromDoodad(DoodadFromId(988));
    gv_numberOfKraithRocks += 1;
    gv_kraithRockPoints[gv_numberOfKraithRocks] = PointFromId(1404);
    gv_kraithRocks[gv_numberOfKraithRocks] = ActorFromDoodad(DoodadFromId(986));
    gv_numberOfKraithRocks += 1;
    gv_kraithRockPoints[gv_numberOfKraithRocks] = PointFromId(1405);
    gv_kraithRocks[gv_numberOfKraithRocks] = ActorFromDoodad(DoodadFromId(985));
    gv_numberOfKraithRocks += 1;
    gv_kraithRockPoints[gv_numberOfKraithRocks] = PointFromId(1406);
    gv_kraithRocks[gv_numberOfKraithRocks] = ActorFromDoodad(DoodadFromId(968));
    gv_numberOfKraithRocks += 1;
    gv_kraithRockPoints[gv_numberOfKraithRocks] = PointFromId(1407);
    gv_kraithRocks[gv_numberOfKraithRocks] = ActorFromDoodad(DoodadFromId(987));
    gv_numberOfKraithRocks += 1;
    gv_kraithRockPoints[gv_numberOfKraithRocks] = PointFromId(1408);
    gv_kraithRocks[gv_numberOfKraithRocks] = ActorFromDoodad(DoodadFromId(990));
    gv_numberOfKraithRocks += 1;
    gv_kraithRockPoints[gv_numberOfKraithRocks] = PointFromId(1409);
    gv_kraithRocks[gv_numberOfKraithRocks] = ActorFromDoodad(DoodadFromId(989));
    gv_numberOfKraithRocks += 1;
    gv_kraithRockPoints[gv_numberOfKraithRocks] = PointFromId(1410);
    gv_kraithRocks[gv_numberOfKraithRocks] = ActorFromDoodad(DoodadFromId(992));
    gv_numberOfKraithRocks += 1;
    gv_kraithRockPoints[gv_numberOfKraithRocks] = PointFromId(1411);
    gv_kraithRocks[gv_numberOfKraithRocks] = ActorFromDoodad(DoodadFromId(993));
    gv_numberOfKraithRocks += 1;
    gv_kraithRockPoints[gv_numberOfKraithRocks] = PointFromId(1432);
    gv_kraithRocks[gv_numberOfKraithRocks] = ActorFromDoodad(DoodadFromId(1051));
    gv_numberOfKraithRocks += 1;
    gv_kraithRockPoints[gv_numberOfKraithRocks] = PointFromId(1431);
    gv_kraithRocks[gv_numberOfKraithRocks] = ActorFromDoodad(DoodadFromId(1052));
    gv_numberOfKraithRocks += 1;
    gv_kraithRockPoints[gv_numberOfKraithRocks] = PointFromId(3655);
    gv_kraithRocks[gv_numberOfKraithRocks] = ActorFromDoodad(DoodadFromId(1053));
    gv_numberOfKraithRocks += 1;
    gv_kraithRockPoints[gv_numberOfKraithRocks] = PointFromId(3656);
    gv_kraithRocks[gv_numberOfKraithRocks] = ActorFromDoodad(DoodadFromId(1737));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitKraithPoints_Init () {
    gt_InitKraithPoints = TriggerCreate("gt_InitKraithPoints_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kraith Dies
//--------------------------------------------------------------------------------------------------
bool gt_KraithDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto7F0B88DC_g;
    int auto7F0B88DC_u;
    unit auto7F0B88DC_var;
    unitgroup auto86E1B8DD_g;
    int auto86E1B8DD_u;
    unit auto86E1B8DD_var;
    unitgroup auto336197AE_g;
    int auto336197AE_u;
    unit auto336197AE_var;
    unitgroup auto5D1A8B87_g;
    int auto5D1A8B87_u;
    unit auto5D1A8B87_var;
    unitgroup auto0F6778D3_g;
    int auto0F6778D3_u;
    unit auto0F6778D3_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerPause(gv_kraithTimer, true);
    gv_bossLocation = PointWithOffsetPolar(UnitGetPosition(EventUnit()), 1.0, UnitGetFacing(EventUnit()));
    if ((RegionContainsPoint(RegionCircle(RegionGetCenter(RegionFromId(54)), 7.0), gv_bossLocation) == true)) {
        gv_channelLocation = PointWithOffsetPolar(gv_bossLocation, 4.5, AngleBetweenPoints(gv_bossLocation, UnitGetPosition(gv_kerrigan)));
    }
    else {
        gv_channelLocation = PointWithOffsetPolar(gv_bossLocation, 4.5, AngleBetweenPoints(gv_bossLocation, RegionGetCenter(RegionFromId(54))));
    }
    TriggerEnable(TriggerGetCurrent(), false);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackUnit_Zerg", true);
    TriggerEnable(gt_KraithIdle, false);
    TriggerEnable(gt_UnitTakesDamage, false);
    TriggerStop(gt_KraithBossFightController);
    PingDestroy(gv_kraithPing);
    VisRevealerDestroy(gv_kraithBossRevealer);
    if ((UnitIsAlive(gv_kerrigan) == false)) {
        return true;
    }

    auto7F0B88DC_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionFromId(47), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7F0B88DC_u = UnitGroupCount(auto7F0B88DC_g, c_unitCountAll);
    for (;; auto7F0B88DC_u -= 1) {
        auto7F0B88DC_var = UnitGroupUnitFromEnd(auto7F0B88DC_g, auto7F0B88DC_u);
        if (auto7F0B88DC_var == null) { break; }
        UnitKill(auto7F0B88DC_var);
    }
    auto86E1B8DD_g = UnitGroup(null, gv_pLAYER_02_DOMINION222, RegionFromId(47), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto86E1B8DD_u = UnitGroupCount(auto86E1B8DD_g, c_unitCountAll);
    for (;; auto86E1B8DD_u -= 1) {
        auto86E1B8DD_var = UnitGroupUnitFromEnd(auto86E1B8DD_g, auto86E1B8DD_u);
        if (auto86E1B8DD_var == null) { break; }
        UnitRemove(auto86E1B8DD_var);
    }
    auto336197AE_g = UnitGroup(null, gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto336197AE_u = UnitGroupCount(auto336197AE_g, c_unitCountAll);
    for (;; auto336197AE_u -= 1) {
        auto336197AE_var = UnitGroupUnitFromEnd(auto336197AE_g, auto336197AE_u);
        if (auto336197AE_var == null) { break; }
        UnitSetState(auto336197AE_var, c_unitStateInvulnerable, true);
    }
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION222, libNtve_ge_AllianceSetting_Enemy);
    libSwaC_gf_ShowHideSingularBossBarSwarmCampaign(false);
    auto5D1A8B87_g = UnitGroup("PathingBlocker2x2", 0, RegionFromId(16), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto5D1A8B87_u = UnitGroupCount(auto5D1A8B87_g, c_unitCountAll);
    for (;; auto5D1A8B87_u -= 1) {
        auto5D1A8B87_var = UnitGroupUnitFromEnd(auto5D1A8B87_g, auto5D1A8B87_u);
        if (auto5D1A8B87_var == null) { break; }
        UnitRemove(auto5D1A8B87_var);
    }
    auto0F6778D3_g = UnitGroup("Blocker4x4", 0, RegionFromId(16), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto0F6778D3_u = UnitGroupCount(auto0F6778D3_g, c_unitCountAll);
    for (;; auto0F6778D3_u -= 1) {
        auto0F6778D3_var = UnitGroupUnitFromEnd(auto0F6778D3_g, auto0F6778D3_u);
        if (auto0F6778D3_var == null) { break; }
        UnitRemove(auto0F6778D3_var);
    }
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(1425)), c_animNameDefault, "Stand Cover", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    TriggerExecute(gt_KraithVictoryShot, true, true);
    TriggerExecute(gt_BossVictoryShotCleanup, true, true);
    TriggerExecute(gt_ObjectiveSlayPrimarchsCreate, true, false);
    libSwaC_gf_SetMissionObjectiveProgress2("ZZerus03Objective01", 2, true, null, true);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    SoundPlay(SoundLink("UI_ObjectiveDiscoveredStinger", -1), PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(gt_SlivanInitQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KraithDies_Init () {
    gt_KraithDies = TriggerCreate("gt_KraithDies_Func");
    TriggerAddEventUnitDied(gt_KraithDies, UnitRefFromVariable("gv_kraith"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slivan Init Q
//--------------------------------------------------------------------------------------------------
bool gt_SlivanInitQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoE3EF6892_g;
    int autoE3EF6892_u;
    unit autoE3EF6892_var;
    unitgroup auto4E1ACD14_g;
    int auto4E1ACD14_u;
    unit auto4E1ACD14_var;
    int auto05B90638_n;
    int auto05B90638_i;
    int autoB4B71867_n;
    int autoB4B71867_i;
    int auto11874272_n;
    int auto11874272_i;
    int autoF489880A_n;
    int autoF489880A_i;
    int auto8B9B6912_n;
    int auto8B9B6912_i;
    int auto57469574_n;
    int auto57469574_i;
    int autoF3BD5F3B_n;
    int autoF3BD5F3B_i;

    // Actions
    if (!runActions) {
        return true;
    }

    VisRevealerEnable(gv_yagdraRescueRevealer, false);
    VisRevealerDestroy(gv_yagdraRescueRevealer);
    CameraSetData(PlayerGroupAll(), "ZoomedCamera");
    RegionPlayableMapSet(RegionFromId(55));
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(71), false, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(92), true, false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(74), 10.0, false);
    gv_relicsRemainingInArea = 1;
    if ((gv_relicsFound >= 1)) {
        libSwaC_gf_SetMissionObjectiveProgress2("ZZerus03Objective03", gv_relicsFound, true, TextReplaceWord(StringExternal("Param/Value/7AD0F53F"), StringExternal("Param/Value/D4110535"), IntToText(gv_relicsRemainingInArea), c_stringReplaceAll, c_stringCase), true);
    }

    Wait(1.0, c_timeReal);
    libSwaC_gf_CreateObjectivePing(true, PointFromId(317), StringExternal("Param/Value/02C2DBCA"));
    gv_slivanPing = PingLastCreated();
    VisRevealerEnable(gv_kraithBossRevealer, false);
    libNtve_gf_CreateUnitsAtPoint2(1, "Artosilope", 0, 0, PointFromId(2765));
    libNtve_gf_CreateUnitsAtPoint2(1, "Artosilope", 0, 0, PointFromId(1654));
    TriggerExecute(gt_InitializeSporeRayPatrols, true, false);
    Wait(0.0625, c_timeGame);
    autoE3EF6892_g = UnitGroup(null, gv_pLAYER_02_DOMINION22, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoE3EF6892_u = UnitGroupCount(autoE3EF6892_g, c_unitCountAll);
    for (;; autoE3EF6892_u -= 1) {
        autoE3EF6892_var = UnitGroupUnitFromEnd(autoE3EF6892_g, autoE3EF6892_u);
        if (autoE3EF6892_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoE3EF6892_var, true);
    }
    VisRevealArea(gv_pLAYER_02_DOMINION22, RegionFromId(129), 0.0, false);
    auto4E1ACD14_g = UnitGroup("PrimalZergling", gv_pLAYER_02_DOMINION22, RegionFromId(81), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4E1ACD14_u = UnitGroupCount(auto4E1ACD14_g, c_unitCountAll);
    for (;; auto4E1ACD14_u -= 1) {
        auto4E1ACD14_var = UnitGroupUnitFromEnd(auto4E1ACD14_g, auto4E1ACD14_u);
        if (auto4E1ACD14_var == null) { break; }
        gf_AddUnittoPrimalZergWanderers(auto4E1ACD14_var);
    }
    auto05B90638_n = libHots_gf_DifficultyValueInt2(16, 16, 20);
    for (auto05B90638_i = 1; auto05B90638_i <= auto05B90638_n; auto05B90638_i += 1) {
        UnitCreate(1, "SlivanCreep", 0, gv_pLAYER_02_DOMINION22, RegionRandomPoint(RegionFromId(78)), libNtve_gf_RandomAngle());
        gf_AddUnittoPrimalZergWanderers(UnitLastCreated());
        UnitGroupAdd(gv_slivanCreepersInitial, UnitLastCreated());
    }
    Wait(0.0625, c_timeGame);
    autoB4B71867_n = libHots_gf_DifficultyValueInt2(12, 12, 16);
    for (autoB4B71867_i = 1; autoB4B71867_i <= autoB4B71867_n; autoB4B71867_i += 1) {
        UnitCreate(1, "SlivanCreep", 0, gv_pLAYER_02_DOMINION22, RegionRandomPoint(RegionFromId(77)), libNtve_gf_RandomAngle());
        gf_AddUnittoPrimalZergWanderers(UnitLastCreated());
        UnitGroupAdd(gv_slivanCreepersInitial, UnitLastCreated());
    }
    Wait(0.0625, c_timeGame);
    TriggerExecute(gt_SlivanCreepersInitial, true, false);
    auto11874272_n = libHots_gf_DifficultyValueInt2(12, 12, 16);
    for (auto11874272_i = 1; auto11874272_i <= auto11874272_n; auto11874272_i += 1) {
        UnitCreate(1, "PrimalZergling", 0, gv_pLAYER_02_DOMINION22, RegionRandomPoint(RegionFromId(82)), libNtve_gf_RandomAngle());
        gf_AddUnittoPrimalZergWanderers(UnitLastCreated());
        UnitGroupAdd(gv_slivanMeleeGroup1, UnitLastCreated());
    }
    Wait(0.0625, c_timeGame);
    UnitGroupAdd(gv_slivanMeleeGroup1, UnitFromId(2746));
    TriggerExecute(gt_PondSiegeGuys1, true, false);
    TriggerExecute(gt_PondSiegeGuys2, true, false);
    TriggerExecute(gt_PondSiegeGuys3, true, false);
    autoF489880A_n = libHots_gf_DifficultyValueInt2(16, 16, 24);
    for (autoF489880A_i = 1; autoF489880A_i <= autoF489880A_n; autoF489880A_i += 1) {
        UnitCreate(1, "SlivanCreep", 0, gv_pLAYER_02_DOMINION22, RegionRandomPoint(RegionFromId(96)), libNtve_gf_RandomAngle());
        gf_AddUnittoPrimalZergWanderers(UnitLastCreated());
        UnitGroupAdd(gv_pondCreepers1, UnitLastCreated());
    }
    Wait(0.0625, c_timeGame);
    auto8B9B6912_n = libHots_gf_DifficultyValueInt2(24, 24, 32);
    for (auto8B9B6912_i = 1; auto8B9B6912_i <= auto8B9B6912_n; auto8B9B6912_i += 1) {
        UnitCreate(1, "SlivanCreep", 0, gv_pLAYER_02_DOMINION22, RegionRandomPoint(RegionFromId(97)), libNtve_gf_RandomAngle());
        gf_AddUnittoPrimalZergWanderers(UnitLastCreated());
        UnitGroupAdd(gv_pondCreepers2, UnitLastCreated());
    }
    Wait(0.0625, c_timeGame);
    UnitGroupAdd(gv_pondCreepers2, UnitFromId(2758));
    auto57469574_n = libHots_gf_DifficultyValueInt2(32, 32, 40);
    for (auto57469574_i = 1; auto57469574_i <= auto57469574_n; auto57469574_i += 1) {
        UnitCreate(1, "SlivanCreep", 0, gv_pLAYER_02_DOMINION22, RegionRandomPoint(RegionFromId(98)), libNtve_gf_RandomAngle());
        gf_AddUnittoPrimalZergWanderers(UnitLastCreated());
        UnitGroupAdd(gv_pondCreepers3, UnitLastCreated());
    }
    Wait(0.0625, c_timeGame);
    TriggerExecute(gt_PondCreepers1, true, false);
    TriggerExecute(gt_PondCreepers2, true, false);
    TriggerExecute(gt_PondCreepers3, true, false);
    autoF3BD5F3B_n = libHots_gf_DifficultyValueInt2(16, 16, 20);
    for (autoF3BD5F3B_i = 1; autoF3BD5F3B_i <= autoF3BD5F3B_n; autoF3BD5F3B_i += 1) {
        UnitCreate(1, "PrimalZergling", 0, gv_pLAYER_02_DOMINION22, RegionRandomPoint(RegionFromId(100)), libNtve_gf_RandomAngle());
        gf_AddUnittoPrimalZergWanderers(UnitLastCreated());
        UnitGroupAdd(gv_slivanMeleeGroup2, UnitLastCreated());
    }
    UnitGroupAdd(gv_slivanMeleeGroup2, UnitFromId(1366));
    UnitGroupAdd(gv_slivanMeleeGroup2, UnitFromId(957));
    UnitGroupAdd(gv_slivanMeleeGroup2, UnitFromId(3902));
    UnitGroupAdd(gv_slivanMeleeGroup2, UnitFromId(2708));
    Wait(6.0, c_timeReal);
    TriggerQueueEnter();
    libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/1ACF8EA7"));
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlivanInitQ_Init () {
    gt_SlivanInitQ = TriggerCreate("gt_SlivanInitQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slivan Reinforcements 1
//--------------------------------------------------------------------------------------------------
bool gt_SlivanReinforcements1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_friendlyRoaches;
    int lv_friendlyHydras;
    int lv_friendlyUltras;
    unitgroup lv_reinforcements;

    // Automatic Variable Declarations
    int autoF5AE0804_n;
    int autoF5AE0804_i;
    int auto3DD9FF70_n;
    int auto3DD9FF70_i;
    int autoBDB8DEA7_n;
    int autoBDB8DEA7_i;
    unitgroup auto6544E1DC_g;
    int auto6544E1DC_u;
    unit auto6544E1DC_var;
    unitgroup autoF1F5117A_g;
    int autoF1F5117A_u;
    unit autoF1F5117A_var;

    // Variable Initialization
    lv_reinforcements = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }

        if (!((gv_kraithEngaged == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_friendlyRoaches = gf_GetRoachCount(gv_pLAYER_01_USER);
    lv_friendlyHydras = gf_GetHydraliskCount(gv_pLAYER_01_USER);
    lv_friendlyUltras = gf_GetUltraliskCount(gv_pLAYER_01_USER);
    if ((lv_friendlyRoaches >= 6) && (lv_friendlyHydras >= 4) && (lv_friendlyUltras >= 1)) {
        return true;
    }
    else {
        lv_friendlyRoaches = (6 - lv_friendlyRoaches);
        lv_friendlyHydras = (4 - lv_friendlyHydras);
        lv_friendlyUltras = (1 - lv_friendlyUltras);
        autoF5AE0804_n = lv_friendlyUltras;
        for (autoF5AE0804_i = 1; autoF5AE0804_i <= autoF5AE0804_n; autoF5AE0804_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalUltralisk", 0, gv_pLAYER_02_DOMINION2222, PointFromId(543));
            UnitGroupAdd(lv_reinforcements, UnitLastCreated());
        }
        auto3DD9FF70_n = lv_friendlyRoaches;
        for (auto3DD9FF70_i = 1; auto3DD9FF70_i <= auto3DD9FF70_n; auto3DD9FF70_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalRoach", 0, gv_pLAYER_02_DOMINION2222, RegionRandomPoint(RegionCircle(PointFromId(2425), 3.0)));
            UnitGroupAdd(lv_reinforcements, UnitLastCreated());
        }
        autoBDB8DEA7_n = lv_friendlyHydras;
        for (autoBDB8DEA7_i = 1; autoBDB8DEA7_i <= autoBDB8DEA7_n; autoBDB8DEA7_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalHydralisk", 0, gv_pLAYER_02_DOMINION2222, RegionRandomPoint(RegionCircle(PointFromId(2425), 3.0)));
            UnitGroupAdd(lv_reinforcements, UnitLastCreated());
        }
        while (!((libNtve_gf_UnitInRegion(gv_kerrigan, RegionFromId(75)) == true))) {
            Wait(0.25, c_timeGame);
        }
        auto6544E1DC_g = lv_reinforcements;
        auto6544E1DC_u = UnitGroupCount(auto6544E1DC_g, c_unitCountAll);
        for (;; auto6544E1DC_u -= 1) {
            auto6544E1DC_var = UnitGroupUnitFromEnd(auto6544E1DC_g, auto6544E1DC_u);
            if (auto6544E1DC_var == null) { break; }
            UnitIssueOrder(auto6544E1DC_var, OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(auto6544E1DC_var), 4.0, UnitGetPosition(gv_kerrigan))), c_orderQueueReplace);
            UnitSetState(auto6544E1DC_var, c_unitStateTargetable, false);
        }
        SoundPlay(SoundLink("Event_Zerus03_RoachHydraVox", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(0.1, c_timeGame);
        libLbty_gf_AutoRevealRegion(RegionFromId(72), RegionFromId(75), gv_pLAYER_01_USER);
        Wait(1.4, c_timeGame);
        autoF1F5117A_g = lv_reinforcements;
        autoF1F5117A_u = UnitGroupCount(autoF1F5117A_g, c_unitCountAll);
        for (;; autoF1F5117A_u -= 1) {
            autoF1F5117A_var = UnitGroupUnitFromEnd(autoF1F5117A_g, autoF1F5117A_u);
            if (autoF1F5117A_var == null) { break; }
            libNtve_gf_RescueUnit(autoF1F5117A_var, gv_pLAYER_01_USER, true);
            UnitSetState(autoF1F5117A_var, c_unitStateTargetable, true);
        }
        TriggerExecute(gt_SilvanReinforcements1Q, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlivanReinforcements1_Init () {
    gt_SlivanReinforcements1 = TriggerCreate("gt_SlivanReinforcements1_Func");
    TriggerAddEventUnitRegion(gt_SlivanReinforcements1, null, RegionFromId(75), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Silvan Reinforcements 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_SilvanReinforcements1Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus03|Line00024", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SilvanReinforcements1Q_Init () {
    gt_SilvanReinforcements1Q = TriggerCreate("gt_SilvanReinforcements1Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slivan Creepers Q
//--------------------------------------------------------------------------------------------------
bool gt_SlivanCreepersQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus03|Line00039", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlivanCreepersQ_Init () {
    gt_SlivanCreepersQ = TriggerCreate("gt_SlivanCreepersQ_Func");
    TriggerAddEventUnitRegion(gt_SlivanCreepersQ, null, RegionFromId(79), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Switch To Swamp Ambience
//--------------------------------------------------------------------------------------------------
bool gt_SwitchToSwampAmbience_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_SwitchToZerusAmbience, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_ZerusSwamp", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwitchToSwampAmbience_Init () {
    gt_SwitchToSwampAmbience = TriggerCreate("gt_SwitchToSwampAmbience_Func");
    TriggerAddEventUnitRegion(gt_SwitchToSwampAmbience, UnitRefFromVariable("gv_kerrigan"), RegionFromId(85), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slivan Creepers Initial
//--------------------------------------------------------------------------------------------------
bool gt_SlivanCreepersInitial_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_numberOfCreepers;

    // Automatic Variable Declarations
    unitgroup autoCBD2E20E_g;
    int autoCBD2E20E_u;
    unit autoCBD2E20E_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_numberOfCreepers = UnitGroupCount(gv_slivanCreepersInitial, c_unitCountAlive);
    while (!(((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(80), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 1), c_unitCountAlive) >= 1) || (UnitGroupCount(gv_slivanCreepersInitial, c_unitCountAlive) < lv_numberOfCreepers)))) {
        Wait(1.0, c_timeAI);
    }
    autoCBD2E20E_g = gv_slivanCreepersInitial;
    autoCBD2E20E_u = UnitGroupCount(autoCBD2E20E_g, c_unitCountAll);
    for (;; autoCBD2E20E_u -= 1) {
        autoCBD2E20E_var = UnitGroupUnitFromEnd(autoCBD2E20E_g, autoCBD2E20E_u);
        if (autoCBD2E20E_var == null) { break; }
        UnitGroupRemove(gv_primalZergWanderers, autoCBD2E20E_var);
        gf_AddUnittoPrimalZergAttackers(autoCBD2E20E_var, UnitGetPosition(autoCBD2E20E_var));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlivanCreepersInitial_Init () {
    gt_SlivanCreepersInitial = TriggerCreate("gt_SlivanCreepersInitial_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Waterfall Tripwire
//--------------------------------------------------------------------------------------------------
bool gt_WaterfallTripwire_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_waterfallRavasaurIntro = true;
    TriggerExecute(gt_RavasaurIntroQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WaterfallTripwire_Init () {
    gt_WaterfallTripwire = TriggerCreate("gt_WaterfallTripwire_Func");
    TriggerAddEventUnitRegion(gt_WaterfallTripwire, null, RegionFromId(19), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ravasaur Tripwire
//--------------------------------------------------------------------------------------------------
bool gt_RavasaurTripwire_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoC334D86A_g;
    int autoC334D86A_u;
    unit autoC334D86A_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoC334D86A_g = UnitGroup(null, gv_pLAYER_02_DOMINION22, RegionFromId(84), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 0);
    autoC334D86A_u = UnitGroupCount(autoC334D86A_g, c_unitCountAll);
    for (;; autoC334D86A_u -= 1) {
        autoC334D86A_var = UnitGroupUnitFromEnd(autoC334D86A_g, autoC334D86A_u);
        if (autoC334D86A_var == null) { break; }
        gf_AddUnittoPrimalZergAttackers(autoC334D86A_var, UnitGetPosition(autoC334D86A_var));
    }
    TriggerExecute(gt_RavasaurIntroQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RavasaurTripwire_Init () {
    gt_RavasaurTripwire = TriggerCreate("gt_RavasaurTripwire_Func");
    TriggerAddEventUnitRegion(gt_RavasaurTripwire, null, RegionFromId(84), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ravasaur Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_RavasaurIntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_waterfallRavasaurIntro == true)) {
        TriggerQueueEnter();
        libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(libSwaC_ge_CampaginReticleType_ZergEnemy, libSwaC_ge_CampaginReticleSize_Medium, null, UnitFromId(3491), "Ref_Center");
        libHots_gf_StoreActorForUnit(UnitFromId(3491), 1, libNtve_gf_ActorLastCreated());
        libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(libSwaC_ge_CampaginReticleType_ZergEnemy, libSwaC_ge_CampaginReticleSize_Medium, null, UnitFromId(3382), "Ref_Center");
        libHots_gf_StoreActorForUnit(UnitFromId(3382), 1, libNtve_gf_ActorLastCreated());
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus03|Line00040", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
        while (!(((UnitGetPropertyFixed(UnitFromId(3491), c_unitPropLifePercent, c_unitPropCurrent) < 100.0) || (UnitGetPropertyFixed(UnitFromId(3382), c_unitPropLifePercent, c_unitPropCurrent) < 100.0)))) {
            Wait(0.5, c_timeGame);
        }
        libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitFromId(3491), 1));
        libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitFromId(3382), 1));
    }
    else {
        TriggerQueueEnter();
        libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(libSwaC_ge_CampaginReticleType_ZergEnemy, libSwaC_ge_CampaginReticleSize_Medium, null, UnitFromId(2760), "Ref_Center");
        libHots_gf_StoreActorForUnit(UnitFromId(2760), 1, libNtve_gf_ActorLastCreated());
        Wait(1.0, c_timeGame);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus03|Line00040", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
        while (!((UnitGetPropertyFixed(UnitFromId(2760), c_unitPropLifePercent, c_unitPropCurrent) < 100.0))) {
            Wait(0.5, c_timeGame);
        }
        libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitFromId(2760), 1));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RavasaurIntroQ_Init () {
    gt_RavasaurIntroQ = TriggerCreate("gt_RavasaurIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slivan Melee Tripwire 1
//--------------------------------------------------------------------------------------------------
bool gt_SlivanMeleeTripwire1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoADC9EA9E_g;
    int autoADC9EA9E_u;
    unit autoADC9EA9E_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoADC9EA9E_g = gv_slivanMeleeGroup1;
    autoADC9EA9E_u = UnitGroupCount(autoADC9EA9E_g, c_unitCountAll);
    for (;; autoADC9EA9E_u -= 1) {
        autoADC9EA9E_var = UnitGroupUnitFromEnd(autoADC9EA9E_g, autoADC9EA9E_u);
        if (autoADC9EA9E_var == null) { break; }
        UnitGroupRemove(gv_primalZergWanderers, autoADC9EA9E_var);
        gf_AddUnittoPrimalZergAttackers(autoADC9EA9E_var, UnitGetPosition(autoADC9EA9E_var));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlivanMeleeTripwire1_Init () {
    gt_SlivanMeleeTripwire1 = TriggerCreate("gt_SlivanMeleeTripwire1_Func");
    TriggerAddEventUnitRegion(gt_SlivanMeleeTripwire1, null, RegionFromId(83), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pond Siege Guys 1
//--------------------------------------------------------------------------------------------------
bool gt_PondSiegeGuys1_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    timer lv_respawnTimer;
    int lv_index;
    unit[8] lv_pondSiegeUnits;
    point[8] lv_pondSiegePoints;
    bool[8] lv_pondSiegeUnitAlive;
    timer[8] lv_pondSiegeTimers;
    int lv_numberOfPondSiegeUnits;

    // Automatic Variable Declarations
    unitgroup auto207E0621_g;
    int auto207E0621_u;
    unit auto207E0621_var;
    int auto99B441F8_ae;
    const int auto99B441F8_ai = 1;

    // Variable Initialization
    lv_respawnTimer = TimerCreate();
    for (init_i = 0; init_i <= 7; init_i += 1) {
        lv_pondSiegeUnitAlive[init_i] = true;
    }
    for (init_i = 0; init_i <= 7; init_i += 1) {
        lv_pondSiegeTimers[init_i] = TimerCreate();
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto207E0621_g = UnitGroup("Ravasaur", gv_pLAYER_02_DOMINION22, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto207E0621_u = UnitGroupCount(auto207E0621_g, c_unitCountAll);
    for (;; auto207E0621_u -= 1) {
        auto207E0621_var = UnitGroupUnitFromEnd(auto207E0621_g, auto207E0621_u);
        if (auto207E0621_var == null) { break; }
        lv_numberOfPondSiegeUnits += 1;
        lv_pondSiegeUnits[lv_numberOfPondSiegeUnits] = auto207E0621_var;
        lv_pondSiegePoints[lv_numberOfPondSiegeUnits] = UnitGetPosition(auto207E0621_var);
        UnitIssueOrder(auto207E0621_var, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    }
    while (true) {
        Wait(1.0, c_timeAI);
        auto99B441F8_ae = lv_numberOfPondSiegeUnits;
        lv_index = 1;
        for ( ; ( (auto99B441F8_ai >= 0 && lv_index <= auto99B441F8_ae) || (auto99B441F8_ai < 0 && lv_index >= auto99B441F8_ae) ) ; lv_index += auto99B441F8_ai ) {
            if ((gv_slivanEngaged == true)) {
                return true;
            }

            if ((UnitIsAlive(lv_pondSiegeUnits[lv_index]) == false) && (lv_pondSiegeUnitAlive[lv_index] == true)) {
                lv_pondSiegeUnitAlive[lv_index] = false;
                TimerStart(lv_pondSiegeTimers[lv_index], libHots_gf_DifficultyValueFixed2(80.0, 80.0, 50.0), false, c_timeAI);
            }

            if ((UnitIsAlive(lv_pondSiegeUnits[lv_index]) == false) && (lv_pondSiegeUnitAlive[lv_index] == false) && (TimerGetRemaining(lv_pondSiegeTimers[lv_index]) < 0.1) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(57), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0)) {
                lv_pondSiegeUnitAlive[lv_index] = true;
                libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(3885)), c_animNameDefault, "Cover End", 0, c_animTimeDefault);
                libNtve_gf_CreateUnitsAtPoint2(1, "Ravasaur", 0, gv_pLAYER_02_DOMINION22, PointFromId(2769));
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), lv_pondSiegePoints[lv_index]), c_orderQueueReplace);
                UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
                lv_pondSiegeUnits[lv_index] = UnitLastCreated();
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PondSiegeGuys1_Init () {
    gt_PondSiegeGuys1 = TriggerCreate("gt_PondSiegeGuys1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pond Siege Guys 2
//--------------------------------------------------------------------------------------------------
bool gt_PondSiegeGuys2_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    timer lv_respawnTimer;
    int lv_index;
    unit[8] lv_pondSiegeUnits;
    point[8] lv_pondSiegePoints;
    bool[8] lv_pondSiegeUnitAlive;
    timer[8] lv_pondSiegeTimers;
    int lv_numberOfPondSiegeUnits;

    // Automatic Variable Declarations
    unitgroup autoF5456608_g;
    int autoF5456608_u;
    unit autoF5456608_var;
    int auto29E257CD_ae;
    const int auto29E257CD_ai = 1;

    // Variable Initialization
    lv_respawnTimer = TimerCreate();
    for (init_i = 0; init_i <= 7; init_i += 1) {
        lv_pondSiegeUnitAlive[init_i] = true;
    }
    for (init_i = 0; init_i <= 7; init_i += 1) {
        lv_pondSiegeTimers[init_i] = TimerCreate();
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoF5456608_g = UnitGroup("Ravasaur", gv_pLAYER_02_DOMINION22, RegionFromId(87), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF5456608_u = UnitGroupCount(autoF5456608_g, c_unitCountAll);
    for (;; autoF5456608_u -= 1) {
        autoF5456608_var = UnitGroupUnitFromEnd(autoF5456608_g, autoF5456608_u);
        if (autoF5456608_var == null) { break; }
        lv_numberOfPondSiegeUnits += 1;
        lv_pondSiegeUnits[lv_numberOfPondSiegeUnits] = autoF5456608_var;
        lv_pondSiegePoints[lv_numberOfPondSiegeUnits] = UnitGetPosition(autoF5456608_var);
        UnitIssueOrder(autoF5456608_var, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    }
    while (true) {
        Wait(1.0, c_timeAI);
        auto29E257CD_ae = lv_numberOfPondSiegeUnits;
        lv_index = 1;
        for ( ; ( (auto29E257CD_ai >= 0 && lv_index <= auto29E257CD_ae) || (auto29E257CD_ai < 0 && lv_index >= auto29E257CD_ae) ) ; lv_index += auto29E257CD_ai ) {
            if ((gv_slivanEngaged == true)) {
                return true;
            }

            if ((UnitIsAlive(lv_pondSiegeUnits[lv_index]) == false) && (lv_pondSiegeUnitAlive[lv_index] == true)) {
                lv_pondSiegeUnitAlive[lv_index] = false;
                TimerStart(lv_pondSiegeTimers[lv_index], libHots_gf_DifficultyValueFixed2(80.0, 80.0, 50.0), false, c_timeAI);
            }

            if ((UnitIsAlive(lv_pondSiegeUnits[lv_index]) == false) && (lv_pondSiegeUnitAlive[lv_index] == false) && (TimerGetRemaining(lv_pondSiegeTimers[lv_index]) < 0.1) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(86), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0)) {
                lv_pondSiegeUnitAlive[lv_index] = true;
                libNtve_gf_CreateUnitsAtPoint2(1, "Ravasaur", 0, gv_pLAYER_02_DOMINION22, PointFromId(2731));
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), lv_pondSiegePoints[lv_index]), c_orderQueueReplace);
                UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
                lv_pondSiegeUnits[lv_index] = UnitLastCreated();
                Wait(2.0, c_timeAI);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PondSiegeGuys2_Init () {
    gt_PondSiegeGuys2 = TriggerCreate("gt_PondSiegeGuys2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pond Siege Guys 3
//--------------------------------------------------------------------------------------------------
bool gt_PondSiegeGuys3_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    timer lv_respawnTimer;
    int lv_i;
    unit[8] lv_pondSiegeUnits;
    point[8] lv_pondSiegePoints;
    bool[8] lv_pondSiegeUnitAlive;
    timer[8] lv_pondSiegeTimers;
    int lv_numberOfPondSiegeUnits;

    // Automatic Variable Declarations
    unitgroup autoCC322230_g;
    int autoCC322230_u;
    unit autoCC322230_var;
    int auto741F686A_ae;
    const int auto741F686A_ai = 1;

    // Variable Initialization
    lv_respawnTimer = TimerCreate();
    for (init_i = 0; init_i <= 7; init_i += 1) {
        lv_pondSiegeUnitAlive[init_i] = true;
    }
    for (init_i = 0; init_i <= 7; init_i += 1) {
        lv_pondSiegeTimers[init_i] = TimerCreate();
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoCC322230_g = UnitGroup("Ravasaur", gv_pLAYER_02_DOMINION22, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCC322230_u = UnitGroupCount(autoCC322230_g, c_unitCountAll);
    for (;; autoCC322230_u -= 1) {
        autoCC322230_var = UnitGroupUnitFromEnd(autoCC322230_g, autoCC322230_u);
        if (autoCC322230_var == null) { break; }
        lv_numberOfPondSiegeUnits += 1;
        lv_pondSiegeUnits[lv_numberOfPondSiegeUnits] = autoCC322230_var;
        lv_pondSiegePoints[lv_numberOfPondSiegeUnits] = UnitGetPosition(autoCC322230_var);
        UnitIssueOrder(autoCC322230_var, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    }
    while (true) {
        Wait(1.0, c_timeAI);
        auto741F686A_ae = lv_numberOfPondSiegeUnits;
        lv_i = 1;
        for ( ; ( (auto741F686A_ai >= 0 && lv_i <= auto741F686A_ae) || (auto741F686A_ai < 0 && lv_i >= auto741F686A_ae) ) ; lv_i += auto741F686A_ai ) {
            if ((gv_slivanEngaged == true)) {
                return true;
            }

            if ((UnitIsAlive(lv_pondSiegeUnits[lv_i]) == false) && (lv_pondSiegeUnitAlive[lv_i] == true)) {
                lv_pondSiegeUnitAlive[lv_i] = false;
                TimerStart(lv_pondSiegeTimers[lv_i], libHots_gf_DifficultyValueFixed2(80.0, 80.0, 50.0), false, c_timeAI);
            }

            if ((UnitIsAlive(lv_pondSiegeUnits[lv_i]) == false) && (lv_pondSiegeUnitAlive[lv_i] == false) && (TimerGetRemaining(lv_pondSiegeTimers[lv_i]) < 0.1) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(88), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                lv_pondSiegeUnitAlive[lv_i] = true;
                libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(3886)), c_animNameDefault, "Cover End", 0, c_animTimeDefault);
                libNtve_gf_CreateUnitsAtPoint2(1, "Ravasaur", 0, gv_pLAYER_02_DOMINION22, PointFromId(3893));
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), lv_pondSiegePoints[lv_i]), c_orderQueueReplace);
                UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
                lv_pondSiegeUnits[lv_i] = UnitLastCreated();
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PondSiegeGuys3_Init () {
    gt_PondSiegeGuys3 = TriggerCreate("gt_PondSiegeGuys3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pond Creepers 1
//--------------------------------------------------------------------------------------------------
bool gt_PondCreepers1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_numberOfCreepers;

    // Automatic Variable Declarations
    unitgroup auto324DA39A_g;
    int auto324DA39A_u;
    unit auto324DA39A_var;
    unitgroup auto0EE39369_g;
    int auto0EE39369_u;
    unit auto0EE39369_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_numberOfCreepers = UnitGroupCount(gv_pondCreepers1, c_unitCountAlive);
    while (!(((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(96), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(gv_pondCreepers1, c_unitCountAlive) < lv_numberOfCreepers)))) {
        Wait(1.0, c_timeAI);
    }
    auto324DA39A_g = gv_pondCreepers1;
    auto324DA39A_u = UnitGroupCount(auto324DA39A_g, c_unitCountAll);
    for (;; auto324DA39A_u -= 1) {
        auto324DA39A_var = UnitGroupUnitFromEnd(auto324DA39A_g, auto324DA39A_u);
        if (auto324DA39A_var == null) { break; }
        UnitGroupRemove(gv_primalZergWanderers, auto324DA39A_var);
    }
    while (true) {
        auto0EE39369_g = gv_pondCreepers1;
        auto0EE39369_u = UnitGroupCount(auto0EE39369_g, c_unitCountAll);
        for (;; auto0EE39369_u -= 1) {
            auto0EE39369_var = UnitGroupUnitFromEnd(auto0EE39369_g, auto0EE39369_u);
            if (auto0EE39369_var == null) { break; }
            if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(64), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
                UnitIssueOrder(auto0EE39369_var, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(libNtve_gf_ClosestUnitToPoint(UnitGetPosition(auto0EE39369_var), UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(64), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)))), c_orderQueueReplace);
                libNtve_gf_SendActorMessageToUnit(auto0EE39369_var, "Signal Aggro");
                if ((UnitHasBehavior(auto0EE39369_var, "SlivanCreepBoom") == false)) {
                    if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(auto0EE39369_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
                        UnitBehaviorAdd(auto0EE39369_var, "SlivanCreepBoom", auto0EE39369_var, 1);
                    }

                }

            }
            else {
                if ((RandomInt(1, 8) == 1)) {
                    UnitIssueOrder(auto0EE39369_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(96))), c_orderQueueReplace);
                }

            }
        }
        Wait(1.0, c_timeAI);
        if (((UnitGroupCount(gv_pondCreepers1, c_unitCountAlive) == 0) || (gv_slivanEngaged == true))) {
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PondCreepers1_Init () {
    gt_PondCreepers1 = TriggerCreate("gt_PondCreepers1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pond Creepers 2
//--------------------------------------------------------------------------------------------------
bool gt_PondCreepers2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_numberOfCreepers;

    // Automatic Variable Declarations
    unitgroup auto9C270A6A_g;
    int auto9C270A6A_u;
    unit auto9C270A6A_var;
    unitgroup autoC0FF818C_g;
    int autoC0FF818C_u;
    unit autoC0FF818C_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_numberOfCreepers = UnitGroupCount(gv_pondCreepers2, c_unitCountAlive);
    while (!(((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(97), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(gv_pondCreepers2, c_unitCountAlive) < lv_numberOfCreepers)))) {
        Wait(1.0, c_timeAI);
    }
    auto9C270A6A_g = gv_pondCreepers2;
    auto9C270A6A_u = UnitGroupCount(auto9C270A6A_g, c_unitCountAll);
    for (;; auto9C270A6A_u -= 1) {
        auto9C270A6A_var = UnitGroupUnitFromEnd(auto9C270A6A_g, auto9C270A6A_u);
        if (auto9C270A6A_var == null) { break; }
        UnitGroupRemove(gv_primalZergWanderers, auto9C270A6A_var);
        if ((UnitGetType(auto9C270A6A_var) == "PrimalUltralisk")) {
            UnitGroupRemove(gv_pondCreepers2, auto9C270A6A_var);
            gf_AddUnittoPrimalZergAttackers(auto9C270A6A_var, UnitGetPosition(auto9C270A6A_var));
        }

    }
    while (true) {
        autoC0FF818C_g = gv_pondCreepers2;
        autoC0FF818C_u = UnitGroupCount(autoC0FF818C_g, c_unitCountAll);
        for (;; autoC0FF818C_u -= 1) {
            autoC0FF818C_var = UnitGroupUnitFromEnd(autoC0FF818C_g, autoC0FF818C_u);
            if (autoC0FF818C_var == null) { break; }
            if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(64), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
                UnitIssueOrder(autoC0FF818C_var, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(libNtve_gf_ClosestUnitToPoint(UnitGetPosition(autoC0FF818C_var), UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(64), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)))), c_orderQueueReplace);
                libNtve_gf_SendActorMessageToUnit(autoC0FF818C_var, "Signal Aggro");
                if ((UnitHasBehavior(autoC0FF818C_var, "SlivanCreepBoom") == false)) {
                    if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(autoC0FF818C_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
                        UnitBehaviorAdd(autoC0FF818C_var, "SlivanCreepBoom", autoC0FF818C_var, 1);
                    }

                }

            }
            else {
                if ((RandomInt(1, 8) == 1)) {
                    UnitIssueOrder(autoC0FF818C_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(97))), c_orderQueueReplace);
                }

            }
        }
        Wait(1.0, c_timeAI);
        if (((UnitGroupCount(gv_pondCreepers2, c_unitCountAlive) == 0) || (gv_slivanEngaged == true))) {
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PondCreepers2_Init () {
    gt_PondCreepers2 = TriggerCreate("gt_PondCreepers2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pond Creepers 3
//--------------------------------------------------------------------------------------------------
bool gt_PondCreepers3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_numberOfCreepers;

    // Automatic Variable Declarations
    unitgroup autoCB7D9EFB_g;
    int autoCB7D9EFB_u;
    unit autoCB7D9EFB_var;
    unitgroup auto30C1603E_g;
    int auto30C1603E_u;
    unit auto30C1603E_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_numberOfCreepers = UnitGroupCount(gv_pondCreepers3, c_unitCountAlive);
    while (!(((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(98), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(gv_pondCreepers3, c_unitCountAlive) < lv_numberOfCreepers)))) {
        Wait(1.0, c_timeAI);
    }
    autoCB7D9EFB_g = gv_pondCreepers3;
    autoCB7D9EFB_u = UnitGroupCount(autoCB7D9EFB_g, c_unitCountAll);
    for (;; autoCB7D9EFB_u -= 1) {
        autoCB7D9EFB_var = UnitGroupUnitFromEnd(autoCB7D9EFB_g, autoCB7D9EFB_u);
        if (autoCB7D9EFB_var == null) { break; }
        UnitGroupRemove(gv_primalZergWanderers, autoCB7D9EFB_var);
    }
    while (true) {
        auto30C1603E_g = gv_pondCreepers3;
        auto30C1603E_u = UnitGroupCount(auto30C1603E_g, c_unitCountAll);
        for (;; auto30C1603E_u -= 1) {
            auto30C1603E_var = UnitGroupUnitFromEnd(auto30C1603E_g, auto30C1603E_u);
            if (auto30C1603E_var == null) { break; }
            if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(64), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
                UnitIssueOrder(auto30C1603E_var, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(libNtve_gf_ClosestUnitToPoint(UnitGetPosition(auto30C1603E_var), UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(64), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)))), c_orderQueueReplace);
                libNtve_gf_SendActorMessageToUnit(auto30C1603E_var, "Signal Aggro");
                if ((UnitHasBehavior(auto30C1603E_var, "SlivanCreepBoom") == false)) {
                    if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(auto30C1603E_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
                        UnitBehaviorAdd(auto30C1603E_var, "SlivanCreepBoom", auto30C1603E_var, 1);
                    }

                }

            }
            else {
                if ((RandomInt(1, 8) == 1)) {
                    UnitIssueOrder(auto30C1603E_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(98))), c_orderQueueReplace);
                }

            }
        }
        Wait(1.0, c_timeAI);
        if (((UnitGroupCount(gv_pondCreepers3, c_unitCountAlive) == 0) || (gv_slivanEngaged == true))) {
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PondCreepers3_Init () {
    gt_PondCreepers3 = TriggerCreate("gt_PondCreepers3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slivan Melee Tripwire 2
//--------------------------------------------------------------------------------------------------
bool gt_SlivanMeleeTripwire2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoC22F35B6_g;
    int autoC22F35B6_u;
    unit autoC22F35B6_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoC22F35B6_g = gv_slivanMeleeGroup2;
    autoC22F35B6_u = UnitGroupCount(autoC22F35B6_g, c_unitCountAll);
    for (;; autoC22F35B6_u -= 1) {
        autoC22F35B6_var = UnitGroupUnitFromEnd(autoC22F35B6_g, autoC22F35B6_u);
        if (autoC22F35B6_var == null) { break; }
        UnitGroupRemove(gv_primalZergWanderers, autoC22F35B6_var);
        gf_AddUnittoPrimalZergAttackers(autoC22F35B6_var, UnitGetPosition(autoC22F35B6_var));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlivanMeleeTripwire2_Init () {
    gt_SlivanMeleeTripwire2 = TriggerCreate("gt_SlivanMeleeTripwire2_Func");
    TriggerAddEventUnitRegion(gt_SlivanMeleeTripwire2, null, RegionFromId(101), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slivan Reinforcements 2
//--------------------------------------------------------------------------------------------------
bool gt_SlivanReinforcements2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_friendlyRoaches;
    int lv_friendlyHydras;
    int lv_friendlyUltras;

    // Automatic Variable Declarations
    int auto19087C5D_n;
    int auto19087C5D_i;
    int autoD6BA6394_n;
    int autoD6BA6394_i;
    unitgroup auto6035E1BB_g;
    int auto6035E1BB_u;
    unit auto6035E1BB_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_friendlyRoaches = gf_GetRoachCount(gv_pLAYER_01_USER);
    lv_friendlyHydras = gf_GetHydraliskCount(gv_pLAYER_01_USER);
    if ((lv_friendlyRoaches >= 6) && (lv_friendlyHydras >= 4)) {
        return true;
    }
    else {
        lv_friendlyRoaches = (6 - lv_friendlyRoaches);
        if ((lv_friendlyRoaches > libHots_gf_DifficultyValueInt2(6, 6, 5))) {
            lv_friendlyRoaches = libHots_gf_DifficultyValueInt2(6, 6, 4);
        }

        lv_friendlyHydras = (4 - lv_friendlyHydras);
        if ((lv_friendlyHydras > libHots_gf_DifficultyValueInt2(4, 4, 3))) {
            lv_friendlyHydras = libHots_gf_DifficultyValueInt2(4, 4, 2);
        }

        SoundPlay(SoundLink("Event_Zerus03_RoachHydraVox", -1), PlayerGroupAll(), 100.0, 0.0);
        TriggerExecute(gt_SlivanReinforcements2Q, true, false);
        if ((lv_friendlyRoaches > 0)) {
            auto19087C5D_n = lv_friendlyRoaches;
            for (auto19087C5D_i = 1; auto19087C5D_i <= auto19087C5D_n; auto19087C5D_i += 1) {
                libNtve_gf_CreateUnitsAtPoint2(1, "PrimalRoach", 0, gv_pLAYER_01_USER, PointFromId(3103));
                UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
                UnitSetOwner(UnitLastCreated(), gv_pLAYER_02_DOMINION2222, true);
                UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(3104)), c_orderQueueReplace);
                Wait(0.75, c_timeGame);
            }
        }

        if ((lv_friendlyHydras > 0)) {
            autoD6BA6394_n = lv_friendlyHydras;
            for (autoD6BA6394_i = 1; autoD6BA6394_i <= autoD6BA6394_n; autoD6BA6394_i += 1) {
                libNtve_gf_CreateUnitsAtPoint2(1, "PrimalHydralisk", 0, gv_pLAYER_01_USER, PointFromId(3103));
                UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
                UnitSetOwner(UnitLastCreated(), gv_pLAYER_02_DOMINION2222, true);
                UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(3104)), c_orderQueueReplace);
                Wait(0.75, c_timeGame);
            }
        }

        Wait(1.0, c_timeReal);
        auto6035E1BB_g = UnitGroup(null, gv_pLAYER_02_DOMINION2222, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto6035E1BB_u = UnitGroupCount(auto6035E1BB_g, c_unitCountAll);
        for (;; auto6035E1BB_u -= 1) {
            auto6035E1BB_var = UnitGroupUnitFromEnd(auto6035E1BB_g, auto6035E1BB_u);
            if (auto6035E1BB_var == null) { break; }
            libNtve_gf_RescueUnit(auto6035E1BB_var, gv_pLAYER_01_USER, true);
            UnitSetState(auto6035E1BB_var, c_unitStateTargetable, true);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlivanReinforcements2_Init () {
    gt_SlivanReinforcements2 = TriggerCreate("gt_SlivanReinforcements2_Func");
    TriggerAddEventUnitRegion(gt_SlivanReinforcements2, null, RegionFromId(108), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slivan Reinforcements 2 Q
//--------------------------------------------------------------------------------------------------
bool gt_SlivanReinforcements2Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(1.0, c_timeReal);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus03|Line00026", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlivanReinforcements2Q_Init () {
    gt_SlivanReinforcements2Q = TriggerCreate("gt_SlivanReinforcements2Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slivan Autosave
//--------------------------------------------------------------------------------------------------
bool gt_SlivanAutosave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/4D454772"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlivanAutosave_Init () {
    gt_SlivanAutosave = TriggerCreate("gt_SlivanAutosave_Func");
    TriggerAddEventUnitRegion(gt_SlivanAutosave, null, RegionFromId(114), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slivan Intro Reveal
//--------------------------------------------------------------------------------------------------
bool gt_SlivanIntroReveal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_ShareVisionofUnit(gv_slivan, true, gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlivanIntroReveal_Init () {
    gt_SlivanIntroReveal = TriggerCreate("gt_SlivanIntroReveal_Func");
    TriggerAddEventUnitRegion(gt_SlivanIntroReveal, null, RegionFromId(35), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slivan Boss Fight Controller
//--------------------------------------------------------------------------------------------------
bool gt_SlivanBossFightController_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto0064ED9E_g;
    int auto0064ED9E_u;
    unit auto0064ED9E_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_slivanTimer, c_timerDurationInfinite, false, c_timeAI);
    libSwaC_gf_DisplaySingularBossBarSwarmCampaign("Assets\\Textures\\btn-boss-slivan.dds", StringExternal("Param/Value/D234859F"), 100);
    libSwaC_gf_SetSingularBossBarBossSwarmCampaign(gv_slivan, true);
    libSwaC_gf_ShowHideSingularBossBarSwarmCampaign(true);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackUnit_Zerg", false);
    TriggerEnable(gt_UnitTakesDamage, true);
    PingDestroy(gv_yagdraPing);
    PingDestroy(gv_kraithPing);
    PingDestroy(gv_slivanPing);
    libSCDH_gf_CreateHeroPing(gv_slivan, libSCDH_ge_HeroPingType_Enemy);
    gv_slivanPing = PingLastCreated();
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/7F6CCA53"));
    PingSetScale(PingLastCreated(), 1.0);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(120), "FogMistSnow", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    Wait(libHots_gf_DifficultyValueFixed2(1.0, 1.0, 0.0), c_timeAI);
    while (true) {
        auto0064ED9E_g = gv_slivanBossCreepers;
        auto0064ED9E_u = UnitGroupCount(auto0064ED9E_g, c_unitCountAll);
        for (;; auto0064ED9E_u -= 1) {
            auto0064ED9E_var = UnitGroupUnitFromEnd(auto0064ED9E_g, auto0064ED9E_u);
            if (auto0064ED9E_var == null) { break; }
            UnitGroupRemove(gv_slivanBossCreepers, auto0064ED9E_var);
            gf_AddUnittoPrimalZergAttackers(auto0064ED9E_var, UnitGetPosition(auto0064ED9E_var));
        }
        Wait(libHots_gf_DifficultyValueFixed2(6.0, 6.0, 5.0), c_timeAI);
        UnitSetCustomValue(gv_slivan, 0, 2.0);
        TriggerExecute(gt_SlivanAcidPoolQ, true, false);
        UnitIssueOrder(gv_slivan, OrderTargetingPoint(AbilityCommand("SlivanPuke", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(120), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
        Wait(3.0, c_timeAI);
        UnitSetCustomValue(gv_slivan, 0, 0.0);
        UnitIssueOrder(gv_slivan, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(121))), c_orderQueueReplace);
        Wait(libHots_gf_DifficultyValueFixed2(6.0, 6.0, 4.0), c_timeAI);
        TriggerExecute(gt_SlivanBossCreeperSpawning, true, false);
        if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1) && (UnitGetPropertyFixed(gv_slivan, c_unitPropLifePercent, c_unitPropCurrent) <= 20.0)) {
            gf_SpawnSlivanRavasaur();
        }

        Wait(5.0, c_timeAI);
        UnitSetCustomValue(gv_slivan, 0, 2.0);
        UnitIssueOrder(gv_slivan, OrderTargetingPoint(AbilityCommand("SlivanPuke", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(120), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
        Wait(3.0, c_timeAI);
        UnitSetCustomValue(gv_slivan, 0, 0.0);
        UnitIssueOrder(gv_slivan, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(121))), c_orderQueueReplace);
        Wait(libHots_gf_DifficultyValueFixed2(6.0, 6.0, 4.0), c_timeAI);
        if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
            gf_SpawnSlivanRavasaur();
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlivanBossFightController_Init () {
    gt_SlivanBossFightController = TriggerCreate("gt_SlivanBossFightController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slivan Acid Pool Q
//--------------------------------------------------------------------------------------------------
bool gt_SlivanAcidPoolQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto9E0D2B14_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if (((UnitIsAlive(gv_slivan) == false) || (UnitHasBehavior(gv_slivan, "SlivanGoingBoom") == true))) {
        return true;
    }

    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    auto9E0D2B14_val = RandomInt(1, 2);
    if (auto9E0D2B14_val == 1) {
        libSwaC_gf_SendTransmissionCampaign(gv_slivan, "zMission_Zerus03|Line00060", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_DontShowPortrait, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto9E0D2B14_val == 2) {
        libSwaC_gf_SendTransmissionCampaign(gv_slivan, "zMission_Zerus03|Line00061", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_DontShowPortrait, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    if ((gv_inCinematic == false)) {
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    }

    TriggerQueueExit();
    Wait(30.0, c_timeReal);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlivanAcidPoolQ_Init () {
    gt_SlivanAcidPoolQ = TriggerCreate("gt_SlivanAcidPoolQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slivan Adds Q
//--------------------------------------------------------------------------------------------------
bool gt_SlivanAddsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto4FC73467_val;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if (((UnitIsAlive(gv_slivan) == false) || (UnitHasBehavior(gv_slivan, "SlivanGoingBoom") == true))) {
        return true;
    }

    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    auto4FC73467_val = RandomInt(1, 2);
    if (auto4FC73467_val == 1) {
        libSwaC_gf_SendTransmissionCampaign(gv_slivan, "zMission_Zerus03|Line00064", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_DontShowPortrait, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto4FC73467_val == 2) {
        libSwaC_gf_SendTransmissionCampaign(gv_slivan, "zMission_Zerus03|Line00065", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_DontShowPortrait, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    if ((gv_inCinematic == false)) {
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlivanAddsQ_Init () {
    gt_SlivanAddsQ = TriggerCreate("gt_SlivanAddsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slivan Boss Creepers
//--------------------------------------------------------------------------------------------------
bool gt_SlivanBossCreepers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION22))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "SlivanCreep"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_slivanBossCreepers, EventUnit());
    Wait(2.0, c_timeGame);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(121))), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlivanBossCreepers_Init () {
    gt_SlivanBossCreepers = TriggerCreate("gt_SlivanBossCreepers_Func");
    TriggerEnable(gt_SlivanBossCreepers, false);
    TriggerAddEventUnitRegion(gt_SlivanBossCreepers, null, RegionFromId(120), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slivan Boss Creeper Movement
//--------------------------------------------------------------------------------------------------
bool gt_SlivanBossCreeperMovement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto1406808B_g;
    int auto1406808B_u;
    unit auto1406808B_var;

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeGame);
        if ((UnitIsAlive(gv_slivan) == false)) {
            TriggerEnable(gt_SlivanBossCreepers, false);
            return true;
        }

        auto1406808B_g = gv_slivanBossCreepers;
        auto1406808B_u = UnitGroupCount(auto1406808B_g, c_unitCountAll);
        for (;; auto1406808B_u -= 1) {
            auto1406808B_var = UnitGroupUnitFromEnd(auto1406808B_g, auto1406808B_u);
            if (auto1406808B_var == null) { break; }
            if ((RandomInt(1, 8) == 1)) {
                UnitIssueOrder(auto1406808B_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(121))), c_orderQueueReplace);
            }

        }
        if ((RandomInt(1, 12) == 1) && (UnitGetCustomValue(gv_slivan, 0) < 1.0) && (gv_inCinematic == false)) {
            UnitIssueOrder(gv_slivan, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(121))), c_orderQueueReplace);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlivanBossCreeperMovement_Init () {
    gt_SlivanBossCreeperMovement = TriggerCreate("gt_SlivanBossCreeperMovement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slivan Boss Creeper Spawning
//--------------------------------------------------------------------------------------------------
bool gt_SlivanBossCreeperSpawning_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoC40BC0BB_n;
    int autoC40BC0BB_i;
    unitgroup auto8B795435_g;
    int auto8B795435_u;
    unit auto8B795435_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_SlivanAddsQ, true, false);
    autoC40BC0BB_n = libNtve_gf_DifficultyValueInt(25, 25, 30, 30);
    for (autoC40BC0BB_i = 1; autoC40BC0BB_i <= autoC40BC0BB_n; autoC40BC0BB_i += 1) {
        if ((UnitGroupCount(UnitGroup("SlivanCreep", gv_pLAYER_02_DOMINION22, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= libNtve_gf_DifficultyValueInt(60, 60, 70, 70))) {
            break;
        }

        if ((UnitIsAlive(gv_slivan) == false)) {
            return true;
        }

        gf_SlivanBossCreeperSpawnAddBehavior();
        Wait(libNtve_gf_DifficultyValueFixed(0.4, 0.4, 0.33, 0.33), c_timeAI);
    }
    Wait(2.0, c_timeAI);
    auto8B795435_g = gv_slivanBossCreepers;
    auto8B795435_u = UnitGroupCount(auto8B795435_g, c_unitCountAll);
    for (;; auto8B795435_u -= 1) {
        auto8B795435_var = UnitGroupUnitFromEnd(auto8B795435_g, auto8B795435_u);
        if (auto8B795435_var == null) { break; }
        UnitGroupRemove(gv_slivanBossCreepers, auto8B795435_var);
        gf_AddUnittoPrimalZergAttackers(auto8B795435_var, UnitGetPosition(auto8B795435_var));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlivanBossCreeperSpawning_Init () {
    gt_SlivanBossCreeperSpawning = TriggerCreate("gt_SlivanBossCreeperSpawning_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slivan Pathing Dummy
//--------------------------------------------------------------------------------------------------
bool gt_SlivanPathingDummy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitIsAlive(gv_slivanPathingDummy) == true))) {
            return false;
        }

        if (!((UnitIsAlive(gv_slivan) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(gv_slivanPathingDummy, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(gv_slivan)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlivanPathingDummy_Init () {
    gt_SlivanPathingDummy = TriggerCreate("gt_SlivanPathingDummy_Func");
    TriggerAddEventTimePeriodic(gt_SlivanPathingDummy, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slivan Dies
//--------------------------------------------------------------------------------------------------
bool gt_SlivanDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto30F1068D_g;
    int auto30F1068D_u;
    unit auto30F1068D_var;
    unitgroup auto8989F857_g;
    int auto8989F857_u;
    unit auto8989F857_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerPause(gv_slivanTimer, true);
    gv_bossLocation = UnitGetPosition(EventUnit());
    gv_channelLocation = PointWithOffsetPolar(gv_bossLocation, 4.5, AngleBetweenPoints(gv_bossLocation, UnitGetPosition(gv_kerrigan)));
    TriggerEnable(TriggerGetCurrent(), false);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackUnit_Zerg", true);
    TriggerEnable(gt_UnitTakesDamage, false);
    TriggerStop(gt_SlivanBossFightController);
    TriggerEnable(gt_SlivanPathingDummy, false);
    UnitRemove(gv_slivanPathingDummy);
    libSwaC_gf_ShowHideSingularBossBarSwarmCampaign(false);
    PingDestroy(gv_slivanPing);
    if ((UnitIsAlive(gv_kerrigan) == false)) {
        return true;
    }

    auto30F1068D_g = UnitGroup(null, gv_pLAYER_02_DOMINION22, RegionFromId(120), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto30F1068D_u = UnitGroupCount(auto30F1068D_g, c_unitCountAll);
    for (;; auto30F1068D_u -= 1) {
        auto30F1068D_var = UnitGroupUnitFromEnd(auto30F1068D_g, auto30F1068D_u);
        if (auto30F1068D_var == null) { break; }
        UnitKill(auto30F1068D_var);
    }
    auto8989F857_g = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(120), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8989F857_u = UnitGroupCount(auto8989F857_g, c_unitCountAll);
    for (;; auto8989F857_u -= 1) {
        auto8989F857_var = UnitGroupUnitFromEnd(auto8989F857_g, auto8989F857_u);
        if (auto8989F857_var == null) { break; }
        UnitSetState(auto8989F857_var, c_unitStateInvulnerable, true);
    }
    TriggerExecute(gt_SlivanVictoryShot, true, true);
    TriggerExecute(gt_BossVictoryShotCleanup, true, true);
    TriggerExecute(gt_ObjectiveSlayPrimarchsCreate, true, false);
    SoundPlay(SoundLink("UI_ObjectiveDiscoveredStinger", -1), PlayerGroupAll(), 100.0, 0.0);
    libSwaC_gf_SetMissionObjectiveProgress2("ZZerus03Objective01", 3, true, null, true);
    TriggerExecute(gt_ObjectiveSlayPrimarchsComplete, true, false);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ZurvanIntroQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlivanDies_Init () {
    gt_SlivanDies = TriggerCreate("gt_SlivanDies_Func");
    TriggerAddEventUnitDied(gt_SlivanDies, UnitRefFromVariable("gv_slivan"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zurvan Autosave
//--------------------------------------------------------------------------------------------------
bool gt_ZurvanAutosave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/EEE3D065"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZurvanAutosave_Init () {
    gt_ZurvanAutosave = TriggerCreate("gt_ZurvanAutosave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zurvan Init Q
//--------------------------------------------------------------------------------------------------
bool gt_ZurvanInitQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_AddUnitTypeToUnitHelpPanel("ZurvanCore", false, gv_pLAYER_01_USER);
    TriggerExecute(gt_ZurvanBossFightController, true, false);
    Wait(2.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveSlayZurvanCreate, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZurvanInitQ_Init () {
    gt_ZurvanInitQ = TriggerCreate("gt_ZurvanInitQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zurvan Boss Fight Controller
//--------------------------------------------------------------------------------------------------
bool gt_ZurvanBossFightController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randomInt;
    region lv_targetLightningRegion;
    int lv_unitsInCurrentTargetLightningRegion;
    unit lv_helperUnit;
    int lv_slapCount;
    int lv_addCount;
    int lv_patternCount;
    int lv_index;
    int lv_unitCountInRegion;

    // Automatic Variable Declarations
    int auto6C0140BC_val;
    int auto6ABA132D_val;
    const int auto2C91AC5C_ae = 6;
    const int auto2C91AC5C_ai = 1;
    region auto97BF7207_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_zurvanTimer, c_timerDurationInfinite, false, c_timeAI);
    VisRevealerCreate(gv_pLAYER_02_DOMINION222, RegionFromId(155));
    gv_zurvanBossRevealerEnemy = VisRevealerLastCreated();
    libSwaC_gf_DisplaySingularBossBarSwarmCampaign("Assets\\Textures\\btn-boss-zurvan.dds", StringExternal("Param/Value/96A66F42"), 100);
    libSwaC_gf_SetSingularBossBarBossSwarmCampaign(gv_zurvan, true);
    libSwaC_gf_ShowHideSingularBossBarSwarmCampaign(true);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackUnit_Zerg", false);
    PingDestroy(gv_yagdraPing);
    PingDestroy(gv_kraithPing);
    PingDestroy(gv_slivanPing);
    TriggerEnable(gt_UnitTakesDamage, true);
    TriggerEnable(gt_ZurvanDies, true);
    libSCDH_gf_CreateHeroPing(gv_zurvan, libSCDH_ge_HeroPingType_Enemy);
    gv_zurvanPing = PingLastCreated();
    PingSetScale(PingLastCreated(), 1.5);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/443C6825"));
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION22, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION222, gv_pLAYER_02_DOMINION22, libNtve_ge_AllianceSetting_Ally);
    gv_zurvanTentacles[1] = UnitFromId(3466);
    gv_zurvanTentacles[2] = UnitFromId(3467);
    gv_zurvanTentacles[3] = UnitFromId(3468);
    gv_zurvanTentacles[4] = UnitFromId(3469);
    gv_zurvanTentacles[5] = UnitFromId(3470);
    gv_zurvanTentacles[6] = UnitFromId(3471);
    gv_zurvanTentacleRegions[1] = RegionFromId(140);
    gv_zurvanTentacleRegions[2] = RegionFromId(143);
    gv_zurvanTentacleRegions[3] = RegionFromId(151);
    gv_zurvanTentacleRegions[4] = RegionFromId(153);
    gv_zurvanTentacleRegions[5] = RegionFromId(146);
    gv_zurvanTentacleRegions[6] = RegionFromId(152);
    Wait(1.0, c_timeAI);
    if ((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1)) {
        lv_randomInt = 1;
    }
    else {
        lv_randomInt = 4;
    }
    while (true) {
        auto6C0140BC_val = lv_randomInt;
        if (auto6C0140BC_val == 1) {
            lv_slapCount += 1;
            lv_addCount = 0;
            lv_patternCount = 0;
            if ((lv_slapCount < 2)) {
                gf_RandomZurvanTentacleSlap();
            }
            else {
                lv_slapCount = 0;
                lv_addCount += 1;
                gf_RandomZurvanTentaclePattern();
            }
        }
        else if (auto6C0140BC_val == 2) {
            lv_slapCount += 1;
            lv_addCount = 0;
            lv_patternCount = 0;
            if ((lv_slapCount < 2)) {
                gf_RandomZurvanTentacleSlap();
            }
            else {
                lv_slapCount = 0;
                lv_patternCount += 1;
                gf_ZurvanAddSpawn();
            }
        }
        else if (auto6C0140BC_val == 3) {
            lv_addCount += 1;
            lv_patternCount = 0;
            lv_slapCount = 0;
            if ((lv_addCount < 2)) {
                gf_ZurvanAddSpawn();
            }
            else {
                lv_addCount = 0;
                lv_patternCount += 1;
                gf_RandomZurvanTentaclePattern();
            }
        }
        else if (auto6C0140BC_val == 4) {
            lv_patternCount += 1;
            lv_addCount = 0;
            lv_slapCount = 0;
            if ((lv_patternCount <= 3)) {
                gf_RandomZurvanTentaclePattern();
            }
            else {
                lv_patternCount = 0;
                lv_addCount += 1;
                gf_ZurvanAddSpawn();
            }
        }
        else {
        }
        if ((UnitGetPropertyFixed(gv_zurvan, c_unitPropLifePercent, c_unitPropCurrent) <= 25.0)) {
            break;
        }

        Wait(libHots_gf_DifficultyValueFixed2(4.0, 4.0, 3.0), c_timeAI);
        TriggerExecute(gt_ZurvanBanterPhase1Q, true, false);
        if ((UnitGetPropertyFixed(gv_zurvan, c_unitPropLifePercent, c_unitPropCurrent) <= 25.0)) {
            break;
        }

        Wait(libHots_gf_DifficultyValueFixed2(4.0, 4.0, 3.0), c_timeAI);
        if ((UnitGetPropertyFixed(gv_zurvan, c_unitPropLifePercent, c_unitPropCurrent) <= 25.0)) {
            break;
        }

        if ((libNtve_gf_DifficultyValueInt(1, 1, 1, 0) == 1)) {
            lv_randomInt = RandomInt(libHots_gf_DifficultyValueInt2(1, 1, 2), 4);
        }
        else {
            auto6ABA132D_val = RandomInt(1, 3);
            if (auto6ABA132D_val == 1) {
                lv_randomInt = 3;
            }
            else if (auto6ABA132D_val == 2) {
                lv_randomInt = 4;
            }
            else if (auto6ABA132D_val == 3) {
                lv_randomInt = 4;
            }
            else {
            }
        }
    }
    gv_zurvanPhase2 = true;
    libNtve_gf_SendActorMessageToUnit(gv_zurvan, "Signal Transition");
    TriggerExecute(gt_ZurvanBanterPhase2Q, true, false);
    lv_index = 1;
    for ( ; ( (auto2C91AC5C_ai >= 0 && lv_index <= auto2C91AC5C_ae) || (auto2C91AC5C_ai < 0 && lv_index >= auto2C91AC5C_ae) ) ; lv_index += auto2C91AC5C_ai ) {
        if ((gv_zurvanTenctaclesActive[lv_index] == false)) {
            UnitBehaviorRemove(gv_zurvanTentacles[lv_index], "ZurvanTentacleExtend", 1);
        }

    }
    SoundPlay(SoundLink("Destructible_RockDeath", -1), PlayerGroupAll(), 75.0, 0.0);
    CameraShakeStart(gv_pLAYER_01_USER, c_cameraPositionEye, c_cameraDirectionXYZ, 0.2, 2.0, 100.0, 2.0);
    Wait(2.0, c_timeAI);
    SoundPlay(SoundLink("Destructible_RockDeath", -1), PlayerGroupAll(), 100.0, 0.0);
    CameraShakeStart(gv_pLAYER_01_USER, c_cameraPositionEye, c_cameraDirectionXYZ, 0.3, 2.0, 100.0, 2.0);
    Wait(1.0, c_timeAI);
    libNtve_gf_UnitCreateFacingPoint(1, "ZerusBossTarget", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION22, PointFromId(3487), UnitGetPosition(gv_zurvan));
    lv_helperUnit = UnitLastCreated();
    gv_zurvanHelper = UnitLastCreated();
    UnitIssueOrder(lv_helperUnit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitSetPropertyFixed(lv_helperUnit, c_unitPropMovementSpeed, 5.0);
    libNtve_gf_ChangeUnitDamage(lv_helperUnit, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitIssueOrder(gv_zurvan, OrderTargetingUnit(AbilityCommand("attack", 0), lv_helperUnit), c_orderQueueReplace);
    UnitCreate(1, "ZurvanLightningBreather", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION222, UnitGetPosition(gv_zurvan), 270.0);
    gv_zurvanLightningBreather = UnitLastCreated();
    libNtve_gf_MakeUnitLookAtUnit(gv_zurvan, "MedStanding", lv_helperUnit, "Ref_Overhead");
    libNtve_gf_MakeUnitLookAtUnit(gv_zurvan, "Turret_Left", gv_zurvan, "Ref_Hardpoint 03");
    libNtve_gf_MakeUnitLookAtUnit(gv_zurvan, "Turret_Right", gv_zurvan, "Ref_Hardpoint 03");
    while (true) {
        lv_targetLightningRegion = RegionFromId(159);
        lv_unitsInCurrentTargetLightningRegion = UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(159), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        lv_unitCountInRegion = UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(161), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        if ((lv_unitCountInRegion >= lv_unitsInCurrentTargetLightningRegion)) {
            lv_targetLightningRegion = RegionFromId(161);
            lv_unitsInCurrentTargetLightningRegion = lv_unitCountInRegion;
        }

        lv_unitCountInRegion = UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(160), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        if ((lv_unitCountInRegion > lv_unitsInCurrentTargetLightningRegion)) {
            lv_targetLightningRegion = RegionFromId(160);
            lv_unitsInCurrentTargetLightningRegion = lv_unitCountInRegion;
        }

        if ((lv_unitsInCurrentTargetLightningRegion == 0)) {
            Wait(1.0, c_timeAI);
        }
        else {
            auto97BF7207_val = lv_targetLightningRegion;
            if (auto97BF7207_val == RegionFromId(159)) {
                UnitIssueOrder(lv_helperUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(3489)), c_orderQueueReplace);
                UnitIssueOrder(lv_helperUnit, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
                Wait(1.0, c_timeAI);
                libNtve_gf_SendActorMessageToUnit(gv_zurvan, "Signal LightningBreath");
                UnitIssueOrder(gv_zurvanLightningBreather, OrderTargetingPoint(AbilityCommand("ZurvanLightningBreath", 0), RegionRandomPoint(RegionCircle(PointFromId(3485), 0.5))), c_orderQueueReplace);
                if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
                    gf_ZurvanLatentEnergy(RegionFromId(159));
                }

            }
            else if (auto97BF7207_val == RegionFromId(161)) {
                UnitIssueOrder(lv_helperUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(3487)), c_orderQueueReplace);
                UnitIssueOrder(lv_helperUnit, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
                Wait(1.0, c_timeAI);
                libNtve_gf_SendActorMessageToUnit(gv_zurvan, "Signal LightningBreath");
                UnitIssueOrder(gv_zurvanLightningBreather, OrderTargetingPoint(AbilityCommand("ZurvanLightningBreath", 0), RegionRandomPoint(RegionCircle(PointFromId(3487), 0.5))), c_orderQueueReplace);
                if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
                    gf_ZurvanLatentEnergy(RegionFromId(161));
                }

            }
            else if (auto97BF7207_val == RegionFromId(160)) {
                UnitIssueOrder(lv_helperUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(3488)), c_orderQueueReplace);
                UnitIssueOrder(lv_helperUnit, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
                Wait(1.0, c_timeAI);
                libNtve_gf_SendActorMessageToUnit(gv_zurvan, "Signal LightningBreath");
                UnitIssueOrder(gv_zurvanLightningBreather, OrderTargetingPoint(AbilityCommand("ZurvanLightningBreath", 0), RegionRandomPoint(RegionCircle(PointFromId(3486), 0.5))), c_orderQueueReplace);
                if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
                    gf_ZurvanLatentEnergy(RegionFromId(160));
                }

            }
            else {
            }
            Wait(libHots_gf_DifficultyValueFixed2(7.0, 7.0, 6.0), c_timeAI);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZurvanBossFightController_Init () {
    gt_ZurvanBossFightController = TriggerCreate("gt_ZurvanBossFightController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zurvan Banter Phase 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_ZurvanBanterPhase1Q_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_localTimes;

    // Automatic Variable Declarations
    int auto1689A4B4_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_zurvanBanterTimers += 1;
    if ((gv_zurvanBanterTimers >= 4)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }

    lv_localTimes = gv_zurvanBanterTimers;
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 35.0, 0.2);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 35.0, 0.2);
    auto1689A4B4_val = lv_localTimes;
    if (auto1689A4B4_val == 1) {
        libSwaC_gf_SendTransmissionCampaign(gv_zurvan, "zMission_Zerus03|Line00042", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_DontShowPortrait, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto1689A4B4_val == 2) {
        libSwaC_gf_SendTransmissionCampaign(gv_zurvan, "zMission_Zerus03|Line00066", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_DontShowPortrait, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto1689A4B4_val == 3) {
        libSwaC_gf_SendTransmissionCampaign(gv_zurvan, "zMission_Zerus03|Line00073", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_DontShowPortrait, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto1689A4B4_val == 4) {
        libSwaC_gf_SendTransmissionCampaign(gv_zurvan, "zMission_Zerus03|Line00074", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_DontShowPortrait, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZurvanBanterPhase1Q_Init () {
    gt_ZurvanBanterPhase1Q = TriggerCreate("gt_ZurvanBanterPhase1Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zurvan Banter Phase 2 Q
//--------------------------------------------------------------------------------------------------
bool gt_ZurvanBanterPhase2Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 35.0, 0.2);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 35.0, 0.2);
    libSwaC_gf_SendTransmissionCampaign(gv_zurvan, "zMission_Zerus03|Line00075", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_DontShowPortrait, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZurvanBanterPhase2Q_Init () {
    gt_ZurvanBanterPhase2Q = TriggerCreate("gt_ZurvanBanterPhase2Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zurvan Tentacle Slam
//--------------------------------------------------------------------------------------------------
bool gt_ZurvanTentacleSlam_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.9, c_timeGame);
    if ((UnitIsAlive(EventUnit()) == true)) {
        SoundPlay(SoundLink("Destructible_RockDeath", -1), PlayerGroupAll(), 100.0, 0.0);
        CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 0.25, 0.5, 2.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZurvanTentacleSlam_Init () {
    gt_ZurvanTentacleSlam = TriggerCreate("gt_ZurvanTentacleSlam_Func");
    TriggerAddEventUnitAbility(gt_ZurvanTentacleSlam, null, AbilityCommand("ZurvanTentacleSlam", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zurvan Lightning Breath
//--------------------------------------------------------------------------------------------------
bool gt_ZurvanLightningBreath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("Artifact_EnergyNova", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundPlay(SoundLink("Purifier_PrePlanetCrackerEnergySwirl", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(4.0, c_timeAI);
    SoundStop(SoundLastPlayed(), true);
    if ((UnitIsAlive(EventUnit()) == true)) {
        CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 0.25, 0.5, 2.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZurvanLightningBreath_Init () {
    gt_ZurvanLightningBreath = TriggerCreate("gt_ZurvanLightningBreath_Func");
    TriggerAddEventUnitAbility(gt_ZurvanLightningBreath, UnitRefFromVariable("gv_zurvanLightningBreather"), AbilityCommand("ZurvanLightningBreath", 0), c_abilEffectStagePrep, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zurvan Adds
//--------------------------------------------------------------------------------------------------
bool gt_ZurvanAdds_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION222))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "PrimalZergling") || (UnitGetType(EventUnit()) == "PrimalHydralisk") || (UnitGetType(EventUnit()) == "Ravasaur") || (UnitGetType(EventUnit()) == "PrimalUltralisk")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    gf_AddUnittoPrimalZergAttackers(EventUnit(), UnitGetPosition(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZurvanAdds_Init () {
    gt_ZurvanAdds = TriggerCreate("gt_ZurvanAdds_Func");
    TriggerAddEventUnitRegion(gt_ZurvanAdds, null, RegionFromId(155), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zurvan Dies
//--------------------------------------------------------------------------------------------------
bool gt_ZurvanDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_bossLocation;

    // Automatic Variable Declarations
    unitgroup auto772E9A38_g;
    int auto772E9A38_u;
    unit auto772E9A38_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TimerPause(gv_zurvanTimer, true);
    TimerPause(gv_achievementTimedRunTimer, true);
    gv_bossLocation = libNtve_gf_PointWithZOffset(UnitGetPosition(EventUnit()), 12.0);
    gv_channelLocation = PointFromId(3997);
    TriggerEnable(gt_UnitTakesDamage, false);
    TriggerStop(gt_ZurvanBossFightController);
    libSwaC_gf_ShowHideSingularBossBarSwarmCampaign(false);
    PingDestroy(gv_zurvanPing);
    UnitKill(gv_zurvanLightningBreather);
    UnitIssueOrder(gv_zurvanHelper, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(3487)), c_orderQueueReplace);
    libNtve_gf_SimpleLookAtStop(gv_zurvan, "MedStanding");
    libNtve_gf_SimpleLookAtStop(gv_zurvan, "Turret_Left");
    libNtve_gf_SimpleLookAtStop(gv_zurvan, "Turret_Right");
    if ((UnitIsAlive(gv_kerrigan) == false)) {
        return true;
    }

    auto772E9A38_g = UnitGroup(null, gv_pLAYER_02_DOMINION222, RegionFromId(155), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto772E9A38_u = UnitGroupCount(auto772E9A38_g, c_unitCountAll);
    for (;; auto772E9A38_u -= 1) {
        auto772E9A38_var = UnitGroupUnitFromEnd(auto772E9A38_g, auto772E9A38_u);
        if (auto772E9A38_var == null) { break; }
        if ((auto772E9A38_var != gv_zurvanHelper) && (auto772E9A38_var != gv_zurvan)) {
            UnitKill(auto772E9A38_var);
        }

    }
    libNtve_gf_ChangeUnitDamage(gv_kerrigan, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    TriggerExecute(gt_ZurvanVictoryShot, true, true);
    TriggerExecute(gt_ZurvanVictoryShotCleanup, true, true);
    SoundPlay(SoundLink("UI_ObjectiveDiscoveredStinger", -1), PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(gt_ObjectiveSlayZurvanComplete, true, true);
    TriggerExecute(gt_ObjectiveSurviveComplete, true, true);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_VictoryZurvanSlain, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZurvanDies_Init () {
    gt_ZurvanDies = TriggerCreate("gt_ZurvanDies_Func");
    TriggerEnable(gt_ZurvanDies, false);
    TriggerAddEventUnitBehaviorChange(gt_ZurvanDies, UnitRefFromVariable("gv_zurvan"), "ZurvanDeathDelay", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Kerrigan Dies
//--------------------------------------------------------------------------------------------------
bool gt_DefeatKerriganDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerExecute(gt_ObjectiveSurviveFailed, true, false);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), libSwaC_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/364DA5E3"), libSwaC_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatKerriganDies_Init () {
    gt_DefeatKerriganDies = TriggerCreate("gt_DefeatKerriganDies_Func");
    TriggerAddEventUnitDied(gt_DefeatKerriganDies, UnitRefFromVariable("gv_kerrigan"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Zurvan Slain
//--------------------------------------------------------------------------------------------------
bool gt_VictoryZurvanSlain_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryZurvanSlain_Init () {
    gt_VictoryZurvanSlain = TriggerCreate("gt_VictoryZurvanSlain_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    libSwaC_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((ObjectiveGetState(gv_objectiveDestroyDominionBase2) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objectiveDestroyDominionBase3) == c_objectiveStateCompleted)) {
        libSwaC_gf_CampaignAwardAchievement("ZZerus03_1", gv_pLAYER_01_USER);
    }

    TriggerExecute(gt_AchievementKerriganLifeNH, true, false);
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        TriggerExecute(gt_AchievementTimedRunH, true, false);
    }

    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (TimerGetElapsed(gv_kraithTimer) < 151.0) && (TimerGetElapsed(gv_slivanTimer) < 151.0) && (TimerGetElapsed(gv_yagdraTimer) < 151.0) && (TimerGetElapsed(gv_zurvanTimer) < 151.0)) {
        libSwaC_gf_CampaignAwardAchievement("Anniversary_ZZerus03", gv_pLAYER_01_USER);
        TriggerDebugOutput(1, StringExternal("Param/Value/8601DC6F"), false);
    }

    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/1B488576"), IntToText(libNtve_gf_UnitGetPropertyKills(gv_kerrigan, c_unitPropCurrent)));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/408212A4"), FixedToText(gv_kerriganLowestLife, 0));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/2E9E303E"), TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetElapsed(gv_yagdraTimer))));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/36FDD762"), TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetElapsed(gv_kraithTimer))));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/E534D60D"), TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetElapsed(gv_slivanTimer))));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/4486B68E"), TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetElapsed(gv_zurvanTimer))));
    libSwaC_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_VictoryCheat, false);
    TriggerEnable(gt_DefeatCheat, false);
    TriggerEnable(gt_Defeat, false);
    gv_gameOver = true;
    libSwaC_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_VictoryCheat, false);
    TriggerEnable(gt_DefeatCheat, false);
    TriggerEnable(gt_Victory, false);
    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Kill 300 Enemies with Kerrigan
//--------------------------------------------------------------------------------------------------
bool gt_AchievementKill300EnemieswithKerrigan_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_kerrigan, c_unitPropKills, c_unitPropCurrent) >= 300.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CampaignAwardAchievement("ZZerus03_2", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementKill300EnemieswithKerrigan_Init () {
    gt_AchievementKill300EnemieswithKerrigan = TriggerCreate("gt_AchievementKill300EnemieswithKerrigan_Func");
    TriggerAddEventTimePeriodic(gt_AchievementKill300EnemieswithKerrigan, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Kerrigan Life N/H
//--------------------------------------------------------------------------------------------------
bool gt_AchievementKerriganLifeNH_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libHots_gf_DifficultyValueInt2(0, 1, 1) == 1))) {
            return false;
        }

        if (!((gv_kerriganLowestLife >= 100.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CampaignAwardAchievement("ZZerus03_3", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementKerriganLifeNH_Init () {
    gt_AchievementKerriganLifeNH = TriggerCreate("gt_AchievementKerriganLifeNH_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Timed Run H
//--------------------------------------------------------------------------------------------------
bool gt_AchievementTimedRunH_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1))) {
            return false;
        }

        if (!((TimerGetRemaining(gv_achievementTimedRunTimer) > 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CampaignAwardAchievement("Mastery_Zerus3", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementTimedRunH_Init () {
    gt_AchievementTimedRunH = TriggerCreate("gt_AchievementTimedRunH_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Lowest Life
//--------------------------------------------------------------------------------------------------
bool gt_KerriganLifeTooLow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_kerrigan) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetPropertyFixed(gv_kerrigan, c_unitPropLife, c_unitPropCurrent) < gv_kerriganLowestLife)) {
        gv_kerriganLowestLife = UnitGetPropertyFixed(gv_kerrigan, c_unitPropLife, c_unitPropCurrent);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganLifeTooLow_Init () {
    gt_KerriganLifeTooLow = TriggerCreate("gt_KerriganLifeTooLow_Func");
    TriggerAddEventUnitProperty(gt_KerriganLifeTooLow, UnitRefFromVariable("gv_kerrigan"), c_unitPropLife);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Slay Primarchs - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSlayPrimarchsCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZZerus03Objective01");
    libSwaC_gf_SetMissionObjectiveProgress2("ZZerus03Objective01", 0, true, null, true);
    gv_objectiveDestroyDominionBase = ObjectiveLastCreated();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSlayPrimarchsCreate_Init () {
    gt_ObjectiveSlayPrimarchsCreate = TriggerCreate("gt_ObjectiveSlayPrimarchsCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Slay Primarchs - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSlayPrimarchsComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveSlayPrimarchsCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZZerus03Objective01", libSwaC_ge_MissionObjectiveState_Completed);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSlayPrimarchsComplete_Init () {
    gt_ObjectiveSlayPrimarchsComplete = TriggerCreate("gt_ObjectiveSlayPrimarchsComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Survive - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSurviveCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZZerus03Objective02");
    gv_objectiveDestroyDominionBase2 = ObjectiveLastCreated();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSurviveCreate_Init () {
    gt_ObjectiveSurviveCreate = TriggerCreate("gt_ObjectiveSurviveCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Survive - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSurviveComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveSurviveCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZZerus03Objective02", libSwaC_ge_MissionObjectiveState_Completed);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSurviveComplete_Init () {
    gt_ObjectiveSurviveComplete = TriggerCreate("gt_ObjectiveSurviveComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Survive - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSurviveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveSurviveCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZZerus03Objective02", libSwaC_ge_MissionObjectiveState_Failed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSurviveFailed_Init () {
    gt_ObjectiveSurviveFailed = TriggerCreate("gt_ObjectiveSurviveFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Slay Zurvan - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSlayZurvanCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZZerus03Objective04");
    gv_objectiveDestroyDominionBase3 = ObjectiveLastCreated();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSlayZurvanCreate_Init () {
    gt_ObjectiveSlayZurvanCreate = TriggerCreate("gt_ObjectiveSlayZurvanCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Slay Zurvan - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSlayZurvanComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveSlayZurvanCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZZerus03Objective04", libSwaC_ge_MissionObjectiveState_Completed);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSlayZurvanComplete_Init () {
    gt_ObjectiveSlayZurvanComplete = TriggerCreate("gt_ObjectiveSlayZurvanComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Xel'Naga Relics - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveXelNagaRelicsCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZZerus03Objective03");
    if ((gv_relicsRemainingInArea == 0)) {
        libSwaC_gf_SetMissionObjectiveProgress2("ZZerus03Objective03", gv_relicsFound, true, TextReplaceWord(StringExternal("Param/Value/DCC1D3D5"), StringExternal("Param/Value/DAEB6E65"), IntToText(gv_relicsRemainingInArea), c_stringReplaceAll, c_stringCase), true);
    }
    else {
        if ((gv_relicsRemainingInArea == 1)) {
            libSwaC_gf_SetMissionObjectiveProgress2("ZZerus03Objective03", gv_relicsFound, true, TextReplaceWord(StringExternal("Param/Value/11FFDDB0"), StringExternal("Param/Value/2CB3963C"), IntToText(gv_relicsRemainingInArea), c_stringReplaceAll, c_stringCase), true);
        }
        else {
            libSwaC_gf_SetMissionObjectiveProgress2("ZZerus03Objective03", gv_relicsFound, true, TextReplaceWord(StringExternal("Param/Value/D0251AF1"), StringExternal("Param/Value/B2C9F5A1"), IntToText(gv_relicsRemainingInArea), c_stringReplaceAll, c_stringCase), true);
        }
    }
    gv_objectiveDestroyDominionBase22 = ObjectiveLastCreated();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveXelNagaRelicsCreate_Init () {
    gt_ObjectiveXelNagaRelicsCreate = TriggerCreate("gt_ObjectiveXelNagaRelicsCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Xel'Naga Relics - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveXelNagaRelicsComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveXelNagaRelicsCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZZerus03Objective03", libSwaC_ge_MissionObjectiveState_Completed);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveXelNagaRelicsComplete_Init () {
    gt_ObjectiveXelNagaRelicsComplete = TriggerCreate("gt_ObjectiveXelNagaRelicsComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Mission Help Q
//--------------------------------------------------------------------------------------------------
bool gt_TipMissionHelpQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_DisplayMissionTip(StringExternal("Param/Value/B4FEC3EF"));
    Wait(libSwaC_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipMissionHelpQ_Init () {
    gt_TipMissionHelpQ = TriggerCreate("gt_TipMissionHelpQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Yagdra Victory Shot
//--------------------------------------------------------------------------------------------------
bool gt_YagdraVictoryShot_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    gv_victoryShotChanneling = false;
    libNtve_gf_StoreUnitSelection(gv_pLAYER_01_USER, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    gf_BossVictoryMovement(gv_bossLocation, gv_channelLocation);
    CameraInfoSetTarget(CameraInfoFromId(3850), PointWithOffsetPolar(gv_bossLocation, 4.0, 90.0));
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(3850), 1.5, -1, 10.0, true);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    VisEnable(c_visTypeMask, false);
    VisEnable(c_visTypeFog, false);
    TriggerExecute(gt_VictoryShotMusicYagdra, true, false);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    Wait(1.0, c_timeGame);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicOutofTransmission);
    gv_victoryShotCompleted = false;
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    Wait(3.0, c_timeGame);
    if (((gv_bossFacing > 150.0) || (gv_bossFacing < 30.0))) {
        if ((gv_bossFacing > 240.0) && (gv_bossFacing < 330.0)) {
            CameraSetValue(gv_pLAYER_01_USER, c_cameraValueHeightOffset, (CameraInfoGetValue(CameraInfoFromId(3850), c_cameraValueHeightOffset) - 3.0), 2.0, -1, 10.0);
        }
        else {
            CameraSetValue(gv_pLAYER_01_USER, c_cameraValueHeightOffset, (CameraInfoGetValue(CameraInfoFromId(3850), c_cameraValueHeightOffset) - 2.0), 2.0, -1, 10.0);
        }
    }

    Wait(4.0, c_timeGame);
    CameraInfoSetTarget(CameraInfoFromId(4000), PointWithOffsetPolar(PointWithOffsetPolar(gv_bossLocation, 2.5, AngleBetweenPoints(gv_bossLocation, gv_channelLocation)), 1.0, 90.0));
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(4000), 2.5, -1, 10.0, true);
    UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("move", 4), gv_bossLocation), c_orderQueueReplace);
    UnitSetState(gv_kerrigan, c_unitStateFidget, false);
    SoundPlay(SoundLink("ZZerus03BossDeadStinger", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitCreateEffectPoint(gv_kerrigan, "KerriganEnergyCollect", gv_bossLocation);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_kerrigan), c_animNameDefault, "Spell A", 0, c_animTimeDefault);
    gv_victoryShotChanneling = true;
    Wait(5.0, c_timeGame);
    gv_victoryShotCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_YagdraVictoryShot_Init () {
    gt_YagdraVictoryShot = TriggerCreate("gt_YagdraVictoryShot_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kraith Victory Shot
//--------------------------------------------------------------------------------------------------
bool gt_KraithVictoryShot_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    gv_victoryShotChanneling = false;
    libNtve_gf_StoreUnitSelection(gv_pLAYER_01_USER, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    gf_BossVictoryMovement(gv_bossLocation, gv_channelLocation);
    if ((RegionContainsPoint(RegionFromId(41), gv_bossLocation) == true)) {
        CameraInfoSetTarget(CameraInfoFromId(4624), PointWithOffsetPolar(gv_bossLocation, 0.5, 90.0));
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(4624), 1.2, -1, 10.0, true);
    }
    else {
        CameraInfoSetTarget(CameraInfoFromId(2149), PointWithOffsetPolar(gv_bossLocation, 0.5, 90.0));
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2149), 1.2, -1, 10.0, true);
    }
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    TriggerExecute(gt_VictoryShotMusicKraith, true, false);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    Wait(1.0, c_timeGame);
    libSwaC_gf_CinematicModeSwarmCampaign(true, 1.0);
    libNtve_gf_GlobalCinematicSetting(true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicOutofTransmission);
    gv_victoryShotCompleted = false;
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    Wait(2.5, c_timeGame);
    if ((RegionContainsPoint(RegionFromId(41), gv_bossLocation) == true)) {
        CameraInfoSetTarget(CameraInfoFromId(4625), PointWithOffsetPolar(PointWithOffsetPolar(gv_bossLocation, 2.5, AngleBetweenPoints(gv_bossLocation, gv_channelLocation)), 1.0, 90.0));
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(4625), 2.5, -1, 10.0, true);
    }
    else {
        CameraInfoSetTarget(CameraInfoFromId(4000), PointWithOffsetPolar(PointWithOffsetPolar(gv_bossLocation, 2.5, AngleBetweenPoints(gv_bossLocation, gv_channelLocation)), 1.0, 90.0));
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(4000), 2.5, -1, 10.0, true);
    }
    UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("move", 4), gv_bossLocation), c_orderQueueReplace);
    UnitSetState(gv_kerrigan, c_unitStateFidget, false);
    SoundPlay(SoundLink("ZZerus03BossDeadStinger", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitCreateEffectPoint(gv_kerrigan, "KerriganEnergyCollect", gv_bossLocation);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_kerrigan), c_animNameDefault, "Spell A", 0, c_animTimeDefault);
    gv_victoryShotChanneling = true;
    Wait(5.0, c_timeGame);
    gv_victoryShotCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KraithVictoryShot_Init () {
    gt_KraithVictoryShot = TriggerCreate("gt_KraithVictoryShot_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slivan Victory Shot
//--------------------------------------------------------------------------------------------------
bool gt_SlivanVictoryShot_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    gv_victoryShotChanneling = false;
    libNtve_gf_StoreUnitSelection(gv_pLAYER_01_USER, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    gf_BossVictoryMovement(gv_bossLocation, gv_channelLocation);
    CameraInfoSetTarget(CameraInfoFromId(3995), PointWithOffsetPolar(gv_bossLocation, 3.0, 90.0));
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(3995), 1.2, -1, 10.0, true);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    TriggerExecute(gt_VictoryShotMusicSlivan, true, false);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    Wait(1.0, c_timeGame);
    libSwaC_gf_CinematicModeSwarmCampaign(true, 1.0);
    libNtve_gf_GlobalCinematicSetting(true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicOutofTransmission);
    gv_victoryShotCompleted = false;
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    Wait(3.0, c_timeGame);
    CameraInfoSetTarget(CameraInfoFromId(4000), PointWithOffsetPolar(PointWithOffsetPolar(gv_bossLocation, 2.5, AngleBetweenPoints(gv_bossLocation, gv_channelLocation)), 1.0, 90.0));
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(4000), 2.5, -1, 10.0, true);
    UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("move", 4), gv_bossLocation), c_orderQueueReplace);
    UnitSetState(gv_kerrigan, c_unitStateFidget, false);
    SoundPlay(SoundLink("ZZerus03BossDeadStinger", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitCreateEffectPoint(gv_kerrigan, "KerriganEnergyCollect", gv_bossLocation);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_kerrigan), c_animNameDefault, "Spell A", 0, c_animTimeDefault);
    gv_victoryShotChanneling = true;
    Wait(5.0, c_timeGame);
    gv_victoryShotCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlivanVictoryShot_Init () {
    gt_SlivanVictoryShot = TriggerCreate("gt_SlivanVictoryShot_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zurvan Victory Shot
//--------------------------------------------------------------------------------------------------
bool gt_ZurvanVictoryShot_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    gv_victoryShotChanneling = false;
    SoundPlay(SoundLink("Zurvan_DeathRoar", -1), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_StoreUnitSelection(gv_pLAYER_01_USER, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    gf_BossVictoryMovementZurvan(gv_bossLocation);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(3996), 1.5, -1, 10.0, true);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeGame);
    TriggerExecute(gt_VictoryShotMusicZurvan, true, false);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    libSwaC_gf_CinematicModeSwarmCampaign(true, 1.0);
    libNtve_gf_GlobalCinematicSetting(true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicOutofTransmission);
    gv_victoryShotCompleted = false;
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    Wait(0.5, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(3999), 4.0, -1, 10.0, true);
    Wait(3.0, c_timeGame);
    UnitSetHeight(gv_kerrigan, 4.0, 1.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(4051), 2.0, -1, 10.0, true);
    Wait(4.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(4001), 1.0, -1, 10.0, true);
    Wait(2.167, c_timeGame);
    SoundPlay(SoundLink("ZZerus03BossDeadStinger", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitCreateEffectPoint(gv_kerrigan, "KerriganEnergyCollect", libNtve_gf_PointWithZOffset(PointFromId(4148), 8.0));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_kerrigan), c_animNameDefault, "Spell A", 0, c_animTimeDefault);
    gv_victoryShotChanneling = true;
    Wait(5.0, c_timeGame);
    gv_victoryShotCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZurvanVictoryShot_Init () {
    gt_ZurvanVictoryShot = TriggerCreate("gt_ZurvanVictoryShot_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zurvan Victory Spell B
//--------------------------------------------------------------------------------------------------
bool gt_ZurvanVictorySpellB_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto9809C521_n = 9;
    int auto9809C521_i;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetState(gv_kerrigan, c_unitStateFidget, false);
    for (auto9809C521_i = 1; auto9809C521_i <= auto9809C521_n; auto9809C521_i += 1) {
        UnitIssueOrder(gv_kerrigan, Order(AbilityCommand("K5KerriganUnburrow", 0)), c_orderQueueReplace);
        UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("move", 0), gv_channelLocation), c_orderQueueAddToEnd);
        UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(4148)), c_orderQueueAddToEnd);
        Wait(0.5, c_timeGame);
    }
    UnitIssueOrder(gv_kerrigan, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitSetPosition(gv_kerrigan, gv_channelLocation, false);
    UnitSetFacing(gv_kerrigan, 90.0, 0.0);
    Wait(0.1, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_kerrigan), c_animNameDefault, "Spell B", 0, c_animTimeDefault);
    Wait(1.0, c_timeGame);
    CameraShake(gv_pLAYER_01_USER, "Massive", "Earthquake", 0.5, 0.5, 3.0);
    TriggerExecute(gt_ZurvanVictoryExplosions, true, false);
    Wait(3.2, c_timeGame);
    UnitSetHeight(gv_kerrigan, 0.0, 0.4);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZurvanVictorySpellB_Init () {
    gt_ZurvanVictorySpellB = TriggerCreate("gt_ZurvanVictorySpellB_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boss Victory Shot Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_BossVictoryShotCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto902A17C3_g;
    int auto902A17C3_u;
    unit auto902A17C3_var;
    unitgroup auto582F11DE_g;
    int auto582F11DE_u;
    unit auto582F11DE_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto902A17C3_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto902A17C3_u = UnitGroupCount(auto902A17C3_g, c_unitCountAll);
    for (;; auto902A17C3_u -= 1) {
        auto902A17C3_var = UnitGroupUnitFromEnd(auto902A17C3_g, auto902A17C3_u);
        if (auto902A17C3_var == null) { break; }
        UnitSetPropertyFixed(auto902A17C3_var, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(auto902A17C3_var, c_unitPropEnergyPercent, 100.0);
    }
    libNtve_gf_RestoreUnitSelection(gv_pLAYER_01_USER);
    if ((gv_victoryShotCompleted == true)) {
        CameraSetData(PlayerGroupAll(), "ZoomedCamera");
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 1.5, -1, 10.0, false);
        CameraSetValue(gv_pLAYER_01_USER, c_cameraValueDistance, 30.0, 1.5, -1, 10.0);
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.5);
        libNtve_gf_GlobalCinematicSetting(false);
        VisEnable(c_visTypeMask, true);
        VisEnable(c_visTypeFog, true);
        Wait(1.5, c_timeGame);
    }
    else {
        CinematicFade(false, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
        UnitSetPosition(gv_kerrigan, gv_channelLocation, false);
        UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("move", 4), gv_bossLocation), c_orderQueueReplace);
        CameraSetData(PlayerGroupAll(), "ZoomedCamera");
        CameraInfoSetTarget(CameraInfoFromId(3994), gv_channelLocation);
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(3994), 0.0, -1, 10.0, true);
        CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.0);
        libNtve_gf_GlobalCinematicSetting(false);
        VisEnable(c_visTypeMask, true);
        VisEnable(c_visTypeFog, true);
        Wait(1.0, c_timeGame);
    }
    UnitSelect(gv_kerrigan, gv_pLAYER_01_USER, true);
    auto582F11DE_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto582F11DE_u = UnitGroupCount(auto582F11DE_g, c_unitCountAll);
    for (;; auto582F11DE_u -= 1) {
        auto582F11DE_var = UnitGroupUnitFromEnd(auto582F11DE_g, auto582F11DE_u);
        if (auto582F11DE_var == null) { break; }
        UnitSetState(auto582F11DE_var, c_unitStateInvulnerable, false);
    }
    UnitSetState(gv_kerrigan, c_unitStateFidget, true);
    gv_inCinematic = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BossVictoryShotCleanup_Init () {
    gt_BossVictoryShotCleanup = TriggerCreate("gt_BossVictoryShotCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zurvan Victory Shot Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_ZurvanVictoryShotCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoF153C975_g;
    int autoF153C975_u;
    unit autoF153C975_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_ZurvanVictorySpellB);
    if ((gv_victoryShotCompleted == true)) {
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(3483), 1.5, -1, 10.0, true);
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.5);
        libNtve_gf_GlobalCinematicSetting(false);
        Wait(1.5, c_timeGame);
    }
    else {
        CinematicFade(false, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
        CameraShakeStop(gv_pLAYER_01_USER);
        UnitSetPosition(gv_kerrigan, gv_channelLocation, false);
        UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("move", 4), gv_bossLocation), c_orderQueueReplace);
        libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_kerrigan), c_animNameDefault);
        UnitSetPropertyFixed(gv_kerrigan, c_unitPropHeight, 0.0);
        UnitBehaviorRemove(gv_kerrigan, "KerriganBeamOfDeath", 1);
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(3483), 0.0, -1, 10.0, true);
        CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.0);
        libNtve_gf_GlobalCinematicSetting(false);
        Wait(1.0, c_timeGame);
    }
    autoF153C975_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF153C975_u = UnitGroupCount(autoF153C975_g, c_unitCountAll);
    for (;; autoF153C975_u -= 1) {
        autoF153C975_var = UnitGroupUnitFromEnd(autoF153C975_g, autoF153C975_u);
        if (autoF153C975_var == null) { break; }
        UnitSetState(autoF153C975_var, c_unitStateInvulnerable, false);
    }
    libNtve_gf_RestoreUnitSelection(gv_pLAYER_01_USER);
    UnitSetState(gv_kerrigan, c_unitStateFidget, true);
    gv_inCinematic = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZurvanVictoryShotCleanup_Init () {
    gt_ZurvanVictoryShotCleanup = TriggerCreate("gt_ZurvanVictoryShotCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zurvan Victory Explosions
//--------------------------------------------------------------------------------------------------
bool gt_ZurvanVictoryExplosions_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_helperUnit;

    // Automatic Variable Declarations
    const int autoBE5A23A3_n = 10;
    int autoBE5A23A3_i;
    const int auto791B8E35_n = 10;
    int auto791B8E35_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "BallOfDeath", c_unitCreateIgnorePlacement, 0, PointFromId(4148));
    lv_helperUnit = UnitLastCreated();
    libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
    UnitSetPropertyFixed(lv_helperUnit, c_unitPropHeight, 18.0);
    Wait(0.5, c_timeGame);
    UnitBehaviorAdd(gv_kerrigan, "KerriganBeamOfDeathZurvan", gv_kerrigan, 1);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 70.0, 0.01);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 70.0, 0.01);
    SoundPlay(SoundLink("Event_Zerus03_KerriganKillsZurvanElectric", -1), PlayerGroupAll(), 100.0, 0.0);
    for (autoBE5A23A3_i = 1; autoBE5A23A3_i <= autoBE5A23A3_n; autoBE5A23A3_i += 1) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 15.0, 0.01);
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, libNtve_gf_PointFromXYZ(RandomFixed((PointGetX(UnitGetPosition(lv_helperUnit)) - 4.0), (PointGetX(UnitGetPosition(lv_helperUnit)) + 4.0)), RandomFixed((PointGetY(UnitGetPosition(lv_helperUnit)) - 4.0), (PointGetY(UnitGetPosition(lv_helperUnit)) + 4.0)), RandomFixed(16.0, 24.0)));
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Terran, libNtve_gf_PointFromXYZ(RandomFixed((PointGetX(UnitGetPosition(lv_helperUnit)) - 4.0), (PointGetX(UnitGetPosition(lv_helperUnit)) + 4.0)), RandomFixed((PointGetY(UnitGetPosition(lv_helperUnit)) - 4.0), (PointGetY(UnitGetPosition(lv_helperUnit)) + 4.0)), RandomFixed(16.0, 24.0)));
        Wait(0.1, c_timeGame);
    }
    UnitBehaviorRemove(gv_kerrigan, "KerriganBeamOfDeathZurvan", 1);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 0.1);
    for (auto791B8E35_i = 1; auto791B8E35_i <= auto791B8E35_n; auto791B8E35_i += 1) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 15.0, 0.01);
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, libNtve_gf_PointFromXYZ(RandomFixed((PointGetX(UnitGetPosition(lv_helperUnit)) - 4.0), (PointGetX(UnitGetPosition(lv_helperUnit)) + 4.0)), RandomFixed((PointGetY(UnitGetPosition(lv_helperUnit)) - 4.0), (PointGetY(UnitGetPosition(lv_helperUnit)) + 4.0)), RandomFixed(16.0, 24.0)));
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Terran, libNtve_gf_PointFromXYZ(RandomFixed((PointGetX(UnitGetPosition(lv_helperUnit)) - 4.0), (PointGetX(UnitGetPosition(lv_helperUnit)) + 4.0)), RandomFixed((PointGetY(UnitGetPosition(lv_helperUnit)) - 4.0), (PointGetY(UnitGetPosition(lv_helperUnit)) + 4.0)), RandomFixed(16.0, 24.0)));
        Wait(0.1, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZurvanVictoryExplosions_Init () {
    gt_ZurvanVictoryExplosions = TriggerCreate("gt_ZurvanVictoryExplosions_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Shot Music Yagdra
//--------------------------------------------------------------------------------------------------
bool gt_VictoryShotMusicYagdra_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    lv_soundtrack = "ZZerus03MusicEvent03_YagdraDefeated";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZZerus03MusicAlt1", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryShotMusicYagdra_Init () {
    gt_VictoryShotMusicYagdra = TriggerCreate("gt_VictoryShotMusicYagdra_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Shot Music Kraith
//--------------------------------------------------------------------------------------------------
bool gt_VictoryShotMusicKraith_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    lv_soundtrack = "ZZerus03_MusicCutscene06_KraithDefeated";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZZerus03MusicAlt2", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryShotMusicKraith_Init () {
    gt_VictoryShotMusicKraith = TriggerCreate("gt_VictoryShotMusicKraith_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Shot Music Slivan
//--------------------------------------------------------------------------------------------------
bool gt_VictoryShotMusicSlivan_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    lv_soundtrack = "ZZerus03_MusicCutscene09_SlivanDefeated";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryShotMusicSlivan_Init () {
    gt_VictoryShotMusicSlivan = TriggerCreate("gt_VictoryShotMusicSlivan_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Shot Music Zurvan
//--------------------------------------------------------------------------------------------------
bool gt_VictoryShotMusicZurvan_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    lv_soundtrack = "ZZerus03MusicEvent12_ZurvanDefeated";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryShotMusicZurvan_Init () {
    gt_VictoryShotMusicZurvan = TriggerCreate("gt_VictoryShotMusicZurvan_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto1248B663_g;
    int auto1248B663_u;
    unit auto1248B663_var;
    unitgroup autoC14040EE_g;
    int autoC14040EE_u;
    unit autoC14040EE_var;
    unitgroup autoC4CB7A6F_g;
    int autoC4CB7A6F_u;
    unit autoC4CB7A6F_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateFidgetingEnabled, false);
    UnitPauseAll(true);
    libNtve_gf_PauseUnit(gv_kerrigan, false);
    libNtve_gf_PauseUnit(gv_yagdra, false);
    libNtve_gf_PauseUnit(gv_slivan, false);
    UnitGroupAdd(gv_cinematicTempUnits, UnitFromId(2004));
    UnitGroupAdd(gv_cinematicTempUnits, UnitFromId(2005));
    UnitGroupAdd(gv_cinematicTempUnits, UnitFromId(2006));
    auto1248B663_g = UnitGroup("Overlord", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1248B663_u = UnitGroupCount(auto1248B663_g, c_unitCountAll);
    for (;; auto1248B663_u -= 1) {
        auto1248B663_var = UnitGroupUnitFromEnd(auto1248B663_g, auto1248B663_u);
        if (auto1248B663_var == null) { break; }
        libNtve_gf_PauseUnit(auto1248B663_var, false);
    }
    autoC14040EE_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC14040EE_u = UnitGroupCount(autoC14040EE_g, c_unitCountAll);
    for (;; autoC14040EE_u -= 1) {
        autoC14040EE_var = UnitGroupUnitFromEnd(autoC14040EE_g, autoC14040EE_u);
        if (autoC14040EE_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoC14040EE_var, false);
    }
    autoC4CB7A6F_g = UnitGroup(null, gv_pLAYER_02_DOMINION22, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC4CB7A6F_u = UnitGroupCount(autoC4CB7A6F_g, c_unitCountAll);
    for (;; autoC4CB7A6F_u -= 1) {
        autoC4CB7A6F_var = UnitGroupUnitFromEnd(autoC4CB7A6F_g, autoC4CB7A6F_u);
        if (autoC4CB7A6F_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoC4CB7A6F_var, false);
    }
    libNtve_gf_ShowHideUnit(gv_slivan, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_crashingChargePoint;

    // Automatic Variable Declarations
    const int autoAEB40E39_n = 6;
    int autoAEB40E39_i;
    unitgroup auto87D5AA25_g;
    int auto87D5AA25_u;
    unit auto87D5AA25_var;
    unitgroup auto5E7852F4_g;
    int auto5E7852F4_u;
    unit auto5E7852F4_var;
    unitgroup auto0DBE4408_g;
    int auto0DBE4408_u;
    unit auto0DBE4408_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(3673), 0.0, -1, 10.0, true);
    Wait(1.0, c_timeGame);
    libNtve_gf_UnitCreateFacingPoint(1, "PrimalZergling", 0, gv_pLAYER_02_DOMINION, PointFromId(465), UnitGetPosition(gv_yagdra));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, 1.0);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_UnitCreateFacingPoint(1, "PrimalZergling", 0, gv_pLAYER_02_DOMINION, PointFromId(3681), UnitGetPosition(gv_yagdra));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, 1.0);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_UnitCreateFacingPoint(1, "PrimalZergling", 0, gv_pLAYER_02_DOMINION, PointFromId(3685), UnitGetPosition(gv_yagdra));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, 1.0);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitCreate(1, "Kraith", 0, gv_pLAYER_02_DOMINION2, UnitGetPosition(gv_kraith), UnitGetFacing(gv_kraith));
    gv_introKraith = UnitLastCreated();
    for (autoAEB40E39_i = 1; autoAEB40E39_i <= autoAEB40E39_n; autoAEB40E39_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "PrimalZergling", 0, gv_pLAYER_02_DOMINION2, RegionRandomPoint(RegionFromId(62)), UnitGetPosition(gv_kraith));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, 1.0);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    }
    Wait(0.1, c_timeGame);
    TriggerExecute(gt_IntroMusic, true, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_introCinematicCompleted = false;
    CinematicFade(true, 3.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    Wait(1.0, c_timeReal);
    auto87D5AA25_g = UnitGroup("PrimalZergling", c_playerAny, RegionCircle(PointFromId(3681), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto87D5AA25_u = UnitGroupCount(auto87D5AA25_g, c_unitCountAll);
    for (;; auto87D5AA25_u -= 1) {
        auto87D5AA25_var = UnitGroupUnitFromEnd(auto87D5AA25_g, auto87D5AA25_u);
        if (auto87D5AA25_var == null) { break; }
        UnitIssueOrder(auto87D5AA25_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2003)), c_orderQueueReplace);
    }
    Wait(2.0, c_timeReal);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(3675), (SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Zerus03|Line00014", true), c_soundIndexAny)) + 2), -1, 10.0, true);
    libNtve_gf_UnitCreateFacingPoint(1, "ZerusBossTarget", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION222, PointFromId(2003), UnitGetPosition(gv_yagdra));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    gv_yagdraHelperUnit = UnitLastCreated();
    UnitIssueOrder(gv_yagdraHelperUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(3685)), c_orderQueueReplace);
    UnitIssueOrder(gv_yagdra, OrderTargetingUnit(AbilityCommand("YagdraFirebreath", 0), gv_yagdraHelperUnit), c_orderQueueReplace);
    gf_SetAllSoundChannelVolumesforZerus03CinematicSpeech();
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 25.0, 0.15);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 35.0, 0.5);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    libSwaC_gf_SendTransmissionCampaign(gv_zurvan, "zBriefing_Zerus03|Line00014", c_transmissionDurationAdd, 1.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(1.0, c_timeGame);
    CameraShake(gv_pLAYER_01_USER, "Light", "Tremor", 1.0, 1.0, 8.0);
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraShakeStop(gv_pLAYER_01_USER);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(3674), 0.0, -1, 10.0, true);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 15.0, 0.5);
    libSwaC_gf_SendTransmissionCampaign(gv_zurvan, "zBriefing_Zerus03|Line00015", c_transmissionDurationAdd, 1.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_IntroKraithEffects, true, false);
    Wait(1.0, c_timeGame);
    auto5E7852F4_g = UnitGroup("PrimalZergling", gv_pLAYER_02_DOMINION2, RegionCircle(UnitGetPosition(gv_introKraith), 16.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5E7852F4_u = UnitGroupCount(auto5E7852F4_g, c_unitCountAll);
    for (;; auto5E7852F4_u -= 1) {
        auto5E7852F4_var = UnitGroupUnitFromEnd(auto5E7852F4_g, auto5E7852F4_u);
        if (auto5E7852F4_var == null) { break; }
        UnitIssueOrder(auto5E7852F4_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(3364)), c_orderQueueReplace);
    }
    Wait(1.5, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(3676), 2.0, -1, 10.0, true);
    Wait(5.0, c_timeGame);
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(3677), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(3678), 8.0, -1, 10.0, true);
    TriggerEnable(gt_SlivanBossCreepers, true);
    TriggerExecute(gt_IntroSlivanMovement, true, false);
    TriggerExecute(gt_IntroSlivanCreeperSpawning, true, false);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 20.0, 0.15);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 7.5, 0.5);
    libSwaC_gf_SendTransmissionCampaign(gv_zurvan, "zBriefing_Zerus03|Line00016", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_zurvan, "zBriefing_Zerus03|Line00017", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CinematicFade(false, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(4), 0.0, -1, 10.0, true);
    UnitBehaviorAdd(gv_kerrigan, "KerriganWalk", gv_kerrigan, 1);
    UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(3682)), c_orderQueueReplace);
    UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(3683)), c_orderQueueAddToEnd);
    auto0DBE4408_g = UnitGroup("Overlord", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0DBE4408_u = UnitGroupCount(auto0DBE4408_g, c_unitCountAll);
    for (;; auto0DBE4408_u -= 1) {
        auto0DBE4408_var = UnitGroupUnitFromEnd(auto0DBE4408_g, auto0DBE4408_u);
        if (auto0DBE4408_var == null) { break; }
        UnitIssueOrder(auto0DBE4408_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(3684)), c_orderQueueReplace);
    }
    SoundPlay(SoundLink("Event_Zerus03_OverlordFlyBy", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introSound1 = SoundLastPlayed();
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(92), (SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Zerus03|Line00018", true), c_soundIndexAny)) - 1), -1, 10.0, true);
    Wait(1.0, c_timeReal);
    libSwaC_gf_SendTransmissionCampaign(gv_zurvan, "zBriefing_Zerus03|Line00018", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(458), (SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Zerus03|Line00020", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Zerus03|Line00021", true), c_soundIndexAny))), -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zBriefing_Zerus03|Line00020", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zBriefing_Zerus03|Line00021", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 1.0);
    UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(4677)), c_orderQueueAddToEnd);
    TransmissionWait(TransmissionLastSent(), 0.0);
    gv_introCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_introCinematicCompleted == true)) {
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto44EAFEAD_g;
    int auto44EAFEAD_u;
    unit auto44EAFEAD_var;
    unitgroup auto3D641543_g;
    int auto3D641543_u;
    unit auto3D641543_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_introMusicCompleted == false)) {
        TriggerStop(gt_IntroMusic);
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZZerus03MusicMain", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }

    TriggerStop(gt_IntroKraithEffects);
    TriggerStop(gt_IntroSlivanCreeperSpawning);
    TriggerStop(gt_IntroSlivanMovement);
    TriggerEnable(gt_SlivanBossCreepers, false);
    TriggerEnable(gt_SlivanPathingDummy, false);
    CameraShakeStop(gv_pLAYER_01_USER);
    auto44EAFEAD_g = UnitGroup("SlivanCreep", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto44EAFEAD_u = UnitGroupCount(auto44EAFEAD_g, c_unitCountAll);
    for (;; auto44EAFEAD_u -= 1) {
        auto44EAFEAD_var = UnitGroupUnitFromEnd(auto44EAFEAD_g, auto44EAFEAD_u);
        if (auto44EAFEAD_var == null) { break; }
        UnitRemove(auto44EAFEAD_var);
    }
    auto3D641543_g = gv_cinematicTempUnits;
    auto3D641543_u = UnitGroupCount(auto3D641543_g, c_unitCountAll);
    for (;; auto3D641543_u -= 1) {
        auto3D641543_var = UnitGroupUnitFromEnd(auto3D641543_g, auto3D641543_u);
        if (auto3D641543_var == null) { break; }
        UnitRemove(auto3D641543_var);
    }
    UnitGroupClear(gv_cinematicTempUnits);
    UnitPauseAll(false);
    UnitSetPosition(gv_slivan, PointFromId(3679), false);
    UnitIssueOrder(gv_slivan, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitSetFacing(gv_slivan, PointGetFacing(PointFromId(3679)), 0.0);
    libNtve_gf_ShowHideUnit(gv_slivan, false);
    libNtve_gf_PauseUnit(gv_yagdra, true);
    UnitRemove(gv_introKraith);
    UnitBehaviorRemove(gv_kerrigan, "KerriganWalk", 1);
    if ((gv_introCinematicCompleted == false)) {
        UnitSetPosition(gv_kerrigan, PointFromId(3682), false);
        UnitSetFacing(gv_kerrigan, PointGetFacing(PointFromId(3682)), 0.0);
    }

    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateFidgetingEnabled, true);
    CameraSetData(PlayerGroupAll(), "ZoomedCamera");
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    CampaignInitAI();
    RegionPlayableMapSet(RegionFromId(1));
    SoundStop(gv_introSound1, true);
    SoundStop(gv_introSound2, true);
    UnitGroupSelect(UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_pLAYER_01_USER, true);
    if ((gv_introCinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), lv_fadeDuration, -1, 10, false);
        CameraSetValue(gv_pLAYER_01_USER, c_cameraValueDistance, 30.0, lv_fadeDuration, -1, 10.0);
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
        libNtve_gf_GlobalCinematicSetting(false);
        gv_inCinematic = false;
        Wait(lv_fadeDuration, c_timeGame);
    }
    else {
        lv_fadeDuration = 1.0;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
        libNtve_gf_GlobalCinematicSetting(false);
        libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, (30.0 + 8.0), 30.0, PointFromId(3682), lv_fadeDuration);
        gv_inCinematic = false;
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Slivan Movement
//--------------------------------------------------------------------------------------------------
bool gt_IntroSlivanMovement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto341D224C_g;
    int auto341D224C_u;
    unit auto341D224C_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(gv_slivan, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(3680)), c_orderQueueReplace);
    while (true) {
        Wait(1.0, c_timeGame);
        if ((UnitIsAlive(gv_slivan) == false)) {
            TriggerEnable(gt_SlivanBossCreepers, false);
            return true;
        }

        auto341D224C_g = gv_slivanBossCreepers;
        auto341D224C_u = UnitGroupCount(auto341D224C_g, c_unitCountAll);
        for (;; auto341D224C_u -= 1) {
            auto341D224C_var = UnitGroupUnitFromEnd(auto341D224C_g, auto341D224C_u);
            if (auto341D224C_var == null) { break; }
            if ((RandomInt(1, 8) == 1)) {
                UnitIssueOrder(auto341D224C_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(121))), c_orderQueueReplace);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSlivanMovement_Init () {
    gt_IntroSlivanMovement = TriggerCreate("gt_IntroSlivanMovement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Slivan Creeper Spawning
//--------------------------------------------------------------------------------------------------
bool gt_IntroSlivanCreeperSpawning_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoE2222DAD_n;
    int autoE2222DAD_i;

    // Actions
    if (!runActions) {
        return true;
    }

    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 25.0, 1.0);
    gv_cinematicCreepersSpawned = 0;
    autoE2222DAD_n = libHots_gf_DifficultyValueInt2(25, 25, 30);
    for (autoE2222DAD_i = 1; autoE2222DAD_i <= autoE2222DAD_n; autoE2222DAD_i += 1) {
        gf_SlivanBossCreeperSpawnAddBehavior();
        gv_cinematicCreepersSpawned += 2;
        Wait(libHots_gf_DifficultyValueFixed2(0.4, 0.4, 0.33), c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSlivanCreeperSpawning_Init () {
    gt_IntroSlivanCreeperSpawning = TriggerCreate("gt_IntroSlivanCreeperSpawning_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Kraith Effects
//--------------------------------------------------------------------------------------------------
bool gt_IntroKraithEffects_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_crashingChargePoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_crashingChargePoint = PointFromId(3364);
    UnitIssueOrder(gv_introKraith, OrderTargetingPoint(AbilityCommand("KraithCrashingCharge", 0), lv_crashingChargePoint), c_orderQueueReplace);
    while (!((libNtve_gf_UnitInRegion(gv_introKraith, RegionCircle(lv_crashingChargePoint, 2.0)) == true))) {
        Wait(0.1, c_timeGame);
    }
    gf_KraithEarthquakeIntro(lv_crashingChargePoint);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroKraithEffects_Init () {
    gt_IntroKraithEffects = TriggerCreate("gt_IntroKraithEffects_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Music
//--------------------------------------------------------------------------------------------------
bool gt_IntroMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
    lv_soundtrack = "ZZerus03MissionIntro";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    gv_introMusicCompleted = true;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZZerus03MusicMain", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroMusic_Init () {
    gt_IntroMusic = TriggerCreate("gt_IntroMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Yagdra Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_YagdraIntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_yagdraEngaged = true;
    if ((TriggerIsEnabled(gt_YagdraAutosave) == true)) {
        TriggerExecute(gt_YagdraAutosave, false, true);
    }

    TriggerQueueEnter();
    TriggerExecute(gt_YagdraIntroSetup, true, true);
    TriggerExecute(gt_YagdraIntroCinematic, true, true);
    TriggerExecute(gt_YagdraIntroCinematicEnd, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_YagdraIntroQ_Init () {
    gt_YagdraIntroQ = TriggerCreate("gt_YagdraIntroQ_Func");
    TriggerAddEventUnitRegion(gt_YagdraIntroQ, null, RegionFromId(21), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Yagdra Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_YagdraIntroSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto9532B3AF_g;
    int auto9532B3AF_u;
    unit auto9532B3AF_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    CameraSave(gv_pLAYER_01_USER);
    libNtve_gf_StoreUnitSelection(gv_pLAYER_01_USER, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    UnitKill(UnitFromId(3010));
    UnitKill(UnitFromId(305));
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION, libNtve_ge_AllianceSetting_Ally);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateFidgetingEnabled, false);
    UnitAbilityShow(gv_kerrigan, "PrimalHeal", true);
    UnitIssueOrder(gv_kerrigan, Order(AbilityCommand("K5KerriganUnburrow", 0)), c_orderQueueReplace);
    if ((gv_relicsFound >= 1)) {
        libSwaC_gf_SetMissionObjectiveProgress2("ZZerus03Objective03", gv_relicsFound, true, null, true);
    }

    auto9532B3AF_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9532B3AF_u = UnitGroupCount(auto9532B3AF_g, c_unitCountAll);
    for (;; auto9532B3AF_u -= 1) {
        auto9532B3AF_var = UnitGroupUnitFromEnd(auto9532B3AF_g, auto9532B3AF_u);
        if (auto9532B3AF_var == null) { break; }
        if ((auto9532B3AF_var != gv_yagdra)) {
            UnitRemove(auto9532B3AF_var);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_YagdraIntroSetup_Init () {
    gt_YagdraIntroSetup = TriggerCreate("gt_YagdraIntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Yagdra Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_YagdraIntroCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoC3EDDC32_g;
    int autoC3EDDC32_u;
    unit autoC3EDDC32_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(666), 0.0, -1, 10.0, true);
    UnitSetPosition(gv_kerrigan, PointFromId(658), false);
    UnitBehaviorAdd(gv_kerrigan, "KerriganWalk", gv_kerrigan, 1);
    UnitCreate(1, "Yagdra", 0, gv_pLAYER_02_DOMINION, PointFromId(3691), UnitGetFacing(gv_yagdra));
    gv_introYagdra = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, gv_introYagdra);
    gv_cinematicStinger = SoundLastPlayed();
    UnitIssueOrder(gv_introYagdra, OrderTargetingPoint(AbilityCommand("YagdraTunnel", 0), PointFromId(3692)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(662)), c_orderQueueReplace);
    autoC3EDDC32_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC3EDDC32_u = UnitGroupCount(autoC3EDDC32_g, c_unitCountAll);
    for (;; autoC3EDDC32_u -= 1) {
        autoC3EDDC32_var = UnitGroupUnitFromEnd(autoC3EDDC32_g, autoC3EDDC32_u);
        if (autoC3EDDC32_var == null) { break; }
        if ((autoC3EDDC32_var != gv_kerrigan)) {
            UnitSetPosition(autoC3EDDC32_var, RegionRandomPoint(RegionFromId(22)), false);
            UnitIssueOrder(autoC3EDDC32_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(8))), c_orderQueueReplace);
        }

    }
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(667), 3.0, -1, 10.0, true);
    TriggerExecute(gt_YagdraMusic, true, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_introCinematicCompleted = false;
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    Wait(1.0, c_timeReal);
    SoundPlay(SoundLink("ZZerus03BossCinematiHit", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introSound1 = SoundLastPlayed();
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(3689), 1.0, -1, 10.0, true);
    CameraShake(gv_pLAYER_01_USER, "Heavy", "Earthquake", 0.25, 0.5, 2.0);
    Wait(1.0, c_timeReal);
    SoundPlay(SoundLink("ZZerus03BossCinematicHit2", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introSound1 = SoundLastPlayed();
    Wait(2.0, c_timeReal);
    gf_SetAllSoundChannelVolumesforZerus03CinematicSpeech();
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    libSwaC_gf_SendTransmissionCampaign(gv_introYagdra, "zMission_Zerus03|Line00088", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_kerrigan), c_animNameDefault, "Stand Work", 0, c_animTimeDefault);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(3693), 2.0, -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Zerus03|Line00010", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 1.0);
    SoundPlay(SoundLink("ZZerus03BossCinematicHit2", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introSound1 = SoundLastPlayed();
    UnitIssueOrder(gv_introYagdra, OrderTargetingPoint(AbilityCommand("YagdraFireball", 0), PointFromId(662)), c_orderQueueReplace);
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(3686), (SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Zerus03|Line00057", true), c_soundIndexAny)) + 3), -1, 10.0, true);
    SoundPlay(SoundLink("ZZerus03BossCinematiHit", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introSound1 = SoundLastPlayed();
    Wait(1.0, c_timeGame);
    UnitBehaviorRemove(gv_kerrigan, "KerriganWalk", 1);
    UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2766)), c_orderQueueReplace);
    UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(662)), c_orderQueueAddToEnd);
    Wait(2.0, c_timeGame);
    libSwaC_gf_SendTransmissionCampaign(gv_introYagdra, "zMission_Zerus03|Line00057", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 3.0);
    UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_yagdra)), c_orderQueueAddToFront);
    TransmissionWait(TransmissionLastSent(), 0.0);
    SoundPlay(SoundLink("ZZerus03BossCinematicHit2", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introSound1 = SoundLastPlayed();
    gv_introCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_YagdraIntroCinematic_Init () {
    gt_YagdraIntroCinematic = TriggerCreate("gt_YagdraIntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Yagdra Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_YagdraIntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_introCinematicCompleted == true)) {
        TriggerExecute(gt_YagdraIntroCleanupNotSkipped, true, true);
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
        TriggerExecute(gt_YagdraIntroCleanupSkipped, true, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_YagdraIntroCinematicEnd_Init () {
    gt_YagdraIntroCinematicEnd = TriggerCreate("gt_YagdraIntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Yagdra Intro Cleanup Not Skipped
//--------------------------------------------------------------------------------------------------
bool gt_YagdraIntroCleanupNotSkipped_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;
    int lv_i;

    // Automatic Variable Declarations
    unitgroup auto04BFF4BB_g;
    int auto04BFF4BB_u;
    unit auto04BFF4BB_var;
    unitgroup auto00F1DFE3_g;
    int auto00F1DFE3_u;
    unit auto00F1DFE3_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_yagdraMusicCompleted == false)) {
        TriggerStop(gt_YagdraMusic);
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZZerus03MusicBoss", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    }

    UnitSetPropertyFixed(gv_introYagdra, c_unitPropLifeMax, UnitGetPropertyFixed(gv_yagdra, c_unitPropLifeMax, c_unitPropCurrent));
    UnitSetPropertyFixed(gv_introYagdra, c_unitPropLifePercent, 100.0);
    UnitGroupAdd(gv_cinematicTempUnits, gv_yagdra);
    UnitGroupRemove(gv_cinematicTempUnits, gv_introYagdra);
    gv_yagdra = gv_introYagdra;
    auto04BFF4BB_g = gv_cinematicTempUnits;
    auto04BFF4BB_u = UnitGroupCount(auto04BFF4BB_g, c_unitCountAll);
    for (;; auto04BFF4BB_u -= 1) {
        auto04BFF4BB_var = UnitGroupUnitFromEnd(auto04BFF4BB_g, auto04BFF4BB_u);
        if (auto04BFF4BB_var == null) { break; }
        UnitRemove(auto04BFF4BB_var);
    }
    UnitGroupClear(gv_cinematicTempUnits);
    UnitIssueOrder(gv_kerrigan, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libSwaC_gf_ResetHeroAbilityCooldowns(libSwaC_ge_HeroUnit_Kerrigan);
    auto00F1DFE3_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto00F1DFE3_u = UnitGroupCount(auto00F1DFE3_g, c_unitCountAll);
    for (;; auto00F1DFE3_u -= 1) {
        auto00F1DFE3_var = UnitGroupUnitFromEnd(auto00F1DFE3_g, auto00F1DFE3_u);
        if (auto00F1DFE3_var == null) { break; }
        UnitSetPropertyFixed(auto00F1DFE3_var, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(auto00F1DFE3_var, c_unitPropEnergyPercent, 100.0);
    }
    RegionPlayableMapSet(RegionFromId(23));
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION, libNtve_ge_AllianceSetting_Enemy);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateFidgetingEnabled, true);
    UnitGroupSelect(UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_pLAYER_01_USER, true);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(23));
    gv_yagdraBossRevealer = VisRevealerLastCreated();
    VisRevealerEnable(VisRevealerLastCreated(), true);
    libNtve_gf_ShareVisionofUnit(gv_yagdra, true, gv_pLAYER_01_USER);
    Wait(0.1, c_timeGame);
    CameraSetData(PlayerGroupAll(), "ZoomedCamera");
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(3687), 1.5, -1, 10.0, true);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.5);
    libNtve_gf_GlobalCinematicSetting(false);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    Wait(1.5, c_timeGame);
    gv_inCinematic = false;
    TriggerExecute(gt_YagdraBossFightController, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_YagdraIntroCleanupNotSkipped_Init () {
    gt_YagdraIntroCleanupNotSkipped = TriggerCreate("gt_YagdraIntroCleanupNotSkipped_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Yagdra Intro Cleanup Skipped
//--------------------------------------------------------------------------------------------------
bool gt_YagdraIntroCleanupSkipped_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;
    int lv_i;

    // Automatic Variable Declarations
    unitgroup auto6A2FDF28_g;
    int auto6A2FDF28_u;
    unit auto6A2FDF28_var;
    unitgroup autoF9880227_g;
    int autoF9880227_u;
    unit autoF9880227_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_yagdraMusicCompleted == false)) {
        TriggerStop(gt_YagdraMusic);
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZZerus03MusicBoss", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    }

    SoundStop(gv_introSound1, true);
    auto6A2FDF28_g = gv_cinematicTempUnits;
    auto6A2FDF28_u = UnitGroupCount(auto6A2FDF28_g, c_unitCountAll);
    for (;; auto6A2FDF28_u -= 1) {
        auto6A2FDF28_var = UnitGroupUnitFromEnd(auto6A2FDF28_g, auto6A2FDF28_u);
        if (auto6A2FDF28_var == null) { break; }
        UnitRemove(auto6A2FDF28_var);
    }
    UnitGroupClear(gv_cinematicTempUnits);
    UnitSetPosition(gv_kerrigan, PointFromId(2766), false);
    libNtve_gf_MakeUnitFacePoint(gv_kerrigan, UnitGetPosition(gv_yagdra), 0.0);
    UnitIssueOrder(gv_kerrigan, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitBehaviorRemove(gv_kerrigan, "KerriganWalk", 1);
    libNtve_gf_ShowHideUnit(gv_yagdra, true);
    libNtve_gf_PauseUnit(gv_yagdra, false);
    libSwaC_gf_ResetHeroAbilityCooldowns(libSwaC_ge_HeroUnit_Kerrigan);
    autoF9880227_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF9880227_u = UnitGroupCount(autoF9880227_g, c_unitCountAll);
    for (;; autoF9880227_u -= 1) {
        autoF9880227_var = UnitGroupUnitFromEnd(autoF9880227_g, autoF9880227_u);
        if (autoF9880227_var == null) { break; }
        UnitSetPropertyFixed(autoF9880227_var, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(autoF9880227_var, c_unitPropEnergyPercent, 100.0);
    }
    RegionPlayableMapSet(RegionFromId(23));
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION, libNtve_ge_AllianceSetting_Enemy);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateFidgetingEnabled, true);
    UnitGroupSelect(UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_pLAYER_01_USER, true);
    CameraSetData(PlayerGroupAll(), "ZoomedCamera");
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10.0, false);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(23));
    gv_yagdraBossRevealer = VisRevealerLastCreated();
    VisRevealerEnable(VisRevealerLastCreated(), true);
    lv_fadeDuration = 1.5;
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, (CameraInfoGetValue(CameraInfoFromId(3687), c_cameraValueDistance) + 8.0), CameraInfoGetValue(CameraInfoFromId(3687), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(3687)), lv_fadeDuration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gv_inCinematic = false;
    UnitIssueOrder(gv_yagdra, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    TriggerExecute(gt_YagdraBossFightController, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_YagdraIntroCleanupSkipped_Init () {
    gt_YagdraIntroCleanupSkipped = TriggerCreate("gt_YagdraIntroCleanupSkipped_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Yagdra Music
//--------------------------------------------------------------------------------------------------
bool gt_YagdraMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    lv_soundtrack = "ZZerus03MusicCutscene01_Yagdra";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    gv_yagdraMusicCompleted = true;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZZerus03MusicBoss", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_YagdraMusic_Init () {
    gt_YagdraMusic = TriggerCreate("gt_YagdraMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kraith Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_KraithIntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_PreKraithTripwire);
    gv_yagdraEngaged = true;
    gv_kraithEngaged = true;
    if ((TriggerIsEnabled(gt_KraithAutosave) == true)) {
        TriggerExecute(gt_KraithAutosave, false, true);
    }

    TriggerQueueEnter();
    TriggerExecute(gt_KraithIntroSetup, true, true);
    TriggerExecute(gt_KraithIntroCinematic, true, true);
    TriggerExecute(gt_KraithIntroCinematicEnd, true, true);
    TriggerQueueExit();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Blocker4x4", c_unitCreateIgnorePlacement, 0, PointFromId(4054));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Blocker4x4", c_unitCreateIgnorePlacement, 0, PointFromId(1438));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Blocker4x4", c_unitCreateIgnorePlacement, 0, PointFromId(1439));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Blocker4x4", c_unitCreateIgnorePlacement, 0, PointFromId(1440));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathingBlocker2x2", c_unitCreateIgnorePlacement, 0, PointFromId(1441));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Blocker4x4", c_unitCreateIgnorePlacement, 0, PointFromId(1442));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathingBlocker2x2", c_unitCreateIgnorePlacement, 0, PointFromId(1443));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathingBlocker1x1", c_unitCreateIgnorePlacement, 0, PointFromId(3943));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathingBlocker1x1", c_unitCreateIgnorePlacement, 0, PointFromId(3944));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathingBlocker1x1", c_unitCreateIgnorePlacement, 0, PointFromId(3998));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Blocker4x4", c_unitCreateIgnorePlacement, 0, PointFromId(4052));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Blocker4x4", c_unitCreateIgnorePlacement, 0, PointFromId(4053));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathingBlocker1x1", c_unitCreateIgnorePlacement, 0, PointFromId(4630));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathingBlocker1x1", c_unitCreateIgnorePlacement, 0, PointFromId(4631));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathingBlocker1x1", c_unitCreateIgnorePlacement, 0, PointFromId(4632));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathingBlocker1x1", c_unitCreateIgnorePlacement, 0, PointFromId(4633));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathingBlocker1x1", c_unitCreateIgnorePlacement, 0, PointFromId(4634));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathingBlocker1x1", c_unitCreateIgnorePlacement, 0, PointFromId(4635));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathingBlocker1x1", c_unitCreateIgnorePlacement, 0, PointFromId(4636));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(2047)), c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    SoundPlayAtPoint(SoundLink("Aberration_Unburrow", -1), PlayerGroupAll(), PointFromId(3998), 8.0, 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KraithIntroQ_Init () {
    gt_KraithIntroQ = TriggerCreate("gt_KraithIntroQ_Func");
    TriggerAddEventUnitRegion(gt_KraithIntroQ, null, RegionFromId(48), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kraith Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_KraithIntroSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoD7B9EBC5_g;
    int autoD7B9EBC5_u;
    unit autoD7B9EBC5_var;
    unitgroup auto4C932251_g;
    int auto4C932251_u;
    unit auto4C932251_var;
    unitgroup auto5D8EEFC2_g;
    int auto5D8EEFC2_u;
    unit auto5D8EEFC2_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    CameraSave(gv_pLAYER_01_USER);
    libNtve_gf_StoreUnitSelection(gv_pLAYER_01_USER, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    RegionPlayableMapSet(RegionFromId(47));
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateFidgetingEnabled, false);
    UnitIssueOrder(gv_kerrigan, Order(AbilityCommand("K5KerriganUnburrow", 0)), c_orderQueueReplace);
    autoD7B9EBC5_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD7B9EBC5_u = UnitGroupCount(autoD7B9EBC5_g, c_unitCountAll);
    for (;; autoD7B9EBC5_u -= 1) {
        autoD7B9EBC5_var = UnitGroupUnitFromEnd(autoD7B9EBC5_g, autoD7B9EBC5_u);
        if (autoD7B9EBC5_var == null) { break; }
        UnitBehaviorAddPlayer(autoD7B9EBC5_var, "Passive", gv_pLAYER_01_USER, 1);
        libNtve_gf_MakeUnitInvulnerable(autoD7B9EBC5_var, true);
    }
    auto4C932251_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4C932251_u = UnitGroupCount(auto4C932251_g, c_unitCountAll);
    for (;; auto4C932251_u -= 1) {
        auto4C932251_var = UnitGroupUnitFromEnd(auto4C932251_g, auto4C932251_u);
        if (auto4C932251_var == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(auto4C932251_var, true);
    }
    TriggerStop(gt_CaveSpawning1);
    if ((gv_relicsFound >= 1)) {
        libSwaC_gf_SetMissionObjectiveProgress2("ZZerus03Objective03", gv_relicsFound, true, null, true);
    }

    UnitRemove(gv_dehakaLimb);
    auto5D8EEFC2_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5D8EEFC2_u = UnitGroupCount(auto5D8EEFC2_g, c_unitCountAll);
    for (;; auto5D8EEFC2_u -= 1) {
        auto5D8EEFC2_var = UnitGroupUnitFromEnd(auto5D8EEFC2_g, auto5D8EEFC2_u);
        if (auto5D8EEFC2_var == null) { break; }
        if ((auto5D8EEFC2_var != gv_kraith)) {
            UnitRemove(auto5D8EEFC2_var);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KraithIntroSetup_Init () {
    gt_KraithIntroSetup = TriggerCreate("gt_KraithIntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kraith Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_KraithIntroCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoF3654ECC_g;
    int autoF3654ECC_u;
    unit autoF3654ECC_var;
    unitgroup autoC21F881F_g;
    int autoC21F881F_u;
    unit autoC21F881F_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1201), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1021), (SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Zerus03|Line00004", true), c_soundIndexAny)) + 4), -1, 10.0, true);
    UnitSetPosition(gv_kerrigan, PointFromId(1218), false);
    UnitIssueOrder(gv_kerrigan, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    libNtve_gf_MakeUnitFacePoint(gv_kerrigan, UnitGetPosition(gv_kraith), 0.0);
    libNtve_gf_ShowHideUnit(gv_kraith, true);
    libNtve_gf_PauseUnit(gv_kraith, false);
    UnitSetPosition(gv_kraith, PointFromId(3694), false);
    UnitIssueOrder(gv_kraith, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1010)), c_orderQueueReplace);
    TriggerExecute(gt_KraithMusic, true, false);
    SoundPlay(SoundLink("ZZerus03BossCinematicHit2", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introSound1 = SoundLastPlayed();
    autoF3654ECC_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF3654ECC_u = UnitGroupCount(autoF3654ECC_g, c_unitCountAll);
    for (;; autoF3654ECC_u -= 1) {
        autoF3654ECC_var = UnitGroupUnitFromEnd(autoF3654ECC_g, autoF3654ECC_u);
        if (autoF3654ECC_var == null) { break; }
        if ((autoF3654ECC_var != gv_kerrigan)) {
            UnitSetPosition(autoF3654ECC_var, RegionRandomPoint(RegionFromId(49)), false);
        }

    }
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_introCinematicCompleted = false;
    CinematicFade(true, 3.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    Wait(1.0, c_timeReal);
    UnitBehaviorAdd(gv_kerrigan, "KerriganWalk", gv_kerrigan, 1);
    UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1368)), c_orderQueueReplace);
    autoC21F881F_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC21F881F_u = UnitGroupCount(autoC21F881F_g, c_unitCountAll);
    for (;; autoC21F881F_u -= 1) {
        autoC21F881F_var = UnitGroupUnitFromEnd(autoC21F881F_g, autoC21F881F_u);
        if (autoC21F881F_var == null) { break; }
        if ((autoC21F881F_var != gv_kerrigan)) {
            UnitIssueOrder(autoC21F881F_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(50))), c_orderQueueReplace);
        }

    }
    gv_kraithIntroCinematicMoveOccured = true;
    SoundPlay(SoundLink("ZZerus03BossCinematiHit", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introSound1 = SoundLastPlayed();
    gf_SetAllSoundChannelVolumesforZerus03CinematicSpeech();
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    libSwaC_gf_SendTransmissionCampaign(gv_kraith, "zMission_Zerus03|Line00004", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    SoundPlay(SoundLink("ZZerus03BossCinematicHit2", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introSound1 = SoundLastPlayed();
    gv_introCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KraithIntroCinematic_Init () {
    gt_KraithIntroCinematic = TriggerCreate("gt_KraithIntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kraith Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_KraithIntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_introCinematicCompleted == true)) {
        TriggerExecute(gt_KraithIntroCleanupNotSkipped, true, true);
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
        TriggerExecute(gt_KraithIntroCleanupSkipped, true, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KraithIntroCinematicEnd_Init () {
    gt_KraithIntroCinematicEnd = TriggerCreate("gt_KraithIntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kraith Intro Cleanup Not Skipped
//--------------------------------------------------------------------------------------------------
bool gt_KraithIntroCleanupNotSkipped_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;
    int lv_i;

    // Automatic Variable Declarations
    unitgroup autoE9D123EE_g;
    int autoE9D123EE_u;
    unit autoE9D123EE_var;
    unitgroup autoB5D985AF_g;
    int autoB5D985AF_u;
    unit autoB5D985AF_var;
    unitgroup auto683DB9FF_g;
    int auto683DB9FF_u;
    unit auto683DB9FF_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_kraithMusicCompleted == false)) {
        TriggerStop(gt_KraithMusic);
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZZerus03MusicBoss", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    }

    UnitGroupClear(gv_cinematicTempUnits);
    UnitBehaviorRemove(gv_kerrigan, "KerriganWalk", 1);
    UnitIssueOrder(gv_kraith, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitIssueOrder(gv_kerrigan, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libSwaC_gf_ResetHeroAbilityCooldowns(libSwaC_ge_HeroUnit_Kerrigan);
    autoE9D123EE_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE9D123EE_u = UnitGroupCount(autoE9D123EE_g, c_unitCountAll);
    for (;; autoE9D123EE_u -= 1) {
        autoE9D123EE_var = UnitGroupUnitFromEnd(autoE9D123EE_g, autoE9D123EE_u);
        if (autoE9D123EE_var == null) { break; }
        UnitSetPropertyFixed(autoE9D123EE_var, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(autoE9D123EE_var, c_unitPropEnergyPercent, 100.0);
    }
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateFidgetingEnabled, true);
    UnitGroupSelect(UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_pLAYER_01_USER, true);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(47));
    gv_kraithBossRevealer = VisRevealerLastCreated();
    VisRevealerEnable(VisRevealerLastCreated(), true);
    libNtve_gf_ShareVisionofUnit(gv_kraith, true, gv_pLAYER_01_USER);
    Wait(0.1, c_timeGame);
    CameraSetData(PlayerGroupAll(), "ZoomedCamera");
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1382), 1.5, -1, 10.0, true);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.5);
    libNtve_gf_GlobalCinematicSetting(false);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    Wait(1.5, c_timeGame);
    gv_inCinematic = false;
    autoB5D985AF_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB5D985AF_u = UnitGroupCount(autoB5D985AF_g, c_unitCountAll);
    for (;; autoB5D985AF_u -= 1) {
        autoB5D985AF_var = UnitGroupUnitFromEnd(autoB5D985AF_g, autoB5D985AF_u);
        if (autoB5D985AF_var == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(autoB5D985AF_var, false);
        UnitBehaviorRemovePlayer(autoB5D985AF_var, "Passive", gv_pLAYER_01_USER, 1);
    }
    auto683DB9FF_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto683DB9FF_u = UnitGroupCount(auto683DB9FF_g, c_unitCountAll);
    for (;; auto683DB9FF_u -= 1) {
        auto683DB9FF_var = UnitGroupUnitFromEnd(auto683DB9FF_g, auto683DB9FF_u);
        if (auto683DB9FF_var == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(auto683DB9FF_var, false);
    }
    TriggerExecute(gt_KraithBossFightController, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KraithIntroCleanupNotSkipped_Init () {
    gt_KraithIntroCleanupNotSkipped = TriggerCreate("gt_KraithIntroCleanupNotSkipped_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kraith Intro Cleanup Skipped
//--------------------------------------------------------------------------------------------------
bool gt_KraithIntroCleanupSkipped_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;
    int lv_i;

    // Automatic Variable Declarations
    unitgroup autoDF5ADBE5_g;
    int autoDF5ADBE5_u;
    unit autoDF5ADBE5_var;
    unitgroup auto3D408196_g;
    int auto3D408196_u;
    unit auto3D408196_var;
    unitgroup auto06ABFD3B_g;
    int auto06ABFD3B_u;
    unit auto06ABFD3B_var;
    unitgroup autoA53DF74A_g;
    int autoA53DF74A_u;
    unit autoA53DF74A_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_kraithMusicCompleted == false)) {
        TriggerStop(gt_KraithMusic);
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZZerus03MusicBoss", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    }

    SoundStop(gv_introSound1, true);
    UnitGroupClear(gv_cinematicTempUnits);
    UnitSetPosition(gv_kerrigan, PointFromId(1368), false);
    libNtve_gf_MakeUnitFacePoint(gv_kerrigan, UnitGetPosition(gv_kraith), 0.0);
    UnitIssueOrder(gv_kerrigan, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitBehaviorRemove(gv_kerrigan, "KerriganWalk", 1);
    UnitSetPosition(gv_kraith, PointFromId(1010), false);
    UnitIssueOrder(gv_kraith, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    if ((gv_kraithIntroCinematicMoveOccured == false)) {
        autoDF5ADBE5_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoDF5ADBE5_u = UnitGroupCount(autoDF5ADBE5_g, c_unitCountAll);
        for (;; autoDF5ADBE5_u -= 1) {
            autoDF5ADBE5_var = UnitGroupUnitFromEnd(autoDF5ADBE5_g, autoDF5ADBE5_u);
            if (autoDF5ADBE5_var == null) { break; }
            if ((autoDF5ADBE5_var != gv_kerrigan)) {
                UnitIssueOrder(autoDF5ADBE5_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(50))), c_orderQueueReplace);
            }

        }
    }

    libSwaC_gf_ResetHeroAbilityCooldowns(libSwaC_ge_HeroUnit_Kerrigan);
    auto3D408196_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3D408196_u = UnitGroupCount(auto3D408196_g, c_unitCountAll);
    for (;; auto3D408196_u -= 1) {
        auto3D408196_var = UnitGroupUnitFromEnd(auto3D408196_g, auto3D408196_u);
        if (auto3D408196_var == null) { break; }
        UnitSetPropertyFixed(auto3D408196_var, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(auto3D408196_var, c_unitPropEnergyPercent, 100.0);
    }
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateFidgetingEnabled, true);
    UnitGroupSelect(UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_pLAYER_01_USER, true);
    CameraSetData(PlayerGroupAll(), "ZoomedCamera");
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10.0, false);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(47));
    gv_kraithBossRevealer = VisRevealerLastCreated();
    VisRevealerEnable(VisRevealerLastCreated(), true);
    lv_fadeDuration = 1.5;
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, (CameraInfoGetValue(CameraInfoFromId(1382), c_cameraValueDistance) + 8.0), CameraInfoGetValue(CameraInfoFromId(1382), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(1382)), lv_fadeDuration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gv_inCinematic = false;
    auto06ABFD3B_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto06ABFD3B_u = UnitGroupCount(auto06ABFD3B_g, c_unitCountAll);
    for (;; auto06ABFD3B_u -= 1) {
        auto06ABFD3B_var = UnitGroupUnitFromEnd(auto06ABFD3B_g, auto06ABFD3B_u);
        if (auto06ABFD3B_var == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(auto06ABFD3B_var, false);
        UnitBehaviorRemovePlayer(auto06ABFD3B_var, "Passive", gv_pLAYER_01_USER, 1);
    }
    autoA53DF74A_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA53DF74A_u = UnitGroupCount(autoA53DF74A_g, c_unitCountAll);
    for (;; autoA53DF74A_u -= 1) {
        autoA53DF74A_var = UnitGroupUnitFromEnd(autoA53DF74A_g, autoA53DF74A_u);
        if (autoA53DF74A_var == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(autoA53DF74A_var, false);
    }
    TriggerExecute(gt_KraithBossFightController, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KraithIntroCleanupSkipped_Init () {
    gt_KraithIntroCleanupSkipped = TriggerCreate("gt_KraithIntroCleanupSkipped_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kraith Music
//--------------------------------------------------------------------------------------------------
bool gt_KraithMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    lv_soundtrack = "ZZerus03_MusicCutscene04_Kraith";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    gv_kraithMusicCompleted = true;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZZerus03MusicBoss", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KraithMusic_Init () {
    gt_KraithMusic = TriggerCreate("gt_KraithMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slivan Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_SlivanIntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(gv_slivan, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    gv_yagdraEngaged = true;
    gv_kraithEngaged = true;
    gv_slivanEngaged = true;
    if ((TriggerIsEnabled(gt_SlivanAutosave) == true)) {
        TriggerExecute(gt_SlivanAutosave, false, true);
    }

    TriggerQueueEnter();
    TriggerExecute(gt_SlivanIntroSetup, true, true);
    TriggerExecute(gt_SlivanIntroCinematic, true, true);
    TriggerExecute(gt_SlivanIntroCinematicEnd, true, true);
    TriggerQueueExit();
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(1312)), c_animNameDefault, "Unburrow", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(1306)), c_animNameDefault, "Unburrow", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.1, c_timeGame);
    ActorSend(ActorFromDoodad(DoodadFromId(1312)), "SetVisibility 1");
    ActorSend(ActorFromDoodad(DoodadFromId(1306)), "SetVisibility 1");
    Wait(15.5, c_timeGame);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(1312)), c_animNameDefault, "Stand", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(1306)), c_animNameDefault, "Stand", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlivanIntroQ_Init () {
    gt_SlivanIntroQ = TriggerCreate("gt_SlivanIntroQ_Func");
    TriggerAddEventUnitRegion(gt_SlivanIntroQ, null, RegionFromId(119), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slivan Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_SlivanIntroSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoDF63F9BB_g;
    int autoDF63F9BB_u;
    unit autoDF63F9BB_var;
    unitgroup auto1D0139BC_g;
    int auto1D0139BC_u;
    unit auto1D0139BC_var;
    unitgroup autoA4F3E9EB_g;
    int autoA4F3E9EB_u;
    unit autoA4F3E9EB_var;
    unitgroup auto1519501B_g;
    int auto1519501B_u;
    unit auto1519501B_var;
    unitgroup auto1A4865AE_g;
    int auto1A4865AE_u;
    unit auto1A4865AE_var;
    unitgroup auto1981914B_g;
    int auto1981914B_u;
    unit auto1981914B_var;
    unitgroup autoA2A47C1E_g;
    int autoA2A47C1E_u;
    unit autoA2A47C1E_var;
    unitgroup auto12ACFA31_g;
    int auto12ACFA31_u;
    unit auto12ACFA31_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    TriggerExecute(gt_SlivanMusic, true, false);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    CameraSave(gv_pLAYER_01_USER);
    libNtve_gf_StoreUnitSelection(gv_pLAYER_01_USER, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    RegionPlayableMapSet(RegionFromId(120));
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateFidgetingEnabled, false);
    PlayerSetState(gv_pLAYER_02_DOMINION22, c_playerStateFidgetingEnabled, false);
    UnitSetFacing(gv_slivan, PointGetFacing(PointFromId(3679)), 0.0);
    UnitIssueOrder(gv_kerrigan, Order(AbilityCommand("K5KerriganUnburrow", 0)), c_orderQueueReplace);
    autoDF63F9BB_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDF63F9BB_u = UnitGroupCount(autoDF63F9BB_g, c_unitCountAll);
    for (;; autoDF63F9BB_u -= 1) {
        autoDF63F9BB_var = UnitGroupUnitFromEnd(autoDF63F9BB_g, autoDF63F9BB_u);
        if (autoDF63F9BB_var == null) { break; }
        UnitBehaviorAddPlayer(autoDF63F9BB_var, "Passive", gv_pLAYER_01_USER, 1);
        libNtve_gf_MakeUnitInvulnerable(autoDF63F9BB_var, true);
    }
    auto1D0139BC_g = UnitGroup(null, gv_pLAYER_02_DOMINION22, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1D0139BC_u = UnitGroupCount(auto1D0139BC_g, c_unitCountAll);
    for (;; auto1D0139BC_u -= 1) {
        auto1D0139BC_var = UnitGroupUnitFromEnd(auto1D0139BC_g, auto1D0139BC_u);
        if (auto1D0139BC_var == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(auto1D0139BC_var, true);
    }
    if ((gv_relicsFound >= 1)) {
        libSwaC_gf_SetMissionObjectiveProgress2("ZZerus03Objective03", gv_relicsFound, true, null, true);
    }

    UnitRemove(UnitFromId(4700));
    UnitRemove(UnitFromId(4701));
    autoA4F3E9EB_g = UnitGroup(null, gv_pLAYER_02_DOMINION22, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA4F3E9EB_u = UnitGroupCount(autoA4F3E9EB_g, c_unitCountAll);
    for (;; autoA4F3E9EB_u -= 1) {
        autoA4F3E9EB_var = UnitGroupUnitFromEnd(autoA4F3E9EB_g, autoA4F3E9EB_u);
        if (autoA4F3E9EB_var == null) { break; }
        if ((autoA4F3E9EB_var != gv_slivan) && (autoA4F3E9EB_var != gv_slivanPathingDummy)) {
            UnitRemove(autoA4F3E9EB_var);
        }

    }
    auto1519501B_g = UnitGroup(null, 0, RegionFromId(120), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto1519501B_u = UnitGroupCount(auto1519501B_g, c_unitCountAll);
    for (;; auto1519501B_u -= 1) {
        auto1519501B_var = UnitGroupUnitFromEnd(auto1519501B_g, auto1519501B_u);
        if (auto1519501B_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto1519501B_var, true);
    }
    auto1A4865AE_g = UnitGroup("Crabeetle", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto1A4865AE_u = UnitGroupCount(auto1A4865AE_g, c_unitCountAll);
    for (;; auto1A4865AE_u -= 1) {
        auto1A4865AE_var = UnitGroupUnitFromEnd(auto1A4865AE_g, auto1A4865AE_u);
        if (auto1A4865AE_var == null) { break; }
        UnitRemove(auto1A4865AE_var);
    }
    auto1981914B_g = UnitGroup("ZerusAlienTreeHover", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto1981914B_u = UnitGroupCount(auto1981914B_g, c_unitCountAll);
    for (;; auto1981914B_u -= 1) {
        auto1981914B_var = UnitGroupUnitFromEnd(auto1981914B_g, auto1981914B_u);
        if (auto1981914B_var == null) { break; }
        UnitRemove(auto1981914B_var);
    }
    autoA2A47C1E_g = UnitGroup("Artosilope", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoA2A47C1E_u = UnitGroupCount(autoA2A47C1E_g, c_unitCountAll);
    for (;; autoA2A47C1E_u -= 1) {
        autoA2A47C1E_var = UnitGroupUnitFromEnd(autoA2A47C1E_g, autoA2A47C1E_u);
        if (autoA2A47C1E_var == null) { break; }
        UnitRemove(autoA2A47C1E_var);
    }
    auto12ACFA31_g = UnitGroup("Anteplott", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto12ACFA31_u = UnitGroupCount(auto12ACFA31_g, c_unitCountAll);
    for (;; auto12ACFA31_u -= 1) {
        auto12ACFA31_var = UnitGroupUnitFromEnd(auto12ACFA31_g, auto12ACFA31_u);
        if (auto12ACFA31_var == null) { break; }
        UnitRemove(auto12ACFA31_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlivanIntroSetup_Init () {
    gt_SlivanIntroSetup = TriggerCreate("gt_SlivanIntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slivan Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_SlivanIntroCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto04D73A5D_g;
    int auto04D73A5D_u;
    unit auto04D73A5D_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(3113), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(456), 18.0, -1, 10.0, true);
    TriggerEnable(gt_SlivanBossCreepers, true);
    TriggerEnable(gt_SlivanPathingDummy, true);
    TriggerExecute(gt_SlivanBossCreeperMovement, true, false);
    UnitSetPosition(gv_kerrigan, PointFromId(455), false);
    UnitBehaviorAdd(gv_kerrigan, "KerriganWalk", gv_kerrigan, 1);
    UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(457)), c_orderQueueReplace);
    TriggerExecute(gt_IntroSlivanCreeperSpawning, true, false);
    TriggerExecute(gt_SlivanIntroAnimations, true, false);
    auto04D73A5D_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto04D73A5D_u = UnitGroupCount(auto04D73A5D_g, c_unitCountAll);
    for (;; auto04D73A5D_u -= 1) {
        auto04D73A5D_var = UnitGroupUnitFromEnd(auto04D73A5D_g, auto04D73A5D_u);
        if (auto04D73A5D_var == null) { break; }
        if ((auto04D73A5D_var != gv_kerrigan)) {
            UnitSetPosition(auto04D73A5D_var, RegionRandomPoint(RegionFromId(117)), false);
            UnitIssueOrder(auto04D73A5D_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(118))), c_orderQueueReplace);
        }

    }
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_introCinematicCompleted = false;
    CinematicFade(true, 3.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    SoundPlay(SoundLink("ZZerus03BossCinematiHit", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introSound1 = SoundLastPlayed();
    gf_SetAllSoundChannelVolumesforZerus03CinematicSpeech();
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    libSwaC_gf_SendTransmissionCampaign(gv_slivan, "zMission_Zerus03|Line00028", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_DontShowPortrait, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(1.0, c_timeReal);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(3698), 5.0, -1, 10.0, true);
    SoundPlay(SoundLink("ZZerus03BossCinematicHit2", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introSound1 = SoundLastPlayed();
    Wait(5.0, c_timeReal);
    SoundPlay(SoundLink("ZZerus03BossCinematicHit2", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introSound1 = SoundLastPlayed();
    gv_introCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlivanIntroCinematic_Init () {
    gt_SlivanIntroCinematic = TriggerCreate("gt_SlivanIntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slivan Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_SlivanIntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_introCinematicCompleted == true)) {
        TriggerExecute(gt_SlivanIntroCleanupNotSkipped, true, true);
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
        TriggerExecute(gt_SlivanIntroCleanupSkipped, true, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlivanIntroCinematicEnd_Init () {
    gt_SlivanIntroCinematicEnd = TriggerCreate("gt_SlivanIntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slivan Intro Cleanup Not Skipped
//--------------------------------------------------------------------------------------------------
bool gt_SlivanIntroCleanupNotSkipped_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;
    int lv_i;

    // Automatic Variable Declarations
    unitgroup autoB79505B8_g;
    int autoB79505B8_u;
    unit autoB79505B8_var;
    unitgroup auto55B4BCDC_g;
    int auto55B4BCDC_u;
    unit auto55B4BCDC_var;
    unitgroup auto514076E9_g;
    int auto514076E9_u;
    unit auto514076E9_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_slivanMusicCompleted == false)) {
        TriggerStop(gt_SlivanMusic);
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZZerus03MusicBoss", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    }

    UnitGroupClear(gv_cinematicTempUnits);
    UnitBehaviorRemove(gv_kerrigan, "KerriganWalk", 1);
    UnitIssueOrder(gv_slivan, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(3702)), c_orderQueueReplace);
    libSwaC_gf_ResetHeroAbilityCooldowns(libSwaC_ge_HeroUnit_Kerrigan);
    autoB79505B8_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB79505B8_u = UnitGroupCount(autoB79505B8_g, c_unitCountAll);
    for (;; autoB79505B8_u -= 1) {
        autoB79505B8_var = UnitGroupUnitFromEnd(autoB79505B8_g, autoB79505B8_u);
        if (autoB79505B8_var == null) { break; }
        UnitSetPropertyFixed(autoB79505B8_var, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(autoB79505B8_var, c_unitPropEnergyPercent, 100.0);
    }
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateFidgetingEnabled, true);
    UnitGroupSelect(UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_pLAYER_01_USER, true);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(120));
    gv_slivanBossRevealer = VisRevealerLastCreated();
    VisRevealerEnable(VisRevealerLastCreated(), true);
    libNtve_gf_ShareVisionofUnit(gv_slivan, true, gv_pLAYER_01_USER);
    Wait(0.1, c_timeGame);
    CameraSetData(PlayerGroupAll(), "ZoomedCamera");
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2819), 1.5, -1, 10.0, true);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.5);
    libNtve_gf_GlobalCinematicSetting(false);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    Wait(1.5, c_timeGame);
    gv_inCinematic = false;
    auto55B4BCDC_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto55B4BCDC_u = UnitGroupCount(auto55B4BCDC_g, c_unitCountAll);
    for (;; auto55B4BCDC_u -= 1) {
        auto55B4BCDC_var = UnitGroupUnitFromEnd(auto55B4BCDC_g, auto55B4BCDC_u);
        if (auto55B4BCDC_var == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(auto55B4BCDC_var, false);
        UnitBehaviorRemovePlayer(auto55B4BCDC_var, "Passive", gv_pLAYER_01_USER, 1);
    }
    auto514076E9_g = UnitGroup(null, gv_pLAYER_02_DOMINION22, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto514076E9_u = UnitGroupCount(auto514076E9_g, c_unitCountAll);
    for (;; auto514076E9_u -= 1) {
        auto514076E9_var = UnitGroupUnitFromEnd(auto514076E9_g, auto514076E9_u);
        if (auto514076E9_var == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(auto514076E9_var, false);
    }
    TriggerExecute(gt_SlivanBossFightController, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlivanIntroCleanupNotSkipped_Init () {
    gt_SlivanIntroCleanupNotSkipped = TriggerCreate("gt_SlivanIntroCleanupNotSkipped_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slivan Intro Cleanup Skipped
//--------------------------------------------------------------------------------------------------
bool gt_SlivanIntroCleanupSkipped_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;
    int lv_i;
    int lv_creepers;

    // Automatic Variable Declarations
    int auto578396FE_n;
    int auto578396FE_i;
    unitgroup auto14D2F988_g;
    int auto14D2F988_u;
    unit auto14D2F988_var;
    unitgroup autoBE73B3DF_g;
    int autoBE73B3DF_u;
    unit autoBE73B3DF_var;
    unitgroup autoF0C7E048_g;
    int autoF0C7E048_u;
    unit autoF0C7E048_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_slivanMusicCompleted == false)) {
        TriggerStop(gt_SlivanMusic);
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZZerus03MusicBoss", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    }

    SoundStop(gv_introSound1, true);
    TriggerStop(gt_IntroSlivanCreeperSpawning);
    TriggerStop(gt_SlivanIntroAnimations);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_slivan), c_animNameDefault);
    UnitGroupClear(gv_cinematicTempUnits);
    UnitIssueOrder(gv_slivan, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(3702)), c_orderQueueReplace);
    UnitSetPosition(gv_kerrigan, PointFromId(455), false);
    UnitIssueOrder(gv_kerrigan, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitBehaviorRemove(gv_kerrigan, "KerriganWalk", 1);
    libNtve_gf_MakeUnitFacePoint(gv_kerrigan, UnitGetPosition(gv_slivan), 0.0);
    if ((gv_cinematicCreepersSpawned < libHots_gf_DifficultyValueInt2(50, 50, 60))) {
        lv_creepers = (libHots_gf_DifficultyValueInt2(50, 50, 60) - gv_cinematicCreepersSpawned);
        auto578396FE_n = lv_creepers;
        for (auto578396FE_i = 1; auto578396FE_i <= auto578396FE_n; auto578396FE_i += 1) {
            UnitCreate(1, "SlivanCreep", 0, gv_pLAYER_02_DOMINION22, PointWithOffsetPolar(UnitGetPosition(gv_slivan), RandomFixed(3.0, 7.0), libNtve_gf_RandomAngle()), libNtve_gf_RandomAngle());
        }
    }

    auto14D2F988_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto14D2F988_u = UnitGroupCount(auto14D2F988_g, c_unitCountAll);
    for (;; auto14D2F988_u -= 1) {
        auto14D2F988_var = UnitGroupUnitFromEnd(auto14D2F988_g, auto14D2F988_u);
        if (auto14D2F988_var == null) { break; }
        UnitSetPropertyFixed(auto14D2F988_var, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(auto14D2F988_var, c_unitPropEnergyPercent, 100.0);
    }
    libSwaC_gf_ResetHeroAbilityCooldowns(libSwaC_ge_HeroUnit_Kerrigan);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateFidgetingEnabled, true);
    UnitGroupSelect(UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_pLAYER_01_USER, true);
    CameraSetData(PlayerGroupAll(), "ZoomedCamera");
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(120));
    gv_slivanBossRevealer = VisRevealerLastCreated();
    VisRevealerEnable(VisRevealerLastCreated(), true);
    lv_fadeDuration = 1.5;
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, (CameraInfoGetValue(CameraInfoFromId(2819), c_cameraValueDistance) + 8.0), CameraInfoGetValue(CameraInfoFromId(2819), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(2819)), lv_fadeDuration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gv_inCinematic = false;
    autoBE73B3DF_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBE73B3DF_u = UnitGroupCount(autoBE73B3DF_g, c_unitCountAll);
    for (;; autoBE73B3DF_u -= 1) {
        autoBE73B3DF_var = UnitGroupUnitFromEnd(autoBE73B3DF_g, autoBE73B3DF_u);
        if (autoBE73B3DF_var == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(autoBE73B3DF_var, false);
        UnitBehaviorRemovePlayer(autoBE73B3DF_var, "Passive", gv_pLAYER_01_USER, 1);
    }
    autoF0C7E048_g = UnitGroup(null, gv_pLAYER_02_DOMINION22, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF0C7E048_u = UnitGroupCount(autoF0C7E048_g, c_unitCountAll);
    for (;; autoF0C7E048_u -= 1) {
        autoF0C7E048_var = UnitGroupUnitFromEnd(autoF0C7E048_g, autoF0C7E048_u);
        if (autoF0C7E048_var == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(autoF0C7E048_var, false);
    }
    TriggerExecute(gt_SlivanBossFightController, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlivanIntroCleanupSkipped_Init () {
    gt_SlivanIntroCleanupSkipped = TriggerCreate("gt_SlivanIntroCleanupSkipped_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slivan Intro Animations
//--------------------------------------------------------------------------------------------------
bool gt_SlivanIntroAnimations_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_slivan), c_animNameDefault, "Spell Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(1.0, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_slivan), c_animNameDefault, "Spell Channel", c_animFlagPlayForever, c_animTimeDefault);
    Wait(7.5, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_slivan), c_animNameDefault, "Spell End", 0, c_animTimeDefault);
    Wait(1.5, c_timeGame);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_slivan), c_animNameDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlivanIntroAnimations_Init () {
    gt_SlivanIntroAnimations = TriggerCreate("gt_SlivanIntroAnimations_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slivan Music
//--------------------------------------------------------------------------------------------------
bool gt_SlivanMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    lv_soundtrack = "ZZerus03MusicCutscene07_Slivan";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    gv_slivanMusicCompleted = true;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZZerus03MusicBoss", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlivanMusic_Init () {
    gt_SlivanMusic = TriggerCreate("gt_SlivanMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zurvan Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_ZurvanIntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_yagdraEngaged = true;
    gv_kraithEngaged = true;
    gv_slivanEngaged = true;
    gv_zurvanEngaged = true;
    if ((TriggerIsEnabled(gt_ZurvanAutosave) == true)) {
        TriggerExecute(gt_ZurvanAutosave, false, true);
    }

    Wait(1.0, c_timeReal);
    Wait(1.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ZurvanIntroSetup, true, true);
    TriggerExecute(gt_ZurvanIntroCinematic, true, true);
    TriggerExecute(gt_ZurvanIntroCinematicEnd, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZurvanIntroQ_Init () {
    gt_ZurvanIntroQ = TriggerCreate("gt_ZurvanIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zurvan Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_ZurvanIntroSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto169FED01_g;
    int auto169FED01_u;
    unit auto169FED01_var;
    string auto38344B2C_val;
    unitgroup auto878BDFB4_g;
    int auto878BDFB4_u;
    unit auto878BDFB4_var;
    unitgroup auto6DC43008_g;
    int auto6DC43008_u;
    unit auto6DC43008_var;
    unitgroup autoC0744D67_g;
    int autoC0744D67_u;
    unit autoC0744D67_var;
    unitgroup auto774448E6_g;
    int auto774448E6_u;
    unit auto774448E6_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    CameraSave(gv_pLAYER_01_USER);
    libNtve_gf_StoreUnitSelection(gv_pLAYER_01_USER, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION222, libNtve_ge_AllianceSetting_Ally);
    RegionPlayableMapSet(RegionEntireMap());
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateFidgetingEnabled, false);
    auto169FED01_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto169FED01_u = UnitGroupCount(auto169FED01_g, c_unitCountAll);
    for (;; auto169FED01_u -= 1) {
        auto169FED01_var = UnitGroupUnitFromEnd(auto169FED01_g, auto169FED01_u);
        if (auto169FED01_var == null) { break; }
        auto38344B2C_val = UnitGetType(auto169FED01_var);
        if (auto38344B2C_val == "PrimalRoachBurrowed") {
            UnitIssueOrder(auto169FED01_var, Order(AbilityCommand("BurrowPrimalRoachUp", 0)), c_orderQueueReplace);
        }
        else if (auto38344B2C_val == "PrimalHydraliskBurrowed") {
            UnitIssueOrder(auto169FED01_var, Order(AbilityCommand("BurrowPrimalHydraliskUp", 0)), c_orderQueueReplace);
        }
        else if (auto38344B2C_val == "PrimalUltraliskBurrowed") {
            UnitIssueOrder(auto169FED01_var, Order(AbilityCommand("BurrowPrimalUltraliskUp", 0)), c_orderQueueReplace);
        }
        else {
        }
    }
    UnitIssueOrder(gv_kerrigan, Order(AbilityCommand("K5KerriganUnburrow", 0)), c_orderQueueReplace);
    if ((gv_relicsFound >= 1)) {
        libSwaC_gf_SetMissionObjectiveProgress2("ZZerus03Objective03", gv_relicsFound, true, null, true);
    }

    auto878BDFB4_g = UnitGroup("Crabeetle", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto878BDFB4_u = UnitGroupCount(auto878BDFB4_g, c_unitCountAll);
    for (;; auto878BDFB4_u -= 1) {
        auto878BDFB4_var = UnitGroupUnitFromEnd(auto878BDFB4_g, auto878BDFB4_u);
        if (auto878BDFB4_var == null) { break; }
        UnitRemove(auto878BDFB4_var);
    }
    auto6DC43008_g = UnitGroup("ZerusAlienTreeHover", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto6DC43008_u = UnitGroupCount(auto6DC43008_g, c_unitCountAll);
    for (;; auto6DC43008_u -= 1) {
        auto6DC43008_var = UnitGroupUnitFromEnd(auto6DC43008_g, auto6DC43008_u);
        if (auto6DC43008_var == null) { break; }
        UnitRemove(auto6DC43008_var);
    }
    autoC0744D67_g = UnitGroup("Artosilope", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoC0744D67_u = UnitGroupCount(autoC0744D67_g, c_unitCountAll);
    for (;; autoC0744D67_u -= 1) {
        autoC0744D67_var = UnitGroupUnitFromEnd(autoC0744D67_g, autoC0744D67_u);
        if (autoC0744D67_var == null) { break; }
        UnitRemove(autoC0744D67_var);
    }
    auto774448E6_g = UnitGroup("Anteplott", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto774448E6_u = UnitGroupCount(auto774448E6_g, c_unitCountAll);
    for (;; auto774448E6_u -= 1) {
        auto774448E6_var = UnitGroupUnitFromEnd(auto774448E6_g, auto774448E6_u);
        if (auto774448E6_var == null) { break; }
        UnitRemove(auto774448E6_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZurvanIntroSetup_Init () {
    gt_ZurvanIntroSetup = TriggerCreate("gt_ZurvanIntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zurvan Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_ZurvanIntroCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto644860BA_g;
    int auto644860BA_u;
    unit auto644860BA_var;
    unitgroup auto2AC26093_g;
    int auto2AC26093_u;
    unit auto2AC26093_var;
    const int auto24C2059B_n = 30;
    int auto24C2059B_i;
    unitgroup auto041376D1_g;
    int auto041376D1_u;
    unit auto041376D1_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(3478), 0.0, -1, 10, true);
    Wait(1.5, c_timeGame);
    TriggerExecute(gt_ZurvanReinforcements, true, false);
    UnitSetPosition(gv_kerrigan, PointFromId(3475), false);
    UnitIssueOrder(gv_kerrigan, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitSetFacing(gv_kerrigan, 90.0, 0.0);
    TriggerExecute(gt_ZurvanIntroMusic, true, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_introCinematicCompleted = false;
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(3479), (SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Zerus03|Line00011", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Zerus03|Line00030", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Zerus03|Line00031", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Zerus03|Line00032", true), c_soundIndexAny)) + 1), -1, 10, true);
    gf_SetAllSoundChannelVolumesforZerus03CinematicSpeech();
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    libSwaC_gf_SendTransmissionCampaign(gv_zurvan, "zMission_Zerus03|Line00011", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Zerus03|Line00030", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_zurvan, "zMission_Zerus03|Line00031", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_zurvan, "zMission_Zerus03|Line00032", c_transmissionDurationAdd, 1.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    SoundPlay(SoundLink("Zerus03_earthquake", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_zurvanQuakeSound1 = SoundLastPlayed();
    SoundPlay(SoundLink("ZZerus03BossCinematiHit", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introSound1 = SoundLastPlayed();
    CameraShake(gv_pLAYER_01_USER, "Light", "Tremor", 1.0, 0.0, 20.0);
    libSwaC_gf_SendTransmissionCampaign(gv_zurvan, "zMission_Zerus03|Line00082", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicOutofTransmission);
    SoundPlay(SoundLink("ZZerus03ZurvanStingerFade", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_zurvanStingerFade = SoundLastPlayed();
    SoundPlay(SoundLink("Zerus03_Zurvan_CS_Intro", 0), PlayerGroupAll(), 100.0, 0.0);
    gv_zurvanIntroSound = SoundLastPlayed();
    SoundPlay(SoundLink("ZZerus03BossCinematicHit2", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introSound1 = SoundLastPlayed();
    CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 0.25, 0.0, 3.5);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "GroundCracks", c_animNameDefault, "Stand Angry", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "SmokeEruption", c_animNameDefault, "Death", 0, c_animTimeDefault);
    Wait(2.0, c_timeReal);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(3480), 1.5, -1, 10, true);
    SoundPlay(SoundLink("ZZerus03BossCinematiHit", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introSound1 = SoundLastPlayed();
    CinematicFade(false, 1.5, c_fadeStyleNormal, Color(100.00, 100.00, 100.00), 0.0, true);
    auto644860BA_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto644860BA_u = UnitGroupCount(auto644860BA_g, c_unitCountAll);
    for (;; auto644860BA_u -= 1) {
        auto644860BA_var = UnitGroupUnitFromEnd(auto644860BA_g, auto644860BA_u);
        if (auto644860BA_var == null) { break; }
        UnitIssueOrder(auto644860BA_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitSetPosition(auto644860BA_var, PointWithOffsetPolar(PointFromId(3472), DistanceBetweenPoints(UnitGetPosition(auto644860BA_var), PointFromId(3475)), AngleBetweenPoints(PointFromId(3475), UnitGetPosition(auto644860BA_var))), false);
    }
    gv_zurvanRangedMoved = true;
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_zurvan), c_animNameDefault, "Birth", 0, c_animTimeDefault);
    Wait(0.5, c_timeReal);
    RegionPlayableMapSet(RegionFromId(155));
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(3481), 0.0, -1, 10, true);
    SoundPlay(SoundLink("Destructible_RockDeath", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_zurvanRockSound = SoundLastPlayed();
    auto2AC26093_g = UnitGroup("ZurvanTentacle", gv_pLAYER_02_DOMINION222, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2AC26093_u = UnitGroupCount(auto2AC26093_g, c_unitCountAll);
    for (;; auto2AC26093_u -= 1) {
        auto2AC26093_var = UnitGroupUnitFromEnd(auto2AC26093_g, auto2AC26093_u);
        if (auto2AC26093_var == null) { break; }
        UnitBehaviorAdd(auto2AC26093_var, "ZurvanTentacleExtend", auto2AC26093_var, 1);
    }
    for (auto24C2059B_i = 1; auto24C2059B_i <= auto24C2059B_n; auto24C2059B_i += 1) {
        UnitCreate(1, "DestructibleRockEx16x6", c_unitCreateIgnorePlacement, 0, RegionRandomPoint(RegionFromId(154)), libNtve_gf_RandomAngle());
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropHeight, RandomFixed(4.0, 6.5));
        UnitKill(UnitLastCreated());
    }
    CinematicFade(true, 0.0, c_fadeStyleNormal, Color(100.00, 100.00, 100.00), 0.0, true);
    CameraShake(gv_pLAYER_01_USER, "Massive", "Earthquake", 0.25, 0.5, 3.0);
    Wait(0.5, c_timeReal);
    auto041376D1_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto041376D1_u = UnitGroupCount(auto041376D1_g, c_unitCountAll);
    for (;; auto041376D1_u -= 1) {
        auto041376D1_var = UnitGroupUnitFromEnd(auto041376D1_g, auto041376D1_u);
        if (auto041376D1_var == null) { break; }
        libNtve_gf_MakeUnitFacePoint(auto041376D1_var, UnitGetPosition(gv_zurvan), 0.5);
    }
    Wait(1.5, c_timeReal);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(3482), (SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Zerus03|Line00034", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Zerus03|Line00035", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Zerus03|Line00036", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Zerus03|Line00046", true), c_soundIndexAny))), -1, 10, true);
    gf_SetAllSoundChannelVolumesforZerus03CinematicSpeech();
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Zerus03|Line00034", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_zurvan, "zMission_Zerus03|Line00035", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_DontShowPortrait, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Zerus03|Line00036", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_zurvan, "zMission_Zerus03|Line00046", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_DontShowPortrait, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    SoundPlay(SoundLink("ZZerus03BossCinematicHit2", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZurvanIntroCinematic_Init () {
    gt_ZurvanIntroCinematic = TriggerCreate("gt_ZurvanIntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zurvan Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_ZurvanIntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_introCinematicCompleted == true)) {
        TriggerExecute(gt_ZurvanIntroCleanupNotSkipped, true, true);
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
        TriggerExecute(gt_ZurvanIntroCleanupSkipped, true, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZurvanIntroCinematicEnd_Init () {
    gt_ZurvanIntroCinematicEnd = TriggerCreate("gt_ZurvanIntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zurvan Intro Cleanup Not Skipped
//--------------------------------------------------------------------------------------------------
bool gt_ZurvanIntroCleanupNotSkipped_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoA022F4BE_g;
    int autoA022F4BE_u;
    unit autoA022F4BE_var;
    unitgroup auto7A6B789C_g;
    int auto7A6B789C_u;
    unit auto7A6B789C_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_zurvanMusicCompleted == false)) {
        TriggerStop(gt_ZurvanIntroMusic);
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZZerus03ZurvanBossMusic", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    }

    UnitGroupClear(gv_cinematicTempUnits);
    libSwaC_gf_ResetHeroAbilityCooldowns(libSwaC_ge_HeroUnit_Kerrigan);
    autoA022F4BE_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA022F4BE_u = UnitGroupCount(autoA022F4BE_g, c_unitCountAll);
    for (;; autoA022F4BE_u -= 1) {
        autoA022F4BE_var = UnitGroupUnitFromEnd(autoA022F4BE_g, autoA022F4BE_u);
        if (autoA022F4BE_var == null) { break; }
        UnitSetPropertyFixed(autoA022F4BE_var, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(autoA022F4BE_var, c_unitPropEnergyPercent, 100.0);
    }
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateFidgetingEnabled, true);
    UnitGroupSelect(UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_pLAYER_01_USER, true);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(113));
    gv_zurvanBossRevealer = VisRevealerLastCreated();
    VisRevealerEnable(VisRevealerLastCreated(), true);
    libNtve_gf_ShareVisionofUnit(gv_zurvan, true, gv_pLAYER_01_USER);
    auto7A6B789C_g = UnitGroup("ZurvanTentacle", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7A6B789C_u = UnitGroupCount(auto7A6B789C_g, c_unitCountAll);
    for (;; auto7A6B789C_u -= 1) {
        auto7A6B789C_var = UnitGroupUnitFromEnd(auto7A6B789C_g, auto7A6B789C_u);
        if (auto7A6B789C_var == null) { break; }
        libNtve_gf_ShareVisionofUnit(auto7A6B789C_var, true, gv_pLAYER_01_USER);
    }
    Wait(0.1, c_timeGame);
    CameraSetData(PlayerGroupAll(), "ZurvanCamera");
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(3483), 1.5, -1, 10.0, true);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.5);
    libNtve_gf_GlobalCinematicSetting(false);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    Wait(1.5, c_timeGame);
    gv_inCinematic = false;
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION222, libNtve_ge_AllianceSetting_Enemy);
    TriggerExecute(gt_ZurvanInitQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZurvanIntroCleanupNotSkipped_Init () {
    gt_ZurvanIntroCleanupNotSkipped = TriggerCreate("gt_ZurvanIntroCleanupNotSkipped_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zurvan Intro Cleanup Skipped
//--------------------------------------------------------------------------------------------------
bool gt_ZurvanIntroCleanupSkipped_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;
    bool lv_goLeft;

    // Automatic Variable Declarations
    unitgroup auto9960417C_g;
    int auto9960417C_u;
    unit auto9960417C_var;
    unitgroup auto99B70EAF_g;
    int auto99B70EAF_u;
    unit auto99B70EAF_var;
    unitgroup auto61D045EC_g;
    int auto61D045EC_u;
    unit auto61D045EC_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_zurvanMusicCompleted == false)) {
        TriggerStop(gt_ZurvanIntroMusic);
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZZerus03ZurvanBossMusic", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    }

    SoundStop(gv_introSound1, true);
    CameraShakeStop(gv_pLAYER_01_USER);
    SoundStop(gv_zurvanQuakeSound1, true);
    SoundStop(gv_zurvanQuakeSound2, true);
    SoundStop(gv_zurvanIntroSound, true);
    SoundStop(gv_zurvanStingerFade, true);
    SoundStop(gv_zurvanRockSound, true);
    UnitGroupClear(gv_cinematicTempUnits);
    if ((gv_zurvanRangedMoved == false)) {
        auto9960417C_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto9960417C_u = UnitGroupCount(auto9960417C_g, c_unitCountAll);
        for (;; auto9960417C_u -= 1) {
            auto9960417C_var = UnitGroupUnitFromEnd(auto9960417C_g, auto9960417C_u);
            if (auto9960417C_var == null) { break; }
            if ((auto9960417C_var != gv_kerrigan)) {
                if ((lv_goLeft == false)) {
                    lv_goLeft = true;
                    UnitIssueOrder(auto9960417C_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                    UnitSetPosition(auto9960417C_var, RegionRandomPoint(RegionCircle(PointFromId(3474), 2.0)), false);
                }
                else {
                    lv_goLeft = false;
                    UnitIssueOrder(auto9960417C_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                    UnitSetPosition(auto9960417C_var, RegionRandomPoint(RegionCircle(PointFromId(3473), 2.0)), false);
                }
                libNtve_gf_MakeUnitFacePoint(auto9960417C_var, UnitGetPosition(gv_zurvan), 0.0);
            }

        }
    }

    auto99B70EAF_g = UnitGroup("ZurvanTentacle", gv_pLAYER_02_DOMINION222, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto99B70EAF_u = UnitGroupCount(auto99B70EAF_g, c_unitCountAll);
    for (;; auto99B70EAF_u -= 1) {
        auto99B70EAF_var = UnitGroupUnitFromEnd(auto99B70EAF_g, auto99B70EAF_u);
        if (auto99B70EAF_var == null) { break; }
        UnitBehaviorAdd(auto99B70EAF_var, "ZurvanTentacleExtend", auto99B70EAF_var, 1);
    }
    UnitSetPosition(gv_kerrigan, PointFromId(3472), false);
    UnitIssueOrder(gv_kerrigan, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitSetFacing(gv_kerrigan, 90.0, 0.0);
    libSwaC_gf_ResetHeroAbilityCooldowns(libSwaC_ge_HeroUnit_Kerrigan);
    auto61D045EC_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto61D045EC_u = UnitGroupCount(auto61D045EC_g, c_unitCountAll);
    for (;; auto61D045EC_u -= 1) {
        auto61D045EC_var = UnitGroupUnitFromEnd(auto61D045EC_g, auto61D045EC_u);
        if (auto61D045EC_var == null) { break; }
        UnitSetPropertyFixed(auto61D045EC_var, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(auto61D045EC_var, c_unitPropEnergyPercent, 100.0);
    }
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateFidgetingEnabled, true);
    UnitGroupSelect(UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_pLAYER_01_USER, true);
    CameraSetData(PlayerGroupAll(), "ZurvanCamera");
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10.0, false);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionEntireMap());
    gv_zurvanBossRevealer = VisRevealerLastCreated();
    VisRevealerEnable(VisRevealerLastCreated(), true);
    RegionPlayableMapSet(RegionFromId(155));
    lv_fadeDuration = 1.5;
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, (CameraInfoGetValue(CameraInfoFromId(3483), c_cameraValueDistance) + 8.0), CameraInfoGetValue(CameraInfoFromId(3483), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(3483)), lv_fadeDuration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gv_inCinematic = false;
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION222, libNtve_ge_AllianceSetting_Enemy);
    TriggerExecute(gt_ZurvanInitQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZurvanIntroCleanupSkipped_Init () {
    gt_ZurvanIntroCleanupSkipped = TriggerCreate("gt_ZurvanIntroCleanupSkipped_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zurvan Intro Music
//--------------------------------------------------------------------------------------------------
bool gt_ZurvanIntroMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;
    fixed lv_conversationDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    lv_soundtrack = "ZZerus03MusicCutscene10_Zurvan";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    lv_conversationDuration = (9 + SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Zerus03|Line00011", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Zerus03|Line00030", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Zerus03|Line00031", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Zerus03|Line00032", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Zerus03|Line00082", true), c_soundIndexAny)));
    Wait((lv_conversationDuration - 18), c_timeReal);
    SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZZerus03ZurvanMusicOriginalBuildup", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    Wait(18.0, c_timeReal);
    SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    lv_soundtrack = "ZZerus03ZurvanMusicOriginalClimax";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZurvanIntroMusic_Init () {
    gt_ZurvanIntroMusic = TriggerCreate("gt_ZurvanIntroMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zurvan Reinforcements
//--------------------------------------------------------------------------------------------------
bool gt_ZurvanReinforcements_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_friendlyRoaches;
    int lv_friendlyHydras;
    int lv_friendlyUltras;
    bool lv_goLeft;

    // Automatic Variable Declarations
    unitgroup auto026C5A55_g;
    int auto026C5A55_u;
    unit auto026C5A55_var;
    unitgroup auto1F2D5D87_g;
    int auto1F2D5D87_u;
    unit auto1F2D5D87_var;
    unitgroup autoB8B38C45_g;
    int autoB8B38C45_u;
    unit autoB8B38C45_var;
    unitgroup auto48AF143C_g;
    int auto48AF143C_u;
    unit auto48AF143C_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto026C5A55_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto026C5A55_u = UnitGroupCount(auto026C5A55_g, c_unitCountAll);
    for (;; auto026C5A55_u -= 1) {
        auto026C5A55_var = UnitGroupUnitFromEnd(auto026C5A55_g, auto026C5A55_u);
        if (auto026C5A55_var == null) { break; }
        if ((auto026C5A55_var != gv_kerrigan)) {
            if ((lv_goLeft == false)) {
                lv_goLeft = true;
                UnitIssueOrder(auto026C5A55_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                UnitSetPosition(auto026C5A55_var, RegionRandomPoint(RegionCircle(PointFromId(3477), 2.0)), false);
            }
            else {
                lv_goLeft = false;
                UnitIssueOrder(auto026C5A55_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                UnitSetPosition(auto026C5A55_var, RegionRandomPoint(RegionCircle(PointFromId(3476), 2.0)), false);
            }
            libNtve_gf_MakeUnitFacePoint(auto026C5A55_var, UnitGetPosition(gv_zurvan), 0.0);
        }

    }
    lv_friendlyRoaches = gf_GetRoachCount(gv_pLAYER_01_USER);
    lv_friendlyHydras = gf_GetHydraliskCount(gv_pLAYER_01_USER);
    lv_friendlyUltras = gf_GetUltraliskCount(gv_pLAYER_01_USER);
    if ((lv_friendlyHydras >= 4)) {
    }
    else {
        lv_friendlyHydras = (4 - lv_friendlyHydras);
        UnitCreate(lv_friendlyHydras, "PrimalHydralisk", 0, gv_pLAYER_01_USER, RegionGetCenter(RegionFromId(156)), 315.0);
        auto1F2D5D87_g = UnitLastCreatedGroup();
        auto1F2D5D87_u = UnitGroupCount(auto1F2D5D87_g, c_unitCountAll);
        for (;; auto1F2D5D87_u -= 1) {
            auto1F2D5D87_var = UnitGroupUnitFromEnd(auto1F2D5D87_g, auto1F2D5D87_u);
            if (auto1F2D5D87_var == null) { break; }
            if ((lv_goLeft == false)) {
                lv_goLeft = true;
                UnitIssueOrder(auto1F2D5D87_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(PointFromId(3477), 2.0))), c_orderQueueReplace);
            }
            else {
                lv_goLeft = false;
                UnitIssueOrder(auto1F2D5D87_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(PointFromId(3476), 2.0))), c_orderQueueReplace);
            }
        }
    }
    if ((lv_friendlyRoaches >= 6)) {
    }
    else {
        lv_friendlyRoaches = (6 - lv_friendlyRoaches);
        UnitCreate(lv_friendlyRoaches, "PrimalRoach", 0, gv_pLAYER_01_USER, RegionGetCenter(RegionFromId(156)), 315.0);
        autoB8B38C45_g = UnitLastCreatedGroup();
        autoB8B38C45_u = UnitGroupCount(autoB8B38C45_g, c_unitCountAll);
        for (;; autoB8B38C45_u -= 1) {
            autoB8B38C45_var = UnitGroupUnitFromEnd(autoB8B38C45_g, autoB8B38C45_u);
            if (autoB8B38C45_var == null) { break; }
            if ((lv_goLeft == false)) {
                lv_goLeft = true;
                UnitIssueOrder(autoB8B38C45_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(PointFromId(3477), 2.0))), c_orderQueueReplace);
            }
            else {
                lv_goLeft = false;
                UnitIssueOrder(autoB8B38C45_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(PointFromId(3476), 2.0))), c_orderQueueReplace);
            }
        }
    }
    if ((lv_friendlyUltras >= 1)) {
    }
    else {
        lv_friendlyUltras = (1 - lv_friendlyUltras);
        UnitCreate(lv_friendlyUltras, "PrimalUltralisk", 0, gv_pLAYER_01_USER, RegionGetCenter(RegionFromId(156)), 315.0);
        auto48AF143C_g = UnitLastCreatedGroup();
        auto48AF143C_u = UnitGroupCount(auto48AF143C_g, c_unitCountAll);
        for (;; auto48AF143C_u -= 1) {
            auto48AF143C_var = UnitGroupUnitFromEnd(auto48AF143C_g, auto48AF143C_u);
            if (auto48AF143C_var == null) { break; }
            if ((lv_goLeft == false)) {
                lv_goLeft = true;
                UnitIssueOrder(auto48AF143C_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(PointFromId(3477), 2.0))), c_orderQueueReplace);
            }
            else {
                lv_goLeft = false;
                UnitIssueOrder(auto48AF143C_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(PointFromId(3476), 2.0))), c_orderQueueReplace);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZurvanReinforcements_Init () {
    gt_ZurvanReinforcements = TriggerCreate("gt_ZurvanReinforcements_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Zerus03|Line00038", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus03|Line00083", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    CinematicFade(false, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04MusicSound_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_DEBUGYagdraBoss_Init();
    gt_DEBUGKraithBoss_Init();
    gt_DEBUGSlivanBoss_Init();
    gt_DEBUGZurvanBoss_Init();
    gt_StartGameQ_Init();
    gt_UnitTakesDamage_Init();
    gt_AttackedUnitCountdowns_Init();
    gt_PrimalZergAttacks_Init();
    gt_PrimalZergWandering_Init();
    gt_EggUnitTrained_Init();
    gt_ZerusCritterAttacks_Init();
    gt_SporeRayPatrols_Init();
    gt_InitializeSporeRayPatrols_Init();
    gt_XelNagaRelicPickups_Init();
    gt_YagdraInit_Init();
    gt_LeapingStrikeTipQ_Init();
    gt_PsionicShiftTipQ_Init();
    gt_PsionicShiftTripwire_Init();
    gt_XelNagaRelicIntroQ_Init();
    gt_YagdraRescueQ_Init();
    gt_MendTipQ_Init();
    gt_YagdraRescueCave_Init();
    gt_ShowArmyButtonForRescue_Init();
    gt_TarPitToughGuyTripwire1_Init();
    gt_TarPitToughGuyTripwire2_Init();
    gt_TarPitRelicTripwire_Init();
    gt_TarPitMegaTripwire_Init();
    gt_YagdraFinalAttack_Init();
    gt_YagdraReinforcements2_Init();
    gt_YagdraReinforcements2Q_Init();
    gt_YagdraBossFightController_Init();
    gt_YagdraInitFireballPoints_Init();
    gt_YagdraFireballQ_Init();
    gt_YagdraFirebreathQ_Init();
    gt_YagdraTunnelQ_Init();
    gt_YagdraIdle_Init();
    gt_YagdraAbilityUsed_Init();
    gt_YagdraAutosave_Init();
    gt_YagdraEggs_Init();
    gt_YagdraDies_Init();
    gt_KraithInitQ_Init();
    gt_KraithReinforcements1_Init();
    gt_KraithReinforcements1Q_Init();
    gt_InitEggRoom_Init();
    gt_EggRoomTripwire12_Init();
    gt_EggRoomTripwire34_Init();
    gt_EggRoomQ_Init();
    gt_BigEggsRelicTripwire_Init();
    gt_CaveSpawning1_Init();
    gt_CaveSpawning2_Init();
    gt_SwitchToLavaAmbience_Init();
    gt_SwitchToZerusAmbience_Init();
    gt_CliffSpikeTripwire1_Init();
    gt_CliffSpikeTripwire2_Init();
    gt_KraithReinforcements2_Init();
    gt_KraithReinforcements2Q_Init();
    gt_PreKraithTripwire_Init();
    gt_KraithBossFightController_Init();
    gt_KraithSpineBarrageQ_Init();
    gt_KraithChargeQ_Init();
    gt_KraithIdle_Init();
    gt_KraithAdds_Init();
    gt_KraithAutosave_Init();
    gt_InitKraithPoints_Init();
    gt_KraithDies_Init();
    gt_SlivanInitQ_Init();
    gt_SlivanReinforcements1_Init();
    gt_SilvanReinforcements1Q_Init();
    gt_SlivanCreepersQ_Init();
    gt_SwitchToSwampAmbience_Init();
    gt_SlivanCreepersInitial_Init();
    gt_WaterfallTripwire_Init();
    gt_RavasaurTripwire_Init();
    gt_RavasaurIntroQ_Init();
    gt_SlivanMeleeTripwire1_Init();
    gt_PondSiegeGuys1_Init();
    gt_PondSiegeGuys2_Init();
    gt_PondSiegeGuys3_Init();
    gt_PondCreepers1_Init();
    gt_PondCreepers2_Init();
    gt_PondCreepers3_Init();
    gt_SlivanMeleeTripwire2_Init();
    gt_SlivanReinforcements2_Init();
    gt_SlivanReinforcements2Q_Init();
    gt_SlivanAutosave_Init();
    gt_SlivanIntroReveal_Init();
    gt_SlivanBossFightController_Init();
    gt_SlivanAcidPoolQ_Init();
    gt_SlivanAddsQ_Init();
    gt_SlivanBossCreepers_Init();
    gt_SlivanBossCreeperMovement_Init();
    gt_SlivanBossCreeperSpawning_Init();
    gt_SlivanPathingDummy_Init();
    gt_SlivanDies_Init();
    gt_ZurvanAutosave_Init();
    gt_ZurvanInitQ_Init();
    gt_ZurvanBossFightController_Init();
    gt_ZurvanBanterPhase1Q_Init();
    gt_ZurvanBanterPhase2Q_Init();
    gt_ZurvanTentacleSlam_Init();
    gt_ZurvanLightningBreath_Init();
    gt_ZurvanAdds_Init();
    gt_ZurvanDies_Init();
    gt_DefeatKerriganDies_Init();
    gt_VictoryZurvanSlain_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_AchievementKill300EnemieswithKerrigan_Init();
    gt_AchievementKerriganLifeNH_Init();
    gt_AchievementTimedRunH_Init();
    gt_KerriganLifeTooLow_Init();
    gt_ObjectiveSlayPrimarchsCreate_Init();
    gt_ObjectiveSlayPrimarchsComplete_Init();
    gt_ObjectiveSurviveCreate_Init();
    gt_ObjectiveSurviveComplete_Init();
    gt_ObjectiveSurviveFailed_Init();
    gt_ObjectiveSlayZurvanCreate_Init();
    gt_ObjectiveSlayZurvanComplete_Init();
    gt_ObjectiveXelNagaRelicsCreate_Init();
    gt_ObjectiveXelNagaRelicsComplete_Init();
    gt_TipMissionHelpQ_Init();
    gt_YagdraVictoryShot_Init();
    gt_KraithVictoryShot_Init();
    gt_SlivanVictoryShot_Init();
    gt_ZurvanVictoryShot_Init();
    gt_ZurvanVictorySpellB_Init();
    gt_BossVictoryShotCleanup_Init();
    gt_ZurvanVictoryShotCleanup_Init();
    gt_ZurvanVictoryExplosions_Init();
    gt_VictoryShotMusicYagdra_Init();
    gt_VictoryShotMusicKraith_Init();
    gt_VictoryShotMusicSlivan_Init();
    gt_VictoryShotMusicZurvan_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_IntroSlivanMovement_Init();
    gt_IntroSlivanCreeperSpawning_Init();
    gt_IntroKraithEffects_Init();
    gt_IntroMusic_Init();
    gt_YagdraIntroQ_Init();
    gt_YagdraIntroSetup_Init();
    gt_YagdraIntroCinematic_Init();
    gt_YagdraIntroCinematicEnd_Init();
    gt_YagdraIntroCleanupNotSkipped_Init();
    gt_YagdraIntroCleanupSkipped_Init();
    gt_YagdraMusic_Init();
    gt_KraithIntroQ_Init();
    gt_KraithIntroSetup_Init();
    gt_KraithIntroCinematic_Init();
    gt_KraithIntroCinematicEnd_Init();
    gt_KraithIntroCleanupNotSkipped_Init();
    gt_KraithIntroCleanupSkipped_Init();
    gt_KraithMusic_Init();
    gt_SlivanIntroQ_Init();
    gt_SlivanIntroSetup_Init();
    gt_SlivanIntroCinematic_Init();
    gt_SlivanIntroCinematicEnd_Init();
    gt_SlivanIntroCleanupNotSkipped_Init();
    gt_SlivanIntroCleanupSkipped_Init();
    gt_SlivanIntroAnimations_Init();
    gt_SlivanMusic_Init();
    gt_ZurvanIntroQ_Init();
    gt_ZurvanIntroSetup_Init();
    gt_ZurvanIntroCinematic_Init();
    gt_ZurvanIntroCinematicEnd_Init();
    gt_ZurvanIntroCleanupNotSkipped_Init();
    gt_ZurvanIntroCleanupSkipped_Init();
    gt_ZurvanIntroMusic_Init();
    gt_ZurvanReinforcements_Init();
    gt_VictoryQ_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
