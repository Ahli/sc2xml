//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Zergling Evolution
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"
include "TriggerLibs/SwarmCampaignLib"
include "ai4BEFB21E"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libHots_InitLib();
    libSwaC_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_DOMINION = 2;
const int gv_pLAYER_03_DOMINION = 3;
const int gv_pLAYER_04_FERAL = 4;
const int gv_pLAYER_05_CRITTERS = 5;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
bool gv_gameOver;
bool gv_inCinematic;
string gv_mapMusicTrack;
unitgroup gv_raptorGroup;
unitgroup gv_swarmlingGroup;
bool gv_swarmlingActive;
bool gv_raptorActive;
unitgroup gv_dominionBarricadeGroup;
int gv_raptorKarakPing;
unitgroup gv_raptorKarakGroup;
int gv_raptorEssenceSpawnedAmount;
int gv_raptorTerranBasePing;
unitgroup gv_raptorPlayerUnits;
point gv_raptorBackupPoint;
unitgroup gv_raptorDropped;
unitgroup gv_swarmlingMassWave;
int gv_swarmlingMassiveWavePing;
bool gv_swarmlingSwarmlingMorphStarted;
unitgroup gv_swarmlingPlayerUnits;
bool gv_swarmlingFirstAttackSent;
int gv_objectiveKillKarak;
int gv_objectiveCountKarakEssence;
int gv_objectiveDestroyDominionBarricade;
int gv_objectiveDefendHiveCluster;
int gv_objectiveDestroyDominionBase;
int gv_pingDominionBase;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicTempUnits;
bool gv_cinematicCompleted;
int gv_raptorEncounterTransmission;
unit gv_introRaptorLyote;
unit gv_karak1;
unit gv_karak2;
unit gv_karak3;
unit gv_karak4;
sound gv_introSound;
unitgroup gv_midRaptorZerglings;
bool gv_introSwarmlingLarvaAdded1;
bool gv_introSwarmlingLarvaAdded2;

void InitGlobals () {
    gv_gameOver = false;
    gv_inCinematic = false;
    gv_mapMusicTrack = null;
    gv_raptorGroup = UnitGroupEmpty();
    gv_swarmlingGroup = UnitGroupEmpty();
    gv_swarmlingActive = false;
    gv_raptorActive = false;
    gv_dominionBarricadeGroup = UnitGroupEmpty();
    gv_raptorKarakPing = c_invalidPingId;
    gv_raptorKarakGroup = UnitGroupEmpty();
    gv_raptorEssenceSpawnedAmount = 0;
    gv_raptorTerranBasePing = c_invalidPingId;
    gv_raptorPlayerUnits = UnitGroupEmpty();
    gv_raptorBackupPoint = null;
    gv_raptorDropped = UnitGroupEmpty();
    gv_swarmlingMassWave = UnitGroupEmpty();
    gv_swarmlingMassiveWavePing = c_invalidPingId;
    gv_swarmlingSwarmlingMorphStarted = false;
    gv_swarmlingPlayerUnits = UnitGroupEmpty();
    gv_swarmlingFirstAttackSent = false;
    gv_objectiveKillKarak = c_invalidObjectiveId;
    gv_objectiveCountKarakEssence = 0;
    gv_objectiveDestroyDominionBarricade = c_invalidObjectiveId;
    gv_objectiveDefendHiveCluster = c_invalidObjectiveId;
    gv_objectiveDestroyDominionBase = c_invalidObjectiveId;
    gv_pingDominionBase = c_invalidPingId;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_cinematicCompleted = false;
    gv_raptorEncounterTransmission = c_invalidTransmissionId;
    gv_introRaptorLyote = null;
    gv_karak1 = null;
    gv_karak2 = null;
    gv_karak3 = null;
    gv_karak4 = null;
    gv_introSound = null;
    gv_midRaptorZerglings = UnitGroupEmpty();
    gv_introSwarmlingLarvaAdded1 = false;
    gv_introSwarmlingLarvaAdded2 = false;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_Raptor ();
void gf_RaptorInit ();
void gf_Swarmling ();
void gf_SwarmlingInit ();
void gf_RaptorPickupEssence (unit lp_cHOSEN_DNA);
void gf_SwarmlingTurnLarvaeHighlightOnForHatchery (unit lp_hatchery);
void gf_SwarmlingTurnLarvaeHighlightOffForHatchery (unit lp_hatchery);
void gf_RaptorDropPod (bool lp_doDropPods, point lp_loc);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04MusicSound;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_DEBUGRaptor;
trigger gt_DEBUGSwarmlingQ;
trigger gt_StartGameRaptorQ;
trigger gt_RaptorSwarmlingQ;
trigger gt_StartGameSwarmlingQ;
trigger gt_ReinforcementsAllUnitsDead;
trigger gt_RaptorUnitDiesGiveEssence;
trigger gt_CreateCritterPings;
trigger gt_RemoveCritterPings;
trigger gt_SwarmlingMakeSelectLarvaFlash;
trigger gt_SwarmlingUnitGrouping;
trigger gt_SwarmlingInitAttackWaveQ;
trigger gt_SwarmlingInitAttackWaveEngaged;
trigger gt_SwarmlingInitAttackWaveDiesQ;
trigger gt_SwarmlingMorphToSwarmlingButtonClicked;
trigger gt_SwarmlingMorphSwarmlingsQ;
trigger gt_SwarmlingMassiveAttackWaveDestroyedQ;
trigger gt_SwarmlingMusicCue;
trigger gt_SwarmlingMorphMoreQ;
trigger gt_SwarmlingMorphedMore;
trigger gt_SwarmlingIncomingZergQ;
trigger gt_VictoryDestroyDominionBarricadeCompleted;
trigger gt_DefeatAllUnitsDeadSwarmling;
trigger gt_DefeatSwarmlingHatcheriesDead;
trigger gt_VictoryDestroyDominionBaseCompleted;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_TipMissionHelpQ;
trigger gt_AIGiveMinerals;
trigger gt_AIGiveGas;
trigger gt_SwarmlingDominionAI;
trigger gt_ObjectiveKillKarakCreate;
trigger gt_ObjectiveKillKarakComplete;
trigger gt_ObjectiveKillKarakUpdate;
trigger gt_ObjectiveDestroyDominionBarricadeCreate;
trigger gt_ObjectiveDestroyDominionBarricadeComplete;
trigger gt_ObjectiveDefendHiveClusterCreate;
trigger gt_ObjectiveDefendHiveClusterComplete;
trigger gt_ObjectiveDefendHiveClusterFailed;
trigger gt_ObjectiveDestroyDominionBaseCreate;
trigger gt_ObjectiveDestroyDominionBaseComplete;
trigger gt_RaptorEncounter;
trigger gt_RaptorEncounterTransmissionQ;
trigger gt_RaptorEncounterMusicCue;
trigger gt_IntroRaptorQ;
trigger gt_IntroRaptorSetup;
trigger gt_IntroRaptorCinematic;
trigger gt_IntroRaptorCinematicEnd;
trigger gt_IntroRaptorCleanup;
trigger gt_MidRaptorQ;
trigger gt_MidRaptorSetup;
trigger gt_MidRaptorCinematic;
trigger gt_MidRaptorMorph;
trigger gt_MidRaptorCinematicEnd;
trigger gt_MidRaptorCleanup;
trigger gt_IntroSwarmlingQ;
trigger gt_IntroSwarmlingSetup;
trigger gt_IntroSwarmlingMusicCue;
trigger gt_IntroSwarmlingCinematic;
trigger gt_IntroSwarmlingCinematicEnd;
trigger gt_IntroSwarmlingCleanup;
trigger gt_VictoryQ;
trigger gt_VictoryMusicCue;

//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;

//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;

    init_i = 0;
    while (init_i <= 16) {
        cai_playerAI[init_i] = null;
        init_i = init_i + 1;
    }
}

//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;

    if (cai_playerAI[p] == "ai4BEFB21E") { ai4BEFB21E_start(p); }
}

//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai4BEFB21E") { ai4BEFB21E_setDefGather(p, val); }
}

//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai4BEFB21E") { return ai4BEFB21E_getCustomData(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai4BEFB21E") { ai4BEFB21E_waves_run(p, target); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai4BEFB21E") { ai4BEFB21E_waves_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "ai4BEFB21E") { ai4BEFB21E_waves_stop(); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai4BEFB21E") { ai4BEFB21E_wave_run(w, p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai4BEFB21E") { ai4BEFB21E_wave_enable(w, p, val); }
}

//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "ai4BEFB21E") { return ai4BEFB21E_wave_isEnabled(w, p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai4BEFB21E") { return ai4BEFB21E_wave_createdUnits(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai4BEFB21E") { return ai4BEFB21E_wave_createdWave(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_startall () {
    cai_start("ai4BEFB21E", 2);
    AICampaignStart(3);
    AICampaignStart(4);
    AICampaignStart(5);
}

//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(2, target);
}

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_Raptor () {
    // Implementation
    gv_swarmlingActive = false;
    gv_raptorActive = true;
    gf_RaptorInit();
    TriggerExecute(gt_IntroRaptorQ, true, false);
}

void gf_RaptorInit () {
    // Implementation
    UnitGroupLoopBegin(gv_raptorGroup);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_swarmlingGroup);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Zergling", gv_pLAYER_01_USER, RegionFromId(36), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_raptorPlayerUnits, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 0);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 0);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropSuppliesMade, c_playerPropOperSetTo, 200);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION, c_playerPropMinerals, c_playerPropOperSetTo, 0);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION, c_playerPropVespene, c_playerPropOperSetTo, 0);
    UnitGroupLoopBegin(UnitGroup("LeapingCritter", gv_pLAYER_05_CRITTERS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libSwaC_gf_SetUnitInfoTextCampaign(UnitGroupLoopCurrent(), null, StringExternal("Param/Value/AA2A0E1B"), null);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_ChangeUnitDamage(UnitFromId(28), 0, 3);
    libNtve_gf_ChangeUnitDamage(UnitFromId(62), 0, 3);
    libNtve_gf_ChangeUnitDamage(UnitFromId(31), 0, 3);
}

void gf_Swarmling () {
    // Implementation
    TriggerExecute(gt_ObjectiveDestroyDominionBarricadeComplete, true, true);
    gv_swarmlingActive = true;
    gv_raptorActive = false;
    gf_SwarmlingInit();
    TriggerEnable(gt_VictoryDestroyDominionBaseCompleted, true);
    TriggerExecute(gt_IntroSwarmlingQ, true, true);
    TriggerExecute(gt_StartGameSwarmlingQ, true, false);
}

void gf_SwarmlingInit () {
    // Implementation
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_swarmlingGroup);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libSwaC_gf_EnableCampaignTechUnit(true, "ZerglingA", gv_pLAYER_01_USER);
    AISetGroupScriptControlled(gv_swarmlingMassWave, true);
    AISetUnitScriptControlled(UnitFromId(74), true);
    AISetUnitScriptControlled(UnitFromId(854), true);
    AISetUnitScriptControlled(UnitFromId(107), true);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 1250);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 0);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION, c_playerPropSuppliesLimit, c_playerPropOperSetTo, 200);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION, c_playerPropSuppliesMade, c_playerPropOperSetTo, 200);
    PlayerModifyPropertyInt(gv_pLAYER_04_FERAL, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_04_FERAL, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    UnitGroupLoopBegin(gv_swarmlingMassWave);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Larva", gv_pLAYER_01_USER, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    CreepModify(UnitGetPosition(UnitFromId(74)), 10.0, true, false);
    CreepModify(UnitGetPosition(UnitFromId(854)), 10.0, true, false);
    libNtve_gf_ChangeUnitDamage(UnitFromId(856), 0, 3);
    TriggerEnable(gt_DefeatSwarmlingHatcheriesDead, true);
    TriggerEnable(gt_DefeatAllUnitsDeadSwarmling, false);
}

trigger auto_gf_RaptorPickupEssence_Trigger = null;
unit auto_gf_RaptorPickupEssence_lp_cHOSEN_DNA;

void gf_RaptorPickupEssence (unit lp_cHOSEN_DNA) {
    auto_gf_RaptorPickupEssence_lp_cHOSEN_DNA = lp_cHOSEN_DNA;

    if (auto_gf_RaptorPickupEssence_Trigger == null) {
        auto_gf_RaptorPickupEssence_Trigger = TriggerCreate("auto_gf_RaptorPickupEssence_TriggerFunc");
    }

    TriggerExecute(auto_gf_RaptorPickupEssence_Trigger, false, false);
}

bool auto_gf_RaptorPickupEssence_TriggerFunc (bool testConds, bool runActions) {
    unit lp_cHOSEN_DNA = auto_gf_RaptorPickupEssence_lp_cHOSEN_DNA;

    // Implementation
    Wait(1.0, c_timeGame);
    SoundPlayAtPoint(SoundLink("Zerus_DNA_PkUp", -1), PlayerGroupAll(), UnitGetPosition(lp_cHOSEN_DNA), 0.0, 100.0, 0.0);
    UnitKill(lp_cHOSEN_DNA);
    libSwaC_gf_DestroyCacheAndGivePlayerResources(lp_cHOSEN_DNA, 0, 1, null, StringExternal("Param/Value/6428B691"), gv_pLAYER_01_USER);
    TriggerExecute(gt_ObjectiveKillKarakUpdate, true, false);
    return true;
}

void gf_SwarmlingTurnLarvaeHighlightOnForHatchery (unit lp_hatchery) {
    unitgroup auto11DF6BD2_g;
    int auto11DF6BD2_u;

    // Variable Declarations
    unitgroup lv_larvaeGroup;
    unit lv_larva;

    // Variable Initialization
    lv_larvaeGroup = UnitGroupEmpty();
    lv_larva = null;

    // Implementation
    lv_larvaeGroup = UnitGroup("Larva", UnitGetOwner(lp_hatchery), RegionCircle(UnitGetPosition(lp_hatchery), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto11DF6BD2_g = lv_larvaeGroup;
    auto11DF6BD2_u = 1;
    while (auto11DF6BD2_u <= UnitGroupCount(auto11DF6BD2_g, c_unitCountAll)) {
        lv_larva = UnitGroupUnit(auto11DF6BD2_g, auto11DF6BD2_u);
        if ((libHots_gf_ActorForUnit(lv_larva, 1) == null)) {
            libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(0, 2, null, lv_larva, "Head");
            ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 0.600000");
            libHots_gf_StoreActorForUnit(lv_larva, 1, libNtve_gf_ActorLastCreated());
        }
        else {
        }
        if (lv_larva == UnitGroupUnit(auto11DF6BD2_g, auto11DF6BD2_u)) {
            auto11DF6BD2_u = auto11DF6BD2_u + 1;
        }
    }
}

void gf_SwarmlingTurnLarvaeHighlightOffForHatchery (unit lp_hatchery) {
    unitgroup auto686A975D_g;
    int auto686A975D_u;

    // Variable Declarations
    unitgroup lv_larvaeGroup;
    unit lv_larva;

    // Variable Initialization
    lv_larvaeGroup = UnitGroupEmpty();
    lv_larva = null;

    // Implementation
    lv_larvaeGroup = UnitGroup("Larva", UnitGetOwner(lp_hatchery), RegionCircle(UnitGetPosition(lp_hatchery), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto686A975D_g = lv_larvaeGroup;
    auto686A975D_u = 1;
    while (auto686A975D_u <= UnitGroupCount(auto686A975D_g, c_unitCountAll)) {
        lv_larva = UnitGroupUnit(auto686A975D_g, auto686A975D_u);
        if ((libHots_gf_ActorForUnit(lv_larva, 1) != null)) {
            libNtve_gf_KillModel(libHots_gf_ActorForUnit(lv_larva, 1));
            libHots_gf_StoreActorForUnit(lv_larva, 1, null);
        }
        else {
        }
        if (lv_larva == UnitGroupUnit(auto686A975D_g, auto686A975D_u)) {
            auto686A975D_u = auto686A975D_u + 1;
        }
    }
}

void gf_RaptorDropPod (bool lp_doDropPods, point lp_loc) {
    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(8, "HotSRaptor", 0, gv_pLAYER_01_USER, lp_loc);
    UnitGroupAddUnitGroup(gv_raptorDropped, UnitLastCreatedGroup());
    UnitGroupAddUnitGroup(gv_raptorPlayerUnits, UnitLastCreatedGroup());
    if ((lp_doDropPods == true)) {
        libSwaC_gf_CreateDropPod(1, lp_loc, UnitLastCreatedGroup(), false, gv_pLAYER_01_USER);
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_ULoadCampaignData("ZEvolutionZergling");
    TriggerExecute(gt_Init01Technology, true, true);
    libSwaC_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03Units, true, true);
    TriggerExecute(gt_Init04MusicSound, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulties, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    gf_Raptor();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("LarvaTrain", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("LarvaTrain", 2), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("LarvaTrain", 2), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("UpgradeToLair", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("ZergBuild", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("ZergBuild", 2), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("ZergBuild", 3), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("ZergBuild", 4), false);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_03_DOMINION, "SiegeTech", 1);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("BurrowZerglingDown", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("BurrowHotSSwarmlingDown", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("BurrowHotSRaptorDown", 0), false);
    libSwaC_gf_EnableDisableZerglingRespawn(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_visionGroup;

    // Variable Initialization
    lv_visionGroup = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION, 5);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_03_DOMINION, 5);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_04_FERAL, 7);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_05_CRITTERS, 5);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION, gv_pLAYER_03_DOMINION, 0);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION, gv_pLAYER_04_FERAL, 5);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION, gv_pLAYER_05_CRITTERS, 7);
    libNtve_gf_SetAlliance(gv_pLAYER_03_DOMINION, gv_pLAYER_04_FERAL, 5);
    libNtve_gf_SetAlliance(gv_pLAYER_03_DOMINION, gv_pLAYER_05_CRITTERS, 7);
    PlayerGroupAdd(lv_visionGroup, gv_pLAYER_02_DOMINION);
    PlayerGroupAdd(lv_visionGroup, gv_pLAYER_03_DOMINION);
    PlayerGroupAdd(lv_visionGroup, gv_pLAYER_04_FERAL);
    PlayerGroupAdd(lv_visionGroup, gv_pLAYER_05_CRITTERS);
    libSwaC_gf_ShareVisionAmongPlayers(lv_visionGroup);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("Bunker", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitCargoCreate(UnitGroupLoopCurrent(), "Marine", 3);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    gv_dominionBarricadeGroup = UnitGroup(null, gv_pLAYER_03_DOMINION, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv_raptorGroup = UnitGroup(null, c_playerAny, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv_swarmlingGroup = UnitGroup(null, c_playerAny, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv_raptorKarakGroup = UnitGroup("LeapingCritter", gv_pLAYER_05_CRITTERS, RegionFromId(10), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv_swarmlingMassWave = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init04MusicSound_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mapMusicTrack = libSwaC_gf_MissionDefaultMusic();
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Space01", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04MusicSound_Init () {
    gt_Init04MusicSound = TriggerCreate("gt_Init04MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    libLbty_gf_AutoRevealRegion(RegionFromId(7), RegionFromId(7), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(8), RegionFromId(8), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(9), RegionFromId(9), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(12), RegionFromId(12), gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_AddMissionTipUserData("Raptor Strain");
    libSwaC_gf_AddMissionTipUserData("Dominion (ZEvoZergling)");
    libSwaC_gf_AddMissionTipUserData("Siege Tank");
    libSwaC_gf_AddMissionTipUserData("Swarmling Strain");
    libSwaC_gf_AddMissionTipUserData("Hatcheries");
    libSwaC_gf_AddMissionTipUserData("Thor");
    libSwaC_gf_AddMissionTipUserData("Reinforcements");
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Drone", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Overlord", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Queen", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Zergling", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Marine", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Marauder", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("SiegeTank", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Thor", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("VikingAssault", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Bunker", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("MissileTurret", false, gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Raptor
//--------------------------------------------------------------------------------------------------
bool gt_DEBUGRaptor_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_Raptor();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DEBUGRaptor_Init () {
    gt_DEBUGRaptor = TriggerCreate("gt_DEBUGRaptor_Func");
    TriggerAddEventChatMessage(gt_DEBUGRaptor, c_playerAny, "raptor", true);
    TriggerAddEventChatMessage(gt_DEBUGRaptor, c_playerAny, "s1", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Swarmling Q
//--------------------------------------------------------------------------------------------------
bool gt_DEBUGSwarmlingQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_ReinforcementsAllUnitsDead, false);
    TriggerEnable(gt_VictoryDestroyDominionBarricadeCompleted, false);
    TriggerQueueEnter();
    ObjectiveShow(gv_objectiveDestroyDominionBarricade, PlayerGroupAll(), false);
    ObjectiveShow(gv_objectiveKillKarak, PlayerGroupAll(), false);
    CameraSetValue(gv_pLAYER_01_USER, c_cameraValueDistance, (CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance) + 40.0), 2.0, -1, 10.0);
    CameraSetValue(gv_pLAYER_01_USER, c_cameraValuePitch, CameraInfoGetValue(CameraInfoDefault(), c_cameraValuePitch), 2.0, -1, 10.0);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 2.0);
    CinematicFade(false, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerQueueExit();
    gf_Swarmling();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DEBUGSwarmlingQ_Init () {
    gt_DEBUGSwarmlingQ = TriggerCreate("gt_DEBUGSwarmlingQ_Func");
    TriggerAddEventChatMessage(gt_DEBUGSwarmlingQ, c_playerAny, "EVO2", true);
    TriggerAddEventChatMessage(gt_DEBUGSwarmlingQ, c_playerAny, "s2", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Raptor Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameRaptorQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/33F4CEA7"), null, PointFromId(214));
    gv_raptorBackupPoint = PointFromId(53);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_03_DOMINION, RegionFromId(18), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitCargoGroup(UnitFromId(30)));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(2.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveKillKarakCreate, true, true);
    Wait(2.0, c_timeReal);
    TriggerQueueExit();
    TriggerExecute(gt_TipMissionHelpQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameRaptorQ_Init () {
    gt_StartGameRaptorQ = TriggerCreate("gt_StartGameRaptorQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Raptor->Swarmling Q
//--------------------------------------------------------------------------------------------------
bool gt_RaptorSwarmlingQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    Wait(2.0, c_timeGame);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Zergling|Line00022", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    ObjectiveShow(gv_objectiveDestroyDominionBarricade, PlayerGroupAll(), false);
    ObjectiveShow(gv_objectiveKillKarak, PlayerGroupAll(), false);
    libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/94BA9EC7"));
    CameraSetValue(gv_pLAYER_01_USER, c_cameraValueDistance, (CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance) + 40.0), 2.0, -1, 10.0);
    CameraSetValue(gv_pLAYER_01_USER, c_cameraValuePitch, CameraInfoGetValue(CameraInfoDefault(), c_cameraValuePitch), 2.0, -1, 10.0);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 2.0);
    CinematicFade(false, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerQueueExit();
    gf_Swarmling();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RaptorSwarmlingQ_Init () {
    gt_RaptorSwarmlingQ = TriggerCreate("gt_RaptorSwarmlingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Swarmling Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameSwarmlingQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UIAlertClear(gv_pLAYER_01_USER);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/4B72D67A"), null, PointFromId(19));
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("HotSSwarmling", false, gv_pLAYER_01_USER);
    Wait(3.0, c_timeGame);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveDefendHiveClusterCreate, true, true);
    TriggerQueueExit();
    Wait(4.0, c_timeGame);
    TriggerExecute(gt_SwarmlingInitAttackWaveQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameSwarmlingQ_Init () {
    gt_StartGameSwarmlingQ = TriggerCreate("gt_StartGameSwarmlingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reinforcements - All Units Dead
//--------------------------------------------------------------------------------------------------
bool gt_ReinforcementsAllUnitsDead_Func (bool testConds, bool runActions) {
    point auto87E38278_val;
    int auto3AE30080_val;
    int auto8B4D6626_val;

    // Variable Declarations
    unitgroup lv_backupUnits;
    unitgroup lv_backupPausedUnits;

    // Variable Initialization
    lv_backupUnits = UnitGroupEmpty();
    lv_backupPausedUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_raptorActive == true))) {
            return false;
        }

        if (!((UnitGroupCount(gv_raptorPlayerUnits, c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((TriggerQueueIsEmpty() == true))) {
        Wait(1.0, c_timeGame);
    }
    TriggerQueuePause(true);
    TransmissionClearAll();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((libNtve_gf_UnitIsPaused(UnitGroupLoopCurrent()) == false)) {
            UnitGroupAdd(lv_backupPausedUnits, UnitGroupLoopCurrent());
            libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libSwaC_gf_CinematicModeSwarmCampaign(true, c_transitionDurationDefault);
    UnitClearSelection(gv_pLAYER_01_USER);
    CameraPan(gv_pLAYER_01_USER, gv_raptorBackupPoint, 3.0, -1, 10.0, false);
    auto87E38278_val = gv_raptorBackupPoint;
    if (auto87E38278_val == PointFromId(53)) {
        auto3AE30080_val = RandomInt(1, 2);
        if (auto3AE30080_val == 1) {
            libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Zergling|Line00063", c_transmissionDurationAdd, 0.0, false, 1, 0);
        }
        else if (auto3AE30080_val == 2) {
            libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Zergling|Line00062", c_transmissionDurationAdd, 0.0, false, 1, 0);
        }
        else {
            libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Zergling|Line00063", c_transmissionDurationAdd, 0.0, false, 1, 0);
        }
        libNtve_gf_CreateUnitsAtPoint2(13, "Zergling", 0, gv_pLAYER_01_USER, gv_raptorBackupPoint);
        UnitGroupAddUnitGroup(gv_raptorPlayerUnits, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(lv_backupUnits, UnitLastCreatedGroup());
        libSwaC_gf_CreateDropPod(1, PointWithOffsetPolar(gv_raptorBackupPoint, 2.0, 0.0), UnitLastCreatedGroup(), false, gv_pLAYER_01_USER);
        libNtve_gf_CreateUnitsAtPoint2(12, "Zergling", 0, gv_pLAYER_01_USER, gv_raptorBackupPoint);
        UnitGroupAddUnitGroup(gv_raptorPlayerUnits, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(lv_backupUnits, UnitLastCreatedGroup());
        libSwaC_gf_CreateDropPod(1, PointWithOffsetPolar(gv_raptorBackupPoint, 2.0, 180.0), UnitLastCreatedGroup(), false, gv_pLAYER_01_USER);
    }
    else if (auto87E38278_val == PointFromId(101)) {
        auto8B4D6626_val = RandomInt(1, 2);
        if (auto8B4D6626_val == 1) {
            libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Zergling|Line00063", c_transmissionDurationAdd, 0.0, false, 1, 0);
        }
        else if (auto8B4D6626_val == 2) {
            libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Zergling|Line00062", c_transmissionDurationAdd, 0.0, false, 1, 0);
        }
        else {
            libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Zergling|Line00063", c_transmissionDurationAdd, 0.0, false, 1, 0);
        }
        libNtve_gf_CreateUnitsAtPoint2(20, "HotSRaptor", 0, gv_pLAYER_01_USER, gv_raptorBackupPoint);
        UnitGroupAddUnitGroup(gv_raptorPlayerUnits, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(lv_backupUnits, UnitLastCreatedGroup());
        libSwaC_gf_CreateDropPod(1, PointWithOffsetPolar(gv_raptorBackupPoint, 2.0, 0.0), UnitLastCreatedGroup(), false, gv_pLAYER_01_USER);
        libNtve_gf_CreateUnitsAtPoint2(20, "HotSRaptor", 0, gv_pLAYER_01_USER, gv_raptorBackupPoint);
        UnitGroupAddUnitGroup(gv_raptorPlayerUnits, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(lv_backupUnits, UnitLastCreatedGroup());
        libSwaC_gf_CreateDropPod(1, PointWithOffsetPolar(gv_raptorBackupPoint, 2.0, 90.0), UnitLastCreatedGroup(), false, gv_pLAYER_01_USER);
        libNtve_gf_CreateUnitsAtPoint2(20, "HotSRaptor", 0, gv_pLAYER_01_USER, gv_raptorBackupPoint);
        UnitGroupAddUnitGroup(gv_raptorPlayerUnits, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(lv_backupUnits, UnitLastCreatedGroup());
        libSwaC_gf_CreateDropPod(1, PointWithOffsetPolar(gv_raptorBackupPoint, 2.0, 180.0), UnitLastCreatedGroup(), false, gv_pLAYER_01_USER);
        libNtve_gf_CreateUnitsAtPoint2(20, "HotSRaptor", 0, gv_pLAYER_01_USER, gv_raptorBackupPoint);
        UnitGroupAddUnitGroup(gv_raptorPlayerUnits, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(lv_backupUnits, UnitLastCreatedGroup());
        libSwaC_gf_CreateDropPod(1, PointWithOffsetPolar(gv_raptorBackupPoint, 2.0, 270.0), UnitLastCreatedGroup(), false, gv_pLAYER_01_USER);
    }
    else {
        gv_gameOver = true;
        TriggerQueuePause(true);
        TriggerQueueClear(c_triggerQueueRemove);
        Wait(2.0, c_timeReal);
        libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), 0, StringExternal("Param/Value/6D66BCC8"), 0);
        Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
        TriggerExecute(gt_Defeat, true, false);
        return true;
    }
    Wait(3.0, c_timeReal);
    TransmissionWait(TransmissionLastSent(), 0.0);
    UnitGroupLoopBegin(lv_backupPausedUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    while (!((UnitGroupCount(UnitGroupFilter(null, c_playerAny, lv_backupUnits, UnitFilter(0, (1 << (c_targetFilterHidden - 32)), 0, 0), 0), c_unitCountAlive) == 0))) {
        Wait(0.1, c_timeGame);
    }
    UnitGroupSelect(lv_backupUnits, gv_pLAYER_01_USER, true);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.0);
    TriggerQueuePause(false);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReinforcementsAllUnitsDead_Init () {
    gt_ReinforcementsAllUnitsDead = TriggerCreate("gt_ReinforcementsAllUnitsDead_Func");
    TriggerAddEventTimePeriodic(gt_ReinforcementsAllUnitsDead, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Raptor - Unit Dies (Give Essence)
//--------------------------------------------------------------------------------------------------
bool gt_RaptorUnitDiesGiveEssence_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_dNA;

    // Variable Initialization
    lv_dNA = "DNAPickup";

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "LeapingCritter"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, lv_dNA, 0, gv_pLAYER_01_USER, PointWithOffsetPolar(UnitGetPosition(EventUnit()), 1.0, (UnitGetFacing(EventUnit()) + 180.0)), libNtve_gf_RandomAngle());
    gv_raptorEssenceSpawnedAmount += 1;
    libSwaC_gf_SetUnitInfoTextCampaign(UnitLastCreated(), StringExternal("Param/Value/DFEA151A"), StringExternal("Param/Value/AC8B979A"), null);
    gf_RaptorPickupEssence(UnitLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RaptorUnitDiesGiveEssence_Init () {
    gt_RaptorUnitDiesGiveEssence = TriggerCreate("gt_RaptorUnitDiesGiveEssence_Func");
    TriggerAddEventUnitDied(gt_RaptorUnitDiesGiveEssence, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Critter Pings
//--------------------------------------------------------------------------------------------------
bool gt_CreateCritterPings_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_CreateObjectivePing(true, PointFromId(692), StringExternal("Param/Value/913ACBA6"));
    gv_raptorKarakPing = PingLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateCritterPings_Init () {
    gt_CreateCritterPings = TriggerCreate("gt_CreateCritterPings_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Critter Pings
//--------------------------------------------------------------------------------------------------
bool gt_RemoveCritterPings_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(gv_raptorKarakGroup, c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_raptorKarakPing);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveCritterPings_Init () {
    gt_RemoveCritterPings = TriggerCreate("gt_RemoveCritterPings_Func");
    TriggerAddEventTimePeriodic(gt_RemoveCritterPings, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Swarmling - Make Select Larva Flash
//--------------------------------------------------------------------------------------------------
bool gt_SwarmlingMakeSelectLarvaFlash_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UISetButtonFaceHighlighted(PlayerGroupAll(), "Larva", true);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "MorphToSwarmling", true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwarmlingMakeSelectLarvaFlash_Init () {
    gt_SwarmlingMakeSelectLarvaFlash = TriggerCreate("gt_SwarmlingMakeSelectLarvaFlash_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Swarmling - Unit Grouping
//--------------------------------------------------------------------------------------------------
bool gt_SwarmlingUnitGrouping_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "HotSSwarmling"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_swarmlingPlayerUnits, EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwarmlingUnitGrouping_Init () {
    gt_SwarmlingUnitGrouping = TriggerCreate("gt_SwarmlingUnitGrouping_Func");
    TriggerAddEventUnitRegion(gt_SwarmlingUnitGrouping, null, RegionFromId(6), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Swarmling - Init Attack Wave Q
//--------------------------------------------------------------------------------------------------
bool gt_SwarmlingInitAttackWaveQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_newLoc;

    // Variable Initialization
    lv_newLoc = null;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_SwarmlingInitAttackWaveEngaged, true);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(UnitFromId(12)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    gv_swarmlingMassiveWavePing = PingLastCreated();
    PingSetUnit(PingLastCreated(), UnitFromId(12));
    PingSetTooltip(PingLastCreated(), PlayerName(gv_pLAYER_02_DOMINION));
    UnitGroupLoopBegin(gv_swarmlingMassWave);
    while (!UnitGroupLoopDone()) {
        lv_newLoc = PointWithOffsetPolar(PointFromId(851), DistanceBetweenPoints(RegionGetCenter(RegionFromId(1)), UnitGetPosition(UnitGroupLoopCurrent())), AngleBetweenPoints(RegionGetCenter(RegionFromId(1)), UnitGetPosition(UnitGroupLoopCurrent())));
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        UnitSetPosition(UnitGroupLoopCurrent(), lv_newLoc, false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(2.0, c_timeGame);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Zergling|Line00015", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    if ((gv_swarmlingFirstAttackSent == false)) {
        while (!(((gv_swarmlingFirstAttackSent == true) || (TechTreeUnitCount(gv_pLAYER_01_USER, "HotSSwarmling", c_techCountQueuedOrBetter) > 0)))) {
            Wait(1.0, c_timeAI);
        }
        if ((gv_swarmlingFirstAttackSent == false)) {
            gv_swarmlingFirstAttackSent = true;
            UnitGroupIssueOrder(gv_swarmlingMassWave, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(19)), c_orderQueueReplace);
        }
        else {
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwarmlingInitAttackWaveQ_Init () {
    gt_SwarmlingInitAttackWaveQ = TriggerCreate("gt_SwarmlingInitAttackWaveQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Swarmling - Init Attack Wave Engaged
//--------------------------------------------------------------------------------------------------
bool gt_SwarmlingInitAttackWaveEngaged_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_swarmlingMassWave, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_swarmlingFirstAttackSent == false)) {
        gv_swarmlingFirstAttackSent = true;
        UnitGroupIssueOrder(gv_swarmlingMassWave, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(19)), c_orderQueueReplace);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwarmlingInitAttackWaveEngaged_Init () {
    gt_SwarmlingInitAttackWaveEngaged = TriggerCreate("gt_SwarmlingInitAttackWaveEngaged_Func");
    TriggerEnable(gt_SwarmlingInitAttackWaveEngaged, false);
    TriggerAddEventUnitAcquiredTarget(gt_SwarmlingInitAttackWaveEngaged, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Swarmling - Init Attack Wave Dies Q
//--------------------------------------------------------------------------------------------------
bool gt_SwarmlingInitAttackWaveDiesQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION))) {
            return false;
        }

        if (!((libNtve_gf_UnitGroupIsDead(gv_swarmlingMassWave) == false))) {
            return false;
        }

        if (!((UnitGroupCount(gv_swarmlingPlayerUnits, c_unitCountAlive) >= 10))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((UnitIsAlive(UnitFromId(20)) == true)) {
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
        libSwaC_gf_SendTransmissionCampaign(UnitFromId(20), "zEvoMission_Zergling|Line00033", c_transmissionDurationAdd, 0.0, true, 1, 0);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwarmlingInitAttackWaveDiesQ_Init () {
    gt_SwarmlingInitAttackWaveDiesQ = TriggerCreate("gt_SwarmlingInitAttackWaveDiesQ_Func");
    TriggerAddEventUnitDied(gt_SwarmlingInitAttackWaveDiesQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Swarmling - Morph To Swarmling Button Clicked
//--------------------------------------------------------------------------------------------------
bool gt_SwarmlingMorphToSwarmlingButtonClicked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_swarmlingSwarmlingMorphStarted == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_swarmlingSwarmlingMorphStarted = true;
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Larva", false);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "MorphToSwarmling", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwarmlingMorphToSwarmlingButtonClicked_Init () {
    gt_SwarmlingMorphToSwarmlingButtonClicked = TriggerCreate("gt_SwarmlingMorphToSwarmlingButtonClicked_Func");
    TriggerAddEventButtonPressed(gt_SwarmlingMorphToSwarmlingButtonClicked, c_playerAny, "MorphToSwarmling");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Swarmling - Morph Swarmlings Q
//--------------------------------------------------------------------------------------------------
bool gt_SwarmlingMorphSwarmlingsQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    camerainfo lv_camera;

    // Variable Initialization
    lv_camera = null;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUnitType() == "HotSSwarmling"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Zergling|Line00028", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwarmlingMorphSwarmlingsQ_Init () {
    gt_SwarmlingMorphSwarmlingsQ = TriggerCreate("gt_SwarmlingMorphSwarmlingsQ_Func");
    TriggerAddEventUnitTrainProgress(gt_SwarmlingMorphSwarmlingsQ, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Swarmling - Massive Attack Wave Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_SwarmlingMassiveAttackWaveDestroyedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(gv_swarmlingMassWave, c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_SwarmlingInitAttackWaveEngaged, false);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveDefendHiveClusterComplete, true, true);
    TriggerQueueExit();
    PingDestroy(gv_swarmlingMassiveWavePing);
    Wait(2.0, c_timeGame);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Zergling|Line00039", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    Wait(1.0, c_timeGame);
    TriggerExecute(gt_ObjectiveDestroyDominionBaseCreate, true, true);
    TriggerExecute(gt_SwarmlingMusicCue, true, false);
    TriggerQueueExit();
    TriggerEnable(gt_DefeatSwarmlingHatcheriesDead, false);
    TriggerEnable(gt_DefeatAllUnitsDeadSwarmling, true);
    TriggerEnable(gt_SwarmlingMorphMoreQ, true);
    TriggerExecute(gt_SwarmlingDominionAI, true, false);
    Wait(20.0, c_timeGame);
    CatalogFieldValueSet(c_gameCatalogBehavior, "SpawnLarva", "InfoArray[" + IntToString(0) + "].Delay", gv_pLAYER_01_USER, "12");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwarmlingMassiveAttackWaveDestroyedQ_Init () {
    gt_SwarmlingMassiveAttackWaveDestroyedQ = TriggerCreate("gt_SwarmlingMassiveAttackWaveDestroyedQ_Func");
    TriggerAddEventUnitDied(gt_SwarmlingMassiveAttackWaveDestroyedQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Swarmling - Music Cue
//--------------------------------------------------------------------------------------------------
bool gt_SwarmlingMusicCue_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("ZEvoMusicStinger", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZEvoMusicAlt", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwarmlingMusicCue_Init () {
    gt_SwarmlingMusicCue = TriggerCreate("gt_SwarmlingMusicCue_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Swarmling - Morph More Q
//--------------------------------------------------------------------------------------------------
bool gt_SwarmlingMorphMoreQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_swarmlingActive == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(gv_swarmlingPlayerUnits, c_unitCountAlive) < 10))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Zergling|Line00030", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(21)), 2.0, Color(0.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/202DCB9C"), null, RegionGetCenter(RegionFromId(21)));
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Larva", true);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "MorphToSwarmling", true);
    TriggerEnable(gt_SwarmlingMorphedMore, true);
    TriggerEnable(gt_SwarmlingUnitGrouping, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwarmlingMorphMoreQ_Init () {
    gt_SwarmlingMorphMoreQ = TriggerCreate("gt_SwarmlingMorphMoreQ_Func");
    TriggerEnable(gt_SwarmlingMorphMoreQ, false);
    TriggerAddEventTimePeriodic(gt_SwarmlingMorphMoreQ, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Swarmling - Morphed More
//--------------------------------------------------------------------------------------------------
bool gt_SwarmlingMorphedMore_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 50))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Larva", false);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "MorphToSwarmling", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwarmlingMorphedMore_Init () {
    gt_SwarmlingMorphedMore = TriggerCreate("gt_SwarmlingMorphedMore_Func");
    TriggerEnable(gt_SwarmlingMorphedMore, false);
    TriggerAddEventButtonPressed(gt_SwarmlingMorphedMore, c_playerAny, "MorphToSwarmling");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Swarmling - Incoming Zerg Q
//--------------------------------------------------------------------------------------------------
bool gt_SwarmlingIncomingZergQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(UnitFromId(866), "zEvoMission_Zergling|Line00019", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(UnitFromId(34), "zEvoMission_Zergling|Line00018", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwarmlingIncomingZergQ_Init () {
    gt_SwarmlingIncomingZergQ = TriggerCreate("gt_SwarmlingIncomingZergQ_Func");
    TriggerAddEventUnitRegion(gt_SwarmlingIncomingZergQ, null, RegionFromId(4), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Destroy Dominion Barricade Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryDestroyDominionBarricadeCompleted_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupCount(gv_dominionBarricadeGroup, c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_ReinforcementsAllUnitsDead, false);
    TriggerExecute(gt_ObjectiveDestroyDominionBarricadeComplete, true, true);
    TriggerExecute(gt_RaptorSwarmlingQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryDestroyDominionBarricadeCompleted_Init () {
    gt_VictoryDestroyDominionBarricadeCompleted = TriggerCreate("gt_VictoryDestroyDominionBarricadeCompleted_Func");
    TriggerAddEventTimePeriodic(gt_VictoryDestroyDominionBarricadeCompleted, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat All Units Dead - Swarmling
//--------------------------------------------------------------------------------------------------
bool gt_DefeatAllUnitsDeadSwarmling_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(6), UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), 0, StringExternal("Param/Value/5F03A7D8"), 0);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatAllUnitsDeadSwarmling_Init () {
    gt_DefeatAllUnitsDeadSwarmling = TriggerCreate("gt_DefeatAllUnitsDeadSwarmling_Func");
    TriggerEnable(gt_DefeatAllUnitsDeadSwarmling, false);
    TriggerAddEventTimePeriodic(gt_DefeatAllUnitsDeadSwarmling, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Swarmling Hatcheries Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatSwarmlingHatcheriesDead_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(74)) == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(854)) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveDefendHiveClusterFailed, true, false);
    libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), 0, StringExternal("Param/Value/58774553"), 0);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatSwarmlingHatcheriesDead_Init () {
    gt_DefeatSwarmlingHatcheriesDead = TriggerCreate("gt_DefeatSwarmlingHatcheriesDead_Func");
    TriggerEnable(gt_DefeatSwarmlingHatcheriesDead, false);
    TriggerAddEventTimePeriodic(gt_DefeatSwarmlingHatcheriesDead, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Destroy Dominion Base Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryDestroyDominionBaseCompleted_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION, RegionEntireMap(), UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("Thor", gv_pLAYER_02_DOMINION, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryDestroyDominionBaseCompleted_Init () {
    gt_VictoryDestroyDominionBaseCompleted = TriggerCreate("gt_VictoryDestroyDominionBaseCompleted_Func");
    TriggerEnable(gt_VictoryDestroyDominionBaseCompleted, false);
    TriggerAddEventTimePeriodic(gt_VictoryDestroyDominionBaseCompleted, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    PingDestroy(gv_pingDominionBase);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveDestroyDominionBaseComplete, true, true);
    libSwaC_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_VictoryCheat, false);
    TriggerEnable(gt_DefeatCheat, false);
    TriggerEnable(gt_Defeat, false);
    gv_gameOver = true;
    libSwaC_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_VictoryCheat, false);
    TriggerEnable(gt_DefeatCheat, false);
    TriggerEnable(gt_Victory, false);
    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Mission Help Q
//--------------------------------------------------------------------------------------------------
bool gt_TipMissionHelpQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_DisplayMissionTip(StringExternal("Param/Value/52028AE7"));
    Wait(libSwaC_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipMissionHelpQ_Init () {
    gt_TipMissionHelpQ = TriggerCreate("gt_TipMissionHelpQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Minerals
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveMinerals_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveMinerals_Init () {
    gt_AIGiveMinerals = TriggerCreate("gt_AIGiveMinerals_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_pLAYER_02_DOMINION, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Gas
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveGas_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveGas_Init () {
    gt_AIGiveGas = TriggerCreate("gt_AIGiveGas_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_pLAYER_02_DOMINION, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Swarmling - Dominion AI
//--------------------------------------------------------------------------------------------------
bool gt_SwarmlingDominionAI_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    cai_startall();
    cai_runall();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwarmlingDominionAI_Init () {
    gt_SwarmlingDominionAI = TriggerCreate("gt_SwarmlingDominionAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Karak Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillKarakCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZEvolutionZerglingB02");
    gv_objectiveKillKarak = ObjectiveLastCreated();
    libSwaC_gf_SetMissionObjectiveProgress2("ZEvolutionZerglingB02", gv_objectiveCountKarakEssence, true, null, true);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_CreateCritterPings, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillKarakCreate_Init () {
    gt_ObjectiveKillKarakCreate = TriggerCreate("gt_ObjectiveKillKarakCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Karak Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillKarakComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveKillKarakCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZEvolutionZerglingB02", 2);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillKarakComplete_Init () {
    gt_ObjectiveKillKarakComplete = TriggerCreate("gt_ObjectiveKillKarakComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Karak Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillKarakUpdate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_objectiveCountKarakEssence += 1;
    libSwaC_gf_SetMissionObjectiveProgress2("ZEvolutionZerglingB02", gv_objectiveCountKarakEssence, true, null, true);
    if ((gv_objectiveCountKarakEssence == 4)) {
        TriggerExecute(gt_ObjectiveKillKarakComplete, true, true);
        PingDestroy(gv_raptorKarakPing);
        TriggerExecute(gt_MidRaptorQ, true, true);
        gv_raptorBackupPoint = PointFromId(101);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillKarakUpdate_Init () {
    gt_ObjectiveKillKarakUpdate = TriggerCreate("gt_ObjectiveKillKarakUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Dominion Barricade Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyDominionBarricadeCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZEvolutionZerglingB01");
    gv_objectiveDestroyDominionBarricade = ObjectiveLastCreated();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    libSwaC_gf_CreateObjectivePing(true, RegionGetCenter(RegionFromId(16)), StringExternal("Param/Value/E576577C"));
    gv_raptorTerranBasePing = PingLastCreated();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_03_DOMINION, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShareVisionofUnit(UnitGroupLoopCurrent(), true, gv_pLAYER_01_USER);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyDominionBarricadeCreate_Init () {
    gt_ObjectiveDestroyDominionBarricadeCreate = TriggerCreate("gt_ObjectiveDestroyDominionBarricadeCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Dominion Barricade Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyDominionBarricadeComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyDominionBarricadeCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZEvolutionZerglingB01", 2);
    PingDestroy(gv_raptorTerranBasePing);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyDominionBarricadeComplete_Init () {
    gt_ObjectiveDestroyDominionBarricadeComplete = TriggerCreate("gt_ObjectiveDestroyDominionBarricadeComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Defend Hive Cluster Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDefendHiveClusterCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZEvolutionZerglingObjective04");
    gv_objectiveDefendHiveCluster = ObjectiveLastCreated();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDefendHiveClusterCreate_Init () {
    gt_ObjectiveDefendHiveClusterCreate = TriggerCreate("gt_ObjectiveDefendHiveClusterCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Defend Hive Cluster Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDefendHiveClusterComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDefendHiveClusterCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZEvolutionZerglingObjective04", 2);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDefendHiveClusterComplete_Init () {
    gt_ObjectiveDefendHiveClusterComplete = TriggerCreate("gt_ObjectiveDefendHiveClusterComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Defend Hive Cluster Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDefendHiveClusterFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDefendHiveClusterCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZEvolutionZerglingObjective04", 3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDefendHiveClusterFailed_Init () {
    gt_ObjectiveDefendHiveClusterFailed = TriggerCreate("gt_ObjectiveDefendHiveClusterFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Dominion Base Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyDominionBaseCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZEvolutionZerglingA01");
    gv_objectiveDestroyDominionBase = ObjectiveLastCreated();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShareVisionofUnit(UnitGroupLoopCurrent(), true, gv_pLAYER_01_USER);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(2), 6.0, true);
    libSwaC_gf_CreateObjectivePing(true, PointFromId(976), StringExternal("Param/Value/8FE98129"));
    gv_pingDominionBase = PingLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyDominionBaseCreate_Init () {
    gt_ObjectiveDestroyDominionBaseCreate = TriggerCreate("gt_ObjectiveDestroyDominionBaseCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Dominion Base Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyDominionBaseComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyDominionBaseCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZEvolutionZerglingA01", 2);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyDominionBaseComplete_Init () {
    gt_ObjectiveDestroyDominionBaseComplete = TriggerCreate("gt_ObjectiveDestroyDominionBaseComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Raptor Encounter
//--------------------------------------------------------------------------------------------------
bool gt_RaptorEncounter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    camerainfo lv_camera;

    // Variable Initialization
    lv_camera = null;

    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlay(SoundLink("Evolution_ZerglingPart1_CameraZoom_In", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundPlay(SoundLink("Evolution_ZerglingPart1_NatSndBed", -1), PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(gt_RaptorEncounterTransmissionQ, true, false);
    CameraLockInput(gv_pLAYER_01_USER, true);
    GameSetGlobalTimeScale(0.3);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(13), 1.0, -1, 10.0, true);
    Wait(1.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(91), 5.0, -1, 10.0, true);
    TransmissionWait(gv_raptorEncounterTransmission, 1.0);
    GameSetGlobalTimeScale(1.0);
    SoundPlay(SoundLink("Evolution_ZerglingPart1_CameraZoom_Out", -1), PlayerGroupAll(), 100.0, 0.0);
    lv_camera = libNtve_gf_CopyOfCameraObject(CameraInfoDefault());
    CameraInfoSetTarget(lv_camera, CameraInfoGetTarget(CameraInfoFromId(91)));
    CameraApplyInfo(gv_pLAYER_01_USER, lv_camera, 1.0, -1, 10.0, true);
    CameraLockInput(gv_pLAYER_01_USER, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RaptorEncounter_Init () {
    gt_RaptorEncounter = TriggerCreate("gt_RaptorEncounter_Func");
    TriggerAddEventUnitAcquiredTarget(gt_RaptorEncounter, UnitRefFromUnit(UnitFromId(974)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Raptor Encounter Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_RaptorEncounterTransmissionQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    TriggerExecute(gt_RaptorEncounterMusicCue, true, false);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Zergling|Line00027", c_transmissionDurationAdd, 0.0, false, 1, 0);
    gv_raptorEncounterTransmission = TransmissionLastSent();
    TransmissionWait(gv_raptorEncounterTransmission, 0.0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RaptorEncounterTransmissionQ_Init () {
    gt_RaptorEncounterTransmissionQ = TriggerCreate("gt_RaptorEncounterTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Raptor Encounter Music Cue
//--------------------------------------------------------------------------------------------------
bool gt_RaptorEncounterMusicCue_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("ZEvoMusicStinger", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZEvoMusicAlt", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RaptorEncounterMusicCue_Init () {
    gt_RaptorEncounterMusicCue = TriggerCreate("gt_RaptorEncounterMusicCue_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Raptor Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroRaptorQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_IntroRaptorSetup, true, true);
    TriggerExecute(gt_IntroRaptorCinematic, true, true);
    TriggerExecute(gt_IntroRaptorCinematicEnd, true, true);
    TriggerExecute(gt_IntroRaptorCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroRaptorQ_Init () {
    gt_IntroRaptorQ = TriggerCreate("gt_IntroRaptorQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Raptor Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroRaptorSetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    RegionPlayableMapSet(RegionFromId(5));
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    UnitGroupLoopBegin(gv_swarmlingGroup);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_raptorGroup);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupAddUnitGroup(gv_cinematicHiddenUnits, gv_raptorKarakGroup);
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsAtPoint2(1, "Lyote", 0, gv_pLAYER_05_CRITTERS, PointFromId(45));
    gv_introRaptorLyote = UnitLastCreated();
    UnitSetState(UnitLastCreated(), c_unitStateFidget, false);
    UnitSetState(UnitLastCreated(), c_unitStateInvulnerable, true);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "LeapingCritter", 0, gv_pLAYER_05_CRITTERS, PointFromId(798));
    gv_karak1 = UnitLastCreated();
    UnitSetState(UnitLastCreated(), c_unitStateFidget, false);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "LeapingCritter", 0, gv_pLAYER_05_CRITTERS, PointFromId(799));
    gv_karak2 = UnitLastCreated();
    UnitSetState(UnitLastCreated(), c_unitStateFidget, false);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "LeapingCritter", 0, gv_pLAYER_05_CRITTERS, PointFromId(800));
    gv_karak3 = UnitLastCreated();
    UnitSetState(UnitLastCreated(), c_unitStateFidget, false);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "LeapingCritter", 0, gv_pLAYER_05_CRITTERS, PointFromId(1011));
    gv_karak4 = UnitLastCreated();
    UnitSetState(UnitLastCreated(), c_unitStateFidget, false);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroRaptorSetup_Init () {
    gt_IntroRaptorSetup = TriggerCreate("gt_IntroRaptorSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Raptor Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroRaptorCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_cinematicCompleted = false;
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    libSwaC_gf_PreparePlanetPortraitZoomIn("EvolutionPlanetZerglingA", CameraInfoFromId(33), "DesertWorld");
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(0);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_Zergling|Line00015", c_transmissionDurationAdd, 0.0, false, 1, 0);
    TransmissionWait(TransmissionLastSent(), 2.0);
    libSwaC_gf_ZoomInPlanetPortrait();
    libSwaC_gf_HidePlanetPortrait();
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_EvoZergling1_quad", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    Wait(1.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(224), SoundLengthSync(SoundLink(ConversationDataGetSound("zEvoBriefing_Zergling|Line00016", true), c_soundIndexAny)), -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_Zergling|Line00016", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_Zergling|Line00017", c_transmissionDurationAdd, 0.0, true, 1, 0);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(76), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(157), 3.0, -1, 10, true);
    UnitSetState(gv_introRaptorLyote, c_unitStateInvulnerable, false);
    UnitIssueOrder(gv_karak1, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitFromId(172))), c_orderQueueReplace);
    UnitIssueOrder(gv_karak1, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_karak2, OrderTargetingUnit(AbilityCommand("HotSRaptorCharge", 0), gv_introRaptorLyote), c_orderQueueReplace);
    UnitIssueOrder(gv_karak3, OrderTargetingUnit(AbilityCommand("HotSRaptorCharge", 0), gv_introRaptorLyote), c_orderQueueReplace);
    UnitIssueOrder(gv_karak4, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitFromId(171))), c_orderQueueReplace);
    UnitIssueOrder(gv_karak4, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    SoundPlay(SoundLink("Evolution_ZerglingPart1_CSOpen_Karak_v_Lyote", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introSound = SoundLastPlayed();
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_Zergling|Line00001", c_transmissionDurationAdd, 0.0, false, 1, 0);
    while (!((UnitIsAlive(gv_introRaptorLyote) == false))) {
        Wait(0.1, c_timeGame);
    }
    UnitIssueOrder(gv_karak2, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitFromId(838))), c_orderQueueReplace);
    UnitIssueOrder(gv_karak2, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_karak3, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitFromId(100))), c_orderQueueReplace);
    UnitIssueOrder(gv_karak3, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_Zergling|Line00006", c_transmissionDurationAdd, 0.0, true, 1, 0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(106), 5.0, -1, 10, true);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_Zergling|Line00002", c_transmissionDurationAdd, 0.0, false, 1, 0);
    Wait(5.0, c_timeGame);
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(1.0, c_timeGame);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroRaptorCinematic_Init () {
    gt_IntroRaptorCinematic = TriggerCreate("gt_IntroRaptorCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Raptor Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroRaptorCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroRaptorCinematicEnd_Init () {
    gt_IntroRaptorCinematicEnd = TriggerCreate("gt_IntroRaptorCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Raptor Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroRaptorCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(gv_cinematicTempUnits);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitPauseAll(false);
    UnitGroupLoopBegin(gv_swarmlingGroup);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitGroupSelect(gv_raptorPlayerUnits, gv_pLAYER_01_USER, true);
    if ((gv_cinematicCompleted == false)) {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_EvoZergling1_quad", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }
    else {
    }
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    libSwaC_gf_HidePlanetPortrait();
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(17), true, false);
    SoundStop(gv_introSound, true);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(43), lv_fadeDuration, -1, 10, false);
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
        libNtve_gf_GlobalCinematicSetting(false);
    }
    else {
        lv_fadeDuration = 1.0;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
        libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(43)), lv_fadeDuration);
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
        libNtve_gf_GlobalCinematicSetting(false);
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    }
    gv_inCinematic = false;
    Wait(lv_fadeDuration, c_timeGame);
    TriggerExecute(gt_StartGameRaptorQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroRaptorCleanup_Init () {
    gt_IntroRaptorCleanup = TriggerCreate("gt_IntroRaptorCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Raptor Q
//--------------------------------------------------------------------------------------------------
bool gt_MidRaptorQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_MidRaptorSetup, true, true);
    TriggerExecute(gt_MidRaptorCinematic, true, true);
    TriggerExecute(gt_MidRaptorCinematicEnd, true, true);
    TriggerExecute(gt_MidRaptorCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidRaptorQ_Init () {
    gt_MidRaptorQ = TriggerCreate("gt_MidRaptorQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Raptor Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidRaptorSetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    gv_inCinematic = true;
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitPauseAll(true);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_midRaptorZerglings = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Zergling", "ZerglingBurrowed", "", gv_pLAYER_01_USER, -1, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupLoopBegin(gv_midRaptorZerglings);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitSetPosition(UnitGroupLoopCurrent(), RegionRandomPoint(RegionFromId(13)), false);
        UnitSetFacing(UnitGroupLoopCurrent(), libNtve_gf_RandomAngle(), 0.0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidRaptorSetup_Init () {
    gt_MidRaptorSetup = TriggerCreate("gt_MidRaptorSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Raptor Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidRaptorCinematic_Func (bool testConds, bool runActions) {
    int auto07AFF35D_n;
    int auto07AFF35D_i;

    // Variable Declarations
    unitgroup lv_tempGroup;
    unit lv_indexUnit;

    // Variable Initialization
    lv_tempGroup = UnitGroupEmpty();
    lv_indexUnit = null;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_tempGroup = UnitGroup("Zergling", gv_pLAYER_01_USER, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(108), 0.0, -1, 10, true);
    gv_cinematicCompleted = false;
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(109), SoundLengthSync(SoundLink(ConversationDataGetSound("zEvoMission_Zergling|Line00002", true), c_soundIndexAny)), -1, 10.0, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(0);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Zergling|Line00002", c_transmissionDurationAdd, 0.0, false, 1, 0);
    TransmissionWait(TransmissionLastSent(), 5.0);
    TriggerEnable(gt_MidRaptorMorph, true);
    auto07AFF35D_n = UnitGroupCount(lv_tempGroup, c_unitCountAlive);
    auto07AFF35D_i = 1;
    while (auto07AFF35D_i <= auto07AFF35D_n) {
        lv_indexUnit = UnitGroupRandomUnit(lv_tempGroup, c_unitCountAlive);
        UnitIssueOrder(lv_indexUnit, Order(AbilityCommand("MorphZerglingToRaptor", 0)), c_orderQueueReplace);
        UnitGroupRemove(lv_tempGroup, lv_indexUnit);
        if ((RandomInt(0, 1) == 1)) {
            Wait(0.125, c_timeGame);
        }
        else {
        }
        auto07AFF35D_i = auto07AFF35D_i + 1;
    }
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Zergling|Line00012", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Zergling|Line00003", c_transmissionDurationAdd, 0.0, true, 1, 0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(124), 0.0, -1, 10.0, true);
    gf_RaptorDropPod(true, PointFromId(129));
    Wait(0.1, c_timeGame);
    gf_RaptorDropPod(true, PointFromId(130));
    gf_RaptorDropPod(true, PointFromId(131));
    Wait(0.1, c_timeGame);
    gf_RaptorDropPod(true, PointFromId(132));
    Wait(0.2, c_timeGame);
    gf_RaptorDropPod(true, PointFromId(133));
    gf_RaptorDropPod(true, PointFromId(831));
    Wait(0.1, c_timeGame);
    gf_RaptorDropPod(true, PointFromId(656));
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Zergling|Line00007", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    UnitGroupIssueOrder(gv_raptorDropped, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(14))), c_orderQueueReplace);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(35), 3.0, -1, 10.0, true);
    Wait(4.0, c_timeGame);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidRaptorCinematic_Init () {
    gt_MidRaptorCinematic = TriggerCreate("gt_MidRaptorCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Raptor Morph
//--------------------------------------------------------------------------------------------------
bool gt_MidRaptorMorph_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_inCinematic == false)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    else {
    }
    libNtve_gf_RescueUnit(EventUnitProgressUnit(), gv_pLAYER_01_USER, true);
    UnitGroupAdd(gv_raptorPlayerUnits, EventUnitProgressUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidRaptorMorph_Init () {
    gt_MidRaptorMorph = TriggerCreate("gt_MidRaptorMorph_Func");
    TriggerEnable(gt_MidRaptorMorph, false);
    TriggerAddEventUnitTrainProgress(gt_MidRaptorMorph, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Raptor Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MidRaptorCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidRaptorCinematicEnd_Init () {
    gt_MidRaptorCinematicEnd = TriggerCreate("gt_MidRaptorCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Raptor Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidRaptorCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;
    point lv_loc;

    // Variable Initialization
    lv_fadeDuration = 0.0;
    lv_loc = null;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(gv_cinematicTempUnits);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitPauseAll(false);
    UnitGroupLoopBegin(gv_swarmlingGroup);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("HotSRaptor", false, gv_pLAYER_01_USER);
    UnitClearSelection(gv_pLAYER_01_USER);
    if ((gv_cinematicCompleted == false)) {
        UnitGroupLoopBegin(UnitGroup("ZergDropPod", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        while (!UnitGroupLoopDone()) {
            UnitRemove(UnitGroupLoopCurrent());
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitGroup("ZergDropPodCreep", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        while (!UnitGroupLoopDone()) {
            UnitRemove(UnitGroupLoopCurrent());
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(gv_raptorDropped);
        while (!UnitGroupLoopDone()) {
            UnitRemove(UnitGroupLoopCurrent());
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        gf_RaptorDropPod(false, PointFromId(129));
        gf_RaptorDropPod(false, PointFromId(130));
        gf_RaptorDropPod(false, PointFromId(131));
        gf_RaptorDropPod(false, PointFromId(132));
        gf_RaptorDropPod(false, PointFromId(133));
        gf_RaptorDropPod(false, PointFromId(831));
        gf_RaptorDropPod(false, PointFromId(656));
        UnitGroupIssueOrder(gv_raptorDropped, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(14))), c_orderQueueReplace);
        UnitGroupLoopBegin(gv_midRaptorZerglings);
        while (!UnitGroupLoopDone()) {
            UnitRemove(UnitGroupLoopCurrent());
            UnitCreate(1, "HotSRaptor", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(13)), libNtve_gf_RandomAngle());
            UnitGroupAdd(gv_raptorPlayerUnits, UnitLastCreated());
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
    }
    else {
    }
    UnitGroupSelect(gv_raptorPlayerUnits, gv_pLAYER_01_USER, true);
    UnitGroupIssueOrder(gv_raptorPlayerUnits, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(14))), c_orderQueueReplace);
    TriggerEnable(gt_MidRaptorMorph, false);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(48), lv_fadeDuration, -1, 10.0, true);
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
        libNtve_gf_GlobalCinematicSetting(false);
    }
    else {
        lv_fadeDuration = 1.0;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
        libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(48)), lv_fadeDuration);
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
        libNtve_gf_GlobalCinematicSetting(false);
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    }
    gv_inCinematic = false;
    Wait(lv_fadeDuration, c_timeGame);
    TriggerExecute(gt_ObjectiveDestroyDominionBarricadeCreate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidRaptorCleanup_Init () {
    gt_MidRaptorCleanup = TriggerCreate("gt_MidRaptorCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Swarmling Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroSwarmlingQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_IntroSwarmlingSetup, true, true);
    TriggerExecute(gt_IntroSwarmlingMusicCue, true, false);
    TriggerExecute(gt_IntroSwarmlingCinematic, true, true);
    TriggerExecute(gt_IntroSwarmlingCinematicEnd, true, true);
    TriggerExecute(gt_IntroSwarmlingCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSwarmlingQ_Init () {
    gt_IntroSwarmlingQ = TriggerCreate("gt_IntroSwarmlingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Swarmling Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSwarmlingSetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    RegionPlayableMapSet(RegionFromId(6));
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Space01", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    UnitGroupLoopBegin(UnitGroup("Larva", c_playerAny, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionFromId(3), gv_pLAYER_04_FERAL);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSwarmlingSetup_Init () {
    gt_IntroSwarmlingSetup = TriggerCreate("gt_IntroSwarmlingSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Swarmling Music Cue
//--------------------------------------------------------------------------------------------------
bool gt_IntroSwarmlingMusicCue_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZEvoMusicMain", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSwarmlingMusicCue_Init () {
    gt_IntroSwarmlingMusicCue = TriggerCreate("gt_IntroSwarmlingMusicCue_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Swarmling Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroSwarmlingCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_larvaGroup1;
    unitgroup lv_larvaGroup2;
    unitgroup lv_tempGroup;
    point lv_tempLoc;

    // Variable Initialization
    lv_larvaGroup1 = UnitGroupEmpty();
    lv_larvaGroup2 = UnitGroupEmpty();
    lv_tempGroup = UnitGroupEmpty();
    lv_tempLoc = null;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_cinematicCompleted = false;
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    libSwaC_gf_PreparePlanetPortraitZoomIn("EvolutionPlanetZerglingB", CameraInfoFromId(110), "DesertWorld");
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(0);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_Zergling|Line00008", c_transmissionDurationAdd, 0.0, false, 1, 0);
    TransmissionWait(TransmissionLastSent(), 2.0);
    libSwaC_gf_ZoomInPlanetPortrait();
    libSwaC_gf_HidePlanetPortrait();
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_EvoZergling2_Quad", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    Wait(1.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(29), (SoundLengthSync(SoundLink(ConversationDataGetSound("zEvoBriefing_Zergling|Line00022", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zEvoBriefing_Zergling|Line00021", true), c_soundIndexAny))), -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_Zergling|Line00022", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_Zergling|Line00021", c_transmissionDurationAdd, 0.0, true, 1, 0);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_04_FERAL, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_RescueUnit(UnitGroupLoopCurrent(), gv_pLAYER_01_USER, true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionFromId(3), gv_pLAYER_01_USER);
    Wait(2.0, c_timeReal);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_Zergling|Line00028", c_transmissionDurationAdd, 0.0, false, 1, 0);
    libNtve_gf_SendActorMessageToUnit(UnitFromId(74), "AnimBracketStart Custom Morph,Start,A Stand,Morph,A Cover,End,A");
    SoundPlayOnUnit(SoundLink("Zerg_BuildingMorphStart", -1), PlayerGroupAll(), UnitFromId(74), 0.0, 100.0, 0.0);
    Wait(0.2, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(UnitFromId(854), "AnimBracketStart Custom Morph,Start,A Stand,Morph,A Cover,End,A");
    SoundPlayOnUnit(SoundLink("Zerg_BuildingMorphStart", -1), PlayerGroupAll(), UnitFromId(854), 0.0, 100.0, 0.0);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_Zergling|Line00030", c_transmissionDurationAdd, 0.0, false, 1, 0);
    Wait(2.0, c_timeGame);
    CinematicFade(false, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    UnitGroupLoopBegin(gv_swarmlingMassWave);
    while (!UnitGroupLoopDone()) {
        lv_tempLoc = UnitGetPosition(UnitGroupLoopCurrent());
        PointSetFacing(lv_tempLoc, UnitGetFacing(UnitGroupLoopCurrent()));
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupAdd(gv_cinematicHiddenUnits, UnitGroupLoopCurrent());
        libNtve_gf_CreateUnitsAtPoint2(1, UnitGetType(UnitGroupLoopCurrent()), c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION, lv_tempLoc);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitGroupAdd(lv_tempGroup, UnitLastCreated());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(lv_tempGroup);
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(UnitGroupLoopCurrent()), 15.0, 250.0)), c_orderQueueReplace);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(197), 0.0, -1, 10.0, true);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(259), 10.0, -1, 10.0, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    CinematicFade(false, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(23), 0.0, -1, 10.0, true);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_Zergling|Line00029", c_transmissionDurationAdd, 0.0, false, 1, 0);
    Wait(1.5, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(UnitFromId(74), "AnimBracketStop Custom");
    SoundPlayOnUnit(SoundLink("Zerg_BuildingMorphEnd", -1), PlayerGroupAll(), UnitFromId(74), 0.0, 100.0, 0.0);
    libNtve_gf_PauseUnit(UnitFromId(74), false);
    UnitBehaviorAdd(UnitFromId(74), "QueenSpawnLarva", UnitFromId(74), 6);
    gv_introSwarmlingLarvaAdded1 = true;
    Wait(0.5, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(UnitFromId(854), "AnimBracketStop Custom");
    SoundPlayOnUnit(SoundLink("Zerg_BuildingMorphEnd", -1), PlayerGroupAll(), UnitFromId(854), 0.0, 100.0, 0.0);
    libNtve_gf_PauseUnit(UnitFromId(854), false);
    UnitBehaviorAdd(UnitFromId(854), "QueenSpawnLarva", UnitFromId(854), 6);
    Wait(1.0, c_timeGame);
    lv_larvaGroup1 = UnitGroup("Larva", gv_pLAYER_01_USER, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    libNtve_gf_RescueUnit2(lv_larvaGroup1, gv_pLAYER_01_USER, true);
    Wait(0.5, c_timeGame);
    lv_larvaGroup2 = UnitGroup("Larva", gv_pLAYER_01_USER, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupRemoveUnitGroup(lv_larvaGroup2, lv_larvaGroup1);
    libNtve_gf_RescueUnit2(lv_larvaGroup2, gv_pLAYER_01_USER, true);
    gv_introSwarmlingLarvaAdded2 = true;
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(1.0, c_timeGame);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSwarmlingCinematic_Init () {
    gt_IntroSwarmlingCinematic = TriggerCreate("gt_IntroSwarmlingCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Swarmling Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroSwarmlingCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSwarmlingCinematicEnd_Init () {
    gt_IntroSwarmlingCinematicEnd = TriggerCreate("gt_IntroSwarmlingCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Swarmling Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSwarmlingCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;
    unitgroup lv_zerglingsDroped;
    point lv_newLoc;

    // Variable Initialization
    lv_fadeDuration = 0.0;
    lv_zerglingsDroped = UnitGroupEmpty();
    lv_newLoc = null;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(gv_cinematicTempUnits);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitPauseAll(false);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    libSwaC_gf_HidePlanetPortrait();
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 1250);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 0);
    if ((gv_cinematicCompleted == false)) {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_EvoZergling2_Quad", c_soundtrackCueAny, c_soundtrackIndexAny, true);
        libNtve_gf_SendActorMessageToUnit(UnitFromId(74), "AnimBracketStop Custom");
        libNtve_gf_SendActorMessageToUnit(UnitFromId(854), "AnimBracketStop Custom");
        UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_04_FERAL, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        while (!UnitGroupLoopDone()) {
            UnitSetOwner(UnitGroupLoopCurrent(), gv_pLAYER_01_USER, true);
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        if (((gv_introSwarmlingLarvaAdded1 == false) || (gv_introSwarmlingLarvaAdded2 == false))) {
            Wait(0.0625, c_timeGame);
            if ((gv_introSwarmlingLarvaAdded1 == false)) {
                libSwaC_gf_SpawnLarvaForHatchery(UnitFromId(74), 6);
            }
            else {
            }
            if ((gv_introSwarmlingLarvaAdded2 == false)) {
                libSwaC_gf_SpawnLarvaForHatchery(UnitFromId(854), 6);
            }
            else {
            }
        }
        else {
        }
    }
    else {
    }
    libSwaC_gf_SetHatcheryRallyPoint(UnitFromId(74), PointFromId(7));
    libSwaC_gf_SetHatcheryRallyPoint(UnitFromId(854), PointFromId(879));
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionFromId(3), gv_pLAYER_01_USER);
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitGroupSelect(UnitGroup("Larva", gv_pLAYER_01_USER, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_pLAYER_01_USER, true);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "MorphToSwarmling", true);
    CatalogFieldValueSet(c_gameCatalogBehavior, "SpawnLarva", "InfoArray[" + IntToString(0) + "].Delay", gv_pLAYER_01_USER, "6");
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(54), lv_fadeDuration, -1, 10, false);
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
        libNtve_gf_GlobalCinematicSetting(false);
    }
    else {
        lv_fadeDuration = 1.0;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
        libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(54)), lv_fadeDuration);
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
        libNtve_gf_GlobalCinematicSetting(false);
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    }
    gv_inCinematic = false;
    Wait(lv_fadeDuration, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSwarmlingCleanup_Init () {
    gt_IntroSwarmlingCleanup = TriggerCreate("gt_IntroSwarmlingCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Zergling|Line00008", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Zergling|Line00009", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    ObjectiveShow(gv_objectiveDefendHiveCluster, PlayerGroupAll(), false);
    ObjectiveShow(gv_objectiveDestroyDominionBase, PlayerGroupAll(), false);
    CameraSetValue(gv_pLAYER_01_USER, c_cameraValueDistance, (CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance) + 40.0), 2.0, -1, 10.0);
    CameraSetValue(gv_pLAYER_01_USER, c_cameraValuePitch, CameraInfoGetValue(CameraInfoDefault(), c_cameraValuePitch), 2.0, -1, 10.0);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    CinematicFade(false, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_Victory, true, false);
    TriggerExecute(gt_VictoryMusicCue, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Music Cue
//--------------------------------------------------------------------------------------------------
bool gt_VictoryMusicCue_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZEvoMusicMain", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryMusicCue_Init () {
    gt_VictoryMusicCue = TriggerCreate("gt_VictoryMusicCue_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04MusicSound_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_DEBUGRaptor_Init();
    gt_DEBUGSwarmlingQ_Init();
    gt_StartGameRaptorQ_Init();
    gt_RaptorSwarmlingQ_Init();
    gt_StartGameSwarmlingQ_Init();
    gt_ReinforcementsAllUnitsDead_Init();
    gt_RaptorUnitDiesGiveEssence_Init();
    gt_CreateCritterPings_Init();
    gt_RemoveCritterPings_Init();
    gt_SwarmlingMakeSelectLarvaFlash_Init();
    gt_SwarmlingUnitGrouping_Init();
    gt_SwarmlingInitAttackWaveQ_Init();
    gt_SwarmlingInitAttackWaveEngaged_Init();
    gt_SwarmlingInitAttackWaveDiesQ_Init();
    gt_SwarmlingMorphToSwarmlingButtonClicked_Init();
    gt_SwarmlingMorphSwarmlingsQ_Init();
    gt_SwarmlingMassiveAttackWaveDestroyedQ_Init();
    gt_SwarmlingMusicCue_Init();
    gt_SwarmlingMorphMoreQ_Init();
    gt_SwarmlingMorphedMore_Init();
    gt_SwarmlingIncomingZergQ_Init();
    gt_VictoryDestroyDominionBarricadeCompleted_Init();
    gt_DefeatAllUnitsDeadSwarmling_Init();
    gt_DefeatSwarmlingHatcheriesDead_Init();
    gt_VictoryDestroyDominionBaseCompleted_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_TipMissionHelpQ_Init();
    gt_AIGiveMinerals_Init();
    gt_AIGiveGas_Init();
    gt_SwarmlingDominionAI_Init();
    gt_ObjectiveKillKarakCreate_Init();
    gt_ObjectiveKillKarakComplete_Init();
    gt_ObjectiveKillKarakUpdate_Init();
    gt_ObjectiveDestroyDominionBarricadeCreate_Init();
    gt_ObjectiveDestroyDominionBarricadeComplete_Init();
    gt_ObjectiveDefendHiveClusterCreate_Init();
    gt_ObjectiveDefendHiveClusterComplete_Init();
    gt_ObjectiveDefendHiveClusterFailed_Init();
    gt_ObjectiveDestroyDominionBaseCreate_Init();
    gt_ObjectiveDestroyDominionBaseComplete_Init();
    gt_RaptorEncounter_Init();
    gt_RaptorEncounterTransmissionQ_Init();
    gt_RaptorEncounterMusicCue_Init();
    gt_IntroRaptorQ_Init();
    gt_IntroRaptorSetup_Init();
    gt_IntroRaptorCinematic_Init();
    gt_IntroRaptorCinematicEnd_Init();
    gt_IntroRaptorCleanup_Init();
    gt_MidRaptorQ_Init();
    gt_MidRaptorSetup_Init();
    gt_MidRaptorCinematic_Init();
    gt_MidRaptorMorph_Init();
    gt_MidRaptorCinematicEnd_Init();
    gt_MidRaptorCleanup_Init();
    gt_IntroSwarmlingQ_Init();
    gt_IntroSwarmlingSetup_Init();
    gt_IntroSwarmlingMusicCue_Init();
    gt_IntroSwarmlingCinematic_Init();
    gt_IntroSwarmlingCinematicEnd_Init();
    gt_IntroSwarmlingCleanup_Init();
    gt_VictoryQ_Init();
    gt_VictoryMusicCue_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}
