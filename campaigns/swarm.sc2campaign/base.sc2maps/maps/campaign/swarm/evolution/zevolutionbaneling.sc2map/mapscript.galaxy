//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Baneling Evolution
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmCampaignLib"
include "ai4BEFB21E"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libSwaC_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_DOMINION = 2;
const int gv_pLAYER_03_PROTOSS = 3;
const int gv_pLAYER_04_ZERG = 4;
const int gv_pLAYER_05_RESCUES = 5;
const int gv_pLAYER_06_HOSTILE = 6;
const int gv_hunterBanelingCollectRequired = 3;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
bool gv_gameOver;
bool gv_inCinematic;
string gv_mapMusicTrack;
bool gv_splitterActive;
unitgroup gv_splitterUnits;
bool gv_hunterActive;
unitgroup gv_hunterUnits;
unitgroup gv_doodadZealots;
point gv_backupPoint;
bool gv_backupSuppressed;
unit gv_splitterTheMitoscarab;
unitgroup gv_splitterStartGroup;
int gv_splitterDNACollected;
unitgroup gv_splitterProtossBaseUnits;
unitgroup gv_splitterNydusWorms;
unit gv_splitterReinforcementNydus;
unitgroup gv_hunterPlayerUnitGroup;
unitgroup[5] gv_hunterRescueGroups;
int[5] gv_hunterRescuePings;
unitgroup gv_hunterMedivacGroup1;
unit gv_hunterMedivac1;
revealer gv_hunterMedivacDrop1Revealer;
int gv_hunterMedivac1Transmission;
bool gv_hunterMedivac1Left;
unitgroup gv_hunterMedivacGroup2;
timer gv_lavaTimer;
timer gv_warningTimer;
int gv_lavaTimerWindow;
fixed gv_lavaInterval;
bool gv_lowGroundIsSafe;
bool gv_timerCreated;
bool gv_firstLava;
bool gv_lavaSafeTransmissionQueued;
int gv_splitterObjectiveKillMitoscarab;
int gv_splitterMitoscarabPing1;
int gv_splitterMitoscarabPing2;
int gv_splitterObjectiveDestroyProtossColossi;
int gv_splitterColossiDestroyed;
int gv_splitterProtossBasePing;
int gv_hunterObjectiveCollectLocalBanelings;
int gv_hunterBanelingCollected;
int gv_hunterObjectiveWipeOutTerrans;
int gv_hunterDominonBasePing;
actor gv_hunterDominonCommanderCenterBriefing;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicTempUnits;
bool gv_cinematicCompleted;
sound gv_cinematicStingerSound;
unit gv_splitterIntroNydus;
unit gv_splitterIntroMitoscarab;
unitgroup gv_splitterIntroZealots;
unitgroup gv_splitterIntroBanelings;
sound gv_splitterIntroNydusBirthSound;
unitgroup gv_splitterMidBanelings;
unit gv_splitterMidNydus;
unitgroup gv_splitterMidCocoons;
unitgroup gv_hunterIntroHunters;
sound gv_hunterIntroLarvaRisingSound;

void InitGlobals () {
    int init_i;

    gv_splitterUnits = UnitGroupEmpty();
    gv_hunterUnits = UnitGroupEmpty();
    gv_doodadZealots = UnitGroupEmpty();
    gv_splitterStartGroup = UnitGroupEmpty();
    gv_splitterProtossBaseUnits = UnitGroupEmpty();
    gv_splitterNydusWorms = UnitGroupEmpty();
    gv_hunterPlayerUnitGroup = UnitGroupEmpty();
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_hunterRescueGroups[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_hunterRescuePings[init_i] = c_invalidPingId;
    }
    gv_hunterMedivacGroup1 = UnitGroupEmpty();
    gv_hunterMedivac1Transmission = c_invalidTransmissionId;
    gv_hunterMedivacGroup2 = UnitGroupEmpty();
    gv_lavaTimer = TimerCreate();
    gv_warningTimer = TimerCreate();
    gv_lavaInterval = 45.0;
    gv_lowGroundIsSafe = true;
    gv_firstLava = true;
    gv_splitterObjectiveKillMitoscarab = c_invalidObjectiveId;
    gv_splitterMitoscarabPing1 = c_invalidPingId;
    gv_splitterMitoscarabPing2 = c_invalidPingId;
    gv_splitterObjectiveDestroyProtossColossi = c_invalidObjectiveId;
    gv_splitterProtossBasePing = c_invalidPingId;
    gv_hunterObjectiveCollectLocalBanelings = c_invalidObjectiveId;
    gv_hunterObjectiveWipeOutTerrans = c_invalidObjectiveId;
    gv_hunterDominonBasePing = c_invalidPingId;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_splitterIntroZealots = UnitGroupEmpty();
    gv_splitterIntroBanelings = UnitGroupEmpty();
    gv_splitterMidBanelings = UnitGroupEmpty();
    gv_splitterMidCocoons = UnitGroupEmpty();
    gv_hunterIntroHunters = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_SplitterNydusReinforcements (unit lp_spawnUnit, int lp_banelingTotal, bool lp_playBirth);
void gf_TurnOnLava (fixed lp_duration);
void gf_TurnOffLava (fixed lp_duration);
void gf_HunterRescueBanelings (region lp_region);
void gf_ColossusPings (unitgroup lp_unitGroup);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04MusicSound;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_DebugHunter;
trigger gt_ReinforcementsAllUnitsDead;
trigger gt_SplitterHunterTransitionQ;
trigger gt_Splitter;
trigger gt_SplitterStartQ;
trigger gt_SplitterMitoscarabAmbushQ;
trigger gt_SplitterAncientMitoscarabDied;
trigger gt_SplitterMitoscarabBEnterWorld;
trigger gt_SplitterMitoscarabDiesGiveDNA;
trigger gt_SplitterFirstStageEndQ;
trigger gt_SplitterFirstEncounter;
trigger gt_SplitterEncounterTransmissionQ;
trigger gt_SplitterProtossTauntQ1;
trigger gt_SplitterProtossTauntQ2;
trigger gt_SplitterProtossAmbush;
trigger gt_SplitterNydusWormIncoming1;
trigger gt_SplitterNydusWormIncomingTransQ1;
trigger gt_SplitterNydusWormIncoming2;
trigger gt_SplitterNydusWormIncomingTransQ2;
trigger gt_SplitterBlinkEvent;
trigger gt_LavaTimerCreate;
trigger gt_CameraShakeWeak;
trigger gt_CameraShakeDuringLava;
trigger gt_LavaTurnsON;
trigger gt_LavaTurnsOFF;
trigger gt_LavaDamage;
trigger gt_LavaWarningQ;
trigger gt_LavaSafeQ;
trigger gt_Hunter;
trigger gt_HunterInit;
trigger gt_HunterStartQ;
trigger gt_HunterCreatePingsForSurvivors;
trigger gt_HunterRescue1;
trigger gt_HunterLavaWarningQ;
trigger gt_HunterMedivac1ComingInQ;
trigger gt_HunterMedivacDrop1KilledQ;
trigger gt_HunterMedivac1Leave;
trigger gt_HunterDominionTheyarejumpingQ;
trigger gt_HunterRescue2;
trigger gt_HunterMinerRunAway;
trigger gt_HunterMinerEvacuateQ;
trigger gt_HunterStartMidCinematicQ;
trigger gt_HunterMedivac2ComingIn;
trigger gt_HunterMedivacDrop2AttackedQ;
trigger gt_HunterRescue3;
trigger gt_HunterWarningAttackFromFrontQ;
trigger gt_HunterWhereDoTheyComeFromQ;
trigger gt_SplitterVictoryWipeOutProtossCompleted;
trigger gt_HunterVictoryDestoryPlanetaryFortressCompleted;
trigger gt_VictorySequenceQ;
trigger gt_VictoryMusicCue;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_TipMissionHelpQ;
trigger gt_AIGiveMinerals;
trigger gt_AIGiveGas;
trigger gt_ObjectiveKillMitoscarabCreate;
trigger gt_ObjectiveKillMitoscarabUpdate;
trigger gt_ObjectiveKillMitoscarabComplete;
trigger gt_ObjectiveDestroyProtossColossiCreate;
trigger gt_ObjectiveDestroyProtossColossiUpdate;
trigger gt_ObjectiveDestroyProtossColossiComplete;
trigger gt_ObjectiveCollectLocalBanelingsCreate;
trigger gt_ObjectiveCollectLocalBanelingsComplete;
trigger gt_ObjectiveCollectLocalBanelingsUpdateQ;
trigger gt_ObjectiveWipeOutTerransCreate;
trigger gt_ObjectiveWipeOutTerransComplete;
trigger gt_SplitterIntroQ;
trigger gt_SplitterIntroSetup;
trigger gt_SplitterIntroCinematic;
trigger gt_SplitterIntroCinematicEnd;
trigger gt_SplitterIntroCleanupCanceled;
trigger gt_SplitterIntroCleanupFinished;
trigger gt_SplitterMidQ;
trigger gt_SplitterMidSetup;
trigger gt_SplitterMidCinematic;
trigger gt_SplitterMusicCue;
trigger gt_SplitterMidCinematicEnd;
trigger gt_SplitterMidCleanup;
trigger gt_HunterIntroQ;
trigger gt_HunterIntroSetup;
trigger gt_HunterIntroMusicCue;
trigger gt_HunterIntroCinematic;
trigger gt_HunterIntroCinematicEnd;
trigger gt_HunterIntroCleanup;
trigger gt_HunterMidQ;
trigger gt_HunterMidSetup;
trigger gt_HunterMusicCue;
trigger gt_HunterMidCinematic;
trigger gt_HunterMidCinematicEnd;
trigger gt_HunterMidCleanup;
trigger gt_HunterMidResetLava;
trigger gt_HunterCreateBriefingModelOnCommandCenter;

//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;

//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        cai_playerAI[init_i] = null;
    }
}

//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;

    if (cai_playerAI[p] == "ai4BEFB21E") { ai4BEFB21E_start(p); }
}

//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai4BEFB21E") { ai4BEFB21E_setDefGather(p, val); }
}

//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai4BEFB21E") { return ai4BEFB21E_getCustomData(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai4BEFB21E") { ai4BEFB21E_waves_run(p, target); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai4BEFB21E") { ai4BEFB21E_waves_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "ai4BEFB21E") { ai4BEFB21E_waves_stop(); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai4BEFB21E") { ai4BEFB21E_wave_run(w, p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai4BEFB21E") { ai4BEFB21E_wave_enable(w, p, val); }
}

//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "ai4BEFB21E") { return ai4BEFB21E_wave_isEnabled(w, p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai4BEFB21E") { return ai4BEFB21E_wave_createdUnits(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai4BEFB21E") { return ai4BEFB21E_wave_createdWave(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_startall () {
    cai_start("ai4BEFB21E", 2);
    AICampaignStart(3);
    AICampaignStart(6);
}

//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(2, target);
}

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_SplitterNydusReinforcements (unit lp_spawnUnit, int lp_banelingTotal, bool lp_playBirth) {
    // Variable Declarations
    int lv_count;
    unitgroup lv_banelings;
    string lv_reinforcementType;

    // Variable Initialization
    lv_banelings = UnitGroupEmpty();

    // Implementation
    libNtve_gf_ShareVisionofUnit(lp_spawnUnit, true, gv_pLAYER_01_USER);
    libNtve_gf_MakeUnitInvulnerable(lp_spawnUnit, true);
    if ((lp_playBirth == true)) {
        CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 0.5, 1.0, 3.0);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_spawnUnit), "NydusCanelBirth", "Birth 02", c_animFlagFullMatch | c_animFlagNonLooping, 0.0);
        Wait(3.8, c_timeGame);
    }
    else {
    }
    lv_count = UnitGroupCount(UnitGroup("HotSSplitterlingBig", gv_pLAYER_01_USER, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    lv_count += UnitGroupCount(UnitGroup("HotSSplitterlingBigBurrowed", gv_pLAYER_01_USER, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    lv_count += UnitGroupCount(UnitGroup("Baneling", gv_pLAYER_01_USER, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    lv_count += UnitGroupCount(UnitGroup("BanelingBurrowed", gv_pLAYER_01_USER, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    if ((libSwaC_gf_MissionObjectiveStateCheck("ZEvolutionBanelingA01", 2) == false)) {
        lv_reinforcementType = "Baneling";
    }
    else {
        lv_reinforcementType = "HotSSplitterlingBig";
    }
    UnitCargoCreate(lp_spawnUnit, lv_reinforcementType, MaxI(10, (lp_banelingTotal - lv_count)));
    lv_banelings = UnitCargoLastCreatedGroup();
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(lp_spawnUnit), "NydusCanelBirth");
    UnitGroupLoopBegin(lv_banelings);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetOwner(UnitGroupLoopCurrent(), gv_pLAYER_01_USER, true);
    }
    UnitGroupLoopEnd();
    UnitIssueOrder(lp_spawnUnit, Order(AbilityCommand("GreaterNydusWormTransport", 1)), c_orderQueueAddToEnd);
}

void gf_TurnOnLava (fixed lp_duration) {
    // Implementation
    TriggerExecute(gt_CameraShakeDuringLava, true, false);
    SoundPlay(SoundLink("TUILavaRising", -1), PlayerGroupAll(), 100.0, 0.0);
    WaterSetState("Template 1|Alternate Setting 2", lp_duration, c_wtcLinear);
    GameSetLighting("TTosh01Eruption", lp_duration);
    libNtve_gf_ClearAnimationOnDoodadsInRegion(RegionPlayableMap(), "TTosh01FlameGeyser", "StandWork");
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionPlayableMap(), "CharAshWeather", c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    if ((gv_firstLava == true)) {
        Wait(2.0, c_timeGame);
    }
    else {
    }
    gv_lowGroundIsSafe = false;
    TriggerEnable(gt_LavaDamage, true);
}

void gf_TurnOffLava (fixed lp_duration) {
    // Implementation
    WaterSetState("Template 1|[Default]", lp_duration, c_wtcLinear);
    GameSetLighting("TTosh01Normal", lp_duration);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "CharAshWeather", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    if ((gv_firstLava == true)) {
        Wait(1.0, c_timeGame);
    }
    else {
    }
    gv_lowGroundIsSafe = true;
    TriggerEnable(gt_LavaDamage, false);
}

void gf_HunterRescueBanelings (region lp_region) {
    region auto181FD3E1_val;

    // Variable Declarations
    unitgroup lv_group;

    // Variable Initialization
    lv_group = UnitGroupEmpty();

    // Implementation
    auto181FD3E1_val = lp_region;
    if (auto181FD3E1_val == RegionFromId(8)) {
        lv_group = gv_hunterRescueGroups[1];
    }
    else if (auto181FD3E1_val == RegionFromId(9)) {
        lv_group = gv_hunterRescueGroups[2];
    }
    else if (auto181FD3E1_val == RegionFromId(10)) {
        lv_group = gv_hunterRescueGroups[3];
    }
    else {
        return ;
    }
    UnitGroupIssueOrder(lv_group, Order(AbilityCommand("BurrowHunterUp", 0)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    libNtve_gf_RescueUnit2(lv_group, gv_pLAYER_01_USER, true);
    UnitGroupAddUnitGroup(gv_hunterPlayerUnitGroup, lv_group);
}

trigger auto_gf_ColossusPings_Trigger = null;
unitgroup auto_gf_ColossusPings_lp_unitGroup;

void gf_ColossusPings (unitgroup lp_unitGroup) {
    auto_gf_ColossusPings_lp_unitGroup = lp_unitGroup;

    if (auto_gf_ColossusPings_Trigger == null) {
        auto_gf_ColossusPings_Trigger = TriggerCreate("auto_gf_ColossusPings_TriggerFunc");
    }

    TriggerExecute(auto_gf_ColossusPings_Trigger, false, false);
}

bool auto_gf_ColossusPings_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_unitGroup = auto_gf_ColossusPings_lp_unitGroup;

    // Variable Declarations
    int lv_ping;

    // Variable Initialization
    lv_ping = c_invalidPingId;

    // Implementation
    libSwaC_gf_CreateObjectivePing(true, UnitGroupCenterOfGroup(lp_unitGroup), StringExternal("Param/Value/138431EF"));
    lv_ping = PingLastCreated();
    while (!((UnitGroupCount(lp_unitGroup, c_unitCountAlive) == 0))) {
        Wait(0.25, c_timeGame);
    }
    PingDestroy(lv_ping);
    return true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_ULoadCampaignData("ZEvolutionBaneling");
    TriggerExecute(gt_Init01Technology, true, true);
    libSwaC_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03Units, true, true);
    TriggerExecute(gt_Init04MusicSound, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulties, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    TriggerExecute(gt_Splitter, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("SpawnLarva", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("QueenBuild", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("LarvaTrain", 1), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("LarvaTrain", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("LarvaTrain", 2), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("UpgradeToLair", 0), false);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_PROTOSS, "BlinkTech", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropSuppliesMade, c_playerPropOperSetTo, 200);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerSetState(gv_pLAYER_02_DOMINION, c_playerStateFidgetingEnabled, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("Bunker", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitCargoCreate(UnitGroupLoopCurrent(), "Marine", 4);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Sentry", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergyPercent, 100.0);
    }
    UnitGroupLoopEnd();
    gv_splitterProtossBaseUnits = UnitGroup(null, gv_pLAYER_03_PROTOSS, RegionFromId(23), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupAdd(gv_doodadZealots, UnitFromId(391));
    UnitGroupAdd(gv_doodadZealots, UnitFromId(392));
    UnitGroupLoopBegin(gv_doodadZealots);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateHighlightable, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateSelectable, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateTargetable, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateFidget, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateTurnSuppressed, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateMoveSuppressed, false);
        libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "AnimSetPausedAll");
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitSetState(UnitFromId(802), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(802), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(802), c_unitStateTooltipable, false);
    UnitSetState(UnitFromId(272), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(272), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(272), c_unitStateTooltipable, false);
    UnitSetState(UnitFromId(273), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(273), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(273), c_unitStateTooltipable, false);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(335), true);
    UnitIssueOrder(UnitFromId(335), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(800)), c_orderQueueReplace);
    UnitGroupAdd(gv_splitterNydusWorms, UnitFromId(335));
    CatalogFieldValueSet(c_gameCatalogUnit, "HotSHunterBurrowed", "Sight", gv_pLAYER_04_ZERG, "3");
    UnitIssueOrder(UnitFromId(182), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(373), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(95), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init04MusicSound_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mapMusicTrack = libSwaC_gf_MissionDefaultMusic();
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Space01", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04MusicSound_Init () {
    gt_Init04MusicSound = TriggerCreate("gt_Init04MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    libLbty_gf_AutoRevealRegion(RegionFromId(21), RegionFromId(21), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(22), RegionFromId(22), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(23), RegionFromId(23), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(3), RegionFromId(3), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(13), RegionFromId(13), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(17), RegionFromId(17), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(18), RegionFromId(18), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(20), RegionFromId(20), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(25), RegionFromId(25), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(34), RegionFromId(34), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(35), RegionFromId(35), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(36), RegionFromId(36), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(37), RegionFromId(37), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(38), RegionFromId(38), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(31), RegionFromId(31), gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_AddMissionTipUserData("Splitter Strain");
    libSwaC_gf_AddMissionTipUserData("Colossi");
    libSwaC_gf_AddMissionTipUserData("Hunter Strain");
    libSwaC_gf_AddMissionTipUserData("Lava");
    libSwaC_gf_AddMissionTipUserData("Dominion (ZEvoBaneling)");
    libSwaC_gf_AddMissionTipUserData("Reinforcements (ZEvoBaneling)");
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Baneling", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("SCV", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Marine", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Marauder", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Firebat", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Medivac", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Bunker", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Zealot", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Stalker", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Colossus", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("PhotonCannon", false, gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Hunter
//--------------------------------------------------------------------------------------------------
bool gt_DebugHunter_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TransmissionClearAll();
    TriggerQueueClear(c_triggerQueueKill);
    ObjectiveShow(gv_splitterObjectiveKillMitoscarab, PlayerGroupAll(), false);
    ObjectiveShow(gv_splitterObjectiveDestroyProtossColossi, PlayerGroupAll(), false);
    TriggerExecute(gt_Hunter, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugHunter_Init () {
    gt_DebugHunter = TriggerCreate("gt_DebugHunter_Func");
    TriggerAddEventChatMessage(gt_DebugHunter, c_playerAny, "EVO2", true);
    TriggerAddEventChatMessage(gt_DebugHunter, c_playerAny, "s2", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reinforcements - All Units Dead
//--------------------------------------------------------------------------------------------------
bool gt_ReinforcementsAllUnitsDead_Func (bool testConds, bool runActions) {
    point autoCAE4E31E_val;
    int auto1867C7B0_val;
    int auto0E46818D_val;
    int auto13C9900A_val;
    int auto992F703C_val;
    int auto505C0270_n;
    int auto505C0270_i;
    int auto213C2DC7_val;
    int autoA8926FCD_n;
    int autoA8926FCD_i;
    int autoFC98EA20_val;
    int auto430D88AD_n;
    int auto430D88AD_i;
    int autoD9B8BC13_val;
    int auto30371672_n;
    int auto30371672_i;

    // Variable Declarations
    unitgroup lv_backupUnits;
    unitgroup lv_backupPausedUnits;

    // Variable Initialization
    lv_backupUnits = UnitGroupEmpty();
    lv_backupPausedUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_backupSuppressed == false))) {
            return false;
        }

        if (!((((gv_splitterActive == true) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) || ((gv_hunterActive == true) && (UnitGroupCount(gv_hunterPlayerUnitGroup, c_unitCountAlive) == 0))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((TriggerQueueIsEmpty() == true))) {
        Wait(1.0, c_timeGame);
    }
    TriggerQueuePause(true);
    TransmissionClearAll();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_UnitIsPaused(UnitGroupLoopCurrent()) == false)) {
            UnitGroupAdd(lv_backupPausedUnits, UnitGroupLoopCurrent());
            libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libSwaC_gf_CinematicModeSwarmCampaign(true, 1.0);
    UnitClearSelection(gv_pLAYER_01_USER);
    CameraPan(gv_pLAYER_01_USER, gv_backupPoint, 3.0, -1, 10.0, false);
    autoCAE4E31E_val = gv_backupPoint;
    if (autoCAE4E31E_val == PointFromId(168)) {
        auto1867C7B0_val = RandomInt(1, 2);
        if (auto1867C7B0_val == 1) {
            libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Baneling|Line00023", c_transmissionDurationAdd, 0.0, false, 1, 0);
        }
        else if (auto1867C7B0_val == 2) {
            libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Baneling|Line00025", c_transmissionDurationAdd, 0.0, false, 1, 0);
        }
        else {
        }
        libNtve_gf_PauseUnit(gv_splitterIntroNydus, false);
        UnitCargoCreate(gv_splitterIntroNydus, "Baneling", 28);
        lv_backupUnits = UnitCargoLastCreatedGroup();
        UnitGroupLoopBegin(UnitCargoLastCreatedGroup());
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitSetOwner(UnitGroupLoopCurrent(), gv_pLAYER_01_USER, true);
        }
        UnitGroupLoopEnd();
        UnitIssueOrder(gv_splitterIntroNydus, OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(168)), c_orderQueueReplace);
        UnitIssueOrder(gv_splitterIntroNydus, Order(AbilityCommand("GreaterNydusWormTransport", 1)), c_orderQueueAddToEnd);
    }
    else if (autoCAE4E31E_val == PointFromId(1149)) {
        auto0E46818D_val = RandomInt(1, 2);
        if (auto0E46818D_val == 1) {
            libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Baneling|Line00023", c_transmissionDurationAdd, 0.0, false, 1, 0);
        }
        else if (auto0E46818D_val == 2) {
            libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Baneling|Line00025", c_transmissionDurationAdd, 0.0, false, 1, 0);
        }
        else {
        }
        libNtve_gf_PauseUnit(gv_splitterMidNydus, false);
        UnitCargoCreate(gv_splitterMidNydus, "HotSSplitterlingBig", 25);
        lv_backupUnits = UnitCargoLastCreatedGroup();
        UnitGroupLoopBegin(UnitCargoLastCreatedGroup());
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitSetOwner(UnitGroupLoopCurrent(), gv_pLAYER_01_USER, true);
        }
        UnitGroupLoopEnd();
        UnitIssueOrder(gv_splitterMidNydus, OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(1149)), c_orderQueueReplace);
        UnitIssueOrder(gv_splitterMidNydus, Order(AbilityCommand("GreaterNydusWormTransport", 1)), c_orderQueueAddToEnd);
    }
    else if (autoCAE4E31E_val == PointFromId(1150)) {
        auto13C9900A_val = RandomInt(1, 2);
        if (auto13C9900A_val == 1) {
            libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Baneling|Line00023", c_transmissionDurationAdd, 0.0, false, 1, 0);
        }
        else if (auto13C9900A_val == 2) {
            libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Baneling|Line00025", c_transmissionDurationAdd, 0.0, false, 1, 0);
        }
        else {
        }
        libNtve_gf_PauseUnit(gv_splitterReinforcementNydus, false);
        UnitCargoCreate(gv_splitterReinforcementNydus, "HotSSplitterlingBig", 45);
        lv_backupUnits = UnitCargoLastCreatedGroup();
        UnitGroupLoopBegin(UnitCargoLastCreatedGroup());
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitSetOwner(UnitGroupLoopCurrent(), gv_pLAYER_01_USER, true);
        }
        UnitGroupLoopEnd();
        UnitIssueOrder(gv_splitterReinforcementNydus, OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(1150)), c_orderQueueReplace);
        UnitIssueOrder(gv_splitterReinforcementNydus, Order(AbilityCommand("GreaterNydusWormTransport", 1)), c_orderQueueAddToEnd);
    }
    else if (autoCAE4E31E_val == PointFromId(1151)) {
        auto992F703C_val = RandomInt(1, 2);
        if (auto992F703C_val == 1) {
            libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Baneling|Line00023", c_transmissionDurationAdd, 0.0, false, 1, 0);
        }
        else if (auto992F703C_val == 2) {
            libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Baneling|Line00025", c_transmissionDurationAdd, 0.0, false, 1, 0);
        }
        else {
        }
        auto505C0270_n = 10;
        for (auto505C0270_i = 1; auto505C0270_i <= auto505C0270_n; auto505C0270_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HotSHunterBurrowed", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(7)));
            UnitGroupAdd(lv_backupUnits, UnitLastCreated());
            UnitGroupAdd(gv_hunterPlayerUnitGroup, UnitLastCreated());
        }
        UnitGroupIssueOrder(lv_backupUnits, Order(AbilityCommand("BurrowHunterUp", 0)), c_orderQueueReplace);
    }
    else if (autoCAE4E31E_val == PointFromId(1152)) {
        auto213C2DC7_val = RandomInt(1, 2);
        if (auto213C2DC7_val == 1) {
            libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Baneling|Line00023", c_transmissionDurationAdd, 0.0, false, 1, 0);
        }
        else if (auto213C2DC7_val == 2) {
            libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Baneling|Line00025", c_transmissionDurationAdd, 0.0, false, 1, 0);
        }
        else {
        }
        autoA8926FCD_n = 27;
        for (autoA8926FCD_i = 1; autoA8926FCD_i <= autoA8926FCD_n; autoA8926FCD_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HotSHunterBurrowed", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(8)));
            UnitGroupAdd(lv_backupUnits, UnitLastCreated());
            UnitGroupAdd(gv_hunterPlayerUnitGroup, UnitLastCreated());
        }
        UnitGroupIssueOrder(lv_backupUnits, Order(AbilityCommand("BurrowHunterUp", 0)), c_orderQueueReplace);
    }
    else if (autoCAE4E31E_val == PointFromId(1153)) {
        autoFC98EA20_val = RandomInt(1, 2);
        if (autoFC98EA20_val == 1) {
            libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Baneling|Line00023", c_transmissionDurationAdd, 0.0, false, 1, 0);
        }
        else if (autoFC98EA20_val == 2) {
            libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Baneling|Line00025", c_transmissionDurationAdd, 0.0, false, 1, 0);
        }
        else {
        }
        auto430D88AD_n = 40;
        for (auto430D88AD_i = 1; auto430D88AD_i <= auto430D88AD_n; auto430D88AD_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HotSHunterBurrowed", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(9)));
            UnitGroupAdd(lv_backupUnits, UnitLastCreated());
            UnitGroupAdd(gv_hunterPlayerUnitGroup, UnitLastCreated());
        }
        UnitGroupIssueOrder(lv_backupUnits, Order(AbilityCommand("BurrowHunterUp", 0)), c_orderQueueReplace);
    }
    else if (autoCAE4E31E_val == PointFromId(1154)) {
        autoD9B8BC13_val = RandomInt(1, 2);
        if (autoD9B8BC13_val == 1) {
            libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Baneling|Line00023", c_transmissionDurationAdd, 0.0, false, 1, 0);
        }
        else if (autoD9B8BC13_val == 2) {
            libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Baneling|Line00025", c_transmissionDurationAdd, 0.0, false, 1, 0);
        }
        else {
        }
        auto30371672_n = 50;
        for (auto30371672_i = 1; auto30371672_i <= auto30371672_n; auto30371672_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HotSHunterBurrowed", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(10)));
            UnitGroupAdd(lv_backupUnits, UnitLastCreated());
            UnitGroupAdd(gv_hunterPlayerUnitGroup, UnitLastCreated());
        }
        UnitGroupIssueOrder(lv_backupUnits, Order(AbilityCommand("BurrowHunterUp", 0)), c_orderQueueReplace);
    }
    else {
        gv_gameOver = true;
        TriggerQueuePause(true);
        TriggerQueueClear(c_triggerQueueRemove);
        Wait(2.0, c_timeReal);
        libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), 0, StringExternal("Param/Value/FF3E530D"), 0);
        Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
        TriggerExecute(gt_Defeat, true, false);
        return true;
    }
    Wait(3.0, c_timeReal);
    TransmissionWait(TransmissionLastSent(), 0.0);
    UnitGroupLoopBegin(lv_backupPausedUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    UnitGroupSelect(lv_backupUnits, gv_pLAYER_01_USER, true);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.0);
    TriggerQueuePause(false);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReinforcementsAllUnitsDead_Init () {
    gt_ReinforcementsAllUnitsDead = TriggerCreate("gt_ReinforcementsAllUnitsDead_Func");
    TriggerAddEventTimePeriodic(gt_ReinforcementsAllUnitsDead, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Splitter -> Hunter Transition Q
//--------------------------------------------------------------------------------------------------
bool gt_SplitterHunterTransitionQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Baneling|Line00018", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    ObjectiveDestroyAll(PlayerGroupAll());
    libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/1D77B715"));
    CameraSetValue(gv_pLAYER_01_USER, c_cameraValueDistance, (CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance) + 40.0), 2.0, -1, 10.0);
    CameraSetValue(gv_pLAYER_01_USER, c_cameraValuePitch, CameraInfoGetValue(CameraInfoDefault(), c_cameraValuePitch), 2.0, -1, 10.0);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 2.0);
    CinematicFade(false, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerQueueExit();
    TriggerExecute(gt_Hunter, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SplitterHunterTransitionQ_Init () {
    gt_SplitterHunterTransitionQ = TriggerCreate("gt_SplitterHunterTransitionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Splitter
//--------------------------------------------------------------------------------------------------
bool gt_Splitter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_visionGroup;

    // Variable Initialization
    lv_visionGroup = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    gv_hunterActive = false;
    gv_splitterActive = true;
    gv_backupPoint = PointFromId(168);
    PlayerSetAlliance(gv_pLAYER_01_USER, c_allianceIdVision, gv_pLAYER_03_PROTOSS, true);
    RegionPlayableMapSet(RegionFromId(1));
    TriggerEnable(gt_HunterVictoryDestoryPlanetaryFortressCompleted, false);
    TriggerEnable(gt_SplitterVictoryWipeOutProtossCompleted, true);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_03_PROTOSS, 5);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_05_RESCUES, 0);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_06_HOSTILE, 5);
    libNtve_gf_SetAlliance(gv_pLAYER_03_PROTOSS, gv_pLAYER_05_RESCUES, 7);
    libNtve_gf_SetAlliance(gv_pLAYER_03_PROTOSS, gv_pLAYER_06_HOSTILE, 5);
    PlayerGroupAdd(lv_visionGroup, gv_pLAYER_02_DOMINION);
    PlayerGroupAdd(lv_visionGroup, gv_pLAYER_03_PROTOSS);
    PlayerGroupAdd(lv_visionGroup, gv_pLAYER_05_RESCUES);
    PlayerGroupAdd(lv_visionGroup, gv_pLAYER_06_HOSTILE);
    libSwaC_gf_ShareVisionAmongPlayers(lv_visionGroup);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_splitterUnits, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_hunterUnits, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_hunterUnits, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_splitterUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_hunterUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("Zergling", gv_pLAYER_01_USER, RegionFromId(24), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_splitterStartGroup);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("Baneling", gv_pLAYER_01_USER, RegionFromId(24), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_splitterStartGroup);
    gv_splitterTheMitoscarab = UnitFromId(342);
    CreepModify(PointFromId(772), 6.0, true, true);
    libSwaC_gf_EnableCampaignTechUnit(true, "Baneling", gv_pLAYER_01_USER);
    libSwaC_gf_EnableCampaignTechUnit(false, "BanelingA", gv_pLAYER_01_USER);
    TriggerExecute(gt_SplitterIntroQ, true, true);
    TriggerExecute(gt_SplitterStartQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Splitter_Init () {
    gt_Splitter = TriggerCreate("gt_Splitter_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Splitter Start Q
//--------------------------------------------------------------------------------------------------
bool gt_SplitterStartQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/03DFC290"), null, RegionGetCenter(RegionFromId(24)));
    Wait(3.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveKillMitoscarabCreate, true, true);
    Wait(2.0, c_timeGame);
    TriggerQueueExit();
    TriggerExecute(gt_TipMissionHelpQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SplitterStartQ_Init () {
    gt_SplitterStartQ = TriggerCreate("gt_SplitterStartQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Splitter - Mitoscarab Ambush Q
//--------------------------------------------------------------------------------------------------
bool gt_SplitterMitoscarabAmbushQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(186), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(EventUnit())), c_orderQueueReplace);
    while (!((gv_splitterDNACollected >= 2))) {
        Wait(0.25, c_timeGame);
    }
    PingDestroy(gv_splitterMitoscarabPing1);
    gv_splitterMitoscarabPing1 = c_invalidPingId;
    if ((UnitIsAlive(gv_splitterTheMitoscarab) == false)) {
        return true;
    }
    else {
    }
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Baneling|Line00055", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    libNtve_gf_ShareVisionofUnit(gv_splitterTheMitoscarab, true, gv_pLAYER_01_USER);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SplitterMitoscarabAmbushQ_Init () {
    gt_SplitterMitoscarabAmbushQ = TriggerCreate("gt_SplitterMitoscarabAmbushQ_Func");
    TriggerAddEventUnitRegion(gt_SplitterMitoscarabAmbushQ, null, RegionFromId(19), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Splitter - Ancient Mitoscarab Died
//--------------------------------------------------------------------------------------------------
bool gt_SplitterAncientMitoscarabDied_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_splitterMitoscarabPing2);
    gv_splitterMitoscarabPing2 = c_invalidPingId;
    TriggerEnable(gt_SplitterFirstStageEndQ, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SplitterAncientMitoscarabDied_Init () {
    gt_SplitterAncientMitoscarabDied = TriggerCreate("gt_SplitterAncientMitoscarabDied_Func");
    TriggerAddEventUnitDied(gt_SplitterAncientMitoscarabDied, UnitRefFromVariable("gv_splitterTheMitoscarab"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Splitter - MitoscarabB Enter World
//--------------------------------------------------------------------------------------------------
bool gt_SplitterMitoscarabBEnterWorld_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "MitosaurusB") || (UnitGetType(EventUnit()) == "MitosaurusC")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitInvulnerable(EventUnit(), true);
    Wait(2.0, c_timeGame);
    libNtve_gf_MakeUnitInvulnerable(EventUnit(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SplitterMitoscarabBEnterWorld_Init () {
    gt_SplitterMitoscarabBEnterWorld = TriggerCreate("gt_SplitterMitoscarabBEnterWorld_Func");
    TriggerAddEventUnitRegion(gt_SplitterMitoscarabBEnterWorld, null, RegionFromId(6), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Splitter - Mitoscarab Dies (Give DNA)
//--------------------------------------------------------------------------------------------------
bool gt_SplitterMitoscarabDiesGiveDNA_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_dNA;

    // Variable Initialization
    lv_dNA = "DNAPickup";

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "MitosaurusC"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, lv_dNA, 0, gv_pLAYER_01_USER, UnitGetPosition(EventUnit()), libNtve_gf_RandomAngle());
    libSwaC_gf_SetUnitInfoTextCampaign(UnitLastCreated(), StringExternal("Param/Value/D79F5BDE"), StringExternal("Param/Value/31537075"), null);
    Wait(0.5, c_timeGame);
    SoundPlayAtPoint(SoundLink("Zerus_DNA_PkUp", -1), PlayerGroupAll(), UnitGetPosition(UnitLastCreated()), 0.0, 100.0, 0.0);
    libSwaC_gf_DestroyCacheAndGivePlayerResources(UnitLastCreated(), 0, 1, null, StringExternal("Param/Value/04F81B56"), gv_pLAYER_01_USER);
    gv_splitterDNACollected += 1;
    TriggerExecute(gt_ObjectiveKillMitoscarabUpdate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SplitterMitoscarabDiesGiveDNA_Init () {
    gt_SplitterMitoscarabDiesGiveDNA = TriggerCreate("gt_SplitterMitoscarabDiesGiveDNA_Func");
    TriggerAddEventUnitDied(gt_SplitterMitoscarabDiesGiveDNA, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Splitter - First Stage End Q
//--------------------------------------------------------------------------------------------------
bool gt_SplitterFirstStageEndQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_nydus;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_SplitterMitoscarabDiesGiveDNA, false);
    TriggerExecute(gt_SplitterMidQ, true, true);
    gv_backupSuppressed = false;
    gv_backupPoint = PointFromId(1149);
    Wait(1.0, c_timeGame);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveDestroyProtossColossiCreate, true, true);
    TriggerQueueExit();
    Wait(4.0, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SplitterFirstStageEndQ_Init () {
    gt_SplitterFirstStageEndQ = TriggerCreate("gt_SplitterFirstStageEndQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Splitter - First Encounter
//--------------------------------------------------------------------------------------------------
bool gt_SplitterFirstEncounter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    camerainfo lv_camera;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_SplitterEncounterTransmissionQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SplitterFirstEncounter_Init () {
    gt_SplitterFirstEncounter = TriggerCreate("gt_SplitterFirstEncounter_Func");
    TriggerAddEventUnitAcquiredTarget(gt_SplitterFirstEncounter, UnitRefFromUnit(UnitFromId(95)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Splitter Encounter Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_SplitterEncounterTransmissionQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Baneling|Line00001", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SplitterEncounterTransmissionQ_Init () {
    gt_SplitterEncounterTransmissionQ = TriggerCreate("gt_SplitterEncounterTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Splitter - Protoss Taunt Q 1
//--------------------------------------------------------------------------------------------------
bool gt_SplitterProtossTauntQ1_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(UnitFromId(170), "zEvoMission_Baneling|Line00028", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SplitterProtossTauntQ1_Init () {
    gt_SplitterProtossTauntQ1 = TriggerCreate("gt_SplitterProtossTauntQ1_Func");
    TriggerAddEventUnitAcquiredTarget(gt_SplitterProtossTauntQ1, UnitRefFromUnit(UnitFromId(170)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Splitter - Protoss Taunt Q 2
//--------------------------------------------------------------------------------------------------
bool gt_SplitterProtossTauntQ2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(EventUnit(), "zEvoMission_Baneling|Line00058", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SplitterProtossTauntQ2_Init () {
    gt_SplitterProtossTauntQ2 = TriggerCreate("gt_SplitterProtossTauntQ2_Func");
    TriggerAddEventUnitAcquiredTarget(gt_SplitterProtossTauntQ2, UnitRefFromUnit(UnitFromId(705)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Splitter - Protoss Ambush
//--------------------------------------------------------------------------------------------------
bool gt_SplitterProtossAmbush_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupIssueOrder(UnitGroup(null, gv_pLAYER_03_PROTOSS, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(EventUnit())), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SplitterProtossAmbush_Init () {
    gt_SplitterProtossAmbush = TriggerCreate("gt_SplitterProtossAmbush_Func");
    TriggerAddEventUnitRegion(gt_SplitterProtossAmbush, null, RegionFromId(21), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Splitter - Nydus Worm Incoming 1
//--------------------------------------------------------------------------------------------------
bool gt_SplitterNydusWormIncoming1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_nydus;
    int lv_count;
    unitgroup lv_banelings;

    // Variable Initialization
    lv_banelings = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    CameraPan(gv_pLAYER_01_USER, CameraInfoGetTarget(CameraInfoFromId(425)), 1.5, -1, 10.0, true);
    TriggerExecute(gt_SplitterNydusWormIncomingTransQ1, true, false);
    Wait(1.0, c_timeGame);
    UnitCreate(1, "GreaterNydusWorm", c_unitCreateIgnorePlacement, gv_pLAYER_04_ZERG, PointFromId(174), 270.0);
    UnitGroupAdd(gv_splitterNydusWorms, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(312)), c_orderQueueReplace);
    gf_SplitterNydusReinforcements(UnitLastCreated(), 25, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SplitterNydusWormIncoming1_Init () {
    gt_SplitterNydusWormIncoming1 = TriggerCreate("gt_SplitterNydusWormIncoming1_Func");
    TriggerAddEventUnitRangePoint(gt_SplitterNydusWormIncoming1, null, PointFromId(174), 10.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Splitter - Nydus Worm Incoming Trans Q 1
//--------------------------------------------------------------------------------------------------
bool gt_SplitterNydusWormIncomingTransQ1_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Baneling|Line00023", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SplitterNydusWormIncomingTransQ1_Init () {
    gt_SplitterNydusWormIncomingTransQ1 = TriggerCreate("gt_SplitterNydusWormIncomingTransQ1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Splitter - Nydus Worm Incoming 2
//--------------------------------------------------------------------------------------------------
bool gt_SplitterNydusWormIncoming2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_nydus;
    int lv_count;
    unitgroup lv_banelings;

    // Variable Initialization
    lv_banelings = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_SplitterNydusWormIncomingTransQ2, true, false);
    Wait(1.0, c_timeGame);
    UnitCreate(1, "GreaterNydusWorm", c_unitCreateIgnorePlacement, gv_pLAYER_04_ZERG, PointFromId(801), 270.0);
    UnitGroupAdd(gv_splitterNydusWorms, UnitLastCreated());
    gv_splitterReinforcementNydus = UnitLastCreated();
    gv_backupPoint = PointFromId(1150);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(311)), c_orderQueueReplace);
    gf_SplitterNydusReinforcements(UnitLastCreated(), 45, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SplitterNydusWormIncoming2_Init () {
    gt_SplitterNydusWormIncoming2 = TriggerCreate("gt_SplitterNydusWormIncoming2_Func");
    TriggerAddEventUnitRangePoint(gt_SplitterNydusWormIncoming2, null, PointFromId(801), 15.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Splitter - Nydus Worm Incoming Trans Q 2
//--------------------------------------------------------------------------------------------------
bool gt_SplitterNydusWormIncomingTransQ2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Baneling|Line00024", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SplitterNydusWormIncomingTransQ2_Init () {
    gt_SplitterNydusWormIncomingTransQ2 = TriggerCreate("gt_SplitterNydusWormIncomingTransQ2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Splitter - Blink Event
//--------------------------------------------------------------------------------------------------
bool gt_SplitterBlinkEvent_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_03_PROTOSS, RegionFromId(23), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShareVisionofUnit(UnitGroupLoopCurrent(), true, gv_pLAYER_01_USER);
    }
    UnitGroupLoopEnd();
    Wait(0.5, c_timeGame);
    UnitGroupLoopBegin(UnitGroup("Stalker", gv_pLAYER_03_PROTOSS, RegionFromId(23), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("Blink", 0), PointWithOffset(UnitGetPosition(UnitGroupLoopCurrent()), 4.0, -4.0)), c_orderQueueReplace);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SplitterBlinkEvent_Init () {
    gt_SplitterBlinkEvent = TriggerCreate("gt_SplitterBlinkEvent_Func");
    TriggerAddEventUnitRegion(gt_SplitterBlinkEvent, null, RegionFromId(33), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lava Timer Create
//--------------------------------------------------------------------------------------------------
bool gt_LavaTimerCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_TimerWindowCreate2(gv_lavaTimer, StringExternal("Param/Value/36910D6E"), true, false, 1);
    gv_lavaTimerWindow = TimerWindowLastCreated();
    TimerWindowSetFormat(gv_lavaTimerWindow, StringToText("<mintotal/>:<sec2/>"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LavaTimerCreate_Init () {
    gt_LavaTimerCreate = TriggerCreate("gt_LavaTimerCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Camera Shake - Weak
//--------------------------------------------------------------------------------------------------
bool gt_CameraShakeWeak_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_duration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CameraShake(gv_pLAYER_01_USER, "Light", "Earthquake", 1.0, 1.0, 3.0);
    SoundPlay(SoundLink("TUILavaRising", -1), PlayerGroupAll(), 100.0, 0.0);
    if ((gv_firstLava == true)) {
        lv_duration = 8.0;
    }
    else {
        lv_duration = 15.0;
    }
    WaterSetState("Template 1|Alternate Setting 1", lv_duration, c_wtcLinear);
    GameSetLighting("TTosh01Warning", lv_duration);
    Wait(2.0, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "TTosh01FlameGeyser", "StandWork", "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CameraShakeWeak_Init () {
    gt_CameraShakeWeak = TriggerCreate("gt_CameraShakeWeak_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Camera Shake - During Lava
//--------------------------------------------------------------------------------------------------
bool gt_CameraShakeDuringLava_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraShake(gv_pLAYER_01_USER, "Light", "Earthquake", 1.0, 1.5, 5.0);
    Wait(4.0, c_timeGame);
    libNtve_gf_KillDoodadsInRegion(RegionCircle(CameraGetTarget(gv_pLAYER_01_USER), 15.0), "TTosh01RockSpires");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CameraShakeDuringLava_Init () {
    gt_CameraShakeDuringLava = TriggerCreate("gt_CameraShakeDuringLava_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lava Turns ON
//--------------------------------------------------------------------------------------------------
bool gt_LavaTurnsON_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_lowGroundIsSafe == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TimerWindowShow(gv_lavaTimerWindow, PlayerGroupAll(), false);
    gf_TurnOnLava(4.0);
    Wait(2.0, c_timeGame);
    TimerStart(gv_lavaTimer, 10.0, false, c_timeAI);
    TimerStart(gv_warningTimer, 12.0, false, c_timeAI);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_HunterLavaWarningQ, true, false);
    TriggerEnable(gt_LavaTurnsOFF, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LavaTurnsON_Init () {
    gt_LavaTurnsON = TriggerCreate("gt_LavaTurnsON_Func");
    TriggerAddEventTimer(gt_LavaTurnsON, gv_lavaTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lava Turns OFF
//--------------------------------------------------------------------------------------------------
bool gt_LavaTurnsOFF_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_lowGroundIsSafe == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlay(SoundLink("TUILavaRising", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_TurnOffLava(10.0);
    TimerStart(gv_warningTimer, (gv_lavaInterval - 17.0), false, c_timeAI);
    TimerStart(gv_lavaTimer, gv_lavaInterval, false, c_timeAI);
    TimerWindowShow(gv_lavaTimerWindow, PlayerGroupAll(), true);
    TriggerExecute(gt_HunterMedivac1ComingInQ, true, false);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_LavaSafeQ, true, false);
    TriggerEnable(gt_LavaTurnsON, true);
    if ((gv_timerCreated == false)) {
        TriggerExecute(gt_LavaTimerCreate, true, false);
        gv_timerCreated = true;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LavaTurnsOFF_Init () {
    gt_LavaTurnsOFF = TriggerCreate("gt_LavaTurnsOFF_Func");
    TriggerEnable(gt_LavaTurnsOFF, false);
    TriggerAddEventTimer(gt_LavaTurnsOFF, gv_lavaTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lava Damage
//--------------------------------------------------------------------------------------------------
bool gt_LavaDamage_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((WorldHeight(c_heightMapGround, UnitGetPosition(UnitGroupLoopCurrent())) <= 8.5)) {
            UnitBehaviorAddPlayer(UnitGroupLoopCurrent(), "LavaDamage", gv_pLAYER_01_USER, 1);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LavaDamage_Init () {
    gt_LavaDamage = TriggerCreate("gt_LavaDamage_Func");
    TriggerEnable(gt_LavaDamage, false);
    TriggerAddEventTimePeriodic(gt_LavaDamage, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lava Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_LavaWarningQ_Func (bool testConds, bool runActions) {
    int auto56B947F6_val;
    int auto14F62695_val;

    // Variable Declarations
    bool lv_playerOnHighGround;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_CameraShakeWeak, true, false);
    TriggerQueueEnter();
    if (((gv_gameOver == true) || (TimerGetRemaining(gv_lavaTimer) > 10.0))) {
        return true;
    }
    else {
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    lv_playerOnHighGround = true;
    UnitGroupLoopBegin(UnitGroup("HotSHunter", gv_pLAYER_01_USER, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((CliffLevel(UnitGetPosition(UnitGroupLoopCurrent())) < 2)) {
            lv_playerOnHighGround = false;
            break;
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    if ((gv_firstLava == true)) {
        libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Baneling|Line00041", c_transmissionDurationAdd, 0.0, true, 1, 0);
    }
    else {
        if ((lv_playerOnHighGround == true)) {
            auto14F62695_val = RandomInt(1, 3);
            if (auto14F62695_val == 1) {
                libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Baneling|Line00041", c_transmissionDurationAdd, 0.0, true, 1, 0);
            }
            else if (auto14F62695_val == 2) {
                libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Baneling|Line00043", c_transmissionDurationAdd, 0.0, true, 1, 0);
            }
            else if (auto14F62695_val == 3) {
                libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Baneling|Line00044", c_transmissionDurationAdd, 0.0, true, 1, 0);
            }
            else {
            }
        }
        else {
            auto56B947F6_val = RandomInt(1, 3);
            if (auto56B947F6_val == 1) {
                libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Baneling|Line00060", c_transmissionDurationAdd, 0.0, true, 1, 0);
            }
            else if (auto56B947F6_val == 2) {
                libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Baneling|Line00061", c_transmissionDurationAdd, 0.0, true, 1, 0);
            }
            else if (auto56B947F6_val == 3) {
                libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Baneling|Line00062", c_transmissionDurationAdd, 0.0, true, 1, 0);
            }
            else {
            }
        }
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LavaWarningQ_Init () {
    gt_LavaWarningQ = TriggerCreate("gt_LavaWarningQ_Func");
    TriggerAddEventTimer(gt_LavaWarningQ, gv_warningTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lava Safe Q
//--------------------------------------------------------------------------------------------------
bool gt_LavaSafeQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_lavaSafeTransmissionQueued = true;
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }
    else {
    }
    if ((gv_firstLava == false)) {
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
        libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Baneling|Line00047", c_transmissionDurationAdd, 0.0, true, 1, 0);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    }
    else {
    }
    gv_firstLava = false;
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LavaSafeQ_Init () {
    gt_LavaSafeQ = TriggerCreate("gt_LavaSafeQ_Func");
    TriggerEnable(gt_LavaSafeQ, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hunter
//--------------------------------------------------------------------------------------------------
bool gt_Hunter_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_splitterActive = false;
    gv_hunterActive = true;
    gv_backupPoint = PointFromId(1151);
    gv_backupSuppressed = false;
    TriggerExecute(gt_HunterIntroQ, true, true);
    TriggerExecute(gt_HunterStartQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Hunter_Init () {
    gt_Hunter = TriggerCreate("gt_Hunter_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hunter Init
//--------------------------------------------------------------------------------------------------
bool gt_HunterInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_visionGroup;

    // Variable Initialization
    lv_visionGroup = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_SplitterVictoryWipeOutProtossCompleted, false);
    TriggerEnable(gt_HunterVictoryDestoryPlanetaryFortressCompleted, true);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION, 5);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_05_RESCUES, 0);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION, gv_pLAYER_05_RESCUES, 7);
    PlayerGroupAdd(lv_visionGroup, gv_pLAYER_02_DOMINION);
    PlayerGroupAdd(lv_visionGroup, gv_pLAYER_03_PROTOSS);
    PlayerGroupAdd(lv_visionGroup, gv_pLAYER_05_RESCUES);
    PlayerGroupAdd(lv_visionGroup, gv_pLAYER_06_HOSTILE);
    libSwaC_gf_ShareVisionAmongPlayers(lv_visionGroup);
    libSwaC_gf_EnableCampaignTechUnit(false, "BanelingA", gv_pLAYER_01_USER);
    libSwaC_gf_EnableCampaignTechUnit(true, "BanelingB", gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("HotSSplitterlingBig", false, gv_pLAYER_01_USER);
    UnitGroupAddUnitGroup(gv_splitterUnits, UnitGroup(null, c_playerAny, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(gv_hunterUnits, UnitGroup(null, c_playerAny, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(gv_hunterUnits, UnitGroup(null, c_playerAny, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupLoopBegin(gv_splitterUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_hunterUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    gv_hunterRescueGroups[1] = UnitGroup("HotSHunterBurrowed", c_playerAny, RegionFromId(8), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv_hunterRescueGroups[2] = UnitGroup("HotSHunterBurrowed", c_playerAny, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv_hunterRescueGroups[3] = UnitGroup("HotSHunterBurrowed", c_playerAny, RegionFromId(10), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(30)), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(34)), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(38)), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HunterInit_Init () {
    gt_HunterInit = TriggerCreate("gt_HunterInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hunter Start Q
//--------------------------------------------------------------------------------------------------
bool gt_HunterStartQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UIAlertClear(gv_pLAYER_01_USER);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/F7D0F3F0"), null, RegionGetCenter(RegionFromId(11)));
    Wait(2.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveCollectLocalBanelingsCreate, true, true);
    TriggerExecute(gt_HunterCreatePingsForSurvivors, true, false);
    Wait(1.0, c_timeGame);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Baneling|Line00030", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HunterStartQ_Init () {
    gt_HunterStartQ = TriggerCreate("gt_HunterStartQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hunter - Create Pings For Survivors
//--------------------------------------------------------------------------------------------------
bool gt_HunterCreatePingsForSurvivors_Func (bool testConds, bool runActions) {
    int autoB2B72156_ae;
    int autoB2B72156_ai;

    // Variable Declarations
    region[4] lv_areas;
    int lv_index;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_areas[1] = RegionFromId(8);
    lv_areas[2] = RegionFromId(9);
    lv_areas[3] = RegionFromId(10);
    autoB2B72156_ae = 3;
    autoB2B72156_ai = 1;
    lv_index = 1;
    for ( ; ( (autoB2B72156_ai >= 0 && lv_index <= autoB2B72156_ae) || (autoB2B72156_ai <= 0 && lv_index >= autoB2B72156_ae) ) ; lv_index += autoB2B72156_ai ) {
        libSwaC_gf_CreateObjectivePing(true, RegionGetCenter(lv_areas[lv_index]), StringExternal("Param/Value/B6D74BF8"));
        gv_hunterRescuePings[lv_index] = PingLastCreated();
        UnitGroupLoopBegin(gv_hunterRescueGroups[lv_index]);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            libNtve_gf_ShareVisionofUnit(UnitGroupLoopCurrent(), true, gv_pLAYER_01_USER);
        }
        UnitGroupLoopEnd();
        Wait(0.2, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HunterCreatePingsForSurvivors_Init () {
    gt_HunterCreatePingsForSurvivors = TriggerCreate("gt_HunterCreatePingsForSurvivors_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hunter - Rescue 1
//--------------------------------------------------------------------------------------------------
bool gt_HunterRescue1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_group;

    // Variable Initialization
    lv_group = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_HunterRescueBanelings(EventUnitRegion());
    gv_backupPoint = PointFromId(1152);
    PingDestroy(gv_hunterRescuePings[1]);
    gv_hunterBanelingCollected = 1;
    TriggerExecute(gt_ObjectiveCollectLocalBanelingsUpdateQ, true, false);
    Wait(1.0, c_timeGame);
    TimerStart(gv_warningTimer, 0.0, false, c_timeAI);
    TimerStart(gv_lavaTimer, 8.0, false, c_timeAI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HunterRescue1_Init () {
    gt_HunterRescue1 = TriggerCreate("gt_HunterRescue1_Func");
    TriggerAddEventUnitRegion(gt_HunterRescue1, null, RegionFromId(8), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hunter - Lava Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_HunterLavaWarningQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Baneling|Line00039", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HunterLavaWarningQ_Init () {
    gt_HunterLavaWarningQ = TriggerCreate("gt_HunterLavaWarningQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hunter - Medivac 1 Coming In Q
//--------------------------------------------------------------------------------------------------
bool gt_HunterMedivac1ComingInQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_group;

    // Variable Initialization
    lv_group = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(30));
    gv_hunterMedivacDrop1Revealer = VisRevealerLastCreated();
    libNtve_gf_UnitCreateFacingPoint(1, "Medivac", 0, gv_pLAYER_02_DOMINION, PointFromId(134), PointFromId(138));
    gv_hunterMedivac1 = UnitLastCreated();
    UnitCargoCreate(UnitLastCreated(), "Marine", 5);
    gv_hunterMedivacGroup1 = UnitCargoLastCreatedGroup();
    UnitIssueOrder(gv_hunterMedivac1, OrderTargetingPoint(AbilityCommand("MedivacTransport", 2), PointFromId(138)), c_orderQueueReplace);
    while (!((gv_lavaSafeTransmissionQueued == true))) {
        Wait(0.25, c_timeGame);
    }
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Baneling|Line00040", c_transmissionDurationAdd, 0.0, false, 1, 0);
    gv_hunterMedivac1Transmission = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    Wait(20.0, c_timeGame);
    TriggerExecute(gt_HunterMedivac1Leave, true, false);
    Wait(20.0, c_timeGame);
    UnitRemove(gv_hunterMedivac1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HunterMedivac1ComingInQ_Init () {
    gt_HunterMedivac1ComingInQ = TriggerCreate("gt_HunterMedivac1ComingInQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hunter - Medivac Drop 1 Killed Q
//--------------------------------------------------------------------------------------------------
bool gt_HunterMedivacDrop1KilledQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_first;

    // Variable Initialization
    lv_first = true;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_hunterMedivacGroup1, EventUnit()) == true))) {
            return false;
        }

        if (!((gv_hunterMedivac1Left == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_HunterMedivac1Leave, true, false);
    TransmissionClear(gv_hunterMedivac1Transmission);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Baneling|Line00035", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    VisRevealerDestroy(gv_hunterMedivacDrop1Revealer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HunterMedivacDrop1KilledQ_Init () {
    gt_HunterMedivacDrop1KilledQ = TriggerCreate("gt_HunterMedivacDrop1KilledQ_Func");
    TriggerAddEventUnitDied(gt_HunterMedivacDrop1KilledQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hunter - Medivac 1 Leave
//--------------------------------------------------------------------------------------------------
bool gt_HunterMedivac1Leave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_first;

    // Variable Initialization
    lv_first = true;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_hunterMedivac1Left == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(gv_hunterMedivac1, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitGroupLoopBegin(gv_hunterMedivacGroup1);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_UnitIsVisibleToPlayer(UnitGroupLoopCurrent(), gv_pLAYER_01_USER) == true) && (UnitIsAlive(UnitGroupLoopCurrent()) == true)) {
            if ((lv_first == true)) {
                lv_first = false;
                UnitIssueOrder(gv_hunterMedivac1, OrderTargetingUnit(AbilityCommand("MedivacTransport", 0), UnitGroupLoopCurrent()), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(gv_hunterMedivac1, OrderTargetingUnit(AbilityCommand("MedivacTransport", 0), UnitGroupLoopCurrent()), c_orderQueueAddToEnd);
            }
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    if ((lv_first == true)) {
        UnitIssueOrder(gv_hunterMedivac1, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(39)), c_orderQueueReplace);
    }
    else {
        UnitIssueOrder(gv_hunterMedivac1, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(39)), c_orderQueueAddToEnd);
    }
    gv_hunterMedivac1Left = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HunterMedivac1Leave_Init () {
    gt_HunterMedivac1Leave = TriggerCreate("gt_HunterMedivac1Leave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hunter - Dominion They are jumping Q
//--------------------------------------------------------------------------------------------------
bool gt_HunterDominionTheyarejumpingQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Baneling|Line00032", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HunterDominionTheyarejumpingQ_Init () {
    gt_HunterDominionTheyarejumpingQ = TriggerCreate("gt_HunterDominionTheyarejumpingQ_Func");
    TriggerAddEventUnitAcquiredTarget(gt_HunterDominionTheyarejumpingQ, UnitRefFromUnit(UnitFromId(233)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hunter - Rescue 2
//--------------------------------------------------------------------------------------------------
bool gt_HunterRescue2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_group;

    // Variable Initialization
    lv_group = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_HunterRescueBanelings(EventUnitRegion());
    gv_backupPoint = PointFromId(1153);
    PingDestroy(gv_hunterRescuePings[2]);
    gv_hunterBanelingCollected = 2;
    TriggerExecute(gt_ObjectiveCollectLocalBanelingsUpdateQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HunterRescue2_Init () {
    gt_HunterRescue2 = TriggerCreate("gt_HunterRescue2_Func");
    TriggerAddEventUnitRegion(gt_HunterRescue2, null, RegionFromId(9), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hunter - Miner Run Away
//--------------------------------------------------------------------------------------------------
bool gt_HunterMinerRunAway_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_group;

    // Variable Initialization
    lv_group = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(16), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 1), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_HunterMinerEvacuateQ, true, false);
    UnitGroupAdd(lv_group, UnitFromId(30));
    UnitGroupAdd(lv_group, UnitFromId(34));
    UnitGroupAdd(lv_group, UnitFromId(38));
    UnitGroupLoopBegin(lv_group);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), c_animNameDefault);
    }
    UnitGroupLoopEnd();
    UnitGroupIssueOrder(lv_group, OrderTargetingUnit(null, UnitFromId(14)), c_orderQueueReplace);
    Wait(3.0, c_timeGame);
    UnitIssueOrder(UnitFromId(14), Order(AbilityCommand("HerculesLiftOff", 0)), c_orderQueueReplace);
    Wait(3.0, c_timeGame);
    UnitIssueOrder(UnitFromId(14), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(39)), c_orderQueueReplace);
    Wait(25.0, c_timeGame);
    UnitRemove(UnitFromId(14));
    UnitGroupLoopBegin(lv_group);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HunterMinerRunAway_Init () {
    gt_HunterMinerRunAway = TriggerCreate("gt_HunterMinerRunAway_Func");
    TriggerAddEventTimePeriodic(gt_HunterMinerRunAway, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hunter - Miner Evacuate Q
//--------------------------------------------------------------------------------------------------
bool gt_HunterMinerEvacuateQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Baneling|Line00063", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HunterMinerEvacuateQ_Init () {
    gt_HunterMinerEvacuateQ = TriggerCreate("gt_HunterMinerEvacuateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hunter - Start Mid Cinematic Q
//--------------------------------------------------------------------------------------------------
bool gt_HunterStartMidCinematicQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/E15ACA00"));
    TriggerExecute(gt_HunterMidQ, true, true);
    gv_backupSuppressed = false;
    TriggerQueueEnter();
    Wait(3.0, c_timeReal);
    TriggerExecute(gt_ObjectiveWipeOutTerransCreate, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HunterStartMidCinematicQ_Init () {
    gt_HunterStartMidCinematicQ = TriggerCreate("gt_HunterStartMidCinematicQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hunter - Medivac 2 Coming In
//--------------------------------------------------------------------------------------------------
bool gt_HunterMedivac2ComingIn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_medivac1;
    unit lv_medivac2;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(27), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 1), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_UnitCreateFacingPoint(1, "Medivac", 0, gv_pLAYER_02_DOMINION, PointFromId(133), PointFromId(138));
    lv_medivac1 = UnitLastCreated();
    UnitCargoCreate(UnitLastCreated(), "Marine", 5);
    gv_hunterMedivacGroup2 = UnitCargoLastCreatedGroup();
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("MedivacTransport", 2), PointFromId(166)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(39)), c_orderQueueAddToEnd);
    libNtve_gf_UnitCreateFacingPoint(1, "Medivac", 0, gv_pLAYER_02_DOMINION, PointFromId(132), PointFromId(138));
    lv_medivac2 = UnitLastCreated();
    UnitCargoCreate(UnitLastCreated(), "Marine", 5);
    gv_hunterMedivacGroup2 = UnitCargoLastCreatedGroup();
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("MedivacTransport", 2), PointFromId(1)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(39)), c_orderQueueAddToEnd);
    TriggerEnable(gt_HunterMedivacDrop2AttackedQ, true);
    Wait(20.0, c_timeGame);
    UnitRemove(lv_medivac1);
    UnitRemove(lv_medivac2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HunterMedivac2ComingIn_Init () {
    gt_HunterMedivac2ComingIn = TriggerCreate("gt_HunterMedivac2ComingIn_Func");
    TriggerAddEventTimePeriodic(gt_HunterMedivac2ComingIn, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hunter - Medivac Drop 2 Attacked Q
//--------------------------------------------------------------------------------------------------
bool gt_HunterMedivacDrop2AttackedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_hunterMedivacGroup2, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(EventUnit(), "zEvoMission_Baneling|Line00033", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HunterMedivacDrop2AttackedQ_Init () {
    gt_HunterMedivacDrop2AttackedQ = TriggerCreate("gt_HunterMedivacDrop2AttackedQ_Func");
    TriggerEnable(gt_HunterMedivacDrop2AttackedQ, false);
    TriggerAddEventUnitAcquiredTarget(gt_HunterMedivacDrop2AttackedQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hunter - Rescue 3
//--------------------------------------------------------------------------------------------------
bool gt_HunterRescue3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_group;

    // Variable Initialization
    lv_group = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_HunterRescueBanelings(EventUnitRegion());
    gv_backupPoint = PointFromId(1154);
    PingDestroy(gv_hunterRescuePings[3]);
    gv_hunterBanelingCollected = 3;
    TriggerExecute(gt_ObjectiveCollectLocalBanelingsUpdateQ, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HunterRescue3_Init () {
    gt_HunterRescue3 = TriggerCreate("gt_HunterRescue3_Func");
    TriggerAddEventUnitRegion(gt_HunterRescue3, null, RegionFromId(10), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hunter - Warning Attack From Front Q
//--------------------------------------------------------------------------------------------------
bool gt_HunterWarningAttackFromFrontQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 1), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_gameOver == false)) {
        libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Baneling|Line00065", c_transmissionDurationAdd, 0.0, true, 1, 0);
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HunterWarningAttackFromFrontQ_Init () {
    gt_HunterWarningAttackFromFrontQ = TriggerCreate("gt_HunterWarningAttackFromFrontQ_Func");
    TriggerAddEventTimePeriodic(gt_HunterWarningAttackFromFrontQ, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hunter - Where Do They Come From Q
//--------------------------------------------------------------------------------------------------
bool gt_HunterWhereDoTheyComeFromQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(12)) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(EventUnit(), "zEvoMission_Baneling|Line00066", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HunterWhereDoTheyComeFromQ_Init () {
    gt_HunterWhereDoTheyComeFromQ = TriggerCreate("gt_HunterWhereDoTheyComeFromQ_Func");
    TriggerEnable(gt_HunterWhereDoTheyComeFromQ, false);
    TriggerAddEventUnitAcquiredTarget(gt_HunterWhereDoTheyComeFromQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Splitter - Victory Wipe Out Protoss Completed
//--------------------------------------------------------------------------------------------------
bool gt_SplitterVictoryWipeOutProtossCompleted_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyProtossColossiComplete, true, false);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_SplitterHunterTransitionQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SplitterVictoryWipeOutProtossCompleted_Init () {
    gt_SplitterVictoryWipeOutProtossCompleted = TriggerCreate("gt_SplitterVictoryWipeOutProtossCompleted_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hunter - Victory Destory Planetary Fortress Completed
//--------------------------------------------------------------------------------------------------
bool gt_HunterVictoryDestoryPlanetaryFortressCompleted_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_VictorySequenceQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HunterVictoryDestoryPlanetaryFortressCompleted_Init () {
    gt_HunterVictoryDestoryPlanetaryFortressCompleted = TriggerCreate("gt_HunterVictoryDestoryPlanetaryFortressCompleted_Func");
    TriggerEnable(gt_HunterVictoryDestoryPlanetaryFortressCompleted, false);
    TriggerAddEventUnitDied(gt_HunterVictoryDestoryPlanetaryFortressCompleted, UnitRefFromUnit(UnitFromId(147)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence Q
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequenceQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    CameraPan(gv_pLAYER_01_USER, CameraInfoGetTarget(CameraInfoFromId(316)), 1.5, -1, 10.0, true);
    TriggerExecute(gt_ObjectiveWipeOutTerransComplete, true, false);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeGame);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Baneling|Line00038", c_transmissionDurationAdd, 0.0, true, 1, 0);
    TriggerExecute(gt_VictoryMusicCue, true, false);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    ObjectiveDestroyAll(PlayerGroupAll());
    CameraSetValue(gv_pLAYER_01_USER, c_cameraValueDistance, (CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance) + 40.0), 2.0, -1, 10.0);
    CameraSetValue(gv_pLAYER_01_USER, c_cameraValuePitch, CameraInfoGetValue(CameraInfoDefault(), c_cameraValuePitch), 2.0, -1, 10.0);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 2.0);
    CinematicFade(false, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerQueueExit();
    gf_TurnOffLava(0.0);
    libSwaC_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequenceQ_Init () {
    gt_VictorySequenceQ = TriggerCreate("gt_VictorySequenceQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Music Cue
//--------------------------------------------------------------------------------------------------
bool gt_VictoryMusicCue_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZEvoMusicMain", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryMusicCue_Init () {
    gt_VictoryMusicCue = TriggerCreate("gt_VictoryMusicCue_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_TurnOffLava(0.0);
    libSwaC_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_VictoryCheat, false);
    TriggerEnable(gt_DefeatCheat, false);
    TriggerEnable(gt_Defeat, false);
    gv_gameOver = true;
    libSwaC_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_VictoryCheat, false);
    TriggerEnable(gt_DefeatCheat, false);
    TriggerEnable(gt_Victory, false);
    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Mission Help Q
//--------------------------------------------------------------------------------------------------
bool gt_TipMissionHelpQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_DisplayMissionTip(StringExternal("Param/Value/8B6D8CA2"));
    Wait(libSwaC_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipMissionHelpQ_Init () {
    gt_TipMissionHelpQ = TriggerCreate("gt_TipMissionHelpQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Minerals
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveMinerals_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveMinerals_Init () {
    gt_AIGiveMinerals = TriggerCreate("gt_AIGiveMinerals_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_pLAYER_02_DOMINION, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Gas
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveGas_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveGas_Init () {
    gt_AIGiveGas = TriggerCreate("gt_AIGiveGas_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_pLAYER_02_DOMINION, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Mitoscarab Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillMitoscarabCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZEvolutionBanelingA01");
    gv_splitterObjectiveKillMitoscarab = ObjectiveLastCreated();
    libSwaC_gf_SetMissionObjectiveProgress2("ZEvolutionBanelingA01", 0, true, null, true);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    libSwaC_gf_CreateObjectivePing(true, UnitGetPosition(UnitFromId(186)), StringExternal("Param/Value/48CB697B"));
    gv_splitterMitoscarabPing1 = PingLastCreated();
    PingSetUnit(gv_splitterMitoscarabPing1, UnitFromId(186));
    Wait(0.5, c_timeGame);
    libSwaC_gf_CreateObjectivePing(true, UnitGetPosition(UnitFromId(342)), StringExternal("Param/Value/3420CB44"));
    gv_splitterMitoscarabPing2 = PingLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillMitoscarabCreate_Init () {
    gt_ObjectiveKillMitoscarabCreate = TriggerCreate("gt_ObjectiveKillMitoscarabCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Mitoscarab Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillMitoscarabUpdate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveKillMitoscarabCreate, true, false);
    libSwaC_gf_SetMissionObjectiveProgress2("ZEvolutionBanelingA01", gv_splitterDNACollected, true, null, true);
    if ((gv_splitterDNACollected == 6)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_ObjectiveKillMitoscarabComplete, true, true);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillMitoscarabUpdate_Init () {
    gt_ObjectiveKillMitoscarabUpdate = TriggerCreate("gt_ObjectiveKillMitoscarabUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Mitoscarab Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillMitoscarabComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_backupSuppressed = true;
    PingDestroy(gv_splitterMitoscarabPing1);
    TriggerExecute(gt_ObjectiveKillMitoscarabCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZEvolutionBanelingA01", 2);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_SplitterFirstStageEndQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillMitoscarabComplete_Init () {
    gt_ObjectiveKillMitoscarabComplete = TriggerCreate("gt_ObjectiveKillMitoscarabComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Protoss Colossi Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyProtossColossiCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZEvolutionBanelingA02");
    gv_splitterObjectiveDestroyProtossColossi = ObjectiveLastCreated();
    libSwaC_gf_SetMissionObjectiveProgress2("ZEvolutionBanelingA02", gv_splitterColossiDestroyed, true, null, true);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    gf_ColossusPings(UnitGroup("Colossus", gv_pLAYER_03_PROTOSS, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    gf_ColossusPings(UnitGroup("Colossus", gv_pLAYER_03_PROTOSS, RegionFromId(22), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    gf_ColossusPings(UnitGroup("Colossus", gv_pLAYER_03_PROTOSS, RegionFromId(23), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyProtossColossiCreate_Init () {
    gt_ObjectiveDestroyProtossColossiCreate = TriggerCreate("gt_ObjectiveDestroyProtossColossiCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Protoss Colossi Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyProtossColossiUpdate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Colossus"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveDestroyProtossColossiCreate, true, false);
    gv_splitterColossiDestroyed += 1;
    libSwaC_gf_SetMissionObjectiveProgress2("ZEvolutionBanelingA02", gv_splitterColossiDestroyed, true, null, true);
    SoundPlay(SoundLink("UI_ResourcePickup", 0), PlayerGroupAll(), 100.0, 0.0);
    if ((gv_splitterColossiDestroyed == 4)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_SplitterVictoryWipeOutProtossCompleted, true, true);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyProtossColossiUpdate_Init () {
    gt_ObjectiveDestroyProtossColossiUpdate = TriggerCreate("gt_ObjectiveDestroyProtossColossiUpdate_Func");
    TriggerAddEventUnitDied(gt_ObjectiveDestroyProtossColossiUpdate, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Protoss Colossi Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyProtossColossiComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_backupSuppressed = true;
    TriggerExecute(gt_ObjectiveDestroyProtossColossiCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZEvolutionBanelingA02", 2);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyProtossColossiComplete_Init () {
    gt_ObjectiveDestroyProtossColossiComplete = TriggerCreate("gt_ObjectiveDestroyProtossColossiComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Collect Local Banelings Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCollectLocalBanelingsCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZEvolutionBanelingB01");
    gv_hunterObjectiveCollectLocalBanelings = ObjectiveLastCreated();
    libSwaC_gf_SetMissionObjectiveProgress2("ZEvolutionBanelingB01", gv_hunterBanelingCollected, true, null, true);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCollectLocalBanelingsCreate_Init () {
    gt_ObjectiveCollectLocalBanelingsCreate = TriggerCreate("gt_ObjectiveCollectLocalBanelingsCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Collect Local Banelings Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCollectLocalBanelingsComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_backupSuppressed = true;
    TriggerExecute(gt_ObjectiveCollectLocalBanelingsCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZEvolutionBanelingB01", 2);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeGame);
    Wait(1.0, c_timeGame);
    TriggerExecute(gt_HunterStartMidCinematicQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCollectLocalBanelingsComplete_Init () {
    gt_ObjectiveCollectLocalBanelingsComplete = TriggerCreate("gt_ObjectiveCollectLocalBanelingsComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Collect Local Banelings Update Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCollectLocalBanelingsUpdateQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveCollectLocalBanelingsCreate, true, false);
    libSwaC_gf_SetMissionObjectiveProgress2("ZEvolutionBanelingB01", MinI(gv_hunterBanelingCollected, gv_hunterBanelingCollectRequired), true, null, true);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    if ((gv_hunterBanelingCollected >= gv_hunterBanelingCollectRequired)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerQueueEnter();
        TriggerExecute(gt_ObjectiveCollectLocalBanelingsComplete, true, true);
        TriggerQueueExit();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCollectLocalBanelingsUpdateQ_Init () {
    gt_ObjectiveCollectLocalBanelingsUpdateQ = TriggerCreate("gt_ObjectiveCollectLocalBanelingsUpdateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Wipe Out Terrans Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveWipeOutTerransCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZEvolutionBanelingB02");
    gv_hunterObjectiveWipeOutTerrans = ObjectiveLastCreated();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    libSwaC_gf_CreateObjectivePing(true, UnitGetPosition(UnitFromId(147)), StringExternal("Param/Value/F01BFFFF"));
    gv_hunterDominonBasePing = PingLastCreated();
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(28), 7.0, true);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(32), 7.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveWipeOutTerransCreate_Init () {
    gt_ObjectiveWipeOutTerransCreate = TriggerCreate("gt_ObjectiveWipeOutTerransCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Wipe Out Terrans Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveWipeOutTerransComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_backupSuppressed = true;
    TriggerExecute(gt_ObjectiveCollectLocalBanelingsComplete, true, false);
    TriggerExecute(gt_ObjectiveWipeOutTerransCreate, true, false);
    PingDestroy(gv_hunterDominonBasePing);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZEvolutionBanelingB02", 2);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveWipeOutTerransComplete_Init () {
    gt_ObjectiveWipeOutTerransComplete = TriggerCreate("gt_ObjectiveWipeOutTerransComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Splitter - Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_SplitterIntroQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_SplitterIntroSetup, true, true);
    TriggerExecute(gt_SplitterIntroCinematic, true, true);
    TriggerExecute(gt_SplitterIntroCinematicEnd, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SplitterIntroQ_Init () {
    gt_SplitterIntroQ = TriggerCreate("gt_SplitterIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Splitter - Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_SplitterIntroSetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UnitPauseAll(true);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    UnitGroupAdd(gv_cinematicHiddenUnits, UnitFromId(342));
    UnitGroupAddUnitGroup(gv_cinematicHiddenUnits, gv_splitterStartGroup);
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsAtPoint2(1, "MitosaurusB", c_unitCreateIgnorePlacement, gv_pLAYER_06_HOSTILE, PointFromId(303));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    gv_splitterIntroMitoscarab = UnitLastCreated();
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), 0, 1);
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), 1, 4);
    libNtve_gf_PauseUnit(UnitFromId(335), false);
    UnitSetOwner(UnitFromId(335), gv_pLAYER_04_ZERG, true);
    gv_splitterIntroNydus = UnitFromId(335);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SplitterIntroSetup_Init () {
    gt_SplitterIntroSetup = TriggerCreate("gt_SplitterIntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Splitter - Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_SplitterIntroCinematic_Func (bool testConds, bool runActions) {
    int auto72F51DB9_n;
    int auto72F51DB9_i;

    // Variable Declarations
    unit lv_introNydus;
    unitgroup lv_mitoscarabHatches;

    // Variable Initialization
    lv_mitoscarabHatches = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "Zealot", c_unitCreateIgnorePlacement, gv_pLAYER_03_PROTOSS, PointFromId(304));
    UnitGroupAdd(gv_splitterIntroZealots, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Zealot", c_unitCreateIgnorePlacement, gv_pLAYER_03_PROTOSS, PointFromId(305));
    UnitGroupAdd(gv_splitterIntroZealots, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Zealot", c_unitCreateIgnorePlacement, gv_pLAYER_03_PROTOSS, PointFromId(306));
    UnitGroupAdd(gv_splitterIntroZealots, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Zealot", c_unitCreateIgnorePlacement, gv_pLAYER_03_PROTOSS, PointFromId(307));
    UnitGroupAdd(gv_splitterIntroZealots, UnitLastCreated());
    UnitGroupAddUnitGroup(gv_cinematicTempUnits, gv_splitterIntroZealots);
    gv_cinematicCompleted = false;
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    libSwaC_gf_PreparePlanetPortraitZoomIn("EvolutionPlanetBanelingA", CameraInfoFromId(301), "CharDunes");
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(0);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_Baneling|Line00012", c_transmissionDurationAdd, 0.0, false, 1, 0);
    TransmissionWait(TransmissionLastSent(), 2.0);
    libSwaC_gf_ZoomInPlanetPortrait();
    libSwaC_gf_HidePlanetPortrait();
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Meinhoff", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    Wait(1.0, c_timeGame);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_Baneling|Line00024", c_transmissionDurationAdd, 0.0, false, 1, 0);
    TransmissionWait(TransmissionLastSent(), 3.0);
    UnitGroupIssueOrder(gv_splitterIntroZealots, OrderTargetingUnit(AbilityCommand("attack", 0), gv_splitterIntroMitoscarab), c_orderQueueReplace);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(302), 8.0, -1, 10, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(2.0, c_timeGame);
    UnitGroupLoopBegin(gv_splitterIntroZealots);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropShieldsPercent, c_unitPropCurrent) < 90.0)) {
            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, 1.0);
            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropShields, 0.0);
            break;
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    Wait(1.0, c_timeGame);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_Baneling|Line00016", c_transmissionDurationAdd, 0.0, false, 1, 0);
    Wait(2.0, c_timeGame);
    UnitKill(gv_splitterIntroMitoscarab);
    while (true) {
        Wait(0.1, c_timeGame);
        lv_mitoscarabHatches = UnitGroup("MitosaurusC", gv_pLAYER_06_HOSTILE, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        if ((libNtve_gf_UnitGroupIsDead(lv_mitoscarabHatches) == false)) {
            break;
        }
        else {
        }
    }
    UnitGroupAddUnitGroup(gv_cinematicTempUnits, lv_mitoscarabHatches);
    UnitGroupLoopBegin(lv_mitoscarabHatches);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ChangeUnitDamage(UnitGroupLoopCurrent(), 0, 1);
        libNtve_gf_ChangeUnitDamage(UnitGroupLoopCurrent(), 1, 4);
    }
    UnitGroupLoopEnd();
    auto72F51DB9_n = 5;
    for (auto72F51DB9_i = 1; auto72F51DB9_i <= auto72F51DB9_n; auto72F51DB9_i += 1) {
        Wait(0.5, c_timeGame);
        UnitGroupIssueOrder(lv_mitoscarabHatches, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupUnit(gv_splitterIntroZealots, 1)), c_orderQueueReplace);
    }
    UnitSetPropertyFixed(UnitGroupUnit(gv_splitterIntroZealots, 1), c_unitPropLifePercent, 20.0);
    UnitSetPropertyFixed(UnitGroupUnit(gv_splitterIntroZealots, 1), c_unitPropShields, 0.0);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(12);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(308), 0.0, -1, 10, true);
    SoundPlay(SoundLink("NydusWorm_Birth", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_splitterIntroNydusBirthSound = SoundLastPlayed();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(335)), c_animNameDefault, "Birth 02", c_animFlagFullMatch | c_animFlagNonLooping, 0.0);
    CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 0.5, 1.0, 4.0);
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitCargoCreate(gv_splitterIntroNydus, "Baneling", UnitGroupCount(gv_splitterStartGroup, c_unitCountAlive));
    gv_splitterIntroBanelings = UnitCargoLastCreatedGroup();
    Wait(3.8, c_timeGame);
    UnitGroupLoopBegin(UnitCargoLastCreatedGroup());
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetOwner(UnitGroupLoopCurrent(), gv_pLAYER_01_USER, true);
    }
    UnitGroupLoopEnd();
    UnitIssueOrder(gv_splitterIntroNydus, OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(800)), c_orderQueueReplace);
    UnitIssueOrder(gv_splitterIntroNydus, Order(AbilityCommand("GreaterNydusWormTransport", 1)), c_orderQueueAddToEnd);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(805), 3.0, -1, 10, true);
    Wait(2.0, c_timeGame);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(0);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_Baneling|Line00025", c_transmissionDurationAdd, 0.0, true, 1, 0);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SplitterIntroCinematic_Init () {
    gt_SplitterIntroCinematic = TriggerCreate("gt_SplitterIntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Splitter - Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_SplitterIntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        TriggerExecute(gt_SplitterIntroCleanupFinished, true, true);
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
        TriggerExecute(gt_SplitterIntroCleanupCanceled, true, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SplitterIntroCinematicEnd_Init () {
    gt_SplitterIntroCinematicEnd = TriggerCreate("gt_SplitterIntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Splitter - Intro Cleanup Canceled
//--------------------------------------------------------------------------------------------------
bool gt_SplitterIntroCleanupCanceled_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CameraShakeStop(gv_pLAYER_01_USER);
    UnitGroupAddUnitGroup(gv_cinematicTempUnits, gv_splitterIntroBanelings);
    UnitGroupLoopBegin(gv_cinematicTempUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("MitosaurusC", gv_pLAYER_06_HOSTILE, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_splitterUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Meinhoff", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    SoundStop(gv_splitterIntroNydusBirthSound, true);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    libSwaC_gf_HidePlanetPortrait();
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitGroupSelect(gv_splitterStartGroup, gv_pLAYER_01_USER, true);
    lv_fadeDuration = 1.0;
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10.0, false);
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(770)), lv_fadeDuration);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    gv_inCinematic = false;
    Wait(lv_fadeDuration, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SplitterIntroCleanupCanceled_Init () {
    gt_SplitterIntroCleanupCanceled = TriggerCreate("gt_SplitterIntroCleanupCanceled_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Splitter - Intro Cleanup Finished
//--------------------------------------------------------------------------------------------------
bool gt_SplitterIntroCleanupFinished_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAddUnitGroup(gv_cinematicTempUnits, gv_splitterStartGroup);
    UnitGroupLoopBegin(gv_cinematicTempUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("MitosaurusC", gv_pLAYER_06_HOSTILE, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_splitterUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    gv_splitterStartGroup = gv_splitterIntroBanelings;
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    libSwaC_gf_HidePlanetPortrait();
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitGroupSelect(gv_splitterStartGroup, gv_pLAYER_01_USER, true);
    lv_fadeDuration = 1.5;
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(770), lv_fadeDuration, -1, 10.0, true);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    gv_inCinematic = false;
    Wait(lv_fadeDuration, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SplitterIntroCleanupFinished_Init () {
    gt_SplitterIntroCleanupFinished = TriggerCreate("gt_SplitterIntroCleanupFinished_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Splitter - Mid Q
//--------------------------------------------------------------------------------------------------
bool gt_SplitterMidQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_SplitterMidSetup, true, true);
    TriggerExecute(gt_SplitterMidCinematic, true, true);
    TriggerExecute(gt_SplitterMidCinematicEnd, true, true);
    TriggerExecute(gt_SplitterMidCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SplitterMidQ_Init () {
    gt_SplitterMidQ = TriggerCreate("gt_SplitterMidQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Splitter - Mid Setup
//--------------------------------------------------------------------------------------------------
bool gt_SplitterMidSetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    unit lv_indexBaneling;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    gv_inCinematic = true;
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    CameraSave(gv_pLAYER_01_USER);
    libNtve_gf_StoreUnitSelection(gv_pLAYER_01_USER, 0);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    libNtve_gf_RemoveDeathModelsinRegion(RegionFromId(6));
    UnitPauseAll(true);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Baneling", "BanelingBurrowed", "", gv_pLAYER_01_USER, -1, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitCargoGroup(UnitFromId(335)));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitRemove(UnitFromId(272));
    UnitRemove(UnitFromId(802));
    UnitRemove(UnitFromId(273));
    UnitCreate(1, "GreaterNydusWorm", c_unitCreateIgnorePlacement, gv_pLAYER_04_ZERG, PointFromId(486), 270.0);
    gv_splitterMidNydus = UnitLastCreated();
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    libNtve_gf_ShareVisionofUnit(gv_splitterMidNydus, true, gv_pLAYER_01_USER);
    UnitGroupAdd(gv_splitterNydusWorms, gv_splitterMidNydus);
    libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SplitterMidSetup_Init () {
    gt_SplitterMidSetup = TriggerCreate("gt_SplitterMidSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Splitter - Mid Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_SplitterMidCinematic_Func (bool testConds, bool runActions) {
    int auto1B694F47_n;
    int auto1B694F47_i;

    // Variable Declarations
    unitgroup lv_newBanelingGroup;
    int lv_index;
    unit lv_indexBaneling;

    // Variable Initialization
    lv_newBanelingGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(803), 0.0, -1, 10, true);
    gv_cinematicCompleted = false;
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_ShowHideUnit(gv_splitterMidNydus, true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_splitterMidNydus), "NydusCanelBirth", "Birth 02", c_animFlagFullMatch | c_animFlagNonLooping, 0.0);
    CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 0.5, 1.0, 4.0);
    UnitCargoCreate(gv_splitterMidNydus, "Baneling", 24);
    gv_splitterMidBanelings = UnitCargoLastCreatedGroup();
    UnitGroupAddUnitGroup(gv_cinematicTempUnits, UnitCargoLastCreatedGroup());
    Wait(3.8, c_timeGame);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_splitterMidNydus), "NydusCanelBirth");
    UnitGroupLoopBegin(gv_splitterMidBanelings);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetOwner(UnitGroupLoopCurrent(), gv_pLAYER_01_USER, true);
    }
    UnitGroupLoopEnd();
    UnitIssueOrder(gv_splitterMidNydus, OrderTargetingPoint(AbilityCommand("Rally", 0), RegionGetCenter(RegionFromId(15))), c_orderQueueReplace);
    UnitIssueOrder(gv_splitterMidNydus, Order(AbilityCommand("GreaterNydusWormTransport", 1)), c_orderQueueAddToEnd);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(140), 3.0, -1, 10, true);
    Wait(2.0, c_timeGame);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(0);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Baneling|Line00021", c_transmissionDurationAdd, 0.0, false, 1, 0);
    Wait(1.0, c_timeGame);
    lv_index = 0;
    auto1B694F47_n = UnitGroupCount(gv_splitterMidBanelings, c_unitCountAlive);
    for (auto1B694F47_i = 1; auto1B694F47_i <= auto1B694F47_n; auto1B694F47_i += 1) {
        lv_indexBaneling = UnitGroupRandomUnit(gv_splitterMidBanelings, c_unitCountAlive);
        UnitGroupRemove(gv_splitterMidBanelings, lv_indexBaneling);
        UnitIssueOrder(lv_indexBaneling, Order(AbilityCommand("MorphBanelingToSplitterling", 0)), c_orderQueueReplace);
        lv_index += 1;
        if ((ModI(lv_index, 2) == 1)) {
            Wait(0.1, c_timeGame);
        }
        else {
        }
    }
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Baneling|Line00022", c_transmissionDurationAdd, 0.0, true, 1, 0);
    TriggerExecute(gt_SplitterMusicCue, true, false);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Baneling|Line00056", c_transmissionDurationAdd, 0.0, true, 1, 0);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SplitterMidCinematic_Init () {
    gt_SplitterMidCinematic = TriggerCreate("gt_SplitterMidCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Splitter - Music Cue
//--------------------------------------------------------------------------------------------------
bool gt_SplitterMusicCue_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_cinematicStingerSound = SoundLastPlayed();
    SoundPlay(SoundLink("ZEvoMusicStinger", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZEvoMusicAlt", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SplitterMusicCue_Init () {
    gt_SplitterMusicCue = TriggerCreate("gt_SplitterMusicCue_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Splitter - Mid Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_SplitterMidCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SplitterMidCinematicEnd_Init () {
    gt_SplitterMidCinematicEnd = TriggerCreate("gt_SplitterMidCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Splitter - Mid Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_SplitterMidCleanup_Func (bool testConds, bool runActions) {
    int autoB9ADD129_n;
    int autoB9ADD129_i;

    // Variable Declarations
    fixed lv_fadeDuration;
    unitgroup lv_banelings;

    // Variable Initialization
    lv_banelings = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    CameraShakeStop(gv_pLAYER_01_USER);
    UnitGroupLoopBegin(gv_cinematicTempUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    SoundStop(gv_cinematicStingerSound, true);
    if ((gv_cinematicCompleted == false)) {
        UnitGroupLoopBegin(UnitGroup("Baneling", c_playerAny, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitRemove(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitGroup("HotSSplitterlingBig", c_playerAny, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitRemove(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        autoB9ADD129_n = 24;
        for (autoB9ADD129_i = 1; autoB9ADD129_i <= autoB9ADD129_n; autoB9ADD129_i += 1) {
            UnitCreate(1, "HotSSplitterlingBig", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(15)), libNtve_gf_RandomAngle());
            UnitGroupAdd(lv_banelings, UnitLastCreated());
        }
    }
    else {
        UnitGroupLoopBegin(UnitGroup("HotSSplitterlingBig", c_playerAny, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitGroupAdd(lv_banelings, UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
    }
    libNtve_gf_ShowHideUnit(gv_splitterMidNydus, true);
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitPauseAll(false);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    libSwaC_gf_EnableCampaignTechUnit(true, "BanelingA", gv_pLAYER_01_USER);
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitGroupSelect(lv_banelings, gv_pLAYER_01_USER, true);
    RegionPlayableMapSet(RegionFromId(6));
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), lv_fadeDuration, -1, 10.0, false);
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
        libNtve_gf_GlobalCinematicSetting(false);
    }
    else {
        lv_fadeDuration = 1.0;
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZEvoMusicAlt", c_soundtrackCueAny, c_soundtrackIndexAny, true);
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10.0, false);
        libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(140)), lv_fadeDuration);
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
        libNtve_gf_GlobalCinematicSetting(false);
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    }
    gv_inCinematic = false;
    Wait(lv_fadeDuration, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SplitterMidCleanup_Init () {
    gt_SplitterMidCleanup = TriggerCreate("gt_SplitterMidCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hunter - Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_HunterIntroQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_HunterIntroMusicCue, true, false);
    TriggerExecute(gt_HunterIntroSetup, true, true);
    TriggerExecute(gt_HunterIntroCinematic, true, true);
    TriggerExecute(gt_HunterIntroCinematicEnd, true, true);
    TriggerExecute(gt_HunterIntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HunterIntroQ_Init () {
    gt_HunterIntroQ = TriggerCreate("gt_HunterIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hunter - Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_HunterIntroSetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    TriggerExecute(gt_HunterInit, true, false);
    RegionPlayableMapSet(RegionEntireMap());
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Space01", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UnitClearSelection(gv_pLAYER_01_USER);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    UnitGroupAddUnitGroup(gv_cinematicTempUnits, UnitGroup("HotSHunter", gv_pLAYER_01_USER, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(gv_cinematicTempUnits, UnitGroup("Baneling", gv_pLAYER_01_USER, RegionFromId(14), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupLoopBegin(UnitGroup("Baneling", gv_pLAYER_01_USER, RegionFromId(14), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorAddPlayer(UnitGroupLoopCurrent(), "LarvaWander", 1, 1);
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupAddUnitGroup(gv_cinematicTempUnits, UnitGroup("Baneling", gv_pLAYER_01_USER, RegionFromId(39), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupLoopBegin(UnitGroup("Baneling", 1, RegionFromId(39), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorAddPlayer(UnitGroupLoopCurrent(), "LarvaWander", 1, 1);
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupAddUnitGroup(gv_cinematicTempUnits, UnitGroup("HotSHunter", gv_pLAYER_01_USER, RegionFromId(29), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(gv_hunterIntroHunters, UnitGroup("HotSHunter", gv_pLAYER_01_USER, RegionFromId(29), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupLoopBegin(gv_hunterIntroHunters);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HunterIntroSetup_Init () {
    gt_HunterIntroSetup = TriggerCreate("gt_HunterIntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hunter - Intro Music Cue
//--------------------------------------------------------------------------------------------------
bool gt_HunterIntroMusicCue_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZEvoMusicMain", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HunterIntroMusicCue_Init () {
    gt_HunterIntroMusicCue = TriggerCreate("gt_HunterIntroMusicCue_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hunter - Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_HunterIntroCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("Baneling", gv_pLAYER_01_USER, RegionFromId(14), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    libSwaC_gf_PreparePlanetPortraitZoomIn("EvolutionPlanetBanelingB", CameraInfoFromId(23), "CharDunes");
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(0);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_Baneling|Line00011", c_transmissionDurationAdd, 0.0, false, 1, 0);
    TransmissionWait(TransmissionLastSent(), 2.0);
    libSwaC_gf_ZoomInPlanetPortrait();
    libSwaC_gf_HidePlanetPortrait();
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Char", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    Wait(1.0, c_timeGame);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_Baneling|Line00019", c_transmissionDurationAdd, 0.0, true, 1, 0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(24), 10.0, -1, 10.0, true);
    CameraShake(gv_pLAYER_01_USER, "Light", "Earthquake", 1.0, 1.0, 3.0);
    SoundPlay(SoundLink("TUILavaRising", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_hunterIntroLarvaRisingSound = SoundLastPlayed();
    WaterSetState("Template 1|Alternate Setting 1", 6.0, c_wtcLinear);
    GameSetLighting("TTosh01Warning", 6.0);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_Baneling|Line00018", c_transmissionDurationAdd, 0.0, false, 1, 0);
    Wait(6.0, c_timeGame);
    CameraShake(gv_pLAYER_01_USER, "Light", "Earthquake", 1.0, 1.5, 4.0);
    SoundPlay(SoundLink("TUILavaRising", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_hunterIntroLarvaRisingSound = SoundLastPlayed();
    WaterSetState("Template 1|Alternate Setting 2", 4.0, c_wtcLinear);
    GameSetLighting("TTosh01Eruption", 4.0);
    UnitGroupLoopBegin(UnitGroup("Baneling", c_playerAny, RegionFromId(14), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(UnitGroupLoopCurrent()), 3.0, libNtve_gf_RandomAngle())), c_orderQueueReplace);
    }
    UnitGroupLoopEnd();
    Wait(2.0, c_timeGame);
    UnitGroupLoopBegin(UnitGroup("Baneling", c_playerAny, RegionFromId(14), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    Wait(2.0, c_timeGame);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_Baneling|Line00029", c_transmissionDurationAdd, 0.0, true, 1, 0);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    gf_TurnOffLava(0.0);
    libSwaC_gf_EnableCampaignTechUnit(true, "BanelingB", gv_pLAYER_01_USER);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(83), 0.0, -1, 10, true);
    gf_TurnOnLava(6.0);
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    UnitGroupIssueOrder(gv_hunterIntroHunters, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(118)), c_orderQueueReplace);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_Baneling|Line00020", c_transmissionDurationAdd, 0.0, false, 1, 0);
    Wait(0.6, c_timeGame);
    UnitGroupIssueOrder(gv_hunterIntroHunters, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(118)), c_orderQueueReplace);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(135), 10.0, -1, 10, true);
    Wait(1.4, c_timeGame);
    UnitGroupLoopBegin(UnitGroup("Baneling", c_playerAny, RegionFromId(39), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(UnitGroupLoopCurrent()), 3.0, libNtve_gf_RandomAngle())), c_orderQueueReplace);
    }
    UnitGroupLoopEnd();
    Wait(1.0, c_timeGame);
    UnitGroupLoopBegin(UnitGroup("Baneling", c_playerAny, RegionFromId(39), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(1.0, c_timeGame);
    CinematicFade(false, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    gf_TurnOffLava(0.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(48), 0.0, -1, 10, true);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_Baneling|Line00021", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_Baneling|Line00022", c_transmissionDurationAdd, 0.0, false, 1, 0);
    Wait(1.0, c_timeGame);
    UnitGroupIssueOrder(UnitGroup("HotSHunter", gv_pLAYER_01_USER, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), Order(AbilityCommand("BurrowHunterDown", 0)), c_orderQueueReplace);
    TransmissionWait(TransmissionLastSent(), 0.0);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HunterIntroCinematic_Init () {
    gt_HunterIntroCinematic = TriggerCreate("gt_HunterIntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hunter - Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_HunterIntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HunterIntroCinematicEnd_Init () {
    gt_HunterIntroCinematicEnd = TriggerCreate("gt_HunterIntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hunter - Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_HunterIntroCleanup_Func (bool testConds, bool runActions) {
    int autoD02777EA_n;
    int autoD02777EA_i;

    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CameraShakeStop(gv_pLAYER_01_USER);
    UnitGroupLoopBegin(gv_cinematicTempUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(75), 0.0, -1, 10, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    libSwaC_gf_HidePlanetPortrait();
    if ((gv_cinematicCompleted == false)) {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Char", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }
    else {
    }
    gf_TurnOffLava(0.0);
    SoundStop(gv_hunterIntroLarvaRisingSound, true);
    RegionPlayableMapSet(RegionFromId(4));
    autoD02777EA_n = 6;
    for (autoD02777EA_i = 1; autoD02777EA_i <= autoD02777EA_n; autoD02777EA_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HotSHunter", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(7)));
        libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, gv_pLAYER_01_USER);
        UnitGroupAdd(gv_hunterPlayerUnitGroup, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(RegionGetCenter(RegionFromId(11)), DistanceBetweenPoints(UnitGetPosition(UnitLastCreated()), RegionGetCenter(RegionFromId(7))), AngleBetweenPoints(RegionGetCenter(RegionFromId(7)), UnitGetPosition(UnitLastCreated())))), c_orderQueueReplace);
    }
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitGroupSelect(gv_hunterPlayerUnitGroup, gv_pLAYER_01_USER, true);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(75)), lv_fadeDuration);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    gv_inCinematic = false;
    Wait(lv_fadeDuration, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HunterIntroCleanup_Init () {
    gt_HunterIntroCleanup = TriggerCreate("gt_HunterIntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hunter - Mid Q
//--------------------------------------------------------------------------------------------------
bool gt_HunterMidQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_HunterMidSetup, true, true);
    TriggerExecute(gt_HunterMidCinematic, true, true);
    TriggerExecute(gt_HunterMidCinematicEnd, true, true);
    TriggerExecute(gt_HunterMidCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HunterMidQ_Init () {
    gt_HunterMidQ = TriggerCreate("gt_HunterMidQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hunter - Mid Setup
//--------------------------------------------------------------------------------------------------
bool gt_HunterMidSetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    gv_inCinematic = true;
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    CameraSave(gv_pLAYER_01_USER);
    libNtve_gf_StoreUnitSelection(gv_pLAYER_01_USER, 0);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    TimerPause(gv_lavaTimer, true);
    TimerPause(gv_warningTimer, true);
    TriggerStop(gt_LavaTurnsOFF);
    TriggerStop(gt_LavaTurnsON);
    TriggerEnable(gt_LavaDamage, false);
    CameraShakeStop(gv_pLAYER_01_USER);
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitPauseAll(true);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(12), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionFromId(26), gv_pLAYER_02_DOMINION);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HunterMidSetup_Init () {
    gt_HunterMidSetup = TriggerCreate("gt_HunterMidSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hunter - Music Cue
//--------------------------------------------------------------------------------------------------
bool gt_HunterMusicCue_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("ZEvoMusicStinger", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_cinematicStingerSound = SoundLastPlayed();
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZEvoMusicAlt", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HunterMusicCue_Init () {
    gt_HunterMusicCue = TriggerCreate("gt_HunterMusicCue_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hunter - Mid Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_HunterMidCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(594), 0.0, -1, 10, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(0);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Baneling|Line00048", c_transmissionDurationAdd, 0.0, true, 1, 0);
    TriggerExecute(gt_HunterCreateBriefingModelOnCommandCenter, true, false);
    Wait(1.0, c_timeReal);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(595), (SoundLengthSync(SoundLink(ConversationDataGetSound("zEvoMission_Baneling|Line00049", true), c_soundIndexAny)) - 1), -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Baneling|Line00049", c_transmissionDurationAdd, 0.0, true, 1, 0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(9), 4.0, -1, 10, true);
    Wait(4.0, c_timeGame);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Baneling|Line00050", c_transmissionDurationAdd, 0.0, true, 1, 0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(159), 0.0, -1, 10, true);
    TriggerExecute(gt_HunterMusicCue, true, false);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Baneling|Line00051", c_transmissionDurationAdd, 0.0, true, 1, 0);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HunterMidCinematic_Init () {
    gt_HunterMidCinematic = TriggerCreate("gt_HunterMidCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hunter - Mid Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_HunterMidCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HunterMidCinematicEnd_Init () {
    gt_HunterMidCinematicEnd = TriggerCreate("gt_HunterMidCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hunter - Mid Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_HunterMidCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;
    unitgroup lv_banelingGroup;

    // Variable Initialization
    lv_banelingGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(gv_cinematicTempUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    SoundStop(gv_cinematicStingerSound, true);
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitPauseAll(false);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    libNtve_gf_RestoreUnitSelection(gv_pLAYER_01_USER);
    CameraRestore(gv_pLAYER_01_USER, 0.0, -1, 10);
    TriggerExecute(gt_HunterCreateBriefingModelOnCommandCenter, true, false);
    TriggerEnable(gt_HunterWhereDoTheyComeFromQ, true);
    TriggerExecute(gt_HunterMidResetLava, true, false);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZEvoMusicAlt", c_soundtrackCueAny, c_soundtrackIndexAny, true);
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    gv_inCinematic = false;
    Wait(lv_fadeDuration, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HunterMidCleanup_Init () {
    gt_HunterMidCleanup = TriggerCreate("gt_HunterMidCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hunter - Mid Reset Lava
//--------------------------------------------------------------------------------------------------
bool gt_HunterMidResetLava_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TurnOffLava(0.0);
    TimerStart(gv_warningTimer, (gv_lavaInterval - 17.0), false, c_timeAI);
    TimerStart(gv_lavaTimer, gv_lavaInterval, false, c_timeAI);
    TimerWindowShow(gv_lavaTimerWindow, PlayerGroupAll(), true);
    TimerPause(gv_lavaTimer, false);
    TimerPause(gv_warningTimer, false);
    TriggerEnable(gt_LavaTurnsOFF, false);
    TriggerEnable(gt_LavaTurnsON, true);
    if ((gv_timerCreated == false)) {
        TriggerExecute(gt_LavaTimerCreate, true, false);
        gv_timerCreated = true;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HunterMidResetLava_Init () {
    gt_HunterMidResetLava = TriggerCreate("gt_HunterMidResetLava_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hunter - Create Briefing Model On Command Center
//--------------------------------------------------------------------------------------------------
bool gt_HunterCreateBriefingModelOnCommandCenter_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(2, 0, null, UnitFromId(147), "Ref_Head");
    gv_hunterDominonCommanderCenterBriefing = libNtve_gf_ActorLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HunterCreateBriefingModelOnCommandCenter_Init () {
    gt_HunterCreateBriefingModelOnCommandCenter = TriggerCreate("gt_HunterCreateBriefingModelOnCommandCenter_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04MusicSound_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_DebugHunter_Init();
    gt_ReinforcementsAllUnitsDead_Init();
    gt_SplitterHunterTransitionQ_Init();
    gt_Splitter_Init();
    gt_SplitterStartQ_Init();
    gt_SplitterMitoscarabAmbushQ_Init();
    gt_SplitterAncientMitoscarabDied_Init();
    gt_SplitterMitoscarabBEnterWorld_Init();
    gt_SplitterMitoscarabDiesGiveDNA_Init();
    gt_SplitterFirstStageEndQ_Init();
    gt_SplitterFirstEncounter_Init();
    gt_SplitterEncounterTransmissionQ_Init();
    gt_SplitterProtossTauntQ1_Init();
    gt_SplitterProtossTauntQ2_Init();
    gt_SplitterProtossAmbush_Init();
    gt_SplitterNydusWormIncoming1_Init();
    gt_SplitterNydusWormIncomingTransQ1_Init();
    gt_SplitterNydusWormIncoming2_Init();
    gt_SplitterNydusWormIncomingTransQ2_Init();
    gt_SplitterBlinkEvent_Init();
    gt_LavaTimerCreate_Init();
    gt_CameraShakeWeak_Init();
    gt_CameraShakeDuringLava_Init();
    gt_LavaTurnsON_Init();
    gt_LavaTurnsOFF_Init();
    gt_LavaDamage_Init();
    gt_LavaWarningQ_Init();
    gt_LavaSafeQ_Init();
    gt_Hunter_Init();
    gt_HunterInit_Init();
    gt_HunterStartQ_Init();
    gt_HunterCreatePingsForSurvivors_Init();
    gt_HunterRescue1_Init();
    gt_HunterLavaWarningQ_Init();
    gt_HunterMedivac1ComingInQ_Init();
    gt_HunterMedivacDrop1KilledQ_Init();
    gt_HunterMedivac1Leave_Init();
    gt_HunterDominionTheyarejumpingQ_Init();
    gt_HunterRescue2_Init();
    gt_HunterMinerRunAway_Init();
    gt_HunterMinerEvacuateQ_Init();
    gt_HunterStartMidCinematicQ_Init();
    gt_HunterMedivac2ComingIn_Init();
    gt_HunterMedivacDrop2AttackedQ_Init();
    gt_HunterRescue3_Init();
    gt_HunterWarningAttackFromFrontQ_Init();
    gt_HunterWhereDoTheyComeFromQ_Init();
    gt_SplitterVictoryWipeOutProtossCompleted_Init();
    gt_HunterVictoryDestoryPlanetaryFortressCompleted_Init();
    gt_VictorySequenceQ_Init();
    gt_VictoryMusicCue_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_TipMissionHelpQ_Init();
    gt_AIGiveMinerals_Init();
    gt_AIGiveGas_Init();
    gt_ObjectiveKillMitoscarabCreate_Init();
    gt_ObjectiveKillMitoscarabUpdate_Init();
    gt_ObjectiveKillMitoscarabComplete_Init();
    gt_ObjectiveDestroyProtossColossiCreate_Init();
    gt_ObjectiveDestroyProtossColossiUpdate_Init();
    gt_ObjectiveDestroyProtossColossiComplete_Init();
    gt_ObjectiveCollectLocalBanelingsCreate_Init();
    gt_ObjectiveCollectLocalBanelingsComplete_Init();
    gt_ObjectiveCollectLocalBanelingsUpdateQ_Init();
    gt_ObjectiveWipeOutTerransCreate_Init();
    gt_ObjectiveWipeOutTerransComplete_Init();
    gt_SplitterIntroQ_Init();
    gt_SplitterIntroSetup_Init();
    gt_SplitterIntroCinematic_Init();
    gt_SplitterIntroCinematicEnd_Init();
    gt_SplitterIntroCleanupCanceled_Init();
    gt_SplitterIntroCleanupFinished_Init();
    gt_SplitterMidQ_Init();
    gt_SplitterMidSetup_Init();
    gt_SplitterMidCinematic_Init();
    gt_SplitterMusicCue_Init();
    gt_SplitterMidCinematicEnd_Init();
    gt_SplitterMidCleanup_Init();
    gt_HunterIntroQ_Init();
    gt_HunterIntroSetup_Init();
    gt_HunterIntroMusicCue_Init();
    gt_HunterIntroCinematic_Init();
    gt_HunterIntroCinematicEnd_Init();
    gt_HunterIntroCleanup_Init();
    gt_HunterMidQ_Init();
    gt_HunterMidSetup_Init();
    gt_HunterMusicCue_Init();
    gt_HunterMidCinematic_Init();
    gt_HunterMidCinematicEnd_Init();
    gt_HunterMidCleanup_Init();
    gt_HunterMidResetLava_Init();
    gt_HunterCreateBriefingModelOnCommandCenter_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}
