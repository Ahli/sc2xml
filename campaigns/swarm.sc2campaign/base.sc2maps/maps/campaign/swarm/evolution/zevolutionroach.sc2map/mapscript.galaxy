//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Roach Evolution
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmCampaignLib"
include "ai4BEFB21E"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libSwaC_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_PROTOSS = 2;
const int gv_pLAYER_04_CRITTERS = 4;
const int gv_pLAYER_05_SCANT = 5;
const int gv_pLAYER_06_YETIS = 6;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
bool gv_gameOver;
bool gv_inCinematic;
string gv_mapMusicTrack;
bool gv_corpserActive;
unitgroup gv_corpserAreaUnits;
bool gv_vileActive;
unitgroup gv_vileAreaUnits;
point gv_backupPoint;
bool gv_backupSuppressed;
unitgroup gv_corpserPlayerUnits;
int gv_scantipedePing;
int[5] gv_corpserProtossPings;
unitgroup[5] gv_corpserProtossForceGroups;
bool gv_warpEventComplete;
unitgroup gv_vilePlayerUnits;
unitgroup gv_protossInVileArea;
unitgroup[5] gv_vileProtossForceGroups;
int gv_vileProtossPing01;
int gv_vileProtossPing02;
int gv_vileProtossPing03;
int gv_vileProtossPing04;
revealer gv_vileProtossRevealer01;
revealer gv_vileProtossRevealer02;
revealer gv_vileProtossRevealer03;
revealer gv_vileProtossRevealer04;
unit gv_frozenZealot;
unit gv_frozenArchon;
unit gv_frozenImmortal;
int gv_objectiveKillScantipede;
int gv_objectiveCountKillScantipede;
int gv_objectiveEliminateProtoss;
int gv_objectiveEscapeProtossLab;
int gv_objectiveKillProtoss_Vile;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicTempUnits;
bool gv_cinematicCompleted;
sound gv_blueFuseSound;
unitgroup gv_introVileDoomed;
point[13] gv_introVileStartPoints;
unitgroup gv_introVileSurvivors;
sound gv_poolShinkageSound;

void InitGlobals () {
    int init_i;

    gv_gameOver = false;
    gv_inCinematic = false;
    gv_mapMusicTrack = null;
    gv_corpserActive = false;
    gv_corpserAreaUnits = UnitGroupEmpty();
    gv_vileActive = false;
    gv_vileAreaUnits = UnitGroupEmpty();
    gv_backupPoint = null;
    gv_backupSuppressed = false;
    gv_corpserPlayerUnits = UnitGroupEmpty();
    gv_scantipedePing = c_invalidPingId;
    init_i = 0;
    while (init_i <= 4) {
        gv_corpserProtossPings[init_i] = c_invalidPingId;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 4) {
        gv_corpserProtossForceGroups[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    gv_warpEventComplete = false;
    gv_vilePlayerUnits = UnitGroupEmpty();
    gv_protossInVileArea = UnitGroupEmpty();
    init_i = 0;
    while (init_i <= 4) {
        gv_vileProtossForceGroups[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    gv_vileProtossPing01 = c_invalidPingId;
    gv_vileProtossPing02 = c_invalidPingId;
    gv_vileProtossPing03 = c_invalidPingId;
    gv_vileProtossPing04 = c_invalidPingId;
    gv_vileProtossRevealer01 = null;
    gv_vileProtossRevealer02 = null;
    gv_vileProtossRevealer03 = null;
    gv_vileProtossRevealer04 = null;
    gv_frozenZealot = null;
    gv_frozenArchon = null;
    gv_frozenImmortal = null;
    gv_objectiveKillScantipede = c_invalidObjectiveId;
    gv_objectiveCountKillScantipede = 0;
    gv_objectiveEliminateProtoss = c_invalidObjectiveId;
    gv_objectiveEscapeProtossLab = c_invalidObjectiveId;
    gv_objectiveKillProtoss_Vile = c_invalidObjectiveId;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_cinematicCompleted = false;
    gv_blueFuseSound = null;
    gv_introVileDoomed = UnitGroupEmpty();
    init_i = 0;
    while (init_i <= 12) {
        gv_introVileStartPoints[init_i] = null;
        init_i = init_i + 1;
    }
    gv_introVileSurvivors = UnitGroupEmpty();
    gv_poolShinkageSound = null;
}

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04Music;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_DEBUGCorpser;
trigger gt_DEBUGVile;
trigger gt_ReinforcementsAllUnitsDead;
trigger gt_StartGameCorpserQ;
trigger gt_CreateScantipedePing;
trigger gt_ScantipedeTakesDamage;
trigger gt_ScantipedeKilled;
trigger gt_MorphRoachesintoCorpsersQ;
trigger gt_TransmissionEssenceAcquiredQ;
trigger gt_TransmissionCorpserQ;
trigger gt_TransmissionPushForwardQ;
trigger gt_CorpserMusicCue;
trigger gt_TransmissionZergSpottedQ;
trigger gt_TransmissionLetRoachlingsTankQ;
trigger gt_CreatePingsProtossForces;
trigger gt_ProtossForces04WarpIn;
trigger gt_WarpedUnitGrouping;
trigger gt_ProtossKilledRemovePings;
trigger gt_TransmissionAllProtossDeadQ;
trigger gt_OutdoorAmbience;
trigger gt_TransitiontoVileStrain;
trigger gt_MayesCrystals;
trigger gt_StartGameVileQ;
trigger gt_TransmissionVileStrainQ;
trigger gt_UnitFrozen;
trigger gt_TransmissionFrozenImmortalQ;
trigger gt_TransmissionFrozenArchonQ;
trigger gt_TransmissionFrozenZealotQ;
trigger gt_MergeArchons;
trigger gt_ArchonsMerged;
trigger gt_StalkerBlink01;
trigger gt_StalkerBlink02;
trigger gt_StalkerBlink03;
trigger gt_VileMoreRoaches;
trigger gt_TransmissionAdditionalRoachesQ;
trigger gt_VileMusicCue;
trigger gt_Colossus;
trigger gt_TransmissionColossusEngagedQ;
trigger gt_VileRemovePings;
trigger gt_VictoryProtossClearedCompleted;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_TipMissionHelpQ;
trigger gt_ObjectiveKillScantipedeCreate;
trigger gt_ObjectiveKillScantipedeComplete;
trigger gt_ObjectiveEliminateProtossCreate;
trigger gt_ObjectiveEliminateProtossComplete;
trigger gt_ObjectiveEscapeProtossLabCreate;
trigger gt_ObjectiveEscapeProtossLabComplete;
trigger gt_ObjectiveKillProtossCreate;
trigger gt_ObjectiveKillProtossComplete;
trigger gt_IntroCorpserQ;
trigger gt_IntroSetupCorpser;
trigger gt_IntroCinematicCorpser;
trigger gt_IntroCinematicEndCorpser;
trigger gt_IntroCleanupCorpser;
trigger gt_IntroVileQ;
trigger gt_IntroSetupVile;
trigger gt_IntroMusicCue;
trigger gt_IntroCinematicVile;
trigger gt_IntroCinematicEndVile;
trigger gt_IntroCleanupVile;
trigger gt_IntroVileRoaches;
trigger gt_IntroVilePositioning;
trigger gt_VictoryQ;
trigger gt_VictoryMusicCue;

//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;

//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;

    init_i = 0;
    while (init_i <= 16) {
        cai_playerAI[init_i] = null;
        init_i = init_i + 1;
    }
}

//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;

    if (cai_playerAI[p] == "ai4BEFB21E") { ai4BEFB21E_start(p); }
}

//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai4BEFB21E") { ai4BEFB21E_setDefGather(p, val); }
}

//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai4BEFB21E") { return ai4BEFB21E_getCustomData(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai4BEFB21E") { ai4BEFB21E_waves_run(p, target); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai4BEFB21E") { ai4BEFB21E_waves_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "ai4BEFB21E") { ai4BEFB21E_waves_stop(); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai4BEFB21E") { ai4BEFB21E_wave_run(w, p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai4BEFB21E") { ai4BEFB21E_wave_enable(w, p, val); }
}

//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "ai4BEFB21E") { return ai4BEFB21E_wave_isEnabled(w, p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai4BEFB21E") { return ai4BEFB21E_wave_createdUnits(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai4BEFB21E") { return ai4BEFB21E_wave_createdWave(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_startall () {
    cai_start("ai4BEFB21E", 2);
    AICampaignStart(5);
}

//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(2, target);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_ULoadCampaignData("ZEvolutionRoach");
    TriggerExecute(gt_Init01Technology, true, true);
    libSwaC_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03Units, true, true);
    TriggerExecute(gt_Init04Music, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulties, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    TriggerExecute(gt_IntroCorpserQ, true, true);
    TriggerExecute(gt_StartGameCorpserQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("LarvaTrain", 1), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("LarvaTrain", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("LarvaTrain", 2), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("UpgradeToLair", 0), false);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_PROTOSS, "BlinkTech", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_PROTOSS, "PsiStormTech", 1);
    TechTreeAbilityAllow(gv_pLAYER_02_PROTOSS, AbilityCommand("ArchonWarp", 1), true);
    TechTreeAbilityAllow(gv_pLAYER_02_PROTOSS, AbilityCommand("ArchonWarp", 0), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_visionGroup;

    // Variable Initialization
    lv_visionGroup = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_PROTOSS, 5);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_04_CRITTERS, 5);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_05_SCANT, 5);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_06_YETIS, 5);
    libNtve_gf_SetAlliance(gv_pLAYER_02_PROTOSS, gv_pLAYER_04_CRITTERS, 0);
    libNtve_gf_SetAlliance(gv_pLAYER_02_PROTOSS, gv_pLAYER_05_SCANT, 5);
    libNtve_gf_SetAlliance(gv_pLAYER_02_PROTOSS, gv_pLAYER_06_YETIS, 7);
    PlayerGroupAdd(lv_visionGroup, gv_pLAYER_02_PROTOSS);
    PlayerGroupAdd(lv_visionGroup, gv_pLAYER_04_CRITTERS);
    PlayerGroupAdd(lv_visionGroup, gv_pLAYER_05_SCANT);
    PlayerGroupAdd(lv_visionGroup, gv_pLAYER_06_YETIS);
    libSwaC_gf_ShareVisionAmongPlayers(lv_visionGroup);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropSuppliesMade, c_playerPropOperSetTo, 200);
    PlayerModifyPropertyInt(gv_pLAYER_02_PROTOSS, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_02_PROTOSS, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(23), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_corpserAreaUnits, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_vileAreaUnits, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Roach", gv_pLAYER_01_USER, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_corpserPlayerUnits, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_PROTOSS, RegionFromId(24), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_corpserProtossForceGroups[1], UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_PROTOSS, RegionFromId(26), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_corpserProtossForceGroups[2], UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_PROTOSS, RegionFromId(27), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_corpserProtossForceGroups[3], UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_PROTOSS, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_protossInVileArea, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_PROTOSS, RegionFromId(34), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_vileProtossForceGroups[1], UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_PROTOSS, RegionFromId(37), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_vileProtossForceGroups[2], UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_PROTOSS, RegionFromId(36), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_vileProtossForceGroups[3], UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_PROTOSS, RegionFromId(35), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_vileProtossForceGroups[4], UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_04_CRITTERS, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropMovementSpeed, 0.0);
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        UnitBehaviorAdd(UnitGroupLoopCurrent(), "Harmless", UnitGroupLoopCurrent(), 1);
        if ((UnitGetType(UnitGroupLoopCurrent()) != "Scantipede")) {
            UnitStatusBarOverride(UnitGroupLoopCurrent(), -1);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_06_YETIS, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitBehaviorAdd(UnitGroupLoopCurrent(), "DefensiveHoldFire", UnitGroupLoopCurrent(), 1);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitSetState(UnitFromId(15), c_unitStateHighlightable, false);
    UnitSetState(UnitFromId(15), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(15), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(15), c_unitStateStatusBar, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music
//--------------------------------------------------------------------------------------------------
bool gt_Init04Music_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mapMusicTrack = libSwaC_gf_MissionDefaultMusic();
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Space01", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04Music_Init () {
    gt_Init04Music = TriggerCreate("gt_Init04Music_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    libLbty_gf_AutoRevealRegion(RegionFromId(9), RegionFromId(9), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(25), RegionFromId(25), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(7), RegionFromId(7), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(19), RegionFromId(19), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(21), RegionFromId(20), gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_AddMissionTipUserData("Corpser Strain");
    libSwaC_gf_AddMissionTipUserData("Roachlings");
    libSwaC_gf_AddMissionTipUserData("Burrow");
    libSwaC_gf_AddMissionTipUserData("Glacial Strain");
    libSwaC_gf_AddMissionTipUserData("Attacking");
    libSwaC_gf_AddMissionTipUserData("Archons");
    libSwaC_gf_AddMissionTipUserData("Reinforcements (ZEvoRoach)");
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Roach", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Zealot", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Sentry", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Stalker", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("HighTemplar", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Archon", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Immortal", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Colossus", false, gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Corpser
//--------------------------------------------------------------------------------------------------
bool gt_DEBUGCorpser_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_StartGameCorpserQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DEBUGCorpser_Init () {
    gt_DEBUGCorpser = TriggerCreate("gt_DEBUGCorpser_Func");
    TriggerAddEventChatMessage(gt_DEBUGCorpser, c_playerAny, "evo1", true);
    TriggerAddEventChatMessage(gt_DEBUGCorpser, c_playerAny, "s1", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Vile
//--------------------------------------------------------------------------------------------------
bool gt_DEBUGVile_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_IntroVileQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DEBUGVile_Init () {
    gt_DEBUGVile = TriggerCreate("gt_DEBUGVile_Func");
    TriggerAddEventChatMessage(gt_DEBUGVile, c_playerAny, "evo2", true);
    TriggerAddEventChatMessage(gt_DEBUGVile, c_playerAny, "s2", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reinforcements - All Units Dead
//--------------------------------------------------------------------------------------------------
bool gt_ReinforcementsAllUnitsDead_Func (bool testConds, bool runActions) {
    point auto15740708_val;
    int auto59225BD6_val;
    int auto6832B96B_n;
    int auto6832B96B_i;
    int auto1ED31DF0_val;
    int autoCD040F54_n;
    int autoCD040F54_i;
    int auto0BB29636_val;
    int autoDB7F25AB_n;
    int autoDB7F25AB_i;
    int auto59D7DF4C_val;
    int auto0BF7EA13_val;

    // Variable Declarations
    unitgroup lv_backupUnits;
    unitgroup lv_backupPausedUnits;

    // Variable Initialization
    lv_backupUnits = UnitGroupEmpty();
    lv_backupPausedUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_backupSuppressed == false))) {
            return false;
        }

        if (!((((gv_corpserActive == true) && (libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)) == true)) || ((gv_vileActive == true) && (libNtve_gf_UnitGroupIsDead(gv_vilePlayerUnits) == true))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueuePause(true);
    Wait(2.0, c_timeReal);
    TransmissionClearAll();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((libNtve_gf_UnitIsPaused(UnitGroupLoopCurrent()) == false)) {
            UnitGroupAdd(lv_backupPausedUnits, UnitGroupLoopCurrent());
            libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeGame);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationDefault);
    UnitClearSelection(gv_pLAYER_01_USER);
    CameraPan(gv_pLAYER_01_USER, gv_backupPoint, 3.0, -1, 10.0, false);
    auto15740708_val = gv_backupPoint;
    if (auto15740708_val == PointFromId(91)) {
        auto59225BD6_val = RandomInt(1, 2);
        if (auto59225BD6_val == 1) {
            libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Roach|Line00049", c_transmissionDurationAdd, 0.0, false, 1, 0);
        }
        else if (auto59225BD6_val == 2) {
            libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Roach|Line00050", c_transmissionDurationAdd, 0.0, false, 1, 0);
        }
        else {
        }
        auto6832B96B_n = 9;
        auto6832B96B_i = 1;
        while (auto6832B96B_i <= auto6832B96B_n) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "RoachBurrowed", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionCircle(gv_backupPoint, 3.0)));
            UnitGroupAdd(lv_backupUnits, UnitLastCreated());
            UnitGroupAdd(gv_corpserPlayerUnits, UnitLastCreated());
            auto6832B96B_i = auto6832B96B_i + 1;
        }
        UnitGroupIssueOrder(lv_backupUnits, Order(AbilityCommand("BurrowRoachUp", 0)), c_orderQueueReplace);
    }
    else if (auto15740708_val == PointFromId(898)) {
        auto1ED31DF0_val = RandomInt(1, 2);
        if (auto1ED31DF0_val == 1) {
            libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Roach|Line00049", c_transmissionDurationAdd, 0.0, false, 1, 0);
        }
        else if (auto1ED31DF0_val == 2) {
            libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Roach|Line00050", c_transmissionDurationAdd, 0.0, false, 1, 0);
        }
        else {
        }
        autoCD040F54_n = 9;
        autoCD040F54_i = 1;
        while (autoCD040F54_i <= autoCD040F54_n) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "RoachCorpserBurrowed", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionCircle(gv_backupPoint, 3.0)));
            UnitGroupAdd(lv_backupUnits, UnitLastCreated());
            UnitGroupAdd(gv_corpserPlayerUnits, UnitLastCreated());
            autoCD040F54_i = autoCD040F54_i + 1;
        }
        UnitGroupIssueOrder(lv_backupUnits, Order(AbilityCommand("BurrowHotSCorpserUp", 0)), c_orderQueueReplace);
    }
    else if (auto15740708_val == PointFromId(899)) {
        auto0BB29636_val = RandomInt(1, 2);
        if (auto0BB29636_val == 1) {
            libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Roach|Line00049", c_transmissionDurationAdd, 0.0, false, 1, 0);
        }
        else if (auto0BB29636_val == 2) {
            libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Roach|Line00050", c_transmissionDurationAdd, 0.0, false, 1, 0);
        }
        else {
        }
        autoDB7F25AB_n = 9;
        autoDB7F25AB_i = 1;
        while (autoDB7F25AB_i <= autoDB7F25AB_n) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "RoachCorpserBurrowed", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionCircle(gv_backupPoint, 3.0)));
            UnitGroupAdd(lv_backupUnits, UnitLastCreated());
            UnitGroupAdd(gv_corpserPlayerUnits, UnitLastCreated());
            autoDB7F25AB_i = autoDB7F25AB_i + 1;
        }
        UnitGroupIssueOrder(lv_backupUnits, Order(AbilityCommand("BurrowHotSCorpserUp", 0)), c_orderQueueReplace);
    }
    else if (auto15740708_val == PointFromId(900)) {
        auto59D7DF4C_val = RandomInt(1, 2);
        if (auto59D7DF4C_val == 1) {
            libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Roach|Line00049", c_transmissionDurationAdd, 0.0, false, 1, 0);
        }
        else if (auto59D7DF4C_val == 2) {
            libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Roach|Line00050", c_transmissionDurationAdd, 0.0, false, 1, 0);
        }
        else {
        }
        libNtve_gf_CreateUnitsAtPoint2(5, "RoachVile", 0, gv_pLAYER_01_USER, gv_backupPoint);
        UnitGroupAddUnitGroup(gv_vilePlayerUnits, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(lv_backupUnits, UnitLastCreatedGroup());
        libSwaC_gf_CreateDropPod(1, PointWithOffsetPolar(gv_backupPoint, 2.0, 0.0), UnitLastCreatedGroup(), false, gv_pLAYER_01_USER);
        libNtve_gf_CreateUnitsAtPoint2(5, "RoachVile", 0, gv_pLAYER_01_USER, gv_backupPoint);
        UnitGroupAddUnitGroup(gv_vilePlayerUnits, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(lv_backupUnits, UnitLastCreatedGroup());
        libSwaC_gf_CreateDropPod(1, PointWithOffsetPolar(gv_backupPoint, 2.0, 180.0), UnitLastCreatedGroup(), false, gv_pLAYER_01_USER);
    }
    else if (auto15740708_val == PointFromId(901)) {
        auto0BF7EA13_val = RandomInt(1, 2);
        if (auto0BF7EA13_val == 1) {
            libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Roach|Line00049", c_transmissionDurationAdd, 0.0, false, 1, 0);
        }
        else if (auto0BF7EA13_val == 2) {
            libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Roach|Line00050", c_transmissionDurationAdd, 0.0, false, 1, 0);
        }
        else {
        }
        libNtve_gf_CreateUnitsAtPoint2(5, "RoachVile", 0, gv_pLAYER_01_USER, gv_backupPoint);
        UnitGroupAddUnitGroup(gv_vilePlayerUnits, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(lv_backupUnits, UnitLastCreatedGroup());
        libSwaC_gf_CreateDropPod(1, PointWithOffsetPolar(gv_backupPoint, 2.0, 0.0), UnitLastCreatedGroup(), false, gv_pLAYER_01_USER);
        libNtve_gf_CreateUnitsAtPoint2(5, "RoachVile", 0, gv_pLAYER_01_USER, gv_backupPoint);
        UnitGroupAddUnitGroup(gv_vilePlayerUnits, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(lv_backupUnits, UnitLastCreatedGroup());
        libSwaC_gf_CreateDropPod(1, PointWithOffsetPolar(gv_backupPoint, 2.0, 120.0), UnitLastCreatedGroup(), false, gv_pLAYER_01_USER);
        libNtve_gf_CreateUnitsAtPoint2(5, "RoachVile", 0, gv_pLAYER_01_USER, gv_backupPoint);
        UnitGroupAddUnitGroup(gv_vilePlayerUnits, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(lv_backupUnits, UnitLastCreatedGroup());
        libSwaC_gf_CreateDropPod(1, PointWithOffsetPolar(gv_backupPoint, 2.0, 240.0), UnitLastCreatedGroup(), false, gv_pLAYER_01_USER);
    }
    else {
        gv_gameOver = true;
        TriggerQueuePause(true);
        TriggerQueueClear(c_triggerQueueRemove);
        Wait(2.0, c_timeReal);
        libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), 0, StringExternal("Param/Value/E6B91FE3"), 0);
        Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
        TriggerExecute(gt_Defeat, true, false);
        return true;
    }
    Wait(3.0, c_timeReal);
    UnitGroupLoopBegin(lv_backupPausedUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupSelect(lv_backupUnits, gv_pLAYER_01_USER, true);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.0);
    TriggerQueuePause(false);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReinforcementsAllUnitsDead_Init () {
    gt_ReinforcementsAllUnitsDead = TriggerCreate("gt_ReinforcementsAllUnitsDead_Func");
    TriggerAddEventTimePeriodic(gt_ReinforcementsAllUnitsDead, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game - Corpser Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameCorpserQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_vileActive = false;
    gv_corpserActive = true;
    gv_backupPoint = PointFromId(91);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/0C46A610"), null, RegionGetCenter(RegionFromId(10)));
    TriggerQueueEnter();
    Wait(3.0, c_timeGame);
    libNtve_gf_ShareVisionofUnit(UnitFromId(10), true, gv_pLAYER_01_USER);
    TriggerExecute(gt_ObjectiveKillScantipedeCreate, true, true);
    TriggerExecute(gt_CreateScantipedePing, true, false);
    TriggerQueueExit();
    TriggerExecute(gt_TipMissionHelpQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameCorpserQ_Init () {
    gt_StartGameCorpserQ = TriggerCreate("gt_StartGameCorpserQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Scantipede Ping
//--------------------------------------------------------------------------------------------------
bool gt_CreateScantipedePing_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectivePing(true, PointFromId(603), StringExternal("Param/Value/58EAC386"));
    gv_scantipedePing = PingLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateScantipedePing_Init () {
    gt_CreateScantipedePing = TriggerCreate("gt_CreateScantipedePing_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scantipede Takes Damage
//--------------------------------------------------------------------------------------------------
bool gt_ScantipedeTakesDamage_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupLoopBegin(UnitGroup("ScantipedeParasiticSmall", gv_pLAYER_05_SCANT, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitBehaviorAdd(UnitGroupLoopCurrent(), "ScantipedeParasiticTimedLife", UnitGroupLoopCurrent(), 1);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScantipedeTakesDamage_Init () {
    gt_ScantipedeTakesDamage = TriggerCreate("gt_ScantipedeTakesDamage_Func");
    TriggerEnable(gt_ScantipedeTakesDamage, false);
    TriggerAddEventUnitDamaged(gt_ScantipedeTakesDamage, UnitRefFromUnit(UnitFromId(10)), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scantipede Killed
//--------------------------------------------------------------------------------------------------
bool gt_ScantipedeKilled_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_essence;
    point lv_deathPoint;

    // Variable Initialization
    lv_essence = null;
    lv_deathPoint = null;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_corpserActive == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_deathPoint = UnitGetPosition(EventUnit());
    PingDestroy(gv_scantipedePing);
    libNtve_gf_UnitCreateFacingPoint(1, "MatriarchDNAPickup", 0, gv_pLAYER_01_USER, lv_deathPoint, lv_deathPoint);
    lv_essence = UnitLastCreated();
    Wait(2.0, c_timeGame);
    SoundPlayAtPoint(SoundLink("Zerus_DNA_PkUp", -1), PlayerGroupAll(), UnitGetPosition(UnitLastCreated()), 0.0, 100.0, 0.0);
    libSwaC_gf_DestroyCacheAndGivePlayerResources(lv_essence, 0, 1, null, StringExternal("Param/Value/8233ED64"), gv_pLAYER_01_USER);
    TriggerExecute(gt_ObjectiveKillScantipedeComplete, true, true);
    while (!((UnitGroupCount(UnitGroup("ScantipedeParasiticSmall", gv_pLAYER_05_SCANT, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
        Wait(0.25, c_timeGame);
    }
    TriggerExecute(gt_MorphRoachesintoCorpsersQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScantipedeKilled_Init () {
    gt_ScantipedeKilled = TriggerCreate("gt_ScantipedeKilled_Func");
    TriggerAddEventUnitDied(gt_ScantipedeKilled, UnitRefFromUnit(UnitFromId(10)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Morph Roaches into Corpsers Q
//--------------------------------------------------------------------------------------------------
bool gt_MorphRoachesintoCorpsersQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_backupSuppressed = true;
    libSwaC_gf_EnableCampaignTechUnit(true, "RoachB", gv_pLAYER_01_USER);
    TriggerExecute(gt_TransmissionEssenceAcquiredQ, true, false);
    UnitGroupLoopBegin(gv_corpserPlayerUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_MakeUnitUncommandable(UnitGroupLoopCurrent(), true);
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(1.75, c_timeGame);
    UnitGroupLoopBegin(gv_corpserPlayerUnits);
    while (!UnitGroupLoopDone()) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "RoachBurrowed")) {
            libNtve_gf_ReplaceUnit(UnitGroupLoopCurrent(), "Roach", 1);
            libNtve_gf_MakeUnitUncommandable(libNtve_gf_LastReplacedUnit(), true);
            UnitIssueOrder(libNtve_gf_LastReplacedUnit(), Order(AbilityCommand("MorphRoachToCorpser", 0)), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("MorphRoachToCorpser", 0)), c_orderQueueReplace);
        }
        Wait(0.25, c_timeGame);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(5.0, c_timeGame);
    UnitGroupLoopBegin(UnitGroup("RoachCorpser", gv_pLAYER_01_USER, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_MakeUnitUncommandable(UnitGroupLoopCurrent(), false);
        UnitGroupAdd(gv_corpserPlayerUnits, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupSelect(gv_corpserPlayerUnits, gv_pLAYER_01_USER, true);
    gv_backupSuppressed = false;
    gv_backupPoint = PointFromId(898);
    TriggerExecute(gt_TransmissionCorpserQ, true, true);
    TriggerExecute(gt_TransmissionPushForwardQ, true, true);
    UnitKill(UnitFromId(262));
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveEliminateProtossCreate, true, true);
    TriggerExecute(gt_ObjectiveEscapeProtossLabCreate, true, true);
    TriggerQueueExit();
    TriggerExecute(gt_CreatePingsProtossForces, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MorphRoachesintoCorpsersQ_Init () {
    gt_MorphRoachesintoCorpsersQ = TriggerCreate("gt_MorphRoachesintoCorpsersQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Essence Acquired Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionEssenceAcquiredQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Roach|Line00035", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionEssenceAcquiredQ_Init () {
    gt_TransmissionEssenceAcquiredQ = TriggerCreate("gt_TransmissionEssenceAcquiredQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Corpser Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionCorpserQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Roach|Line00001", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionCorpserQ_Init () {
    gt_TransmissionCorpserQ = TriggerCreate("gt_TransmissionCorpserQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Push Forward Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionPushForwardQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    TriggerExecute(gt_CorpserMusicCue, true, false);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Roach|Line00038", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionPushForwardQ_Init () {
    gt_TransmissionPushForwardQ = TriggerCreate("gt_TransmissionPushForwardQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Corpser Music Cue
//--------------------------------------------------------------------------------------------------
bool gt_CorpserMusicCue_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("ZEvoMusicStinger", -1), PlayerGroupAll(), 50.0, 0.0);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZEvoMusicAlt", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CorpserMusicCue_Init () {
    gt_CorpserMusicCue = TriggerCreate("gt_CorpserMusicCue_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Zerg Spotted Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionZergSpottedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(libNtve_gf_AcquiredTarget()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!(((UnitGetType(libNtve_gf_AcquiredTarget()) == "Roachling") || (UnitGetType(libNtve_gf_AcquiredTarget()) == "RoachCorpser")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(UnitFromId(132), "zEvoMission_Roach|Line00033", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionZergSpottedQ_Init () {
    gt_TransmissionZergSpottedQ = TriggerCreate("gt_TransmissionZergSpottedQ_Func");
    TriggerAddEventUnitAcquiredTarget(gt_TransmissionZergSpottedQ, UnitRefFromUnit(UnitFromId(132)));
    TriggerAddEventUnitAcquiredTarget(gt_TransmissionZergSpottedQ, UnitRefFromUnit(UnitFromId(7)));
    TriggerAddEventUnitAcquiredTarget(gt_TransmissionZergSpottedQ, UnitRefFromUnit(UnitFromId(1358)));
    TriggerAddEventUnitAcquiredTarget(gt_TransmissionZergSpottedQ, UnitRefFromUnit(UnitFromId(630)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Let Roachlings Tank Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionLetRoachlingsTankQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Roachling") || (UnitGetType(EventUnit()) == "RoachCorpser")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Roach|Line00046", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionLetRoachlingsTankQ_Init () {
    gt_TransmissionLetRoachlingsTankQ = TriggerCreate("gt_TransmissionLetRoachlingsTankQ_Func");
    TriggerAddEventUnitRegion(gt_TransmissionLetRoachlingsTankQ, null, RegionFromId(4), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Pings - Protoss Forces
//--------------------------------------------------------------------------------------------------
bool gt_CreatePingsProtossForces_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectivePing(true, RegionGetCenter(RegionFromId(24)), StringExternal("Param/Value/A75466AE"));
    gv_corpserProtossPings[1] = PingLastCreated();
    libSwaC_gf_CreateObjectivePing(true, RegionGetCenter(RegionFromId(26)), StringExternal("Param/Value/38D3C56E"));
    gv_corpserProtossPings[2] = PingLastCreated();
    libSwaC_gf_CreateObjectivePing(true, RegionGetCenter(RegionFromId(27)), StringExternal("Param/Value/BD2C9752"));
    gv_corpserProtossPings[3] = PingLastCreated();
    libSwaC_gf_CreateObjectivePing(true, RegionGetCenter(RegionFromId(18)), StringExternal("Param/Value/1002E2CC"));
    gv_corpserProtossPings[4] = PingLastCreated();
    TriggerEnable(gt_ProtossKilledRemovePings, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreatePingsProtossForces_Init () {
    gt_CreatePingsProtossForces = TriggerCreate("gt_CreatePingsProtossForces_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Forces 04 Warp In
//--------------------------------------------------------------------------------------------------
bool gt_ProtossForces04WarpIn_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_WarpedUnitGrouping, true);
    VisRevealerCreate(gv_pLAYER_02_PROTOSS, RegionFromId(18));
    Wait(0.5, c_timeGame);
    UnitIssueOrder(UnitFromId(244), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 5), PointFromId(104)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(244), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 5), PointFromId(462)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(244), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointFromId(261)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(244), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointFromId(460)), c_orderQueueReplace);
    Wait(8.0, c_timeGame);
    UnitIssueOrder(UnitFromId(244), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointFromId(261)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(244), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointFromId(460)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(244), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointFromId(372)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(244), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 5), PointFromId(104)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(244), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 5), PointFromId(462)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(244), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointFromId(761)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(244), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointFromId(763)), c_orderQueueReplace);
    Wait(5.0, c_timeGame);
    UnitIssueOrder(UnitFromId(244), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 2), PointFromId(756)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(244), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 2), PointFromId(716)), c_orderQueueReplace);
    Wait(5.5, c_timeGame);
    gv_warpEventComplete = true;
    UnitRemove(UnitFromId(715));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossForces04WarpIn_Init () {
    gt_ProtossForces04WarpIn = TriggerCreate("gt_ProtossForces04WarpIn_Func");
    TriggerAddEventUnitRegion(gt_ProtossForces04WarpIn, null, RegionFromId(18), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warped Unit Grouping
//--------------------------------------------------------------------------------------------------
bool gt_WarpedUnitGrouping_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(EventUnit(), "PowerUserWarpable") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_warpEventComplete == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    else {
        UnitGroupAdd(gv_corpserProtossForceGroups[4], EventUnit());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarpedUnitGrouping_Init () {
    gt_WarpedUnitGrouping = TriggerCreate("gt_WarpedUnitGrouping_Func");
    TriggerEnable(gt_WarpedUnitGrouping, false);
    TriggerAddEventUnitRegion(gt_WarpedUnitGrouping, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Killed - Remove Pings
//--------------------------------------------------------------------------------------------------
bool gt_ProtossKilledRemovePings_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_corpserActive == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(gv_corpserProtossForceGroups[1], c_unitCountAlive) == 0)) {
        PingDestroy(gv_corpserProtossPings[1]);
    }
    else {
    }
    if ((UnitGroupCount(gv_corpserProtossForceGroups[2], c_unitCountAlive) == 0)) {
        PingDestroy(gv_corpserProtossPings[2]);
        gv_backupPoint = PointFromId(899);
    }
    else {
    }
    if ((UnitGroupCount(gv_corpserProtossForceGroups[3], c_unitCountAlive) == 0)) {
        PingDestroy(gv_corpserProtossPings[3]);
    }
    else {
    }
    if ((gv_warpEventComplete == true) && (UnitGroupCount(gv_corpserProtossForceGroups[4], c_unitCountAlive) == 0)) {
        PingDestroy(gv_corpserProtossPings[4]);
    }
    else {
    }
    if ((gv_warpEventComplete == true) && (UnitGroupCount(gv_corpserProtossForceGroups[1], c_unitCountAlive) == 0) && (UnitGroupCount(gv_corpserProtossForceGroups[2], c_unitCountAlive) == 0) && (UnitGroupCount(gv_corpserProtossForceGroups[3], c_unitCountAlive) == 0) && (UnitGroupCount(gv_corpserProtossForceGroups[4], c_unitCountAlive) == 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        gv_backupSuppressed = true;
        TriggerExecute(gt_ObjectiveEliminateProtossComplete, true, false);
        TriggerExecute(gt_ObjectiveEscapeProtossLabComplete, true, true);
        TriggerExecute(gt_TransitiontoVileStrain, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossKilledRemovePings_Init () {
    gt_ProtossKilledRemovePings = TriggerCreate("gt_ProtossKilledRemovePings_Func");
    TriggerEnable(gt_ProtossKilledRemovePings, false);
    TriggerAddEventTimePeriodic(gt_ProtossKilledRemovePings, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: All Protoss Dead Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionAllProtossDeadQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Roach|Line00039", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionAllProtossDeadQ_Init () {
    gt_TransmissionAllProtossDeadQ = TriggerCreate("gt_TransmissionAllProtossDeadQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Outdoor Ambience
//--------------------------------------------------------------------------------------------------
bool gt_OutdoorAmbience_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_EvoRoach2", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OutdoorAmbience_Init () {
    gt_OutdoorAmbience = TriggerCreate("gt_OutdoorAmbience_Func");
    TriggerAddEventUnitRegion(gt_OutdoorAmbience, null, RegionFromId(7), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transition to Vile Strain
//--------------------------------------------------------------------------------------------------
bool gt_TransitiontoVileStrain_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionAllProtossDeadQ, true, true);
    ObjectiveDestroyAll(PlayerGroupAll());
    libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/495E7A68"));
    TriggerExecute(gt_IntroVileQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransitiontoVileStrain_Init () {
    gt_TransitiontoVileStrain = TriggerCreate("gt_TransitiontoVileStrain_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Maye's Crystals
//--------------------------------------------------------------------------------------------------
bool gt_MayesCrystals_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_mayesGroup;

    // Variable Initialization
    lv_mayesGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(22), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropMovementSpeed, 1.25);
        UnitGroupAdd(lv_mayesGroup, UnitGroupLoopCurrent());
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateInvulnerable, true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitIssueOrder(UnitFromId(66), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1067)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(65), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1068)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(118), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1069)), c_orderQueueReplace);
    while (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(20), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeGame);
    }
    UnitIssueOrder(UnitFromId(66), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1070)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(65), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1071)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(118), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1072)), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    UnitGroupLoopBegin(lv_mayesGroup);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropMovementSpeed, 0.0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MayesCrystals_Init () {
    gt_MayesCrystals = TriggerCreate("gt_MayesCrystals_Func");
    TriggerAddEventUnitRegion(gt_MayesCrystals, null, RegionFromId(20), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game - Vile Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameVileQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_vileActive = true;
    gv_corpserActive = false;
    gv_backupSuppressed = false;
    gv_backupPoint = PointFromId(900);
    TriggerEnable(gt_ProtossKilledRemovePings, false);
    UIAlertClear(gv_pLAYER_01_USER);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/53C47D89"), null, RegionGetCenter(RegionFromId(1)));
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveKillProtossCreate, true, true);
    TriggerQueueExit();
    TriggerExecute(gt_TransmissionVileStrainQ, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameVileQ_Init () {
    gt_StartGameVileQ = TriggerCreate("gt_StartGameVileQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Vile Strain Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionVileStrainQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Roach|Line00041", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionVileStrainQ_Init () {
    gt_TransmissionVileStrainQ = TriggerCreate("gt_TransmissionVileStrainQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Frozen
//--------------------------------------------------------------------------------------------------
bool gt_UnitFrozen_Func (bool testConds, bool runActions) {
    string autoB63FF6D2_val;

    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_PROTOSS))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoB63FF6D2_val = UnitGetType(EventUnit());
    if (autoB63FF6D2_val == "Zealot") {
        gv_frozenZealot = EventUnit();
        TriggerExecute(gt_TransmissionFrozenZealotQ, true, false);
    }
    else if (autoB63FF6D2_val == "Archon") {
        gv_frozenArchon = EventUnit();
        TriggerExecute(gt_TransmissionFrozenArchonQ, true, false);
    }
    else if (autoB63FF6D2_val == "Immortal") {
        gv_frozenImmortal = EventUnit();
        TriggerExecute(gt_TransmissionFrozenImmortalQ, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitFrozen_Init () {
    gt_UnitFrozen = TriggerCreate("gt_UnitFrozen_Func");
    TriggerAddEventUnitBehaviorChange(gt_UnitFrozen, null, "VileAcidSlowFlatAmount", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Frozen Immortal Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionFrozenImmortalQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_UnitFrozen, false);
    TriggerQueueEnter();
    if ((UnitIsAlive(gv_frozenImmortal) == true)) {
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
        libSwaC_gf_SendTransmissionCampaign(gv_frozenImmortal, "zEvoMission_Roach|Line00055", c_transmissionDurationAdd, 0.0, true, 1, 0);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    }
    else {
        TriggerEnable(TriggerGetCurrent(), true);
    }
    TriggerQueueExit();
    TriggerEnable(gt_UnitFrozen, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionFrozenImmortalQ_Init () {
    gt_TransmissionFrozenImmortalQ = TriggerCreate("gt_TransmissionFrozenImmortalQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Frozen Archon Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionFrozenArchonQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_archons;

    // Variable Initialization
    lv_archons = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_UnitFrozen, false);
    TriggerQueueEnter();
    if ((UnitIsAlive(gv_frozenArchon) == false)) {
        lv_archons = UnitGroup("Archon", gv_pLAYER_02_PROTOSS, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        UnitGroupLoopBegin(lv_archons);
        while (!UnitGroupLoopDone()) {
            if ((UnitHasBehavior(UnitGroupLoopCurrent(), "VileAcidSlowFlatAmount") == true)) {
                gv_frozenArchon = UnitGroupLoopCurrent();
                break;
            }
            else {
            }
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
    }
    else {
    }
    if ((UnitIsAlive(gv_frozenArchon) == true)) {
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
        libSwaC_gf_SendTransmissionCampaign(gv_frozenArchon, "zEvoMission_Roach|Line00056", c_transmissionDurationAdd, 0.0, true, 1, 0);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    }
    else {
        TriggerEnable(TriggerGetCurrent(), true);
    }
    TriggerQueueExit();
    TriggerEnable(gt_UnitFrozen, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionFrozenArchonQ_Init () {
    gt_TransmissionFrozenArchonQ = TriggerCreate("gt_TransmissionFrozenArchonQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Frozen Zealot Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionFrozenZealotQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_zealots;

    // Variable Initialization
    lv_zealots = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_UnitFrozen, false);
    TriggerQueueEnter();
    if ((UnitIsAlive(gv_frozenZealot) == false)) {
        lv_zealots = UnitGroup("Zealot", gv_pLAYER_02_PROTOSS, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_zealots = UnitGroupFilter("Zealot", gv_pLAYER_02_PROTOSS, gv_protossInVileArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        UnitGroupLoopBegin(lv_zealots);
        while (!UnitGroupLoopDone()) {
            if ((UnitHasBehavior(UnitGroupLoopCurrent(), "VileAcidSlowFlatAmount") == true)) {
                gv_frozenZealot = UnitGroupLoopCurrent();
                break;
            }
            else {
            }
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
    }
    else {
    }
    if ((UnitIsAlive(gv_frozenZealot) == true)) {
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
        libSwaC_gf_SendTransmissionCampaign(gv_frozenZealot, "zEvoMission_Roach|Line00028", c_transmissionDurationAdd, 0.0, true, 1, 0);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    }
    else {
        TriggerEnable(TriggerGetCurrent(), true);
    }
    TriggerQueueExit();
    TriggerEnable(gt_UnitFrozen, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionFrozenZealotQ_Init () {
    gt_TransmissionFrozenZealotQ = TriggerCreate("gt_TransmissionFrozenZealotQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Merge Archons
//--------------------------------------------------------------------------------------------------
bool gt_MergeArchons_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupIssueOrder(UnitGroup("HighTemplar", gv_pLAYER_02_PROTOSS, RegionFromId(30), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), Order(AbilityCommand("ArchonWarp", 0)), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitGroup("HighTemplar", gv_pLAYER_02_PROTOSS, RegionFromId(31), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), Order(AbilityCommand("ArchonWarp", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MergeArchons_Init () {
    gt_MergeArchons = TriggerCreate("gt_MergeArchons_Func");
    TriggerAddEventUnitRegion(gt_MergeArchons, null, RegionFromId(29), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Archons Merged
//--------------------------------------------------------------------------------------------------
bool gt_ArchonsMerged_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_vileActive == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_vileProtossForceGroups[2], EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArchonsMerged_Init () {
    gt_ArchonsMerged = TriggerCreate("gt_ArchonsMerged_Func");
    TriggerAddEventUnitCreated(gt_ArchonsMerged, null, "ArchonWarp", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stalker Blink 01
//--------------------------------------------------------------------------------------------------
bool gt_StalkerBlink01_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(UnitFromId(95), c_unitPropLifePercent, c_unitPropCurrent) <= 70.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(95), OrderTargetingPoint(AbilityCommand("Blink", 0), PointFromId(113)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StalkerBlink01_Init () {
    gt_StalkerBlink01 = TriggerCreate("gt_StalkerBlink01_Func");
    TriggerAddEventUnitProperty(gt_StalkerBlink01, UnitRefFromUnit(UnitFromId(95)), c_unitPropLife);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stalker Blink 02
//--------------------------------------------------------------------------------------------------
bool gt_StalkerBlink02_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(UnitFromId(133), c_unitPropLifePercent, c_unitPropCurrent) <= 70.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(133), OrderTargetingPoint(AbilityCommand("Blink", 0), PointFromId(1392)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StalkerBlink02_Init () {
    gt_StalkerBlink02 = TriggerCreate("gt_StalkerBlink02_Func");
    TriggerAddEventUnitDamaged(gt_StalkerBlink02, UnitRefFromUnit(UnitFromId(133)), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stalker Blink 03
//--------------------------------------------------------------------------------------------------
bool gt_StalkerBlink03_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(UnitFromId(782), c_unitPropLifePercent, c_unitPropCurrent) <= 70.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(782), OrderTargetingPoint(AbilityCommand("Blink", 0), PointFromId(1393)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StalkerBlink03_Init () {
    gt_StalkerBlink03 = TriggerCreate("gt_StalkerBlink03_Func");
    TriggerAddEventUnitDamaged(gt_StalkerBlink03, UnitRefFromUnit(UnitFromId(782)), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vile More Roaches
//--------------------------------------------------------------------------------------------------
bool gt_VileMoreRoaches_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_roachCount;

    // Variable Initialization
    lv_roachCount = 0;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionAdditionalRoachesQ, true, false);
    lv_roachCount = UnitGroupCount(gv_vilePlayerUnits, c_unitCountAlive);
    libNtve_gf_CreateUnitsAtPoint2(5, "RoachVile", 0, gv_pLAYER_01_USER, gv_backupPoint);
    UnitGroupAddUnitGroup(gv_vilePlayerUnits, UnitLastCreatedGroup());
    libSwaC_gf_CreateDropPod(1, PointWithOffsetPolar(gv_backupPoint, 2.0, 0.0), UnitLastCreatedGroup(), false, gv_pLAYER_01_USER);
    Wait(0.25, c_timeGame);
    lv_roachCount = UnitGroupCount(gv_vilePlayerUnits, c_unitCountAlive);
    if (((15 - lv_roachCount) > 0)) {
        libNtve_gf_CreateUnitsAtPoint2(MinI((15 - lv_roachCount), 5), "RoachVile", 0, gv_pLAYER_01_USER, gv_backupPoint);
        UnitGroupAddUnitGroup(gv_vilePlayerUnits, UnitLastCreatedGroup());
        libSwaC_gf_CreateDropPod(1, PointWithOffsetPolar(gv_backupPoint, 2.0, 120.0), UnitLastCreatedGroup(), false, gv_pLAYER_01_USER);
    }
    else {
        return true;
    }
    Wait(0.25, c_timeGame);
    lv_roachCount = UnitGroupCount(gv_vilePlayerUnits, c_unitCountAlive);
    if (((15 - lv_roachCount) > 0)) {
        libNtve_gf_CreateUnitsAtPoint2(MinI((15 - lv_roachCount), 5), "RoachVile", 0, gv_pLAYER_01_USER, gv_backupPoint);
        UnitGroupAddUnitGroup(gv_vilePlayerUnits, UnitLastCreatedGroup());
        libSwaC_gf_CreateDropPod(1, PointWithOffsetPolar(gv_backupPoint, 2.0, 240.0), UnitLastCreatedGroup(), false, gv_pLAYER_01_USER);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VileMoreRoaches_Init () {
    gt_VileMoreRoaches = TriggerCreate("gt_VileMoreRoaches_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Additional Roaches Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionAdditionalRoachesQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    TriggerExecute(gt_VileMusicCue, true, false);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Roach|Line00049", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionAdditionalRoachesQ_Init () {
    gt_TransmissionAdditionalRoachesQ = TriggerCreate("gt_TransmissionAdditionalRoachesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vile Music Cue
//--------------------------------------------------------------------------------------------------
bool gt_VileMusicCue_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("ZEvoMusicStinger", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZEvoMusicAlt", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VileMusicCue_Init () {
    gt_VileMusicCue = TriggerCreate("gt_VileMusicCue_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Colossus
//--------------------------------------------------------------------------------------------------
bool gt_Colossus_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionColossusEngagedQ, true, false);
    UnitGroupIssueOrder(UnitGroup("Zealot", gv_pLAYER_02_PROTOSS, RegionFromId(32), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(111)), c_orderQueueReplace);
    Wait(4.0, c_timeGame);
    UnitIssueOrder(UnitFromId(754), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(336)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(754), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(111)), c_orderQueueAddToEnd);
    Wait(4.0, c_timeGame);
    UnitIssueOrder(UnitFromId(755), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(576)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(755), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(111)), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Colossus_Init () {
    gt_Colossus = TriggerCreate("gt_Colossus_Func");
    TriggerAddEventUnitAcquiredTarget(gt_Colossus, UnitRefFromUnit(UnitFromId(112)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Colossus Engaged Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionColossusEngagedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(UnitFromId(779), "zEvoMission_Roach|Line00031", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionColossusEngagedQ_Init () {
    gt_TransmissionColossusEngagedQ = TriggerCreate("gt_TransmissionColossusEngagedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vile Remove Pings
//--------------------------------------------------------------------------------------------------
bool gt_VileRemovePings_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_vileActive == true))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(gv_vileProtossForceGroups[1], c_unitCountAlive) == 0)) {
        PingDestroy(gv_vileProtossPing01);
        VisRevealerDestroy(gv_vileProtossRevealer01);
    }
    else {
    }
    if ((UnitGroupCount(gv_vileProtossForceGroups[2], c_unitCountAlive) == 0)) {
        PingDestroy(gv_vileProtossPing02);
        VisRevealerDestroy(gv_vileProtossRevealer02);
    }
    else {
    }
    if ((UnitGroupCount(gv_vileProtossForceGroups[3], c_unitCountAlive) == 0)) {
        gv_backupPoint = PointFromId(901);
        PingDestroy(gv_vileProtossPing03);
        VisRevealerDestroy(gv_vileProtossRevealer03);
        TriggerExecute(gt_VileMoreRoaches, true, false);
    }
    else {
    }
    if ((UnitGroupCount(gv_vileProtossForceGroups[4], c_unitCountAlive) == 0)) {
        PingDestroy(gv_vileProtossPing04);
        VisRevealerDestroy(gv_vileProtossRevealer04);
    }
    else {
    }
    if ((UnitGroupCount(gv_protossInVileArea, c_unitCountAlive) == 0)) {
        PingDestroy(gv_vileProtossPing04);
        VisRevealerDestroy(gv_vileProtossRevealer04);
        TriggerEnable(TriggerGetCurrent(), false);
        gv_backupSuppressed = true;
        TriggerExecute(gt_ObjectiveKillProtossComplete, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VileRemovePings_Init () {
    gt_VileRemovePings = TriggerCreate("gt_VileRemovePings_Func");
    TriggerEnable(gt_VileRemovePings, false);
    TriggerAddEventTimePeriodic(gt_VileRemovePings, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory {Protoss Cleared} Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryProtossClearedCompleted_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryProtossClearedCompleted_Init () {
    gt_VictoryProtossClearedCompleted = TriggerCreate("gt_VictoryProtossClearedCompleted_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    Wait(2.0, c_timeReal);
    libSwaC_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_DefeatCheat, false);
    TriggerEnable(gt_VictoryCheat, false);
    TriggerEnable(gt_Defeat, false);
    gv_gameOver = true;
    libSwaC_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_DefeatCheat, false);
    TriggerEnable(gt_VictoryCheat, false);
    TriggerEnable(gt_Victory, false);
    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Mission Help Q
//--------------------------------------------------------------------------------------------------
bool gt_TipMissionHelpQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_DisplayMissionTip(StringExternal("Param/Value/0C58133A"));
    Wait(libSwaC_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipMissionHelpQ_Init () {
    gt_TipMissionHelpQ = TriggerCreate("gt_TipMissionHelpQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Scantipede Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillScantipedeCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZEvolutionRoachA01");
    gv_objectiveKillScantipede = ObjectiveLastCreated();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerEnable(gt_ScantipedeTakesDamage, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillScantipedeCreate_Init () {
    gt_ObjectiveKillScantipedeCreate = TriggerCreate("gt_ObjectiveKillScantipedeCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Scantipede Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillScantipedeComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveKillScantipedeCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZEvolutionRoachA01", 2);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillScantipedeComplete_Init () {
    gt_ObjectiveKillScantipedeComplete = TriggerCreate("gt_ObjectiveKillScantipedeComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Eliminate Protoss Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveEliminateProtossCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZEvolutionRoachObjective5");
    gv_objectiveEliminateProtoss = ObjectiveLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveEliminateProtossCreate_Init () {
    gt_ObjectiveEliminateProtossCreate = TriggerCreate("gt_ObjectiveEliminateProtossCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Eliminate Protoss Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveEliminateProtossComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveEliminateProtossCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZEvolutionRoachObjective5", 2);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveEliminateProtossComplete_Init () {
    gt_ObjectiveEliminateProtossComplete = TriggerCreate("gt_ObjectiveEliminateProtossComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Escape Protoss Lab Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveEscapeProtossLabCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZEvolutionRoachB01");
    gv_objectiveEscapeProtossLab = ObjectiveLastCreated();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveEscapeProtossLabCreate_Init () {
    gt_ObjectiveEscapeProtossLabCreate = TriggerCreate("gt_ObjectiveEscapeProtossLabCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Escape Protoss Lab Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveEscapeProtossLabComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveEscapeProtossLabCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZEvolutionRoachB01", 2);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveEscapeProtossLabComplete_Init () {
    gt_ObjectiveEscapeProtossLabComplete = TriggerCreate("gt_ObjectiveEscapeProtossLabComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Protoss Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillProtossCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZEvolutionRoachObjective03");
    gv_objectiveKillProtoss_Vile = ObjectiveLastCreated();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    libSwaC_gf_CreateObjectivePing(true, PointFromId(92), StringExternal("Param/Value/D3046868"));
    gv_vileProtossPing01 = PingLastCreated();
    VisRevealerCreate(gv_pLAYER_01_USER, RegionCircle(PointFromId(92), 5.0));
    gv_vileProtossRevealer01 = VisRevealerLastCreated();
    libSwaC_gf_CreateObjectivePing(true, PointFromId(533), StringExternal("Param/Value/10E34A0A"));
    gv_vileProtossPing02 = PingLastCreated();
    VisRevealerCreate(gv_pLAYER_01_USER, RegionCircle(PointFromId(94), 5.0));
    gv_vileProtossRevealer02 = VisRevealerLastCreated();
    libSwaC_gf_CreateObjectivePing(true, PointFromId(94), StringExternal("Param/Value/DE6E4770"));
    gv_vileProtossPing03 = PingLastCreated();
    VisRevealerCreate(gv_pLAYER_01_USER, RegionCircle(PointFromId(533), 5.0));
    gv_vileProtossRevealer03 = VisRevealerLastCreated();
    libSwaC_gf_CreateObjectivePing(true, PointFromId(111), StringExternal("Param/Value/3254F59B"));
    gv_vileProtossPing04 = PingLastCreated();
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(35));
    gv_vileProtossRevealer04 = VisRevealerLastCreated();
    TriggerEnable(gt_VileRemovePings, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillProtossCreate_Init () {
    gt_ObjectiveKillProtossCreate = TriggerCreate("gt_ObjectiveKillProtossCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Protoss Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillProtossComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveKillProtossCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZEvolutionRoachObjective03", 2);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_VictoryProtossClearedCompleted, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillProtossComplete_Init () {
    gt_ObjectiveKillProtossComplete = TriggerCreate("gt_ObjectiveKillProtossComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Corpser Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroCorpserQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetupCorpser, true, true);
    TriggerExecute(gt_IntroCinematicCorpser, true, true);
    TriggerExecute(gt_IntroCinematicEndCorpser, true, true);
    TriggerExecute(gt_IntroCleanupCorpser, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCorpserQ_Init () {
    gt_IntroCorpserQ = TriggerCreate("gt_IntroCorpserQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup Corpser
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetupCorpser_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 0.0);
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    RegionPlayableMapSet(RegionFromId(5));
    UnitPauseAll(true);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    UnitGroupLoopBegin(gv_vileAreaUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_PauseUnit(UnitFromId(760), false);
    UnitGroupAdd(gv_cinematicTempUnits, UnitFromId(760));
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupAdd(gv_cinematicHiddenUnits, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitSetPropertyFixed(UnitFromId(464), c_unitPropShieldsMax, 200.0);
    UnitSetPropertyFixed(UnitFromId(464), c_unitPropShieldsPercent, 100.0);
    UnitGroupAdd(gv_cinematicTempUnits, UnitFromId(464));
    UnitGroupAdd(gv_cinematicTempUnits, UnitFromId(600));
    UnitGroupAdd(gv_cinematicTempUnits, UnitFromId(13));
    UnitGroupAdd(gv_cinematicTempUnits, UnitFromId(20));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetupCorpser_Init () {
    gt_IntroSetupCorpser = TriggerCreate("gt_IntroSetupCorpser_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic Corpser
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicCorpser_Func (bool testConds, bool runActions) {
    int autoEF864148_n;
    int autoEF864148_i;

    // Variable Declarations
    unit lv_scantipede;
    actor lv_scantHelper;
    unit lv_zealot1;
    unit lv_zealot2;
    unit lv_zealot3;
    unitgroup lv_introRoaches;

    // Variable Initialization
    lv_scantipede = UnitFromId(10);
    lv_scantHelper = null;
    lv_zealot1 = UnitFromId(600);
    lv_zealot2 = UnitFromId(13);
    lv_zealot3 = UnitFromId(20);
    lv_introRoaches = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    libSwaC_gf_PreparePlanetPortraitZoomIn("EvolutionPlanetRoachA", CameraInfoFromId(5), "IceWorld");
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(0);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_Roach|Line00013", c_transmissionDurationAdd, 0.0, true, 1, 0);
    TransmissionWait(TransmissionLastSent(), 2.0);
    libSwaC_gf_ZoomInPlanetPortrait();
    libSwaC_gf_HidePlanetPortrait();
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_EvoRoach1", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    Wait(1.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(473), 5.0, -1, 10, true);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_Roach|Line00017", c_transmissionDurationAdd, 0.0, false, 1, 0);
    Wait(4.0, c_timeGame);
    libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(0, 1, null, lv_scantipede, "Center");
    lv_scantHelper = libNtve_gf_ActorLastCreated();
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_Roach|Line00019", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    libNtve_gf_KillModel(lv_scantHelper);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(76), 0.0, -1, 10, true);
    autoEF864148_n = 9;
    autoEF864148_i = 1;
    while (autoEF864148_i <= autoEF864148_n) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "RoachBurrowed", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(10)));
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitGroupAdd(lv_introRoaches, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowRoachUp", 0)), c_orderQueueReplace);
        Wait(0.1, c_timeGame);
        autoEF864148_i = autoEF864148_i + 1;
    }
    Wait(1.5, c_timeGame);
    UnitGroupIssueOrder(lv_introRoaches, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitFromId(464))), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(871), 3.0, -1, 10, true);
    while (!((UnitIsAlive(UnitFromId(464)) == false))) {
        Wait(0.25, c_timeGame);
    }
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(5), 3.0, -1, 10, true);
    SoundPlay(SoundLink("BlueFuse_RoachEvo", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_blueFuseSound = SoundLastPlayed();
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(11), "XelNagaHullReactorConduit", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.2, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(12), "XelNagaHullReactorConduit", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.2, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(13), "XelNagaHullReactorConduit", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.2, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(14), "XelNagaHullReactorConduit", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.2, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(15), "XelNagaHullReactorConduit", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.2, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(16), "XelNagaHullReactorConduit", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.2, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(17), "XelNagaHullReactorConduit", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.2, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(33), "XelNagaHullReactorConduit", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.2, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(38), "XelNagaHullReactorConduit", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.2, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(2), "StarshipHoldingPenLarge", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(1.0, c_timeGame);
    libNtve_gf_PauseUnit(lv_scantipede, false);
    libNtve_gf_PauseUnit(lv_zealot1, false);
    UnitSetPropertyFixed(lv_zealot1, c_unitPropLifePercent, 30.0);
    UnitSetPropertyFixed(lv_zealot1, c_unitPropShieldsPercent, 20.0);
    UnitIssueOrder(lv_scantipede, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(603)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(872), 2.0, -1, 10, true);
    UnitIssueOrder(lv_zealot1, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(603)), c_orderQueueReplace);
    libNtve_gf_PauseUnit(lv_zealot2, false);
    UnitSetPropertyFixed(lv_zealot2, c_unitPropLifePercent, 30.0);
    UnitSetPropertyFixed(lv_zealot2, c_unitPropShieldsPercent, 10.0);
    libNtve_gf_PauseUnit(lv_zealot3, false);
    UnitSetPropertyFixed(lv_zealot3, c_unitPropLifePercent, 30.0);
    UnitSetPropertyFixed(lv_zealot3, c_unitPropShieldsPercent, 0.0);
    UnitIssueOrder(lv_scantipede, OrderTargetingUnit(AbilityCommand("attack", 0), lv_zealot1), c_orderQueueReplace);
    UnitIssueOrder(lv_scantipede, OrderTargetingUnit(AbilityCommand("attack", 0), lv_zealot2), c_orderQueueAddToEnd);
    UnitIssueOrder(lv_scantipede, OrderTargetingUnit(AbilityCommand("attack", 0), lv_zealot3), c_orderQueueAddToEnd);
    UnitIssueOrder(lv_zealot2, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(lv_scantipede)), c_orderQueueReplace);
    UnitIssueOrder(lv_zealot3, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(lv_scantipede)), c_orderQueueReplace);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(0);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_Roach|Line00020", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_Roach|Line00018", c_transmissionDurationAdd, 0.0, true, 1, 0);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicCorpser_Init () {
    gt_IntroCinematicCorpser = TriggerCreate("gt_IntroCinematicCorpser_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End Corpser
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEndCorpser_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEndCorpser_Init () {
    gt_IntroCinematicEndCorpser = TriggerCreate("gt_IntroCinematicEndCorpser_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup Corpser
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanupCorpser_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(gv_cinematicTempUnits);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitPauseAll(false);
    UnitGroupLoopBegin(gv_vileAreaUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    libSwaC_gf_HidePlanetPortrait();
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    SoundStop(gv_blueFuseSound, true);
    if ((gv_cinematicCompleted == false)) {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_EvoRoach1", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }
    else {
    }
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitGroupLoopBegin(UnitGroup("Roach", c_playerAny, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSelect(UnitGroupLoopCurrent(), gv_pLAYER_01_USER, true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.5, c_timeReal);
    ActorSend(ActorFromDoodad(DoodadFromId(711)), "SetVisibility");
    ActorSend(ActorFromDoodad(DoodadFromId(679)), "SetVisibility");
    ActorSend(ActorFromDoodad(DoodadFromId(678)), "SetVisibility");
    ActorSend(ActorFromDoodad(DoodadFromId(677)), "SetVisibility");
    ActorSend(ActorFromDoodad(DoodadFromId(676)), "SetVisibility");
    ActorSend(ActorFromDoodad(DoodadFromId(668)), "SetVisibility");
    ActorSend(ActorFromDoodad(DoodadFromId(667)), "SetVisibility");
    ActorSend(ActorFromDoodad(DoodadFromId(670)), "SetVisibility");
    ActorSend(ActorFromDoodad(DoodadFromId(669)), "SetVisibility");
    ActorSend(ActorFromDoodad(DoodadFromId(672)), "SetVisibility");
    ActorSend(ActorFromDoodad(DoodadFromId(671)), "SetVisibility");
    ActorSend(ActorFromDoodad(DoodadFromId(665)), "SetVisibility");
    ActorSend(ActorFromDoodad(DoodadFromId(664)), "SetVisibility");
    ActorSend(ActorFromDoodad(DoodadFromId(663)), "SetVisibility");
    ActorSend(ActorFromDoodad(DoodadFromId(759)), "SetVisibility");
    ActorSend(ActorFromDoodad(DoodadFromId(874)), "SetVisibility");
    ActorSend(ActorFromDoodad(DoodadFromId(873)), "SetVisibility");
    ActorSend(ActorFromDoodad(DoodadFromId(875)), "SetVisibility");
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(2), "StarshipHoldingPenLarge", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    UnitSetPropertyFixed(UnitFromId(10), c_unitPropLifePercent, 90.0);
    UnitSetPosition(UnitFromId(10), PointFromId(603), false);
    UnitIssueOrder(UnitFromId(10), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Blocker6x6", c_unitCreateIgnorePlacement, 0, PointFromId(878));
    UnitGroupLoopBegin(UnitGroup("ScantipedeParasiticSmall", gv_pLAYER_05_SCANT, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitKill(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(849)), lv_fadeDuration);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gv_inCinematic = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanupCorpser_Init () {
    gt_IntroCleanupCorpser = TriggerCreate("gt_IntroCleanupCorpser_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Vile Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroVileQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetupVile, true, true);
    TriggerExecute(gt_IntroCinematicVile, true, true);
    TriggerExecute(gt_IntroCinematicEndVile, true, true);
    TriggerExecute(gt_IntroCleanupVile, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroVileQ_Init () {
    gt_IntroVileQ = TriggerCreate("gt_IntroVileQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup Vile
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetupVile_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_IntroMusicCue, true, false);
    CameraSetValue(gv_pLAYER_01_USER, c_cameraValueDistance, (CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance) + 40.0), 2.0, -1, 10.0);
    CameraSetValue(gv_pLAYER_01_USER, c_cameraValuePitch, (CameraInfoGetValue(CameraInfoDefault(), c_cameraValuePitch) + 0.0), 2.0, -1, 10.0);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 2.0);
    CinematicFade(false, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gv_inCinematic = true;
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    RegionPlayableMapSet(RegionFromId(6));
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Space01", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_vileAreaUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    gv_introVileStartPoints[1] = PointFromId(322);
    gv_introVileStartPoints[2] = PointFromId(323);
    gv_introVileStartPoints[3] = PointFromId(325);
    gv_introVileStartPoints[4] = PointFromId(326);
    gv_introVileStartPoints[5] = PointFromId(1075);
    gv_introVileStartPoints[6] = PointFromId(1076);
    gv_introVileStartPoints[7] = PointFromId(662);
    gv_introVileStartPoints[8] = PointFromId(316);
    gv_introVileStartPoints[9] = PointFromId(105);
    gv_introVileStartPoints[10] = PointFromId(762);
    gv_introVileStartPoints[11] = PointFromId(911);
    gv_introVileStartPoints[12] = PointFromId(912);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetupVile_Init () {
    gt_IntroSetupVile = TriggerCreate("gt_IntroSetupVile_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Music Cue
//--------------------------------------------------------------------------------------------------
bool gt_IntroMusicCue_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZEvoMusicMain", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroMusicCue_Init () {
    gt_IntroMusicCue = TriggerCreate("gt_IntroMusicCue_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic Vile
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicVile_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_IntroVileRoaches, true, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    libSwaC_gf_PreparePlanetPortraitZoomIn("EvolutionPlanetRoachB", CameraInfoFromId(75), "IceWorld");
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(0);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_Roach|Line00016", c_transmissionDurationAdd, 0.0, true, 1, 0);
    TransmissionWait(TransmissionLastSent(), 2.0);
    libSwaC_gf_ZoomInPlanetPortrait();
    libSwaC_gf_HidePlanetPortrait();
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_IceWorld", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    Wait(1.0, c_timeGame);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_Roach|Line00027", c_transmissionDurationAdd, 0.0, true, 1, 0);
    TriggerStop(gt_IntroVileRoaches);
    SoundPlay(SoundLink("FX_RoachEvo_PoolShrinkage", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_poolShinkageSound = SoundLastPlayed();
    WaterSetState("PortZion|Alternate Setting", 10.0, c_wtcLinear);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(153), 10.0, -1, 10.0, true);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), c_animNameDefault, "Fidget", c_animFlagPlayForever, c_animTimeDefault);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_Roach|Line00021", c_transmissionDurationAdd, 0.0, false, 1, 0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 10.0, 0.0);
    Wait(2.666, c_timeGame);
    UnitGroupLoopBegin(gv_introVileDoomed);
    while (!UnitGroupLoopDone()) {
        UnitKill(UnitGroupLoopCurrent());
        Wait(0.4, c_timeGame);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.666, c_timeGame);
    UnitGroupLoopBegin(gv_introVileSurvivors);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), c_animNameDefault);
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("MorphRoachToVile", 0)), c_orderQueueReplace);
        Wait(0.2, c_timeGame);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_Roach|Line00025", c_transmissionDurationAdd, 0.0, true, 1, 0);
    TriggerExecute(gt_IntroVilePositioning, true, false);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_Roach|Line00023", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_Roach|Line00026", c_transmissionDurationAdd, 0.0, true, 1, 0);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicVile_Init () {
    gt_IntroCinematicVile = TriggerCreate("gt_IntroCinematicVile_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End Vile
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEndVile_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEndVile_Init () {
    gt_IntroCinematicEndVile = TriggerCreate("gt_IntroCinematicEndVile_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup Vile
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanupVile_Func (bool testConds, bool runActions) {
    int auto5DBD1C00_ae;
    int auto5DBD1C00_ai;

    // Variable Declarations
    fixed lv_fadeDuration;
    int lv_i;

    // Variable Initialization
    lv_fadeDuration = 0.0;
    lv_i = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_IntroVileRoaches);
    TriggerStop(gt_IntroVilePositioning);
    if ((gv_cinematicCompleted == true)) {
        UnitGroupLoopBegin(gv_introVileSurvivors);
        while (!UnitGroupLoopDone()) {
            UnitGroupAdd(gv_vilePlayerUnits, UnitGroupLoopCurrent());
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
    }
    else {
        UnitGroupLoopBegin(gv_cinematicTempUnits);
        while (!UnitGroupLoopDone()) {
            UnitRemove(UnitGroupLoopCurrent());
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        while (!UnitGroupLoopDone()) {
            UnitRemove(UnitGroupLoopCurrent());
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        auto5DBD1C00_ae = 12;
        auto5DBD1C00_ai = 1;
        lv_i = 1;
        while ((auto5DBD1C00_ai >= 0 && lv_i <= auto5DBD1C00_ae) || (auto5DBD1C00_ai <= 0 && lv_i >= auto5DBD1C00_ae)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "RoachVile", 0, gv_pLAYER_01_USER, gv_introVileStartPoints[lv_i]);
            UnitGroupAdd(gv_vilePlayerUnits, UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(92)), c_orderQueueAddToEnd);
            if (lv_i == auto5DBD1C00_ae) {
                break;
            }
            lv_i = lv_i + auto5DBD1C00_ai;
        }
    }
    UnitPauseAll(false);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    libSwaC_gf_HidePlanetPortrait();
    WaterPause("PortZion", true);
    WaterSetState("PortZion|Alternate Setting 2", 0.0, c_wtcLinear);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    SoundStop(gv_poolShinkageSound, true);
    if ((gv_cinematicCompleted == false)) {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Haven", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }
    else {
    }
    libSwaC_gf_EnableCampaignTechUnit(false, "RoachB", gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("RoachCorpser", false, gv_pLAYER_01_USER);
    libSwaC_gf_EnableCampaignTechUnit(true, "RoachA", gv_pLAYER_01_USER);
    UnitGroupSelect(gv_vilePlayerUnits, gv_pLAYER_01_USER, true);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), lv_fadeDuration, -1, 10, false);
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
        libNtve_gf_GlobalCinematicSetting(false);
    }
    else {
        lv_fadeDuration = 1.0;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
        libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(153)), lv_fadeDuration);
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
        libNtve_gf_GlobalCinematicSetting(false);
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    }
    Wait(lv_fadeDuration, c_timeGame);
    gv_inCinematic = false;
    TriggerExecute(gt_StartGameVileQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanupVile_Init () {
    gt_IntroCleanupVile = TriggerCreate("gt_IntroCleanupVile_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Vile Roaches
//--------------------------------------------------------------------------------------------------
bool gt_IntroVileRoaches_Func (bool testConds, bool runActions) {
    int autoF4372676_n;
    int autoF4372676_i;
    int autoDE45FD51_n;
    int autoDE45FD51_i;

    // Actions
    if (!runActions) {
        return true;
    }

    autoF4372676_n = 12;
    autoF4372676_i = 1;
    while (autoF4372676_i <= autoF4372676_n) {
        UnitCreate(1, "Roach", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(1)), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_introVileSurvivors, UnitLastCreated());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        autoF4372676_i = autoF4372676_i + 1;
    }
    autoDE45FD51_n = 5;
    autoDE45FD51_i = 1;
    while (autoDE45FD51_i <= autoDE45FD51_n) {
        UnitCreate(1, "Roach", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(1)), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_introVileDoomed, UnitLastCreated());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        autoDE45FD51_i = autoDE45FD51_i + 1;
    }
    while (true) {
        Wait(1.0, c_timeGame);
        UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        while (!UnitGroupLoopDone()) {
            if ((RandomInt(1, 16) == 1)) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(1))), c_orderQueueReplace);
            }
            else {
            }
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroVileRoaches_Init () {
    gt_IntroVileRoaches = TriggerCreate("gt_IntroVileRoaches_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Vile Positioning
//--------------------------------------------------------------------------------------------------
bool gt_IntroVilePositioning_Func (bool testConds, bool runActions) {
    int autoBC05C30B_ae;
    int autoBC05C30B_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization
    lv_i = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((UnitGroupCount(UnitGroup("RoachVile", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 10))) {
        Wait(0.1, c_timeGame);
    }
    UnitGroupLoopBegin(UnitGroup("RoachVile", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_introVileSurvivors, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    autoBC05C30B_ae = 12;
    autoBC05C30B_ai = 1;
    lv_i = 1;
    while ((autoBC05C30B_ai >= 0 && lv_i <= autoBC05C30B_ae) || (autoBC05C30B_ai <= 0 && lv_i >= autoBC05C30B_ae)) {
        UnitIssueOrder(UnitGroupUnit(gv_introVileSurvivors, lv_i), OrderTargetingPoint(AbilityCommand("move", 0), gv_introVileStartPoints[lv_i]), c_orderQueueReplace);
        UnitIssueOrder(UnitGroupUnit(gv_introVileSurvivors, lv_i), OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(92)), c_orderQueueAddToEnd);
        if (lv_i == autoBC05C30B_ae) {
            break;
        }
        lv_i = lv_i + autoBC05C30B_ai;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroVilePositioning_Init () {
    gt_IntroVilePositioning = TriggerCreate("gt_IntroVilePositioning_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Roach|Line00021", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Roach|Line00022", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    ObjectiveDestroyAll(PlayerGroupAll());
    CameraSetValue(gv_pLAYER_01_USER, c_cameraValueDistance, (CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance) + 40.0), 2.0, -1, 10.0);
    CameraSetValue(gv_pLAYER_01_USER, c_cameraValuePitch, (CameraInfoGetValue(CameraInfoDefault(), c_cameraValuePitch) + 0.0), 2.0, -1, 10.0);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 2.0);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    CinematicFade(false, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    UnitPauseAll(true);
    AITimePause(true);
    TriggerExecute(gt_Victory, true, false);
    TriggerExecute(gt_VictoryMusicCue, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Music Cue
//--------------------------------------------------------------------------------------------------
bool gt_VictoryMusicCue_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZEvoMusicMain", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryMusicCue_Init () {
    gt_VictoryMusicCue = TriggerCreate("gt_VictoryMusicCue_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04Music_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_DEBUGCorpser_Init();
    gt_DEBUGVile_Init();
    gt_ReinforcementsAllUnitsDead_Init();
    gt_StartGameCorpserQ_Init();
    gt_CreateScantipedePing_Init();
    gt_ScantipedeTakesDamage_Init();
    gt_ScantipedeKilled_Init();
    gt_MorphRoachesintoCorpsersQ_Init();
    gt_TransmissionEssenceAcquiredQ_Init();
    gt_TransmissionCorpserQ_Init();
    gt_TransmissionPushForwardQ_Init();
    gt_CorpserMusicCue_Init();
    gt_TransmissionZergSpottedQ_Init();
    gt_TransmissionLetRoachlingsTankQ_Init();
    gt_CreatePingsProtossForces_Init();
    gt_ProtossForces04WarpIn_Init();
    gt_WarpedUnitGrouping_Init();
    gt_ProtossKilledRemovePings_Init();
    gt_TransmissionAllProtossDeadQ_Init();
    gt_OutdoorAmbience_Init();
    gt_TransitiontoVileStrain_Init();
    gt_MayesCrystals_Init();
    gt_StartGameVileQ_Init();
    gt_TransmissionVileStrainQ_Init();
    gt_UnitFrozen_Init();
    gt_TransmissionFrozenImmortalQ_Init();
    gt_TransmissionFrozenArchonQ_Init();
    gt_TransmissionFrozenZealotQ_Init();
    gt_MergeArchons_Init();
    gt_ArchonsMerged_Init();
    gt_StalkerBlink01_Init();
    gt_StalkerBlink02_Init();
    gt_StalkerBlink03_Init();
    gt_VileMoreRoaches_Init();
    gt_TransmissionAdditionalRoachesQ_Init();
    gt_VileMusicCue_Init();
    gt_Colossus_Init();
    gt_TransmissionColossusEngagedQ_Init();
    gt_VileRemovePings_Init();
    gt_VictoryProtossClearedCompleted_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_TipMissionHelpQ_Init();
    gt_ObjectiveKillScantipedeCreate_Init();
    gt_ObjectiveKillScantipedeComplete_Init();
    gt_ObjectiveEliminateProtossCreate_Init();
    gt_ObjectiveEliminateProtossComplete_Init();
    gt_ObjectiveEscapeProtossLabCreate_Init();
    gt_ObjectiveEscapeProtossLabComplete_Init();
    gt_ObjectiveKillProtossCreate_Init();
    gt_ObjectiveKillProtossComplete_Init();
    gt_IntroCorpserQ_Init();
    gt_IntroSetupCorpser_Init();
    gt_IntroCinematicCorpser_Init();
    gt_IntroCinematicEndCorpser_Init();
    gt_IntroCleanupCorpser_Init();
    gt_IntroVileQ_Init();
    gt_IntroSetupVile_Init();
    gt_IntroMusicCue_Init();
    gt_IntroCinematicVile_Init();
    gt_IntroCinematicEndVile_Init();
    gt_IntroCleanupVile_Init();
    gt_IntroVileRoaches_Init();
    gt_IntroVilePositioning_Init();
    gt_VictoryQ_Init();
    gt_VictoryMusicCue_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}
