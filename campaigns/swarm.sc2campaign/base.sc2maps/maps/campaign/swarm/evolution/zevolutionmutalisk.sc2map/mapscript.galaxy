//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Mutalisk Evolution
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/SwarmLib"
include "TriggerLibs/SwarmCampaignLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libHots_InitLib();
    libSwaC_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_DOMINION = 2;
const int gv_pLAYER_03_ZERG_ALLY = 3;
const int gv_pLAYER_04_FERALZERG = 4;
const int gv_pLAYER_05_ZERG_ALLY = 5;

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_ReticleSize_Small = 0;
const int ge_ReticleSize_Medium = 1;
const int ge_ReticleSize_Large = 2;
const int ge_AirUnitType_Mutalisk = 0;
const int ge_AirUnitType_BroodLord = 1;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
bool gv_gameOver;
bool gv_inCinematic;
string gv_mapMusicTrack;
unitgroup gv_broodLordUnits;
unitgroup gv_viperUnits;
bool gv_broodLordActive;
bool gv_viperActive;
point gv_backupPoint;
bool gv_backupSuppressed;
unitgroup gv_broodLordsGroup;
unitgroup gv_feralBroodLordsGroup;
unitgroup gv_feralEscortGroup;
unitgroup gv_mutaliskGroup;
unitgroup gv_backupMutaliskGroup;
int gv_pingPFort;
bool gv_backupUnitsSelected;
unit gv_mutaSpawner;
int gv_reinforcementTransmission;
unitgroup gv_viperGroup;
unitgroup gv_aberrationGroup;
unitgroup gv_bunkers;
unitgroup gv_bunkerMarines;
int gv_pingCargoShip;
int gv_aberrationReinforcementAmount;
unitgroup gv_tanks;
int gv_objectiveCollectBroodLordEssence;
int gv_objectiveCountEssenceCollected;
int gv_objectiveMorphBroodLords;
int gv_objectiveCountBroodLordsMorphed;
int gv_objectiveDestroyPlanetaryFortress;
int gv_objectiveSecureCargoShip;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicTempUnits;
bool gv_cinematicCompleted;
actor[7] gv_introBroodMutaliskActors;
sound gv_mutaTransitionPipeSound;

void InitGlobals () {
    gv_broodLordUnits = UnitGroupEmpty();
    gv_viperUnits = UnitGroupEmpty();
    gv_broodLordsGroup = UnitGroupEmpty();
    gv_feralBroodLordsGroup = UnitGroupEmpty();
    gv_feralEscortGroup = UnitGroupEmpty();
    gv_mutaliskGroup = UnitGroupEmpty();
    gv_backupMutaliskGroup = UnitGroupEmpty();
    gv_pingPFort = c_invalidPingId;
    gv_reinforcementTransmission = c_invalidTransmissionId;
    gv_viperGroup = UnitGroupEmpty();
    gv_aberrationGroup = UnitGroupEmpty();
    gv_bunkers = UnitGroupEmpty();
    gv_bunkerMarines = UnitGroupEmpty();
    gv_pingCargoShip = c_invalidPingId;
    gv_aberrationReinforcementAmount = 3;
    gv_tanks = UnitGroupEmpty();
    gv_objectiveCollectBroodLordEssence = c_invalidObjectiveId;
    gv_objectiveMorphBroodLords = c_invalidObjectiveId;
    gv_objectiveDestroyPlanetaryFortress = c_invalidObjectiveId;
    gv_objectiveSecureCargoShip = c_invalidObjectiveId;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_RevitalizeUnitGroup (unitgroup lp_uNITGROUP);
void gf_AttachModelToEnemyUntilDamaged (int lp_size, unit lp_unit);
void gf_SpawnMutalisks (int lp_spawnCount, fixed lp_spawnInterval);
void gf_BroodLordPatrol (unitgroup lp_unitGroup);
void gf_DropinAirUnits (int lp_type, int lp_count);
void gf_AberrationHelper (unit lp_aberration, int lp_targetCliffLevel);
void gf_TankHelper (unit lp_tank);
void gf_MutaSwap (unit lp_mutalisk);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04MusicSound;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_DEBUGSkiptoPart2;
trigger gt_StartGameQ;
trigger gt_BroodLordMusicCue;
trigger gt_CatchUnitSpawnsBroodLord;
trigger gt_StartBroodLord;
trigger gt_BroodLordEscort;
trigger gt_BroodLordKilled;
trigger gt_BroodLordResourceFailsafe;
trigger gt_BroodLordMorphIntro;
trigger gt_BroodLordsMorphedQ;
trigger gt_VikingModeSwap;
trigger gt_DropPodTrigger;
trigger gt_DominionDropPod1;
trigger gt_DominionDropPod2;
trigger gt_DominionDropPod3;
trigger gt_PFortKilled;
trigger gt_BroodLordReinforcements1;
trigger gt_BroodLordReinforcements2;
trigger gt_TransmissionBroodLordReinforcementsQ;
trigger gt_TransmissionKillBroodLordsQ;
trigger gt_TransmissionMorphBroodLordsQ;
trigger gt_TransmissionBroodLordQ;
trigger gt_TransmissionMutaliskEscortQ;
trigger gt_TransmissionEndStalemateQ;
trigger gt_TransmissionDropPodsQ;
trigger gt_TransmissionPFortDestroyedQ;
trigger gt_ViperMusicCue;
trigger gt_StartViperQ;
trigger gt_AbductIntro;
trigger gt_TankIntro;
trigger gt_TreeTank;
trigger gt_TankSiege;
trigger gt_DisablingCloudIntro;
trigger gt_CloudHelper;
trigger gt_AllowConsumption;
trigger gt_TreeBackup1;
trigger gt_TreeBackup2;
trigger gt_AbductRefresher;
trigger gt_CargoShipReached;
trigger gt_ViperReinforcements;
trigger gt_ViperReinforcementsFinal;
trigger gt_TransmissionViperQ;
trigger gt_TransmissionUseAbductQ;
trigger gt_TransmissionTanksDetectedQ;
trigger gt_TransmissionGetItOffMe;
trigger gt_TransmissionDisablingCloudQ;
trigger gt_TransmissionBunkerDisabledQ;
trigger gt_TransmissionFinalDefensesQ;
trigger gt_TransmissionJoriumSecuredQ;
trigger gt_TransmissionAbductRefresherQ;
trigger gt_VictoryDestroythePlanetaryFortressCompleted;
trigger gt_VictoryDestroyAllTerranForcesCompleted;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_TipMissionHelpQ;
trigger gt_ObjectiveCollectBroodLordEssenceCreate;
trigger gt_ObjectiveCollectBroodLordEssenceUpdate;
trigger gt_ObjectiveCollectBroodLordEssenceComplete;
trigger gt_ObjectiveMorphBroodLordsCreate;
trigger gt_ObjectiveMorphBroodLordsUpdate;
trigger gt_ObjectiveMorphBroodLordsComplete;
trigger gt_ObjectiveMorphBroodLordsGroupUpdate;
trigger gt_ObjectiveDestroythePlanetaryFortressCreate;
trigger gt_ObjectiveDestroythePlanetaryFortressComplete;
trigger gt_ObjectiveSecuretheCargoShipCreate;
trigger gt_ObjectiveSecuretheCargoShipComplete;
trigger gt_IntroBroodLordQ;
trigger gt_IntroBroodLordSetup;
trigger gt_IntroBroodLordCinematic;
trigger gt_IntroBroodLordCinematicEnd;
trigger gt_IntroBroodLordCleanup;
trigger gt_TransitionQ;
trigger gt_TransitionSetup;
trigger gt_TransitionCinematic;
trigger gt_TransitionCinematicEnd;
trigger gt_TransitionCleanup;
trigger gt_IntroViperQ;
trigger gt_IntroViperSetup;
trigger gt_IntroViperMusicCue;
trigger gt_IntroViperCinematic;
trigger gt_IntroViperCinematicEnd;
trigger gt_IntroViperCleanup;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryMusicCue;

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_RevitalizeUnitGroup (unitgroup lp_uNITGROUP) {
    // Implementation
    SoundPlay(SoundLink("Protoss_PowerUpSmall", 1), PlayerGroupAll(), 100.0, 0.0);
    UnitGroupLoopBegin(lp_uNITGROUP);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_AttachModelToUnit(UnitGroupLoopCurrent(), "PrimalHealBuffImpactModel", "Ref_Center");
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergyPercent, 100.0);
    }
    UnitGroupLoopEnd();
}

trigger auto_gf_AttachModelToEnemyUntilDamaged_Trigger = null;
int auto_gf_AttachModelToEnemyUntilDamaged_lp_size;
unit auto_gf_AttachModelToEnemyUntilDamaged_lp_unit;

void gf_AttachModelToEnemyUntilDamaged (int lp_size, unit lp_unit) {
    auto_gf_AttachModelToEnemyUntilDamaged_lp_size = lp_size;
    auto_gf_AttachModelToEnemyUntilDamaged_lp_unit = lp_unit;

    if (auto_gf_AttachModelToEnemyUntilDamaged_Trigger == null) {
        auto_gf_AttachModelToEnemyUntilDamaged_Trigger = TriggerCreate("auto_gf_AttachModelToEnemyUntilDamaged_TriggerFunc");
    }

    TriggerExecute(auto_gf_AttachModelToEnemyUntilDamaged_Trigger, false, false);
}

bool auto_gf_AttachModelToEnemyUntilDamaged_TriggerFunc (bool testConds, bool runActions) {
    int lp_size = auto_gf_AttachModelToEnemyUntilDamaged_lp_size;
    unit lp_unit = auto_gf_AttachModelToEnemyUntilDamaged_lp_unit;

    int auto8D8B2651_val;

    // Implementation
    auto8D8B2651_val = lp_size;
    if (auto8D8B2651_val == ge_ReticleSize_Small) {
        libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(libSwaC_ge_CampaginReticleType_ZergEnemy, libSwaC_ge_CampaginReticleSize_Small, null, lp_unit, "Ref_Center");
    }
    else if (auto8D8B2651_val == ge_ReticleSize_Medium) {
        libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(libSwaC_ge_CampaginReticleType_ZergEnemy, libSwaC_ge_CampaginReticleSize_Medium, null, lp_unit, "Ref_Center");
    }
    else if (auto8D8B2651_val == ge_ReticleSize_Large) {
        libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(libSwaC_ge_CampaginReticleType_ZergEnemy, libSwaC_ge_CampaginReticleSize_Large, null, lp_unit, "Ref_Center");
    }
    else {
    }
    while (!((UnitGetPropertyFixed(lp_unit, c_unitPropLifePercent, c_unitPropCurrent) < 100.0))) {
        Wait(0.25, c_timeGame);
    }
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    return true;
}

trigger auto_gf_SpawnMutalisks_Trigger = null;
int auto_gf_SpawnMutalisks_lp_spawnCount;
fixed auto_gf_SpawnMutalisks_lp_spawnInterval;

void gf_SpawnMutalisks (int lp_spawnCount, fixed lp_spawnInterval) {
    auto_gf_SpawnMutalisks_lp_spawnCount = lp_spawnCount;
    auto_gf_SpawnMutalisks_lp_spawnInterval = lp_spawnInterval;

    if (auto_gf_SpawnMutalisks_Trigger == null) {
        auto_gf_SpawnMutalisks_Trigger = TriggerCreate("auto_gf_SpawnMutalisks_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpawnMutalisks_Trigger, false, false);
}

bool auto_gf_SpawnMutalisks_TriggerFunc (bool testConds, bool runActions) {
    int lp_spawnCount = auto_gf_SpawnMutalisks_lp_spawnCount;
    fixed lp_spawnInterval = auto_gf_SpawnMutalisks_lp_spawnInterval;

    int auto0D27CA7E_n;
    int auto0D27CA7E_i;

    // Implementation
    SoundPlay(SoundLink("Muta_Evo1_PipeExit", -1), PlayerGroupAll(), 100.0, 0.0);
    auto0D27CA7E_n = lp_spawnCount;
    for (auto0D27CA7E_i = 1; auto0D27CA7E_i <= auto0D27CA7E_n; auto0D27CA7E_i += 1) {
        UnitIssueOrder(gv_mutaSpawner, Order(AbilityCommand("InfestedVentSpawnMutalisk", 0)), c_orderQueueReplace);
        Wait(lp_spawnInterval, c_timeGame);
    }
    return true;
}

trigger auto_gf_BroodLordPatrol_Trigger = null;
unitgroup auto_gf_BroodLordPatrol_lp_unitGroup;

void gf_BroodLordPatrol (unitgroup lp_unitGroup) {
    auto_gf_BroodLordPatrol_lp_unitGroup = lp_unitGroup;

    if (auto_gf_BroodLordPatrol_Trigger == null) {
        auto_gf_BroodLordPatrol_Trigger = TriggerCreate("auto_gf_BroodLordPatrol_TriggerFunc");
    }

    TriggerExecute(auto_gf_BroodLordPatrol_Trigger, false, false);
}

bool auto_gf_BroodLordPatrol_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_unitGroup = auto_gf_BroodLordPatrol_lp_unitGroup;

    // Implementation
    while ((UnitGroupCount(lp_unitGroup, c_unitCountAlive) > 0)) {
        UnitGroupIssueOrder(lp_unitGroup, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(4)), c_orderQueueAddToEnd);
        while (!((UnitOrderCount(UnitGroupUnit(lp_unitGroup, 1)) == 0))) {
            Wait(0.25, c_timeGame);
        }
        Wait(3.0, c_timeGame);
        UnitGroupIssueOrder(lp_unitGroup, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(128)), c_orderQueueAddToEnd);
        while (!((UnitOrderCount(UnitGroupUnit(lp_unitGroup, 1)) == 0))) {
            Wait(0.25, c_timeGame);
        }
        Wait(3.0, c_timeGame);
    }
    return true;
}

trigger auto_gf_DropinAirUnits_Trigger = null;
int auto_gf_DropinAirUnits_lp_type;
int auto_gf_DropinAirUnits_lp_count;

void gf_DropinAirUnits (int lp_type, int lp_count) {
    auto_gf_DropinAirUnits_lp_type = lp_type;
    auto_gf_DropinAirUnits_lp_count = lp_count;

    if (auto_gf_DropinAirUnits_Trigger == null) {
        auto_gf_DropinAirUnits_Trigger = TriggerCreate("auto_gf_DropinAirUnits_TriggerFunc");
    }

    TriggerExecute(auto_gf_DropinAirUnits_Trigger, false, false);
}

bool auto_gf_DropinAirUnits_TriggerFunc (bool testConds, bool runActions) {
    int lp_type = auto_gf_DropinAirUnits_lp_type;
    int lp_count = auto_gf_DropinAirUnits_lp_count;

    int autoCF462546_val;
    int auto3185DCEF_n;
    int auto3185DCEF_i;
    int auto25987E1C_n;
    int auto25987E1C_i;

    // Variable Declarations
    unitgroup lv_reinforcements;
    point lv_centerPoint;
    point lv_spawnPoint;
    int lv_spawnTries;

    // Variable Initialization
    lv_reinforcements = UnitGroupEmpty();

    // Implementation
    if ((libNtve_gf_UnitGroupIsDead(gv_broodLordsGroup) == true)) {
        lv_centerPoint = CameraGetTarget(gv_pLAYER_01_USER);
    }
    else {
        lv_centerPoint = UnitGroupCenterOfGroup(gv_broodLordsGroup);
    }
    autoCF462546_val = lp_type;
    if (autoCF462546_val == ge_AirUnitType_Mutalisk) {
        auto3185DCEF_n = lp_count;
        for (auto3185DCEF_i = 1; auto3185DCEF_i <= auto3185DCEF_n; auto3185DCEF_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "MutaliskBroodlord", 0, gv_pLAYER_01_USER, lv_centerPoint);
            UnitGroupAdd(lv_reinforcements, UnitLastCreated());
            UnitGroupAdd(gv_mutaliskGroup, UnitLastCreated());
            libNtve_gf_PauseUnit(UnitLastCreated(), true);
            libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropHeight, 10.0);
        }
        Wait(1.0, c_timeGame);
        UnitGroupLoopBegin(lv_reinforcements);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            lv_spawnPoint = PointWithOffset(PointWithOffset(lv_centerPoint, 0.0, 0.0), RandomFixed(-2.5, 2.5), RandomFixed(-2.5, 2.5));
            while ((RegionContainsPoint(RegionFromId(5), lv_spawnPoint) == false)) {
                if ((lv_spawnTries >= 10)) {
                    lv_spawnPoint = PointFromId(40);
                    break;
                }
                else {
                    lv_spawnTries += 1;
                    lv_spawnPoint = PointWithOffset(PointWithOffset(lv_centerPoint, 0.0, 0.0), RandomFixed(-2.5, 2.5), RandomFixed(-2.5, 2.5));
                }
            }
            UnitSetPosition(UnitGroupLoopCurrent(), lv_spawnPoint, false);
            libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
            libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
            UnitSetHeight(UnitGroupLoopCurrent(), UnitTypeGetProperty("MutaliskBroodlord", c_unitPropHeight), 2.0);
        }
        UnitGroupLoopEnd();
    }
    else if (autoCF462546_val == ge_AirUnitType_BroodLord) {
        auto25987E1C_n = lp_count;
        for (auto25987E1C_i = 1; auto25987E1C_i <= auto25987E1C_n; auto25987E1C_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BroodLord", 0, gv_pLAYER_01_USER, lv_centerPoint);
            UnitGroupAdd(lv_reinforcements, UnitLastCreated());
            UnitGroupAdd(gv_broodLordsGroup, UnitLastCreated());
            libNtve_gf_PauseUnit(UnitLastCreated(), true);
            libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropHeight, 10.0);
        }
        Wait(1.0, c_timeGame);
        UnitGroupLoopBegin(lv_reinforcements);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            lv_spawnPoint = PointWithOffset(PointWithOffset(lv_centerPoint, 0.0, 0.0), RandomFixed(-2.5, 2.5), RandomFixed(-2.5, 2.5));
            while ((RegionContainsPoint(RegionFromId(5), lv_spawnPoint) == false)) {
                if ((lv_spawnTries >= 10)) {
                    lv_spawnPoint = PointFromId(40);
                    break;
                }
                else {
                    lv_spawnTries += 1;
                    lv_spawnPoint = PointWithOffset(PointWithOffset(lv_centerPoint, 0.0, 0.0), RandomFixed(-2.5, 2.5), RandomFixed(-2.5, 2.5));
                }
            }
            UnitSetPosition(UnitGroupLoopCurrent(), lv_spawnPoint, false);
            libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
            libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
            UnitSetHeight(UnitGroupLoopCurrent(), UnitTypeGetProperty("MutaliskBroodlord", c_unitPropHeight), 2.0);
        }
        UnitGroupLoopEnd();
    }
    else {
    }
    return true;
}

trigger auto_gf_AberrationHelper_Trigger = null;
unit auto_gf_AberrationHelper_lp_aberration;
int auto_gf_AberrationHelper_lp_targetCliffLevel;

void gf_AberrationHelper (unit lp_aberration, int lp_targetCliffLevel) {
    auto_gf_AberrationHelper_lp_aberration = lp_aberration;
    auto_gf_AberrationHelper_lp_targetCliffLevel = lp_targetCliffLevel;

    if (auto_gf_AberrationHelper_Trigger == null) {
        auto_gf_AberrationHelper_Trigger = TriggerCreate("auto_gf_AberrationHelper_TriggerFunc");
    }

    TriggerExecute(auto_gf_AberrationHelper_Trigger, false, false);
}

bool auto_gf_AberrationHelper_TriggerFunc (bool testConds, bool runActions) {
    unit lp_aberration = auto_gf_AberrationHelper_lp_aberration;
    int lp_targetCliffLevel = auto_gf_AberrationHelper_lp_targetCliffLevel;

    // Implementation
    libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(libSwaC_ge_CampaginReticleType_ZergMainObjective, libSwaC_ge_CampaginReticleSize_Medium, StringExternal("Param/Value/13B04441"), lp_aberration, "Ref_Center");
    while (!(((CliffLevel(UnitGetPosition(lp_aberration)) == lp_targetCliffLevel) || (UnitIsAlive(lp_aberration) == false)))) {
        Wait(0.25, c_timeGame);
    }
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    TextTagDestroy(TextTagLastCreated());
    return true;
}

trigger auto_gf_TankHelper_Trigger = null;
unit auto_gf_TankHelper_lp_tank;

void gf_TankHelper (unit lp_tank) {
    auto_gf_TankHelper_lp_tank = lp_tank;

    if (auto_gf_TankHelper_Trigger == null) {
        auto_gf_TankHelper_Trigger = TriggerCreate("auto_gf_TankHelper_TriggerFunc");
    }

    TriggerExecute(auto_gf_TankHelper_Trigger, false, false);
}

bool auto_gf_TankHelper_TriggerFunc (bool testConds, bool runActions) {
    unit lp_tank = auto_gf_TankHelper_lp_tank;

    // Variable Declarations
    text lv_text;
    bool lv_tankCallout;

    // Variable Initialization

    // Implementation
    if ((libNtve_gf_UnitInRegion(lp_tank, RegionFromId(7)) == true)) {
        lv_text = StringExternal("Param/Value/B6EE3A85");
    }
    else {
    }
    if ((libNtve_gf_UnitInRegion(lp_tank, RegionFromId(20)) == true)) {
        lv_tankCallout = true;
    }
    else {
    }
    libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(libSwaC_ge_CampaginReticleType_ZergEnemy, libSwaC_ge_CampaginReticleSize_Medium, lv_text, lp_tank, "Ref_Center");
    PingCreate(PlayerGroupAll(), "PingSimple", UnitGetPosition(lp_tank), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
    PingSetScale(PingLastCreated(), 0.8);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/5B59B205"));
    while (!((CliffLevel(UnitGetPosition(lp_tank)) == 2))) {
        Wait(0.25, c_timeGame);
    }
    PingDestroy(PingLastCreated());
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    TextTagDestroy(TextTagLastCreated());
    if ((lv_tankCallout == true)) {
        TriggerExecute(gt_TransmissionGetItOffMe, true, false);
    }
    else {
    }
    return true;
}

trigger auto_gf_MutaSwap_Trigger = null;
unit auto_gf_MutaSwap_lp_mutalisk;

void gf_MutaSwap (unit lp_mutalisk) {
    auto_gf_MutaSwap_lp_mutalisk = lp_mutalisk;

    if (auto_gf_MutaSwap_Trigger == null) {
        auto_gf_MutaSwap_Trigger = TriggerCreate("auto_gf_MutaSwap_TriggerFunc");
    }

    TriggerExecute(auto_gf_MutaSwap_Trigger, false, false);
}

bool auto_gf_MutaSwap_TriggerFunc (bool testConds, bool runActions) {
    unit lp_mutalisk = auto_gf_MutaSwap_lp_mutalisk;

    // Implementation
    UnitIssueOrder(lp_mutalisk, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(gv_mutaSpawner)), c_orderQueueReplace);
    while (!((UnitOrderCount(lp_mutalisk) == 0))) {
        Wait(0.25, c_timeGame);
    }
    UnitRemove(lp_mutalisk);
    return true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_ULoadCampaignData("ZEvolutionMutalisk");
    TriggerExecute(gt_Init01Technology, true, true);
    libSwaC_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03Units, true, true);
    TriggerExecute(gt_Init04MusicSound, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulties, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    libNtve_gf_PreloadModelObject("EvolutionPlanet", false);
    gv_broodLordActive = true;
    gv_viperActive = false;
    TriggerExecute(gt_IntroBroodLordQ, true, true);
    TriggerExecute(gt_StartGameQ, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("InfestedVentSpawnMutalisk", 0), true);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION, "SiegeTech", 1);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("SpireResearch", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("SpireResearch", 3), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_visionGroup01;
    playergroup lv_visionGroup02;

    // Variable Initialization
    lv_visionGroup01 = PlayerGroupEmpty();
    lv_visionGroup02 = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_03_ZERG_ALLY, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_05_ZERG_ALLY, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_04_FERALZERG, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION, gv_pLAYER_03_ZERG_ALLY, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION, gv_pLAYER_05_ZERG_ALLY, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION, gv_pLAYER_04_FERALZERG, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_03_ZERG_ALLY, gv_pLAYER_04_FERALZERG, libNtve_ge_AllianceSetting_Enemy);
    PlayerGroupAdd(lv_visionGroup01, gv_pLAYER_02_DOMINION);
    PlayerGroupAdd(lv_visionGroup01, gv_pLAYER_04_FERALZERG);
    libSwaC_gf_ShareVisionAmongPlayers(lv_visionGroup01);
    PlayerGroupAdd(lv_visionGroup02, gv_pLAYER_01_USER);
    PlayerGroupAdd(lv_visionGroup02, gv_pLAYER_03_ZERG_ALLY);
    PlayerGroupAdd(lv_visionGroup02, gv_pLAYER_05_ZERG_ALLY);
    libSwaC_gf_ShareVisionAmongPlayers(lv_visionGroup02);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropSuppliesMade, c_playerPropOperSetTo, 200);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION, c_playerPropSuppliesMade, c_playerPropOperSetTo, 200);
    PlayerModifyPropertyInt(gv_pLAYER_03_ZERG_ALLY, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_03_ZERG_ALLY, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_03_ZERG_ALLY, c_playerPropSuppliesMade, c_playerPropOperSetTo, 200);
    PlayerModifyPropertyInt(gv_pLAYER_05_ZERG_ALLY, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_05_ZERG_ALLY, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_05_ZERG_ALLY, c_playerPropSuppliesMade, c_playerPropOperSetTo, 200);
    PlayerSetState(gv_pLAYER_02_DOMINION, c_playerStateFidgetingEnabled, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    int autoAED4CC6F_n;
    int autoAED4CC6F_i;
    int autoE734F9C5_n;
    int autoE734F9C5_i;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_broodLordUnits, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_viperUnits, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    gv_mutaSpawner = UnitFromId(139);
    libNtve_gf_MakeUnitInvulnerable(gv_mutaSpawner, true);
    UnitSetState(gv_mutaSpawner, c_unitStateSelectable, false);
    UnitSetState(gv_mutaSpawner, c_unitStateHighlightable, false);
    UnitSetState(gv_mutaSpawner, c_unitStateTargetable, false);
    UnitGroupLoopBegin(UnitGroup("Medivac", gv_pLAYER_02_DOMINION, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    }
    UnitGroupLoopEnd();
    autoAED4CC6F_n = 8;
    for (autoAED4CC6F_i = 1; autoAED4CC6F_i <= autoAED4CC6F_n; autoAED4CC6F_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, "MutaliskBroodlord", 0, gv_pLAYER_01_USER, PointFromId(40));
        UnitGroupAdd(gv_backupMutaliskGroup, UnitLastCreated());
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropHeight, 10.0);
        libNtve_gf_PauseUnit(UnitLastCreated(), true);
        libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
    }
    autoE734F9C5_n = 3;
    for (autoE734F9C5_i = 1; autoE734F9C5_i <= autoE734F9C5_n; autoE734F9C5_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, "MutaliskViper", 0, gv_pLAYER_01_USER, PointFromId(124));
        UnitGroupAdd(gv_viperGroup, UnitLastCreated());
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropHeight, 10.0);
        libNtve_gf_PauseUnit(UnitLastCreated(), true);
        libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
    }
    UnitGroupLoopBegin(UnitGroup("BroodLord", gv_pLAYER_04_FERALZERG, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_feralBroodLordsGroup, UnitGroupLoopCurrent());
        libNtve_gf_UnitSetVariation(UnitGroupLoopCurrent(), "BroodLord", 0, "");
    }
    UnitGroupLoopEnd();
    CatalogFieldValueSet(c_gameCatalogUnit, "BroodLord", "Speed", gv_pLAYER_04_FERALZERG, "1");
    UnitGroupLoopBegin(UnitGroup("Mutalisk", gv_pLAYER_04_FERALZERG, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_feralEscortGroup, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    CatalogFieldValueSet(c_gameCatalogUnit, "Mutalisk", "Speed", gv_pLAYER_04_FERALZERG, "1");
    UnitGroupLoopBegin(UnitGroup("CreepTumorUsed", gv_pLAYER_03_ZERG_ALLY, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        CreepModify(UnitGetPosition(UnitGroupLoopCurrent()), 10.0, true, true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("CreepTumorUsed", gv_pLAYER_05_ZERG_ALLY, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    UnitGroupRemove(gv_broodLordUnits, UnitFromId(206));
    CreepModify(UnitGetPosition(UnitFromId(206)), 2.0, true, true);
    libNtve_gf_ShowHideUnit(UnitFromId(206), false);
    UnitGroupLoopBegin(UnitGroup("InfestedCocoon", 0, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateStatusBar, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateSelectable, false);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("InfestationSpire", 0, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateStatusBar, false);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("RichMineralField", c_playerAny, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateHighlightable, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateSelectable, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateTargetable, false);
        libSwaC_gf_SetUnitInfoTextCampaign(UnitGroupLoopCurrent(), null, StringExternal("Param/Value/DDB6F5C1"), null);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init04MusicSound_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mapMusicTrack = libSwaC_gf_MissionDefaultMusic();
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_BraxisAlpha", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04MusicSound_Init () {
    gt_Init04MusicSound = TriggerCreate("gt_Init04MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(17));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_AddMissionTipUserData("Brood Lord");
    libSwaC_gf_AddMissionTipUserData("Mutalisks");
    libSwaC_gf_AddMissionTipUserData("Viper");
    libSwaC_gf_AddMissionTipUserData("Abduct");
    libSwaC_gf_AddMissionTipUserData("Disabling Cloud");
    libSwaC_gf_AddMissionTipUserData("Siege Tanks");
    libSwaC_gf_AddMissionTipUserData("Reinforcements (ZEvoMutalisk)");
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Mutalisk", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Marine", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Marauder", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Goliath", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("SiegeTank", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Thor", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("VikingFighter", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Wraith", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Bunker", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("MissileTurret", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("PlanetaryFortress", false, gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Skip to Part 2
//--------------------------------------------------------------------------------------------------
bool gt_DEBUGSkiptoPart2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_StartBroodLord);
    TriggerEnable(gt_BroodLordReinforcements1, false);
    TriggerEnable(gt_BroodLordReinforcements2, false);
    TransmissionClearAll();
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerExecute(gt_StartViperQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DEBUGSkiptoPart2_Init () {
    gt_DEBUGSkiptoPart2 = TriggerCreate("gt_DEBUGSkiptoPart2_Func");
    TriggerAddEventChatMessage(gt_DEBUGSkiptoPart2, c_playerAny, "EVO2", true);
    TriggerAddEventChatMessage(gt_DEBUGSkiptoPart2, c_playerAny, "s2", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/F08DB9E6"), null, PointFromId(40));
    gv_backupSuppressed = true;
    TriggerQueueEnter();
    TriggerExecute(gt_StartBroodLord, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Brood Lord - Music Cue
//--------------------------------------------------------------------------------------------------
bool gt_BroodLordMusicCue_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("ZEvoMusicStinger", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZEvoMusicAlt", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BroodLordMusicCue_Init () {
    gt_BroodLordMusicCue = TriggerCreate("gt_BroodLordMusicCue_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Catch Unit Spawns - Brood Lord
//--------------------------------------------------------------------------------------------------
bool gt_CatchUnitSpawnsBroodLord_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_broodMutalisk;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_broodLordActive == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Mutalisk") || (UnitGetType(EventUnit()) == "BroodLord")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_inCinematic == true)) {
        UnitGroupAdd(gv_cinematicTempUnits, EventUnit());
    }
    else {
        if ((UnitGetType(EventUnit()) == "Mutalisk")) {
            UnitGroupAdd(gv_mutaliskGroup, EventUnit());
            if ((TriggerIsEnabled(gt_ObjectiveCollectBroodLordEssenceComplete) == false)) {
                libNtve_gf_ReplaceUnit(EventUnit(), "MutaliskBroodlord", libNtve_ge_ReplaceUnitOptions_NewUnitssMax);
                UnitGroupAdd(gv_mutaliskGroup, libNtve_gf_LastReplacedUnit());
            }
            else {
            }
            if ((TriggerIsEnabled(gt_BroodLordsMorphedQ) == true)) {
                SoundPlayOnUnit(SoundLink("Event_MutaliskEvo_MutaliskBirth", -1), PlayerGroupAll(), EventUnit(), 0.0, 100.0, 0.0);
            }
            else {
            }
        }
        else {
            UnitGroupAdd(gv_broodLordsGroup, EventUnit());
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CatchUnitSpawnsBroodLord_Init () {
    gt_CatchUnitSpawnsBroodLord = TriggerCreate("gt_CatchUnitSpawnsBroodLord_Func");
    TriggerAddEventUnitRegion(gt_CatchUnitSpawnsBroodLord, null, RegionFromId(5), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Brood Lord
//--------------------------------------------------------------------------------------------------
bool gt_StartBroodLord_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_feralUnits;

    // Variable Initialization
    lv_feralUnits = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SpawnMutalisks(6, 0.5);
    Wait(4.0, c_timeGame);
    gv_backupSuppressed = false;
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitGroupSelect(gv_mutaliskGroup, gv_pLAYER_01_USER, true);
    TriggerEnable(gt_BroodLordReinforcements1, true);
    TriggerExecute(gt_ObjectiveCollectBroodLordEssenceCreate, true, true);
    TriggerExecute(gt_TransmissionKillBroodLordsQ, true, true);
    TriggerExecute(gt_TipMissionHelpQ, true, false);
    UnitGroupLoopBegin(gv_feralBroodLordsGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShareVisionofUnit(UnitGroupLoopCurrent(), true, gv_pLAYER_01_USER);
        gf_AttachModelToEnemyUntilDamaged(ge_ReticleSize_Small, UnitGroupLoopCurrent());
        UnitGroupAdd(lv_feralUnits, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_feralEscortGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShareVisionofUnit(UnitGroupLoopCurrent(), true, gv_pLAYER_01_USER);
        UnitGroupAdd(lv_feralUnits, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    gf_BroodLordPatrol(lv_feralUnits);
    libSwaC_gf_CreateObjectivePing(true, UnitGroupCenterOfGroup(gv_feralBroodLordsGroup), StringExternal("Param/Value/788E9A3C"));
    while ((UnitGroupCount(gv_feralBroodLordsGroup, c_unitCountAlive) > 0)) {
        PingSetPosition(PingLastCreated(), UnitGroupCenterOfGroup(gv_feralBroodLordsGroup));
        Wait(0.1, c_timeGame);
    }
    PingDestroy(PingLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartBroodLord_Init () {
    gt_StartBroodLord = TriggerCreate("gt_StartBroodLord_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Brood Lord Escort
//--------------------------------------------------------------------------------------------------
bool gt_BroodLordEscort_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_04_FERALZERG))) {
            return false;
        }

        if (!(((UnitGroupHasUnit(gv_feralBroodLordsGroup, EventUnit()) == true) || (UnitGroupHasUnit(gv_feralEscortGroup, EventUnit()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    CatalogFieldValueSet(c_gameCatalogUnit, "Mutalisk", "Speed", gv_pLAYER_04_FERALZERG, CatalogFieldValueGet(c_gameCatalogUnit, "Mutalisk", "Speed", gv_pLAYER_01_USER));
    UnitGroupLoopBegin(gv_feralEscortGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupClosestToPoint(gv_mutaliskGroup, UnitGetPosition(UnitGroupLoopCurrent()))), c_orderQueueReplace);
    }
    UnitGroupLoopEnd();
    while ((UnitGroupCount(gv_feralEscortGroup, c_unitCountAlive) > 0)) {
        Wait(2.0, c_timeGame);
        UnitGroupLoopBegin(gv_feralEscortGroup);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupClosestToPoint(gv_mutaliskGroup, UnitGetPosition(UnitGroupLoopCurrent()))), c_orderQueueReplace);
        }
        UnitGroupLoopEnd();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BroodLordEscort_Init () {
    gt_BroodLordEscort = TriggerCreate("gt_BroodLordEscort_Func");
    TriggerAddEventUnitDamaged(gt_BroodLordEscort, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Brood Lord Killed
//--------------------------------------------------------------------------------------------------
bool gt_BroodLordKilled_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dNA;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_04_FERALZERG))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "BroodLord"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitGroupIsDead(gv_feralBroodLordsGroup) == true)) {
        gv_backupSuppressed = true;
    }
    else {
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "DNAPickup", 0, gv_pLAYER_01_USER, PointFromId(40));
    lv_dNA = UnitLastCreated();
    libSwaC_gf_SetUnitInfoTextCampaign(lv_dNA, null, StringExternal("Param/Value/D9503BC7"), null);
    UnitSetPosition(lv_dNA, UnitGetPosition(EventUnit()), false);
    UnitSetPropertyFixed(lv_dNA, c_unitPropHeight, 11.0);
    Wait(2.5, c_timeGame);
    SoundPlayAtPoint(SoundLink("Zerus_DNA_PkUp", -1), PlayerGroupAll(), UnitGetPosition(UnitLastCreated()), 0.0, 100.0, 0.0);
    libSwaC_gf_DestroyCacheAndGivePlayerResources(lv_dNA, libSwaC_ge_CacheResourceType_CustomResource, 1, null, StringExternal("Param/Value/A9DA2307"), gv_pLAYER_01_USER);
    TriggerExecute(gt_ObjectiveCollectBroodLordEssenceUpdate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BroodLordKilled_Init () {
    gt_BroodLordKilled = TriggerCreate("gt_BroodLordKilled_Func");
    TriggerAddEventUnitDied(gt_BroodLordKilled, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Brood Lord Resource Failsafe
//--------------------------------------------------------------------------------------------------
bool gt_BroodLordResourceFailsafe_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_broodLordActive == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(gt_ObjectiveMorphBroodLordsComplete) == true))) {
            return false;
        }

        if (!(((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) < 500) || (PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) < 500)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperAdd, 1000);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperAdd, 1000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BroodLordResourceFailsafe_Init () {
    gt_BroodLordResourceFailsafe = TriggerCreate("gt_BroodLordResourceFailsafe_Func");
    TriggerAddEventPlayerPropChange(gt_BroodLordResourceFailsafe, gv_pLAYER_01_USER, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_BroodLordResourceFailsafe, gv_pLAYER_01_USER, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Brood Lord Morph Intro
//--------------------------------------------------------------------------------------------------
bool gt_BroodLordMorphIntro_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_AddUnitTypeToUnitHelpPanel("BroodLord", false, gv_pLAYER_01_USER);
    libSwaC_gf_EnableCampaignTechUnit(true, "MutaliskA", gv_pLAYER_01_USER);
    gf_SpawnMutalisks(8, 0.5);
    Wait(5.0, c_timeGame);
    gv_backupSuppressed = false;
    UnitGroupSelect(gv_mutaliskGroup, gv_pLAYER_01_USER, true);
    TriggerExecute(gt_ObjectiveMorphBroodLordsCreate, true, true);
    TriggerExecute(gt_TransmissionMorphBroodLordsQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BroodLordMorphIntro_Init () {
    gt_BroodLordMorphIntro = TriggerCreate("gt_BroodLordMorphIntro_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Brood Lords Morphed Q
//--------------------------------------------------------------------------------------------------
bool gt_BroodLordsMorphedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionBroodLordQ, true, true);
    UnitGroupLoopBegin(gv_backupMutaliskGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetPosition(UnitGroupLoopCurrent(), PointWithOffset(PointWithOffset(UnitGroupCenterOfGroup(gv_broodLordsGroup), 4.0, 4.0), RandomFixed(-1.5, 1.5), RandomFixed(-1.5, 1.5)), false);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_RescueUnit(UnitGroupLoopCurrent(), gv_pLAYER_01_USER, true);
        UnitSetHeight(UnitGroupLoopCurrent(), UnitTypeGetProperty("MutaliskBroodlord", c_unitPropHeight), 2.0);
        UnitGroupAdd(gv_mutaliskGroup, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    SoundPlay(SoundLink("Event_MutaliskGroupVox", -1), PlayerGroupAll(), 100.0, 0.0);
    TriggerEnable(gt_BroodLordReinforcements2, true);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_TransmissionMutaliskEscortQ, true, true);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveDestroythePlanetaryFortressCreate, true, true);
    TriggerQueueExit();
    TriggerExecute(gt_TransmissionEndStalemateQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BroodLordsMorphedQ_Init () {
    gt_BroodLordsMorphedQ = TriggerCreate("gt_BroodLordsMorphedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Viking Mode Swap
//--------------------------------------------------------------------------------------------------
bool gt_VikingModeSwap_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_viking;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_broodLordActive == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "VikingAssault"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_viking = EventUnit();
    Wait(3.0, c_timeGame);
    UnitIssueOrder(lv_viking, Order(AbilityCommand("FighterMode", 0)), c_orderQueueReplace);
    while ((UnitIsAlive(lv_viking) == true)) {
        UnitIssueOrder(lv_viking, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupClosestToPoint(gv_broodLordsGroup, UnitGetPosition(lv_viking))), c_orderQueueAddToEnd);
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VikingModeSwap_Init () {
    gt_VikingModeSwap = TriggerCreate("gt_VikingModeSwap_Func");
    TriggerAddEventUnitAcquiredTarget(gt_VikingModeSwap, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Drop Pod Trigger
//--------------------------------------------------------------------------------------------------
bool gt_DropPodTrigger_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(23), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0))) {
            return false;
        }

        if (!((TriggerIsEnabled(gt_ObjectiveMorphBroodLordsComplete) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionDropPodsQ, true, false);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) != "VikingFighter")) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitFromId(66))), c_orderQueueReplace);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    Wait(5.0, c_timeGame);
    TriggerExecute(gt_DominionDropPod1, true, false);
    Wait(10.0, c_timeGame);
    TriggerExecute(gt_DominionDropPod2, true, false);
    Wait(10.0, c_timeGame);
    TriggerExecute(gt_DominionDropPod3, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DropPodTrigger_Init () {
    gt_DropPodTrigger = TriggerCreate("gt_DropPodTrigger_Func");
    TriggerAddEventTimePeriodic(gt_DropPodTrigger, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Drop Pod 1
//--------------------------------------------------------------------------------------------------
bool gt_DominionDropPod1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_dropUnits;

    // Variable Initialization
    lv_dropUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(6, "Marine", 0, gv_pLAYER_02_DOMINION, PointFromId(954));
    UnitGroupAddUnitGroup(lv_dropUnits, UnitLastCreatedGroup());
    libSwaC_gf_CreateDropPod(libSwaC_ge_DropPodRace_Terran, PointFromId(954), lv_dropUnits, true, gv_pLAYER_02_DOMINION);
    UnitGroupIssueOrder(lv_dropUnits, OrderTargetingUnitGroup(AbilityCommand("attack", 0), gv_broodLordsGroup), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionDropPod1_Init () {
    gt_DominionDropPod1 = TriggerCreate("gt_DominionDropPod1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Drop Pod 2
//--------------------------------------------------------------------------------------------------
bool gt_DominionDropPod2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_dropUnits;

    // Variable Initialization
    lv_dropUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(6, "Marine", 0, gv_pLAYER_02_DOMINION, PointFromId(955));
    UnitGroupAddUnitGroup(lv_dropUnits, UnitLastCreatedGroup());
    libSwaC_gf_CreateDropPod(libSwaC_ge_DropPodRace_Terran, PointFromId(955), lv_dropUnits, true, gv_pLAYER_02_DOMINION);
    UnitGroupIssueOrder(lv_dropUnits, OrderTargetingUnitGroup(AbilityCommand("attack", 0), gv_broodLordsGroup), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionDropPod2_Init () {
    gt_DominionDropPod2 = TriggerCreate("gt_DominionDropPod2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Drop Pod 3
//--------------------------------------------------------------------------------------------------
bool gt_DominionDropPod3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_dropUnits;

    // Variable Initialization
    lv_dropUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(9, "Marine", 0, gv_pLAYER_02_DOMINION, PointFromId(956));
    UnitGroupAddUnitGroup(lv_dropUnits, UnitLastCreatedGroup());
    libSwaC_gf_CreateDropPod(libSwaC_ge_DropPodRace_Terran, PointFromId(956), lv_dropUnits, true, gv_pLAYER_02_DOMINION);
    UnitGroupIssueOrder(lv_dropUnits, OrderTargetingUnitGroup(AbilityCommand("attack", 0), gv_broodLordsGroup), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionDropPod3_Init () {
    gt_DominionDropPod3 = TriggerCreate("gt_DominionDropPod3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PFort Killed
//--------------------------------------------------------------------------------------------------
bool gt_PFortKilled_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_BroodLordReinforcements1, false);
    TriggerEnable(gt_BroodLordReinforcements2, false);
    PingDestroy(gv_pingPFort);
    TriggerExecute(gt_VictoryDestroythePlanetaryFortressCompleted, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PFortKilled_Init () {
    gt_PFortKilled = TriggerCreate("gt_PFortKilled_Func");
    TriggerAddEventUnitDied(gt_PFortKilled, UnitRefFromUnit(UnitFromId(66)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Brood Lord Reinforcements 1
//--------------------------------------------------------------------------------------------------
bool gt_BroodLordReinforcements1_Func (bool testConds, bool runActions) {
    int auto5C290B0D_val;

    // Variable Declarations
    unitgroup lv_backupPausedUnits;

    // Variable Initialization
    lv_backupPausedUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_backupSuppressed == false))) {
            return false;
        }

        if (!((UnitGroupCount(gv_mutaliskGroup, c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((gv_objectiveCountBroodLordsMorphed == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((TriggerQueueIsEmpty() == true))) {
        Wait(1.0, c_timeGame);
    }
    TriggerQueuePause(true);
    TransmissionClearAll();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_UnitIsPaused(UnitGroupLoopCurrent()) == false)) {
            UnitGroupAdd(lv_backupPausedUnits, UnitGroupLoopCurrent());
            libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libSwaC_gf_CinematicModeSwarmCampaign(true, c_transitionDurationDefault);
    UnitClearSelection(gv_pLAYER_01_USER);
    CameraPan(gv_pLAYER_01_USER, PointFromId(40), 3.0, -1, 10.0, false);
    libNtve_gf_PauseUnit(gv_mutaSpawner, false);
    gf_SpawnMutalisks(8, 0.5);
    auto5C290B0D_val = RandomInt(1, 2);
    if (auto5C290B0D_val == 1) {
        libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Mutalisk|Line00062", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto5C290B0D_val == 2) {
        libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Mutalisk|Line00063", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Mutalisk|Line00062", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    Wait(5.0, c_timeGame);
    TransmissionWait(TransmissionLastSent(), 0.0);
    UnitGroupLoopBegin(lv_backupPausedUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    UnitGroupSelect(gv_mutaliskGroup, gv_pLAYER_01_USER, true);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.0);
    TriggerQueuePause(false);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BroodLordReinforcements1_Init () {
    gt_BroodLordReinforcements1 = TriggerCreate("gt_BroodLordReinforcements1_Func");
    TriggerEnable(gt_BroodLordReinforcements1, false);
    TriggerAddEventTimePeriodic(gt_BroodLordReinforcements1, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Brood Lord Reinforcements 2
//--------------------------------------------------------------------------------------------------
bool gt_BroodLordReinforcements2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_backupSuppressed == false))) {
            return false;
        }

        if (!(((UnitGroupCount(gv_mutaliskGroup, c_unitCountAlive) <= 2) || (UnitGroupCount(gv_broodLordsGroup, c_unitCountAlive) <= 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((TriggerQueueIsEmpty() == true)) {
        TriggerExecute(gt_TransmissionBroodLordReinforcementsQ, true, false);
    }
    else {
    }
    Wait(2.0, c_timeGame);
    gf_DropinAirUnits(ge_AirUnitType_Mutalisk, (8 - UnitGroupCount(gv_mutaliskGroup, c_unitCountAlive)));
    gf_DropinAirUnits(ge_AirUnitType_BroodLord, (8 - UnitGroupCount(gv_broodLordsGroup, c_unitCountAlive)));
    TransmissionWait(gv_reinforcementTransmission, 0.0);
    Wait(5.0, c_timeGame);
    if ((UnitIsAlive(UnitFromId(66)) == false)) {
        return true;
    }
    else {
        TriggerEnable(TriggerGetCurrent(), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BroodLordReinforcements2_Init () {
    gt_BroodLordReinforcements2 = TriggerCreate("gt_BroodLordReinforcements2_Func");
    TriggerEnable(gt_BroodLordReinforcements2, false);
    TriggerAddEventTimePeriodic(gt_BroodLordReinforcements2, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Brood Lord Reinforcements Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionBroodLordReinforcementsQ_Func (bool testConds, bool runActions) {
    int auto05EC1B14_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    auto05EC1B14_val = RandomInt(1, 2);
    if (auto05EC1B14_val == 1) {
        libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Mutalisk|Line00062", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto05EC1B14_val == 2) {
        libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Mutalisk|Line00063", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Mutalisk|Line00062", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    gv_reinforcementTransmission = TransmissionLastSent();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionBroodLordReinforcementsQ_Init () {
    gt_TransmissionBroodLordReinforcementsQ = TriggerCreate("gt_TransmissionBroodLordReinforcementsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Kill Brood Lords Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionKillBroodLordsQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Mutalisk|Line00055", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionKillBroodLordsQ_Init () {
    gt_TransmissionKillBroodLordsQ = TriggerCreate("gt_TransmissionKillBroodLordsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Morph Brood Lords Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionMorphBroodLordsQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Mutalisk|Line00033", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionMorphBroodLordsQ_Init () {
    gt_TransmissionMorphBroodLordsQ = TriggerCreate("gt_TransmissionMorphBroodLordsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Brood Lord Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionBroodLordQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Mutalisk|Line00001", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionBroodLordQ_Init () {
    gt_TransmissionBroodLordQ = TriggerCreate("gt_TransmissionBroodLordQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Mutalisk Escort Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionMutaliskEscortQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Mutalisk|Line00053", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionMutaliskEscortQ_Init () {
    gt_TransmissionMutaliskEscortQ = TriggerCreate("gt_TransmissionMutaliskEscortQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: End Stalemate Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionEndStalemateQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_BroodLordMusicCue, true, false);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Mutalisk|Line00006", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionEndStalemateQ_Init () {
    gt_TransmissionEndStalemateQ = TriggerCreate("gt_TransmissionEndStalemateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Drop Pods Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionDropPodsQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Mutalisk|Line00054", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionDropPodsQ_Init () {
    gt_TransmissionDropPodsQ = TriggerCreate("gt_TransmissionDropPodsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: PFort Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionPFortDestroyedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Mutalisk|Line00017", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionPFortDestroyedQ_Init () {
    gt_TransmissionPFortDestroyedQ = TriggerCreate("gt_TransmissionPFortDestroyedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Viper - Music Cue
//--------------------------------------------------------------------------------------------------
bool gt_ViperMusicCue_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("ZEvoMusicStinger", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZEvoMusicAlt", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ViperMusicCue_Init () {
    gt_ViperMusicCue = TriggerCreate("gt_ViperMusicCue_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Viper Q
//--------------------------------------------------------------------------------------------------
bool gt_StartViperQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveDestroyAll(PlayerGroupAll());
    libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/D64C04FD"));
    CameraSetValue(gv_pLAYER_01_USER, c_cameraValueDistance, (CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance) + 40.0), 2.0, -1, 10.0);
    CameraSetValue(gv_pLAYER_01_USER, c_cameraValuePitch, (CameraInfoGetValue(CameraInfoDefault(), c_cameraValuePitch) + 0.0), 2.0, -1, 10.0);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 2.0);
    CinematicFade(false, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gv_broodLordActive = false;
    gv_viperActive = true;
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(22), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_broodLordUnits, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_viperUnits, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION, "JackhammerConcussionGrenades", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION, "NeoSteelFrame", 1);
    libSwaC_gf_EnableCampaignTechUnit(true, "MutaliskB", gv_pLAYER_01_USER);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("DisablingCloud", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("ViperConsumption", 0), false);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Viper", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("InfestedAbomination", false, gv_pLAYER_01_USER);
    TriggerExecute(gt_IntroViperQ, true, true);
    gv_backupPoint = PointFromId(1277);
    gv_backupSuppressed = false;
    TriggerEnable(gt_ViperReinforcements, true);
    UIAlertClear(1);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/47F21B78"), null, PointFromId(124));
    TriggerQueueEnter();
    TriggerEnable(gt_VictoryDestroyAllTerranForcesCompleted, true);
    TriggerExecute(gt_ObjectiveSecuretheCargoShipCreate, true, true);
    TriggerExecute(gt_AbductIntro, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartViperQ_Init () {
    gt_StartViperQ = TriggerCreate("gt_StartViperQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Abduct Intro
//--------------------------------------------------------------------------------------------------
bool gt_AbductIntro_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionViperQ, true, true);
    libSwaC_gf_CreateReticleEffectAndTextTagAtPoint(libSwaC_ge_CampaginReticleType_ZergMainObjective, libSwaC_ge_CampaginReticleSize_Medium, StringExternal("Param/Value/4371B4F8"), PointFromId(71));
    SoundPlay(SoundLink("UI_TerranRescueUnit", -1), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedAbominationBurrowed", 0, gv_pLAYER_01_USER, PointFromId(6));
    UnitGroupAdd(gv_aberrationGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedAbominationBurrowed", 0, gv_pLAYER_01_USER, PointFromId(13));
    UnitGroupAdd(gv_aberrationGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedAbominationBurrowed", 0, gv_pLAYER_01_USER, PointFromId(10));
    UnitGroupAdd(gv_aberrationGroup, UnitLastCreated());
    UnitGroupIssueOrder(gv_aberrationGroup, Order(AbilityCommand("BurrowInfestedAbominationUp", 0)), c_orderQueueReplace);
    TriggerExecute(gt_TransmissionUseAbductQ, true, false);
    while (!(((libNtve_gf_UnitInRegion(UnitGroupUnit(gv_viperGroup, 1), RegionFromId(4)) == true) || (libNtve_gf_UnitInRegion(UnitGroupUnit(gv_viperGroup, 2), RegionFromId(4)) == true) || (libNtve_gf_UnitInRegion(UnitGroupUnit(gv_viperGroup, 3), RegionFromId(4)) == true)))) {
        Wait(0.25, c_timeGame);
    }
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    TextTagDestroy(TextTagLastCreated());
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("Yoink", 0), true);
    UnitGroupLoopBegin(gv_aberrationGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((CliffLevel(UnitGetPosition(UnitGroupLoopCurrent())) != 2)) {
            gf_AberrationHelper(UnitGroupLoopCurrent(), 2);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    while (!((((CliffLevel(UnitGetPosition(UnitGroupUnit(gv_aberrationGroup, 1))) == 2) && (CliffLevel(UnitGetPosition(UnitGroupUnit(gv_aberrationGroup, 2))) == 2) && (CliffLevel(UnitGetPosition(UnitGroupUnit(gv_aberrationGroup, 3))) == 2)) || (UnitGroupCount(UnitGroup("InfestedAbomination", gv_pLAYER_01_USER, RegionFromId(18), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 1)))) {
        Wait(0.25, c_timeGame);
    }
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("Yoink", 0), false);
    gv_backupPoint = PointFromId(912);
    TriggerExecute(gt_TankIntro, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AbductIntro_Init () {
    gt_AbductIntro = TriggerCreate("gt_AbductIntro_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tank Intro
//--------------------------------------------------------------------------------------------------
bool gt_TankIntro_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_TankSiege, true);
    TriggerExecute(gt_TransmissionTanksDetectedQ, true, false);
    UnitGroupLoopBegin(UnitGroup("SiegeTank", gv_pLAYER_02_DOMINION, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_tanks, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    Wait(2.0, c_timeGame);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "SiegeTank") || (UnitGetType(UnitGroupLoopCurrent()) == "SiegeTankSieged"))) {
            libNtve_gf_ShareVisionofUnit(UnitGroupLoopCurrent(), true, gv_pLAYER_01_USER);
            gf_TankHelper(UnitGroupLoopCurrent());
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TankIntro_Init () {
    gt_TankIntro = TriggerCreate("gt_TankIntro_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tree Tank
//--------------------------------------------------------------------------------------------------
bool gt_TreeTank_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_treeTank;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(15), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_UnitCreateFacingPoint(1, "SiegeTank", 0, gv_pLAYER_02_DOMINION, PointFromId(575), PointFromId(575));
    lv_treeTank = UnitLastCreated();
    libNtve_gf_ShareVisionofUnit(lv_treeTank, true, gv_pLAYER_01_USER);
    gf_AttachModelToEnemyUntilDamaged(ge_ReticleSize_Medium, lv_treeTank);
    Wait(0.1, c_timeGame);
    UnitGroupLoopBegin(UnitGroup(null, 0, RegionFromId(16), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitIssueOrder(lv_treeTank, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(100)), c_orderQueueReplace);
    Wait(1.5, c_timeGame);
    UnitGroupAdd(gv_tanks, lv_treeTank);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TreeTank_Init () {
    gt_TreeTank = TriggerCreate("gt_TreeTank_Func");
    TriggerAddEventTimePeriodic(gt_TreeTank, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tank Siege
//--------------------------------------------------------------------------------------------------
bool gt_TankSiege_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(gv_tanks, c_unitCountAlive) == 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    else {
        UnitGroupLoopBegin(gv_tanks);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "SiegeTank")) {
                if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 9.5), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
                    UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("SiegeMode", 0)), c_orderQueueReplace);
                }
                else {
                }
            }
            else {
                if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 13.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("Unsiege", 0)), c_orderQueueReplace);
                }
                else {
                }
            }
        }
        UnitGroupLoopEnd();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TankSiege_Init () {
    gt_TankSiege = TriggerCreate("gt_TankSiege_Func");
    TriggerEnable(gt_TankSiege, false);
    TriggerAddEventTimePeriodic(gt_TankSiege, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disabling Cloud Intro
//--------------------------------------------------------------------------------------------------
bool gt_DisablingCloudIntro_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(8), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_backupPoint = PointFromId(1275);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("DisablingCloud", 0), true);
    TriggerExecute(gt_TransmissionDisablingCloudQ, true, false);
    CameraPan(gv_pLAYER_01_USER, PointFromId(1264), 3.0, -1, 10.0, false);
    UnitGroupLoopBegin(gv_aberrationGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_UnitInRegion(UnitGroupLoopCurrent(), RegionCircle(PointFromId(1262), 20.0)) == true)) {
            libNtve_gf_MakeUnitUncommandable(UnitGroupLoopCurrent(), true);
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1262)), c_orderQueueReplace);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_viperGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_UnitInRegion(UnitGroupLoopCurrent(), RegionCircle(PointFromId(1262), 20.0)) == true)) {
            libNtve_gf_MakeUnitUncommandable(UnitGroupLoopCurrent(), true);
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1262)), c_orderQueueReplace);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShareVisionofUnit(UnitGroupLoopCurrent(), true, gv_pLAYER_01_USER);
    }
    UnitGroupLoopEnd();
    Wait(4.0, c_timeGame);
    UnitGroupLoopBegin(gv_aberrationGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_MakeUnitUncommandable(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_viperGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_MakeUnitUncommandable(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("DisablingCloud", 0), true);
    TriggerExecute(gt_CloudHelper, true, false);
    while (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
        Wait(0.25, c_timeGame);
    }
    TriggerExecute(gt_TransmissionFinalDefensesQ, true, false);
    TriggerExecute(gt_AllowConsumption, true, false);
    UnitGroupLoopBegin(gv_bunkers);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShareVisionofUnit(UnitGroupLoopCurrent(), true, gv_pLAYER_01_USER);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_tanks);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShareVisionofUnit(UnitGroupLoopCurrent(), true, gv_pLAYER_01_USER);
    }
    UnitGroupLoopEnd();
    gf_RevitalizeUnitGroup(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    TriggerExecute(gt_TreeBackup1, true, false);
    Wait(1.5, c_timeGame);
    TriggerExecute(gt_TreeBackup2, true, false);
    TriggerExecute(gt_AbductRefresher, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisablingCloudIntro_Init () {
    gt_DisablingCloudIntro = TriggerCreate("gt_DisablingCloudIntro_Func");
    TriggerAddEventTimePeriodic(gt_DisablingCloudIntro, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cloud Helper
//--------------------------------------------------------------------------------------------------
bool gt_CloudHelper_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateReticleEffectAndTextTagAtPoint(libSwaC_ge_CampaginReticleType_ZergEnemy, libSwaC_ge_CampaginReticleSize_Medium, StringExternal("Param/Value/2EFF1DA5"), PointFromId(627));
    while (!(((UnitHasBehavior(UnitGroupUnit(gv_bunkers, 1), "DisablingCloud") == true) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)))) {
        Wait(0.25, c_timeGame);
    }
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("DisablingCloud", 0), false);
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    TextTagDestroy(TextTagLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CloudHelper_Init () {
    gt_CloudHelper = TriggerCreate("gt_CloudHelper_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Allow Consumption
//--------------------------------------------------------------------------------------------------
bool gt_AllowConsumption_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("ViperConsumption", 0), true);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("ViperConsumption", 0), true);
    Wait(2.0, c_timeGame);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("ViperConsumption", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AllowConsumption_Init () {
    gt_AllowConsumption = TriggerCreate("gt_AllowConsumption_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tree Backup 1
//--------------------------------------------------------------------------------------------------
bool gt_TreeBackup1_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_UnitCreateFacingPoint(1, "InfestedAbomination", 0, gv_pLAYER_01_USER, PointFromId(167), PointFromId(627));
    UnitGroupAdd(gv_aberrationGroup, UnitLastCreated());
    libSwaC_gf_CreateDropPod(libSwaC_ge_DropPodRace_Zerg, PointFromId(167), UnitLastCreatedGroup(), false, gv_pLAYER_01_USER);
    gv_aberrationReinforcementAmount += 1;
    Wait(2.2, c_timeGame);
    UnitGroupLoopBegin(UnitGroup(null, 0, RegionFromId(13), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumorBurrowed", 0, gv_pLAYER_03_ZERG_ALLY, PointFromId(167));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TreeBackup1_Init () {
    gt_TreeBackup1 = TriggerCreate("gt_TreeBackup1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tree Backup 2
//--------------------------------------------------------------------------------------------------
bool gt_TreeBackup2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_UnitCreateFacingPoint(1, "InfestedAbomination", 0, gv_pLAYER_01_USER, PointFromId(168), PointFromId(627));
    UnitGroupAdd(gv_aberrationGroup, UnitLastCreated());
    libSwaC_gf_CreateDropPod(libSwaC_ge_DropPodRace_Zerg, PointFromId(168), UnitLastCreatedGroup(), false, gv_pLAYER_01_USER);
    gv_aberrationReinforcementAmount += 1;
    Wait(2.2, c_timeGame);
    UnitGroupLoopBegin(UnitGroup(null, 0, RegionFromId(19), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumorBurrowed", 0, gv_pLAYER_03_ZERG_ALLY, PointFromId(168));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TreeBackup2_Init () {
    gt_TreeBackup2 = TriggerCreate("gt_TreeBackup2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Abduct Refresher
//--------------------------------------------------------------------------------------------------
bool gt_AbductRefresher_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(20.0, c_timeGame);
    UnitGroupLoopBegin(gv_aberrationGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((CliffLevel(UnitGetPosition(UnitGroupLoopCurrent())) == 3) && (libNtve_gf_UnitInRegion(UnitGroupLoopCurrent(), RegionFromId(3)) == false) && (libNtve_gf_UnitInRegion(UnitGroupLoopCurrent(), RegionFromId(9)) == false)) {
            return true;
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_TransmissionAbductRefresherQ, true, false);
    libSwaC_gf_CreateReticleEffectAndTextTagAtPoint(libSwaC_ge_CampaginReticleType_ZergMainObjective, libSwaC_ge_CampaginReticleSize_Medium, StringExternal("Param/Value/4DBD495B"), PointFromId(129));
    while (!(((libNtve_gf_UnitInRegion(UnitGroupUnit(gv_viperGroup, 1), RegionFromId(10)) == true) || (libNtve_gf_UnitInRegion(UnitGroupUnit(gv_viperGroup, 2), RegionFromId(10)) == true) || (libNtve_gf_UnitInRegion(UnitGroupUnit(gv_viperGroup, 3), RegionFromId(10)) == true)))) {
        Wait(0.25, c_timeGame);
    }
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    TextTagDestroy(TextTagLastCreated());
    UnitGroupLoopBegin(gv_aberrationGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        gf_AberrationHelper(UnitGroupLoopCurrent(), 3);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AbductRefresher_Init () {
    gt_AbductRefresher = TriggerCreate("gt_AbductRefresher_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cargo Ship Reached
//--------------------------------------------------------------------------------------------------
bool gt_CargoShipReached_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(12), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_pingCargoShip);
    gv_backupPoint = PointFromId(1276);
    TriggerEnable(gt_ViperReinforcementsFinal, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CargoShipReached_Init () {
    gt_CargoShipReached = TriggerCreate("gt_CargoShipReached_Func");
    TriggerAddEventTimePeriodic(gt_CargoShipReached, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Viper Reinforcements
//--------------------------------------------------------------------------------------------------
bool gt_ViperReinforcements_Func (bool testConds, bool runActions) {
    int autoBF931389_val;
    int auto4CB9BFAA_n;
    int auto4CB9BFAA_i;
    int auto4A2DE429_n;
    int auto4A2DE429_i;

    // Variable Declarations
    unitgroup lv_backupUnits;
    unitgroup lv_backupPausedUnits;

    // Variable Initialization
    lv_backupUnits = UnitGroupEmpty();
    lv_backupPausedUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_backupSuppressed == false))) {
            return false;
        }

        if (!((gv_viperActive == true))) {
            return false;
        }

        if (!((((libNtve_gf_UnitGroupIsDead(gv_viperGroup) == true) && (gv_backupPoint != PointFromId(1276))) || ((libNtve_gf_UnitGroupIsDead(gv_aberrationGroup) == true) && (TriggerIsEnabled(gt_TankIntro) == false))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((TriggerQueueIsEmpty() == true))) {
        Wait(1.0, c_timeGame);
    }
    TriggerQueuePause(true);
    TransmissionClearAll();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_UnitIsPaused(UnitGroupLoopCurrent()) == false)) {
            UnitGroupAdd(lv_backupPausedUnits, UnitGroupLoopCurrent());
            libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libSwaC_gf_CinematicModeSwarmCampaign(true, c_transitionDurationImmediate);
    UnitClearSelection(gv_pLAYER_01_USER);
    CameraPan(gv_pLAYER_01_USER, gv_backupPoint, 0.0, -1, 10.0, false);
    autoBF931389_val = RandomInt(1, 2);
    if (autoBF931389_val == 1) {
        libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Mutalisk|Line00062", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoBF931389_val == 2) {
        libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Mutalisk|Line00063", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Mutalisk|Line00062", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    UnitGroupLoopBegin(gv_viperGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    auto4CB9BFAA_n = 3;
    for (auto4CB9BFAA_i = 1; auto4CB9BFAA_i <= auto4CB9BFAA_n; auto4CB9BFAA_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Viper", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionCircle(gv_backupPoint, 2.0)));
        UnitGroupAdd(lv_backupUnits, UnitLastCreated());
        UnitGroupAdd(gv_viperGroup, UnitLastCreated());
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropHeight, 10.0);
    }
    Wait(0.1, c_timeGame);
    UnitGroupLoopBegin(gv_viperGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetHeight(UnitGroupLoopCurrent(), 3.75, 3.0);
    }
    UnitGroupLoopEnd();
    if ((gv_backupPoint != PointFromId(1277))) {
        UnitGroupLoopBegin(gv_aberrationGroup);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitRemove(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        auto4A2DE429_n = gv_aberrationReinforcementAmount;
        for (auto4A2DE429_i = 1; auto4A2DE429_i <= auto4A2DE429_n; auto4A2DE429_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedAbominationBurrowed", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionCircle(gv_backupPoint, 2.0)));
            UnitGroupAdd(lv_backupUnits, UnitLastCreated());
            UnitGroupAdd(gv_aberrationGroup, UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowInfestedAbominationUp", 0)), c_orderQueueReplace);
        }
    }
    else {
    }
    UnitGroupSelect(lv_backupUnits, gv_pLAYER_01_USER, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    Wait(3.0, c_timeReal);
    TransmissionWait(TransmissionLastSent(), 0.0);
    UnitGroupLoopBegin(lv_backupPausedUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.0);
    TriggerQueuePause(false);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ViperReinforcements_Init () {
    gt_ViperReinforcements = TriggerCreate("gt_ViperReinforcements_Func");
    TriggerEnable(gt_ViperReinforcements, false);
    TriggerAddEventTimePeriodic(gt_ViperReinforcements, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Viper Reinforcements Final
//--------------------------------------------------------------------------------------------------
bool gt_ViperReinforcementsFinal_Func (bool testConds, bool runActions) {
    int autoA733E263_n;
    int autoA733E263_i;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_backupSuppressed == false))) {
            return false;
        }

        if (!((gv_viperActive == true))) {
            return false;
        }

        if (!((gv_backupPoint == PointFromId(1276)))) {
            return false;
        }

        if (!((libNtve_gf_UnitGroupIsDead(gv_viperGroup) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoA733E263_n = 3;
    for (autoA733E263_i = 1; autoA733E263_i <= autoA733E263_n; autoA733E263_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Viper", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionCircle(PointFromId(1276), 2.0)));
        UnitGroupAdd(gv_viperGroup, UnitLastCreated());
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropHeight, 10.0);
    }
    Wait(0.1, c_timeGame);
    UnitGroupLoopBegin(gv_viperGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetHeight(UnitGroupLoopCurrent(), 3.75, 3.0);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ViperReinforcementsFinal_Init () {
    gt_ViperReinforcementsFinal = TriggerCreate("gt_ViperReinforcementsFinal_Func");
    TriggerEnable(gt_ViperReinforcementsFinal, false);
    TriggerAddEventTimePeriodic(gt_ViperReinforcementsFinal, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Viper Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionViperQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Mutalisk|Line00020", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionViperQ_Init () {
    gt_TransmissionViperQ = TriggerCreate("gt_TransmissionViperQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Use Abduct Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionUseAbductQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Mutalisk|Line00025", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionUseAbductQ_Init () {
    gt_TransmissionUseAbductQ = TriggerCreate("gt_TransmissionUseAbductQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Tanks Detected Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionTanksDetectedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Mutalisk|Line00029", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionTanksDetectedQ_Init () {
    gt_TransmissionTanksDetectedQ = TriggerCreate("gt_TransmissionTanksDetectedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Get It Off Me
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionGetItOffMe_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Mutalisk|Line00050", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionGetItOffMe_Init () {
    gt_TransmissionGetItOffMe = TriggerCreate("gt_TransmissionGetItOffMe_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Disabling Cloud Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionDisablingCloudQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Mutalisk|Line00030", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionDisablingCloudQ_Init () {
    gt_TransmissionDisablingCloudQ = TriggerCreate("gt_TransmissionDisablingCloudQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Bunker Disabled Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionBunkerDisabledQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((RegionContainsPoint(RegionFromId(11), EventUnitTargetPoint()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((UnitHasBehavior(UnitGroupUnit(gv_bunkers, 1), "DisablingCloud") == true))) {
        Wait(0.25, c_timeGame);
    }
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Mutalisk|Line00031", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionBunkerDisabledQ_Init () {
    gt_TransmissionBunkerDisabledQ = TriggerCreate("gt_TransmissionBunkerDisabledQ_Func");
    TriggerAddEventUnitAbility(gt_TransmissionBunkerDisabledQ, null, AbilityCommand("DisablingCloud", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Final Defenses Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionFinalDefensesQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_ViperMusicCue, true, false);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Mutalisk|Line00040", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionFinalDefensesQ_Init () {
    gt_TransmissionFinalDefensesQ = TriggerCreate("gt_TransmissionFinalDefensesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Jorium Secured Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionJoriumSecuredQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Mutalisk|Line00018", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Mutalisk|Line00019", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionJoriumSecuredQ_Init () {
    gt_TransmissionJoriumSecuredQ = TriggerCreate("gt_TransmissionJoriumSecuredQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Abduct Refresher Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionAbductRefresherQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Mutalisk|Line00051", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionAbductRefresherQ_Init () {
    gt_TransmissionAbductRefresherQ = TriggerCreate("gt_TransmissionAbductRefresherQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory {Destroy the Planetary Fortress} Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryDestroythePlanetaryFortressCompleted_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveMorphBroodLordsComplete, true, false);
    TriggerExecute(gt_ObjectiveDestroythePlanetaryFortressComplete, true, true);
    TransmissionClearAll();
    TriggerExecute(gt_TransmissionPFortDestroyedQ, true, true);
    TriggerExecute(gt_StartViperQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryDestroythePlanetaryFortressCompleted_Init () {
    gt_VictoryDestroythePlanetaryFortressCompleted = TriggerCreate("gt_VictoryDestroythePlanetaryFortressCompleted_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory {Destroy All Terran Forces} Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryDestroyAllTerranForcesCompleted_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(gv_tanks, c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((UnitGroupCount(gv_bunkers, c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((UnitGroupCount(gv_bunkerMarines, c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryDestroyAllTerranForcesCompleted_Init () {
    gt_VictoryDestroyAllTerranForcesCompleted = TriggerCreate("gt_VictoryDestroyAllTerranForcesCompleted_Func");
    TriggerEnable(gt_VictoryDestroyAllTerranForcesCompleted, false);
    TriggerAddEventTimePeriodic(gt_VictoryDestroyAllTerranForcesCompleted, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveSecuretheCargoShipComplete, true, true);
    TriggerExecute(gt_TransmissionJoriumSecuredQ, true, true);
    libSwaC_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_VictoryCheat, false);
    TriggerEnable(gt_DefeatCheat, false);
    TriggerEnable(gt_Defeat, false);
    gv_gameOver = true;
    libSwaC_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_VictoryCheat, false);
    TriggerEnable(gt_DefeatCheat, false);
    TriggerEnable(gt_Victory, false);
    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Mission Help Q
//--------------------------------------------------------------------------------------------------
bool gt_TipMissionHelpQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_DisplayMissionTip(StringExternal("Param/Value/016063FF"));
    Wait(libSwaC_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipMissionHelpQ_Init () {
    gt_TipMissionHelpQ = TriggerCreate("gt_TipMissionHelpQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Collect Brood Lord Essence Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCollectBroodLordEssenceCreate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    libSwaC_gf_CreateObjectiveCampaign("ZEvolutionMutaliskObjective1");
    libSwaC_gf_SetMissionObjectiveProgress2("ZEvolutionMutaliskObjective1", gv_objectiveCountEssenceCollected, true, null, true);
    gv_objectiveCollectBroodLordEssence = ObjectiveLastCreated();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCollectBroodLordEssenceCreate_Init () {
    gt_ObjectiveCollectBroodLordEssenceCreate = TriggerCreate("gt_ObjectiveCollectBroodLordEssenceCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Collect Brood Lord Essence Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCollectBroodLordEssenceUpdate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveCollectBroodLordEssenceCreate, true, false);
    gv_objectiveCountEssenceCollected += 1;
    libSwaC_gf_SetMissionObjectiveProgress2("ZEvolutionMutaliskObjective1", gv_objectiveCountEssenceCollected, true, null, true);
    if ((gv_objectiveCountEssenceCollected == 2)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_ObjectiveCollectBroodLordEssenceComplete, true, true);
        TriggerExecute(gt_TransitionQ, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCollectBroodLordEssenceUpdate_Init () {
    gt_ObjectiveCollectBroodLordEssenceUpdate = TriggerCreate("gt_ObjectiveCollectBroodLordEssenceUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Collect Brood Lord Essence Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCollectBroodLordEssenceComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveCollectBroodLordEssenceCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZEvolutionMutaliskObjective1", libSwaC_ge_MissionObjectiveState_Completed);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCollectBroodLordEssenceComplete_Init () {
    gt_ObjectiveCollectBroodLordEssenceComplete = TriggerCreate("gt_ObjectiveCollectBroodLordEssenceComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Morph Brood Lords Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveMorphBroodLordsCreate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_ObjectiveMorphBroodLordsUpdate, true);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    libSwaC_gf_CreateObjectiveCampaign("ZEvolutionMutaliskObjective2");
    libSwaC_gf_SetMissionObjectiveProgress2("ZEvolutionMutaliskObjective2", gv_objectiveCountBroodLordsMorphed, false, null, false);
    gv_objectiveMorphBroodLords = ObjectiveLastCreated();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("MutaliskMorphToBroodLord", 0), true);
    if ((UnitGetType(UnitGroupUnit(UnitGroupSelected(gv_pLAYER_01_USER), 1)) != "MutaliskBroodlord") && (UnitGetType(UnitGroupUnit(UnitGroupSelected(gv_pLAYER_01_USER), 1)) != "BroodLordCocoon")) {
        UnitGroupLoopBegin(gv_mutaliskGroup);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "MutaliskBroodlord")) {
                libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(libSwaC_ge_CampaginReticleType_ZergMainObjective, libSwaC_ge_CampaginReticleSize_Small, null, UnitGroupLoopCurrent(), "Ref_Center");
                libHots_gf_StoreActorForUnit(UnitGroupLoopCurrent(), 1, libNtve_gf_ActorLastCreated());
            }
            else {
            }
        }
        UnitGroupLoopEnd();
        while (!(((UnitGetType(UnitGroupUnit(UnitGroupSelected(gv_pLAYER_01_USER), 1)) == "MutaliskBroodlord") || (UnitGetType(UnitGroupUnit(UnitGroupSelected(gv_pLAYER_01_USER), 1)) == "BroodLordCocoon")))) {
            Wait(0.25, c_timeGame);
        }
        UnitGroupLoopBegin(gv_mutaliskGroup);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitGroupLoopCurrent(), 1));
        }
        UnitGroupLoopEnd();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveMorphBroodLordsCreate_Init () {
    gt_ObjectiveMorphBroodLordsCreate = TriggerCreate("gt_ObjectiveMorphBroodLordsCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Morph Brood Lords Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveMorphBroodLordsUpdate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_UnitGroupIsDead(gv_broodLordsGroup) == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitGroupIsDead(gv_mutaliskGroup) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_ObjectiveMorphBroodLordsGroupUpdate, false);
    TriggerEnable(gt_BroodLordReinforcements1, false);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 0);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 0);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("MutaliskMorphToBroodLord", 0), false);
    TriggerExecute(gt_ObjectiveMorphBroodLordsComplete, true, true);
    TriggerExecute(gt_BroodLordsMorphedQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveMorphBroodLordsUpdate_Init () {
    gt_ObjectiveMorphBroodLordsUpdate = TriggerCreate("gt_ObjectiveMorphBroodLordsUpdate_Func");
    TriggerEnable(gt_ObjectiveMorphBroodLordsUpdate, false);
    TriggerAddEventTimePeriodic(gt_ObjectiveMorphBroodLordsUpdate, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Morph Brood Lords Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveMorphBroodLordsComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_ObjectiveMorphBroodLordsUpdate, false);
    TriggerEnable(gt_ObjectiveMorphBroodLordsGroupUpdate, false);
    TriggerExecute(gt_ObjectiveMorphBroodLordsCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZEvolutionMutaliskObjective2", libSwaC_ge_MissionObjectiveState_Completed);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveMorphBroodLordsComplete_Init () {
    gt_ObjectiveMorphBroodLordsComplete = TriggerCreate("gt_ObjectiveMorphBroodLordsComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Morph Brood Lords Group Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveMorphBroodLordsGroupUpdate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitProgressUnit()) == "BroodLord"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_broodLordsGroup, EventUnitProgressUnit());
    UnitGroupRemove(gv_mutaliskGroup, EventUnitProgressUnit());
    gv_objectiveCountBroodLordsMorphed += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveMorphBroodLordsGroupUpdate_Init () {
    gt_ObjectiveMorphBroodLordsGroupUpdate = TriggerCreate("gt_ObjectiveMorphBroodLordsGroupUpdate_Func");
    TriggerAddEventUnitTrainProgress(gt_ObjectiveMorphBroodLordsGroupUpdate, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy the Planetary Fortress Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroythePlanetaryFortressCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZEvolutionMutaliskObjective3");
    gv_objectiveDestroyPlanetaryFortress = ObjectiveLastCreated();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShareVisionofUnit(UnitGroupLoopCurrent(), true, gv_pLAYER_01_USER);
    }
    UnitGroupLoopEnd();
    libSwaC_gf_CreateObjectivePing(true, PointFromId(65), StringExternal("Param/Value/4D7E6AD9"));
    gv_pingPFort = PingLastCreated();
    gf_AttachModelToEnemyUntilDamaged(ge_ReticleSize_Large, UnitFromId(66));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroythePlanetaryFortressCreate_Init () {
    gt_ObjectiveDestroythePlanetaryFortressCreate = TriggerCreate("gt_ObjectiveDestroythePlanetaryFortressCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy the Planetary Fortress Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroythePlanetaryFortressComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroythePlanetaryFortressCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZEvolutionMutaliskObjective3", libSwaC_ge_MissionObjectiveState_Completed);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroythePlanetaryFortressComplete_Init () {
    gt_ObjectiveDestroythePlanetaryFortressComplete = TriggerCreate("gt_ObjectiveDestroythePlanetaryFortressComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Secure the Cargo Ship Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSecuretheCargoShipCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZEvolutionMutaliskObjective5");
    gv_objectiveSecureCargoShip = ObjectiveLastCreated();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    libSwaC_gf_CreateObjectivePing(true, RegionGetCenter(RegionFromId(12)), StringExternal("Param/Value/C4805211"));
    gv_pingCargoShip = PingLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSecuretheCargoShipCreate_Init () {
    gt_ObjectiveSecuretheCargoShipCreate = TriggerCreate("gt_ObjectiveSecuretheCargoShipCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Secure the Cargo Ship Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSecuretheCargoShipComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveSecuretheCargoShipCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZEvolutionMutaliskObjective5", libSwaC_ge_MissionObjectiveState_Completed);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSecuretheCargoShipComplete_Init () {
    gt_ObjectiveSecuretheCargoShipComplete = TriggerCreate("gt_ObjectiveSecuretheCargoShipComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro BroodLord Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroBroodLordQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_IntroBroodLordSetup, true, true);
    TriggerExecute(gt_IntroBroodLordCinematic, true, true);
    TriggerExecute(gt_IntroBroodLordCinematicEnd, true, true);
    TriggerExecute(gt_IntroBroodLordCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroBroodLordQ_Init () {
    gt_IntroBroodLordQ = TriggerCreate("gt_IntroBroodLordQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro BroodLord Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroBroodLordSetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libSwaC_gf_CinematicModeSwarmCampaign(true, c_transitionDurationDefault);
    libNtve_gf_GlobalCinematicSetting(true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    RegionPlayableMapSet(RegionFromId(5));
    libSwaC_gf_EnableDisableZerglingRespawn(false);
    UnitPauseAll(true);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    UnitGroupLoopBegin(UnitGroup("Mutalisk", gv_pLAYER_04_FERALZERG, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_cinematicHiddenUnits, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_viperUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_broodLordUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Bunker", gv_pLAYER_02_DOMINION, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitCargoCreate(UnitGroupLoopCurrent(), "Marine", 4);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroBroodLordSetup_Init () {
    gt_IntroBroodLordSetup = TriggerCreate("gt_IntroBroodLordSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro BroodLord Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroBroodLordCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_cinematicCompleted = false;
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    libSwaC_gf_PreparePlanetPortraitZoomIn("EvolutionPlanetMutaliskA", CameraInfoFromId(41), "BraxisAlpha");
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicInTransmission);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_Mutalisk|Line00009", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 2.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(6, "Mutalisk", 0, gv_pLAYER_01_USER, PointFromId(138));
    UnitGroupAddUnitGroup(gv_cinematicTempUnits, UnitLastCreatedGroup());
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(PointFromId(55), -3.0, -3.0)), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(55)), c_orderQueueAddToEnd);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ChangeUnitDamage(UnitGroupLoopCurrent(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    }
    UnitGroupLoopEnd();
    libSwaC_gf_ZoomInPlanetPortrait();
    libSwaC_gf_HidePlanetPortrait();
    Wait(1.0, c_timeGame);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 10.0, 0.4);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_Mutalisk|Line00015", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(921), 0.0, -1, 10, true);
    libNtve_gf_RemoveDeathModelsinRegionImmediately(RegionFromId(5));
    UnitGroupLoopBegin(gv_cinematicTempUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_feralBroodLordsGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(libSwaC_ge_CampaginReticleType_ZergEnemy, libSwaC_ge_CampaginReticleSize_Small, null, UnitGroupLoopCurrent(), "Ref_Center");
        libHots_gf_StoreActorForUnit(UnitGroupLoopCurrent(), 1, libNtve_gf_ActorLastCreated());
    }
    UnitGroupLoopEnd();
    Wait(1.0, c_timeReal);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_Mutalisk|Line00013", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroBroodLordCinematic_Init () {
    gt_IntroBroodLordCinematic = TriggerCreate("gt_IntroBroodLordCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro BroodLord Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroBroodLordCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroBroodLordCinematicEnd_Init () {
    gt_IntroBroodLordCinematicEnd = TriggerCreate("gt_IntroBroodLordCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro BroodLord Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroBroodLordCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(gv_cinematicTempUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitPauseAll(false);
    UnitGroupLoopBegin(gv_viperUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    libSwaC_gf_HidePlanetPortrait();
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    CameraPan(gv_pLAYER_01_USER, PointFromId(40), 0.0, -1, 10.0, false);
    UnitGroupLoopBegin(gv_feralBroodLordsGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitGroupLoopCurrent(), 1));
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ChangeUnitDamage(UnitGroupLoopCurrent(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("InfestedSupply", gv_pLAYER_02_DOMINION, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetOwner(UnitGroupLoopCurrent(), gv_pLAYER_05_ZERG_ALLY, true);
        UnitBehaviorAddPlayer(UnitGroupLoopCurrent(), "ColonyInfestation", gv_pLAYER_05_ZERG_ALLY, 1);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("InfestedBarracks", gv_pLAYER_02_DOMINION, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetOwner(UnitGroupLoopCurrent(), gv_pLAYER_05_ZERG_ALLY, true);
        UnitBehaviorAddPlayer(UnitGroupLoopCurrent(), "ColonyInfestation", gv_pLAYER_05_ZERG_ALLY, 1);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("InfestedCC", gv_pLAYER_02_DOMINION, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetOwner(UnitGroupLoopCurrent(), gv_pLAYER_05_ZERG_ALLY, true);
        UnitBehaviorAddPlayer(UnitGroupLoopCurrent(), "ColonyInfestation", gv_pLAYER_05_ZERG_ALLY, 1);
    }
    UnitGroupLoopEnd();
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    gv_inCinematic = false;
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroBroodLordCleanup_Init () {
    gt_IntroBroodLordCleanup = TriggerCreate("gt_IntroBroodLordCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transition Q
//--------------------------------------------------------------------------------------------------
bool gt_TransitionQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_TransitionSetup, true, true);
    TriggerExecute(gt_TransitionCinematic, true, true);
    TriggerExecute(gt_TransitionCinematicEnd, true, true);
    TriggerExecute(gt_TransitionCleanup, true, true);
    TriggerExecute(gt_BroodLordMorphIntro, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransitionQ_Init () {
    gt_TransitionQ = TriggerCreate("gt_TransitionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transition Setup
//--------------------------------------------------------------------------------------------------
bool gt_TransitionSetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_angle;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    gv_inCinematic = true;
    libSwaC_gf_CinematicModeSwarmCampaign(true, c_transitionDurationDefault);
    libNtve_gf_GlobalCinematicSetting(true);
    UnitClearSelection(gv_pLAYER_01_USER);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UnitPauseAll(true);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_04_FERALZERG, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_mutaliskGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetPosition(UnitGroupLoopCurrent(), PointWithOffsetPolar(PointFromId(61), 2.0, lv_angle), false);
        lv_angle += 60.0;
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        gf_MutaSwap(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransitionSetup_Init () {
    gt_TransitionSetup = TriggerCreate("gt_TransitionSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transition Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_TransitionCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1273), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(242), 6.0, -1, 10.0, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicInTransmission);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Mutalisk|Line00036", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    while (!((UnitGroupCount(UnitGroup("Mutalisk", gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_mutaSpawner), 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 1))) {
        Wait(0.25, c_timeGame);
    }
    SoundPlay(SoundLink("Muta_Evo1_PipeEnter", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_mutaTransitionPipeSound = SoundLastPlayed();
    while (!((UnitGroupCount(gv_mutaliskGroup, c_unitCountAlive) == 0))) {
        Wait(0.25, c_timeGame);
    }
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransitionCinematic_Init () {
    gt_TransitionCinematic = TriggerCreate("gt_TransitionCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transition Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_TransitionCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransitionCinematicEnd_Init () {
    gt_TransitionCinematicEnd = TriggerCreate("gt_TransitionCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transition Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_TransitionCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;
    fixed lv_angle;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(gv_cinematicTempUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitPauseAll(false);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    UnitGroupLoopBegin(gv_mutaliskGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    SoundStop(gv_mutaTransitionPipeSound, true);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), lv_fadeDuration, -1, 10.0, false);
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
        libNtve_gf_GlobalCinematicSetting(false);
    }
    else {
        lv_fadeDuration = 1.0;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10.0, false);
        libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PointFromId(40), lv_fadeDuration);
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
        libNtve_gf_GlobalCinematicSetting(false);
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    }
    gv_inCinematic = false;
    Wait(lv_fadeDuration, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransitionCleanup_Init () {
    gt_TransitionCleanup = TriggerCreate("gt_TransitionCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Viper Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroViperQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_IntroViperMusicCue, true, false);
    TriggerExecute(gt_IntroViperSetup, true, true);
    TriggerExecute(gt_IntroViperCinematic, true, true);
    TriggerExecute(gt_IntroViperCinematicEnd, true, true);
    TriggerExecute(gt_IntroViperCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroViperQ_Init () {
    gt_IntroViperQ = TriggerCreate("gt_IntroViperQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Viper Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroViperSetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_angle;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libSwaC_gf_CinematicModeSwarmCampaign(true, c_transitionDurationDefault);
    libNtve_gf_GlobalCinematicSetting(true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    RegionPlayableMapSet(RegionFromId(6));
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Space01", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    UnitPauseAll(true);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitGroupLoopBegin(gv_broodLordUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_viperUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Bunker", 0, gv_pLAYER_02_DOMINION, PointFromId(627));
    UnitGroupAdd(gv_bunkers, UnitLastCreated());
    UnitCargoCreate(UnitLastCreated(), "Marauder", 2);
    UnitGroupAddUnitGroup(gv_bunkerMarines, UnitCargoLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Bunker", 0, gv_pLAYER_02_DOMINION, PointFromId(78));
    UnitGroupAdd(gv_bunkers, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Bunker", 0, gv_pLAYER_02_DOMINION, PointFromId(105));
    UnitGroupAdd(gv_bunkers, UnitLastCreated());
    UnitGroupLoopBegin(gv_bunkers);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitCargoCreate(UnitGroupLoopCurrent(), "Marine", 3);
        UnitGroupAddUnitGroup(gv_bunkerMarines, UnitCargoLastCreatedGroup());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_viperGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitSetPosition(UnitGroupLoopCurrent(), PointWithOffsetPolar(PointFromId(124), 1.5, lv_angle), false);
        lv_angle += 120.0;
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroViperSetup_Init () {
    gt_IntroViperSetup = TriggerCreate("gt_IntroViperSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Viper Music Cue
//--------------------------------------------------------------------------------------------------
bool gt_IntroViperMusicCue_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZEvoMusicMain", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroViperMusicCue_Init () {
    gt_IntroViperMusicCue = TriggerCreate("gt_IntroViperMusicCue_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Viper Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroViperCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    libSwaC_gf_PreparePlanetPortraitZoomIn("EvolutionPlanetMutaliskB", CameraInfoFromId(1), "BraxisAlpha");
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicInTransmission);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_Mutalisk|Line00010", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 2.0);
    libSwaC_gf_ZoomInPlanetPortrait();
    libSwaC_gf_HidePlanetPortrait();
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Agria", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    Wait(1.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1274), (SoundLengthSync(SoundLink(ConversationDataGetSound("zEvoBriefing_Mutalisk|Line00004", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zEvoBriefing_Mutalisk|Line00018", true), c_soundIndexAny))), -1, 10, true);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_Mutalisk|Line00004", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_Mutalisk|Line00018", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(33), 0.0, -1, 10, true);
    UnitGroupLoopBegin(gv_viperGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetHeight(UnitGroupLoopCurrent(), UnitTypeGetProperty("Viper", c_unitPropHeight), 3.0);
    }
    UnitGroupLoopEnd();
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_Mutalisk|Line00024", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 3.0);
    UnitGroupLoopBegin(gv_viperGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("MutaliskMorphToViper", 0)), c_orderQueueReplace);
        Wait(0.25, c_timeGame);
    }
    UnitGroupLoopEnd();
    Wait(3.0, c_timeGame);
    UnitGroupLoopBegin(gv_viperGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetProgressComplete(UnitGroupLoopCurrent(), 1, 100);
    }
    UnitGroupLoopEnd();
    Wait(3.0, c_timeGame);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroViperCinematic_Init () {
    gt_IntroViperCinematic = TriggerCreate("gt_IntroViperCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Viper Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroViperCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroViperCinematicEnd_Init () {
    gt_IntroViperCinematicEnd = TriggerCreate("gt_IntroViperCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Viper Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroViperCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(gv_cinematicTempUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitPauseAll(false);
    UnitGroupLoopBegin(gv_broodLordUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    if ((gv_cinematicCompleted == false)) {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Agria", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }
    else {
    }
    libSwaC_gf_HidePlanetPortrait();
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    CameraPan(gv_pLAYER_01_USER, PointFromId(124), 0.0, -1, 10.0, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(12));
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_03_ZERG_ALLY, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShareVisionofUnit(UnitGroupLoopCurrent(), true, gv_pLAYER_01_USER);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("MutaliskViper", gv_pLAYER_01_USER, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ReplaceUnit(UnitGroupLoopCurrent(), "Viper", libNtve_ge_ReplaceUnitOptions_NewUnitssMax);
        UnitGroupAdd(gv_viperGroup, libNtve_gf_LastReplacedUnit());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Viper", gv_pLAYER_01_USER, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergyPercent, 100.0);
        UnitGroupAdd(gv_viperGroup, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupSelect(gv_viperGroup, gv_pLAYER_01_USER, true);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gv_inCinematic = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroViperCleanup_Init () {
    gt_IntroViperCleanup = TriggerCreate("gt_IntroViperCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerQueueEnter();
    TriggerExecute(gt_VictoryMusicCue, true, false);
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_Victory, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveDestroyAll(PlayerGroupAll());
    CameraSetValue(gv_pLAYER_01_USER, c_cameraValueDistance, (CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance) + 40.0), 2.0, -1, 10.0);
    CameraSetValue(gv_pLAYER_01_USER, c_cameraValuePitch, (CameraInfoGetValue(CameraInfoDefault(), c_cameraValuePitch) + 0.0), 2.0, -1, 10.0);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 2.0);
    CinematicFade(false, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gv_inCinematic = true;
    libSwaC_gf_CinematicModeSwarmCampaign(true, c_transitionDurationDefault);
    libNtve_gf_GlobalCinematicSetting(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Music Cue
//--------------------------------------------------------------------------------------------------
bool gt_VictoryMusicCue_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZEvoMusicMain", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryMusicCue_Init () {
    gt_VictoryMusicCue = TriggerCreate("gt_VictoryMusicCue_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04MusicSound_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_DEBUGSkiptoPart2_Init();
    gt_StartGameQ_Init();
    gt_BroodLordMusicCue_Init();
    gt_CatchUnitSpawnsBroodLord_Init();
    gt_StartBroodLord_Init();
    gt_BroodLordEscort_Init();
    gt_BroodLordKilled_Init();
    gt_BroodLordResourceFailsafe_Init();
    gt_BroodLordMorphIntro_Init();
    gt_BroodLordsMorphedQ_Init();
    gt_VikingModeSwap_Init();
    gt_DropPodTrigger_Init();
    gt_DominionDropPod1_Init();
    gt_DominionDropPod2_Init();
    gt_DominionDropPod3_Init();
    gt_PFortKilled_Init();
    gt_BroodLordReinforcements1_Init();
    gt_BroodLordReinforcements2_Init();
    gt_TransmissionBroodLordReinforcementsQ_Init();
    gt_TransmissionKillBroodLordsQ_Init();
    gt_TransmissionMorphBroodLordsQ_Init();
    gt_TransmissionBroodLordQ_Init();
    gt_TransmissionMutaliskEscortQ_Init();
    gt_TransmissionEndStalemateQ_Init();
    gt_TransmissionDropPodsQ_Init();
    gt_TransmissionPFortDestroyedQ_Init();
    gt_ViperMusicCue_Init();
    gt_StartViperQ_Init();
    gt_AbductIntro_Init();
    gt_TankIntro_Init();
    gt_TreeTank_Init();
    gt_TankSiege_Init();
    gt_DisablingCloudIntro_Init();
    gt_CloudHelper_Init();
    gt_AllowConsumption_Init();
    gt_TreeBackup1_Init();
    gt_TreeBackup2_Init();
    gt_AbductRefresher_Init();
    gt_CargoShipReached_Init();
    gt_ViperReinforcements_Init();
    gt_ViperReinforcementsFinal_Init();
    gt_TransmissionViperQ_Init();
    gt_TransmissionUseAbductQ_Init();
    gt_TransmissionTanksDetectedQ_Init();
    gt_TransmissionGetItOffMe_Init();
    gt_TransmissionDisablingCloudQ_Init();
    gt_TransmissionBunkerDisabledQ_Init();
    gt_TransmissionFinalDefensesQ_Init();
    gt_TransmissionJoriumSecuredQ_Init();
    gt_TransmissionAbductRefresherQ_Init();
    gt_VictoryDestroythePlanetaryFortressCompleted_Init();
    gt_VictoryDestroyAllTerranForcesCompleted_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_TipMissionHelpQ_Init();
    gt_ObjectiveCollectBroodLordEssenceCreate_Init();
    gt_ObjectiveCollectBroodLordEssenceUpdate_Init();
    gt_ObjectiveCollectBroodLordEssenceComplete_Init();
    gt_ObjectiveMorphBroodLordsCreate_Init();
    gt_ObjectiveMorphBroodLordsUpdate_Init();
    gt_ObjectiveMorphBroodLordsComplete_Init();
    gt_ObjectiveMorphBroodLordsGroupUpdate_Init();
    gt_ObjectiveDestroythePlanetaryFortressCreate_Init();
    gt_ObjectiveDestroythePlanetaryFortressComplete_Init();
    gt_ObjectiveSecuretheCargoShipCreate_Init();
    gt_ObjectiveSecuretheCargoShipComplete_Init();
    gt_IntroBroodLordQ_Init();
    gt_IntroBroodLordSetup_Init();
    gt_IntroBroodLordCinematic_Init();
    gt_IntroBroodLordCinematicEnd_Init();
    gt_IntroBroodLordCleanup_Init();
    gt_TransitionQ_Init();
    gt_TransitionSetup_Init();
    gt_TransitionCinematic_Init();
    gt_TransitionCinematicEnd_Init();
    gt_TransitionCleanup_Init();
    gt_IntroViperQ_Init();
    gt_IntroViperSetup_Init();
    gt_IntroViperMusicCue_Init();
    gt_IntroViperCinematic_Init();
    gt_IntroViperCinematicEnd_Init();
    gt_IntroViperCleanup_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryMusicCue_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
