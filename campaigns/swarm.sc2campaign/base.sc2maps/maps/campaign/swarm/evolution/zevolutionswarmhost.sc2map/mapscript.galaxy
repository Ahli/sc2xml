//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Swarm Host Evolution
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"
include "TriggerLibs/SwarmCampaignLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libHots_InitLib();
    libSwaC_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_DOMINION = 2;
const int gv_pLAYER_03_CARRION_NEST = 3;
const int gv_pLAYER_04_ZERG = 4;
const int gv_pLAYER_05_ASHWORM = 5;
const int gv_pLAYER_06_OVERLORDS = 6;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
bool gv_gameOver;
bool gv_inCinematic;
string gv_mapMusicTrack;
unitgroup gv_swarmHostPlayerUnits;
bool gv_creeperActive;
bool gv_carrionActive;
point gv_backupPoint;
bool gv_backupSuppressed;
unit gv_nukeSilo01;
unit gv_nukeSilo02;
int gv_ping_CarrionNest;
int gv_ping_NukeSilo01;
int gv_ping_NukeSilo02;
revealer gv_revealer_NukeSilo01;
revealer gv_revealer_NukeSilo02;
int gv_burrowHereTextTag;
actor gv_burrowHereHelperModel;
revealer gv_entrenchedDominion;
unit gv_carrionDecayEmitter;
unit gv_theOneWorm;
int gv_ashWormPing;
int gv_ashWormMovementCounter;
int[3] gv_defendZergBases;
int gv_deepBurrowHereTextTag;
actor gv_deepBurrowHereHelperModel;
unitgroup[3] gv_dominionAttackGroup;
unit gv_hatchery1;
unit gv_hatchery2;
string[3][16] gv_unitType;
point[3][16] gv_unitPosition;
bool gv_creeperTransitioning;
bool gv_skipped;
int gv_objectiveKillAshworm;
int gv_objectiveDefendZergBases;
int gv_objectiveKillCarrionNest;
int gv_objectiveDestroyNukeSilos;
int gv_nukeSilosDestroyed;
unit gv_cinematicAshWorm1;
unit gv_cinematicAshWorm2;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicTempUnits;
unitgroup gv_cinematicPausedUnits;
unit[7] gv_cinematicSwarmHosts;
bool gv_cinematicCompleted;
actor gv_introCarrionActor;
sound gv_introCarrionSound;

void InitGlobals () {
    int init_i;
    int init_j;

    gv_gameOver = false;
    gv_inCinematic = false;
    gv_mapMusicTrack = null;
    gv_swarmHostPlayerUnits = UnitGroupEmpty();
    gv_creeperActive = false;
    gv_carrionActive = false;
    gv_backupPoint = null;
    gv_backupSuppressed = false;
    gv_nukeSilo01 = UnitFromId(36);
    gv_nukeSilo02 = UnitFromId(38);
    gv_ping_CarrionNest = c_invalidPingId;
    gv_ping_NukeSilo01 = c_invalidPingId;
    gv_ping_NukeSilo02 = c_invalidPingId;
    gv_revealer_NukeSilo01 = null;
    gv_revealer_NukeSilo02 = null;
    gv_burrowHereTextTag = c_textTagNone;
    gv_burrowHereHelperModel = null;
    gv_entrenchedDominion = null;
    gv_carrionDecayEmitter = null;
    gv_theOneWorm = null;
    gv_ashWormPing = c_invalidPingId;
    gv_ashWormMovementCounter = 0;
    init_i = 0;
    while (init_i <= 2) {
        gv_defendZergBases[init_i] = c_invalidPingId;
        init_i = init_i + 1;
    }
    gv_deepBurrowHereTextTag = c_textTagNone;
    gv_deepBurrowHereHelperModel = null;
    init_i = 0;
    while (init_i <= 2) {
        gv_dominionAttackGroup[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    gv_hatchery1 = UnitFromId(12);
    gv_hatchery2 = UnitFromId(324);
    init_i = 0;
    while (init_i <= 2) {
        init_j = 0;
        while (init_j <= 15) {
            gv_unitType[init_i][init_j] = null;
            init_j = init_j + 1;
        }
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 2) {
        init_j = 0;
        while (init_j <= 15) {
            gv_unitPosition[init_i][init_j] = null;
            init_j = init_j + 1;
        }
        init_i = init_i + 1;
    }
    gv_creeperTransitioning = false;
    gv_skipped = false;
    gv_objectiveKillAshworm = c_invalidObjectiveId;
    gv_objectiveDefendZergBases = c_invalidObjectiveId;
    gv_objectiveKillCarrionNest = c_invalidObjectiveId;
    gv_objectiveDestroyNukeSilos = c_invalidObjectiveId;
    gv_nukeSilosDestroyed = 0;
    gv_cinematicAshWorm1 = null;
    gv_cinematicAshWorm2 = null;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_cinematicPausedUnits = UnitGroupEmpty();
    init_i = 0;
    while (init_i <= 6) {
        gv_cinematicSwarmHosts[init_i] = null;
        init_i = init_i + 1;
    }
    gv_cinematicCompleted = false;
    gv_introCarrionActor = null;
    gv_introCarrionSound = null;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_AttachReticletoUnitUntilDamaged (int lp_size, unit lp_unit, text lp_text);
void gf_AttachPingtoUnitGroup (int lp_ping, unitgroup lp_unitGroup);
void gf_MakeUnitNonInteractive (unit lp_unit);
bool gf_CreepersRootedBurrowed ();
void gf_StoreDominionGroup (unitgroup lp_group, int lp_index);
void gf_RecreateDominionGroup (int lp_index);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04Music;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_DEBUGStage2;
trigger gt_StartGameQ;
trigger gt_CarrionMusicCue;
trigger gt_PingandShowCarrionNest;
trigger gt_ShowDominionBlockade;
trigger gt_CarrionNestDiesMorphtoCarrion;
trigger gt_MorphSwarmHoststoCarrion;
trigger gt_TransitiontoNukeSiloObjective;
trigger gt_PingandShowNukeSilos;
trigger gt_CarrionSwarmHostsBurrowed;
trigger gt_NukeSiloDestroyed;
trigger gt_ShowEntrenchedDominion;
trigger gt_EntrenchedDominionDead;
trigger gt_TransitiontoCreeperStage2;
trigger gt_TransmissionTerranForcesCloseQ;
trigger gt_TransmissionCarrionNestDestroyedQ;
trigger gt_TransmissionNukeSiloIntroQ;
trigger gt_TransmissionNukeSiloDestroyedQ;
trigger gt_TransmissionEntrenchedDominionAheadQ;
trigger gt_TransmissionSilosDestroyedQ;
trigger gt_CreeperMusicCue;
trigger gt_StartCreeperQ;
trigger gt_PingandShowAshWormLocation;
trigger gt_AshWormMovestoRight;
trigger gt_AshWormDiesCollectEssence;
trigger gt_MorphSwarmHoststoCreeper;
trigger gt_ShowAlliedZergBase;
trigger gt_DeepBurrowPressedStopFlashing;
trigger gt_ReachedZergBase;
trigger gt_RoottoAttackReminder;
trigger gt_DominionAttackWavesRightBase;
trigger gt_DominionAttackRightDestroyed;
trigger gt_DominionAttackWavesLeftBase;
trigger gt_DominionAttackLeftDestroyed;
trigger gt_TransmissionAshWormSightedQ;
trigger gt_TransmissionAshWormMovesQ;
trigger gt_TransmissionAshWormDeadQ;
trigger gt_TransmissionDefendAlliedZergBaseQ;
trigger gt_TransmissionSecondDominionAttackQ;
trigger gt_TransmissionHatcheriesDefendedQ;
trigger gt_PlayerUnitsDead;
trigger gt_PlayerUnitsDeadHatchery;
trigger gt_HatcheryDefenseFailure1;
trigger gt_HatcheryDefenseFailure1Skippable;
trigger gt_HatcheryDefenseFailure2;
trigger gt_HatcheryDefenseFailure2Skippable;
trigger gt_VictorySwarmHostSplitCompleted;
trigger gt_VictorySequence;
trigger gt_VictoryMusicCue;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_TipMissionHelpQ;
trigger gt_ObjectiveKillAshwormCreate;
trigger gt_ObjectiveKillAshwormComplete;
trigger gt_ObjectiveKillAshwormFailed;
trigger gt_ObjectiveDefendZergBasesCreate;
trigger gt_ObjectiveDefendZergBasesComplete;
trigger gt_ObjectiveDefendZergBasesFailed;
trigger gt_ObjectiveKillCarrionNestCreate;
trigger gt_ObjectiveKillCarrionNestComplete;
trigger gt_ObjectiveKillCarrionNestFailed;
trigger gt_ObjectiveDestroyNukeSilosCreate;
trigger gt_ObjectiveDestroyNukeSilosUpdate;
trigger gt_ObjectiveDestroyNukeSilosComplete;
trigger gt_ObjectiveDestroyNukeSilosFailed;
trigger gt_IntroCarrionQ;
trigger gt_IntroCarrionSetup;
trigger gt_IntroCarrionCinematic;
trigger gt_IntroCarrionCinematicEnd;
trigger gt_IntroCarrionCleanup;
trigger gt_IntroCreeperMusicCue;
trigger gt_IntroCreeperQ;
trigger gt_IntroCreeperSetup;
trigger gt_IntroCreeperCinematic;
trigger gt_IntroCreeperCinematicEnd;
trigger gt_IntroCreeperCleanup;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
trigger auto_gf_AttachReticletoUnitUntilDamaged_Trigger = null;
int auto_gf_AttachReticletoUnitUntilDamaged_lp_size;
unit auto_gf_AttachReticletoUnitUntilDamaged_lp_unit;
text auto_gf_AttachReticletoUnitUntilDamaged_lp_text;

void gf_AttachReticletoUnitUntilDamaged (int lp_size, unit lp_unit, text lp_text) {
    auto_gf_AttachReticletoUnitUntilDamaged_lp_size = lp_size;
    auto_gf_AttachReticletoUnitUntilDamaged_lp_unit = lp_unit;
    auto_gf_AttachReticletoUnitUntilDamaged_lp_text = lp_text;

    if (auto_gf_AttachReticletoUnitUntilDamaged_Trigger == null) {
        auto_gf_AttachReticletoUnitUntilDamaged_Trigger = TriggerCreate("auto_gf_AttachReticletoUnitUntilDamaged_TriggerFunc");
    }

    TriggerExecute(auto_gf_AttachReticletoUnitUntilDamaged_Trigger, false, false);
}

bool auto_gf_AttachReticletoUnitUntilDamaged_TriggerFunc (bool testConds, bool runActions) {
    int lp_size = auto_gf_AttachReticletoUnitUntilDamaged_lp_size;
    unit lp_unit = auto_gf_AttachReticletoUnitUntilDamaged_lp_unit;
    text lp_text = auto_gf_AttachReticletoUnitUntilDamaged_lp_text;

    int autoE15B07E7_val;

    // Implementation
    autoE15B07E7_val = lp_size;
    if (autoE15B07E7_val == 0) {
        libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(2, 2, lp_text, lp_unit, "Center");
    }
    else if (autoE15B07E7_val == 1) {
        libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(2, 1, lp_text, lp_unit, "Center");
    }
    else if (autoE15B07E7_val == 2) {
        libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(2, 0, lp_text, lp_unit, "Center");
    }
    else {
    }
    libHots_gf_StoreActorForUnit(lp_unit, 1, libNtve_gf_ActorLastCreated());
    libHots_gf_StoreTextTagForUnit(lp_unit, 1, TextTagLastCreated());
    while (!((UnitGetPropertyFixed(lp_unit, c_unitPropLifePercent, c_unitPropCurrent) < 100.0))) {
        Wait(0.5, c_timeGame);
    }
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(lp_unit, 1));
    TextTagDestroy(libHots_gf_TextTagForUnit(lp_unit, 1));
    return true;
}

trigger auto_gf_AttachPingtoUnitGroup_Trigger = null;
int auto_gf_AttachPingtoUnitGroup_lp_ping;
unitgroup auto_gf_AttachPingtoUnitGroup_lp_unitGroup;

void gf_AttachPingtoUnitGroup (int lp_ping, unitgroup lp_unitGroup) {
    auto_gf_AttachPingtoUnitGroup_lp_ping = lp_ping;
    auto_gf_AttachPingtoUnitGroup_lp_unitGroup = lp_unitGroup;

    if (auto_gf_AttachPingtoUnitGroup_Trigger == null) {
        auto_gf_AttachPingtoUnitGroup_Trigger = TriggerCreate("auto_gf_AttachPingtoUnitGroup_TriggerFunc");
    }

    TriggerExecute(auto_gf_AttachPingtoUnitGroup_Trigger, false, false);
}

bool auto_gf_AttachPingtoUnitGroup_TriggerFunc (bool testConds, bool runActions) {
    int lp_ping = auto_gf_AttachPingtoUnitGroup_lp_ping;
    unitgroup lp_unitGroup = auto_gf_AttachPingtoUnitGroup_lp_unitGroup;

    // Implementation
    while ((libNtve_gf_UnitGroupIsDead(lp_unitGroup) == false)) {
        PingSetPosition(lp_ping, UnitGroupCenterOfGroup(lp_unitGroup));
        Wait(0.1, c_timeGame);
    }
    PingDestroy(lp_ping);
    return true;
}

void gf_MakeUnitNonInteractive (unit lp_unit) {
    // Implementation
    UnitSetState(lp_unit, c_unitStateHighlightable, false);
    UnitSetState(lp_unit, c_unitStateSelectable, false);
    UnitSetState(lp_unit, c_unitStateTargetable, false);
    UnitSetState(lp_unit, c_unitStateTooltipable, false);
    UnitSetState(lp_unit, c_unitStateStatusBar, false);
}

bool gf_CreepersRootedBurrowed () {
    // Implementation
    if ((UnitGroupCount(UnitGroup("SwarmHostSplitBRooted", gv_pLAYER_01_USER, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("SwarmHostSplitBBurrowed", gv_pLAYER_01_USER, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        return false;
    }
    else {
        return true;
    }
}

void gf_StoreDominionGroup (unitgroup lp_group, int lp_index) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization
    lv_i = 0;

    // Implementation
    IntLoopBegin(1, 15);
    while (!IntLoopDone()) {
        gv_unitType[lp_index][IntLoopCurrent()] = "";
        gv_unitPosition[lp_index][IntLoopCurrent()] = null;
        IntLoopStep();
    }
    IntLoopEnd();
    UnitGroupLoopBegin(lp_group);
    while (!UnitGroupLoopDone()) {
        lv_i += 1;
        gv_unitType[lp_index][lv_i] = UnitGetType(UnitGroupLoopCurrent());
        gv_unitPosition[lp_index][lv_i] = UnitGetPosition(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
}

void gf_RecreateDominionGroup (int lp_index) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization
    lv_i = 0;

    // Implementation
    IntLoopBegin(1, 10);
    while (!IntLoopDone()) {
        if ((gv_unitType[lp_index][IntLoopCurrent()] != "")) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_unitType[lp_index][IntLoopCurrent()], 0, gv_pLAYER_02_DOMINION, gv_unitPosition[lp_index][IntLoopCurrent()]);
            UnitGroupAdd(gv_dominionAttackGroup[lp_index], UnitLastCreated());
            AISetUnitScriptControlled(UnitLastCreated(), true);
        }
        else {
        }
        IntLoopStep();
    }
    IntLoopEnd();
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_ULoadCampaignData("ZEvolutionSwarmHost");
    TriggerExecute(gt_Init01Technology, true, true);
    libSwaC_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03Units, true, true);
    TriggerExecute(gt_Init04Music, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulties, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    TriggerExecute(gt_StartGameQ, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("LarvaTrain", 1), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("LarvaTrain", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("LarvaTrain", 2), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("UpgradeToLair", 0), false);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION, "ShieldWall", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION, "SiegeTech", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_visionGroup01;
    playergroup lv_visionGroup02;

    // Variable Initialization
    lv_visionGroup01 = PlayerGroupEmpty();
    lv_visionGroup02 = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION, 5);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_03_CARRION_NEST, 5);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_04_ZERG, 1);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_05_ASHWORM, 5);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_06_OVERLORDS, 1);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION, gv_pLAYER_03_CARRION_NEST, 7);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION, gv_pLAYER_04_ZERG, 5);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION, gv_pLAYER_05_ASHWORM, 7);
    libNtve_gf_SetAlliance(gv_pLAYER_04_ZERG, gv_pLAYER_03_CARRION_NEST, 5);
    libNtve_gf_SetAlliance(gv_pLAYER_04_ZERG, gv_pLAYER_05_ASHWORM, 5);
    PlayerGroupAdd(lv_visionGroup01, gv_pLAYER_02_DOMINION);
    PlayerGroupAdd(lv_visionGroup01, gv_pLAYER_03_CARRION_NEST);
    PlayerGroupAdd(lv_visionGroup01, gv_pLAYER_05_ASHWORM);
    libSwaC_gf_ShareVisionAmongPlayers(lv_visionGroup01);
    PlayerGroupAdd(lv_visionGroup02, gv_pLAYER_01_USER);
    PlayerGroupAdd(lv_visionGroup02, gv_pLAYER_04_ZERG);
    PlayerGroupAdd(lv_visionGroup02, gv_pLAYER_06_OVERLORDS);
    libSwaC_gf_ShareVisionAmongPlayers(lv_visionGroup02);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropSuppliesMade, c_playerPropOperSetTo, 200);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    UISetFrameVisible(PlayerGroupSingle(gv_pLAYER_01_USER), c_syncFrameTypeResourcePanel, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_theOneWorm = UnitFromId(321);
    UnitSetPropertyFixed(gv_theOneWorm, c_unitPropLifeMax, 700.0);
    UnitSetPropertyFixed(gv_theOneWorm, c_unitPropLifePercent, 100.0);
    UnitGroupLoopBegin(UnitGroup("NukeSiloNova", gv_pLAYER_02_DOMINION, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifeMax, 300.0);
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifePercent, 100.0);
        libSwaC_gf_SetUnitInfoTextCampaign(UnitGroupLoopCurrent(), null, StringExternal("Param/Value/6C73B5AC"), null);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Goliath", gv_pLAYER_02_DOMINION, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    gf_MakeUnitNonInteractive(UnitFromId(401));
    gf_MakeUnitNonInteractive(UnitFromId(123));
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_dominionAttackGroup[1], UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_dominionAttackGroup[2], UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitBehaviorRemove(gv_hatchery1, "ZergBuildingDies9", 1);
    UnitBehaviorRemove(gv_hatchery2, "ZergBuildingDies9", 1);
    UnitSetPropertyFixed(UnitFromId(384), c_unitPropLifeMax, 250.0);
    UnitSetPropertyFixed(UnitFromId(384), c_unitPropLifePercent, 100.0);
    libSwaC_gf_SetUnitInfoTextCampaign(UnitFromId(384), null, StringExternal("Param/Value/DE0B0BDC"), null);
    UnitGroupLoopBegin(UnitGroup("CarrionBug", gv_pLAYER_03_CARRION_NEST, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music
//--------------------------------------------------------------------------------------------------
bool gt_Init04Music_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mapMusicTrack = libSwaC_gf_MissionDefaultMusic();
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Space01", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04Music_Init () {
    gt_Init04Music = TriggerCreate("gt_Init04Music_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    libLbty_gf_AutoRevealRegion(RegionFromId(19), RegionFromId(19), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(20), RegionFromId(20), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(21), RegionFromId(21), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(8), RegionFromId(8), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(15), RegionFromId(15), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(23), RegionFromId(23), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(22), RegionFromId(22), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(24), RegionFromId(24), gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_AddMissionTipUserData("Carrion Strain");
    libSwaC_gf_AddMissionTipUserData("Nuclear Silos");
    libSwaC_gf_AddMissionTipUserData("Creeper Strain");
    libSwaC_gf_AddMissionTipUserData("Defense");
    libSwaC_gf_AddMissionTipUserData("Reinforcements (ZEvoSwarmHost)");
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("SwarmHost", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Overlord", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Marine", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Marauder", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Firebat", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("HellionTank", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Goliath", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("SiegeTank", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Bunker", false, gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Stage 2
//--------------------------------------------------------------------------------------------------
bool gt_DEBUGStage2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_TransmissionSilosDestroyedQ, false);
    TriggerQueueClear(c_triggerQueueRemove);
    TransmissionClearAll();
    TriggerExecute(gt_TransitiontoCreeperStage2, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DEBUGStage2_Init () {
    gt_DEBUGStage2 = TriggerCreate("gt_DEBUGStage2_Func");
    TriggerAddEventChatMessage(gt_DEBUGStage2, c_playerAny, "evo2", true);
    TriggerAddEventChatMessage(gt_DEBUGStage2, c_playerAny, "s2", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_carrionActive = true;
    gv_creeperActive = false;
    TriggerExecute(gt_IntroCarrionQ, true, true);
    gv_backupPoint = PointFromId(601);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/41BDB61E"), null, CameraInfoGetTarget(CameraInfoFromId(849)));
    Wait(2.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveKillCarrionNestCreate, true, true);
    TriggerExecute(gt_PingandShowCarrionNest, true, true);
    TriggerQueueExit();
    TriggerExecute(gt_TipMissionHelpQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Carrion Music Cue
//--------------------------------------------------------------------------------------------------
bool gt_CarrionMusicCue_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("ZEvoMusicStinger", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZEvoMusicAlt", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CarrionMusicCue_Init () {
    gt_CarrionMusicCue = TriggerCreate("gt_CarrionMusicCue_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ping and Show Carrion Nest
//--------------------------------------------------------------------------------------------------
bool gt_PingandShowCarrionNest_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(11), 10.0, false);
    libSwaC_gf_CreateObjectivePing(true, UnitGetPosition(UnitFromId(384)), StringExternal("Param/Value/CFE15860"));
    gv_ping_CarrionNest = PingLastCreated();
    gf_AttachReticletoUnitUntilDamaged(2, UnitFromId(384), null);
    Wait(2.0, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PingandShowCarrionNest_Init () {
    gt_PingandShowCarrionNest = TriggerCreate("gt_PingandShowCarrionNest_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show Dominion Blockade
//--------------------------------------------------------------------------------------------------
bool gt_ShowDominionBlockade_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(14), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((TriggerQueueIsEmpty() == true))) {
        Wait(0.25, c_timeGame);
    }
    MinimapPing(PlayerGroupAll(), PointFromId(445), 3.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/5C83CF9E"), null, PointFromId(445));
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(16), 12.0, false);
    TriggerExecute(gt_TransmissionTerranForcesCloseQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowDominionBlockade_Init () {
    gt_ShowDominionBlockade = TriggerCreate("gt_ShowDominionBlockade_Func");
    TriggerAddEventTimePeriodic(gt_ShowDominionBlockade, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Carrion Nest Dies -> Morph to Carrion
//--------------------------------------------------------------------------------------------------
bool gt_CarrionNestDiesMorphtoCarrion_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_backupSuppressed = true;
    PingDestroy(gv_ping_CarrionNest);
    TriggerExecute(gt_ObjectiveKillCarrionNestComplete, true, true);
    TriggerExecute(gt_TransmissionCarrionNestDestroyedQ, true, false);
    TriggerExecute(gt_MorphSwarmHoststoCarrion, true, false);
    Wait(10.0, c_timeGame);
    TriggerExecute(gt_TransitiontoNukeSiloObjective, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CarrionNestDiesMorphtoCarrion_Init () {
    gt_CarrionNestDiesMorphtoCarrion = TriggerCreate("gt_CarrionNestDiesMorphtoCarrion_Func");
    TriggerAddEventUnitDied(gt_CarrionNestDiesMorphtoCarrion, UnitRefFromUnit(UnitFromId(384)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Morph Swarm Hosts to Carrion
//--------------------------------------------------------------------------------------------------
bool gt_MorphSwarmHoststoCarrion_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_EnableCampaignTechUnit(true, "SwarmHostSplitA", gv_pLAYER_01_USER);
    UnitGroupLoopBegin(gv_swarmHostPlayerUnits);
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        libNtve_gf_MakeUnitUncommandable(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(1.75, c_timeGame);
    UnitGroupLoopBegin(gv_swarmHostPlayerUnits);
    while (!UnitGroupLoopDone()) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "SwarmHostRooted") || (UnitGetType(UnitGroupLoopCurrent()) == "SwarmHostBurrowed"))) {
            libNtve_gf_ReplaceUnit(UnitGroupLoopCurrent(), "SwarmHost", 1);
            libNtve_gf_MakeUnitUncommandable(libNtve_gf_LastReplacedUnit(), true);
            UnitIssueOrder(libNtve_gf_LastReplacedUnit(), Order(AbilityCommand("MorphSwarmHostToSplitA", 0)), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("MorphSwarmHostToSplitA", 0)), c_orderQueueReplace);
        }
        Wait(0.25, c_timeGame);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(5.0, c_timeGame);
    UnitGroupLoopBegin(UnitGroup("SwarmHostSplitA", gv_pLAYER_01_USER, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_MakeUnitUncommandable(UnitGroupLoopCurrent(), false);
        UnitGroupAdd(gv_swarmHostPlayerUnits, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitGroupSelect(gv_swarmHostPlayerUnits, gv_pLAYER_01_USER, true);
    gv_backupPoint = PointFromId(602);
    gv_backupSuppressed = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MorphSwarmHoststoCarrion_Init () {
    gt_MorphSwarmHoststoCarrion = TriggerCreate("gt_MorphSwarmHoststoCarrion_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transition to Nuke Silo Objective
//--------------------------------------------------------------------------------------------------
bool gt_TransitiontoNukeSiloObjective_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_text;

    // Variable Initialization
    lv_text = null;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_PingandShowNukeSilos, true, false);
    TriggerExecute(gt_ObjectiveDestroyNukeSilosCreate, true, true);
    MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(12)), 3.0, Color(0.00, 100.00, 0.00));
    if ((TriggerIsEnabled(gt_CarrionSwarmHostsBurrowed) == true)) {
        UISetButtonHighlighted(PlayerGroupSingle(gv_pLAYER_01_USER), AbilityCommand("MorphToSwarmHostSplitABurrowed", 0), true);
        if ((TechTreeUpgradeCount(gv_pLAYER_01_USER, "HotSBurrowSwarmHost", c_techCountCompleteOnly) == 1)) {
            lv_text = StringExternal("Param/Value/5269FFFF");
        }
        else {
            lv_text = StringExternal("Param/Value/CAB29DAE");
        }
        libSwaC_gf_CreateReticleEffectAndTextTagAtPoint(0, 1, lv_text, PointFromId(449));
        gv_burrowHereHelperModel = libNtve_gf_ActorLastCreated();
        gv_burrowHereTextTag = TextTagLastCreated();
        UIAlertPoint("Trigger", gv_pLAYER_01_USER, lv_text, null, RegionGetCenter(RegionFromId(12)));
    }
    else {
    }
    TriggerExecute(gt_TransmissionNukeSiloIntroQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransitiontoNukeSiloObjective_Init () {
    gt_TransitiontoNukeSiloObjective = TriggerCreate("gt_TransitiontoNukeSiloObjective_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ping and Show Nuke Silos
//--------------------------------------------------------------------------------------------------
bool gt_PingandShowNukeSilos_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_nukeSilo01), 3.0, Color(0.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/FB7A5A00"), null, UnitGetPosition(gv_nukeSilo01));
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(17));
    gv_revealer_NukeSilo01 = VisRevealerLastCreated();
    libSwaC_gf_CreateObjectivePing(true, UnitGetPosition(gv_nukeSilo01), StringExternal("Param/Value/7FACAE34"));
    gv_ping_NukeSilo01 = PingLastCreated();
    PingSetTooltip(gv_ping_NukeSilo01, StringExternal("Param/Value/633F78A0"));
    gf_AttachReticletoUnitUntilDamaged(2, gv_nukeSilo01, null);
    Wait(0.5, c_timeGame);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_nukeSilo02), 3.0, Color(0.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/6B626F27"), null, UnitGetPosition(gv_nukeSilo02));
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(18));
    gv_revealer_NukeSilo02 = VisRevealerLastCreated();
    libSwaC_gf_CreateObjectivePing(true, UnitGetPosition(gv_nukeSilo02), StringExternal("Param/Value/1AC2F385"));
    gv_ping_NukeSilo02 = PingLastCreated();
    gf_AttachReticletoUnitUntilDamaged(2, gv_nukeSilo02, null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PingandShowNukeSilos_Init () {
    gt_PingandShowNukeSilos = TriggerCreate("gt_PingandShowNukeSilos_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Carrion Swarm Hosts Burrowed
//--------------------------------------------------------------------------------------------------
bool gt_CarrionSwarmHostsBurrowed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(12)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UISetButtonHighlighted(PlayerGroupSingle(gv_pLAYER_01_USER), AbilityCommand("MorphToSwarmHostSplitABurrowed", 0), false);
    libNtve_gf_KillModel(gv_burrowHereHelperModel);
    TextTagDestroy(gv_burrowHereTextTag);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CarrionSwarmHostsBurrowed_Init () {
    gt_CarrionSwarmHostsBurrowed = TriggerCreate("gt_CarrionSwarmHostsBurrowed_Func");
    TriggerAddEventUnitAbility(gt_CarrionSwarmHostsBurrowed, null, AbilityCommand("MorphToSwarmHostSplitABurrowed", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_CarrionSwarmHostsBurrowed, null, AbilityCommand("MorphToSwarmHostSplitARooted", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nuke Silo Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_NukeSiloDestroyed_Func (bool testConds, bool runActions) {
    unit auto60058F61_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_nukeSilosDestroyed += 1;
    UnitCreateEffectPoint(EventUnit(), "NukeDamage", UnitGetPosition(EventUnit()));
    auto60058F61_val = EventUnit();
    if (auto60058F61_val == gv_nukeSilo01) {
        PingDestroy(gv_ping_NukeSilo01);
        VisRevealerDestroy(gv_revealer_NukeSilo01);
        VisRevealArea(gv_pLAYER_01_USER, RegionFromId(17), 5.0, false);
    }
    else if (auto60058F61_val == gv_nukeSilo02) {
        PingDestroy(gv_ping_NukeSilo02);
        VisRevealerDestroy(gv_revealer_NukeSilo02);
        VisRevealArea(gv_pLAYER_01_USER, RegionFromId(18), 5.0, false);
    }
    else {
    }
    if ((TriggerIsEnabled(gt_CarrionSwarmHostsBurrowed) == true)) {
        TriggerExecute(gt_CarrionSwarmHostsBurrowed, false, false);
    }
    else {
    }
    TriggerExecute(gt_ObjectiveDestroyNukeSilosUpdate, true, true);
    TriggerExecute(gt_TransmissionNukeSiloDestroyedQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NukeSiloDestroyed_Init () {
    gt_NukeSiloDestroyed = TriggerCreate("gt_NukeSiloDestroyed_Func");
    TriggerAddEventUnitDied(gt_NukeSiloDestroyed, UnitRefFromVariable("gv_nukeSilo01"));
    TriggerAddEventUnitDied(gt_NukeSiloDestroyed, UnitRefFromVariable("gv_nukeSilo02"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show Entrenched Dominion
//--------------------------------------------------------------------------------------------------
bool gt_ShowEntrenchedDominion_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(13), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(2)), 3.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/1893138D"), null, RegionGetCenter(RegionFromId(2)));
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(2));
    gv_entrenchedDominion = VisRevealerLastCreated();
    TriggerExecute(gt_TransmissionEntrenchedDominionAheadQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowEntrenchedDominion_Init () {
    gt_ShowEntrenchedDominion = TriggerCreate("gt_ShowEntrenchedDominion_Func");
    TriggerAddEventTimePeriodic(gt_ShowEntrenchedDominion, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Entrenched Dominion Dead
//--------------------------------------------------------------------------------------------------
bool gt_EntrenchedDominionDead_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealerDestroy(gv_entrenchedDominion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EntrenchedDominionDead_Init () {
    gt_EntrenchedDominionDead = TriggerCreate("gt_EntrenchedDominionDead_Func");
    TriggerAddEventTimePeriodic(gt_EntrenchedDominionDead, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transition to Creeper (Stage 2)
//--------------------------------------------------------------------------------------------------
bool gt_TransitiontoCreeperStage2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_backupSuppressed = true;
    TriggerExecute(gt_TransmissionSilosDestroyedQ, true, true);
    ObjectiveDestroyAll(PlayerGroupAll());
    libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/F34DE060"));
    CameraSetValue(gv_pLAYER_01_USER, c_cameraValueDistance, (CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance) + 40.0), 2.0, -1, 10.0);
    CameraSetValue(gv_pLAYER_01_USER, c_cameraValuePitch, (CameraInfoGetValue(CameraInfoDefault(), c_cameraValuePitch) + 0.0), 2.0, -1, 10.0);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 2.0);
    CinematicFade(false, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    UnitRemove(gv_carrionDecayEmitter);
    TriggerExecute(gt_StartCreeperQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransitiontoCreeperStage2_Init () {
    gt_TransitiontoCreeperStage2 = TriggerCreate("gt_TransitiontoCreeperStage2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Terran Forces Close Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionTerranForcesCloseQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_EggMonster|Line00028", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionTerranForcesCloseQ_Init () {
    gt_TransmissionTerranForcesCloseQ = TriggerCreate("gt_TransmissionTerranForcesCloseQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Carrion Nest Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionCarrionNestDestroyedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_EggMonster|Line00029", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionCarrionNestDestroyedQ_Init () {
    gt_TransmissionCarrionNestDestroyedQ = TriggerCreate("gt_TransmissionCarrionNestDestroyedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Nuke Silo Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionNukeSiloIntroQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_EggMonster|Line00010", c_transmissionDurationAdd, 0.0, true, 1, 0);
    TriggerExecute(gt_CarrionMusicCue, true, false);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_EggMonster|Line00030", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionNukeSiloIntroQ_Init () {
    gt_TransmissionNukeSiloIntroQ = TriggerCreate("gt_TransmissionNukeSiloIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Nuke Silo Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionNukeSiloDestroyedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_EggMonster|Line00031", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionNukeSiloDestroyedQ_Init () {
    gt_TransmissionNukeSiloDestroyedQ = TriggerCreate("gt_TransmissionNukeSiloDestroyedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Entrenched Dominion Ahead Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionEntrenchedDominionAheadQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_EggMonster|Line00032", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionEntrenchedDominionAheadQ_Init () {
    gt_TransmissionEntrenchedDominionAheadQ = TriggerCreate("gt_TransmissionEntrenchedDominionAheadQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Silos Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionSilosDestroyedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_EggMonster|Line00014", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_EggMonster|Line00018", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionSilosDestroyedQ_Init () {
    gt_TransmissionSilosDestroyedQ = TriggerCreate("gt_TransmissionSilosDestroyedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Creeper Music Cue
//--------------------------------------------------------------------------------------------------
bool gt_CreeperMusicCue_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("ZEvoMusicStinger", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZEvoMusicAlt", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreeperMusicCue_Init () {
    gt_CreeperMusicCue = TriggerCreate("gt_CreeperMusicCue_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Creeper Q
//--------------------------------------------------------------------------------------------------
bool gt_StartCreeperQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_creeperActive = true;
    gv_carrionActive = false;
    UIAlertClear(gv_pLAYER_01_USER);
    TriggerExecute(gt_IntroCreeperQ, true, true);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/BDE04D3A"), null, CameraInfoGetTarget(CameraInfoFromId(75)));
    gv_backupPoint = PointFromId(603);
    gv_backupSuppressed = false;
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("SwarmHostDeepBurrow", 0), false);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveKillAshwormCreate, true, true);
    TriggerExecute(gt_PingandShowAshWormLocation, true, false);
    Wait(2.0, c_timeReal);
    TriggerQueueExit();
    TriggerExecute(gt_TransmissionAshWormSightedQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartCreeperQ_Init () {
    gt_StartCreeperQ = TriggerCreate("gt_StartCreeperQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ping and Show Ash Worm Location
//--------------------------------------------------------------------------------------------------
bool gt_PingandShowAshWormLocation_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(1), 10.0, false);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_theOneWorm), 3.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/AB490A0A"), null, UnitGetPosition(gv_theOneWorm));
    libSwaC_gf_CreateObjectivePing(true, UnitGetPosition(gv_theOneWorm), StringExternal("Param/Value/8D0EF5E5"));
    gv_ashWormPing = PingLastCreated();
    PingSetUnit(gv_ashWormPing, gv_theOneWorm);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PingandShowAshWormLocation_Init () {
    gt_PingandShowAshWormLocation = TriggerCreate("gt_PingandShowAshWormLocation_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ash Worm Moves to Right
//--------------------------------------------------------------------------------------------------
bool gt_AshWormMovestoRight_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_theOneWorm, c_unitPropLifePercent, c_unitPropCurrent) <= 49.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_ashWormMovementCounter += 1;
    gv_backupPoint = PointFromId(604);
    if ((gv_gameOver == false) && (RegionContainsPoint(RegionCircle(RegionGetCenter(RegionFromId(3)), 10.0), CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
        CameraShakeStart(gv_pLAYER_01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.07, 2.0, 100.0, 3.0);
    }
    else {
    }
    UnitIssueOrder(gv_theOneWorm, OrderTargetingPoint(AbilityCommand("AshWormBurrowMove", 0), RegionGetCenter(RegionFromId(3))), c_orderQueueReplace);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_theOneWorm), 3.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/A08CC468"), null, UnitGetPosition(gv_theOneWorm));
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(3), 10.0, false);
    TriggerExecute(gt_TransmissionAshWormMovesQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AshWormMovestoRight_Init () {
    gt_AshWormMovestoRight = TriggerCreate("gt_AshWormMovestoRight_Func");
    TriggerAddEventUnitDamaged(gt_AshWormMovestoRight, UnitRefFromVariable("gv_theOneWorm"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ash Worm Dies -> Collect Essence
//--------------------------------------------------------------------------------------------------
bool gt_AshWormDiesCollectEssence_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlayAtPoint(SoundLink("Zerus_DNA_PkUp", -1), PlayerGroupAll(), UnitGetPosition(EventUnit()), 0.0, 100.0, 0.0);
    gv_backupSuppressed = true;
    PingDestroy(gv_ashWormPing);
    TriggerExecute(gt_ObjectiveKillAshwormComplete, true, true);
    TriggerExecute(gt_TransmissionAshWormDeadQ, true, false);
    TriggerExecute(gt_MorphSwarmHoststoCreeper, true, false);
    Wait(10.0, c_timeGame);
    TriggerExecute(gt_ShowAlliedZergBase, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AshWormDiesCollectEssence_Init () {
    gt_AshWormDiesCollectEssence = TriggerCreate("gt_AshWormDiesCollectEssence_Func");
    TriggerAddEventUnitDied(gt_AshWormDiesCollectEssence, UnitRefFromVariable("gv_theOneWorm"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Morph Swarm Hosts to Creeper
//--------------------------------------------------------------------------------------------------
bool gt_MorphSwarmHoststoCreeper_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_EnableCampaignTechUnit(true, "SwarmHostSplitB", gv_pLAYER_01_USER);
    UnitGroupLoopBegin(gv_swarmHostPlayerUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_MakeUnitUncommandable(UnitGroupLoopCurrent(), true);
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(1.75, c_timeGame);
    UnitGroupLoopBegin(gv_swarmHostPlayerUnits);
    while (!UnitGroupLoopDone()) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "SwarmHostRooted") || (UnitGetType(UnitGroupLoopCurrent()) == "SwarmHostBurrowed"))) {
            libNtve_gf_ReplaceUnit(UnitGroupLoopCurrent(), "SwarmHost", 1);
            libNtve_gf_MakeUnitUncommandable(libNtve_gf_LastReplacedUnit(), true);
            UnitIssueOrder(libNtve_gf_LastReplacedUnit(), Order(AbilityCommand("MorphSwarmHostToSplitB", 0)), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("MorphSwarmHostToSplitB", 0)), c_orderQueueReplace);
        }
        Wait(0.25, c_timeGame);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(5.0, c_timeGame);
    gv_backupSuppressed = false;
    TriggerEnable(gt_PlayerUnitsDead, false);
    TriggerEnable(gt_PlayerUnitsDeadHatchery, true);
    UnitGroupLoopBegin(UnitGroup("SwarmHostSplitB", gv_pLAYER_01_USER, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_MakeUnitUncommandable(UnitGroupLoopCurrent(), false);
        UnitGroupAdd(gv_swarmHostPlayerUnits, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitGroupSelect(gv_swarmHostPlayerUnits, gv_pLAYER_01_USER, true);
    libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/7BA20DA5"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MorphSwarmHoststoCreeper_Init () {
    gt_MorphSwarmHoststoCreeper = TriggerCreate("gt_MorphSwarmHoststoCreeper_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show Allied Zerg Base
//--------------------------------------------------------------------------------------------------
bool gt_ShowAlliedZergBase_Func (bool testConds, bool runActions) {
    string autoBAF281B8_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_StoreDominionGroup(gv_dominionAttackGroup[1], 1);
    gf_StoreDominionGroup(gv_dominionAttackGroup[2], 2);
    TriggerExecute(gt_ObjectiveDefendZergBasesCreate, true, true);
    TriggerExecute(gt_TransmissionDefendAlliedZergBaseQ, true, false);
    libSwaC_gf_CreateObjectivePing(true, UnitGetPosition(UnitFromId(12)), StringExternal("Param/Value/4AE1C146"));
    gv_defendZergBases[1] = PingLastCreated();
    MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(10)), 3.0, Color(0.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/F55DC73E"), null, RegionGetCenter(RegionFromId(10)));
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_04_ZERG, RegionFromId(8), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        autoBAF281B8_val = UnitGetType(UnitGroupLoopCurrent());
        if (autoBAF281B8_val == "Hatchery") {
            CreepModify(UnitGetPosition(UnitGroupLoopCurrent()), 8.0, true, false);
        }
        else if (autoBAF281B8_val == "CreepTumorUsed") {
            CreepModify(UnitGetPosition(UnitGroupLoopCurrent()), 8.0, true, false);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionFromId(8), gv_pLAYER_04_ZERG);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("SwarmHostDeepBurrow", 0), true);
    UISetButtonHighlighted(PlayerGroupSingle(gv_pLAYER_01_USER), AbilityCommand("SwarmHostDeepBurrow", 0), true);
    libSwaC_gf_CreateReticleEffectAndTextTagAtPoint(0, 1, StringExternal("Param/Value/C76C16B0"), RegionGetCenter(RegionFromId(10)));
    gv_deepBurrowHereHelperModel = libNtve_gf_ActorLastCreated();
    gv_deepBurrowHereTextTag = TextTagLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowAlliedZergBase_Init () {
    gt_ShowAlliedZergBase = TriggerCreate("gt_ShowAlliedZergBase_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Deep Burrow Pressed - Stop Flashing
//--------------------------------------------------------------------------------------------------
bool gt_DeepBurrowPressedStopFlashing_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UISetButtonHighlighted(PlayerGroupSingle(gv_pLAYER_01_USER), AbilityCommand("SwarmHostDeepBurrow", 0), false);
    CameraPan(gv_pLAYER_01_USER, RegionGetCenter(RegionFromId(10)), 2.0, -1, 10.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DeepBurrowPressedStopFlashing_Init () {
    gt_DeepBurrowPressedStopFlashing = TriggerCreate("gt_DeepBurrowPressedStopFlashing_Func");
    TriggerAddEventButtonPressed(gt_DeepBurrowPressedStopFlashing, c_playerAny, "SwarmHostDeepBurrow");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reached Zerg Base
//--------------------------------------------------------------------------------------------------
bool gt_ReachedZergBase_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((RegionContainsPoint(RegionFromId(8), EventUnitTargetPoint()) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_backupPoint = PointFromId(605);
    libNtve_gf_KillModel(gv_deepBurrowHereHelperModel);
    TextTagDestroy(gv_deepBurrowHereTextTag);
    Wait(1.5, c_timeGame);
    TriggerExecute(gt_RoottoAttackReminder, true, false);
    Wait(1.5, c_timeGame);
    TriggerExecute(gt_DominionAttackWavesRightBase, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReachedZergBase_Init () {
    gt_ReachedZergBase = TriggerCreate("gt_ReachedZergBase_Func");
    TriggerAddEventUnitAbility(gt_ReachedZergBase, null, AbilityCommand("SwarmHostDeepBurrow", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Root to Attack Reminder
//--------------------------------------------------------------------------------------------------
bool gt_RoottoAttackReminder_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gf_CreepersRootedBurrowed() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("MorphToSwarmHostSplitBRooted", 0), true);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("MorphToSwarmHostSplitBBurrowed", 0), true);
    while (!((gf_CreepersRootedBurrowed() == true))) {
        Wait(0.25, c_timeGame);
    }
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("MorphToSwarmHostSplitBRooted", 0), false);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("MorphToSwarmHostSplitBBurrowed", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RoottoAttackReminder_Init () {
    gt_RoottoAttackReminder = TriggerCreate("gt_RoottoAttackReminder_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Attack Waves - Right Base
//--------------------------------------------------------------------------------------------------
bool gt_DominionAttackWavesRightBase_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION, PlayerGroupSingle(gv_pLAYER_01_USER));
    UnitGroupLoopBegin(gv_dominionAttackGroup[1]);
    while (!UnitGroupLoopDone()) {
        AISetUnitScriptControlled(UnitGroupLoopCurrent(), false);
        AIAttackWaveUseUnit(gv_pLAYER_02_DOMINION, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    AIAttackWaveSend(gv_pLAYER_02_DOMINION, 0, true);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGroupCenterOfGroup(gv_dominionAttackGroup[1]), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/4686565C"));
    gf_AttachPingtoUnitGroup(PingLastCreated(), gv_dominionAttackGroup[1]);
    TriggerEnable(gt_DominionAttackRightDestroyed, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionAttackWavesRightBase_Init () {
    gt_DominionAttackWavesRightBase = TriggerCreate("gt_DominionAttackWavesRightBase_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Attack Right Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_DominionAttackRightDestroyed_Func (bool testConds, bool runActions) {
    string autoDBEE135C_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(gv_dominionAttackGroup[1], c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 0)) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_backupSuppressed = true;
    PingDestroy(gv_defendZergBases[1]);
    Wait(2.0, c_timeGame);
    libSwaC_gf_CreateObjectivePing(true, UnitGetPosition(UnitFromId(324)), StringExternal("Param/Value/7CD2BD41"));
    gv_defendZergBases[2] = PingLastCreated();
    MinimapPing(PlayerGroupAll(), UnitGetPosition(UnitFromId(324)), 3.0, Color(0.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/1A2426FE"), null, UnitGetPosition(UnitFromId(324)));
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_04_ZERG, RegionFromId(15), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        autoDBEE135C_val = UnitGetType(UnitGroupLoopCurrent());
        if (autoDBEE135C_val == "Hatchery") {
            CreepModify(UnitGetPosition(UnitGroupLoopCurrent()), 8.0, true, false);
        }
        else if (autoDBEE135C_val == "CreepTumorUsed") {
            CreepModify(UnitGetPosition(UnitGroupLoopCurrent()), 8.0, true, false);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionFromId(15), gv_pLAYER_04_ZERG);
    TriggerExecute(gt_TransmissionSecondDominionAttackQ, true, false);
    gv_backupPoint = PointFromId(606);
    gv_backupSuppressed = false;
    Wait(6.0, c_timeGame);
    TriggerExecute(gt_DominionAttackWavesLeftBase, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionAttackRightDestroyed_Init () {
    gt_DominionAttackRightDestroyed = TriggerCreate("gt_DominionAttackRightDestroyed_Func");
    TriggerEnable(gt_DominionAttackRightDestroyed, false);
    TriggerAddEventTimePeriodic(gt_DominionAttackRightDestroyed, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Attack Waves - Left Base
//--------------------------------------------------------------------------------------------------
bool gt_DominionAttackWavesLeftBase_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION, PlayerGroupSingle(gv_pLAYER_01_USER));
    UnitGroupLoopBegin(gv_dominionAttackGroup[2]);
    while (!UnitGroupLoopDone()) {
        AISetUnitScriptControlled(UnitGroupLoopCurrent(), false);
        AIAttackWaveUseUnit(gv_pLAYER_02_DOMINION, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    AIAttackWaveSend(gv_pLAYER_02_DOMINION, 0, true);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGroupCenterOfGroup(gv_dominionAttackGroup[2]), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/460397DE"));
    gf_AttachPingtoUnitGroup(PingLastCreated(), gv_dominionAttackGroup[2]);
    TriggerEnable(gt_DominionAttackLeftDestroyed, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionAttackWavesLeftBase_Init () {
    gt_DominionAttackWavesLeftBase = TriggerCreate("gt_DominionAttackWavesLeftBase_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Attack Left Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_DominionAttackLeftDestroyed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(gv_dominionAttackGroup[2], c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 0)) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_PlayerUnitsDeadHatchery, false);
    gv_backupSuppressed = true;
    PingDestroy(gv_defendZergBases[2]);
    TriggerExecute(gt_ObjectiveDefendZergBasesComplete, true, true);
    TriggerExecute(gt_TransmissionHatcheriesDefendedQ, true, true);
    TriggerExecute(gt_VictorySwarmHostSplitCompleted, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionAttackLeftDestroyed_Init () {
    gt_DominionAttackLeftDestroyed = TriggerCreate("gt_DominionAttackLeftDestroyed_Func");
    TriggerEnable(gt_DominionAttackLeftDestroyed, false);
    TriggerAddEventTimePeriodic(gt_DominionAttackLeftDestroyed, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Ash Worm Sighted! Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionAshWormSightedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_EggMonster|Line00002", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionAshWormSightedQ_Init () {
    gt_TransmissionAshWormSightedQ = TriggerCreate("gt_TransmissionAshWormSightedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Ash Worm Moves Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionAshWormMovesQ_Func (bool testConds, bool runActions) {
    int autoC7DD369F_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    autoC7DD369F_val = gv_ashWormMovementCounter;
    if (autoC7DD369F_val == 1) {
        libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_EggMonster|Line00003", c_transmissionDurationAdd, 0.0, true, 1, 0);
    }
    else if (autoC7DD369F_val == 2) {
        libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_EggMonster|Line00006", c_transmissionDurationAdd, 0.0, true, 1, 0);
    }
    else {
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionAshWormMovesQ_Init () {
    gt_TransmissionAshWormMovesQ = TriggerCreate("gt_TransmissionAshWormMovesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Ash Worm Dead Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionAshWormDeadQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_EggMonster|Line00001", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_EggMonster|Line00005", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionAshWormDeadQ_Init () {
    gt_TransmissionAshWormDeadQ = TriggerCreate("gt_TransmissionAshWormDeadQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Defend Allied Zerg Base Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionDefendAlliedZergBaseQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_CreeperMusicCue, true, false);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_EggMonster|Line00009", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionDefendAlliedZergBaseQ_Init () {
    gt_TransmissionDefendAlliedZergBaseQ = TriggerCreate("gt_TransmissionDefendAlliedZergBaseQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Second Dominion Attack Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionSecondDominionAttackQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_EggMonster|Line00016", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionSecondDominionAttackQ_Init () {
    gt_TransmissionSecondDominionAttackQ = TriggerCreate("gt_TransmissionSecondDominionAttackQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Hatcheries Defended Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionHatcheriesDefendedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_EggMonster|Line00017", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_EggMonster|Line00015", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionHatcheriesDefendedQ_Init () {
    gt_TransmissionHatcheriesDefendedQ = TriggerCreate("gt_TransmissionHatcheriesDefendedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Units Dead
//--------------------------------------------------------------------------------------------------
bool gt_PlayerUnitsDead_Func (bool testConds, bool runActions) {
    point autoE0A02C79_val;

    // Variable Declarations
    unitgroup lv_backupUnits;
    unitgroup lv_backupPausedUnits;

    // Variable Initialization
    lv_backupUnits = UnitGroupEmpty();
    lv_backupPausedUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_backupSuppressed == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 1)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((TriggerQueueIsEmpty() == true))) {
        Wait(1.0, c_timeGame);
    }
    TriggerQueuePause(true);
    TransmissionClearAll();
    Wait(2.0, c_timeReal);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((libNtve_gf_UnitIsPaused(UnitGroupLoopCurrent()) == false)) {
            UnitGroupAdd(lv_backupPausedUnits, UnitGroupLoopCurrent());
            libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationDefault);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(0);
    UnitClearSelection(gv_pLAYER_01_USER);
    CameraPan(gv_pLAYER_01_USER, gv_backupPoint, 3.0, -1, 10.0, false);
    autoE0A02C79_val = gv_backupPoint;
    if (autoE0A02C79_val == PointFromId(601)) {
        libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_EggMonster|Line00036", c_transmissionDurationAdd, 0.0, false, 1, 0);
        libNtve_gf_CreateUnitsAtPoint2(3, "SwarmHost", 0, gv_pLAYER_01_USER, gv_backupPoint);
        UnitGroupAddUnitGroup(gv_swarmHostPlayerUnits, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(lv_backupUnits, UnitLastCreatedGroup());
        libSwaC_gf_CreateDropPod(1, PointWithOffsetPolar(gv_backupPoint, 2.0, 0.0), UnitLastCreatedGroup(), false, gv_pLAYER_01_USER);
        libNtve_gf_CreateUnitsAtPoint2(2, "SwarmHost", 0, gv_pLAYER_01_USER, gv_backupPoint);
        UnitGroupAddUnitGroup(gv_swarmHostPlayerUnits, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(lv_backupUnits, UnitLastCreatedGroup());
        libSwaC_gf_CreateDropPod(1, PointWithOffsetPolar(gv_backupPoint, 2.0, 180.0), UnitLastCreatedGroup(), false, gv_pLAYER_01_USER);
    }
    else if (autoE0A02C79_val == PointFromId(602)) {
        libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_EggMonster|Line00036", c_transmissionDurationAdd, 0.0, false, 1, 0);
        libNtve_gf_CreateUnitsAtPoint2(3, "SwarmHostSplitA", 0, gv_pLAYER_01_USER, gv_backupPoint);
        UnitGroupAddUnitGroup(gv_swarmHostPlayerUnits, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(lv_backupUnits, UnitLastCreatedGroup());
        libSwaC_gf_CreateDropPod(1, PointWithOffsetPolar(gv_backupPoint, 2.0, 0.0), UnitLastCreatedGroup(), false, gv_pLAYER_01_USER);
        libNtve_gf_CreateUnitsAtPoint2(2, "SwarmHostSplitA", 0, gv_pLAYER_01_USER, gv_backupPoint);
        UnitGroupAddUnitGroup(gv_swarmHostPlayerUnits, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(lv_backupUnits, UnitLastCreatedGroup());
        libSwaC_gf_CreateDropPod(1, PointWithOffsetPolar(gv_backupPoint, 2.0, 180.0), UnitLastCreatedGroup(), false, gv_pLAYER_01_USER);
    }
    else if (autoE0A02C79_val == PointFromId(603)) {
        libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_EggMonster|Line00036", c_transmissionDurationAdd, 0.0, false, 1, 0);
        libNtve_gf_CreateUnitsAtPoint2(2, "SwarmHost", 0, gv_pLAYER_01_USER, gv_backupPoint);
        UnitGroupAddUnitGroup(gv_swarmHostPlayerUnits, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(lv_backupUnits, UnitLastCreatedGroup());
        libSwaC_gf_CreateDropPod(1, PointWithOffsetPolar(gv_backupPoint, 2.0, 0.0), UnitLastCreatedGroup(), false, gv_pLAYER_01_USER);
        libNtve_gf_CreateUnitsAtPoint2(2, "SwarmHost", 0, gv_pLAYER_01_USER, gv_backupPoint);
        UnitGroupAddUnitGroup(gv_swarmHostPlayerUnits, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(lv_backupUnits, UnitLastCreatedGroup());
        libSwaC_gf_CreateDropPod(1, PointWithOffsetPolar(gv_backupPoint, 2.0, 180.0), UnitLastCreatedGroup(), false, gv_pLAYER_01_USER);
    }
    else if (autoE0A02C79_val == PointFromId(604)) {
        libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_EggMonster|Line00036", c_transmissionDurationAdd, 0.0, false, 1, 0);
        libNtve_gf_CreateUnitsAtPoint2(2, "SwarmHost", 0, gv_pLAYER_01_USER, gv_backupPoint);
        UnitGroupAddUnitGroup(gv_swarmHostPlayerUnits, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(lv_backupUnits, UnitLastCreatedGroup());
        libSwaC_gf_CreateDropPod(1, PointWithOffsetPolar(gv_backupPoint, 2.0, 0.0), UnitLastCreatedGroup(), false, gv_pLAYER_01_USER);
        libNtve_gf_CreateUnitsAtPoint2(2, "SwarmHost", 0, gv_pLAYER_01_USER, gv_backupPoint);
        UnitGroupAddUnitGroup(gv_swarmHostPlayerUnits, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(lv_backupUnits, UnitLastCreatedGroup());
        libSwaC_gf_CreateDropPod(1, PointWithOffsetPolar(gv_backupPoint, 2.0, 180.0), UnitLastCreatedGroup(), false, gv_pLAYER_01_USER);
    }
    else {
        gv_gameOver = true;
        TriggerQueuePause(true);
        TriggerQueueClear(c_triggerQueueRemove);
        Wait(2.0, c_timeReal);
        libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), 0, StringExternal("Param/Value/6397D6E2"), 0);
        Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
        TriggerExecute(gt_Defeat, true, false);
        return true;
    }
    Wait(3.0, c_timeReal);
    TransmissionWait(TransmissionLastSent(), 0.0);
    UnitGroupLoopBegin(lv_backupPausedUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupSelect(lv_backupUnits, gv_pLAYER_01_USER, true);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.0);
    TriggerQueuePause(false);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerUnitsDead_Init () {
    gt_PlayerUnitsDead = TriggerCreate("gt_PlayerUnitsDead_Func");
    TriggerAddEventTimePeriodic(gt_PlayerUnitsDead, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Units Dead - Hatchery
//--------------------------------------------------------------------------------------------------
bool gt_PlayerUnitsDeadHatchery_Func (bool testConds, bool runActions) {
    point autoA766EB86_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_backupSuppressed == false))) {
            return false;
        }

        if (!(((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 1)) == true) || ((gv_backupPoint == PointFromId(605)) && (UnitIsAlive(gv_hatchery1) == false)) || ((gv_backupPoint == PointFromId(606)) && (UnitIsAlive(gv_hatchery2) == false))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.0, c_timeReal);
    autoA766EB86_val = gv_backupPoint;
    if (autoA766EB86_val == PointFromId(605)) {
        TriggerExecute(gt_HatcheryDefenseFailure1, true, true);
    }
    else if (autoA766EB86_val == PointFromId(606)) {
        TriggerExecute(gt_HatcheryDefenseFailure2, true, true);
    }
    else {
        gv_gameOver = true;
        TriggerQueuePause(true);
        TriggerQueueClear(c_triggerQueueRemove);
        Wait(2.0, c_timeReal);
        libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), 0, StringExternal("Param/Value/483E2FC7"), 0);
        Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
        TriggerExecute(gt_Defeat, true, false);
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerUnitsDeadHatchery_Init () {
    gt_PlayerUnitsDeadHatchery = TriggerCreate("gt_PlayerUnitsDeadHatchery_Func");
    TriggerEnable(gt_PlayerUnitsDeadHatchery, false);
    TriggerAddEventTimePeriodic(gt_PlayerUnitsDeadHatchery, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hatchery Defense Failure 1
//--------------------------------------------------------------------------------------------------
bool gt_HatcheryDefenseFailure1_Func (bool testConds, bool runActions) {
    int auto0288F22B_n;
    int auto0288F22B_i;
    int autoEDFF737A_n;
    int autoEDFF737A_i;

    // Variable Declarations
    unitgroup lv_fadeOutUnits;
    unitgroup lv_fadeInUnits;

    // Variable Initialization
    lv_fadeOutUnits = UnitGroupEmpty();
    lv_fadeInUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_creeperActive == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TransmissionClearAll();
    while (!((TriggerQueueIsEmpty() == true))) {
        Wait(1.0, c_timeGame);
    }
    TriggerQueuePause(true);
    TransmissionClearAll();
    TriggerEnable(gt_DominionAttackWavesRightBase, false);
    TriggerEnable(gt_DominionAttackRightDestroyed, false);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    gv_inCinematic = true;
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UnitClearSelection(gv_pLAYER_01_USER);
    libNtve_gf_RemoveDeathModelsinRegionImmediately(RegionFromId(8));
    UnitGroupAddUnitGroup(lv_fadeOutUnits, UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_fadeOutUnits, UnitGroup(null, gv_pLAYER_02_DOMINION, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_fadeOutUnits, UnitGroup(null, gv_pLAYER_04_ZERG, RegionFromId(8), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupLoopBegin(lv_fadeOutUnits);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hatchery", c_unitCreateIgnorePlacement, gv_pLAYER_04_ZERG, Point(131.5, 51.5));
    gv_hatchery1 = UnitLastCreated();
    UnitGroupAdd(lv_fadeInUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SpineCrawler", c_unitCreateIgnorePlacement, gv_pLAYER_04_ZERG, Point(125.0, 57.0));
    UnitGroupAdd(lv_fadeInUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SpineCrawler", c_unitCreateIgnorePlacement, gv_pLAYER_04_ZERG, Point(112.0, 59.0));
    UnitGroupAdd(lv_fadeInUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SpawningPool", c_unitCreateIgnorePlacement, gv_pLAYER_04_ZERG, Point(126.5, 47.5));
    UnitGroupAdd(lv_fadeInUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Extractor", c_unitCreateIgnorePlacement, gv_pLAYER_04_ZERG, Point(130.5, 44.5));
    UnitGroupAdd(lv_fadeInUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumorUsed", c_unitCreateIgnorePlacement, gv_pLAYER_04_ZERG, Point(114.5, 54.5));
    UnitGroupAdd(lv_fadeInUnits, UnitLastCreated());
    UnitGroupLoopBegin(lv_fadeInUnits);
    while (!UnitGroupLoopDone()) {
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "ZergBuildingDies6", 1);
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "ZergBuildingDies9", 1);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    auto0288F22B_n = 5;
    auto0288F22B_i = 1;
    while (auto0288F22B_i <= auto0288F22B_n) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Drone", 0, gv_pLAYER_04_ZERG, RegionRandomPoint(RegionCircle(Point(135.0, 49.0), 2.0)));
        UnitGroupAdd(lv_fadeInUnits, UnitLastCreated());
        auto0288F22B_i = auto0288F22B_i + 1;
    }
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionFromId(8), gv_pLAYER_04_ZERG);
    CameraPan(gv_pLAYER_01_USER, gv_backupPoint, 0.0, -1, 10.0, false);
    TriggerExecute(gt_HatcheryDefenseFailure1Skippable, true, true);
    if ((gv_skipped == false)) {
        UnitGroupSelect(gv_swarmHostPlayerUnits, gv_pLAYER_01_USER, true);
        gv_inCinematic = false;
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.0);
        libNtve_gf_GlobalCinematicSetting(false);
    }
    else {
        CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
        UnitGroupLoopBegin(gv_swarmHostPlayerUnits);
        while (!UnitGroupLoopDone()) {
            UnitRemove(UnitGroupLoopCurrent());
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        autoEDFF737A_n = 4;
        autoEDFF737A_i = 1;
        while (autoEDFF737A_i <= autoEDFF737A_n) {
            libNtve_gf_CreateUnitsAtPoint2(1, "SwarmHostSplitB", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionCircle(PointFromId(605), 2.0)));
            UnitGroupAdd(gv_swarmHostPlayerUnits, UnitLastCreated());
            autoEDFF737A_i = autoEDFF737A_i + 1;
        }
        UnitGroupSelect(gv_swarmHostPlayerUnits, gv_pLAYER_01_USER, true);
        gv_inCinematic = false;
        CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.0);
        libNtve_gf_GlobalCinematicSetting(false);
    }
    gf_RecreateDominionGroup(1);
    gf_RecreateDominionGroup(2);
    TriggerQueuePause(false);
    Wait(4.0, c_timeGame);
    TriggerEnable(gt_DominionAttackWavesRightBase, true);
    TriggerExecute(gt_DominionAttackWavesRightBase, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HatcheryDefenseFailure1_Init () {
    gt_HatcheryDefenseFailure1 = TriggerCreate("gt_HatcheryDefenseFailure1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hatchery Defense Failure 1 Skippable
//--------------------------------------------------------------------------------------------------
bool gt_HatcheryDefenseFailure1Skippable_Func (bool testConds, bool runActions) {
    int auto362DE31F_n;
    int auto362DE31F_i;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_skipped = true;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(0);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_EggMonster|Line00009", c_transmissionDurationAdd, 0.0, false, 1, 0);
    TransmissionWait(TransmissionLastSent(), 3.0);
    gv_skipped = false;
    auto362DE31F_n = 4;
    auto362DE31F_i = 1;
    while (auto362DE31F_i <= auto362DE31F_n) {
        libNtve_gf_CreateUnitsAtPoint2(1, "SwarmHostSplitB", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionCircle(PointFromId(604), 2.0)));
        UnitGroupAdd(gv_swarmHostPlayerUnits, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("SwarmHostDeepBurrow", 0), RegionRandomPoint(RegionCircle(PointFromId(605), 2.0))), c_orderQueueReplace);
        auto362DE31F_i = auto362DE31F_i + 1;
    }
    TransmissionWait(TransmissionLastSent(), 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HatcheryDefenseFailure1Skippable_Init () {
    gt_HatcheryDefenseFailure1Skippable = TriggerCreate("gt_HatcheryDefenseFailure1Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hatchery Defense Failure 2
//--------------------------------------------------------------------------------------------------
bool gt_HatcheryDefenseFailure2_Func (bool testConds, bool runActions) {
    int autoCC477459_n;
    int autoCC477459_i;
    int autoF99D4287_n;
    int autoF99D4287_i;

    // Variable Declarations
    unitgroup lv_fadeOutUnits;
    unitgroup lv_fadeInUnits;

    // Variable Initialization
    lv_fadeOutUnits = UnitGroupEmpty();
    lv_fadeInUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_creeperActive == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TransmissionClearAll();
    while (!((TriggerQueueIsEmpty() == true))) {
        Wait(1.0, c_timeGame);
    }
    TriggerQueuePause(true);
    TransmissionClearAll();
    TriggerEnable(gt_DominionAttackWavesLeftBase, false);
    TriggerEnable(gt_DominionAttackLeftDestroyed, false);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    gv_inCinematic = true;
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UnitClearSelection(gv_pLAYER_01_USER);
    libNtve_gf_RemoveDeathModelsinRegionImmediately(RegionFromId(15));
    UnitGroupAddUnitGroup(lv_fadeOutUnits, UnitGroup(null, gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_fadeOutUnits, UnitGroup(null, gv_pLAYER_02_DOMINION, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_fadeOutUnits, UnitGroup(null, gv_pLAYER_04_ZERG, RegionFromId(15), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupLoopBegin(lv_fadeOutUnits);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hatchery", c_unitCreateIgnorePlacement, gv_pLAYER_04_ZERG, Point(74.5, 84.5));
    gv_hatchery2 = UnitLastCreated();
    UnitGroupAdd(lv_fadeInUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SpineCrawler", c_unitCreateIgnorePlacement, gv_pLAYER_04_ZERG, Point(82.0, 81.0));
    UnitGroupAdd(lv_fadeInUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SpineCrawler", c_unitCreateIgnorePlacement, gv_pLAYER_04_ZERG, Point(84.0, 85.0));
    UnitGroupAdd(lv_fadeInUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "EvolutionChamber", c_unitCreateIgnorePlacement, gv_pLAYER_04_ZERG, Point(73.5, 90.5));
    UnitGroupAdd(lv_fadeInUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Extractor", c_unitCreateIgnorePlacement, gv_pLAYER_04_ZERG, Point(67.5, 85.5));
    UnitGroupAdd(lv_fadeInUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumorUsed", c_unitCreateIgnorePlacement, gv_pLAYER_04_ZERG, Point(84.5, 75.5));
    UnitGroupAdd(lv_fadeInUnits, UnitLastCreated());
    UnitGroupLoopBegin(lv_fadeInUnits);
    while (!UnitGroupLoopDone()) {
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "ZergBuildingDies6", 1);
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "ZergBuildingDies9", 1);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    autoCC477459_n = 5;
    autoCC477459_i = 1;
    while (autoCC477459_i <= autoCC477459_n) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Drone", 0, gv_pLAYER_04_ZERG, RegionRandomPoint(RegionCircle(Point(71.5, 81.5), 2.0)));
        UnitGroupAdd(lv_fadeInUnits, UnitLastCreated());
        autoCC477459_i = autoCC477459_i + 1;
    }
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionFromId(15), gv_pLAYER_04_ZERG);
    CameraPan(gv_pLAYER_01_USER, gv_backupPoint, 0.0, -1, 10.0, false);
    TriggerExecute(gt_HatcheryDefenseFailure2Skippable, true, true);
    if ((gv_skipped == false)) {
        UnitGroupSelect(gv_swarmHostPlayerUnits, gv_pLAYER_01_USER, true);
        gv_inCinematic = false;
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.0);
        libNtve_gf_GlobalCinematicSetting(false);
    }
    else {
        CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
        UnitGroupLoopBegin(gv_swarmHostPlayerUnits);
        while (!UnitGroupLoopDone()) {
            UnitRemove(UnitGroupLoopCurrent());
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        autoF99D4287_n = 4;
        autoF99D4287_i = 1;
        while (autoF99D4287_i <= autoF99D4287_n) {
            libNtve_gf_CreateUnitsAtPoint2(1, "SwarmHostSplitB", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionCircle(PointFromId(606), 2.0)));
            UnitGroupAdd(gv_swarmHostPlayerUnits, UnitLastCreated());
            autoF99D4287_i = autoF99D4287_i + 1;
        }
        UnitGroupSelect(gv_swarmHostPlayerUnits, gv_pLAYER_01_USER, true);
        gv_inCinematic = false;
        CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.0);
        libNtve_gf_GlobalCinematicSetting(false);
    }
    gf_RecreateDominionGroup(2);
    TriggerQueuePause(false);
    Wait(4.0, c_timeGame);
    TriggerEnable(gt_DominionAttackWavesLeftBase, true);
    TriggerExecute(gt_DominionAttackWavesLeftBase, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HatcheryDefenseFailure2_Init () {
    gt_HatcheryDefenseFailure2 = TriggerCreate("gt_HatcheryDefenseFailure2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hatchery Defense Failure 2 Skippable
//--------------------------------------------------------------------------------------------------
bool gt_HatcheryDefenseFailure2Skippable_Func (bool testConds, bool runActions) {
    int auto78075088_n;
    int auto78075088_i;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_skipped = true;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(0);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_EggMonster|Line00016", c_transmissionDurationAdd, 0.0, false, 1, 0);
    TransmissionWait(TransmissionLastSent(), 3.0);
    gv_skipped = false;
    auto78075088_n = 4;
    auto78075088_i = 1;
    while (auto78075088_i <= auto78075088_n) {
        libNtve_gf_CreateUnitsAtPoint2(1, "SwarmHostSplitB", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionCircle(PointFromId(604), 2.0)));
        UnitGroupAdd(gv_swarmHostPlayerUnits, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("SwarmHostDeepBurrow", 0), RegionRandomPoint(RegionCircle(PointFromId(606), 2.0))), c_orderQueueReplace);
        auto78075088_i = auto78075088_i + 1;
    }
    TransmissionWait(TransmissionLastSent(), 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HatcheryDefenseFailure2Skippable_Init () {
    gt_HatcheryDefenseFailure2Skippable = TriggerCreate("gt_HatcheryDefenseFailure2Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Swarm Host Split Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictorySwarmHostSplitCompleted_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySwarmHostSplitCompleted_Init () {
    gt_VictorySwarmHostSplitCompleted = TriggerCreate("gt_VictorySwarmHostSplitCompleted_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    ObjectiveDestroyAll(PlayerGroupAll());
    TriggerExecute(gt_VictoryMusicCue, true, false);
    CameraSetValue(gv_pLAYER_01_USER, c_cameraValueDistance, (CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance) + 40.0), 2.0, -1, 10.0);
    CameraSetValue(gv_pLAYER_01_USER, c_cameraValuePitch, (CameraInfoGetValue(CameraInfoDefault(), c_cameraValuePitch) + 0.0), 2.0, -1, 10.0);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 2.0);
    CinematicFade(false, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libSwaC_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Music Cue
//--------------------------------------------------------------------------------------------------
bool gt_VictoryMusicCue_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZEvoMusicMain", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryMusicCue_Init () {
    gt_VictoryMusicCue = TriggerCreate("gt_VictoryMusicCue_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_VictoryCheat, false);
    TriggerEnable(gt_DefeatCheat, false);
    TriggerEnable(gt_Defeat, false);
    gv_gameOver = true;
    libSwaC_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_VictoryCheat, false);
    TriggerEnable(gt_DefeatCheat, false);
    TriggerEnable(gt_Victory, false);
    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Mission Help Q
//--------------------------------------------------------------------------------------------------
bool gt_TipMissionHelpQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_DisplayMissionTip(StringExternal("Param/Value/9B256B2A"));
    Wait(libSwaC_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipMissionHelpQ_Init () {
    gt_TipMissionHelpQ = TriggerCreate("gt_TipMissionHelpQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Ashworm Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillAshwormCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZEvolutionSwarmHostObjective01");
    gv_objectiveKillAshworm = ObjectiveLastCreated();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    libSwaC_gf_SetMissionObjectiveProgress2("ZEvolutionSwarmHostObjective01", 0, false, null, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillAshwormCreate_Init () {
    gt_ObjectiveKillAshwormCreate = TriggerCreate("gt_ObjectiveKillAshwormCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Ashworm Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillAshwormComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveKillAshwormCreate, true, false);
    ObjectiveSetState(gv_objectiveKillAshworm, c_objectiveStateCompleted);
    libSwaC_gf_SetMissionObjectiveProgress2("ZEvolutionSwarmHostObjective01", 1, false, null, false);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_ObjectiveDefendZergBasesCreate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillAshwormComplete_Init () {
    gt_ObjectiveKillAshwormComplete = TriggerCreate("gt_ObjectiveKillAshwormComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Ashworm Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillAshwormFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveKillAshwormCreate, true, false);
    ObjectiveSetState(gv_objectiveKillAshworm, c_objectiveStateFailed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillAshwormFailed_Init () {
    gt_ObjectiveKillAshwormFailed = TriggerCreate("gt_ObjectiveKillAshwormFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Defend Zerg Bases Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDefendZergBasesCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZEvolutionSwarmHostObjective02");
    gv_objectiveDefendZergBases = ObjectiveLastCreated();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDefendZergBasesCreate_Init () {
    gt_ObjectiveDefendZergBasesCreate = TriggerCreate("gt_ObjectiveDefendZergBasesCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Defend Zerg Bases Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDefendZergBasesComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDefendZergBasesCreate, true, false);
    ObjectiveSetState(gv_objectiveDefendZergBases, c_objectiveStateCompleted);
    libSwaC_gf_SetMissionObjectiveProgress2("ZEvolutionSwarmHostObjective02", 1, false, null, false);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDefendZergBasesComplete_Init () {
    gt_ObjectiveDefendZergBasesComplete = TriggerCreate("gt_ObjectiveDefendZergBasesComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Defend Zerg Bases Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDefendZergBasesFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDefendZergBasesCreate, true, false);
    ObjectiveSetState(gv_objectiveDefendZergBases, c_objectiveStateFailed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDefendZergBasesFailed_Init () {
    gt_ObjectiveDefendZergBasesFailed = TriggerCreate("gt_ObjectiveDefendZergBasesFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Carrion Nest Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillCarrionNestCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZEvolutionSwarmHostObjective03");
    gv_objectiveKillCarrionNest = ObjectiveLastCreated();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    libSwaC_gf_SetMissionObjectiveProgress2("ZEvolutionSwarmHostObjective03", 0, false, null, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillCarrionNestCreate_Init () {
    gt_ObjectiveKillCarrionNestCreate = TriggerCreate("gt_ObjectiveKillCarrionNestCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Carrion Nest Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillCarrionNestComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveKillCarrionNestCreate, true, false);
    ObjectiveSetState(gv_objectiveKillCarrionNest, c_objectiveStateCompleted);
    libSwaC_gf_SetMissionObjectiveProgress2("ZEvolutionSwarmHostObjective03", 1, false, null, false);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillCarrionNestComplete_Init () {
    gt_ObjectiveKillCarrionNestComplete = TriggerCreate("gt_ObjectiveKillCarrionNestComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Carrion Nest Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillCarrionNestFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveKillCarrionNestCreate, true, false);
    ObjectiveSetState(gv_objectiveKillCarrionNest, c_objectiveStateFailed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillCarrionNestFailed_Init () {
    gt_ObjectiveKillCarrionNestFailed = TriggerCreate("gt_ObjectiveKillCarrionNestFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Nuke Silos Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyNukeSilosCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZEvolutionSwarmHostObjective04");
    gv_objectiveDestroyNukeSilos = ObjectiveLastCreated();
    libSwaC_gf_SetMissionObjectiveProgress2("ZEvolutionSwarmHostObjective04", 0, true, null, true);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyNukeSilosCreate_Init () {
    gt_ObjectiveDestroyNukeSilosCreate = TriggerCreate("gt_ObjectiveDestroyNukeSilosCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Nuke Silos Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyNukeSilosUpdate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveDestroyNukeSilosCreate, true, false);
    libSwaC_gf_SetMissionObjectiveProgress2("ZEvolutionSwarmHostObjective04", gv_nukeSilosDestroyed, true, null, true);
    if ((gv_nukeSilosDestroyed == 2)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_ObjectiveDestroyNukeSilosComplete, true, true);
        TriggerExecute(gt_TransitiontoCreeperStage2, true, false);
    }
    else {
        Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyNukeSilosUpdate_Init () {
    gt_ObjectiveDestroyNukeSilosUpdate = TriggerCreate("gt_ObjectiveDestroyNukeSilosUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Nuke Silos Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyNukeSilosComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyNukeSilosCreate, true, false);
    ObjectiveSetState(gv_objectiveDestroyNukeSilos, c_objectiveStateCompleted);
    libSwaC_gf_SetMissionObjectiveProgress2("ZEvolutionSwarmHostObjective04", 2, true, null, false);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyNukeSilosComplete_Init () {
    gt_ObjectiveDestroyNukeSilosComplete = TriggerCreate("gt_ObjectiveDestroyNukeSilosComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Nuke Silos Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyNukeSilosFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyNukeSilosCreate, true, false);
    ObjectiveSetState(gv_objectiveDestroyNukeSilos, c_objectiveStateFailed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyNukeSilosFailed_Init () {
    gt_ObjectiveDestroyNukeSilosFailed = TriggerCreate("gt_ObjectiveDestroyNukeSilosFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Carrion Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroCarrionQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_IntroCarrionSetup, true, true);
    TriggerExecute(gt_IntroCarrionCinematic, true, true);
    TriggerExecute(gt_IntroCarrionCinematicEnd, true, true);
    TriggerExecute(gt_IntroCarrionCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCarrionQ_Init () {
    gt_IntroCarrionQ = TriggerCreate("gt_IntroCarrionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Carrion Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCarrionSetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    gv_inCinematic = true;
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    RegionPlayableMapSet(RegionFromId(6));
    UnitPauseAll(true);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_cinematicPausedUnits = UnitGroupEmpty();
    UnitGroupLoopBegin(UnitGroup("SwarmHost", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_cinematicHiddenUnits, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_cinematicPausedUnits, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("CreepTumorUsed", c_playerAny, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_cinematicHiddenUnits, UnitGroupLoopCurrent());
        UnitGroupAdd(gv_cinematicPausedUnits, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("MissileTurret", gv_pLAYER_02_DOMINION, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsAtPoint2(1, "SwarmHost", 0, gv_pLAYER_04_ZERG, PointFromId(138));
    gv_cinematicSwarmHosts[1] = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "SwarmHost", 0, gv_pLAYER_04_ZERG, PointFromId(139));
    gv_cinematicSwarmHosts[2] = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "SwarmHost", 0, gv_pLAYER_04_ZERG, PointFromId(140));
    gv_cinematicSwarmHosts[3] = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "SwarmHost", 0, gv_pLAYER_04_ZERG, PointFromId(141));
    gv_cinematicSwarmHosts[4] = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "SwarmHost", 0, gv_pLAYER_04_ZERG, PointFromId(133));
    gv_cinematicSwarmHosts[5] = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCarrionSetup_Init () {
    gt_IntroCarrionSetup = TriggerCreate("gt_IntroCarrionSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Carrion Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCarrionCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    libSwaC_gf_PreparePlanetPortraitZoomIn("EvolutionPlanetSwarmHostB", CameraInfoFromId(146), "DesertWorld");
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(0);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_EggMonster|Line00006", c_transmissionDurationAdd, 0.0, false, 1, 0);
    TransmissionWait(TransmissionLastSent(), 2.0);
    libSwaC_gf_ZoomInPlanetPortrait();
    libSwaC_gf_HidePlanetPortrait();
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_EvoSwarmHost1_Quad", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    SoundPlay(SoundLink("Evolution_SwarmHostPart1_Amb_Loop", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introCarrionSound = SoundLastPlayed();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleTargetDummy", 0, 0, PointFromId(609));
    gv_carrionDecayEmitter = UnitLastCreated();
    libNtve_gf_AttachActorToUnit(gv_carrionDecayEmitter, "EvoSwarmHostDecayLoopSound", "Center");
    Wait(1.0, c_timeGame);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_EggMonster|Line00017", c_transmissionDurationAdd, 0.0, true, 1, 0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(121), 3.0, -1, 10, true);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_EggMonster|Line00019", c_transmissionDurationAdd, 0.0, true, 1, 0);
    SoundStop(gv_introCarrionSound, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(120), 0.0, -1, 10, true);
    libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(2, 1, null, UnitFromId(36), "Center");
    gv_introCarrionActor = libNtve_gf_ActorLastCreated();
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_EggMonster|Line00020", c_transmissionDurationAdd, 0.0, true, 1, 0);
    Wait(1.0, c_timeReal);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCarrionCinematic_Init () {
    gt_IntroCarrionCinematic = TriggerCreate("gt_IntroCarrionCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Carrion Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCarrionCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCarrionCinematicEnd_Init () {
    gt_IntroCarrionCinematicEnd = TriggerCreate("gt_IntroCarrionCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Carrion Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCarrionCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(gv_cinematicTempUnits);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicPausedUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    libNtve_gf_KillModel(gv_introCarrionActor);
    libSwaC_gf_HidePlanetPortrait();
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    AICampaignStart(gv_pLAYER_02_DOMINION);
    Wait(0.5, c_timeReal);
    SoundStop(gv_introCarrionSound, true);
    if ((gv_cinematicCompleted == false)) {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_EvoSwarmHost1_Quad", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }
    else {
    }
    if ((gv_carrionDecayEmitter == null)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleTargetDummy", 0, 0, PointFromId(609));
        gv_carrionDecayEmitter = UnitLastCreated();
        libNtve_gf_AttachActorToUnit(gv_carrionDecayEmitter, "EvoSwarmHostDecayLoopSound", "Center");
    }
    else {
    }
    UnitGroupLoopBegin(UnitGroup("Bunker", gv_pLAYER_02_DOMINION, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitCargoCreate(UnitGroupLoopCurrent(), "Marine", 4);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("SwarmHost", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_swarmHostPlayerUnits, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitGroupSelect(gv_swarmHostPlayerUnits, gv_pLAYER_01_USER, true);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(849)), lv_fadeDuration);
    gv_inCinematic = false;
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCarrionCleanup_Init () {
    gt_IntroCarrionCleanup = TriggerCreate("gt_IntroCarrionCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Creeper Music Cue
//--------------------------------------------------------------------------------------------------
bool gt_IntroCreeperMusicCue_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZEvoMusicMain", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCreeperMusicCue_Init () {
    gt_IntroCreeperMusicCue = TriggerCreate("gt_IntroCreeperMusicCue_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Creeper Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroCreeperQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_IntroCreeperMusicCue, true, false);
    TriggerExecute(gt_IntroCreeperSetup, true, true);
    TriggerExecute(gt_IntroCreeperCinematic, true, true);
    TriggerExecute(gt_IntroCreeperCinematicEnd, true, true);
    TriggerExecute(gt_IntroCreeperCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCreeperQ_Init () {
    gt_IntroCreeperQ = TriggerCreate("gt_IntroCreeperQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Creeper Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCreeperSetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    RegionPlayableMapSet(RegionFromId(5));
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Space01", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    libSwaC_gf_EnableDisableZerglingRespawn(false);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitPauseAll(true);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    UnitGroupAdd(gv_cinematicHiddenUnits, gv_theOneWorm);
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("RedstoneLavaCritter", 0, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_UnitCreateFacingPoint(1, "AshWorm", c_unitCreateIgnorePlacement, gv_pLAYER_05_ASHWORM, PointFromId(29), PointWithOffsetPolar(PointFromId(29), 1.0, 315.0));
    gv_cinematicAshWorm1 = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, gv_cinematicAshWorm1);
    libNtve_gf_UnitCreateFacingPoint(1, "AshWorm", c_unitCreateIgnorePlacement, gv_pLAYER_05_ASHWORM, PointFromId(450), PointWithOffsetPolar(PointFromId(450), 1.0, 225.0));
    gv_cinematicAshWorm2 = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, gv_cinematicAshWorm2);
    libNtve_gf_UnitCreateFacingPoint(1, "Zergling", 0, gv_pLAYER_04_ZERG, PointFromId(24), PointFromId(22));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_UnitCreateFacingPoint(1, "Zergling", 0, gv_pLAYER_04_ZERG, PointFromId(106), PointFromId(22));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_UnitCreateFacingPoint(1, "Zergling", 0, gv_pLAYER_04_ZERG, PointFromId(124), PointFromId(22));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCreeperSetup_Init () {
    gt_IntroCreeperSetup = TriggerCreate("gt_IntroCreeperSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Creeper Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCreeperCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_zerglingGroup;

    // Variable Initialization
    lv_zerglingGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    libSwaC_gf_PreparePlanetPortraitZoomIn("EvolutionPlanetSwarmHostA", CameraInfoFromId(848), "DesertWorld");
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(0);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_EggMonster|Line00010", c_transmissionDurationAdd, 0.0, true, 1, 0);
    TransmissionWait(TransmissionLastSent(), 2.0);
    libSwaC_gf_ZoomInPlanetPortrait();
    libSwaC_gf_HidePlanetPortrait();
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Redstone", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    UnitIssueOrder(gv_cinematicAshWorm1, OrderTargetingPoint(AbilityCommand("AshWormBurrowMove", 0), PointFromId(22)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 0.5, 0.5, 2.0);
    Wait(2.0, c_timeGame);
    UnitGroupLoopBegin(UnitGroup("Zergling", gv_pLAYER_04_ZERG, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(22)), c_orderQueueReplace);
        UnitGroupAdd(lv_zerglingGroup, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_EggMonster|Line00001", c_transmissionDurationAdd, 0.0, true, 1, 0);
    Wait(2.0, c_timeGame);
    UnitGroupLoopBegin(lv_zerglingGroup);
    while (!UnitGroupLoopDone()) {
        UnitKill(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(1.0, c_timeGame);
    UnitIssueOrder(gv_cinematicAshWorm1, OrderTargetingPoint(AbilityCommand("AshWormBurrowMove", 0), PointFromId(76)), c_orderQueueReplace);
    UnitIssueOrder(gv_cinematicAshWorm2, OrderTargetingPoint(AbilityCommand("AshWormBurrowMove", 0), PointFromId(76)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(27), 0.0, -1, 10.0, true);
    libNtve_gf_ShowHideUnit(gv_cinematicAshWorm1, false);
    CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 0.5, 0.5, 2.0);
    Wait(2.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(125), (SoundLengthSync(SoundLink(ConversationDataGetSound("zEvoBriefing_EggMonster|Line00002", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zEvoBriefing_EggMonster|Line00005", true), c_soundIndexAny))), -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_EggMonster|Line00002", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_EggMonster|Line00005", c_transmissionDurationAdd, 0.0, true, 1, 0);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCreeperCinematic_Init () {
    gt_IntroCreeperCinematic = TriggerCreate("gt_IntroCreeperCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Creeper Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCreeperCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCreeperCinematicEnd_Init () {
    gt_IntroCreeperCinematicEnd = TriggerCreate("gt_IntroCreeperCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Creeper Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCreeperCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(gv_cinematicTempUnits);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitPauseAll(false);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_04_ZERG, RegionFromId(8), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_04_ZERG, RegionFromId(15), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    libSwaC_gf_HidePlanetPortrait();
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    if ((gv_cinematicCompleted == false)) {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Redstone", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }
    else {
    }
    UnitGroupLoopBegin(UnitGroup("SwarmHost", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_swarmHostPlayerUnits, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitGroupSelect(gv_swarmHostPlayerUnits, gv_pLAYER_01_USER, true);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(75)), lv_fadeDuration);
    gv_inCinematic = false;
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCreeperCleanup_Init () {
    gt_IntroCreeperCleanup = TriggerCreate("gt_IntroCreeperCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04Music_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_DEBUGStage2_Init();
    gt_StartGameQ_Init();
    gt_CarrionMusicCue_Init();
    gt_PingandShowCarrionNest_Init();
    gt_ShowDominionBlockade_Init();
    gt_CarrionNestDiesMorphtoCarrion_Init();
    gt_MorphSwarmHoststoCarrion_Init();
    gt_TransitiontoNukeSiloObjective_Init();
    gt_PingandShowNukeSilos_Init();
    gt_CarrionSwarmHostsBurrowed_Init();
    gt_NukeSiloDestroyed_Init();
    gt_ShowEntrenchedDominion_Init();
    gt_EntrenchedDominionDead_Init();
    gt_TransitiontoCreeperStage2_Init();
    gt_TransmissionTerranForcesCloseQ_Init();
    gt_TransmissionCarrionNestDestroyedQ_Init();
    gt_TransmissionNukeSiloIntroQ_Init();
    gt_TransmissionNukeSiloDestroyedQ_Init();
    gt_TransmissionEntrenchedDominionAheadQ_Init();
    gt_TransmissionSilosDestroyedQ_Init();
    gt_CreeperMusicCue_Init();
    gt_StartCreeperQ_Init();
    gt_PingandShowAshWormLocation_Init();
    gt_AshWormMovestoRight_Init();
    gt_AshWormDiesCollectEssence_Init();
    gt_MorphSwarmHoststoCreeper_Init();
    gt_ShowAlliedZergBase_Init();
    gt_DeepBurrowPressedStopFlashing_Init();
    gt_ReachedZergBase_Init();
    gt_RoottoAttackReminder_Init();
    gt_DominionAttackWavesRightBase_Init();
    gt_DominionAttackRightDestroyed_Init();
    gt_DominionAttackWavesLeftBase_Init();
    gt_DominionAttackLeftDestroyed_Init();
    gt_TransmissionAshWormSightedQ_Init();
    gt_TransmissionAshWormMovesQ_Init();
    gt_TransmissionAshWormDeadQ_Init();
    gt_TransmissionDefendAlliedZergBaseQ_Init();
    gt_TransmissionSecondDominionAttackQ_Init();
    gt_TransmissionHatcheriesDefendedQ_Init();
    gt_PlayerUnitsDead_Init();
    gt_PlayerUnitsDeadHatchery_Init();
    gt_HatcheryDefenseFailure1_Init();
    gt_HatcheryDefenseFailure1Skippable_Init();
    gt_HatcheryDefenseFailure2_Init();
    gt_HatcheryDefenseFailure2Skippable_Init();
    gt_VictorySwarmHostSplitCompleted_Init();
    gt_VictorySequence_Init();
    gt_VictoryMusicCue_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_TipMissionHelpQ_Init();
    gt_ObjectiveKillAshwormCreate_Init();
    gt_ObjectiveKillAshwormComplete_Init();
    gt_ObjectiveKillAshwormFailed_Init();
    gt_ObjectiveDefendZergBasesCreate_Init();
    gt_ObjectiveDefendZergBasesComplete_Init();
    gt_ObjectiveDefendZergBasesFailed_Init();
    gt_ObjectiveKillCarrionNestCreate_Init();
    gt_ObjectiveKillCarrionNestComplete_Init();
    gt_ObjectiveKillCarrionNestFailed_Init();
    gt_ObjectiveDestroyNukeSilosCreate_Init();
    gt_ObjectiveDestroyNukeSilosUpdate_Init();
    gt_ObjectiveDestroyNukeSilosComplete_Init();
    gt_ObjectiveDestroyNukeSilosFailed_Init();
    gt_IntroCarrionQ_Init();
    gt_IntroCarrionSetup_Init();
    gt_IntroCarrionCinematic_Init();
    gt_IntroCarrionCinematicEnd_Init();
    gt_IntroCarrionCleanup_Init();
    gt_IntroCreeperMusicCue_Init();
    gt_IntroCreeperQ_Init();
    gt_IntroCreeperSetup_Init();
    gt_IntroCreeperCinematic_Init();
    gt_IntroCreeperCinematicEnd_Init();
    gt_IntroCreeperCleanup_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
