//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Hydralisk Evolution
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/SwarmCampaignLib"
include "ai4BEFB21E"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libSwaC_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_ZERG_ENEMIES = 2;
const int gv_pLAYER_03_ZERG_ALLIES = 3;
const int gv_pLAYER_04_TERRAN = 4;
const int gv_pLAYER_05_ZERG_ALLIES = 5;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
bool gv_gameOver;
bool gv_inCinematic;
string gv_mapMusicTrack;
unitgroup gv_lurkerAllUnits;
unitgroup gv_impalerAllUnits;
point gv_backupPoint;
bool gv_backupSuppressed;
bool gv_impalerImpalerActive;
int gv_impalerImpalerCount;
bool gv_impalerFirstBurrowComplete;
int gv_impalerBurrowTransmission;
actor gv_impalerTurretHelper;
int gv_impalerTurretText;
unit[4] gv_impalerColonies;
int[4] gv_impalerColonyPings;
int gv_impalerBarricadePing01;
int gv_impalerBarricadePing02;
int gv_impalerOutpostPing;
unitgroup gv_impalerBarricadeUnits;
bool gv_impalerFirstBarricadeCleared;
unitgroup gv_impalerPlayerUnits;
unitgroup gv_impalerZergWave;
unit gv_impalerRampBarrier;
actor gv_impalerRampBarrierModel;
bool gv_lurkerLurkerActive;
unitgroup gv_lurkerAttackGroupCurrent;
unitgroup gv_lurkerPlayerUnits;
bool gv_lurkerFirstBurrowComplete;
unit gv_lurkerDen;
int gv_objectiveFindImpalerEssence;
int gv_objectiveImpalerEssenceCount;
int gv_objectiveImpalerMorphHydralisks;
int gv_objectiveImpalerEliminateTerrans;
int gv_objectiveLurkerEscort;
int gv_objectiveLurkerDenPing;
int gv_objectiveLurkerHoldOut;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicTempUnits;
bool gv_cinematicCompleted;
unit gv_cineQueen;
unit gv_cineOverlord;
unit gv_cineHydralisk01;
unit gv_cineHydralisk02;
unit gv_cineLurker01;
unit gv_cineLurker02;
unit gv_cineLurker03;
unit gv_cineLurker04;
unit gv_cineLurker05;
unit gv_cineLurker06;
unit gv_cineLurker07;
sound gv_essenceCollectStartSound;
sound gv_essenceCollectLoopSound;
sound gv_victoryOverlordFlybySound;

void InitGlobals () {
    int init_i;

    gv_gameOver = false;
    gv_inCinematic = false;
    gv_mapMusicTrack = null;
    gv_lurkerAllUnits = UnitGroupEmpty();
    gv_impalerAllUnits = UnitGroupEmpty();
    gv_backupPoint = null;
    gv_backupSuppressed = false;
    gv_impalerImpalerActive = false;
    gv_impalerImpalerCount = 0;
    gv_impalerFirstBurrowComplete = false;
    gv_impalerBurrowTransmission = c_invalidTransmissionId;
    gv_impalerTurretHelper = null;
    gv_impalerTurretText = c_textTagNone;
    init_i = 0;
    while (init_i <= 3) {
        gv_impalerColonies[init_i] = null;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 3) {
        gv_impalerColonyPings[init_i] = c_invalidPingId;
        init_i = init_i + 1;
    }
    gv_impalerBarricadePing01 = c_invalidPingId;
    gv_impalerBarricadePing02 = c_invalidPingId;
    gv_impalerOutpostPing = c_invalidPingId;
    gv_impalerBarricadeUnits = UnitGroupEmpty();
    gv_impalerFirstBarricadeCleared = false;
    gv_impalerPlayerUnits = UnitGroupEmpty();
    gv_impalerZergWave = UnitGroupEmpty();
    gv_impalerRampBarrierModel = null;
    gv_lurkerLurkerActive = false;
    gv_lurkerAttackGroupCurrent = UnitGroupEmpty();
    gv_lurkerPlayerUnits = UnitGroupEmpty();
    gv_lurkerFirstBurrowComplete = false;
    gv_lurkerDen = UnitFromId(102);
    gv_objectiveFindImpalerEssence = c_invalidObjectiveId;
    gv_objectiveImpalerEssenceCount = 0;
    gv_objectiveImpalerMorphHydralisks = c_invalidObjectiveId;
    gv_objectiveImpalerEliminateTerrans = c_invalidObjectiveId;
    gv_objectiveLurkerEscort = c_invalidObjectiveId;
    gv_objectiveLurkerDenPing = c_invalidPingId;
    gv_objectiveLurkerHoldOut = c_invalidObjectiveId;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_cinematicCompleted = false;
    gv_cineQueen = null;
    gv_cineOverlord = null;
    gv_cineHydralisk01 = null;
    gv_cineHydralisk02 = null;
    gv_cineLurker01 = null;
    gv_cineLurker02 = null;
    gv_cineLurker03 = null;
    gv_cineLurker04 = null;
    gv_cineLurker05 = null;
    gv_cineLurker06 = null;
    gv_cineLurker07 = null;
    gv_essenceCollectStartSound = null;
    gv_essenceCollectLoopSound = null;
    gv_victoryOverlordFlybySound = null;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_WavePings (int lp_pING, unitgroup lp_gROUP);
bool gf_UnitGroupisDamaged (unitgroup lp_unitGroup);
void gf_TankFlee (unit lp_tank);
void gf_LurkerSendAttackWave (region lp_waveArea);
void gf_HydraliskIntro (point lp_mOVEPOINT);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04MusicSound;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_SkiptoPart2;
trigger gt_StartGameQ;
trigger gt_PlayerUnitsDead;
trigger gt_ImpalerMusicCue;
trigger gt_ImpalerColonyDies;
trigger gt_ImpalerEvolution;
trigger gt_ImpalerResourceFailsafe;
trigger gt_ImpalerMorphFinished;
trigger gt_HydraliskDiesFailsafe;
trigger gt_BarricadeAssault;
trigger gt_ImpalerBurrowTeaching;
trigger gt_CliffBarrierSmash;
trigger gt_FirstBarricadeUnderAttack;
trigger gt_DominionFlee;
trigger gt_FirstBarricadeDead;
trigger gt_RockBreakers;
trigger gt_SecondBarricadeIntro;
trigger gt_MissileTurretDies;
trigger gt_SecondBarricadeDead;
trigger gt_TransmissionFirstColonyDeadQ;
trigger gt_TransmissionAllColoniesDeadQ;
trigger gt_TransmissionHydralisksEvolvedQ;
trigger gt_TransmissionImpalerStrainQ;
trigger gt_TransmissionUseHighGroundQ;
trigger gt_TransmissionImpalersAttackingQ;
trigger gt_TransmissionDominionFleeQ;
trigger gt_TransmissionFirstBarricadeDeadQ;
trigger gt_TransmissionDetectorIntroQ;
trigger gt_TransmissionKeepItTogetherQ;
trigger gt_TransmissionSecondBarricadeDeadQ;
trigger gt_TransmissionPrometheusCompanyDestroyedQ;
trigger gt_PlayerUnitsDeadLurkerHoldout;
trigger gt_LurkerDenDefenseFailure;
trigger gt_LurkerMusicCue;
trigger gt_StartLurkerQ;
trigger gt_LurkerBurrowTeaching;
trigger gt_LurkerAttackWave11;
trigger gt_LurkerAttackWave12;
trigger gt_LurkerReinforcements;
trigger gt_LurkerStage2;
trigger gt_LurkerAttackWave21;
trigger gt_LurkerAttackWave22;
trigger gt_TransmissionMoveOutQ;
trigger gt_TransmissionBurrowLurkersQ;
trigger gt_TransmissionLurkerStrainQ;
trigger gt_TransmissionSecondWaveQ;
trigger gt_TransmissionDestinationReachedQ;
trigger gt_TransmissionHoldoutWave1Q;
trigger gt_TransmissionHoldoutWave2Q;
trigger gt_VictoryEliminateAllTerransCompleted;
trigger gt_VictoryDefendtheLurkerDenCompleted;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_TipMissionHelpQ;
trigger gt_ImpalerZergSendWaves;
trigger gt_ImpalerZergCreateWaves;
trigger gt_ImpalerZergWaveInit;
trigger gt_AIGiveMinerals;
trigger gt_AIGiveGas;
trigger gt_ObjectiveFindImpalerEssenceCreate;
trigger gt_ObjectiveFindImpalerEssenceComplete;
trigger gt_ObjectiveFindImpalerEssenceFailed;
trigger gt_ObjectiveFindImpalerEssenceUpdate;
trigger gt_ObjectiveImpalerMorphHydralisksCreate;
trigger gt_ObjectiveImpalerMorphHydralisksComplete;
trigger gt_ObjectiveImpalerMorphHydralisksFailed;
trigger gt_ObjectiveImpalerEliminateTerransCreate;
trigger gt_ObjectiveImpalerEliminateTerransComplete;
trigger gt_ObjectiveImpalerEliminateTerransFailed;
trigger gt_ObjectiveLurkerEscortCreate;
trigger gt_ObjectiveLurkerEscortComplete;
trigger gt_ObjectiveLurkerEscortFailed;
trigger gt_ObjectiveLurkerHoldOutCreate;
trigger gt_ObjectiveLurkerHoldOutComplete;
trigger gt_ObjectiveLurkerHoldOutFailed;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_HydraliskIntro;
trigger gt_IntroLurkerQ;
trigger gt_IntroLurkerSetup;
trigger gt_IntroLurkerMusic;
trigger gt_IntroLurkerCinematic;
trigger gt_IntroLurkerCinematicEnd;
trigger gt_IntroLurkerCleanup;
trigger gt_IntroLurkerMovement;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryMusicCue;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;

//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;

//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;

    init_i = 0;
    while (init_i <= 16) {
        cai_playerAI[init_i] = null;
        init_i = init_i + 1;
    }
}

//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;

    if (cai_playerAI[p] == "ai4BEFB21E") { ai4BEFB21E_start(p); }
}

//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai4BEFB21E") { ai4BEFB21E_setDefGather(p, val); }
}

//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai4BEFB21E") { return ai4BEFB21E_getCustomData(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai4BEFB21E") { ai4BEFB21E_waves_run(p, target); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai4BEFB21E") { ai4BEFB21E_waves_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "ai4BEFB21E") { ai4BEFB21E_waves_stop(); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai4BEFB21E") { ai4BEFB21E_wave_run(w, p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai4BEFB21E") { ai4BEFB21E_wave_enable(w, p, val); }
}

//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "ai4BEFB21E") { return ai4BEFB21E_wave_isEnabled(w, p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai4BEFB21E") { return ai4BEFB21E_wave_createdUnits(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai4BEFB21E") { return ai4BEFB21E_wave_createdWave(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_startall () {
    cai_start("ai4BEFB21E", 5);
    AICampaignStart(2);
    AICampaignStart(3);
    AICampaignStart(4);
}

//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 4);
    cai_waves_run(5, target);
}

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
trigger auto_gf_WavePings_Trigger = null;
int auto_gf_WavePings_lp_pING;
unitgroup auto_gf_WavePings_lp_gROUP;

void gf_WavePings (int lp_pING, unitgroup lp_gROUP) {
    auto_gf_WavePings_lp_pING = lp_pING;
    auto_gf_WavePings_lp_gROUP = lp_gROUP;

    if (auto_gf_WavePings_Trigger == null) {
        auto_gf_WavePings_Trigger = TriggerCreate("auto_gf_WavePings_TriggerFunc");
    }

    TriggerExecute(auto_gf_WavePings_Trigger, false, false);
}

bool auto_gf_WavePings_TriggerFunc (bool testConds, bool runActions) {
    int lp_pING = auto_gf_WavePings_lp_pING;
    unitgroup lp_gROUP = auto_gf_WavePings_lp_gROUP;

    // Implementation
    while (true) {
        if (((gv_gameOver == true) || (libNtve_gf_UnitGroupIsDead(lp_gROUP) == true))) {
            PingDestroy(lp_pING);
            return true;
        }
        else {
            PingSetPosition(lp_pING, libNtve_gf_CenterOfUnitGroup(lp_gROUP));
            PingSetVisible(lp_pING, true);
        }
        Wait(0.1, c_timeGame);
    }
    return true;
}

bool gf_UnitGroupisDamaged (unitgroup lp_unitGroup) {
    // Variable Declarations
    fixed lv_groupLifeCurrent;
    fixed lv_groupLifeMax;

    // Variable Initialization
    lv_groupLifeCurrent = 0.0;
    lv_groupLifeMax = 0.0;

    // Implementation
    UnitGroupLoopBegin(lp_unitGroup);
    while (!UnitGroupLoopDone()) {
        lv_groupLifeCurrent += UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, c_unitPropCurrent);
        lv_groupLifeMax += UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifeMax, c_unitPropCurrent);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    if ((lv_groupLifeCurrent < lv_groupLifeMax)) {
        return true;
    }
    else {
        return false;
    }
}

trigger auto_gf_TankFlee_Trigger = null;
unit auto_gf_TankFlee_lp_tank;

void gf_TankFlee (unit lp_tank) {
    auto_gf_TankFlee_lp_tank = lp_tank;

    if (auto_gf_TankFlee_Trigger == null) {
        auto_gf_TankFlee_Trigger = TriggerCreate("auto_gf_TankFlee_TriggerFunc");
    }

    TriggerExecute(auto_gf_TankFlee_Trigger, false, false);
}

bool auto_gf_TankFlee_TriggerFunc (bool testConds, bool runActions) {
    unit lp_tank = auto_gf_TankFlee_lp_tank;

    // Implementation
    UnitIssueOrder(lp_tank, Order(AbilityCommand("Unsiege", 0)), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(lp_tank, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(22))), c_orderQueueReplace);
    while (!(((UnitIsAlive(lp_tank) == false) || (UnitOrderCount(lp_tank) == 0)))) {
        Wait(1.0, c_timeGame);
    }
    UnitIssueOrder(lp_tank, OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffset(UnitGetPosition(lp_tank), -0.1, 0.0)), c_orderQueueReplace);
    return true;
}

void gf_LurkerSendAttackWave (region lp_waveArea) {
    region auto5550B32B_val;
    region autoA6A574FE_val;

    // Variable Declarations
    unitgroup lv_attackGroup;
    int lv_ping;

    // Variable Initialization
    lv_attackGroup = UnitGroupEmpty();
    lv_ping = c_invalidPingId;

    // Implementation
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_ZERG_ENEMIES, lp_waveArea, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShareVisionofUnit(UnitGroupLoopCurrent(), true, gv_pLAYER_01_USER);
        UnitGroupAdd(gv_lurkerAttackGroupCurrent, UnitGroupLoopCurrent());
        UnitGroupAdd(lv_attackGroup, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(lp_waveArea), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetVisible(PingLastCreated(), false);
    PingSetScale(PingLastCreated(), 0.6);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/D0ECC7E2"));
    lv_ping = PingLastCreated();
    gf_WavePings(lv_ping, lv_attackGroup);
    MinimapPing(PlayerGroupAll(), RegionGetCenter(lp_waveArea), 2.0, Color(0.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/F218612F"), null, RegionGetCenter(lp_waveArea));
    Wait(2.0, c_timeGame);
    auto5550B32B_val = lp_waveArea;
    if (auto5550B32B_val == RegionFromId(9)) {
        while (!(((gv_lurkerFirstBurrowComplete == true) || (gf_UnitGroupisDamaged(gv_lurkerPlayerUnits) == true)))) {
            Wait(0.5, c_timeGame);
        }
    }
    else if (auto5550B32B_val == RegionFromId(16)) {
        Wait(2.0, c_timeGame);
    }
    else {
    }
    Wait(1.5, c_timeGame);
    autoA6A574FE_val = lp_waveArea;
    if (autoA6A574FE_val == RegionFromId(9)) {
        UnitGroupIssueOrder(lv_attackGroup, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(580)), c_orderQueueReplace);
        while ((libNtve_gf_UnitGroupIsDead(lv_attackGroup) == false)) {
            while (!(((libNtve_gf_UnitGroupIsDead(lv_attackGroup) == true) || (libNtve_gf_UnitGroupIsDead(gv_lurkerPlayerUnits) == true)))) {
                Wait(1.0, c_timeGame);
            }
            UnitGroupIssueOrder(lv_attackGroup, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(lp_waveArea)), c_orderQueueReplace);
            while (!(((libNtve_gf_UnitGroupIsDead(lv_attackGroup) == true) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(15), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 1), c_unitCountAlive) > 0)))) {
                Wait(1.0, c_timeGame);
            }
            UnitGroupIssueOrder(lv_attackGroup, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(580)), c_orderQueueReplace);
        }
    }
    else if (autoA6A574FE_val == RegionFromId(16)) {
        UnitGroupLoopBegin(gv_lurkerAttackGroupCurrent);
        while (!UnitGroupLoopDone()) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(6)), c_orderQueueReplace);
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
    }
    else if (autoA6A574FE_val == RegionFromId(11)) {
        UnitGroupLoopBegin(gv_lurkerAttackGroupCurrent);
        while (!UnitGroupLoopDone()) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(4)), c_orderQueueReplace);
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
    }
    else if (autoA6A574FE_val == RegionFromId(12)) {
        UnitGroupLoopBegin(gv_lurkerAttackGroupCurrent);
        while (!UnitGroupLoopDone()) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(4)), c_orderQueueReplace);
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
    }
    else {
    }
}

void gf_HydraliskIntro (point lp_mOVEPOINT) {
    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", 0, gv_pLAYER_05_ZERG_ALLIES, PointFromId(1924));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 20.0);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), lp_mOVEPOINT), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(435)), c_orderQueueAddToEnd);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_ULoadCampaignData("ZEvolutionHydralisk");
    TriggerExecute(gt_Init01Technology, true, true);
    libSwaC_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03Units, true, true);
    TriggerExecute(gt_Init04MusicSound, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulties, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    TechTreeUpgradeAddLevel(gv_pLAYER_02_ZERG_ENEMIES, "overlordspeed", 1);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("MorphHydraliskToLurker", 0), false);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_ZERG_ALLIES, "overlordspeed", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_ZERG_ALLIES, "overlordtransport", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_05_ZERG_ALLIES, "overlordspeed", 1);
    TechTreeAbilityAllow(gv_pLAYER_03_ZERG_ALLIES, AbilityCommand("BurrowLurkerDown", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_03_ZERG_ALLIES, AbilityCommand("LairResearch", 2), true);
    TechTreeUpgradeAddLevel(gv_pLAYER_04_TERRAN, "SiegeTech", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_visionGroup01;
    playergroup lv_visionGroup02;

    // Variable Initialization
    lv_visionGroup01 = PlayerGroupEmpty();
    lv_visionGroup02 = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_ZERG_ENEMIES, 5);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_03_ZERG_ALLIES, 0);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_04_TERRAN, 5);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_05_ZERG_ALLIES, 8);
    libNtve_gf_SetAlliance(gv_pLAYER_02_ZERG_ENEMIES, gv_pLAYER_03_ZERG_ALLIES, 5);
    libNtve_gf_SetAlliance(gv_pLAYER_02_ZERG_ENEMIES, gv_pLAYER_04_TERRAN, 0);
    libNtve_gf_SetAlliance(gv_pLAYER_03_ZERG_ALLIES, gv_pLAYER_04_TERRAN, 5);
    libNtve_gf_SetAlliance(gv_pLAYER_04_TERRAN, gv_pLAYER_05_ZERG_ALLIES, 5);
    PlayerGroupAdd(lv_visionGroup01, gv_pLAYER_02_ZERG_ENEMIES);
    PlayerGroupAdd(lv_visionGroup01, gv_pLAYER_04_TERRAN);
    libSwaC_gf_ShareVisionAmongPlayers(lv_visionGroup01);
    PlayerGroupAdd(lv_visionGroup02, gv_pLAYER_01_USER);
    PlayerGroupAdd(lv_visionGroup02, gv_pLAYER_03_ZERG_ALLIES);
    PlayerGroupAdd(lv_visionGroup02, gv_pLAYER_05_ZERG_ALLIES);
    libSwaC_gf_ShareVisionAmongPlayers(lv_visionGroup02);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropSuppliesMade, c_playerPropOperSetTo, 200);
    PlayerModifyPropertyInt(gv_pLAYER_02_ZERG_ENEMIES, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_02_ZERG_ENEMIES, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_05_ZERG_ALLIES, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_05_ZERG_ALLIES, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization
    lv_i = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(26), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_impalerPlayerUnits, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Lurker", gv_pLAYER_01_USER, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_lurkerPlayerUnits, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitSetPropertyFixed(UnitFromId(491), c_unitPropEnergyPercent, 100.0);
    UnitSetPropertyFixed(UnitFromId(549), c_unitPropEnergyPercent, 100.0);
    UnitGroupLoopBegin(UnitGroup("Bunker", gv_pLAYER_04_TERRAN, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitCargoCreate(UnitGroupLoopCurrent(), "MengskFirebat", 2);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitBehaviorRemove(gv_lurkerDen, "ZergBuildingDies6", 1);
    libSwaC_gf_SetUnitInfoTextCampaign(gv_lurkerDen, null, StringExternal("Param/Value/5CBB8C03"), null);
    gv_impalerColonies[1] = UnitFromId(86);
    gv_impalerColonies[2] = UnitFromId(694);
    gv_impalerColonies[3] = UnitFromId(66);
    libNtve_gf_ShowHideUnit(UnitFromId(727), false);
    UnitGroupLoopBegin(UnitGroup("DestructibleRockEx16x6", 0, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateHighlightable, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateSelectable, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateTargetable, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateStatusBar, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateTooltipable, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateCursorable, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateInvulnerable, true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleTargetDummy", c_unitCreateIgnorePlacement, 0, PointFromId(545));
    gv_impalerRampBarrier = UnitLastCreated();
    libNtve_gf_CreateModelAtPoint("DestructibleRockEx16x6", PointFromId(545));
    gv_impalerRampBarrierModel = libNtve_gf_ActorLastCreated();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_lurkerAllUnits, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_impalerAllUnits, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Thor", gv_pLAYER_04_TERRAN, RegionFromId(23), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init04MusicSound_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mapMusicTrack = libSwaC_gf_MissionDefaultMusic();
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Space01", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    libNtve_gf_AttachActorToActor(libNtve_gf_MainActorofUnit(UnitFromId(964)), "HydraEvoCavesLoopSound", "Center");
    libNtve_gf_AttachActorToActor(libNtve_gf_MainActorofUnit(UnitFromId(963)), "HydraEvoCavesLoopSound", "Center");
    libNtve_gf_AttachActorToActor(libNtve_gf_MainActorofUnit(UnitFromId(966)), "HydraEvoCavesLoopSound", "Center");
    libNtve_gf_AttachActorToActor(libNtve_gf_MainActorofUnit(UnitFromId(971)), "HydraEvoCavesLoopSound", "Center");
    libNtve_gf_AttachActorToActor(libNtve_gf_MainActorofUnit(UnitFromId(969)), "HydraEvoCavesLoopSound", "Center");
    libNtve_gf_AttachActorToActor(libNtve_gf_MainActorofUnit(UnitFromId(970)), "HydraEvoCavesLoopSound", "Center");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04MusicSound_Init () {
    gt_Init04MusicSound = TriggerCreate("gt_Init04MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    CreepSetSpeed(c_creepSpeedGrowth, 150.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_AddMissionTipUserData("Impaler Colony");
    libSwaC_gf_AddMissionTipUserData("Impaler");
    libSwaC_gf_AddMissionTipUserData("Detection (ZEvoHydra)");
    libSwaC_gf_AddMissionTipUserData("Waves");
    libSwaC_gf_AddMissionTipUserData("Lurker");
    libSwaC_gf_AddMissionTipUserData("Lurker Den");
    libSwaC_gf_AddMissionTipUserData("Reinforcements (ZEvoHydra)");
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Hydralisk", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Medic", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Marauder", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("MengskFirebat", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Goliath", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("SiegeTankSieged", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Thor", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Bunker", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("MissileTurret", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("PlanetaryFortress", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Zergling", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Baneling", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Roach", false, gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Skip to Part 2
//--------------------------------------------------------------------------------------------------
bool gt_SkiptoPart2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueClear(c_triggerQueueKill);
    TransmissionClearAll();
    TriggerExecute(gt_StartLurkerQ, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SkiptoPart2_Init () {
    gt_SkiptoPart2 = TriggerCreate("gt_SkiptoPart2_Func");
    TriggerAddEventChatMessage(gt_SkiptoPart2, c_playerAny, "EVO2", true);
    TriggerAddEventChatMessage(gt_SkiptoPart2, c_playerAny, "s2", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_impalerImpalerActive = true;
    gv_lurkerLurkerActive = false;
    TriggerExecute(gt_IntroQ, true, true);
    gv_backupPoint = PointFromId(106);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/45A915F1"), null, RegionGetCenter(RegionFromId(26)));
    TriggerQueueEnter();
    Wait(3.0, c_timeReal);
    TriggerExecute(gt_ObjectiveFindImpalerEssenceCreate, true, true);
    TriggerQueueExit();
    TriggerExecute(gt_TipMissionHelpQ, true, false);
    TriggerExecute(gt_ImpalerZergWaveInit, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Units Dead
//--------------------------------------------------------------------------------------------------
bool gt_PlayerUnitsDead_Func (bool testConds, bool runActions) {
    point auto14866990_val;
    int auto97980B30_n;
    int auto97980B30_i;
    int auto8872FB14_n;
    int auto8872FB14_i;

    // Variable Declarations
    unitgroup lv_backupUnits;
    unitgroup lv_backupPausedUnits;

    // Variable Initialization
    lv_backupUnits = UnitGroupEmpty();
    lv_backupPausedUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_backupSuppressed == false))) {
            return false;
        }

        if (!((((gv_impalerImpalerActive == true) && (UnitGroupCount(gv_impalerPlayerUnits, c_unitCountAlive) == 0)) || ((gv_lurkerLurkerActive == true) && (UnitGroupCount(gv_lurkerPlayerUnits, c_unitCountAlive) == 0))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((TriggerQueueIsEmpty() == true))) {
        Wait(1.0, c_timeGame);
    }
    TriggerQueuePause(true);
    TransmissionClearAll();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((libNtve_gf_UnitIsPaused(UnitGroupLoopCurrent()) == false)) {
            UnitGroupAdd(lv_backupPausedUnits, UnitGroupLoopCurrent());
            libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationDefault);
    UnitClearSelection(gv_pLAYER_01_USER);
    CameraPan(gv_pLAYER_01_USER, gv_backupPoint, 3.0, -1, 10.0, false);
    auto14866990_val = gv_backupPoint;
    if (auto14866990_val == PointFromId(106)) {
        libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Hydralisk|Line00104", c_transmissionDurationAdd, 0.0, false, 1, 0);
        libNtve_gf_CreateUnitsAtPoint2(3, "Hydralisk", 0, gv_pLAYER_01_USER, gv_backupPoint);
        UnitGroupAddUnitGroup(gv_impalerPlayerUnits, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(lv_backupUnits, UnitLastCreatedGroup());
        libSwaC_gf_CreateDropPod(1, PointWithOffsetPolar(gv_backupPoint, 2.0, 0.0), UnitLastCreatedGroup(), false, gv_pLAYER_01_USER);
        libNtve_gf_CreateUnitsAtPoint2(2, "Hydralisk", 0, gv_pLAYER_01_USER, gv_backupPoint);
        UnitGroupAddUnitGroup(gv_impalerPlayerUnits, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(lv_backupUnits, UnitLastCreatedGroup());
        libSwaC_gf_CreateDropPod(1, PointWithOffsetPolar(gv_backupPoint, 2.0, 180.0), UnitLastCreatedGroup(), false, gv_pLAYER_01_USER);
    }
    else if (auto14866990_val == PointFromId(573)) {
        libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Hydralisk|Line00103", c_transmissionDurationAdd, 0.0, false, 1, 0);
        libNtve_gf_CreateUnitsAtPoint2(3, "HydraliskImpaler", 0, gv_pLAYER_01_USER, gv_backupPoint);
        UnitGroupAddUnitGroup(gv_impalerPlayerUnits, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(lv_backupUnits, UnitLastCreatedGroup());
        libSwaC_gf_CreateDropPod(1, PointWithOffsetPolar(gv_backupPoint, 2.0, 0.0), UnitLastCreatedGroup(), false, gv_pLAYER_01_USER);
        libNtve_gf_CreateUnitsAtPoint2(2, "HydraliskImpaler", 0, gv_pLAYER_01_USER, gv_backupPoint);
        UnitGroupAddUnitGroup(gv_impalerPlayerUnits, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(lv_backupUnits, UnitLastCreatedGroup());
        libSwaC_gf_CreateDropPod(1, PointWithOffsetPolar(gv_backupPoint, 2.0, 180.0), UnitLastCreatedGroup(), false, gv_pLAYER_01_USER);
    }
    else if (auto14866990_val == PointFromId(574)) {
        libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Hydralisk|Line00067", c_transmissionDurationAdd, 0.0, false, 1, 0);
        libNtve_gf_CreateUnitsAtPoint2(3, "Impaler", 0, gv_pLAYER_01_USER, gv_backupPoint);
        UnitGroupAddUnitGroup(gv_impalerPlayerUnits, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(lv_backupUnits, UnitLastCreatedGroup());
        libSwaC_gf_CreateDropPod(1, PointWithOffsetPolar(gv_backupPoint, 2.0, 0.0), UnitLastCreatedGroup(), false, gv_pLAYER_01_USER);
        libNtve_gf_CreateUnitsAtPoint2(2, "Impaler", 0, gv_pLAYER_01_USER, gv_backupPoint);
        UnitGroupAddUnitGroup(gv_impalerPlayerUnits, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(lv_backupUnits, UnitLastCreatedGroup());
        libSwaC_gf_CreateDropPod(1, PointWithOffsetPolar(gv_backupPoint, 2.0, 120.0), UnitLastCreatedGroup(), false, gv_pLAYER_01_USER);
        libNtve_gf_CreateUnitsAtPoint2(2, "Impaler", 0, gv_pLAYER_01_USER, gv_backupPoint);
        UnitGroupAddUnitGroup(gv_impalerPlayerUnits, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(lv_backupUnits, UnitLastCreatedGroup());
        libSwaC_gf_CreateDropPod(1, PointWithOffsetPolar(gv_backupPoint, 2.0, 240.0), UnitLastCreatedGroup(), false, gv_pLAYER_01_USER);
    }
    else if (auto14866990_val == PointFromId(575)) {
        libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Hydralisk|Line00067", c_transmissionDurationAdd, 0.0, false, 1, 0);
        libNtve_gf_CreateUnitsAtPoint2(3, "Impaler", 0, gv_pLAYER_01_USER, gv_backupPoint);
        UnitGroupAddUnitGroup(gv_impalerPlayerUnits, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(lv_backupUnits, UnitLastCreatedGroup());
        libSwaC_gf_CreateDropPod(1, PointWithOffsetPolar(gv_backupPoint, 2.0, 0.0), UnitLastCreatedGroup(), false, gv_pLAYER_01_USER);
        libNtve_gf_CreateUnitsAtPoint2(2, "Impaler", 0, gv_pLAYER_01_USER, gv_backupPoint);
        UnitGroupAddUnitGroup(gv_impalerPlayerUnits, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(lv_backupUnits, UnitLastCreatedGroup());
        libSwaC_gf_CreateDropPod(1, PointWithOffsetPolar(gv_backupPoint, 2.0, 120.0), UnitLastCreatedGroup(), false, gv_pLAYER_01_USER);
        libNtve_gf_CreateUnitsAtPoint2(2, "Impaler", 0, gv_pLAYER_01_USER, gv_backupPoint);
        UnitGroupAddUnitGroup(gv_impalerPlayerUnits, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(lv_backupUnits, UnitLastCreatedGroup());
        libSwaC_gf_CreateDropPod(1, PointWithOffsetPolar(gv_backupPoint, 2.0, 240.0), UnitLastCreatedGroup(), false, gv_pLAYER_01_USER);
    }
    else if (auto14866990_val == PointFromId(577)) {
        libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Hydralisk|Line00067", c_transmissionDurationAdd, 0.0, false, 1, 0);
        libNtve_gf_CreateUnitsAtPoint2(3, "Impaler", 0, gv_pLAYER_01_USER, gv_backupPoint);
        UnitGroupAddUnitGroup(gv_impalerPlayerUnits, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(lv_backupUnits, UnitLastCreatedGroup());
        libSwaC_gf_CreateDropPod(1, PointWithOffsetPolar(gv_backupPoint, 2.0, 0.0), UnitLastCreatedGroup(), false, gv_pLAYER_01_USER);
        libNtve_gf_CreateUnitsAtPoint2(2, "Impaler", 0, gv_pLAYER_01_USER, gv_backupPoint);
        UnitGroupAddUnitGroup(gv_impalerPlayerUnits, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(lv_backupUnits, UnitLastCreatedGroup());
        libSwaC_gf_CreateDropPod(1, PointWithOffsetPolar(gv_backupPoint, 2.0, 120.0), UnitLastCreatedGroup(), false, gv_pLAYER_01_USER);
        libNtve_gf_CreateUnitsAtPoint2(2, "Impaler", 0, gv_pLAYER_01_USER, gv_backupPoint);
        UnitGroupAddUnitGroup(gv_impalerPlayerUnits, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(lv_backupUnits, UnitLastCreatedGroup());
        libSwaC_gf_CreateDropPod(1, PointWithOffsetPolar(gv_backupPoint, 2.0, 240.0), UnitLastCreatedGroup(), false, gv_pLAYER_01_USER);
    }
    else if (auto14866990_val == PointFromId(578)) {
        libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Hydralisk|Line00106", c_transmissionDurationAdd, 0.0, false, 1, 0);
        auto97980B30_n = 7;
        auto97980B30_i = 1;
        while (auto97980B30_i <= auto97980B30_n) {
            libNtve_gf_CreateUnitsAtPoint2(1, "LurkerBurrowed", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionCircle(gv_backupPoint, 2.0)));
            UnitGroupAdd(gv_lurkerPlayerUnits, UnitLastCreated());
            UnitGroupAdd(lv_backupUnits, UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowLurkerUp", 0)), c_orderQueueReplace);
            auto97980B30_i = auto97980B30_i + 1;
        }
    }
    else if (auto14866990_val == PointFromId(579)) {
        libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Hydralisk|Line00106", c_transmissionDurationAdd, 0.0, false, 1, 0);
        auto8872FB14_n = 7;
        auto8872FB14_i = 1;
        while (auto8872FB14_i <= auto8872FB14_n) {
            libNtve_gf_CreateUnitsAtPoint2(1, "LurkerBurrowed", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionCircle(gv_backupPoint, 2.0)));
            UnitGroupAdd(gv_lurkerPlayerUnits, UnitLastCreated());
            UnitGroupAdd(lv_backupUnits, UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowLurkerUp", 0)), c_orderQueueReplace);
            auto8872FB14_i = auto8872FB14_i + 1;
        }
    }
    else {
        gv_gameOver = true;
        TriggerQueuePause(true);
        TriggerQueueClear(c_triggerQueueRemove);
        Wait(2.0, c_timeReal);
        libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), 0, StringExternal("Param/Value/990DD21A"), 0);
        Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
        TriggerExecute(gt_Defeat, true, false);
        return true;
    }
    Wait(3.0, c_timeReal);
    TransmissionWait(TransmissionLastSent(), 0.0);
    while (!((UnitGroupCount(UnitGroupFilter(null, c_playerAny, lv_backupUnits, UnitFilter(0, (1 << (c_targetFilterHidden - 32)), 0, 0), 0), c_unitCountAlive) == 0))) {
        Wait(0.1, c_timeGame);
    }
    UnitGroupLoopBegin(lv_backupPausedUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupSelect(lv_backupUnits, gv_pLAYER_01_USER, true);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.0);
    TriggerQueuePause(false);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerUnitsDead_Init () {
    gt_PlayerUnitsDead = TriggerCreate("gt_PlayerUnitsDead_Func");
    TriggerAddEventTimePeriodic(gt_PlayerUnitsDead, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Impaler Music Cue
//--------------------------------------------------------------------------------------------------
bool gt_ImpalerMusicCue_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("ZEvoMusicStinger", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZEvoMusicAlt", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ImpalerMusicCue_Init () {
    gt_ImpalerMusicCue = TriggerCreate("gt_ImpalerMusicCue_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Impaler Colony Dies
//--------------------------------------------------------------------------------------------------
bool gt_ImpalerColonyDies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_impalerImpalerActive == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "PrimalSunkenColony"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(gv_impalerColonies[1]) == false) && (UnitIsAlive(gv_impalerColonies[2]) == false) && (UnitIsAlive(gv_impalerColonies[3]) == false)) {
        TriggerEnable(TriggerGetCurrent(), false);
        gv_backupSuppressed = true;
    }
    else {
    }
    libNtve_gf_UnitCreateFacingPoint(1, "DNAPickup", 0, gv_pLAYER_01_USER, UnitGetPosition(EventUnit()), UnitGetPosition(EventUnit()));
    IntLoopBegin(1, 3);
    while (!IntLoopDone()) {
        if ((UnitIsAlive(gv_impalerColonies[IntLoopCurrent()]) == false)) {
            PingDestroy(gv_impalerColonyPings[IntLoopCurrent()]);
            gv_impalerColonyPings[IntLoopCurrent()] = c_invalidPingId;
        }
        else {
        }
        IntLoopStep();
    }
    IntLoopEnd();
    Wait(2.0, c_timeGame);
    SoundPlayAtPoint(SoundLink("Zerus_DNA_PkUp", -1), PlayerGroupAll(), UnitGetPosition(UnitLastCreated()), 0.0, 100.0, 0.0);
    UnitKill(UnitLastCreated());
    libSwaC_gf_DestroyCacheAndGivePlayerResources(UnitLastCreated(), 0, 1, null, StringExternal("Param/Value/67CF28BC"), gv_pLAYER_01_USER);
    TriggerExecute(gt_ObjectiveFindImpalerEssenceUpdate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ImpalerColonyDies_Init () {
    gt_ImpalerColonyDies = TriggerCreate("gt_ImpalerColonyDies_Func");
    TriggerAddEventUnitDied(gt_ImpalerColonyDies, UnitRefFromVariable("gv_impalerColonies[1]"));
    TriggerAddEventUnitDied(gt_ImpalerColonyDies, UnitRefFromVariable("gv_impalerColonies[2]"));
    TriggerAddEventUnitDied(gt_ImpalerColonyDies, UnitRefFromVariable("gv_impalerColonies[3]"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Impaler Evolution
//--------------------------------------------------------------------------------------------------
bool gt_ImpalerEvolution_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionAllColoniesDeadQ, true, false);
    libSwaC_gf_EnableCampaignTechUnit(true, "HydraliskA", gv_pLAYER_01_USER);
    UnitGroupLoopBegin(gv_impalerPlayerUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_MakeUnitUncommandable(UnitGroupLoopCurrent(), true);
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(1.75, c_timeGame);
    UnitGroupLoopBegin(gv_impalerPlayerUnits);
    while (!UnitGroupLoopDone()) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "HydraliskBurrowed")) {
            libNtve_gf_ReplaceUnit(UnitGroupLoopCurrent(), "Hydralisk", 1);
            libNtve_gf_MakeUnitUncommandable(libNtve_gf_LastReplacedUnit(), true);
            UnitIssueOrder(libNtve_gf_LastReplacedUnit(), Order(AbilityCommand("MorphHydraliskToHydraliskImpaler", 0)), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("MorphHydraliskToHydraliskImpaler", 0)), c_orderQueueReplace);
        }
        Wait(0.25, c_timeGame);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(5.0, c_timeGame);
    UnitGroupLoopBegin(UnitGroup("HydraliskImpaler", gv_pLAYER_01_USER, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_MakeUnitUncommandable(UnitGroupLoopCurrent(), false);
        UnitGroupAdd(gv_impalerPlayerUnits, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupSelect(gv_impalerPlayerUnits, gv_pLAYER_01_USER, true);
    gv_backupSuppressed = false;
    gv_backupPoint = PointFromId(573);
    TriggerEnable(gt_HydraliskDiesFailsafe, true);
    TriggerExecute(gt_ObjectiveImpalerMorphHydralisksCreate, true, true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("MorphRoachToImpaler", 0), true);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("MorphRoachToImpaler", 0), true);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Impaler", false, 1);
    TriggerExecute(gt_TransmissionHydralisksEvolvedQ, true, false);
    TriggerEnable(gt_FirstBarricadeUnderAttack, true);
    TriggerEnable(gt_FirstBarricadeDead, true);
    TriggerEnable(gt_SecondBarricadeDead, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ImpalerEvolution_Init () {
    gt_ImpalerEvolution = TriggerCreate("gt_ImpalerEvolution_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Impaler Resource Failsafe
//--------------------------------------------------------------------------------------------------
bool gt_ImpalerResourceFailsafe_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_impalerImpalerActive == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(gt_ObjectiveImpalerMorphHydralisksComplete) == true))) {
            return false;
        }

        if (!(((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) < 500) || (PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) < 500)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperAdd, 1000);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperAdd, 1000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ImpalerResourceFailsafe_Init () {
    gt_ImpalerResourceFailsafe = TriggerCreate("gt_ImpalerResourceFailsafe_Func");
    TriggerAddEventPlayerPropChange(gt_ImpalerResourceFailsafe, gv_pLAYER_01_USER, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_ImpalerResourceFailsafe, gv_pLAYER_01_USER, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Impaler Morph Finished
//--------------------------------------------------------------------------------------------------
bool gt_ImpalerMorphFinished_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_dropLocation;

    // Variable Initialization
    lv_dropLocation = null;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "Impaler"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_impalerImpalerCount += 1;
    UnitGroupAdd(gv_impalerPlayerUnits, EventUnitProgressUnit());
    if ((gv_impalerImpalerCount >= UnitGroupCount(gv_impalerPlayerUnits, c_unitCountAlive))) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_HydraliskDiesFailsafe, false);
        UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("MorphRoachToImpaler", 0), false);
        TriggerExecute(gt_ObjectiveImpalerMorphHydralisksComplete, true, false);
        TriggerExecute(gt_BarricadeAssault, true, false);
        if ((gv_impalerImpalerCount < 5)) {
            lv_dropLocation = UnitGetPosition(UnitGroupClosestToPoint(gv_impalerPlayerUnits, PointFromId(1109)));
            UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/4F696B6E"), null, lv_dropLocation);
            libNtve_gf_CreateUnitsWithDefaultFacing((5 - gv_impalerImpalerCount), "Impaler", 0, gv_pLAYER_01_USER, lv_dropLocation);
            UnitGroupAddUnitGroup(gv_impalerPlayerUnits, UnitLastCreatedGroup());
            libSwaC_gf_CreateDropPod(1, lv_dropLocation, UnitLastCreatedGroup(), false, gv_pLAYER_01_USER);
        }
        else {
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ImpalerMorphFinished_Init () {
    gt_ImpalerMorphFinished = TriggerCreate("gt_ImpalerMorphFinished_Func");
    TriggerAddEventUnitTrainProgress(gt_ImpalerMorphFinished, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hydralisk Dies Failsafe
//--------------------------------------------------------------------------------------------------
bool gt_HydraliskDiesFailsafe_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_dropLocation;

    // Variable Initialization
    lv_dropLocation = null;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "HydraliskImpaler") || (UnitGetType(EventUnit()) == "HydraliskImpalerBurrowed")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_impalerImpalerCount >= UnitGroupCount(gv_impalerPlayerUnits, c_unitCountAlive)) && (gv_impalerImpalerCount > 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_ImpalerMorphFinished, false);
        UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("MorphRoachToImpaler", 0), false);
        TriggerExecute(gt_ObjectiveImpalerMorphHydralisksComplete, true, false);
        TriggerExecute(gt_BarricadeAssault, true, false);
        if ((gv_impalerImpalerCount < 5)) {
            lv_dropLocation = UnitGetPosition(UnitGroupClosestToPoint(gv_impalerPlayerUnits, PointFromId(1109)));
            UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/14DBA86D"), null, lv_dropLocation);
            libNtve_gf_CreateUnitsWithDefaultFacing((5 - gv_impalerImpalerCount), "Impaler", 0, gv_pLAYER_01_USER, lv_dropLocation);
            UnitGroupAddUnitGroup(gv_impalerPlayerUnits, UnitLastCreatedGroup());
            libSwaC_gf_CreateDropPod(1, lv_dropLocation, UnitLastCreatedGroup(), false, gv_pLAYER_01_USER);
        }
        else {
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HydraliskDiesFailsafe_Init () {
    gt_HydraliskDiesFailsafe = TriggerCreate("gt_HydraliskDiesFailsafe_Func");
    TriggerEnable(gt_HydraliskDiesFailsafe, false);
    TriggerAddEventUnitDied(gt_HydraliskDiesFailsafe, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Barricade Assault
//--------------------------------------------------------------------------------------------------
bool gt_BarricadeAssault_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_backupPoint = PointFromId(574);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_ObjectiveImpalerEliminateTerransCreate, true, true);
    TriggerExecute(gt_ImpalerBurrowTeaching, true, false);
    TriggerExecute(gt_TransmissionImpalerStrainQ, true, false);
    TriggerExecute(gt_TransmissionUseHighGroundQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BarricadeAssault_Init () {
    gt_BarricadeAssault = TriggerCreate("gt_BarricadeAssault_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Impaler Burrow Teaching
//--------------------------------------------------------------------------------------------------
bool gt_ImpalerBurrowTeaching_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_CliffBarrierSmash, true, true);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(7), 5.0, false);
    libSwaC_gf_CreateReticleEffectAndTextTagAtPoint(0, 0, StringExternal("Param/Value/C2608079"), PointFromId(1109));
    while (!((UnitGroupCount(UnitGroup("ImpalerBurrowed", gv_pLAYER_01_USER, RegionCircle(PointFromId(1109), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
        Wait(0.25, c_timeGame);
    }
    gv_impalerFirstBurrowComplete = true;
    TransmissionClear(gv_impalerBurrowTransmission);
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    TextTagDestroy(TextTagLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ImpalerBurrowTeaching_Init () {
    gt_ImpalerBurrowTeaching = TriggerCreate("gt_ImpalerBurrowTeaching_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cliff Barrier Smash
//--------------------------------------------------------------------------------------------------
bool gt_CliffBarrierSmash_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Impaler", 0, gv_pLAYER_01_USER, PointFromId(551));
    UnitGroupAddUnitGroup(gv_impalerPlayerUnits, UnitLastCreatedGroup());
    libSwaC_gf_CreateDropPod(1, PointFromId(551), UnitLastCreatedGroup(), false, gv_pLAYER_01_USER);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Impaler", 0, gv_pLAYER_01_USER, PointFromId(553));
    UnitGroupAddUnitGroup(gv_impalerPlayerUnits, UnitLastCreatedGroup());
    libSwaC_gf_CreateDropPod(1, PointFromId(553), UnitLastCreatedGroup(), false, gv_pLAYER_01_USER);
    Wait(2.5, c_timeGame);
    UnitGroupLoopBegin(UnitGroup("DestructibleRockEx16x6", 0, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitKill(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CliffBarrierSmash_Init () {
    gt_CliffBarrierSmash = TriggerCreate("gt_CliffBarrierSmash_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Barricade Under Attack
//--------------------------------------------------------------------------------------------------
bool gt_FirstBarricadeUnderAttack_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_impalerPlayerUnits, EventUnitTarget()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(19)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_DominionFlee, true);
    TriggerExecute(gt_TransmissionImpalersAttackingQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstBarricadeUnderAttack_Init () {
    gt_FirstBarricadeUnderAttack = TriggerCreate("gt_FirstBarricadeUnderAttack_Func");
    TriggerEnable(gt_FirstBarricadeUnderAttack, false);
    TriggerAddEventUnitAttacked(gt_FirstBarricadeUnderAttack, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Flee
//--------------------------------------------------------------------------------------------------
bool gt_DominionFlee_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_retreatUnitGroup;

    // Variable Initialization
    lv_retreatUnitGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_04_TERRAN, RegionFromId(19), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 5))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionDominionFleeQ, true, false);
    UnitGroupLoopBegin(UnitGroup("MengskFirebat", gv_pLAYER_04_TERRAN, RegionFromId(19), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(lv_retreatUnitGroup, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Medic", gv_pLAYER_04_TERRAN, RegionFromId(19), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(lv_retreatUnitGroup, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Goliath", gv_pLAYER_04_TERRAN, RegionFromId(19), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(lv_retreatUnitGroup, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(lv_retreatUnitGroup);
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(22))), c_orderQueueReplace);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("SiegeTankSieged", gv_pLAYER_04_TERRAN, RegionFromId(19), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_TankFlee(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    while (!(((UnitOrderCount(UnitGroupUnit(lv_retreatUnitGroup, 1)) == 0) || (libNtve_gf_UnitGroupIsDead(lv_retreatUnitGroup) == true)))) {
        Wait(1.0, c_timeGame);
    }
    Wait(2.0, c_timeGame);
    UnitGroupLoopBegin(lv_retreatUnitGroup);
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffset(UnitGetPosition(UnitGroupLoopCurrent()), -0.1, 0.0)), c_orderQueueReplace);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionFlee_Init () {
    gt_DominionFlee = TriggerCreate("gt_DominionFlee_Func");
    TriggerEnable(gt_DominionFlee, false);
    TriggerAddEventTimePeriodic(gt_DominionFlee, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Barricade Dead
//--------------------------------------------------------------------------------------------------
bool gt_FirstBarricadeDead_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_04_TERRAN, RegionFromId(19), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_impalerBarricadePing01);
    gv_impalerBarricadePing01 = c_invalidPingId;
    gv_impalerFirstBarricadeCleared = true;
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_05_ZERG_ALLIES, RegionFromId(30), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(503)), c_orderQueueReplace);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_RockBreakers, true, false);
    TriggerExecute(gt_TransmissionFirstBarricadeDeadQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstBarricadeDead_Init () {
    gt_FirstBarricadeDead = TriggerCreate("gt_FirstBarricadeDead_Func");
    TriggerEnable(gt_FirstBarricadeDead, false);
    TriggerAddEventTimePeriodic(gt_FirstBarricadeDead, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rock Breakers
//--------------------------------------------------------------------------------------------------
bool gt_RockBreakers_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(3), 6.0, false);
    VisRevealArea(gv_pLAYER_04_TERRAN, RegionFromId(25), 6.0, false);
    MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(35)), 2.0, Color(100.00, 0.00, 0.00));
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_04_TERRAN, RegionFromId(35), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), gv_impalerRampBarrier), c_orderQueueReplace);
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(82)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1109)), c_orderQueueAddToEnd);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(6.0, c_timeGame);
    UnitKill(gv_impalerRampBarrier);
    libNtve_gf_KillModel(gv_impalerRampBarrierModel);
    UnitKill(UnitFromId(43));
    TriggerEnable(gt_SecondBarricadeIntro, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RockBreakers_Init () {
    gt_RockBreakers = TriggerCreate("gt_RockBreakers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Second Barricade Intro
//--------------------------------------------------------------------------------------------------
bool gt_SecondBarricadeIntro_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_backupPoint = PointFromId(575);
    if ((UnitIsAlive(UnitFromId(418)) == true)) {
        libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(2, 1, StringExternal("Param/Value/6ACA5CA7"), UnitFromId(418), "Center");
        gv_impalerTurretHelper = libNtve_gf_ActorLastCreated();
        gv_impalerTurretText = TextTagLastCreated();
        UnitBehaviorAdd(UnitFromId(418), "PhotonCannonDetectRange", UnitFromId(418), 1);
        TriggerExecute(gt_TransmissionDetectorIntroQ, true, false);
    }
    else {
    }
    while (!(((UnitGetPropertyFixed(UnitFromId(418), c_unitPropLifePercent, c_unitPropCurrent) <= 90.0) || (UnitGetPropertyFixed(UnitFromId(27), c_unitPropLifePercent, c_unitPropCurrent) <= 90.0) || (UnitGetPropertyFixed(UnitFromId(22), c_unitPropLifePercent, c_unitPropCurrent) <= 90.0) || (UnitGetPropertyFixed(UnitFromId(397), c_unitPropLifePercent, c_unitPropCurrent) <= 90.0) || (UnitGetPropertyFixed(UnitFromId(394), c_unitPropLifePercent, c_unitPropCurrent) <= 90.0) || (UnitGetPropertyFixed(UnitFromId(401), c_unitPropLifePercent, c_unitPropCurrent) <= 90.0) || (UnitGetPropertyFixed(UnitFromId(81), c_unitPropLifePercent, c_unitPropCurrent) <= 90.0) || (UnitGetPropertyFixed(UnitFromId(13), c_unitPropLifePercent, c_unitPropCurrent) <= 90.0) || (UnitGetPropertyFixed(UnitFromId(859), c_unitPropLifePercent, c_unitPropCurrent) <= 90.0)))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_TransmissionKeepItTogetherQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SecondBarricadeIntro_Init () {
    gt_SecondBarricadeIntro = TriggerCreate("gt_SecondBarricadeIntro_Func");
    TriggerEnable(gt_SecondBarricadeIntro, false);
    TriggerAddEventUnitRegion(gt_SecondBarricadeIntro, null, RegionFromId(25), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Missile Turret Dies
//--------------------------------------------------------------------------------------------------
bool gt_MissileTurretDies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(gv_impalerTurretHelper);
    TextTagDestroy(gv_impalerTurretText);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MissileTurretDies_Init () {
    gt_MissileTurretDies = TriggerCreate("gt_MissileTurretDies_Func");
    TriggerAddEventUnitDied(gt_MissileTurretDies, UnitRefFromUnit(UnitFromId(418)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Second Barricade Dead
//--------------------------------------------------------------------------------------------------
bool gt_SecondBarricadeDead_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_04_TERRAN, RegionFromId(20), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_backupPoint = PointFromId(577);
    PingDestroy(gv_impalerBarricadePing02);
    TriggerExecute(gt_TransmissionSecondBarricadeDeadQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SecondBarricadeDead_Init () {
    gt_SecondBarricadeDead = TriggerCreate("gt_SecondBarricadeDead_Func");
    TriggerEnable(gt_SecondBarricadeDead, false);
    TriggerAddEventTimePeriodic(gt_SecondBarricadeDead, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: First Colony Dead Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionFirstColonyDeadQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Hydralisk|Line00060", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionFirstColonyDeadQ_Init () {
    gt_TransmissionFirstColonyDeadQ = TriggerCreate("gt_TransmissionFirstColonyDeadQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: All Colonies Dead Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionAllColoniesDeadQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Hydralisk|Line00061", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionAllColoniesDeadQ_Init () {
    gt_TransmissionAllColoniesDeadQ = TriggerCreate("gt_TransmissionAllColoniesDeadQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Hydralisks Evolved Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionHydralisksEvolvedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Hydralisk|Line00062", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionHydralisksEvolvedQ_Init () {
    gt_TransmissionHydralisksEvolvedQ = TriggerCreate("gt_TransmissionHydralisksEvolvedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Impaler Strain Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionImpalerStrainQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Hydralisk|Line00065", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionImpalerStrainQ_Init () {
    gt_TransmissionImpalerStrainQ = TriggerCreate("gt_TransmissionImpalerStrainQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Use High Ground Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionUseHighGroundQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_impalerFirstBurrowComplete == false)) {
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
        TriggerExecute(gt_ImpalerMusicCue, true, false);
        libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Hydralisk|Line00068", c_transmissionDurationAdd, 0.0, false, 1, 0);
        gv_impalerBurrowTransmission = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionUseHighGroundQ_Init () {
    gt_TransmissionUseHighGroundQ = TriggerCreate("gt_TransmissionUseHighGroundQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Impalers Attacking Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionImpalersAttackingQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(UnitGroupRandomUnit(UnitGroup("SiegeTankSieged", c_playerAny, RegionFromId(19), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive), "zEvoMission_Hydralisk|Line00082", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionImpalersAttackingQ_Init () {
    gt_TransmissionImpalersAttackingQ = TriggerCreate("gt_TransmissionImpalersAttackingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Dominion Flee Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionDominionFleeQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(UnitGroupRandomUnit(UnitGroup("MengskFirebat", c_playerAny, RegionFromId(19), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive), "zEvoMission_Hydralisk|Line00101", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionDominionFleeQ_Init () {
    gt_TransmissionDominionFleeQ = TriggerCreate("gt_TransmissionDominionFleeQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: First Barricade Dead Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionFirstBarricadeDeadQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Hydralisk|Line00070", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionFirstBarricadeDeadQ_Init () {
    gt_TransmissionFirstBarricadeDeadQ = TriggerCreate("gt_TransmissionFirstBarricadeDeadQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Detector Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionDetectorIntroQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Hydralisk|Line00084", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionDetectorIntroQ_Init () {
    gt_TransmissionDetectorIntroQ = TriggerCreate("gt_TransmissionDetectorIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Keep It Together Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionKeepItTogetherQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(UnitGroupRandomUnit(UnitGroup("MengskFirebat", c_playerAny, RegionFromId(19), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive), "zEvoMission_Hydralisk|Line00083", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionKeepItTogetherQ_Init () {
    gt_TransmissionKeepItTogetherQ = TriggerCreate("gt_TransmissionKeepItTogetherQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Second Barricade Dead Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionSecondBarricadeDeadQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Hydralisk|Line00071", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionSecondBarricadeDeadQ_Init () {
    gt_TransmissionSecondBarricadeDeadQ = TriggerCreate("gt_TransmissionSecondBarricadeDeadQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Prometheus Company Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionPrometheusCompanyDestroyedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Hydralisk|Line00089", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Hydralisk|Line00090", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionPrometheusCompanyDestroyedQ_Init () {
    gt_TransmissionPrometheusCompanyDestroyedQ = TriggerCreate("gt_TransmissionPrometheusCompanyDestroyedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Units Dead - Lurker Holdout
//--------------------------------------------------------------------------------------------------
bool gt_PlayerUnitsDeadLurkerHoldout_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_backupSuppressed == false))) {
            return false;
        }

        if (!((UnitGroupCount(gv_lurkerPlayerUnits, c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_LurkerDenDefenseFailure, true, true);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerUnitsDeadLurkerHoldout_Init () {
    gt_PlayerUnitsDeadLurkerHoldout = TriggerCreate("gt_PlayerUnitsDeadLurkerHoldout_Func");
    TriggerEnable(gt_PlayerUnitsDeadLurkerHoldout, false);
    TriggerAddEventTimePeriodic(gt_PlayerUnitsDeadLurkerHoldout, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lurker Den Defense Failure
//--------------------------------------------------------------------------------------------------
bool gt_LurkerDenDefenseFailure_Func (bool testConds, bool runActions) {
    int auto535D2FB5_n;
    int auto535D2FB5_i;

    // Variable Declarations
    unitgroup lv_fadeoutUnits;

    // Variable Initialization
    lv_fadeoutUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_lurkerLurkerActive == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((TriggerQueueIsEmpty() == true))) {
        Wait(1.0, c_timeGame);
    }
    TransmissionClearAll();
    gv_backupSuppressed = true;
    TriggerQueuePause(true);
    TriggerStop(gt_LurkerStage2);
    TriggerStop(gt_LurkerAttackWave21);
    TriggerStop(gt_LurkerAttackWave22);
    Wait(2.0, c_timeReal);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    gv_inCinematic = true;
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationImmediate);
    libNtve_gf_GlobalCinematicSetting(true);
    UnitClearSelection(gv_pLAYER_01_USER);
    libNtve_gf_RemoveDeathModelsinRegionImmediately(RegionFromId(5));
    UnitGroupAddUnitGroup(lv_fadeoutUnits, gv_lurkerPlayerUnits);
    UnitGroupAddUnitGroup(lv_fadeoutUnits, gv_lurkerAttackGroupCurrent);
    UnitGroupLoopBegin(lv_fadeoutUnits);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    if ((UnitIsAlive(gv_lurkerDen) == false)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "LurkerDen", c_unitCreateIgnorePlacement, gv_pLAYER_03_ZERG_ALLIES, Point(136.0, 37.0));
        gv_lurkerDen = UnitLastCreated();
    }
    else {
    }
    UnitSetPropertyFixed(gv_lurkerDen, c_unitPropLifePercent, 100.0);
    CameraPan(gv_pLAYER_01_USER, gv_backupPoint, 0.0, -1, 10.0, false);
    auto535D2FB5_n = 7;
    auto535D2FB5_i = 1;
    while (auto535D2FB5_i <= auto535D2FB5_n) {
        libNtve_gf_CreateUnitsAtPoint2(1, "LurkerBurrowed", 0, gv_pLAYER_03_ZERG_ALLIES, RegionRandomPoint(RegionCircle(gv_backupPoint, 4.0)));
        UnitGroupAdd(gv_lurkerPlayerUnits, UnitLastCreated());
        auto535D2FB5_i = auto535D2FB5_i + 1;
    }
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    Wait(1.0, c_timeReal);
    UnitGroupLoopBegin(gv_lurkerPlayerUnits);
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("BurrowLurkerUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.1, 0.3), c_timeReal);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_lurkerPlayerUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_RescueUnit(UnitGroupLoopCurrent(), gv_pLAYER_01_USER, true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitBehaviorRemove(gv_lurkerDen, "ZergBuildingDies6", 1);
    UnitGroupSelect(gv_lurkerPlayerUnits, gv_pLAYER_01_USER, true);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.0);
    libNtve_gf_GlobalCinematicSetting(false);
    gv_inCinematic = false;
    TriggerQueuePause(false);
    gv_backupSuppressed = false;
    TriggerEnable(gt_LurkerAttackWave21, true);
    TriggerEnable(gt_LurkerAttackWave22, true);
    TriggerEnable(gt_TransmissionDestinationReachedQ, true);
    TriggerEnable(gt_TransmissionHoldoutWave1Q, true);
    TriggerEnable(gt_TransmissionHoldoutWave2Q, true);
    TriggerExecute(gt_TransmissionDestinationReachedQ, true, true);
    TriggerExecute(gt_LurkerAttackWave21, true, false);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LurkerDenDefenseFailure_Init () {
    gt_LurkerDenDefenseFailure = TriggerCreate("gt_LurkerDenDefenseFailure_Func");
    TriggerAddEventUnitDied(gt_LurkerDenDefenseFailure, UnitRefFromVariable("gv_lurkerDen"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lurker Music Cue
//--------------------------------------------------------------------------------------------------
bool gt_LurkerMusicCue_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("ZEvoMusicStinger", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZEvoMusicAlt", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LurkerMusicCue_Init () {
    gt_LurkerMusicCue = TriggerCreate("gt_LurkerMusicCue_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Lurker Q
//--------------------------------------------------------------------------------------------------
bool gt_StartLurkerQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_impalerImpalerActive = false;
    gv_lurkerLurkerActive = true;
    ObjectiveDestroyAll(PlayerGroupAll());
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Lurker", false, gv_pLAYER_01_USER);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("BurrowLurkerDown", 0), true);
    gv_backupSuppressed = false;
    gv_backupPoint = PointFromId(578);
    TriggerExecute(gt_IntroLurkerQ, true, true);
    UIAlertClear(gv_pLAYER_01_USER);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/48A30AE1"), null, PointFromId(214));
    TriggerQueueEnter();
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveLurkerEscortCreate, true, true);
    TriggerQueueExit();
    TriggerExecute(gt_TransmissionMoveOutQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartLurkerQ_Init () {
    gt_StartLurkerQ = TriggerCreate("gt_StartLurkerQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lurker Burrow Teaching
//--------------------------------------------------------------------------------------------------
bool gt_LurkerBurrowTeaching_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(15), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 1), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_LurkerAttackWave11, true, false);
    libSwaC_gf_CreateReticleEffectAndTextTagAtPoint(0, 0, StringExternal("Param/Value/578E5722"), PointFromId(217));
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("BurrowLurkerDown", 0), true);
    TriggerExecute(gt_TransmissionBurrowLurkersQ, true, false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(9), 10.0, false);
    while (!(((UnitGroupCount(UnitGroup("LurkerBurrowed", c_playerAny, RegionCircle(PointFromId(217), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (gf_UnitGroupisDamaged(gv_lurkerAttackGroupCurrent) == true)))) {
        Wait(0.25, c_timeGame);
    }
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("BurrowLurkerDown", 0), false);
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    TextTagDestroy(TextTagLastCreated());
    gv_lurkerFirstBurrowComplete = true;
    TriggerExecute(gt_TransmissionLurkerStrainQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LurkerBurrowTeaching_Init () {
    gt_LurkerBurrowTeaching = TriggerCreate("gt_LurkerBurrowTeaching_Func");
    TriggerAddEventTimePeriodic(gt_LurkerBurrowTeaching, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lurker - Attack Wave 1-1
//--------------------------------------------------------------------------------------------------
bool gt_LurkerAttackWave11_Func (bool testConds, bool runActions) {
    int autoC4AF7EE1_n;
    int autoC4AF7EE1_i;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoC4AF7EE1_n = 50;
    autoC4AF7EE1_i = 1;
    while (autoC4AF7EE1_i <= autoC4AF7EE1_n) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_02_ZERG_ENEMIES, RegionGetCenter(RegionFromId(21)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(27))), c_orderQueueReplace);
        UnitGroupAdd(gv_lurkerAttackGroupCurrent, UnitLastCreated());
        Wait(0.1, c_timeGame);
        autoC4AF7EE1_i = autoC4AF7EE1_i + 1;
    }
    gf_LurkerSendAttackWave(RegionFromId(9));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LurkerAttackWave11_Init () {
    gt_LurkerAttackWave11 = TriggerCreate("gt_LurkerAttackWave11_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lurker - Attack Wave 1-2
//--------------------------------------------------------------------------------------------------
bool gt_LurkerAttackWave12_Func (bool testConds, bool runActions) {
    int autoA4A8F08C_n;
    int autoA4A8F08C_i;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(14), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 1), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_backupPoint = PointFromId(579);
    TriggerExecute(gt_TransmissionSecondWaveQ, true, false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(16), 10.0, false);
    Wait(2.0, c_timeGame);
    autoA4A8F08C_n = 13;
    autoA4A8F08C_i = 1;
    while (autoA4A8F08C_i <= autoA4A8F08C_n) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_02_ZERG_ENEMIES, RegionGetCenter(RegionFromId(28)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(29))), c_orderQueueReplace);
        UnitGroupAdd(gv_lurkerAttackGroupCurrent, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", 0, gv_pLAYER_02_ZERG_ENEMIES, RegionGetCenter(RegionFromId(28)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(29))), c_orderQueueReplace);
        UnitGroupAdd(gv_lurkerAttackGroupCurrent, UnitLastCreated());
        Wait(0.1, c_timeGame);
        autoA4A8F08C_i = autoA4A8F08C_i + 1;
    }
    gf_LurkerSendAttackWave(RegionFromId(16));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LurkerAttackWave12_Init () {
    gt_LurkerAttackWave12 = TriggerCreate("gt_LurkerAttackWave12_Func");
    TriggerAddEventTimePeriodic(gt_LurkerAttackWave12, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lurker Reinforcements
//--------------------------------------------------------------------------------------------------
bool gt_LurkerReinforcements_Func (bool testConds, bool runActions) {
    int auto8D0D2394_n;
    int auto8D0D2394_i;

    // Variable Declarations
    int lv_reinforcementCount;
    unitgroup lv_lurkerReinforcementGroup;

    // Variable Initialization
    lv_reinforcementCount = 0;
    lv_lurkerReinforcementGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_reinforcementCount = (7 - UnitGroupCount(gv_lurkerPlayerUnits, c_unitCountAlive));
    if ((lv_reinforcementCount > 0)) {
        auto8D0D2394_n = lv_reinforcementCount;
        auto8D0D2394_i = 1;
        while (auto8D0D2394_i <= auto8D0D2394_n) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "LurkerBurrowed", 0, gv_pLAYER_03_ZERG_ALLIES, RegionRandomPoint(RegionFromId(2)));
            UnitGroupAdd(lv_lurkerReinforcementGroup, UnitLastCreated());
            UnitGroupAdd(gv_lurkerPlayerUnits, UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowLurkerUp", 0)), c_orderQueueReplace);
            Wait(0.15, c_timeGame);
            auto8D0D2394_i = auto8D0D2394_i + 1;
        }
        Wait(1.0, c_timeGame);
        UnitGroupLoopBegin(lv_lurkerReinforcementGroup);
        while (!UnitGroupLoopDone()) {
            libNtve_gf_RescueUnit(UnitGroupLoopCurrent(), gv_pLAYER_01_USER, true);
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LurkerReinforcements_Init () {
    gt_LurkerReinforcements = TriggerCreate("gt_LurkerReinforcements_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lurker - Stage 2
//--------------------------------------------------------------------------------------------------
bool gt_LurkerStage2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 1), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_PlayerUnitsDead, false);
    TriggerEnable(gt_PlayerUnitsDeadLurkerHoldout, true);
    gv_backupPoint = PointFromId(44);
    PingDestroy(gv_objectiveLurkerDenPing);
    TriggerExecute(gt_LurkerReinforcements, true, false);
    TriggerExecute(gt_ObjectiveLurkerEscortComplete, true, true);
    TriggerExecute(gt_TransmissionDestinationReachedQ, true, true);
    TriggerExecute(gt_ObjectiveLurkerHoldOutCreate, true, true);
    TriggerExecute(gt_LurkerAttackWave21, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LurkerStage2_Init () {
    gt_LurkerStage2 = TriggerCreate("gt_LurkerStage2_Func");
    TriggerAddEventTimePeriodic(gt_LurkerStage2, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lurker - Attack Wave 2-1
//--------------------------------------------------------------------------------------------------
bool gt_LurkerAttackWave21_Func (bool testConds, bool runActions) {
    int auto787943A7_n;
    int auto787943A7_i;
    int auto40C74D5B_n;
    int auto40C74D5B_i;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionHoldoutWave1Q, true, false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(11), 10.0, false);
    auto787943A7_n = 10;
    auto787943A7_i = 1;
    while (auto787943A7_i <= auto787943A7_n) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Baneling", 0, gv_pLAYER_02_ZERG_ENEMIES, RegionGetCenter(RegionFromId(31)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(33))), c_orderQueueReplace);
        UnitBehaviorAdd(UnitLastCreated(), "VolatileBurstBuilding", UnitLastCreated(), 1);
        UnitGroupAdd(gv_lurkerAttackGroupCurrent, UnitLastCreated());
        Wait(0.1, c_timeGame);
        auto787943A7_i = auto787943A7_i + 1;
    }
    auto40C74D5B_n = 25;
    auto40C74D5B_i = 1;
    while (auto40C74D5B_i <= auto40C74D5B_n) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_02_ZERG_ENEMIES, RegionGetCenter(RegionFromId(31)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(33))), c_orderQueueReplace);
        UnitGroupAdd(gv_lurkerAttackGroupCurrent, UnitLastCreated());
        Wait(0.1, c_timeGame);
        auto40C74D5B_i = auto40C74D5B_i + 1;
    }
    Wait(1.0, c_timeGame);
    gf_LurkerSendAttackWave(RegionFromId(11));
    while (!((libNtve_gf_UnitGroupIsDead(gv_lurkerAttackGroupCurrent) == true))) {
        Wait(1.0, c_timeGame);
    }
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_LurkerAttackWave22, true, false);
    TriggerExecute(gt_TransmissionHoldoutWave2Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LurkerAttackWave21_Init () {
    gt_LurkerAttackWave21 = TriggerCreate("gt_LurkerAttackWave21_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lurker - Attack Wave 2-2
//--------------------------------------------------------------------------------------------------
bool gt_LurkerAttackWave22_Func (bool testConds, bool runActions) {
    int auto99DF26D6_n;
    int auto99DF26D6_i;
    int autoD26BAA20_n;
    int autoD26BAA20_i;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(12), 10.0, false);
    auto99DF26D6_n = 10;
    auto99DF26D6_i = 1;
    while (auto99DF26D6_i <= auto99DF26D6_n) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", 0, gv_pLAYER_02_ZERG_ENEMIES, RegionGetCenter(RegionFromId(32)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(34))), c_orderQueueReplace);
        UnitGroupAdd(gv_lurkerAttackGroupCurrent, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Roach", 0, gv_pLAYER_02_ZERG_ENEMIES, RegionGetCenter(RegionFromId(32)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(34))), c_orderQueueReplace);
        UnitGroupAdd(gv_lurkerAttackGroupCurrent, UnitLastCreated());
        Wait(0.1, c_timeGame);
        auto99DF26D6_i = auto99DF26D6_i + 1;
    }
    autoD26BAA20_n = 35;
    autoD26BAA20_i = 1;
    while (autoD26BAA20_i <= autoD26BAA20_n) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_02_ZERG_ENEMIES, RegionGetCenter(RegionFromId(32)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(34))), c_orderQueueReplace);
        UnitGroupAdd(gv_lurkerAttackGroupCurrent, UnitLastCreated());
        Wait(0.1, c_timeGame);
        autoD26BAA20_i = autoD26BAA20_i + 1;
    }
    Wait(1.0, c_timeGame);
    gf_LurkerSendAttackWave(RegionFromId(12));
    while (!((libNtve_gf_UnitGroupIsDead(gv_lurkerAttackGroupCurrent) == true))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_VictoryDefendtheLurkerDenCompleted, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LurkerAttackWave22_Init () {
    gt_LurkerAttackWave22 = TriggerCreate("gt_LurkerAttackWave22_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Move Out Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionMoveOutQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((TriggerIsEnabled(gt_TransmissionBurrowLurkersQ) == true)) {
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
        libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Hydralisk|Line00048", c_transmissionDurationAdd, 0.0, true, 1, 0);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionMoveOutQ_Init () {
    gt_TransmissionMoveOutQ = TriggerCreate("gt_TransmissionMoveOutQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Burrow Lurkers Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionBurrowLurkersQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Hydralisk|Line00091", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionBurrowLurkersQ_Init () {
    gt_TransmissionBurrowLurkersQ = TriggerCreate("gt_TransmissionBurrowLurkersQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Lurker Strain Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionLurkerStrainQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Hydralisk|Line00021", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionLurkerStrainQ_Init () {
    gt_TransmissionLurkerStrainQ = TriggerCreate("gt_TransmissionLurkerStrainQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Second Wave Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionSecondWaveQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Hydralisk|Line00040", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionSecondWaveQ_Init () {
    gt_TransmissionSecondWaveQ = TriggerCreate("gt_TransmissionSecondWaveQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Destination Reached Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionDestinationReachedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Hydralisk|Line00051", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionDestinationReachedQ_Init () {
    gt_TransmissionDestinationReachedQ = TriggerCreate("gt_TransmissionDestinationReachedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Holdout Wave 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionHoldoutWave1Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    TriggerExecute(gt_LurkerMusicCue, true, false);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Hydralisk|Line00058", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionHoldoutWave1Q_Init () {
    gt_TransmissionHoldoutWave1Q = TriggerCreate("gt_TransmissionHoldoutWave1Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Holdout Wave 2 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionHoldoutWave2Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Hydralisk|Line00092", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionHoldoutWave2Q_Init () {
    gt_TransmissionHoldoutWave2Q = TriggerCreate("gt_TransmissionHoldoutWave2Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory {Eliminate All Terrans} Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryEliminateAllTerransCompleted_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_04_TERRAN, RegionFromId(6), UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_impalerOutpostPing);
    gv_backupSuppressed = true;
    TriggerEnable(gt_FirstBarricadeUnderAttack, false);
    TriggerEnable(gt_DominionFlee, false);
    TriggerEnable(gt_FirstBarricadeDead, false);
    TriggerEnable(gt_RockBreakers, false);
    TriggerEnable(gt_SecondBarricadeIntro, false);
    TriggerEnable(gt_MissileTurretDies, false);
    TriggerEnable(gt_SecondBarricadeDead, false);
    if ((TriggerIsEnabled(gt_ObjectiveImpalerMorphHydralisksComplete) == true)) {
        TriggerExecute(gt_ObjectiveImpalerMorphHydralisksComplete, true, false);
    }
    else {
    }
    TriggerExecute(gt_ObjectiveImpalerEliminateTerransComplete, true, true);
    TriggerExecute(gt_TransmissionPrometheusCompanyDestroyedQ, true, true);
    libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/D51D4086"));
    TriggerExecute(gt_StartLurkerQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryEliminateAllTerransCompleted_Init () {
    gt_VictoryEliminateAllTerransCompleted = TriggerCreate("gt_VictoryEliminateAllTerransCompleted_Func");
    TriggerEnable(gt_VictoryEliminateAllTerransCompleted, false);
    TriggerAddEventTimePeriodic(gt_VictoryEliminateAllTerransCompleted, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory {Defend the Lurker Den} Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryDefendtheLurkerDenCompleted_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryDefendtheLurkerDenCompleted_Init () {
    gt_VictoryDefendtheLurkerDenCompleted = TriggerCreate("gt_VictoryDefendtheLurkerDenCompleted_Func");
    TriggerEnable(gt_VictoryDefendtheLurkerDenCompleted, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveLurkerHoldOutComplete, true, true);
    libSwaC_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_VictoryCheat, false);
    TriggerEnable(gt_DefeatCheat, false);
    TriggerEnable(gt_Defeat, false);
    gv_gameOver = true;
    libSwaC_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_VictoryCheat, false);
    TriggerEnable(gt_DefeatCheat, false);
    TriggerEnable(gt_Defeat, false);
    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Mission Help Q
//--------------------------------------------------------------------------------------------------
bool gt_TipMissionHelpQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_DisplayMissionTip(StringExternal("Param/Value/1E9193B7"));
    Wait(libSwaC_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipMissionHelpQ_Init () {
    gt_TipMissionHelpQ = TriggerCreate("gt_TipMissionHelpQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Impaler - Zerg Send Waves
//--------------------------------------------------------------------------------------------------
bool gt_ImpalerZergSendWaves_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("Zergling", gv_pLAYER_05_ZERG_ALLIES, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_impalerZergWave, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupAdd(gv_impalerZergWave, UnitGroupClosestToPoint(UnitGroup("Overlord", gv_pLAYER_05_ZERG_ALLIES, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), PointFromId(550)));
    if ((gv_impalerFirstBarricadeCleared == false)) {
        UnitGroupIssueOrder(gv_impalerZergWave, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(875)), c_orderQueueReplace);
    }
    else {
        UnitGroupIssueOrder(gv_impalerZergWave, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(503)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ImpalerZergSendWaves_Init () {
    gt_ImpalerZergSendWaves = TriggerCreate("gt_ImpalerZergSendWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Impaler - Zerg Create Waves
//--------------------------------------------------------------------------------------------------
bool gt_ImpalerZergCreateWaves_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        TriggerExecute(gt_ImpalerZergSendWaves, true, false);
        UnitIssueOrder(UnitFromId(491), OrderTargetingUnit(AbilityCommand("SpawnLarva", 0), UnitFromId(8)), c_orderQueueReplace);
        UnitIssueOrder(UnitFromId(549), OrderTargetingUnit(AbilityCommand("SpawnLarva", 0), UnitFromId(157)), c_orderQueueReplace);
        UnitGroupLoopBegin(UnitGroup("Larva", gv_pLAYER_05_ZERG_ALLIES, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 9));
        while (!UnitGroupLoopDone()) {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("LarvaTrain", 1)), c_orderQueueReplace);
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        UnitIssueOrder(UnitGroupRandomUnit(UnitGroup("Larva", gv_pLAYER_05_ZERG_ALLIES, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive), Order(AbilityCommand("LarvaTrain", 2)), c_orderQueueReplace);
        if ((UnitGroupCount(gv_impalerBarricadeUnits, c_unitCountAlive) == 0)) {
            UnitGroupLoopBegin(UnitGroup("Larva", gv_pLAYER_05_ZERG_ALLIES, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("LarvaTrain", 1)), c_orderQueueReplace);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
        }
        else {
        }
        Wait(30.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ImpalerZergCreateWaves_Init () {
    gt_ImpalerZergCreateWaves = TriggerCreate("gt_ImpalerZergCreateWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Impaler - Zerg Wave Init
//--------------------------------------------------------------------------------------------------
bool gt_ImpalerZergWaveInit_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.0, c_timeGame);
    UnitSetPropertyFixed(UnitFromId(491), c_unitPropEnergyRegen, 5.0);
    UnitSetPropertyFixed(UnitFromId(549), c_unitPropEnergyRegen, 5.0);
    CatalogFieldValueSet(c_gameCatalogBehavior, "QueenSpawnLarvaTimer", "Duration", gv_pLAYER_05_ZERG_ALLIES, "25");
    TriggerExecute(gt_ImpalerZergCreateWaves, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ImpalerZergWaveInit_Init () {
    gt_ImpalerZergWaveInit = TriggerCreate("gt_ImpalerZergWaveInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Minerals
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveMinerals_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveMinerals_Init () {
    gt_AIGiveMinerals = TriggerCreate("gt_AIGiveMinerals_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_pLAYER_05_ZERG_ALLIES, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Gas
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveGas_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveGas_Init () {
    gt_AIGiveGas = TriggerCreate("gt_AIGiveGas_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_pLAYER_05_ZERG_ALLIES, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Find Impaler Essence Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFindImpalerEssenceCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZEvolutionHydraliskObjective04");
    gv_objectiveFindImpalerEssence = ObjectiveLastCreated();
    libSwaC_gf_SetMissionObjectiveProgress2("ZEvolutionHydraliskObjective04", gv_objectiveImpalerEssenceCount, true, StringExternal("Param/Value/7433BA5B"), true);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    IntLoopBegin(1, 3);
    while (!IntLoopDone()) {
        libSwaC_gf_CreateObjectivePing(true, UnitGetPosition(gv_impalerColonies[IntLoopCurrent()]), StringExternal("Param/Value/70525056"));
        gv_impalerColonyPings[IntLoopCurrent()] = PingLastCreated();
        VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 7.0), 4.0, true);
        IntLoopStep();
    }
    IntLoopEnd();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFindImpalerEssenceCreate_Init () {
    gt_ObjectiveFindImpalerEssenceCreate = TriggerCreate("gt_ObjectiveFindImpalerEssenceCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Find Impaler Essence Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFindImpalerEssenceComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveFindImpalerEssenceCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZEvolutionHydraliskObjective04", 2);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFindImpalerEssenceComplete_Init () {
    gt_ObjectiveFindImpalerEssenceComplete = TriggerCreate("gt_ObjectiveFindImpalerEssenceComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Find Impaler Essence Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFindImpalerEssenceFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveFindImpalerEssenceCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZEvolutionHydraliskObjective04", 3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFindImpalerEssenceFailed_Init () {
    gt_ObjectiveFindImpalerEssenceFailed = TriggerCreate("gt_ObjectiveFindImpalerEssenceFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Find Impaler Essence Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFindImpalerEssenceUpdate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveFindImpalerEssenceCreate, true, false);
    gv_objectiveImpalerEssenceCount += 1;
    libSwaC_gf_SetMissionObjectiveProgress2("ZEvolutionHydraliskObjective04", gv_objectiveImpalerEssenceCount, true, StringExternal("Param/Value/88BA5D62"), true);
    if ((gv_objectiveImpalerEssenceCount == 1)) {
        TriggerExecute(gt_TransmissionFirstColonyDeadQ, true, false);
    }
    else {
    }
    if ((gv_objectiveImpalerEssenceCount == 3)) {
        TriggerExecute(gt_ObjectiveFindImpalerEssenceComplete, true, true);
        TriggerExecute(gt_ImpalerEvolution, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFindImpalerEssenceUpdate_Init () {
    gt_ObjectiveFindImpalerEssenceUpdate = TriggerCreate("gt_ObjectiveFindImpalerEssenceUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Impaler Morph Hydralisks Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveImpalerMorphHydralisksCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZEvolutionHydraliskObjective6");
    gv_objectiveImpalerMorphHydralisks = ObjectiveLastCreated();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveImpalerMorphHydralisksCreate_Init () {
    gt_ObjectiveImpalerMorphHydralisksCreate = TriggerCreate("gt_ObjectiveImpalerMorphHydralisksCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Impaler Morph Hydralisks Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveImpalerMorphHydralisksComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveImpalerMorphHydralisksCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZEvolutionHydraliskObjective6", 2);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveImpalerMorphHydralisksComplete_Init () {
    gt_ObjectiveImpalerMorphHydralisksComplete = TriggerCreate("gt_ObjectiveImpalerMorphHydralisksComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Impaler Morph Hydralisks Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveImpalerMorphHydralisksFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveImpalerMorphHydralisksCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZEvolutionHydraliskObjective6", 3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveImpalerMorphHydralisksFailed_Init () {
    gt_ObjectiveImpalerMorphHydralisksFailed = TriggerCreate("gt_ObjectiveImpalerMorphHydralisksFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Impaler Eliminate Terrans Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveImpalerEliminateTerransCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZEvolutionHydraliskObjective2");
    gv_objectiveImpalerEliminateTerrans = ObjectiveLastCreated();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    libSwaC_gf_CreateObjectivePing(true, RegionGetCenter(RegionFromId(23)), StringExternal("Param/Value/30A06622"));
    gv_impalerOutpostPing = PingLastCreated();
    libSwaC_gf_CreateObjectivePing(true, RegionGetCenter(RegionFromId(19)), StringExternal("Param/Value/08021A86"));
    gv_impalerBarricadePing01 = PingLastCreated();
    libSwaC_gf_CreateObjectivePing(true, RegionGetCenter(RegionFromId(20)), StringExternal("Param/Value/3A736B84"));
    gv_impalerBarricadePing02 = PingLastCreated();
    TriggerEnable(gt_VictoryEliminateAllTerransCompleted, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveImpalerEliminateTerransCreate_Init () {
    gt_ObjectiveImpalerEliminateTerransCreate = TriggerCreate("gt_ObjectiveImpalerEliminateTerransCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Impaler Eliminate Terrans Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveImpalerEliminateTerransComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveImpalerEliminateTerransCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZEvolutionHydraliskObjective2", 2);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerStop(gt_ImpalerZergCreateWaves);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveImpalerEliminateTerransComplete_Init () {
    gt_ObjectiveImpalerEliminateTerransComplete = TriggerCreate("gt_ObjectiveImpalerEliminateTerransComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Impaler Eliminate Terrans Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveImpalerEliminateTerransFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveImpalerEliminateTerransCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZEvolutionHydraliskObjective2", 3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveImpalerEliminateTerransFailed_Init () {
    gt_ObjectiveImpalerEliminateTerransFailed = TriggerCreate("gt_ObjectiveImpalerEliminateTerransFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Lurker Escort Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveLurkerEscortCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZEvolutionHydraliskObjective5");
    gv_objectiveLurkerEscort = ObjectiveLastCreated();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(18));
    libSwaC_gf_CreateObjectivePing(true, UnitGetPosition(gv_lurkerDen), StringExternal("Param/Value/98233BBE"));
    gv_objectiveLurkerDenPing = PingLastCreated();
    PingSetVisible(PingLastCreated(), true);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveLurkerEscortCreate_Init () {
    gt_ObjectiveLurkerEscortCreate = TriggerCreate("gt_ObjectiveLurkerEscortCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Lurker Escort Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveLurkerEscortComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveLurkerEscortCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZEvolutionHydraliskObjective5", 2);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveLurkerEscortComplete_Init () {
    gt_ObjectiveLurkerEscortComplete = TriggerCreate("gt_ObjectiveLurkerEscortComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Lurker Escort Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveLurkerEscortFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveLurkerEscortCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZEvolutionHydraliskObjective5", 3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveLurkerEscortFailed_Init () {
    gt_ObjectiveLurkerEscortFailed = TriggerCreate("gt_ObjectiveLurkerEscortFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Lurker Hold Out Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveLurkerHoldOutCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZEvolutionHydraliskObjective1");
    gv_objectiveLurkerHoldOut = ObjectiveLastCreated();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveLurkerHoldOutCreate_Init () {
    gt_ObjectiveLurkerHoldOutCreate = TriggerCreate("gt_ObjectiveLurkerHoldOutCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Lurker Hold Out Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveLurkerHoldOutComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveLurkerHoldOutCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZEvolutionHydraliskObjective1", 2);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveLurkerHoldOutComplete_Init () {
    gt_ObjectiveLurkerHoldOutComplete = TriggerCreate("gt_ObjectiveLurkerHoldOutComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Lurker Hold Out Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveLurkerHoldOutFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveLurkerHoldOutCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZEvolutionHydraliskObjective1", 3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveLurkerHoldOutFailed_Init () {
    gt_ObjectiveLurkerHoldOutFailed = TriggerCreate("gt_ObjectiveLurkerHoldOutFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    gv_inCinematic = true;
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    RegionPlayableMapSet(RegionFromId(6));
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_lurkerAllUnits);
    while (!UnitGroupLoopDone()) {
        if ((UnitGetType(UnitGroupLoopCurrent()) != "CreepTumorUsed")) {
            libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
            libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_PauseUnit(UnitFromId(86), true);
    libNtve_gf_ChangeUnitDamage(UnitFromId(86), 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumorBurrowed", 0, gv_pLAYER_02_ZERG_ENEMIES, UnitGetPosition(UnitFromId(396)));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumorBurrowed", 0, gv_pLAYER_02_ZERG_ENEMIES, UnitGetPosition(UnitFromId(433)));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitGroupLoopBegin(UnitGroup("CreepTumorBurrowed", c_playerAny, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        CreepModify(UnitGetPosition(UnitGroupLoopCurrent()), 10.0, true, false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    CreepModify(UnitGetPosition(UnitFromId(157)), 12.0, true, false);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(24), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_cinematicTempUnits, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_HydraliskIntro, true, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    libSwaC_gf_PreparePlanetPortraitZoomIn("EvolutionPlanetHydraliskB", CameraInfoFromId(2), "MarSara");
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(0);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_Hydralisk|Line00008", c_transmissionDurationAdd, 0.0, true, 1, 0);
    TransmissionWait(TransmissionLastSent(), 2.0);
    libSwaC_gf_ZoomInPlanetPortrait();
    libSwaC_gf_HidePlanetPortrait();
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_EvoHydralisk1_Quad", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    Wait(1.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(29), 6.0, -1, 10, true);
    UnitGroupIssueOrder(UnitGroup(null, c_playerAny, RegionFromId(24), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(875)), c_orderQueueReplace);
    Wait(6.0, c_timeReal);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_Hydralisk|Line00014", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_Hydralisk|Line00016", c_transmissionDurationAdd, 0.0, true, 1, 0);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(5), 0.0, -1, 10, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_PauseUnit(UnitFromId(86), false);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_Hydralisk|Line00017", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_Hydralisk|Line00019", c_transmissionDurationAdd, 0.0, true, 1, 0);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    int auto471074E8_ae;
    int auto471074E8_ai;

    // Variable Declarations
    fixed lv_fadeDuration;
    int lv_i;

    // Variable Initialization
    lv_fadeDuration = 0.0;
    lv_i = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_HydraliskIntro);
    UnitGroupLoopBegin(gv_cinematicTempUnits);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    libSwaC_gf_HidePlanetPortrait();
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    UnitGroupLoopBegin(UnitGroup("Hydralisk", gv_pLAYER_01_USER, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSelect(UnitGroupLoopCurrent(), gv_pLAYER_01_USER, true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Hydralisk", gv_pLAYER_05_ZERG_ALLIES, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Zergling", gv_pLAYER_05_ZERG_ALLIES, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    if ((gv_cinematicCompleted == false)) {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_EvoHydralisk1_Quad", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }
    else {
    }
    libNtve_gf_PauseUnit(UnitFromId(86), false);
    libNtve_gf_ChangeUnitDamage(UnitFromId(86), 0, 0);
    UnitBehaviorAdd(UnitFromId(8), "QueenSpawnLarvaTimer", UnitFromId(8), 1);
    UnitBehaviorSetDurationRemaining(UnitFromId(8), "QueenSpawnLarvaTimer", 0.5);
    UnitBehaviorAdd(UnitFromId(157), "QueenSpawnLarvaTimer", UnitFromId(157), 1);
    UnitBehaviorSetDurationRemaining(UnitFromId(157), "QueenSpawnLarvaTimer", 0.5);
    auto471074E8_ae = 18;
    auto471074E8_ai = 1;
    lv_i = 1;
    while ((auto471074E8_ai >= 0 && lv_i <= auto471074E8_ae) || (auto471074E8_ai <= 0 && lv_i >= auto471074E8_ae)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_05_ZERG_ALLIES, RegionRandomPoint(RegionFromId(10)));
        if (lv_i == auto471074E8_ae) {
            break;
        }
        lv_i = lv_i + auto471074E8_ai;
    }
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_04_TERRAN, RegionFromId(19), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_impalerBarricadeUnits, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_04_TERRAN, RegionFromId(20), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_impalerBarricadeUnits, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(849)), lv_fadeDuration);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    gv_inCinematic = false;
    Wait(lv_fadeDuration, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hydralisk Intro
//--------------------------------------------------------------------------------------------------
bool gt_HydraliskIntro_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_inCinematic == true)) {
        gf_HydraliskIntro(PointFromId(434));
        gv_cineHydralisk01 = UnitLastCreated();
    }
    else {
        return true;
    }
    Wait(2.0, c_timeGame);
    if ((gv_inCinematic == true)) {
        gf_HydraliskIntro(PointFromId(852));
        gv_cineHydralisk02 = UnitLastCreated();
    }
    else {
        return true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HydraliskIntro_Init () {
    gt_HydraliskIntro = TriggerCreate("gt_HydraliskIntro_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Lurker Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroLurkerQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_IntroLurkerSetup, true, true);
    TriggerExecute(gt_IntroLurkerMusic, true, false);
    TriggerExecute(gt_IntroLurkerCinematic, true, true);
    TriggerExecute(gt_IntroLurkerCinematicEnd, true, true);
    TriggerExecute(gt_IntroLurkerCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroLurkerQ_Init () {
    gt_IntroLurkerQ = TriggerCreate("gt_IntroLurkerQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Lurker Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroLurkerSetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    gv_inCinematic = true;
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    RegionPlayableMapSet(RegionFromId(5));
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Space01", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_lurkerAllUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitPauseAll(true);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    UnitGroupAddUnitGroup(gv_cinematicHiddenUnits, gv_lurkerPlayerUnits);
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    CreepModify(UnitGetPosition(UnitFromId(16)), 10.0, true, false);
    CreepModify(UnitGetPosition(UnitFromId(42)), 10.0, true, false);
    CreepModify(UnitGetPosition(UnitFromId(34)), 10.0, true, false);
    CreepModify(UnitGetPosition(UnitFromId(653)), 10.0, true, false);
    CreepModify(UnitGetPosition(UnitFromId(292)), 10.0, true, false);
    CreepModify(UnitGetPosition(UnitFromId(47)), 10.0, true, false);
    libNtve_gf_CreateUnitsAtPoint2(1, "LurkerBurrowed", 0, gv_pLAYER_01_USER, PointFromId(9));
    gv_cineLurker01 = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "LurkerBurrowed", 0, gv_pLAYER_01_USER, PointFromId(11));
    gv_cineLurker02 = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "LurkerBurrowed", 0, gv_pLAYER_01_USER, PointFromId(12));
    gv_cineLurker03 = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "LurkerBurrowed", 0, gv_pLAYER_01_USER, PointFromId(14));
    gv_cineLurker04 = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "LurkerBurrowed", 0, gv_pLAYER_01_USER, PointFromId(15));
    gv_cineLurker05 = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "LurkerBurrowed", 0, gv_pLAYER_01_USER, PointFromId(18));
    gv_cineLurker06 = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "LurkerBurrowed", 0, gv_pLAYER_01_USER, PointFromId(19));
    gv_cineLurker07 = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroLurkerSetup_Init () {
    gt_IntroLurkerSetup = TriggerCreate("gt_IntroLurkerSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Lurker Music
//--------------------------------------------------------------------------------------------------
bool gt_IntroLurkerMusic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZEvoMusicMain", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroLurkerMusic_Init () {
    gt_IntroLurkerMusic = TriggerCreate("gt_IntroLurkerMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Lurker Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroLurkerCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_cinematicCompleted = false;
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    libSwaC_gf_PreparePlanetPortraitZoomIn("EvolutionPlanetHydraliskA", CameraInfoFromId(20), "MarSara");
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(0);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_Hydralisk|Line00002", c_transmissionDurationAdd, 0.0, true, 1, 0);
    TransmissionWait(TransmissionLastSent(), 2.0);
    libSwaC_gf_ZoomInPlanetPortrait();
    libSwaC_gf_HidePlanetPortrait();
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_MarSara", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    TriggerExecute(gt_IntroLurkerMovement, true, false);
    Wait(1.0, c_timeGame);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_Hydralisk|Line00001", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_Hydralisk|Line00027", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_Hydralisk|Line00009", c_transmissionDurationAdd, 0.0, true, 1, 0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(572), 0.0, -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoBriefing_Hydralisk|Line00003", c_transmissionDurationAdd, 0.0, true, 1, 0);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroLurkerCinematic_Init () {
    gt_IntroLurkerCinematic = TriggerCreate("gt_IntroLurkerCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Lurker Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroLurkerCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroLurkerCinematicEnd_Init () {
    gt_IntroLurkerCinematicEnd = TriggerCreate("gt_IntroLurkerCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Lurker Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroLurkerCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_IntroLurkerMovement);
    UnitGroupLoopBegin(gv_cinematicTempUnits);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitPauseAll(false);
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    libSwaC_gf_HidePlanetPortrait();
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    if ((gv_cinematicCompleted == false)) {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_MarSara", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }
    else {
    }
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitGroupSelect(gv_lurkerPlayerUnits, gv_pLAYER_01_USER, true);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(75)), lv_fadeDuration);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gv_inCinematic = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroLurkerCleanup_Init () {
    gt_IntroLurkerCleanup = TriggerCreate("gt_IntroLurkerCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Lurker Movement
//--------------------------------------------------------------------------------------------------
bool gt_IntroLurkerMovement_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(gv_cineLurker01, Order(AbilityCommand("BurrowLurkerUp", 0)), c_orderQueueReplace);
    Wait(0.3, c_timeGame);
    UnitIssueOrder(gv_cineLurker02, Order(AbilityCommand("BurrowLurkerUp", 0)), c_orderQueueReplace);
    Wait(0.3, c_timeGame);
    UnitIssueOrder(gv_cineLurker03, Order(AbilityCommand("BurrowLurkerUp", 0)), c_orderQueueReplace);
    Wait(0.3, c_timeGame);
    UnitIssueOrder(gv_cineLurker04, Order(AbilityCommand("BurrowLurkerUp", 0)), c_orderQueueReplace);
    Wait(0.3, c_timeGame);
    UnitIssueOrder(gv_cineLurker05, Order(AbilityCommand("BurrowLurkerUp", 0)), c_orderQueueReplace);
    Wait(0.3, c_timeGame);
    UnitIssueOrder(gv_cineLurker06, Order(AbilityCommand("BurrowLurkerUp", 0)), c_orderQueueReplace);
    Wait(0.3, c_timeGame);
    UnitIssueOrder(gv_cineLurker07, Order(AbilityCommand("BurrowLurkerUp", 0)), c_orderQueueReplace);
    Wait(0.3, c_timeGame);
    UnitIssueOrder(gv_cineLurker01, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(23)), c_orderQueueAddToEnd);
    Wait(0.3, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(21), 5.0, -1, 10.0, true);
    UnitIssueOrder(gv_cineLurker02, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(24)), c_orderQueueAddToEnd);
    Wait(0.3, c_timeGame);
    UnitIssueOrder(gv_cineLurker03, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(26)), c_orderQueueAddToEnd);
    Wait(0.3, c_timeGame);
    UnitIssueOrder(gv_cineLurker04, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(28)), c_orderQueueAddToEnd);
    Wait(0.3, c_timeGame);
    UnitIssueOrder(gv_cineLurker05, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(35)), c_orderQueueAddToEnd);
    Wait(0.3, c_timeGame);
    UnitIssueOrder(gv_cineLurker06, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(37)), c_orderQueueAddToEnd);
    Wait(0.3, c_timeGame);
    UnitIssueOrder(gv_cineLurker07, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(41)), c_orderQueueAddToEnd);
    UnitGroupLoopBegin(UnitGroup("Lurker", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(217)), c_orderQueueAddToEnd);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroLurkerMovement_Init () {
    gt_IntroLurkerMovement = TriggerCreate("gt_IntroLurkerMovement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UnitClearSelection(gv_pLAYER_01_USER);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    libNtve_gf_RemoveDeathModelsinRegion(RegionEntireMap());
    UnitPauseAll(true);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_ZERG_ENEMIES, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitSetPropertyFixed(gv_lurkerDen, c_unitPropLifePercent, 100.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Overlord", 0, gv_pLAYER_01_USER, PointFromId(103));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(184)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Overlord", 0, gv_pLAYER_01_USER, PointFromId(122));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(193)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Overlord", 0, gv_pLAYER_01_USER, PointFromId(131));
    gv_cineOverlord = UnitLastCreated();
    UnitIssueOrder(gv_cineOverlord, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(196)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Overlord", 0, gv_pLAYER_01_USER, PointFromId(176));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(237)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Overlord", 0, gv_pLAYER_01_USER, PointFromId(177));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(238)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(563), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(76), 10.0, -1, 10, true);
    gv_cinematicCompleted = false;
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    SoundPlay(SoundLink("Event_HydraliskEvo_OverlordFlyBy", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_victoryOverlordFlybySound = SoundLastPlayed();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(0);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Hydralisk|Line00023", c_transmissionDurationAdd, 0.0, false, 1, 0);
    Wait(2.0, c_timeReal);
    SoundPlay(SoundLink("Event_HydraliskEvo_OverlordFlyBy", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(1.5, c_timeReal);
    UnitCreate(1, "LargeSwarmQueen", 0, gv_pLAYER_01_USER, PointFromId(196), 180.0);
    gv_cineQueen = UnitLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_cineQueen), c_animNameDefault, "Unload", 0, c_animTimeDefault);
    libNtve_gf_ShowHideUnit(gv_cineQueen, false);
    Wait(0.1, c_timeGame);
    libNtve_gf_ShowHideUnit(gv_cineQueen, true);
    UnitIssueOrder(gv_cineOverlord, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(179)), c_orderQueueReplace);
    SoundPlay(SoundLink("Event_HydraliskEvo_BroodMotherLands", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(1.4, c_timeGame);
    UnitIssueOrder(gv_cineQueen, OrderTargetingUnit(AbilityCommand("QueenChannel", 0), gv_lurkerDen), c_orderQueueReplace);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_cineQueen), c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    UnitSetOwner(gv_lurkerDen, gv_pLAYER_01_USER, true);
    Wait(0.566, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_cineQueen), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_AttachModelToUnit(UnitFromId(102), "ZagaraEggCollection", "Center");
    SoundPlay(SoundLink("Niadra_Collect_Cast", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_essenceCollectStartSound = SoundLastPlayed();
    SoundPlay(SoundLink("Niadra_Collect_Loop", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_essenceCollectLoopSound = SoundLastPlayed();
    Wait(1.5, c_timeGame);
    TransmissionWait(TransmissionLastSent(), 0.0);
    SoundPlay(SoundLink("Event_HydraliskEvo_OverlordFlyBy", -1), PlayerGroupAll(), 100.0, 0.0);
    libSwaC_gf_SendTransmissionCampaign(null, "zEvoMission_Hydralisk|Line00016", c_transmissionDurationAdd, 0.0, true, 1, 0);
    TriggerExecute(gt_VictoryMusicCue, true, false);
    SoundStop(gv_essenceCollectLoopSound, true);
    SoundPlay(SoundLink("Niadra_Collect_End", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Music Cue
//--------------------------------------------------------------------------------------------------
bool gt_VictoryMusicCue_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZEvoMusicMain", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryMusicCue_Init () {
    gt_VictoryMusicCue = TriggerCreate("gt_VictoryMusicCue_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    SoundStop(gv_essenceCollectLoopSound, true);
    SoundStop(gv_essenceCollectStartSound, true);
    SoundStop(gv_victoryOverlordFlybySound, true);
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04MusicSound_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_SkiptoPart2_Init();
    gt_StartGameQ_Init();
    gt_PlayerUnitsDead_Init();
    gt_ImpalerMusicCue_Init();
    gt_ImpalerColonyDies_Init();
    gt_ImpalerEvolution_Init();
    gt_ImpalerResourceFailsafe_Init();
    gt_ImpalerMorphFinished_Init();
    gt_HydraliskDiesFailsafe_Init();
    gt_BarricadeAssault_Init();
    gt_ImpalerBurrowTeaching_Init();
    gt_CliffBarrierSmash_Init();
    gt_FirstBarricadeUnderAttack_Init();
    gt_DominionFlee_Init();
    gt_FirstBarricadeDead_Init();
    gt_RockBreakers_Init();
    gt_SecondBarricadeIntro_Init();
    gt_MissileTurretDies_Init();
    gt_SecondBarricadeDead_Init();
    gt_TransmissionFirstColonyDeadQ_Init();
    gt_TransmissionAllColoniesDeadQ_Init();
    gt_TransmissionHydralisksEvolvedQ_Init();
    gt_TransmissionImpalerStrainQ_Init();
    gt_TransmissionUseHighGroundQ_Init();
    gt_TransmissionImpalersAttackingQ_Init();
    gt_TransmissionDominionFleeQ_Init();
    gt_TransmissionFirstBarricadeDeadQ_Init();
    gt_TransmissionDetectorIntroQ_Init();
    gt_TransmissionKeepItTogetherQ_Init();
    gt_TransmissionSecondBarricadeDeadQ_Init();
    gt_TransmissionPrometheusCompanyDestroyedQ_Init();
    gt_PlayerUnitsDeadLurkerHoldout_Init();
    gt_LurkerDenDefenseFailure_Init();
    gt_LurkerMusicCue_Init();
    gt_StartLurkerQ_Init();
    gt_LurkerBurrowTeaching_Init();
    gt_LurkerAttackWave11_Init();
    gt_LurkerAttackWave12_Init();
    gt_LurkerReinforcements_Init();
    gt_LurkerStage2_Init();
    gt_LurkerAttackWave21_Init();
    gt_LurkerAttackWave22_Init();
    gt_TransmissionMoveOutQ_Init();
    gt_TransmissionBurrowLurkersQ_Init();
    gt_TransmissionLurkerStrainQ_Init();
    gt_TransmissionSecondWaveQ_Init();
    gt_TransmissionDestinationReachedQ_Init();
    gt_TransmissionHoldoutWave1Q_Init();
    gt_TransmissionHoldoutWave2Q_Init();
    gt_VictoryEliminateAllTerransCompleted_Init();
    gt_VictoryDefendtheLurkerDenCompleted_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_TipMissionHelpQ_Init();
    gt_ImpalerZergSendWaves_Init();
    gt_ImpalerZergCreateWaves_Init();
    gt_ImpalerZergWaveInit_Init();
    gt_AIGiveMinerals_Init();
    gt_AIGiveGas_Init();
    gt_ObjectiveFindImpalerEssenceCreate_Init();
    gt_ObjectiveFindImpalerEssenceComplete_Init();
    gt_ObjectiveFindImpalerEssenceFailed_Init();
    gt_ObjectiveFindImpalerEssenceUpdate_Init();
    gt_ObjectiveImpalerMorphHydralisksCreate_Init();
    gt_ObjectiveImpalerMorphHydralisksComplete_Init();
    gt_ObjectiveImpalerMorphHydralisksFailed_Init();
    gt_ObjectiveImpalerEliminateTerransCreate_Init();
    gt_ObjectiveImpalerEliminateTerransComplete_Init();
    gt_ObjectiveImpalerEliminateTerransFailed_Init();
    gt_ObjectiveLurkerEscortCreate_Init();
    gt_ObjectiveLurkerEscortComplete_Init();
    gt_ObjectiveLurkerEscortFailed_Init();
    gt_ObjectiveLurkerHoldOutCreate_Init();
    gt_ObjectiveLurkerHoldOutComplete_Init();
    gt_ObjectiveLurkerHoldOutFailed_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_HydraliskIntro_Init();
    gt_IntroLurkerQ_Init();
    gt_IntroLurkerSetup_Init();
    gt_IntroLurkerMusic_Init();
    gt_IntroLurkerCinematic_Init();
    gt_IntroLurkerCinematicEnd_Init();
    gt_IntroLurkerCleanup_Init();
    gt_IntroLurkerMovement_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryMusicCue_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}
