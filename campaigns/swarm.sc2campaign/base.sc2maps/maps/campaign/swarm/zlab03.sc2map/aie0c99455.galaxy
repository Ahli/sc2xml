//==================================================================================================
// 
// Generated AI Script
// 
// AI Name: Dominion P03
// 
//==================================================================================================
include "TriggerLibs/natives"
include "TriggerLibs/AI"
include "TriggerLibs/Computer"

//--------------------------------------------------------------------------------------------------
// Globals
//--------------------------------------------------------------------------------------------------
point[17] aiE0C99455_defGather;
string[17] aiE0C99455_customData;
wave[17] aiE0C99455_lastWave;

//--------------------------------------------------------------------------------------------------
// Attack Wave: Scripted 5/5/6 Marines
//--------------------------------------------------------------------------------------------------
bool[17] aiE0C99455_wave4_enabled;
wave[17] aiE0C99455_wave4_lastWave;
trigger aiE0C99455_wave4_trigger = null;
int aiE0C99455_wave4_runPlayer;
playergroup aiE0C99455_wave4_runTarget;

//--------------------------------------------------------------------------------------------------
void aiE0C99455_wave4_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiE0C99455_wave4_enabled[init_i] = true;
        aiE0C99455_wave4_lastWave[init_i] = null;
    }

    aiE0C99455_wave4_trigger = TriggerCreate("aiE0C99455_wave4_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiE0C99455_wave4_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiE0C99455_wave4_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiE0C99455_wave4_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiE0C99455_wave4_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiE0C99455_wave4_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiE0C99455_wave4_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiE0C99455_wave4_runFunc (bool c, bool a) {
    int p = aiE0C99455_wave4_runPlayer;
    playergroup target = aiE0C99455_wave4_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiE0C99455_wave4_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiE0C99455_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 60; }
    if (d == 2) { ta = 60; }
    if (d == 3) { ta = 60; }
    if (d == 4) { ta = 60; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiE0C99455_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    Wait(ts, c_timeAI);
    TriggerExecute(TriggerFind("gt_AttackWaveFirstScriptedWave_Func"), true, false);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiE0C99455_wave4_run (int p, playergroup target, bool wait) {
    aiE0C99455_wave4_runPlayer = p;
    aiE0C99455_wave4_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiE0C99455_wave4_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: Hellion Battle Mode Turned On
//--------------------------------------------------------------------------------------------------
bool[17] aiE0C99455_wave1_enabled;
wave[17] aiE0C99455_wave1_lastWave;
trigger aiE0C99455_wave1_trigger = null;
int aiE0C99455_wave1_runPlayer;
playergroup aiE0C99455_wave1_runTarget;

//--------------------------------------------------------------------------------------------------
void aiE0C99455_wave1_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiE0C99455_wave1_enabled[init_i] = true;
        aiE0C99455_wave1_lastWave[init_i] = null;
    }

    aiE0C99455_wave1_trigger = TriggerCreate("aiE0C99455_wave1_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiE0C99455_wave1_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiE0C99455_wave1_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiE0C99455_wave1_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiE0C99455_wave1_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiE0C99455_wave1_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiE0C99455_wave1_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiE0C99455_wave1_runFunc (bool c, bool a) {
    int p = aiE0C99455_wave1_runPlayer;
    playergroup target = aiE0C99455_wave1_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiE0C99455_wave1_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiE0C99455_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 240; }
    if (d == 2) { ta = 240; }
    if (d == 3) { ta = 240; }
    if (d == 4) { ta = 240; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiE0C99455_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiE0C99455_wave1_run (int p, playergroup target, bool wait) {
    aiE0C99455_wave1_runPlayer = p;
    aiE0C99455_wave1_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiE0C99455_wave1_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: Custom Spawning for last 2 Minutes
//--------------------------------------------------------------------------------------------------
bool[17] aiE0C99455_wave3_enabled;
wave[17] aiE0C99455_wave3_lastWave;
trigger aiE0C99455_wave3_trigger = null;
int aiE0C99455_wave3_runPlayer;
playergroup aiE0C99455_wave3_runTarget;

//--------------------------------------------------------------------------------------------------
void aiE0C99455_wave3_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiE0C99455_wave3_enabled[init_i] = true;
        aiE0C99455_wave3_lastWave[init_i] = null;
    }

    aiE0C99455_wave3_trigger = TriggerCreate("aiE0C99455_wave3_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiE0C99455_wave3_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiE0C99455_wave3_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiE0C99455_wave3_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiE0C99455_wave3_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiE0C99455_wave3_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiE0C99455_wave3_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiE0C99455_wave3_runFunc (bool c, bool a) {
    int p = aiE0C99455_wave3_runPlayer;
    playergroup target = aiE0C99455_wave3_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiE0C99455_wave3_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiE0C99455_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 480; }
    if (d == 2) { ta = 480; }
    if (d == 3) { ta = 480; }
    if (d == 4) { ta = 480; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiE0C99455_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    Wait(ts, c_timeAI);
    TriggerExecute(TriggerFind("gt_HoldOutFinal2Minutes_Func"), true, false);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiE0C99455_wave3_run (int p, playergroup target, bool wait) {
    aiE0C99455_wave3_runPlayer = p;
    aiE0C99455_wave3_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiE0C99455_wave3_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave Wrappers
//--------------------------------------------------------------------------------------------------
void aiE0C99455_wave_enable (int w, int p, bool val) {
    if (w == 4) { aiE0C99455_wave4_enable(p, val); }
    if (w == 1) { aiE0C99455_wave1_enable(p, val); }
    if (w == 3) { aiE0C99455_wave3_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
bool aiE0C99455_wave_isEnabled (int w, int p) {
    if (w == 4) { return aiE0C99455_wave4_isEnabled(p); }
    if (w == 1) { return aiE0C99455_wave1_isEnabled(p); }
    if (w == 3) { return aiE0C99455_wave3_isEnabled(p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup aiE0C99455_wave_createdUnits (int w, int p) {
    return null;
}

//--------------------------------------------------------------------------------------------------
wave aiE0C99455_wave_createdWave (int w, int p) {
    if (w == 4) { return aiE0C99455_wave4_createdWave(p); }
    if (w == 1) { return aiE0C99455_wave1_createdWave(p); }
    if (w == 3) { return aiE0C99455_wave3_createdWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void aiE0C99455_wave_run (int w, int p, playergroup target, bool wait) {
    if (w == 4) { aiE0C99455_wave4_run(p, target, wait); }
    if (w == 1) { aiE0C99455_wave1_run(p, target, wait); }
    if (w == 3) { aiE0C99455_wave3_run(p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
// Attack Wave Sequence
//--------------------------------------------------------------------------------------------------
trigger aiE0C99455_waves_trigger = null;
int aiE0C99455_waves_runPlayer;
playergroup aiE0C99455_waves_runTarget;

//--------------------------------------------------------------------------------------------------
void aiE0C99455_waves_init () {
    aiE0C99455_waves_trigger = TriggerCreate("aiE0C99455_waves_runFunc");
}

//--------------------------------------------------------------------------------------------------
bool aiE0C99455_waves_runFunc (bool c, bool a) {
    int p = aiE0C99455_waves_runPlayer;
    playergroup target = aiE0C99455_waves_runTarget;

    if (p < 0 || p >= 16) {
        return false;
    }

    aiE0C99455_wave4_run(p, target, true);
    aiE0C99455_wave1_run(p, target, true);
    aiE0C99455_wave3_run(p, target, true);

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiE0C99455_waves_run (int p, playergroup target) {
    aiE0C99455_waves_runPlayer = p;
    aiE0C99455_waves_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiE0C99455_waves_trigger, false, false);
}

//--------------------------------------------------------------------------------------------------
void aiE0C99455_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }

    aiE0C99455_wave4_enable(p, val);
    aiE0C99455_wave1_enable(p, val);
    aiE0C99455_wave3_enable(p, val);
}

//--------------------------------------------------------------------------------------------------
void aiE0C99455_waves_stop () {
    TriggerStop(aiE0C99455_waves_trigger);

    TriggerStop(aiE0C99455_wave4_trigger);
    TriggerStop(aiE0C99455_wave1_trigger);
    TriggerStop(aiE0C99455_wave3_trigger);
}

//--------------------------------------------------------------------------------------------------
// Configuration
//--------------------------------------------------------------------------------------------------
void aiE0C99455_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiE0C99455_defGather[p] = val;
}

//--------------------------------------------------------------------------------------------------
string aiE0C99455_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiE0C99455_customData[p];
}

//--------------------------------------------------------------------------------------------------
wave aiE0C99455_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiE0C99455_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
// Start
//--------------------------------------------------------------------------------------------------
bool aiE0C99455_initialized = false;

//--------------------------------------------------------------------------------------------------
void aiE0C99455_start (int p) {
    int init_i;

    if (p < 0 || p >= 16) {
        return;
    }
    if (!aiE0C99455_initialized) {
        aiE0C99455_wave4_init();
        aiE0C99455_wave1_init();
        aiE0C99455_wave3_init();
        aiE0C99455_waves_init();

        for (init_i = 0; init_i <= 16; init_i += 1) {
            aiE0C99455_defGather[init_i] = PointFromId(21);
        }

        aiE0C99455_initialized = true;
    }

    AICampaignStart(p);
}
