//==================================================================================================
// 
// Generated AI Script
// 
// AI Name: Dominion P04
// 
//==================================================================================================
include "TriggerLibs/natives"
include "TriggerLibs/AI"
include "TriggerLibs/Computer"

//--------------------------------------------------------------------------------------------------
// Globals
//--------------------------------------------------------------------------------------------------
point[17] aiC8B8F737_defGather;
string[17] aiC8B8F737_customData;
wave[17] aiC8B8F737_lastWave;

//--------------------------------------------------------------------------------------------------
// Attack Wave: Wave 1 - Custom Target 01
//--------------------------------------------------------------------------------------------------
bool[17] aiC8B8F737_wave3_enabled;
wave[17] aiC8B8F737_wave3_lastWave;
trigger aiC8B8F737_wave3_trigger = null;
int aiC8B8F737_wave3_runPlayer;
playergroup aiC8B8F737_wave3_runTarget;

//--------------------------------------------------------------------------------------------------
void aiC8B8F737_wave3_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiC8B8F737_wave3_enabled[init_i] = true;
        aiC8B8F737_wave3_lastWave[init_i] = null;
    }

    aiC8B8F737_wave3_trigger = TriggerCreate("aiC8B8F737_wave3_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiC8B8F737_wave3_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiC8B8F737_wave3_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiC8B8F737_wave3_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiC8B8F737_wave3_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiC8B8F737_wave3_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiC8B8F737_wave3_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiC8B8F737_wave3_runFunc (bool c, bool a) {
    int p = aiC8B8F737_wave3_runPlayer;
    playergroup target = aiC8B8F737_wave3_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiC8B8F737_wave3_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiC8B8F737_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 150; }
    if (d == 2) { ta = 150; }
    if (d == 3) { ta = 150; }
    if (d == 4) { ta = 150; }
    tg = 0;
    if (d == 1) { tg = 30; }
    if (d == 2) { tg = 30; }
    if (d == 3) { tg = 30; }
    if (d == 4) { tg = 30; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiC8B8F737_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    gatherPoint = PointFromId(212);
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(513), false);

    AIAttackWaveAddUnits(2, 6, "Marine");
    AIAttackWaveAddUnits(3, 6, "Marine");
    AIAttackWaveAddUnits(4, 8, "Marine");
    AIAttackWaveAddUnits(5, 8, "Marine");

    TriggerExecute(TriggerFind("gt_QueenRescueTimer_Func"), true, false);
    AIAttackWaveSend(p, ts, false);
    aiC8B8F737_wave3_lastWave[p] = WaveLastCreated();
    aiC8B8F737_lastWave[p] = aiC8B8F737_wave3_lastWave[p];
    Wait(ts, c_timeAI);
    TriggerExecute(TriggerFind("gt_AttackWaveCustomTarget01_Func"), true, false);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiC8B8F737_wave3_run (int p, playergroup target, bool wait) {
    aiC8B8F737_wave3_runPlayer = p;
    aiC8B8F737_wave3_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiC8B8F737_wave3_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: Wave 2 - Custom Target 02
//--------------------------------------------------------------------------------------------------
bool[17] aiC8B8F737_wave5_enabled;
wave[17] aiC8B8F737_wave5_lastWave;
trigger aiC8B8F737_wave5_trigger = null;
int aiC8B8F737_wave5_runPlayer;
playergroup aiC8B8F737_wave5_runTarget;

//--------------------------------------------------------------------------------------------------
void aiC8B8F737_wave5_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiC8B8F737_wave5_enabled[init_i] = true;
        aiC8B8F737_wave5_lastWave[init_i] = null;
    }

    aiC8B8F737_wave5_trigger = TriggerCreate("aiC8B8F737_wave5_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiC8B8F737_wave5_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiC8B8F737_wave5_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiC8B8F737_wave5_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiC8B8F737_wave5_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiC8B8F737_wave5_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiC8B8F737_wave5_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiC8B8F737_wave5_runFunc (bool c, bool a) {
    int p = aiC8B8F737_wave5_runPlayer;
    playergroup target = aiC8B8F737_wave5_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiC8B8F737_wave5_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiC8B8F737_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 90; }
    if (d == 2) { ta = 90; }
    if (d == 3) { ta = 90; }
    if (d == 4) { ta = 90; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiC8B8F737_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(513), false);

    AIAttackWaveAddUnits(2, 4, "Marine");
    AIAttackWaveAddUnits(3, 4, "Marine");
    AIAttackWaveAddUnits(4, 4, "Marine");
    AIAttackWaveAddUnits(5, 4, "Marine");

    AIAttackWaveAddUnits(2, 2, "Marauder");
    AIAttackWaveAddUnits(3, 2, "Marauder");
    AIAttackWaveAddUnits(4, 3, "Marauder");
    AIAttackWaveAddUnits(5, 4, "Marauder");

    AIAttackWaveAddUnits(4, 1, "Medic");
    AIAttackWaveAddUnits(5, 1, "Medic");

    TriggerExecute(TriggerFind("gt_AttackWaveCustomTarget02_Func"), true, false);
    AIAttackWaveSend(p, ts, false);
    aiC8B8F737_wave5_lastWave[p] = WaveLastCreated();
    aiC8B8F737_lastWave[p] = aiC8B8F737_wave5_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiC8B8F737_wave5_run (int p, playergroup target, bool wait) {
    aiC8B8F737_wave5_runPlayer = p;
    aiC8B8F737_wave5_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiC8B8F737_wave5_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: Wave 3 - Target East
//--------------------------------------------------------------------------------------------------
bool[17] aiC8B8F737_wave10_enabled;
wave[17] aiC8B8F737_wave10_lastWave;
trigger aiC8B8F737_wave10_trigger = null;
int aiC8B8F737_wave10_runPlayer;
playergroup aiC8B8F737_wave10_runTarget;

//--------------------------------------------------------------------------------------------------
void aiC8B8F737_wave10_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiC8B8F737_wave10_enabled[init_i] = true;
        aiC8B8F737_wave10_lastWave[init_i] = null;
    }

    aiC8B8F737_wave10_trigger = TriggerCreate("aiC8B8F737_wave10_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiC8B8F737_wave10_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiC8B8F737_wave10_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiC8B8F737_wave10_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiC8B8F737_wave10_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiC8B8F737_wave10_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiC8B8F737_wave10_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiC8B8F737_wave10_runFunc (bool c, bool a) {
    int p = aiC8B8F737_wave10_runPlayer;
    playergroup target = aiC8B8F737_wave10_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiC8B8F737_wave10_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiC8B8F737_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 270; }
    if (d == 2) { ta = 270; }
    if (d == 3) { ta = 270; }
    if (d == 4) { ta = 270; }
    tg = 0;
    if (d == 1) { tg = 25; }
    if (d == 2) { tg = 25; }
    if (d == 3) { tg = 25; }
    if (d == 4) { tg = 25; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiC8B8F737_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    gatherPoint = PointFromId(212);
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(513), false);

    AIAttackWaveAddUnits(2, 8, "Marine");
    AIAttackWaveAddUnits(3, 8, "Marine");
    AIAttackWaveAddUnits(4, 10, "Marine");
    AIAttackWaveAddUnits(5, 10, "Marine");

    AIAttackWaveAddUnits(2, 2, "Marauder");
    AIAttackWaveAddUnits(3, 2, "Marauder");
    AIAttackWaveAddUnits(4, 3, "Marauder");
    AIAttackWaveAddUnits(5, 3, "Marauder");

    AIAttackWaveAddUnits(4, 2, "Medic");
    AIAttackWaveAddUnits(5, 2, "Medic");

    TriggerExecute(TriggerFind("gt_AttackWaveTargetNextEast_Func"), true, false);
    AIAttackWaveSend(p, ts, false);
    aiC8B8F737_wave10_lastWave[p] = WaveLastCreated();
    aiC8B8F737_lastWave[p] = aiC8B8F737_wave10_lastWave[p];
    Wait(ts, c_timeAI);
    TriggerExecute(TriggerFind("gt_TransmissionLargeWaveIncomingQ_Func"), true, false);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiC8B8F737_wave10_run (int p, playergroup target, bool wait) {
    aiC8B8F737_wave10_runPlayer = p;
    aiC8B8F737_wave10_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiC8B8F737_wave10_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: Wave 4 - Target East
//--------------------------------------------------------------------------------------------------
bool[17] aiC8B8F737_wave2_enabled;
wave[17] aiC8B8F737_wave2_lastWave;
trigger aiC8B8F737_wave2_trigger = null;
int aiC8B8F737_wave2_runPlayer;
playergroup aiC8B8F737_wave2_runTarget;

//--------------------------------------------------------------------------------------------------
void aiC8B8F737_wave2_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiC8B8F737_wave2_enabled[init_i] = true;
        aiC8B8F737_wave2_lastWave[init_i] = null;
    }

    aiC8B8F737_wave2_trigger = TriggerCreate("aiC8B8F737_wave2_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiC8B8F737_wave2_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiC8B8F737_wave2_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiC8B8F737_wave2_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiC8B8F737_wave2_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiC8B8F737_wave2_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiC8B8F737_wave2_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiC8B8F737_wave2_runFunc (bool c, bool a) {
    int p = aiC8B8F737_wave2_runPlayer;
    playergroup target = aiC8B8F737_wave2_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiC8B8F737_wave2_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiC8B8F737_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 180; }
    if (d == 2) { ta = 180; }
    if (d == 3) { ta = 180; }
    if (d == 4) { ta = 180; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiC8B8F737_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    gatherPoint = PointFromId(212);
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(513), false);

    AIAttackWaveAddUnits(2, 6, "Marine");
    AIAttackWaveAddUnits(3, 6, "Marine");
    AIAttackWaveAddUnits(4, 6, "Marine");
    AIAttackWaveAddUnits(5, 6, "Marine");

    AIAttackWaveAddUnits(2, 2, "Goliath");
    AIAttackWaveAddUnits(3, 2, "Goliath");

    AIAttackWaveAddUnits(4, 3, "Firebat");
    AIAttackWaveAddUnits(5, 3, "Firebat");

    AIAttackWaveAddUnits(4, 2, "Medic");
    AIAttackWaveAddUnits(5, 2, "Medic");

    TriggerExecute(TriggerFind("gt_AttackWaveTargetNextEast_Func"), true, false);
    AIAttackWaveSend(p, ts, false);
    aiC8B8F737_wave2_lastWave[p] = WaveLastCreated();
    aiC8B8F737_lastWave[p] = aiC8B8F737_wave2_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiC8B8F737_wave2_run (int p, playergroup target, bool wait) {
    aiC8B8F737_wave2_runPlayer = p;
    aiC8B8F737_wave2_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiC8B8F737_wave2_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave Wrappers
//--------------------------------------------------------------------------------------------------
void aiC8B8F737_wave_enable (int w, int p, bool val) {
    if (w == 3) { aiC8B8F737_wave3_enable(p, val); }
    if (w == 5) { aiC8B8F737_wave5_enable(p, val); }
    if (w == 10) { aiC8B8F737_wave10_enable(p, val); }
    if (w == 2) { aiC8B8F737_wave2_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
bool aiC8B8F737_wave_isEnabled (int w, int p) {
    if (w == 3) { return aiC8B8F737_wave3_isEnabled(p); }
    if (w == 5) { return aiC8B8F737_wave5_isEnabled(p); }
    if (w == 10) { return aiC8B8F737_wave10_isEnabled(p); }
    if (w == 2) { return aiC8B8F737_wave2_isEnabled(p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup aiC8B8F737_wave_createdUnits (int w, int p) {
    return null;
}

//--------------------------------------------------------------------------------------------------
wave aiC8B8F737_wave_createdWave (int w, int p) {
    if (w == 3) { return aiC8B8F737_wave3_createdWave(p); }
    if (w == 5) { return aiC8B8F737_wave5_createdWave(p); }
    if (w == 10) { return aiC8B8F737_wave10_createdWave(p); }
    if (w == 2) { return aiC8B8F737_wave2_createdWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void aiC8B8F737_wave_run (int w, int p, playergroup target, bool wait) {
    if (w == 3) { aiC8B8F737_wave3_run(p, target, wait); }
    if (w == 5) { aiC8B8F737_wave5_run(p, target, wait); }
    if (w == 10) { aiC8B8F737_wave10_run(p, target, wait); }
    if (w == 2) { aiC8B8F737_wave2_run(p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
// Attack Wave Sequence
//--------------------------------------------------------------------------------------------------
trigger aiC8B8F737_waves_trigger = null;
int aiC8B8F737_waves_runPlayer;
playergroup aiC8B8F737_waves_runTarget;

//--------------------------------------------------------------------------------------------------
void aiC8B8F737_waves_init () {
    aiC8B8F737_waves_trigger = TriggerCreate("aiC8B8F737_waves_runFunc");
}

//--------------------------------------------------------------------------------------------------
bool aiC8B8F737_waves_runFunc (bool c, bool a) {
    int p = aiC8B8F737_waves_runPlayer;
    playergroup target = aiC8B8F737_waves_runTarget;

    if (p < 0 || p >= 16) {
        return false;
    }

    aiC8B8F737_wave3_run(p, target, true);
    aiC8B8F737_wave5_run(p, target, true);
    aiC8B8F737_wave10_run(p, target, true);
    aiC8B8F737_wave2_run(p, target, true);

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiC8B8F737_waves_run (int p, playergroup target) {
    aiC8B8F737_waves_runPlayer = p;
    aiC8B8F737_waves_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiC8B8F737_waves_trigger, false, false);
}

//--------------------------------------------------------------------------------------------------
void aiC8B8F737_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }

    aiC8B8F737_wave3_enable(p, val);
    aiC8B8F737_wave5_enable(p, val);
    aiC8B8F737_wave10_enable(p, val);
    aiC8B8F737_wave2_enable(p, val);
}

//--------------------------------------------------------------------------------------------------
void aiC8B8F737_waves_stop () {
    TriggerStop(aiC8B8F737_waves_trigger);

    TriggerStop(aiC8B8F737_wave3_trigger);
    TriggerStop(aiC8B8F737_wave5_trigger);
    TriggerStop(aiC8B8F737_wave10_trigger);
    TriggerStop(aiC8B8F737_wave2_trigger);
}

//--------------------------------------------------------------------------------------------------
// Configuration
//--------------------------------------------------------------------------------------------------
void aiC8B8F737_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiC8B8F737_defGather[p] = val;
}

//--------------------------------------------------------------------------------------------------
string aiC8B8F737_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiC8B8F737_customData[p];
}

//--------------------------------------------------------------------------------------------------
wave aiC8B8F737_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiC8B8F737_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
// Start
//--------------------------------------------------------------------------------------------------
bool aiC8B8F737_initialized = false;

//--------------------------------------------------------------------------------------------------
void aiC8B8F737_start (int p) {
    int init_i;

    if (p < 0 || p >= 16) {
        return;
    }
    if (!aiC8B8F737_initialized) {
        aiC8B8F737_wave3_init();
        aiC8B8F737_wave5_init();
        aiC8B8F737_wave10_init();
        aiC8B8F737_wave2_init();
        aiC8B8F737_waves_init();

        for (init_i = 0; init_i <= 16; init_i += 1) {
            aiC8B8F737_defGather[init_i] = PointFromId(212);
        }

        aiC8B8F737_initialized = true;
    }

    AICampaignStart(p);
}
