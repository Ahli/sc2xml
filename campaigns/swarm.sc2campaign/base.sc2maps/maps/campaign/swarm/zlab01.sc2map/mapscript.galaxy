//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Lab Rat
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"
include "TriggerLibs/SwarmCampaignLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libHots_InitLib();
    libSwaC_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_DOMINION = 2;
const int gv_pLAYER_02_DOMINION22 = 3;
const int gv_pLAYER_02_DOMINION2 = 4;
const int gv_pLAYER_02_DOMINION3 = 5;
const int gv_pLAYER_02_DOMINION4 = 6;
const int gv_pLAYER_02_DOMINION2222 = 8;
const fixed gv_c_S01_DelayTimeAmount = 10.0;
const fixed gv_c_S01_InitialDelayTimeAmount = 5.0;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
bool gv_gameOver;
bool gv_inCinematic;
string gv_mapMusicTrack;
unitgroup gv_doodadUnits;
unit gv_mainDoor;
unit gv_vALERIAN;
unit gv_kERRIGAN;
unit gv_eRADICATOR;
fixed gv_eradicatorHP;
int gv_eradicatorReinforcementLimit;
int gv_eradicatorPing;
fixed gv_generatorHP;
fixed gv_labTurretHP;
bool gv_stage2DebugUsed;
string gv_selectLarva_OriginalTooltip;
int gv_screenMouseClickTextTag;
int gv_screenMouseClickText;
point gv_screenMouseClickPosition;
revealer gv_startingVision;
actor[16] gv_s01_DroneActors;
int[16] gv_s01_DroneTextTags;
timer gv_s01_DelayTimer;
bool gv_s01_DelayTimerDone;
bool gv_s01_DelayTimerDoneBeforeStarted;
int gv_s01_DEBUG_INT;
actor gv_s01_FirstDroneActor;
int gv_s01_FirstDroneText;
int gv_s01_NumberOfDroneActors;
int gv_s01_TransmissionCurrent01;
int gv_s01_TransmissionCurrent02;
int gv_adjutantDroneBasic;
int gv_adjutantCancelled;
int gv_adjutantDroneBuildHatch;
int gv_adjutantHarvest01;
int gv_adjutantHarvest02;
int gv_adjutantMoreDronesToWork;
int gv_adjutantSelectDrone01;
int gv_adjutantSelectDrone02;
int gv_adjutantSelectAndMine;
int gv_adjutantSelectHatchery;
int gv_adjutantSelectLarvaMorphOverlord01;
int gv_adjutantSelectLarvaMorphOverlord02;
int gv_adjutantSelectLarvaMorphZerglings;
int gv_adjutantMorphPool01;
int gv_adjutantMorphPool02;
int gv_adjutantMorphPool03;
int gv_adjutantMorphSpine01;
int gv_adjutantMorphSpine02;
int gv_adjutantMorphZerglings;
unit gv_startingDrone;
bool gv_droneSelected;
unit gv_firstHatchery;
actor gv_hatcheryActor;
bool gv_hatcheryButtonClicked;
bool gv_hatcheryBuildingStarted;
int gv_hatcheryCancelled;
bool gv_hatcheryCanceledCheck;
bool gv_hatcheryDroneBasicButtonClicked;
actor gv_hatcheryHighlight;
bool gv_hatcherySelected;
int gv_hatcheryText;
actor gv_hatcheryPlaceHolder;
int gv_hatcheryStarted_Transmission01;
int gv_hatcheryStarted_Transmission02;
int gv_hatcheryStarted_Transmission03;
int gv_dronesSelected;
bool gv_dronesSelectedforHarvesting;
bool gv_allDronesSelectedforHarvesting;
bool gv_harvestStarted;
bool gv_harvestStartedRightClicked;
unit gv_extraDroneUnit01;
unit gv_extraDroneUnit02;
unit gv_extraDroneUnit03;
unit gv_extraDroneUnit04;
unit gv_extraDroneUnit05;
unit gv_extraDroneUnit06;
actor gv_extraDroneActor01;
actor gv_extraDroneActor02;
actor gv_extraDroneActor03;
actor gv_extraDroneActor04;
actor gv_extraDroneActor05;
actor gv_extraDroneActor06;
actor gv_mineral01;
actor gv_mineral02;
actor gv_mineral03;
actor gv_mineral04;
actor gv_mineral05;
int gv_mineralText01;
int gv_mineralText02;
int gv_mineralText03;
int gv_mineralText04;
int gv_mineralText05;
bool gv_allHarvestingStarted;
bool gv_mineralCounted01;
bool gv_mineralCounted02;
bool gv_mineralCounted03;
bool gv_mineralCounted04;
bool gv_mineralCounted05;
bool gv_droneSelected01;
bool gv_droneSelected02;
bool gv_droneSelected03;
bool gv_droneSelected04;
bool gv_droneSelected05;
bool gv_droneSelected06;
bool gv_overlordLarvaSelectPressed;
bool gv_overlordMorphUsed;
int gv_overlordMorphCount;
bool gv_overlordCompleted;
bool gv_overlordCanceled;
int gv_overlordStarted_Transmission01;
int gv_overlordStarted_Transmission02;
int gv_overlordStarted_Transmission03;
actor gv_overlordHatcheryActor;
int gv_overlordHatcheryText;
actor gv_spawningPoolActor;
bool gv_spawningPoolBuildingStarted;
bool gv_spawningPoolBuildingCompleted;
bool gv_spawningPoolButtonClicked;
bool gv_spawningPoolCancelled;
bool gv_spawningPoolDroneSelected;
bool gv_spawningPoolBasicMutationClicked;
actor gv_spawningPoolPlaceHolder;
int gv_spawningPoolTextTag;
int gv_spawningPoolMutationLine1;
int gv_spawningPoolMutationLine2;
int gv_spawningPoolMutationLine3;
bool gv_zerglingButtonClicked;
bool gv_zerglingMorphDone;
bool gv_zerglingHatcherySelected;
bool gv_zerglingLarvaSelected;
bool gv_zerglingSelectLarvaButtonPressed;
actor gv_arrow01;
bool gv_arrowShown01;
bool gv_playPlatformAlert;
timer gv_attackLesson;
revealer[7] gv_zerglingPenRevealers;
bool gv_zerglingsRescued01;
bool gv_zerglingsRescued02;
bool gv_zerglingsRescued03;
int gv_zerglingPing;
unitgroup gv_scientistsGroup;
unitgroup gv_sideScientistsGroup00;
unitgroup gv_sideScientistsGroup01;
int gv_scientistsInSafeRoom01;
actor gv_generatorRoom01Actor;
int gv_generatorRoom01Tag;
int[5] gv_rescueZerglingsPings;
unitgroup gv_scientistRunners;
bool gv_platform2Entered;
actor gv_generatorRoom04Actor;
int gv_generatorRoom04Tag;
bool gv_gasRoomDoorClosed;
fixed gv_gasDamage_Zerg;
actor gv_generatorRoom05Actor;
int gv_generatorRoom05Tag;
bool gv_zergAreInRoom06;
point[10] gv_powerTrackRoom1;
point[11] gv_powerTrackRoom3;
point[11] gv_powerTrack1Room5;
point[11] gv_powerTrack2Room5;
int gv_zerglingRescueCountPlatform2;
actor gv_arrow02;
int gv_zerglingRescueIndex;
int gv_sentryBotsDestroyed;
timer gv_speedRunTimer;
timer gv_factoriesDestroyedTimer;
int gv_largestZerglingForce;
int gv_zerglingsLost;
int gv_factoriesDestroyed;
int gv_objectiveDestroyDominionBase3;
int gv_objectiveDestroyDominionBase;
int gv_objectiveDestroyDominionBase3222;
int gv_mineralAmount;
int gv_objectiveDestroyDominionBase322;
int gv_overlordAmount;
int gv_objectiveDestroyDominionBase2;
int gv_objectiveDestroyDominionBase323;
int gv_zerglingCount;
int gv_objectiveDestroyDominionBase32;
int gv_objective_GasTurretKILLS;
int gv_objectiveDestroyDominionBase3233;
actor gv_warbotActor;
int gv_warbotTag;
int gv_objectiveDestroyDominionBase3232;
int gv_savedZerglingCount;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicTempUnits;
unitgroup gv_cinematicPausedUnits;
bool gv_cinematicCompleted;
unitgroup gv_cinematicHiddenZerg;
int gv_campaignIntroDialog;
int gv_campaignIntroLabel;
int gv_campaignIntroPanel;
int gv_campaignIntroCutscene;
bool gv_introMusicCompleted;
sound gv_introDroneSound;
unit[16] gv_midCinematicZerglings;
int gv_numberOfZerglings;
bool gv_midMusicCompleted;
sound gv_midAlertSound;
sound gv_midBotSound;
sound gv_midEradicatorSound;
sound gv_victoryExplosionSound;
sound gv_victoryZergSound;
sound gv_victoryCellSound;

void InitGlobals () {
    int init_i;

    gv_doodadUnits = UnitGroupEmpty();
    gv_mainDoor = UnitFromId(673);
    gv_vALERIAN = UnitFromId(50);
    gv_eRADICATOR = UnitFromId(113);
    gv_eradicatorPing = c_invalidPingId;
    gv_selectLarva_OriginalTooltip = "";
    gv_screenMouseClickTextTag = c_textTagNone;
    gv_screenMouseClickText = c_textTagNone;
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_s01_DroneTextTags[init_i] = c_textTagNone;
    }
    gv_s01_DelayTimer = TimerCreate();
    gv_s01_FirstDroneText = c_textTagNone;
    gv_s01_TransmissionCurrent01 = c_invalidTransmissionId;
    gv_s01_TransmissionCurrent02 = c_invalidTransmissionId;
    gv_adjutantDroneBasic = c_invalidTransmissionId;
    gv_adjutantCancelled = c_invalidTransmissionId;
    gv_adjutantDroneBuildHatch = c_invalidTransmissionId;
    gv_adjutantHarvest01 = c_invalidTransmissionId;
    gv_adjutantHarvest02 = c_invalidTransmissionId;
    gv_adjutantMoreDronesToWork = c_invalidTransmissionId;
    gv_adjutantSelectDrone01 = c_invalidTransmissionId;
    gv_adjutantSelectDrone02 = c_invalidTransmissionId;
    gv_adjutantSelectAndMine = c_invalidTransmissionId;
    gv_adjutantSelectHatchery = c_invalidTransmissionId;
    gv_adjutantSelectLarvaMorphOverlord01 = c_invalidTransmissionId;
    gv_adjutantSelectLarvaMorphOverlord02 = c_invalidTransmissionId;
    gv_adjutantSelectLarvaMorphZerglings = c_invalidTransmissionId;
    gv_adjutantMorphPool01 = c_invalidTransmissionId;
    gv_adjutantMorphPool02 = c_invalidTransmissionId;
    gv_adjutantMorphPool03 = c_invalidTransmissionId;
    gv_adjutantMorphSpine01 = c_invalidTransmissionId;
    gv_adjutantMorphSpine02 = c_invalidTransmissionId;
    gv_adjutantMorphZerglings = c_invalidTransmissionId;
    gv_hatcheryText = c_textTagNone;
    gv_hatcheryStarted_Transmission01 = c_invalidTransmissionId;
    gv_hatcheryStarted_Transmission02 = c_invalidTransmissionId;
    gv_hatcheryStarted_Transmission03 = c_invalidTransmissionId;
    gv_mineralText01 = c_textTagNone;
    gv_mineralText02 = c_textTagNone;
    gv_mineralText03 = c_textTagNone;
    gv_mineralText04 = c_textTagNone;
    gv_mineralText05 = c_textTagNone;
    gv_overlordStarted_Transmission01 = c_invalidTransmissionId;
    gv_overlordStarted_Transmission02 = c_invalidTransmissionId;
    gv_overlordStarted_Transmission03 = c_invalidTransmissionId;
    gv_overlordHatcheryText = c_textTagNone;
    gv_spawningPoolTextTag = c_textTagNone;
    gv_spawningPoolMutationLine1 = c_invalidTransmissionId;
    gv_spawningPoolMutationLine2 = c_invalidTransmissionId;
    gv_spawningPoolMutationLine3 = c_invalidTransmissionId;
    gv_attackLesson = TimerCreate();
    gv_zerglingPing = c_invalidPingId;
    gv_scientistsGroup = UnitGroupEmpty();
    gv_sideScientistsGroup00 = UnitGroupEmpty();
    gv_sideScientistsGroup01 = UnitGroupEmpty();
    gv_generatorRoom01Tag = c_textTagNone;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_rescueZerglingsPings[init_i] = c_invalidPingId;
    }
    gv_scientistRunners = UnitGroupEmpty();
    gv_generatorRoom04Tag = c_textTagNone;
    gv_generatorRoom05Tag = c_textTagNone;
    gv_speedRunTimer = TimerCreate();
    gv_factoriesDestroyedTimer = TimerCreate();
    gv_objectiveDestroyDominionBase3 = c_invalidObjectiveId;
    gv_objectiveDestroyDominionBase = c_invalidObjectiveId;
    gv_objectiveDestroyDominionBase3222 = c_invalidObjectiveId;
    gv_objectiveDestroyDominionBase322 = c_invalidObjectiveId;
    gv_objectiveDestroyDominionBase2 = c_invalidObjectiveId;
    gv_objectiveDestroyDominionBase323 = c_invalidObjectiveId;
    gv_objectiveDestroyDominionBase32 = c_invalidObjectiveId;
    gv_objectiveDestroyDominionBase3233 = c_invalidObjectiveId;
    gv_warbotTag = c_textTagNone;
    gv_objectiveDestroyDominionBase3232 = c_invalidObjectiveId;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_cinematicHiddenZerg = UnitGroupEmpty();
    gv_campaignIntroDialog = c_invalidDialogId;
    gv_campaignIntroLabel = c_invalidDialogControlId;
    gv_campaignIntroPanel = c_invalidDialogControlId;
    gv_campaignIntroCutscene = c_cutsceneNone;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_CreateInfoText (unit lp_cHOSEN_UNIT);
void gf_SaveZergling (unit lp_cHOSEN_UNIT, point lp_tARGET_POINT);
void gf_GhostImages (point lp_imagePoint, string lp_unitModel);
void gf_CreateHelperonUnit (text lp_tEXT, unit lp_cHOSEN_UNIT, int lp_type, int lp_size, fixed lp_tEXT_OFFSET);
void gf_CreateHelperatPoint (point lp_cHOSEN_POINT, text lp_tEXT, int lp_type, int lp_size, fixed lp_oFFSET);
void gf_HideObjective (int lp_objective);
void gf_ChangeButtonTooltip (string lp_button, string lp_tooltipPath);
void gf_RestoreButtonTooltip (string lp_button);
bool gf_UnitTypeIsSelected (string lp_type);
void gf_DisplayMouseClickHint (text lp_text, point lp_position);
void gf_CleanMouseClickHint ();
void gf_CreateFirstDroneHelper (bool lp_withText);
void gf_DestroyFirstDroneHelper ();
void gf_CreateOverlordHatcheryHelper ();
void gf_DestroyOverlordHatcheryHelper ();
void gf_CreateSpawningPoolDroneHelper (bool lp_withText);
void gf_DestroySpawningPoolDroneHelper ();
void gf_CreateSpawningPoolHelper ();
void gf_DestroySpawningPoolHelper ();
void gf_CreateZerglingHatcheryHelper ();
void gf_DestroyZerglingHatcheryHelper ();
void gf_SpawnEradicatorReinforcements (unit lp_spawner, int lp_limit, int lp_whichPlayer, point lp_spawnAt, point lp_attackTo, point lp_attackTo2);
void gf_PowerDownDoodadsIn (region lp_rEGION);
void gf_PowerDownDoodadsIn2 (region lp_rEGION);
void gf_KillZerglingHoldingPen (region lp_targetArea);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04MusicSound;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_DebugStage2;
trigger gt_AttachInfoTextCompleted;
trigger gt_AttachInfoTextUmojans;
trigger gt_AttachInfoTextPlayer;
trigger gt_AttachInfoTextPlayerTraining;
trigger gt_SentryBotInfoText;
trigger gt_SentryBotUnitInfo;
trigger gt_RemoveHarmless;
trigger gt_UIPulseAudio;
trigger gt_HideCompletedObjectives;
trigger gt_FlashingMouseClickHint;
trigger gt_IntroSequence;
trigger gt_DroneOpeningEventQ;
trigger gt_DroneSelected;
trigger gt_DroneSelectHelpLine01Q;
trigger gt_HatcheryTeachtoMutate;
trigger gt_HatcheryPlacement;
trigger gt_HatcheryPlacementLeftClick;
trigger gt_HatcheryPlacementLeftClickEnd;
trigger gt_HatcheryPlacementRemove;
trigger gt_ButtonClickedBasicMutation;
trigger gt_ButtonClickedMutateHatchery;
trigger gt_HatcheryBuildHelpLine01Q;
trigger gt_HatcheryBuildHelpLine02Q;
trigger gt_HatcheryCancelled;
trigger gt_HatcheryCancelledQ;
trigger gt_HatcheryMutationStartedQ;
trigger gt_HatcheryMutationCompleted;
trigger gt_HatcheryMutationUIUpdate;
trigger gt_HarvestingTeachQ;
trigger gt_HarvestingSpawnDrones;
trigger gt_HarvestingSelectDrones;
trigger gt_HarvestingMinerals;
trigger gt_HarvestingStarted;
trigger gt_HarvestingHelpLines01Q;
trigger gt_DroneUsedQ;
trigger gt_OverlordTeachQ;
trigger gt_OverlordTeachOverlord;
trigger gt_OverlordMorphStartedQ;
trigger gt_OverlordMorphCountTrack;
trigger gt_OverlordMorphUIUpdate;
trigger gt_OverlordHatcherySelected;
trigger gt_OverlordLarvaSelected;
trigger gt_OverlordSelectLarvaClicked;
trigger gt_OverlordHatcheryHelpSelectQ;
trigger gt_OverlordHelpLines01Q;
trigger gt_OverlordHelpLines02Q;
trigger gt_OverlordCompleted;
trigger gt_OverlordCancelled;
trigger gt_OverlordCancelledLineQ;
trigger gt_OverlordLimitQ;
trigger gt_SpawningPoolTeachtoMutate;
trigger gt_SpawningPoolLeftClick;
trigger gt_SpawningPoolLeftClickEnd;
trigger gt_SpawningPoolStartTransmissionQ;
trigger gt_SpawningPoolMutationUIUpdate;
trigger gt_SpawningPoolDroneSelected;
trigger gt_SpawningPoolBasicMutationClicked;
trigger gt_SpawningPoolButtonClicked;
trigger gt_SpawningPoolHelpLines;
trigger gt_SpawningPoolLine01Q;
trigger gt_SpawningPoolLine02Q;
trigger gt_SpawningPoolLine03Q;
trigger gt_SpawningPoolMutationStarted;
trigger gt_SpawningPoolMutationStartedQ;
trigger gt_SpawningPoolMutationCompletedQ;
trigger gt_SpawningPoolCancelled;
trigger gt_SpawningPoolCancelledLineQ;
trigger gt_ZerglingTeachQ;
trigger gt_ZerglingMorphStarted;
trigger gt_ZerglingMorphStartedQ;
trigger gt_ZerglingMorphUIUpdate;
trigger gt_ZerglingHatcherySelected;
trigger gt_ZerglingLarvaSelected;
trigger gt_ZerglingSelectLarvaClicked;
trigger gt_ZerglingHelpLines;
trigger gt_ZerglingHatcheryHelpSelectQ;
trigger gt_ZerglingLine01Q;
trigger gt_ZerglingLine02Q;
trigger gt_ZerglingCancelled;
trigger gt_OverlordTriestoLeave;
trigger gt_ValerianAttackQ;
trigger gt_StartGameStage02Q;
trigger gt_Platform02ShowSentryBots;
trigger gt_Platform02Entered;
trigger gt_Platform02AlertQ;
trigger gt_Platform02SentryBotsReact;
trigger gt_Room01ZergEnter;
trigger gt_Room01ZergEnterReveal;
trigger gt_Room01ContainmentBreachQ;
trigger gt_Room01RemoveScientistsSide;
trigger gt_Room01RemoveScientists;
trigger gt_ActivateBotsRoom02;
trigger gt_ZergEnterRoom02Q;
trigger gt_FactoryIsKilled;
trigger gt_Room03ZergEnteringQ;
trigger gt_Room03SentryBotAggro;
trigger gt_Room03ScientistPassedDoor;
trigger gt_Room03RemoveScientists;
trigger gt_Room04StartGasRoomQ;
trigger gt_Room04CloseDoorQ;
trigger gt_Room04KillTurretHelperAttacked;
trigger gt_Room04KillTurretHelperDies;
trigger gt_Room04OpenDoorQ;
trigger gt_Room04PrepareZerglingRescueRoom;
trigger gt_GasDamage;
trigger gt_Room04GasHurtsZerglingsHardQ;
trigger gt_Room05ZergEntering;
trigger gt_Room05ZergEnterReveal;
trigger gt_ZergEnteringFinalRoomEnter;
trigger gt_ZergEnteringRoom6EradicatorAIQ;
trigger gt_ActivateEradicatorQ;
trigger gt_EradicatorBattleBehavior;
trigger gt_EradicatorFactoryKilled;
trigger gt_NoZergLeftRoom6;
trigger gt_EradicatorKilled;
trigger gt_EradicatorTakesDamage;
trigger gt_EradicatorPing;
trigger gt_ZerglingRescuePlatform2;
trigger gt_ZerglingRescueObjectiveTransmissionQ;
trigger gt_ZerglingRescueRoom01;
trigger gt_ZerglingRescueGeneratorTakesDamageRoom01;
trigger gt_ZerglingRescueRoom04;
trigger gt_ZerglingRescueGeneratorTakesDamageRoom04;
trigger gt_ZerglingRescueRoom05;
trigger gt_ZerglingRescueGeneratorTakesDamageRoom05;
trigger gt_ZerglingRescueQ;
trigger gt_TipMissionHelpQ;
trigger gt_StartAI;
trigger gt_AIGiveMinerals;
trigger gt_AIGiveGas;
trigger gt_DefeatAllUnitsKilled;
trigger gt_VictoryWarbotDestroyedCompleted;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_AchievementKillSentryBots;
trigger gt_AchievementTimedRunNH;
trigger gt_AchievementDestroy3FactoriesH;
trigger gt_LargestZerglingForce;
trigger gt_MicroBotDeaths;
trigger gt_ZerglingDies;
trigger gt_ObjectiveSelectDroneCreate;
trigger gt_ObjectiveSelectDroneComplete;
trigger gt_ObjectiveMutateHatcheryCreateQ;
trigger gt_ObjectiveMutateHatcheryComplete;
trigger gt_ObjectiveHarvestCreate;
trigger gt_ObjectiveHarvestCompleteQ;
trigger gt_ObjectiveHarvestUpdate;
trigger gt_ObjectiveMorphOverlordCreateQ;
trigger gt_ObjectiveMorphOverlordComplete;
trigger gt_ObjectiveMutateSpawningPoolCreateQ;
trigger gt_ObjectiveMutateSpawningPoolComplete;
trigger gt_ObjectiveMorphZerglingsCreate;
trigger gt_ObjectiveMorphZerglingsUpdate;
trigger gt_ObjectiveMorphZerglingsComplete;
trigger gt_ObjectiveGasTurretsCreate;
trigger gt_ObjectiveGasTurretsUpdate;
trigger gt_ObjectiveGasTurretsComplete;
trigger gt_ObjectiveDestroyEradicatorCreate;
trigger gt_ObjectiveDestroyEradicatorComplete;
trigger gt_ObjectiveSaveZerglingsCreate;
trigger gt_ObjectiveSaveZerglingsComplete;
trigger gt_ObjectiveSaveZerglingsUpdate;
trigger gt_ObjectiveSaveZerglingsCreatePings;
trigger gt_CampaignIntroQ;
trigger gt_CampaignIntroSetup;
trigger gt_CampaignIntroCinematic;
trigger gt_CampaignIntroCinematicEnd;
trigger gt_CampaignIntroCinematicContinue;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanupSkipped;
trigger gt_IntroCleanupNotSkipped;
trigger gt_IntroMusic;
trigger gt_MidQ;
trigger gt_MidSetup;
trigger gt_MidCinematic;
trigger gt_MidCinematicEnd;
trigger gt_MidCleanup;
trigger gt_MidUnits;
trigger gt_MidMusic;
trigger gt_MidSentryBotSound;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;
trigger gt_VictoryZerglings;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_CreateInfoText (unit lp_cHOSEN_UNIT) {
    // Automatic Variable Declarations
    string autoD12EAE3B_val;

    // Implementation
    if ((libHots_gf_DifficultyValueInt2(1, 1, 0) != 1)) {
        return ;
    }

    autoD12EAE3B_val = UnitGetType(lp_cHOSEN_UNIT);
    if (autoD12EAE3B_val == "Hatchery") {
        libSwaC_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/E049AB2F"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/32D6E1FD"));
    }
    else if (autoD12EAE3B_val == "SpawningPool") {
        libSwaC_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/BD6E8965"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/0C4F06A1"));
    }
    else if (autoD12EAE3B_val == "Drone") {
        libSwaC_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/9AF9F30D"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/32569246"));
    }
    else if (autoD12EAE3B_val == "Larva") {
        libSwaC_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/90E10556"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/BE485445"));
    }
    else if (autoD12EAE3B_val == "Overlord") {
        libSwaC_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/40692F08"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/3282DFC4"));
    }
    else if (autoD12EAE3B_val == "Egg") {
        libSwaC_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/4B3162DC"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/E039B724"));
    }
    else {
    }
    UnitSetState(lp_cHOSEN_UNIT, c_unitStateTooltipable, true);
}

void gf_SaveZergling (unit lp_cHOSEN_UNIT, point lp_tARGET_POINT) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_PauseUnit(lp_cHOSEN_UNIT, false);
    libNtve_gf_MakeUnitInvulnerable(lp_cHOSEN_UNIT, false);
    libNtve_gf_RescueUnit(lp_cHOSEN_UNIT, gv_pLAYER_01_USER, true);
    UnitIssueOrder(lp_cHOSEN_UNIT, OrderTargetingPoint(AbilityCommand("attack", 0), lp_tARGET_POINT), c_orderQueueReplace);
    UnitSetInfoTip(lp_cHOSEN_UNIT, UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)));
}

void gf_GhostImages (point lp_imagePoint, string lp_unitModel) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateModelAtPoint(lp_unitModel, lp_imagePoint);
    ActorSend(libNtve_gf_ActorLastCreated(), "SetOpacity 0.450000");
}

void gf_CreateHelperonUnit (text lp_tEXT, unit lp_cHOSEN_UNIT, int lp_type, int lp_size, fixed lp_tEXT_OFFSET) {
    // Automatic Variable Declarations
    // Implementation
    libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(lp_type, lp_size, lp_tEXT, lp_cHOSEN_UNIT, "Ref_Origin");
    TextTagAttachToUnit(TextTagLastCreated(), lp_cHOSEN_UNIT, lp_tEXT_OFFSET);
}

void gf_CreateHelperatPoint (point lp_cHOSEN_POINT, text lp_tEXT, int lp_type, int lp_size, fixed lp_oFFSET) {
    // Automatic Variable Declarations
    // Implementation
    libSwaC_gf_CreateReticleEffectAndTextTagAtPoint(lp_type, lp_size, lp_tEXT, lp_cHOSEN_POINT);
    TextTagSetPosition(TextTagLastCreated(), lp_cHOSEN_POINT, lp_oFFSET);
}

void gf_HideObjective (int lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    if ((ObjectiveGetState(lp_objective) == c_objectiveStateCompleted)) {
        ObjectiveShow(lp_objective, PlayerGroupAll(), false);
    }

}

void gf_ChangeButtonTooltip (string lp_button, string lp_tooltipPath) {
    // Automatic Variable Declarations
    // Implementation
    CatalogFieldValueSet(c_gameCatalogButton, lp_button, "Tooltip", gv_pLAYER_01_USER, lp_tooltipPath);
}

void gf_RestoreButtonTooltip (string lp_button) {
    // Automatic Variable Declarations
    // Implementation
    CatalogFieldValueSet(c_gameCatalogButton, lp_button, "Tooltip", gv_pLAYER_01_USER, gv_selectLarva_OriginalTooltip);
}

bool gf_UnitTypeIsSelected (string lp_type) {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup auto158E3549_g;
    int auto158E3549_u;

    // Variable Initialization

    // Implementation
    auto158E3549_g = UnitGroupSelected(1);
    auto158E3549_u = UnitGroupCount(auto158E3549_g, c_unitCountAll);
    for (;; auto158E3549_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(auto158E3549_g, auto158E3549_u);
        if (lv_indexUnit == null) { break; }
        if ((UnitGetType(lv_indexUnit) == lp_type)) {
            return true;
        }

    }
    return false;
}

void gf_DisplayMouseClickHint (text lp_text, point lp_position) {
    // Automatic Variable Declarations
    // Implementation
    gf_CleanMouseClickHint();
    TextExpressionSetToken("Param/Expression/9D0B68F5", "A", lp_text);
    TextTagCreate(TextExpressionAssemble("Param/Expression/9D0B68F5"), 24, PointWithOffset(lp_position, 0.0, -0.6), 0.0, true, true, PlayerGroupSingle(gv_pLAYER_01_USER));
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    gv_screenMouseClickTextTag = TextTagLastCreated();
    TriggerExecute(gt_FlashingMouseClickHint, true, false);
}

void gf_CleanMouseClickHint () {
    // Automatic Variable Declarations
    // Implementation
    TriggerStop(gt_FlashingMouseClickHint);
    if ((gv_screenMouseClickTextTag == c_textTagNone)) {
        return ;
    }

    TextTagDestroy(gv_screenMouseClickTextTag);
    gv_screenMouseClickTextTag = c_textTagNone;
}

void gf_CreateFirstDroneHelper (bool lp_withText) {
    // Variable Declarations
    text lv_hint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libHots_gf_DifficultyValueSwarmBoolean(true, true, false) == false)) {
        return ;
    }

    if ((gv_s01_FirstDroneActor != null)) {
        return ;
    }

    if ((lp_withText == true)) {
        lv_hint = StringExternal("Param/Value/09F5159F");
    }

    gf_CreateHelperonUnit(lv_hint, gv_startingDrone, libSwaC_ge_CampaginReticleType_TerranMainObjective, libSwaC_ge_CampaginReticleSize_Small, 0.0);
    gv_s01_FirstDroneActor = libNtve_gf_ActorLastCreated();
    if ((lp_withText == true)) {
        gv_s01_FirstDroneText = TextTagLastCreated();
    }

}

void gf_DestroyFirstDroneHelper () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_s01_FirstDroneActor != null)) {
        libNtve_gf_KillModel(gv_s01_FirstDroneActor);
        gv_s01_FirstDroneActor = null;
    }

    if ((gv_s01_FirstDroneText != c_textTagNone)) {
        TextTagDestroy(gv_s01_FirstDroneText);
        gv_s01_FirstDroneText = c_textTagNone;
    }

}

void gf_CreateOverlordHatcheryHelper () {
    // Automatic Variable Declarations
    // Implementation
    if ((libHots_gf_DifficultyValueSwarmBoolean(true, true, false) == false)) {
        return ;
    }

    if ((gv_overlordHatcheryActor != null)) {
        return ;
    }

    gf_CreateHelperonUnit(StringExternal("Param/Value/7063BC5E"), gv_firstHatchery, libSwaC_ge_CampaginReticleType_TerranMainObjective, libSwaC_ge_CampaginReticleSize_Large, 0.0);
    gv_overlordHatcheryActor = libNtve_gf_ActorLastCreated();
    gv_overlordHatcheryText = TextTagLastCreated();
}

void gf_DestroyOverlordHatcheryHelper () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_overlordHatcheryActor != null)) {
        libNtve_gf_KillModel(gv_overlordHatcheryActor);
        gv_overlordHatcheryActor = null;
    }

    if ((gv_overlordHatcheryText != c_textTagNone)) {
        TextTagDestroy(gv_overlordHatcheryText);
        gv_overlordHatcheryText = c_textTagNone;
    }

}

void gf_CreateSpawningPoolDroneHelper (bool lp_withText) {
    // Variable Declarations
    unit lv_drone;
    int lv_index;
    text lv_hint;

    // Automatic Variable Declarations
    int auto57108BE3_ae;
    const int auto57108BE3_ai = 1;
    unitgroup auto0AE297F2_g;
    int auto0AE297F2_u;
    unit auto0AE297F2_var;

    // Variable Initialization

    // Implementation
    if ((libHots_gf_DifficultyValueSwarmBoolean(true, true, false) == false)) {
        return ;
    }

    auto57108BE3_ae = gv_s01_NumberOfDroneActors;
    lv_index = 1;
    for ( ; ( (auto57108BE3_ai >= 0 && lv_index <= auto57108BE3_ae) || (auto57108BE3_ai < 0 && lv_index >= auto57108BE3_ae) ) ; lv_index += auto57108BE3_ai ) {
        if ((gv_s01_DroneActors[lv_index] != null)) {
            return ;
        }

    }
    gv_s01_NumberOfDroneActors = 0;
    if ((lp_withText == false)) {
        auto0AE297F2_g = UnitGroup("Drone", gv_pLAYER_01_USER, RegionFromId(47), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto0AE297F2_u = UnitGroupCount(auto0AE297F2_g, c_unitCountAll);
        for (;; auto0AE297F2_u -= 1) {
            auto0AE297F2_var = UnitGroupUnitFromEnd(auto0AE297F2_g, auto0AE297F2_u);
            if (auto0AE297F2_var == null) { break; }
            gv_s01_NumberOfDroneActors += 1;
            gf_CreateHelperonUnit(null, auto0AE297F2_var, libSwaC_ge_CampaginReticleType_TerranMainObjective, libSwaC_ge_CampaginReticleSize_Small, 0.0);
            gv_s01_DroneActors[gv_s01_NumberOfDroneActors] = libNtve_gf_ActorLastCreated();
            if ((gv_s01_NumberOfDroneActors >= 10)) {
                break;
            }

        }
    }
    else {
        lv_hint = StringExternal("Param/Value/917CD5B6");
        gv_s01_NumberOfDroneActors += 1;
        lv_drone = UnitGroupClosestToPoint(UnitGroup("Drone", gv_pLAYER_01_USER, RegionFromId(47), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), PointFromId(164));
        gf_CreateHelperonUnit(lv_hint, lv_drone, libSwaC_ge_CampaginReticleType_TerranMainObjective, libSwaC_ge_CampaginReticleSize_Small, 0.0);
        gv_s01_DroneActors[gv_s01_NumberOfDroneActors] = libNtve_gf_ActorLastCreated();
        gv_s01_DroneTextTags[gv_s01_NumberOfDroneActors] = TextTagLastCreated();
    }
}

void gf_DestroySpawningPoolDroneHelper () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto655F7F72_ae;
    const int auto655F7F72_ai = 1;

    // Variable Initialization

    // Implementation
    auto655F7F72_ae = gv_s01_NumberOfDroneActors;
    lv_index = 1;
    for ( ; ( (auto655F7F72_ai >= 0 && lv_index <= auto655F7F72_ae) || (auto655F7F72_ai < 0 && lv_index >= auto655F7F72_ae) ) ; lv_index += auto655F7F72_ai ) {
        if ((gv_s01_DroneActors[lv_index] != null)) {
            libNtve_gf_KillModel(gv_s01_DroneActors[lv_index]);
            gv_s01_DroneActors[lv_index] = null;
        }

        if ((gv_s01_DroneTextTags[lv_index] != c_textTagNone)) {
            TextTagDestroy(gv_s01_DroneTextTags[lv_index]);
            gv_s01_DroneTextTags[lv_index] = c_textTagNone;
        }

    }
    gv_s01_NumberOfDroneActors = 0;
}

void gf_CreateSpawningPoolHelper () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_spawningPoolActor != null)) {
        return ;
    }

    gf_CreateHelperatPoint(PointFromId(164), StringExternal("Param/Value/FD5AC7C2"), libSwaC_ge_CampaginReticleType_TerranMainObjective, libSwaC_ge_CampaginReticleSize_Medium, 0.0);
    gv_spawningPoolActor = libNtve_gf_ActorLastCreated();
    gv_spawningPoolTextTag = TextTagLastCreated();
}

void gf_DestroySpawningPoolHelper () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gv_spawningPoolActor != null)) {
        libNtve_gf_KillModel(gv_spawningPoolActor);
        gv_spawningPoolActor = null;
    }

    if ((gv_spawningPoolTextTag != c_textTagNone)) {
        TextTagDestroy(gv_spawningPoolTextTag);
        gv_spawningPoolTextTag = c_textTagNone;
    }

}

void gf_CreateZerglingHatcheryHelper () {
    // Automatic Variable Declarations
    // Implementation
    if ((libHots_gf_DifficultyValueSwarmBoolean(true, true, false) == false)) {
        return ;
    }

    if ((gv_overlordHatcheryActor != null)) {
        return ;
    }

    gf_CreateHelperonUnit(StringExternal("Param/Value/AC4C3D7C"), gv_firstHatchery, libSwaC_ge_CampaginReticleType_TerranMainObjective, libSwaC_ge_CampaginReticleSize_Large, 0.0);
    gv_overlordHatcheryActor = libNtve_gf_ActorLastCreated();
    gv_overlordHatcheryText = TextTagLastCreated();
}

void gf_DestroyZerglingHatcheryHelper () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_overlordHatcheryActor != null)) {
        libNtve_gf_KillModel(gv_overlordHatcheryActor);
        gv_overlordHatcheryActor = null;
    }

    if ((gv_overlordHatcheryText != c_textTagNone)) {
        TextTagDestroy(gv_overlordHatcheryText);
        gv_overlordHatcheryText = c_textTagNone;
    }

}

trigger auto_gf_SpawnEradicatorReinforcements_Trigger = null;
unit auto_gf_SpawnEradicatorReinforcements_lp_spawner;
int auto_gf_SpawnEradicatorReinforcements_lp_limit;
int auto_gf_SpawnEradicatorReinforcements_lp_whichPlayer;
point auto_gf_SpawnEradicatorReinforcements_lp_spawnAt;
point auto_gf_SpawnEradicatorReinforcements_lp_attackTo;
point auto_gf_SpawnEradicatorReinforcements_lp_attackTo2;

void gf_SpawnEradicatorReinforcements (unit lp_spawner, int lp_limit, int lp_whichPlayer, point lp_spawnAt, point lp_attackTo, point lp_attackTo2) {
    auto_gf_SpawnEradicatorReinforcements_lp_spawner = lp_spawner;
    auto_gf_SpawnEradicatorReinforcements_lp_limit = lp_limit;
    auto_gf_SpawnEradicatorReinforcements_lp_whichPlayer = lp_whichPlayer;
    auto_gf_SpawnEradicatorReinforcements_lp_spawnAt = lp_spawnAt;
    auto_gf_SpawnEradicatorReinforcements_lp_attackTo = lp_attackTo;
    auto_gf_SpawnEradicatorReinforcements_lp_attackTo2 = lp_attackTo2;

    if (auto_gf_SpawnEradicatorReinforcements_Trigger == null) {
        auto_gf_SpawnEradicatorReinforcements_Trigger = TriggerCreate("auto_gf_SpawnEradicatorReinforcements_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpawnEradicatorReinforcements_Trigger, false, false);
}

bool auto_gf_SpawnEradicatorReinforcements_TriggerFunc (bool testConds, bool runActions) {
    unit lp_spawner = auto_gf_SpawnEradicatorReinforcements_lp_spawner;
    int lp_limit = auto_gf_SpawnEradicatorReinforcements_lp_limit;
    int lp_whichPlayer = auto_gf_SpawnEradicatorReinforcements_lp_whichPlayer;
    point lp_spawnAt = auto_gf_SpawnEradicatorReinforcements_lp_spawnAt;
    point lp_attackTo = auto_gf_SpawnEradicatorReinforcements_lp_attackTo;
    point lp_attackTo2 = auto_gf_SpawnEradicatorReinforcements_lp_attackTo2;

    // Automatic Variable Declarations
    // Implementation
    if ((UnitIsAlive(lp_spawner) == true) && (gv_zergAreInRoom06 == true) && (UnitGroupCount(UnitGroup("UmojanLabMicrobot", gv_pLAYER_02_DOMINION3, RegionFromId(15), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < lp_limit) && (UnitIsAlive(gv_eRADICATOR) == true)) {
        libNtve_gf_CreateUnitsAtPoint2(1, "UmojanLabMicrobot", 0, lp_whichPlayer, lp_spawnAt);
        libSwaC_gf_SetUnitInfoTextCampaign(UnitLastCreated(), null, UnitTypeGetName(UnitGetType(UnitLastCreated())), null);
        UnitBehaviorAdd(UnitLastCreated(), "ScanRangeBonus", UnitLastCreated(), 1);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), lp_attackTo), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), lp_attackTo2), c_orderQueueAddToEnd);
    }

    return true;
}

trigger auto_gf_PowerDownDoodadsIn_Trigger = null;
region auto_gf_PowerDownDoodadsIn_lp_rEGION;

void gf_PowerDownDoodadsIn (region lp_rEGION) {
    auto_gf_PowerDownDoodadsIn_lp_rEGION = lp_rEGION;

    if (auto_gf_PowerDownDoodadsIn_Trigger == null) {
        auto_gf_PowerDownDoodadsIn_Trigger = TriggerCreate("auto_gf_PowerDownDoodadsIn_TriggerFunc");
    }

    TriggerExecute(auto_gf_PowerDownDoodadsIn_Trigger, false, false);
}

bool auto_gf_PowerDownDoodadsIn_TriggerFunc (bool testConds, bool runActions) {
    region lp_rEGION = auto_gf_PowerDownDoodadsIn_lp_rEGION;

    // Variable Declarations
    actor lv_actorRegion;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gf_PowerDownDoodadsIn2(lp_rEGION);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(lp_rEGION, "UmojanLabWallCap", c_animNameDefault, "Dead", c_animFlagPlayForever, c_animTimeDefault);
    ActorRegionCreate(null, "TriggerRegion", lp_rEGION);
    lv_actorRegion = libNtve_gf_ActorLastCreated();
    ActorRegionSend(lv_actorRegion, c_actorIntersectAgainstRadiusContact, "ModelSwap UmojanLabWallConsolesDeath", "Doodad", ("ScopeContains " + ("UmojanLabWallConsoles")));
    libNtve_gf_PlayAnimationOnDoodadsInRegion(lp_rEGION, "UmojanLabWallConsoles", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(2.0, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(lp_rEGION, "UmojanLabWallCap", c_animNameDefault, "Dead", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(lp_rEGION, "UmojanLabWallConsoles", c_animNameDefault, "Dead", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

trigger auto_gf_PowerDownDoodadsIn2_Trigger = null;
region auto_gf_PowerDownDoodadsIn2_lp_rEGION;

void gf_PowerDownDoodadsIn2 (region lp_rEGION) {
    auto_gf_PowerDownDoodadsIn2_lp_rEGION = lp_rEGION;

    if (auto_gf_PowerDownDoodadsIn2_Trigger == null) {
        auto_gf_PowerDownDoodadsIn2_Trigger = TriggerCreate("auto_gf_PowerDownDoodadsIn2_TriggerFunc");
    }

    TriggerExecute(auto_gf_PowerDownDoodadsIn2_Trigger, false, false);
}

bool auto_gf_PowerDownDoodadsIn2_TriggerFunc (bool testConds, bool runActions) {
    region lp_rEGION = auto_gf_PowerDownDoodadsIn2_lp_rEGION;

    // Variable Declarations
    unitgroup lv_group;
    int lv_index;

    // Automatic Variable Declarations
    unitgroup autoDFA864D2_g;
    int autoDFA864D2_u;
    unit autoDFA864D2_var;

    // Variable Initialization
    lv_group = UnitGroupEmpty();

    // Implementation
    UnitGroupAddUnitGroup(lv_group, libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("UmojanLabMonitorFloorDestructible1", "UmojanLabMonitorFloorDestructible2", "UmojanLabMonitorFloorDestructible3", gv_pLAYER_02_DOMINION22, -1, lp_rEGION, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_group, libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("UmojanLabStasisTubeDestructible1", "UmojanLabStasisTubeDestructible2", "UmojanLabHoloProjectorUnit", gv_pLAYER_02_DOMINION22, -1, lp_rEGION, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_group, libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("DestructibleUmojanLabFloodLights", "DestructibleUmojanLabTestTube", "UmojanLabDissectionArmDestructible", gv_pLAYER_02_DOMINION22, -1, lp_rEGION, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    autoDFA864D2_g = lv_group;
    autoDFA864D2_u = UnitGroupCount(autoDFA864D2_g, c_unitCountAll);
    for (;; autoDFA864D2_u -= 1) {
        autoDFA864D2_var = UnitGroupUnitFromEnd(autoDFA864D2_g, autoDFA864D2_u);
        if (autoDFA864D2_var == null) { break; }
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Terran, UnitGetPosition(autoDFA864D2_var));
        UnitKill(autoDFA864D2_var);
        lv_index += 1;
        if ((lv_index == 3)) {
            lv_index = 0;
            Wait(0.8, c_timeGame);
        }
        else {
            Wait(0.4, c_timeGame);
        }
    }
    return true;
}

trigger auto_gf_KillZerglingHoldingPen_Trigger = null;
region auto_gf_KillZerglingHoldingPen_lp_targetArea;

void gf_KillZerglingHoldingPen (region lp_targetArea) {
    auto_gf_KillZerglingHoldingPen_lp_targetArea = lp_targetArea;

    if (auto_gf_KillZerglingHoldingPen_Trigger == null) {
        auto_gf_KillZerglingHoldingPen_Trigger = TriggerCreate("auto_gf_KillZerglingHoldingPen_TriggerFunc");
    }

    TriggerExecute(auto_gf_KillZerglingHoldingPen_Trigger, false, false);
}

bool auto_gf_KillZerglingHoldingPen_TriggerFunc (bool testConds, bool runActions) {
    region lp_targetArea = auto_gf_KillZerglingHoldingPen_lp_targetArea;

    // Automatic Variable Declarations
    // Implementation
    SoundPlayAtPoint(SoundLink("Event_Lab01_ZerglingRelease", -1), PlayerGroupAll(), RegionGetCenter(lp_targetArea), 0.0, 100.0, 0.0);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(lp_targetArea, "UmojanLabZergCage", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(2.5, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(lp_targetArea, "UmojanLabZergCage", c_animNameDefault, "Dead", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_ULoadCampaignData("ZLab1");
    TriggerExecute(gt_Init01Technology, true, true);
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03Units, true, true);
    TriggerExecute(gt_Init04MusicSound, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulties, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    libSwaC_gf_PurchaseStorymodeTech();
    GameSetMissionTimePaused(true);
    TriggerExecute(gt_CampaignIntroQ, true, false);
    TriggerExecute(gt_IntroQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    libSwaC_gf_EnableCampaignTechUnit(false, "SpineCrawler", gv_pLAYER_01_USER);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("ZergBuild", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("ZergBuild", 4), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("ZergBuild", 2), false);
    TechTreeRestrictionsEnable(gv_pLAYER_02_DOMINION2, true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("LarvaTrain", 2), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("LarvaTrain", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("evolutionchamberresearch", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("evolutionchamberresearch", 3), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_visionGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_visionGroup = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION22, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION2, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION3, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION4, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION2222, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION, gv_pLAYER_02_DOMINION22, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION, gv_pLAYER_02_DOMINION2, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION, gv_pLAYER_02_DOMINION3, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION, gv_pLAYER_02_DOMINION4, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION, gv_pLAYER_02_DOMINION2222, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION22, gv_pLAYER_02_DOMINION2, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION22, gv_pLAYER_02_DOMINION3, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION22, gv_pLAYER_02_DOMINION4, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION22, gv_pLAYER_02_DOMINION2222, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION2, gv_pLAYER_02_DOMINION3, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION2, gv_pLAYER_02_DOMINION4, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION2, gv_pLAYER_02_DOMINION2222, libNtve_ge_AllianceSetting_Neutral);
    PlayerSetAlliance(gv_pLAYER_02_DOMINION2, c_allianceIdControl, gv_pLAYER_01_USER, true);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION3, gv_pLAYER_02_DOMINION4, libNtve_ge_AllianceSetting_Neutral);
    PlayerGroupAdd(lv_visionGroup, gv_pLAYER_02_DOMINION);
    PlayerGroupAdd(lv_visionGroup, gv_pLAYER_02_DOMINION22);
    PlayerGroupAdd(lv_visionGroup, gv_pLAYER_02_DOMINION2);
    PlayerGroupAdd(lv_visionGroup, gv_pLAYER_02_DOMINION3);
    PlayerGroupAdd(lv_visionGroup, gv_pLAYER_02_DOMINION4);
    PlayerGroupAdd(lv_visionGroup, gv_pLAYER_02_DOMINION2222);
    libSwaC_gf_ShareVisionAmongPlayers(lv_visionGroup);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 300);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 0);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION, c_playerPropMinerals, c_playerPropOperSetTo, 100);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION, c_playerPropMinerals, c_playerPropOperSetTo, 100);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION3, c_playerPropMinerals, c_playerPropOperSetTo, 100);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION3, c_playerPropMinerals, c_playerPropOperSetTo, 100);
    UISetResourceVisible(PlayerGroupAll(), c_resourceTypeVespene, false);
    UISetResourceVisible(PlayerGroupAll(), c_resourceTypeCustom, false);
    UISetResourceVisible(PlayerGroupAll(), c_resourceTypeTerrazine, false);
    PlayerSetState(gv_pLAYER_02_DOMINION, c_playerStateFidgetingEnabled, false);
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ConsoleUIContainer/IdleButton");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_idlepeon_normalpressed_zerg.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\ui_idlepeon_normaloverpressedover_zerg.dds", PlayerGroupAll());
    DialogControlHookupStandard(c_triggerControlTypeImage, "UIContainer/ConsoleUIContainer/IdleButton/GlowImage");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_idleworker_zerg.dds", PlayerGroupAll());
    PlayerSetState(gv_pLAYER_02_DOMINION22, c_playerStateShowWorldTip, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto3B71EFF5_g;
    int auto3B71EFF5_u;
    unit auto3B71EFF5_var;
    unitgroup auto3C76BEA1_g;
    int auto3C76BEA1_u;
    unit auto3C76BEA1_var;
    unitgroup autoA4132EF1_g;
    int autoA4132EF1_u;
    unit autoA4132EF1_var;
    unitgroup auto7B1A1B3F_g;
    int auto7B1A1B3F_u;
    unit auto7B1A1B3F_var;
    unitgroup auto6B1E44B8_g;
    int auto6B1E44B8_u;
    unit auto6B1E44B8_var;
    unitgroup auto85EBB8A0_g;
    int auto85EBB8A0_u;
    unit auto85EBB8A0_var;
    unitgroup auto069915FE_g;
    int auto069915FE_u;
    unit auto069915FE_var;
    unitgroup auto5E2B21E4_g;
    int auto5E2B21E4_u;
    unit auto5E2B21E4_var;
    unitgroup auto25B472D7_g;
    int auto25B472D7_u;
    unit auto25B472D7_var;
    unitgroup auto35FC8E6B_g;
    int auto35FC8E6B_u;
    unit auto35FC8E6B_var;
    unitgroup auto540EC199_g;
    int auto540EC199_u;
    unit auto540EC199_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto3B71EFF5_g = UnitGroup("UmojanLabMicrobot", gv_pLAYER_02_DOMINION, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3B71EFF5_u = UnitGroupCount(auto3B71EFF5_g, c_unitCountAll);
    for (;; auto3B71EFF5_u -= 1) {
        auto3B71EFF5_var = UnitGroupUnitFromEnd(auto3B71EFF5_g, auto3B71EFF5_u);
        if (auto3B71EFF5_var == null) { break; }
        UnitBehaviorAdd(auto3B71EFF5_var, "Harmless", auto3B71EFF5_var, 1);
        AISetUnitScriptControlled(auto3B71EFF5_var, true);
    }
    auto3C76BEA1_g = UnitGroup("UmojanLabMicrobot", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3C76BEA1_u = UnitGroupCount(auto3C76BEA1_g, c_unitCountAll);
    for (;; auto3C76BEA1_u -= 1) {
        auto3C76BEA1_var = UnitGroupUnitFromEnd(auto3C76BEA1_g, auto3C76BEA1_u);
        if (auto3C76BEA1_var == null) { break; }
        libSwaC_gf_SetUnitInfoTextCampaign(auto3C76BEA1_var, null, UnitTypeGetName(UnitGetType(auto3C76BEA1_var)), null);
    }
    libSwaC_gf_SetUnitInfoTextCampaign(gv_eRADICATOR, null, UnitTypeGetName(UnitGetType(gv_eRADICATOR)), null);
    autoA4132EF1_g = UnitGroup("LabTurret", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA4132EF1_u = UnitGroupCount(autoA4132EF1_g, c_unitCountAll);
    for (;; autoA4132EF1_u -= 1) {
        autoA4132EF1_var = UnitGroupUnitFromEnd(autoA4132EF1_g, autoA4132EF1_u);
        if (autoA4132EF1_var == null) { break; }
        libSwaC_gf_SetUnitInfoTextCampaign(autoA4132EF1_var, null, UnitTypeGetName(UnitGetType(autoA4132EF1_var)), null);
    }
    auto7B1A1B3F_g = UnitGroup("Scientist", gv_pLAYER_02_DOMINION4, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7B1A1B3F_u = UnitGroupCount(auto7B1A1B3F_g, c_unitCountAll);
    for (;; auto7B1A1B3F_u -= 1) {
        auto7B1A1B3F_var = UnitGroupUnitFromEnd(auto7B1A1B3F_g, auto7B1A1B3F_u);
        if (auto7B1A1B3F_var == null) { break; }
        UnitBehaviorAdd(auto7B1A1B3F_var, "Run", auto7B1A1B3F_var, 1);
        UnitBehaviorAdd(auto7B1A1B3F_var, "Harmless", auto7B1A1B3F_var, 1);
        libSwaC_gf_SetUnitInfoTextCampaign(auto7B1A1B3F_var, null, StringExternal("Param/Value/C3D7F134"), null);
    }
    gv_scientistsGroup = UnitGroup("Scientist", gv_pLAYER_02_DOMINION4, RegionFromId(60), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupAddUnitGroup(gv_scientistsGroup, UnitGroup("Scientist", gv_pLAYER_02_DOMINION4, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    auto6B1E44B8_g = UnitGroup(null, gv_pLAYER_02_DOMINION22, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6B1E44B8_u = UnitGroupCount(auto6B1E44B8_g, c_unitCountAll);
    for (;; auto6B1E44B8_u -= 1) {
        auto6B1E44B8_var = UnitGroupUnitFromEnd(auto6B1E44B8_g, auto6B1E44B8_u);
        if (auto6B1E44B8_var == null) { break; }
        UnitSetState(auto6B1E44B8_var, c_unitStateTooltipable, false);
    }
    auto85EBB8A0_g = UnitGroup("Zergling", gv_pLAYER_02_DOMINION2, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto85EBB8A0_u = UnitGroupCount(auto85EBB8A0_g, c_unitCountAll);
    for (;; auto85EBB8A0_u -= 1) {
        auto85EBB8A0_var = UnitGroupUnitFromEnd(auto85EBB8A0_g, auto85EBB8A0_u);
        if (auto85EBB8A0_var == null) { break; }
        libNtve_gf_PauseUnit(auto85EBB8A0_var, true);
        libNtve_gf_MakeUnitInvulnerable(auto85EBB8A0_var, true);
    }
    auto069915FE_g = UnitGroup("UmojanLabZergCratesUnit", gv_pLAYER_02_DOMINION22, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto069915FE_u = UnitGroupCount(auto069915FE_g, c_unitCountAll);
    for (;; auto069915FE_u -= 1) {
        auto069915FE_var = UnitGroupUnitFromEnd(auto069915FE_g, auto069915FE_u);
        if (auto069915FE_var == null) { break; }
        libNtve_gf_ChangeUnitDamage(auto069915FE_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitSetPropertyFixed(auto069915FE_var, c_unitPropLifeRegen, 5.0);
        UnitSetState(auto069915FE_var, c_unitStateTargetable, false);
        UnitSetState(auto069915FE_var, c_unitStateSelectable, false);
        UnitSetState(auto069915FE_var, c_unitStateTooltipable, false);
    }
    auto5E2B21E4_g = UnitGroup(null, gv_pLAYER_02_DOMINION2222, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5E2B21E4_u = UnitGroupCount(auto5E2B21E4_g, c_unitCountAll);
    for (;; auto5E2B21E4_u -= 1) {
        auto5E2B21E4_var = UnitGroupUnitFromEnd(auto5E2B21E4_g, auto5E2B21E4_u);
        if (auto5E2B21E4_var == null) { break; }
        UnitGroupAdd(gv_doodadUnits, auto5E2B21E4_var);
        UnitBehaviorAdd(auto5E2B21E4_var, "Harmless", auto5E2B21E4_var, 1);
        libNtve_gf_PauseUnit(auto5E2B21E4_var, true);
        libNtve_gf_MakeUnitInvulnerable(auto5E2B21E4_var, true);
        UnitSetState(auto5E2B21E4_var, c_unitStateSelectable, false);
        UnitSetState(auto5E2B21E4_var, c_unitStateTargetable, false);
    }
    UnitBehaviorAdd(UnitFromId(50), "Unturnable", UnitFromId(50), 1);
    UnitBehaviorAdd(UnitFromId(95), "Unturnable", UnitFromId(95), 1);
    UnitBehaviorAdd(UnitFromId(658), "Unturnable", UnitFromId(658), 1);
    UnitSetState(gv_eRADICATOR, c_unitStateFidget, false);
    UnitSetTeamColorIndex(gv_vALERIAN, 1);
    UnitSetInfoText(UnitFromId(50), StringToText(""), StringExternal("Param/Value/2C8D102C"), StringToText(""));
    UnitSetState(UnitFromId(50), c_unitStateTooltipable, true);
    auto25B472D7_g = UnitGroup("SentryGun", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto25B472D7_u = UnitGroupCount(auto25B472D7_g, c_unitCountAll);
    for (;; auto25B472D7_u -= 1) {
        auto25B472D7_var = UnitGroupUnitFromEnd(auto25B472D7_g, auto25B472D7_u);
        if (auto25B472D7_var == null) { break; }
        libSwaC_gf_SetUnitInfoTextCampaign(auto25B472D7_var, StringToText(""), StringExternal("Param/Value/4C63FDC6"), null);
    }
    auto35FC8E6B_g = UnitGroup("SentryGunUnderground", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto35FC8E6B_u = UnitGroupCount(auto35FC8E6B_g, c_unitCountAll);
    for (;; auto35FC8E6B_u -= 1) {
        auto35FC8E6B_var = UnitGroupUnitFromEnd(auto35FC8E6B_g, auto35FC8E6B_u);
        if (auto35FC8E6B_var == null) { break; }
        libSwaC_gf_SetUnitInfoTextCampaign(auto35FC8E6B_var, StringToText(""), StringExternal("Param/Value/2EE22EF1"), null);
    }
    auto540EC199_g = UnitGroup("UmojanLabGenerator", gv_pLAYER_02_DOMINION22, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto540EC199_u = UnitGroupCount(auto540EC199_g, c_unitCountAll);
    for (;; auto540EC199_u -= 1) {
        auto540EC199_var = UnitGroupUnitFromEnd(auto540EC199_g, auto540EC199_u);
        if (auto540EC199_var == null) { break; }
        libSwaC_gf_SetUnitInfoTextCampaign(auto540EC199_var, StringExternal("Param/Value/182F951F"), StringExternal("Param/Value/7C147162"), null);
        UnitBehaviorAdd(auto540EC199_var, "Harmless", auto540EC199_var, 1);
    }
    gv_selectLarva_OriginalTooltip = CatalogFieldValueGet(c_gameCatalogButton, "Larva", "Tooltip", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init04MusicSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mapMusicTrack = "ZLab01MusicAlt";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    ConversationDataPreloadLines("zBriefing_Lab01");
    ConversationDataPreloadLines("zMission_Lab01");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04MusicSound_Init () {
    gt_Init04MusicSound = TriggerCreate("gt_Init04MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    libLbty_gf_AutoRevealRegion(RegionFromId(32), RegionFromId(33), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(43), RegionFromId(43), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(40), RegionFromId(40), gv_pLAYER_01_USER);
    gv_powerTrackRoom1[1] = PointFromId(685);
    gv_powerTrackRoom1[2] = PointFromId(791);
    gv_powerTrackRoom1[3] = PointFromId(796);
    gv_powerTrackRoom1[4] = PointFromId(801);
    gv_powerTrackRoom1[5] = PointFromId(802);
    gv_powerTrackRoom1[6] = PointFromId(803);
    gv_powerTrackRoom1[7] = PointFromId(827);
    gv_powerTrackRoom1[8] = PointFromId(828);
    gv_powerTrackRoom1[9] = PointFromId(829);
    gv_powerTrackRoom3[1] = PointFromId(808);
    gv_powerTrackRoom3[2] = PointFromId(809);
    gv_powerTrackRoom3[3] = PointFromId(820);
    gv_powerTrackRoom3[4] = PointFromId(821);
    gv_powerTrackRoom3[5] = PointFromId(823);
    gv_powerTrackRoom3[6] = PointFromId(824);
    gv_powerTrackRoom3[7] = PointFromId(825);
    gv_powerTrackRoom3[8] = PointFromId(826);
    gv_powerTrackRoom3[9] = PointFromId(845);
    gv_powerTrackRoom3[10] = PointFromId(847);
    gv_powerTrack1Room5[1] = PointFromId(848);
    gv_powerTrack1Room5[2] = PointFromId(858);
    gv_powerTrack1Room5[3] = PointFromId(859);
    gv_powerTrack1Room5[4] = PointFromId(860);
    gv_powerTrack1Room5[5] = PointFromId(861);
    gv_powerTrack1Room5[6] = PointFromId(862);
    gv_powerTrack1Room5[7] = PointFromId(863);
    gv_powerTrack1Room5[8] = PointFromId(864);
    gv_powerTrack1Room5[9] = PointFromId(874);
    gv_powerTrack2Room5[1] = PointFromId(865);
    gv_powerTrack2Room5[2] = PointFromId(866);
    gv_powerTrack2Room5[3] = PointFromId(867);
    gv_powerTrack2Room5[4] = PointFromId(868);
    gv_powerTrack2Room5[5] = PointFromId(869);
    gv_powerTrack2Room5[6] = PointFromId(870);
    gv_powerTrack2Room5[7] = PointFromId(871);
    gv_powerTrack2Room5[8] = PointFromId(872);
    gv_powerTrack2Room5[9] = PointFromId(873);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoD9B8E89B_g;
    int autoD9B8E89B_u;
    unit autoD9B8E89B_var;
    unitgroup autoFD48FE1A_g;
    int autoFD48FE1A_u;
    unit autoFD48FE1A_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_generatorHP = libHots_gf_DifficultyValueFixed2(200.0, 200.0, 400.0);
    autoD9B8E89B_g = UnitGroup("UmojanLabGenerator", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD9B8E89B_u = UnitGroupCount(autoD9B8E89B_g, c_unitCountAll);
    for (;; autoD9B8E89B_u -= 1) {
        autoD9B8E89B_var = UnitGroupUnitFromEnd(autoD9B8E89B_g, autoD9B8E89B_u);
        if (autoD9B8E89B_var == null) { break; }
        UnitSetPropertyFixed(autoD9B8E89B_var, c_unitPropLifeMax, gv_generatorHP);
        UnitSetPropertyFixed(autoD9B8E89B_var, c_unitPropLifePercent, 100.0);
    }
    gv_gasDamage_Zerg = 1.0;
    gv_labTurretHP = libHots_gf_DifficultyValueFixed2(100.0, 100.0, 250.0);
    autoFD48FE1A_g = UnitGroup("LabTurret", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFD48FE1A_u = UnitGroupCount(autoFD48FE1A_g, c_unitCountAll);
    for (;; autoFD48FE1A_u -= 1) {
        autoFD48FE1A_var = UnitGroupUnitFromEnd(autoFD48FE1A_g, autoFD48FE1A_u);
        if (autoFD48FE1A_var == null) { break; }
        UnitSetPropertyFixed(autoFD48FE1A_var, c_unitPropLifeMax, gv_labTurretHP);
        UnitSetPropertyFixed(autoFD48FE1A_var, c_unitPropLifePercent, 100.0);
    }
    gv_eradicatorHP = libHots_gf_DifficultyValueFixed2(600.0, 600.0, 1000.0);
    gv_eradicatorReinforcementLimit = libHots_gf_DifficultyValueInt2(2, 2, 6);
    UnitSetPropertyFixed(gv_eRADICATOR, c_unitPropLifeMax, gv_eradicatorHP);
    UnitSetPropertyFixed(gv_eRADICATOR, c_unitPropLifePercent, 100.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_AddMissionTipUserData("Drone");
    libSwaC_gf_AddMissionTipUserData("Hatchery");
    libSwaC_gf_AddMissionTipUserData("Larva");
    libSwaC_gf_AddMissionTipUserData("Overlord");
    libSwaC_gf_AddMissionTipUserData("Zerg Structure");
    libSwaC_gf_AddMissionTipUserData("Game");
    libSwaC_gf_AddMissionTipUserData("Combat");
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Drone", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Overlord", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Zergling", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("UmojanLabMicrobot", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("UmojanLabWarbot", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("SentryGun", false, gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Stage 2
//--------------------------------------------------------------------------------------------------
bool gt_DebugStage2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoB3E8A991_g;
    int autoB3E8A991_u;
    unit autoB3E8A991_var;
    unitgroup auto9DFDF7AB_g;
    int auto9DFDF7AB_u;
    unit auto9DFDF7AB_var;

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoB3E8A991_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB3E8A991_u = UnitGroupCount(autoB3E8A991_g, c_unitCountAll);
    for (;; autoB3E8A991_u -= 1) {
        autoB3E8A991_var = UnitGroupUnitFromEnd(autoB3E8A991_g, autoB3E8A991_u);
        if (autoB3E8A991_var == null) { break; }
        UnitRemove(autoB3E8A991_var);
    }
    auto9DFDF7AB_g = UnitGroup(null, gv_pLAYER_02_DOMINION22, RegionFromId(47), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9DFDF7AB_u = UnitGroupCount(auto9DFDF7AB_g, c_unitCountAll);
    for (;; auto9DFDF7AB_u -= 1) {
        auto9DFDF7AB_var = UnitGroupUnitFromEnd(auto9DFDF7AB_g, auto9DFDF7AB_u);
        if (auto9DFDF7AB_var == null) { break; }
        UnitRemove(auto9DFDF7AB_var);
    }
    gv_stage2DebugUsed = true;
    TriggerStop(gt_DroneSelectHelpLine01Q);
    TriggerQueueClear(c_triggerQueueKill);
    TransmissionClearAll();
    TextTagDestroy(gv_s01_FirstDroneText);
    libNtve_gf_KillModel(gv_s01_FirstDroneActor);
    TriggerDebugOutput(1, StringExternal("Param/Value/A8154979"), true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hatchery", 0, gv_pLAYER_01_USER, PointFromId(3));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SpawningPool", 0, gv_pLAYER_01_USER, PointFromId(164));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Overlord", 0, gv_pLAYER_01_USER, PointFromId(3));
    libNtve_gf_CreateUnitsWithDefaultFacing(5, "Drone", 0, gv_pLAYER_01_USER, PointFromId(24));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_01_USER, PointFromId(263));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_01_USER, PointFromId(264));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_01_USER, PointFromId(265));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_01_USER, PointFromId(266));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_01_USER, PointFromId(267));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_01_USER, PointFromId(268));
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("ZergBuild", 3), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("ZergBuild", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("LarvaTrain", 1), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("LarvaTrain", 2), true);
    UnitIssueOrder(UnitFromId(673), Order(AbilityCommand("UmojanLabDoorsThinRightLowered", 0)), c_orderQueueReplace);
    ObjectiveSetState(gv_objectiveDestroyDominionBase3, c_objectiveStateCompleted);
    ObjectiveSetState(gv_objectiveDestroyDominionBase, c_objectiveStateCompleted);
    ObjectiveSetState(gv_objectiveDestroyDominionBase322, c_objectiveStateCompleted);
    ObjectiveSetState(gv_objectiveDestroyDominionBase2, c_objectiveStateCompleted);
    libSwaC_gf_CreateObjectiveCampaign("ZLab01Objective06");
    gv_objectiveDestroyDominionBase323 = ObjectiveLastCreated();
    Wait(2.0, c_timeGame);
    ObjectiveSetState(gv_objectiveDestroyDominionBase323, c_objectiveStateCompleted);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    ObjectiveShow(gv_objectiveDestroyDominionBase3, PlayerGroupAll(), false);
    ObjectiveShow(gv_objectiveDestroyDominionBase, PlayerGroupAll(), false);
    ObjectiveShow(gv_objectiveDestroyDominionBase322, PlayerGroupAll(), false);
    ObjectiveShow(gv_objectiveDestroyDominionBase2, PlayerGroupAll(), false);
    ObjectiveShow(gv_objectiveDestroyDominionBase323, PlayerGroupAll(), false);
    TriggerEnable(gt_DefeatAllUnitsKilled, true);
    TriggerExecute(gt_MidQ, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugStage2_Init () {
    gt_DebugStage2 = TriggerCreate("gt_DebugStage2_Func");
    TriggerAddEventChatMessage(gt_DebugStage2, c_playerAny, "s2", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attach Info Text (Completed)
//--------------------------------------------------------------------------------------------------
bool gt_AttachInfoTextCompleted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string autoB2613AA8_val;

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoB2613AA8_val = libNtve_gf_TriggeringProgressUnitType();
    if (autoB2613AA8_val == "Hatchery") {
        gf_CreateInfoText(EventUnitProgressUnit());
    }
    else if (autoB2613AA8_val == "SpawningPool") {
        gf_CreateInfoText(EventUnitProgressUnit());
    }
    else {
        UnitSetState(EventUnitProgressUnit(), c_unitStateTooltipable, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttachInfoTextCompleted_Init () {
    gt_AttachInfoTextCompleted = TriggerCreate("gt_AttachInfoTextCompleted_Func");
    TriggerAddEventUnitConstructProgress(gt_AttachInfoTextCompleted, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attach Info Text (Umojans)
//--------------------------------------------------------------------------------------------------
bool gt_AttachInfoTextUmojans_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitCreatedUnit()) == gv_pLAYER_02_DOMINION3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_CreateInfoText(EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttachInfoTextUmojans_Init () {
    gt_AttachInfoTextUmojans = TriggerCreate("gt_AttachInfoTextUmojans_Func");
    TriggerAddEventUnitCreated(gt_AttachInfoTextUmojans, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attach Info Text (Player)
//--------------------------------------------------------------------------------------------------
bool gt_AttachInfoTextPlayer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitCreatedUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_CreateInfoText(EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttachInfoTextPlayer_Init () {
    gt_AttachInfoTextPlayer = TriggerCreate("gt_AttachInfoTextPlayer_Func");
    TriggerAddEventUnitCreated(gt_AttachInfoTextPlayer, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attach Info Text (Player) Training
//--------------------------------------------------------------------------------------------------
bool gt_AttachInfoTextPlayerTraining_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Egg"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_CreateInfoText(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttachInfoTextPlayerTraining_Init () {
    gt_AttachInfoTextPlayerTraining = TriggerCreate("gt_AttachInfoTextPlayerTraining_Func");
    TriggerAddEventUnitTrainProgress(gt_AttachInfoTextPlayerTraining, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sentry Bot Info Text
//--------------------------------------------------------------------------------------------------
bool gt_SentryBotInfoText_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitProgressUnit()) == "UmojanLabMicrobot"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_SetUnitInfoTextCampaign(EventUnitProgressUnit(), null, UnitTypeGetName(UnitGetType(EventUnitProgressUnit())), null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SentryBotInfoText_Init () {
    gt_SentryBotInfoText = TriggerCreate("gt_SentryBotInfoText_Func");
    TriggerAddEventUnitConstructProgress(gt_SentryBotInfoText, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sentry Bot Unit Info
//--------------------------------------------------------------------------------------------------
bool gt_SentryBotUnitInfo_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "UmojanLabMicrobot"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_SetUnitInfoTextCampaign(EventUnitCreatedUnit(), null, UnitTypeGetName(UnitGetType(EventUnitCreatedUnit())), null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SentryBotUnitInfo_Init () {
    gt_SentryBotUnitInfo = TriggerCreate("gt_SentryBotUnitInfo_Func");
    TriggerAddEventUnitCreated(gt_SentryBotUnitInfo, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Harmless
//--------------------------------------------------------------------------------------------------
bool gt_RemoveHarmless_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(EventUnit(), "Harmless") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "Harmless", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveHarmless_Init () {
    gt_RemoveHarmless = TriggerCreate("gt_RemoveHarmless_Func");
    TriggerAddEventUnitAttacked(gt_RemoveHarmless, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI Pulse Audio
//--------------------------------------------------------------------------------------------------
bool gt_UIPulseAudio_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        SoundPlay(SoundLink("UI_Lab01_Training_Glow", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(1.75, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UIPulseAudio_Init () {
    gt_UIPulseAudio = TriggerCreate("gt_UIPulseAudio_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hide Completed Objectives
//--------------------------------------------------------------------------------------------------
bool gt_HideCompletedObjectives_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(7.0, c_timeReal);
    gf_HideObjective(gv_objectiveDestroyDominionBase3);
    gf_HideObjective(gv_objectiveDestroyDominionBase);
    gf_HideObjective(gv_objectiveDestroyDominionBase3222);
    gf_HideObjective(gv_objectiveDestroyDominionBase322);
    gf_HideObjective(gv_objectiveDestroyDominionBase2);
    gf_HideObjective(gv_objectiveDestroyDominionBase323);
    gf_HideObjective(gv_objectiveDestroyDominionBase323);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HideCompletedObjectives_Init () {
    gt_HideCompletedObjectives = TriggerCreate("gt_HideCompletedObjectives_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Flashing Mouse Click Hint
//--------------------------------------------------------------------------------------------------
bool gt_FlashingMouseClickHint_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if (((gv_gameOver == true) || (gv_inCinematic == true) || (gv_screenMouseClickTextTag == c_textTagNone))) {
            return true;
        }

        TextTagShow(gv_screenMouseClickTextTag, PlayerGroupAll(), true);
        Wait(1.0, c_timeReal);
        TextTagShow(gv_screenMouseClickTextTag, PlayerGroupAll(), false);
        Wait(0.5, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FlashingMouseClickHint_Init () {
    gt_FlashingMouseClickHint = TriggerCreate("gt_FlashingMouseClickHint_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game - Stage 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroSequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_EnableDisableNeedOverlordInfo(false);
    UnitSetState(gv_startingDrone, c_unitStateSelectable, true);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/555F2103"), null, UnitGetPosition(gv_startingDrone));
    TimerStart(gv_speedRunTimer, 600.0, false, c_timeAI);
    TimerStart(gv_factoriesDestroyedTimer, 600.0, false, c_timeAI);
    Wait(1.75, c_timeGame);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveSelectDroneCreate, true, true);
    TriggerQueueExit();
    TriggerExecute(gt_TipMissionHelpQ, true, true);
    TriggerExecute(gt_DroneOpeningEventQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSequence_Init () {
    gt_IntroSequence = TriggerCreate("gt_IntroSequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Drone Opening Event Q
//--------------------------------------------------------------------------------------------------
bool gt_DroneOpeningEventQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_firstLinePlayed;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_droneSelected == false)) {
        TriggerQueueEnter();
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libSwaC_gf_SendTransmissionCampaign(gv_vALERIAN, "zMission_Lab01|Line00002", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        lv_firstLinePlayed = true;
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
        gf_CreateFirstDroneHelper(true);
        if ((gv_stage2DebugUsed == true)) {
            return true;
        }

    }

    TriggerExecute(gt_DroneSelectHelpLine01Q, true, false);
    while (!((gv_droneSelected == true))) {
        Wait(0.5, c_timeGame);
    }
    if ((gv_stage2DebugUsed == true)) {
        return true;
    }

    TransmissionClear(gv_adjutantSelectDrone01);
    gf_DestroyFirstDroneHelper();
    Wait(0.5, c_timeGame);
    if ((lv_firstLinePlayed == true)) {
        TriggerQueueEnter();
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab01|Line00001", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
        if ((gv_stage2DebugUsed == true)) {
            return true;
        }

    }

    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_vALERIAN, "zMission_Lab01|Line00006", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    TriggerExecute(gt_HatcheryTeachtoMutate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DroneOpeningEventQ_Init () {
    gt_DroneOpeningEventQ = TriggerCreate("gt_DroneOpeningEventQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Drone Selected
//--------------------------------------------------------------------------------------------------
bool gt_DroneSelected_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_stage2DebugUsed == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TransmissionClear(gv_adjutantSelectDrone01);
    libNtve_gf_RescueUnit(gv_startingDrone, gv_pLAYER_01_USER, true);
    gf_CreateInfoText(gv_startingDrone);
    gv_droneSelected = true;
    TriggerExecute(gt_ObjectiveSelectDroneComplete, true, false);
    libNtve_gf_SetAllianceOneWay(gv_pLAYER_02_DOMINION2, gv_pLAYER_01_USER, libNtve_ge_AllianceSetting_Neutral);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DroneSelected_Init () {
    gt_DroneSelected = TriggerCreate("gt_DroneSelected_Func");
    TriggerAddEventUnitSelected(gt_DroneSelected, UnitRefFromVariable("gv_startingDrone"), gv_pLAYER_01_USER, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Drone Select Help Line01 Q
//--------------------------------------------------------------------------------------------------
bool gt_DroneSelectHelpLine01Q_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_timesWaited;

    // Automatic Variable Declarations
    fixed autoFD4DB97D_at;
    fixed autoA8966B06_at;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    autoFD4DB97D_at = 0;
    while (!(((gv_gameOver == true) || (gv_droneSelected == true) || (gv_stage2DebugUsed == true))) && autoFD4DB97D_at <= gv_c_S01_InitialDelayTimeAmount) {
        Wait(0.5, c_timeGame);
        autoFD4DB97D_at = autoFD4DB97D_at + 0.5;
    }
    while (true) {
        if ((gv_stage2DebugUsed == true)) {
            return true;
        }

        if ((gv_gameOver == false) && (gv_droneSelected == false)) {
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
            lv_index += 1;
            if ((lv_index < 3)) {
                libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab01|Line00004", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
                gv_adjutantSelectDrone01 = TransmissionLastSent();
                TransmissionWait(TransmissionLastSent(), 0.0);
            }
            else {
                lv_index = 0;
                if ((lv_timesWaited == 1)) {
                    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab01|Line00151", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
                    gv_adjutantSelectDrone01 = TransmissionLastSent();
                    TransmissionWait(TransmissionLastSent(), 0.0);
                    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab01|Line00152", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
                    gv_adjutantSelectDrone01 = TransmissionLastSent();
                    TransmissionWait(TransmissionLastSent(), 0.0);
                }
                else {
                    lv_timesWaited += 1;
                    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab01|Line00150", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
                    gv_adjutantSelectDrone01 = TransmissionLastSent();
                    TransmissionWait(TransmissionLastSent(), 0.0);
                    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab01|Line00004", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
                    gv_adjutantSelectDrone01 = TransmissionLastSent();
                    TransmissionWait(TransmissionLastSent(), 0.0);
                }
            }
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
            autoA8966B06_at = 0;
            while (!(((gv_gameOver == true) || (gv_droneSelected == true) || (gv_stage2DebugUsed == true))) && autoA8966B06_at <= gv_c_S01_DelayTimeAmount) {
                Wait(0.5, c_timeGame);
                autoA8966B06_at = autoA8966B06_at + 0.5;
            }
        }
        else {
            return true;
        }
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DroneSelectHelpLine01Q_Init () {
    gt_DroneSelectHelpLine01Q = TriggerCreate("gt_DroneSelectHelpLine01Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hatchery Teach to Mutate
//--------------------------------------------------------------------------------------------------
bool gt_HatcheryTeachtoMutate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_hatcheryBuildTime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveMutateHatcheryCreateQ, true, false);
    TriggerExecute(gt_HatcheryMutationUIUpdate, true, false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("ZergBuild", 0), true);
    lv_hatcheryBuildTime = (SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Lab01|Line00027", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Lab01|Line00015", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Lab01|Line00180", true), c_soundIndexAny)));
    lv_hatcheryBuildTime *= GameGetSpeed();
    lv_hatcheryBuildTime += 4.0;
    CatalogReferenceSet("Abil,ZergBuild,InfoArray[Build1].Time[0]", gv_pLAYER_01_USER, FixedToString(lv_hatcheryBuildTime, c_fixedPrecisionAny));
    if ((libHots_gf_DifficultyValueSwarmBoolean(true, true, false) == true)) {
        UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("ZergBuild", 0), true);
    }

    TriggerEnable(gt_HatcheryPlacementLeftClick, true);
    TriggerExecute(gt_HatcheryBuildHelpLine01Q, true, true);
    TriggerExecute(gt_HatcheryBuildHelpLine02Q, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HatcheryTeachtoMutate_Init () {
    gt_HatcheryTeachtoMutate = TriggerCreate("gt_HatcheryTeachtoMutate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hatchery Placement
//--------------------------------------------------------------------------------------------------
bool gt_HatcheryPlacement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_hatcheryBuildingStarted == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_hatcheryActor != null)) {
        return true;
    }

    gf_CreateHelperatPoint(PointFromId(3), StringExternal("Param/Value/5D30EC5F"), libSwaC_ge_CampaginReticleType_TerranMainObjective, libSwaC_ge_CampaginReticleSize_Large, 0.0);
    gv_hatcheryActor = libNtve_gf_ActorLastCreated();
    gv_hatcheryText = TextTagLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HatcheryPlacement_Init () {
    gt_HatcheryPlacement = TriggerCreate("gt_HatcheryPlacement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hatchery Placement Left - Click
//--------------------------------------------------------------------------------------------------
bool gt_HatcheryPlacementLeftClick_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_target;
    fixed lv_duration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_hatcheryBuildingStarted == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libHots_gf_DifficultyValueSwarmBoolean(true, true, false) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_HatcheryPlacementLeftClickEnd, true);
    CameraLockInput(gv_pLAYER_01_USER, true);
    lv_target = PointWithOffset(PointFromId(3), 0.0, -1.5);
    lv_duration = MinF(0.5, (DistanceBetweenPoints(CameraGetTarget(gv_pLAYER_01_USER), lv_target) * 0.5));
    CameraPan(gv_pLAYER_01_USER, lv_target, lv_duration, -1, 10.0, false);
    Wait(lv_duration, c_timeGame);
    if ((gv_hatcheryButtonClicked == false)) {
        gf_DisplayMouseClickHint(StringExternal("Param/Value/8F440E51"), PointFromId(3));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HatcheryPlacementLeftClick_Init () {
    gt_HatcheryPlacementLeftClick = TriggerCreate("gt_HatcheryPlacementLeftClick_Func");
    TriggerEnable(gt_HatcheryPlacementLeftClick, false);
    TriggerAddEventTargetModeUpdate(gt_HatcheryPlacementLeftClick, gv_pLAYER_01_USER, AbilityCommand("ZergBuild", 0), c_targetModeStateOn);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hatchery Placement Left - Click End
//--------------------------------------------------------------------------------------------------
bool gt_HatcheryPlacementLeftClickEnd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libHots_gf_DifficultyValueSwarmBoolean(true, true, false) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_HatcheryPlacementLeftClick, true);
    CameraLockInput(gv_pLAYER_01_USER, false);
    libNtve_gf_HideScreenImage(false, gv_screenMouseClickTextTag);
    gf_CleanMouseClickHint();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HatcheryPlacementLeftClickEnd_Init () {
    gt_HatcheryPlacementLeftClickEnd = TriggerCreate("gt_HatcheryPlacementLeftClickEnd_Func");
    TriggerAddEventTargetModeUpdate(gt_HatcheryPlacementLeftClickEnd, gv_pLAYER_01_USER, AbilityCommand("ZergBuild", 0), c_targetModeStateOff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hatchery Placement Remove
//--------------------------------------------------------------------------------------------------
bool gt_HatcheryPlacementRemove_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_hatcheryActor != null)) {
        libNtve_gf_KillModel(gv_hatcheryActor);
        gv_hatcheryActor = null;
    }

    if ((gv_hatcheryText != c_textTagNone)) {
        TextTagDestroy(gv_hatcheryText);
        gv_hatcheryText = c_textTagNone;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HatcheryPlacementRemove_Init () {
    gt_HatcheryPlacementRemove = TriggerCreate("gt_HatcheryPlacementRemove_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button Clicked -Basic Mutation
//--------------------------------------------------------------------------------------------------
bool gt_ButtonClickedBasicMutation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_stage2DebugUsed == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_hatcheryDroneBasicButtonClicked = true;
    TransmissionClear(gv_adjutantDroneBasic);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ButtonClickedBasicMutation_Init () {
    gt_ButtonClickedBasicMutation = TriggerCreate("gt_ButtonClickedBasicMutation_Func");
    TriggerAddEventButtonPressed(gt_ButtonClickedBasicMutation, gv_pLAYER_01_USER, "ZergBuild");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button Clicked -Mutate Hatchery
//--------------------------------------------------------------------------------------------------
bool gt_ButtonClickedMutateHatchery_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_stage2DebugUsed == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_hatcheryButtonClicked = true;
    TransmissionClear(gv_adjutantDroneBuildHatch);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ButtonClickedMutateHatchery_Init () {
    gt_ButtonClickedMutateHatchery = TriggerCreate("gt_ButtonClickedMutateHatchery_Func");
    TriggerAddEventUnitOrder(gt_ButtonClickedMutateHatchery, null, AbilityCommand("ZergBuild", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hatchery Build Help Line01 Q
//--------------------------------------------------------------------------------------------------
bool gt_HatcheryBuildHelpLine01Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    fixed autoE8210094_at;
    fixed auto6BDEF58B_at;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    autoE8210094_at = 0;
    while (!(((gv_gameOver == true) || (gv_hatcheryDroneBasicButtonClicked == true))) && autoE8210094_at <= gv_c_S01_InitialDelayTimeAmount) {
        Wait(0.5, c_timeGame);
        autoE8210094_at = autoE8210094_at + 0.5;
    }
    while (true) {
        if ((gv_gameOver == false) && (gv_hatcheryDroneBasicButtonClicked == false)) {
            while (!(((gv_gameOver == true) || (libNtve_gf_UnitTypeIsSelected("Drone", gv_pLAYER_01_USER) == true)))) {
                Wait(1.0, c_timeGame);
            }
            if (((gv_gameOver == true) || (gv_hatcheryDroneBasicButtonClicked == true))) {
                return true;
            }

            libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
            libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab01|Line00007", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            gv_adjutantDroneBasic = TransmissionLastSent();
            if ((libHots_gf_DifficultyValueSwarmBoolean(true, true, false) == true) && (UnitGroupCount(UnitGroupFilter("Drone", gv_pLAYER_01_USER, UnitGroupSelected(gv_pLAYER_01_USER), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
                libNtve_gf_DisplayScreenImage(1, "Assets\\Textures\\tutorialcommandcardhighlight.dds", c_triggerBlendModeAdd, 503, 348, c_anchorBottomRight, 5, -2);
                libNtve_gf_PulseScreenImage(1, 1.75, 100.0, 0.0);
                TriggerExecute(gt_UIPulseAudio, true, false);
            }

            TransmissionWait(TransmissionLastSent(), 0.0);
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
            libNtve_gf_StopPulsingScreenImage(1);
            libNtve_gf_HideScreenImage(false, 1);
            TriggerStop(gt_UIPulseAudio);
            auto6BDEF58B_at = 0;
            while (!(((gv_gameOver == true) || (gv_hatcheryDroneBasicButtonClicked == true))) && auto6BDEF58B_at <= gv_c_S01_DelayTimeAmount) {
                Wait(0.5, c_timeGame);
                auto6BDEF58B_at = auto6BDEF58B_at + 0.5;
            }
        }
        else {
            return true;
        }
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HatcheryBuildHelpLine01Q_Init () {
    gt_HatcheryBuildHelpLine01Q = TriggerCreate("gt_HatcheryBuildHelpLine01Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hatchery Build Help Line02 Q
//--------------------------------------------------------------------------------------------------
bool gt_HatcheryBuildHelpLine02Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    fixed autoF3928D8A_at;
    fixed auto2364AAFC_at;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    autoF3928D8A_at = 0;
    while (!(((gv_gameOver == true) || (gv_hatcheryButtonClicked == true))) && autoF3928D8A_at <= gv_c_S01_InitialDelayTimeAmount) {
        Wait(0.5, c_timeGame);
        autoF3928D8A_at = autoF3928D8A_at + 0.5;
    }
    while (true) {
        if ((gv_gameOver == false) && (gv_hatcheryButtonClicked == false)) {
            while (!(((gv_gameOver == true) || (libNtve_gf_UnitTypeIsSelected("Drone", gv_pLAYER_01_USER) == true)))) {
                Wait(1.0, c_timeGame);
            }
            if (((gv_gameOver == true) || (gv_hatcheryButtonClicked == true))) {
                return true;
            }

            libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
            libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab01|Line00008", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            gv_adjutantDroneBuildHatch = TransmissionLastSent();
            if ((libHots_gf_DifficultyValueSwarmBoolean(true, true, false) == true) && (libNtve_gf_UnitTypeIsSelected("Drone", gv_pLAYER_01_USER) == true)) {
                libNtve_gf_DisplayScreenImage(1, "Assets\\Textures\\tutorialcommandcardhighlight.dds", c_triggerBlendModeAdd, 503, 348, c_anchorBottomRight, 5, -2);
                libNtve_gf_PulseScreenImage(1, 1.75, 100.0, 0.0);
                TriggerExecute(gt_UIPulseAudio, true, false);
            }

            TransmissionWait(TransmissionLastSent(), 0.0);
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
            libNtve_gf_StopPulsingScreenImage(1);
            libNtve_gf_HideScreenImage(false, 1);
            TriggerStop(gt_UIPulseAudio);
            auto2364AAFC_at = 0;
            while (!(((gv_gameOver == true) || (gv_hatcheryButtonClicked == true))) && auto2364AAFC_at <= gv_c_S01_DelayTimeAmount) {
                Wait(0.5, c_timeGame);
                auto2364AAFC_at = auto2364AAFC_at + 0.5;
            }
        }
        else {
            return true;
        }
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HatcheryBuildHelpLine02Q_Init () {
    gt_HatcheryBuildHelpLine02Q = TriggerCreate("gt_HatcheryBuildHelpLine02Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hatchery Cancelled
//--------------------------------------------------------------------------------------------------
bool gt_HatcheryCancelled_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Hatchery"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_hatcheryCancelled += 1;
    gv_hatcheryButtonClicked = false;
    gv_hatcheryBuildingStarted = false;
    gv_hatcheryDroneBasicButtonClicked = false;
    TriggerQueueClear(c_triggerQueueKill);
    TransmissionClearAll();
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerEnable(gt_HatcheryTeachtoMutate, true);
    TriggerEnable(gt_HatcheryPlacement, true);
    TriggerEnable(gt_ButtonClickedBasicMutation, true);
    TriggerEnable(gt_ButtonClickedMutateHatchery, true);
    TriggerEnable(gt_HatcheryBuildHelpLine01Q, true);
    TriggerEnable(gt_HatcheryBuildHelpLine02Q, true);
    TriggerEnable(gt_HatcheryMutationStartedQ, true);
    TriggerEnable(gt_HatcheryMutationCompleted, true);
    if ((gv_hatcheryCancelled <= 2)) {
        gv_hatcheryCanceledCheck = true;
        TriggerExecute(gt_HatcheryCancelledQ, true, false);
    }
    else {
        gv_hatcheryCanceledCheck = false;
    }
    TriggerExecute(gt_HatcheryTeachtoMutate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HatcheryCancelled_Init () {
    gt_HatcheryCancelled = TriggerCreate("gt_HatcheryCancelled_Func");
    TriggerAddEventUnitOrder(gt_HatcheryCancelled, null, AbilityCommand("BuildInProgress", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hatchery Cancelled Q
//--------------------------------------------------------------------------------------------------
bool gt_HatcheryCancelledQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto18C364B7_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto18C364B7_val = gv_hatcheryCancelled;
    if (auto18C364B7_val == 1) {
        TriggerQueueEnter();
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libSwaC_gf_SendTransmissionCampaign(gv_vALERIAN, "zMission_Lab01|Line00044", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }
    else if (auto18C364B7_val == 2) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerQueueEnter();
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libSwaC_gf_SendTransmissionCampaign(gv_vALERIAN, "zMission_Lab01|Line00161", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HatcheryCancelledQ_Init () {
    gt_HatcheryCancelledQ = TriggerCreate("gt_HatcheryCancelledQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hatchery Mutation Started Q
//--------------------------------------------------------------------------------------------------
bool gt_HatcheryMutationStartedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_stage2DebugUsed == false))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUnitType() == "Hatchery"))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_hatcheryButtonClicked = true;
    gv_hatcheryDroneBasicButtonClicked = true;
    gv_hatcheryBuildingStarted = true;
    TransmissionClear(gv_adjutantDroneBasic);
    TransmissionClear(gv_adjutantDroneBuildHatch);
    TriggerEnable(gt_HatcheryPlacementLeftClick, false);
    gf_CleanMouseClickHint();
    TriggerExecute(gt_HatcheryPlacementRemove, true, false);
    UnitBehaviorRemove(EventUnitProgressUnit(), "SpawnLarva", 1);
    Wait(1.0, c_timeGame);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    if ((gv_hatcheryStarted_Transmission01 == c_invalidTransmissionId)) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab01|Line00027", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        gv_hatcheryStarted_Transmission01 = TransmissionLastSent();
        gv_s01_TransmissionCurrent01 = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
    }

    if ((gv_hatcheryStarted_Transmission02 == c_invalidTransmissionId)) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab01|Line00015", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        gv_hatcheryStarted_Transmission02 = TransmissionLastSent();
        gv_s01_TransmissionCurrent01 = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
    }

    if ((gv_hatcheryStarted_Transmission03 == c_invalidTransmissionId)) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab01|Line00180", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        gv_hatcheryStarted_Transmission03 = TransmissionLastSent();
        gv_s01_TransmissionCurrent01 = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
    }

    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HatcheryMutationStartedQ_Init () {
    gt_HatcheryMutationStartedQ = TriggerCreate("gt_HatcheryMutationStartedQ_Func");
    TriggerAddEventUnitConstructProgress(gt_HatcheryMutationStartedQ, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hatchery Mutation Completed
//--------------------------------------------------------------------------------------------------
bool gt_HatcheryMutationCompleted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_larva;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_stage2DebugUsed == false))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUnitType() == "Hatchery"))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_hatcheryBuildingStarted = false;
    gv_firstHatchery = EventUnitProgressUnit();
    TriggerEnable(gt_HatcheryCancelled, false);
    TriggerEnable(gt_HatcheryPlacementLeftClick, false);
    TriggerEnable(gt_DefeatAllUnitsKilled, true);
    UnitIssueOrder(EventUnitProgressUnit(), OrderTargetingUnit(AbilityCommand("RallyHatchery", 1), UnitFromId(49)), c_orderQueueReplace);
    TriggerExecute(gt_ObjectiveMutateHatcheryComplete, true, true);
    UnitBehaviorRemove(gv_firstHatchery, "SpawnLarva", 1);
    UnitBehaviorAdd(gv_firstHatchery, "SpawnLarva", gv_firstHatchery, 1);
    CameraPan(gv_pLAYER_01_USER, PointWithOffset(UnitGetPosition(gv_firstHatchery), 0.0, -2.0), 1.0, -1, 10, true);
    TriggerEnable(gt_HarvestingStarted, true);
    TriggerExecute(gt_HarvestingTeachQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HatcheryMutationCompleted_Init () {
    gt_HatcheryMutationCompleted = TriggerCreate("gt_HatcheryMutationCompleted_Func");
    TriggerAddEventUnitConstructProgress(gt_HatcheryMutationCompleted, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hatchery Mutation UI Update
//--------------------------------------------------------------------------------------------------
bool gt_HatcheryMutationUIUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_stage2DebugUsed == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        if (((gv_gameOver == true) || (gv_inCinematic == true))) {
            return true;
        }

        if ((gv_firstHatchery != null)) {
            gf_DestroyFirstDroneHelper();
            UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("ZergBuild", 0), false);
            TriggerExecute(gt_HatcheryPlacementRemove, true, false);
            return true;
        }

        if ((gv_hatcheryBuildingStarted == false)) {
            if ((UnitGroupHasUnit(UnitGroupSelected(gv_pLAYER_01_USER), gv_startingDrone) == false)) {
                gf_CreateFirstDroneHelper(true);
                TriggerExecute(gt_HatcheryPlacementRemove, true, false);
            }
            else {
                gf_DestroyFirstDroneHelper();
                TriggerExecute(gt_HatcheryPlacement, true, false);
            }
        }
        else {
            gf_DestroyFirstDroneHelper();
            TriggerExecute(gt_HatcheryPlacementRemove, true, false);
        }
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HatcheryMutationUIUpdate_Init () {
    gt_HatcheryMutationUIUpdate = TriggerCreate("gt_HatcheryMutationUIUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Harvesting Teach Q
//--------------------------------------------------------------------------------------------------
bool gt_HarvestingTeachQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_larva;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_vALERIAN, "zMission_Lab01|Line00102", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_s01_TransmissionCurrent01 = TransmissionLastSent();
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_HarvestingSpawnDrones, true, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_vALERIAN, "zMission_Lab01|Line00033", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_s01_TransmissionCurrent02 = TransmissionLastSent();
    TransmissionWait(gv_s01_TransmissionCurrent02, 0.0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(11), "UmojanLabZergCrates", c_animNameDefault, "Stand Unpowered End", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    TriggerExecute(gt_ObjectiveHarvestCreate, true, true);
    TriggerQueueExit();
    TriggerExecute(gt_HarvestingHelpLines01Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HarvestingTeachQ_Init () {
    gt_HarvestingTeachQ = TriggerCreate("gt_HarvestingTeachQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Harvesting Spawn Drones
//--------------------------------------------------------------------------------------------------
bool gt_HarvestingSpawnDrones_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto28D43D28_g;
    int auto28D43D28_u;
    unit auto28D43D28_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(11), "UmojanLabZergCrates", c_animNameDefault, "Stand Unpowered Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(1.5, c_timeGame);
    if ((libHots_gf_DifficultyValueSwarmBoolean(true, true, false) == true)) {
        CameraPan(gv_pLAYER_01_USER, PointFromId(687), 1.0, -1, 10, true);
    }

    TriggerEnable(gt_HarvestingSelectDrones, true);
    TriggerEnable(gt_DroneUsedQ, true);
    SoundPlayAtPoint(SoundLink("Event_Lab01_DronesEmerge", -1), PlayerGroupAll(), PointFromId(2), 0.0, 100.0, 0.0);
    libNtve_gf_ShowHideUnit(UnitFromId(973), false);
    if ((UnitIsSelected(gv_extraDroneUnit01, gv_pLAYER_01_USER) == false)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Drone", 0, gv_pLAYER_02_DOMINION2, PointFromId(108));
        gv_extraDroneUnit01 = UnitLastCreated();
        UnitIssueOrder(gv_extraDroneUnit01, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(120)), c_orderQueueReplace);
        if ((libHots_gf_DifficultyValueSwarmBoolean(true, true, false) == true)) {
            libNtve_gf_AttachModelToUnit(UnitLastCreated(), "BriefingUnitSelectSmall", "Ref_Origin");
            gv_extraDroneActor01 = libNtve_gf_ActorLastCreated();
        }

        Wait(0.5, c_timeGame);
    }

    if ((UnitIsSelected(gv_extraDroneUnit02, gv_pLAYER_01_USER) == false)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Drone", 0, gv_pLAYER_02_DOMINION2, PointFromId(108));
        gv_extraDroneUnit02 = UnitLastCreated();
        UnitIssueOrder(gv_extraDroneUnit02, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(121)), c_orderQueueReplace);
        if ((libHots_gf_DifficultyValueSwarmBoolean(true, true, false) == true)) {
            libNtve_gf_AttachModelToUnit(UnitLastCreated(), "BriefingUnitSelectSmall", "Ref_Origin");
            gv_extraDroneActor02 = libNtve_gf_ActorLastCreated();
        }

        Wait(0.3, c_timeGame);
    }

    if ((UnitIsSelected(gv_extraDroneUnit03, gv_pLAYER_01_USER) == false)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Drone", 0, gv_pLAYER_02_DOMINION2, PointFromId(108));
        gv_extraDroneUnit03 = UnitLastCreated();
        UnitIssueOrder(gv_extraDroneUnit03, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(687)), c_orderQueueReplace);
        if ((libHots_gf_DifficultyValueSwarmBoolean(true, true, false) == true)) {
            libNtve_gf_AttachModelToUnit(UnitLastCreated(), "BriefingUnitSelectSmall", "Ref_Origin");
            gv_extraDroneActor03 = libNtve_gf_ActorLastCreated();
        }

        Wait(0.3, c_timeGame);
    }

    if ((UnitIsSelected(gv_extraDroneUnit04, gv_pLAYER_01_USER) == false)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Drone", 0, gv_pLAYER_02_DOMINION2, PointFromId(108));
        gv_extraDroneUnit04 = UnitLastCreated();
        UnitIssueOrder(gv_extraDroneUnit04, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(123)), c_orderQueueReplace);
        if ((libHots_gf_DifficultyValueSwarmBoolean(true, true, false) == true)) {
            libNtve_gf_AttachModelToUnit(UnitLastCreated(), "BriefingUnitSelectSmall", "Ref_Origin");
            gv_extraDroneActor04 = libNtve_gf_ActorLastCreated();
        }

        Wait(0.3, c_timeGame);
    }

    if ((UnitIsSelected(gv_extraDroneUnit05, gv_pLAYER_01_USER) == false)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Drone", 0, gv_pLAYER_02_DOMINION2, PointFromId(108));
        gv_extraDroneUnit05 = UnitLastCreated();
        UnitIssueOrder(gv_extraDroneUnit05, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(686)), c_orderQueueReplace);
        if ((libHots_gf_DifficultyValueSwarmBoolean(true, true, false) == true)) {
            libNtve_gf_AttachModelToUnit(UnitLastCreated(), "BriefingUnitSelectSmall", "Ref_Origin");
            gv_extraDroneActor05 = libNtve_gf_ActorLastCreated();
        }

        Wait(0.3, c_timeGame);
    }

    if ((UnitIsSelected(gv_extraDroneUnit06, gv_pLAYER_01_USER) == false)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Drone", 0, gv_pLAYER_02_DOMINION2, PointFromId(108));
        gv_extraDroneUnit06 = UnitLastCreated();
        UnitIssueOrder(gv_extraDroneUnit06, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(688)), c_orderQueueReplace);
        if ((libHots_gf_DifficultyValueSwarmBoolean(true, true, false) == true)) {
            libNtve_gf_AttachModelToUnit(UnitLastCreated(), "BriefingUnitSelectSmall", "Ref_Origin");
            gv_extraDroneActor06 = libNtve_gf_ActorLastCreated();
        }

        Wait(2.0, c_timeGame);
    }

    libNtve_gf_ShowHideUnit(UnitFromId(973), true);
    auto28D43D28_g = UnitGroup("Drone", gv_pLAYER_02_DOMINION2, RegionFromId(47), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto28D43D28_u = UnitGroupCount(auto28D43D28_g, c_unitCountAll);
    for (;; auto28D43D28_u -= 1) {
        auto28D43D28_var = UnitGroupUnitFromEnd(auto28D43D28_g, auto28D43D28_u);
        if (auto28D43D28_var == null) { break; }
        libNtve_gf_RescueUnit(auto28D43D28_var, gv_pLAYER_01_USER, true);
        gf_CreateInfoText(auto28D43D28_var);
        UnitSetInfoTip(auto28D43D28_var, UnitTypeGetName(UnitGetType(auto28D43D28_var)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HarvestingSpawnDrones_Init () {
    gt_HarvestingSpawnDrones = TriggerCreate("gt_HarvestingSpawnDrones_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Harvesting Select Drones
//--------------------------------------------------------------------------------------------------
bool gt_HarvestingSelectDrones_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unit autoAA17084C_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_stage2DebugUsed == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_dronesSelectedforHarvesting = true;
    autoAA17084C_val = EventUnit();
    if (autoAA17084C_val == gv_extraDroneUnit01) {
        if ((gv_droneSelected01 == false)) {
            libNtve_gf_KillModel(gv_extraDroneActor01);
            gv_extraDroneActor01 = null;
            gv_dronesSelected += 1;
            gv_droneSelected01 = true;
        }

    }
    else if (autoAA17084C_val == gv_extraDroneUnit02) {
        if ((gv_droneSelected02 == false)) {
            libNtve_gf_KillModel(gv_extraDroneActor02);
            gv_extraDroneActor02 = null;
            gv_dronesSelected += 1;
            gv_droneSelected02 = true;
        }

    }
    else if (autoAA17084C_val == gv_extraDroneUnit03) {
        if ((gv_droneSelected03 == false)) {
            libNtve_gf_KillModel(gv_extraDroneActor03);
            gv_extraDroneActor03 = null;
            gv_dronesSelected += 1;
            gv_droneSelected03 = true;
        }

    }
    else if (autoAA17084C_val == gv_extraDroneUnit04) {
        if ((gv_droneSelected04 == false)) {
            libNtve_gf_KillModel(gv_extraDroneActor04);
            gv_extraDroneActor04 = null;
            gv_dronesSelected += 1;
            gv_droneSelected04 = true;
        }

    }
    else if (autoAA17084C_val == gv_extraDroneUnit05) {
        if ((gv_droneSelected05 == false)) {
            libNtve_gf_KillModel(gv_extraDroneActor05);
            gv_extraDroneActor05 = null;
            gv_dronesSelected += 1;
            gv_droneSelected05 = true;
        }

    }
    else if (autoAA17084C_val == gv_extraDroneUnit06) {
        if ((gv_droneSelected06 == false)) {
            libNtve_gf_KillModel(gv_extraDroneActor06);
            gv_extraDroneActor06 = null;
            gv_dronesSelected += 1;
            gv_droneSelected06 = true;
        }

    }
    else {
    }
    if ((gv_dronesSelected == 6)) {
        TriggerEnable(TriggerGetCurrent(), false);
        gv_allDronesSelectedforHarvesting = true;
    }

    TriggerExecute(gt_HarvestingMinerals, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HarvestingSelectDrones_Init () {
    gt_HarvestingSelectDrones = TriggerCreate("gt_HarvestingSelectDrones_Func");
    TriggerEnable(gt_HarvestingSelectDrones, false);
    TriggerAddEventUnitSelected(gt_HarvestingSelectDrones, UnitRefFromVariable("gv_extraDroneUnit01"), gv_pLAYER_01_USER, true);
    TriggerAddEventUnitSelected(gt_HarvestingSelectDrones, UnitRefFromVariable("gv_extraDroneUnit02"), gv_pLAYER_01_USER, true);
    TriggerAddEventUnitSelected(gt_HarvestingSelectDrones, UnitRefFromVariable("gv_extraDroneUnit03"), gv_pLAYER_01_USER, true);
    TriggerAddEventUnitSelected(gt_HarvestingSelectDrones, UnitRefFromVariable("gv_extraDroneUnit04"), gv_pLAYER_01_USER, true);
    TriggerAddEventUnitSelected(gt_HarvestingSelectDrones, UnitRefFromVariable("gv_extraDroneUnit05"), gv_pLAYER_01_USER, true);
    TriggerAddEventUnitSelected(gt_HarvestingSelectDrones, UnitRefFromVariable("gv_extraDroneUnit06"), gv_pLAYER_01_USER, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Harvesting Minerals
//--------------------------------------------------------------------------------------------------
bool gt_HarvestingMinerals_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libHots_gf_DifficultyValueSwarmBoolean(true, true, false) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    CameraPan(gv_pLAYER_01_USER, PointFromId(514), 1.0, -1, 10, true);
    Wait(1.0, c_timeGame);
    if ((gv_harvestStarted == false)) {
        gf_CreateHelperonUnit(StringExternal("Param/Value/C57727A3"), UnitFromId(45), libSwaC_ge_CampaginReticleType_TerranMainObjective, libSwaC_ge_CampaginReticleSize_Small, 0.5);
        gv_mineral01 = libNtve_gf_ActorLastCreated();
        gv_mineralText01 = TextTagLastCreated();
        gf_CreateHelperonUnit(StringExternal("Param/Value/B340611A"), UnitFromId(47), libSwaC_ge_CampaginReticleType_TerranMainObjective, libSwaC_ge_CampaginReticleSize_Small, 0.5);
        gv_mineral02 = libNtve_gf_ActorLastCreated();
        gv_mineralText02 = TextTagLastCreated();
        gf_CreateHelperonUnit(StringExternal("Param/Value/8AFF23A9"), UnitFromId(46), libSwaC_ge_CampaginReticleType_TerranMainObjective, libSwaC_ge_CampaginReticleSize_Small, 0.5);
        gv_mineral03 = libNtve_gf_ActorLastCreated();
        gv_mineralText03 = TextTagLastCreated();
        gf_CreateHelperonUnit(StringExternal("Param/Value/9C105EFD"), UnitFromId(48), libSwaC_ge_CampaginReticleType_TerranMainObjective, libSwaC_ge_CampaginReticleSize_Small, 0.5);
        gv_mineral04 = libNtve_gf_ActorLastCreated();
        gv_mineralText04 = TextTagLastCreated();
        gf_CreateHelperonUnit(StringExternal("Param/Value/4869076B"), UnitFromId(49), libSwaC_ge_CampaginReticleType_TerranMainObjective, libSwaC_ge_CampaginReticleSize_Small, 0.5);
        gv_mineral05 = libNtve_gf_ActorLastCreated();
        gv_mineralText05 = TextTagLastCreated();
    }
    else {
        return true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HarvestingMinerals_Init () {
    gt_HarvestingMinerals = TriggerCreate("gt_HarvestingMinerals_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Harvesting Started
//--------------------------------------------------------------------------------------------------
bool gt_HarvestingStarted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_harvestStarted == false)) {
        gv_harvestStarted = true;
        libNtve_gf_KillModel(gv_mineral01);
        libNtve_gf_KillModel(gv_mineral02);
        libNtve_gf_KillModel(gv_mineral03);
        libNtve_gf_KillModel(gv_mineral04);
        libNtve_gf_KillModel(gv_mineral05);
        TextTagDestroy(gv_mineralText01);
        TextTagDestroy(gv_mineralText02);
        TextTagDestroy(gv_mineralText03);
        TextTagDestroy(gv_mineralText04);
        TextTagDestroy(gv_mineralText05);
        TransmissionClear(gv_adjutantSelectDrone02);
        TransmissionClear(gv_adjutantHarvest01);
        TransmissionClear(gv_adjutantHarvest02);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HarvestingStarted_Init () {
    gt_HarvestingStarted = TriggerCreate("gt_HarvestingStarted_Func");
    TriggerEnable(gt_HarvestingStarted, false);
    TriggerAddEventUnitAbility(gt_HarvestingStarted, null, AbilityCommand("DroneHarvest", 0), c_abilHarvestStageWaitAtResource, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Harvesting Help Lines 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_HarvestingHelpLines01Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    fixed autoFA506F22_at;
    fixed autoFC37F083_at;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    autoFA506F22_at = 0;
    while (!(((gv_gameOver == true) || (gv_harvestStarted == true))) && autoFA506F22_at <= gv_c_S01_InitialDelayTimeAmount) {
        Wait(0.5, c_timeGame);
        autoFA506F22_at = autoFA506F22_at + 0.5;
    }
    while (true) {
        if ((gv_gameOver == false) && (gv_dronesSelectedforHarvesting == false)) {
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
            libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab01|Line00035", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_LeavePortraitVisibleAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            gv_adjutantSelectDrone02 = TransmissionLastSent();
            TransmissionWait(gv_adjutantSelectDrone02, 0.0);
            libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab01|Line00182", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_LeavePortraitVisibleAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            gv_adjutantHarvest01 = TransmissionLastSent();
            TransmissionWait(gv_adjutantHarvest01, 0.0);
            libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab01|Line00036", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            gv_adjutantHarvest02 = TransmissionLastSent();
            TransmissionWait(gv_adjutantHarvest02, 0.0);
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
            autoFC37F083_at = 0;
            while (!(((gv_harvestStarted == true) || (gv_gameOver == true))) && autoFC37F083_at <= gv_c_S01_DelayTimeAmount) {
                Wait(0.5, c_timeGame);
                autoFC37F083_at = autoFC37F083_at + 0.5;
            }
        }
        else {
            return true;
        }
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HarvestingHelpLines01Q_Init () {
    gt_HarvestingHelpLines01Q = TriggerCreate("gt_HarvestingHelpLines01Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Drone Used Q
//--------------------------------------------------------------------------------------------------
bool gt_DroneUsedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("Drone", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab01|Line00126", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DroneUsedQ_Init () {
    gt_DroneUsedQ = TriggerCreate("gt_DroneUsedQ_Func");
    TriggerEnable(gt_DroneUsedQ, false);
    TriggerAddEventUnitConstructProgress(gt_DroneUsedQ, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overlord Teach Q
//--------------------------------------------------------------------------------------------------
bool gt_OverlordTeachQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_vALERIAN, "zMission_Lab01|Line00034", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_s01_TransmissionCurrent01 = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab01|Line00025", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_s01_TransmissionCurrent01 = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SendTransmissionCampaign(gv_vALERIAN, "zMission_Lab01|Line00028", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_s01_TransmissionCurrent01 = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    TriggerExecute(gt_OverlordTeachOverlord, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OverlordTeachQ_Init () {
    gt_OverlordTeachQ = TriggerCreate("gt_OverlordTeachQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overlord Teach Overlord
//--------------------------------------------------------------------------------------------------
bool gt_OverlordTeachOverlord_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_newSelectLarvaTooltip;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_newSelectLarvaTooltip = StringExternal("Param/Value/6504A575");

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveMorphOverlordCreateQ, true, false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("LarvaTrain", 2), true);
    if ((libHots_gf_DifficultyValueSwarmBoolean(true, true, false) == true)) {
        UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("LarvaTrain", 2), true);
        gf_ChangeButtonTooltip("Larva", "Param/Value/6504A575");
        libSwaC_gf_TurnSelectLarvaButtonHighlightOnOff(true);
        CameraPan(gv_pLAYER_01_USER, PointWithOffset(UnitGetPosition(gv_firstHatchery), 0.0, -2.0), 2.0, -1, 10, true);
    }

    if (((UnitIsSelected(gv_firstHatchery, gv_pLAYER_01_USER) == true) || (libNtve_gf_UnitTypeIsSelected("Larva", gv_pLAYER_01_USER) == true))) {
        gv_hatcherySelected = true;
        if ((libNtve_gf_UnitTypeIsSelected("Larva", gv_pLAYER_01_USER) == true)) {
            gv_overlordLarvaSelectPressed = true;

        }

    }
    else {
        gf_CreateOverlordHatcheryHelper();
    }
    TriggerEnable(gt_OverlordHatcherySelected, true);
    TriggerEnable(gt_OverlordLarvaSelected, true);
    TriggerEnable(gt_OverlordSelectLarvaClicked, true);
    TriggerExecute(gt_OverlordMorphUIUpdate, true, false);
    TriggerExecute(gt_OverlordHatcheryHelpSelectQ, true, true);
    TriggerExecute(gt_OverlordHelpLines01Q, true, true);
    TriggerExecute(gt_OverlordHelpLines02Q, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OverlordTeachOverlord_Init () {
    gt_OverlordTeachOverlord = TriggerCreate("gt_OverlordTeachOverlord_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overlord Morph Started Q
//--------------------------------------------------------------------------------------------------
bool gt_OverlordMorphStartedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_stage2DebugUsed == false))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUnitType() == "Overlord"))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_overlordMorphUsed = true;
    gv_overlordMorphUsed = true;
    gv_hatcherySelected = true;
    gv_overlordLarvaSelectPressed = true;
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("LarvaTrain", 2), false);
    libSwaC_gf_TurnSelectLarvaButtonHighlightOnOff(false);
    gf_RestoreButtonTooltip("Larva");
    gf_DestroyOverlordHatcheryHelper();
    UnitBehaviorAdd(EventUnitProgressUnit(), "Construction2x", EventUnitProgressUnit(), 1);
    TransmissionClear(gv_adjutantSelectLarvaMorphOverlord01);
    TransmissionClear(gv_adjutantSelectLarvaMorphOverlord02);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    if ((gv_overlordStarted_Transmission01 == c_invalidTransmissionId)) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab01|Line00046", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        gv_overlordStarted_Transmission01 = TransmissionLastSent();
        gv_s01_TransmissionCurrent01 = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
    }

    if ((gv_overlordStarted_Transmission02 == c_invalidTransmissionId)) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab01|Line00038", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        gv_overlordStarted_Transmission02 = TransmissionLastSent();
        gv_s01_TransmissionCurrent01 = TransmissionLastSent();
        libNtve_gf_DisplayScreenImage(1, "Assets\\Textures\\tutorialresourceshighlight.dds", c_triggerBlendModeAdd, 212, 134, c_anchorTopRight, 11, -34);
        libNtve_gf_PulseScreenImage(1, 1.75, 100.0, 0.0);
        TriggerExecute(gt_UIPulseAudio, true, false);
        TransmissionWait(TransmissionLastSent(), 0.0);
        libNtve_gf_StopPulsingScreenImage(1);
        libNtve_gf_HideScreenImage(false, 1);
        TriggerStop(gt_UIPulseAudio);
    }

    if ((gv_overlordStarted_Transmission03 == c_invalidTransmissionId)) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab01|Line00181", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        gv_overlordStarted_Transmission03 = TransmissionLastSent();
        gv_s01_TransmissionCurrent01 = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
    }

    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OverlordMorphStartedQ_Init () {
    gt_OverlordMorphStartedQ = TriggerCreate("gt_OverlordMorphStartedQ_Func");
    TriggerAddEventUnitTrainProgress(gt_OverlordMorphStartedQ, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overlord Morph Count Track
//--------------------------------------------------------------------------------------------------
bool gt_OverlordMorphCountTrack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_stage2DebugUsed == false))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUnitType() == "Overlord"))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_overlordMorphCount += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OverlordMorphCountTrack_Init () {
    gt_OverlordMorphCountTrack = TriggerCreate("gt_OverlordMorphCountTrack_Func");
    TriggerAddEventUnitTrainProgress(gt_OverlordMorphCountTrack, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overlord Morph UI Update
//--------------------------------------------------------------------------------------------------
bool gt_OverlordMorphUIUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_stage2DebugUsed == false))) {
            return false;
        }

        if (!((libHots_gf_DifficultyValueSwarmBoolean(true, true, false) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        if (((gv_gameOver == true) || (gv_inCinematic == true))) {
            return true;
        }

        if ((gv_overlordCompleted == true)) {
            gf_DestroyOverlordHatcheryHelper();
            UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("LarvaTrain", 2), false);
            libSwaC_gf_TurnSelectLarvaButtonHighlightOnOff(false);
            return true;
        }

        if ((gv_overlordMorphUsed == false)) {
            UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("LarvaTrain", 2), true);
            if ((libNtve_gf_UnitTypeIsSelected("Larva", gv_pLAYER_01_USER) == false)) {
                libSwaC_gf_TurnSelectLarvaButtonHighlightOnOff(true);
                if ((libNtve_gf_UnitTypeIsSelected("Hatchery", gv_pLAYER_01_USER) == false)) {
                    gf_CreateOverlordHatcheryHelper();
                }
                else {
                    gf_DestroyOverlordHatcheryHelper();
                }
            }
            else {
                libSwaC_gf_TurnSelectLarvaButtonHighlightOnOff(false);
                gf_DestroyOverlordHatcheryHelper();
            }
        }
        else {
            gf_DestroyOverlordHatcheryHelper();
            UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("LarvaTrain", 2), false);
            libSwaC_gf_TurnSelectLarvaButtonHighlightOnOff(false);
        }
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OverlordMorphUIUpdate_Init () {
    gt_OverlordMorphUIUpdate = TriggerCreate("gt_OverlordMorphUIUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overlord Hatchery Selected
//--------------------------------------------------------------------------------------------------
bool gt_OverlordHatcherySelected_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_stage2DebugUsed == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Hatchery"))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TransmissionClear(gv_adjutantSelectHatchery);
    gf_DestroyOverlordHatcheryHelper();
    gv_hatcherySelected = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OverlordHatcherySelected_Init () {
    gt_OverlordHatcherySelected = TriggerCreate("gt_OverlordHatcherySelected_Func");
    TriggerEnable(gt_OverlordHatcherySelected, false);
    TriggerAddEventUnitSelected(gt_OverlordHatcherySelected, null, gv_pLAYER_01_USER, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overlord Larva Selected
//--------------------------------------------------------------------------------------------------
bool gt_OverlordLarvaSelected_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_stage2DebugUsed == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitTypeIsSelected("Larva", gv_pLAYER_01_USER) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TransmissionClear(gv_adjutantSelectHatchery);
    TransmissionClear(gv_adjutantSelectLarvaMorphOverlord01);
    gf_DestroyOverlordHatcheryHelper();
    gv_overlordLarvaSelectPressed = true;
    gv_hatcherySelected = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OverlordLarvaSelected_Init () {
    gt_OverlordLarvaSelected = TriggerCreate("gt_OverlordLarvaSelected_Func");
    TriggerEnable(gt_OverlordLarvaSelected, false);
    TriggerAddEventUnitSelected(gt_OverlordLarvaSelected, null, gv_pLAYER_01_USER, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overlord Select Larva Clicked
//--------------------------------------------------------------------------------------------------
bool gt_OverlordSelectLarvaClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_stage2DebugUsed == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_overlordLarvaSelectPressed = true;
    TransmissionClear(gv_adjutantSelectLarvaMorphOverlord01);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OverlordSelectLarvaClicked_Init () {
    gt_OverlordSelectLarvaClicked = TriggerCreate("gt_OverlordSelectLarvaClicked_Func");
    TriggerEnable(gt_OverlordSelectLarvaClicked, false);
    TriggerAddEventButtonPressed(gt_OverlordSelectLarvaClicked, gv_pLAYER_01_USER, "Larva");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overlord Hatchery Help Select Q
//--------------------------------------------------------------------------------------------------
bool gt_OverlordHatcheryHelpSelectQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    fixed autoC2B548F7_at;
    fixed auto85D11977_at;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    autoC2B548F7_at = 0;
    while (!(((gv_gameOver == true) || (gv_hatcherySelected == true))) && autoC2B548F7_at <= gv_c_S01_InitialDelayTimeAmount) {
        Wait(0.5, c_timeGame);
        autoC2B548F7_at = autoC2B548F7_at + 0.5;
    }
    while (true) {
        if ((gv_gameOver == false) && (gv_hatcherySelected == false)) {
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
            libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab01|Line00136", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            gv_adjutantSelectHatchery = TransmissionLastSent();
            TransmissionWait(gv_adjutantSelectHatchery, 0.0);
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
            auto85D11977_at = 0;
            while (!(((gv_gameOver == true) || (gv_hatcherySelected == true))) && auto85D11977_at <= gv_c_S01_DelayTimeAmount) {
                Wait(0.5, c_timeGame);
                auto85D11977_at = auto85D11977_at + 0.5;
            }
        }
        else {
            return true;
        }
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OverlordHatcheryHelpSelectQ_Init () {
    gt_OverlordHatcheryHelpSelectQ = TriggerCreate("gt_OverlordHatcheryHelpSelectQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overlord Help Lines 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_OverlordHelpLines01Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    fixed auto19F50546_at;
    fixed auto91E68FD6_at;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    auto19F50546_at = 0;
    while (!(((gv_gameOver == true) || (gv_overlordLarvaSelectPressed == true))) && auto19F50546_at <= gv_c_S01_InitialDelayTimeAmount) {
        Wait(0.5, c_timeGame);
        auto19F50546_at = auto19F50546_at + 0.5;
    }
    while (true) {
        if ((gv_gameOver == false) && (gv_overlordLarvaSelectPressed == false)) {
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
            libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab01|Line00047", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            gv_adjutantSelectLarvaMorphOverlord01 = TransmissionLastSent();
            if ((libHots_gf_DifficultyValueSwarmBoolean(true, true, false) == true) && (UnitGroupCount(UnitGroupFilter("Hatchery", gv_pLAYER_01_USER, UnitGroupSelected(gv_pLAYER_01_USER), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
                libNtve_gf_DisplayScreenImage(1, "Assets\\Textures\\tutorialcommandcardhighlight.dds", c_triggerBlendModeAdd, 503, 348, c_anchorBottomRight, 5, -2);
                libNtve_gf_PulseScreenImage(1, 1.75, 100.0, 0.0);
                TriggerExecute(gt_UIPulseAudio, true, false);
            }

            TransmissionWait(TransmissionLastSent(), 0.0);
            libNtve_gf_StopPulsingScreenImage(1);
            libNtve_gf_HideScreenImage(false, 1);
            TriggerStop(gt_UIPulseAudio);
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
            auto91E68FD6_at = 0;
            while (!(((gv_gameOver == true) || (gv_overlordLarvaSelectPressed == true))) && auto91E68FD6_at <= gv_c_S01_DelayTimeAmount) {
                Wait(0.5, c_timeGame);
                auto91E68FD6_at = auto91E68FD6_at + 0.5;
            }
        }
        else {
            return true;
        }
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OverlordHelpLines01Q_Init () {
    gt_OverlordHelpLines01Q = TriggerCreate("gt_OverlordHelpLines01Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overlord Help Lines 02 Q
//--------------------------------------------------------------------------------------------------
bool gt_OverlordHelpLines02Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    fixed auto49597F39_at;
    fixed auto05807E82_at;
    fixed autoA6D39BB3_at;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    auto49597F39_at = 0;
    while (!(((gv_gameOver == true) || (gv_overlordMorphUsed == true))) && auto49597F39_at <= gv_c_S01_InitialDelayTimeAmount) {
        Wait(0.5, c_timeGame);
        auto49597F39_at = auto49597F39_at + 0.5;
    }
    while (true) {
        if ((gv_gameOver == false) && (gv_overlordMorphUsed == false)) {
            auto05807E82_at = 0;
            while (!(((gv_gameOver == true) || (gv_overlordMorphUsed == true) || (PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals) >= 100))) && auto05807E82_at <= gv_c_S01_DelayTimeAmount) {
                Wait(0.5, c_timeGame);
                auto05807E82_at = auto05807E82_at + 0.5;
            }
            if (((gv_gameOver == true) || (gv_overlordMorphUsed == true))) {
                return true;
            }

            if ((PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals) >= 100)) {
                libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
                libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab01|Line00130", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
                gv_adjutantSelectLarvaMorphOverlord02 = TransmissionLastSent();
                if ((libHots_gf_DifficultyValueSwarmBoolean(true, true, false) == true) && (UnitGroupCount(UnitGroupFilter("Larva", gv_pLAYER_01_USER, UnitGroupSelected(gv_pLAYER_01_USER), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
                    libNtve_gf_DisplayScreenImage(1, "Assets\\Textures\\tutorialcommandcardhighlight.dds", c_triggerBlendModeAdd, 503, 348, c_anchorBottomRight, 5, -2);
                    libNtve_gf_PulseScreenImage(1, 1.75, 100.0, 0.0);
                    TriggerExecute(gt_UIPulseAudio, true, false);
                }

                TransmissionWait(gv_adjutantSelectLarvaMorphOverlord02, 0.0);
                libNtve_gf_StopPulsingScreenImage(1);
                libNtve_gf_HideScreenImage(false, 1);
                TriggerStop(gt_UIPulseAudio);
                libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
                autoA6D39BB3_at = 0;
                while (!(((gv_gameOver == true) || (gv_overlordMorphUsed == true))) && autoA6D39BB3_at <= gv_c_S01_DelayTimeAmount) {
                    Wait(0.5, c_timeGame);
                    autoA6D39BB3_at = autoA6D39BB3_at + 0.5;
                }
            }

        }
        else {
            return true;
        }
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OverlordHelpLines02Q_Init () {
    gt_OverlordHelpLines02Q = TriggerCreate("gt_OverlordHelpLines02Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overlord Completed
//--------------------------------------------------------------------------------------------------
bool gt_OverlordCompleted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_anyDronesSelected;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_stage2DebugUsed == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "Overlord"))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_OverlordCancelled, false);
    TriggerEnable(gt_OverlordLimitQ, true);
    gv_overlordCompleted = true;
    libSwaC_gf_EnableDisableNeedOverlordInfo(true);
    TriggerExecute(gt_ObjectiveMorphOverlordComplete, true, true);
    TriggerExecute(gt_SpawningPoolTeachtoMutate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OverlordCompleted_Init () {
    gt_OverlordCompleted = TriggerCreate("gt_OverlordCompleted_Func");
    TriggerAddEventUnitTrainProgress(gt_OverlordCompleted, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overlord Cancelled
//--------------------------------------------------------------------------------------------------
bool gt_OverlordCancelled_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_overlordCanceled = true;
    gv_overlordMorphCount -= 1;
    if ((gv_overlordMorphCount > 0)) {
        return true;
    }

    TriggerQueueClear(c_triggerQueueKill);
    TransmissionClearAll();
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    libNtve_gf_StopPulsingScreenImage(1);
    libNtve_gf_HideScreenImage(false, 1);
    TriggerEnable(gt_OverlordTeachOverlord, true);
    TriggerEnable(gt_OverlordMorphStartedQ, true);
    TriggerEnable(gt_OverlordHatcheryHelpSelectQ, true);
    TriggerEnable(gt_OverlordHelpLines01Q, true);
    TriggerEnable(gt_OverlordHelpLines02Q, true);
    gv_hatcherySelected = false;
    gv_overlordLarvaSelectPressed = false;
    gv_overlordMorphUsed = false;
    TriggerExecute(gt_OverlordCancelledLineQ, true, false);
    TriggerExecute(gt_OverlordTeachOverlord, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OverlordCancelled_Init () {
    gt_OverlordCancelled = TriggerCreate("gt_OverlordCancelled_Func");
    TriggerAddEventUnitAbility(gt_OverlordCancelled, null, AbilityCommand("LarvaTrain", 2), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overlord Cancelled Line Q
//--------------------------------------------------------------------------------------------------
bool gt_OverlordCancelledLineQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    if ((gv_hatcheryCanceledCheck == true)) {
        libSwaC_gf_SendTransmissionCampaign(gv_vALERIAN, "zMission_Lab01|Line00087", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        gv_s01_TransmissionCurrent01 = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
    }
    else {
        libSwaC_gf_SendTransmissionCampaign(gv_vALERIAN, "zMission_Lab01|Line00073", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        gv_s01_TransmissionCurrent01 = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OverlordCancelledLineQ_Init () {
    gt_OverlordCancelledLineQ = TriggerCreate("gt_OverlordCancelledLineQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overlord Limit Q
//--------------------------------------------------------------------------------------------------
bool gt_OverlordLimitQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropSuppliesLimit) == PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropSuppliesUsed)))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab01|Line00125", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OverlordLimitQ_Init () {
    gt_OverlordLimitQ = TriggerCreate("gt_OverlordLimitQ_Func");
    TriggerEnable(gt_OverlordLimitQ, false);
    TriggerAddEventPlayerPropChange(gt_OverlordLimitQ, gv_pLAYER_01_USER, c_playerPropSuppliesUsed);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawning Pool Teach to Mutate
//--------------------------------------------------------------------------------------------------
bool gt_SpawningPoolTeachtoMutate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_anyDronesSelected;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_stage2DebugUsed == false))) {
            return false;
        }

        if (!((ObjectiveGetState(gv_objectiveDestroyDominionBase3222) == c_objectiveStateCompleted))) {
            return false;
        }

        if (!((ObjectiveGetState(gv_objectiveDestroyDominionBase322) == c_objectiveStateCompleted))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_SpawningPoolStartTransmissionQ, true, true);
    TriggerExecute(gt_ObjectiveMutateSpawningPoolCreateQ, true, false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("ZergBuild", 3), true);
    UnitKill(UnitFromId(898));
    if ((libHots_gf_DifficultyValueSwarmBoolean(true, true, false) == true)) {
        UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("ZergBuild", 3), true);
    }

    if ((libHots_gf_DifficultyValueSwarmBoolean(true, true, false) == true)) {
        if ((libNtve_gf_UnitTypeIsSelected("Drone", gv_pLAYER_01_USER) == true)) {
            TriggerExecute(gt_SpawningPoolDroneSelected, false, false);
        }
        else {
            gf_CreateSpawningPoolDroneHelper(false);
            CameraPan(gv_pLAYER_01_USER, PointWithOffset(PointFromId(514), 0.0, -2.0), 1.0, -1, 10, true);
        }
    }
    else {
        if ((libNtve_gf_UnitTypeIsSelected("Drone", gv_pLAYER_01_USER) == true)) {
            TriggerExecute(gt_SpawningPoolDroneSelected, false, false);
        }

    }
    TriggerExecute(gt_SpawningPoolMutationUIUpdate, true, false);
    TriggerEnable(gt_SpawningPoolDroneSelected, true);
    TriggerEnable(gt_SpawningPoolBasicMutationClicked, true);
    TriggerEnable(gt_SpawningPoolButtonClicked, true);
    TriggerEnable(gt_SpawningPoolLeftClick, true);
    TriggerExecute(gt_HideCompletedObjectives, true, false);
    TriggerExecute(gt_SpawningPoolHelpLines, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawningPoolTeachtoMutate_Init () {
    gt_SpawningPoolTeachtoMutate = TriggerCreate("gt_SpawningPoolTeachtoMutate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawning Pool Left - Click
//--------------------------------------------------------------------------------------------------
bool gt_SpawningPoolLeftClick_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_target;
    fixed lv_duration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_spawningPoolBuildingStarted == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libHots_gf_DifficultyValueSwarmBoolean(true, true, false) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_SpawningPoolLeftClickEnd, true);
    CameraLockInput(gv_pLAYER_01_USER, true);
    lv_target = PointWithOffset(PointFromId(164), 0.0, -1.5);
    lv_duration = MinF(0.5, (DistanceBetweenPoints(CameraGetTarget(gv_pLAYER_01_USER), lv_target) * 0.5));
    CameraPan(gv_pLAYER_01_USER, lv_target, lv_duration, -1, 10.0, false);
    Wait(lv_duration, c_timeGame);
    if ((gv_spawningPoolButtonClicked == false)) {
        gf_DisplayMouseClickHint(StringExternal("Param/Value/A42A137C"), PointFromId(164));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawningPoolLeftClick_Init () {
    gt_SpawningPoolLeftClick = TriggerCreate("gt_SpawningPoolLeftClick_Func");
    TriggerEnable(gt_SpawningPoolLeftClick, false);
    TriggerAddEventTargetModeUpdate(gt_SpawningPoolLeftClick, gv_pLAYER_01_USER, AbilityCommand("ZergBuild", 3), c_targetModeStateOn);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawning Pool Left - Click End
//--------------------------------------------------------------------------------------------------
bool gt_SpawningPoolLeftClickEnd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libHots_gf_DifficultyValueSwarmBoolean(true, true, false) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_SpawningPoolLeftClick, true);
    CameraLockInput(gv_pLAYER_01_USER, false);
    gf_CleanMouseClickHint();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawningPoolLeftClickEnd_Init () {
    gt_SpawningPoolLeftClickEnd = TriggerCreate("gt_SpawningPoolLeftClickEnd_Func");
    TriggerAddEventTargetModeUpdate(gt_SpawningPoolLeftClickEnd, gv_pLAYER_01_USER, AbilityCommand("ZergBuild", 3), c_targetModeStateOff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawning Pool Start Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_SpawningPoolStartTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_stage2DebugUsed == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_vALERIAN, "zMission_Lab01|Line00019", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_s01_TransmissionCurrent01 = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SendTransmissionCampaign(gv_vALERIAN, "zMission_Lab01|Line00048", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_s01_TransmissionCurrent01 = TransmissionLastSent();
    TransmissionWait(gv_s01_TransmissionCurrent01, 0.0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawningPoolStartTransmissionQ_Init () {
    gt_SpawningPoolStartTransmissionQ = TriggerCreate("gt_SpawningPoolStartTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawning Pool Mutation UI Update
//--------------------------------------------------------------------------------------------------
bool gt_SpawningPoolMutationUIUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_stage2DebugUsed == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        if (((gv_gameOver == true) || (gv_inCinematic == true))) {
            return true;
        }

        if ((gv_spawningPoolBuildingCompleted == true)) {
            gf_DestroySpawningPoolDroneHelper();
            gf_DestroySpawningPoolHelper();
            UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("ZergBuild", 3), false);
            return true;
        }

        if ((gv_spawningPoolBuildingStarted == false)) {
            if ((libHots_gf_DifficultyValueSwarmBoolean(true, true, false) == true)) {
                UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("ZergBuild", 3), true);
            }

            if ((libNtve_gf_UnitTypeIsSelected("Drone", gv_pLAYER_01_USER) == false)) {
                gf_CreateSpawningPoolDroneHelper(true);
                gf_DestroySpawningPoolHelper();
            }
            else {
                gf_DestroySpawningPoolDroneHelper();
                gf_CreateSpawningPoolHelper();
            }
        }
        else {
            gf_DestroySpawningPoolDroneHelper();
            gf_DestroySpawningPoolHelper();
            UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("ZergBuild", 3), false);
        }
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawningPoolMutationUIUpdate_Init () {
    gt_SpawningPoolMutationUIUpdate = TriggerCreate("gt_SpawningPoolMutationUIUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawning Pool Drone Selected
//--------------------------------------------------------------------------------------------------
bool gt_SpawningPoolDroneSelected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_stage2DebugUsed == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitTypeIsSelected("Drone", gv_pLAYER_01_USER) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_spawningPoolDroneSelected = true;
    TransmissionClear(gv_adjutantMorphPool01);
    gf_DestroySpawningPoolDroneHelper();
    if ((gv_spawningPoolPlaceHolder != null)) {
        return true;
    }

    if ((libHots_gf_DifficultyValueSwarmBoolean(true, true, false) == true)) {
        CameraPan(gv_pLAYER_01_USER, PointWithOffset(PointFromId(164), 0.0, -2.0), 2.0, -1, 10, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawningPoolDroneSelected_Init () {
    gt_SpawningPoolDroneSelected = TriggerCreate("gt_SpawningPoolDroneSelected_Func");
    TriggerEnable(gt_SpawningPoolDroneSelected, false);
    TriggerAddEventUnitSelected(gt_SpawningPoolDroneSelected, null, gv_pLAYER_01_USER, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawning Pool Basic Mutation Clicked
//--------------------------------------------------------------------------------------------------
bool gt_SpawningPoolBasicMutationClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_stage2DebugUsed == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_SpawningPoolDroneSelected, false);
    TriggerEnable(TriggerGetCurrent(), false);
    gv_spawningPoolDroneSelected = true;
    gv_spawningPoolBasicMutationClicked = true;
    TransmissionClear(gv_adjutantMorphPool01);
    TransmissionClear(gv_adjutantMorphPool02);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawningPoolBasicMutationClicked_Init () {
    gt_SpawningPoolBasicMutationClicked = TriggerCreate("gt_SpawningPoolBasicMutationClicked_Func");
    TriggerEnable(gt_SpawningPoolBasicMutationClicked, false);
    TriggerAddEventButtonPressed(gt_SpawningPoolBasicMutationClicked, gv_pLAYER_01_USER, "ZergBuild");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawning Pool Button Clicked
//--------------------------------------------------------------------------------------------------
bool gt_SpawningPoolButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_stage2DebugUsed == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_SpawningPoolDroneSelected, false);
    TriggerEnable(gt_SpawningPoolBasicMutationClicked, false);
    TriggerEnable(TriggerGetCurrent(), false);
    gv_spawningPoolDroneSelected = true;
    gv_spawningPoolBasicMutationClicked = true;
    gv_spawningPoolButtonClicked = true;
    TransmissionClear(gv_adjutantMorphPool01);
    TransmissionClear(gv_adjutantMorphPool02);
    TransmissionClear(gv_adjutantMorphPool03);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawningPoolButtonClicked_Init () {
    gt_SpawningPoolButtonClicked = TriggerCreate("gt_SpawningPoolButtonClicked_Func");
    TriggerEnable(gt_SpawningPoolButtonClicked, false);
    TriggerAddEventButtonPressed(gt_SpawningPoolButtonClicked, gv_pLAYER_01_USER, "SpawningPool");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawning Pool Help Lines
//--------------------------------------------------------------------------------------------------
bool gt_SpawningPoolHelpLines_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_SpawningPoolLine01Q, true, true);
    TriggerExecute(gt_SpawningPoolLine02Q, true, true);
    TriggerExecute(gt_SpawningPoolLine03Q, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawningPoolHelpLines_Init () {
    gt_SpawningPoolHelpLines = TriggerCreate("gt_SpawningPoolHelpLines_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawning Pool Line 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_SpawningPoolLine01Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    fixed autoE3578C48_at;
    fixed auto12B408D8_at;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    autoE3578C48_at = 0;
    while (!(((gv_gameOver == true) || (gv_spawningPoolDroneSelected == true))) && autoE3578C48_at <= gv_c_S01_InitialDelayTimeAmount) {
        Wait(0.5, c_timeGame);
        autoE3578C48_at = autoE3578C48_at + 0.5;
    }
    while (true) {
        if ((gv_gameOver == false) && (gv_spawningPoolDroneSelected == false)) {
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
            libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab01|Line00039", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            gv_adjutantMorphPool01 = TransmissionLastSent();
            TransmissionWait(TransmissionLastSent(), 0.0);
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
            auto12B408D8_at = 0;
            while (!(((gv_gameOver == true) || (gv_spawningPoolDroneSelected == true))) && auto12B408D8_at <= gv_c_S01_DelayTimeAmount) {
                Wait(0.5, c_timeGame);
                auto12B408D8_at = auto12B408D8_at + 0.5;
            }
        }
        else {
            return true;
        }
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawningPoolLine01Q_Init () {
    gt_SpawningPoolLine01Q = TriggerCreate("gt_SpawningPoolLine01Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawning Pool Line 02 Q
//--------------------------------------------------------------------------------------------------
bool gt_SpawningPoolLine02Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    fixed auto78376C72_at;
    fixed autoE64215B0_at;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    auto78376C72_at = 0;
    while (!(((gv_gameOver == true) || (gv_spawningPoolBasicMutationClicked == true))) && auto78376C72_at <= gv_c_S01_InitialDelayTimeAmount) {
        Wait(0.5, c_timeGame);
        auto78376C72_at = auto78376C72_at + 0.5;
    }
    while (true) {
        if ((gv_gameOver == false) && (gv_spawningPoolBasicMutationClicked == false)) {
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
            libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab01|Line00203", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            gv_adjutantMorphPool02 = TransmissionLastSent();
            if ((libHots_gf_DifficultyValueSwarmBoolean(true, true, false) == true) && (UnitGroupCount(UnitGroupFilter("Drone", gv_pLAYER_01_USER, UnitGroupSelected(gv_pLAYER_01_USER), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
                libNtve_gf_DisplayScreenImage(1, "Assets\\Textures\\tutorialcommandcardhighlight.dds", c_triggerBlendModeAdd, 503, 348, c_anchorBottomRight, 5, -2);
                libNtve_gf_PulseScreenImage(1, 1.75, 100.0, 0.0);
                TriggerExecute(gt_UIPulseAudio, true, false);
            }

            TransmissionWait(TransmissionLastSent(), 0.0);
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
            libNtve_gf_StopPulsingScreenImage(1);
            libNtve_gf_HideScreenImage(false, 1);
            TriggerStop(gt_UIPulseAudio);
            autoE64215B0_at = 0;
            while (!(((gv_gameOver == true) || (gv_spawningPoolBasicMutationClicked == true))) && autoE64215B0_at <= gv_c_S01_DelayTimeAmount) {
                Wait(0.5, c_timeGame);
                autoE64215B0_at = autoE64215B0_at + 0.5;
            }
        }
        else {
            return true;
        }
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawningPoolLine02Q_Init () {
    gt_SpawningPoolLine02Q = TriggerCreate("gt_SpawningPoolLine02Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawning Pool Line 03 Q
//--------------------------------------------------------------------------------------------------
bool gt_SpawningPoolLine03Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    fixed autoEA851498_at;
    fixed autoFC047771_at;
    fixed autoB62B43DF_at;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    autoEA851498_at = 0;
    while (!(((gv_gameOver == true) || (gv_spawningPoolButtonClicked == true))) && autoEA851498_at <= gv_c_S01_InitialDelayTimeAmount) {
        Wait(0.5, c_timeGame);
        autoEA851498_at = autoEA851498_at + 0.5;
    }
    while (true) {
        if ((gv_gameOver == false) && (gv_spawningPoolButtonClicked == false)) {
            autoFC047771_at = 0;
            while (!(((gv_gameOver == true) || (gv_spawningPoolButtonClicked == true) || (PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals) >= 200))) && autoFC047771_at <= gv_c_S01_DelayTimeAmount) {
                Wait(0.5, c_timeGame);
                autoFC047771_at = autoFC047771_at + 0.5;
            }
            if (((gv_gameOver == true) || (gv_spawningPoolButtonClicked == true))) {
                return true;
            }

            if ((PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals) >= 200)) {
                libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
                libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab01|Line00204", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
                gv_adjutantMorphPool03 = TransmissionLastSent();
                if ((libHots_gf_DifficultyValueSwarmBoolean(true, true, false) == true) && (UnitGroupCount(UnitGroupFilter("Drone", gv_pLAYER_01_USER, UnitGroupSelected(gv_pLAYER_01_USER), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
                    libNtve_gf_DisplayScreenImage(1, "Assets\\Textures\\tutorialcommandcardhighlight.dds", c_triggerBlendModeAdd, 503, 348, c_anchorBottomRight, 5, -2);
                    libNtve_gf_PulseScreenImage(1, 1.75, 100.0, 0.0);
                    TriggerExecute(gt_UIPulseAudio, true, false);
                }

                TransmissionWait(TransmissionLastSent(), 0.0);
                libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
                libNtve_gf_StopPulsingScreenImage(1);
                libNtve_gf_HideScreenImage(false, 1);
                TriggerStop(gt_UIPulseAudio);
                autoB62B43DF_at = 0;
                while (!(((gv_gameOver == true) || (gv_spawningPoolButtonClicked == true))) && autoB62B43DF_at <= gv_c_S01_DelayTimeAmount) {
                    Wait(0.5, c_timeGame);
                    autoB62B43DF_at = autoB62B43DF_at + 0.5;
                }
            }

        }
        else {
            return true;
        }
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawningPoolLine03Q_Init () {
    gt_SpawningPoolLine03Q = TriggerCreate("gt_SpawningPoolLine03Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawning Pool Mutation Started
//--------------------------------------------------------------------------------------------------
bool gt_SpawningPoolMutationStarted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_stage2DebugUsed == false))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUnitType() == "SpawningPool"))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_spawningPoolDroneSelected = true;
    gv_spawningPoolBasicMutationClicked = true;
    gv_spawningPoolButtonClicked = true;
    gv_spawningPoolBuildingStarted = true;
    gf_DestroySpawningPoolDroneHelper();
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("ZergBuild", 3), false);
    gf_DestroySpawningPoolHelper();
    gf_CleanMouseClickHint();
    TriggerEnable(gt_SpawningPoolLeftClick, false);
    TriggerExecute(gt_SpawningPoolMutationStartedQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawningPoolMutationStarted_Init () {
    gt_SpawningPoolMutationStarted = TriggerCreate("gt_SpawningPoolMutationStarted_Func");
    TriggerAddEventUnitConstructProgress(gt_SpawningPoolMutationStarted, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawning Pool Mutation Started Q
//--------------------------------------------------------------------------------------------------
bool gt_SpawningPoolMutationStartedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_stage2DebugUsed == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    Wait(0.5, c_timeGame);
    if ((gv_spawningPoolMutationLine1 == c_invalidTransmissionId)) {
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab01|Line00050", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        gv_spawningPoolMutationLine1 = TransmissionLastSent();
        gv_s01_TransmissionCurrent01 = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    Wait(3.0, c_timeGame);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    if ((gv_spawningPoolMutationLine2 == c_invalidTransmissionId)) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab01|Line00100", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        gv_spawningPoolMutationLine2 = TransmissionLastSent();
        gv_s01_TransmissionCurrent01 = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
    }

    if ((gv_spawningPoolMutationLine3 == c_invalidTransmissionId)) {
        libSwaC_gf_SendTransmissionCampaign(gv_vALERIAN, "zMission_Lab01|Line00101", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        TriggerEnable(TriggerGetCurrent(), false);
        gv_spawningPoolMutationLine3 = TransmissionLastSent();
        gv_s01_TransmissionCurrent02 = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
    }

    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawningPoolMutationStartedQ_Init () {
    gt_SpawningPoolMutationStartedQ = TriggerCreate("gt_SpawningPoolMutationStartedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawning Pool Mutation Completed Q
//--------------------------------------------------------------------------------------------------
bool gt_SpawningPoolMutationCompletedQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_anyDronesSelected;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_stage2DebugUsed == false))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUnitType() == "SpawningPool"))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_SpawningPoolCancelled, false);
    TriggerEnable(gt_SpawningPoolLeftClick, false);
    TriggerExecute(gt_ObjectiveMutateSpawningPoolComplete, true, true);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab01|Line00053", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_s01_TransmissionCurrent01 = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SendTransmissionCampaign(gv_vALERIAN, "zMission_Lab01|Line00188", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_s01_TransmissionCurrent02 = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab01|Line00187", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_s01_TransmissionCurrent01 = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    TriggerExecute(gt_ZerglingTeachQ, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawningPoolMutationCompletedQ_Init () {
    gt_SpawningPoolMutationCompletedQ = TriggerCreate("gt_SpawningPoolMutationCompletedQ_Func");
    TriggerAddEventUnitConstructProgress(gt_SpawningPoolMutationCompletedQ, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawning Pool Cancelled
//--------------------------------------------------------------------------------------------------
bool gt_SpawningPoolCancelled_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "SpawningPool"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_spawningPoolCancelled = true;
    TriggerStop(gt_SpawningPoolMutationStarted);
    TriggerQueueClear(c_triggerQueueKill);
    TransmissionClearAll();
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    libNtve_gf_StopPulsingScreenImage(1);
    libNtve_gf_HideScreenImage(false, 1);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerEnable(gt_SpawningPoolTeachtoMutate, true);
    TriggerEnable(gt_SpawningPoolDroneSelected, true);
    TriggerEnable(gt_SpawningPoolBasicMutationClicked, true);
    TriggerEnable(gt_SpawningPoolButtonClicked, true);
    TriggerEnable(gt_SpawningPoolHelpLines, true);
    TriggerEnable(gt_SpawningPoolLine01Q, true);
    TriggerEnable(gt_SpawningPoolLine02Q, true);
    TriggerEnable(gt_SpawningPoolLine03Q, true);
    TriggerEnable(gt_SpawningPoolMutationStarted, true);
    TriggerEnable(gt_SpawningPoolMutationCompletedQ, true);
    gv_spawningPoolDroneSelected = false;
    gv_spawningPoolBasicMutationClicked = false;
    gv_spawningPoolButtonClicked = false;
    gv_spawningPoolBuildingStarted = false;
    TriggerExecute(gt_SpawningPoolCancelledLineQ, true, false);
    TriggerExecute(gt_SpawningPoolTeachtoMutate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawningPoolCancelled_Init () {
    gt_SpawningPoolCancelled = TriggerCreate("gt_SpawningPoolCancelled_Func");
    TriggerAddEventUnitOrder(gt_SpawningPoolCancelled, null, AbilityCommand("BuildInProgress", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawning Pool Cancelled Line Q
//--------------------------------------------------------------------------------------------------
bool gt_SpawningPoolCancelledLineQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_hatcheryCanceledCheck == true) && (gv_overlordCanceled == true)) {
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libSwaC_gf_SendTransmissionCampaign(gv_vALERIAN, "zMission_Lab01|Line00132", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        gv_s01_TransmissionCurrent01 = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }
    else {
        if (((gv_hatcheryCanceledCheck == true) || (gv_overlordCanceled == true))) {
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
            libSwaC_gf_SendTransmissionCampaign(gv_vALERIAN, "zMission_Lab01|Line00134", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            gv_s01_TransmissionCurrent01 = TransmissionLastSent();
            TransmissionWait(TransmissionLastSent(), 0.0);
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        }
        else {
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
            libSwaC_gf_SendTransmissionCampaign(gv_vALERIAN, "zMission_Lab01|Line00123", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            gv_s01_TransmissionCurrent01 = TransmissionLastSent();
            TransmissionWait(TransmissionLastSent(), 0.0);
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        }
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawningPoolCancelledLineQ_Init () {
    gt_SpawningPoolCancelledLineQ = TriggerCreate("gt_SpawningPoolCancelledLineQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zergling Teach Q
//--------------------------------------------------------------------------------------------------
bool gt_ZerglingTeachQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_noHatcheryReticule;
    text lv_newSelectLarvaTooltip;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_newSelectLarvaTooltip = StringExternal("Param/Value/DC7637C1");

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_stage2DebugUsed == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("LarvaTrain", 1), true);
    if ((libHots_gf_DifficultyValueSwarmBoolean(true, true, false) == true)) {
        UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("LarvaTrain", 1), true);
        libSwaC_gf_TurnSelectLarvaButtonHighlightOnOff(true);
        gf_ChangeButtonTooltip("Larva", "Param/Value/DC7637C1");
    }

    TriggerExecute(gt_ObjectiveMorphZerglingsCreate, true, true);
    TriggerQueueExit();
    if (((libNtve_gf_UnitTypeIsSelected("Larva", gv_pLAYER_01_USER) == true) || (libNtve_gf_UnitTypeIsSelected("Hatchery", gv_pLAYER_01_USER) == true))) {
        gv_zerglingHatcherySelected = true;
    }

    TriggerExecute(gt_ZerglingMorphUIUpdate, true, false);
    TriggerEnable(gt_ZerglingHatcherySelected, true);
    TriggerEnable(gt_ZerglingLarvaSelected, true);
    TriggerEnable(gt_ZerglingSelectLarvaClicked, true);
    TriggerExecute(gt_HideCompletedObjectives, true, false);
    TriggerExecute(gt_ZerglingHelpLines, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZerglingTeachQ_Init () {
    gt_ZerglingTeachQ = TriggerCreate("gt_ZerglingTeachQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zergling Morph Started
//--------------------------------------------------------------------------------------------------
bool gt_ZerglingMorphStarted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_stage2DebugUsed == false))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUnitType() == "Zergling"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_zerglingButtonClicked = true;
    gv_zerglingHatcherySelected = true;
    gv_zerglingSelectLarvaButtonPressed = true;
    gv_zerglingLarvaSelected = true;
    TransmissionClear(gv_adjutantMorphZerglings);
    libNtve_gf_KillModel(gv_hatcheryActor);
    TextTagDestroy(gv_hatcheryText);
    gv_zerglingCount += 1;
    TriggerExecute(gt_ZerglingMorphStartedQ, true, false);
    if ((gv_zerglingCount >= 6)) {
        gv_zerglingMorphDone = true;
        gf_RestoreButtonTooltip("Larva");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZerglingMorphStarted_Init () {
    gt_ZerglingMorphStarted = TriggerCreate("gt_ZerglingMorphStarted_Func");
    TriggerAddEventUnitTrainProgress(gt_ZerglingMorphStarted, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zergling Morph Started Q
//--------------------------------------------------------------------------------------------------
bool gt_ZerglingMorphStartedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.0, c_timeGame);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_vALERIAN, "zMission_Lab01|Line00176", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_s01_TransmissionCurrent01 = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab01|Line00186", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_s01_TransmissionCurrent02 = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZerglingMorphStartedQ_Init () {
    gt_ZerglingMorphStartedQ = TriggerCreate("gt_ZerglingMorphStartedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zergling Morph UI Update
//--------------------------------------------------------------------------------------------------
bool gt_ZerglingMorphUIUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_stage2DebugUsed == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libHots_gf_DifficultyValueSwarmBoolean(true, true, false) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        if (((gv_gameOver == true) || (gv_inCinematic == true))) {
            return true;
        }

        if ((ObjectiveGetState(gv_objectiveDestroyDominionBase323) == c_objectiveStateCompleted)) {
            gf_DestroyZerglingHatcheryHelper();
            UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("LarvaTrain", 1), false);
            libSwaC_gf_TurnSelectLarvaButtonHighlightOnOff(false);
            return true;
        }

        if ((gv_zerglingMorphDone == false)) {
            UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("LarvaTrain", 1), true);
            if ((libNtve_gf_UnitTypeIsSelected("Larva", gv_pLAYER_01_USER) == false)) {
                libSwaC_gf_TurnSelectLarvaButtonHighlightOnOff(true);
                if ((libNtve_gf_UnitTypeIsSelected("Hatchery", gv_pLAYER_01_USER) == false)) {
                    gf_CreateZerglingHatcheryHelper();
                }
                else {
                    gf_DestroyZerglingHatcheryHelper();
                }
            }
            else {
                libSwaC_gf_TurnSelectLarvaButtonHighlightOnOff(false);
                gf_DestroyZerglingHatcheryHelper();
            }
        }
        else {
            gf_DestroyZerglingHatcheryHelper();
            UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("LarvaTrain", 1), false);
            libSwaC_gf_TurnSelectLarvaButtonHighlightOnOff(false);
        }
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZerglingMorphUIUpdate_Init () {
    gt_ZerglingMorphUIUpdate = TriggerCreate("gt_ZerglingMorphUIUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zergling Hatchery Selected
//--------------------------------------------------------------------------------------------------
bool gt_ZerglingHatcherySelected_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Hatchery"))) {
            return false;
        }

        if (!((gv_stage2DebugUsed == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TransmissionClear(gv_adjutantSelectHatchery);
    libNtve_gf_KillModel(gv_hatcheryActor);
    TextTagDestroy(gv_hatcheryText);
    gv_zerglingHatcherySelected = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZerglingHatcherySelected_Init () {
    gt_ZerglingHatcherySelected = TriggerCreate("gt_ZerglingHatcherySelected_Func");
    TriggerEnable(gt_ZerglingHatcherySelected, false);
    TriggerAddEventUnitSelected(gt_ZerglingHatcherySelected, null, gv_pLAYER_01_USER, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zergling Larva Selected
//--------------------------------------------------------------------------------------------------
bool gt_ZerglingLarvaSelected_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Larva"))) {
            return false;
        }

        if (!((gv_stage2DebugUsed == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TransmissionClear(gv_adjutantSelectHatchery);
    TransmissionClear(gv_adjutantSelectLarvaMorphZerglings);
    TriggerExecute(gt_HatcheryPlacementRemove, true, false);
    libNtve_gf_KillModel(gv_hatcheryActor);
    TextTagDestroy(gv_hatcheryText);
    gv_zerglingHatcherySelected = true;
    gv_zerglingLarvaSelected = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZerglingLarvaSelected_Init () {
    gt_ZerglingLarvaSelected = TriggerCreate("gt_ZerglingLarvaSelected_Func");
    TriggerEnable(gt_ZerglingLarvaSelected, false);
    TriggerAddEventUnitSelected(gt_ZerglingLarvaSelected, null, gv_pLAYER_01_USER, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zergling Select Larva Clicked
//--------------------------------------------------------------------------------------------------
bool gt_ZerglingSelectLarvaClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_stage2DebugUsed == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TransmissionClear(gv_adjutantSelectHatchery);
    TransmissionClear(gv_adjutantSelectLarvaMorphZerglings);
    gv_zerglingSelectLarvaButtonPressed = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZerglingSelectLarvaClicked_Init () {
    gt_ZerglingSelectLarvaClicked = TriggerCreate("gt_ZerglingSelectLarvaClicked_Func");
    TriggerEnable(gt_ZerglingSelectLarvaClicked, false);
    TriggerAddEventButtonPressed(gt_ZerglingSelectLarvaClicked, gv_pLAYER_01_USER, "Larva");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zergling Help Lines
//--------------------------------------------------------------------------------------------------
bool gt_ZerglingHelpLines_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ZerglingHatcheryHelpSelectQ, true, true);
    TriggerExecute(gt_ZerglingLine01Q, true, true);
    TriggerExecute(gt_ZerglingLine02Q, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZerglingHelpLines_Init () {
    gt_ZerglingHelpLines = TriggerCreate("gt_ZerglingHelpLines_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zergling Hatchery Help Select Q
//--------------------------------------------------------------------------------------------------
bool gt_ZerglingHatcheryHelpSelectQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    fixed autoC5CDD029_at;
    fixed autoA3213FA1_at;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    autoC5CDD029_at = 0;
    while (!(((gv_gameOver == true) || (gv_zerglingHatcherySelected == true))) && autoC5CDD029_at <= gv_c_S01_InitialDelayTimeAmount) {
        Wait(0.5, c_timeGame);
        autoC5CDD029_at = autoC5CDD029_at + 0.5;
    }
    while (true) {
        if ((gv_gameOver == false) && (gv_zerglingHatcherySelected == false)) {
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
            libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab01|Line00136", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            gv_adjutantSelectHatchery = TransmissionLastSent();
            TransmissionWait(gv_adjutantSelectHatchery, 0.0);
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
            autoA3213FA1_at = 0;
            while (!(((gv_gameOver == true) || (gv_zerglingHatcherySelected == true))) && autoA3213FA1_at <= gv_c_S01_DelayTimeAmount) {
                Wait(0.5, c_timeGame);
                autoA3213FA1_at = autoA3213FA1_at + 0.5;
            }
        }
        else {
            return true;
        }
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZerglingHatcheryHelpSelectQ_Init () {
    gt_ZerglingHatcheryHelpSelectQ = TriggerCreate("gt_ZerglingHatcheryHelpSelectQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zergling Line 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_ZerglingLine01Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    fixed auto6C8A9651_at;
    fixed auto3F78896A_at;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    auto6C8A9651_at = 0;
    while (!(((gv_gameOver == true) || (gv_zerglingLarvaSelected == true))) && auto6C8A9651_at <= gv_c_S01_InitialDelayTimeAmount) {
        Wait(0.5, c_timeGame);
        auto6C8A9651_at = auto6C8A9651_at + 0.5;
    }
    while (true) {
        if ((gv_gameOver == false) && (gv_zerglingLarvaSelected == false)) {
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
            libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab01|Line00017", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            gv_adjutantSelectLarvaMorphZerglings = TransmissionLastSent();
            if ((libHots_gf_DifficultyValueSwarmBoolean(true, true, false) == true) && (UnitGroupCount(UnitGroupFilter("Hatchery", gv_pLAYER_01_USER, UnitGroupSelected(gv_pLAYER_01_USER), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
                libNtve_gf_DisplayScreenImage(1, "Assets\\Textures\\tutorialcommandcardhighlight.dds", c_triggerBlendModeAdd, 503, 348, c_anchorBottomRight, 5, -2);
                libNtve_gf_PulseScreenImage(1, 1.75, 100.0, 0.0);
                TriggerExecute(gt_UIPulseAudio, true, false);
            }

            TransmissionWait(TransmissionLastSent(), 0.0);
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
            libNtve_gf_StopPulsingScreenImage(1);
            libNtve_gf_HideScreenImage(false, 1);
            TriggerStop(gt_UIPulseAudio);
            auto3F78896A_at = 0;
            while (!(((gv_gameOver == true) || (gv_zerglingLarvaSelected == true))) && auto3F78896A_at <= gv_c_S01_DelayTimeAmount) {
                Wait(0.5, c_timeGame);
                auto3F78896A_at = auto3F78896A_at + 0.5;
            }
        }
        else {
            return true;
        }
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZerglingLine01Q_Init () {
    gt_ZerglingLine01Q = TriggerCreate("gt_ZerglingLine01Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zergling Line 02 Q
//--------------------------------------------------------------------------------------------------
bool gt_ZerglingLine02Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    fixed autoEA3380E5_at;
    fixed autoE5F97B3C_at;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    autoEA3380E5_at = 0;
    while (!(((gv_gameOver == true) || (gv_zerglingButtonClicked == true))) && autoEA3380E5_at <= gv_c_S01_InitialDelayTimeAmount) {
        Wait(0.5, c_timeGame);
        autoEA3380E5_at = autoEA3380E5_at + 0.5;
    }
    while (true) {
        if ((gv_gameOver == false) && (gv_zerglingButtonClicked == false)) {
            while (!(((gv_gameOver == true) || (libNtve_gf_UnitTypeIsSelected("Larva", gv_pLAYER_01_USER) == true)))) {
                Wait(1.0, c_timeGame);
            }
            if (((gv_gameOver == true) || (gv_zerglingButtonClicked == true))) {
                return true;
            }

            libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
            libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab01|Line00202", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            gv_adjutantMorphZerglings = TransmissionLastSent();
            if ((libHots_gf_DifficultyValueSwarmBoolean(true, true, false) == true) && (UnitGroupCount(UnitGroupFilter("Larva", gv_pLAYER_01_USER, UnitGroupSelected(gv_pLAYER_01_USER), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
                libNtve_gf_DisplayScreenImage(1, "Assets\\Textures\\tutorialcommandcardhighlight.dds", c_triggerBlendModeAdd, 503, 348, c_anchorBottomRight, 5, -2);
                libNtve_gf_PulseScreenImage(1, 1.75, 100.0, 0.0);
                TriggerExecute(gt_UIPulseAudio, true, false);
            }

            TransmissionWait(TransmissionLastSent(), 0.0);
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
            libNtve_gf_StopPulsingScreenImage(1);
            libNtve_gf_HideScreenImage(false, 1);
            TriggerStop(gt_UIPulseAudio);
            autoE5F97B3C_at = 0;
            while (!(((gv_gameOver == true) || (gv_zerglingButtonClicked == true))) && autoE5F97B3C_at <= gv_c_S01_DelayTimeAmount) {
                Wait(0.5, c_timeGame);
                autoE5F97B3C_at = autoE5F97B3C_at + 0.5;
            }
        }
        else {
            return true;
        }
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZerglingLine02Q_Init () {
    gt_ZerglingLine02Q = TriggerCreate("gt_ZerglingLine02Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zergling Cancelled
//--------------------------------------------------------------------------------------------------
bool gt_ZerglingCancelled_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_stage2DebugUsed == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_zerglingCount -= 2;
    if ((gv_zerglingCount <= 5)) {
        gv_zerglingMorphDone = false;
        if ((libHots_gf_DifficultyValueSwarmBoolean(true, true, false) == true)) {
            gf_ChangeButtonTooltip("Larva", "Param/Value/DC7637C1");
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZerglingCancelled_Init () {
    gt_ZerglingCancelled = TriggerCreate("gt_ZerglingCancelled_Func");
    TriggerAddEventUnitAbility(gt_ZerglingCancelled, null, AbilityCommand("LarvaTrain", 1), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overlord Tries to Leave
//--------------------------------------------------------------------------------------------------
bool gt_OverlordTriestoLeave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Overlord"))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), libSwaC_ge_CampaignMessageType_Warning, StringExternal("Param/Value/7620881A"), libSwaC_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(15.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OverlordTriestoLeave_Init () {
    gt_OverlordTriestoLeave = TriggerCreate("gt_OverlordTriestoLeave_Func");
    TriggerEnable(gt_OverlordTriestoLeave, false);
    TriggerAddEventUnitRegion(gt_OverlordTriestoLeave, null, RegionFromId(8), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Valerian Attack Q
//--------------------------------------------------------------------------------------------------
bool gt_ValerianAttackQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Zergling"))) {
            return false;
        }

        if (!(((OrderGetTargetPoint(EventUnitOrder()) != null) && (RegionContainsPoint(RegionCircle(UnitGetPosition(gv_vALERIAN), 1.0), OrderGetTargetPoint(EventUnitOrder())) == true)))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(22)) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    if ((UnitGroupCount(UnitGroup("Zergling", gv_pLAYER_01_USER, RegionFromId(22), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1)) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab01|Line00209", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab01|Line00210", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(20.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ValerianAttackQ_Init () {
    gt_ValerianAttackQ = TriggerCreate("gt_ValerianAttackQ_Func");
    TriggerEnable(gt_ValerianAttackQ, false);
    TriggerAddEventUnitOrder(gt_ValerianAttackQ, null, AbilityCommand("attack", 0));
    TriggerAddEventUnitOrder(gt_ValerianAttackQ, null, AbilityCommand("move", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game - Stage 02 Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameStage02Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libLbty_gf_AutoRevealRegion(RegionFromId(38), RegionFromId(38), gv_pLAYER_01_USER);
    TriggerExecute(gt_Platform02ShowSentryBots, true, false);
    libSwaC_gf_EnableDisableNeedOverlordInfo(false);
    TriggerEnable(gt_OverlordTriestoLeave, true);
    TriggerEnable(gt_ValerianAttackQ, true);
    Wait(3.0, c_timeGame);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveDestroyEradicatorCreate, true, true);
    TriggerExecute(gt_EradicatorPing, true, false);
    TriggerQueueExit();
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_Platform02AlertQ, true, true);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", PointFromId(15), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    gv_zerglingPing = PingLastCreated();
    PingSetTooltip(gv_zerglingPing, StringExternal("Param/Value/0146A287"));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/4CC29619"), null, PointFromId(15));
    if ((libHots_gf_DifficultyValueSwarmBoolean(true, false, false) == true) && (gv_arrowShown01 == false)) {
        libNtve_gf_CreateModelWithPointFacing("GuideArrow", PointFromId(147));
        gv_arrow01 = libNtve_gf_ActorLastCreated();
        ActorSend(gv_arrow01, "SetTeamColor 255,0,0 0,0,0");
        ActorSend(gv_arrow01, "SetTintColor 255,100,100");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameStage02Q_Init () {
    gt_StartGameStage02Q = TriggerCreate("gt_StartGameStage02Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Platform02 Show Sentry Bots
//--------------------------------------------------------------------------------------------------
bool gt_Platform02ShowSentryBots_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_centerBot;

    // Automatic Variable Declarations
    unitgroup autoEEB14B43_g;
    int autoEEB14B43_u;
    unit autoEEB14B43_var;

    // Variable Initialization
    lv_centerBot = UnitFromId(416);

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((libHots_gf_DifficultyValueSwarmBoolean(true, true, false) == true)) {
        gf_CreateHelperonUnit(StringToText(""), lv_centerBot, libSwaC_ge_CampaginReticleType_TerranEnemy, libSwaC_ge_CampaginReticleSize_Medium, 0.0);
    }

    libHots_gf_StoreActorForUnit(lv_centerBot, 1, libNtve_gf_ActorLastCreated());
    libHots_gf_StoreTextTagForUnit(lv_centerBot, 1, TextTagLastCreated());
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(17), 0.0, false);
    autoEEB14B43_g = UnitGroup("UmojanLabMicrobot", gv_pLAYER_02_DOMINION, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEEB14B43_u = UnitGroupCount(autoEEB14B43_g, c_unitCountAll);
    for (;; autoEEB14B43_u -= 1) {
        autoEEB14B43_var = UnitGroupUnitFromEnd(autoEEB14B43_g, autoEEB14B43_u);
        if (autoEEB14B43_var == null) { break; }
        UnitBehaviorRemove(autoEEB14B43_var, "Harmless", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Platform02ShowSentryBots_Init () {
    gt_Platform02ShowSentryBots = TriggerCreate("gt_Platform02ShowSentryBots_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Platform02 Entered
//--------------------------------------------------------------------------------------------------
bool gt_Platform02Entered_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_playPlatformAlert = true;
    gv_arrowShown01 = true;
    libNtve_gf_KillModel(gv_arrow01);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Platform02Entered_Init () {
    gt_Platform02Entered = TriggerCreate("gt_Platform02Entered_Func");
    TriggerAddEventUnitRegion(gt_Platform02Entered, null, RegionFromId(19), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Platform02 Alert Q
//--------------------------------------------------------------------------------------------------
bool gt_Platform02AlertQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_playPlatformAlert == false)) {
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab01|Line00191", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        gv_s01_TransmissionCurrent01 = TransmissionLastSent();
        gv_playPlatformAlert = true;
        TransmissionWait(gv_s01_TransmissionCurrent01, 0.0);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Platform02AlertQ_Init () {
    gt_Platform02AlertQ = TriggerCreate("gt_Platform02AlertQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Platform02 Sentry Bots React
//--------------------------------------------------------------------------------------------------
bool gt_Platform02SentryBotsReact_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitTarget()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(415), OrderTargetingUnit(AbilityCommand("attack", 0), EventUnitTarget()), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(416), OrderTargetingUnit(AbilityCommand("attack", 0), EventUnitTarget()), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(414), OrderTargetingUnit(AbilityCommand("attack", 0), EventUnitTarget()), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(115), OrderTargetingUnit(AbilityCommand("attack", 0), EventUnitTarget()), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(114), OrderTargetingUnit(AbilityCommand("attack", 0), EventUnitTarget()), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Platform02SentryBotsReact_Init () {
    gt_Platform02SentryBotsReact = TriggerCreate("gt_Platform02SentryBotsReact_Func");
    TriggerAddEventUnitAttacked(gt_Platform02SentryBotsReact, UnitRefFromUnit(UnitFromId(415)));
    TriggerAddEventUnitAttacked(gt_Platform02SentryBotsReact, UnitRefFromUnit(UnitFromId(416)));
    TriggerAddEventUnitAttacked(gt_Platform02SentryBotsReact, UnitRefFromUnit(UnitFromId(414)));
    TriggerAddEventUnitAttacked(gt_Platform02SentryBotsReact, UnitRefFromUnit(UnitFromId(115)));
    TriggerAddEventUnitAttacked(gt_Platform02SentryBotsReact, UnitRefFromUnit(UnitFromId(114)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Room01 Zerg Enter
//--------------------------------------------------------------------------------------------------
bool gt_Room01ZergEnter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto27C47751_g;
    int auto27C47751_u;
    unit auto27C47751_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_platform2Entered = true;
    libNtve_gf_TurnAnimationPropertiesOn(libNtve_gf_MainActorofUnit(UnitFromId(216)), "Scared");
    UnitIssueOrder(UnitFromId(216), OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(45))), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(216), OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(16))), c_orderQueueAddToEnd);
    libNtve_gf_TurnAnimationPropertiesOn(libNtve_gf_MainActorofUnit(UnitFromId(215)), "Scared");
    UnitGroupAddUnitGroup(gv_scientistRunners, gv_scientistsGroup);
    auto27C47751_g = gv_scientistsGroup;
    auto27C47751_u = UnitGroupCount(auto27C47751_g, c_unitCountAll);
    for (;; auto27C47751_u -= 1) {
        auto27C47751_var = UnitGroupUnitFromEnd(auto27C47751_g, auto27C47751_u);
        if (auto27C47751_var == null) { break; }
        UnitIssueOrder(auto27C47751_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(18))), c_orderQueueReplace);
        UnitIssueOrder(auto27C47751_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(507)), c_orderQueueAddToEnd);
        UnitIssueOrder(auto27C47751_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(9))), c_orderQueueAddToEnd);
    }
    TriggerExecute(gt_Room01ContainmentBreachQ, true, false);
    libLbty_gf_AutoRevealRegion(RegionFromId(42), RegionFromId(42), gv_pLAYER_01_USER);
    gf_CreateHelperonUnit(StringToText(""), UnitFromId(39), libSwaC_ge_CampaginReticleType_TerranEnemy, libSwaC_ge_CampaginReticleSize_Medium, 0.0);
    gv_generatorRoom01Actor = libNtve_gf_ActorLastCreated();
    gv_generatorRoom01Tag = TextTagLastCreated();
    libNtve_gf_KillModel(gv_arrow02);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Room01ZergEnter_Init () {
    gt_Room01ZergEnter = TriggerCreate("gt_Room01ZergEnter_Func");
    TriggerAddEventUnitRegion(gt_Room01ZergEnter, null, RegionFromId(10), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Room01 Zerg Enter Reveal
//--------------------------------------------------------------------------------------------------
bool gt_Room01ZergEnterReveal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(1));
    gv_zerglingPenRevealers[1] = VisRevealerLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Room01ZergEnterReveal_Init () {
    gt_Room01ZergEnterReveal = TriggerCreate("gt_Room01ZergEnterReveal_Func");
    TriggerAddEventUnitRegion(gt_Room01ZergEnterReveal, null, RegionFromId(42), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Room01 Containment Breach Q
//--------------------------------------------------------------------------------------------------
bool gt_Room01ContainmentBreachQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlayOnUnit(SoundLink("Event_Lab01_Scientists_Flee_1", -1), PlayerGroupAll(), UnitFromId(216), 0.0, 100.0, 0.0);
    Wait(0.125, c_timeReal);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab01|Line00061", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    SoundPlay(SoundLink("zLab01_alarm_scripted", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_s01_TransmissionCurrent01 = TransmissionLastSent();
    TransmissionWait(gv_s01_TransmissionCurrent01, 0.0);
    libSwaC_gf_SendTransmissionCampaign(gv_vALERIAN, "zMission_Lab01|Line00062", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_s01_TransmissionCurrent01 = TransmissionLastSent();
    TransmissionWait(gv_s01_TransmissionCurrent01, 0.0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Room01ContainmentBreachQ_Init () {
    gt_Room01ContainmentBreachQ = TriggerCreate("gt_Room01ContainmentBreachQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Room01 Remove Scientists Side
//--------------------------------------------------------------------------------------------------
bool gt_Room01RemoveScientistsSide_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto40F2C6A3_g;
    int auto40F2C6A3_u;
    unit auto40F2C6A3_var;
    unitgroup auto48622CF4_g;
    int auto48622CF4_u;
    unit auto48622CF4_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlayOnUnit(SoundLink("Event_Lab01_Scientists_Flee_2", -1), PlayerGroupAll(), UnitFromId(60), 0.0, 100.0, 0.0);
    auto40F2C6A3_g = UnitGroup("Scientist", gv_pLAYER_02_DOMINION4, RegionFromId(53), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto40F2C6A3_u = UnitGroupCount(auto40F2C6A3_g, c_unitCountAll);
    for (;; auto40F2C6A3_u -= 1) {
        auto40F2C6A3_var = UnitGroupUnitFromEnd(auto40F2C6A3_g, auto40F2C6A3_u);
        if (auto40F2C6A3_var == null) { break; }
        UnitGroupAdd(gv_sideScientistsGroup00, auto40F2C6A3_var);
        UnitIssueOrder(auto40F2C6A3_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(45))), c_orderQueueAddToEnd);
    }
    auto48622CF4_g = UnitGroup("Scientist", gv_pLAYER_02_DOMINION4, RegionFromId(54), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto48622CF4_u = UnitGroupCount(auto48622CF4_g, c_unitCountAll);
    for (;; auto48622CF4_u -= 1) {
        auto48622CF4_var = UnitGroupUnitFromEnd(auto48622CF4_g, auto48622CF4_u);
        if (auto48622CF4_var == null) { break; }
        UnitGroupAdd(gv_sideScientistsGroup01, auto48622CF4_var);
        UnitIssueOrder(auto48622CF4_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(45))), c_orderQueueAddToEnd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Room01RemoveScientistsSide_Init () {
    gt_Room01RemoveScientistsSide = TriggerCreate("gt_Room01RemoveScientistsSide_Func");
    TriggerAddEventUnitRegion(gt_Room01RemoveScientistsSide, null, RegionFromId(36), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Room01 Remove Scientists
//--------------------------------------------------------------------------------------------------
bool gt_Room01RemoveScientists_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Scientist"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayAtPoint(SoundLink("Medivac_Load", -1), PlayerGroupAll(), UnitGetPosition(EventUnit()), 0.0, 100.0, 0.0);
    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Room01RemoveScientists_Init () {
    gt_Room01RemoveScientists = TriggerCreate("gt_Room01RemoveScientists_Func");
    TriggerAddEventUnitRegion(gt_Room01RemoveScientists, null, RegionFromId(45), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Bots - Room 02
//--------------------------------------------------------------------------------------------------
bool gt_ActivateBotsRoom02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoCBE39296_g;
    int autoCBE39296_u;
    unit autoCBE39296_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(1.0, c_timeGame);
    autoCBE39296_g = UnitGroup("UmojanLabMicrobot", gv_pLAYER_02_DOMINION, RegionFromId(39), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCBE39296_u = UnitGroupCount(autoCBE39296_g, c_unitCountAll);
    for (;; autoCBE39296_u -= 1) {
        autoCBE39296_var = UnitGroupUnitFromEnd(autoCBE39296_g, autoCBE39296_u);
        if (autoCBE39296_var == null) { break; }
        libNtve_gf_PauseUnit(autoCBE39296_var, false);
        UnitIssueOrder(autoCBE39296_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(280)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateBotsRoom02_Init () {
    gt_ActivateBotsRoom02 = TriggerCreate("gt_ActivateBotsRoom02_Func");
    TriggerAddEventUnitRegion(gt_ActivateBotsRoom02, null, RegionFromId(23), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Enter Room 02 Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergEnterRoom02Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libLbty_gf_AutoRevealRegion(RegionFromId(7), RegionFromId(7), gv_pLAYER_01_USER);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    if ((UnitGroupCount(UnitGroup("Zergling", gv_pLAYER_01_USER, RegionFromId(63), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("Drone", gv_pLAYER_01_USER, RegionFromId(63), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        libSwaC_gf_SendTransmissionCampaign(gv_vALERIAN, "zMission_Lab01|Line00146", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        gv_s01_TransmissionCurrent01 = TransmissionLastSent();
        TransmissionWait(gv_s01_TransmissionCurrent01, 0.0);
    }

    libSwaC_gf_SendTransmissionCampaign(gv_vALERIAN, "zMission_Lab01|Line00064", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_s01_TransmissionCurrent01 = TransmissionLastSent();
    TransmissionWait(gv_s01_TransmissionCurrent01, 0.0);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab01|Line00065", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_s01_TransmissionCurrent01 = TransmissionLastSent();
    TransmissionWait(gv_s01_TransmissionCurrent01, 0.0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergEnterRoom02Q_Init () {
    gt_ZergEnterRoom02Q = TriggerCreate("gt_ZergEnterRoom02Q_Func");
    TriggerAddEventUnitRegion(gt_ZergEnterRoom02Q, null, RegionFromId(50), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Factory Is Killed
//--------------------------------------------------------------------------------------------------
bool gt_FactoryIsKilled_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_PowerDownDoodadsIn(RegionFromId(51));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FactoryIsKilled_Init () {
    gt_FactoryIsKilled = TriggerCreate("gt_FactoryIsKilled_Func");
    TriggerAddEventUnitDied(gt_FactoryIsKilled, UnitRefFromUnit(UnitFromId(220)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Room03 Zerg Entering Q
//--------------------------------------------------------------------------------------------------
bool gt_Room03ZergEnteringQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto9760233B_g;
    int auto9760233B_u;
    unit auto9760233B_var;
    unitgroup auto56B23E9F_g;
    int auto56B23E9F_u;
    unit auto56B23E9F_var;
    unitgroup autoC7F308EF_g;
    int autoC7F308EF_u;
    unit autoC7F308EF_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libLbty_gf_AutoRevealRegion(RegionFromId(30), RegionFromId(30), gv_pLAYER_01_USER);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(43), 30.0, false);
    auto9760233B_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(43), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto9760233B_u = UnitGroupCount(auto9760233B_g, c_unitCountAll);
    for (;; auto9760233B_u -= 1) {
        auto9760233B_var = UnitGroupUnitFromEnd(auto9760233B_g, auto9760233B_u);
        if (auto9760233B_var == null) { break; }
        libNtve_gf_PauseUnit(auto9760233B_var, false);
    }
    auto56B23E9F_g = UnitGroup("Scientist", gv_pLAYER_02_DOMINION4, RegionFromId(43), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto56B23E9F_u = UnitGroupCount(auto56B23E9F_g, c_unitCountAll);
    for (;; auto56B23E9F_u -= 1) {
        auto56B23E9F_var = UnitGroupUnitFromEnd(auto56B23E9F_g, auto56B23E9F_u);
        if (auto56B23E9F_var == null) { break; }
        libNtve_gf_PauseUnit(auto56B23E9F_var, false);
        UnitGroupAdd(gv_scientistRunners, auto56B23E9F_var);
    }
    autoC7F308EF_g = gv_scientistRunners;
    autoC7F308EF_u = UnitGroupCount(autoC7F308EF_g, c_unitCountAll);
    for (;; autoC7F308EF_u -= 1) {
        autoC7F308EF_var = UnitGroupUnitFromEnd(autoC7F308EF_g, autoC7F308EF_u);
        if (autoC7F308EF_var == null) { break; }
        UnitIssueOrder(autoC7F308EF_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(9))), c_orderQueueReplace);
    }
    libNtve_gf_PauseUnit(UnitFromId(281), false);
    UnitGroupAdd(gv_scientistRunners, UnitFromId(281));
    UnitIssueOrder(UnitFromId(281), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(507)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(281), OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(9))), c_orderQueueAddToEnd);
    libNtve_gf_PauseUnit(UnitFromId(943), false);
    UnitGroupAdd(gv_scientistRunners, UnitFromId(943));
    UnitIssueOrder(UnitFromId(943), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(507)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(943), OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(9))), c_orderQueueAddToEnd);
    libNtve_gf_PauseUnit(UnitFromId(944), false);
    UnitGroupAdd(gv_scientistRunners, UnitFromId(944));
    UnitIssueOrder(UnitFromId(944), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(507)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(944), OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(9))), c_orderQueueAddToEnd);
    TriggerExecute(gt_Room04CloseDoorQ, true, false);
    SoundPlayOnUnit(SoundLink("Event_Lab01_Scientists_Flee_3", -1), PlayerGroupAll(), UnitFromId(281), 0.0, 100.0, 0.0);
    Wait(0.25, c_timeReal);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(UnitFromId(281), "zMission_Lab01|Line00070", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_vALERIAN, "zMission_Lab01|Line00072", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Room03ZergEnteringQ_Init () {
    gt_Room03ZergEnteringQ = TriggerCreate("gt_Room03ZergEnteringQ_Func");
    TriggerAddEventUnitRegion(gt_Room03ZergEnteringQ, null, RegionFromId(29), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Room03 Sentry Bot Aggro
//--------------------------------------------------------------------------------------------------
bool gt_Room03SentryBotAggro_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupIssueOrder(UnitGroup("UmojanLabMicrobot", gv_pLAYER_02_DOMINION, RegionFromId(62), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(945)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Room03SentryBotAggro_Init () {
    gt_Room03SentryBotAggro = TriggerCreate("gt_Room03SentryBotAggro_Func");
    TriggerAddEventUnitRegion(gt_Room03SentryBotAggro, null, RegionFromId(61), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Room03 Scientist Passed Door
//--------------------------------------------------------------------------------------------------
bool gt_Room03ScientistPassedDoor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_scientistRunners, EventUnit()) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(gv_scientistRunners, EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Room03ScientistPassedDoor_Init () {
    gt_Room03ScientistPassedDoor = TriggerCreate("gt_Room03ScientistPassedDoor_Func");
    TriggerAddEventUnitRegion(gt_Room03ScientistPassedDoor, null, RegionFromId(56), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Room03 Remove Scientists
//--------------------------------------------------------------------------------------------------
bool gt_Room03RemoveScientists_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Scientist"))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Room03RemoveScientists_Init () {
    gt_Room03RemoveScientists = TriggerCreate("gt_Room03RemoveScientists_Func");
    TriggerAddEventUnitRegion(gt_Room03RemoveScientists, null, RegionFromId(9), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Room04 Start Gas Room Q
//--------------------------------------------------------------------------------------------------
bool gt_Room04StartGasRoomQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto05FCB2C8_g;
    int auto05FCB2C8_u;
    unit auto05FCB2C8_var;
    unitgroup autoA386F9DE_g;
    int autoA386F9DE_u;
    unit autoA386F9DE_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((gv_gasRoomDoorClosed == true))) {
        Wait(1.0, c_timeGame);
    }
    auto05FCB2C8_g = UnitGroup("LabTurret", gv_pLAYER_02_DOMINION, RegionFromId(43), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto05FCB2C8_u = UnitGroupCount(auto05FCB2C8_g, c_unitCountAll);
    for (;; auto05FCB2C8_u -= 1) {
        auto05FCB2C8_var = UnitGroupUnitFromEnd(auto05FCB2C8_g, auto05FCB2C8_u);
        if (auto05FCB2C8_var == null) { break; }
        UnitIssueOrder(auto05FCB2C8_var, Order(AbilityCommand("LabTurretUnburrow", 0)), c_orderQueueReplace);
    }
    autoA386F9DE_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(59), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA386F9DE_u = UnitGroupCount(autoA386F9DE_g, c_unitCountAll);
    for (;; autoA386F9DE_u -= 1) {
        autoA386F9DE_var = UnitGroupUnitFromEnd(autoA386F9DE_g, autoA386F9DE_u);
        if (autoA386F9DE_var == null) { break; }
        UnitSetState(autoA386F9DE_var, c_unitStateStunned, true);
    }
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        TriggerEnable(gt_GasDamage, true);
        TriggerEnable(gt_Room04GasHurtsZerglingsHardQ, true);
    }

    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab01|Line00116", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_s01_TransmissionCurrent01 = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab01|Line00195", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_s01_TransmissionCurrent01 = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerExecute(gt_ObjectiveGasTurretsCreate, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Room04StartGasRoomQ_Init () {
    gt_Room04StartGasRoomQ = TriggerCreate("gt_Room04StartGasRoomQ_Func");
    TriggerAddEventUnitRegion(gt_Room04StartGasRoomQ, null, RegionFromId(43), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Room04 Close Door Q
//--------------------------------------------------------------------------------------------------
bool gt_Room04CloseDoorQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((UnitGroupCount(gv_scientistRunners, c_unitCountAlive) == 0))) {
        Wait(0.5, c_timeGame);
    }
    UnitIssueOrder(UnitFromId(698), Order(AbilityCommand("UmojanLabDoorsThinRight", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(477), Order(AbilityCommand("UmojanLabDoorsThinRight", 0)), c_orderQueueReplace);
    gv_gasRoomDoorClosed = true;
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab01|Line00118", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_vALERIAN, "zMission_Lab01|Line00108", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab01|Line00174", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_s01_TransmissionCurrent01 = TransmissionLastSent();
    Wait(2.0, c_timeReal);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(UnitFromId(698)), 2.0, Color(100.00, 100.00, 0.00));
    MinimapPing(PlayerGroupAll(), UnitGetPosition(UnitFromId(477)), 2.0, Color(100.00, 100.00, 0.00));
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Room04CloseDoorQ_Init () {
    gt_Room04CloseDoorQ = TriggerCreate("gt_Room04CloseDoorQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Room04 Kill Turret Helper Attacked
//--------------------------------------------------------------------------------------------------
bool gt_Room04KillTurretHelperAttacked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitTarget()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_KillModel(libHots_gf_ActorForUnit(EventUnit(), 1));
    TextTagDestroy(libHots_gf_TextTagForUnit(EventUnit(), 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Room04KillTurretHelperAttacked_Init () {
    gt_Room04KillTurretHelperAttacked = TriggerCreate("gt_Room04KillTurretHelperAttacked_Func");
    TriggerAddEventUnitAttacked(gt_Room04KillTurretHelperAttacked, UnitRefFromUnit(UnitFromId(255)));
    TriggerAddEventUnitAttacked(gt_Room04KillTurretHelperAttacked, UnitRefFromUnit(UnitFromId(258)));
    TriggerAddEventUnitAttacked(gt_Room04KillTurretHelperAttacked, UnitRefFromUnit(UnitFromId(292)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Room04 Kill Turret Helper Dies
//--------------------------------------------------------------------------------------------------
bool gt_Room04KillTurretHelperDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_KillModel(libHots_gf_ActorForUnit(EventUnit(), 1));
    TextTagDestroy(libHots_gf_TextTagForUnit(EventUnit(), 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Room04KillTurretHelperDies_Init () {
    gt_Room04KillTurretHelperDies = TriggerCreate("gt_Room04KillTurretHelperDies_Func");
    TriggerAddEventUnitDied(gt_Room04KillTurretHelperDies, UnitRefFromUnit(UnitFromId(255)));
    TriggerAddEventUnitDied(gt_Room04KillTurretHelperDies, UnitRefFromUnit(UnitFromId(258)));
    TriggerAddEventUnitDied(gt_Room04KillTurretHelperDies, UnitRefFromUnit(UnitFromId(292)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Room04 Open Door Q
//--------------------------------------------------------------------------------------------------
bool gt_Room04OpenDoorQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoE4AAA785_g;
    int autoE4AAA785_u;
    unit autoE4AAA785_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(255)) == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(292)) == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(258)) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_GasDamage, false);
    UnitIssueOrder(UnitFromId(698), Order(AbilityCommand("UmojanLabDoorsThinRightLowered", 0)), c_orderQueueReplace);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(UnitFromId(698)), 2.0, Color(0.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/4A1CF956"), null, UnitGetPosition(UnitFromId(698)));
    UnitIssueOrder(UnitFromId(477), Order(AbilityCommand("UmojanLabDoorsThinRightLowered", 0)), c_orderQueueReplace);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(UnitFromId(477)), 4.0, Color(0.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/082F87A3"), null, UnitGetPosition(UnitFromId(477)));
    autoE4AAA785_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(59), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE4AAA785_u = UnitGroupCount(autoE4AAA785_g, c_unitCountAll);
    for (;; autoE4AAA785_u -= 1) {
        autoE4AAA785_var = UnitGroupUnitFromEnd(autoE4AAA785_g, autoE4AAA785_u);
        if (autoE4AAA785_var == null) { break; }
        UnitSetState(autoE4AAA785_var, c_unitStateStunned, false);
        UnitIssueOrder(autoE4AAA785_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    }
    TriggerExecute(gt_Room04PrepareZerglingRescueRoom, true, false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab01|Line00205", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Room04OpenDoorQ_Init () {
    gt_Room04OpenDoorQ = TriggerCreate("gt_Room04OpenDoorQ_Func");
    TriggerAddEventUnitDied(gt_Room04OpenDoorQ, UnitRefFromUnit(UnitFromId(255)));
    TriggerAddEventUnitDied(gt_Room04OpenDoorQ, UnitRefFromUnit(UnitFromId(292)));
    TriggerAddEventUnitDied(gt_Room04OpenDoorQ, UnitRefFromUnit(UnitFromId(258)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Room04 Prepare Zergling Rescue Room
//--------------------------------------------------------------------------------------------------
bool gt_Room04PrepareZerglingRescueRoom_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_CreateHelperonUnit(StringToText(""), UnitFromId(40), libSwaC_ge_CampaginReticleType_TerranEnemy, libSwaC_ge_CampaginReticleSize_Medium, 0.0);
    gv_generatorRoom04Actor = libNtve_gf_ActorLastCreated();
    gv_generatorRoom04Tag = TextTagLastCreated();
    libLbty_gf_AutoRevealRegion(RegionFromId(52), RegionFromId(59), gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Room04PrepareZerglingRescueRoom_Init () {
    gt_Room04PrepareZerglingRescueRoom = TriggerCreate("gt_Room04PrepareZerglingRescueRoom_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gas Damage
//--------------------------------------------------------------------------------------------------
bool gt_GasDamage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto50AB4309_g;
    int auto50AB4309_u;
    unit auto50AB4309_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!(((UnitIsAlive(UnitFromId(255)) == true) || (UnitIsAlive(UnitFromId(258)) == true) || (UnitIsAlive(UnitFromId(292)) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto50AB4309_g = UnitGroup(null, gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto50AB4309_u = UnitGroupCount(auto50AB4309_g, c_unitCountAll);
    for (;; auto50AB4309_u -= 1) {
        auto50AB4309_var = UnitGroupUnitFromEnd(auto50AB4309_g, auto50AB4309_u);
        if (auto50AB4309_var == null) { break; }
        if ((UnitHasBehavior(auto50AB4309_var, "PoisonGas") == true)) {
            UnitSetPropertyFixed(auto50AB4309_var, c_unitPropLife, (UnitGetPropertyFixed(auto50AB4309_var, c_unitPropLife, c_unitPropCurrent) - gv_gasDamage_Zerg));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GasDamage_Init () {
    gt_GasDamage = TriggerCreate("gt_GasDamage_Func");
    TriggerEnable(gt_GasDamage, false);
    TriggerAddEventTimePeriodic(gt_GasDamage, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Room04 Gas Hurts Zerglings (Hard) Q
//--------------------------------------------------------------------------------------------------
bool gt_Room04GasHurtsZerglingsHardQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "PoisonGas") == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Zergling"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab01|Line00206", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Room04GasHurtsZerglingsHardQ_Init () {
    gt_Room04GasHurtsZerglingsHardQ = TriggerCreate("gt_Room04GasHurtsZerglingsHardQ_Func");
    TriggerEnable(gt_Room04GasHurtsZerglingsHardQ, false);
    TriggerAddEventUnitBehaviorChange(gt_Room04GasHurtsZerglingsHardQ, null, "PoisonGas", c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Room05 Zerg Entering
//--------------------------------------------------------------------------------------------------
bool gt_Room05ZergEntering_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_ambushGroup;

    // Automatic Variable Declarations
    unitgroup autoD7EA65F5_g;
    int autoD7EA65F5_u;
    unit autoD7EA65F5_var;

    // Variable Initialization
    lv_ambushGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_CreateHelperonUnit(StringToText(""), UnitFromId(42), libSwaC_ge_CampaginReticleType_TerranEnemy, libSwaC_ge_CampaginReticleSize_Medium, 0.0);
    gv_generatorRoom05Actor = libNtve_gf_ActorLastCreated();
    gv_generatorRoom05Tag = TextTagLastCreated();
    libLbty_gf_AutoRevealRegion(RegionFromId(2), RegionFromId(2), gv_pLAYER_01_USER);
    lv_ambushGroup = UnitGroup("UmojanLabMicrobot", gv_pLAYER_02_DOMINION3, RegionFromId(48), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupIssueOrder(lv_ambushGroup, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(938)), c_orderQueueReplace);
    autoD7EA65F5_g = lv_ambushGroup;
    autoD7EA65F5_u = UnitGroupCount(autoD7EA65F5_g, c_unitCountAll);
    for (;; autoD7EA65F5_u -= 1) {
        autoD7EA65F5_var = UnitGroupUnitFromEnd(autoD7EA65F5_g, autoD7EA65F5_u);
        if (autoD7EA65F5_var == null) { break; }
        UnitIssueOrder(autoD7EA65F5_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(autoD7EA65F5_var)), c_orderQueueAddToEnd);
        UnitIssueOrder(autoD7EA65F5_var, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(UnitGetPosition(autoD7EA65F5_var), 1.0, UnitGetFacing(autoD7EA65F5_var))), c_orderQueueAddToEnd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Room05ZergEntering_Init () {
    gt_Room05ZergEntering = TriggerCreate("gt_Room05ZergEntering_Func");
    TriggerAddEventUnitRegion(gt_Room05ZergEntering, null, RegionFromId(49), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Room05 Zerg Enter Reveal
//--------------------------------------------------------------------------------------------------
bool gt_Room05ZergEnterReveal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(14));
    gv_zerglingPenRevealers[3] = VisRevealerLastCreated();
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(6));
    gv_zerglingPenRevealers[4] = VisRevealerLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Room05ZergEnterReveal_Init () {
    gt_Room05ZergEnterReveal = TriggerCreate("gt_Room05ZergEnterReveal_Func");
    TriggerAddEventUnitRegion(gt_Room05ZergEnterReveal, null, RegionFromId(2), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Entering Final Room Enter
//--------------------------------------------------------------------------------------------------
bool gt_ZergEnteringFinalRoomEnter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(191), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(940)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(190), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(941)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergEnteringFinalRoomEnter_Init () {
    gt_ZergEnteringFinalRoomEnter = TriggerCreate("gt_ZergEnteringFinalRoomEnter_Func");
    TriggerAddEventUnitRegion(gt_ZergEnteringFinalRoomEnter, null, RegionFromId(58), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Entering Room 6 / Eradicator AI Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergEnteringRoom6EradicatorAIQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((UnitIsAlive(gv_eRADICATOR) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/AB8BBE1C"));
    TriggerQueueExit();
    TriggerExecute(gt_EradicatorBattleBehavior, true, false);
    TriggerEnable(gt_NoZergLeftRoom6, true);
    libLbty_gf_AutoRevealRegion(RegionFromId(15), RegionFromId(15), gv_pLAYER_01_USER);
    TriggerExecute(gt_ActivateEradicatorQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergEnteringRoom6EradicatorAIQ_Init () {
    gt_ZergEnteringRoom6EradicatorAIQ = TriggerCreate("gt_ZergEnteringRoom6EradicatorAIQ_Func");
    TriggerAddEventUnitRegion(gt_ZergEnteringRoom6EradicatorAIQ, null, RegionFromId(15), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Eradicator Q
//--------------------------------------------------------------------------------------------------
bool gt_ActivateEradicatorQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlay(SoundLink("Eradicator_Activated", -1), PlayerGroupAll(), 100.0, 0.0);
    TriggerQueueEnter();
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZLab01MusicEradicatorFight", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab01|Line00077", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_s01_TransmissionCurrent01 = TransmissionLastSent();
    TransmissionWait(gv_s01_TransmissionCurrent01, 0.0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateEradicatorQ_Init () {
    gt_ActivateEradicatorQ = TriggerCreate("gt_ActivateEradicatorQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Eradicator Battle Behavior
//--------------------------------------------------------------------------------------------------
bool gt_EradicatorBattleBehavior_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto239FAD38_n;
    int auto239FAD38_i;
    int autoA98674FE_n;
    int autoA98674FE_i;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(gv_eRADICATOR, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(182)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(55), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(198)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(56), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(199)), c_orderQueueReplace);
    while (!((UnitGetPropertyFixed(gv_eRADICATOR, c_unitPropLife, c_unitPropCurrent) <= (gv_eradicatorHP * 0.8)) && (gv_zergAreInRoom06 == true))) {
        Wait(0.5, c_timeGame);
    }
    UnitIssueOrder(gv_eRADICATOR, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(535)), c_orderQueueReplace);
    if ((UnitIsAlive(UnitFromId(6)) == true)) {
        libNtve_gf_TurnAnimationPropertiesOn(libNtve_gf_MainActorofUnit(UnitFromId(6)), "Work");
        libNtve_gf_TurnAnimationPropertiesOn(libNtve_gf_MainActorofUnit(UnitFromId(58)), "Stand Attached Work");
    }

    if ((UnitIsAlive(UnitFromId(323)) == true)) {
        libNtve_gf_TurnAnimationPropertiesOn(libNtve_gf_MainActorofUnit(UnitFromId(323)), "Work");
        libNtve_gf_TurnAnimationPropertiesOn(libNtve_gf_MainActorofUnit(UnitFromId(338)), "Stand Attached Work");
    }

    Wait(5.0, c_timeGame);
    while (!((gv_zergAreInRoom06 == true))) {
        Wait(0.5, c_timeGame);
    }
    auto239FAD38_n = libHots_gf_DifficultyValueInt2(1, 1, 2);
    for (auto239FAD38_i = 1; auto239FAD38_i <= auto239FAD38_n; auto239FAD38_i += 1) {
        gf_SpawnEradicatorReinforcements(UnitFromId(6), gv_eradicatorReinforcementLimit, gv_pLAYER_02_DOMINION3, PointFromId(333), PointFromId(182), PointFromId(200));
        gf_SpawnEradicatorReinforcements(UnitFromId(323), gv_eradicatorReinforcementLimit, gv_pLAYER_02_DOMINION3, PointFromId(513), PointFromId(182), PointFromId(201));
    }
    Wait(libHots_gf_DifficultyValueFixed2(6.0, 6.0, 4.0), c_timeGame);
    while (!((gv_zergAreInRoom06 == true))) {
        Wait(0.5, c_timeGame);
    }
    autoA98674FE_n = libHots_gf_DifficultyValueInt2(1, 1, 2);
    for (autoA98674FE_i = 1; autoA98674FE_i <= autoA98674FE_n; autoA98674FE_i += 1) {
        gf_SpawnEradicatorReinforcements(UnitFromId(6), gv_eradicatorReinforcementLimit, gv_pLAYER_02_DOMINION3, PointFromId(333), PointFromId(182), PointFromId(200));
        gf_SpawnEradicatorReinforcements(UnitFromId(323), gv_eradicatorReinforcementLimit, gv_pLAYER_02_DOMINION3, PointFromId(513), PointFromId(182), PointFromId(201));
    }
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        Wait(6.0, c_timeGame);
        while (!((gv_zergAreInRoom06 == true))) {
            Wait(0.5, c_timeGame);
        }
        gf_SpawnEradicatorReinforcements(UnitFromId(6), gv_eradicatorReinforcementLimit, gv_pLAYER_02_DOMINION3, PointFromId(333), PointFromId(182), PointFromId(200));
        gf_SpawnEradicatorReinforcements(UnitFromId(323), gv_eradicatorReinforcementLimit, gv_pLAYER_02_DOMINION3, PointFromId(513), PointFromId(182), PointFromId(201));
    }

    libNtve_gf_TurnAnimationPropertiesOff(libNtve_gf_MainActorofUnit(UnitFromId(6)), "Work");
    libNtve_gf_TurnAnimationPropertiesOff(libNtve_gf_MainActorofUnit(UnitFromId(58)), "Work");
    libNtve_gf_TurnAnimationPropertiesOff(libNtve_gf_MainActorofUnit(UnitFromId(323)), "Work");
    libNtve_gf_TurnAnimationPropertiesOff(libNtve_gf_MainActorofUnit(UnitFromId(338)), "Work");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EradicatorBattleBehavior_Init () {
    gt_EradicatorBattleBehavior = TriggerCreate("gt_EradicatorBattleBehavior_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Eradicator Factory Killed
//--------------------------------------------------------------------------------------------------
bool gt_EradicatorFactoryKilled_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(UnitFromId(6)) == false)) {
        libNtve_gf_TurnAnimationPropertiesOff(libNtve_gf_MainActorofUnit(UnitFromId(58)), "Work");
        libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(UnitFromId(58)), "Queuing");
    }

    if ((UnitIsAlive(UnitFromId(323)) == false)) {
        libNtve_gf_TurnAnimationPropertiesOff(libNtve_gf_MainActorofUnit(UnitFromId(338)), "Work");
        libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(UnitFromId(338)), "Queuing");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EradicatorFactoryKilled_Init () {
    gt_EradicatorFactoryKilled = TriggerCreate("gt_EradicatorFactoryKilled_Func");
    TriggerAddEventUnitDied(gt_EradicatorFactoryKilled, UnitRefFromUnit(UnitFromId(6)));
    TriggerAddEventUnitDied(gt_EradicatorFactoryKilled, UnitRefFromUnit(UnitFromId(323)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: No Zerg Left Room 6
//--------------------------------------------------------------------------------------------------
bool gt_NoZergLeftRoom6_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(15), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
        gv_zergAreInRoom06 = true;
    }
    else {
        gv_zergAreInRoom06 = false;
        UnitIssueOrder(gv_eRADICATOR, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(535)), c_orderQueueReplace);
        UnitIssueOrder(gv_eRADICATOR, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(182)), c_orderQueueAddToEnd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NoZergLeftRoom6_Init () {
    gt_NoZergLeftRoom6 = TriggerCreate("gt_NoZergLeftRoom6_Func");
    TriggerEnable(gt_NoZergLeftRoom6, false);
    TriggerAddEventTimePeriodic(gt_NoZergLeftRoom6, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Eradicator Killed
//--------------------------------------------------------------------------------------------------
bool gt_EradicatorKilled_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_NoZergLeftRoom6, false);
    TriggerExecute(gt_VictoryWarbotDestroyedCompleted, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EradicatorKilled_Init () {
    gt_EradicatorKilled = TriggerCreate("gt_EradicatorKilled_Func");
    TriggerAddEventUnitDied(gt_EradicatorKilled, UnitRefFromVariable("gv_eRADICATOR"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Eradicator Takes Damage
//--------------------------------------------------------------------------------------------------
bool gt_EradicatorTakesDamage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(gv_warbotActor);
    TextTagDestroy(gv_warbotTag);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EradicatorTakesDamage_Init () {
    gt_EradicatorTakesDamage = TriggerCreate("gt_EradicatorTakesDamage_Func");
    TriggerAddEventUnitDamaged(gt_EradicatorTakesDamage, UnitRefFromVariable("gv_eRADICATOR"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Eradicator Ping
//--------------------------------------------------------------------------------------------------
bool gt_EradicatorPing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectivePing(true, UnitGetPosition(gv_eRADICATOR), StringExternal("Param/Value/C2433FED"));
    gv_eradicatorPing = PingLastCreated();
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_eRADICATOR), 7.57), 0.0, false);
    libNtve_gf_AttachModelToUnit(gv_eRADICATOR, "BriefingUnitSelectRed", "Ref_Head");
    gv_warbotActor = libNtve_gf_ActorLastCreated();
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/2F40F739"), null, gv_eRADICATOR);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EradicatorPing_Init () {
    gt_EradicatorPing = TriggerCreate("gt_EradicatorPing_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zergling Rescue (Platform 2)
//--------------------------------------------------------------------------------------------------
bool gt_ZerglingRescuePlatform2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_rESCUE_GROUP;

    // Automatic Variable Declarations
    unit auto59A19B1C_val;
    const int auto93673FAE_n = 3;
    int auto93673FAE_i;
    const int auto0D49A609_n = 3;
    int auto0D49A609_i;
    const int auto05B6284B_n = 3;
    int auto05B6284B_i;
    const int autoD62277C9_n = 3;
    int autoD62277C9_i;

    // Variable Initialization
    lv_rESCUE_GROUP = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PingDestroy(gv_zerglingPing);
    gv_zerglingRescueCountPlatform2 += 1;
    if ((gv_zerglingRescueCountPlatform2 == 5)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_ZerglingRescueObjectiveTransmissionQ, true, false);
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZLab01MusicEventSentryBotsKilled", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    }

    auto59A19B1C_val = EventUnit();
    if (auto59A19B1C_val == UnitFromId(415)) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(956)), c_animNameDefault, "Stand Unpowered Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
        Wait(2.0, c_timeGame);
        libNtve_gf_ShowHideUnit(UnitFromId(975), false);
        for (auto93673FAE_i = 1; auto93673FAE_i <= auto93673FAE_n; auto93673FAE_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION2, PointFromId(348));
            UnitGroupAdd(lv_rESCUE_GROUP, UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(14)), c_orderQueueReplace);
            libSwaC_gf_SetUnitInfoTextCampaign(UnitLastCreated(), null, UnitTypeGetName(UnitGetType(UnitLastCreated())), null);
            Wait(0.75, c_timeGame);
        }
        libNtve_gf_ShowHideUnit(UnitFromId(975), true);
        libNtve_gf_RescueUnit2(lv_rESCUE_GROUP, gv_pLAYER_01_USER, true);
    }
    else if (auto59A19B1C_val == UnitFromId(414)) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(571)), c_animNameDefault, "Stand Unpowered Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
        Wait(2.0, c_timeGame);
        libNtve_gf_ShowHideUnit(UnitFromId(978), false);
        for (auto0D49A609_i = 1; auto0D49A609_i <= auto0D49A609_n; auto0D49A609_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION2, PointFromId(366));
            UnitGroupAdd(lv_rESCUE_GROUP, UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(20)), c_orderQueueReplace);
            libSwaC_gf_SetUnitInfoTextCampaign(UnitLastCreated(), null, UnitTypeGetName(UnitGetType(UnitLastCreated())), null);
            Wait(0.75, c_timeGame);
        }
        libNtve_gf_ShowHideUnit(UnitFromId(978), true);
        libNtve_gf_RescueUnit2(lv_rESCUE_GROUP, gv_pLAYER_01_USER, true);
    }
    else if (auto59A19B1C_val == UnitFromId(115)) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(313)), c_animNameDefault, "Stand Unpowered Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
        Wait(2.0, c_timeGame);
        libNtve_gf_ShowHideUnit(UnitFromId(976), false);
        for (auto05B6284B_i = 1; auto05B6284B_i <= auto05B6284B_n; auto05B6284B_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION2, PointFromId(440));
            UnitGroupAdd(lv_rESCUE_GROUP, UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(116)), c_orderQueueReplace);
            libSwaC_gf_SetUnitInfoTextCampaign(UnitLastCreated(), null, UnitTypeGetName(UnitGetType(UnitLastCreated())), null);
            Wait(0.75, c_timeGame);
        }
        libNtve_gf_ShowHideUnit(UnitFromId(976), true);
        libNtve_gf_RescueUnit2(lv_rESCUE_GROUP, gv_pLAYER_01_USER, true);
    }
    else if (auto59A19B1C_val == UnitFromId(114)) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(515)), c_animNameDefault, "Stand Unpowered Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
        Wait(2.0, c_timeGame);
        libNtve_gf_ShowHideUnit(UnitFromId(977), false);
        for (autoD62277C9_i = 1; autoD62277C9_i <= autoD62277C9_n; autoD62277C9_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION2, PointFromId(460));
            UnitGroupAdd(lv_rESCUE_GROUP, UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(461)), c_orderQueueReplace);
            libSwaC_gf_SetUnitInfoTextCampaign(UnitLastCreated(), null, UnitTypeGetName(UnitGetType(UnitLastCreated())), null);
            Wait(0.75, c_timeGame);
        }
        libNtve_gf_ShowHideUnit(UnitFromId(977), true);
        libNtve_gf_RescueUnit2(lv_rESCUE_GROUP, gv_pLAYER_01_USER, true);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZerglingRescuePlatform2_Init () {
    gt_ZerglingRescuePlatform2 = TriggerCreate("gt_ZerglingRescuePlatform2_Func");
    TriggerAddEventUnitDied(gt_ZerglingRescuePlatform2, UnitRefFromUnit(UnitFromId(415)));
    TriggerAddEventUnitDied(gt_ZerglingRescuePlatform2, UnitRefFromUnit(UnitFromId(416)));
    TriggerAddEventUnitDied(gt_ZerglingRescuePlatform2, UnitRefFromUnit(UnitFromId(414)));
    TriggerAddEventUnitDied(gt_ZerglingRescuePlatform2, UnitRefFromUnit(UnitFromId(115)));
    TriggerAddEventUnitDied(gt_ZerglingRescuePlatform2, UnitRefFromUnit(UnitFromId(114)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zergling Rescue Objective Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_ZerglingRescueObjectiveTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab01|Line00063", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_s01_TransmissionCurrent01 = TransmissionLastSent();
    TransmissionWait(gv_s01_TransmissionCurrent01, 0.0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerExecute(gt_ObjectiveSaveZerglingsCreate, true, false);
    if ((libHots_gf_DifficultyValueSwarmBoolean(true, false, false) == true) && (gv_platform2Entered == false)) {
        libNtve_gf_CreateModelWithPointFacing("GuideArrow", PointFromId(964));
        gv_arrow02 = libNtve_gf_ActorLastCreated();
        ActorSend(gv_arrow02, "SetTeamColor 255,0,0 0,0,0");
        ActorSend(gv_arrow02, "SetTintColor 255,100,100");
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZerglingRescueObjectiveTransmissionQ_Init () {
    gt_ZerglingRescueObjectiveTransmissionQ = TriggerCreate("gt_ZerglingRescueObjectiveTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zergling Rescue (Room01)
//--------------------------------------------------------------------------------------------------
bool gt_ZerglingRescueRoom01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_explosionCenter;

    // Automatic Variable Declarations
    const int auto2CAB9A83_ae = 9;
    int auto2CAB9A83_var;
    unitgroup autoD9E0870A_g;
    int autoD9E0870A_u;
    unit autoD9E0870A_var;
    unitgroup auto087D9F6B_g;
    int auto087D9F6B_u;
    unit auto087D9F6B_var;

    // Variable Initialization
    lv_explosionCenter = UnitGetPosition(EventUnit());

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZLab01MusicEventA", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gv_savedZerglingCount += 1;
    PingDestroy(gv_rescueZerglingsPings[1]);
    libNtve_gf_KillModel(gv_generatorRoom01Actor);
    TextTagDestroy(gv_generatorRoom01Tag);
    MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(1)), 4.0, Color(0.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/933AD912"), null, RegionGetCenter(RegionFromId(1)));
    if ((RegionContainsPoint(RegionCircle(lv_explosionCenter, 15.0), CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
        CameraShakeStart(gv_pLAYER_01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.5, 2.0, 100.0, 1.5);
    }

    auto2CAB9A83_var = 1;
    for ( ; auto2CAB9A83_var <= auto2CAB9A83_ae; auto2CAB9A83_var += 1 ) {
        libSwaC_gf_CreateExplosionatPointAdvanced(gv_powerTrackRoom1[auto2CAB9A83_var], "DefaultExplosionTerranLarge", SoundLink("UmojanLabChainReaction", -1));
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(gv_powerTrackRoom1[auto2CAB9A83_var], 1.0), "XelNagaHullReactorConduit", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
        if ((auto2CAB9A83_var > 3) && (RegionContainsPoint(RegionCircle(lv_explosionCenter, 15.0), CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
            CameraShakeStart(gv_pLAYER_01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.2, 2.0, 100.0, 0.5);
        }

        Wait(0.5, c_timeGame);
    }
    gf_PowerDownDoodadsIn(RegionFromId(31));
    gf_KillZerglingHoldingPen(RegionFromId(1));
    if ((RegionContainsPoint(RegionCircle(lv_explosionCenter, 15.0), CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
        CameraShakeStart(gv_pLAYER_01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.8, 3.0, 100.0, 3.0);
    }

    autoD9E0870A_g = UnitGroup("PathingBlocker1x1", 0, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD9E0870A_u = UnitGroupCount(autoD9E0870A_g, c_unitCountAll);
    for (;; autoD9E0870A_u -= 1) {
        autoD9E0870A_var = UnitGroupUnitFromEnd(autoD9E0870A_g, autoD9E0870A_u);
        if (autoD9E0870A_var == null) { break; }
        UnitRemove(autoD9E0870A_var);
    }
    auto087D9F6B_g = UnitGroup("Zergling", gv_pLAYER_02_DOMINION2, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto087D9F6B_u = UnitGroupCount(auto087D9F6B_g, c_unitCountAll);
    for (;; auto087D9F6B_u -= 1) {
        auto087D9F6B_var = UnitGroupUnitFromEnd(auto087D9F6B_g, auto087D9F6B_u);
        if (auto087D9F6B_var == null) { break; }
        gf_SaveZergling(auto087D9F6B_var, PointFromId(166));
    }
    TriggerExecute(gt_ObjectiveSaveZerglingsUpdate, true, false);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_ZerglingRescueQ, true, false);
    Wait(1.0, c_timeGame);
    if ((RegionContainsPoint(RegionCircle(lv_explosionCenter, 15.0), CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
        CameraShakeStart(gv_pLAYER_01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.3, 1.0, 100.0, 1.0);
    }

    Wait(10.0, c_timeGame);
    VisRevealerDestroy(gv_zerglingPenRevealers[1]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZerglingRescueRoom01_Init () {
    gt_ZerglingRescueRoom01 = TriggerCreate("gt_ZerglingRescueRoom01_Func");
    TriggerAddEventUnitDied(gt_ZerglingRescueRoom01, UnitRefFromUnit(UnitFromId(39)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zergling Rescue Generator Takes Damage (Room 01)
//--------------------------------------------------------------------------------------------------
bool gt_ZerglingRescueGeneratorTakesDamageRoom01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitSetOwner(EventUnit(), gv_pLAYER_02_DOMINION, false);
    UnitGroupIssueOrder(UnitGroup("UmojanLabMicrobot", gv_pLAYER_02_DOMINION, RegionCircle(UnitGetPosition(EventUnit()), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(EventUnitDamageSourceUnit())), c_orderQueueAddToEnd);
    Wait(15.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZerglingRescueGeneratorTakesDamageRoom01_Init () {
    gt_ZerglingRescueGeneratorTakesDamageRoom01 = TriggerCreate("gt_ZerglingRescueGeneratorTakesDamageRoom01_Func");
    TriggerAddEventUnitDamaged(gt_ZerglingRescueGeneratorTakesDamageRoom01, UnitRefFromUnit(UnitFromId(39)), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zergling Rescue (Room04)
//--------------------------------------------------------------------------------------------------
bool gt_ZerglingRescueRoom04_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_explosionCenter;

    // Automatic Variable Declarations
    const int auto294F8384_ae = 10;
    int auto294F8384_var;
    unitgroup autoB1486280_g;
    int autoB1486280_u;
    unit autoB1486280_var;
    unitgroup autoED67641D_g;
    int autoED67641D_u;
    unit autoED67641D_var;

    // Variable Initialization
    lv_explosionCenter = UnitGetPosition(EventUnit());

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZLab01MusicEventB", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gv_savedZerglingCount += 1;
    PingDestroy(gv_rescueZerglingsPings[2]);
    libNtve_gf_KillModel(gv_generatorRoom04Actor);
    TextTagDestroy(gv_generatorRoom04Tag);
    MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(4)), 4.0, Color(0.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/2A5A932D"), null, RegionGetCenter(RegionFromId(4)));
    if ((RegionContainsPoint(RegionCircle(lv_explosionCenter, 15.0), CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
        CameraShakeStart(gv_pLAYER_01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.5, 2.0, 100.0, 1.5);
    }

    auto294F8384_var = 1;
    for ( ; auto294F8384_var <= auto294F8384_ae; auto294F8384_var += 1 ) {
        libSwaC_gf_CreateExplosionatPointAdvanced(gv_powerTrackRoom3[auto294F8384_var], "DefaultExplosionTerranLarge", SoundLink("UmojanLabChainReaction", -1));
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(gv_powerTrackRoom3[auto294F8384_var], 1.0), "XelNagaHullReactorConduit", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
        if ((auto294F8384_var > 3) && (RegionContainsPoint(RegionCircle(lv_explosionCenter, 15.0), CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
            CameraShakeStart(gv_pLAYER_01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.2, 2.0, 100.0, 0.5);
        }

        Wait(0.5, c_timeGame);
    }
    gf_PowerDownDoodadsIn(RegionFromId(52));
    gf_KillZerglingHoldingPen(RegionFromId(4));
    if ((RegionContainsPoint(RegionCircle(lv_explosionCenter, 15.0), CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
        CameraShakeStart(gv_pLAYER_01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.8, 3.0, 100.0, 3.0);
    }

    autoB1486280_g = UnitGroup("PathingBlocker2x2", 0, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB1486280_u = UnitGroupCount(autoB1486280_g, c_unitCountAll);
    for (;; autoB1486280_u -= 1) {
        autoB1486280_var = UnitGroupUnitFromEnd(autoB1486280_g, autoB1486280_u);
        if (autoB1486280_var == null) { break; }
        UnitRemove(autoB1486280_var);
    }
    autoED67641D_g = UnitGroup("Zergling", gv_pLAYER_02_DOMINION2, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoED67641D_u = UnitGroupCount(autoED67641D_g, c_unitCountAll);
    for (;; autoED67641D_u -= 1) {
        autoED67641D_var = UnitGroupUnitFromEnd(autoED67641D_g, autoED67641D_u);
        if (autoED67641D_var == null) { break; }
        gf_SaveZergling(autoED67641D_var, PointFromId(29));
    }
    TriggerExecute(gt_ObjectiveSaveZerglingsUpdate, true, false);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_ZerglingRescueQ, true, false);
    Wait(1.0, c_timeGame);
    if ((RegionContainsPoint(RegionCircle(lv_explosionCenter, 15.0), CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
        CameraShakeStart(gv_pLAYER_01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.3, 1.0, 100.0, 1.0);
    }

    Wait(10.0, c_timeGame);
    VisRevealerDestroy(gv_zerglingPenRevealers[2]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZerglingRescueRoom04_Init () {
    gt_ZerglingRescueRoom04 = TriggerCreate("gt_ZerglingRescueRoom04_Func");
    TriggerAddEventUnitDied(gt_ZerglingRescueRoom04, UnitRefFromUnit(UnitFromId(40)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zergling Rescue Generator Takes Damage (Room 04)
//--------------------------------------------------------------------------------------------------
bool gt_ZerglingRescueGeneratorTakesDamageRoom04_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitSetOwner(EventUnit(), gv_pLAYER_02_DOMINION, false);
    UnitGroupIssueOrder(UnitGroup("UmojanLabMicrobot", gv_pLAYER_02_DOMINION, RegionCircle(UnitGetPosition(EventUnit()), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(EventUnitDamageSourceUnit())), c_orderQueueAddToEnd);
    Wait(15.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZerglingRescueGeneratorTakesDamageRoom04_Init () {
    gt_ZerglingRescueGeneratorTakesDamageRoom04 = TriggerCreate("gt_ZerglingRescueGeneratorTakesDamageRoom04_Func");
    TriggerAddEventUnitDamaged(gt_ZerglingRescueGeneratorTakesDamageRoom04, UnitRefFromUnit(UnitFromId(40)), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zergling Rescue (Room05)
//--------------------------------------------------------------------------------------------------
bool gt_ZerglingRescueRoom05_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_explosionCenter;

    // Automatic Variable Declarations
    const int autoE4BF7608_ae = 9;
    int autoE4BF7608_var;
    unitgroup auto9D516E61_g;
    int auto9D516E61_u;
    unit auto9D516E61_var;
    unitgroup auto48C72D79_g;
    int auto48C72D79_u;
    unit auto48C72D79_var;
    unitgroup autoA3373A15_g;
    int autoA3373A15_u;
    unit autoA3373A15_var;
    unitgroup autoF07205E1_g;
    int autoF07205E1_u;
    unit autoF07205E1_var;

    // Variable Initialization
    lv_explosionCenter = UnitGetPosition(EventUnit());

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZLab01MusicEventC", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gv_savedZerglingCount += 1;
    PingDestroy(gv_rescueZerglingsPings[3]);
    PingDestroy(gv_rescueZerglingsPings[4]);
    libNtve_gf_KillModel(gv_generatorRoom05Actor);
    TextTagDestroy(gv_generatorRoom05Tag);
    MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(14)), 4.0, Color(0.00, 100.00, 0.00));
    MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(6)), 4.0, Color(0.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/9161C460"), null, RegionGetCenter(RegionFromId(14)));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/8C62B782"), null, RegionGetCenter(RegionFromId(6)));
    if ((RegionContainsPoint(RegionCircle(lv_explosionCenter, 20.0), CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
        CameraShakeStart(gv_pLAYER_01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.5, 2.0, 100.0, 1.5);
    }

    autoE4BF7608_var = 1;
    for ( ; autoE4BF7608_var <= autoE4BF7608_ae; autoE4BF7608_var += 1 ) {
        libSwaC_gf_CreateExplosionatPointAdvanced(gv_powerTrack1Room5[autoE4BF7608_var], "DefaultExplosionTerranLarge", SoundLink("UmojanLabChainReaction", -1));
        libSwaC_gf_CreateExplosionatPointAdvanced(gv_powerTrack2Room5[autoE4BF7608_var], "DefaultExplosionTerranLarge", SoundLink("UmojanLabChainReaction", -1));
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(gv_powerTrack1Room5[autoE4BF7608_var], 1.0), "XelNagaHullReactorConduit", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(gv_powerTrack2Room5[autoE4BF7608_var], 1.0), "XelNagaHullReactorConduit", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
        if ((autoE4BF7608_var > 3) && (RegionContainsPoint(RegionCircle(lv_explosionCenter, 20.0), CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
            CameraShakeStart(gv_pLAYER_01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.2, 2.0, 100.0, 0.5);
        }

        Wait(0.5, c_timeGame);
    }
    gf_PowerDownDoodadsIn(RegionFromId(55));
    gf_KillZerglingHoldingPen(RegionFromId(14));
    gf_KillZerglingHoldingPen(RegionFromId(6));
    if ((RegionContainsPoint(RegionCircle(lv_explosionCenter, 20.0), CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
        CameraShakeStart(gv_pLAYER_01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.8, 3.0, 100.0, 3.0);
    }

    auto9D516E61_g = UnitGroup("PathingBlocker1x1", 0, RegionFromId(14), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9D516E61_u = UnitGroupCount(auto9D516E61_g, c_unitCountAll);
    for (;; auto9D516E61_u -= 1) {
        auto9D516E61_var = UnitGroupUnitFromEnd(auto9D516E61_g, auto9D516E61_u);
        if (auto9D516E61_var == null) { break; }
        UnitRemove(auto9D516E61_var);
    }
    auto48C72D79_g = UnitGroup("PathingBlocker1x1", 0, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto48C72D79_u = UnitGroupCount(auto48C72D79_g, c_unitCountAll);
    for (;; auto48C72D79_u -= 1) {
        auto48C72D79_var = UnitGroupUnitFromEnd(auto48C72D79_g, auto48C72D79_u);
        if (auto48C72D79_var == null) { break; }
        UnitRemove(auto48C72D79_var);
    }
    autoA3373A15_g = UnitGroup("Zergling", gv_pLAYER_02_DOMINION2, RegionFromId(14), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA3373A15_u = UnitGroupCount(autoA3373A15_g, c_unitCountAll);
    for (;; autoA3373A15_u -= 1) {
        autoA3373A15_var = UnitGroupUnitFromEnd(autoA3373A15_g, autoA3373A15_u);
        if (autoA3373A15_var == null) { break; }
        gf_SaveZergling(autoA3373A15_var, PointFromId(30));
    }
    autoF07205E1_g = UnitGroup("Zergling", gv_pLAYER_02_DOMINION2, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF07205E1_u = UnitGroupCount(autoF07205E1_g, c_unitCountAll);
    for (;; autoF07205E1_u -= 1) {
        autoF07205E1_var = UnitGroupUnitFromEnd(autoF07205E1_g, autoF07205E1_u);
        if (autoF07205E1_var == null) { break; }
        gf_SaveZergling(autoF07205E1_var, PointFromId(209));
    }
    TriggerExecute(gt_ObjectiveSaveZerglingsUpdate, true, false);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_ZerglingRescueQ, true, false);
    Wait(1.0, c_timeGame);
    if ((RegionContainsPoint(RegionCircle(lv_explosionCenter, 20.0), CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
        CameraShakeStart(gv_pLAYER_01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.3, 1.0, 100.0, 1.0);
    }

    Wait(10.0, c_timeGame);
    VisRevealerDestroy(gv_zerglingPenRevealers[3]);
    VisRevealerDestroy(gv_zerglingPenRevealers[4]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZerglingRescueRoom05_Init () {
    gt_ZerglingRescueRoom05 = TriggerCreate("gt_ZerglingRescueRoom05_Func");
    TriggerAddEventUnitDied(gt_ZerglingRescueRoom05, UnitRefFromUnit(UnitFromId(42)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zergling Rescue Generator Takes Damage (Room 05)
//--------------------------------------------------------------------------------------------------
bool gt_ZerglingRescueGeneratorTakesDamageRoom05_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoB1A76E08_g;
    int autoB1A76E08_u;
    unit autoB1A76E08_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitSetOwner(EventUnit(), gv_pLAYER_02_DOMINION, false);
    autoB1A76E08_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB1A76E08_u = UnitGroupCount(autoB1A76E08_g, c_unitCountAll);
    for (;; autoB1A76E08_u -= 1) {
        autoB1A76E08_var = UnitGroupUnitFromEnd(autoB1A76E08_g, autoB1A76E08_u);
        if (autoB1A76E08_var == null) { break; }
        UnitIssueOrder(autoB1A76E08_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitFromId(42))), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZerglingRescueGeneratorTakesDamageRoom05_Init () {
    gt_ZerglingRescueGeneratorTakesDamageRoom05 = TriggerCreate("gt_ZerglingRescueGeneratorTakesDamageRoom05_Func");
    TriggerAddEventUnitDamaged(gt_ZerglingRescueGeneratorTakesDamageRoom05, UnitRefFromUnit(UnitFromId(42)), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zergling Rescue Q
//--------------------------------------------------------------------------------------------------
bool gt_ZerglingRescueQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoE0C8F395_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_zerglingRescueIndex += 1;
    autoE0C8F395_val = gv_zerglingRescueIndex;
    if (autoE0C8F395_val == 1) {
        TriggerQueueEnter();
        gv_zerglingsRescued01 = true;
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab01|Line00198", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        gv_s01_TransmissionCurrent01 = TransmissionLastSent();
        TransmissionWait(gv_s01_TransmissionCurrent01, 0.0);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }
    else if (autoE0C8F395_val == 2) {
        TriggerQueueEnter();
        gv_zerglingsRescued03 = true;
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab01|Line00200", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        gv_s01_TransmissionCurrent01 = TransmissionLastSent();
        TransmissionWait(gv_s01_TransmissionCurrent01, 0.0);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }
    else if (autoE0C8F395_val == 3) {
        TriggerQueueEnter();
        gv_zerglingsRescued03 = true;
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libSwaC_gf_SendTransmissionCampaign(gv_vALERIAN, "zMission_Lab01|Line00092", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        gv_s01_TransmissionCurrent01 = TransmissionLastSent();
        TransmissionWait(gv_s01_TransmissionCurrent01, 0.0);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab01|Line00093", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        gv_s01_TransmissionCurrent01 = TransmissionLastSent();
        TransmissionWait(gv_s01_TransmissionCurrent01, 0.0);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZerglingRescueQ_Init () {
    gt_ZerglingRescueQ = TriggerCreate("gt_ZerglingRescueQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Mission Help Q
//--------------------------------------------------------------------------------------------------
bool gt_TipMissionHelpQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_DisplayMissionTip(StringExternal("Param/Value/55569ECB"));
    Wait(libSwaC_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipMissionHelpQ_Init () {
    gt_TipMissionHelpQ = TriggerCreate("gt_TipMissionHelpQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CampaignInitAI();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Minerals
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveMinerals_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveMinerals_Init () {
    gt_AIGiveMinerals = TriggerCreate("gt_AIGiveMinerals_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_pLAYER_02_DOMINION, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Gas
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveGas_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveGas_Init () {
    gt_AIGiveGas = TriggerCreate("gt_AIGiveGas_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_pLAYER_02_DOMINION, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat All Units Killed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatAllUnitsKilled_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), libSwaC_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/B6676350"), libSwaC_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatAllUnitsKilled_Init () {
    gt_DefeatAllUnitsKilled = TriggerCreate("gt_DefeatAllUnitsKilled_Func");
    TriggerEnable(gt_DefeatAllUnitsKilled, false);
    TriggerAddEventTimePeriodic(gt_DefeatAllUnitsKilled, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Warbot Destroyed Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryWarbotDestroyedCompleted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryWarbotDestroyedCompleted_Init () {
    gt_VictoryWarbotDestroyedCompleted = TriggerCreate("gt_VictoryWarbotDestroyedCompleted_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TimerPause(gv_speedRunTimer, true);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveDestroyEradicatorComplete, true, true);
    libSwaC_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((ObjectiveGetState(gv_objectiveDestroyDominionBase3233) == c_objectiveStateCompleted)) {
        libSwaC_gf_CampaignAwardAchievement("ZLab01_1", gv_pLAYER_01_USER);
    }

    TriggerExecute(gt_AchievementTimedRunNH, true, false);
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/AF940298"), IntToText(gv_sentryBotsDestroyed));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/36135BBC"), IntToText(gv_largestZerglingForce));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/9161A988"), IntToText(gv_zerglingsLost));
    TextExpressionSetToken("Param/Expression/3AD91AA4", "A", IntToText(gv_savedZerglingCount));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/7D79C68E"), TextExpressionAssemble("Param/Expression/3AD91AA4"));
    TextExpressionSetToken("Param/Expression/177CCEBE", "A", IntToText(gv_factoriesDestroyed));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/99669353"), TextExpressionAssemble("Param/Expression/177CCEBE"));
    libSwaC_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_Defeat, false);
    TriggerEnable(gt_DefeatCheat, false);
    gv_gameOver = true;
    libSwaC_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_Victory, false);
    TriggerEnable(gt_VictoryCheat, false);
    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - Kill Sentry Bots
//--------------------------------------------------------------------------------------------------
bool gt_AchievementKillSentryBots_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "UmojanLabMicrobot"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_sentryBotsDestroyed += 1;
    if ((libHots_gf_DifficultyValueInt2(1, 1, 1) == 1) && (gv_sentryBotsDestroyed >= 35)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_MicroBotDeaths, true);
        libSwaC_gf_CampaignAwardAchievement("ZLab01_2", gv_pLAYER_01_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementKillSentryBots_Init () {
    gt_AchievementKillSentryBots = TriggerCreate("gt_AchievementKillSentryBots_Func");
    TriggerAddEventUnitDied(gt_AchievementKillSentryBots, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - Timed Run N/H
//--------------------------------------------------------------------------------------------------
bool gt_AchievementTimedRunNH_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libHots_gf_DifficultyValueInt2(0, 1, 1) == 1))) {
            return false;
        }

        if (!((TimerGetRemaining(gv_speedRunTimer) > 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CampaignAwardAchievement("ZLab01_3", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementTimedRunNH_Init () {
    gt_AchievementTimedRunNH = TriggerCreate("gt_AchievementTimedRunNH_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - Destroy 3 Factories H
//--------------------------------------------------------------------------------------------------
bool gt_AchievementDestroy3FactoriesH_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_factoriesDestroyed += 1;
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1) && (gv_factoriesDestroyed == 3) && (TimerGetRemaining(gv_factoriesDestroyedTimer) > 0.0)) {
        libSwaC_gf_CampaignAwardAchievement("Mastery_Lab1", gv_pLAYER_01_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementDestroy3FactoriesH_Init () {
    gt_AchievementDestroy3FactoriesH = TriggerCreate("gt_AchievementDestroy3FactoriesH_Func");
    TriggerAddEventUnitDied(gt_AchievementDestroy3FactoriesH, UnitRefFromUnit(UnitFromId(220)));
    TriggerAddEventUnitDied(gt_AchievementDestroy3FactoriesH, UnitRefFromUnit(UnitFromId(323)));
    TriggerAddEventUnitDied(gt_AchievementDestroy3FactoriesH, UnitRefFromUnit(UnitFromId(6)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Largest Zergling Force
//--------------------------------------------------------------------------------------------------
bool gt_LargestZerglingForce_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentZerglings;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentZerglings = TechTreeUnitCount(gv_pLAYER_01_USER, "Zergling", c_techCountCompleteOnly);
    if ((lv_currentZerglings > gv_largestZerglingForce)) {
        gv_largestZerglingForce = lv_currentZerglings;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LargestZerglingForce_Init () {
    gt_LargestZerglingForce = TriggerCreate("gt_LargestZerglingForce_Func");
    TriggerAddEventTimePeriodic(gt_LargestZerglingForce, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MicroBot Deaths
//--------------------------------------------------------------------------------------------------
bool gt_MicroBotDeaths_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "UmojanLabMicrobot"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_sentryBotsDestroyed += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MicroBotDeaths_Init () {
    gt_MicroBotDeaths = TriggerCreate("gt_MicroBotDeaths_Func");
    TriggerEnable(gt_MicroBotDeaths, false);
    TriggerAddEventUnitDied(gt_MicroBotDeaths, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zergling Dies
//--------------------------------------------------------------------------------------------------
bool gt_ZerglingDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Zergling"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_zerglingsLost += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZerglingDies_Init () {
    gt_ZerglingDies = TriggerCreate("gt_ZerglingDies_Func");
    TriggerAddEventUnitDied(gt_ZerglingDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Select Drone Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSelectDroneCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZLab01Objective10");
    gv_objectiveDestroyDominionBase3 = ObjectiveLastCreated();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSelectDroneCreate_Init () {
    gt_ObjectiveSelectDroneCreate = TriggerCreate("gt_ObjectiveSelectDroneCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Select Drone Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSelectDroneComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveSelectDroneCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZLab01Objective10", libSwaC_ge_MissionObjectiveState_Completed);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSelectDroneComplete_Init () {
    gt_ObjectiveSelectDroneComplete = TriggerCreate("gt_ObjectiveSelectDroneComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Mutate Hatchery Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveMutateHatcheryCreateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_CreateObjectiveCampaign("ZLab01Objective01");
    gv_objectiveDestroyDominionBase = ObjectiveLastCreated();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveMutateHatcheryCreateQ_Init () {
    gt_ObjectiveMutateHatcheryCreateQ = TriggerCreate("gt_ObjectiveMutateHatcheryCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Mutate Hatchery Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveMutateHatcheryComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveMutateHatcheryCreateQ, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZLab01Objective01", libSwaC_ge_MissionObjectiveState_Completed);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveMutateHatcheryComplete_Init () {
    gt_ObjectiveMutateHatcheryComplete = TriggerCreate("gt_ObjectiveMutateHatcheryComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Harvest Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveHarvestCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZLab01Objective03");
    gv_objectiveDestroyDominionBase3222 = ObjectiveLastCreated();
    libSwaC_gf_SetMissionObjectiveProgress2("ZLab01Objective03", 0, true, null, true);
    TriggerEnable(gt_ObjectiveHarvestUpdate, true);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveHarvestCreate_Init () {
    gt_ObjectiveHarvestCreate = TriggerCreate("gt_ObjectiveHarvestCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Harvest Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveHarvestCompleteQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerEnable(gt_HarvestingStarted, false);
    TriggerExecute(gt_ObjectiveHarvestCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZLab01Objective03", libSwaC_ge_MissionObjectiveState_Completed);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    TriggerExecute(gt_SpawningPoolTeachtoMutate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveHarvestCompleteQ_Init () {
    gt_ObjectiveHarvestCompleteQ = TriggerCreate("gt_ObjectiveHarvestCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Harvest Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveHarvestUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mineralAmount = PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropMineralsCollected);
    libSwaC_gf_SetMissionObjectiveProgress2("ZLab01Objective03", gv_mineralAmount, true, null, true);
    if ((gv_mineralAmount >= 75)) {
        TriggerExecute(gt_OverlordTeachQ, true, false);
    }

    if ((gv_mineralAmount >= 300)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_ObjectiveHarvestCompleteQ, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveHarvestUpdate_Init () {
    gt_ObjectiveHarvestUpdate = TriggerCreate("gt_ObjectiveHarvestUpdate_Func");
    TriggerEnable(gt_ObjectiveHarvestUpdate, false);
    TriggerAddEventPlayerPropChange(gt_ObjectiveHarvestUpdate, gv_pLAYER_01_USER, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Morph Overlord Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveMorphOverlordCreateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_CreateObjectiveCampaign("ZLab01Objective04");
    gv_objectiveDestroyDominionBase322 = ObjectiveLastCreated();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveMorphOverlordCreateQ_Init () {
    gt_ObjectiveMorphOverlordCreateQ = TriggerCreate("gt_ObjectiveMorphOverlordCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Morph Overlord Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveMorphOverlordComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveMorphOverlordCreateQ, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZLab01Objective04", libSwaC_ge_MissionObjectiveState_Completed);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveMorphOverlordComplete_Init () {
    gt_ObjectiveMorphOverlordComplete = TriggerCreate("gt_ObjectiveMorphOverlordComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Mutate Spawning Pool Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveMutateSpawningPoolCreateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_CreateObjectiveCampaign("ZLab01Objective05");
    gv_objectiveDestroyDominionBase2 = ObjectiveLastCreated();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveMutateSpawningPoolCreateQ_Init () {
    gt_ObjectiveMutateSpawningPoolCreateQ = TriggerCreate("gt_ObjectiveMutateSpawningPoolCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Mutate Spawning Pool Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveMutateSpawningPoolComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveMutateSpawningPoolCreateQ, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZLab01Objective05", libSwaC_ge_MissionObjectiveState_Completed);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveMutateSpawningPoolComplete_Init () {
    gt_ObjectiveMutateSpawningPoolComplete = TriggerCreate("gt_ObjectiveMutateSpawningPoolComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Morph Zerglings Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveMorphZerglingsCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_ObjectiveMorphZerglingsUpdate, true);
    libSwaC_gf_CreateObjectiveCampaign("ZLab01Objective06");
    gv_objectiveDestroyDominionBase323 = ObjectiveLastCreated();
    libSwaC_gf_SetMissionObjectiveProgress2("ZLab01Objective06", 0, true, null, true);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveMorphZerglingsCreate_Init () {
    gt_ObjectiveMorphZerglingsCreate = TriggerCreate("gt_ObjectiveMorphZerglingsCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Morph Zerglings Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveMorphZerglingsUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_zerglings;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveMorphZerglingsCreate, true, false);
    lv_zerglings = UnitGroupCount(UnitGroup("Zergling", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    lv_zerglings = MinI(lv_zerglings, 6);
    libSwaC_gf_SetMissionObjectiveProgress2("ZLab01Objective06", lv_zerglings, true, null, true);
    if ((lv_zerglings >= 6)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_DroneUsedQ, false);
        TriggerExecute(gt_ObjectiveMorphZerglingsComplete, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveMorphZerglingsUpdate_Init () {
    gt_ObjectiveMorphZerglingsUpdate = TriggerCreate("gt_ObjectiveMorphZerglingsUpdate_Func");
    TriggerEnable(gt_ObjectiveMorphZerglingsUpdate, false);
    TriggerAddEventTimePeriodic(gt_ObjectiveMorphZerglingsUpdate, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Morph Zerglings Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveMorphZerglingsComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveMorphZerglingsCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZLab01Objective06", libSwaC_ge_MissionObjectiveState_Completed);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/C9580364"));
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_MidQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveMorphZerglingsComplete_Init () {
    gt_ObjectiveMorphZerglingsComplete = TriggerCreate("gt_ObjectiveMorphZerglingsComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Gas Turrets Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveGasTurretsCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZLab01Objective11");
    libSwaC_gf_SetMissionObjectiveProgress2("ZLab01Objective11", gv_objective_GasTurretKILLS, true, null, true);
    gv_objectiveDestroyDominionBase32 = ObjectiveLastCreated();
    if ((UnitIsAlive(UnitFromId(255)) == true) && (UnitGetPropertyFixed(UnitFromId(255), c_unitPropLifePercent, c_unitPropCurrent) < 100.0)) {
        gf_CreateHelperonUnit(StringExternal("Param/Value/258A45C9"), UnitFromId(255), libSwaC_ge_CampaginReticleType_TerranEnemy, libSwaC_ge_CampaginReticleSize_Small, 0.0);
        libHots_gf_StoreTextTagForUnit(UnitFromId(255), 1, TextTagLastCreated());
        libHots_gf_StoreActorForUnit(UnitFromId(255), 1, libNtve_gf_ActorLastCreated());
    }

    if ((UnitIsAlive(UnitFromId(258)) == true) && (UnitGetPropertyFixed(UnitFromId(258), c_unitPropLifePercent, c_unitPropCurrent) < 100.0)) {
        gf_CreateHelperonUnit(StringExternal("Param/Value/A7E6F73D"), UnitFromId(258), libSwaC_ge_CampaginReticleType_TerranEnemy, libSwaC_ge_CampaginReticleSize_Small, 0.0);
        libHots_gf_StoreTextTagForUnit(UnitFromId(258), 1, TextTagLastCreated());
        libHots_gf_StoreActorForUnit(UnitFromId(258), 1, libNtve_gf_ActorLastCreated());
    }

    if ((UnitIsAlive(UnitFromId(292)) == true) && (UnitGetPropertyFixed(UnitFromId(292), c_unitPropLifePercent, c_unitPropCurrent) < 100.0)) {
        gf_CreateHelperonUnit(StringExternal("Param/Value/364532CA"), UnitFromId(292), libSwaC_ge_CampaginReticleType_TerranEnemy, libSwaC_ge_CampaginReticleSize_Small, 0.0);
        libHots_gf_StoreTextTagForUnit(UnitFromId(292), 1, TextTagLastCreated());
        libHots_gf_StoreActorForUnit(UnitFromId(292), 1, libNtve_gf_ActorLastCreated());
    }

    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveGasTurretsCreate_Init () {
    gt_ObjectiveGasTurretsCreate = TriggerCreate("gt_ObjectiveGasTurretsCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Gas Turrets Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveGasTurretsUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_zerglings;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveGasTurretsCreate, true, false);
    gv_objective_GasTurretKILLS += 1;
    libSwaC_gf_SetMissionObjectiveProgress2("ZLab01Objective11", gv_objective_GasTurretKILLS, true, null, true);
    TriggerExecute(gt_ObjectiveGasTurretsComplete, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveGasTurretsUpdate_Init () {
    gt_ObjectiveGasTurretsUpdate = TriggerCreate("gt_ObjectiveGasTurretsUpdate_Func");
    TriggerAddEventUnitDied(gt_ObjectiveGasTurretsUpdate, UnitRefFromUnit(UnitFromId(255)));
    TriggerAddEventUnitDied(gt_ObjectiveGasTurretsUpdate, UnitRefFromUnit(UnitFromId(258)));
    TriggerAddEventUnitDied(gt_ObjectiveGasTurretsUpdate, UnitRefFromUnit(UnitFromId(292)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Gas Turrets Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveGasTurretsComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(255)) == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(258)) == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(292)) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveGasTurretsCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZLab01Objective11", libSwaC_ge_MissionObjectiveState_Completed);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveGasTurretsComplete_Init () {
    gt_ObjectiveGasTurretsComplete = TriggerCreate("gt_ObjectiveGasTurretsComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Eradicator Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyEradicatorCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZLab01Objective08");
    gv_objectiveDestroyDominionBase3233 = ObjectiveLastCreated();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyEradicatorCreate_Init () {
    gt_ObjectiveDestroyEradicatorCreate = TriggerCreate("gt_ObjectiveDestroyEradicatorCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Eradicator Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyEradicatorComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "UmojanLabWarbot"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (GameGetMissionTime() < 481.0)) {
        libSwaC_gf_CampaignAwardAchievement("Anniversary_ZLab01", 1);
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyEradicatorCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZLab01Objective08", libSwaC_ge_MissionObjectiveState_Completed);
    libSwaC_gf_SetMissionObjectiveProgress2("ZLab01Objective08", 1, true, null, false);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyEradicatorComplete_Init () {
    gt_ObjectiveDestroyEradicatorComplete = TriggerCreate("gt_ObjectiveDestroyEradicatorComplete_Func");
    TriggerAddEventUnitDied(gt_ObjectiveDestroyEradicatorComplete, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Save Zerglings Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSaveZerglingsCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZLab01Objective09");
    gv_objectiveDestroyDominionBase3232 = ObjectiveLastCreated();
    libSwaC_gf_SetMissionObjectiveProgress2("ZLab01Objective09", gv_savedZerglingCount, true, null, true);
    TriggerEnable(gt_ObjectiveSaveZerglingsUpdate, true);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_ObjectiveSaveZerglingsCreatePings, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSaveZerglingsCreate_Init () {
    gt_ObjectiveSaveZerglingsCreate = TriggerCreate("gt_ObjectiveSaveZerglingsCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Save Zerglings Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSaveZerglingsComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveSaveZerglingsCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZLab01Objective09", libSwaC_ge_MissionObjectiveState_Completed);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSaveZerglingsComplete_Init () {
    gt_ObjectiveSaveZerglingsComplete = TriggerCreate("gt_ObjectiveSaveZerglingsComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Save Zerglings Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSaveZerglingsUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_zerglings;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveSaveZerglingsCreate, true, false);
    libSwaC_gf_SetMissionObjectiveProgress2("ZLab01Objective09", gv_savedZerglingCount, true, null, true);
    if ((gv_savedZerglingCount == 3)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_ObjectiveSaveZerglingsComplete, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSaveZerglingsUpdate_Init () {
    gt_ObjectiveSaveZerglingsUpdate = TriggerCreate("gt_ObjectiveSaveZerglingsUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Save Zerglings Create Pings
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSaveZerglingsCreatePings_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectivePing(false, UnitGetPosition(UnitFromId(39)), StringExternal("Param/Value/0F72BF68"));
    gv_rescueZerglingsPings[1] = PingLastCreated();
    libSwaC_gf_CreateObjectivePing(false, UnitGetPosition(UnitFromId(40)), StringExternal("Param/Value/BBA82BDA"));
    gv_rescueZerglingsPings[2] = PingLastCreated();
    libSwaC_gf_CreateObjectivePing(false, UnitGetPosition(UnitFromId(42)), StringExternal("Param/Value/B625C69E"));
    gv_rescueZerglingsPings[3] = PingLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSaveZerglingsCreatePings_Init () {
    gt_ObjectiveSaveZerglingsCreatePings = TriggerCreate("gt_ObjectiveSaveZerglingsCreatePings_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Campaign Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_CampaignIntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libSwaC_gf_CurrentMissionIsSimulation() == true)) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_PlayCinematic("Zerg01 - Identity Crisis", true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CampaignIntroQ_Init () {
    gt_CampaignIntroQ = TriggerCreate("gt_CampaignIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Campaign Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_CampaignIntroSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, c_transitionDurationImmediate);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleUI, false);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    gv_campaignIntroDialog = DialogLastCreated();
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "HotS_CampaignIntro/CampaignIntroPanel");
    gv_campaignIntroPanel = DialogControlLastCreated();
    DialogControlHookup(gv_campaignIntroPanel, c_triggerControlTypeLabel, "StoryText");
    gv_campaignIntroLabel = DialogControlLastCreated();
    DialogControlFadeTransparency(gv_campaignIntroPanel, PlayerGroupAll(), 0.0, 100.0);
    libNtve_gf_SetDialogItemText(gv_campaignIntroLabel, ConversationDataStateText("StoryModeText|Campaign_Intro_Text_A", "Description"), PlayerGroupAll());
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CampaignIntroSetup_Init () {
    gt_CampaignIntroSetup = TriggerCreate("gt_CampaignIntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Campaign Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_CampaignIntroCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 0.0, 0.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 3.0);
    SoundChannelStop(PlayerGroupAll(), c_soundCategoryMusic);
    SoundChannelPause(PlayerGroupAll(), c_soundCategoryMusic, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZCampaignIntroMusic", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    DialogControlFadeTransparency(gv_campaignIntroPanel, PlayerGroupAll(), 3.0, 0.0);
    DialogControlCreate(gv_campaignIntroDialog, c_triggerControlTypeCutscene);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCutscene(DialogControlLastCreated(), "Cutscenes\\zLD_Interlude.SC2Cutscene", PlayerGroupAll());
    gv_campaignIntroCutscene = CutsceneGetTriggerControl(DialogControlLastCreated());
    CutscenePlay(gv_campaignIntroCutscene);
    TriggerEnable(gt_CampaignIntroCinematicContinue, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    DialogControlFadeTransparency(gv_campaignIntroLabel, PlayerGroupAll(), 4.0, 0.0);
    while (true) {
        Wait(10.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CampaignIntroCinematic_Init () {
    gt_CampaignIntroCinematic = TriggerCreate("gt_CampaignIntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Campaign Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_CampaignIntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlFadeTransparency(gv_campaignIntroPanel, PlayerGroupAll(), 2.0, 100.0);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
    libSwaC_gf_CinematicFade(false, 2.0, Color(0.00, 0.00, 0.00), true);
    CutsceneStop(gv_campaignIntroCutscene);
    DialogDestroy(gv_campaignIntroDialog);
    libSwaC_gf_CinematicFade(true, 0.0, Color(0.00, 0.00, 0.00), true);
    libNtve_gf_HideGameUI(true, PlayerGroupAll());
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleUI, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CampaignIntroCinematicEnd_Init () {
    gt_CampaignIntroCinematicEnd = TriggerCreate("gt_CampaignIntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Campaign Intro Cinematic Continue
//--------------------------------------------------------------------------------------------------
bool gt_CampaignIntroCinematicContinue_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_CampaignIntroCinematic);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CampaignIntroCinematicContinue_Init () {
    gt_CampaignIntroCinematicContinue = TriggerCreate("gt_CampaignIntroCinematicContinue_Func");
    TriggerEnable(gt_CampaignIntroCinematicContinue, false);
    TriggerAddEventMouseClicked(gt_CampaignIntroCinematicContinue, c_playerAny, c_mouseButtonNone, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto38CDC813_g;
    int auto38CDC813_u;
    unit auto38CDC813_var;
    unitgroup auto08A660B1_g;
    int auto08A660B1_u;
    unit auto08A660B1_var;
    unitgroup auto2B0826E3_g;
    int auto2B0826E3_u;
    unit auto2B0826E3_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    gv_inCinematic = true;
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    libSwaC_gf_EnableDisableZerglingRespawn(false);
    auto38CDC813_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto38CDC813_u = UnitGroupCount(auto38CDC813_g, c_unitCountAll);
    for (;; auto38CDC813_u -= 1) {
        auto38CDC813_var = UnitGroupUnitFromEnd(auto38CDC813_g, auto38CDC813_u);
        if (auto38CDC813_var == null) { break; }
        if ((libNtve_gf_UnitIsPaused(auto38CDC813_var) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, auto38CDC813_var);
            libNtve_gf_PauseUnit(auto38CDC813_var, true);
        }

    }
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    UnitGroupAddUnitGroup(gv_cinematicHiddenUnits, UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    auto08A660B1_g = gv_cinematicHiddenUnits;
    auto08A660B1_u = UnitGroupCount(auto08A660B1_g, c_unitCountAll);
    for (;; auto08A660B1_u -= 1) {
        auto08A660B1_var = UnitGroupUnitFromEnd(auto08A660B1_g, auto08A660B1_u);
        if (auto08A660B1_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto08A660B1_var, false);
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "KerriganGhostLabUnarmed", 0, gv_pLAYER_01_USER, PointFromId(63));
    gv_kERRIGAN = UnitLastCreated();
    UnitSetState(gv_kERRIGAN, c_unitStateFidget, false);
    UnitSetTeamColorIndex(UnitLastCreated(), 6);
    libNtve_gf_CreateUnitsAtPoint2(1, "Drone", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION2, PointFromId(2));
    gv_startingDrone = UnitLastCreated();
    libSwaC_gf_SetUnitInfoTextCampaign(gv_startingDrone, StringExternal("Param/Value/9C7A3848"), UnitTypeGetName(UnitGetType(gv_startingDrone)), null);
    UnitSetState(gv_startingDrone, c_unitStateTooltipable, true);
    libNtve_gf_ShareVisionofUnit(gv_startingDrone, true, gv_pLAYER_01_USER);
    libNtve_gf_ShareVisionofUnit(gv_vALERIAN, true, gv_pLAYER_01_USER);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    auto2B0826E3_g = UnitGroup(null, c_playerAny, RegionFromId(47), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto2B0826E3_u = UnitGroupCount(auto2B0826E3_g, c_unitCountAll);
    for (;; auto2B0826E3_u -= 1) {
        auto2B0826E3_var = UnitGroupUnitFromEnd(auto2B0826E3_g, auto2B0826E3_u);
        if (auto2B0826E3_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto2B0826E3_var, true);
    }
    libNtve_gf_ShowHideUnit(UnitFromId(974), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(25), 0.0, -1, 10.0, true);
    TriggerExecute(gt_IntroMusic, true, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicInTransmission);
    libSwaC_gf_SendTransmissionCampaign(gv_kERRIGAN, "zBriefing_Lab01|Line00017", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(158), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(22), (SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Lab01|Line00013", true), c_soundIndexAny)) - 1.0), -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(gv_vALERIAN, "zBriefing_Lab01|Line00013", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(25), 0.0, -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(gv_kERRIGAN, "zBriefing_Lab01|Line00014", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(158), 0.0, -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(gv_vALERIAN, "zBriefing_Lab01|Line00015", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 1.5);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(149), 3.0, -1, 10.0, true);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(57), "UmojanLabZergCrates", c_animNameDefault, "Stand Unpowered Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicOutofTransmission);
    UnitIssueOrder(gv_startingDrone, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(24)), c_orderQueueReplace);
    Wait(0.3, c_timeReal);
    SoundPlay(SoundLink("Event_Lab01_DroneEmerge", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introDroneSound = SoundLastPlayed();
    Wait(1.7, c_timeReal);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(57), "UmojanLabZergCrates", c_animNameDefault, "Stand Unpowered End", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicInTransmission);
    libSwaC_gf_SendTransmissionCampaign(gv_kERRIGAN, "zBriefing_Lab01|Line00012", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_vALERIAN, "zBriefing_Lab01|Line00016", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        TriggerExecute(gt_IntroCleanupNotSkipped, true, true);
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
        TriggerExecute(gt_IntroCleanupSkipped, true, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup Skipped
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanupSkipped_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto916393F8_g;
    int auto916393F8_u;
    unit auto916393F8_var;
    unitgroup auto9CF215F4_g;
    int auto9CF215F4_u;
    unit auto9CF215F4_var;
    unitgroup auto53748D3F_g;
    int auto53748D3F_u;
    unit auto53748D3F_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_introMusicCompleted == false)) {
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    }

    libNtve_gf_ClearAnimationOnDoodadsInRegion(RegionFromId(57), null, c_animNameDefault);
    auto916393F8_g = gv_cinematicTempUnits;
    auto916393F8_u = UnitGroupCount(auto916393F8_g, c_unitCountAll);
    for (;; auto916393F8_u -= 1) {
        auto916393F8_var = UnitGroupUnitFromEnd(auto916393F8_g, auto916393F8_u);
        if (auto916393F8_var == null) { break; }
        UnitRemove(auto916393F8_var);
    }
    auto9CF215F4_g = gv_cinematicHiddenUnits;
    auto9CF215F4_u = UnitGroupCount(auto9CF215F4_g, c_unitCountAll);
    for (;; auto9CF215F4_u -= 1) {
        auto9CF215F4_var = UnitGroupUnitFromEnd(auto9CF215F4_g, auto9CF215F4_u);
        if (auto9CF215F4_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto9CF215F4_var, true);
    }
    auto53748D3F_g = gv_cinematicPausedUnits;
    auto53748D3F_u = UnitGroupCount(auto53748D3F_g, c_unitCountAll);
    for (;; auto53748D3F_u -= 1) {
        auto53748D3F_var = UnitGroupUnitFromEnd(auto53748D3F_g, auto53748D3F_u);
        if (auto53748D3F_var == null) { break; }
        libNtve_gf_PauseUnit(auto53748D3F_var, false);
    }
    libNtve_gf_ShowHideUnit(gv_mainDoor, true);
    libNtve_gf_ShowHideUnit(UnitFromId(974), true);
    UnitRemove(gv_kERRIGAN);
    libNtve_gf_CreateUnitsAtPoint2(1, "Drone", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION2, PointFromId(24));
    gv_startingDrone = UnitLastCreated();
    libSwaC_gf_SetUnitInfoTextCampaign(gv_startingDrone, StringExternal("Param/Value/6A8E78D3"), UnitTypeGetName(UnitGetType(gv_startingDrone)), null);
    UnitSetState(gv_startingDrone, c_unitStateTooltipable, true);
    libNtve_gf_ShareVisionofUnit(gv_vALERIAN, false, gv_pLAYER_01_USER);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    RegionPlayableMapSet(RegionFromId(47));
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(12), true, false);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(47));
    gv_startingVision = VisRevealerLastCreated();
    SoundStop(gv_introDroneSound, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeHeroPanel, false);
    lv_fadeDuration = 1.0;
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    gv_inCinematic = false;
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(44)), lv_fadeDuration);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_IntroSequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanupSkipped_Init () {
    gt_IntroCleanupSkipped = TriggerCreate("gt_IntroCleanupSkipped_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup Not Skipped
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanupNotSkipped_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto4B9E4BAE_g;
    int auto4B9E4BAE_u;
    unit auto4B9E4BAE_var;
    unitgroup autoF41FA946_g;
    int autoF41FA946_u;
    unit autoF41FA946_var;
    unitgroup auto9498EA1E_g;
    int auto9498EA1E_u;
    unit auto9498EA1E_var;
    unitgroup autoC5190359_g;
    int autoC5190359_u;
    unit autoC5190359_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto4B9E4BAE_g = gv_cinematicHiddenUnits;
    auto4B9E4BAE_u = UnitGroupCount(auto4B9E4BAE_g, c_unitCountAll);
    for (;; auto4B9E4BAE_u -= 1) {
        auto4B9E4BAE_var = UnitGroupUnitFromEnd(auto4B9E4BAE_g, auto4B9E4BAE_u);
        if (auto4B9E4BAE_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto4B9E4BAE_var, true);
    }
    autoF41FA946_g = gv_cinematicPausedUnits;
    autoF41FA946_u = UnitGroupCount(autoF41FA946_g, c_unitCountAll);
    for (;; autoF41FA946_u -= 1) {
        autoF41FA946_var = UnitGroupUnitFromEnd(autoF41FA946_g, autoF41FA946_u);
        if (autoF41FA946_var == null) { break; }
        libNtve_gf_PauseUnit(autoF41FA946_var, false);
    }
    libNtve_gf_ShowHideUnit(gv_mainDoor, true);
    libNtve_gf_ShowHideUnit(UnitFromId(974), true);
    UnitRemove(gv_kERRIGAN);
    libNtve_gf_ClearAnimationOnDoodadsInRegion(RegionFromId(57), null, c_animNameDefault);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    auto9498EA1E_g = UnitGroup("UmojanLabMineralField", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9498EA1E_u = UnitGroupCount(auto9498EA1E_g, c_unitCountAll);
    for (;; auto9498EA1E_u -= 1) {
        auto9498EA1E_var = UnitGroupUnitFromEnd(auto9498EA1E_g, auto9498EA1E_u);
        if (auto9498EA1E_var == null) { break; }
        libNtve_gf_ShareVisionofUnit(auto9498EA1E_var, true, gv_pLAYER_01_USER);
    }
    Wait(0.1, c_timeGame);
    RegionPlayableMapSet(RegionFromId(47));
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(12), true, false);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(47));
    gv_startingVision = VisRevealerLastCreated();
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeHeroPanel, false);
    lv_fadeDuration = 2.0;
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    gv_inCinematic = false;
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(44), lv_fadeDuration, -1, 10.0, true);
    Wait(lv_fadeDuration, c_timeGame);
    autoC5190359_g = UnitGroup("UmojanLabMineralField", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC5190359_u = UnitGroupCount(autoC5190359_g, c_unitCountAll);
    for (;; autoC5190359_u -= 1) {
        autoC5190359_var = UnitGroupUnitFromEnd(autoC5190359_g, autoC5190359_u);
        if (autoC5190359_var == null) { break; }
        libNtve_gf_ShareVisionofUnit(autoC5190359_var, false, gv_pLAYER_01_USER);
    }
    libNtve_gf_ShareVisionofUnit(gv_vALERIAN, false, gv_pLAYER_01_USER);
    TriggerExecute(gt_IntroSequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanupNotSkipped_Init () {
    gt_IntroCleanupNotSkipped = TriggerCreate("gt_IntroCleanupNotSkipped_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Music
//--------------------------------------------------------------------------------------------------
bool gt_IntroMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_soundtrack = "ZLab01MusicIntro";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    gv_introMusicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroMusic_Init () {
    gt_IntroMusic = TriggerCreate("gt_IntroMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Q
//--------------------------------------------------------------------------------------------------
bool gt_MidQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_MidSetup, true, true);
    TriggerExecute(gt_MidCinematic, true, true);
    TriggerExecute(gt_MidCinematicEnd, true, true);
    TriggerExecute(gt_MidCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidQ_Init () {
    gt_MidQ = TriggerCreate("gt_MidQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto4B8EC178_g;
    int auto4B8EC178_u;
    unit auto4B8EC178_var;
    unitgroup auto38D23326_g;
    int auto38D23326_u;
    unit auto38D23326_var;
    unitgroup auto8F12DB35_g;
    int auto8F12DB35_u;
    unit auto8F12DB35_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    gv_inCinematic = true;
    CameraSave(gv_pLAYER_01_USER);
    libNtve_gf_StoreUnitSelection(gv_pLAYER_01_USER, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    RegionPlayableMapSet(RegionFromId(3));
    libSwaC_gf_EnableDisableZerglingRespawn(false);
    libNtve_gf_CreateUnitsAtPoint2(1, "KerriganGhostLabUnarmed", 0, gv_pLAYER_01_USER, PointFromId(63));
    gv_kERRIGAN = UnitLastCreated();
    UnitSetPropertyFixed(gv_kERRIGAN, c_unitPropMovementSpeed, 1.75);
    UnitSetState(gv_kERRIGAN, c_unitStateFidget, false);
    UnitSetTeamColorIndex(UnitLastCreated(), 6);
    auto4B8EC178_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto4B8EC178_u = UnitGroupCount(auto4B8EC178_g, c_unitCountAll);
    for (;; auto4B8EC178_u -= 1) {
        auto4B8EC178_var = UnitGroupUnitFromEnd(auto4B8EC178_g, auto4B8EC178_u);
        if (auto4B8EC178_var == null) { break; }
        if ((libNtve_gf_UnitIsPaused(auto4B8EC178_var) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, auto4B8EC178_var);
            libNtve_gf_PauseUnit(auto4B8EC178_var, true);
        }

    }
    AITimePause(true);
    gv_numberOfZerglings = 0;
    auto38D23326_g = UnitGroup("Zergling", gv_pLAYER_01_USER, RegionFromId(47), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto38D23326_u = UnitGroupCount(auto38D23326_g, c_unitCountAll);
    for (;; auto38D23326_u -= 1) {
        auto38D23326_var = UnitGroupUnitFromEnd(auto38D23326_g, auto38D23326_u);
        if (auto38D23326_var == null) { break; }
        gv_numberOfZerglings += 1;
        gv_midCinematicZerglings[gv_numberOfZerglings] = auto38D23326_var;
        libNtve_gf_PauseUnit(auto38D23326_var, false);
        if ((gv_numberOfZerglings == 15)) {
            break;
        }

    }
    auto8F12DB35_g = UnitGroup("Overlord", gv_pLAYER_01_USER, RegionFromId(47), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8F12DB35_u = UnitGroupCount(auto8F12DB35_g, c_unitCountAll);
    for (;; auto8F12DB35_u -= 1) {
        auto8F12DB35_var = UnitGroupUnitFromEnd(auto8F12DB35_g, auto8F12DB35_u);
        if (auto8F12DB35_var == null) { break; }
        UnitGroupAdd(gv_cinematicHiddenZerg, auto8F12DB35_var);
        libNtve_gf_ShowHideUnit(auto8F12DB35_var, false);
    }
    libNtve_gf_ShowHideUnit(UnitFromId(974), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidSetup_Init () {
    gt_MidSetup = TriggerCreate("gt_MidSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto22A6475A_g;
    int auto22A6475A_u;
    unit auto22A6475A_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(158), 0.0, -1, 10.0, true);
    libNtve_gf_PauseUnit(UnitFromId(415), false);
    libNtve_gf_PauseUnit(UnitFromId(416), false);
    libNtve_gf_PauseUnit(UnitFromId(414), false);
    libNtve_gf_PauseUnit(UnitFromId(115), false);
    libNtve_gf_PauseUnit(UnitFromId(114), false);
    libNtve_gf_PauseUnit(gv_vALERIAN, false);
    UnitBehaviorRemove(gv_vALERIAN, "Unturnable", 1);
    UnitBehaviorRemove(UnitFromId(95), "Unturnable", 1);
    UnitBehaviorRemove(UnitFromId(658), "Unturnable", 1);
    UnitSetFacing(gv_vALERIAN, 315.0, 0.0);
    libNtve_gf_MakeUnitFacePoint(UnitFromId(95), PointFromId(3), 0.0);
    libNtve_gf_MakeUnitFacePoint(UnitFromId(658), PointFromId(3), 0.0);
    UnitSetState(gv_vALERIAN, c_unitStateFidget, false);
    UnitSetState(UnitFromId(95), c_unitStateFidget, false);
    UnitSetState(UnitFromId(658), c_unitStateFidget, false);
    UnitSetPosition(gv_vALERIAN, PointFromId(769), false);
    UnitIssueOrder(gv_vALERIAN, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    TriggerExecute(gt_MidMusic, true, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    Wait(0.4, c_timeGame);
    UnitIssueOrder(gv_vALERIAN, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(690)), c_orderQueueReplace);
    Wait(0.6, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(22), SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Lab01|Line00056", true), c_soundIndexAny)), -1, 10.0, true);
    UnitIssueOrder(gv_vALERIAN, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicInTransmission);
    libSwaC_gf_SendTransmissionCampaign(gv_vALERIAN, "zMission_Lab01|Line00056", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(0.25, c_timeReal);
    libNtve_gf_MakeUnitFacePoint(UnitFromId(95), UnitGetPosition(gv_vALERIAN), 0.25);
    libNtve_gf_MakeUnitFacePoint(UnitFromId(658), UnitGetPosition(gv_vALERIAN), 0.25);
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(25), 0.0, -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(gv_kERRIGAN, "zMission_Lab01|Line00057", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(0.25, c_timeReal);
    libNtve_gf_MakeUnitFacePoint(UnitFromId(95), PointFromId(3), 0.25);
    libNtve_gf_MakeUnitFacePoint(UnitFromId(658), PointFromId(3), 0.25);
    auto22A6475A_g = gv_cinematicHiddenZerg;
    auto22A6475A_u = UnitGroupCount(auto22A6475A_g, c_unitCountAll);
    for (;; auto22A6475A_u -= 1) {
        auto22A6475A_var = UnitGroupUnitFromEnd(auto22A6475A_g, auto22A6475A_u);
        if (auto22A6475A_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto22A6475A_var, true);
    }
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(595), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(684), 6.0, -1, 10.0, true);
    TriggerExecute(gt_MidUnits, true, false);
    UnitIssueOrder(gv_mainDoor, Order(AbilityCommand("UmojanLabDoorsThinRightLowered", 0)), c_orderQueueReplace);
    SoundPlay(SoundLink("UI_TerranKlaxonAlert", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_midAlertSound = SoundLastPlayed();
    TriggerExecute(gt_MidSentryBotSound, true, false);
    libSwaC_gf_SendTransmissionCampaign(gv_vALERIAN, "zMission_Lab01|Line00189", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_vALERIAN, "zMission_Lab01|Line00060", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_CreateUnitsAtPoint2(1, "UmojanLabMicrobot", 0, gv_pLAYER_02_DOMINION3, PointFromId(947));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "UmojanLabMicrobot", 0, gv_pLAYER_02_DOMINION3, PointFromId(950));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(505), 0.0, -1, 10.0, true);
    SoundPlay(SoundLink("Eradicator_Idle", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_midEradicatorSound = SoundLastPlayed();
    libSwaC_gf_SendTransmissionCampaign(gv_kERRIGAN, "zMission_Lab01|Line00177", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematic_Init () {
    gt_MidCinematic = TriggerCreate("gt_MidCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematicEnd_Init () {
    gt_MidCinematicEnd = TriggerCreate("gt_MidCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;
    point lv_target;

    // Automatic Variable Declarations
    unitgroup auto96C96D7D_g;
    int auto96C96D7D_u;
    unit auto96C96D7D_var;
    unitgroup auto82D6163F_g;
    int auto82D6163F_u;
    unit auto82D6163F_var;
    unitgroup auto612FC1BB_g;
    int auto612FC1BB_u;
    unit auto612FC1BB_var;
    int autoAFF90CAD_ae;
    int autoAFF90CAD_var;
    int auto9FC2BAE8_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_MidUnits);
    if ((gv_cinematicCompleted == false) && (gv_midMusicCompleted == false)) {
        TriggerStop(gt_MidMusic);
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZLab01MusicEscapeFromLab", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    }

    auto96C96D7D_g = gv_cinematicTempUnits;
    auto96C96D7D_u = UnitGroupCount(auto96C96D7D_g, c_unitCountAll);
    for (;; auto96C96D7D_u -= 1) {
        auto96C96D7D_var = UnitGroupUnitFromEnd(auto96C96D7D_g, auto96C96D7D_u);
        if (auto96C96D7D_var == null) { break; }
        UnitRemove(auto96C96D7D_var);
    }
    auto82D6163F_g = gv_cinematicHiddenZerg;
    auto82D6163F_u = UnitGroupCount(auto82D6163F_g, c_unitCountAll);
    for (;; auto82D6163F_u -= 1) {
        auto82D6163F_var = UnitGroupUnitFromEnd(auto82D6163F_g, auto82D6163F_u);
        if (auto82D6163F_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto82D6163F_var, true);
    }
    UnitRemove(gv_kERRIGAN);
    auto612FC1BB_g = gv_cinematicPausedUnits;
    auto612FC1BB_u = UnitGroupCount(auto612FC1BB_g, c_unitCountAll);
    for (;; auto612FC1BB_u -= 1) {
        auto612FC1BB_var = UnitGroupUnitFromEnd(auto612FC1BB_g, auto612FC1BB_u);
        if (auto612FC1BB_var == null) { break; }
        libNtve_gf_PauseUnit(auto612FC1BB_var, false);
    }
    libNtve_gf_ShowHideUnit(UnitFromId(974), true);
    AITimePause(false);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    libSwaC_gf_EnableDisableZerglingRespawn(true);
    UnitGroupSelect(UnitGroup("Zergling", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_pLAYER_01_USER, true);
    SoundStop(gv_midAlertSound, true);
    SoundStop(gv_midBotSound, true);
    SoundStop(gv_midEradicatorSound, true);
    ObjectiveShow(gv_objectiveDestroyDominionBase, PlayerGroupAll(), false);
    ObjectiveShow(gv_objectiveDestroyDominionBase2, PlayerGroupAll(), false);
    ObjectiveShow(gv_objectiveDestroyDominionBase323, PlayerGroupAll(), false);
    if ((gv_cinematicCompleted == false)) {
        autoAFF90CAD_ae = gv_numberOfZerglings;
        autoAFF90CAD_var = 1;
        for ( ; autoAFF90CAD_var <= autoAFF90CAD_ae; autoAFF90CAD_var += 1 ) {
            auto9FC2BAE8_val = autoAFF90CAD_var;
            if (auto9FC2BAE8_val == 1) {
                lv_target = PointFromId(263);
            }
            else if (auto9FC2BAE8_val == 2) {
                lv_target = PointFromId(264);
            }
            else if (auto9FC2BAE8_val == 3) {
                lv_target = PointFromId(265);
            }
            else if (auto9FC2BAE8_val == 4) {
                lv_target = PointFromId(266);
            }
            else if (auto9FC2BAE8_val == 5) {
                lv_target = PointFromId(267);
            }
            else if (auto9FC2BAE8_val == 6) {
                lv_target = PointFromId(268);
            }
            else if (auto9FC2BAE8_val == 7) {
                lv_target = PointFromId(263);
            }
            else if (auto9FC2BAE8_val == 8) {
                lv_target = PointFromId(264);
            }
            else if (auto9FC2BAE8_val == 9) {
                lv_target = PointFromId(265);
            }
            else if (auto9FC2BAE8_val == 10) {
                lv_target = PointFromId(266);
            }
            else {
                lv_target = PointFromId(263);
            }
            UnitSetPosition(gv_midCinematicZerglings[autoAFF90CAD_var], lv_target, false);
        }
    }

    UnitSetPosition(UnitFromId(415), PointFromId(14), false);
    UnitIssueOrder(UnitFromId(415), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(956)), c_orderQueueReplace);
    libNtve_gf_MakeUnitFacePoint(UnitFromId(95), PointFromId(3), 0.25);
    libNtve_gf_MakeUnitFacePoint(UnitFromId(658), PointFromId(3), 0.25);
    UnitSetPosition(gv_vALERIAN, PointFromId(462), false);
    UnitIssueOrder(gv_vALERIAN, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(416), Order(AbilityCommand("stopProtossBuilding", 0)), c_orderQueueReplace);
    UnitSetPosition(UnitFromId(416), PointFromId(15), false);
    UnitSetPosition(UnitFromId(414), PointFromId(20), false);
    UnitIssueOrder(UnitFromId(414), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(571)), c_orderQueueReplace);
    UnitSetPosition(UnitFromId(115), PointFromId(116), false);
    UnitIssueOrder(UnitFromId(115), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(313)), c_orderQueueReplace);
    UnitSetPosition(UnitFromId(114), PointFromId(461), false);
    UnitIssueOrder(UnitFromId(114), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(515)), c_orderQueueReplace);
    libNtve_gf_ReplaceUnit(gv_mainDoor, "UmojanLabDoorsThinRightLowered", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    gv_mainDoor = libNtve_gf_LastReplacedUnit();
    UIAlertClear(gv_pLAYER_01_USER);
    TriggerExecute(gt_StartAI, true, false);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZLab01MusicEscapeFromLab", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    lv_fadeDuration = 1.0;
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    gv_inCinematic = false;
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(13), false, false);
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(689)), lv_fadeDuration);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_StartGameStage02Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCleanup_Init () {
    gt_MidCleanup = TriggerCreate("gt_MidCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Units
//--------------------------------------------------------------------------------------------------
bool gt_MidUnits_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(gv_midCinematicZerglings[1], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(263)), c_orderQueueReplace);
    UnitIssueOrder(gv_midCinematicZerglings[2], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(264)), c_orderQueueReplace);
    UnitIssueOrder(gv_midCinematicZerglings[3], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(265)), c_orderQueueReplace);
    UnitIssueOrder(gv_midCinematicZerglings[4], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(266)), c_orderQueueReplace);
    UnitIssueOrder(gv_midCinematicZerglings[5], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(267)), c_orderQueueReplace);
    UnitIssueOrder(gv_midCinematicZerglings[6], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(268)), c_orderQueueReplace);
    UnitIssueOrder(gv_midCinematicZerglings[7], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(263)), c_orderQueueReplace);
    UnitIssueOrder(gv_midCinematicZerglings[8], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(264)), c_orderQueueReplace);
    UnitIssueOrder(gv_midCinematicZerglings[9], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(265)), c_orderQueueReplace);
    UnitIssueOrder(gv_midCinematicZerglings[10], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(266)), c_orderQueueReplace);
    Wait(4.0, c_timeGame);
    UnitIssueOrder(UnitFromId(415), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(14)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(415), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(956)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(416), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(15)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(414), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(20)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(414), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(571)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(115), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(461)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(115), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(515)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(114), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(116)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(114), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(313)), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidUnits_Init () {
    gt_MidUnits = TriggerCreate("gt_MidUnits_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Music
//--------------------------------------------------------------------------------------------------
bool gt_MidMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_soundtrack = "ZLab01MusicCutsceneA";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    gv_midMusicCompleted = true;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZLab01MusicMain", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidMusic_Init () {
    gt_MidMusic = TriggerCreate("gt_MidMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Sentry Bot Sound
//--------------------------------------------------------------------------------------------------
bool gt_MidSentryBotSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.5, c_timeGame);
    SoundPlay(SoundLink("Event_Lab01_Sentry_Bots_Stop", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_midBotSound = SoundLastPlayed();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidSentryBotSound_Init () {
    gt_MidSentryBotSound = TriggerCreate("gt_MidSentryBotSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto76B9A399_g;
    int auto76B9A399_u;
    unit auto76B9A399_var;
    unitgroup auto153D1C16_g;
    int auto153D1C16_u;
    unit auto153D1C16_var;
    unitgroup autoDEBF3501_g;
    int autoDEBF3501_u;
    unit autoDEBF3501_var;
    unitgroup auto4F77D85A_g;
    int auto4F77D85A_u;
    unit auto4F77D85A_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    gv_inCinematic = true;
    UnitClearSelection(gv_pLAYER_01_USER);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    RegionPlayableMapSet(RegionFromId(3));
    TextTagDestroy(gv_warbotTag);
    libNtve_gf_KillModel(gv_warbotActor);
    auto76B9A399_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto76B9A399_u = UnitGroupCount(auto76B9A399_g, c_unitCountAll);
    for (;; auto76B9A399_u -= 1) {
        auto76B9A399_var = UnitGroupUnitFromEnd(auto76B9A399_g, auto76B9A399_u);
        if (auto76B9A399_var == null) { break; }
        if ((libNtve_gf_UnitIsPaused(auto76B9A399_var) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, auto76B9A399_var);
            libNtve_gf_PauseUnit(auto76B9A399_var, true);
        }

    }
    AITimePause(true);
    auto153D1C16_g = UnitGroup(null, gv_pLAYER_02_DOMINION2222, RegionFromId(47), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto153D1C16_u = UnitGroupCount(auto153D1C16_g, c_unitCountAll);
    for (;; auto153D1C16_u -= 1) {
        auto153D1C16_var = UnitGroupUnitFromEnd(auto153D1C16_g, auto153D1C16_u);
        if (auto153D1C16_var == null) { break; }
        libNtve_gf_PauseUnit(auto153D1C16_var, false);
    }
    autoDEBF3501_g = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(47), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDEBF3501_u = UnitGroupCount(autoDEBF3501_g, c_unitCountAll);
    for (;; autoDEBF3501_u -= 1) {
        autoDEBF3501_var = UnitGroupUnitFromEnd(autoDEBF3501_g, autoDEBF3501_u);
        if (autoDEBF3501_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoDEBF3501_var, false);
    }
    auto4F77D85A_g = UnitGroup(null, c_playerAny, RegionFromId(15), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4F77D85A_u = UnitGroupCount(auto4F77D85A_g, c_unitCountAll);
    for (;; auto4F77D85A_u -= 1) {
        auto4F77D85A_var = UnitGroupUnitFromEnd(auto4F77D85A_g, auto4F77D85A_u);
        if (auto4F77D85A_var == null) { break; }
        if ((UnitGetType(auto4F77D85A_var) != "UmojanLabZergCageUnit")) {
            libNtve_gf_ShowHideUnit(auto4F77D85A_var, false);
        }

    }
    UnitRemove(gv_kERRIGAN);
    libNtve_gf_CreateUnitsAtPoint2(1, "KerriganGhostLabUnarmed", 0, gv_pLAYER_01_USER, PointFromId(202));
    gv_kERRIGAN = UnitLastCreated();
    UnitSetState(gv_kERRIGAN, c_unitStateFidget, false);
    UnitBehaviorAdd(gv_kERRIGAN, "KerriganWalk", gv_kERRIGAN, 1);
    UnitSetPosition(gv_vALERIAN, PointFromId(462), false);
    UnitIssueOrder(gv_vALERIAN, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitSetFacing(gv_vALERIAN, 315.0, 0.0);
    UnitSetPosition(UnitFromId(95), PointFromId(150), false);
    UnitIssueOrder(UnitFromId(95), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitSetFacing(UnitFromId(95), 315.0, 0.0);
    UnitSetPosition(UnitFromId(658), PointFromId(153), false);
    UnitIssueOrder(UnitFromId(658), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitSetFacing(UnitFromId(658), 315.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(766), 0.0, -1, 10.0, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZLab01MusicOutro", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 80.0, 0.1);
    Wait(0.1, c_timeGame);
    TriggerExecute(gt_VictoryZerglings, true, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(155), (SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Lab01|Line00172", true), c_soundIndexAny)) + (SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Lab01|Line00082", true), c_soundIndexAny)) - 1.0)), -1, 10.0, true);
    Wait(1.0, c_timeReal);
    SoundPlay(SoundLink("Event_Lab01_Win_ZerglingHorde", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_victoryZergSound = SoundLastPlayed();
    Wait(1.0, c_timeReal);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicInTransmission);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 6.0, 0.25);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab01|Line00172", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_vALERIAN, "zMission_Lab01|Line00082", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(288), 0.0, -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(gv_kERRIGAN, "zMission_Lab01|Line00024", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(158), 0.0, -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(gv_vALERIAN, "zMission_Lab01|Line00042", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(1.0, c_timeReal);
    UnitIssueOrder(UnitFromId(95), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(152)), c_orderQueueReplace);
    UnitBehaviorRemove(UnitFromId(95), "Unturnable", 1);
    UnitSetState(UnitFromId(95), c_unitStateFidget, false);
    Wait(0.5, c_timeReal);
    SoundPlay(SoundLink("Event_Lab01_KerriganCellOpens", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_victoryCellSound = SoundLastPlayed();
    UnitSetFacing(gv_vALERIAN, 315.0, 0.2);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SendTransmissionCampaign(gv_vALERIAN, "zMission_Lab01|Line00179", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuratioin;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuratioin = 2.0;
        SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    }
    else {
        SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        lv_fadeDuratioin = 0.5;
    }
    CinematicFade(false, lv_fadeDuratioin, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_VictoryZerglings);
    SoundStop(gv_victoryExplosionSound, true);
    SoundStop(gv_victoryZergSound, true);
    SoundStop(gv_victoryCellSound, true);
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Zerglings
//--------------------------------------------------------------------------------------------------
bool gt_VictoryZerglings_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_victoryZerglings;

    // Automatic Variable Declarations
    unitgroup auto74DF4604_g;
    int auto74DF4604_u;
    unit auto74DF4604_var;
    int auto470B03A2_n;
    int auto470B03A2_i;
    unitgroup auto4FDC24BE_g;
    int auto4FDC24BE_u;
    unit auto4FDC24BE_var;

    // Variable Initialization
    lv_victoryZerglings = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    gf_KillZerglingHoldingPen(RegionFromId(15));
    auto74DF4604_g = UnitGroup("Zergling", gv_pLAYER_02_DOMINION2, RegionFromId(24), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto74DF4604_u = UnitGroupCount(auto74DF4604_g, c_unitCountAll);
    for (;; auto74DF4604_u -= 1) {
        auto74DF4604_var = UnitGroupUnitFromEnd(auto74DF4604_g, auto74DF4604_u);
        if (auto74DF4604_var == null) { break; }
        libNtve_gf_PauseUnit(auto74DF4604_var, false);
        libNtve_gf_ShowHideUnit(auto74DF4604_var, true);
        UnitGroupAdd(lv_victoryZerglings, auto74DF4604_var);
        UnitIssueOrder(auto74DF4604_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(20))), c_orderQueueReplace);
    }
    if ((UnitGroupCount(lv_victoryZerglings, c_unitCountAlive) >= 1)) {
        CameraShakeStart(gv_pLAYER_01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.2, 2.0, 100.0, 3.0);
    }

    auto470B03A2_n = (60 - UnitGroupCount(lv_victoryZerglings, c_unitCountAlive));
    for (auto470B03A2_i = 1; auto470B03A2_i <= auto470B03A2_n; auto470B03A2_i += 1) {
        UnitCreate(1, "Zergling", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(20)), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_victoryZerglings, UnitLastCreated());
    }
    while (true) {
        auto4FDC24BE_g = lv_victoryZerglings;
        auto4FDC24BE_u = UnitGroupCount(auto4FDC24BE_g, c_unitCountAll);
        for (;; auto4FDC24BE_u -= 1) {
            auto4FDC24BE_var = UnitGroupUnitFromEnd(auto4FDC24BE_g, auto4FDC24BE_u);
            if (auto4FDC24BE_var == null) { break; }
            if ((RandomInt(1, 8) == 1)) {
                UnitIssueOrder(auto4FDC24BE_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(20))), c_orderQueueAddToEnd);
            }

        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryZerglings_Init () {
    gt_VictoryZerglings = TriggerCreate("gt_VictoryZerglings_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04MusicSound_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_DebugStage2_Init();
    gt_AttachInfoTextCompleted_Init();
    gt_AttachInfoTextUmojans_Init();
    gt_AttachInfoTextPlayer_Init();
    gt_AttachInfoTextPlayerTraining_Init();
    gt_SentryBotInfoText_Init();
    gt_SentryBotUnitInfo_Init();
    gt_RemoveHarmless_Init();
    gt_UIPulseAudio_Init();
    gt_HideCompletedObjectives_Init();
    gt_FlashingMouseClickHint_Init();
    gt_IntroSequence_Init();
    gt_DroneOpeningEventQ_Init();
    gt_DroneSelected_Init();
    gt_DroneSelectHelpLine01Q_Init();
    gt_HatcheryTeachtoMutate_Init();
    gt_HatcheryPlacement_Init();
    gt_HatcheryPlacementLeftClick_Init();
    gt_HatcheryPlacementLeftClickEnd_Init();
    gt_HatcheryPlacementRemove_Init();
    gt_ButtonClickedBasicMutation_Init();
    gt_ButtonClickedMutateHatchery_Init();
    gt_HatcheryBuildHelpLine01Q_Init();
    gt_HatcheryBuildHelpLine02Q_Init();
    gt_HatcheryCancelled_Init();
    gt_HatcheryCancelledQ_Init();
    gt_HatcheryMutationStartedQ_Init();
    gt_HatcheryMutationCompleted_Init();
    gt_HatcheryMutationUIUpdate_Init();
    gt_HarvestingTeachQ_Init();
    gt_HarvestingSpawnDrones_Init();
    gt_HarvestingSelectDrones_Init();
    gt_HarvestingMinerals_Init();
    gt_HarvestingStarted_Init();
    gt_HarvestingHelpLines01Q_Init();
    gt_DroneUsedQ_Init();
    gt_OverlordTeachQ_Init();
    gt_OverlordTeachOverlord_Init();
    gt_OverlordMorphStartedQ_Init();
    gt_OverlordMorphCountTrack_Init();
    gt_OverlordMorphUIUpdate_Init();
    gt_OverlordHatcherySelected_Init();
    gt_OverlordLarvaSelected_Init();
    gt_OverlordSelectLarvaClicked_Init();
    gt_OverlordHatcheryHelpSelectQ_Init();
    gt_OverlordHelpLines01Q_Init();
    gt_OverlordHelpLines02Q_Init();
    gt_OverlordCompleted_Init();
    gt_OverlordCancelled_Init();
    gt_OverlordCancelledLineQ_Init();
    gt_OverlordLimitQ_Init();
    gt_SpawningPoolTeachtoMutate_Init();
    gt_SpawningPoolLeftClick_Init();
    gt_SpawningPoolLeftClickEnd_Init();
    gt_SpawningPoolStartTransmissionQ_Init();
    gt_SpawningPoolMutationUIUpdate_Init();
    gt_SpawningPoolDroneSelected_Init();
    gt_SpawningPoolBasicMutationClicked_Init();
    gt_SpawningPoolButtonClicked_Init();
    gt_SpawningPoolHelpLines_Init();
    gt_SpawningPoolLine01Q_Init();
    gt_SpawningPoolLine02Q_Init();
    gt_SpawningPoolLine03Q_Init();
    gt_SpawningPoolMutationStarted_Init();
    gt_SpawningPoolMutationStartedQ_Init();
    gt_SpawningPoolMutationCompletedQ_Init();
    gt_SpawningPoolCancelled_Init();
    gt_SpawningPoolCancelledLineQ_Init();
    gt_ZerglingTeachQ_Init();
    gt_ZerglingMorphStarted_Init();
    gt_ZerglingMorphStartedQ_Init();
    gt_ZerglingMorphUIUpdate_Init();
    gt_ZerglingHatcherySelected_Init();
    gt_ZerglingLarvaSelected_Init();
    gt_ZerglingSelectLarvaClicked_Init();
    gt_ZerglingHelpLines_Init();
    gt_ZerglingHatcheryHelpSelectQ_Init();
    gt_ZerglingLine01Q_Init();
    gt_ZerglingLine02Q_Init();
    gt_ZerglingCancelled_Init();
    gt_OverlordTriestoLeave_Init();
    gt_ValerianAttackQ_Init();
    gt_StartGameStage02Q_Init();
    gt_Platform02ShowSentryBots_Init();
    gt_Platform02Entered_Init();
    gt_Platform02AlertQ_Init();
    gt_Platform02SentryBotsReact_Init();
    gt_Room01ZergEnter_Init();
    gt_Room01ZergEnterReveal_Init();
    gt_Room01ContainmentBreachQ_Init();
    gt_Room01RemoveScientistsSide_Init();
    gt_Room01RemoveScientists_Init();
    gt_ActivateBotsRoom02_Init();
    gt_ZergEnterRoom02Q_Init();
    gt_FactoryIsKilled_Init();
    gt_Room03ZergEnteringQ_Init();
    gt_Room03SentryBotAggro_Init();
    gt_Room03ScientistPassedDoor_Init();
    gt_Room03RemoveScientists_Init();
    gt_Room04StartGasRoomQ_Init();
    gt_Room04CloseDoorQ_Init();
    gt_Room04KillTurretHelperAttacked_Init();
    gt_Room04KillTurretHelperDies_Init();
    gt_Room04OpenDoorQ_Init();
    gt_Room04PrepareZerglingRescueRoom_Init();
    gt_GasDamage_Init();
    gt_Room04GasHurtsZerglingsHardQ_Init();
    gt_Room05ZergEntering_Init();
    gt_Room05ZergEnterReveal_Init();
    gt_ZergEnteringFinalRoomEnter_Init();
    gt_ZergEnteringRoom6EradicatorAIQ_Init();
    gt_ActivateEradicatorQ_Init();
    gt_EradicatorBattleBehavior_Init();
    gt_EradicatorFactoryKilled_Init();
    gt_NoZergLeftRoom6_Init();
    gt_EradicatorKilled_Init();
    gt_EradicatorTakesDamage_Init();
    gt_EradicatorPing_Init();
    gt_ZerglingRescuePlatform2_Init();
    gt_ZerglingRescueObjectiveTransmissionQ_Init();
    gt_ZerglingRescueRoom01_Init();
    gt_ZerglingRescueGeneratorTakesDamageRoom01_Init();
    gt_ZerglingRescueRoom04_Init();
    gt_ZerglingRescueGeneratorTakesDamageRoom04_Init();
    gt_ZerglingRescueRoom05_Init();
    gt_ZerglingRescueGeneratorTakesDamageRoom05_Init();
    gt_ZerglingRescueQ_Init();
    gt_TipMissionHelpQ_Init();
    gt_StartAI_Init();
    gt_AIGiveMinerals_Init();
    gt_AIGiveGas_Init();
    gt_DefeatAllUnitsKilled_Init();
    gt_VictoryWarbotDestroyedCompleted_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_AchievementKillSentryBots_Init();
    gt_AchievementTimedRunNH_Init();
    gt_AchievementDestroy3FactoriesH_Init();
    gt_LargestZerglingForce_Init();
    gt_MicroBotDeaths_Init();
    gt_ZerglingDies_Init();
    gt_ObjectiveSelectDroneCreate_Init();
    gt_ObjectiveSelectDroneComplete_Init();
    gt_ObjectiveMutateHatcheryCreateQ_Init();
    gt_ObjectiveMutateHatcheryComplete_Init();
    gt_ObjectiveHarvestCreate_Init();
    gt_ObjectiveHarvestCompleteQ_Init();
    gt_ObjectiveHarvestUpdate_Init();
    gt_ObjectiveMorphOverlordCreateQ_Init();
    gt_ObjectiveMorphOverlordComplete_Init();
    gt_ObjectiveMutateSpawningPoolCreateQ_Init();
    gt_ObjectiveMutateSpawningPoolComplete_Init();
    gt_ObjectiveMorphZerglingsCreate_Init();
    gt_ObjectiveMorphZerglingsUpdate_Init();
    gt_ObjectiveMorphZerglingsComplete_Init();
    gt_ObjectiveGasTurretsCreate_Init();
    gt_ObjectiveGasTurretsUpdate_Init();
    gt_ObjectiveGasTurretsComplete_Init();
    gt_ObjectiveDestroyEradicatorCreate_Init();
    gt_ObjectiveDestroyEradicatorComplete_Init();
    gt_ObjectiveSaveZerglingsCreate_Init();
    gt_ObjectiveSaveZerglingsComplete_Init();
    gt_ObjectiveSaveZerglingsUpdate_Init();
    gt_ObjectiveSaveZerglingsCreatePings_Init();
    gt_CampaignIntroQ_Init();
    gt_CampaignIntroSetup_Init();
    gt_CampaignIntroCinematic_Init();
    gt_CampaignIntroCinematicEnd_Init();
    gt_CampaignIntroCinematicContinue_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanupSkipped_Init();
    gt_IntroCleanupNotSkipped_Init();
    gt_IntroMusic_Init();
    gt_MidQ_Init();
    gt_MidSetup_Init();
    gt_MidCinematic_Init();
    gt_MidCinematicEnd_Init();
    gt_MidCleanup_Init();
    gt_MidUnits_Init();
    gt_MidMusic_Init();
    gt_MidSentryBotSound_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
    gt_VictoryZerglings_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
