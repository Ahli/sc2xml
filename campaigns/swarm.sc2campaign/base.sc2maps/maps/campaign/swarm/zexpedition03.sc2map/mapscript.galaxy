//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Enemy Within
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"
include "TriggerLibs/SwarmCampaignLib"
include "TriggerLibs/SwarmCampaignDataHelperLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libHots_InitLib();
    libSwaC_InitLib();
    libSCDH_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_ZERG = 2;
const int gv_pLAYER_02_ZERG2 = 3;
const int gv_pLAYER_02_ZERG22 = 4;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
int gv_numberOfProtossRemaining;
int gv_escapePodPeopleRemaining;
bool gv_gameOver;
bool gv_inCinematic;
int gv_currentTransmission;
unit gv_tHE_ONE_QUEEN;
unit gv_tHE_ONE_URSADON;
unit gv_tHE_TWO_URSADON;
string gv_mapMusicTrack;
fixed gv_ursadonLife;
fixed[5] gv_swarmQueenLife;
playergroup gv_protossPlayers;
unitgroup gv_protossUnitGroup;
unitgroup gv_protossEscapePods;
fixed gv_runoutTime;
int[4] gv_escapePodTimes;
fixed gv_escapePodLife;
fixed gv_escapePodShields;
int gv_stasisPulses;
unitgroup gv_part1_ProtossUnitGroup;
int gv_safePlacePing;
revealer gv_beaconRevealer;
actor gv_helperModel_SteamVent;
actor gv_helperModel_VentTunnel;
bool gv_parasiteUsed;
timer gv_countdownTimer;
int gv_countdownTimerWindow;
int gv_warpDrivePing;
int gv_escapeExplosionPing;
int gv_giantUrsadonPing;
unitgroup gv_ursadonAggressors;
unitgroup gv_protossHallucinations;
unit[7] gv_escapePodUnit;
timer[7] gv_escapePodTimers;
timer[7] gv_escapePodWarningTimers;
int[11] gv_escapePodDlgLabel;
int[11] gv_escapePodDlgValue;
int[11] gv_escapePodDlgMax;
int[11] gv_escapePodDlgProgressBar;
int[11] gv_escapePodDlgBorder;
int gv_numberOfUnitsSpawned;
int gv_zerglingKills;
int gv_roachKills;
int gv_hydraliskKills;
int gv_ursadonKills;
int gv_objectiveDestroyDominionBase22;
int gv_objectiveDestroyDominionBase222;
int gv_objectiveDestroyDominionBase2;
int gv_objectiveDestroyDominionBase23;
int gv_objectiveDestroyDominionBase232;
int gv_objectiveDestroyDominionBase322;
int gv_objectiveDestroyDominionBase3222;
int gv_objectiveDestroyDominionBase32222;
int gv_objectiveDestroyDominionBase323;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicTempUnits;
bool gv_cinematicCompleted;
unit gv_introLasarra;
actor gv_warpInActor;
actor gv_lasarraActor;
bool gv_introMusicCompleted;
sound gv_introWarpSound1;
sound gv_introWarpSound2;
sound gv_introKerriganSound;
sound gv_introDeathSound;
unitgroup gv_midHiddenUnitGroup;
sound gv_midExplosionSound;
sound gv_midStasisSound;
bool gv_midMusicCompleted;
bool gv_victoryCinematicCompleted;
sound gv_victoryZergSound;

void InitGlobals () {
    int init_i;

    gv_currentTransmission = c_invalidTransmissionId;
    gv_protossPlayers = PlayerGroupEmpty();
    gv_protossUnitGroup = UnitGroupEmpty();
    gv_protossEscapePods = UnitGroupEmpty();
    gv_part1_ProtossUnitGroup = UnitGroupEmpty();
    gv_safePlacePing = c_invalidPingId;
    gv_countdownTimer = TimerCreate();
    gv_countdownTimerWindow = c_timerWindowNone;
    gv_warpDrivePing = c_invalidPingId;
    gv_escapeExplosionPing = c_invalidPingId;
    gv_giantUrsadonPing = c_invalidPingId;
    gv_ursadonAggressors = UnitGroupEmpty();
    gv_protossHallucinations = UnitGroupEmpty();
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_escapePodTimers[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_escapePodWarningTimers[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_escapePodDlgLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_escapePodDlgValue[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_escapePodDlgProgressBar[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_escapePodDlgBorder[init_i] = c_invalidDialogControlId;
    }
    gv_objectiveDestroyDominionBase22 = c_invalidObjectiveId;
    gv_objectiveDestroyDominionBase222 = c_invalidObjectiveId;
    gv_objectiveDestroyDominionBase2 = c_invalidObjectiveId;
    gv_objectiveDestroyDominionBase23 = c_invalidObjectiveId;
    gv_objectiveDestroyDominionBase232 = c_invalidObjectiveId;
    gv_objectiveDestroyDominionBase322 = c_invalidObjectiveId;
    gv_objectiveDestroyDominionBase3222 = c_invalidObjectiveId;
    gv_objectiveDestroyDominionBase32222 = c_invalidObjectiveId;
    gv_objectiveDestroyDominionBase323 = c_invalidObjectiveId;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_midHiddenUnitGroup = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_ConsumeCritter (unit lp_cHOSEN_UNIT);
void gf_KillLargeHoldingPen (point lp_location);
void gf_AwakenProtossinRegion (region lp_pickedRegion);
void gf_StartEscapePodTimer (int lp_time, int lp_whichPodNumber);
void gf_CreateEscapePodTimerWindow (int lp_escapePodNo, int lp_max);
void gf_SetEscapePodTimerWindowProgress (int lp_escapePodNo, int lp_progress);
void gf_ShowHideEscapePodTimerWindow (int lp_escapePodNo, bool lp_showHideOptions);
int gf_LowestEscapePodTime ();

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04MusicSound;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_DEBUGSkiptoPart2;
trigger gt_DEBUGSkiptoPart3;
trigger gt_StartGameQ;
trigger gt_UpdateProtossRemainingObjective;
trigger gt_UpdateProtossRemainingTemplarArchon;
trigger gt_UpdateProtossRemainingTemplarArchonCreated;
trigger gt_RemoveHarmlessfromUnit;
trigger gt_RegenLifeofUrsadonBriefly;
trigger gt_SwarmQueenusesParasiticInvasion;
trigger gt_CritterisConsumed;
trigger gt_CritterisKilled;
trigger gt_MorphtoSwarmQueenComplete;
trigger gt_ReminderGrowtoLargeQueen;
trigger gt_TurnoffGrowtoLargeQueenBlinky;
trigger gt_TransmissionGrowtoLargeQueenQ;
trigger gt_MorphtoLargeSwarmQueenComplete;
trigger gt_ReminderGrowtoHugeQueen;
trigger gt_TurnoffGrowtoHugeQueenBlinky;
trigger gt_TransmissionGrowtoHugeQueenQ;
trigger gt_MorphtoHugeSwarmQueenComplete;
trigger gt_LarvalQueenEntersSteamVentArea1;
trigger gt_LarvalQueenLeavesSteamVentArea1;
trigger gt_LarvalQueenEntersSteamVentArea2;
trigger gt_LarvalQueenLeavesSteamVentArea2;
trigger gt_LarvalQueenEntersSteamVentArea3;
trigger gt_LarvalQueenLeavesSteamVentArea3;
trigger gt_TransmissionP1LarvaAwakensQ;
trigger gt_LarvalQueenRevealFirstRoom;
trigger gt_LarvalQueenRevealSecondRoom;
trigger gt_TransmissionP1VastShipQ;
trigger gt_LearnParasiticInvasion;
trigger gt_TransmissionP1LearnParasiteInvasionQ;
trigger gt_TurnoffParasiteBlinky;
trigger gt_LarvalQueenParasitesFirstAnimal;
trigger gt_TransmissionP1LearnConsumeQ;
trigger gt_FirstLyoteisConsumed;
trigger gt_TurnoffConsumeBlinkyLyote;
trigger gt_LarvalQueenSeesSentry;
trigger gt_TransmissionP1SeeSentryQ;
trigger gt_LarvalQueenEntersFirstSteam;
trigger gt_SentryPatrolPath;
trigger gt_SentrySeesCreep;
trigger gt_TransmissionP1SentrySeesCreepQ;
trigger gt_SentryNearLarvainSteamQ;
trigger gt_LarvalQueenSeesGiantUrsadon;
trigger gt_TransmissionP1GiantUrsadonTubeQ;
trigger gt_LarvalQueenParasitesGiantUrsadon;
trigger gt_LarvalQueenEntersVentDefenderRoom;
trigger gt_SecondZealotPatrolPath;
trigger gt_TransmissionP1ZergDetectedQ;
trigger gt_ProtossDestroyedinVentDefenderRoom;
trigger gt_TransmissionP1EncounterFirstVentQ;
trigger gt_UrsadonCannotEnter;
trigger gt_TransmissionP1UrsadonWontFitQ;
trigger gt_TurnoffConsumeBlinkyUrsadon;
trigger gt_UrsadonisConsumedResetCamera;
trigger gt_RemoveVentHelperCallout;
trigger gt_LarvalQueenEntersSafePlaceQ;
trigger gt_SafePlaceRoomReveal;
trigger gt_TransmissionP1MorphtoSwarmQueenQ;
trigger gt_TurnoffMorphtoSwarmQueenBlinky;
trigger gt_ReenableSentryTech;
trigger gt_TransmissionP1SwarmQueenMorphCompleteQ;
trigger gt_TurnoffSpawnUnitsBlinky;
trigger gt_ResourceChamberDoorDestroyed;
trigger gt_SwarmQueenEntersResourceChamber;
trigger gt_TransmissionP2ResourceChamberEnteredQ;
trigger gt_ProtossReactioninResourceChamber;
trigger gt_SentryInitiatesCleansing;
trigger gt_TransmissionP2SentryCleansingQ;
trigger gt_TransmissionP3DangerousHallwayWarningQ;
trigger gt_DangerousHallwayClear;
trigger gt_TransmissionP3HallwayClearQ;
trigger gt_QueenCantEnterVent;
trigger gt_TransmissionP3QueenCantEnterVentQ;
trigger gt_TransmissionP3FirstForceFieldDiscoveryQ;
trigger gt_KillHelperModelWarpDriveVentDoor;
trigger gt_RevealPsiBroadcaster01;
trigger gt_KillHelperModelPsiBroadcaster01;
trigger gt_TransmissionP3PsiBroadcasterVisibleQ;
trigger gt_EnteredWarpDriveQuadrant;
trigger gt_TransmissionP3EnteredWarpDriveQuadQ;
trigger gt_PsiBroadcaster01Destroyed;
trigger gt_TransmissionP3FirstForceFieldOpenQ;
trigger gt_RevealWarpDriveSpecimenRoom;
trigger gt_TransmissionP3WarpDriveSpecimenRoomQ;
trigger gt_PsiBroadcaster02Destroyed;
trigger gt_TransmissionP3SecondForceFieldOpenQ;
trigger gt_RevealWarpDriveRoom;
trigger gt_KillHelperModelWarpDrive;
trigger gt_TransmissionP3WarpDriveRoomRevealedQ;
trigger gt_WarpDriveDestroyedStartCountdownQ;
trigger gt_WarpDriveExplosions;
trigger gt_StalkerAttackAfterWarpDriveDestroyed;
trigger gt_SentryResponsetoWarpDriveDestruction;
trigger gt_TransmissionP3SentriesTrappingQueenQ;
trigger gt_EvacuateTimerEndsDestroyWarpDriveQuadrant;
trigger gt_EscapedWarpDriveTransition;
trigger gt_AfterMidCineChamber00Intro;
trigger gt_AllowAccessIntoKitchen;
trigger gt_StartChamber01Actions;
trigger gt_TransmissionP4EnterStasisChamber01Q;
trigger gt_StartChamber02Actions;
trigger gt_StartChamber03Actions;
trigger gt_InfestSecondGiantUrsadonQ;
trigger gt_TransmissionP4UrsadonInfestedQ;
trigger gt_GiantUrsadonDiesFailBonusObjective;
trigger gt_ShowBridgeQuadrantEntry;
trigger gt_TransmissionP5ZergReachBridgeQuadQ;
trigger gt_OpenDoortotheBridge;
trigger gt_ReachBridgeQuadrant;
trigger gt_StartFirstEscapePods;
trigger gt_TransmissionP5ZergSeeEscapePodsQ;
trigger gt_ActivateSentryHallucinationBattle;
trigger gt_ActivateSentryHallucinationBattleHard;
trigger gt_ActivateStalkerRush;
trigger gt_TransmissionP5StalkerRushQ;
trigger gt_FirstEscapePodsWarningQ;
trigger gt_ActivateEscapePod03Defense;
trigger gt_StartSecondEscapePods;
trigger gt_TransmissionP5MoreEscapePodsLaunchingQ;
trigger gt_TransmissionP5EscapePod03DefenseQ;
trigger gt_BridgeRampProtossBlockBehavior;
trigger gt_SecondEscapePodsWarningQ;
trigger gt_ActivateEscapePod04Defense;
trigger gt_TransmissionP5EscapePod04DefenseQ;
trigger gt_ActivateBridgeFinaleProtoss;
trigger gt_TransmissionP5ProtossEndQ;
trigger gt_EscapePodDestroyed;
trigger gt_EscapePodLaunchedGameOver;
trigger gt_TipMissionHelpQ;
trigger gt_StartAI;
trigger gt_AIGiveMinerals;
trigger gt_AIGiveGas;
trigger gt_NumberofUnitsSpawned;
trigger gt_EnemyDies;
trigger gt_AchievementBiomassCollected;
trigger gt_AchievementEscapePodTimeNH;
trigger gt_AchievementUrsadonKillsH;
trigger gt_DefeatLarvalQueenDies;
trigger gt_DefeatSwarmQueenDies;
trigger gt_DefeatEscapePodLaunches;
trigger gt_VictoryMainObjectivesCompleted;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_ObjectiveDestroytheProtossCreate;
trigger gt_ObjectiveDestroytheProtossCreateQ;
trigger gt_ObjectiveDestroytheProtossComplete;
trigger gt_ObjectiveDestroytheProtossFailed;
trigger gt_ObjectiveSwarmQueenSurvivalCreate;
trigger gt_ObjectiveSwarmQueenSurvivalCreateQ;
trigger gt_ObjectiveSwarmQueenSurvivalComplete;
trigger gt_ObjectiveSwarmQueenSurvivalFailed;
trigger gt_ObjectiveGainBiomassCreate;
trigger gt_ObjectiveGainBiomassComplete;
trigger gt_ObjectiveGainBiomassCompleteHideQ;
trigger gt_ObjectiveGainBiomassFailed;
trigger gt_ObjectiveFindSafePlaceCreate;
trigger gt_ObjectiveFindSafePlaceComplete;
trigger gt_ObjectiveFindSafePlaceCompleteHideQ;
trigger gt_ObjectiveFindSafePlaceFailed;
trigger gt_ObjectiveGrowCreate;
trigger gt_ObjectiveGrowComplete;
trigger gt_ObjectiveGrowCompleteHideQ;
trigger gt_ObjectiveGrowFailed;
trigger gt_ObjectiveDestroyWarpDriveCreateHidden;
trigger gt_ObjectiveDestroyWarpDriveComplete;
trigger gt_ObjectiveDestroyWarpDriveFailed;
trigger gt_ObjectiveEscapeCreateHidden;
trigger gt_ObjectiveEscapeComplete;
trigger gt_ObjectiveEscapeFailed;
trigger gt_ObjectiveDestroyEscapePodsCreate;
trigger gt_ObjectiveDestroyEscapePodsCreateQ;
trigger gt_ObjectiveDestroyEscapePodsComplete;
trigger gt_ObjectiveDestroyEscapePodsFailed;
trigger gt_ObjectiveInfestGiantUrsadonCreate;
trigger gt_ObjectiveInfestGiantUrsadonCreateQ;
trigger gt_ObjectiveInfestGiantUrsadonComplete;
trigger gt_ObjectiveInfestGiantUrsadonFailed;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_IntroMusic;
trigger gt_MidQ;
trigger gt_MidSetup;
trigger gt_MidCinematic;
trigger gt_MidCinematicEnd;
trigger gt_MidCleanup;
trigger gt_MidCinematicFlashAwakeningZealots;
trigger gt_MidEngineExplosions;
trigger gt_MidExplosionWave;
trigger gt_MidMusic;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;
trigger gt_VictoryZergBridge1;
trigger gt_VictoryZergBridge2;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
trigger auto_gf_ConsumeCritter_Trigger = null;
unit auto_gf_ConsumeCritter_lp_cHOSEN_UNIT;

void gf_ConsumeCritter (unit lp_cHOSEN_UNIT) {
    auto_gf_ConsumeCritter_lp_cHOSEN_UNIT = lp_cHOSEN_UNIT;

    if (auto_gf_ConsumeCritter_Trigger == null) {
        auto_gf_ConsumeCritter_Trigger = TriggerCreate("auto_gf_ConsumeCritter_TriggerFunc");
    }

    TriggerExecute(auto_gf_ConsumeCritter_Trigger, false, false);
}

bool auto_gf_ConsumeCritter_TriggerFunc (bool testConds, bool runActions) {
    unit lp_cHOSEN_UNIT = auto_gf_ConsumeCritter_lp_cHOSEN_UNIT;

    // Variable Declarations
    unit lv_essenceUnit;

    // Automatic Variable Declarations
    string autoD84361E9_val;

    // Variable Initialization

    // Implementation
    autoD84361E9_val = UnitGetType(lp_cHOSEN_UNIT);
    if (autoD84361E9_val == "Lyote") {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepGen5", 0, gv_pLAYER_02_ZERG2, UnitGetPosition(lp_cHOSEN_UNIT));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "DNAPickup", 0, gv_pLAYER_01_USER, UnitGetPosition(lp_cHOSEN_UNIT));
        lv_essenceUnit = UnitLastCreated();
        Wait(1.5, c_timeGame);
        SoundPlayAtPoint(SoundLink("UI_ResourcePickup", -1), PlayerGroupAll(), UnitGetPosition(lv_essenceUnit), 0.0, 100.0, 0.0);
        UnitKill(lv_essenceUnit);
        PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropCustom, c_playerPropOperAdd, 5);
        PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropCustomCollected, c_playerPropOperAdd, 5);
        TextTagCreate(StringExternal("Param/Value/99E0F636"), 24, UnitGetPosition(lv_essenceUnit), 1.5, true, true, PlayerGroupAll());
        TextTagSetVelocity(TextTagLastCreated(), 0.5, 90.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
    }
    else if (autoD84361E9_val == "KarakMale") {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepGen5", 0, gv_pLAYER_02_ZERG2, UnitGetPosition(lp_cHOSEN_UNIT));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "DNAPickup", 0, gv_pLAYER_01_USER, UnitGetPosition(lp_cHOSEN_UNIT));
        lv_essenceUnit = UnitLastCreated();
        Wait(1.5, c_timeGame);
        SoundPlayAtPoint(SoundLink("UI_ResourcePickup", -1), PlayerGroupAll(), UnitGetPosition(lv_essenceUnit), 0.0, 100.0, 0.0);
        UnitKill(lv_essenceUnit);
        PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropCustom, c_playerPropOperAdd, 5);
        PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropCustomCollected, c_playerPropOperAdd, 5);
        TextTagCreate(StringExternal("Param/Value/6EDB264C"), 24, UnitGetPosition(lv_essenceUnit), 1.5, true, true, PlayerGroupAll());
        TextTagSetVelocity(TextTagLastCreated(), 0.5, 90.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
    }
    else if (autoD84361E9_val == "Anteplott") {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepGen5", 0, gv_pLAYER_02_ZERG2, UnitGetPosition(lp_cHOSEN_UNIT));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "DNAPickup", 0, gv_pLAYER_01_USER, UnitGetPosition(lp_cHOSEN_UNIT));
        lv_essenceUnit = UnitLastCreated();
        Wait(1.5, c_timeGame);
        SoundPlayAtPoint(SoundLink("UI_ResourcePickup", -1), PlayerGroupAll(), UnitGetPosition(lv_essenceUnit), 0.0, 100.0, 0.0);
        UnitKill(lv_essenceUnit);
        PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropCustom, c_playerPropOperAdd, 5);
        PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropCustomCollected, c_playerPropOperAdd, 5);
        TextTagCreate(StringExternal("Param/Value/62C515F4"), 24, UnitGetPosition(lv_essenceUnit), 1.5, true, true, PlayerGroupAll());
        TextTagSetVelocity(TextTagLastCreated(), 0.5, 90.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
    }
    else if (autoD84361E9_val == "UrsadakFemale") {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepGen7", 0, gv_pLAYER_02_ZERG2, UnitGetPosition(lp_cHOSEN_UNIT));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "MatriarchDNAPickup", 0, gv_pLAYER_01_USER, UnitGetPosition(lp_cHOSEN_UNIT));
        lv_essenceUnit = UnitLastCreated();
        Wait(1.5, c_timeGame);
        SoundPlayAtPoint(SoundLink("UI_ResourcePickup", -1), PlayerGroupAll(), UnitGetPosition(lv_essenceUnit), 0.0, 100.0, 0.0);
        UnitKill(lv_essenceUnit);
        gf_KillLargeHoldingPen(EventUnitTargetPoint());
        PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropCustom, c_playerPropOperAdd, 10);
        PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropCustomCollected, c_playerPropOperAdd, 10);
        TextTagCreate(StringExternal("Param/Value/F2618704"), 24, UnitGetPosition(lv_essenceUnit), 1.5, true, true, PlayerGroupAll());
        TextTagSetVelocity(TextTagLastCreated(), 0.5, 90.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
    }
    else if (autoD84361E9_val == "GiantYeti") {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepGen7", 0, gv_pLAYER_02_ZERG2, UnitGetPosition(lp_cHOSEN_UNIT));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "MatriarchDNAPickup", 0, gv_pLAYER_01_USER, UnitGetPosition(lp_cHOSEN_UNIT));
        lv_essenceUnit = UnitLastCreated();
        Wait(1.5, c_timeGame);
        SoundPlayAtPoint(SoundLink("UI_ResourcePickup", -1), PlayerGroupAll(), UnitGetPosition(lv_essenceUnit), 0.0, 100.0, 0.0);
        UnitKill(lv_essenceUnit);
        PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropCustom, c_playerPropOperAdd, 75);
        PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropCustomCollected, c_playerPropOperAdd, 75);
        TextTagCreate(StringExternal("Param/Value/15916EF9"), 24, UnitGetPosition(lv_essenceUnit), 1.5, true, true, PlayerGroupAll());
        TextTagSetVelocity(TextTagLastCreated(), 0.5, 90.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
    }
    else {
    }
    UnitSelect(gv_tHE_ONE_QUEEN, gv_pLAYER_01_USER, true);
    return true;
}

trigger auto_gf_KillLargeHoldingPen_Trigger = null;
point auto_gf_KillLargeHoldingPen_lp_location;

void gf_KillLargeHoldingPen (point lp_location) {
    auto_gf_KillLargeHoldingPen_lp_location = lp_location;

    if (auto_gf_KillLargeHoldingPen_Trigger == null) {
        auto_gf_KillLargeHoldingPen_Trigger = TriggerCreate("auto_gf_KillLargeHoldingPen_TriggerFunc");
    }

    TriggerExecute(auto_gf_KillLargeHoldingPen_Trigger, false, false);
}

bool auto_gf_KillLargeHoldingPen_TriggerFunc (bool testConds, bool runActions) {
    point lp_location = auto_gf_KillLargeHoldingPen_lp_location;

    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(lp_location, 3.0), "StarshipHoldingPenLarge", c_animNameDefault, "Death", c_animFlagNonLooping, c_animTimeDefault);
    Wait(1.0, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(lp_location, 3.0), "StarshipHoldingPenLarge", c_animNameDefault, "Dead", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    return true;
}

trigger auto_gf_AwakenProtossinRegion_Trigger = null;
region auto_gf_AwakenProtossinRegion_lp_pickedRegion;

void gf_AwakenProtossinRegion (region lp_pickedRegion) {
    auto_gf_AwakenProtossinRegion_lp_pickedRegion = lp_pickedRegion;

    if (auto_gf_AwakenProtossinRegion_Trigger == null) {
        auto_gf_AwakenProtossinRegion_Trigger = TriggerCreate("auto_gf_AwakenProtossinRegion_TriggerFunc");
    }

    TriggerExecute(auto_gf_AwakenProtossinRegion_Trigger, false, false);
}

bool auto_gf_AwakenProtossinRegion_TriggerFunc (bool testConds, bool runActions) {
    region lp_pickedRegion = auto_gf_AwakenProtossinRegion_lp_pickedRegion;

    // Variable Declarations
    unitgroup lv_localGroup;

    // Automatic Variable Declarations
    unitgroup auto17F4AFED_g;
    int auto17F4AFED_u;
    unit auto17F4AFED_var;
    unitgroup autoFB61EF58_g;
    int autoFB61EF58_u;
    unit autoFB61EF58_var;
    int auto50013243_n;
    int auto50013243_i;
    unitgroup auto8A204714_g;
    int auto8A204714_u;
    unit auto8A204714_var;

    // Variable Initialization
    lv_localGroup = UnitGroupEmpty();

    // Implementation
    auto17F4AFED_g = UnitGroup(null, gv_pLAYER_02_ZERG, lp_pickedRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto17F4AFED_u = UnitGroupCount(auto17F4AFED_g, c_unitCountAll);
    for (;; auto17F4AFED_u -= 1) {
        auto17F4AFED_var = UnitGroupUnitFromEnd(auto17F4AFED_g, auto17F4AFED_u);
        if (auto17F4AFED_var == null) { break; }
        if ((UnitHasBehavior(auto17F4AFED_var, "Exp03StasisLongTerm") == true)) {
            UnitGroupAdd(lv_localGroup, auto17F4AFED_var);
        }

    }
    autoFB61EF58_g = lv_localGroup;
    autoFB61EF58_u = UnitGroupCount(autoFB61EF58_g, c_unitCountAll);
    for (;; autoFB61EF58_u -= 1) {
        autoFB61EF58_var = UnitGroupUnitFromEnd(autoFB61EF58_g, autoFB61EF58_u);
        if (autoFB61EF58_var == null) { break; }
        UnitBehaviorAddPlayer(autoFB61EF58_var, "Exp03StasisEnding", gv_pLAYER_02_ZERG, 1);
        libNtve_gf_PauseUnit(autoFB61EF58_var, false);
    }
    auto50013243_n = gv_stasisPulses;
    for (auto50013243_i = 1; auto50013243_i <= auto50013243_n; auto50013243_i += 1) {
        Wait(2.0, c_timeAI);
    }
    auto8A204714_g = lv_localGroup;
    auto8A204714_u = UnitGroupCount(auto8A204714_g, c_unitCountAll);
    for (;; auto8A204714_u -= 1) {
        auto8A204714_var = UnitGroupUnitFromEnd(auto8A204714_g, auto8A204714_u);
        if (auto8A204714_var == null) { break; }
        UnitBehaviorRemovePlayer(auto8A204714_var, "Exp03StasisLongTerm", gv_pLAYER_02_ZERG, 1);
        UnitBehaviorRemovePlayer(auto8A204714_var, "Exp03StasisEnding", gv_pLAYER_02_ZERG, 1);
        UnitSetState(auto8A204714_var, c_unitStateTargetable, true);
        UnitSetState(auto8A204714_var, c_unitStateSelectable, true);
        libNtve_gf_MakeUnitInvulnerable(auto8A204714_var, false);
        AIAttackWaveUseUnit(gv_pLAYER_02_ZERG, auto8A204714_var);
        AISetUnitScriptControlled(auto8A204714_var, false);
    }
    AIAttackWaveSetTargetUnitGroup(gv_pLAYER_02_ZERG, UnitGroup(null, gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    AIAttackWaveSend(gv_pLAYER_02_ZERG, 0, false);
    return true;
}

trigger auto_gf_StartEscapePodTimer_Trigger = null;
int auto_gf_StartEscapePodTimer_lp_time;
int auto_gf_StartEscapePodTimer_lp_whichPodNumber;

void gf_StartEscapePodTimer (int lp_time, int lp_whichPodNumber) {
    auto_gf_StartEscapePodTimer_lp_time = lp_time;
    auto_gf_StartEscapePodTimer_lp_whichPodNumber = lp_whichPodNumber;

    if (auto_gf_StartEscapePodTimer_Trigger == null) {
        auto_gf_StartEscapePodTimer_Trigger = TriggerCreate("auto_gf_StartEscapePodTimer_TriggerFunc");
    }

    TriggerExecute(auto_gf_StartEscapePodTimer_Trigger, false, false);
}

bool auto_gf_StartEscapePodTimer_TriggerFunc (bool testConds, bool runActions) {
    int lp_time = auto_gf_StartEscapePodTimer_lp_time;
    int lp_whichPodNumber = auto_gf_StartEscapePodTimer_lp_whichPodNumber;

    // Variable Declarations
    int lv_timeCount;
    int lv_titleTextTag;
    int lv_timeTextTag;
    int lv_podPing;

    // Automatic Variable Declarations
    int autoA99960AB_n;
    int autoA99960AB_i;

    // Variable Initialization
    lv_titleTextTag = c_textTagNone;
    lv_timeTextTag = c_textTagNone;
    lv_podPing = c_invalidPingId;

    // Implementation
    lv_timeCount = lp_time;
    TimerStart(gv_escapePodWarningTimers[lp_whichPodNumber], IntToFixed((lp_time - 30)), false, c_timeAI);
    TimerStart(gv_escapePodTimers[lp_whichPodNumber], IntToFixed(lp_time), false, c_timeAI);
    gv_escapePodTimers[lp_whichPodNumber] = TimerLastStarted();
    gv_escapePodDlgMax[lp_whichPodNumber] = lp_time;
    gf_ShowHideEscapePodTimerWindow(lp_whichPodNumber, true);
    libSwaC_gf_CreateObjectivePing(true, UnitGetPosition(gv_escapePodUnit[lp_whichPodNumber]), StringExternal("Param/Value/BFF5832B"));
    lv_podPing = PingLastCreated();
    autoA99960AB_n = lp_time;
    for (autoA99960AB_i = 1; autoA99960AB_i <= autoA99960AB_n; autoA99960AB_i += 1) {
        lv_timeCount -= 1;
        if ((gv_gameOver == false) && (gv_inCinematic == false) && (UnitIsAlive(gv_escapePodUnit[lp_whichPodNumber]) == true)) {
            gf_SetEscapePodTimerWindowProgress(lp_whichPodNumber, lv_timeCount);
            if ((lv_timeCount == 59)) {
                PingSetColor(lv_podPing, Color(100.00, 100.00, 0.00));
            }
            else {
                if ((lv_timeCount == 30)) {
                    MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_escapePodUnit[lp_whichPodNumber]), 2.0, Color(100.00, 0.00, 0.00));
                    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/EF4E8883"), null, UnitGetPosition(gv_escapePodUnit[lp_whichPodNumber]));
                    PingDestroy(lv_podPing);
                    PingCreate(PlayerGroupAll(), "PingWarning", UnitGetPosition(gv_escapePodUnit[lp_whichPodNumber]), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
                    lv_podPing = PingLastCreated();
                    PingSetScale(PingLastCreated(), 0.8);
                    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/4E326AD1"));
                }

            }
        }
        else {
            TimerPause(gv_escapePodTimers[lp_whichPodNumber], true);
            TimerPause(gv_escapePodWarningTimers[lp_whichPodNumber], true);
            break;
        }
        Wait(1.0, c_timeGame);
    }
    PingDestroy(lv_podPing);
    return true;
}

void gf_CreateEscapePodTimerWindow (int lp_escapePodNo, int lp_max) {
    // Variable Declarations
    int lv_panel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_panel = c_invalidDialogControlId;

    // Implementation
    if ((gv_escapePodDlgLabel[lp_escapePodNo] == c_invalidDialogControlId)) {
        DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "NameLabel", gv_escapePodUnit[lp_escapePodNo]);
        gv_escapePodDlgLabel[lp_escapePodNo] = DialogControlLastCreated();
        DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "ValueLabel", gv_escapePodUnit[lp_escapePodNo]);
        gv_escapePodDlgValue[lp_escapePodNo] = DialogControlLastCreated();
        DialogControlHookupUnitStatus(c_triggerControlTypeImage, "BarImage", gv_escapePodUnit[lp_escapePodNo]);
        gv_escapePodDlgProgressBar[lp_escapePodNo] = DialogControlLastCreated();
        DialogControlHookupUnitStatus(c_triggerControlTypeImage, "BorderImage", gv_escapePodUnit[lp_escapePodNo]);
        gv_escapePodDlgBorder[lp_escapePodNo] = DialogControlLastCreated();
    }

}

void gf_SetEscapePodTimerWindowProgress (int lp_escapePodNo, int lp_progress) {
    // Variable Declarations
    int lv_panel;
    const int lv_c_Width = 260;
    const int lv_c_Height = 12;
    color lv_textColor;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_panel = c_invalidDialogControlId;
    lv_textColor = Color(0.00, 0.00, 0.00);

    // Implementation
    if ((lp_progress == 0)) {
        DialogControlSetVisible(gv_escapePodDlgProgressBar[lp_escapePodNo], PlayerGroupAll(), false);
    }
    else {
        DialogControlSetSize(gv_escapePodDlgProgressBar[lp_escapePodNo], PlayerGroupAll(), FixedToInt((IntToFixed(lv_c_Width) * (IntToFixed(lp_progress) / IntToFixed(gv_escapePodDlgMax[lp_escapePodNo])))), lv_c_Height);
        libNtve_gf_SetDialogItemColor(gv_escapePodDlgProgressBar[lp_escapePodNo], libSwaC_gf_GetProgressBarColorCampaign(), PlayerGroupAll());
        DialogControlSetVisible(gv_escapePodDlgProgressBar[lp_escapePodNo], PlayerGroupAll(), true);
    }
    libNtve_gf_SetDialogItemText(gv_escapePodDlgLabel[lp_escapePodNo], StringExternal("Param/Value/ACD44553"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_escapePodDlgValue[lp_escapePodNo], IntToText(lp_progress), PlayerGroupAll());
    lv_textColor = libSwaC_gf_ProgressColor(0, gv_escapePodDlgMax[lp_escapePodNo], lp_progress, Color(100.00, 0.00, 0.00), Color(100.00, 100.00, 0.00), Color(0.00, 100.00, 0.00), 3);
    libNtve_gf_SetDialogItemColor(gv_escapePodDlgValue[lp_escapePodNo], lv_textColor, PlayerGroupAll());
}

void gf_ShowHideEscapePodTimerWindow (int lp_escapePodNo, bool lp_showHideOptions) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(gv_escapePodDlgBorder[lp_escapePodNo], PlayerGroupAll(), lp_showHideOptions);
    DialogControlSetVisible(gv_escapePodDlgLabel[lp_escapePodNo], PlayerGroupAll(), lp_showHideOptions);
    DialogControlSetVisible(gv_escapePodDlgProgressBar[lp_escapePodNo], PlayerGroupAll(), lp_showHideOptions);
    DialogControlSetVisible(gv_escapePodDlgValue[lp_escapePodNo], PlayerGroupAll(), lp_showHideOptions);
}

int gf_LowestEscapePodTime () {
    // Variable Declarations
    int lv_lowestTime;

    // Automatic Variable Declarations
    const int auto3FD7D9F7_ae = 5;
    int auto3FD7D9F7_var;

    // Variable Initialization
    lv_lowestTime = 135;

    // Implementation
    auto3FD7D9F7_var = 1;
    for ( ; auto3FD7D9F7_var <= auto3FD7D9F7_ae; auto3FD7D9F7_var += 1 ) {
        if ((TimerGetRemaining(gv_escapePodTimers[auto3FD7D9F7_var]) < lv_lowestTime)) {
            lv_lowestTime = FixedToInt(TimerGetRemaining(gv_escapePodTimers[auto3FD7D9F7_var]));
        }

    }
    return lv_lowestTime;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_ULoadCampaignData("ZExpedition3");
    TriggerExecute(gt_Init01Technology, true, true);
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03Units, true, true);
    TriggerExecute(gt_Init04MusicSound, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulties, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    libSwaC_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_IntroQ, true, true);
    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("Consume", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("MorphToSwarmQueen", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("SwarmQueenTrain", 3), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("HotSBurrowVileDown", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("HotSBurrowVileUp", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("SwarmQueenTrain", 6), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("MorphHydraliskToLurker", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("MorphRoachToImpaler", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_visionGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_visionGroup = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_ZERG, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_ZERG2, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_ZERG22, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_02_ZERG, gv_pLAYER_02_ZERG2, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_02_ZERG, gv_pLAYER_02_ZERG22, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    PlayerGroupAdd(gv_protossPlayers, gv_pLAYER_02_ZERG);
    PlayerGroupAdd(gv_protossPlayers, gv_pLAYER_02_ZERG22);
    PlayerGroupAdd(lv_visionGroup, gv_pLAYER_02_ZERG);
    PlayerGroupAdd(lv_visionGroup, gv_pLAYER_02_ZERG2);
    PlayerGroupAdd(lv_visionGroup, gv_pLAYER_02_ZERG22);
    libSwaC_gf_ShareVisionAmongPlayers(lv_visionGroup);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropCustom, c_playerPropOperSetTo, 20);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropCustomCollected, c_playerPropOperSetTo, 20);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 0);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 0);
    PlayerModifyPropertyInt(gv_pLAYER_02_ZERG, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_02_ZERG, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    UISetResourceVisible(PlayerGroupSingle(gv_pLAYER_01_USER), c_resourceTypeMinerals, false);
    UISetResourceVisible(PlayerGroupSingle(gv_pLAYER_01_USER), c_resourceTypeVespene, false);
    UISetResourceVisible(PlayerGroupSingle(gv_pLAYER_01_USER), c_resourceTypeCustom, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto10A4E781_g;
    int auto10A4E781_u;
    unit auto10A4E781_var;
    unitgroup autoC34B8AF8_g;
    int autoC34B8AF8_u;
    unit autoC34B8AF8_var;
    unitgroup autoCCA6F6FB_g;
    int autoCCA6F6FB_u;
    unit autoCCA6F6FB_var;
    unitgroup auto9F6BE80E_g;
    int auto9F6BE80E_u;
    unit auto9F6BE80E_var;
    unitgroup autoE4287DEF_g;
    int autoE4287DEF_u;
    unit autoE4287DEF_var;
    unitgroup auto5554450A_g;
    int auto5554450A_u;
    unit auto5554450A_var;
    unitgroup auto2279A847_g;
    int auto2279A847_u;
    unit auto2279A847_var;
    unitgroup autoB58A1208_g;
    int autoB58A1208_u;
    unit autoB58A1208_var;
    unitgroup autoFA77F9B6_g;
    int autoFA77F9B6_u;
    unit autoFA77F9B6_var;
    unitgroup autoCBEBB1FB_g;
    int autoCBEBB1FB_u;
    unit autoCBEBB1FB_var;
    unitgroup autoD0294431_g;
    int autoD0294431_u;
    unit autoD0294431_var;
    unitgroup auto44DC8E81_g;
    int auto44DC8E81_u;
    unit auto44DC8E81_var;
    unitgroup auto99569D90_g;
    int auto99569D90_u;
    unit auto99569D90_var;
    unitgroup auto6C266138_g;
    int auto6C266138_u;
    unit auto6C266138_var;
    const int auto4EEEA79E_ae = 5;
    int auto4EEEA79E_var;
    unitgroup auto3B7C6615_g;
    int auto3B7C6615_u;
    unit auto3B7C6615_var;
    unitgroup autoB1549D19_g;
    int autoB1549D19_u;
    unit autoB1549D19_var;
    unitgroup autoE3903D4C_g;
    int autoE3903D4C_u;
    unit autoE3903D4C_var;
    unitgroup autoEB7AED70_g;
    int autoEB7AED70_u;
    unit autoEB7AED70_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_EnableDisableZerglingRespawn(false);
    gv_tHE_ONE_QUEEN = UnitFromId(178);
    libSCDH_gf_CreateHeroPing(gv_tHE_ONE_QUEEN, libSCDH_ge_HeroPingType_Ally);
    libSwaC_gf_SetHeroPanelUnit(1, gv_tHE_ONE_QUEEN);
    libNtve_gf_ShowHideUnit(gv_tHE_ONE_QUEEN, false);
    libNtve_gf_ShowHideUnit(UnitFromId(275), false);
    gv_protossUnitGroup = UnitGroup(null, gv_pLAYER_02_ZERG, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv_protossEscapePods = UnitGroup("ShipEscapePod", gv_pLAYER_02_ZERG22, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv_numberOfProtossRemaining = UnitGroupCount(gv_protossUnitGroup, c_unitCountAlive);
    gv_escapePodPeopleRemaining = (UnitGroupCount(gv_protossEscapePods, c_unitCountAlive) * 5);
    gv_numberOfProtossRemaining = (gv_numberOfProtossRemaining + gv_escapePodPeopleRemaining);
    libSwaC_gf_SetUnitInfoTextCampaign(UnitFromId(228), StringExternal("Param/Value/70071FB2"), StringExternal("Param/Value/63BFDF91"), null);
    UnitSetState(UnitFromId(228), c_unitStateTooltipable, true);
    libSwaC_gf_SetUnitInfoTextCampaign(UnitFromId(179), StringExternal("Param/Value/38AF6832"), StringExternal("Param/Value/E04C2689"), null);
    libSwaC_gf_SetUnitInfoTextCampaign(UnitFromId(275), StringExternal("Param/Value/A1EE3E27"), StringExternal("Param/Value/457C3CD3"), null);
    UnitIssueOrder(UnitFromId(634), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(665), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(194), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(175), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(880), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(176), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libSwaC_gf_SetUnitInfoTextCampaign(UnitFromId(18), StringExternal("Param/Value/2BB64D60"), StringExternal("Param/Value/4EF5052A"), null);
    libSwaC_gf_SetUnitInfoTextCampaign(UnitFromId(12), StringExternal("Param/Value/CA200907"), StringExternal("Param/Value/6B093FFD"), null);
    libSwaC_gf_SetUnitInfoTextCampaign(UnitFromId(8), StringExternal("Param/Value/02C35B1A"), StringExternal("Param/Value/77345DDC"), null);
    libSwaC_gf_SetUnitInfoTextCampaign(UnitFromId(239), StringExternal("Param/Value/DBFF5EFE"), StringExternal("Param/Value/6E53B654"), null);
    auto10A4E781_g = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto10A4E781_u = UnitGroupCount(auto10A4E781_g, c_unitCountAll);
    for (;; auto10A4E781_u -= 1) {
        auto10A4E781_var = UnitGroupUnitFromEnd(auto10A4E781_g, auto10A4E781_u);
        if (auto10A4E781_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto10A4E781_var, false);
    }
    autoC34B8AF8_g = UnitGroup(null, gv_pLAYER_02_ZERG, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC34B8AF8_u = UnitGroupCount(autoC34B8AF8_g, c_unitCountAll);
    for (;; autoC34B8AF8_u -= 1) {
        autoC34B8AF8_var = UnitGroupUnitFromEnd(autoC34B8AF8_g, autoC34B8AF8_u);
        if (autoC34B8AF8_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoC34B8AF8_var, false);
    }
    autoCCA6F6FB_g = UnitGroup(null, gv_pLAYER_02_ZERG, RegionFromId(41), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCCA6F6FB_u = UnitGroupCount(autoCCA6F6FB_g, c_unitCountAll);
    for (;; autoCCA6F6FB_u -= 1) {
        autoCCA6F6FB_var = UnitGroupUnitFromEnd(autoCCA6F6FB_g, autoCCA6F6FB_u);
        if (autoCCA6F6FB_var == null) { break; }
        UnitSetPropertyFixed(autoCCA6F6FB_var, c_unitPropEnergyPercent, 100.0);
    }
    auto9F6BE80E_g = UnitGroup(null, gv_pLAYER_02_ZERG, RegionFromId(23), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9F6BE80E_u = UnitGroupCount(auto9F6BE80E_g, c_unitCountAll);
    for (;; auto9F6BE80E_u -= 1) {
        auto9F6BE80E_var = UnitGroupUnitFromEnd(auto9F6BE80E_g, auto9F6BE80E_u);
        if (auto9F6BE80E_var == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(auto9F6BE80E_var, true);
        UnitSetState(auto9F6BE80E_var, c_unitStateTargetable, false);
        UnitSetState(auto9F6BE80E_var, c_unitStateSelectable, false);
        libNtve_gf_PauseUnit(auto9F6BE80E_var, true);
        UnitBehaviorAddPlayer(auto9F6BE80E_var, "Exp03StasisLongTerm", gv_pLAYER_02_ZERG, 1);
    }
    autoE4287DEF_g = UnitGroup(null, gv_pLAYER_02_ZERG, RegionFromId(39), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE4287DEF_u = UnitGroupCount(autoE4287DEF_g, c_unitCountAll);
    for (;; autoE4287DEF_u -= 1) {
        autoE4287DEF_var = UnitGroupUnitFromEnd(autoE4287DEF_g, autoE4287DEF_u);
        if (autoE4287DEF_var == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(autoE4287DEF_var, true);
        UnitSetState(autoE4287DEF_var, c_unitStateTargetable, false);
        UnitSetState(autoE4287DEF_var, c_unitStateSelectable, false);
        libNtve_gf_PauseUnit(autoE4287DEF_var, true);
        UnitBehaviorAddPlayer(autoE4287DEF_var, "Exp03StasisLongTerm", gv_pLAYER_02_ZERG, 1);
    }
    auto5554450A_g = UnitGroup(null, gv_pLAYER_02_ZERG, RegionFromId(40), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5554450A_u = UnitGroupCount(auto5554450A_g, c_unitCountAll);
    for (;; auto5554450A_u -= 1) {
        auto5554450A_var = UnitGroupUnitFromEnd(auto5554450A_g, auto5554450A_u);
        if (auto5554450A_var == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(auto5554450A_var, true);
        UnitSetState(auto5554450A_var, c_unitStateTargetable, false);
        UnitSetState(auto5554450A_var, c_unitStateSelectable, false);
        libNtve_gf_PauseUnit(auto5554450A_var, true);
        UnitBehaviorAddPlayer(auto5554450A_var, "Exp03StasisLongTerm", gv_pLAYER_02_ZERG, 1);
    }
    auto2279A847_g = UnitGroup(null, gv_pLAYER_02_ZERG, RegionFromId(45), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2279A847_u = UnitGroupCount(auto2279A847_g, c_unitCountAll);
    for (;; auto2279A847_u -= 1) {
        auto2279A847_var = UnitGroupUnitFromEnd(auto2279A847_g, auto2279A847_u);
        if (auto2279A847_var == null) { break; }
        libNtve_gf_PauseUnit(auto2279A847_var, true);
    }
    autoB58A1208_g = UnitGroup("Probe", gv_pLAYER_02_ZERG, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB58A1208_u = UnitGroupCount(autoB58A1208_g, c_unitCountAll);
    for (;; autoB58A1208_u -= 1) {
        autoB58A1208_var = UnitGroupUnitFromEnd(autoB58A1208_g, autoB58A1208_u);
        if (autoB58A1208_var == null) { break; }
        UnitIssueOrder(autoB58A1208_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    }
    autoFA77F9B6_g = UnitGroup("Sentry", gv_pLAYER_02_ZERG, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFA77F9B6_u = UnitGroupCount(autoFA77F9B6_g, c_unitCountAll);
    for (;; autoFA77F9B6_u -= 1) {
        autoFA77F9B6_var = UnitGroupUnitFromEnd(autoFA77F9B6_g, autoFA77F9B6_u);
        if (autoFA77F9B6_var == null) { break; }
        UnitSetPropertyFixed(autoFA77F9B6_var, c_unitPropEnergyPercent, 100.0);
    }
    autoCBEBB1FB_g = UnitGroup("HighTemplar", gv_pLAYER_02_ZERG, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCBEBB1FB_u = UnitGroupCount(autoCBEBB1FB_g, c_unitCountAll);
    for (;; autoCBEBB1FB_u -= 1) {
        autoCBEBB1FB_var = UnitGroupUnitFromEnd(autoCBEBB1FB_g, autoCBEBB1FB_u);
        if (autoCBEBB1FB_var == null) { break; }
        UnitSetPropertyFixed(autoCBEBB1FB_var, c_unitPropEnergyPercent, 100.0);
    }
    autoD0294431_g = UnitGroup("StarshipVentdoorUnit", gv_pLAYER_02_ZERG, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD0294431_u = UnitGroupCount(autoD0294431_g, c_unitCountAll);
    for (;; autoD0294431_u -= 1) {
        autoD0294431_var = UnitGroupUnitFromEnd(autoD0294431_g, autoD0294431_u);
        if (autoD0294431_var == null) { break; }
        UnitBehaviorAddPlayer(autoD0294431_var, "Harmless", gv_pLAYER_02_ZERG, 1);
        libSwaC_gf_SetUnitInfoTextCampaign(autoD0294431_var, StringExternal("Param/Value/D226F099"), StringExternal("Param/Value/4B5DC244"), null);
    }
    auto44DC8E81_g = UnitGroup("StarshipVentdoorUnitULBR", gv_pLAYER_02_ZERG, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto44DC8E81_u = UnitGroupCount(auto44DC8E81_g, c_unitCountAll);
    for (;; auto44DC8E81_u -= 1) {
        auto44DC8E81_var = UnitGroupUnitFromEnd(auto44DC8E81_g, auto44DC8E81_u);
        if (auto44DC8E81_var == null) { break; }
        UnitBehaviorAddPlayer(auto44DC8E81_var, "Harmless", gv_pLAYER_02_ZERG, 1);
        libSwaC_gf_SetUnitInfoTextCampaign(auto44DC8E81_var, StringExternal("Param/Value/AE8D1308"), StringExternal("Param/Value/C790806A"), null);
    }
    auto99569D90_g = UnitGroup(null, gv_pLAYER_02_ZERG, RegionFromId(49), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto99569D90_u = UnitGroupCount(auto99569D90_g, c_unitCountAll);
    for (;; auto99569D90_u -= 1) {
        auto99569D90_var = UnitGroupUnitFromEnd(auto99569D90_g, auto99569D90_u);
        if (auto99569D90_var == null) { break; }
        UnitGroupAdd(gv_part1_ProtossUnitGroup, auto99569D90_var);
    }
    gv_escapePodUnit[1] = UnitFromId(528);
    gv_escapePodUnit[2] = UnitFromId(521);
    gv_escapePodUnit[3] = UnitFromId(340);
    gv_escapePodUnit[4] = UnitFromId(523);
    gv_escapePodUnit[5] = UnitFromId(534);
    auto6C266138_g = UnitGroup("ShipEscapePod", gv_pLAYER_02_ZERG22, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6C266138_u = UnitGroupCount(auto6C266138_g, c_unitCountAll);
    for (;; auto6C266138_u -= 1) {
        auto6C266138_var = UnitGroupUnitFromEnd(auto6C266138_g, auto6C266138_u);
        if (auto6C266138_var == null) { break; }
        libSwaC_gf_SetUnitInfoTextCampaign(auto6C266138_var, StringExternal("Param/Value/ED662F89"), StringExternal("Param/Value/D38417F8"), null);
    }
    auto4EEEA79E_var = 1;
    for ( ; auto4EEEA79E_var <= auto4EEEA79E_ae; auto4EEEA79E_var += 1 ) {
        gf_CreateEscapePodTimerWindow(auto4EEEA79E_var, 1);
        gf_ShowHideEscapePodTimerWindow(auto4EEEA79E_var, false);
    }
    gv_tHE_ONE_URSADON = UnitFromId(192);
    gv_tHE_TWO_URSADON = UnitFromId(206);
    UnitIssueOrder(gv_tHE_ONE_URSADON, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitIssueOrder(gv_tHE_TWO_URSADON, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitSetState(gv_tHE_ONE_URSADON, c_unitStateTargetable, false);
    UnitAbilityShow(gv_tHE_ONE_URSADON, "Consume", false);
    UnitAbilityShow(UnitFromId(16), "Consume", false);
    auto3B7C6615_g = UnitGroup("UrsadakFemale", gv_pLAYER_02_ZERG2, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3B7C6615_u = UnitGroupCount(auto3B7C6615_g, c_unitCountAll);
    for (;; auto3B7C6615_u -= 1) {
        auto3B7C6615_var = UnitGroupUnitFromEnd(auto3B7C6615_g, auto3B7C6615_u);
        if (auto3B7C6615_var == null) { break; }
        UnitSetPropertyFixed(auto3B7C6615_var, c_unitPropMovementSpeed, 0.0);
        UnitIssueOrder(auto3B7C6615_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        UnitSetPropertyFixed(auto3B7C6615_var, c_unitPropLifeMax, 160.0);
        UnitSetPropertyFixed(auto3B7C6615_var, c_unitPropLifePercent, 100.0);
    }
    autoB1549D19_g = UnitGroup("Lyote", gv_pLAYER_02_ZERG2, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB1549D19_u = UnitGroupCount(autoB1549D19_g, c_unitCountAll);
    for (;; autoB1549D19_u -= 1) {
        autoB1549D19_var = UnitGroupUnitFromEnd(autoB1549D19_g, autoB1549D19_u);
        if (autoB1549D19_var == null) { break; }
        UnitSetPropertyFixed(autoB1549D19_var, c_unitPropMovementSpeed, 0.0);
        UnitIssueOrder(autoB1549D19_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    }
    autoE3903D4C_g = UnitGroup("KarakMale", gv_pLAYER_02_ZERG2, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE3903D4C_u = UnitGroupCount(autoE3903D4C_g, c_unitCountAll);
    for (;; autoE3903D4C_u -= 1) {
        autoE3903D4C_var = UnitGroupUnitFromEnd(autoE3903D4C_g, autoE3903D4C_u);
        if (autoE3903D4C_var == null) { break; }
        UnitSetPropertyFixed(autoE3903D4C_var, c_unitPropMovementSpeed, 0.0);
        UnitIssueOrder(autoE3903D4C_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    }
    autoEB7AED70_g = UnitGroup("Anteplott", gv_pLAYER_02_ZERG2, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEB7AED70_u = UnitGroupCount(autoEB7AED70_g, c_unitCountAll);
    for (;; autoEB7AED70_u -= 1) {
        autoEB7AED70_var = UnitGroupUnitFromEnd(autoEB7AED70_g, autoEB7AED70_u);
        if (autoEB7AED70_var == null) { break; }
        UnitSetPropertyFixed(autoEB7AED70_var, c_unitPropMovementSpeed, 0.0);
        UnitIssueOrder(autoEB7AED70_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init04MusicSound_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_actor;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayAtPoint(SoundLink("Doodad_StarshipWingPiece_Scripted", -1), PlayerGroupAll(), PointFromId(1215), 0.0, 100.0, 0.0);
    gv_mapMusicTrack = "ZExpedition03MusicMain";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04MusicSound_Init () {
    gt_Init04MusicSound = TriggerCreate("gt_Init04MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    libLbty_gf_AutoRevealRegion(RegionFromId(39), RegionFromId(39), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(40), RegionFromId(40), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(45), RegionFromId(45), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(115), RegionFromId(115), gv_pLAYER_01_USER);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(2), "TerrainObjectStarshipFloraPodDoodadB", c_animNameDefault, "Stand Work", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(66), "TerrainObjectStarshipFloraPodDoodadC", c_animNameDefault, "Stand Work", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    ActorSend(ActorFromDoodad(DoodadFromId(903)), "SetVisibility");
    ActorSend(ActorFromDoodad(DoodadFromId(899)), "SetVisibility");
    ActorSend(ActorFromDoodad(DoodadFromId(904)), "SetVisibility");
    ActorSend(ActorFromDoodad(DoodadFromId(905)), "SetVisibility");
    ActorSend(ActorFromDoodad(DoodadFromId(900)), "SetVisibility");
    ActorSend(ActorFromDoodad(DoodadFromId(902)), "SetVisibility");
    ActorSend(ActorFromDoodad(DoodadFromId(901)), "SetVisibility");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto0A684DD1_g;
    int auto0A684DD1_u;
    unit auto0A684DD1_var;
    unitgroup auto267C115D_g;
    int auto267C115D_u;
    unit auto267C115D_var;
    playergroup auto9D65D1E3_g;
    int auto9D65D1E3_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libHots_gf_DifficultyValueInt2(1, 0, 0) == 1)) {
        PlayerModifyPropertyInt(gv_pLAYER_02_ZERG2, c_playerPropDamageTakenPercent, c_playerPropOperSetTo, 50);
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1)) {
        TechTreeUpgradeAddLevel(gv_pLAYER_01_USER, "NiadraBrutal", 1);
    }

    gv_ursadonLife = libNtve_gf_DifficultyValueFixed(600.0, 600.0, 500.0, 500.0);
    auto0A684DD1_g = UnitGroup("GiantYeti", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0A684DD1_u = UnitGroupCount(auto0A684DD1_g, c_unitCountAll);
    for (;; auto0A684DD1_u -= 1) {
        auto0A684DD1_var = UnitGroupUnitFromEnd(auto0A684DD1_g, auto0A684DD1_u);
        if (auto0A684DD1_var == null) { break; }
        UnitSetPropertyFixed(auto0A684DD1_var, c_unitPropLifeMax, gv_ursadonLife);
        UnitSetPropertyFixed(auto0A684DD1_var, c_unitPropLifePercent, 100.0);
    }
    gv_swarmQueenLife[1] = 20.0;
    gv_swarmQueenLife[2] = libNtve_gf_DifficultyValueFixed(200.0, 200.0, 175.0, 175.0);
    gv_swarmQueenLife[3] = libNtve_gf_DifficultyValueFixed(250.0, 250.0, 225.0, 225.0);
    gv_swarmQueenLife[4] = libNtve_gf_DifficultyValueFixed(300.0, 300.0, 275.0, 275.0);
    UnitSetPropertyFixed(gv_tHE_ONE_QUEEN, c_unitPropLifeMax, gv_swarmQueenLife[1]);
    UnitSetPropertyFixed(gv_tHE_ONE_QUEEN, c_unitPropLifePercent, 100.0);
    gv_runoutTime = libHots_gf_DifficultyValueFixed2(85.0, 85.0, 68.0);
    gv_stasisPulses = libHots_gf_DifficultyValueInt2(4, 4, 3);
    gv_escapePodTimes[1] = libNtve_gf_DifficultyValueInt(80, 80, 70, 60);
    gv_escapePodTimes[2] = libNtve_gf_DifficultyValueInt(100, 100, 90, 85);
    gv_escapePodTimes[3] = libNtve_gf_DifficultyValueInt(135, 135, 135, 135);
    gv_escapePodLife = 200.0;
    gv_escapePodShields = libHots_gf_DifficultyValueFixed2(200.0, 200.0, 400.0);
    auto267C115D_g = UnitGroup("ShipEscapePod", gv_pLAYER_02_ZERG22, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto267C115D_u = UnitGroupCount(auto267C115D_g, c_unitCountAll);
    for (;; auto267C115D_u -= 1) {
        auto267C115D_var = UnitGroupUnitFromEnd(auto267C115D_g, auto267C115D_u);
        if (auto267C115D_var == null) { break; }
        UnitSetPropertyFixed(auto267C115D_var, c_unitPropLifeMax, gv_escapePodLife);
        UnitSetPropertyFixed(auto267C115D_var, c_unitPropShieldsMax, gv_escapePodShields);
        UnitSetPropertyFixed(auto267C115D_var, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(auto267C115D_var, c_unitPropShieldsPercent, 100.0);
    }
    auto9D65D1E3_g = gv_protossPlayers;
    auto9D65D1E3_var = -1;
    while (true) {
        auto9D65D1E3_var = PlayerGroupNextPlayer(auto9D65D1E3_g, auto9D65D1E3_var);
        if (auto9D65D1E3_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto9D65D1E3_var, "PsiStormTech", 1);
        TechTreeAbilityAllow(auto9D65D1E3_var, AbilityCommand("PsiStorm", 0), true);
        TechTreeAbilityAllow(auto9D65D1E3_var, AbilityCommand("ArchonWarp", 0), true);
        TechTreeAbilityAllow(auto9D65D1E3_var, AbilityCommand("ArchonWarp", 1), true);
        TechTreeAbilityAllow(auto9D65D1E3_var, AbilityCommand("GuardianShield", 0), false);
        if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
            TechTreeUpgradeAddLevel(auto9D65D1E3_var, "ProtossGroundArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(auto9D65D1E3_var, "ProtossGroundWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto9D65D1E3_var, "ProtossShieldsLevel1", 1);
            TechTreeUpgradeAddLevel(auto9D65D1E3_var, "Charge", 1);
            TechTreeUpgradeAddLevel(auto9D65D1E3_var, "BlinkTech", 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_AddMissionTipUserData("Larval Queen");
    libSwaC_gf_AddMissionTipUserData("Parasitic Invasion");
    libSwaC_gf_AddMissionTipUserData("Consume");
    libSwaC_gf_AddMissionTipUserData("Niadra");
    libSwaC_gf_AddMissionTipUserData("Spawn Zerg");
    libSwaC_gf_AddMissionTipUserData("Growth");
    libSwaC_gf_AddMissionTipUserData("Quick Select");
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Probe", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Zealot", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Stalker", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Sentry", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("HighTemplar", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Archon", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Immortal", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("PhotonCannon", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("LarvalQueen", false, gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Skip to Part 2
//--------------------------------------------------------------------------------------------------
bool gt_DEBUGSkiptoPart2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitKill(UnitFromId(15));
    UnitKill(UnitFromId(52));
    UnitKill(UnitFromId(151));
    UnitKill(UnitFromId(25));
    UnitKill(UnitFromId(105));
    UnitKill(UnitFromId(254));
    UnitKill(UnitFromId(106));
    UnitKill(UnitFromId(192));
    UnitSetPosition(gv_tHE_ONE_QUEEN, RegionGetCenter(RegionFromId(8)), false);
    UnitRemove(UnitFromId(294));
    CameraPan(gv_pLAYER_01_USER, RegionGetCenter(RegionFromId(8)), 0.0, -1, 10, false);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropCustom, c_playerPropOperSetTo, 100);
    libNtve_gf_KillModel(gv_helperModel_VentTunnel);
    libSwaC_gf_SetMissionObjectiveProgress2("ZExpedition03Objective03", PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropCustom), true, null, true);
    TriggerExecute(gt_ObjectiveGainBiomassComplete, true, false);
    TriggerExecute(gt_ObjectiveFindSafePlaceComplete, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DEBUGSkiptoPart2_Init () {
    gt_DEBUGSkiptoPart2 = TriggerCreate("gt_DEBUGSkiptoPart2_Func");
    TriggerAddEventChatMessage(gt_DEBUGSkiptoPart2, c_playerAny, "s2", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Skip to Part 3
//--------------------------------------------------------------------------------------------------
bool gt_DEBUGSkiptoPart3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto186B0315_g;
    int auto186B0315_u;
    unit auto186B0315_var;
    unitgroup auto34C0ED30_g;
    int auto34C0ED30_u;
    unit auto34C0ED30_var;

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_EscapedWarpDriveTransition, true);
    auto186B0315_g = UnitGroup(null, gv_pLAYER_02_ZERG, RegionFromId(18), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto186B0315_u = UnitGroupCount(auto186B0315_g, c_unitCountAll);
    for (;; auto186B0315_u -= 1) {
        auto186B0315_var = UnitGroupUnitFromEnd(auto186B0315_g, auto186B0315_u);
        if (auto186B0315_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto186B0315_var, true);
        libNtve_gf_PauseUnit(auto186B0315_var, false);
        UnitKill(auto186B0315_var);
    }
    auto34C0ED30_g = UnitGroup(null, gv_pLAYER_02_ZERG, RegionFromId(41), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto34C0ED30_u = UnitGroupCount(auto34C0ED30_g, c_unitCountAll);
    for (;; auto34C0ED30_u -= 1) {
        auto34C0ED30_var = UnitGroupUnitFromEnd(auto34C0ED30_g, auto34C0ED30_u);
        if (auto34C0ED30_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto34C0ED30_var, true);
        libNtve_gf_PauseUnit(auto34C0ED30_var, false);
        UnitKill(auto34C0ED30_var);
    }
    UnitSetPosition(gv_tHE_ONE_QUEEN, PointFromId(59), false);
    CameraPan(gv_pLAYER_01_USER, PointFromId(59), 0.0, -1, 10, false);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropCustom, c_playerPropOperSetTo, 200);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DEBUGSkiptoPart3_Init () {
    gt_DEBUGSkiptoPart3 = TriggerCreate("gt_DEBUGSkiptoPart3_Func");
    TriggerAddEventChatMessage(gt_DEBUGSkiptoPart3, c_playerAny, "s3", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/8B9155BC"), null, PointFromId(63));
    Wait(3.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveGainBiomassCreate, true, true);
    TriggerExecute(gt_ObjectiveFindSafePlaceCreate, true, true);
    TriggerQueueExit();
    Wait(1.0, c_timeReal);
    TriggerExecute(gt_TransmissionP1LarvaAwakensQ, true, true);
    TriggerExecute(gt_TipMissionHelpQ, true, false);
    libSwaC_gf_CreateObjectivePing(true, RegionGetCenter(RegionFromId(8)), StringExternal("Param/Value/AB70D57D"));
    gv_safePlacePing = PingLastCreated();
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(8));
    gv_beaconRevealer = VisRevealerLastCreated();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/D042097B"), null, RegionGetCenter(RegionFromId(8)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Protoss Remaining Objective
//--------------------------------------------------------------------------------------------------
bool gt_UpdateProtossRemainingObjective_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_numberOfProtossRemaining = UnitGroupCount(gv_protossUnitGroup, c_unitCountAlive);
    gv_escapePodPeopleRemaining = (UnitGroupCount(gv_protossEscapePods, c_unitCountAlive) * 5);
    gv_numberOfProtossRemaining = (gv_numberOfProtossRemaining + gv_escapePodPeopleRemaining);
    if ((gv_numberOfProtossRemaining < 0)) {
        gv_numberOfProtossRemaining = 0;
    }

    libSwaC_gf_UpdateMissionObjectiveText("ZExpedition03Objective01", gv_numberOfProtossRemaining, false, StringExternal("Param/Value/3EFBAEBF"));
    if ((gv_escapePodPeopleRemaining == 0)) {
        TriggerExecute(gt_ObjectiveDestroyEscapePodsComplete, true, false);
    }

    if ((gv_numberOfProtossRemaining <= 0)) {
        TriggerExecute(gt_VictoryMainObjectivesCompleted, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateProtossRemainingObjective_Init () {
    gt_UpdateProtossRemainingObjective = TriggerCreate("gt_UpdateProtossRemainingObjective_Func");
    TriggerAddEventTimePeriodic(gt_UpdateProtossRemainingObjective, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Protoss Remaining Templar -> Archon
//--------------------------------------------------------------------------------------------------
bool gt_UpdateProtossRemainingTemplarArchon_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_protossUnitGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupRemove(gv_protossUnitGroup, EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateProtossRemainingTemplarArchon_Init () {
    gt_UpdateProtossRemainingTemplarArchon = TriggerCreate("gt_UpdateProtossRemainingTemplarArchon_Func");
    TriggerAddEventUnitAbility(gt_UpdateProtossRemainingTemplarArchon, null, AbilityCommand("ArchonWarp", 1), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Protoss Remaining Templar -> Archon Created
//--------------------------------------------------------------------------------------------------
bool gt_UpdateProtossRemainingTemplarArchonCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_ZERG))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_protossUnitGroup, EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateProtossRemainingTemplarArchonCreated_Init () {
    gt_UpdateProtossRemainingTemplarArchonCreated = TriggerCreate("gt_UpdateProtossRemainingTemplarArchonCreated_Func");
    TriggerAddEventUnitCreated(gt_UpdateProtossRemainingTemplarArchonCreated, null, "ArchonWarp", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Harmless from Unit
//--------------------------------------------------------------------------------------------------
bool gt_RemoveHarmlessfromUnit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "Harmless") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemovePlayer(EventUnit(), "Harmless", gv_pLAYER_02_ZERG22, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveHarmlessfromUnit_Init () {
    gt_RemoveHarmlessfromUnit = TriggerCreate("gt_RemoveHarmlessfromUnit_Func");
    TriggerAddEventUnitDamaged(gt_RemoveHarmlessfromUnit, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Regen Life of Ursadon Briefly
//--------------------------------------------------------------------------------------------------
bool gt_RegenLifeofUrsadonBriefly_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitBehaviorAddPlayer(gv_tHE_TWO_URSADON, "LifeRegenBoost", gv_pLAYER_01_USER, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RegenLifeofUrsadonBriefly_Init () {
    gt_RegenLifeofUrsadonBriefly = TriggerCreate("gt_RegenLifeofUrsadonBriefly_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Swarm Queen uses Parasitic Invasion
//--------------------------------------------------------------------------------------------------
bool gt_SwarmQueenusesParasiticInvasion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto9F41246F_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitTargetUnit()) == "KarakMale") || (UnitGetType(EventUnitTargetUnit()) == "Lyote") || (UnitGetType(EventUnitTargetUnit()) == "Anteplott") || (UnitGetType(EventUnitTargetUnit()) == "UrsadakFemale") || (UnitGetType(EventUnitTargetUnit()) == "GiantYeti")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto9F41246F_val = UnitGetType(EventUnitTargetUnit());
    if (auto9F41246F_val == "Lyote") {
        Wait(0.25, c_timeGame);
        UnitIssueOrder(EventUnitTargetUnit(), Order(AbilityCommand("Consume", 0)), c_orderQueueReplace);
    }
    else if (auto9F41246F_val == "KarakMale") {
        Wait(0.25, c_timeGame);
        UnitIssueOrder(EventUnitTargetUnit(), Order(AbilityCommand("Consume", 0)), c_orderQueueReplace);
    }
    else if (auto9F41246F_val == "UrsadakFemale") {
        Wait(0.25, c_timeGame);
        UnitIssueOrder(EventUnitTargetUnit(), Order(AbilityCommand("Consume", 0)), c_orderQueueReplace);
    }
    else if (auto9F41246F_val == "Anteplott") {
        Wait(0.25, c_timeGame);
        UnitIssueOrder(EventUnitTargetUnit(), Order(AbilityCommand("Consume", 0)), c_orderQueueReplace);
    }
    else if (auto9F41246F_val == "GiantYeti") {
        gf_KillLargeHoldingPen(EventUnitTargetPoint());
        UnitSetOwner(EventUnitTargetUnit(), gv_pLAYER_01_USER, true);
        UnitSelect(EventUnitTargetUnit(), gv_pLAYER_01_USER, true);
        if ((ObjectiveGetState(gv_objectiveDestroyDominionBase323) == c_objectiveStateActive)) {
            PingDestroy(gv_giantUrsadonPing);
            libSwaC_gf_DisplayMissionObjectiveRewardFloatingText(UnitGetPosition(EventUnitTargetUnit()), "ZExpedition03Objective010", gv_pLAYER_01_USER);
            TriggerEnable(gt_GiantUrsadonDiesFailBonusObjective, false);
            TriggerExecute(gt_RegenLifeofUrsadonBriefly, true, false);
            TriggerExecute(gt_TransmissionP4UrsadonInfestedQ, true, false);
            TriggerExecute(gt_ObjectiveInfestGiantUrsadonComplete, true, false);
        }

    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwarmQueenusesParasiticInvasion_Init () {
    gt_SwarmQueenusesParasiticInvasion = TriggerCreate("gt_SwarmQueenusesParasiticInvasion_Func");
    TriggerEnable(gt_SwarmQueenusesParasiticInvasion, false);
    TriggerAddEventUnitAbility(gt_SwarmQueenusesParasiticInvasion, null, AbilityCommand("SwarmQueenParasiticInvasion", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Critter is Consumed
//--------------------------------------------------------------------------------------------------
bool gt_CritterisConsumed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Lyote") || (UnitGetType(EventUnit()) == "KarakMale") || (UnitGetType(EventUnit()) == "Anteplott") || (UnitGetType(EventUnit()) == "UrsadakFemale") || (UnitGetType(EventUnit()) == "GiantYeti")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetCustomValue(EventUnit(), 0) == 0.0)) {
        SoundPlayAtPoint(SoundLink("UI_ConsoleIn_Zerg", -1), PlayerGroupAll(), UnitGetPosition(EventUnit()), 0.0, 100.0, 0.0);
        UnitSetCustomValue(EventUnit(), 0, 1.0);
        gf_ConsumeCritter(EventUnit());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CritterisConsumed_Init () {
    gt_CritterisConsumed = TriggerCreate("gt_CritterisConsumed_Func");
    TriggerEnable(gt_CritterisConsumed, false);
    TriggerAddEventUnitAbility(gt_CritterisConsumed, null, AbilityCommand("Consume", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Critter is Killed
//--------------------------------------------------------------------------------------------------
bool gt_CritterisKilled_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Lyote") || (UnitGetType(EventUnit()) == "KarakMale") || (UnitGetType(EventUnit()) == "Anteplott") || (UnitGetType(EventUnit()) == "UrsadakFemale") || (UnitGetType(EventUnit()) == "GiantYeti")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetCustomValue(EventUnit(), 0) == 0.0)) {
        SoundPlayAtPoint(SoundLink("UI_ConsoleIn_Zerg", -1), PlayerGroupAll(), UnitGetPosition(EventUnit()), 0.0, 100.0, 0.0);
        UnitSetCustomValue(EventUnit(), 0, 1.0);
        gf_ConsumeCritter(EventUnit());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CritterisKilled_Init () {
    gt_CritterisKilled = TriggerCreate("gt_CritterisKilled_Func");
    TriggerEnable(gt_CritterisKilled, false);
    TriggerAddEventUnitDied(gt_CritterisKilled, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Morph to Swarm Queen Complete
//--------------------------------------------------------------------------------------------------
bool gt_MorphtoSwarmQueenComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "SwarmQueen"))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveGrowComplete, true, false);
    TriggerEnable(gt_DefeatLarvalQueenDies, false);
    TriggerEnable(gt_DefeatSwarmQueenDies, true);
    TriggerEnable(gt_SwarmQueenusesParasiticInvasion, true);
    TriggerEnable(gt_CritterisConsumed, true);
    TriggerEnable(gt_CritterisKilled, true);
    libSwaC_gf_SetProgressBarValueRange(0, gv_numberOfProtossRemaining);
    libSwaC_gf_ShowHideProgressBar(true);
    if ((libHots_gf_DifficultyValueInt2(1, 0, 0) == 1)) {
        libSwaC_gf_DisplayArmyButton(true);
    }
    else {
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, true);
    }
    gv_tHE_ONE_QUEEN = EventUnitProgressUnit();
    UnitSetPropertyFixed(gv_tHE_ONE_QUEEN, c_unitPropEnergyPercent, 100.0);
    UnitSetPropertyFixed(gv_tHE_ONE_QUEEN, c_unitPropLifeMax, gv_swarmQueenLife[2]);
    UnitSetPropertyFixed(gv_tHE_ONE_QUEEN, c_unitPropLifePercent, 100.0);
    UnitSetFacing(gv_tHE_ONE_QUEEN, 315.0, 1.0);
    libSwaC_gf_SetHeroPanelUnit(1, gv_tHE_ONE_QUEEN);
    libSCDH_gf_CreateHeroPing(gv_tHE_ONE_QUEEN, libSCDH_ge_HeroPingType_Ally);
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, 18.0, 25.0, UnitGetPosition(gv_tHE_ONE_QUEEN), 3.0);
    CameraSetData(PlayerGroupSingle(gv_pLAYER_01_USER), "SwarmQueen");
    TechTreeUnitHelp(gv_pLAYER_01_USER, "LarvalQueen", false);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("SwarmQueen", false, gv_pLAYER_01_USER);
    if ((libSwaC_gf_CampaignTechUnitIsEnabled("Zergling") == true)) {
        UISetButtonHighlighted(PlayerGroupSingle(gv_pLAYER_01_USER), AbilityCommand("SwarmQueenTrain", 0), true);
        libSwaC_gf_AddUnitTypeToUnitHelpPanel("Zergling", false, gv_pLAYER_01_USER);
    }
    else if ((libSwaC_gf_CampaignTechUnitIsEnabled("ZerglingA") == true)) {
        UISetButtonHighlighted(PlayerGroupSingle(gv_pLAYER_01_USER), AbilityCommand("SwarmQueenTrain", 2), true);
        libSwaC_gf_AddUnitTypeToUnitHelpPanel("HotSSwarmling", false, gv_pLAYER_01_USER);
    }
    else if ((libSwaC_gf_CampaignTechUnitIsEnabled("ZerglingB") == true)) {
        UISetButtonHighlighted(PlayerGroupSingle(gv_pLAYER_01_USER), AbilityCommand("SwarmQueenTrain", 1), true);
        libSwaC_gf_AddUnitTypeToUnitHelpPanel("HotSRaptor", false, gv_pLAYER_01_USER);
    }
    if ((libSwaC_gf_MissionStatus("ZChar3") == libSwaC_ge_MissionStatus_Completed)) {
        if ((libSwaC_gf_CampaignTechUnitIsEnabled("Baneling") == true)) {
            libSwaC_gf_AddUnitTypeToUnitHelpPanel("Baneling", false, gv_pLAYER_01_USER);
        }
        else if ((libSwaC_gf_CampaignTechUnitIsEnabled("BanelingA") == true)) {
            libSwaC_gf_AddUnitTypeToUnitHelpPanel("HotSSplitterlingBig", false, gv_pLAYER_01_USER);
        }
        else if ((libSwaC_gf_CampaignTechUnitIsEnabled("BanelingB") == true)) {
            libSwaC_gf_AddUnitTypeToUnitHelpPanel("HotSHunter", false, gv_pLAYER_01_USER);
        }
    }

    TriggerEnable(gt_ReminderGrowtoLargeQueen, true);
    TriggerEnable(gt_TurnoffGrowtoLargeQueenBlinky, true);
    TriggerExecute(gt_ObjectiveEscapeCreateHidden, true, false);
    TriggerExecute(gt_ObjectiveDestroyWarpDriveCreateHidden, true, false);
    TriggerExecute(gt_ObjectiveGainBiomassCompleteHideQ, true, false);
    TriggerExecute(gt_ObjectiveFindSafePlaceCompleteHideQ, true, false);
    TriggerExecute(gt_ObjectiveGrowCompleteHideQ, true, false);
    TriggerExecute(gt_ObjectiveDestroytheProtossCreateQ, true, false);
    TriggerExecute(gt_ObjectiveSwarmQueenSurvivalCreateQ, true, false);
    TriggerExecute(gt_TransmissionP1SwarmQueenMorphCompleteQ, true, true);
    libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/2BE39A32"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MorphtoSwarmQueenComplete_Init () {
    gt_MorphtoSwarmQueenComplete = TriggerCreate("gt_MorphtoSwarmQueenComplete_Func");
    TriggerAddEventUnitTrainProgress(gt_MorphtoSwarmQueenComplete, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reminder - Grow to Large Queen
//--------------------------------------------------------------------------------------------------
bool gt_ReminderGrowtoLargeQueen_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropCustom) >= 150))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("MorphToLargeSwarmQueen", 0), true);
    TriggerExecute(gt_TransmissionGrowtoLargeQueenQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReminderGrowtoLargeQueen_Init () {
    gt_ReminderGrowtoLargeQueen = TriggerCreate("gt_ReminderGrowtoLargeQueen_Func");
    TriggerEnable(gt_ReminderGrowtoLargeQueen, false);
    TriggerAddEventTimePeriodic(gt_ReminderGrowtoLargeQueen, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Turn off Grow to Large Queen Blinky
//--------------------------------------------------------------------------------------------------
bool gt_TurnoffGrowtoLargeQueenBlinky_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZExpedition03MusicEvent03_EvolveAgain", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepGen5", 0, gv_pLAYER_02_ZERG2, UnitGetPosition(gv_tHE_ONE_QUEEN));
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("MorphToLargeSwarmQueen", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TurnoffGrowtoLargeQueenBlinky_Init () {
    gt_TurnoffGrowtoLargeQueenBlinky = TriggerCreate("gt_TurnoffGrowtoLargeQueenBlinky_Func");
    TriggerEnable(gt_TurnoffGrowtoLargeQueenBlinky, false);
    TriggerAddEventUnitTrainProgress(gt_TurnoffGrowtoLargeQueenBlinky, UnitRefFromVariable("gv_tHE_ONE_QUEEN"), c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Grow to Large Queen Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionGrowtoLargeQueenQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition03|Line00063", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionGrowtoLargeQueenQ_Init () {
    gt_TransmissionGrowtoLargeQueenQ = TriggerCreate("gt_TransmissionGrowtoLargeQueenQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Morph to Large Swarm Queen Complete
//--------------------------------------------------------------------------------------------------
bool gt_MorphtoLargeSwarmQueenComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_tHE_ONE_QUEEN = EventUnit();
    UnitSetPropertyFixed(gv_tHE_ONE_QUEEN, c_unitPropEnergyPercent, 100.0);
    UnitSetPropertyFixed(gv_tHE_ONE_QUEEN, c_unitPropLifeMax, gv_swarmQueenLife[3]);
    UnitSetPropertyFixed(gv_tHE_ONE_QUEEN, c_unitPropLifePercent, 100.0);
    libSCDH_gf_CreateHeroPing(gv_tHE_ONE_QUEEN, libSCDH_ge_HeroPingType_Ally);
    while (!((gv_inCinematic == false))) {
        Wait(1.0, c_timeGame);
    }
    if ((gv_gameOver == true)) {
        return true;
    }

    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, 25.0, 30.0, UnitGetPosition(gv_tHE_ONE_QUEEN), 3.0);
    CameraSetData(PlayerGroupSingle(gv_pLAYER_01_USER), "SwarmQueenLarge");
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("SwarmQueenTrain", 3), true);
    TechTreeUnitHelp(gv_pLAYER_01_USER, "SwarmQueen", false);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("LargeSwarmQueen", false, gv_pLAYER_01_USER);
    if ((libSwaC_gf_CampaignTechUnitIsEnabled("Roach") == true)) {
        libSwaC_gf_AddUnitTypeToUnitHelpPanel("Roach", false, gv_pLAYER_01_USER);
    }
    else if ((libSwaC_gf_CampaignTechUnitIsEnabled("RoachA") == true)) {
        libSwaC_gf_AddUnitTypeToUnitHelpPanel("RoachVile", false, gv_pLAYER_01_USER);
    }
    else if ((libSwaC_gf_CampaignTechUnitIsEnabled("RoachB") == true)) {
        libSwaC_gf_AddUnitTypeToUnitHelpPanel("RoachCorpser", false, gv_pLAYER_01_USER);
    }
    TriggerEnable(gt_ReminderGrowtoHugeQueen, true);
    TriggerEnable(gt_TurnoffGrowtoHugeQueenBlinky, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MorphtoLargeSwarmQueenComplete_Init () {
    gt_MorphtoLargeSwarmQueenComplete = TriggerCreate("gt_MorphtoLargeSwarmQueenComplete_Func");
    TriggerAddEventUnitAbility(gt_MorphtoLargeSwarmQueenComplete, UnitRefFromVariable("gv_tHE_ONE_QUEEN"), AbilityCommand("MorphToLargeSwarmQueen", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reminder - Grow to Huge Queen
//--------------------------------------------------------------------------------------------------
bool gt_ReminderGrowtoHugeQueen_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropCustom) >= 150))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("MorphToHugeSwarmQueen", 0), true);
    TriggerExecute(gt_TransmissionGrowtoHugeQueenQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReminderGrowtoHugeQueen_Init () {
    gt_ReminderGrowtoHugeQueen = TriggerCreate("gt_ReminderGrowtoHugeQueen_Func");
    TriggerEnable(gt_ReminderGrowtoHugeQueen, false);
    TriggerAddEventTimePeriodic(gt_ReminderGrowtoHugeQueen, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Turn off Grow to Huge Queen Blinky
//--------------------------------------------------------------------------------------------------
bool gt_TurnoffGrowtoHugeQueenBlinky_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepGen5", 0, gv_pLAYER_02_ZERG2, UnitGetPosition(gv_tHE_ONE_QUEEN));
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("MorphToHugeSwarmQueen", 0), false);
    libSCDH_gf_CreateHeroPing(gv_tHE_ONE_QUEEN, libSCDH_ge_HeroPingType_Ally);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TurnoffGrowtoHugeQueenBlinky_Init () {
    gt_TurnoffGrowtoHugeQueenBlinky = TriggerCreate("gt_TurnoffGrowtoHugeQueenBlinky_Func");
    TriggerEnable(gt_TurnoffGrowtoHugeQueenBlinky, false);
    TriggerAddEventUnitTrainProgress(gt_TurnoffGrowtoHugeQueenBlinky, UnitRefFromVariable("gv_tHE_ONE_QUEEN"), c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Grow to Huge Queen Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionGrowtoHugeQueenQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition03|Line00074", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionGrowtoHugeQueenQ_Init () {
    gt_TransmissionGrowtoHugeQueenQ = TriggerCreate("gt_TransmissionGrowtoHugeQueenQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Morph to Huge Swarm Queen Complete
//--------------------------------------------------------------------------------------------------
bool gt_MorphtoHugeSwarmQueenComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_tHE_ONE_QUEEN = EventUnit();
    UnitSetPropertyFixed(gv_tHE_ONE_QUEEN, c_unitPropEnergyPercent, 100.0);
    UnitSetPropertyFixed(gv_tHE_ONE_QUEEN, c_unitPropLifeMax, gv_swarmQueenLife[4]);
    UnitSetPropertyFixed(gv_tHE_ONE_QUEEN, c_unitPropLifePercent, 100.0);
    libSCDH_gf_CreateHeroPing(gv_tHE_ONE_QUEEN, libSCDH_ge_HeroPingType_Ally);
    CameraSetData(PlayerGroupSingle(gv_pLAYER_01_USER), "SwarmQueenHuge");
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, 30.0, 34.0, UnitGetPosition(gv_tHE_ONE_QUEEN), 3.0);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("SwarmQueenTrain", 6), true);
    TechTreeUnitHelp(gv_pLAYER_01_USER, "LargeSwarmQueen", false);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("HugeSwarmQueen", false, gv_pLAYER_01_USER);
    if ((libSwaC_gf_CampaignTechUnitIsEnabled("Hydralisk") == true)) {
        libSwaC_gf_AddUnitTypeToUnitHelpPanel("Hydralisk", false, gv_pLAYER_01_USER);
    }
    else if ((libSwaC_gf_CampaignTechUnitIsEnabled("HydraliskA") == true)) {
        libSwaC_gf_AddUnitTypeToUnitHelpPanel("HydraliskImpaler", false, gv_pLAYER_01_USER);
        libSwaC_gf_AddUnitTypeToUnitHelpPanel("Impaler", false, gv_pLAYER_01_USER);
    }
    else if ((libSwaC_gf_CampaignTechUnitIsEnabled("HydraliskB") == true)) {
        libSwaC_gf_AddUnitTypeToUnitHelpPanel("HydraliskLurker", false, gv_pLAYER_01_USER);
        libSwaC_gf_AddUnitTypeToUnitHelpPanel("Lurker", false, gv_pLAYER_01_USER);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MorphtoHugeSwarmQueenComplete_Init () {
    gt_MorphtoHugeSwarmQueenComplete = TriggerCreate("gt_MorphtoHugeSwarmQueenComplete_Func");
    TriggerAddEventUnitAbility(gt_MorphtoHugeSwarmQueenComplete, null, AbilityCommand("MorphToHugeSwarmQueen", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Larval Queen Enters Steam Vent Area 1
//--------------------------------------------------------------------------------------------------
bool gt_LarvalQueenEntersSteamVentArea1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "Hidden", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LarvalQueenEntersSteamVentArea1_Init () {
    gt_LarvalQueenEntersSteamVentArea1 = TriggerCreate("gt_LarvalQueenEntersSteamVentArea1_Func");
    TriggerAddEventUnitRegion(gt_LarvalQueenEntersSteamVentArea1, UnitRefFromVariable("gv_tHE_ONE_QUEEN"), RegionFromId(3), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Larval Queen Leaves Steam Vent Area 1
//--------------------------------------------------------------------------------------------------
bool gt_LarvalQueenLeavesSteamVentArea1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "Hidden", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LarvalQueenLeavesSteamVentArea1_Init () {
    gt_LarvalQueenLeavesSteamVentArea1 = TriggerCreate("gt_LarvalQueenLeavesSteamVentArea1_Func");
    TriggerAddEventUnitRegion(gt_LarvalQueenLeavesSteamVentArea1, UnitRefFromVariable("gv_tHE_ONE_QUEEN"), RegionFromId(3), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Larval Queen Enters Steam Vent Area 2
//--------------------------------------------------------------------------------------------------
bool gt_LarvalQueenEntersSteamVentArea2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "Hidden", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LarvalQueenEntersSteamVentArea2_Init () {
    gt_LarvalQueenEntersSteamVentArea2 = TriggerCreate("gt_LarvalQueenEntersSteamVentArea2_Func");
    TriggerAddEventUnitRegion(gt_LarvalQueenEntersSteamVentArea2, UnitRefFromVariable("gv_tHE_ONE_QUEEN"), RegionFromId(10), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Larval Queen Leaves Steam Vent Area 2
//--------------------------------------------------------------------------------------------------
bool gt_LarvalQueenLeavesSteamVentArea2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "Hidden", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LarvalQueenLeavesSteamVentArea2_Init () {
    gt_LarvalQueenLeavesSteamVentArea2 = TriggerCreate("gt_LarvalQueenLeavesSteamVentArea2_Func");
    TriggerAddEventUnitRegion(gt_LarvalQueenLeavesSteamVentArea2, UnitRefFromVariable("gv_tHE_ONE_QUEEN"), RegionFromId(10), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Larval Queen Enters Steam Vent Area 3
//--------------------------------------------------------------------------------------------------
bool gt_LarvalQueenEntersSteamVentArea3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "Hidden", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LarvalQueenEntersSteamVentArea3_Init () {
    gt_LarvalQueenEntersSteamVentArea3 = TriggerCreate("gt_LarvalQueenEntersSteamVentArea3_Func");
    TriggerAddEventUnitRegion(gt_LarvalQueenEntersSteamVentArea3, UnitRefFromVariable("gv_tHE_ONE_QUEEN"), RegionFromId(11), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Larval Queen Leaves Steam Vent Area 3
//--------------------------------------------------------------------------------------------------
bool gt_LarvalQueenLeavesSteamVentArea3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "Hidden", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LarvalQueenLeavesSteamVentArea3_Init () {
    gt_LarvalQueenLeavesSteamVentArea3 = TriggerCreate("gt_LarvalQueenLeavesSteamVentArea3_Func");
    TriggerAddEventUnitRegion(gt_LarvalQueenLeavesSteamVentArea3, UnitRefFromVariable("gv_tHE_ONE_QUEEN"), RegionFromId(11), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - P1 - Larva Awakens Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionP1LarvaAwakensQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Expedition03|Line00008", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionP1LarvaAwakensQ_Init () {
    gt_TransmissionP1LarvaAwakensQ = TriggerCreate("gt_TransmissionP1LarvaAwakensQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Larval Queen Reveal First Room
//--------------------------------------------------------------------------------------------------
bool gt_LarvalQueenRevealFirstRoom_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(2), 8.0, false);
    Wait(0.5, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(2), "TerrainObjectStarshipFloraPodDoodadB", c_animNameDefault, "Stand Work End", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LarvalQueenRevealFirstRoom_Init () {
    gt_LarvalQueenRevealFirstRoom = TriggerCreate("gt_LarvalQueenRevealFirstRoom_Func");
    TriggerAddEventUnitRegion(gt_LarvalQueenRevealFirstRoom, UnitRefFromVariable("gv_tHE_ONE_QUEEN"), RegionFromId(2), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Larval Queen Reveal Second Room
//--------------------------------------------------------------------------------------------------
bool gt_LarvalQueenRevealSecondRoom_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(66), 8.0, false);
    TriggerExecute(gt_TransmissionP1VastShipQ, true, false);
    Wait(2.0, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(66), "TerrainObjectStarshipFloraPodDoodadC", c_animNameDefault, "Stand Work End", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LarvalQueenRevealSecondRoom_Init () {
    gt_LarvalQueenRevealSecondRoom = TriggerCreate("gt_LarvalQueenRevealSecondRoom_Func");
    TriggerAddEventUnitRegion(gt_LarvalQueenRevealSecondRoom, UnitRefFromVariable("gv_tHE_ONE_QUEEN"), RegionFromId(66), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - P1 - Vast Ship Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionP1VastShipQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition03|Line00054", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionP1VastShipQ_Init () {
    gt_TransmissionP1VastShipQ = TriggerCreate("gt_TransmissionP1VastShipQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Learn Parasitic Invasion
//--------------------------------------------------------------------------------------------------
bool gt_LearnParasiticInvasion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(1), 10.0, true);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(UnitFromId(16)), 2.0, Color(0.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/242EDC7B"), null, UnitGetPosition(UnitFromId(16)));
    if ((gv_parasiteUsed == false)) {
        UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("ParasiticInvasion", 0), true);
    }

    TriggerExecute(gt_TransmissionP1LearnParasiteInvasionQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LearnParasiticInvasion_Init () {
    gt_LearnParasiticInvasion = TriggerCreate("gt_LearnParasiticInvasion_Func");
    TriggerAddEventUnitRegion(gt_LearnParasiticInvasion, UnitRefFromVariable("gv_tHE_ONE_QUEEN"), RegionFromId(1), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - P1 - Learn Parasite Invasion Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionP1LearnParasiteInvasionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libNtve_gf_ShareVisionofUnit(UnitFromId(106), true, gv_pLAYER_01_USER);
    if ((gv_parasiteUsed == false)) {
        libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(libSwaC_ge_CampaginReticleType_ZergMainObjective, libSwaC_ge_CampaginReticleSize_Small, StringExternal("Param/Value/F989A004"), UnitFromId(16), "Ref_Origin");
        libHots_gf_StoreActorForUnit(UnitFromId(16), 1, libNtve_gf_ActorLastCreated());
        libHots_gf_StoreTextTagForUnit(UnitFromId(16), 1, TextTagLastCreated());
        CameraPan(gv_pLAYER_01_USER, UnitGetPosition(UnitFromId(16)), 2.0, -1, 10, false);
        libNtve_gf_MakeUnitUncommandable(gv_tHE_ONE_QUEEN, true);
        UnitIssueOrder(gv_tHE_ONE_QUEEN, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1095)), c_orderQueueReplace);
        UnitIssueOrder(gv_tHE_ONE_QUEEN, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
        while (!((libNtve_gf_UnitInRegion(gv_tHE_ONE_QUEEN, RegionCircle(PointFromId(1095), 1.0)) == true))) {
            Wait(1.0, c_timeGame);
        }
        Wait(1.0, c_timeGame);
        libNtve_gf_MakeUnitUncommandable(gv_tHE_ONE_QUEEN, false);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition03|Line00001", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        gv_currentTransmission = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionP1LearnParasiteInvasionQ_Init () {
    gt_TransmissionP1LearnParasiteInvasionQ = TriggerCreate("gt_TransmissionP1LearnParasiteInvasionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Turn off Parasite Blinky
//--------------------------------------------------------------------------------------------------
bool gt_TurnoffParasiteBlinky_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_parasiteUsed = true;
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("ParasiticInvasion", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TurnoffParasiteBlinky_Init () {
    gt_TurnoffParasiteBlinky = TriggerCreate("gt_TurnoffParasiteBlinky_Func");
    TriggerAddEventUnitAbility(gt_TurnoffParasiteBlinky, UnitRefFromVariable("gv_tHE_ONE_QUEEN"), AbilityCommand("ParasiticInvasion", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Larval Queen Parasites First Animal
//--------------------------------------------------------------------------------------------------
bool gt_LarvalQueenParasitesFirstAnimal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((EventUnitTargetUnit() == UnitFromId(16)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitSelect(EventUnitTargetUnit(), gv_pLAYER_01_USER, true);
    libSCDH_gf_CreateHeroPing(EventUnitTargetUnit(), libSCDH_ge_HeroPingType_Ally);
    TransmissionClear(gv_currentTransmission);
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(EventUnitTargetUnit(), 1));
    TextTagDestroy(libHots_gf_TextTagForUnit(EventUnitTargetUnit(), 1));
    UnitBehaviorAdd(EventUnitTargetUnit(), "Harmless", EventUnit(), 1);
    UnitIssueOrder(UnitFromId(106), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(173)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, 18.0, 25.0, UnitGetPosition(gv_tHE_ONE_QUEEN), 3.0);
    CameraSetData(PlayerGroupSingle(gv_pLAYER_01_USER), "SwarmQueen");
    TriggerExecute(gt_TransmissionP1LearnConsumeQ, true, false);
    Wait(5.0, c_timeGame);
    UnitIssueOrder(UnitFromId(106), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(174)), c_orderQueueAddToEnd);
    Wait(8.0, c_timeGame);
    UnitIssueOrder(UnitFromId(106), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(177)), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LarvalQueenParasitesFirstAnimal_Init () {
    gt_LarvalQueenParasitesFirstAnimal = TriggerCreate("gt_LarvalQueenParasitesFirstAnimal_Func");
    TriggerAddEventUnitAbility(gt_LarvalQueenParasitesFirstAnimal, UnitRefFromVariable("gv_tHE_ONE_QUEEN"), AbilityCommand("ParasiticInvasion", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - P1 - Learn Consume Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionP1LearnConsumeQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(UnitFromId(106), "zMission_Expedition03|Line00002", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    Wait(5.0, c_timeGame);
    UnitFlashSelection(UnitFromId(16), 3.0);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("Consume", 0), true);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("Consume", 0), true);
    UnitSelect(UnitFromId(16), gv_pLAYER_01_USER, true);
    UnitAbilityShow(UnitFromId(16), "Consume", true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition03|Line00003", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_currentTransmission = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionP1LearnConsumeQ_Init () {
    gt_TransmissionP1LearnConsumeQ = TriggerCreate("gt_TransmissionP1LearnConsumeQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Lyote is Consumed
//--------------------------------------------------------------------------------------------------
bool gt_FirstLyoteisConsumed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, 25.0, 18.0, UnitGetPosition(gv_tHE_ONE_QUEEN), 3.0);
    CameraSetData(PlayerGroupSingle(gv_pLAYER_01_USER), "LarvaCamera");
    gf_ConsumeCritter(UnitFromId(16));
    Wait(1.5, c_timeGame);
    libSwaC_gf_SetMissionObjectiveProgress2("ZExpedition03Objective03", PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropCustom), true, null, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstLyoteisConsumed_Init () {
    gt_FirstLyoteisConsumed = TriggerCreate("gt_FirstLyoteisConsumed_Func");
    TriggerAddEventUnitAbility(gt_FirstLyoteisConsumed, UnitRefFromUnit(UnitFromId(16)), AbilityCommand("Consume", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Turn off Consume Blinky - Lyote
//--------------------------------------------------------------------------------------------------
bool gt_TurnoffConsumeBlinkyLyote_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_LarvalQueenSeesSentry, true);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("Consume", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TurnoffConsumeBlinkyLyote_Init () {
    gt_TurnoffConsumeBlinkyLyote = TriggerCreate("gt_TurnoffConsumeBlinkyLyote_Func");
    TriggerAddEventButtonPressed(gt_TurnoffConsumeBlinkyLyote, c_playerAny, "Consume");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Larval Queen Sees Sentry
//--------------------------------------------------------------------------------------------------
bool gt_LarvalQueenSeesSentry_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_LarvalQueenEntersFirstSteam, true);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(4), 10.0, true);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(3), 15.0, true);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(10), 0.1, true);
    libSwaC_gf_CreateReticleEffectAndTextTagAtPoint(libSwaC_ge_CampaginReticleType_ZergMainObjective, libSwaC_ge_CampaginReticleSize_Small, null, RegionGetCenter(RegionFromId(3)));
    gv_helperModel_SteamVent = libNtve_gf_ActorLastCreated();
    libNtve_gf_ShareVisionofUnit(UnitFromId(52), true, gv_pLAYER_01_USER);
    CameraPan(gv_pLAYER_01_USER, PointFromId(1207), 2.0, -1, 10, false);
    TriggerExecute(gt_TransmissionP1SeeSentryQ, true, false);
    libNtve_gf_MakeUnitUncommandable(gv_tHE_ONE_QUEEN, true);
    UnitIssueOrder(gv_tHE_ONE_QUEEN, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1096)), c_orderQueueReplace);
    UnitIssueOrder(gv_tHE_ONE_QUEEN, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    while (!((libNtve_gf_UnitInRegion(gv_tHE_ONE_QUEEN, RegionCircle(PointFromId(1096), 1.0)) == true))) {
        Wait(0.5, c_timeGame);
    }
    Wait(0.5, c_timeGame);
    libNtve_gf_MakeUnitUncommandable(gv_tHE_ONE_QUEEN, false);
    Wait(5.0, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(80), "TerrainObjectStarshipFloraPodDoodadC", c_animNameDefault, "Stand Work Start", c_animFlagNonLooping, c_animTimeDefault);
    Wait(3.0, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(80), "TerrainObjectStarshipFloraPodDoodadC", c_animNameDefault, "Stand Work", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LarvalQueenSeesSentry_Init () {
    gt_LarvalQueenSeesSentry = TriggerCreate("gt_LarvalQueenSeesSentry_Func");
    TriggerEnable(gt_LarvalQueenSeesSentry, false);
    TriggerAddEventUnitRegion(gt_LarvalQueenSeesSentry, UnitRefFromVariable("gv_tHE_ONE_QUEEN"), RegionFromId(4), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - P1 - See Sentry Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionP1SeeSentryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TransmissionClear(gv_currentTransmission);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition03|Line00005", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionP1SeeSentryQ_Init () {
    gt_TransmissionP1SeeSentryQ = TriggerCreate("gt_TransmissionP1SeeSentryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Larval Queen Enters First Steam
//--------------------------------------------------------------------------------------------------
bool gt_LarvalQueenEntersFirstSteam_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(gv_tHE_ONE_QUEEN, RegionFromId(3)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(gv_helperModel_SteamVent);
    UnitSetPropertyFixed(UnitFromId(52), c_unitPropMovementSpeed, 2.0);
    Wait(1.5, c_timeGame);
    TriggerExecute(gt_SentryPatrolPath, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LarvalQueenEntersFirstSteam_Init () {
    gt_LarvalQueenEntersFirstSteam = TriggerCreate("gt_LarvalQueenEntersFirstSteam_Func");
    TriggerEnable(gt_LarvalQueenEntersFirstSteam, false);
    TriggerAddEventTimePeriodic(gt_LarvalQueenEntersFirstSteam, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sentry Patrol Path
//--------------------------------------------------------------------------------------------------
bool gt_SentryPatrolPath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_patrollingSentry;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_patrollingSentry = UnitFromId(52);
    UnitIssueOrder(lv_patrollingSentry, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(139)), c_orderQueueAddToEnd);
    Wait(18.0, c_timeAI);
    UnitIssueOrder(lv_patrollingSentry, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(141)), c_orderQueueAddToEnd);
    Wait(15.0, c_timeAI);
    TriggerExecute(gt_SentryPatrolPath, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SentryPatrolPath_Init () {
    gt_SentryPatrolPath = TriggerCreate("gt_SentryPatrolPath_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sentry Sees Creep
//--------------------------------------------------------------------------------------------------
bool gt_SentrySeesCreep_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionP1SentrySeesCreepQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SentrySeesCreep_Init () {
    gt_SentrySeesCreep = TriggerCreate("gt_SentrySeesCreep_Func");
    TriggerAddEventUnitRegion(gt_SentrySeesCreep, UnitRefFromUnit(UnitFromId(52)), RegionFromId(62), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - P1 - Sentry Sees Creep Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionP1SentrySeesCreepQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((UnitIsAlive(UnitFromId(52)) == true)) {
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libSwaC_gf_SendTransmissionCampaign(UnitFromId(52), "zMission_Expedition03|Line00006", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionP1SentrySeesCreepQ_Init () {
    gt_TransmissionP1SentrySeesCreepQ = TriggerCreate("gt_TransmissionP1SentrySeesCreepQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sentry Near Larva in Steam Q
//--------------------------------------------------------------------------------------------------
bool gt_SentryNearLarvainSteamQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(gv_tHE_ONE_QUEEN, RegionFromId(10)) == true))) {
            return false;
        }

        if (!((DistanceBetweenPoints(UnitGetPosition(gv_tHE_ONE_QUEEN), UnitGetPosition(UnitFromId(52))) <= 3.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((UnitIsAlive(UnitFromId(52)) == true)) {
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition03|Line00105", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SendTransmissionCampaign(UnitFromId(52), "zMission_Expedition03|Line00106", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SentryNearLarvainSteamQ_Init () {
    gt_SentryNearLarvainSteamQ = TriggerCreate("gt_SentryNearLarvainSteamQ_Func");
    TriggerAddEventTimePeriodic(gt_SentryNearLarvainSteamQ, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Larval Queen Sees Giant Ursadon
//--------------------------------------------------------------------------------------------------
bool gt_LarvalQueenSeesGiantUrsadon_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitSetState(gv_tHE_ONE_URSADON, c_unitStateTargetable, true);
    libNtve_gf_ShareVisionofUnit(UnitFromId(105), true, gv_pLAYER_01_USER);
    libNtve_gf_ShareVisionofUnit(gv_tHE_ONE_URSADON, true, gv_pLAYER_01_USER);
    libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(libSwaC_ge_CampaginReticleType_ZergMainObjective, libSwaC_ge_CampaginReticleSize_Medium, null, gv_tHE_ONE_URSADON, "Ref_Origin");
    libHots_gf_StoreActorForUnit(gv_tHE_ONE_URSADON, 1, libNtve_gf_ActorLastCreated());
    TriggerExecute(gt_SecondZealotPatrolPath, true, false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(11), 10.0, true);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(6), 10.0, true);
    TriggerExecute(gt_TransmissionP1GiantUrsadonTubeQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LarvalQueenSeesGiantUrsadon_Init () {
    gt_LarvalQueenSeesGiantUrsadon = TriggerCreate("gt_LarvalQueenSeesGiantUrsadon_Func");
    TriggerAddEventUnitRegion(gt_LarvalQueenSeesGiantUrsadon, UnitRefFromVariable("gv_tHE_ONE_QUEEN"), RegionFromId(6), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - P1 - Giant Ursadon Tube Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionP1GiantUrsadonTubeQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition03|Line00008", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionP1GiantUrsadonTubeQ_Init () {
    gt_TransmissionP1GiantUrsadonTubeQ = TriggerCreate("gt_TransmissionP1GiantUrsadonTubeQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Larval Queen Parasites Giant Ursadon
//--------------------------------------------------------------------------------------------------
bool gt_LarvalQueenParasitesGiantUrsadon_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_sentry01;
    unit lv_zealot01;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((EventUnitTargetUnit() == UnitFromId(192)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSCDH_gf_CreateHeroPing(EventUnitTargetUnit(), libSCDH_ge_HeroPingType_Ally);
    TriggerEnable(gt_SentryNearLarvainSteamQ, false);
    lv_sentry01 = UnitFromId(52);
    lv_zealot01 = UnitFromId(106);
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(gv_tHE_ONE_URSADON, 1));
    TriggerEnable(gt_SentryPatrolPath, false);
    TriggerStop(gt_SentryPatrolPath);
    libNtve_gf_PauseUnit(gv_tHE_ONE_URSADON, true);
    libNtve_gf_MakeUnitUncommandable(gv_tHE_ONE_URSADON, true);
    libNtve_gf_MakeUnitInvulnerable(gv_tHE_ONE_URSADON, true);
    UnitIssueOrder(gv_tHE_ONE_URSADON, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_tHE_ONE_URSADON), c_animNameDefault, "Spell", 0, c_animTimeDefault);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(105), 12.0, false);
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, 18.0, 25.0, UnitGetPosition(gv_tHE_ONE_URSADON), 3.0);
    CameraSetData(PlayerGroupSingle(gv_pLAYER_01_USER), "SwarmQueen");
    gf_KillLargeHoldingPen(UnitGetPosition(gv_tHE_ONE_URSADON));
    Wait(3.0, c_timeGame);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_tHE_ONE_URSADON), c_animNameDefault);
    libNtve_gf_PauseUnit(gv_tHE_ONE_URSADON, false);
    libNtve_gf_MakeUnitUncommandable(gv_tHE_ONE_URSADON, false);
    libNtve_gf_MakeUnitInvulnerable(gv_tHE_ONE_URSADON, false);
    UnitIssueOrder(gv_tHE_ONE_URSADON, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitSelect(EventUnitTargetUnit(), gv_pLAYER_01_USER, true);
    Wait(1.0, c_timeGame);
    TriggerExecute(gt_TransmissionP1ZergDetectedQ, true, false);
    AISetUnitScriptControlled(lv_sentry01, false);
    AIAttackWaveUseUnit(gv_pLAYER_02_ZERG, lv_sentry01);
    AISetUnitScriptControlled(lv_zealot01, false);
    AIAttackWaveUseUnit(gv_pLAYER_02_ZERG, lv_zealot01);
    AIAttackWaveSetTargetUnitGroup(gv_pLAYER_02_ZERG, UnitGroup(null, gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    AIAttackWaveSend(gv_pLAYER_02_ZERG, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LarvalQueenParasitesGiantUrsadon_Init () {
    gt_LarvalQueenParasitesGiantUrsadon = TriggerCreate("gt_LarvalQueenParasitesGiantUrsadon_Func");
    TriggerAddEventUnitAbility(gt_LarvalQueenParasitesGiantUrsadon, UnitRefFromVariable("gv_tHE_ONE_QUEEN"), AbilityCommand("ParasiticInvasion", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Larval Queen Enters Vent Defender Room
//--------------------------------------------------------------------------------------------------
bool gt_LarvalQueenEntersVentDefenderRoom_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(7), 10.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LarvalQueenEntersVentDefenderRoom_Init () {
    gt_LarvalQueenEntersVentDefenderRoom = TriggerCreate("gt_LarvalQueenEntersVentDefenderRoom_Func");
    TriggerAddEventUnitRegion(gt_LarvalQueenEntersVentDefenderRoom, UnitRefFromVariable("gv_tHE_ONE_QUEEN"), RegionFromId(7), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Second Zealot Patrol Path
//--------------------------------------------------------------------------------------------------
bool gt_SecondZealotPatrolPath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_patrollingZealot;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_patrollingZealot = UnitFromId(25);
    UnitSetPropertyFixed(lv_patrollingZealot, c_unitPropMovementSpeed, 2.0);
    UnitIssueOrder(lv_patrollingZealot, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(149)), c_orderQueueAddToEnd);
    Wait(15.0, c_timeAI);
    UnitIssueOrder(lv_patrollingZealot, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(150)), c_orderQueueAddToEnd);
    Wait(15.0, c_timeAI);
    UnitIssueOrder(lv_patrollingZealot, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(149)), c_orderQueueAddToEnd);
    if ((UnitIsAlive(lv_patrollingZealot) == true)) {
        TriggerExecute(gt_SecondZealotPatrolPath, true, false);
    }
    else {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SecondZealotPatrolPath_Init () {
    gt_SecondZealotPatrolPath = TriggerCreate("gt_SecondZealotPatrolPath_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - P1 - Zerg Detected Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionP1ZergDetectedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(UnitFromId(254), "zMission_Expedition03|Line00009", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(1.0, c_timeGame);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition03|Line00010", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition03|Line00043", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionP1ZergDetectedQ_Init () {
    gt_TransmissionP1ZergDetectedQ = TriggerCreate("gt_TransmissionP1ZergDetectedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Destroyed in Vent Defender Room
//--------------------------------------------------------------------------------------------------
bool gt_ProtossDestroyedinVentDefenderRoom_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(gv_part1_ProtossUnitGroup, c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitAbilityShow(gv_tHE_ONE_URSADON, "Consume", true);
    libSwaC_gf_CreateReticleEffectAndTextTagAtPoint(libSwaC_ge_CampaginReticleType_ZergMainObjective, libSwaC_ge_CampaginReticleSize_Small, null, PointFromId(522));
    gv_helperModel_VentTunnel = libNtve_gf_ActorLastCreated();
    TriggerExecute(gt_TransmissionP1EncounterFirstVentQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossDestroyedinVentDefenderRoom_Init () {
    gt_ProtossDestroyedinVentDefenderRoom = TriggerCreate("gt_ProtossDestroyedinVentDefenderRoom_Func");
    TriggerAddEventUnitDied(gt_ProtossDestroyedinVentDefenderRoom, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - P1 - Encounter First Vent Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionP1EncounterFirstVentQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition03|Line00055", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionP1EncounterFirstVentQ_Init () {
    gt_TransmissionP1EncounterFirstVentQ = TriggerCreate("gt_TransmissionP1EncounterFirstVentQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ursadon Cannot Enter
//--------------------------------------------------------------------------------------------------
bool gt_UrsadonCannotEnter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionP1UrsadonWontFitQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UrsadonCannotEnter_Init () {
    gt_UrsadonCannotEnter = TriggerCreate("gt_UrsadonCannotEnter_Func");
    TriggerAddEventUnitRegion(gt_UrsadonCannotEnter, UnitRefFromVariable("gv_tHE_ONE_URSADON"), RegionFromId(9), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - P1 - Ursadon Won't Fit Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionP1UrsadonWontFitQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((UnitIsAlive(gv_tHE_ONE_URSADON) == true)) {
        UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("Consume", 0), true);
        TriggerEnable(gt_TurnoffConsumeBlinkyUrsadon, false);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition03|Line00101", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionP1UrsadonWontFitQ_Init () {
    gt_TransmissionP1UrsadonWontFitQ = TriggerCreate("gt_TransmissionP1UrsadonWontFitQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Turn off Consume Blinky - Ursadon
//--------------------------------------------------------------------------------------------------
bool gt_TurnoffConsumeBlinkyUrsadon_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_LarvalQueenSeesSentry, true);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("Consume", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TurnoffConsumeBlinkyUrsadon_Init () {
    gt_TurnoffConsumeBlinkyUrsadon = TriggerCreate("gt_TurnoffConsumeBlinkyUrsadon_Func");
    TriggerEnable(gt_TurnoffConsumeBlinkyUrsadon, false);
    TriggerAddEventButtonPressed(gt_TurnoffConsumeBlinkyUrsadon, c_playerAny, "Consume");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ursadon is Consumed - Reset Camera
//--------------------------------------------------------------------------------------------------
bool gt_UrsadonisConsumedResetCamera_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, 25.0, 18.0, UnitGetPosition(gv_tHE_ONE_QUEEN), 3.0);
    CameraSetData(PlayerGroupSingle(gv_pLAYER_01_USER), "LarvaCamera");
    UnitRemove(UnitFromId(294));
    gf_ConsumeCritter(gv_tHE_ONE_URSADON);
    Wait(1.5, c_timeGame);
    libSwaC_gf_SetMissionObjectiveProgress2("ZExpedition03Objective03", PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropCustom), true, null, true);
    if ((PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropCustom) == 100)) {
        TriggerExecute(gt_ObjectiveGainBiomassComplete, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UrsadonisConsumedResetCamera_Init () {
    gt_UrsadonisConsumedResetCamera = TriggerCreate("gt_UrsadonisConsumedResetCamera_Func");
    TriggerAddEventUnitAbility(gt_UrsadonisConsumedResetCamera, UnitRefFromVariable("gv_tHE_ONE_URSADON"), AbilityCommand("Consume", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Vent Helper Callout
//--------------------------------------------------------------------------------------------------
bool gt_RemoveVentHelperCallout_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(gv_helperModel_VentTunnel);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveVentHelperCallout_Init () {
    gt_RemoveVentHelperCallout = TriggerCreate("gt_RemoveVentHelperCallout_Func");
    TriggerAddEventUnitRegion(gt_RemoveVentHelperCallout, UnitRefFromVariable("gv_tHE_ONE_QUEEN"), RegionFromId(51), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Larval Queen Enters Safe Place Q
//--------------------------------------------------------------------------------------------------
bool gt_LarvalQueenEntersSafePlaceQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathingBlocker2x2Diagonal", c_unitCreateIgnorePlacement, 0, PointFromId(821));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathingBlocker4x4Diagonal", c_unitCreateIgnorePlacement, 0, PointFromId(1218));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathingBlocker4x4Diagonal", c_unitCreateIgnorePlacement, 0, PointFromId(1219));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathingBlocker4x4Diagonal", c_unitCreateIgnorePlacement, 0, PointFromId(1220));
    PingDestroy(gv_safePlacePing);
    VisRevealerDestroy(gv_beaconRevealer);
    UnitKill(UnitFromId(179));
    TriggerExecute(gt_ObjectiveFindSafePlaceComplete, true, true);
    TriggerExecute(gt_TransmissionP1MorphtoSwarmQueenQ, true, true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("MorphToSwarmQueen", 0), true);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("MorphToSwarmQueen", 0), true);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveGrowCreate, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LarvalQueenEntersSafePlaceQ_Init () {
    gt_LarvalQueenEntersSafePlaceQ = TriggerCreate("gt_LarvalQueenEntersSafePlaceQ_Func");
    TriggerAddEventUnitRegion(gt_LarvalQueenEntersSafePlaceQ, UnitRefFromVariable("gv_tHE_ONE_QUEEN"), RegionFromId(8), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Safe Place Room Reveal
//--------------------------------------------------------------------------------------------------
bool gt_SafePlaceRoomReveal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(25), 6.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SafePlaceRoomReveal_Init () {
    gt_SafePlaceRoomReveal = TriggerCreate("gt_SafePlaceRoomReveal_Func");
    TriggerAddEventUnitRegion(gt_SafePlaceRoomReveal, UnitRefFromVariable("gv_tHE_ONE_QUEEN"), RegionFromId(25), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - P1 - Morph to Swarm Queen Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionP1MorphtoSwarmQueenQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition03|Line00014", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionP1MorphtoSwarmQueenQ_Init () {
    gt_TransmissionP1MorphtoSwarmQueenQ = TriggerCreate("gt_TransmissionP1MorphtoSwarmQueenQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Turn off Morph to Swarm Queen Blinky
//--------------------------------------------------------------------------------------------------
bool gt_TurnoffMorphtoSwarmQueenBlinky_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZExpedition03MusicEvent01_EvolveUnit", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    Wait(0.1, c_timeGame);
    TriggerExecute(gt_ReenableSentryTech, true, false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepGen5", 0, gv_pLAYER_02_ZERG2, UnitGetPosition(gv_tHE_ONE_QUEEN));
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("MorphToSwarmQueen", 0), false);
    libSCDH_gf_CreateHeroPing(gv_tHE_ONE_QUEEN, libSCDH_ge_HeroPingType_Ally);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TurnoffMorphtoSwarmQueenBlinky_Init () {
    gt_TurnoffMorphtoSwarmQueenBlinky = TriggerCreate("gt_TurnoffMorphtoSwarmQueenBlinky_Func");
    TriggerAddEventUnitTrainProgress(gt_TurnoffMorphtoSwarmQueenBlinky, UnitRefFromVariable("gv_tHE_ONE_QUEEN"), c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Re-enable Sentry Tech
//--------------------------------------------------------------------------------------------------
bool gt_ReenableSentryTech_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoC6B6C014_g;
    int autoC6B6C014_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoC6B6C014_g = gv_protossPlayers;
    autoC6B6C014_var = -1;
    while (true) {
        autoC6B6C014_var = PlayerGroupNextPlayer(autoC6B6C014_g, autoC6B6C014_var);
        if (autoC6B6C014_var < 0) { break; }
        TechTreeAbilityAllow(autoC6B6C014_var, AbilityCommand("GuardianShield", 0), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReenableSentryTech_Init () {
    gt_ReenableSentryTech = TriggerCreate("gt_ReenableSentryTech_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - P1 - Swarm Queen Morph Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionP1SwarmQueenMorphCompleteQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition03|Line00016", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition03|Line00004", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_tHE_ONE_QUEEN, "zMission_Expedition03|Line00017", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionP1SwarmQueenMorphCompleteQ_Init () {
    gt_TransmissionP1SwarmQueenMorphCompleteQ = TriggerCreate("gt_TransmissionP1SwarmQueenMorphCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Turn off Spawn Units Blinky
//--------------------------------------------------------------------------------------------------
bool gt_TurnoffSpawnUnitsBlinky_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "SwarmQueenEgg"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UISetButtonHighlighted(PlayerGroupSingle(gv_pLAYER_01_USER), AbilityCommand("SwarmQueenTrain", 0), false);
    UISetButtonHighlighted(PlayerGroupSingle(gv_pLAYER_01_USER), AbilityCommand("SwarmQueenTrain", 2), false);
    UISetButtonHighlighted(PlayerGroupSingle(gv_pLAYER_01_USER), AbilityCommand("SwarmQueenTrain", 1), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TurnoffSpawnUnitsBlinky_Init () {
    gt_TurnoffSpawnUnitsBlinky = TriggerCreate("gt_TurnoffSpawnUnitsBlinky_Func");
    TriggerAddEventUnitTrainProgress(gt_TurnoffSpawnUnitsBlinky, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Resource Chamber Door Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_ResourceChamberDoorDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitRemove(UnitFromId(934));
    UnitRemove(UnitFromId(885));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResourceChamberDoorDestroyed_Init () {
    gt_ResourceChamberDoorDestroyed = TriggerCreate("gt_ResourceChamberDoorDestroyed_Func");
    TriggerAddEventUnitDied(gt_ResourceChamberDoorDestroyed, UnitRefFromUnit(UnitFromId(103)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Swarm Queen Enters Resource Chamber
//--------------------------------------------------------------------------------------------------
bool gt_SwarmQueenEntersResourceChamber_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(12), 10.0, true);
    TriggerEnable(gt_ProtossReactioninResourceChamber, true);
    TriggerExecute(gt_TransmissionP2ResourceChamberEnteredQ, true, true);
    SoundPlay(SoundLink("Event_Expedition03_ProtossAlarm", -1), PlayerGroupAll(), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwarmQueenEntersResourceChamber_Init () {
    gt_SwarmQueenEntersResourceChamber = TriggerCreate("gt_SwarmQueenEntersResourceChamber_Func");
    TriggerAddEventUnitRegion(gt_SwarmQueenEntersResourceChamber, null, RegionFromId(12), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - P2 - Resource Chamber Entered Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionP2ResourceChamberEnteredQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_tHE_ONE_QUEEN, "zMission_Expedition03|Line00126", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition03|Line00020", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionP2ResourceChamberEnteredQ_Init () {
    gt_TransmissionP2ResourceChamberEnteredQ = TriggerCreate("gt_TransmissionP2ResourceChamberEnteredQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Reaction in Resource Chamber
//--------------------------------------------------------------------------------------------------
bool gt_ProtossReactioninResourceChamber_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto8673C225_g;
    int auto8673C225_u;
    unit auto8673C225_var;
    unitgroup autoC398C246_g;
    int autoC398C246_u;
    unit autoC398C246_var;
    unitgroup auto1F4283D7_g;
    int auto1F4283D7_u;
    unit auto1F4283D7_var;
    unitgroup autoEBA732BE_g;
    int autoEBA732BE_u;
    unit autoEBA732BE_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((PlayerScoreValueGetAsInt(gv_pLAYER_01_USER, "UnitsActiveCount") > 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto8673C225_g = UnitGroup(null, gv_pLAYER_02_ZERG, RegionFromId(15), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8673C225_u = UnitGroupCount(auto8673C225_g, c_unitCountAll);
    for (;; auto8673C225_u -= 1) {
        auto8673C225_var = UnitGroupUnitFromEnd(auto8673C225_g, auto8673C225_u);
        if (auto8673C225_var == null) { break; }
        AISetUnitScriptControlled(auto8673C225_var, false);
        AIAttackWaveUseUnit(gv_pLAYER_02_ZERG, auto8673C225_var);
    }
    AIAttackWaveSetTargetUnitGroup(gv_pLAYER_02_ZERG, UnitGroup(null, gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    AIAttackWaveSend(gv_pLAYER_02_ZERG, 0, false);
    Wait(24.0, c_timeGame);
    if ((gv_gameOver == true)) {
        return true;
    }

    autoC398C246_g = UnitGroup(null, gv_pLAYER_02_ZERG, RegionFromId(14), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC398C246_u = UnitGroupCount(autoC398C246_g, c_unitCountAll);
    for (;; autoC398C246_u -= 1) {
        autoC398C246_var = UnitGroupUnitFromEnd(autoC398C246_g, autoC398C246_u);
        if (autoC398C246_var == null) { break; }
        AISetUnitScriptControlled(autoC398C246_var, false);
        AIAttackWaveUseUnit(gv_pLAYER_02_ZERG, autoC398C246_var);
    }
    AIAttackWaveSetTargetUnitGroup(gv_pLAYER_02_ZERG, UnitGroup(null, gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    AIAttackWaveSend(gv_pLAYER_02_ZERG, 0, false);
    Wait(16.0, c_timeGame);
    if ((gv_gameOver == true)) {
        return true;
    }

    auto1F4283D7_g = UnitGroup(null, gv_pLAYER_02_ZERG, RegionFromId(13), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1F4283D7_u = UnitGroupCount(auto1F4283D7_g, c_unitCountAll);
    for (;; auto1F4283D7_u -= 1) {
        auto1F4283D7_var = UnitGroupUnitFromEnd(auto1F4283D7_g, auto1F4283D7_u);
        if (auto1F4283D7_var == null) { break; }
        AISetUnitScriptControlled(auto1F4283D7_var, false);
        AIAttackWaveUseUnit(gv_pLAYER_02_ZERG, auto1F4283D7_var);
    }
    AIAttackWaveSetTargetUnitGroup(gv_pLAYER_02_ZERG, UnitGroup(null, gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    AIAttackWaveSend(gv_pLAYER_02_ZERG, 0, false);
    Wait(16.0, c_timeGame);
    if ((gv_gameOver == true)) {
        return true;
    }

    autoEBA732BE_g = UnitGroup(null, gv_pLAYER_02_ZERG, RegionFromId(16), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEBA732BE_u = UnitGroupCount(autoEBA732BE_g, c_unitCountAll);
    for (;; autoEBA732BE_u -= 1) {
        autoEBA732BE_var = UnitGroupUnitFromEnd(autoEBA732BE_g, autoEBA732BE_u);
        if (autoEBA732BE_var == null) { break; }
        AISetUnitScriptControlled(autoEBA732BE_var, false);
        AIAttackWaveUseUnit(gv_pLAYER_02_ZERG, autoEBA732BE_var);
    }
    AIAttackWaveSetTargetUnitGroup(gv_pLAYER_02_ZERG, UnitGroup(null, gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    AIAttackWaveSend(gv_pLAYER_02_ZERG, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossReactioninResourceChamber_Init () {
    gt_ProtossReactioninResourceChamber = TriggerCreate("gt_ProtossReactioninResourceChamber_Func");
    TriggerEnable(gt_ProtossReactioninResourceChamber, false);
    TriggerAddEventTimePeriodic(gt_ProtossReactioninResourceChamber, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sentry Initiates Cleansing
//--------------------------------------------------------------------------------------------------
bool gt_SentryInitiatesCleansing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionP2SentryCleansingQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SentryInitiatesCleansing_Init () {
    gt_SentryInitiatesCleansing = TriggerCreate("gt_SentryInitiatesCleansing_Func");
    TriggerAddEventUnitStartedAttack(gt_SentryInitiatesCleansing, UnitRefFromUnit(UnitFromId(409)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - P2 - Sentry Cleansing Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionP2SentryCleansingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((UnitIsAlive(UnitFromId(409)) == true)) {
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libSwaC_gf_SendTransmissionCampaign(UnitFromId(409), "zMission_Expedition03|Line00019", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionP2SentryCleansingQ_Init () {
    gt_TransmissionP2SentryCleansingQ = TriggerCreate("gt_TransmissionP2SentryCleansingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - P3 - Dangerous Hallway Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionP3DangerousHallwayWarningQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(18), 10.0, true);
    AIToggleBulliesInRegion(gv_pLAYER_02_ZERG, RegionFromId(18), true);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    if ((EventUnit() == gv_tHE_ONE_QUEEN)) {
        libSwaC_gf_SendTransmissionCampaign(gv_tHE_ONE_QUEEN, "zMission_Expedition03|Line00021", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition03|Line00023", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        libSwaC_gf_SendTransmissionCampaign(gv_tHE_ONE_QUEEN, "zMission_Expedition03|Line00022", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionP3DangerousHallwayWarningQ_Init () {
    gt_TransmissionP3DangerousHallwayWarningQ = TriggerCreate("gt_TransmissionP3DangerousHallwayWarningQ_Func");
    TriggerAddEventUnitRegion(gt_TransmissionP3DangerousHallwayWarningQ, null, RegionFromId(17), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dangerous Hallway Clear
//--------------------------------------------------------------------------------------------------
bool gt_DangerousHallwayClear_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_ZERG, RegionFromId(26), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionP3HallwayClearQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DangerousHallwayClear_Init () {
    gt_DangerousHallwayClear = TriggerCreate("gt_DangerousHallwayClear_Func");
    TriggerAddEventTimePeriodic(gt_DangerousHallwayClear, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - P3 - Hallway Clear Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionP3HallwayClearQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    if ((UnitIsAlive(UnitFromId(26)) == true)) {
        libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(libSwaC_ge_CampaginReticleType_ZergEnemy, libSwaC_ge_CampaginReticleSize_Medium, null, UnitFromId(26), "Ref_Origin");
        libHots_gf_StoreActorForUnit(UnitFromId(26), 1, libNtve_gf_ActorLastCreated());
    }

    libSwaC_gf_SendTransmissionCampaign(gv_tHE_ONE_QUEEN, "zMission_Expedition03|Line00028", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionP3HallwayClearQ_Init () {
    gt_TransmissionP3HallwayClearQ = TriggerCreate("gt_TransmissionP3HallwayClearQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Queen Can't Enter Vent
//--------------------------------------------------------------------------------------------------
bool gt_QueenCantEnterVent_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(63)), 2.0, Color(0.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/A7B7FB08"), null, RegionGetCenter(RegionFromId(63)));
    TriggerExecute(gt_TransmissionP3QueenCantEnterVentQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QueenCantEnterVent_Init () {
    gt_QueenCantEnterVent = TriggerCreate("gt_QueenCantEnterVent_Func");
    TriggerAddEventUnitRegion(gt_QueenCantEnterVent, UnitRefFromVariable("gv_tHE_ONE_QUEEN"), RegionFromId(63), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - P3 - Queen Can't Enter Vent Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionP3QueenCantEnterVentQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_tHE_ONE_QUEEN, "zMission_Expedition03|Line00104", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionP3QueenCantEnterVentQ_Init () {
    gt_TransmissionP3QueenCantEnterVentQ = TriggerCreate("gt_TransmissionP3QueenCantEnterVentQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - P3 - First Force Field Discovery Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionP3FirstForceFieldDiscoveryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(18)) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition03|Line00027", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionP3FirstForceFieldDiscoveryQ_Init () {
    gt_TransmissionP3FirstForceFieldDiscoveryQ = TriggerCreate("gt_TransmissionP3FirstForceFieldDiscoveryQ_Func");
    TriggerAddEventUnitRegion(gt_TransmissionP3FirstForceFieldDiscoveryQ, UnitRefFromVariable("gv_tHE_ONE_QUEEN"), RegionFromId(24), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kill Helper Model - Warp Drive Vent Door
//--------------------------------------------------------------------------------------------------
bool gt_KillHelperModelWarpDriveVentDoor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitFromId(26), 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KillHelperModelWarpDriveVentDoor_Init () {
    gt_KillHelperModelWarpDriveVentDoor = TriggerCreate("gt_KillHelperModelWarpDriveVentDoor_Func");
    TriggerAddEventUnitDied(gt_KillHelperModelWarpDriveVentDoor, UnitRefFromUnit(UnitFromId(26)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reveal Psi-Broadcaster 01
//--------------------------------------------------------------------------------------------------
bool gt_RevealPsiBroadcaster01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(27), 10.0, false);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(UnitFromId(18)), 2.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/A2F770A3"), null, UnitGetPosition(UnitFromId(18)));
    libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(libSwaC_ge_CampaginReticleType_ZergEnemy, libSwaC_ge_CampaginReticleSize_Medium, null, UnitFromId(18), "Ref_Origin");
    libHots_gf_StoreActorForUnit(UnitFromId(18), 1, libNtve_gf_ActorLastCreated());
    TriggerExecute(gt_TransmissionP3PsiBroadcasterVisibleQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RevealPsiBroadcaster01_Init () {
    gt_RevealPsiBroadcaster01 = TriggerCreate("gt_RevealPsiBroadcaster01_Func");
    TriggerAddEventUnitRegion(gt_RevealPsiBroadcaster01, null, RegionFromId(29), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kill Helper Model - Psi-Broadcaster 01
//--------------------------------------------------------------------------------------------------
bool gt_KillHelperModelPsiBroadcaster01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitFromId(18), 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KillHelperModelPsiBroadcaster01_Init () {
    gt_KillHelperModelPsiBroadcaster01 = TriggerCreate("gt_KillHelperModelPsiBroadcaster01_Func");
    TriggerAddEventUnitAttacked(gt_KillHelperModelPsiBroadcaster01, UnitRefFromUnit(UnitFromId(18)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - P3 - Psi-Broadcaster Visible Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionP3PsiBroadcasterVisibleQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_tHE_ONE_QUEEN, "zMission_Expedition03|Line00025", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionP3PsiBroadcasterVisibleQ_Init () {
    gt_TransmissionP3PsiBroadcasterVisibleQ = TriggerCreate("gt_TransmissionP3PsiBroadcasterVisibleQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Entered Warp Drive Quadrant
//--------------------------------------------------------------------------------------------------
bool gt_EnteredWarpDriveQuadrant_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(90), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(22), 3.0, false);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(UnitFromId(239)), 2.0, Color(100.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/BA6EAFCD"), null, UnitGetPosition(UnitFromId(239)));
    libSwaC_gf_CreateObjectivePing(true, UnitGetPosition(UnitFromId(239)), StringExternal("Param/Value/A4276309"));
    gv_warpDrivePing = PingLastCreated();
    VisRevealerCreate(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(239)), 4.0));
    gv_beaconRevealer = VisRevealerLastCreated();
    ObjectiveSetState(gv_objectiveDestroyDominionBase322, c_objectiveStateActive);
    TriggerExecute(gt_TransmissionP3EnteredWarpDriveQuadQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnteredWarpDriveQuadrant_Init () {
    gt_EnteredWarpDriveQuadrant = TriggerCreate("gt_EnteredWarpDriveQuadrant_Func");
    TriggerAddEventTimePeriodic(gt_EnteredWarpDriveQuadrant, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - P3 - Entered Warp Drive Quad Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionP3EnteredWarpDriveQuadQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_tHE_ONE_QUEEN, "zMission_Expedition03|Line00024", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionP3EnteredWarpDriveQuadQ_Init () {
    gt_TransmissionP3EnteredWarpDriveQuadQ = TriggerCreate("gt_TransmissionP3EnteredWarpDriveQuadQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Psi-Broadcaster 01 Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_PsiBroadcaster01Destroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(24), 6.0, false);
    UnitKill(UnitFromId(405));
    TriggerExecute(gt_TransmissionP3FirstForceFieldOpenQ, true, false);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(87), "XelNagaHullReactorConduit", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.25, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(88), "XelNagaHullReactorConduit", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.25, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(89), "XelNagaHullReactorConduit", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.25, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(91), "XelNagaHullReactorConduit", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.25, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(93), "XelNagaHullReactorConduit", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.25, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(94), "XelNagaHullReactorConduit", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.25, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(95), "XelNagaHullReactorConduit", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.25, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(96), "XelNagaHullReactorConduit", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.25, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(97), "XelNagaHullReactorConduit", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.25, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(98), "XelNagaHullReactorConduit", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.25, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(99), "XelNagaHullReactorConduit", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.25, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(100), "XelNagaHullReactorConduit", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.25, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(101), "XelNagaHullReactorConduit", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.25, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(102), "XelNagaHullReactorConduit", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.25, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(103), "XelNagaHullReactorConduit", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.25, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(104), "XelNagaHullReactorConduit", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PsiBroadcaster01Destroyed_Init () {
    gt_PsiBroadcaster01Destroyed = TriggerCreate("gt_PsiBroadcaster01Destroyed_Func");
    TriggerAddEventUnitDied(gt_PsiBroadcaster01Destroyed, UnitRefFromUnit(UnitFromId(18)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - P3 - First Force Field Open Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionP3FirstForceFieldOpenQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_tHE_ONE_QUEEN, "zMission_Expedition03|Line00030", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    MinimapPing(PlayerGroupSingle(gv_pLAYER_01_USER), RegionGetCenter(RegionFromId(24)), 2.0, Color(0.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/6B354ECB"), null, RegionGetCenter(RegionFromId(24)));
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionP3FirstForceFieldOpenQ_Init () {
    gt_TransmissionP3FirstForceFieldOpenQ = TriggerCreate("gt_TransmissionP3FirstForceFieldOpenQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reveal Warp Drive Specimen Room
//--------------------------------------------------------------------------------------------------
bool gt_RevealWarpDriveSpecimenRoom_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(28), 10.0, false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(30), 0.0, false);
    while (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_ZERG2, RegionFromId(28), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_TransmissionP3WarpDriveSpecimenRoomQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RevealWarpDriveSpecimenRoom_Init () {
    gt_RevealWarpDriveSpecimenRoom = TriggerCreate("gt_RevealWarpDriveSpecimenRoom_Func");
    TriggerAddEventUnitRegion(gt_RevealWarpDriveSpecimenRoom, UnitRefFromVariable("gv_tHE_ONE_QUEEN"), RegionFromId(28), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - P3 - Warp Drive Specimen Room Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionP3WarpDriveSpecimenRoomQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_tHE_ONE_QUEEN, "zMission_Expedition03|Line00029", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionP3WarpDriveSpecimenRoomQ_Init () {
    gt_TransmissionP3WarpDriveSpecimenRoomQ = TriggerCreate("gt_TransmissionP3WarpDriveSpecimenRoomQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Psi-Broadcaster 02 Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_PsiBroadcaster02Destroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(114), 6.0, false);
    UnitKill(UnitFromId(256));
    TriggerExecute(gt_TransmissionP3SecondForceFieldOpenQ, true, false);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(81), "XelNagaHullReactorConduit", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.25, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(82), "XelNagaHullReactorConduit", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.25, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(83), "XelNagaHullReactorConduit", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.25, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(84), "XelNagaHullReactorConduit", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.25, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(85), "XelNagaHullReactorConduit", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.25, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(86), "XelNagaHullReactorConduit", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PsiBroadcaster02Destroyed_Init () {
    gt_PsiBroadcaster02Destroyed = TriggerCreate("gt_PsiBroadcaster02Destroyed_Func");
    TriggerAddEventUnitDied(gt_PsiBroadcaster02Destroyed, UnitRefFromUnit(UnitFromId(12)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - P3 - Second Force Field Open Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionP3SecondForceFieldOpenQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_tHE_ONE_QUEEN, "zMission_Expedition03|Line00033", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionP3SecondForceFieldOpenQ_Init () {
    gt_TransmissionP3SecondForceFieldOpenQ = TriggerCreate("gt_TransmissionP3SecondForceFieldOpenQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reveal Warp Drive Room
//--------------------------------------------------------------------------------------------------
bool gt_RevealWarpDriveRoom_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(33), 10.0, false);
    libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(libSwaC_ge_CampaginReticleType_ZergEnemy, libSwaC_ge_CampaginReticleSize_Large, null, UnitFromId(239), "Ref_Origin");
    libHots_gf_StoreActorForUnit(UnitFromId(239), 1, libNtve_gf_ActorLastCreated());
    TriggerExecute(gt_TransmissionP3WarpDriveRoomRevealedQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RevealWarpDriveRoom_Init () {
    gt_RevealWarpDriveRoom = TriggerCreate("gt_RevealWarpDriveRoom_Func");
    TriggerAddEventUnitRegion(gt_RevealWarpDriveRoom, null, RegionFromId(32), true);
    TriggerAddEventUnitRegion(gt_RevealWarpDriveRoom, null, RegionFromId(31), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kill Helper Model - Warp Drive
//--------------------------------------------------------------------------------------------------
bool gt_KillHelperModelWarpDrive_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitDamageSourceUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitFromId(239), 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KillHelperModelWarpDrive_Init () {
    gt_KillHelperModelWarpDrive = TriggerCreate("gt_KillHelperModelWarpDrive_Func");
    TriggerAddEventUnitDamaged(gt_KillHelperModelWarpDrive, UnitRefFromUnit(UnitFromId(239)), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - P3 - Warp Drive Room Revealed Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionP3WarpDriveRoomRevealedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_tHE_ONE_QUEEN, "zMission_Expedition03|Line00031", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_LeavePortraitVisibleAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition03|Line00032", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionP3WarpDriveRoomRevealedQ_Init () {
    gt_TransmissionP3WarpDriveRoomRevealedQ = TriggerCreate("gt_TransmissionP3WarpDriveRoomRevealedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warp Drive Destroyed - Start Countdown Q
//--------------------------------------------------------------------------------------------------
bool gt_WarpDriveDestroyedStartCountdownQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoF8134D56_g;
    int autoF8134D56_u;
    unit autoF8134D56_var;
    unitgroup auto9F6CB559_g;
    int auto9F6CB559_u;
    unit auto9F6CB559_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealerDestroy(gv_beaconRevealer);
    TriggerExecute(gt_WarpDriveExplosions, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZExpedition03MusicEvent02_WarpDriveBreach", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 1.0);
    libNtve_gf_ShowHideUnit(UnitFromId(560), true);
    UnitKill(UnitFromId(560));
    TerrainShowRegion(RegionFromId(54), false);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(78), "ProtossEnergyGust", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    TriggerEnable(gt_EscapedWarpDriveTransition, true);
    TriggerEnable(gt_SentryResponsetoWarpDriveDestruction, true);
    TriggerExecute(gt_ObjectiveDestroyWarpDriveComplete, true, false);
    autoF8134D56_g = UnitGroup(null, gv_pLAYER_02_ZERG, RegionFromId(41), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoF8134D56_u = UnitGroupCount(autoF8134D56_g, c_unitCountAll);
    for (;; autoF8134D56_u -= 1) {
        autoF8134D56_var = UnitGroupUnitFromEnd(autoF8134D56_g, autoF8134D56_u);
        if (autoF8134D56_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoF8134D56_var, true);
        libNtve_gf_PauseUnit(autoF8134D56_var, false);
    }
    auto9F6CB559_g = UnitGroup(null, c_playerAny, RegionFromId(118), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9F6CB559_u = UnitGroupCount(auto9F6CB559_g, c_unitCountAll);
    for (;; auto9F6CB559_u -= 1) {
        auto9F6CB559_var = UnitGroupUnitFromEnd(auto9F6CB559_g, auto9F6CB559_u);
        if (auto9F6CB559_var == null) { break; }
        UnitSetState(auto9F6CB559_var, c_unitStateTargetable, false);
        libNtve_gf_MakeUnitInvulnerable(auto9F6CB559_var, true);
    }
    PingDestroy(gv_warpDrivePing);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(UnitFromId(275)), 2.0, Color(0.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/42CC902F"), null, UnitGetPosition(UnitFromId(275)));
    libSwaC_gf_CreateObjectivePing(true, UnitGetPosition(UnitFromId(275)), StringExternal("Param/Value/505DFEAA"));
    gv_escapeExplosionPing = PingLastCreated();
    VisRevealerCreate(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(275)), 3.0));
    libNtve_gf_ShowHideUnit(UnitFromId(275), true);
    UnitKill(UnitFromId(240));
    UnitIssueOrder(UnitFromId(130), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(581)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(201), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(582)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(203), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(583)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(176), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1212)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(175), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1213)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(194), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1214)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(880), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(882)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(440), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(442)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(441), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(443)), c_orderQueueReplace);
    GameSetLighting("StarshipDark", 1.0);
    SoundPlay(SoundLink("Protoss_PowerDownLarge", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/D905C772"));
    SoundPlay(SoundLink("TUIWarningPing", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    TimerStart(gv_countdownTimer, gv_runoutTime, false, c_timeAI);
    libSwaC_gf_TimerWindowCreate2(gv_countdownTimer, StringExternal("Param/Value/1893818B"), true, false, libSwaC_ge_CampaignTimerPositiveNegativeOptions_Negative);
    gv_countdownTimerWindow = TimerWindowLastCreated();
    TimerWindowSetFormat(gv_countdownTimerWindow, StringToText("<mintotal/>:<sec2/>"));
    TriggerExecute(gt_StalkerAttackAfterWarpDriveDestroyed, true, false);
    ObjectiveSetState(gv_objectiveDestroyDominionBase3222, c_objectiveStateActive);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 1.0);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition03|Line00034", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition03|Line00035", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 1.0);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarpDriveDestroyedStartCountdownQ_Init () {
    gt_WarpDriveDestroyedStartCountdownQ = TriggerCreate("gt_WarpDriveDestroyedStartCountdownQ_Func");
    TriggerAddEventUnitDied(gt_WarpDriveDestroyedStartCountdownQ, UnitRefFromUnit(UnitFromId(239)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warp Drive Explosions
//--------------------------------------------------------------------------------------------------
bool gt_WarpDriveExplosions_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ActorSend(ActorFromDoodad(DoodadFromId(903)), "SetVisibility 1");
    ActorSend(ActorFromDoodad(DoodadFromId(899)), "SetVisibility 1");
    ActorSend(ActorFromDoodad(DoodadFromId(904)), "SetVisibility 1");
    ActorSend(ActorFromDoodad(DoodadFromId(905)), "SetVisibility 1");
    ActorSend(ActorFromDoodad(DoodadFromId(900)), "SetVisibility 1");
    ActorSend(ActorFromDoodad(DoodadFromId(902)), "SetVisibility 1");
    ActorSend(ActorFromDoodad(DoodadFromId(901)), "SetVisibility 1");
    CameraShake(gv_pLAYER_01_USER, "Heavy", "Earthquake", 0.0, 1.0, 2.5);
    while (true) {
        Wait(RandomFixed(3.0, 4.0), c_timeGame);
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Protoss, RegionRandomPoint(RegionFromId(75)));
        if ((RandomInt(1, 2) == 1)) {
            CameraShake(gv_pLAYER_01_USER, "Light", "Earthquake", 0.0, 0.5, 1.0);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarpDriveExplosions_Init () {
    gt_WarpDriveExplosions = TriggerCreate("gt_WarpDriveExplosions_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stalker Attack After Warp Drive Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_StalkerAttackAfterWarpDriveDestroyed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_stalker01;
    unit lv_stalker02;
    unit lv_stalker03;
    unit lv_hardArchon01;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.0, c_timeGame);
    lv_stalker01 = UnitFromId(194);
    lv_stalker02 = UnitFromId(175);
    lv_stalker03 = UnitFromId(176);
    lv_hardArchon01 = UnitFromId(880);
    UnitIssueOrder(lv_stalker01, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(435)), c_orderQueueReplace);
    UnitIssueOrder(lv_stalker02, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(436)), c_orderQueueReplace);
    UnitIssueOrder(lv_hardArchon01, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(436)), c_orderQueueReplace);
    UnitIssueOrder(lv_stalker03, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(437)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StalkerAttackAfterWarpDriveDestroyed_Init () {
    gt_StalkerAttackAfterWarpDriveDestroyed = TriggerCreate("gt_StalkerAttackAfterWarpDriveDestroyed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sentry Response to Warp Drive Destruction
//--------------------------------------------------------------------------------------------------
bool gt_SentryResponsetoWarpDriveDestruction_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(35), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(35), 12.0, true);
    TriggerExecute(gt_TransmissionP3SentriesTrappingQueenQ, true, false);
    while (true) {
        UnitIssueOrder(UnitFromId(440), OrderTargetingPoint(AbilityCommand("ForceField", 0), PointFromId(445)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitFromId(440), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitFromId(441), OrderTargetingPoint(AbilityCommand("ForceField", 0), PointFromId(444)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitFromId(441), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
        Wait(15.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SentryResponsetoWarpDriveDestruction_Init () {
    gt_SentryResponsetoWarpDriveDestruction = TriggerCreate("gt_SentryResponsetoWarpDriveDestruction_Func");
    TriggerEnable(gt_SentryResponsetoWarpDriveDestruction, false);
    TriggerAddEventTimePeriodic(gt_SentryResponsetoWarpDriveDestruction, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - P3 - Sentries Trapping Queen Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionP3SentriesTrappingQueenQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 1.0);
    libSwaC_gf_SendTransmissionCampaign(gv_tHE_ONE_QUEEN, "zMission_Expedition03|Line00036", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 1.0);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionP3SentriesTrappingQueenQ_Init () {
    gt_TransmissionP3SentriesTrappingQueenQ = TriggerCreate("gt_TransmissionP3SentriesTrappingQueenQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Evacuate Timer Ends - Destroy Warp Drive Quadrant
//--------------------------------------------------------------------------------------------------
bool gt_EvacuateTimerEndsDestroyWarpDriveQuadrant_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_playerUnitGroup;

    // Automatic Variable Declarations
    unitgroup auto338F5207_g;
    int auto338F5207_u;
    unit auto338F5207_var;
    unitgroup auto5E9FF73C_g;
    int auto5E9FF73C_u;
    unit auto5E9FF73C_var;

    // Variable Initialization
    lv_playerUnitGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_EscapedWarpDriveTransition, false);
    UnitKill(UnitFromId(275));
    PingDestroy(gv_escapeExplosionPing);
    TimerPause(gv_countdownTimer, true);
    TimerWindowDestroy(gv_countdownTimerWindow);
    PlayerCreateEffectPoint(gv_pLAYER_01_USER, "EnergyNovaPersistent", RegionGetCenter(RegionFromId(75)));
    SoundPlay(SoundLink("Artifact_EnergyNova", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(0.5, c_timeGame);
    auto338F5207_g = UnitGroup(null, c_playerAny, RegionFromId(34), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto338F5207_u = UnitGroupCount(auto338F5207_g, c_unitCountAll);
    for (;; auto338F5207_u -= 1) {
        auto338F5207_var = UnitGroupUnitFromEnd(auto338F5207_g, auto338F5207_u);
        if (auto338F5207_var == null) { break; }
        UnitKill(auto338F5207_var);
    }
    UnitGroupAddUnitGroup(lv_playerUnitGroup, UnitGroup(null, gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    auto5E9FF73C_g = lv_playerUnitGroup;
    auto5E9FF73C_u = UnitGroupCount(auto5E9FF73C_g, c_unitCountAll);
    for (;; auto5E9FF73C_u -= 1) {
        auto5E9FF73C_var = UnitGroupUnitFromEnd(auto5E9FF73C_g, auto5E9FF73C_u);
        if (auto5E9FF73C_var == null) { break; }
        if ((libNtve_gf_UnitInRegion(auto5E9FF73C_var, RegionFromId(41)) == true)) {
            UnitGroupRemove(lv_playerUnitGroup, auto5E9FF73C_var);
        }
        else {
            UnitKill(auto5E9FF73C_var);
        }
    }
    if ((libNtve_gf_UnitInRegion(gv_tHE_ONE_QUEEN, RegionFromId(41)) == true)) {
        TriggerExecute(gt_ObjectiveEscapeComplete, true, false);
        Wait(1.5, c_timeGame);
        libSwaC_gf_CreateMissionAutosavePoint(StringToText(""));
        TriggerExecute(gt_MidQ, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EvacuateTimerEndsDestroyWarpDriveQuadrant_Init () {
    gt_EvacuateTimerEndsDestroyWarpDriveQuadrant = TriggerCreate("gt_EvacuateTimerEndsDestroyWarpDriveQuadrant_Func");
    TriggerAddEventTimer(gt_EvacuateTimerEndsDestroyWarpDriveQuadrant, gv_countdownTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escaped Warp Drive -> Transition
//--------------------------------------------------------------------------------------------------
bool gt_EscapedWarpDriveTransition_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("SwarmQueen", gv_pLAYER_01_USER, RegionFromId(20), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_EvacuateTimerEndsDestroyWarpDriveQuadrant, false);
    UnitKill(UnitFromId(275));
    PingDestroy(gv_escapeExplosionPing);
    TimerPause(gv_countdownTimer, true);
    TimerWindowDestroy(gv_countdownTimerWindow);
    TriggerExecute(gt_ObjectiveEscapeComplete, true, false);
    Wait(2.0, c_timeGame);
    libSwaC_gf_CreateMissionAutosavePoint(StringToText(""));
    TriggerExecute(gt_MidQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapedWarpDriveTransition_Init () {
    gt_EscapedWarpDriveTransition = TriggerCreate("gt_EscapedWarpDriveTransition_Func");
    TriggerEnable(gt_EscapedWarpDriveTransition, false);
    TriggerAddEventTimePeriodic(gt_EscapedWarpDriveTransition, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: After Mid-Cine -> Chamber 00 Intro
//--------------------------------------------------------------------------------------------------
bool gt_AfterMidCineChamber00Intro_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto60181B81_g;
    int auto60181B81_u;
    unit auto60181B81_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_AllowAccessIntoKitchen, true, false);
    TriggerEnable(gt_ShowBridgeQuadrantEntry, true);
    auto60181B81_g = UnitGroup(null, gv_pLAYER_02_ZERG, RegionFromId(37), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto60181B81_u = UnitGroupCount(auto60181B81_g, c_unitCountAll);
    for (;; auto60181B81_u -= 1) {
        auto60181B81_var = UnitGroupUnitFromEnd(auto60181B81_g, auto60181B81_u);
        if (auto60181B81_var == null) { break; }
        UnitBehaviorRemovePlayer(auto60181B81_var, "Exp03StasisLongTerm", gv_pLAYER_02_ZERG, 1);
        UnitBehaviorRemovePlayer(auto60181B81_var, "Exp03StasisEnding", gv_pLAYER_02_ZERG, 1);
        libNtve_gf_PauseUnit(auto60181B81_var, false);
        libNtve_gf_MakeUnitInvulnerable(auto60181B81_var, false);
    }
    UnitIssueOrder(UnitFromId(70), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(296)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(75), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(463)), c_orderQueueReplace);
    Wait(12.0, c_timeGame);
    gf_AwakenProtossinRegion(RegionFromId(38));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AfterMidCineChamber00Intro_Init () {
    gt_AfterMidCineChamber00Intro = TriggerCreate("gt_AfterMidCineChamber00Intro_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Allow Access Into Kitchen
//--------------------------------------------------------------------------------------------------
bool gt_AllowAccessIntoKitchen_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitKill(UnitFromId(200));
    UnitRemove(UnitFromId(633));
    UnitRemove(UnitFromId(448));
    UnitRemove(UnitFromId(860));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AllowAccessIntoKitchen_Init () {
    gt_AllowAccessIntoKitchen = TriggerCreate("gt_AllowAccessIntoKitchen_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Chamber 01 Actions
//--------------------------------------------------------------------------------------------------
bool gt_StartChamber01Actions_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(39), 6.0, false);
    TriggerExecute(gt_TransmissionP4EnterStasisChamber01Q, true, false);
    Wait(2.0, c_timeGame);
    gf_AwakenProtossinRegion(RegionFromId(19));
    Wait(16.0, c_timeGame);
    gf_AwakenProtossinRegion(RegionFromId(36));
    Wait(16.0, c_timeGame);
    gf_AwakenProtossinRegion(RegionFromId(64));
    Wait(16.0, c_timeGame);
    gf_AwakenProtossinRegion(RegionFromId(68));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartChamber01Actions_Init () {
    gt_StartChamber01Actions = TriggerCreate("gt_StartChamber01Actions_Func");
    TriggerAddEventUnitRegion(gt_StartChamber01Actions, null, RegionFromId(39), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - P4 - Enter Stasis Chamber 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionP4EnterStasisChamber01Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition03|Line00040", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_LeavePortraitVisibleAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_tHE_ONE_QUEEN, "zMission_Expedition03|Line00041", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionP4EnterStasisChamber01Q_Init () {
    gt_TransmissionP4EnterStasisChamber01Q = TriggerCreate("gt_TransmissionP4EnterStasisChamber01Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Chamber 02 Actions
//--------------------------------------------------------------------------------------------------
bool gt_StartChamber02Actions_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(40), 6.0, false);
    Wait(2.0, c_timeGame);
    gf_AwakenProtossinRegion(RegionFromId(70));
    Wait(16.0, c_timeGame);
    gf_AwakenProtossinRegion(RegionFromId(71));
    Wait(16.0, c_timeGame);
    gf_AwakenProtossinRegion(RegionFromId(74));
    Wait(16.0, c_timeGame);
    gf_AwakenProtossinRegion(RegionFromId(72));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartChamber02Actions_Init () {
    gt_StartChamber02Actions = TriggerCreate("gt_StartChamber02Actions_Func");
    TriggerAddEventUnitRegion(gt_StartChamber02Actions, null, RegionFromId(40), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Chamber 03 Actions
//--------------------------------------------------------------------------------------------------
bool gt_StartChamber03Actions_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoC2716739_g;
    int autoC2716739_u;
    unit autoC2716739_var;
    unitgroup auto342288FF_g;
    int auto342288FF_u;
    unit auto342288FF_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitRemove(UnitFromId(1209));
    UnitRemove(UnitFromId(1210));
    UnitRemove(UnitFromId(1211));
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(92), "PathingandSightBlocker1x1Doodad");
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(45), 6.0, false);
    Wait(0.25, c_timeGame);
    autoC2716739_g = UnitGroup(null, gv_pLAYER_02_ZERG, RegionFromId(45), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC2716739_u = UnitGroupCount(autoC2716739_g, c_unitCountAll);
    for (;; autoC2716739_u -= 1) {
        autoC2716739_var = UnitGroupUnitFromEnd(autoC2716739_g, autoC2716739_u);
        if (autoC2716739_var == null) { break; }
        libNtve_gf_PauseUnit(autoC2716739_var, false);
        UnitGroupAdd(gv_ursadonAggressors, autoC2716739_var);
        UnitBehaviorAdd(autoC2716739_var, "ScanRangeBonus", autoC2716739_var, 1);
    }
    UnitIssueOrder(UnitFromId(230), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(206)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(221), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(206)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(877), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(206)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(795), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(244)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(793), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(265)), c_orderQueueReplace);
    auto342288FF_g = UnitGroup(null, gv_pLAYER_02_ZERG, RegionFromId(92), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto342288FF_u = UnitGroupCount(auto342288FF_g, c_unitCountAll);
    for (;; auto342288FF_u -= 1) {
        auto342288FF_var = UnitGroupUnitFromEnd(auto342288FF_g, auto342288FF_u);
        if (auto342288FF_var == null) { break; }
        UnitIssueOrder(auto342288FF_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionCircle(RegionGetCenter(RegionFromId(92)), 3.0))), c_orderQueueAddToEnd);
    }
    libSwaC_gf_CreateObjectivePing(false, UnitGetPosition(UnitFromId(206)), StringExternal("Param/Value/B7B32DF6"));
    gv_giantUrsadonPing = PingLastCreated();
    TriggerExecute(gt_ObjectiveInfestGiantUrsadonCreateQ, true, false);
    TriggerExecute(gt_InfestSecondGiantUrsadonQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartChamber03Actions_Init () {
    gt_StartChamber03Actions = TriggerCreate("gt_StartChamber03Actions_Func");
    TriggerAddEventUnitDied(gt_StartChamber03Actions, UnitRefFromUnit(UnitFromId(1208)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infest Second Giant Ursadon Q
//--------------------------------------------------------------------------------------------------
bool gt_InfestSecondGiantUrsadonQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_tHE_ONE_QUEEN, "zMission_Expedition03|Line00068", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfestSecondGiantUrsadonQ_Init () {
    gt_InfestSecondGiantUrsadonQ = TriggerCreate("gt_InfestSecondGiantUrsadonQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - P4 - Ursadon Infested Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionP4UrsadonInfestedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_tHE_ONE_QUEEN, "zMission_Expedition03|Line00125", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionP4UrsadonInfestedQ_Init () {
    gt_TransmissionP4UrsadonInfestedQ = TriggerCreate("gt_TransmissionP4UrsadonInfestedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Giant Ursadon Dies - Fail Bonus Objective
//--------------------------------------------------------------------------------------------------
bool gt_GiantUrsadonDiesFailBonusObjective_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_giantUrsadonPing);
    gf_KillLargeHoldingPen(UnitGetPosition(gv_tHE_TWO_URSADON));
    TriggerExecute(gt_ObjectiveInfestGiantUrsadonFailed, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GiantUrsadonDiesFailBonusObjective_Init () {
    gt_GiantUrsadonDiesFailBonusObjective = TriggerCreate("gt_GiantUrsadonDiesFailBonusObjective_Func");
    TriggerAddEventUnitDied(gt_GiantUrsadonDiesFailBonusObjective, UnitRefFromVariable("gv_tHE_TWO_URSADON"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show Bridge Quadrant Entry
//--------------------------------------------------------------------------------------------------
bool gt_ShowBridgeQuadrantEntry_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(69), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(69), 12.0, true);
    TriggerExecute(gt_TransmissionP5ZergReachBridgeQuadQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowBridgeQuadrantEntry_Init () {
    gt_ShowBridgeQuadrantEntry = TriggerCreate("gt_ShowBridgeQuadrantEntry_Func");
    TriggerEnable(gt_ShowBridgeQuadrantEntry, false);
    TriggerAddEventTimePeriodic(gt_ShowBridgeQuadrantEntry, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - P5 - Zerg Reach Bridge Quad Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionP5ZergReachBridgeQuadQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition03|Line00042", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionP5ZergReachBridgeQuadQ_Init () {
    gt_TransmissionP5ZergReachBridgeQuadQ = TriggerCreate("gt_TransmissionP5ZergReachBridgeQuadQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Open Door to the Bridge
//--------------------------------------------------------------------------------------------------
bool gt_OpenDoortotheBridge_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitKill(UnitFromId(181));
    libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/8AD781F0"));
    UnitRemove(UnitFromId(947));
    UnitRemove(UnitFromId(1101));
    UnitRemove(UnitFromId(1099));
    UnitRemove(UnitFromId(1097));
    TriggerEnable(gt_ReachBridgeQuadrant, true);
    TriggerEnable(gt_StartFirstEscapePods, true);
    TriggerEnable(gt_ActivateStalkerRush, true);
    TriggerEnable(gt_ActivateEscapePod03Defense, true);
    TriggerEnable(gt_ActivateEscapePod04Defense, true);
    TriggerEnable(gt_ActivateBridgeFinaleProtoss, true);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(106), "XelNagaHullReactorConduit", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.25, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(107), "XelNagaHullReactorConduit", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.25, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(108), "XelNagaHullReactorConduit", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.25, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(109), "XelNagaHullReactorConduit", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.25, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(110), "XelNagaHullReactorConduit", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.25, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(111), "XelNagaHullReactorConduit", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.25, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(112), "XelNagaHullReactorConduit", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.25, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(113), "XelNagaHullReactorConduit", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OpenDoortotheBridge_Init () {
    gt_OpenDoortotheBridge = TriggerCreate("gt_OpenDoortotheBridge_Func");
    TriggerAddEventUnitDied(gt_OpenDoortotheBridge, UnitRefFromUnit(UnitFromId(8)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reach Bridge Quadrant
//--------------------------------------------------------------------------------------------------
bool gt_ReachBridgeQuadrant_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(48), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_BridgeRampProtossBlockBehavior, true, false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(48), 12.0, true);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_ZERG, "haltech", 1);
    if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
        TriggerExecute(gt_ActivateSentryHallucinationBattle, true, false);
    }
    else {
        TriggerExecute(gt_ActivateSentryHallucinationBattleHard, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReachBridgeQuadrant_Init () {
    gt_ReachBridgeQuadrant = TriggerCreate("gt_ReachBridgeQuadrant_Func");
    TriggerEnable(gt_ReachBridgeQuadrant, false);
    TriggerAddEventTimePeriodic(gt_ReachBridgeQuadrant, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start First Escape Pods
//--------------------------------------------------------------------------------------------------
bool gt_StartFirstEscapePods_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(57), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(57), 10.0, false);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_escapePodUnit[1]), 3.0));
    VisRevealerCreate(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_escapePodUnit[2]), 3.0));
    gf_StartEscapePodTimer(gv_escapePodTimes[1], 1);
    gf_StartEscapePodTimer(gv_escapePodTimes[2], 2);
    TriggerExecute(gt_ObjectiveDestroyEscapePodsCreateQ, true, false);
    TriggerExecute(gt_TransmissionP5ZergSeeEscapePodsQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartFirstEscapePods_Init () {
    gt_StartFirstEscapePods = TriggerCreate("gt_StartFirstEscapePods_Func");
    TriggerEnable(gt_StartFirstEscapePods, false);
    TriggerAddEventTimePeriodic(gt_StartFirstEscapePods, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - P5 - Zerg See Escape Pods Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionP5ZergSeeEscapePodsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZExpedition03MusicEvent04_EscapePods", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition03|Line00044", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_LeavePortraitVisibleAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition03|Line00007", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionP5ZergSeeEscapePodsQ_Init () {
    gt_TransmissionP5ZergSeeEscapePodsQ = TriggerCreate("gt_TransmissionP5ZergSeeEscapePodsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Sentry Hallucination Battle
//--------------------------------------------------------------------------------------------------
bool gt_ActivateSentryHallucinationBattle_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoB222EDC9_g;
    int autoB222EDC9_u;
    unit autoB222EDC9_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(385), Order(AbilityCommand("HallucinationZealot", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(378), Order(AbilityCommand("HallucinationZealot", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(424), Order(AbilityCommand("HallucinationZealot", 0)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    UnitIssueOrder(UnitFromId(385), Order(AbilityCommand("HallucinationZealot", 0)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(378), Order(AbilityCommand("HallucinationZealot", 0)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(424), Order(AbilityCommand("HallucinationZealot", 0)), c_orderQueueAddToEnd);
    autoB222EDC9_g = UnitGroup(null, gv_pLAYER_02_ZERG, RegionFromId(73), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB222EDC9_u = UnitGroupCount(autoB222EDC9_g, c_unitCountAll);
    for (;; autoB222EDC9_u -= 1) {
        autoB222EDC9_var = UnitGroupUnitFromEnd(autoB222EDC9_g, autoB222EDC9_u);
        if (autoB222EDC9_var == null) { break; }
        AISetUnitScriptControlled(autoB222EDC9_var, false);
        AIAttackWaveUseUnit(gv_pLAYER_02_ZERG, autoB222EDC9_var);
    }
    AIAttackWaveSetTargetUnitGroup(gv_pLAYER_02_ZERG, UnitGroup(null, gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    AIAttackWaveSend(gv_pLAYER_02_ZERG, 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateSentryHallucinationBattle_Init () {
    gt_ActivateSentryHallucinationBattle = TriggerCreate("gt_ActivateSentryHallucinationBattle_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Sentry Hallucination Battle (Hard)
//--------------------------------------------------------------------------------------------------
bool gt_ActivateSentryHallucinationBattleHard_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto56424322_g;
    int auto56424322_u;
    unit auto56424322_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(385), Order(AbilityCommand("HallucinationZealot", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(378), Order(AbilityCommand("HallucinationArchon", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(424), Order(AbilityCommand("HallucinationZealot", 0)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    UnitIssueOrder(UnitFromId(385), Order(AbilityCommand("HallucinationZealot", 0)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(378), Order(AbilityCommand("HallucinationStalker", 0)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(424), Order(AbilityCommand("HallucinationZealot", 0)), c_orderQueueAddToEnd);
    Wait(1.0, c_timeGame);
    UnitIssueOrder(UnitFromId(385), Order(AbilityCommand("HallucinationZealot", 0)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(378), Order(AbilityCommand("HallucinationImmortal", 0)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(424), Order(AbilityCommand("HallucinationZealot", 0)), c_orderQueueAddToEnd);
    Wait(1.0, c_timeGame);
    auto56424322_g = UnitGroup(null, gv_pLAYER_02_ZERG, RegionFromId(73), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto56424322_u = UnitGroupCount(auto56424322_g, c_unitCountAll);
    for (;; auto56424322_u -= 1) {
        auto56424322_var = UnitGroupUnitFromEnd(auto56424322_g, auto56424322_u);
        if (auto56424322_var == null) { break; }
        AISetUnitScriptControlled(auto56424322_var, false);
        AIAttackWaveUseUnit(gv_pLAYER_02_ZERG, auto56424322_var);
    }
    AIAttackWaveSetTargetUnitGroup(gv_pLAYER_02_ZERG, UnitGroup(null, gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    AIAttackWaveSend(gv_pLAYER_02_ZERG, 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateSentryHallucinationBattleHard_Init () {
    gt_ActivateSentryHallucinationBattleHard = TriggerCreate("gt_ActivateSentryHallucinationBattleHard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Stalker Rush
//--------------------------------------------------------------------------------------------------
bool gt_ActivateStalkerRush_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto84912346_g;
    int auto84912346_u;
    unit auto84912346_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(52), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto84912346_g = UnitGroup(null, gv_pLAYER_02_ZERG, RegionFromId(53), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto84912346_u = UnitGroupCount(auto84912346_g, c_unitCountAll);
    for (;; auto84912346_u -= 1) {
        auto84912346_var = UnitGroupUnitFromEnd(auto84912346_g, auto84912346_u);
        if (auto84912346_var == null) { break; }
        AISetUnitScriptControlled(auto84912346_var, false);
        AIAttackWaveUseUnit(gv_pLAYER_02_ZERG, auto84912346_var);
    }
    AIAttackWaveSetTargetUnitGroup(gv_pLAYER_02_ZERG, UnitGroup(null, gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    AIAttackWaveSend(gv_pLAYER_02_ZERG, 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateStalkerRush_Init () {
    gt_ActivateStalkerRush = TriggerCreate("gt_ActivateStalkerRush_Func");
    TriggerEnable(gt_ActivateStalkerRush, false);
    TriggerAddEventTimePeriodic(gt_ActivateStalkerRush, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - P5 - Stalker Rush Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionP5StalkerRushQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition03|Line00046", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionP5StalkerRushQ_Init () {
    gt_TransmissionP5StalkerRushQ = TriggerCreate("gt_TransmissionP5StalkerRushQ_Func");
    TriggerAddEventUnitStartedAttack(gt_TransmissionP5StalkerRushQ, UnitRefFromUnit(UnitFromId(530)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Escape Pods Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_FirstEscapePodsWarningQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_tHE_ONE_QUEEN, "zMission_Expedition03|Line00123", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstEscapePodsWarningQ_Init () {
    gt_FirstEscapePodsWarningQ = TriggerCreate("gt_FirstEscapePodsWarningQ_Func");
    TriggerAddEventTimer(gt_FirstEscapePodsWarningQ, gv_escapePodWarningTimers[1]);
    TriggerAddEventTimer(gt_FirstEscapePodsWarningQ, gv_escapePodWarningTimers[2]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Escape Pod 03 Defense
//--------------------------------------------------------------------------------------------------
bool gt_ActivateEscapePod03Defense_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto6DFDDD01_g;
    int auto6DFDDD01_u;
    unit auto6DFDDD01_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(55), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_StartSecondEscapePods, true, false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(55), 10.0, false);
    auto6DFDDD01_g = UnitGroup(null, gv_pLAYER_02_ZERG, RegionFromId(60), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6DFDDD01_u = UnitGroupCount(auto6DFDDD01_g, c_unitCountAll);
    for (;; auto6DFDDD01_u -= 1) {
        auto6DFDDD01_var = UnitGroupUnitFromEnd(auto6DFDDD01_g, auto6DFDDD01_u);
        if (auto6DFDDD01_var == null) { break; }
        AISetUnitScriptControlled(auto6DFDDD01_var, false);
        AIAttackWaveUseUnit(gv_pLAYER_02_ZERG, auto6DFDDD01_var);
    }
    AIAttackWaveSetTargetUnitGroup(gv_pLAYER_02_ZERG, UnitGroup(null, gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    AIAttackWaveSend(gv_pLAYER_02_ZERG, 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateEscapePod03Defense_Init () {
    gt_ActivateEscapePod03Defense = TriggerCreate("gt_ActivateEscapePod03Defense_Func");
    TriggerEnable(gt_ActivateEscapePod03Defense, false);
    TriggerAddEventTimePeriodic(gt_ActivateEscapePod03Defense, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Second Escape Pods
//--------------------------------------------------------------------------------------------------
bool gt_StartSecondEscapePods_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_escapePodUnit[3]), 3.0));
    VisRevealerCreate(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_escapePodUnit[4]), 3.0));
    VisRevealerCreate(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_escapePodUnit[5]), 3.0));
    gf_StartEscapePodTimer(gv_escapePodTimes[1], 3);
    gf_StartEscapePodTimer(gv_escapePodTimes[2], 4);
    gf_StartEscapePodTimer(gv_escapePodTimes[3], 5);
    TriggerExecute(gt_TransmissionP5MoreEscapePodsLaunchingQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartSecondEscapePods_Init () {
    gt_StartSecondEscapePods = TriggerCreate("gt_StartSecondEscapePods_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - P5 - More Escape Pods Launching Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionP5MoreEscapePodsLaunchingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_tHE_ONE_QUEEN, "zMission_Expedition03|Line00061", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionP5MoreEscapePodsLaunchingQ_Init () {
    gt_TransmissionP5MoreEscapePodsLaunchingQ = TriggerCreate("gt_TransmissionP5MoreEscapePodsLaunchingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - P5 - Escape Pod 03 Defense Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionP5EscapePod03DefenseQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition03|Line00047", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionP5EscapePod03DefenseQ_Init () {
    gt_TransmissionP5EscapePod03DefenseQ = TriggerCreate("gt_TransmissionP5EscapePod03DefenseQ_Func");
    TriggerAddEventUnitStartedAttack(gt_TransmissionP5EscapePod03DefenseQ, UnitRefFromUnit(UnitFromId(354)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bridge Ramp - Protoss Block Behavior
//--------------------------------------------------------------------------------------------------
bool gt_BridgeRampProtossBlockBehavior_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_sentryLeft;
    unit lv_sentryRight;
    unit lv_highTemplar;
    point lv_sentryTopPosition;
    point lv_sentryBottomPosition;
    point lv_highTemplarPosition;
    bool lv_broken;
    int lv_psiCooldown;

    // Automatic Variable Declarations
    unitgroup autoFED7734A_g;
    int autoFED7734A_u;
    unit autoFED7734A_var;

    // Variable Initialization
    lv_sentryLeft = UnitFromId(403);
    lv_sentryRight = UnitFromId(402);
    lv_highTemplar = UnitFromId(664);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_sentryTopPosition = UnitGetPosition(lv_sentryLeft);
    lv_sentryBottomPosition = UnitGetPosition(lv_sentryRight);
    lv_highTemplarPosition = UnitGetPosition(lv_highTemplar);
    UnitIssueOrder(lv_highTemplar, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    while (true) {
        Wait(1.0, c_timeGame);
        if (((gv_gameOver == true) || ((UnitIsAlive(lv_sentryLeft) == false) && (UnitIsAlive(lv_sentryRight) == false) && (UnitIsAlive(lv_highTemplar) == false)))) {
            return true;
        }

        if ((lv_psiCooldown > 0)) {
            lv_psiCooldown -= 1;
        }

        if ((UnitIsAlive(lv_sentryLeft) == true)) {
            if ((UnitGetPropertyFixed(lv_sentryLeft, c_unitPropEnergy, c_unitPropCurrent) >= 30.0) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(50), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0) && (UnitGroupCount(UnitGroup("ForceField", c_playerAny, RegionCircle(PointFromId(537), 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0)) {
                UnitIssueOrder(lv_sentryLeft, OrderTargetingPoint(AbilityCommand("ForceField", 0), PointFromId(537)), c_orderQueueReplace);
            }
            else {
                if ((RegionContainsPoint(RegionCircle(lv_sentryTopPosition, 1.0), UnitGetPosition(lv_sentryLeft)) == false)) {
                    UnitIssueOrder(lv_sentryLeft, OrderTargetingPoint(AbilityCommand("attack", 0), lv_sentryTopPosition), c_orderQueueReplace);
                }

            }
        }

        if ((UnitIsAlive(lv_sentryRight) == true)) {
            if ((UnitGetPropertyFixed(lv_sentryRight, c_unitPropEnergy, c_unitPropCurrent) >= 30.0) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(50), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0) && (UnitGroupCount(UnitGroup("ForceField", c_playerAny, RegionCircle(PointFromId(536), 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0)) {
                UnitIssueOrder(lv_sentryRight, OrderTargetingPoint(AbilityCommand("ForceField", 0), PointFromId(536)), c_orderQueueReplace);
            }
            else {
                if ((RegionContainsPoint(RegionCircle(lv_sentryBottomPosition, 1.0), UnitGetPosition(lv_sentryRight)) == false)) {
                    UnitIssueOrder(lv_sentryRight, OrderTargetingPoint(AbilityCommand("attack", 0), lv_sentryBottomPosition), c_orderQueueReplace);
                }

            }
        }

        if ((UnitIsAlive(lv_highTemplar) == true) && (UnitGetPropertyFixed(lv_highTemplar, c_unitPropEnergy, c_unitPropCurrent) >= 75.0) && (lv_psiCooldown == 0) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lv_highTemplar), 7.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
            lv_broken = false;
            autoFED7734A_g = UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lv_highTemplar), 7.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoFED7734A_u = UnitGroupCount(autoFED7734A_g, c_unitCountAll);
            for (;; autoFED7734A_u -= 1) {
                autoFED7734A_var = UnitGroupUnitFromEnd(autoFED7734A_g, autoFED7734A_u);
                if (autoFED7734A_var == null) { break; }
                if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(autoFED7734A_var), 1.5), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 3), c_unitCountAlive) > 2)) {
                    UnitIssueOrder(lv_highTemplar, OrderTargetingPoint(AbilityCommand("PsiStorm", 0), UnitGetPosition(autoFED7734A_var)), c_orderQueueReplace);
                    UnitIssueOrder(lv_highTemplar, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
                    lv_psiCooldown = 10;
                    lv_broken = true;
                    break;
                }

            }
            if ((lv_broken == false) && (RegionContainsPoint(RegionCircle(lv_highTemplarPosition, 1.0), UnitGetPosition(lv_highTemplar)) == false)) {
                UnitIssueOrder(lv_highTemplar, OrderTargetingPoint(AbilityCommand("move", 0), lv_highTemplarPosition), c_orderQueueReplace);
            }

        }
        else {
            if ((UnitIsAlive(lv_highTemplar) == true) && (RegionContainsPoint(RegionCircle(lv_highTemplarPosition, 1.0), UnitGetPosition(lv_highTemplar)) == false)) {
                UnitIssueOrder(lv_highTemplar, OrderTargetingPoint(AbilityCommand("move", 0), lv_highTemplarPosition), c_orderQueueReplace);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeRampProtossBlockBehavior_Init () {
    gt_BridgeRampProtossBlockBehavior = TriggerCreate("gt_BridgeRampProtossBlockBehavior_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Second Escape Pods Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_SecondEscapePodsWarningQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_tHE_ONE_QUEEN, "zMission_Expedition03|Line00124", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SecondEscapePodsWarningQ_Init () {
    gt_SecondEscapePodsWarningQ = TriggerCreate("gt_SecondEscapePodsWarningQ_Func");
    TriggerAddEventTimer(gt_SecondEscapePodsWarningQ, gv_escapePodWarningTimers[3]);
    TriggerAddEventTimer(gt_SecondEscapePodsWarningQ, gv_escapePodWarningTimers[4]);
    TriggerAddEventTimer(gt_SecondEscapePodsWarningQ, gv_escapePodWarningTimers[5]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Escape Pod 04 Defense
//--------------------------------------------------------------------------------------------------
bool gt_ActivateEscapePod04Defense_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoE287B322_g;
    int autoE287B322_u;
    unit autoE287B322_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(59), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(59), 10.0, false);
    autoE287B322_g = UnitGroup(null, gv_pLAYER_02_ZERG, RegionFromId(61), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE287B322_u = UnitGroupCount(autoE287B322_g, c_unitCountAll);
    for (;; autoE287B322_u -= 1) {
        autoE287B322_var = UnitGroupUnitFromEnd(autoE287B322_g, autoE287B322_u);
        if (autoE287B322_var == null) { break; }
        AISetUnitScriptControlled(autoE287B322_var, false);
        AIAttackWaveUseUnit(gv_pLAYER_02_ZERG, autoE287B322_var);
    }
    AIAttackWaveSetTargetUnitGroup(gv_pLAYER_02_ZERG, UnitGroup(null, gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    AIAttackWaveSend(gv_pLAYER_02_ZERG, 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateEscapePod04Defense_Init () {
    gt_ActivateEscapePod04Defense = TriggerCreate("gt_ActivateEscapePod04Defense_Func");
    TriggerEnable(gt_ActivateEscapePod04Defense, false);
    TriggerAddEventTimePeriodic(gt_ActivateEscapePod04Defense, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - P5 - Escape Pod 04 Defense Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionP5EscapePod04DefenseQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition03|Line00048", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionP5EscapePod04DefenseQ_Init () {
    gt_TransmissionP5EscapePod04DefenseQ = TriggerCreate("gt_TransmissionP5EscapePod04DefenseQ_Func");
    TriggerAddEventUnitStartedAttack(gt_TransmissionP5EscapePod04DefenseQ, UnitRefFromUnit(UnitFromId(356)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Bridge Finale Protoss
//--------------------------------------------------------------------------------------------------
bool gt_ActivateBridgeFinaleProtoss_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto51C9FA75_g;
    int auto51C9FA75_u;
    unit auto51C9FA75_var;
    unitgroup auto40470168_g;
    int auto40470168_u;
    unit auto40470168_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(65), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(5), 10.0, false);
    UnitIssueOrder(UnitFromId(634), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(665), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(634), OrderTargetingUnit(AbilityCommand("ArchonWarp", 1), UnitFromId(665)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(665), OrderTargetingUnit(AbilityCommand("ArchonWarp", 1), UnitFromId(634)), c_orderQueueAddToEnd);
    Wait(0.2, c_timeGame);
    auto51C9FA75_g = UnitGroup("Zealot", gv_pLAYER_02_ZERG, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto51C9FA75_u = UnitGroupCount(auto51C9FA75_g, c_unitCountAll);
    for (;; auto51C9FA75_u -= 1) {
        auto51C9FA75_var = UnitGroupUnitFromEnd(auto51C9FA75_g, auto51C9FA75_u);
        if (auto51C9FA75_var == null) { break; }
        AISetUnitScriptControlled(auto51C9FA75_var, false);
        AIAttackWaveUseUnit(gv_pLAYER_02_ZERG, auto51C9FA75_var);
    }
    auto40470168_g = UnitGroup("Archon", gv_pLAYER_02_ZERG, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto40470168_u = UnitGroupCount(auto40470168_g, c_unitCountAll);
    for (;; auto40470168_u -= 1) {
        auto40470168_var = UnitGroupUnitFromEnd(auto40470168_g, auto40470168_u);
        if (auto40470168_var == null) { break; }
        AISetUnitScriptControlled(auto40470168_var, false);
        AIAttackWaveUseUnit(gv_pLAYER_02_ZERG, auto40470168_var);
    }
    AIAttackWaveSetTargetUnitGroup(gv_pLAYER_02_ZERG, UnitGroup(null, gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    AIAttackWaveSend(gv_pLAYER_02_ZERG, 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateBridgeFinaleProtoss_Init () {
    gt_ActivateBridgeFinaleProtoss = TriggerCreate("gt_ActivateBridgeFinaleProtoss_Func");
    TriggerEnable(gt_ActivateBridgeFinaleProtoss, false);
    TriggerAddEventTimePeriodic(gt_ActivateBridgeFinaleProtoss, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - P5 - Protoss End Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionP5ProtossEndQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZExpedition03MusicEvent05_LastStand", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition03|Line00051", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_LeavePortraitVisibleAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_tHE_ONE_QUEEN, "zMission_Expedition03|Line00049", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition03|Line00045", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionP5ProtossEndQ_Init () {
    gt_TransmissionP5ProtossEndQ = TriggerCreate("gt_TransmissionP5ProtossEndQ_Func");
    TriggerAddEventUnitStartedAttack(gt_TransmissionP5ProtossEndQ, UnitRefFromUnit(UnitFromId(626)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escape Pod Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_EscapePodDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_escapePodPeopleRemaining -= 5;
    if ((UnitGroupCount(gv_protossEscapePods, c_unitCountAlive) == 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_ObjectiveDestroyEscapePodsComplete, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapePodDestroyed_Init () {
    gt_EscapePodDestroyed = TriggerCreate("gt_EscapePodDestroyed_Func");
    TriggerAddEventUnitDied(gt_EscapePodDestroyed, UnitRefFromUnit(UnitFromId(521)));
    TriggerAddEventUnitDied(gt_EscapePodDestroyed, UnitRefFromUnit(UnitFromId(528)));
    TriggerAddEventUnitDied(gt_EscapePodDestroyed, UnitRefFromUnit(UnitFromId(340)));
    TriggerAddEventUnitDied(gt_EscapePodDestroyed, UnitRefFromUnit(UnitFromId(523)));
    TriggerAddEventUnitDied(gt_EscapePodDestroyed, UnitRefFromUnit(UnitFromId(534)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escape Pod Launched - Game Over
//--------------------------------------------------------------------------------------------------
bool gt_EscapePodLaunchedGameOver_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto4B9ACA41_ae = 5;
    int auto4B9ACA41_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto4B9ACA41_var = 1;
    for ( ; auto4B9ACA41_var <= auto4B9ACA41_ae; auto4B9ACA41_var += 1 ) {
        if ((EventTimer() == gv_escapePodTimers[auto4B9ACA41_var])) {
            libNtve_gf_MakeUnitInvulnerable(gv_escapePodUnit[auto4B9ACA41_var], true);
            UnitSetState(gv_escapePodUnit[auto4B9ACA41_var], c_unitStateTargetable, false);
            TriggerExecute(gt_DefeatEscapePodLaunches, true, false);
            VisRevealerCreate(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_escapePodUnit[auto4B9ACA41_var]), 10.0));
            CameraPan(gv_pLAYER_01_USER, PointWithOffsetPolar(UnitGetPosition(gv_escapePodUnit[auto4B9ACA41_var]), -5.0, UnitGetFacing(gv_escapePodUnit[auto4B9ACA41_var])), 2.0, -1, 10.0, false);
            Wait(2.5, c_timeGame);
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_escapePodUnit[auto4B9ACA41_var]), c_animNameDefault, "Stand Work Start", 0, c_animTimeDefault);
            Wait(1.0, c_timeGame);
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_escapePodUnit[auto4B9ACA41_var]), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapePodLaunchedGameOver_Init () {
    gt_EscapePodLaunchedGameOver = TriggerCreate("gt_EscapePodLaunchedGameOver_Func");
    TriggerAddEventTimer(gt_EscapePodLaunchedGameOver, gv_escapePodTimers[1]);
    TriggerAddEventTimer(gt_EscapePodLaunchedGameOver, gv_escapePodTimers[2]);
    TriggerAddEventTimer(gt_EscapePodLaunchedGameOver, gv_escapePodTimers[3]);
    TriggerAddEventTimer(gt_EscapePodLaunchedGameOver, gv_escapePodTimers[4]);
    TriggerAddEventTimer(gt_EscapePodLaunchedGameOver, gv_escapePodTimers[5]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Mission Help Q
//--------------------------------------------------------------------------------------------------
bool gt_TipMissionHelpQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_DisplayMissionTip(StringExternal("Param/Value/882040D5"));
    Wait(libSwaC_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipMissionHelpQ_Init () {
    gt_TipMissionHelpQ = TriggerCreate("gt_TipMissionHelpQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CampaignInitAI();
    AISetDifficulty(gv_pLAYER_02_ZERG, c_diffNormalVision, true);
    AIToggleBulliesInRegion(gv_pLAYER_02_ZERG, RegionEntireMap(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Minerals
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveMinerals_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveMinerals_Init () {
    gt_AIGiveMinerals = TriggerCreate("gt_AIGiveMinerals_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_pLAYER_02_ZERG, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Gas
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveGas_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveGas_Init () {
    gt_AIGiveGas = TriggerCreate("gt_AIGiveGas_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_pLAYER_02_ZERG, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Number of Units Spawned
//--------------------------------------------------------------------------------------------------
bool gt_NumberofUnitsSpawned_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_numberOfUnitsSpawned += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NumberofUnitsSpawned_Init () {
    gt_NumberofUnitsSpawned = TriggerCreate("gt_NumberofUnitsSpawned_Func");
    TriggerAddEventUnitTrainProgress(gt_NumberofUnitsSpawned, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enemy Dies
//--------------------------------------------------------------------------------------------------
bool gt_EnemyDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == false))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnit()), gv_pLAYER_01_USER, libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }

        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetType(libNtve_gf_KillingUnit()) == "Zergling") || (UnitGetType(libNtve_gf_KillingUnit()) == "HotSRaptor") || (UnitGetType(libNtve_gf_KillingUnit()) == "HotSSwarmling"))) {
        gv_zerglingKills += 1;
        return true;
    }

    if (((UnitGetType(libNtve_gf_KillingUnit()) == "Roach") || (UnitGetType(libNtve_gf_KillingUnit()) == "RoachCorpser") || (UnitGetType(libNtve_gf_KillingUnit()) == "RoachVile"))) {
        gv_roachKills += 1;
        return true;
    }

    if (((UnitGetType(libNtve_gf_KillingUnit()) == "Hydralisk") || (UnitGetType(libNtve_gf_KillingUnit()) == "HydraliskImpaler") || (UnitGetType(libNtve_gf_KillingUnit()) == "HydraliskLurker"))) {
        gv_hydraliskKills += 1;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnemyDies_Init () {
    gt_EnemyDies = TriggerCreate("gt_EnemyDies_Func");
    TriggerAddEventUnitDied(gt_EnemyDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Biomass Collected
//--------------------------------------------------------------------------------------------------
bool gt_AchievementBiomassCollected_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AchievementTermQuantitySet(1, "ZKaldir03_2", PlayerGetPropertyInt(EventPlayer(), c_playerPropCustomCollected));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementBiomassCollected_Init () {
    gt_AchievementBiomassCollected = TriggerCreate("gt_AchievementBiomassCollected_Func");
    TriggerAddEventPlayerPropChange(gt_AchievementBiomassCollected, gv_pLAYER_01_USER, c_playerPropCustomCollected);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Escape Pod Time N/H
//--------------------------------------------------------------------------------------------------
bool gt_AchievementEscapePodTimeNH_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gf_LowestEscapePodTime() > 20)) {
        libSwaC_gf_CampaignAwardAchievement("ZKaldir03_3", gv_pLAYER_01_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementEscapePodTimeNH_Init () {
    gt_AchievementEscapePodTimeNH = TriggerCreate("gt_AchievementEscapePodTimeNH_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Ursadon Kills H
//--------------------------------------------------------------------------------------------------
bool gt_AchievementUrsadonKillsH_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(libNtve_gf_KillingUnit()) == "GiantYeti"))) {
            return false;
        }

        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_ZERG))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_ursadonKills += 1;
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        AchievementTermQuantitySet(gv_pLAYER_01_USER, "Mastery_Kaldir3", gv_ursadonKills);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementUrsadonKillsH_Init () {
    gt_AchievementUrsadonKillsH = TriggerCreate("gt_AchievementUrsadonKillsH_Func");
    TriggerAddEventUnitDied(gt_AchievementUrsadonKillsH, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Larval Queen Dies
//--------------------------------------------------------------------------------------------------
bool gt_DefeatLarvalQueenDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerExecute(gt_ObjectiveFindSafePlaceFailed, true, false);
    Wait(2.0, c_timeReal);
    libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), libSwaC_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/2B13A303"), libSwaC_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatLarvalQueenDies_Init () {
    gt_DefeatLarvalQueenDies = TriggerCreate("gt_DefeatLarvalQueenDies_Func");
    TriggerAddEventUnitDied(gt_DefeatLarvalQueenDies, UnitRefFromVariable("gv_tHE_ONE_QUEEN"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Swarm Queen Dies
//--------------------------------------------------------------------------------------------------
bool gt_DefeatSwarmQueenDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerExecute(gt_ObjectiveSwarmQueenSurvivalFailed, true, false);
    Wait(2.0, c_timeReal);
    libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), libSwaC_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/AFAB329E"), libSwaC_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatSwarmQueenDies_Init () {
    gt_DefeatSwarmQueenDies = TriggerCreate("gt_DefeatSwarmQueenDies_Func");
    TriggerEnable(gt_DefeatSwarmQueenDies, false);
    TriggerAddEventUnitDied(gt_DefeatSwarmQueenDies, UnitRefFromVariable("gv_tHE_ONE_QUEEN"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Escape Pod Launches
//--------------------------------------------------------------------------------------------------
bool gt_DefeatEscapePodLaunches_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.5, c_timeGame);
    TriggerExecute(gt_ObjectiveDestroyEscapePodsFailed, true, false);
    Wait(2.0, c_timeReal);
    libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), libSwaC_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/CADA346E"), libSwaC_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatEscapePodLaunches_Init () {
    gt_DefeatEscapePodLaunches = TriggerCreate("gt_DefeatEscapePodLaunches_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Main Objectives Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryMainObjectivesCompleted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryMainObjectivesCompleted_Init () {
    gt_VictoryMainObjectivesCompleted = TriggerCreate("gt_VictoryMainObjectivesCompleted_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    libNtve_gf_MakeUnitInvulnerable(gv_tHE_ONE_QUEEN, true);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveSwarmQueenSurvivalComplete, true, false);
    TriggerExecute(gt_ObjectiveDestroytheProtossComplete, true, true);
    libSwaC_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((ObjectiveGetState(gv_objectiveDestroyDominionBase22) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objectiveDestroyDominionBase32222) == c_objectiveStateCompleted)) {
        libSwaC_gf_CampaignAwardAchievement("ZKaldir03_1", gv_pLAYER_01_USER);
    }

    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (GameGetMissionTime() < 781.0)) {
        libSwaC_gf_CampaignAwardAchievement("Anniversary_ZExpedition03", gv_pLAYER_01_USER);
        TriggerDebugOutput(1, StringExternal("Param/Value/3E937DF7"), false);
    }

    TriggerExecute(gt_AchievementEscapePodTimeNH, true, false);
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/EA5E58DA"), IntToText(gv_ursadonKills));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/0EB5D646"), IntToText(PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropCustomCollected)));
    TextExpressionSetToken("Param/Expression/4445BE7B", "A", IntToText(gf_LowestEscapePodTime()));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/1125924E"), TextExpressionAssemble("Param/Expression/4445BE7B"));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/2F97BD64"), IntToText(gv_zerglingKills));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/53C63134"), IntToText(gv_roachKills));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/7155F3AB"), IntToText(gv_hydraliskKills));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/99799BED"), IntToText(gv_numberOfUnitsSpawned));
    libSwaC_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_Defeat, false);
    TriggerEnable(gt_DefeatCheat, false);
    gv_gameOver = true;
    libSwaC_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_Victory, false);
    TriggerEnable(gt_VictoryCheat, false);
    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy the Protoss Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroytheProtossCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZExpedition03Objective01");
    gv_objectiveDestroyDominionBase22 = ObjectiveLastCreated();
    ObjectiveSetPriority(gv_objectiveDestroyDominionBase22, 1);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroytheProtossCreate_Init () {
    gt_ObjectiveDestroytheProtossCreate = TriggerCreate("gt_ObjectiveDestroytheProtossCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy the Protoss Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroytheProtossCreateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveDestroytheProtossCreate, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroytheProtossCreateQ_Init () {
    gt_ObjectiveDestroytheProtossCreateQ = TriggerCreate("gt_ObjectiveDestroytheProtossCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy the Protoss Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroytheProtossComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroytheProtossCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZExpedition03Objective01", libSwaC_ge_MissionObjectiveState_Completed);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroytheProtossComplete_Init () {
    gt_ObjectiveDestroytheProtossComplete = TriggerCreate("gt_ObjectiveDestroytheProtossComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy the Protoss Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroytheProtossFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroytheProtossCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZExpedition03Objective01", libSwaC_ge_MissionObjectiveState_Failed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroytheProtossFailed_Init () {
    gt_ObjectiveDestroytheProtossFailed = TriggerCreate("gt_ObjectiveDestroytheProtossFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Swarm Queen Survival Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSwarmQueenSurvivalCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZExpedition03Objective02");
    gv_objectiveDestroyDominionBase222 = ObjectiveLastCreated();
    ObjectiveSetPriority(gv_objectiveDestroyDominionBase222, 0);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSwarmQueenSurvivalCreate_Init () {
    gt_ObjectiveSwarmQueenSurvivalCreate = TriggerCreate("gt_ObjectiveSwarmQueenSurvivalCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Swarm Queen Survival Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSwarmQueenSurvivalCreateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveSwarmQueenSurvivalCreate, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSwarmQueenSurvivalCreateQ_Init () {
    gt_ObjectiveSwarmQueenSurvivalCreateQ = TriggerCreate("gt_ObjectiveSwarmQueenSurvivalCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Swarm Queen Survival Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSwarmQueenSurvivalComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveSwarmQueenSurvivalCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZExpedition03Objective02", libSwaC_ge_MissionObjectiveState_Completed);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSwarmQueenSurvivalComplete_Init () {
    gt_ObjectiveSwarmQueenSurvivalComplete = TriggerCreate("gt_ObjectiveSwarmQueenSurvivalComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Swarm Queen Survival Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSwarmQueenSurvivalFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveSwarmQueenSurvivalCreate, true, false);
    if ((ObjectiveGetState(gv_objectiveDestroyDominionBase3222) == c_objectiveStateActive)) {
        TriggerExecute(gt_ObjectiveEscapeFailed, true, false);
    }

    libSwaC_gf_ZS_SetMissionObjectiveState("ZExpedition03Objective02", libSwaC_ge_MissionObjectiveState_Failed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSwarmQueenSurvivalFailed_Init () {
    gt_ObjectiveSwarmQueenSurvivalFailed = TriggerCreate("gt_ObjectiveSwarmQueenSurvivalFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Gain Biomass Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveGainBiomassCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZExpedition03Objective03");
    libSwaC_gf_SetMissionObjectiveProgress2("ZExpedition03Objective03", PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropCustom), true, null, true);
    gv_objectiveDestroyDominionBase2 = ObjectiveLastCreated();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveGainBiomassCreate_Init () {
    gt_ObjectiveGainBiomassCreate = TriggerCreate("gt_ObjectiveGainBiomassCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Gain Biomass Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveGainBiomassComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveGainBiomassCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZExpedition03Objective03", libSwaC_ge_MissionObjectiveState_Completed);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveGainBiomassComplete_Init () {
    gt_ObjectiveGainBiomassComplete = TriggerCreate("gt_ObjectiveGainBiomassComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Gain Biomass Complete Hide Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveGainBiomassCompleteHideQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_ZS_SetMissionObjectiveState("ZExpedition03Objective03", libSwaC_ge_MissionObjectiveState_Undiscovered);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveGainBiomassCompleteHideQ_Init () {
    gt_ObjectiveGainBiomassCompleteHideQ = TriggerCreate("gt_ObjectiveGainBiomassCompleteHideQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Gain Biomass Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveGainBiomassFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveGainBiomassCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZExpedition03Objective03", libSwaC_ge_MissionObjectiveState_Failed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveGainBiomassFailed_Init () {
    gt_ObjectiveGainBiomassFailed = TriggerCreate("gt_ObjectiveGainBiomassFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Find Safe Place Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFindSafePlaceCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZExpedition03Objective09");
    gv_objectiveDestroyDominionBase23 = ObjectiveLastCreated();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFindSafePlaceCreate_Init () {
    gt_ObjectiveFindSafePlaceCreate = TriggerCreate("gt_ObjectiveFindSafePlaceCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Find Safe Place Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFindSafePlaceComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveFindSafePlaceCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZExpedition03Objective09", libSwaC_ge_MissionObjectiveState_Completed);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFindSafePlaceComplete_Init () {
    gt_ObjectiveFindSafePlaceComplete = TriggerCreate("gt_ObjectiveFindSafePlaceComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Find Safe Place Complete Hide Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFindSafePlaceCompleteHideQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_ZS_SetMissionObjectiveState("ZExpedition03Objective09", libSwaC_ge_MissionObjectiveState_Undiscovered);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFindSafePlaceCompleteHideQ_Init () {
    gt_ObjectiveFindSafePlaceCompleteHideQ = TriggerCreate("gt_ObjectiveFindSafePlaceCompleteHideQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Find Safe Place Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFindSafePlaceFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveFindSafePlaceCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZExpedition03Objective09", libSwaC_ge_MissionObjectiveState_Failed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFindSafePlaceFailed_Init () {
    gt_ObjectiveFindSafePlaceFailed = TriggerCreate("gt_ObjectiveFindSafePlaceFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Grow Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveGrowCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZExpedition03Objective08");
    gv_objectiveDestroyDominionBase232 = ObjectiveLastCreated();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveGrowCreate_Init () {
    gt_ObjectiveGrowCreate = TriggerCreate("gt_ObjectiveGrowCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Grow Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveGrowComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveGrowCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZExpedition03Objective08", libSwaC_ge_MissionObjectiveState_Completed);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveGrowComplete_Init () {
    gt_ObjectiveGrowComplete = TriggerCreate("gt_ObjectiveGrowComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Grow Complete Hide Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveGrowCompleteHideQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_ZS_SetMissionObjectiveState("ZExpedition03Objective08", libSwaC_ge_MissionObjectiveState_Undiscovered);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveGrowCompleteHideQ_Init () {
    gt_ObjectiveGrowCompleteHideQ = TriggerCreate("gt_ObjectiveGrowCompleteHideQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Grow Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveGrowFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveGrowCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZExpedition03Objective08", libSwaC_ge_MissionObjectiveState_Failed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveGrowFailed_Init () {
    gt_ObjectiveGrowFailed = TriggerCreate("gt_ObjectiveGrowFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Warp Drive Create Hidden
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyWarpDriveCreateHidden_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZExpedition03Objective05");
    gv_objectiveDestroyDominionBase322 = ObjectiveLastCreated();
    libSwaC_gf_ZS_SetMissionObjectiveState("ZExpedition03Objective05", libSwaC_ge_MissionObjectiveState_Undiscovered);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyWarpDriveCreateHidden_Init () {
    gt_ObjectiveDestroyWarpDriveCreateHidden = TriggerCreate("gt_ObjectiveDestroyWarpDriveCreateHidden_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Warp Drive Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyWarpDriveComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyWarpDriveCreateHidden, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZExpedition03Objective05", libSwaC_ge_MissionObjectiveState_Completed);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyWarpDriveComplete_Init () {
    gt_ObjectiveDestroyWarpDriveComplete = TriggerCreate("gt_ObjectiveDestroyWarpDriveComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Warp Drive Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyWarpDriveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyWarpDriveCreateHidden, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZExpedition03Objective05", libSwaC_ge_MissionObjectiveState_Failed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyWarpDriveFailed_Init () {
    gt_ObjectiveDestroyWarpDriveFailed = TriggerCreate("gt_ObjectiveDestroyWarpDriveFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Escape Create Hidden
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveEscapeCreateHidden_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZExpedition03Objective06");
    gv_objectiveDestroyDominionBase3222 = ObjectiveLastCreated();
    libSwaC_gf_ZS_SetMissionObjectiveState("ZExpedition03Objective06", libSwaC_ge_MissionObjectiveState_Undiscovered);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveEscapeCreateHidden_Init () {
    gt_ObjectiveEscapeCreateHidden = TriggerCreate("gt_ObjectiveEscapeCreateHidden_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Escape Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveEscapeComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveEscapeCreateHidden, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZExpedition03Objective06", libSwaC_ge_MissionObjectiveState_Completed);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveEscapeComplete_Init () {
    gt_ObjectiveEscapeComplete = TriggerCreate("gt_ObjectiveEscapeComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Escape Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveEscapeFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveEscapeCreateHidden, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZExpedition03Objective06", libSwaC_ge_MissionObjectiveState_Failed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveEscapeFailed_Init () {
    gt_ObjectiveEscapeFailed = TriggerCreate("gt_ObjectiveEscapeFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Escape Pods Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyEscapePodsCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZExpedition03Objective07");
    gv_objectiveDestroyDominionBase32222 = ObjectiveLastCreated();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyEscapePodsCreate_Init () {
    gt_ObjectiveDestroyEscapePodsCreate = TriggerCreate("gt_ObjectiveDestroyEscapePodsCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Escape Pods Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyEscapePodsCreateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveDestroyEscapePodsCreate, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyEscapePodsCreateQ_Init () {
    gt_ObjectiveDestroyEscapePodsCreateQ = TriggerCreate("gt_ObjectiveDestroyEscapePodsCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Escape Pods Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyEscapePodsComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyEscapePodsCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZExpedition03Objective07", libSwaC_ge_MissionObjectiveState_Completed);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyEscapePodsComplete_Init () {
    gt_ObjectiveDestroyEscapePodsComplete = TriggerCreate("gt_ObjectiveDestroyEscapePodsComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Escape Pods Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyEscapePodsFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyEscapePodsCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZExpedition03Objective07", libSwaC_ge_MissionObjectiveState_Failed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyEscapePodsFailed_Init () {
    gt_ObjectiveDestroyEscapePodsFailed = TriggerCreate("gt_ObjectiveDestroyEscapePodsFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Infest Giant Ursadon Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveInfestGiantUrsadonCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZExpedition03Objective010");
    gv_objectiveDestroyDominionBase323 = ObjectiveLastCreated();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveInfestGiantUrsadonCreate_Init () {
    gt_ObjectiveInfestGiantUrsadonCreate = TriggerCreate("gt_ObjectiveInfestGiantUrsadonCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Infest Giant Ursadon Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveInfestGiantUrsadonCreateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveInfestGiantUrsadonCreate, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveInfestGiantUrsadonCreateQ_Init () {
    gt_ObjectiveInfestGiantUrsadonCreateQ = TriggerCreate("gt_ObjectiveInfestGiantUrsadonCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Infest Giant Ursadon Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveInfestGiantUrsadonComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveInfestGiantUrsadonCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZExpedition03Objective010", libSwaC_ge_MissionObjectiveState_Completed);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveInfestGiantUrsadonComplete_Init () {
    gt_ObjectiveInfestGiantUrsadonComplete = TriggerCreate("gt_ObjectiveInfestGiantUrsadonComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Infest Giant Ursadon Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveInfestGiantUrsadonFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveInfestGiantUrsadonCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZExpedition03Objective010", libSwaC_ge_MissionObjectiveState_Failed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveInfestGiantUrsadonFailed_Init () {
    gt_ObjectiveInfestGiantUrsadonFailed = TriggerCreate("gt_ObjectiveInfestGiantUrsadonFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoC8C450B2_g;
    int autoC8C450B2_u;
    unit autoC8C450B2_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UnitPauseAll(true);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_pLAYER_02_ZERG, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_pLAYER_02_ZERG2, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_pLAYER_02_ZERG22, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    autoC8C450B2_g = gv_cinematicHiddenUnits;
    autoC8C450B2_u = UnitGroupCount(autoC8C450B2_g, c_unitCountAll);
    for (;; autoC8C450B2_u -= 1) {
        autoC8C450B2_var = UnitGroupUnitFromEnd(autoC8C450B2_g, autoC8C450B2_u);
        if (autoC8C450B2_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoC8C450B2_var, false);
    }
    gv_introLasarra = UnitFromId(88);
    UnitGroupAdd(gv_cinematicTempUnits, gv_introLasarra);
    libNtve_gf_PauseUnit(gv_introLasarra, false);
    libNtve_gf_PauseUnit(gv_tHE_ONE_QUEEN, false);
    UnitSetPropertyFixed(gv_introLasarra, c_unitPropMovementSpeed, 0.9);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_lasarraPosition;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(698), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1045), 10.0, -1, 10.0, true);
    TriggerExecute(gt_IntroMusic, true, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    Wait(8.0, c_timeReal);
    libNtve_gf_CreateModelAtPoint("LasarraWarpIn", UnitGetPosition(gv_introLasarra));
    gv_warpInActor = libNtve_gf_ActorLastCreated();
    ActorSend(gv_warpInActor, libNtve_gf_SetFacing(405.0));
    SoundPlay(SoundLink("Event_Exp3_LassaraWarpInStart", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introWarpSound1 = SoundLastPlayed();
    SoundPlay(SoundLink("Event_Exp3_LassaraWarpInFinish", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introWarpSound2 = SoundLastPlayed();
    Wait(2.0, c_timeGame);
    SoundPlay(SoundLink("Event_Exp3_LassaraWarpInFinish", -1), PlayerGroupAll(), 0.0, 0.0);
    gv_introWarpSound1 = SoundLastPlayed();
    libNtve_gf_KillModel(gv_warpInActor);
    libNtve_gf_ShowHideUnit(gv_introLasarra, true);
    gv_lasarraActor = libNtve_gf_MainActorofUnit(gv_introLasarra);
    UnitIssueOrder(gv_introLasarra, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(704)), c_orderQueueReplace);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicInTransmission);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 1.0);
    Wait(0.5, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(808), 3.0, -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(gv_introLasarra, "zBriefing_Expedition03|Line00001", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    SoundPlay(SoundLink("Event_Exp3_KerriganEyeFlare", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introKerriganSound = SoundLastPlayed();
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Expedition03|Line00002", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    lv_lasarraPosition = UnitGetPosition(gv_introLasarra);
    UnitKill(gv_introLasarra);
    Wait(0.5, c_timeGame);
    Wait(2.0, c_timeGame);
    SoundPlay(SoundLink("Event_Exp3_LassaraDeathEffect", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introDeathSound = SoundLastPlayed();
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Expedition03|Line00003", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(0.5, c_timeGame);
    libNtve_gf_ShowHideUnit(gv_tHE_ONE_QUEEN, true);
    UnitIssueOrder(gv_tHE_ONE_QUEEN, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(807)), c_orderQueueReplace);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(809), 1.0, -1, 10.0, true);
    Wait(1.5, c_timeReal);
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(810), (SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Expedition03|Line00004", true), c_soundIndexAny)) + (SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Expedition03|Line00006", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Expedition03|Line00007", true), c_soundIndexAny)))), -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Expedition03|Line00004", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Expedition03|Line00006", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Expedition03|Line00007", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;
    unit lv_tHE_CHOSEN_ANIMAL;

    // Automatic Variable Declarations
    unitgroup autoE49EDB9A_g;
    int autoE49EDB9A_u;
    unit autoE49EDB9A_var;
    unitgroup auto3CA58AD0_g;
    int auto3CA58AD0_u;
    unit auto3CA58AD0_var;
    unitgroup auto5794CDF8_g;
    int auto5794CDF8_u;
    unit auto5794CDF8_var;
    unitgroup auto82C8B828_g;
    int auto82C8B828_u;
    unit auto82C8B828_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_introMusicCompleted == false)) {
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    }

    autoE49EDB9A_g = gv_cinematicHiddenUnits;
    autoE49EDB9A_u = UnitGroupCount(autoE49EDB9A_g, c_unitCountAll);
    for (;; autoE49EDB9A_u -= 1) {
        autoE49EDB9A_var = UnitGroupUnitFromEnd(autoE49EDB9A_g, autoE49EDB9A_u);
        if (autoE49EDB9A_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoE49EDB9A_var, true);
    }
    libNtve_gf_KillModel(gv_warpInActor);
    UnitPauseAll(false);
    auto3CA58AD0_g = UnitGroup(null, gv_pLAYER_02_ZERG, RegionFromId(41), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3CA58AD0_u = UnitGroupCount(auto3CA58AD0_g, c_unitCountAll);
    for (;; auto3CA58AD0_u -= 1) {
        auto3CA58AD0_var = UnitGroupUnitFromEnd(auto3CA58AD0_g, auto3CA58AD0_u);
        if (auto3CA58AD0_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto3CA58AD0_var, false);
        libNtve_gf_PauseUnit(auto3CA58AD0_var, true);
    }
    if ((gv_cinematicCompleted == false)) {
        auto5794CDF8_g = gv_cinematicTempUnits;
        auto5794CDF8_u = UnitGroupCount(auto5794CDF8_g, c_unitCountAll);
        for (;; auto5794CDF8_u -= 1) {
            auto5794CDF8_var = UnitGroupUnitFromEnd(auto5794CDF8_g, auto5794CDF8_u);
            if (auto5794CDF8_var == null) { break; }
            UnitRemove(auto5794CDF8_var);
        }
        auto82C8B828_g = UnitGroup(null, c_playerAny, RegionFromId(117), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32))), 0);
        auto82C8B828_u = UnitGroupCount(auto82C8B828_g, c_unitCountAll);
        for (;; auto82C8B828_u -= 1) {
            auto82C8B828_var = UnitGroupUnitFromEnd(auto82C8B828_g, auto82C8B828_u);
            if (auto82C8B828_var == null) { break; }
            if ((auto82C8B828_var != gv_tHE_ONE_QUEEN)) {
                UnitRemove(auto82C8B828_var);
            }

        }
        libNtve_gf_RemoveDeathModelsinRegionImmediately(RegionCircle(PointFromId(807), 12.0));
        libNtve_gf_ClearAnimation(gv_lasarraActor, "Death");
        libNtve_gf_KillModel(gv_lasarraActor);
        SoundStopAllModelSounds();
        libNtve_gf_ShowHideUnit(gv_tHE_ONE_QUEEN, true);
        UnitSetPosition(gv_tHE_ONE_QUEEN, PointFromId(807), false);
    }

    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    CameraSetData(PlayerGroupSingle(gv_pLAYER_01_USER), "LarvaCamera");
    if ((gv_cinematicCompleted == false)) {
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(749), 0.0, -1, 10, false);
    }

    TriggerExecute(gt_StartAI, true, false);
    SoundStop(gv_introWarpSound1, true);
    SoundStop(gv_introWarpSound2, true);
    SoundStop(gv_introKerriganSound, true);
    SoundStop(gv_introDeathSound, true);
    UnitSelect(gv_tHE_ONE_QUEEN, gv_pLAYER_01_USER, true);
    UnitControlGroupAddUnit(gv_pLAYER_01_USER, 1, gv_tHE_ONE_QUEEN);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(749), lv_fadeDuration, -1, 10, true);
    }
    else {
        lv_fadeDuration = 1.0;
        libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, (18.0 + 8.0), 18.0, CameraInfoGetTarget(CameraInfoFromId(749)), lv_fadeDuration);
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    Wait(lv_fadeDuration, c_timeGame);
    gv_inCinematic = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Music
//--------------------------------------------------------------------------------------------------
bool gt_IntroMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_soundtrack = "ZExpedition03MusicIntro";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    gv_introMusicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroMusic_Init () {
    gt_IntroMusic = TriggerCreate("gt_IntroMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Q
//--------------------------------------------------------------------------------------------------
bool gt_MidQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_MidSetup, true, true);
    TriggerExecute(gt_MidCinematic, true, true);
    TriggerExecute(gt_MidCinematicEnd, true, true);
    TriggerExecute(gt_MidCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidQ_Init () {
    gt_MidQ = TriggerCreate("gt_MidQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    libNtve_gf_StoreUnitSelection(gv_pLAYER_01_USER, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UnitPauseAll(true);
    UnitRemove(UnitFromId(39));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidSetup_Init () {
    gt_MidSetup = TriggerCreate("gt_MidSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto89957614_g;
    int auto89957614_u;
    unit auto89957614_var;
    unitgroup auto992F5878_g;
    int auto992F5878_u;
    unit auto992F5878_var;
    unitgroup autoD4C80C52_g;
    int autoD4C80C52_u;
    unit autoD4C80C52_var;
    unitgroup auto38A78A47_g;
    int auto38A78A47_u;
    unit auto38A78A47_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(163), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(164), 5.0, -1, 10.0, true);
    UnitSetPosition(gv_tHE_ONE_QUEEN, PointFromId(59), false);
    UnitIssueOrder(gv_tHE_ONE_QUEEN, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    auto89957614_g = UnitGroup(null, gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto89957614_u = UnitGroupCount(auto89957614_g, c_unitCountAll);
    for (;; auto89957614_u -= 1) {
        auto89957614_var = UnitGroupUnitFromEnd(auto89957614_g, auto89957614_u);
        if (auto89957614_var == null) { break; }
        UnitSetPosition(auto89957614_var, PointFromId(512), true);
        UnitIssueOrder(auto89957614_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    }
    TriggerExecute(gt_MidEngineExplosions, true, false);
    TriggerExecute(gt_WarpDriveExplosions, true, false);
    TriggerExecute(gt_MidMusic, true, false);
    UnitKill(UnitFromId(239));
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CameraShake(gv_pLAYER_01_USER, "Light", "Tremor", 0.5, 0.5, 4.0);
    ActorSend(ActorFromDoodad(DoodadFromId(738)), "Signal DoodadDeath");
    ActorSend(ActorFromDoodad(DoodadFromId(399)), "Signal DoodadDeath");
    ActorSend(ActorFromDoodad(DoodadFromId(242)), "Signal DoodadDeath");
    ActorSend(ActorFromDoodad(DoodadFromId(290)), "Signal DoodadDeath");
    ActorSend(ActorFromDoodad(DoodadFromId(972)), "Signal DoodadDeath");
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    Wait(3.0, c_timeReal);
    CameraShake(gv_pLAYER_01_USER, "Light", "Earthquake", 0.0, 0.5, 1.0);
    Wait(1.0, c_timeReal);
    TriggerExecute(gt_MidExplosionWave, true, false);
    TriggerStop(gt_WarpDriveExplosions);
    CameraShake(gv_pLAYER_01_USER, "Massive", "Earthquake", 0.5, 0.5, 3.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(498), 5.0, -1, 10.0, true);
    Wait(1.0, c_timeReal);
    auto992F5878_g = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(34), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto992F5878_u = UnitGroupCount(auto992F5878_g, c_unitCountAll);
    for (;; auto992F5878_u -= 1) {
        auto992F5878_var = UnitGroupUnitFromEnd(auto992F5878_g, auto992F5878_u);
        if (auto992F5878_var == null) { break; }
        UnitKill(auto992F5878_var);
    }
    autoD4C80C52_g = UnitGroup(null, gv_pLAYER_02_ZERG, RegionFromId(34), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD4C80C52_u = UnitGroupCount(autoD4C80C52_g, c_unitCountAll);
    for (;; autoD4C80C52_u -= 1) {
        autoD4C80C52_var = UnitGroupUnitFromEnd(autoD4C80C52_g, autoD4C80C52_u);
        if (autoD4C80C52_var == null) { break; }
        UnitKill(autoD4C80C52_var);
    }
    auto38A78A47_g = UnitGroup(null, gv_pLAYER_02_ZERG2, RegionFromId(34), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto38A78A47_u = UnitGroupCount(auto38A78A47_g, c_unitCountAll);
    for (;; auto38A78A47_u -= 1) {
        auto38A78A47_var = UnitGroupUnitFromEnd(auto38A78A47_g, auto38A78A47_u);
        if (auto38A78A47_var == null) { break; }
        UnitKill(auto38A78A47_var);
    }
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Protoss, PointFromId(506));
    libNtve_gf_ShowHideUnit(UnitFromId(559), true);
    UnitKill(UnitFromId(559));
    TerrainShowRegion(RegionFromId(46), false);
    Wait(1.0, c_timeReal);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Protoss, PointFromId(507));
    libNtve_gf_ShowHideUnit(UnitFromId(558), true);
    UnitKill(UnitFromId(558));
    TerrainShowRegion(RegionFromId(44), false);
    Wait(1.0, c_timeReal);
    CameraShake(gv_pLAYER_01_USER, "Heavy", "Earthquake", 0.5, 0.5, 3.0);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Protoss, PointFromId(508));
    libNtve_gf_ShowHideUnit(UnitFromId(555), true);
    UnitKill(UnitFromId(555));
    TerrainShowRegion(RegionFromId(43), false);
    Wait(1.0, c_timeReal);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Protoss, PointFromId(509));
    libNtve_gf_ShowHideUnit(UnitFromId(554), true);
    UnitKill(UnitFromId(554));
    TerrainShowRegion(RegionFromId(42), false);
    Wait(2.0, c_timeReal);
    TriggerStop(gt_MidEngineExplosions);
    TriggerStop(gt_MidExplosionWave);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicInTransmission);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 1.0);
    Wait(3.0, c_timeReal);
    libNtve_gf_PauseUnit(gv_tHE_ONE_QUEEN, false);
    UnitIssueOrder(gv_tHE_ONE_QUEEN, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(509)), c_orderQueueReplace);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(499), 0.0, -1, 10.0, true);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(79), "ProtossEnergyGust", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    libSwaC_gf_SendTransmissionCampaign(gv_tHE_ONE_QUEEN, "zMission_Expedition03|Line00037", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(505), (SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Expedition03|Line00038", true), c_soundIndexAny)) - 1.0), -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition03|Line00038", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 1.5);
    UnitIssueOrder(gv_tHE_ONE_QUEEN, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(512)), c_orderQueueReplace);
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(510), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(511), ((SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Expedition03|Line00050", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Expedition03|Line00039", true), c_soundIndexAny))) - 0.0), -1, 10.0, true);
    TriggerExecute(gt_MidCinematicFlashAwakeningZealots, true, false);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition03|Line00039", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition03|Line00050", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(1.0, c_timeReal);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematic_Init () {
    gt_MidCinematic = TriggerCreate("gt_MidCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematicEnd_Init () {
    gt_MidCinematicEnd = TriggerCreate("gt_MidCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup autoC1185330_g;
    int autoC1185330_u;
    unit autoC1185330_var;
    unitgroup autoE2822856_g;
    int autoE2822856_u;
    unit autoE2822856_var;
    unitgroup auto5E705884_g;
    int auto5E705884_u;
    unit auto5E705884_var;
    unitgroup auto9749DEA3_g;
    int auto9749DEA3_u;
    unit auto9749DEA3_var;
    unitgroup auto508AC775_g;
    int auto508AC775_u;
    unit auto508AC775_var;
    unitgroup autoF4052AAF_g;
    int autoF4052AAF_u;
    unit autoF4052AAF_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_MidEngineExplosions);
    TriggerStop(gt_WarpDriveExplosions);
    TriggerStop(gt_MidExplosionWave);
    TriggerStop(gt_MidCinematicFlashAwakeningZealots);
    if ((gv_cinematicCompleted == false) && (gv_midMusicCompleted == false)) {
        TriggerStop(gt_MidMusic);
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZExpedition03MusicAlt1", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }

    autoC1185330_g = gv_midHiddenUnitGroup;
    autoC1185330_u = UnitGroupCount(autoC1185330_g, c_unitCountAll);
    for (;; autoC1185330_u -= 1) {
        autoC1185330_var = UnitGroupUnitFromEnd(autoC1185330_g, autoC1185330_u);
        if (autoC1185330_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoC1185330_var, true);
    }
    UnitPauseAll(false);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    ActorSend(ActorFromDoodad(DoodadFromId(903)), "SetVisibility");
    ActorSend(ActorFromDoodad(DoodadFromId(899)), "SetVisibility");
    ActorSend(ActorFromDoodad(DoodadFromId(904)), "SetVisibility");
    ActorSend(ActorFromDoodad(DoodadFromId(905)), "SetVisibility");
    ActorSend(ActorFromDoodad(DoodadFromId(900)), "SetVisibility");
    ActorSend(ActorFromDoodad(DoodadFromId(902)), "SetVisibility");
    ActorSend(ActorFromDoodad(DoodadFromId(901)), "SetVisibility");
    libNtve_gf_RestoreUnitSelection(gv_pLAYER_01_USER);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, true);
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, (25.0 + 8.0), 25.0, PointFromId(619), 1.5);
    SoundStop(gv_midExplosionSound, true);
    SoundStop(gv_midStasisSound, true);
    ObjectiveSetState(gv_objectiveDestroyDominionBase322, c_objectiveStateHidden);
    ObjectiveSetState(gv_objectiveDestroyDominionBase3222, c_objectiveStateHidden);
    UnitKill(UnitFromId(273));
    libNtve_gf_ShowHideUnit(UnitFromId(559), true);
    UnitKill(UnitFromId(559));
    TerrainShowRegion(RegionFromId(46), false);
    libNtve_gf_ShowHideUnit(UnitFromId(558), true);
    UnitKill(UnitFromId(558));
    TerrainShowRegion(RegionFromId(44), false);
    libNtve_gf_ShowHideUnit(UnitFromId(555), true);
    UnitKill(UnitFromId(555));
    TerrainShowRegion(RegionFromId(43), false);
    libNtve_gf_ShowHideUnit(UnitFromId(554), true);
    UnitKill(UnitFromId(554));
    TerrainShowRegion(RegionFromId(42), false);
    autoE2822856_g = UnitGroup(null, c_playerAny, RegionFromId(118), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE2822856_u = UnitGroupCount(autoE2822856_g, c_unitCountAll);
    for (;; autoE2822856_u -= 1) {
        autoE2822856_var = UnitGroupUnitFromEnd(autoE2822856_g, autoE2822856_u);
        if (autoE2822856_var == null) { break; }
        UnitSetState(autoE2822856_var, c_unitStateTargetable, true);
        libNtve_gf_MakeUnitInvulnerable(autoE2822856_var, false);
    }
    auto5E705884_g = UnitGroup(null, c_playerAny, RegionFromId(34), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5E705884_u = UnitGroupCount(auto5E705884_g, c_unitCountAll);
    for (;; auto5E705884_u -= 1) {
        auto5E705884_var = UnitGroupUnitFromEnd(auto5E705884_g, auto5E705884_u);
        if (auto5E705884_var == null) { break; }
        UnitKill(auto5E705884_var);
    }
    libNtve_gf_PauseUnit(UnitFromId(51), true);
    libNtve_gf_PauseUnit(UnitFromId(129), true);
    auto9749DEA3_g = UnitGroup(null, gv_pLAYER_02_ZERG, RegionFromId(39), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9749DEA3_u = UnitGroupCount(auto9749DEA3_g, c_unitCountAll);
    for (;; auto9749DEA3_u -= 1) {
        auto9749DEA3_var = UnitGroupUnitFromEnd(auto9749DEA3_g, auto9749DEA3_u);
        if (auto9749DEA3_var == null) { break; }
        libNtve_gf_PauseUnit(auto9749DEA3_var, true);
    }
    auto508AC775_g = UnitGroup(null, gv_pLAYER_02_ZERG, RegionFromId(40), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto508AC775_u = UnitGroupCount(auto508AC775_g, c_unitCountAll);
    for (;; auto508AC775_u -= 1) {
        auto508AC775_var = UnitGroupUnitFromEnd(auto508AC775_g, auto508AC775_u);
        if (auto508AC775_var == null) { break; }
        libNtve_gf_PauseUnit(auto508AC775_var, true);
    }
    autoF4052AAF_g = UnitGroup(null, gv_pLAYER_02_ZERG, RegionFromId(45), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF4052AAF_u = UnitGroupCount(autoF4052AAF_g, c_unitCountAll);
    for (;; autoF4052AAF_u -= 1) {
        autoF4052AAF_var = UnitGroupUnitFromEnd(autoF4052AAF_g, autoF4052AAF_u);
        if (autoF4052AAF_var == null) { break; }
        libNtve_gf_PauseUnit(autoF4052AAF_var, true);
    }
    UnitSetPropertyFixed(gv_tHE_ONE_QUEEN, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_tHE_ONE_QUEEN, c_unitPropEnergyPercent, 100.0);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gv_inCinematic = false;
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(116), 0.1, false);
    TriggerExecute(gt_AfterMidCineChamber00Intro, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCleanup_Init () {
    gt_MidCleanup = TriggerCreate("gt_MidCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic - Flash Awakening Zealots
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematicFlashAwakeningZealots_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_zealot01;
    unit lv_zealot02;

    // Automatic Variable Declarations
    const int autoE9ACED2B_n = 5;
    int autoE9ACED2B_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_zealot01 = UnitFromId(70);
    lv_zealot02 = UnitFromId(75);
    UnitBehaviorAddPlayer(lv_zealot01, "Exp03StasisEnding", gv_pLAYER_02_ZERG, 1);
    UnitBehaviorAddPlayer(lv_zealot02, "Exp03StasisEnding", gv_pLAYER_02_ZERG, 1);
    for (autoE9ACED2B_i = 1; autoE9ACED2B_i <= autoE9ACED2B_n; autoE9ACED2B_i += 1) {
        Wait(2.0, c_timeGame);
    }
    SoundPlay(SoundLink("Sentry_ForceFieldDeath", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_midStasisSound = SoundLastPlayed();
    UnitBehaviorRemovePlayer(lv_zealot01, "Exp03StasisLongTerm", gv_pLAYER_02_ZERG, 1);
    UnitBehaviorRemovePlayer(lv_zealot01, "Exp03StasisEnding", gv_pLAYER_02_ZERG, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematicFlashAwakeningZealots_Init () {
    gt_MidCinematicFlashAwakeningZealots = TriggerCreate("gt_MidCinematicFlashAwakeningZealots_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Engine Explosions
//--------------------------------------------------------------------------------------------------
bool gt_MidEngineExplosions_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(RandomFixed(0.5, 1.5), c_timeGame);
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Protoss, RegionRandomPoint(RegionFromId(75)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidEngineExplosions_Init () {
    gt_MidEngineExplosions = TriggerCreate("gt_MidEngineExplosions_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Explosion Wave
//--------------------------------------------------------------------------------------------------
bool gt_MidExplosionWave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_explosionAngle;
    point lv_randomPoint;

    // Automatic Variable Declarations
    const int auto7D5C49BF_n = 100;
    int auto7D5C49BF_i;
    const int autoD7A3A7E0_n = 3;
    int autoD7A3A7E0_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_explosionAngle = AngleBetweenPoints(RegionGetCenter(RegionFromId(56)), PointFromId(446));
    UnitKill(UnitFromId(239));
    PlayerCreateEffectPoint(gv_pLAYER_01_USER, "EnergyNovaPersistent", RegionGetCenter(RegionFromId(75)));
    SoundPlay(SoundLink("Artifact_EnergyNova", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_midExplosionSound = SoundLastPlayed();
    for (auto7D5C49BF_i = 1; auto7D5C49BF_i <= auto7D5C49BF_n; auto7D5C49BF_i += 1) {
        RegionSetCenter(RegionFromId(56), PointWithOffsetPolar(RegionGetCenter(RegionFromId(56)), 0.8, lv_explosionAngle));
        for (autoD7A3A7E0_i = 1; autoD7A3A7E0_i <= autoD7A3A7E0_n; autoD7A3A7E0_i += 1) {
            lv_randomPoint = RegionRandomPoint(RegionFromId(56));
            if ((CliffLevel(lv_randomPoint) == 1)) {
                libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Protoss, RegionRandomPoint(RegionFromId(56)));
                break;
            }

        }
        Wait(0.1, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidExplosionWave_Init () {
    gt_MidExplosionWave = TriggerCreate("gt_MidExplosionWave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Music
//--------------------------------------------------------------------------------------------------
bool gt_MidMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_soundtrack = "ZExpedition03MusicCutscene_ProtossWarriors";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    gv_midMusicCompleted = true;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZExpedition03MusicAlt1", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidMusic_Init () {
    gt_MidMusic = TriggerCreate("gt_MidMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto97CF4399_g;
    int auto97CF4399_u;
    unit auto97CF4399_var;
    unitgroup autoCAC39B9F_g;
    int autoCAC39B9F_u;
    unit autoCAC39B9F_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UnitClearSelection(gv_pLAYER_01_USER);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    GameSetLighting("StarshipDark", 0.0);
    RegionPlayableMapSet(RegionEntireMap());
    UnitPauseAll(true);
    auto97CF4399_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto97CF4399_u = UnitGroupCount(auto97CF4399_g, c_unitCountAll);
    for (;; auto97CF4399_u -= 1) {
        auto97CF4399_var = UnitGroupUnitFromEnd(auto97CF4399_g, auto97CF4399_u);
        if (auto97CF4399_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto97CF4399_var, false);
    }
    autoCAC39B9F_g = UnitGroup("Blocker8x8", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCAC39B9F_u = UnitGroupCount(autoCAC39B9F_g, c_unitCountAll);
    for (;; autoCAC39B9F_u -= 1) {
        autoCAC39B9F_var = UnitGroupUnitFromEnd(autoCAC39B9F_g, autoCAC39B9F_u);
        if (autoCAC39B9F_var == null) { break; }
        UnitRemove(autoCAC39B9F_var);
    }
    if (((UnitGetType(gv_tHE_ONE_QUEEN) == "LarvalQueen") || (UnitIsAlive(gv_tHE_ONE_QUEEN) == false))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SwarmQueen", 0, gv_pLAYER_01_USER, PointFromId(535));
        gv_tHE_ONE_QUEEN = UnitLastCreated();
    }
    else {
        libNtve_gf_PauseUnit(gv_tHE_ONE_QUEEN, false);
        libNtve_gf_ShowHideUnit(gv_tHE_ONE_QUEEN, true);
        UnitSetPosition(gv_tHE_ONE_QUEEN, PointFromId(535), false);
    }
    UnitIssueOrder(gv_tHE_ONE_QUEEN, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_tHE_ONE_QUEEN, Order(AbilityCommand("BurrowSwarmQueenUp", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_tHE_ONE_QUEEN, Order(AbilityCommand("BurrowLargeSwarmQueenUp", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_tHE_ONE_QUEEN, Order(AbilityCommand("BurrowHugeSwarmQueenUp", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_tHE_ONE_QUEEN, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(616)), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(157), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(518), (SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Expedition03|Line00052", true), c_soundIndexAny)) + 1.5), -1, 10.0, true);
    UnitRemove(UnitFromId(240));
    UnitRemove(UnitFromId(7));
    UnitRemove(UnitFromId(39));
    UnitRemove(UnitFromId(200));
    TriggerExecute(gt_VictoryZergBridge1, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZExpedition03MusicCutscene_ServeAgain", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundPlay(SoundLink("Expedition03_CS_End01_Loop", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_victoryZergSound = SoundLastPlayed();
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_victoryCinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicInTransmission);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 1.0);
    libSwaC_gf_SendTransmissionCampaign(gv_tHE_ONE_QUEEN, "zMission_Expedition03|Line00052", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(1.0, c_timeReal);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(870), 3.0, -1, 10.0, true);
    UnitIssueOrder(gv_tHE_ONE_QUEEN, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(858)), c_orderQueueReplace);
    Wait(3.0, c_timeReal);
    libSwaC_gf_SendTransmissionCampaign(gv_tHE_ONE_QUEEN, "zMission_Expedition03|Line00011", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(2.0, c_timeReal);
    UnitIssueOrder(gv_tHE_ONE_QUEEN, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(616)), c_orderQueueReplace);
    Wait(1.0, c_timeReal);
    libSwaC_gf_SendTransmissionCampaign(gv_tHE_ONE_QUEEN, "zMission_Expedition03|Line00120", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CinematicFade(false, 3.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    SoundStop(gv_victoryZergSound, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(853), 0.0, -1, 10.0, true);
    UnitSetPosition(gv_tHE_ONE_QUEEN, PointFromId(815), false);
    UnitSetFacing(gv_tHE_ONE_QUEEN, 315.0, 0.0);
    TriggerExecute(gt_VictoryZergBridge2, true, false);
    SoundPlay(SoundLink("Expedition03_CS_End02_WinLoop", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_victoryZergSound = SoundLastPlayed();
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(854), (SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Expedition03|Line00053", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Expedition03|Line00056", true), c_soundIndexAny))), -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(gv_tHE_ONE_QUEEN, "zMission_Expedition03|Line00053", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_tHE_ONE_QUEEN, "zMission_Expedition03|Line00056", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(1.0, c_timeReal);
    gv_victoryCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuratioin;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_victoryCinematicCompleted == true)) {
        lv_fadeDuratioin = 2.0;
    }
    else {
        lv_fadeDuratioin = 0.5;
    }
    CinematicFade(false, lv_fadeDuratioin, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_VictoryZergBridge1);
    TriggerStop(gt_VictoryZergBridge2);
    SoundStop(gv_victoryZergSound, true);
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Zerg Bridge 1
//--------------------------------------------------------------------------------------------------
bool gt_VictoryZergBridge1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_zergLeft;
    unitgroup lv_zergRight;

    // Automatic Variable Declarations
    const int auto1BC66CFD_n = 5;
    int auto1BC66CFD_i;
    const int auto46DB9175_n = 25;
    int auto46DB9175_i;
    unitgroup auto6353E3B4_g;
    int auto6353E3B4_u;
    unit auto6353E3B4_var;
    unitgroup auto1C682B39_g;
    int auto1C682B39_u;
    unit auto1C682B39_var;

    // Variable Initialization
    lv_zergLeft = UnitGroupEmpty();
    lv_zergRight = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    for (auto1BC66CFD_i = 1; auto1BC66CFD_i <= auto1BC66CFD_n; auto1BC66CFD_i += 1) {
        UnitCreate(1, "Roach", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(76)), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_zergLeft, UnitLastCreated());
        UnitCreate(1, "Roach", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(77)), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_zergRight, UnitLastCreated());
    }
    for (auto46DB9175_i = 1; auto46DB9175_i <= auto46DB9175_n; auto46DB9175_i += 1) {
        UnitCreate(1, "Zergling", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(76)), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_zergLeft, UnitLastCreated());
        UnitCreate(1, "Zergling", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(77)), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_zergRight, UnitLastCreated());
    }
    while (true) {
        auto6353E3B4_g = lv_zergLeft;
        auto6353E3B4_u = UnitGroupCount(auto6353E3B4_g, c_unitCountAll);
        for (;; auto6353E3B4_u -= 1) {
            auto6353E3B4_var = UnitGroupUnitFromEnd(auto6353E3B4_g, auto6353E3B4_u);
            if (auto6353E3B4_var == null) { break; }
            if ((RandomInt(1, 6) == 1)) {
                UnitIssueOrder(auto6353E3B4_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(76))), c_orderQueueAddToEnd);
            }

        }
        auto1C682B39_g = lv_zergRight;
        auto1C682B39_u = UnitGroupCount(auto1C682B39_g, c_unitCountAll);
        for (;; auto1C682B39_u -= 1) {
            auto1C682B39_var = UnitGroupUnitFromEnd(auto1C682B39_g, auto1C682B39_u);
            if (auto1C682B39_var == null) { break; }
            if ((RandomInt(1, 6) == 1)) {
                UnitIssueOrder(auto1C682B39_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(77))), c_orderQueueAddToEnd);
            }

        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryZergBridge1_Init () {
    gt_VictoryZergBridge1 = TriggerCreate("gt_VictoryZergBridge1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Zerg Bridge 2
//--------------------------------------------------------------------------------------------------
bool gt_VictoryZergBridge2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_zergLeft;
    unitgroup lv_zergRight;

    // Automatic Variable Declarations
    const int auto3A1117B8_n = 5;
    int auto3A1117B8_i;
    const int auto2741E3E0_n = 25;
    int auto2741E3E0_i;
    unitgroup auto0B7B3A2C_g;
    int auto0B7B3A2C_u;
    unit auto0B7B3A2C_var;
    unitgroup auto743DAE8F_g;
    int auto743DAE8F_u;
    unit auto743DAE8F_var;

    // Variable Initialization
    lv_zergLeft = UnitGroupEmpty();
    lv_zergRight = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hatchery", 0, gv_pLAYER_01_USER, PointFromId(816));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hatchery", 0, gv_pLAYER_01_USER, PointFromId(818));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hatchery", 0, gv_pLAYER_01_USER, PointFromId(819));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hatchery", 0, gv_pLAYER_01_USER, PointFromId(820));
    for (auto3A1117B8_i = 1; auto3A1117B8_i <= auto3A1117B8_n; auto3A1117B8_i += 1) {
        UnitCreate(1, "Roach", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(47)), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_zergLeft, UnitLastCreated());
        UnitCreate(1, "Roach", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(67)), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_zergRight, UnitLastCreated());
    }
    for (auto2741E3E0_i = 1; auto2741E3E0_i <= auto2741E3E0_n; auto2741E3E0_i += 1) {
        UnitCreate(1, "Zergling", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(47)), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_zergLeft, UnitLastCreated());
        UnitCreate(1, "Zergling", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(67)), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_zergRight, UnitLastCreated());
    }
    while (true) {
        auto0B7B3A2C_g = lv_zergLeft;
        auto0B7B3A2C_u = UnitGroupCount(auto0B7B3A2C_g, c_unitCountAll);
        for (;; auto0B7B3A2C_u -= 1) {
            auto0B7B3A2C_var = UnitGroupUnitFromEnd(auto0B7B3A2C_g, auto0B7B3A2C_u);
            if (auto0B7B3A2C_var == null) { break; }
            if ((RandomInt(1, 8) == 1)) {
                UnitIssueOrder(auto0B7B3A2C_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(47))), c_orderQueueAddToEnd);
            }

        }
        auto743DAE8F_g = lv_zergRight;
        auto743DAE8F_u = UnitGroupCount(auto743DAE8F_g, c_unitCountAll);
        for (;; auto743DAE8F_u -= 1) {
            auto743DAE8F_var = UnitGroupUnitFromEnd(auto743DAE8F_g, auto743DAE8F_u);
            if (auto743DAE8F_var == null) { break; }
            if ((RandomInt(1, 8) == 1)) {
                UnitIssueOrder(auto743DAE8F_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(67))), c_orderQueueAddToEnd);
            }

        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryZergBridge2_Init () {
    gt_VictoryZergBridge2 = TriggerCreate("gt_VictoryZergBridge2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04MusicSound_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_DEBUGSkiptoPart2_Init();
    gt_DEBUGSkiptoPart3_Init();
    gt_StartGameQ_Init();
    gt_UpdateProtossRemainingObjective_Init();
    gt_UpdateProtossRemainingTemplarArchon_Init();
    gt_UpdateProtossRemainingTemplarArchonCreated_Init();
    gt_RemoveHarmlessfromUnit_Init();
    gt_RegenLifeofUrsadonBriefly_Init();
    gt_SwarmQueenusesParasiticInvasion_Init();
    gt_CritterisConsumed_Init();
    gt_CritterisKilled_Init();
    gt_MorphtoSwarmQueenComplete_Init();
    gt_ReminderGrowtoLargeQueen_Init();
    gt_TurnoffGrowtoLargeQueenBlinky_Init();
    gt_TransmissionGrowtoLargeQueenQ_Init();
    gt_MorphtoLargeSwarmQueenComplete_Init();
    gt_ReminderGrowtoHugeQueen_Init();
    gt_TurnoffGrowtoHugeQueenBlinky_Init();
    gt_TransmissionGrowtoHugeQueenQ_Init();
    gt_MorphtoHugeSwarmQueenComplete_Init();
    gt_LarvalQueenEntersSteamVentArea1_Init();
    gt_LarvalQueenLeavesSteamVentArea1_Init();
    gt_LarvalQueenEntersSteamVentArea2_Init();
    gt_LarvalQueenLeavesSteamVentArea2_Init();
    gt_LarvalQueenEntersSteamVentArea3_Init();
    gt_LarvalQueenLeavesSteamVentArea3_Init();
    gt_TransmissionP1LarvaAwakensQ_Init();
    gt_LarvalQueenRevealFirstRoom_Init();
    gt_LarvalQueenRevealSecondRoom_Init();
    gt_TransmissionP1VastShipQ_Init();
    gt_LearnParasiticInvasion_Init();
    gt_TransmissionP1LearnParasiteInvasionQ_Init();
    gt_TurnoffParasiteBlinky_Init();
    gt_LarvalQueenParasitesFirstAnimal_Init();
    gt_TransmissionP1LearnConsumeQ_Init();
    gt_FirstLyoteisConsumed_Init();
    gt_TurnoffConsumeBlinkyLyote_Init();
    gt_LarvalQueenSeesSentry_Init();
    gt_TransmissionP1SeeSentryQ_Init();
    gt_LarvalQueenEntersFirstSteam_Init();
    gt_SentryPatrolPath_Init();
    gt_SentrySeesCreep_Init();
    gt_TransmissionP1SentrySeesCreepQ_Init();
    gt_SentryNearLarvainSteamQ_Init();
    gt_LarvalQueenSeesGiantUrsadon_Init();
    gt_TransmissionP1GiantUrsadonTubeQ_Init();
    gt_LarvalQueenParasitesGiantUrsadon_Init();
    gt_LarvalQueenEntersVentDefenderRoom_Init();
    gt_SecondZealotPatrolPath_Init();
    gt_TransmissionP1ZergDetectedQ_Init();
    gt_ProtossDestroyedinVentDefenderRoom_Init();
    gt_TransmissionP1EncounterFirstVentQ_Init();
    gt_UrsadonCannotEnter_Init();
    gt_TransmissionP1UrsadonWontFitQ_Init();
    gt_TurnoffConsumeBlinkyUrsadon_Init();
    gt_UrsadonisConsumedResetCamera_Init();
    gt_RemoveVentHelperCallout_Init();
    gt_LarvalQueenEntersSafePlaceQ_Init();
    gt_SafePlaceRoomReveal_Init();
    gt_TransmissionP1MorphtoSwarmQueenQ_Init();
    gt_TurnoffMorphtoSwarmQueenBlinky_Init();
    gt_ReenableSentryTech_Init();
    gt_TransmissionP1SwarmQueenMorphCompleteQ_Init();
    gt_TurnoffSpawnUnitsBlinky_Init();
    gt_ResourceChamberDoorDestroyed_Init();
    gt_SwarmQueenEntersResourceChamber_Init();
    gt_TransmissionP2ResourceChamberEnteredQ_Init();
    gt_ProtossReactioninResourceChamber_Init();
    gt_SentryInitiatesCleansing_Init();
    gt_TransmissionP2SentryCleansingQ_Init();
    gt_TransmissionP3DangerousHallwayWarningQ_Init();
    gt_DangerousHallwayClear_Init();
    gt_TransmissionP3HallwayClearQ_Init();
    gt_QueenCantEnterVent_Init();
    gt_TransmissionP3QueenCantEnterVentQ_Init();
    gt_TransmissionP3FirstForceFieldDiscoveryQ_Init();
    gt_KillHelperModelWarpDriveVentDoor_Init();
    gt_RevealPsiBroadcaster01_Init();
    gt_KillHelperModelPsiBroadcaster01_Init();
    gt_TransmissionP3PsiBroadcasterVisibleQ_Init();
    gt_EnteredWarpDriveQuadrant_Init();
    gt_TransmissionP3EnteredWarpDriveQuadQ_Init();
    gt_PsiBroadcaster01Destroyed_Init();
    gt_TransmissionP3FirstForceFieldOpenQ_Init();
    gt_RevealWarpDriveSpecimenRoom_Init();
    gt_TransmissionP3WarpDriveSpecimenRoomQ_Init();
    gt_PsiBroadcaster02Destroyed_Init();
    gt_TransmissionP3SecondForceFieldOpenQ_Init();
    gt_RevealWarpDriveRoom_Init();
    gt_KillHelperModelWarpDrive_Init();
    gt_TransmissionP3WarpDriveRoomRevealedQ_Init();
    gt_WarpDriveDestroyedStartCountdownQ_Init();
    gt_WarpDriveExplosions_Init();
    gt_StalkerAttackAfterWarpDriveDestroyed_Init();
    gt_SentryResponsetoWarpDriveDestruction_Init();
    gt_TransmissionP3SentriesTrappingQueenQ_Init();
    gt_EvacuateTimerEndsDestroyWarpDriveQuadrant_Init();
    gt_EscapedWarpDriveTransition_Init();
    gt_AfterMidCineChamber00Intro_Init();
    gt_AllowAccessIntoKitchen_Init();
    gt_StartChamber01Actions_Init();
    gt_TransmissionP4EnterStasisChamber01Q_Init();
    gt_StartChamber02Actions_Init();
    gt_StartChamber03Actions_Init();
    gt_InfestSecondGiantUrsadonQ_Init();
    gt_TransmissionP4UrsadonInfestedQ_Init();
    gt_GiantUrsadonDiesFailBonusObjective_Init();
    gt_ShowBridgeQuadrantEntry_Init();
    gt_TransmissionP5ZergReachBridgeQuadQ_Init();
    gt_OpenDoortotheBridge_Init();
    gt_ReachBridgeQuadrant_Init();
    gt_StartFirstEscapePods_Init();
    gt_TransmissionP5ZergSeeEscapePodsQ_Init();
    gt_ActivateSentryHallucinationBattle_Init();
    gt_ActivateSentryHallucinationBattleHard_Init();
    gt_ActivateStalkerRush_Init();
    gt_TransmissionP5StalkerRushQ_Init();
    gt_FirstEscapePodsWarningQ_Init();
    gt_ActivateEscapePod03Defense_Init();
    gt_StartSecondEscapePods_Init();
    gt_TransmissionP5MoreEscapePodsLaunchingQ_Init();
    gt_TransmissionP5EscapePod03DefenseQ_Init();
    gt_BridgeRampProtossBlockBehavior_Init();
    gt_SecondEscapePodsWarningQ_Init();
    gt_ActivateEscapePod04Defense_Init();
    gt_TransmissionP5EscapePod04DefenseQ_Init();
    gt_ActivateBridgeFinaleProtoss_Init();
    gt_TransmissionP5ProtossEndQ_Init();
    gt_EscapePodDestroyed_Init();
    gt_EscapePodLaunchedGameOver_Init();
    gt_TipMissionHelpQ_Init();
    gt_StartAI_Init();
    gt_AIGiveMinerals_Init();
    gt_AIGiveGas_Init();
    gt_NumberofUnitsSpawned_Init();
    gt_EnemyDies_Init();
    gt_AchievementBiomassCollected_Init();
    gt_AchievementEscapePodTimeNH_Init();
    gt_AchievementUrsadonKillsH_Init();
    gt_DefeatLarvalQueenDies_Init();
    gt_DefeatSwarmQueenDies_Init();
    gt_DefeatEscapePodLaunches_Init();
    gt_VictoryMainObjectivesCompleted_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_ObjectiveDestroytheProtossCreate_Init();
    gt_ObjectiveDestroytheProtossCreateQ_Init();
    gt_ObjectiveDestroytheProtossComplete_Init();
    gt_ObjectiveDestroytheProtossFailed_Init();
    gt_ObjectiveSwarmQueenSurvivalCreate_Init();
    gt_ObjectiveSwarmQueenSurvivalCreateQ_Init();
    gt_ObjectiveSwarmQueenSurvivalComplete_Init();
    gt_ObjectiveSwarmQueenSurvivalFailed_Init();
    gt_ObjectiveGainBiomassCreate_Init();
    gt_ObjectiveGainBiomassComplete_Init();
    gt_ObjectiveGainBiomassCompleteHideQ_Init();
    gt_ObjectiveGainBiomassFailed_Init();
    gt_ObjectiveFindSafePlaceCreate_Init();
    gt_ObjectiveFindSafePlaceComplete_Init();
    gt_ObjectiveFindSafePlaceCompleteHideQ_Init();
    gt_ObjectiveFindSafePlaceFailed_Init();
    gt_ObjectiveGrowCreate_Init();
    gt_ObjectiveGrowComplete_Init();
    gt_ObjectiveGrowCompleteHideQ_Init();
    gt_ObjectiveGrowFailed_Init();
    gt_ObjectiveDestroyWarpDriveCreateHidden_Init();
    gt_ObjectiveDestroyWarpDriveComplete_Init();
    gt_ObjectiveDestroyWarpDriveFailed_Init();
    gt_ObjectiveEscapeCreateHidden_Init();
    gt_ObjectiveEscapeComplete_Init();
    gt_ObjectiveEscapeFailed_Init();
    gt_ObjectiveDestroyEscapePodsCreate_Init();
    gt_ObjectiveDestroyEscapePodsCreateQ_Init();
    gt_ObjectiveDestroyEscapePodsComplete_Init();
    gt_ObjectiveDestroyEscapePodsFailed_Init();
    gt_ObjectiveInfestGiantUrsadonCreate_Init();
    gt_ObjectiveInfestGiantUrsadonCreateQ_Init();
    gt_ObjectiveInfestGiantUrsadonComplete_Init();
    gt_ObjectiveInfestGiantUrsadonFailed_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_IntroMusic_Init();
    gt_MidQ_Init();
    gt_MidSetup_Init();
    gt_MidCinematic_Init();
    gt_MidCinematicEnd_Init();
    gt_MidCleanup_Init();
    gt_MidCinematicFlashAwakeningZealots_Init();
    gt_MidEngineExplosions_Init();
    gt_MidExplosionWave_Init();
    gt_MidMusic_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
    gt_VictoryZergBridge1_Init();
    gt_VictoryZergBridge2_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
