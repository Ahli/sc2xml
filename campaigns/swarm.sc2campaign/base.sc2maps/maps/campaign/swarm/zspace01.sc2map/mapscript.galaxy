//==================================================================================================
// 
// Generated Map Script
// 
// Name:   With Friends Like These...
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"
include "TriggerLibs/SwarmCampaignLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libHots_InitLib();
    libSwaC_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_MIRA_HAN = 2;
const int gv_pLAYER_03_PIRATE = 3;
const int gv_pLAYER_05_RAYNOR = 5;
const int gv_pLAYER_06_MIRA_BASE1 = 6;
const int gv_pLAYER_07_MIRA_BASE2 = 7;
const fixed gv_hyperionFighterTargetRadius = 10.0;
const int gv_c_HyperionLevel_Max = 4;
const fixed gv_hyperionHPThreshold = 0.3;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
unit gv_playerBase;
unit gv_enemyBase;
unit gv_hyperion;
bool gv_gameOver;
bool gv_inCinematic;
string gv_mapMusicTrack;
unitgroup gv_firstBaseEdgeUnitsHidden;
fixed gv_playerWaveRespawnRate;
fixed gv_enemyWaveRespawnRate;
fixed gv_hardGriffonLife;
fixed gv_hardValkLife;
fixed gv_hardSpaceMineLife;
fixed gv_hardOrdinanceTower;
fixed gv_hardMercStarport;
fixed gv_hardMiraHanBoss;
fixed gv_hardCapitalShip;
actor gv_blinkFromBriefingModel;
int gv_blinkFromTextTag;
actor gv_blinkToBriefingModel;
int gv_blinkToTextTag;
revealer gv_blinkRevealer;
int gv_transmissionBlinkTutorial;
unitgroup gv_aoeEncounterFighters;
actor gv_aoeEncounterBriefingModel;
unit gv_yamatoEncounterTower;
actor gv_yamatoEncounterTowerBriefingModel;
unitgroup gv_firstBaseGuards;
unitgroup gv_firstBaseUnits;
bool gv_firstBaseCaptured;
actor gv_mineralTutorialBriefingModel;
unit gv_mineralTutorialFormation;
int gv_mineralTutorialTextTag;
bool gv_mineralTutorialGoing;
int[7] gv_objectiveMineralFieldPing;
bool gv_mineralClusterIntroDone;
unitgroup gv_mineralClusterMines;
unitgroup gv_secondBaseUnits;
actor gv_secondBaseBriefingModel;
unitgroup gv_thirdBaseUnits;
point gv_hyperionBlinkLoc;
bool gv_hyperionFighterOut;
point gv_hyperionFighterTarget;
unitgroup gv_hyperionFighterGroup;
int gv_hyperionFighterLaunchIndex;
bool gv_hyperionFighterRecalling;
int gv_hyperionFighterCombatIndicator;
int gv_hyperionFighterHaveTagetIndicator;
int gv_hyperionInCombatIndicator;
int gv_hyperionBeingAttackedIndicator;
int gv_hyperionExperience;
int gv_hyperionLevel;
int[5] gv_c_HyperionLevelExp;
bool gv_hyperionLowHPFlashing;
int gv_hyperionLowHPUIDlg;
int gv_hyperionLowHPUIImage;
fixed gv_hyperionHPBak;
bool gv_criticalTransmissionPlaying;
int gv_hyperionMinimapIcon;
int gv_hyperionLastHelpLine;
unit gv_pirateCapitalShip;
int gv_pirateBossPing;
actor gv_pirateBossBriefingModel;
bool gv_pirateBossEngaged;
int gv_pirateBossEFieldHits;
bool gv_mercSpaceStationActive;
unitgroup gv_mercSpaceStationMines;
unitgroup gv_battlecruisersInCombat;
int gv_potentialRepairingBotDropIndex;
unitgroup gv_hyperionDamagedBattlecruiserGroup;
point[21] gv_playerAttackWaveWayPoints;
int gv_playerAttackWaveWayPointCount;
bool gv_hyperionHitByMagMine;
int gv_numberOfMineralClusters;
int gv_mineralClustersCollected;
fixed gv_totalMagMineDamageTaken;
fixed gv_totalDamageTaken;
int gv_yamatoKills;
int gv_tacFightersLost;
timer gv_timedRunTimer;
int gv_objectiveDestroyDominionBase3;
int gv_setupSpaceStationPing;
int gv_objectiveDestroyDominionBase;
int gv_mercenaryBasePing;
actor gv_mercenaryBaseBriefingModel;
int gv_objectiveDestroyDominionBase2;
int gv_objectiveMineralFields;
int gv_objectiveMineralFieldsCount;
unitgroup[4] gv_objectiveMineralFieldsGroup;
int gv_objectivePirateCapitalShip;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicPausedUnits;
unitgroup gv_cinematicTempUnits;
bool gv_cinematicCompleted;
unit gv_cineHyperion;
bool gv_introCutsceneCompleted;
bool gv_introMusicCompleted;
bool gv_introMusicStarted;
actor gv_midActor;
bool gv_midMusicCompleted;

void InitGlobals () {
    int init_i;

    gv_enemyBase = UnitFromId(5);
    gv_hyperion = UnitFromId(9);
    gv_firstBaseEdgeUnitsHidden = UnitGroupEmpty();
    gv_blinkFromTextTag = c_textTagNone;
    gv_blinkToTextTag = c_textTagNone;
    gv_transmissionBlinkTutorial = c_invalidTransmissionId;
    gv_aoeEncounterFighters = UnitGroupEmpty();
    gv_firstBaseGuards = UnitGroupEmpty();
    gv_firstBaseUnits = UnitGroupEmpty();
    gv_mineralTutorialTextTag = c_textTagNone;
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_objectiveMineralFieldPing[init_i] = c_invalidPingId;
    }
    gv_mineralClusterMines = UnitGroupEmpty();
    gv_secondBaseUnits = UnitGroupEmpty();
    gv_thirdBaseUnits = UnitGroupEmpty();
    gv_hyperionFighterGroup = UnitGroupEmpty();
    gv_hyperionLevel = 1;
    gv_hyperionLowHPUIDlg = c_invalidDialogId;
    gv_hyperionLowHPUIImage = c_invalidDialogControlId;
    gv_hyperionMinimapIcon = c_invalidPingId;
    gv_pirateBossPing = c_invalidPingId;
    gv_mercSpaceStationMines = UnitGroupEmpty();
    gv_battlecruisersInCombat = UnitGroupEmpty();
    gv_hyperionDamagedBattlecruiserGroup = UnitGroupEmpty();
    gv_timedRunTimer = TimerCreate();
    gv_objectiveDestroyDominionBase3 = c_invalidObjectiveId;
    gv_setupSpaceStationPing = c_invalidPingId;
    gv_objectiveDestroyDominionBase = c_invalidObjectiveId;
    gv_mercenaryBasePing = c_invalidPingId;
    gv_objectiveDestroyDominionBase2 = c_invalidObjectiveId;
    gv_objectiveMineralFields = c_invalidObjectiveId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_objectiveMineralFieldsGroup[init_i] = UnitGroupEmpty();
    }
    gv_objectivePirateCapitalShip = c_invalidObjectiveId;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
bool gf_FirstBaseCaptured ();
bool gf_SecondBaseCaptured ();
bool gf_ThirdBaseCaptured ();
int gf_HyperionFighterCountCurrent ();
int gf_HyperionFighterCountMax ();
void gf_HyperionFighterLeashing (unit lp_fighter);
void gf_RecallHyperionFighters ();
bool gf_HyperionFightersIsInCombat ();
bool gf_HyperionFightersHaveTarget ();
bool gf_HyperionFightersAreStunned ();
unitgroup gf_HyperionFighterTargetGroup ();
void gf_HyperionFighterWonder (unit lp_fighter, point lp_targetCenter);
bool gf_HyperionInCombat ();
bool gf_HyperionBeingAttacked ();
void gf_RewardMinerals (unit lp_unitKilled);
void gf_RewardExperience (int lp_amount);
void gf_CreateHyperionLowHPUI ();
void gf_WaitforCriticalTransmissionFinished ();
void gf_CreateHyperionMinimapIcon ();
void gf_RestoreHyperionToFull (bool lp_removeFighters);
void gf_MercSpaceStationMineMovement (unit lp_mine, fixed lp_angle);
void gf_TriggerAddEventUnitDamaged (trigger lp_trigger, unit lp_unit);
void gf_SendPlayerAttackWave ();
void gf_SendEnemyAttackWave ();
void gf_SendAttackWaveSingle (int lp_player, string lp_unitTypeMiddle, string lp_unitType, int lp_count);
void gf_AdjustHPHard (unit lp_unit);
point gf_RelativeTargetPoint (point lp_source, point lp_sourceCenter, point lp_targetCenter);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init02aPlayersAttackWaveData;
trigger gt_Init03Units;
trigger gt_Init04MusicSound;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_Debug_FirstBaseSetup;
trigger gt_Debug_FullPower;
trigger gt_Debug_Experience;
trigger gt_StartGameQ;
trigger gt_StartingTransmissionQ;
trigger gt_HyperionBlinkTutorialQ;
trigger gt_HyperionBlinkUsedQ;
trigger gt_EncounterShipStop;
trigger gt_HyperionIsClose1;
trigger gt_HyperionIsClose2;
trigger gt_AoeEncounterQ;
trigger gt_LaunchFighterButtonClicked;
trigger gt_AoeEncounterFighterInCombat;
trigger gt_YamatoEncounterQ;
trigger gt_LaunchYamatoButtonClicked;
trigger gt_YamatoEncounterTowerInCombat;
trigger gt_FirstBaseCaptured;
trigger gt_MineralFieldTutorialQ;
trigger gt_MineralTutorialMineralKilled;
trigger gt_MineralClusterEnterRegion;
trigger gt_MineralClustersFoundQ;
trigger gt_MineralClustersMinesHighlight;
trigger gt_MineralClustersMinesUnhighlight;
trigger gt_MineralClustersMapPings;
trigger gt_SecondBaseCloseQ;
trigger gt_SecondBaseDamaged;
trigger gt_SecondBaseCaptured;
trigger gt_SecondBaseAutosaveQ;
trigger gt_TransmissionSecondBaseCapturedQ;
trigger gt_ThirdBaseCaptured;
trigger gt_ThirdBaseAutosaveQ;
trigger gt_TransmissionThirdBaseCapturedQ;
trigger gt_MiraTaunt1Q;
trigger gt_MiraTaunt2Q;
trigger gt_MiraTauntFightQ;
trigger gt_MiraTauntFinalQ;
trigger gt_MeteorFX;
trigger gt_HyperionBlinkStart;
trigger gt_HyperionBlinkEnd;
trigger gt_LaunchHyperionFighters;
trigger gt_HyperionFightersLeashingBehavior;
trigger gt_HyperionFighterAcquireTarget;
trigger gt_RecallHyperionFighters;
trigger gt_HyperionFightersInCombat;
trigger gt_HyperionFightersInCombatIndicatorDiminish;
trigger gt_HyperionFightersHaveTargetAttacked;
trigger gt_HyperionFightersHaveTargetIndicatorDiminish;
trigger gt_HyperionFightersDies;
trigger gt_HyperionFightersShareAggro;
trigger gt_HyperionEnterCombat;
trigger gt_HyperionInCombatIndicatorDiminish;
trigger gt_HyperionBeingAttacked;
trigger gt_HyperionBeingAttackedIndicatorDiminish;
trigger gt_TransmissionHyperionLeveledUpQ;
trigger gt_XPBarCreate;
trigger gt_XPBarUpdate;
trigger gt_MineralPickup;
trigger gt_MineralPickupAchievementCheckFailsafe;
trigger gt_RepairBotPickup;
trigger gt_RepairBotTutorialQ;
trigger gt_HyperionLifeTooLow;
trigger gt_HyperionLowHPFlashing;
trigger gt_TransmissionHyperionLifeLowWarning;
trigger gt_HyperionMinimapIcon;
trigger gt_CenterOnHyperion;
trigger gt_SpaceMineAttack;
trigger gt_PirateCapitalShipDiscoveredQ;
trigger gt_PirateCapitalShipEngaged;
trigger gt_PirateCapitalShipController;
trigger gt_PirateCapitalShipReset;
trigger gt_PirateCapitalShipEFieldHitQ;
trigger gt_PirateCapitalShipDestroyedQ;
trigger gt_MercSpaceStationTakesDamage;
trigger gt_MercSpaceStationBossBar;
trigger gt_MercSpaceStationThrowingMines;
trigger gt_BattlecruiserLogic;
trigger gt_BattlecruiserDies;
trigger gt_BattlecruiserTrained;
trigger gt_BattlecruiserTakesDamage;
trigger gt_TipMissionHelpQ;
trigger gt_StartAI;
trigger gt_AttackWavesPlayer;
trigger gt_AttackWavesEnemy;
trigger gt_AIGiveMinerals;
trigger gt_AIGiveGas;
trigger gt_AchievementCollectAllMinerals;
trigger gt_AchievementHyperionHitbyMagMineNH;
trigger gt_AchievementMaxLevelBy11Minutes;
trigger gt_AchievementTimedRunH;
trigger gt_StatHyperionDamageTaken;
trigger gt_StatYamatoKills;
trigger gt_DefeatPrimaryObjectiveFailed;
trigger gt_DefeatBaseDestroyed;
trigger gt_VictoryMainObjectiveCompleted;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_ObjectiveSetupSpaceStationCreate;
trigger gt_ObjectiveSetupSpaceStationPing;
trigger gt_ObjectiveSetupSpaceStationComplete;
trigger gt_ObjectiveDestroyMercenarySpaceStationCreate;
trigger gt_ObjectiveDestroyMercenarySpaceStationDiscoveredQ;
trigger gt_ObjectiveDestroyMercenarySpaceStationComplete;
trigger gt_ObjectiveHyperionMustSurviveCreate;
trigger gt_ObjectiveHyperionMustSurviveComplete;
trigger gt_ObjectiveHyperionMustSurviveFailed;
trigger gt_ObjectiveMineralFieldsCreate;
trigger gt_ObjectiveMineralFieldsUpdate;
trigger gt_ObjectiveMineralFieldsComplete;
trigger gt_TransmissionMineralFieldUpdateQ;
trigger gt_TransmissionMineralFieldCompleteQ;
trigger gt_ObjectivePirateCapitalShipCreate;
trigger gt_ObjectivePirateCapitalShipComplete;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_IntroFadeBookmark;
trigger gt_IntroMusic;
trigger gt_MidQ;
trigger gt_MidSetup;
trigger gt_MidCinematic;
trigger gt_MidCinematicEnd;
trigger gt_MidCleanup;
trigger gt_MidMusic;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;
trigger gt_VictoryFadeBookmark;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
bool gf_FirstBaseCaptured () {
    // Automatic Variable Declarations
    // Implementation
    return gv_firstBaseCaptured;
}

bool gf_SecondBaseCaptured () {
    // Automatic Variable Declarations
    // Implementation
    return libNtve_gf_UnitGroupIsDead(gv_secondBaseUnits);
}

bool gf_ThirdBaseCaptured () {
    // Automatic Variable Declarations
    // Implementation
    return libNtve_gf_UnitGroupIsDead(gv_thirdBaseUnits);
}

int gf_HyperionFighterCountCurrent () {
    // Automatic Variable Declarations
    // Implementation
    return FixedToInt(UnitAbilityChargeInfo(gv_hyperion, AbilityCommand("SJHyperionFighters", 0), c_unitAbilChargeCountLeft));
}

int gf_HyperionFighterCountMax () {
    // Automatic Variable Declarations
    // Implementation
    return FixedToInt(UnitAbilityChargeInfo(gv_hyperion, AbilityCommand("SJHyperionFighters", 0), c_unitAbilChargeCountMax));
}

void gf_HyperionFighterLeashing (unit lp_fighter) {
    // Variable Declarations
    unitgroup lv_targetGroup;
    unit lv_targetUnit;
    fixed lv_distance;
    fixed lv_distanceMin;
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup autoAD3A42B1_g;
    int autoAD3A42B1_u;

    // Variable Initialization
    lv_targetGroup = UnitGroupEmpty();

    // Implementation
    lv_targetGroup = gf_HyperionFighterTargetGroup();
    lv_distance = 0.0;
    lv_distanceMin = 0.0;
    lv_targetUnit = null;
    autoAD3A42B1_g = lv_targetGroup;
    autoAD3A42B1_u = UnitGroupCount(autoAD3A42B1_g, c_unitCountAll);
    for (;; autoAD3A42B1_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(autoAD3A42B1_g, autoAD3A42B1_u);
        if (lv_indexUnit == null) { break; }
        lv_distance = DistanceBetweenPoints(UnitGetPosition(lv_indexUnit), UnitGetPosition(lp_fighter));
        if (((lv_targetUnit == null) || (lv_distance < lv_distanceMin))) {
            lv_distanceMin = lv_distance;
            lv_targetUnit = lv_indexUnit;
        }

    }
    if ((lv_targetUnit != null)) {
        UnitIssueOrder(lp_fighter, OrderTargetingUnit(AbilityCommand("attack", 0), lv_targetUnit), c_orderQueueReplace);
    }
    else {
        UnitIssueOrder(lp_fighter, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(gv_hyperionFighterTarget, 3.0))), c_orderQueueReplace);
    }
}

void gf_RecallHyperionFighters () {
    // Variable Declarations
    unit lv_indexFighter;

    // Automatic Variable Declarations
    unitgroup auto0B40B366_g;
    int auto0B40B366_u;

    // Variable Initialization

    // Implementation
    if ((gv_hyperionFighterOut == false)) {
        return ;
    }

    if ((gv_hyperionFighterRecalling == true)) {
        return ;
    }

    UnitAbilityEnable(gv_hyperion, "SJHyperionFightersRecall", false);
    gv_hyperionFighterRecalling = true;
    while (true) {
        if ((gv_hyperionFighterRecalling == false)) {
            return ;
        }

        if ((UnitGroupCount(gv_hyperionFighterGroup, c_unitCountAlive) == 0)) {
            break;
        }

        auto0B40B366_g = gv_hyperionFighterGroup;
        auto0B40B366_u = UnitGroupCount(auto0B40B366_g, c_unitCountAll);
        for (;; auto0B40B366_u -= 1) {
            lv_indexFighter = UnitGroupUnitFromEnd(auto0B40B366_g, auto0B40B366_u);
            if (lv_indexFighter == null) { break; }
            if ((DistanceBetweenPoints(UnitGetPosition(lv_indexFighter), UnitGetPosition(gv_hyperion)) < 2.0)) {
                UnitRemove(lv_indexFighter);
            }
            else {
                UnitSetPropertyFixed(lv_indexFighter, c_unitPropMovementSpeed, (2.0 * UnitGetPropertyFixed(lv_indexFighter, c_unitPropMovementSpeed, c_unitPropNormal)));
                UnitIssueOrder(lv_indexFighter, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(gv_hyperion)), c_orderQueueReplace);
            }
        }
        Wait(0.25, c_timeGame);
    }
    Wait(0.25, c_timeGame);
    if ((gv_hyperionFighterRecalling == false)) {
        return ;
    }

    TriggerEnable(gt_RecallHyperionFighters, false);
    TriggerEnable(gt_HyperionFightersInCombat, false);
    TriggerEnable(gt_HyperionFightersInCombatIndicatorDiminish, false);
    TriggerEnable(gt_HyperionFightersHaveTargetAttacked, false);
    TriggerEnable(gt_HyperionFightersHaveTargetIndicatorDiminish, false);
    TriggerEnable(gt_HyperionFightersDies, false);
    TriggerEnable(gt_HyperionFightersShareAggro, false);
    TriggerEnable(gt_HyperionFighterAcquireTarget, false);
    UnitAbilityShow(gv_hyperion, "SJHyperionFightersRecall", false);
    gv_hyperionFighterOut = false;
    gv_hyperionFighterRecalling = false;
}

bool gf_HyperionFightersIsInCombat () {
    // Automatic Variable Declarations
    // Implementation
    return (gv_hyperionFighterCombatIndicator > 0);
}

bool gf_HyperionFightersHaveTarget () {
    // Variable Declarations
    unit lv_indexUnit;
    int lv_indexOrder;

    // Automatic Variable Declarations
    unitgroup auto4DE911B7_g;
    int auto4DE911B7_u;
    int auto806F3943_ae;
    const int auto806F3943_ai = 1;

    // Variable Initialization

    // Implementation
    auto4DE911B7_g = gv_hyperionFighterGroup;
    auto4DE911B7_u = UnitGroupCount(auto4DE911B7_g, c_unitCountAll);
    for (;; auto4DE911B7_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(auto4DE911B7_g, auto4DE911B7_u);
        if (lv_indexUnit == null) { break; }
        auto806F3943_ae = UnitOrderCount(lv_indexUnit);
        lv_indexOrder = 1;
        for ( ; ( (auto806F3943_ai >= 0 && lv_indexOrder <= auto806F3943_ae) || (auto806F3943_ai < 0 && lv_indexOrder >= auto806F3943_ae) ) ; lv_indexOrder += auto806F3943_ai ) {
            if ((OrderGetAbilityCommand(UnitOrder(lv_indexUnit, (lv_indexOrder - 1))) == AbilityCommand("attack", 0))) {
                return true;
            }

        }
    }
    return (gv_hyperionFighterHaveTagetIndicator > 0);
}

bool gf_HyperionFightersAreStunned () {
    // Variable Declarations
    unit lv_indexUnit;
    int lv_indexOrder;

    // Automatic Variable Declarations
    unitgroup auto94C14992_g;
    int auto94C14992_u;

    // Variable Initialization

    // Implementation
    auto94C14992_g = gv_hyperionFighterGroup;
    auto94C14992_u = UnitGroupCount(auto94C14992_g, c_unitCountAll);
    for (;; auto94C14992_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(auto94C14992_g, auto94C14992_u);
        if (lv_indexUnit == null) { break; }
        if ((UnitHasBehavior(lv_indexUnit, "SJPirateLightningStormStun") == true)) {
            return true;
        }

    }
    return false;
}

unitgroup gf_HyperionFighterTargetGroup () {
    // Variable Declarations
    unitgroup lv_targetGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_targetGroup = UnitGroupEmpty();

    // Implementation
    lv_targetGroup = UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionCircle(gv_hyperionFighterTarget, (gv_hyperionFighterTargetRadius - 1.0)), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupAddUnitGroup(lv_targetGroup, UnitGroup("SJMercStarport", c_playerAny, RegionCircle(gv_hyperionFighterTarget, 9.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_targetGroup, UnitGroup("SJSpaceStationMercenary", c_playerAny, RegionCircle(gv_hyperionFighterTarget, 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1));
    return lv_targetGroup;
}

trigger auto_gf_HyperionFighterWonder_Trigger = null;
unit auto_gf_HyperionFighterWonder_lp_fighter;
point auto_gf_HyperionFighterWonder_lp_targetCenter;

void gf_HyperionFighterWonder (unit lp_fighter, point lp_targetCenter) {
    auto_gf_HyperionFighterWonder_lp_fighter = lp_fighter;
    auto_gf_HyperionFighterWonder_lp_targetCenter = lp_targetCenter;

    if (auto_gf_HyperionFighterWonder_Trigger == null) {
        auto_gf_HyperionFighterWonder_Trigger = TriggerCreate("auto_gf_HyperionFighterWonder_TriggerFunc");
    }

    TriggerExecute(auto_gf_HyperionFighterWonder_Trigger, false, false);
}

bool auto_gf_HyperionFighterWonder_TriggerFunc (bool testConds, bool runActions) {
    unit lp_fighter = auto_gf_HyperionFighterWonder_lp_fighter;
    point lp_targetCenter = auto_gf_HyperionFighterWonder_lp_targetCenter;

    // Variable Declarations
    point lv_center;
    fixed lv_angle;
    point lv_target;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_center = lp_targetCenter;
    while (true) {
        while (!(((UnitIsAlive(lp_fighter) == false) || ((UnitTestState(lp_fighter, c_unitStateIdle) == true) && (UnitOrderCount(lp_fighter) == 0))))) {
            Wait(1.0, c_timeGame);
        }
        if ((UnitIsAlive(lp_fighter) == false)) {
            return true;
        }

        lv_angle = AngleBetweenPoints(UnitGetPosition(lp_fighter), lv_center);
        lv_angle = RandomFixed((lv_angle - 45.0), (lv_angle + 45.0));
        lv_target = PointWithOffsetPolar(UnitGetPosition(lp_fighter), 1.5, lv_angle);
        UnitIssueOrder(lp_fighter, OrderTargetingPoint(AbilityCommand("attack", 0), lv_target), c_orderQueueReplace);
        Wait(1.0, c_timeGame);
    }
    return true;
}

bool gf_HyperionInCombat () {
    // Automatic Variable Declarations
    // Implementation
    return (gv_hyperionInCombatIndicator > 0);
}

bool gf_HyperionBeingAttacked () {
    // Automatic Variable Declarations
    // Implementation
    return (gv_hyperionBeingAttackedIndicator > 0);
}

void gf_RewardMinerals (unit lp_unitKilled) {
    // Variable Declarations
    int lv_amount;
    text lv_label;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UnitIsAlive(gv_hyperion) == false)) {
        return ;
    }

    if ((UnitGetType(lp_unitKilled) == "SJCloakedMine") && (UnitGetCustomValue(lp_unitKilled, 0) != 0.0)) {
        lv_amount = 0;
    }
    else {
        lv_amount = StringToInt(CatalogFieldValueGet(c_gameCatalogUnit, (UnitGetType(lp_unitKilled)), "CostResource[Minerals]", gv_pLAYER_01_USER));
    }
    if ((lv_amount <= 0)) {
        return ;
    }

    TextExpressionSetToken("Param/Expression/401976B8", "A", StringToText(("Kicker_Minerals")));
    TextExpressionSetToken("Param/Expression/401976B8", "B", IntToText(lv_amount));
    lv_label = TextExpressionAssemble("Param/Expression/401976B8");
    TextTagCreate(lv_label, 24, UnitGetPosition(lp_unitKilled), 2.0, true, false, PlayerGroupAll());
    TextTagSetVelocity(TextTagLastCreated(), 0.7, 90.0);
    TextTagSetBackgroundImage(TextTagLastCreated(), "Assets\\Textures\\blank.dds", true);
    TextTagShowBackground(TextTagLastCreated(), true);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperAdd, lv_amount);
    gf_RewardExperience(lv_amount);
}

void gf_RewardExperience (int lp_amount) {
    // Variable Declarations
    int lv_level;

    // Automatic Variable Declarations
    int autoC1D4315D_val;

    // Variable Initialization

    // Implementation
    gv_hyperionExperience += lp_amount;
    UnitSetPropertyFixed(gv_hyperion, c_unitPropXP, gv_hyperionExperience);
    lv_level = ((gv_hyperionExperience / 1000) + 1);
    if ((lv_level == gv_hyperionLevel)) {
        return ;
    }

    gv_hyperionLevel = lv_level;
    libNtve_gf_AttachModelToUnit(gv_hyperion, "SJHyperionLevelUp", "Ref_Center");
    SoundPlay(SoundLink("UI_Achievement", -1), PlayerGroupAll(), 100.0, 0.0);
    TextTagCreate(StringExternal("Param/Value/3A9455B9"), 36, UnitGetPosition(gv_hyperion), 0.0, true, false, PlayerGroupAll());
    TextTagAttachToUnit(TextTagLastCreated(), gv_hyperion, 0.0);
    TextTagSetVelocity(TextTagLastCreated(), 0.8, 90.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 4.0);
    autoC1D4315D_val = gv_hyperionLevel;
    if (autoC1D4315D_val == 1) {
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "SJHyperionShipUpgrade2", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "SJHyperionShipUpgrade3", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "SJHyperionShipUpgrade4", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "SJHyperionFighterLaunch2", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "SJHyperionFighterLaunch3", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "SJHyperionFighterLaunch4", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "SJHyperionYamato2", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "SJHyperionYamato3", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "SJHyperionYamato4", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "SJHyperionLightningStorm2", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "SJHyperionLightningStorm3", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "SJHyperionLightningStorm4", 0);
    }
    else if (autoC1D4315D_val == 2) {
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "SJHyperionShipUpgrade2", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "SJHyperionShipUpgrade3", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "SJHyperionShipUpgrade4", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "SJHyperionFighterLaunch2", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "SJHyperionFighterLaunch3", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "SJHyperionFighterLaunch4", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "SJHyperionYamato2", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "SJHyperionYamato3", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "SJHyperionYamato4", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "SJHyperionLightningStorm2", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "SJHyperionLightningStorm3", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "SJHyperionLightningStorm4", 0);
    }
    else if (autoC1D4315D_val == 3) {
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "SJHyperionShipUpgrade2", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "SJHyperionShipUpgrade3", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "SJHyperionShipUpgrade4", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "SJHyperionFighterLaunch2", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "SJHyperionFighterLaunch3", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "SJHyperionFighterLaunch4", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "SJHyperionYamato2", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "SJHyperionYamato3", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "SJHyperionYamato4", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "SJHyperionLightningStorm2", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "SJHyperionLightningStorm3", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "SJHyperionLightningStorm4", 0);
    }
    else if (autoC1D4315D_val == 4) {
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "SJHyperionShipUpgrade2", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "SJHyperionShipUpgrade3", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "SJHyperionShipUpgrade4", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "SJHyperionFighterLaunch2", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "SJHyperionFighterLaunch3", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "SJHyperionFighterLaunch4", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "SJHyperionYamato2", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "SJHyperionYamato3", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "SJHyperionYamato4", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "SJHyperionLightningStorm2", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "SJHyperionLightningStorm3", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "SJHyperionLightningStorm4", 1);
    }
    else {
    }
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_TransmissionHyperionLeveledUpQ, true, false);
}

void gf_CreateHyperionLowHPUI () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_hyperionLowHPUIDlg != c_invalidDialogId)) {
        return ;
    }

    DialogCreate(1600, 1200, c_anchorCenter, 0, 0, false);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetFullscreen(DialogLastCreated(), true);
    gv_hyperionLowHPUIDlg = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1600, 1200, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_ingame_effects_splash2.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_hyperionLowHPUIImage = DialogControlLastCreated();
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
}

void gf_WaitforCriticalTransmissionFinished () {
    // Automatic Variable Declarations
    // Implementation
    while (!((gv_criticalTransmissionPlaying == false))) {
        Wait(0.0625, c_timeGame);
    }
}

void gf_CreateHyperionMinimapIcon () {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "Battlecruiser", PointFromId(138), ColorWithAlpha(50.20, 100.00, 100.00, 0.00), 0.0, 270.0);
    gv_hyperionMinimapIcon = PingLastCreated();
    PingSetUnit(PingLastCreated(), gv_hyperion);
    PingSetScale(PingLastCreated(), 0.04);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/FC542C60"));
    TriggerExecute(gt_HyperionMinimapIcon, true, false);
}

void gf_RestoreHyperionToFull (bool lp_removeFighters) {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup autoFB05024C_g;
    int autoFB05024C_u;
    int auto76730D7A_n;
    int auto76730D7A_i;

    // Variable Initialization

    // Implementation
    UnitIssueOrder(gv_hyperion, Order(AbilityCommand("SJHyperionQueue", 0)), c_orderQueueReplace);
    UnitSetPropertyFixed(gv_hyperion, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_hyperion, c_unitPropEnergyPercent, 100.0);
    if ((lp_removeFighters == true)) {
        autoFB05024C_g = gv_hyperionFighterGroup;
        autoFB05024C_u = UnitGroupCount(autoFB05024C_g, c_unitCountAll);
        for (;; autoFB05024C_u -= 1) {
            lv_indexUnit = UnitGroupUnitFromEnd(autoFB05024C_g, autoFB05024C_u);
            if (lv_indexUnit == null) { break; }
            UnitRemove(lv_indexUnit);
        }
    }

    auto76730D7A_n = (gf_HyperionFighterCountMax() - gf_HyperionFighterCountCurrent());
    for (auto76730D7A_i = 1; auto76730D7A_i <= auto76730D7A_n; auto76730D7A_i += 1) {
        UnitAddChargeUsed(gv_hyperion, "SJHyperionFighters", -1.0);
    }
}

trigger auto_gf_MercSpaceStationMineMovement_Trigger = null;
unit auto_gf_MercSpaceStationMineMovement_lp_mine;
fixed auto_gf_MercSpaceStationMineMovement_lp_angle;

void gf_MercSpaceStationMineMovement (unit lp_mine, fixed lp_angle) {
    auto_gf_MercSpaceStationMineMovement_lp_mine = lp_mine;
    auto_gf_MercSpaceStationMineMovement_lp_angle = lp_angle;

    if (auto_gf_MercSpaceStationMineMovement_Trigger == null) {
        auto_gf_MercSpaceStationMineMovement_Trigger = TriggerCreate("auto_gf_MercSpaceStationMineMovement_TriggerFunc");
    }

    TriggerExecute(auto_gf_MercSpaceStationMineMovement_Trigger, false, false);
}

bool auto_gf_MercSpaceStationMineMovement_TriggerFunc (bool testConds, bool runActions) {
    unit lp_mine = auto_gf_MercSpaceStationMineMovement_lp_mine;
    fixed lp_angle = auto_gf_MercSpaceStationMineMovement_lp_angle;

    // Automatic Variable Declarations
    const int auto6A562190_n = 60;
    int auto6A562190_i;

    // Implementation
    for (auto6A562190_i = 1; auto6A562190_i <= auto6A562190_n; auto6A562190_i += 1) {
        if (((UnitIsAlive(lp_mine) == false) || (gv_gameOver == true))) {
            return true;
        }

        UnitSetPosition(lp_mine, PointWithOffsetPolar(UnitGetPosition(lp_mine), 0.08, lp_angle), true);
        Wait(0.0625, c_timeGame);
    }
    UnitBehaviorRemove(lp_mine, "SJDisableSpaceMineWeapons", 1);
    return true;
}

void gf_TriggerAddEventUnitDamaged (trigger lp_trigger, unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventUnitDamaged(lp_trigger, UnitRefFromUnit(lp_unit), c_unitDamageTypeAny, c_unitDamageEither, null);
}

trigger auto_gf_SendPlayerAttackWave_Trigger = null;

void gf_SendPlayerAttackWave () {
    if (auto_gf_SendPlayerAttackWave_Trigger == null) {
        auto_gf_SendPlayerAttackWave_Trigger = TriggerCreate("auto_gf_SendPlayerAttackWave_TriggerFunc");
    }

    TriggerExecute(auto_gf_SendPlayerAttackWave_Trigger, false, false);
}

bool auto_gf_SendPlayerAttackWave_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    if ((gf_SecondBaseCaptured() == false)) {
        gf_SendAttackWaveSingle(gv_pLAYER_05_RAYNOR, "SJWraith", "SJWraith", 2);
        Wait(2.0, c_timeGame);
        gf_SendAttackWaveSingle(gv_pLAYER_05_RAYNOR, "SJWraith", "SJWraith", 2);
    }
    else {
        if ((gf_ThirdBaseCaptured() == false)) {
            gf_SendAttackWaveSingle(gv_pLAYER_05_RAYNOR, "SJWraith", "SJWraith", 4);
            Wait(2.0, c_timeGame);
            gf_SendAttackWaveSingle(gv_pLAYER_05_RAYNOR, "SJViking", "SJViking", 2);
        }
        else {
            gf_SendAttackWaveSingle(gv_pLAYER_05_RAYNOR, "SJWraith", "SJWraith", 4);
            Wait(2.0, c_timeGame);
            gf_SendAttackWaveSingle(gv_pLAYER_05_RAYNOR, "SJBattlecruiser", "SJViking", 2);
        }
    }
    return true;
}

trigger auto_gf_SendEnemyAttackWave_Trigger = null;

void gf_SendEnemyAttackWave () {
    if (auto_gf_SendEnemyAttackWave_Trigger == null) {
        auto_gf_SendEnemyAttackWave_Trigger = TriggerCreate("auto_gf_SendEnemyAttackWave_TriggerFunc");
    }

    TriggerExecute(auto_gf_SendEnemyAttackWave_Trigger, false, false);
}

bool auto_gf_SendEnemyAttackWave_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    if ((gf_SecondBaseCaptured() == false)) {
        gf_SendAttackWaveSingle(gv_pLAYER_02_MIRA_HAN, "SJGriffon", "SJGriffon", 2);
        Wait(2.0, c_timeGame);
        gf_SendAttackWaveSingle(gv_pLAYER_02_MIRA_HAN, "SJGriffon", "SJGriffon", 2);
    }
    else {
        if ((gf_ThirdBaseCaptured() == false)) {
            gf_SendAttackWaveSingle(gv_pLAYER_02_MIRA_HAN, "SJGriffon", "SJGriffon", 4);
            Wait(2.0, c_timeGame);
            if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
                gf_SendAttackWaveSingle(gv_pLAYER_02_MIRA_HAN, "SJValkyrie", "SJValkyrie", 2);
            }
            else {
                gf_SendAttackWaveSingle(gv_pLAYER_02_MIRA_HAN, "SJBattlecruiser", "SJGriffon", 2);
            }
        }
        else {
            gf_SendAttackWaveSingle(gv_pLAYER_02_MIRA_HAN, "SJGriffon", "SJGriffon", 4);
            Wait(2.0, c_timeGame);
            if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
                gf_SendAttackWaveSingle(gv_pLAYER_02_MIRA_HAN, "SJBattlecruiser", "SJValkyrie", 2);
            }
            else {
                gf_SendAttackWaveSingle(gv_pLAYER_02_MIRA_HAN, "SJBattlecruiser", "SJValkyrie", 4);
            }
        }
    }
    return true;
}

trigger auto_gf_SendAttackWaveSingle_Trigger = null;
int auto_gf_SendAttackWaveSingle_lp_player;
string auto_gf_SendAttackWaveSingle_lp_unitTypeMiddle;
string auto_gf_SendAttackWaveSingle_lp_unitType;
int auto_gf_SendAttackWaveSingle_lp_count;

void gf_SendAttackWaveSingle (int lp_player, string lp_unitTypeMiddle, string lp_unitType, int lp_count) {
    auto_gf_SendAttackWaveSingle_lp_player = lp_player;
    auto_gf_SendAttackWaveSingle_lp_unitTypeMiddle = lp_unitTypeMiddle;
    auto_gf_SendAttackWaveSingle_lp_unitType = lp_unitType;
    auto_gf_SendAttackWaveSingle_lp_count = lp_count;

    if (auto_gf_SendAttackWaveSingle_Trigger == null) {
        auto_gf_SendAttackWaveSingle_Trigger = TriggerCreate("auto_gf_SendAttackWaveSingle_TriggerFunc");
    }

    TriggerExecute(auto_gf_SendAttackWaveSingle_Trigger, false, false);
}

bool auto_gf_SendAttackWaveSingle_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_SendAttackWaveSingle_lp_player;
    string lp_unitTypeMiddle = auto_gf_SendAttackWaveSingle_lp_unitTypeMiddle;
    string lp_unitType = auto_gf_SendAttackWaveSingle_lp_unitType;
    int lp_count = auto_gf_SendAttackWaveSingle_lp_count;

    // Variable Declarations
    point lv_spawnLoc;
    point lv_nextLoc;
    fixed lv_angle;
    const fixed lv_offset = 5.0;
    const fixed lv_interval = 2.0;
    point lv_assembleCenter;
    point lv_assembleLoc;
    unitgroup lv_group;
    int lv_index;
    int lv_indexNext;
    int lv_indexEnd;
    int lv_increment;
    unit lv_indexUnit;

    // Automatic Variable Declarations
    int autoAC10F9F6_ae;
    const int autoAC10F9F6_ai = 1;
    int autoE2906F0A_ae;
    const int autoE2906F0A_ai = 1;
    int auto93CD4749_ae;
    const int auto93CD4749_ai = 1;
    int autoE4AE01CB_ae;
    const int autoE4AE01CB_ai = 1;
    int autoA9163994_ae;
    int autoA9163994_ai;
    unitgroup auto76CDD65C_g;
    int auto76CDD65C_u;

    // Variable Initialization
    lv_group = UnitGroupEmpty();

    // Implementation
    if ((lp_player == gv_pLAYER_05_RAYNOR)) {
        if ((gf_SecondBaseCaptured() == false)) {
            lv_indexNext = 1;
            lv_spawnLoc = gv_playerAttackWaveWayPoints[lv_indexNext];
            lv_indexNext += 1;
            lv_nextLoc = gv_playerAttackWaveWayPoints[lv_indexNext];
            lv_indexEnd = gv_playerAttackWaveWayPointCount;
            lv_increment = 1;
        }
        else {
            if ((gf_ThirdBaseCaptured() == false)) {
                lv_spawnLoc = PointFromId(131);
                lv_indexNext = 0;
                autoE2906F0A_ae = gv_playerAttackWaveWayPointCount;
                lv_index = 1;
                for ( ; ( (autoE2906F0A_ai >= 0 && lv_index <= autoE2906F0A_ae) || (autoE2906F0A_ai < 0 && lv_index >= autoE2906F0A_ae) ) ; lv_index += autoE2906F0A_ai ) {
                    if ((gv_playerAttackWaveWayPoints[lv_index] == lv_spawnLoc)) {
                        lv_indexNext = lv_index;
                        break;
                    }

                }
                lv_indexNext += 1;
                lv_nextLoc = gv_playerAttackWaveWayPoints[lv_indexNext];
                lv_indexEnd = gv_playerAttackWaveWayPointCount;
                lv_increment = 1;
            }
            else {
                lv_spawnLoc = PointFromId(132);
                lv_indexNext = 0;
                autoAC10F9F6_ae = gv_playerAttackWaveWayPointCount;
                lv_index = 1;
                for ( ; ( (autoAC10F9F6_ai >= 0 && lv_index <= autoAC10F9F6_ae) || (autoAC10F9F6_ai < 0 && lv_index >= autoAC10F9F6_ae) ) ; lv_index += autoAC10F9F6_ai ) {
                    if ((gv_playerAttackWaveWayPoints[lv_index] == lv_spawnLoc)) {
                        lv_indexNext = lv_index;
                        break;
                    }

                }
                lv_indexNext += 1;
                lv_nextLoc = gv_playerAttackWaveWayPoints[lv_indexNext];
                lv_indexEnd = gv_playerAttackWaveWayPointCount;
                lv_increment = 1;
            }
        }
    }
    else {
        lv_indexNext = gv_playerAttackWaveWayPointCount;
        lv_spawnLoc = gv_playerAttackWaveWayPoints[lv_indexNext];
        lv_indexNext -= 1;
        lv_nextLoc = gv_playerAttackWaveWayPoints[lv_indexNext];
        lv_indexEnd = 1;
        lv_increment = -1;
    }
    lv_angle = AngleBetweenPoints(lv_spawnLoc, gv_playerAttackWaveWayPoints[lv_indexNext]);
    lv_assembleCenter = PointWithOffsetPolar(lv_spawnLoc, lv_offset, lv_angle);
    UnitCreate(1, lp_unitTypeMiddle, c_unitCreateIgnorePlacement, lp_player, lv_spawnLoc, lv_angle);
    UnitGroupAdd(lv_group, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), lv_assembleCenter), c_orderQueueReplace);
    if ((lp_unitTypeMiddle == "SJBattlecruiser") && (libNtve_gf_PlayerIsEnemy(lp_player, gv_pLAYER_01_USER, libNtve_ge_PlayerRelation_Enemy) == true)) {
        gf_TriggerAddEventUnitDamaged(gt_BattlecruiserTakesDamage, UnitLastCreated());
    }

    auto93CD4749_ae = (lp_count / 2);
    lv_index = 1;
    for ( ; ( (auto93CD4749_ai >= 0 && lv_index <= auto93CD4749_ae) || (auto93CD4749_ai < 0 && lv_index >= auto93CD4749_ae) ) ; lv_index += auto93CD4749_ai ) {
        lv_assembleLoc = PointWithOffsetPolar(lv_assembleCenter, (IntToFixed(lv_index) * lv_interval), (lv_angle + 90.0));
        UnitCreate(1, lp_unitType, c_unitCreateIgnorePlacement, lp_player, lv_spawnLoc, lv_angle);
        gf_AdjustHPHard(UnitLastCreated());
        UnitGroupAdd(lv_group, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), lv_assembleLoc), c_orderQueueReplace);
        if ((lp_unitTypeMiddle == "SJBattlecruiser") && (libNtve_gf_PlayerIsEnemy(lp_player, gv_pLAYER_01_USER, libNtve_ge_PlayerRelation_Enemy) == true)) {
            gf_TriggerAddEventUnitDamaged(gt_BattlecruiserTakesDamage, UnitLastCreated());
        }

    }
    autoE4AE01CB_ae = (lp_count / 2);
    lv_index = 1;
    for ( ; ( (autoE4AE01CB_ai >= 0 && lv_index <= autoE4AE01CB_ae) || (autoE4AE01CB_ai < 0 && lv_index >= autoE4AE01CB_ae) ) ; lv_index += autoE4AE01CB_ai ) {
        lv_assembleLoc = PointWithOffsetPolar(lv_assembleCenter, (IntToFixed(lv_index) * lv_interval), (lv_angle - 90.0));
        UnitCreate(1, lp_unitType, c_unitCreateIgnorePlacement, lp_player, lv_spawnLoc, lv_angle);
        gf_AdjustHPHard(UnitLastCreated());
        UnitGroupAdd(lv_group, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), lv_assembleLoc), c_orderQueueReplace);
        if ((lp_unitTypeMiddle == "SJBattlecruiser") && (libNtve_gf_PlayerIsEnemy(lp_player, gv_pLAYER_01_USER, libNtve_ge_PlayerRelation_Enemy) == true)) {
            gf_TriggerAddEventUnitDamaged(gt_BattlecruiserTakesDamage, UnitLastCreated());
        }

    }
    Wait(2.0, c_timeGame);
    autoA9163994_ae = lv_indexEnd;
    autoA9163994_ai = lv_increment;
    lv_index = lv_indexNext;
    for ( ; ( (autoA9163994_ai >= 0 && lv_index <= autoA9163994_ae) || (autoA9163994_ai < 0 && lv_index >= autoA9163994_ae) ) ; lv_index += autoA9163994_ai ) {
        auto76CDD65C_g = lv_group;
        auto76CDD65C_u = UnitGroupCount(auto76CDD65C_g, c_unitCountAll);
        for (;; auto76CDD65C_u -= 1) {
            lv_indexUnit = UnitGroupUnitFromEnd(auto76CDD65C_g, auto76CDD65C_u);
            if (lv_indexUnit == null) { break; }
            lv_nextLoc = gf_RelativeTargetPoint(UnitGetPosition(lv_indexUnit), lv_assembleCenter, gv_playerAttackWaveWayPoints[lv_index]);
            UnitIssueOrder(lv_indexUnit, OrderTargetingPoint(AbilityCommand("attack", 0), lv_nextLoc), c_orderQueueAddToEnd);
        }
    }
    return true;
}

trigger auto_gf_AdjustHPHard_Trigger = null;
unit auto_gf_AdjustHPHard_lp_unit;

void gf_AdjustHPHard (unit lp_unit) {
    auto_gf_AdjustHPHard_lp_unit = lp_unit;

    if (auto_gf_AdjustHPHard_Trigger == null) {
        auto_gf_AdjustHPHard_Trigger = TriggerCreate("auto_gf_AdjustHPHard_TriggerFunc");
    }

    TriggerExecute(auto_gf_AdjustHPHard_Trigger, false, false);
}

bool auto_gf_AdjustHPHard_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_AdjustHPHard_lp_unit;

    // Automatic Variable Declarations
    string auto3B645A6A_val;

    // Implementation
    if ((UnitGetOwner(lp_unit) == gv_pLAYER_02_MIRA_HAN) && (libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        auto3B645A6A_val = UnitGetType(lp_unit);
        if (auto3B645A6A_val == "SJCloakedMine") {
            UnitSetPropertyFixed(lp_unit, c_unitPropLifeMax, gv_hardSpaceMineLife);
        }
        else if (auto3B645A6A_val == "SJValkyrie") {
            UnitSetPropertyFixed(lp_unit, c_unitPropLifeMax, gv_hardGriffonLife);
        }
        else if (auto3B645A6A_val == "SJGriffon") {
            UnitSetPropertyFixed(lp_unit, c_unitPropLifeMax, gv_hardGriffonLife);
        }
        else if (auto3B645A6A_val == "SJMercAATower") {
            UnitSetPropertyFixed(lp_unit, c_unitPropLifeMax, gv_hardOrdinanceTower);
        }
        else if (auto3B645A6A_val == "SJMercStarport") {
            UnitSetPropertyFixed(lp_unit, c_unitPropLifeMax, gv_hardMercStarport);
        }
        else if (auto3B645A6A_val == "SJSpaceStationMercenary") {
            UnitSetPropertyFixed(lp_unit, c_unitPropLifeMax, gv_hardMiraHanBoss);
        }
        else {
        }
        UnitSetPropertyFixed(lp_unit, c_unitPropLifePercent, 100.0);
    }

    return true;
}

point gf_RelativeTargetPoint (point lp_source, point lp_sourceCenter, point lp_targetCenter) {
    // Automatic Variable Declarations
    // Implementation
    return PointWithOffset(lp_targetCenter, (PointGetX(lp_source) - PointGetX(lp_sourceCenter)), (PointGetY(lp_source) - PointGetY(lp_sourceCenter)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_ULoadCampaignData("ZSpace1");
    TriggerExecute(gt_Init01Technology, true, true);
    libSwaC_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03Units, true, true);
    TriggerExecute(gt_Init04MusicSound, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulties, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    TriggerExecute(gt_IntroQ, true, true);
    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "SJHyperionOutOfCombat", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "SJHyperionHangerCheck", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_03_PIRATE, "SJPirateYamato", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_03_PIRATE, "SJHyperionLightningStorm2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "BattlecruiserEnableSpecializations", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_MIRA_HAN, "BattlecruiserEnableSpecializations", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_06_MIRA_BASE1, "BattlecruiserEnableSpecializations", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_07_MIRA_BASE2, "BattlecruiserEnableSpecializations", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_playerTeam;
    playergroup lv_enemyTeam;
    int lv_indexPlayer1;
    int lv_indexPlayer2;

    // Automatic Variable Declarations
    playergroup auto19806B14_g;
    playergroup auto20C23269_g;
    playergroup auto80D6DB07_g;
    playergroup auto4E2CD294_g;
    playergroup auto35A3EFBE_g;
    playergroup autoE1B53E7C_g;
    playergroup auto004AD44D_g;

    // Variable Initialization
    lv_playerTeam = PlayerGroupEmpty();
    lv_enemyTeam = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupAdd(lv_playerTeam, gv_pLAYER_01_USER);
    PlayerGroupAdd(lv_playerTeam, gv_pLAYER_05_RAYNOR);
    PlayerGroupAdd(lv_enemyTeam, gv_pLAYER_02_MIRA_HAN);
    PlayerGroupAdd(lv_enemyTeam, gv_pLAYER_03_PIRATE);
    PlayerGroupAdd(lv_enemyTeam, gv_pLAYER_06_MIRA_BASE1);
    PlayerGroupAdd(lv_enemyTeam, gv_pLAYER_07_MIRA_BASE2);
    auto19806B14_g = lv_playerTeam;
    lv_indexPlayer1 = -1;
    while (true) {
        lv_indexPlayer1 = PlayerGroupNextPlayer(auto19806B14_g, lv_indexPlayer1);
        if (lv_indexPlayer1 < 0) { break; }
        auto20C23269_g = lv_playerTeam;
        lv_indexPlayer2 = -1;
        while (true) {
            lv_indexPlayer2 = PlayerGroupNextPlayer(auto20C23269_g, lv_indexPlayer2);
            if (lv_indexPlayer2 < 0) { break; }
            if ((lv_indexPlayer1 != lv_indexPlayer2)) {
                libNtve_gf_SetAlliance(lv_indexPlayer1, lv_indexPlayer2, libNtve_ge_AllianceSetting_AllyWithSharedVision);
            }

        }
    }
    auto80D6DB07_g = lv_enemyTeam;
    lv_indexPlayer1 = -1;
    while (true) {
        lv_indexPlayer1 = PlayerGroupNextPlayer(auto80D6DB07_g, lv_indexPlayer1);
        if (lv_indexPlayer1 < 0) { break; }
        auto4E2CD294_g = lv_enemyTeam;
        lv_indexPlayer2 = -1;
        while (true) {
            lv_indexPlayer2 = PlayerGroupNextPlayer(auto4E2CD294_g, lv_indexPlayer2);
            if (lv_indexPlayer2 < 0) { break; }
            if ((lv_indexPlayer1 != lv_indexPlayer2)) {
                libNtve_gf_SetAlliance(lv_indexPlayer1, lv_indexPlayer2, libNtve_ge_AllianceSetting_AllyWithSharedVision);
            }

        }
    }
    auto35A3EFBE_g = lv_playerTeam;
    lv_indexPlayer1 = -1;
    while (true) {
        lv_indexPlayer1 = PlayerGroupNextPlayer(auto35A3EFBE_g, lv_indexPlayer1);
        if (lv_indexPlayer1 < 0) { break; }
        autoE1B53E7C_g = lv_enemyTeam;
        lv_indexPlayer2 = -1;
        while (true) {
            lv_indexPlayer2 = PlayerGroupNextPlayer(autoE1B53E7C_g, lv_indexPlayer2);
            if (lv_indexPlayer2 < 0) { break; }
            if ((lv_indexPlayer1 != lv_indexPlayer2)) {
                libNtve_gf_SetAlliance(lv_indexPlayer1, lv_indexPlayer2, libNtve_ge_AllianceSetting_Enemy);
            }

        }
    }
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 0);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 0);
    auto004AD44D_g = lv_enemyTeam;
    lv_indexPlayer1 = -1;
    while (true) {
        lv_indexPlayer1 = PlayerGroupNextPlayer(auto004AD44D_g, lv_indexPlayer1);
        if (lv_indexPlayer1 < 0) { break; }
        PlayerModifyPropertyInt(lv_indexPlayer1, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
        PlayerModifyPropertyInt(lv_indexPlayer1, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    }
    TriggerExecute(gt_Init02aPlayersAttackWaveData, true, false);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackUnitAlly", false);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackUnitAlly_Prot", false);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackUnitAlly_Terr", false);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackUnitAlly_Zerg", false);
    UISetFrameVisible(PlayerGroupSingle(gv_pLAYER_01_USER), c_syncFrameTypeSupply, false);
    UISetResourceVisible(PlayerGroupAll(), c_resourceTypeMinerals, false);
    UISetResourceVisible(PlayerGroupAll(), c_resourceTypeVespene, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02a Players Attack Wave Data
//--------------------------------------------------------------------------------------------------
bool gt_Init02aPlayersAttackWaveData_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerAttackWaveWayPointCount += 1;
    gv_playerAttackWaveWayPoints[gv_playerAttackWaveWayPointCount] = PointFromId(1);
    gv_playerAttackWaveWayPointCount += 1;
    gv_playerAttackWaveWayPoints[gv_playerAttackWaveWayPointCount] = PointFromId(31);
    gv_playerAttackWaveWayPointCount += 1;
    gv_playerAttackWaveWayPoints[gv_playerAttackWaveWayPointCount] = PointFromId(32);
    gv_playerAttackWaveWayPointCount += 1;
    gv_playerAttackWaveWayPoints[gv_playerAttackWaveWayPointCount] = PointFromId(22);
    gv_playerAttackWaveWayPointCount += 1;
    gv_playerAttackWaveWayPoints[gv_playerAttackWaveWayPointCount] = PointFromId(14);
    gv_playerAttackWaveWayPointCount += 1;
    gv_playerAttackWaveWayPoints[gv_playerAttackWaveWayPointCount] = PointFromId(131);
    gv_playerAttackWaveWayPointCount += 1;
    gv_playerAttackWaveWayPoints[gv_playerAttackWaveWayPointCount] = PointFromId(21);
    gv_playerAttackWaveWayPointCount += 1;
    gv_playerAttackWaveWayPoints[gv_playerAttackWaveWayPointCount] = PointFromId(207);
    gv_playerAttackWaveWayPointCount += 1;
    gv_playerAttackWaveWayPoints[gv_playerAttackWaveWayPointCount] = PointFromId(208);
    gv_playerAttackWaveWayPointCount += 1;
    gv_playerAttackWaveWayPoints[gv_playerAttackWaveWayPointCount] = PointFromId(15);
    gv_playerAttackWaveWayPointCount += 1;
    gv_playerAttackWaveWayPoints[gv_playerAttackWaveWayPointCount] = PointFromId(132);
    gv_playerAttackWaveWayPointCount += 1;
    gv_playerAttackWaveWayPoints[gv_playerAttackWaveWayPointCount] = PointFromId(16);
    gv_playerAttackWaveWayPointCount += 1;
    gv_playerAttackWaveWayPoints[gv_playerAttackWaveWayPointCount] = PointFromId(19);
    gv_playerAttackWaveWayPointCount += 1;
    gv_playerAttackWaveWayPoints[gv_playerAttackWaveWayPointCount] = PointFromId(2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02aPlayersAttackWaveData_Init () {
    gt_Init02aPlayersAttackWaveData = TriggerCreate("gt_Init02aPlayersAttackWaveData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup autoC708BF1D_g;
    int autoC708BF1D_u;
    unit autoC708BF1D_var;
    unitgroup autoF5ACCDA3_g;
    int autoF5ACCDA3_u;
    unit autoF5ACCDA3_var;
    unitgroup auto528D35D1_g;
    int auto528D35D1_u;
    unit auto528D35D1_var;
    unitgroup autoA2142249_g;
    int autoA2142249_u;
    unit autoA2142249_var;
    unitgroup autoD8B55153_g;
    int autoD8B55153_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerBase = UnitFromId(76);
    UnitIssueOrder(gv_playerBase, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libSwaC_gf_SetUnitInfoTextCampaign(gv_playerBase, null, UnitTypeGetName(UnitGetType(gv_playerBase)), StringExternal("Param/Value/B3553AF2"));
    libNtve_gf_ShowHideUnit(gv_playerBase, false);
    gv_enemyBase = UnitFromId(5);
    UnitIssueOrder(gv_enemyBase, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    gv_hyperion = UnitFromId(9);
    gv_c_HyperionLevelExp[1] = 0;
    gv_c_HyperionLevelExp[2] = 1000;
    gv_c_HyperionLevelExp[3] = 2000;
    gv_c_HyperionLevelExp[4] = 3000;
    libSwaC_gf_SetHeroPanelUnit(1, gv_hyperion);
    gv_aoeEncounterFighters = UnitGroup("SJGriffon", gv_pLAYER_02_MIRA_HAN, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv_yamatoEncounterTower = UnitFromId(25);
    gv_mineralTutorialFormation = UnitFromId(224);
    gv_pirateCapitalShip = UnitFromId(7);
    gv_firstBaseUnits = UnitGroup(null, gv_pLAYER_02_MIRA_HAN, RegionFromId(13), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv_firstBaseGuards = UnitGroup(null, gv_pLAYER_02_MIRA_HAN, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv_secondBaseUnits = UnitGroup(null, gv_pLAYER_06_MIRA_BASE1, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv_thirdBaseUnits = UnitGroup(null, gv_pLAYER_07_MIRA_BASE2, RegionFromId(22), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupAddUnitGroup(gv_objectiveMineralFieldsGroup[1], UnitGroup("SJMineralFormation1", 0, RegionFromId(25), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(gv_objectiveMineralFieldsGroup[1], UnitGroup("SJMineralFormation2", 0, RegionFromId(25), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(gv_objectiveMineralFieldsGroup[2], UnitGroup("SJMineralFormation1", 0, RegionFromId(24), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(gv_objectiveMineralFieldsGroup[2], UnitGroup("SJMineralFormation2", 0, RegionFromId(24), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(gv_objectiveMineralFieldsGroup[3], UnitGroup("SJMineralFormation1", 0, RegionFromId(26), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(gv_objectiveMineralFieldsGroup[3], UnitGroup("SJMineralFormation2", 0, RegionFromId(26), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    autoC708BF1D_g = UnitGroup("SJMineralFormation1", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC708BF1D_u = UnitGroupCount(autoC708BF1D_g, c_unitCountAll);
    for (;; autoC708BF1D_u -= 1) {
        autoC708BF1D_var = UnitGroupUnitFromEnd(autoC708BF1D_g, autoC708BF1D_u);
        if (autoC708BF1D_var == null) { break; }
        libSwaC_gf_SetUnitInfoTextCampaign(autoC708BF1D_var, StringExternal("Param/Value/84D53E74"), StringExternal("Param/Value/A015BA56"), null);
        UnitSetState(autoC708BF1D_var, c_unitStateTooltipable, true);
    }
    autoF5ACCDA3_g = UnitGroup("SJMineralFormation2", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF5ACCDA3_u = UnitGroupCount(autoF5ACCDA3_g, c_unitCountAll);
    for (;; autoF5ACCDA3_u -= 1) {
        autoF5ACCDA3_var = UnitGroupUnitFromEnd(autoF5ACCDA3_g, autoF5ACCDA3_u);
        if (autoF5ACCDA3_var == null) { break; }
        libSwaC_gf_SetUnitInfoTextCampaign(autoF5ACCDA3_var, StringExternal("Param/Value/862F715C"), StringExternal("Param/Value/B1DCBF56"), null);
        UnitSetState(autoF5ACCDA3_var, c_unitStateTooltipable, true);
    }
    auto528D35D1_g = UnitGroup("SJPickupHealth500", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto528D35D1_u = UnitGroupCount(auto528D35D1_g, c_unitCountAll);
    for (;; auto528D35D1_u -= 1) {
        auto528D35D1_var = UnitGroupUnitFromEnd(auto528D35D1_g, auto528D35D1_u);
        if (auto528D35D1_var == null) { break; }
        libSwaC_gf_SetUnitInfoTextCampaign(auto528D35D1_var, StringExternal("Param/Value/DA0AD7B8"), StringExternal("Param/Value/2C3795F2"), null);
    }
    autoA2142249_g = UnitGroup("SJMercStarport", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA2142249_u = UnitGroupCount(autoA2142249_g, c_unitCountAll);
    for (;; autoA2142249_u -= 1) {
        autoA2142249_var = UnitGroupUnitFromEnd(autoA2142249_g, autoA2142249_u);
        if (autoA2142249_var == null) { break; }
        UnitBehaviorAdd(autoA2142249_var, "SJMercStarportQueueBuff", autoA2142249_var, 1);
    }
    gv_firstBaseEdgeUnitsHidden = UnitGroup(null, c_playerAny, RegionFromId(36), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD8B55153_g = gv_firstBaseEdgeUnitsHidden;
    autoD8B55153_u = UnitGroupCount(autoD8B55153_g, c_unitCountAll);
    for (;; autoD8B55153_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(autoD8B55153_g, autoD8B55153_u);
        if (lv_indexUnit == null) { break; }
        libNtve_gf_ShowHideUnit(lv_indexUnit, false);
        libNtve_gf_PauseUnit(lv_indexUnit, true);
    }
    gv_numberOfMineralClusters = (TechTreeUnitCount(0, "SJMineralFormation2", c_techCountQueuedOrBetter) + TechTreeUnitCount(0, "SJMineralFormation1", c_techCountQueuedOrBetter));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init04MusicSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mapMusicTrack = "ZSpace01MusicMain";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Space01", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04MusicSound_Init () {
    gt_Init04MusicSound = TriggerCreate("gt_Init04MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_actorTerrain;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    TerrainShowRegion(RegionEntireMap(), false);
    GameSetBackground(c_backgroundFixed, "SkyBoxPortZionSpace", 100.0);
    GameSetBackground(c_backgroundTerrain, "SkyBoxPortZionSpaceParallax", 100.0);
    libLbty_gf_AutoRevealRegion(RegionFromId(11), RegionFromId(11), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(1), RegionFromId(28), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(8), RegionFromId(5), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(6), RegionFromId(3), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(36), RegionFromId(36), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(33), RegionFromId(33), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(16), RegionFromId(15), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(19), RegionFromId(20), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(10), RegionFromId(10), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(21), RegionFromId(21), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(17), RegionFromId(17), gv_pLAYER_01_USER);
    lv_actorTerrain = ActorFrom("::Terrain");
    ActorSend(lv_actorTerrain, "TerrainPhysicsReinitialize");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto5BE0AFB8_g;
    int auto5BE0AFB8_u;
    unit auto5BE0AFB8_var;
    unitgroup auto85E22B30_g;
    int auto85E22B30_u;
    unit auto85E22B30_var;
    unitgroup auto5C20012F_g;
    int auto5C20012F_u;
    unit auto5C20012F_var;
    unitgroup autoB59221BD_g;
    int autoB59221BD_u;
    unit autoB59221BD_var;
    unitgroup autoC50587D6_g;
    int autoC50587D6_u;
    unit autoC50587D6_var;
    unitgroup autoE63DD611_g;
    int autoE63DD611_u;
    unit autoE63DD611_var;
    unitgroup auto1EB532B1_g;
    int auto1EB532B1_u;
    unit auto1EB532B1_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
        CatalogFieldValueSet(c_gameCatalogEffect, "SJPirateCapitalShipLeftDamage", "Amount", gv_pLAYER_01_USER, "3");
        CatalogFieldValueSet(c_gameCatalogEffect, "SJPirateCapitalShipRightDamage", "Amount", gv_pLAYER_01_USER, "3");
        CatalogFieldValueSet(c_gameCatalogEffect, "SJPirateYamatoADamage", "Amount", gv_pLAYER_01_USER, "200");
        CatalogFieldValueSet(c_gameCatalogEffect, "SJPirateYamatoBDamage", "Amount", gv_pLAYER_01_USER, "200");
    }
    else if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        CatalogFieldValueSet(c_gameCatalogEffect, "SJPirateCapitalShipLeftDamage", "Amount", gv_pLAYER_01_USER, "5");
        CatalogFieldValueSet(c_gameCatalogEffect, "SJPirateCapitalShipRightDamage", "Amount", gv_pLAYER_01_USER, "5");
        CatalogFieldValueSet(c_gameCatalogEffect, "SJPirateYamatoADamage", "Amount", gv_pLAYER_01_USER, "300");
        CatalogFieldValueSet(c_gameCatalogEffect, "SJPirateYamatoBDamage", "Amount", gv_pLAYER_01_USER, "300");
    }
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        gv_hardSpaceMineLife = 150.0;
        auto5BE0AFB8_g = UnitGroup("SJCloakedMine", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        auto5BE0AFB8_u = UnitGroupCount(auto5BE0AFB8_g, c_unitCountAll);
        for (;; auto5BE0AFB8_u -= 1) {
            auto5BE0AFB8_var = UnitGroupUnitFromEnd(auto5BE0AFB8_g, auto5BE0AFB8_u);
            if (auto5BE0AFB8_var == null) { break; }
            UnitSetPropertyFixed(auto5BE0AFB8_var, c_unitPropLifeMax, gv_hardSpaceMineLife);
            UnitSetPropertyFixed(auto5BE0AFB8_var, c_unitPropLifePercent, 100.0);
        }
        gv_hardValkLife = 150.0;
        auto85E22B30_g = UnitGroup("SJValkyrie", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        auto85E22B30_u = UnitGroupCount(auto85E22B30_g, c_unitCountAll);
        for (;; auto85E22B30_u -= 1) {
            auto85E22B30_var = UnitGroupUnitFromEnd(auto85E22B30_g, auto85E22B30_u);
            if (auto85E22B30_var == null) { break; }
            UnitSetPropertyFixed(auto85E22B30_var, c_unitPropLifeMax, gv_hardValkLife);
            UnitSetPropertyFixed(auto85E22B30_var, c_unitPropLifePercent, 100.0);
        }
        gv_hardGriffonLife = 160.0;
        auto5C20012F_g = UnitGroup("SJGriffon", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        auto5C20012F_u = UnitGroupCount(auto5C20012F_g, c_unitCountAll);
        for (;; auto5C20012F_u -= 1) {
            auto5C20012F_var = UnitGroupUnitFromEnd(auto5C20012F_g, auto5C20012F_u);
            if (auto5C20012F_var == null) { break; }
            UnitSetPropertyFixed(auto5C20012F_var, c_unitPropLifeMax, gv_hardGriffonLife);
            UnitSetPropertyFixed(auto5C20012F_var, c_unitPropLifePercent, 100.0);
        }
        gv_hardOrdinanceTower = 500.0;
        autoB59221BD_g = UnitGroup("SJMercAATower", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        autoB59221BD_u = UnitGroupCount(autoB59221BD_g, c_unitCountAll);
        for (;; autoB59221BD_u -= 1) {
            autoB59221BD_var = UnitGroupUnitFromEnd(autoB59221BD_g, autoB59221BD_u);
            if (autoB59221BD_var == null) { break; }
            UnitSetPropertyFixed(autoB59221BD_var, c_unitPropLifeMax, gv_hardOrdinanceTower);
            UnitSetPropertyFixed(autoB59221BD_var, c_unitPropLifePercent, 100.0);
        }
        gv_hardMercStarport = 1600.0;
        autoC50587D6_g = UnitGroup("SJMercStarport", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        autoC50587D6_u = UnitGroupCount(autoC50587D6_g, c_unitCountAll);
        for (;; autoC50587D6_u -= 1) {
            autoC50587D6_var = UnitGroupUnitFromEnd(autoC50587D6_g, autoC50587D6_u);
            if (autoC50587D6_var == null) { break; }
            UnitSetPropertyFixed(autoC50587D6_var, c_unitPropLifeMax, gv_hardMercStarport);
            UnitSetPropertyFixed(autoC50587D6_var, c_unitPropLifePercent, 100.0);
        }
        gv_hardCapitalShip = 4000.0;
        autoE63DD611_g = UnitGroup("SJPirateCapitalShip", gv_pLAYER_03_PIRATE, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        autoE63DD611_u = UnitGroupCount(autoE63DD611_g, c_unitCountAll);
        for (;; autoE63DD611_u -= 1) {
            autoE63DD611_var = UnitGroupUnitFromEnd(autoE63DD611_g, autoE63DD611_u);
            if (autoE63DD611_var == null) { break; }
            UnitSetPropertyFixed(autoE63DD611_var, c_unitPropLifeMax, gv_hardCapitalShip);
            UnitSetPropertyFixed(autoE63DD611_var, c_unitPropLifePercent, 100.0);
        }
        gv_hardMiraHanBoss = 5000.0;
        auto1EB532B1_g = UnitGroup("SJSpaceStationMercenary", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        auto1EB532B1_u = UnitGroupCount(auto1EB532B1_g, c_unitCountAll);
        for (;; auto1EB532B1_u -= 1) {
            auto1EB532B1_var = UnitGroupUnitFromEnd(auto1EB532B1_g, auto1EB532B1_u);
            if (auto1EB532B1_var == null) { break; }
            UnitSetPropertyFixed(auto1EB532B1_var, c_unitPropLifeMax, gv_hardMiraHanBoss);
            UnitSetPropertyFixed(auto1EB532B1_var, c_unitPropLifePercent, 100.0);
        }
    }

    gv_playerWaveRespawnRate = 40.0;
    gv_enemyWaveRespawnRate = 40.0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_AddMissionTipUserData("Hyperion");
    libSwaC_gf_AddMissionTipUserData("Jump");
    libSwaC_gf_AddMissionTipUserData("Tac Fighters");
    libSwaC_gf_AddMissionTipUserData("Yamato Cannon");
    libSwaC_gf_AddMissionTipUserData("Repair");
    libSwaC_gf_AddMissionTipUserData("Mag Mines");
    libSwaC_gf_AddMissionTipUserData("Mineral Fields");
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("SJHyperion", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("SJFighter1", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("SJWraith", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("SJViking", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("SJBattlecruiser", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("SJGriffon", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("SJValkyrie", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("SJCloakedMine", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("SJPirateCapitalShip", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("SJMercAATower", false, gv_pLAYER_01_USER);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Neut", false);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Prot", false);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Terr", false);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Zerg", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug_FirstBase Setup
//--------------------------------------------------------------------------------------------------
bool gt_Debug_FirstBaseSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto8C76A8C5_g;
    int auto8C76A8C5_u;
    unit auto8C76A8C5_var;

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilityShow(gv_hyperion, "SJHyperionBlink", true);
    UnitAbilityShow(gv_hyperion, "SJHyperionFighters", true);
    UnitAbilityShow(gv_hyperion, "SJHyperionYamato", true);
    auto8C76A8C5_g = gv_firstBaseUnits;
    auto8C76A8C5_u = UnitGroupCount(auto8C76A8C5_g, c_unitCountAll);
    for (;; auto8C76A8C5_u -= 1) {
        auto8C76A8C5_var = UnitGroupUnitFromEnd(auto8C76A8C5_g, auto8C76A8C5_u);
        if (auto8C76A8C5_var == null) { break; }
        UnitKill(auto8C76A8C5_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Debug_FirstBaseSetup_Init () {
    gt_Debug_FirstBaseSetup = TriggerCreate("gt_Debug_FirstBaseSetup_Func");
    TriggerAddEventChatMessage(gt_Debug_FirstBaseSetup, c_playerAny, "s2", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug_FullPower
//--------------------------------------------------------------------------------------------------
bool gt_Debug_FullPower_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilityShow(gv_hyperion, "SJHyperionBlink", true);
    UnitAbilityShow(gv_hyperion, "SJHyperionFighters", true);
    UnitAbilityShow(gv_hyperion, "SJHyperionYamato", true);
    UnitAbilityShow(gv_hyperion, "SJHyperionLightningStorm", true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Debug_FullPower_Init () {
    gt_Debug_FullPower = TriggerCreate("gt_Debug_FullPower_Func");
    TriggerAddEventChatMessage(gt_Debug_FullPower, c_playerAny, "FullPower", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug_Experience
//--------------------------------------------------------------------------------------------------
bool gt_Debug_Experience_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_experienceGained;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((StringEqual(StringWord(EventChatMessage(false), 1), EventChatMessage(true), c_stringNoCase) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_experienceGained = StringToInt(StringWord(EventChatMessage(false), 2));
    gf_RewardExperience(lv_experienceGained);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Debug_Experience_Init () {
    gt_Debug_Experience = TriggerCreate("gt_Debug_Experience_Func");
    TriggerAddEventChatMessage(gt_Debug_Experience, c_playerAny, "EXPGAINED", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/011E8DC0"), null, gv_hyperion);
    libNtve_gf_PauseUnit(UnitFromId(25), true);
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        TimerStart(gv_timedRunTimer, 660.0, false, c_timeAI);
    }

    TriggerExecute(gt_HyperionLifeTooLow, true, false);
    Wait(3.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveSetupSpaceStationCreate, true, true);
    TriggerExecute(gt_ObjectiveHyperionMustSurviveCreate, true, true);
    TriggerExecute(gt_ObjectiveSetupSpaceStationPing, true, true);
    TriggerQueueExit();
    TriggerExecute(gt_StartingTransmissionQ, true, false);
    Wait(4.0, c_timeGame);
    TriggerExecute(gt_TipMissionHelpQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Starting Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_StartingTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    Wait(1.0, c_timeGame);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space01|Line00002", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartingTransmissionQ_Init () {
    gt_StartingTransmissionQ = TriggerCreate("gt_StartingTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hyperion Blink Tutorial Q
//--------------------------------------------------------------------------------------------------
bool gt_HyperionBlinkTutorialQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(11));
    gv_blinkRevealer = VisRevealerLastCreated();
    CameraPan(gv_pLAYER_01_USER, CameraInfoGetTarget(CameraInfoFromId(82)), 1.5, -1, 10, false);
    libSwaC_gf_CreateReticleEffectAndTextTagAtPoint(libSwaC_ge_CampaginReticleType_TerranMainObjective, libSwaC_ge_CampaginReticleSize_Large, StringExternal("Param/Value/7BC4E076"), PointFromId(77));
    gv_blinkFromBriefingModel = libNtve_gf_ActorLastCreated();
    gv_blinkFromTextTag = TextTagLastCreated();
    libSwaC_gf_CreateReticleEffectAndTextTagAtPoint(libSwaC_ge_CampaginReticleType_TerranMainObjective, libSwaC_ge_CampaginReticleSize_Large, StringExternal("Param/Value/900C580D"), PointFromId(666));
    gv_blinkToBriefingModel = libNtve_gf_ActorLastCreated();
    gv_blinkToTextTag = TextTagLastCreated();
    UnitAbilityShow(gv_hyperion, "SJHyperionBlink", true);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("SJHyperionBlink", 0), true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space01|Line00070", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_transmissionBlinkTutorial = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HyperionBlinkTutorialQ_Init () {
    gt_HyperionBlinkTutorialQ = TriggerCreate("gt_HyperionBlinkTutorialQ_Func");
    TriggerAddEventUnitRegion(gt_HyperionBlinkTutorialQ, UnitRefFromVariable("gv_hyperion"), RegionFromId(11), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hyperion Blink Used Q
//--------------------------------------------------------------------------------------------------
bool gt_HyperionBlinkUsedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(gv_blinkFromBriefingModel);
    gv_blinkFromBriefingModel = null;
    TextTagDestroy(gv_blinkFromTextTag);
    gv_blinkFromTextTag = c_textTagNone;
    libNtve_gf_KillModel(gv_blinkToBriefingModel);
    gv_blinkToBriefingModel = null;
    TextTagDestroy(gv_blinkToTextTag);
    gv_blinkToTextTag = c_textTagNone;
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("SJHyperionBlink", 0), false);
    TransmissionClear(gv_transmissionBlinkTutorial);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space01|Line00071", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    VisRevealerDestroy(gv_blinkRevealer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HyperionBlinkUsedQ_Init () {
    gt_HyperionBlinkUsedQ = TriggerCreate("gt_HyperionBlinkUsedQ_Func");
    TriggerAddEventUnitRegion(gt_HyperionBlinkUsedQ, UnitRefFromVariable("gv_hyperion"), RegionFromId(23), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Encounter Ship Stop
//--------------------------------------------------------------------------------------------------
bool gt_EncounterShipStop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(gv_hyperion, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EncounterShipStop_Init () {
    gt_EncounterShipStop = TriggerCreate("gt_EncounterShipStop_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hyperion Is Close 1
//--------------------------------------------------------------------------------------------------
bool gt_HyperionIsClose1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnitRangeUnit(), OrderTargetingUnit(AbilityCommand("attack", 0), gv_hyperion), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HyperionIsClose1_Init () {
    gt_HyperionIsClose1 = TriggerCreate("gt_HyperionIsClose1_Func");
    TriggerAddEventUnitRange(gt_HyperionIsClose1, UnitRefFromVariable("gv_hyperion"), UnitFromId(232), 14.0, true);
    TriggerAddEventUnitRange(gt_HyperionIsClose1, UnitRefFromVariable("gv_hyperion"), UnitFromId(183), 14.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hyperion Is Close 2
//--------------------------------------------------------------------------------------------------
bool gt_HyperionIsClose2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(UnitFromId(602), OrderTargetingUnit(AbilityCommand("attack", 0), gv_hyperion), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(185), OrderTargetingUnit(AbilityCommand("attack", 0), gv_hyperion), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HyperionIsClose2_Init () {
    gt_HyperionIsClose2 = TriggerCreate("gt_HyperionIsClose2_Func");
    TriggerAddEventUnitRange(gt_HyperionIsClose2, UnitRefFromVariable("gv_hyperion"), UnitFromId(602), 14.0, true);
    TriggerAddEventUnitRange(gt_HyperionIsClose2, UnitRefFromVariable("gv_hyperion"), UnitFromId(185), 14.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Aoe Encounter Q
//--------------------------------------------------------------------------------------------------
bool gt_AoeEncounterQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(libSwaC_ge_CampaginReticleType_TerranEnemy, libSwaC_ge_CampaginReticleSize_Medium, null, UnitFromId(17), "Ref_Origin");
    gv_aoeEncounterBriefingModel = libNtve_gf_ActorLastCreated();
    UnitAbilityShow(gv_hyperion, "SJHyperionFighters", true);
    TriggerExecute(gt_EncounterShipStop, true, false);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("SJHyperionFighters", 0), true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    gf_WaitforCriticalTransmissionFinished();
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space01|Line00004", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gf_WaitforCriticalTransmissionFinished();
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space01|Line00067", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    if ((TriggerIsEnabled(gt_AoeEncounterFighterInCombat) == false) && (gv_aoeEncounterBriefingModel != null)) {
        libNtve_gf_KillModel(gv_aoeEncounterBriefingModel);
        gv_aoeEncounterBriefingModel = null;
    }

    Wait(libSwaC_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AoeEncounterQ_Init () {
    gt_AoeEncounterQ = TriggerCreate("gt_AoeEncounterQ_Func");
    TriggerAddEventUnitRegion(gt_AoeEncounterQ, UnitRefFromVariable("gv_hyperion"), RegionFromId(28), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Launch Fighter Button Clicked
//--------------------------------------------------------------------------------------------------
bool gt_LaunchFighterButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("SJHyperionFighters", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LaunchFighterButtonClicked_Init () {
    gt_LaunchFighterButtonClicked = TriggerCreate("gt_LaunchFighterButtonClicked_Func");
    TriggerAddEventButtonPressed(gt_LaunchFighterButtonClicked, c_playerAny, "SJHyperionFighters");
    TriggerAddEventButtonPressed(gt_LaunchFighterButtonClicked, c_playerAny, "SJHyperionFighters2");
    TriggerAddEventButtonPressed(gt_LaunchFighterButtonClicked, c_playerAny, "SJHyperionFighters3");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Aoe Encounter Fighter In Combat
//--------------------------------------------------------------------------------------------------
bool gt_AoeEncounterFighterInCombat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_aoeEncounterFighters, EventUnit()) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_aoeEncounterBriefingModel != null)) {
        libNtve_gf_KillModel(gv_aoeEncounterBriefingModel);
        gv_aoeEncounterBriefingModel = null;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AoeEncounterFighterInCombat_Init () {
    gt_AoeEncounterFighterInCombat = TriggerCreate("gt_AoeEncounterFighterInCombat_Func");
    TriggerAddEventUnitDamaged(gt_AoeEncounterFighterInCombat, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Yamato Encounter Q
//--------------------------------------------------------------------------------------------------
bool gt_YamatoEncounterQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_PauseUnit(UnitFromId(25), false);
    libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(libSwaC_ge_CampaginReticleType_TerranEnemy, libSwaC_ge_CampaginReticleSize_Medium, null, gv_yamatoEncounterTower, "Ref_Origin");
    gv_yamatoEncounterTowerBriefingModel = libNtve_gf_ActorLastCreated();
    UnitAbilityShow(gv_hyperion, "SJHyperionYamato", true);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("SJHyperionYamato", 0), true);
    TriggerExecute(gt_EncounterShipStop, true, false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    if ((UnitIsAlive(UnitFromId(25)) == true)) {
        gf_WaitforCriticalTransmissionFinished();
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space01|Line00007", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }

    if ((UnitIsAlive(UnitFromId(25)) == true)) {
        gf_WaitforCriticalTransmissionFinished();
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space01|Line00072", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }

    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    Wait(libSwaC_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_YamatoEncounterQ_Init () {
    gt_YamatoEncounterQ = TriggerCreate("gt_YamatoEncounterQ_Func");
    TriggerAddEventUnitRegion(gt_YamatoEncounterQ, UnitRefFromVariable("gv_hyperion"), RegionFromId(5), true);
    TriggerAddEventUnitDamaged(gt_YamatoEncounterQ, UnitRefFromUnit(UnitFromId(28)), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(gt_YamatoEncounterQ, UnitRefFromUnit(UnitFromId(26)), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(gt_YamatoEncounterQ, UnitRefFromUnit(UnitFromId(27)), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(gt_YamatoEncounterQ, UnitRefFromUnit(UnitFromId(25)), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Launch Yamato Button Clicked
//--------------------------------------------------------------------------------------------------
bool gt_LaunchYamatoButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("SJHyperionYamato", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LaunchYamatoButtonClicked_Init () {
    gt_LaunchYamatoButtonClicked = TriggerCreate("gt_LaunchYamatoButtonClicked_Func");
    TriggerAddEventButtonPressed(gt_LaunchYamatoButtonClicked, c_playerAny, "SJHyperionYamato");
    TriggerAddEventButtonPressed(gt_LaunchYamatoButtonClicked, c_playerAny, "SJHyperionYamato2");
    TriggerAddEventButtonPressed(gt_LaunchYamatoButtonClicked, c_playerAny, "SJHyperionYamato3");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Yamato Encounter Tower In Combat
//--------------------------------------------------------------------------------------------------
bool gt_YamatoEncounterTowerInCombat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_yamatoEncounterTowerBriefingModel != null))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(gv_yamatoEncounterTowerBriefingModel);
    gv_yamatoEncounterTowerBriefingModel = null;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_YamatoEncounterTowerInCombat_Init () {
    gt_YamatoEncounterTowerInCombat = TriggerCreate("gt_YamatoEncounterTowerInCombat_Func");
    TriggerAddEventUnitDamaged(gt_YamatoEncounterTowerInCombat, UnitRefFromVariable("gv_yamatoEncounterTower"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Base Captured
//--------------------------------------------------------------------------------------------------
bool gt_FirstBaseCaptured_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitGroupIsDead(gv_firstBaseUnits) == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        PingDestroy(gv_setupSpaceStationPing);
        TriggerExecute(gt_ObjectiveSetupSpaceStationComplete, true, true);
        libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/5D6B4E31"));
        TriggerExecute(gt_MidQ, true, true);
        gv_firstBaseCaptured = true;
        TriggerEnable(gt_DefeatBaseDestroyed, true);
        Wait(1.0, c_timeGame);
        TriggerExecute(gt_ObjectiveDestroyMercenarySpaceStationDiscoveredQ, true, false);
        TriggerExecute(gt_AttackWavesPlayer, true, false);
        Wait(25.0, c_timeGame);
        TriggerExecute(gt_AttackWavesEnemy, true, false);
    }
    else {
        if ((libNtve_gf_UnitGroupIsDead(gv_firstBaseGuards) == true)) {
            UnitGroupIssueOrder(gv_firstBaseUnits, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_hyperion)), c_orderQueueReplace);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstBaseCaptured_Init () {
    gt_FirstBaseCaptured = TriggerCreate("gt_FirstBaseCaptured_Func");
    TriggerAddEventTimePeriodic(gt_FirstBaseCaptured, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mineral Field Tutorial Q
//--------------------------------------------------------------------------------------------------
bool gt_MineralFieldTutorialQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_distance;
    point lv_cameraLocationSave;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gf_FirstBaseCaptured() == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(gv_hyperion, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(libSwaC_ge_CampaginReticleType_TerranMainObjective, libSwaC_ge_CampaginReticleSize_Medium, StringExternal("Param/Value/8046658C"), gv_mineralTutorialFormation, "Ref_Origin");
    gv_mineralTutorialBriefingModel = libNtve_gf_ActorLastCreated();
    gv_mineralTutorialTextTag = TextTagLastCreated();
    TriggerQueueEnter();
    TriggerExecute(gt_XPBarCreate, true, false);
    lv_cameraLocationSave = CameraGetTarget(gv_pLAYER_01_USER);
    lv_distance = MinF(2.0, (DistanceBetweenPoints(PointFromId(515), UnitGetPosition(gv_hyperion)) / 1.0));
    if ((UnitIsAlive(gv_mineralTutorialFormation) == true)) {
        CameraPan(gv_pLAYER_01_USER, PointWithOffsetPolar(PointFromId(515), lv_distance, AngleBetweenPoints(PointFromId(515), UnitGetPosition(gv_hyperion))), 1.0, -1, 10.0, true);
    }

    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    gf_WaitforCriticalTransmissionFinished();
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space01|Line00009", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gf_WaitforCriticalTransmissionFinished();
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space01|Line00109", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    Wait(libSwaC_gv_campaignHintDelay, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MineralFieldTutorialQ_Init () {
    gt_MineralFieldTutorialQ = TriggerCreate("gt_MineralFieldTutorialQ_Func");
    TriggerAddEventUnitRegion(gt_MineralFieldTutorialQ, UnitRefFromVariable("gv_hyperion"), RegionFromId(36), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mineral Tutorial Mineral Killed
//--------------------------------------------------------------------------------------------------
bool gt_MineralTutorialMineralKilled_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(gv_mineralTutorialBriefingModel);
    TextTagDestroy(gv_mineralTutorialTextTag);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_MineralClustersFoundQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MineralTutorialMineralKilled_Init () {
    gt_MineralTutorialMineralKilled = TriggerCreate("gt_MineralTutorialMineralKilled_Func");
    TriggerAddEventUnitDied(gt_MineralTutorialMineralKilled, UnitRefFromVariable("gv_mineralTutorialFormation"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mineral Cluster Enter Region
//--------------------------------------------------------------------------------------------------
bool gt_MineralClusterEnterRegion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_MineralClustersFoundQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MineralClusterEnterRegion_Init () {
    gt_MineralClusterEnterRegion = TriggerCreate("gt_MineralClusterEnterRegion_Func");
    TriggerAddEventUnitRegion(gt_MineralClusterEnterRegion, UnitRefFromVariable("gv_hyperion"), RegionFromId(35), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mineral Clusters Found Q
//--------------------------------------------------------------------------------------------------
bool gt_MineralClustersFoundQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    gv_mineralTutorialGoing = true;
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    TriggerExecute(gt_MineralClustersMapPings, true, false);
    gf_WaitforCriticalTransmissionFinished();
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space01|Line00016", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    gv_mineralTutorialGoing = false;
    gv_mineralClusterIntroDone = true;
    TriggerExecute(gt_ObjectiveMineralFieldsCreate, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MineralClustersFoundQ_Init () {
    gt_MineralClustersFoundQ = TriggerCreate("gt_MineralClustersFoundQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mineral Clusters Mines Highlight
//--------------------------------------------------------------------------------------------------
bool gt_MineralClustersMinesHighlight_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_mines;
    int lv_index;
    unit lv_mine;

    // Automatic Variable Declarations
    int auto1278E0C0_ae;
    const int auto1278E0C0_ai = 1;

    // Variable Initialization
    lv_mines = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_mineralClusterMines = UnitGroup("SJCloakedMine", c_playerAny, RegionFromId(31), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_mines = UnitGroupCopy(gv_mineralClusterMines);
    auto1278E0C0_ae = UnitGroupCount(lv_mines, c_unitCountAlive);
    lv_index = 1;
    for ( ; ( (auto1278E0C0_ai >= 0 && lv_index <= auto1278E0C0_ae) || (auto1278E0C0_ai < 0 && lv_index >= auto1278E0C0_ae) ) ; lv_index += auto1278E0C0_ai ) {
        lv_mine = UnitGroupRandomUnit(lv_mines, c_unitCountAlive);
        UnitGroupRemove(lv_mines, lv_mine);
        libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(libSwaC_ge_CampaginReticleType_TerranEnemy, libSwaC_ge_CampaginReticleSize_Small, null, lv_mine, "Ref_Origin");
        libHots_gf_StoreActorForUnit(lv_mine, 1, libNtve_gf_ActorLastCreated());
        Wait(RandomFixed(0.0, 0.25), c_timeGame);
    }
    TriggerEnable(gt_MineralClustersMinesUnhighlight, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MineralClustersMinesHighlight_Init () {
    gt_MineralClustersMinesHighlight = TriggerCreate("gt_MineralClustersMinesHighlight_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mineral Clusters Mines Unhighlight
//--------------------------------------------------------------------------------------------------
bool gt_MineralClustersMinesUnhighlight_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_mine;

    // Automatic Variable Declarations
    unitgroup auto02D9190D_g;
    int auto02D9190D_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_mineralClusterMines, EventUnit()) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto02D9190D_g = gv_mineralClusterMines;
    auto02D9190D_u = UnitGroupCount(auto02D9190D_g, c_unitCountAll);
    for (;; auto02D9190D_u -= 1) {
        lv_mine = UnitGroupUnitFromEnd(auto02D9190D_g, auto02D9190D_u);
        if (lv_mine == null) { break; }
        libNtve_gf_KillModel(libHots_gf_ActorForUnit(lv_mine, 1));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MineralClustersMinesUnhighlight_Init () {
    gt_MineralClustersMinesUnhighlight = TriggerCreate("gt_MineralClustersMinesUnhighlight_Func");
    TriggerEnable(gt_MineralClustersMinesUnhighlight, false);
    TriggerAddEventUnitAcquiredTarget(gt_MineralClustersMinesUnhighlight, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mineral Clusters Map Pings
//--------------------------------------------------------------------------------------------------
bool gt_MineralClustersMapPings_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_CreateObjectivePing(false, RegionGetCenter(RegionFromId(25)), StringExternal("Param/Value/F04C72C5"));
    gv_objectiveMineralFieldPing[1] = PingLastCreated();
    Wait(0.25, c_timeGame);
    libSwaC_gf_CreateObjectivePing(false, RegionGetCenter(RegionFromId(24)), StringExternal("Param/Value/25E0B8A7"));
    gv_objectiveMineralFieldPing[2] = PingLastCreated();
    Wait(0.25, c_timeGame);
    libSwaC_gf_CreateObjectivePing(false, RegionGetCenter(RegionFromId(26)), StringExternal("Param/Value/3391B942"));
    gv_objectiveMineralFieldPing[3] = PingLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MineralClustersMapPings_Init () {
    gt_MineralClustersMapPings = TriggerCreate("gt_MineralClustersMapPings_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Second Base Close Q
//--------------------------------------------------------------------------------------------------
bool gt_SecondBaseCloseQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((gf_HyperionInCombat() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerQueueEnter();
    if ((UnitIsAlive(UnitFromId(656)) == true)) {
        libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(libSwaC_ge_CampaginReticleType_TerranEnemy, libSwaC_ge_CampaginReticleSize_Large, null, UnitFromId(656), "Ref_Origin");
        gv_secondBaseBriefingModel = libNtve_gf_ActorLastCreated();
        CameraPan(gv_pLAYER_01_USER, CameraInfoGetTarget(CameraInfoFromId(88)), 1.5, -1, 10, true);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        gf_WaitforCriticalTransmissionFinished();
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space01|Line00008", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        gf_WaitforCriticalTransmissionFinished();
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space01|Line00017", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SecondBaseCloseQ_Init () {
    gt_SecondBaseCloseQ = TriggerCreate("gt_SecondBaseCloseQ_Func");
    TriggerAddEventUnitRange(gt_SecondBaseCloseQ, UnitRefFromVariable("gv_hyperion"), UnitFromId(656), 18.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Second Base Damaged
//--------------------------------------------------------------------------------------------------
bool gt_SecondBaseDamaged_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_secondBaseBriefingModel != null)) {
        libNtve_gf_KillModel(gv_secondBaseBriefingModel);
        gv_secondBaseBriefingModel = null;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SecondBaseDamaged_Init () {
    gt_SecondBaseDamaged = TriggerCreate("gt_SecondBaseDamaged_Func");
    TriggerAddEventUnitDamaged(gt_SecondBaseDamaged, UnitRefFromUnit(UnitFromId(656)), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Second Base Captured
//--------------------------------------------------------------------------------------------------
bool gt_SecondBaseCaptured_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitGroupIsDead(gv_secondBaseUnits) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_SecondBaseAutosaveQ, true, false);
    Wait(3.0, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_playerBase), c_animNameDefault, "Birth", c_animFlagNonLooping, 0.0);
    UnitSetPosition(gv_playerBase, PointFromId(131), false);
    UnitSetPropertyFixed(gv_playerBase, c_unitPropLifePercent, 100.0);
    libNtve_gf_ShowHideUnit(gv_playerBase, true);
    TriggerExecute(gt_TransmissionSecondBaseCapturedQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SecondBaseCaptured_Init () {
    gt_SecondBaseCaptured = TriggerCreate("gt_SecondBaseCaptured_Func");
    TriggerAddEventUnitDied(gt_SecondBaseCaptured, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Second Base Autosave Q
//--------------------------------------------------------------------------------------------------
bool gt_SecondBaseAutosaveQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    Wait(2.0, c_timeReal);
    libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/DB75EC60"));
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SecondBaseAutosaveQ_Init () {
    gt_SecondBaseAutosaveQ = TriggerCreate("gt_SecondBaseAutosaveQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Second Base Captured Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionSecondBaseCapturedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    gf_WaitforCriticalTransmissionFinished();
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space01|Line00120", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gf_WaitforCriticalTransmissionFinished();
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space01|Line00022", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionSecondBaseCapturedQ_Init () {
    gt_TransmissionSecondBaseCapturedQ = TriggerCreate("gt_TransmissionSecondBaseCapturedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Third Base Captured
//--------------------------------------------------------------------------------------------------
bool gt_ThirdBaseCaptured_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitGroupIsDead(gv_thirdBaseUnits) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ThirdBaseAutosaveQ, true, false);
    Wait(3.0, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_playerBase), c_animNameDefault, "Birth", c_animFlagNonLooping, 0.0);
    UnitSetPosition(gv_playerBase, PointFromId(132), false);
    UnitSetPropertyFixed(gv_playerBase, c_unitPropLifePercent, 100.0);
    libNtve_gf_ShowHideUnit(gv_playerBase, true);
    TriggerExecute(gt_TransmissionThirdBaseCapturedQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ThirdBaseCaptured_Init () {
    gt_ThirdBaseCaptured = TriggerCreate("gt_ThirdBaseCaptured_Func");
    TriggerAddEventUnitDied(gt_ThirdBaseCaptured, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Third Base Autosave Q
//--------------------------------------------------------------------------------------------------
bool gt_ThirdBaseAutosaveQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    Wait(2.0, c_timeReal);
    libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/9ECFBE22"));
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ThirdBaseAutosaveQ_Init () {
    gt_ThirdBaseAutosaveQ = TriggerCreate("gt_ThirdBaseAutosaveQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Third Base Captured Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionThirdBaseCapturedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    gf_WaitforCriticalTransmissionFinished();
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space01|Line00075", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionThirdBaseCapturedQ_Init () {
    gt_TransmissionThirdBaseCapturedQ = TriggerCreate("gt_TransmissionThirdBaseCapturedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mira Taunt 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_MiraTaunt1Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    gf_WaitforCriticalTransmissionFinished();
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space01|Line00054", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gf_WaitforCriticalTransmissionFinished();
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space01|Line00055", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gf_WaitforCriticalTransmissionFinished();
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space01|Line00056", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MiraTaunt1Q_Init () {
    gt_MiraTaunt1Q = TriggerCreate("gt_MiraTaunt1Q_Func");
    TriggerAddEventUnitRegion(gt_MiraTaunt1Q, UnitRefFromVariable("gv_hyperion"), RegionFromId(30), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mira Taunt 2 Q
//--------------------------------------------------------------------------------------------------
bool gt_MiraTaunt2Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    gf_WaitforCriticalTransmissionFinished();
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space01|Line00038", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gf_WaitforCriticalTransmissionFinished();
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space01|Line00039", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gf_WaitforCriticalTransmissionFinished();
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space01|Line00040", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MiraTaunt2Q_Init () {
    gt_MiraTaunt2Q = TriggerCreate("gt_MiraTaunt2Q_Func");
    TriggerAddEventUnitRegion(gt_MiraTaunt2Q, UnitRefFromVariable("gv_hyperion"), RegionFromId(29), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mira Taunt Fight Q
//--------------------------------------------------------------------------------------------------
bool gt_MiraTauntFightQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    gf_WaitforCriticalTransmissionFinished();
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space01|Line00057", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gf_WaitforCriticalTransmissionFinished();
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space01|Line00058", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MiraTauntFightQ_Init () {
    gt_MiraTauntFightQ = TriggerCreate("gt_MiraTauntFightQ_Func");
    TriggerAddEventUnitDamaged(gt_MiraTauntFightQ, UnitRefFromVariable("gv_enemyBase"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mira Taunt Final Q
//--------------------------------------------------------------------------------------------------
bool gt_MiraTauntFinalQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_pirateCapitalShip, c_unitPropLifePercent, c_unitPropCurrent) <= 30.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    gf_WaitforCriticalTransmissionFinished();
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space01|Line00059", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gf_WaitforCriticalTransmissionFinished();
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space01|Line00060", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MiraTauntFinalQ_Init () {
    gt_MiraTauntFinalQ = TriggerCreate("gt_MiraTauntFinalQ_Func");
    TriggerAddEventUnitDamaged(gt_MiraTauntFinalQ, UnitRefFromVariable("gv_enemyBase"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Meteor FX
//--------------------------------------------------------------------------------------------------
bool gt_MeteorFX_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;
    point lv_lastPoint;

    // Automatic Variable Declarations
    const int auto0DB1258D_n = 1;
    int auto0DB1258D_i;

    // Variable Initialization
    lv_point = RegionRandomPoint(RegionFromId(12));
    lv_lastPoint = RegionRandomPoint(RegionFromId(12));

    // Actions
    if (!runActions) {
        return true;
    }

    for (auto0DB1258D_i = 1; auto0DB1258D_i <= auto0DB1258D_n; auto0DB1258D_i += 1) {
        while ((RegionContainsPoint(RegionCircle(lv_lastPoint, 10.0), lv_point) == true)) {
            lv_point = RegionRandomPoint(RegionFromId(12));
        }
        PlayerCreateEffectPoint(gv_pLAYER_01_USER, "SpaceMeteor", lv_point);
        lv_lastPoint = lv_point;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MeteorFX_Init () {
    gt_MeteorFX = TriggerCreate("gt_MeteorFX_Func");
    TriggerAddEventTimePeriodic(gt_MeteorFX, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hyperion Blink Start
//--------------------------------------------------------------------------------------------------
bool gt_HyperionBlinkStart_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_hyperionBlinkLoc = UnitGetPosition(gv_hyperion);
    UnitIssueOrder(gv_hyperion, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HyperionBlinkStart_Init () {
    gt_HyperionBlinkStart = TriggerCreate("gt_HyperionBlinkStart_Func");
    TriggerAddEventUnitAbility(gt_HyperionBlinkStart, UnitRefFromVariable("gv_hyperion"), AbilityCommand("SJHyperionBlink", 0), c_abilEffectStagePrep, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hyperion Blink End
//--------------------------------------------------------------------------------------------------
bool gt_HyperionBlinkEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_facing;
    point lv_targetPoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_targetPoint = EventUnitTargetPoint();
    if ((PointGetX(gv_hyperionBlinkLoc) == PointGetX(lv_targetPoint)) && (PointGetY(gv_hyperionBlinkLoc) == PointGetY(lv_targetPoint))) {
        return true;
    }

    UnitSetState(gv_hyperion, c_unitStateMoveSuppressed, false);
    lv_facing = AngleBetweenPoints(gv_hyperionBlinkLoc, lv_targetPoint);
    UnitSetFacing(gv_hyperion, lv_facing, 0.0);
    UnitSetState(gv_hyperion, c_unitStateMoveSuppressed, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HyperionBlinkEnd_Init () {
    gt_HyperionBlinkEnd = TriggerCreate("gt_HyperionBlinkEnd_Func");
    TriggerAddEventUnitAbility(gt_HyperionBlinkEnd, UnitRefFromVariable("gv_hyperion"), AbilityCommand("SJHyperionBlink", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Launch Hyperion Fighters
//--------------------------------------------------------------------------------------------------
bool gt_LaunchHyperionFighters_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_count;
    point lv_source;
    point lv_nextLoc1;
    point lv_nextLoc2;
    point lv_target;
    point lv_targetCenter;
    fixed lv_facing;
    int lv_index;
    int lv_indexRow;
    unit lv_indexUnit;
    const fixed lv_c_Offset = 0.85;
    int lv_hyperionFighterLaunchIndexLocal;
    bool lv_launchSoundPlayed;

    // Automatic Variable Declarations
    unitgroup auto053A90F5_g;
    int auto053A90F5_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_hyperionFighterLaunchIndex += 1;
    lv_hyperionFighterLaunchIndexLocal = gv_hyperionFighterLaunchIndex;
    gv_hyperionFighterOut = true;
    gv_hyperionFighterRecalling = false;
    if ((gf_HyperionFighterCountCurrent() < gf_HyperionFighterCountMax())) {
        UnitAddChargeUsed(gv_hyperion, "SJHyperionFighters", -1.0);
    }

    UnitAbilityEnable(gv_hyperion, "SJHyperionFighters", false);
    gv_hyperionFighterTarget = EventUnitTargetPoint();
    if ((libNtve_gf_UnitGroupIsDead(gv_hyperionFighterGroup) == false)) {
        auto053A90F5_g = gv_hyperionFighterGroup;
        auto053A90F5_u = UnitGroupCount(auto053A90F5_g, c_unitCountAll);
        for (;; auto053A90F5_u -= 1) {
            lv_indexUnit = UnitGroupUnitFromEnd(auto053A90F5_g, auto053A90F5_u);
            if (lv_indexUnit == null) { break; }
            UnitSetPropertyFixed(lv_indexUnit, c_unitPropMovementSpeed, UnitGetPropertyFixed(lv_indexUnit, c_unitPropMovementSpeed, c_unitPropNormal));
        }
        UnitGroupIssueOrder(gv_hyperionFighterGroup, OrderTargetingPoint(AbilityCommand("attack", 0), gv_hyperionFighterTarget), c_orderQueueReplace);
    }

    lv_count = (gf_HyperionFighterCountCurrent() - UnitGroupCount(gv_hyperionFighterGroup, c_unitCountAlive));
    while (true) {
        if ((lv_hyperionFighterLaunchIndexLocal != gv_hyperionFighterLaunchIndex)) {
            return true;
        }

        lv_source = UnitGetPosition(gv_hyperion);
        lv_facing = AngleBetweenPoints(lv_source, gv_hyperionFighterTarget);
        lv_source = PointWithOffsetPolar(lv_source, 2.0, lv_facing);
        lv_target = PointWithOffsetPolar(lv_source, 2.0, lv_facing);
        lv_index += 1;
        if ((lv_index > lv_count)) {
            break;
        }

        lv_indexRow += 1;
        lv_targetCenter = PointWithOffsetPolar(gv_hyperionFighterTarget, ((lv_indexRow - 1) * 0.75), (lv_facing + 180.0));
        lv_nextLoc1 = PointWithOffsetPolar(lv_target, (0.0 * lv_c_Offset), (lv_facing + 90.0));
        lv_nextLoc2 = PointWithOffsetPolar(lv_targetCenter, (0.0 * lv_c_Offset), (lv_facing + 90.0));
        libNtve_gf_UnitCreateFacingPoint(1, "SJFighter1", c_unitCreateIgnorePlacement, UnitGetOwner(EventUnit()), lv_source, lv_nextLoc1);
        UnitGroupAdd(gv_hyperionFighterGroup, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), lv_nextLoc1), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), lv_nextLoc2), c_orderQueueAddToEnd);
        gf_HyperionFighterWonder(UnitLastCreated(), lv_nextLoc2);
        lv_index += 1;
        if ((lv_launchSoundPlayed == false)) {
            lv_launchSoundPlayed = true;
            SoundPlayOnUnit(SoundLink("SJHyperion_TacFighterLaunch", -1), PlayerGroupAll(), UnitLastCreated(), 0.0, 100.0, 0.0);
        }

        if ((lv_index > lv_count)) {
            break;
        }

        lv_nextLoc1 = PointWithOffsetPolar(lv_target, (1.0 * lv_c_Offset), (lv_facing + 90.0));
        lv_nextLoc2 = PointWithOffsetPolar(lv_targetCenter, (1.0 * lv_c_Offset), (lv_facing + 90.0));
        libNtve_gf_UnitCreateFacingPoint(1, "SJFighter1", c_unitCreateIgnorePlacement, UnitGetOwner(EventUnit()), lv_source, lv_nextLoc1);
        UnitGroupAdd(gv_hyperionFighterGroup, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), lv_nextLoc1), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), lv_nextLoc2), c_orderQueueAddToEnd);
        gf_HyperionFighterWonder(UnitLastCreated(), lv_nextLoc2);
        lv_index += 1;
        if ((lv_index > lv_count)) {
            break;
        }

        lv_nextLoc1 = PointWithOffsetPolar(lv_target, lv_c_Offset, (lv_facing - 90.0));
        lv_nextLoc2 = PointWithOffsetPolar(lv_targetCenter, (1.0 * lv_c_Offset), (lv_facing - 90.0));
        libNtve_gf_UnitCreateFacingPoint(1, "SJFighter1", c_unitCreateIgnorePlacement, UnitGetOwner(EventUnit()), lv_source, lv_nextLoc1);
        UnitGroupAdd(gv_hyperionFighterGroup, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), lv_nextLoc1), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), lv_nextLoc2), c_orderQueueAddToEnd);
        gf_HyperionFighterWonder(UnitLastCreated(), lv_nextLoc2);
        lv_index += 1;
        if ((lv_index > lv_count)) {
            break;
        }

        lv_nextLoc1 = PointWithOffsetPolar(lv_target, (2.0 * lv_c_Offset), (lv_facing + 90.0));
        lv_nextLoc2 = PointWithOffsetPolar(lv_targetCenter, (2.0 * lv_c_Offset), (lv_facing + 90.0));
        libNtve_gf_UnitCreateFacingPoint(1, "SJFighter1", c_unitCreateIgnorePlacement, UnitGetOwner(EventUnit()), lv_source, lv_nextLoc1);
        UnitGroupAdd(gv_hyperionFighterGroup, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), lv_nextLoc1), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), lv_nextLoc2), c_orderQueueAddToEnd);
        gf_HyperionFighterWonder(UnitLastCreated(), lv_nextLoc2);
        lv_index += 1;
        if ((lv_index > lv_count)) {
            break;
        }

        lv_nextLoc1 = PointWithOffsetPolar(lv_target, (2.0 * lv_c_Offset), (lv_facing - 90.0));
        lv_nextLoc2 = PointWithOffsetPolar(lv_targetCenter, (2.0 * lv_c_Offset), (lv_facing - 90.0));
        libNtve_gf_UnitCreateFacingPoint(1, "SJFighter1", c_unitCreateIgnorePlacement, UnitGetOwner(EventUnit()), lv_source, lv_nextLoc1);
        UnitGroupAdd(gv_hyperionFighterGroup, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), lv_nextLoc1), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), lv_nextLoc2), c_orderQueueAddToEnd);
        gf_HyperionFighterWonder(UnitLastCreated(), lv_nextLoc2);
        Wait(0.25, c_timeGame);
    }
    Wait(0.5, c_timeGame);
    if ((lv_hyperionFighterLaunchIndexLocal != gv_hyperionFighterLaunchIndex)) {
        return true;
    }

    UnitAbilityEnable(gv_hyperion, "SJHyperionFighters", true);
    TriggerEnable(gt_RecallHyperionFighters, true);
    TriggerEnable(gt_HyperionFightersInCombat, true);
    TriggerEnable(gt_HyperionFightersInCombatIndicatorDiminish, true);
    TriggerEnable(gt_HyperionFightersHaveTargetAttacked, true);
    TriggerEnable(gt_HyperionFightersHaveTargetIndicatorDiminish, true);
    TriggerEnable(gt_HyperionFightersDies, true);
    TriggerEnable(gt_HyperionFightersShareAggro, true);
    TriggerEnable(gt_HyperionFighterAcquireTarget, true);
    UnitAbilityEnable(gv_hyperion, "SJHyperionFightersRecall", true);
    UnitAbilityShow(EventUnit(), "SJHyperionFightersRecall", true);
    Wait((DistanceBetweenPoints(gv_hyperionFighterTarget, UnitGetPosition(gv_hyperion)) / 2.5), c_timeGame);
    if ((lv_hyperionFighterLaunchIndexLocal != gv_hyperionFighterLaunchIndex)) {
        return true;
    }

    TriggerExecute(gt_HyperionFightersLeashingBehavior, true, false);
    while (true) {
        if ((lv_hyperionFighterLaunchIndexLocal != gv_hyperionFighterLaunchIndex)) {
            return true;
        }

        if ((lv_hyperionFighterLaunchIndexLocal != gv_hyperionFighterLaunchIndex)) {
            return true;
        }

        if ((gv_hyperionFighterOut == false)) {
            return true;
        }

        if ((libNtve_gf_UnitGroupIsDead(gf_HyperionFighterTargetGroup()) == true)) {
            gf_RecallHyperionFighters();
            return true;
        }

        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LaunchHyperionFighters_Init () {
    gt_LaunchHyperionFighters = TriggerCreate("gt_LaunchHyperionFighters_Func");
    TriggerAddEventUnitAbility(gt_LaunchHyperionFighters, UnitRefFromVariable("gv_hyperion"), AbilityCommand("SJHyperionFighters", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hyperion Fighters Leashing Behavior
//--------------------------------------------------------------------------------------------------
bool gt_HyperionFightersLeashingBehavior_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexFighter;
    int lv_hyperionFighterLaunchIndexLocal;

    // Automatic Variable Declarations
    unitgroup auto1035F66C_g;
    int auto1035F66C_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_hyperionFighterLaunchIndexLocal = gv_hyperionFighterLaunchIndex;
    while (true) {
        if ((lv_hyperionFighterLaunchIndexLocal != gv_hyperionFighterLaunchIndex)) {
            return true;
        }

        if ((UnitGroupCount(gv_hyperionFighterGroup, c_unitCountAlive) == 0)) {
            return true;
        }

        if ((gv_hyperionFighterRecalling == true)) {
            return true;
        }

        auto1035F66C_g = gv_hyperionFighterGroup;
        auto1035F66C_u = UnitGroupCount(auto1035F66C_g, c_unitCountAll);
        for (;; auto1035F66C_u -= 1) {
            lv_indexFighter = UnitGroupUnitFromEnd(auto1035F66C_g, auto1035F66C_u);
            if (lv_indexFighter == null) { break; }
            if ((DistanceBetweenPoints(gv_hyperionFighterTarget, UnitGetPosition(lv_indexFighter)) > gv_hyperionFighterTargetRadius)) {
                gf_HyperionFighterLeashing(lv_indexFighter);
            }

        }
        if ((DistanceBetweenPoints(UnitGetPosition(gv_hyperion), gv_hyperionFighterTarget) > 25.0)) {
            gf_RecallHyperionFighters();
            return true;
        }

        Wait(0.25, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HyperionFightersLeashingBehavior_Init () {
    gt_HyperionFightersLeashingBehavior = TriggerCreate("gt_HyperionFightersLeashingBehavior_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hyperion Fighter Acquire Target
//--------------------------------------------------------------------------------------------------
bool gt_HyperionFighterAcquireTarget_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_targetGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_targetGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_hyperionFighterGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_targetGroup = gf_HyperionFighterTargetGroup();
    if ((UnitGroupHasUnit(lv_targetGroup, libNtve_gf_AcquiredTarget()) == false)) {
        gf_HyperionFighterLeashing(EventUnit());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HyperionFighterAcquireTarget_Init () {
    gt_HyperionFighterAcquireTarget = TriggerCreate("gt_HyperionFighterAcquireTarget_Func");
    TriggerEnable(gt_HyperionFighterAcquireTarget, false);
    TriggerAddEventUnitAcquiredTarget(gt_HyperionFighterAcquireTarget, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Recall Hyperion Fighters
//--------------------------------------------------------------------------------------------------
bool gt_RecallHyperionFighters_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitAddChargeUsed(gv_hyperion, "SJHyperionFighters", -1.0);
    TriggerStop(gt_LaunchHyperionFighters);
    gf_RecallHyperionFighters();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RecallHyperionFighters_Init () {
    gt_RecallHyperionFighters = TriggerCreate("gt_RecallHyperionFighters_Func");
    TriggerEnable(gt_RecallHyperionFighters, false);
    TriggerAddEventUnitAbility(gt_RecallHyperionFighters, UnitRefFromVariable("gv_hyperion"), AbilityCommand("SJHyperionFightersRecall", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hyperion Fighters In Combat
//--------------------------------------------------------------------------------------------------
bool gt_HyperionFightersInCombat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGroupHasUnit(gv_hyperionFighterGroup, EventUnitTarget()) == true) || (UnitGroupHasUnit(gv_hyperionFighterGroup, EventUnit()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_hyperionFighterCombatIndicator = 3;
    Wait(0.5, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HyperionFightersInCombat_Init () {
    gt_HyperionFightersInCombat = TriggerCreate("gt_HyperionFightersInCombat_Func");
    TriggerEnable(gt_HyperionFightersInCombat, false);
    TriggerAddEventUnitAttacked(gt_HyperionFightersInCombat, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hyperion Fighters In Combat Indicator Diminish
//--------------------------------------------------------------------------------------------------
bool gt_HyperionFightersInCombatIndicatorDiminish_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_hyperionFighterCombatIndicator > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_hyperionFighterCombatIndicator -= 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HyperionFightersInCombatIndicatorDiminish_Init () {
    gt_HyperionFightersInCombatIndicatorDiminish = TriggerCreate("gt_HyperionFightersInCombatIndicatorDiminish_Func");
    TriggerEnable(gt_HyperionFightersInCombatIndicatorDiminish, false);
    TriggerAddEventTimePeriodic(gt_HyperionFightersInCombatIndicatorDiminish, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hyperion Fighters Have Target Attacked
//--------------------------------------------------------------------------------------------------
bool gt_HyperionFightersHaveTargetAttacked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGroupHasUnit(gv_hyperionFighterGroup, EventUnitTarget()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_hyperionFighterHaveTagetIndicator = 3;
    Wait(0.5, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HyperionFightersHaveTargetAttacked_Init () {
    gt_HyperionFightersHaveTargetAttacked = TriggerCreate("gt_HyperionFightersHaveTargetAttacked_Func");
    TriggerEnable(gt_HyperionFightersHaveTargetAttacked, false);
    TriggerAddEventUnitAttacked(gt_HyperionFightersHaveTargetAttacked, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hyperion Fighters Have Target Indicator Diminish
//--------------------------------------------------------------------------------------------------
bool gt_HyperionFightersHaveTargetIndicatorDiminish_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_hyperionFighterHaveTagetIndicator > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_HyperionFightersAreStunned() == true)) {
        return true;
    }

    gv_hyperionFighterHaveTagetIndicator -= 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HyperionFightersHaveTargetIndicatorDiminish_Init () {
    gt_HyperionFightersHaveTargetIndicatorDiminish = TriggerCreate("gt_HyperionFightersHaveTargetIndicatorDiminish_Func");
    TriggerEnable(gt_HyperionFightersHaveTargetIndicatorDiminish, false);
    TriggerAddEventTimePeriodic(gt_HyperionFightersHaveTargetIndicatorDiminish, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hyperion Fighters Dies
//--------------------------------------------------------------------------------------------------
bool gt_HyperionFightersDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_hyperionFighterGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_tacFightersLost += 1;
    UnitAddChargeUsed(gv_hyperion, "SJHyperionFighters", 1.0);
    if ((UnitGroupCount(gv_hyperionFighterGroup, c_unitCountAlive) == 0)) {
        gf_RecallHyperionFighters();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HyperionFightersDies_Init () {
    gt_HyperionFightersDies = TriggerCreate("gt_HyperionFightersDies_Func");
    TriggerEnable(gt_HyperionFightersDies, false);
    TriggerAddEventUnitDied(gt_HyperionFightersDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hyperion Fighters Share Aggro
//--------------------------------------------------------------------------------------------------
bool gt_HyperionFightersShareAggro_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexUnit;
    int lv_indexOrder;
    bool lv_idle;

    // Automatic Variable Declarations
    unitgroup auto47C436FF_g;
    int auto47C436FF_u;
    int auto1450145F_ae;
    const int auto1450145F_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_hyperionFighterGroup, EventUnitTarget()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupHasUnit(gf_HyperionFighterTargetGroup(), EventUnit()) == false)) {
        return true;
    }

    auto47C436FF_g = gv_hyperionFighterGroup;
    auto47C436FF_u = UnitGroupCount(auto47C436FF_g, c_unitCountAll);
    for (;; auto47C436FF_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(auto47C436FF_g, auto47C436FF_u);
        if (lv_indexUnit == null) { break; }
        lv_idle = true;
        auto1450145F_ae = UnitOrderCount(lv_indexUnit);
        lv_indexOrder = 1;
        for ( ; ( (auto1450145F_ai >= 0 && lv_indexOrder <= auto1450145F_ae) || (auto1450145F_ai < 0 && lv_indexOrder >= auto1450145F_ae) ) ; lv_indexOrder += auto1450145F_ai ) {
            if ((OrderGetAbilityCommand(UnitOrder(lv_indexUnit, (lv_indexOrder - 1))) == AbilityCommand("attack", 0))) {
                lv_idle = false;
                break;
            }

        }
        if ((lv_idle == true)) {
            UnitIssueOrder(lv_indexUnit, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(EventUnit())), c_orderQueueReplace);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HyperionFightersShareAggro_Init () {
    gt_HyperionFightersShareAggro = TriggerCreate("gt_HyperionFightersShareAggro_Func");
    TriggerEnable(gt_HyperionFightersShareAggro, false);
    TriggerAddEventUnitAttacked(gt_HyperionFightersShareAggro, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hyperion Enter Combat
//--------------------------------------------------------------------------------------------------
bool gt_HyperionEnterCombat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventUnit() == gv_hyperion) || (UnitGroupHasUnit(gv_hyperionFighterGroup, EventUnit()) == true) || (EventUnitTarget() == gv_hyperion) || (UnitGroupHasUnit(gv_hyperionFighterGroup, EventUnitTarget()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_hyperionInCombatIndicator = 2;
    Wait(0.5, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HyperionEnterCombat_Init () {
    gt_HyperionEnterCombat = TriggerCreate("gt_HyperionEnterCombat_Func");
    TriggerAddEventUnitAttacked(gt_HyperionEnterCombat, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hyperion In Combat Indicator Diminish
//--------------------------------------------------------------------------------------------------
bool gt_HyperionInCombatIndicatorDiminish_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_hyperionInCombatIndicator > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_hyperionInCombatIndicator -= 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HyperionInCombatIndicatorDiminish_Init () {
    gt_HyperionInCombatIndicatorDiminish = TriggerCreate("gt_HyperionInCombatIndicatorDiminish_Func");
    TriggerAddEventTimePeriodic(gt_HyperionInCombatIndicatorDiminish, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hyperion Being Attacked
//--------------------------------------------------------------------------------------------------
bool gt_HyperionBeingAttacked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_hyperion))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_hyperionBeingAttackedIndicator = 3;
    Wait(0.5, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HyperionBeingAttacked_Init () {
    gt_HyperionBeingAttacked = TriggerCreate("gt_HyperionBeingAttacked_Func");
    TriggerAddEventUnitAttacked(gt_HyperionBeingAttacked, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hyperion Being Attacked Indicator Diminish
//--------------------------------------------------------------------------------------------------
bool gt_HyperionBeingAttackedIndicatorDiminish_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_hyperionBeingAttackedIndicator > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_hyperionBeingAttackedIndicator -= 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HyperionBeingAttackedIndicatorDiminish_Init () {
    gt_HyperionBeingAttackedIndicatorDiminish = TriggerCreate("gt_HyperionBeingAttackedIndicatorDiminish_Func");
    TriggerAddEventTimePeriodic(gt_HyperionBeingAttackedIndicatorDiminish, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Hyperion Leveled Up Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionHyperionLeveledUpQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto977F1EDC_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_hyperionLevel >= gv_c_HyperionLevel_Max)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }

    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    auto977F1EDC_val = gv_hyperionLevel;
    if (auto977F1EDC_val == 2) {
        gf_WaitforCriticalTransmissionFinished();
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space01|Line00111", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto977F1EDC_val == 3) {
        gf_WaitforCriticalTransmissionFinished();
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space01|Line00110", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto977F1EDC_val == gv_c_HyperionLevel_Max) {
        gf_WaitforCriticalTransmissionFinished();
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space01|Line00113", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionHyperionLeveledUpQ_Init () {
    gt_TransmissionHyperionLeveledUpQ = TriggerCreate("gt_TransmissionHyperionLeveledUpQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: XP Bar Create
//--------------------------------------------------------------------------------------------------
bool gt_XPBarCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_DisplayProgressBar(StringExternal("Param/Value/F5885274"), 0, 1000);
    TriggerExecute(gt_XPBarUpdate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_XPBarCreate_Init () {
    gt_XPBarCreate = TriggerCreate("gt_XPBarCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: XP Bar Update
//--------------------------------------------------------------------------------------------------
bool gt_XPBarUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_hyperionLevel == gv_c_HyperionLevel_Max)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_AchievementMaxLevelBy11Minutes, true, false);
        libSwaC_gf_SetProgressBarLabel(StringExternal("Param/Value/6C885AB0"));
        libSwaC_gf_SetProgressBarProgress(1000);
        libSwaC_gf_SetProgressBarTitle(StringExternal("Param/Value/BF902987"));
        Wait(15.0, c_timeAI);
        libSwaC_gf_ShowHideProgressBar(false);
    }
    else {
        TextExpressionSetToken("Param/Expression/E3510030", "A", StringExternal("Param/Value/1AEEBC81"));
        TextExpressionSetToken("Param/Expression/E3510030", "B", IntToText((gv_hyperionExperience - ((gv_hyperionLevel - 1) * 1000))));
        TextExpressionSetToken("Param/Expression/E3510030", "C", StringExternal("Param/Value/8F288F04"));
        libSwaC_gf_SetProgressBarLabel(TextExpressionAssemble("Param/Expression/E3510030"));
        libSwaC_gf_SetProgressBarProgress((gv_hyperionExperience - ((gv_hyperionLevel - 1) * 1000)));
        if (((gv_hyperionLevel + 1) == gv_c_HyperionLevel_Max)) {
            libSwaC_gf_SetProgressBarTitle(TextExpressionAssemble("Param/Expression/8139F05A"));
        }
        else {
            TextExpressionSetToken("Param/Expression/F642838A", "level", IntToText((gv_hyperionLevel + 1)));
            libSwaC_gf_SetProgressBarTitle(TextExpressionAssemble("Param/Expression/F642838A"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_XPBarUpdate_Init () {
    gt_XPBarUpdate = TriggerCreate("gt_XPBarUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mineral Pickup
//--------------------------------------------------------------------------------------------------
bool gt_MineralPickup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_mineralGroup;
    int lv_minedOutMineralGroup;

    // Automatic Variable Declarations
    const int autoF9E40A2E_ae = 3;
    int autoF9E40A2E_var;

    // Variable Initialization
    lv_mineralGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("UI_ResourcePickup", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitKill(EventUnit());
    autoF9E40A2E_var = 1;
    for ( ; autoF9E40A2E_var <= autoF9E40A2E_ae; autoF9E40A2E_var += 1 ) {
        if ((UnitGroupHasUnit(gv_objectiveMineralFieldsGroup[autoF9E40A2E_var], EventUnit()) == true)) {
            lv_mineralGroup = gv_objectiveMineralFieldsGroup[autoF9E40A2E_var];
            if ((libNtve_gf_UnitGroupIsDead(lv_mineralGroup) == true)) {
                lv_minedOutMineralGroup = autoF9E40A2E_var;
                break;
            }

        }

    }
    gf_RewardMinerals(EventUnit());
    gv_mineralClustersCollected += 1;
    TriggerExecute(gt_XPBarUpdate, true, false);
    TriggerExecute(gt_AchievementCollectAllMinerals, true, false);
    if ((lv_minedOutMineralGroup != 0)) {
        PingDestroy(gv_objectiveMineralFieldPing[lv_minedOutMineralGroup]);
        gv_objectiveMineralFieldPing[lv_minedOutMineralGroup] = c_invalidPingId;
        TriggerExecute(gt_ObjectiveMineralFieldsUpdate, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MineralPickup_Init () {
    gt_MineralPickup = TriggerCreate("gt_MineralPickup_Func");
    TriggerAddEventUnitAbility(gt_MineralPickup, null, AbilityCommand("HyperionPickup", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mineral Pickup Achievement Check Failsafe
//--------------------------------------------------------------------------------------------------
bool gt_MineralPickupAchievementCheckFailsafe_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_AchievementCollectAllMinerals, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MineralPickupAchievementCheckFailsafe_Init () {
    gt_MineralPickupAchievementCheckFailsafe = TriggerCreate("gt_MineralPickupAchievementCheckFailsafe_Func");
    TriggerAddEventUnitAbility(gt_MineralPickupAchievementCheckFailsafe, null, AbilityCommand("HyperionPickup", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_MineralPickupAchievementCheckFailsafe, null, AbilityCommand("HyperionPickup", 0), c_abilEffectStageFinish, false);
    TriggerAddEventUnitAbility(gt_MineralPickupAchievementCheckFailsafe, null, AbilityCommand("HyperionPickup", 0), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Repair Bot Pickup
//--------------------------------------------------------------------------------------------------
bool gt_RepairBotPickup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetPropertyFixed(gv_hyperion, c_unitPropLifePercent, c_unitPropCurrent) < 100.0) || (gf_HyperionFighterCountCurrent() < gf_HyperionFighterCountMax()))) {
        UnitCreateEffectUnit(EventUnit(), "HyperionPickup", gv_hyperion);
        Wait(0.5, c_timeGame);
        if (((UnitGetPropertyFixed(gv_hyperion, c_unitPropLifePercent, c_unitPropCurrent) < 100.0) || (gf_HyperionFighterCountCurrent() < gf_HyperionFighterCountMax()))) {
            SoundPlay(SoundLink("UI_ResourcePickup", -1), PlayerGroupAll(), 100.0, 0.0);
            UnitKill(EventUnit());
            gf_RestoreHyperionToFull(false);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RepairBotPickup_Init () {
    gt_RepairBotPickup = TriggerCreate("gt_RepairBotPickup_Func");
    TriggerAddEventUnitAbility(gt_RepairBotPickup, null, AbilityCommand("SJPickupHealth500", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Repair Bot Tutorial Q
//--------------------------------------------------------------------------------------------------
bool gt_RepairBotTutorialQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_repairBots10;
    unit lv_bot;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_repairBots10 = UnitGroup("SJPickupHealth500", 0, RegionCircle(UnitGetPosition(gv_hyperion), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_pirateBossEngaged == false))) {
            return false;
        }

        if (!((UnitGroupCount(lv_repairBots10, c_unitCountAlive) > 0))) {
            return false;
        }

        if (!(((UnitGetPropertyFixed(gv_hyperion, c_unitPropLifePercent, c_unitPropCurrent) < 95.0) || ((gf_HyperionFighterCountMax() - gf_HyperionFighterCountCurrent()) > 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    lv_bot = UnitGroupClosestToPoint(lv_repairBots10, UnitGetPosition(gv_hyperion));
    libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(libSwaC_ge_CampaginReticleType_TerranBonusObjective, libSwaC_ge_CampaginReticleSize_Medium, StringExternal("Param/Value/A7A0B803"), lv_bot, "Ref_Center");
    libHots_gf_StoreActorForUnit(lv_bot, 1, libNtve_gf_ActorLastCreated());
    libHots_gf_StoreTextTagForUnit(lv_bot, 1, TextTagLastCreated());
    gf_WaitforCriticalTransmissionFinished();
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space01|Line00121", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    while (!(((UnitIsAlive(lv_bot) == false) || ((gf_HyperionFighterCountCurrent() == gf_HyperionFighterCountMax()) && (UnitGetPropertyFixed(gv_hyperion, c_unitPropLifePercent, c_unitPropCurrent) == 100.0))))) {
        Wait(0.5, c_timeGame);
    }
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(lv_bot, 1));
    TextTagDestroy(libHots_gf_TextTagForUnit(lv_bot, 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RepairBotTutorialQ_Init () {
    gt_RepairBotTutorialQ = TriggerCreate("gt_RepairBotTutorialQ_Func");
    TriggerAddEventTimePeriodic(gt_RepairBotTutorialQ, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hyperion Life Too Low
//--------------------------------------------------------------------------------------------------
bool gt_HyperionLifeTooLow_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_old;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while ((gv_gameOver == false) && (UnitIsAlive(gv_hyperion) == true)) {
        lv_old = gv_hyperionHPBak;
        gv_hyperionHPBak = UnitGetPropertyFixed(gv_hyperion, c_unitPropLife, c_unitPropCurrent);
        if ((gv_hyperionHPBak < lv_old) && (UnitGetPropertyFixed(gv_hyperion, c_unitPropLifePercent, c_unitPropCurrent) <= (gv_hyperionHPThreshold * 100.0)) && (gv_hyperionLowHPFlashing == false)) {
            if (((lv_old / UnitGetPropertyFixed(gv_hyperion, c_unitPropLifeMax, c_unitPropCurrent)) > gv_hyperionHPThreshold)) {
                TriggerExecute(gt_TransmissionHyperionLifeLowWarning, true, false);
            }

            TriggerExecute(gt_HyperionLowHPFlashing, true, false);
        }

        Wait(0.5, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HyperionLifeTooLow_Init () {
    gt_HyperionLifeTooLow = TriggerCreate("gt_HyperionLifeTooLow_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hyperion Low HP Flashing
//--------------------------------------------------------------------------------------------------
bool gt_HyperionLowHPFlashing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto7A8E5FC8_n = 3;
    int auto7A8E5FC8_i;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_hyperionLowHPFlashing == true)) {
        return true;
    }

    gv_hyperionLowHPFlashing = true;
    for (auto7A8E5FC8_i = 1; auto7A8E5FC8_i <= auto7A8E5FC8_n; auto7A8E5FC8_i += 1) {
        if ((UnitGetPropertyFixed(gv_hyperion, c_unitPropLifePercent, c_unitPropCurrent) >= (gv_hyperionHPThreshold * 100.0))) {
            break;
        }

        gf_CreateHyperionLowHPUI();
        DialogControlFadeTransparency(gv_hyperionLowHPUIImage, PlayerGroupSingle(gv_pLAYER_01_USER), 0.0, 50.0);
        DialogControlFadeTransparency(gv_hyperionLowHPUIImage, PlayerGroupSingle(gv_pLAYER_01_USER), 0.625, 100.0);
        Wait(1.25, c_timeGame);
    }
    gv_hyperionLowHPFlashing = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HyperionLowHPFlashing_Init () {
    gt_HyperionLowHPFlashing = TriggerCreate("gt_HyperionLowHPFlashing_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Hyperion Life Low Warning
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionHyperionLifeLowWarning_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_transmissionInProgress;

    // Automatic Variable Declarations
    int auto1CFBC880_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_criticalTransmissionPlaying = true;
    if ((libSwaC_gv_zS_SendTransmissionCampaignIndex != 0)) {
        lv_transmissionInProgress = true;
    }

    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    TransmissionClearAll();
    auto1CFBC880_val = RandomInt(1, 4);
    if (auto1CFBC880_val == 1) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space01|Line00061", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto1CFBC880_val == 2) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space01|Line00062", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto1CFBC880_val == 3) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space01|Line00063", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto1CFBC880_val == 4) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space01|Line00064", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    if ((lv_transmissionInProgress == false)) {
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    }

    gv_criticalTransmissionPlaying = false;
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionHyperionLifeLowWarning_Init () {
    gt_TransmissionHyperionLifeLowWarning = TriggerCreate("gt_TransmissionHyperionLifeLowWarning_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hyperion Minimap Icon
//--------------------------------------------------------------------------------------------------
bool gt_HyperionMinimapIcon_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if (((gv_gameOver == true) || (UnitIsAlive(gv_hyperion) == false))) {
            return true;
        }

        PingSetRotation(gv_hyperionMinimapIcon, UnitGetFacing(gv_hyperion));
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HyperionMinimapIcon_Init () {
    gt_HyperionMinimapIcon = TriggerCreate("gt_HyperionMinimapIcon_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Center On Hyperion
//--------------------------------------------------------------------------------------------------
bool gt_CenterOnHyperion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_hyperion) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CameraPan(gv_pLAYER_01_USER, UnitGetPosition(gv_hyperion), 0.0, -1, 10.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CenterOnHyperion_Init () {
    gt_CenterOnHyperion = TriggerCreate("gt_CenterOnHyperion_Func");
    TriggerAddEventKeyPressed(gt_CenterOnHyperion, gv_pLAYER_01_USER, c_keySpace, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Space Mine Attack
//--------------------------------------------------------------------------------------------------
bool gt_SpaceMineAttack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_target;
    point lv_targetLoc;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "SJCloakedMine"))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_mercSpaceStationMines, EventUnit()) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetCustomValue(EventUnit(), 0) != 0.0)) {
        return true;
    }

    UnitStatusBarOverride(EventUnit(), c_unitStatusGroupAll);
    UnitSetCustomValue(EventUnit(), 0, 1.0);
    UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    UnitBehaviorAdd(EventUnit(), "SJDisableSpaceMineWeapons", EventUnit(), 1);
    libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap D8Charge");
    libNtve_gf_SendActorMessageToUnit(EventUnit(), "AnimPlay Custom Stand PlayForever,NonLooping 0.000000 0.000000 1.500000 AsDuration");
    lv_target = libNtve_gf_AcquiredTarget();
    if ((UnitGroupHasUnit(gv_hyperionFighterGroup, lv_target) == true)) {
        lv_target = gv_hyperion;
    }

    lv_targetLoc = UnitGetPosition(lv_target);
    lv_targetLoc = PointWithOffsetPolar(UnitGetPosition(EventUnit()), 40.0, AngleBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(lv_target)));
    Wait(1.75, c_timeGame);
    if ((UnitIsAlive(EventUnit()) == false)) {
        return true;
    }

    if ((UnitIsAlive(lv_target) == true)) {
        lv_targetLoc = UnitGetPosition(lv_target);
        lv_targetLoc = PointWithOffsetPolar(UnitGetPosition(EventUnit()), 40.0, AngleBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(lv_target)));
    }

    UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, UnitGetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, c_unitPropNormal));
    libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap D8ChargeWeapon");
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), lv_targetLoc), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    UnitBehaviorRemove(EventUnit(), "SJDisableSpaceMineWeapons", 1);
    Wait(3.5, c_timeGame);
    if ((UnitIsAlive(EventUnit()) == true)) {
        UnitKill(EventUnit());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpaceMineAttack_Init () {
    gt_SpaceMineAttack = TriggerCreate("gt_SpaceMineAttack_Func");
    TriggerAddEventUnitAcquiredTarget(gt_SpaceMineAttack, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pirate Capital Ship Discovered Q
//--------------------------------------------------------------------------------------------------
bool gt_PirateCapitalShipDiscoveredQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectivePirateCapitalShipCreate, true, false);
    while (!((gf_HyperionInCombat() == false))) {
        Wait(0.25, c_timeGame);
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    gf_WaitforCriticalTransmissionFinished();
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space01|Line00030", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(14), 12.0, false);
    libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(libSwaC_ge_CampaginReticleType_TerranEnemy, libSwaC_ge_CampaginReticleSize_Large, null, gv_pirateCapitalShip, "Ref_Origin");
    gv_pirateBossBriefingModel = libNtve_gf_ActorLastCreated();
    libSwaC_gf_CreateObjectivePing(false, UnitGetPosition(gv_pirateCapitalShip), StringExternal("Param/Value/BD896D54"));
    gv_pirateBossPing = PingLastCreated();
    PingSetColor(PingLastCreated(), Color(100.00, 100.00, 0.00));
    gf_WaitforCriticalTransmissionFinished();
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space01|Line00031", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gf_WaitforCriticalTransmissionFinished();
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space01|Line00032", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PirateCapitalShipDiscoveredQ_Init () {
    gt_PirateCapitalShipDiscoveredQ = TriggerCreate("gt_PirateCapitalShipDiscoveredQ_Func");
    TriggerAddEventUnitRegion(gt_PirateCapitalShipDiscoveredQ, UnitRefFromVariable("gv_hyperion"), RegionFromId(15), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pirate Capital Ship Engaged
//--------------------------------------------------------------------------------------------------
bool gt_PirateCapitalShipEngaged_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_pirateBossBriefingModel != null)) {
        libNtve_gf_KillModel(gv_pirateBossBriefingModel);
        gv_pirateBossBriefingModel = null;
    }

    TriggerExecute(gt_PirateCapitalShipController, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PirateCapitalShipEngaged_Init () {
    gt_PirateCapitalShipEngaged = TriggerCreate("gt_PirateCapitalShipEngaged_Func");
    TriggerAddEventUnitDamaged(gt_PirateCapitalShipEngaged, UnitRefFromVariable("gv_pirateCapitalShip"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pirate Capital Ship Controller
//--------------------------------------------------------------------------------------------------
bool gt_PirateCapitalShipController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_enemyGroup8;
    unitgroup lv_pirateFighters;
    int lv_cloakCount;

    // Automatic Variable Declarations
    int auto67472B06_n;
    int auto67472B06_i;

    // Variable Initialization
    lv_enemyGroup8 = UnitGroupEmpty();
    lv_pirateFighters = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    gv_pirateBossEngaged = true;
    UnitIssueOrder(gv_pirateCapitalShip, OrderTargetingUnit(AbilityCommand("attack", 0), gv_hyperion), c_orderQueueReplace);
    Wait(5.0, c_timeGame);
    while (true) {
        if (((gv_gameOver == true) || (UnitIsAlive(gv_pirateCapitalShip) == false) || (UnitIsAlive(gv_hyperion) == false))) {
            gv_pirateBossEngaged = false;
            TriggerEnable(gt_PirateCapitalShipEngaged, true);
            return true;
        }

        if ((((UnitGetPropertyFixed(gv_pirateCapitalShip, c_unitPropLifePercent, c_unitPropCurrent) <= 70.0) && (lv_cloakCount == 0)) || ((UnitGetPropertyFixed(gv_pirateCapitalShip, c_unitPropLifePercent, c_unitPropCurrent) <= 40.0) && (lv_cloakCount == 1)))) {
            lv_cloakCount += 1;
            auto67472B06_n = libHots_gf_DifficultyValueInt2(5, 5, 8);
            for (auto67472B06_i = 1; auto67472B06_i <= auto67472B06_n; auto67472B06_i += 1) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "SJGriffon", c_unitCreateIgnorePlacement, gv_pLAYER_03_PIRATE, UnitGetPosition(gv_pirateCapitalShip));
                UnitGroupAdd(lv_pirateFighters, UnitLastCreated());
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(gv_pirateCapitalShip), 3.0, RandomFixed(0.0, 360.0))), c_orderQueueReplace);
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_hyperion)), c_orderQueueAddToEnd);
                UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), gv_hyperion), c_orderQueueAddToEnd);
            }
            UnitBehaviorAdd(gv_pirateCapitalShip, "SJPirateCapitalShipNoFire", gv_pirateCapitalShip, 1);
            UnitBehaviorAdd(gv_pirateCapitalShip, "BansheeCloak", gv_pirateCapitalShip, 1);
            if ((UnitGetFacing(gv_hyperion) >= 240.0)) {
                UnitIssueOrder(gv_pirateCapitalShip, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(gv_hyperion), 8.0, (UnitGetFacing(gv_hyperion) + 120.0))), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(gv_pirateCapitalShip, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(gv_hyperion), 8.0, (UnitGetFacing(gv_hyperion) - 120.0))), c_orderQueueReplace);
            }
            while (!(((UnitOrderCount(gv_pirateCapitalShip) == 0) || (libNtve_gf_UnitGroupIsDead(lv_pirateFighters) == true)))) {
                Wait(0.25, c_timeGame);
            }
            UnitBehaviorRemove(gv_pirateCapitalShip, "SJPirateCapitalShipNoFire", 1);
            UnitBehaviorRemove(gv_pirateCapitalShip, "BansheeCloak", 1);
        }

        lv_enemyGroup8 = UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_pirateCapitalShip), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
        if ((UnitGroupCount(lv_enemyGroup8, c_unitCountAlive) > 0)) {
            UnitIssueOrder(gv_pirateCapitalShip, Order(AbilityCommand("SJPirateLightningStorm", 0)), c_orderQueueReplace);
            Wait(2.0, c_timeGame);
        }

        if ((DistanceBetweenPoints(UnitGetPosition(gv_pirateCapitalShip), UnitGetPosition(gv_hyperion)) <= 12.0)) {
            UnitIssueOrder(gv_pirateCapitalShip, OrderTargetingUnit(AbilityCommand("SJPirateYamato", 0), gv_hyperion), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(gv_pirateCapitalShip, OrderTargetingUnit(AbilityCommand("attack", 0), gv_hyperion), c_orderQueueReplace);
        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PirateCapitalShipController_Init () {
    gt_PirateCapitalShipController = TriggerCreate("gt_PirateCapitalShipController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pirate Capital Ship Reset
//--------------------------------------------------------------------------------------------------
bool gt_PirateCapitalShipReset_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_pirateBossEngaged == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_pirateBossEngaged = false;
    TriggerStop(gt_PirateCapitalShipController);
    UnitBehaviorAdd(gv_pirateCapitalShip, "BansheeCloak", gv_pirateCapitalShip, 1);
    UnitBehaviorAdd(gv_pirateCapitalShip, "GhostHoldFireB", gv_pirateCapitalShip, 1);
    UnitIssueOrder(gv_pirateCapitalShip, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(4)), c_orderQueueReplace);
    UnitIssueOrder(gv_pirateCapitalShip, OrderTargetingPoint(AbilityCommand("move", 4), libNtve_gf_PointFromPositionAndAngle(PointFromId(4), 175.0)), c_orderQueueAddToEnd);
    while (!((UnitOrderCount(gv_pirateCapitalShip) == 0))) {
        Wait(0.25, c_timeGame);
    }
    UnitSetPropertyFixed(gv_pirateCapitalShip, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_pirateCapitalShip, c_unitPropEnergyPercent, 100.0);
    UnitBehaviorRemove(gv_pirateCapitalShip, "BansheeCloak", 1);
    UnitBehaviorRemove(gv_pirateCapitalShip, "GhostHoldFireB", 1);
    TriggerEnable(gt_PirateCapitalShipEngaged, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PirateCapitalShipReset_Init () {
    gt_PirateCapitalShipReset = TriggerCreate("gt_PirateCapitalShipReset_Func");
    TriggerAddEventUnitRegion(gt_PirateCapitalShipReset, UnitRefFromVariable("gv_hyperion"), RegionFromId(37), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pirate Capital Ship EField Hit Q
//--------------------------------------------------------------------------------------------------
bool gt_PirateCapitalShipEFieldHitQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    int auto4CFDFD62_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_pirateBossEFieldHits += 1;
    if ((gv_pirateBossEFieldHits >= 3)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }

    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    auto4CFDFD62_val = gv_pirateBossEFieldHits;
    if (auto4CFDFD62_val == 1) {
        gf_WaitforCriticalTransmissionFinished();
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space01|Line00115", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto4CFDFD62_val == 2) {
        gf_WaitforCriticalTransmissionFinished();
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space01|Line00118", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto4CFDFD62_val == 3) {
        gf_WaitforCriticalTransmissionFinished();
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space01|Line00119", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PirateCapitalShipEFieldHitQ_Init () {
    gt_PirateCapitalShipEFieldHitQ = TriggerCreate("gt_PirateCapitalShipEFieldHitQ_Func");
    TriggerAddEventUnitBehaviorChange(gt_PirateCapitalShipEFieldHitQ, UnitRefFromVariable("gv_hyperion"), "SJPirateLightningStormStun", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pirate Capital Ship Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_PirateCapitalShipDestroyedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsAtPoint2(1, "SJPickupHealth500", 0, 0, UnitGetPosition(gv_pirateCapitalShip));
    PingDestroy(gv_pirateBossPing);
    TriggerExecute(gt_ObjectivePirateCapitalShipComplete, true, true);
    Wait(1.0, c_timeReal);
    libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/19509D57"));
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    gf_WaitforCriticalTransmissionFinished();
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space01|Line00033", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    UnitAbilityShow(gv_hyperion, "SJHyperionLightningStorm", true);
    UnitAbilityShow(gv_hyperion, "SJHyperionResearchLightningStorm", true);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("SJHyperionLightningStorm", 0), true);
    gf_WaitforCriticalTransmissionFinished();
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space01|Line00034", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gf_WaitforCriticalTransmissionFinished();
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space01|Line00035", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("SJHyperionLightningStorm", 0), false);
    gf_WaitforCriticalTransmissionFinished();
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space01|Line00036", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    Wait(libSwaC_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    Wait(4.0, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PirateCapitalShipDestroyedQ_Init () {
    gt_PirateCapitalShipDestroyedQ = TriggerCreate("gt_PirateCapitalShipDestroyedQ_Func");
    TriggerAddEventUnitDied(gt_PirateCapitalShipDestroyedQ, UnitRefFromVariable("gv_pirateCapitalShip"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Merc Space Station Takes Damage
//--------------------------------------------------------------------------------------------------
bool gt_MercSpaceStationTakesDamage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_mercenaryBaseBriefingModel != null)) {
        libNtve_gf_KillModel(gv_mercenaryBaseBriefingModel);
        gv_mercenaryBaseBriefingModel = null;
    }

    TriggerExecute(gt_MercSpaceStationBossBar, true, false);
    TriggerExecute(gt_MercSpaceStationThrowingMines, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MercSpaceStationTakesDamage_Init () {
    gt_MercSpaceStationTakesDamage = TriggerCreate("gt_MercSpaceStationTakesDamage_Func");
    TriggerAddEventUnitDamaged(gt_MercSpaceStationTakesDamage, UnitRefFromVariable("gv_enemyBase"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Merc Space Station Boss Bar
//--------------------------------------------------------------------------------------------------
bool gt_MercSpaceStationBossBar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_DisplaySingularBossBarSwarmCampaign("Assets\\Textures\\btn-boss-mercspacestation.dds", StringExternal("Param/Value/1216B932"), 100);
    libSwaC_gf_SetSingularBossBarBossSwarmCampaign(gv_enemyBase, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MercSpaceStationBossBar_Init () {
    gt_MercSpaceStationBossBar = TriggerCreate("gt_MercSpaceStationBossBar_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Merc Space Station Throwing Mines
//--------------------------------------------------------------------------------------------------
bool gt_MercSpaceStationThrowingMines_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const int lv_count = 8;
    fixed lv_angle;
    const fixed lv_angleInterval = 15.0;
    int lv_index;
    unitgroup lv_mineGroup;
    unit lv_indexMine;
    point lv_target;

    // Automatic Variable Declarations
    const int auto55C43CCF_ae = lv_count;
    const int auto55C43CCF_ai = 1;

    // Variable Initialization
    lv_mineGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_mercSpaceStationActive == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_mercSpaceStationActive = true;
    while (true) {
        Wait(2.0, c_timeGame);
        if (((gv_gameOver == true) || (UnitTestState(gv_enemyBase, c_unitStateIdle) == true) || (UnitIsAlive(gv_enemyBase) == false) || (UnitIsAlive(gv_hyperion) == false))) {
            gv_mercSpaceStationActive = false;
            return true;
        }

        lv_angle = (AngleBetweenPoints(UnitGetPosition(gv_enemyBase), UnitGetPosition(gv_hyperion))-lv_angleInterval*IntToFixed(lv_count)/2);
        lv_index = 1;
        for ( ; ( (auto55C43CCF_ai >= 0 && lv_index <= auto55C43CCF_ae) || (auto55C43CCF_ai < 0 && lv_index >= auto55C43CCF_ae) ) ; lv_index += auto55C43CCF_ai ) {
            UnitCreate(1, "SJCloakedMine", c_unitCreateIgnorePlacement, gv_pLAYER_02_MIRA_HAN, PointWithOffsetPolar(UnitGetPosition(gv_enemyBase), 2.0, lv_angle), lv_angle);
            gf_AdjustHPHard(UnitLastCreated());
            UnitGroupAdd(lv_mineGroup, UnitLastCreated());
            UnitGroupAdd(gv_mercSpaceStationMines, UnitLastCreated());
            UnitBehaviorAdd(UnitLastCreated(), "SJDisableSpaceMineWeapons", UnitLastCreated(), 1);
            UnitSetCustomValue(UnitLastCreated(), 0, 1.0);
            gf_MercSpaceStationMineMovement(UnitLastCreated(), lv_angle);
            lv_angle += lv_angleInterval;
        }
        Wait(15.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MercSpaceStationThrowingMines_Init () {
    gt_MercSpaceStationThrowingMines = TriggerCreate("gt_MercSpaceStationThrowingMines_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Battlecruiser Logic
//--------------------------------------------------------------------------------------------------
bool gt_BattlecruiserLogic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_enemys;
    unit lv_indexUnit;
    bool lv_fired;

    // Automatic Variable Declarations
    unitgroup autoA9C2864E_g;
    int autoA9C2864E_u;

    // Variable Initialization
    lv_enemys = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "SJBattlecruiser"))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_battlecruisersInCombat, EventUnit()) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_battlecruisersInCombat, EventUnit());
    Wait(5.0, c_timeGame);
    while (true) {
        if (((UnitIsAlive(EventUnit()) == false) || (UnitTestState(EventUnit(), c_unitStateIdle) == true))) {
            UnitGroupRemove(gv_battlecruisersInCombat, EventUnit());
            return true;
        }

        lv_fired = false;
        lv_enemys = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 9.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoA9C2864E_g = lv_enemys;
        autoA9C2864E_u = UnitGroupCount(autoA9C2864E_g, c_unitCountAll);
        for (;; autoA9C2864E_u -= 1) {
            lv_indexUnit = UnitGroupUnitFromEnd(autoA9C2864E_g, autoA9C2864E_u);
            if (lv_indexUnit == null) { break; }
            if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnit()), UnitGetOwner(lv_indexUnit), libNtve_ge_PlayerRelation_Enemy) == false)) {
                UnitGroupRemove(lv_enemys, lv_indexUnit);
            }

        }
        if ((libNtve_gf_UnitGroupIsDead(lv_enemys) == false)) {
            UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("Yamato", 0), UnitGroupRandomUnit(lv_enemys, c_unitCountAlive)), c_orderQueueAddToFront);
            lv_fired = true;
        }

        if ((lv_fired == true)) {
            Wait(15.0, c_timeGame);
        }
        else {
            Wait(2.0, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BattlecruiserLogic_Init () {
    gt_BattlecruiserLogic = TriggerCreate("gt_BattlecruiserLogic_Func");
    TriggerAddEventUnitAcquiredTarget(gt_BattlecruiserLogic, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Battlecruiser Dies
//--------------------------------------------------------------------------------------------------
bool gt_BattlecruiserDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_hyperionDamagedBattlecruiserGroup, EventUnit()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitGroupIsDead(UnitGroup("SJPickupHealth500", 0, RegionCircle(UnitGetPosition(EventUnit()), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_potentialRepairingBotDropIndex += 1;
    if (((gv_mercSpaceStationActive == true) || (ModI(gv_potentialRepairingBotDropIndex, libHots_gf_DifficultyValueInt2(2, 2, 5)) == 1))) {
        UnitCreate(1, "SJPickupHealth500", c_unitCreateIgnorePlacement, 0, UnitGetPosition(EventUnit()), libNtve_gf_RandomAngle());
        libSwaC_gf_SetUnitInfoTextCampaign(UnitLastCreated(), StringExternal("Param/Value/D095F58A"), StringExternal("Param/Value/4CCA82E7"), null);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BattlecruiserDies_Init () {
    gt_BattlecruiserDies = TriggerCreate("gt_BattlecruiserDies_Func");
    TriggerAddEventUnitDied(gt_BattlecruiserDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Battlecruiser Trained
//--------------------------------------------------------------------------------------------------
bool gt_BattlecruiserTrained_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnitCreatedUnit()) == "SJBattlecruiser"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_TriggerAddEventUnitDamaged(gt_BattlecruiserTakesDamage, EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BattlecruiserTrained_Init () {
    gt_BattlecruiserTrained = TriggerCreate("gt_BattlecruiserTrained_Func");
    TriggerAddEventUnitCreated(gt_BattlecruiserTrained, null, "SJMercStarportTrain", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Battlecruiser Takes Damage
//--------------------------------------------------------------------------------------------------
bool gt_BattlecruiserTakesDamage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((EventUnitDamageSourceUnit() == gv_hyperion))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_hyperionDamagedBattlecruiserGroup, EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BattlecruiserTakesDamage_Init () {
    gt_BattlecruiserTakesDamage = TriggerCreate("gt_BattlecruiserTakesDamage_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Mission Help Q
//--------------------------------------------------------------------------------------------------
bool gt_TipMissionHelpQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_DisplayMissionTip(StringExternal("Param/Value/5A7021DA"));
    Wait(libSwaC_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipMissionHelpQ_Init () {
    gt_TipMissionHelpQ = TriggerCreate("gt_TipMissionHelpQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CampaignInitAI();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Waves - Player
//--------------------------------------------------------------------------------------------------
bool gt_AttackWavesPlayer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if (((gv_gameOver == true) || (UnitIsAlive(gv_playerBase) == false))) {
            return true;
        }

        gf_SendPlayerAttackWave();
        Wait(gv_playerWaveRespawnRate, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWavesPlayer_Init () {
    gt_AttackWavesPlayer = TriggerCreate("gt_AttackWavesPlayer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Waves - Enemy
//--------------------------------------------------------------------------------------------------
bool gt_AttackWavesEnemy_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((gv_gameOver == true)) {
            return true;
        }

        gf_SendEnemyAttackWave();
        Wait(gv_enemyWaveRespawnRate, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWavesEnemy_Init () {
    gt_AttackWavesEnemy = TriggerCreate("gt_AttackWavesEnemy_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Minerals
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveMinerals_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) < 3000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveMinerals_Init () {
    gt_AIGiveMinerals = TriggerCreate("gt_AIGiveMinerals_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_pLAYER_02_MIRA_HAN, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_pLAYER_03_PIRATE, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_pLAYER_05_RAYNOR, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_pLAYER_06_MIRA_BASE1, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_pLAYER_07_MIRA_BASE2, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Gas
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveGas_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) < 3000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 5000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveGas_Init () {
    gt_AIGiveGas = TriggerCreate("gt_AIGiveGas_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_pLAYER_02_MIRA_HAN, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_pLAYER_03_PIRATE, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_pLAYER_05_RAYNOR, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_pLAYER_06_MIRA_BASE1, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_pLAYER_07_MIRA_BASE2, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Collect All Minerals
//--------------------------------------------------------------------------------------------------
bool gt_AchievementCollectAllMinerals_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0625, c_timeGame);
    if ((((libNtve_gf_UnitGroupIsDead(UnitGroup("SJMineralFormation1", 0, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == true) && (libNtve_gf_UnitGroupIsDead(UnitGroup("SJMineralFormation2", 0, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == true)) || (gv_numberOfMineralClusters <= gv_mineralClustersCollected))) {
        TriggerEnable(TriggerGetCurrent(), false);
        libSwaC_gf_CampaignAwardAchievement("ZSpace01_2", gv_pLAYER_01_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementCollectAllMinerals_Init () {
    gt_AchievementCollectAllMinerals = TriggerCreate("gt_AchievementCollectAllMinerals_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Hyperion Hit by Mag Mine N/H
//--------------------------------------------------------------------------------------------------
bool gt_AchievementHyperionHitbyMagMineNH_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libHots_gf_DifficultyValueInt2(0, 1, 1) == 1))) {
            return false;
        }

        if (!((gv_hyperionHitByMagMine == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CampaignAwardAchievement("ZSpace01_3", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementHyperionHitbyMagMineNH_Init () {
    gt_AchievementHyperionHitbyMagMineNH = TriggerCreate("gt_AchievementHyperionHitbyMagMineNH_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Max Level By 11 Minutes
//--------------------------------------------------------------------------------------------------
bool gt_AchievementMaxLevelBy11Minutes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1))) {
            return false;
        }

        if (!((GameGetMissionTime() < 661.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_CampaignAwardAchievement("Anniversary_ZSpace01", gv_pLAYER_01_USER);
    TriggerDebugOutput(1, StringExternal("Param/Value/CE02371B"), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementMaxLevelBy11Minutes_Init () {
    gt_AchievementMaxLevelBy11Minutes = TriggerCreate("gt_AchievementMaxLevelBy11Minutes_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Timed Run H
//--------------------------------------------------------------------------------------------------
bool gt_AchievementTimedRunH_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1))) {
            return false;
        }

        if (!((TimerGetRemaining(gv_timedRunTimer) != 0.0))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CampaignAwardAchievement("Mastery_Space1", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementTimedRunH_Init () {
    gt_AchievementTimedRunH = TriggerCreate("gt_AchievementTimedRunH_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stat: Hyperion Damage Taken
//--------------------------------------------------------------------------------------------------
bool gt_StatHyperionDamageTaken_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_totalDamageTaken += EventUnitDamageAmount();
    if ((EventUnitDamageEffect() == "SJCloakedMineWeaponSearchDamage")) {
        gv_hyperionHitByMagMine = true;
        gv_totalMagMineDamageTaken += EventUnitDamageAmount();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatHyperionDamageTaken_Init () {
    gt_StatHyperionDamageTaken = TriggerCreate("gt_StatHyperionDamageTaken_Func");
    TriggerAddEventUnitDamaged(gt_StatHyperionDamageTaken, UnitRefFromVariable("gv_hyperion"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stat: Yamato Kills
//--------------------------------------------------------------------------------------------------
bool gt_StatYamatoKills_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_yamatoKills += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatYamatoKills_Init () {
    gt_StatYamatoKills = TriggerCreate("gt_StatYamatoKills_Func");
    TriggerAddEventUnitDamaged(gt_StatYamatoKills, null, c_unitDamageTypeAny, c_unitDamageFatal, "SJHyperionYamatoDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Primary Objective Failed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatPrimaryObjectiveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveHyperionMustSurviveFailed, true, false);
    libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), libSwaC_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/32454045"), libSwaC_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatPrimaryObjectiveFailed_Init () {
    gt_DefeatPrimaryObjectiveFailed = TriggerCreate("gt_DefeatPrimaryObjectiveFailed_Func");
    TriggerAddEventUnitDied(gt_DefeatPrimaryObjectiveFailed, UnitRefFromVariable("gv_hyperion"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), libSwaC_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/C5203F5C"), libSwaC_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDestroyed_Init () {
    gt_DefeatBaseDestroyed = TriggerCreate("gt_DefeatBaseDestroyed_Func");
    TriggerEnable(gt_DefeatBaseDestroyed, false);
    TriggerAddEventUnitDied(gt_DefeatBaseDestroyed, UnitRefFromVariable("gv_playerBase"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Main Objective Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryMainObjectiveCompleted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_ShowHideSingularBossBarSwarmCampaign(false);
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryMainObjectiveCompleted_Init () {
    gt_VictoryMainObjectiveCompleted = TriggerCreate("gt_VictoryMainObjectiveCompleted_Func");
    TriggerAddEventUnitDied(gt_VictoryMainObjectiveCompleted, UnitRefFromVariable("gv_enemyBase"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    UnitSetState(gv_hyperion, c_unitStateInvulnerable, true);
    TimerPause(gv_timedRunTimer, true);
    CameraPan(gv_pLAYER_01_USER, UnitGetPosition(gv_enemyBase), 1.5, -1, 10, true);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveHyperionMustSurviveComplete, true, false);
    TriggerExecute(gt_ObjectiveDestroyMercenarySpaceStationComplete, true, true);
    libSwaC_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((ObjectiveGetState(gv_objectiveDestroyDominionBase) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objectiveDestroyDominionBase2) == c_objectiveStateCompleted)) {
        libSwaC_gf_CampaignAwardAchievement("ZSpace01_1", gv_pLAYER_01_USER);
    }

    TriggerExecute(gt_AchievementHyperionHitbyMagMineNH, true, false);
    TriggerExecute(gt_AchievementTimedRunH, true, false);
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/F1F54E31"), IntToText(libNtve_gf_UnitGetPropertyKills(gv_hyperion, c_unitPropCurrent)));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/1BB203A7"), IntToText(gv_yamatoKills));
    TextExpressionSetToken("Param/Expression/8455B117", "A", IntToText(gv_mineralClustersCollected));
    TextExpressionSetToken("Param/Expression/8455B117", "B", IntToText(gv_numberOfMineralClusters));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/2067B361"), TextExpressionAssemble("Param/Expression/8455B117"));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/9FFA0F3C"), FixedToText(gv_totalMagMineDamageTaken, 0));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/20551A92"), FixedToText(gv_totalDamageTaken, 0));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/3520EA23"), IntToText(gv_tacFightersLost));
    libSwaC_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_Defeat, false);
    TriggerEnable(gt_DefeatCheat, false);
    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    libSwaC_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_Victory, false);
    TriggerEnable(gt_VictoryCheat, false);
    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Setup Space Station Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSetupSpaceStationCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZSaveRaynor01Objective05");
    gv_objectiveDestroyDominionBase3 = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 3);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSetupSpaceStationCreate_Init () {
    gt_ObjectiveSetupSpaceStationCreate = TriggerCreate("gt_ObjectiveSetupSpaceStationCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Setup Space Station Ping
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSetupSpaceStationPing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(7), 8.0, false);
    libSwaC_gf_CreateObjectivePing(true, RegionGetCenter(RegionFromId(7)), StringExternal("Param/Value/B5AED966"));
    gv_setupSpaceStationPing = PingLastCreated();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSetupSpaceStationPing_Init () {
    gt_ObjectiveSetupSpaceStationPing = TriggerCreate("gt_ObjectiveSetupSpaceStationPing_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Setup Space Station Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSetupSpaceStationComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveSetupSpaceStationCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZSaveRaynor01Objective05", libSwaC_ge_MissionObjectiveState_Completed);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSetupSpaceStationComplete_Init () {
    gt_ObjectiveSetupSpaceStationComplete = TriggerCreate("gt_ObjectiveSetupSpaceStationComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Mercenary Space Station Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyMercenarySpaceStationCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZSaveRaynor01Objective01");
    gv_objectiveDestroyDominionBase = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyMercenarySpaceStationCreate_Init () {
    gt_ObjectiveDestroyMercenarySpaceStationCreate = TriggerCreate("gt_ObjectiveDestroyMercenarySpaceStationCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Mercenary Space Station Discovered Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyMercenarySpaceStationDiscoveredQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveDestroyMercenarySpaceStationCreate, true, false);
    TriggerQueueEnter();
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_enemyBase), 20.0), 12.0, false);
    libNtve_gf_AttachModelToUnit(gv_enemyBase, "BriefingUnitSelectLargeRed", "Ref_Head");
    gv_mercenaryBaseBriefingModel = libNtve_gf_ActorLastCreated();
    libSwaC_gf_CreateObjectivePing(true, UnitGetPosition(gv_enemyBase), StringExternal("Param/Value/EE247FF4"));
    gv_mercenaryBasePing = PingLastCreated();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyMercenarySpaceStationDiscoveredQ_Init () {
    gt_ObjectiveDestroyMercenarySpaceStationDiscoveredQ = TriggerCreate("gt_ObjectiveDestroyMercenarySpaceStationDiscoveredQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Mercenary Space Station Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyMercenarySpaceStationComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyMercenarySpaceStationCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZSaveRaynor01Objective01", libSwaC_ge_MissionObjectiveState_Completed);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyMercenarySpaceStationComplete_Init () {
    gt_ObjectiveDestroyMercenarySpaceStationComplete = TriggerCreate("gt_ObjectiveDestroyMercenarySpaceStationComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Hyperion Must Survive Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveHyperionMustSurviveCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZSaveRaynor01Objective04");
    gv_objectiveDestroyDominionBase2 = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 1);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveHyperionMustSurviveCreate_Init () {
    gt_ObjectiveHyperionMustSurviveCreate = TriggerCreate("gt_ObjectiveHyperionMustSurviveCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Hyperion Must Survive Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveHyperionMustSurviveComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveHyperionMustSurviveCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZSaveRaynor01Objective04", libSwaC_ge_MissionObjectiveState_Completed);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveHyperionMustSurviveComplete_Init () {
    gt_ObjectiveHyperionMustSurviveComplete = TriggerCreate("gt_ObjectiveHyperionMustSurviveComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Hyperion Must Survive Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveHyperionMustSurviveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveHyperionMustSurviveCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZSaveRaynor01Objective04", libSwaC_ge_MissionObjectiveState_Failed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveHyperionMustSurviveFailed_Init () {
    gt_ObjectiveHyperionMustSurviveFailed = TriggerCreate("gt_ObjectiveHyperionMustSurviveFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Mineral Fields Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveMineralFieldsCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZSaveRaynor01Objective03");
    gv_objectiveMineralFields = ObjectiveLastCreated();
    libSwaC_gf_SetMissionObjectiveProgress2("ZSaveRaynor01Objective03", gv_objectiveMineralFieldsCount, true, null, true);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveMineralFieldsCreate_Init () {
    gt_ObjectiveMineralFieldsCreate = TriggerCreate("gt_ObjectiveMineralFieldsCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Mineral Fields Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveMineralFieldsUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_objectiveMineralFieldsCount += 1;
    libSwaC_gf_SetMissionObjectiveProgress2("ZSaveRaynor01Objective03", gv_objectiveMineralFieldsCount, true, null, true);
    if ((gv_objectiveMineralFieldsCount == libSwaC_gf_MissionObjectiveItemCount("ZSaveRaynor01Objective03"))) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_TransmissionMineralFieldUpdateQ, false);
        TriggerExecute(gt_ObjectiveMineralFieldsComplete, true, false);
    }
    else {
        TriggerExecute(gt_TransmissionMineralFieldUpdateQ, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveMineralFieldsUpdate_Init () {
    gt_ObjectiveMineralFieldsUpdate = TriggerCreate("gt_ObjectiveMineralFieldsUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Mineral Fields Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveMineralFieldsComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveMineralFieldsCreate, true, false);
    libSwaC_gf_SetMissionObjectiveProgress2("ZSaveRaynor01Objective03", gv_objectiveMineralFieldsCount, true, null, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZSaveRaynor01Objective03", libSwaC_ge_MissionObjectiveState_Completed);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_TransmissionMineralFieldCompleteQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveMineralFieldsComplete_Init () {
    gt_ObjectiveMineralFieldsComplete = TriggerCreate("gt_ObjectiveMineralFieldsComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Mineral Field Update Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionMineralFieldUpdateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto00556991_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    auto00556991_val = gv_objectiveMineralFieldsCount;
    if (auto00556991_val == 1) {
        gf_WaitforCriticalTransmissionFinished();
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space01|Line00076", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto00556991_val == 2) {
        gf_WaitforCriticalTransmissionFinished();
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space01|Line00079", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto00556991_val == 3) {
        gf_WaitforCriticalTransmissionFinished();
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space01|Line00078", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionMineralFieldUpdateQ_Init () {
    gt_TransmissionMineralFieldUpdateQ = TriggerCreate("gt_TransmissionMineralFieldUpdateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Mineral Field Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionMineralFieldCompleteQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    gf_WaitforCriticalTransmissionFinished();
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space01|Line00082", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionMineralFieldCompleteQ_Init () {
    gt_TransmissionMineralFieldCompleteQ = TriggerCreate("gt_TransmissionMineralFieldCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Pirate Capital Ship Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePirateCapitalShipCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZSaveRaynor01Objective02");
    gv_objectivePirateCapitalShip = ObjectiveLastCreated();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePirateCapitalShipCreate_Init () {
    gt_ObjectivePirateCapitalShipCreate = TriggerCreate("gt_ObjectivePirateCapitalShipCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Pirate Capital Ship Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePirateCapitalShipComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectivePirateCapitalShipCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZSaveRaynor01Objective02", libSwaC_ge_MissionObjectiveState_Completed);
    libSwaC_gf_SetMissionObjectiveProgress2("ZSaveRaynor01Objective02", 1, false, null, false);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePirateCapitalShipComplete_Init () {
    gt_ObjectivePirateCapitalShipComplete = TriggerCreate("gt_ObjectivePirateCapitalShipComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto8675ABEA_g;
    int auto8675ABEA_u;
    unit auto8675ABEA_var;
    unitgroup auto4E927F9A_g;
    int auto4E927F9A_u;
    unit auto4E927F9A_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    libSwaC_gf_EnableDisableZerglingRespawn(false);
    auto8675ABEA_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto8675ABEA_u = UnitGroupCount(auto8675ABEA_g, c_unitCountAll);
    for (;; auto8675ABEA_u -= 1) {
        auto8675ABEA_var = UnitGroupUnitFromEnd(auto8675ABEA_g, auto8675ABEA_u);
        if (auto8675ABEA_var == null) { break; }
        if ((libNtve_gf_UnitIsPaused(auto8675ABEA_var) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, auto8675ABEA_var);
            libNtve_gf_PauseUnit(auto8675ABEA_var, true);
        }

    }
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    UnitGroupRemoveUnitGroup(gv_cinematicHiddenUnits, UnitGroup(null, c_playerAny, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupRemoveUnitGroup(gv_cinematicHiddenUnits, UnitGroup(null, c_playerAny, RegionFromId(34), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    auto4E927F9A_g = gv_cinematicHiddenUnits;
    auto4E927F9A_u = UnitGroupCount(auto4E927F9A_g, c_unitCountAll);
    for (;; auto4E927F9A_u -= 1) {
        auto4E927F9A_var = UnitGroupUnitFromEnd(auto4E927F9A_g, auto4E927F9A_u);
        if (auto4E927F9A_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto4E927F9A_var, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(514), 0.0, -1, 10.0, true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, false);
    libNtve_gf_UnitCreateFacingPoint(1, "SJHyperion", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(30), PointFromId(29));
    gv_cineHyperion = UnitLastCreated();
    UnitSetPropertyFixed(gv_cineHyperion, c_unitPropMovementSpeed, 1.0);
    UnitGroupAdd(gv_cinematicTempUnits, gv_cineHyperion);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    libNtve_gf_ShowHideUnit(gv_enemyBase, true);
    libSwaC_gf_DisplayTimestamp("zBriefing_Space01", true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
    TriggerExecute(gt_IntroMusic, true, false);
    gv_introMusicStarted = true;
    gv_cinematicCompleted = false;
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    libNtve_gf_StoryMode(PlayerGroupAll(), true);
    UISetWorldVisible(PlayerGroupAll(), false);
    CinematicFade(true, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    libSwaC_gf_CampaignPlayCutscene2("Cutscenes\\ZBriefingSpace01.SC2Cutscene", true, true);
    libNtve_gf_StoryMode(PlayerGroupAll(), false);
    UISetWorldVisible(PlayerGroupAll(), true);
    gv_introCutsceneCompleted = true;
    Wait(0.5, c_timeReal);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(29)), c_orderQueueReplace);
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicInTransmission);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Space01|Line00004", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_CreateUnitsAtPoint2(1, "SJGriffon", 0, gv_pLAYER_02_MIRA_HAN, PointFromId(64));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(156)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(743)), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsAtPoint2(1, "SJGriffon", 0, gv_pLAYER_02_MIRA_HAN, PointFromId(65));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(265)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "SJGriffon", 0, gv_pLAYER_02_MIRA_HAN, PointFromId(269));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(278)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(730)), c_orderQueueAddToEnd);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(103), 0.0, -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Space01|Line00013", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space01|Line00068", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_CreateUnitsAtPoint2(1, "SJGriffon", 0, gv_pLAYER_03_PIRATE, PointFromId(319));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(598)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "SJGriffon", 0, gv_pLAYER_03_PIRATE, PointFromId(726));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(729)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(732)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(738)), c_orderQueueAddToEnd);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(192), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(99), (SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Space01|Line00069", true), c_soundIndexAny))), -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space01|Line00069", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.0;
        libNtve_gf_StoryMode(PlayerGroupAll(), false);
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;
    int lv_indexFrame;

    // Automatic Variable Declarations
    unitgroup autoD3597B5C_g;
    int autoD3597B5C_u;
    unit autoD3597B5C_var;
    unitgroup autoBE9504F4_g;
    int autoBE9504F4_u;
    unit autoBE9504F4_var;
    unitgroup auto8F3181E2_g;
    int auto8F3181E2_u;
    unit auto8F3181E2_var;

    // Variable Initialization
    lv_indexFrame = c_syncFrameTypeMenuBar;

    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
    if ((gv_cinematicCompleted == false) && (gv_introMusicStarted == true) && (gv_introMusicCompleted == false)) {
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    }

    autoD3597B5C_g = gv_cinematicTempUnits;
    autoD3597B5C_u = UnitGroupCount(autoD3597B5C_g, c_unitCountAll);
    for (;; autoD3597B5C_u -= 1) {
        autoD3597B5C_var = UnitGroupUnitFromEnd(autoD3597B5C_g, autoD3597B5C_u);
        if (autoD3597B5C_var == null) { break; }
        UnitRemove(autoD3597B5C_var);
    }
    autoBE9504F4_g = gv_cinematicHiddenUnits;
    autoBE9504F4_u = UnitGroupCount(autoBE9504F4_g, c_unitCountAll);
    for (;; autoBE9504F4_u -= 1) {
        autoBE9504F4_var = UnitGroupUnitFromEnd(autoBE9504F4_g, autoBE9504F4_u);
        if (autoBE9504F4_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoBE9504F4_var, true);
    }
    auto8F3181E2_g = gv_cinematicPausedUnits;
    auto8F3181E2_u = UnitGroupCount(auto8F3181E2_g, c_unitCountAll);
    for (;; auto8F3181E2_u -= 1) {
        auto8F3181E2_var = UnitGroupUnitFromEnd(auto8F3181E2_g, auto8F3181E2_u);
        if (auto8F3181E2_var == null) { break; }
        libNtve_gf_PauseUnit(auto8F3181E2_var, false);
    }
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    EnvironmentShow(c_environmentAll, true);
    libSwaC_gf_EnableDisableZerglingRespawn(true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10.0, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    RegionPlayableMapSet(RegionFromId(13));
    TriggerExecute(gt_StartAI, true, false);
    Wait(0.5, c_timeReal);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), (CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)), CameraInfoGetTarget(CameraInfoFromId(11)), lv_fadeDuration);
    UnitRemove(gv_hyperion);
    gv_hyperion = UnitFromId(124);
    libSwaC_gf_SetHeroPanelUnit(1, gv_hyperion);
    UnitAbilityShow(gv_hyperion, "SJHyperionBlink", false);
    UnitAbilityShow(gv_hyperion, "SJHyperionResearchBlink", false);
    UnitAbilityShow(gv_hyperion, "SJHyperionRegen", false);
    UnitAbilityShow(gv_hyperion, "SJHyperionResearchRegen", false);
    UnitAbilityShow(gv_hyperion, "SJHyperionFighters", false);
    UnitAbilityShow(gv_hyperion, "SJHyperionFightersRecall", false);
    UnitAbilityShow(gv_hyperion, "SJHyperionResearchFighters", false);
    UnitAbilityShow(gv_hyperion, "SJHyperionYamato", false);
    UnitAbilityShow(gv_hyperion, "SJHyperionResearchYamato", false);
    UnitAbilityShow(gv_hyperion, "SJHyperionLightningStorm", false);
    UnitAbilityShow(gv_hyperion, "SJHyperionResearchLightningStorm", false);
    UnitAbilityShow(gv_hyperion, "SJHyperionResearchShipUpgrade", false);
    UnitSetPosition(gv_hyperion, PointFromId(138), false);
    UnitSetFacing(gv_hyperion, PointGetFacing(PointFromId(138)), 0.0);
    UnitIssueOrder(gv_hyperion, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitSelect(gv_hyperion, gv_pLAYER_01_USER, true);
    UnitControlGroupAddUnit(gv_pLAYER_01_USER, 1, gv_hyperion);
    gf_CreateHyperionMinimapIcon();
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gv_inCinematic = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Fade Bookmark
//--------------------------------------------------------------------------------------------------
bool gt_IntroFadeBookmark_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    SoundPlay(SoundLink("TVReports_TVTHorner04_EndStatic", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeReal);
    SoundStop(SoundLastPlayed(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroFadeBookmark_Init () {
    gt_IntroFadeBookmark = TriggerCreate("gt_IntroFadeBookmark_Func");
    TriggerAddEventCutsceneBookmarkFired(gt_IntroFadeBookmark, c_cutsceneNone, "IntroFade");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Music
//--------------------------------------------------------------------------------------------------
bool gt_IntroMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_soundtrack = "ZSpace01MusicCutscene03_MissionBriefing";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    gv_introMusicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroMusic_Init () {
    gt_IntroMusic = TriggerCreate("gt_IntroMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Q
//--------------------------------------------------------------------------------------------------
bool gt_MidQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_MidSetup, true, true);
    TriggerExecute(gt_MidCinematic, true, true);
    TriggerExecute(gt_MidCinematicEnd, true, true);
    TriggerExecute(gt_MidCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidQ_Init () {
    gt_MidQ = TriggerCreate("gt_MidQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto218D7BFF_g;
    int auto218D7BFF_u;
    unit auto218D7BFF_var;
    unitgroup autoF103DBD1_g;
    int autoF103DBD1_u;
    unit autoF103DBD1_var;
    unitgroup auto1BC94FE1_g;
    int auto1BC94FE1_u;
    unit auto1BC94FE1_var;
    unitgroup autoC68C533D_g;
    int autoC68C533D_u;
    unit autoC68C533D_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    CameraSave(gv_pLAYER_01_USER);
    libNtve_gf_StoreUnitSelection(gv_pLAYER_01_USER, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    RegionPlayableMapSet(RegionFromId(32));
    auto218D7BFF_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto218D7BFF_u = UnitGroupCount(auto218D7BFF_g, c_unitCountAll);
    for (;; auto218D7BFF_u -= 1) {
        auto218D7BFF_var = UnitGroupUnitFromEnd(auto218D7BFF_g, auto218D7BFF_u);
        if (auto218D7BFF_var == null) { break; }
        if ((libNtve_gf_UnitIsPaused(auto218D7BFF_var) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, auto218D7BFF_var);
            libNtve_gf_PauseUnit(auto218D7BFF_var, true);
        }

    }
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    autoF103DBD1_g = UnitGroup(null, gv_pLAYER_02_MIRA_HAN, RegionFromId(13), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF103DBD1_u = UnitGroupCount(autoF103DBD1_g, c_unitCountAll);
    for (;; autoF103DBD1_u -= 1) {
        autoF103DBD1_var = UnitGroupUnitFromEnd(autoF103DBD1_g, autoF103DBD1_u);
        if (autoF103DBD1_var == null) { break; }
        UnitRemove(autoF103DBD1_var);
    }
    auto1BC94FE1_g = UnitGroup(null, gv_pLAYER_03_PIRATE, RegionFromId(13), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1BC94FE1_u = UnitGroupCount(auto1BC94FE1_g, c_unitCountAll);
    for (;; auto1BC94FE1_u -= 1) {
        auto1BC94FE1_var = UnitGroupUnitFromEnd(auto1BC94FE1_g, auto1BC94FE1_u);
        if (auto1BC94FE1_var == null) { break; }
        UnitRemove(auto1BC94FE1_var);
    }
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    autoC68C533D_g = gv_cinematicHiddenUnits;
    autoC68C533D_u = UnitGroupCount(autoC68C533D_g, c_unitCountAll);
    for (;; autoC68C533D_u -= 1) {
        autoC68C533D_var = UnitGroupUnitFromEnd(autoC68C533D_g, autoC68C533D_u);
        if (autoC68C533D_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoC68C533D_var, false);
    }
    UnitSetPosition(gv_playerBase, PointFromId(1), false);
    UnitSetOwner(gv_playerBase, gv_pLAYER_05_RAYNOR, true);
    libNtve_gf_ShowHideUnit(gv_playerBase, true);
    libNtve_gf_MakeUnitInvulnerable(gv_hyperion, true);
    libNtve_gf_PauseUnit(gv_playerBase, false);
    gf_RestoreHyperionToFull(true);
    ActorSend(ActorFromDoodad(DoodadFromId(275)), "Destroy Immediate");
    ActorSend(ActorFromDoodad(DoodadFromId(589)), "Destroy Immediate");
    ActorSend(ActorFromDoodad(DoodadFromId(590)), "Destroy Immediate");
    ActorSend(ActorFromDoodad(DoodadFromId(591)), "Destroy Immediate");
    ActorSend(ActorFromDoodad(DoodadFromId(649)), "Destroy Immediate");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidSetup_Init () {
    gt_MidSetup = TriggerCreate("gt_MidSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_midValerianFighters;
    unitgroup lv_midPirateFighters;
    unitgroup lv_midPirateMines;

    // Automatic Variable Declarations
    unitgroup auto11997C32_g;
    int auto11997C32_u;
    unit auto11997C32_var;
    unitgroup autoD66EE6EE_g;
    int autoD66EE6EE_u;
    unit autoD66EE6EE_var;
    unitgroup auto99890948_g;
    int auto99890948_u;
    unit auto99890948_var;

    // Variable Initialization
    lv_midValerianFighters = UnitGroupEmpty();
    lv_midPirateFighters = UnitGroupEmpty();
    lv_midPirateMines = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(517), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(62), (SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Space01|Line00010", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Space01|Line00011", true), c_soundIndexAny)) + 1), -1, 10.0, true);
    libNtve_gf_UnitCreateFacingPoint(1, "SJHyperion", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(516), PointFromId(63));
    gv_cineHyperion = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, gv_cineHyperion);
    UnitSetPropertyFixed(gv_cineHyperion, c_unitPropMovementSpeed, 1.0);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(63)), c_orderQueueReplace);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_playerBase), c_animNameDefault, "Birth", c_animFlagNonLooping, c_animTimeDefault);
    libNtve_gf_ShowHideUnit(gv_playerBase, true);
    TriggerExecute(gt_MidMusic, true, false);
    gv_cinematicCompleted = false;
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicInTransmission);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 100.0, 0.1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space01|Line00010", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gf_SendAttackWaveSingle(gv_pLAYER_05_RAYNOR, "SJWraith", "SJWraith", 3);
    lv_midValerianFighters = UnitGroup("SJWraith", gv_pLAYER_05_RAYNOR, RegionCircle(UnitGetPosition(gv_playerBase), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupAddUnitGroup(gv_cinematicTempUnits, lv_midValerianFighters);
    auto11997C32_g = lv_midValerianFighters;
    auto11997C32_u = UnitGroupCount(auto11997C32_g, c_unitCountAll);
    for (;; auto11997C32_u -= 1) {
        auto11997C32_var = UnitGroupUnitFromEnd(auto11997C32_g, auto11997C32_u);
        if (auto11997C32_var == null) { break; }
        libNtve_gf_ChangeUnitDamage(auto11997C32_var, libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_Minimal);
    }
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space01|Line00011", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space01|Line00012", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space01|Line00013", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 6.0);
    autoD66EE6EE_g = lv_midValerianFighters;
    autoD66EE6EE_u = UnitGroupCount(autoD66EE6EE_g, c_unitCountAll);
    for (;; autoD66EE6EE_u -= 1) {
        autoD66EE6EE_var = UnitGroupUnitFromEnd(autoD66EE6EE_g, autoD66EE6EE_u);
        if (autoD66EE6EE_var == null) { break; }
        UnitRemove(autoD66EE6EE_var);
    }
    gf_SendAttackWaveSingle(gv_pLAYER_05_RAYNOR, "SJWraith", "SJWraith", 3);
    lv_midValerianFighters = UnitGroup("SJWraith", gv_pLAYER_05_RAYNOR, RegionCircle(UnitGetPosition(gv_playerBase), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupAddUnitGroup(gv_cinematicTempUnits, lv_midValerianFighters);
    libNtve_gf_CreateUnitsAtPoint2(1, "SJCloakedMine", 0, gv_pLAYER_02_MIRA_HAN, PointFromId(601));
    UnitGroupAdd(lv_midPirateMines, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "SJCloakedMine", 0, gv_pLAYER_02_MIRA_HAN, PointFromId(617));
    UnitGroupAdd(lv_midPirateMines, UnitLastCreated());
    UnitGroupAddUnitGroup(gv_cinematicTempUnits, lv_midPirateMines);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(222), 6.0, -1, 10.0, true);
    Wait(5.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(745), 4.0, -1, 10.0, true);
    libNtve_gf_CreateUnitsAtPoint2(1, "SJGriffon", 0, gv_pLAYER_02_MIRA_HAN, PointFromId(144));
    UnitGroupAdd(lv_midPirateFighters, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(873)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "SJGriffon", 0, gv_pLAYER_02_MIRA_HAN, PointFromId(166));
    UnitGroupAdd(lv_midPirateFighters, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(874)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "SJGriffon", 0, gv_pLAYER_02_MIRA_HAN, PointFromId(196));
    UnitGroupAdd(lv_midPirateFighters, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(875)), c_orderQueueReplace);
    UnitGroupAddUnitGroup(gv_cinematicTempUnits, lv_midPirateFighters);
    auto99890948_g = lv_midPirateFighters;
    auto99890948_u = UnitGroupCount(auto99890948_g, c_unitCountAll);
    for (;; auto99890948_u -= 1) {
        auto99890948_var = UnitGroupUnitFromEnd(auto99890948_g, auto99890948_u);
        if (auto99890948_var == null) { break; }
        libNtve_gf_ChangeUnitDamage(auto99890948_var, libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_Minimal);
    }
    Wait(1.0, c_timeGame);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space01|Line00114", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_AttachModelToUnit(UnitGroupUnit(lv_midPirateMines, 1), "BriefingUnitSelectRedSmall", "Ref_Origin");
    Wait(0.4, c_timeGame);
    libNtve_gf_AttachModelToUnit(UnitGroupUnit(lv_midPirateMines, 2), "BriefingUnitSelectRedSmall", "Ref_Origin");
    TransmissionWait(TransmissionLastSent(), 1.0);
    UnitKill(UnitGroupUnit(lv_midPirateFighters, 1));
    UnitIssueOrder(UnitGroupUnit(lv_midPirateMines, 1), OrderTargetingPoint(AbilityCommand("SJCloakedMineAttack", 0), UnitGetPosition(UnitGroupUnit(lv_midValerianFighters, 1))), c_orderQueueReplace);
    UnitIssueOrder(UnitGroupUnit(lv_midPirateMines, 2), OrderTargetingPoint(AbilityCommand("SJCloakedMineAttack", 0), UnitGetPosition(UnitGroupUnit(lv_midValerianFighters, 2))), c_orderQueueReplace);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space01|Line00106", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 2.0);
    UnitKill(UnitGroupUnit(lv_midValerianFighters, 1));
    TransmissionWait(TransmissionLastSent(), 0.0);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematic_Init () {
    gt_MidCinematic = TriggerCreate("gt_MidCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematicEnd_Init () {
    gt_MidCinematicEnd = TriggerCreate("gt_MidCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto50C8D86A_g;
    int auto50C8D86A_u;
    unit auto50C8D86A_var;
    unitgroup auto34AA04DF_g;
    int auto34AA04DF_u;
    unit auto34AA04DF_var;
    unitgroup auto03EAF9EA_g;
    int auto03EAF9EA_u;
    unit auto03EAF9EA_var;
    unitgroup auto245741CD_g;
    int auto245741CD_u;
    unit auto245741CD_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UIClearMessages(PlayerGroupAll(), c_messageAreaCinematic);
    libNtve_gf_KillModel(gv_midActor);
    if ((gv_cinematicCompleted == false) && (gv_midMusicCompleted == false)) {
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    }

    auto50C8D86A_g = gv_cinematicTempUnits;
    auto50C8D86A_u = UnitGroupCount(auto50C8D86A_g, c_unitCountAll);
    for (;; auto50C8D86A_u -= 1) {
        auto50C8D86A_var = UnitGroupUnitFromEnd(auto50C8D86A_g, auto50C8D86A_u);
        if (auto50C8D86A_var == null) { break; }
        UnitRemove(auto50C8D86A_var);
    }
    auto34AA04DF_g = gv_cinematicHiddenUnits;
    auto34AA04DF_u = UnitGroupCount(auto34AA04DF_g, c_unitCountAll);
    for (;; auto34AA04DF_u -= 1) {
        auto34AA04DF_var = UnitGroupUnitFromEnd(auto34AA04DF_g, auto34AA04DF_u);
        if (auto34AA04DF_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto34AA04DF_var, true);
    }
    auto03EAF9EA_g = gv_firstBaseEdgeUnitsHidden;
    auto03EAF9EA_u = UnitGroupCount(auto03EAF9EA_g, c_unitCountAll);
    for (;; auto03EAF9EA_u -= 1) {
        auto03EAF9EA_var = UnitGroupUnitFromEnd(auto03EAF9EA_g, auto03EAF9EA_u);
        if (auto03EAF9EA_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto03EAF9EA_var, true);
        libNtve_gf_PauseUnit(auto03EAF9EA_var, false);
    }
    auto245741CD_g = gv_cinematicPausedUnits;
    auto245741CD_u = UnitGroupCount(auto245741CD_g, c_unitCountAll);
    for (;; auto245741CD_u -= 1) {
        auto245741CD_var = UnitGroupUnitFromEnd(auto245741CD_g, auto245741CD_u);
        if (auto245741CD_var == null) { break; }
        libNtve_gf_PauseUnit(auto245741CD_var, false);
    }
    UnitSetPosition(gv_playerBase, PointFromId(1), false);
    UnitSetOwner(gv_playerBase, gv_pLAYER_05_RAYNOR, true);
    libNtve_gf_ShowHideUnit(gv_playerBase, true);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    libNtve_gf_MakeUnitInvulnerable(gv_hyperion, false);
    UnitSetPosition(gv_hyperion, PointFromId(80), false);
    UnitSetFacing(gv_hyperion, PointGetFacing(PointFromId(80)), 0.0);
    UnitIssueOrder(gv_hyperion, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    libNtve_gf_RestoreUnitSelection(gv_pLAYER_01_USER);
    libSwaC_gf_ClearAnimationwithblendtime(c_animNameDefault, gv_playerBase, 0.0);
    CameraRestore(gv_pLAYER_01_USER, 0.0, -1, 10.0);
    CameraPan(gv_pLAYER_01_USER, UnitGetPosition(gv_hyperion), 0.0, -1, 10.0, false);
    ObjectiveShow(gv_objectiveDestroyDominionBase3, PlayerGroupAll(), false);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gv_inCinematic = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCleanup_Init () {
    gt_MidCleanup = TriggerCreate("gt_MidCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Music
//--------------------------------------------------------------------------------------------------
bool gt_MidMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_soundtrack = "ZSpace01MusicCutscene08_FirstBase";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    gv_midMusicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidMusic_Init () {
    gt_MidMusic = TriggerCreate("gt_MidMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto15DCC80A_g;
    int auto15DCC80A_u;
    unit auto15DCC80A_var;
    unitgroup autoEEBD6309_g;
    int autoEEBD6309_u;
    unit autoEEBD6309_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    libSwaC_gf_EnableDisableZerglingRespawn(false);
    UnitClearSelection(gv_pLAYER_01_USER);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    auto15DCC80A_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto15DCC80A_u = UnitGroupCount(auto15DCC80A_g, c_unitCountAll);
    for (;; auto15DCC80A_u -= 1) {
        auto15DCC80A_var = UnitGroupUnitFromEnd(auto15DCC80A_g, auto15DCC80A_u);
        if (auto15DCC80A_var == null) { break; }
        if ((libNtve_gf_UnitIsPaused(auto15DCC80A_var) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, auto15DCC80A_var);
            libNtve_gf_PauseUnit(auto15DCC80A_var, true);
        }

    }
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    autoEEBD6309_g = gv_cinematicHiddenUnits;
    autoEEBD6309_u = UnitGroupCount(autoEEBD6309_g, c_unitCountAll);
    for (;; autoEEBD6309_u -= 1) {
        autoEEBD6309_var = UnitGroupUnitFromEnd(autoEEBD6309_g, autoEEBD6309_u);
        if (autoEEBD6309_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoEEBD6309_var, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    libNtve_gf_StoryMode(PlayerGroupAll(), true);
    EnvironmentShow(c_environmentAll, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZSpace01MusicCutscene19_MiraSurrenders", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    CinematicFade(true, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    libSwaC_gf_CampaignPlayCutscene("Cutscenes\\ZMissionSpace01Victory.SC2Cutscene", Point(30.0, 100.0), false, true);
    WaitForCutsceneToEnd(CutsceneLastCreated());
    libNtve_gf_StoryMode(PlayerGroupAll(), false);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_StoryMode(PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Fade Bookmark
//--------------------------------------------------------------------------------------------------
bool gt_VictoryFadeBookmark_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryFadeBookmark_Init () {
    gt_VictoryFadeBookmark = TriggerCreate("gt_VictoryFadeBookmark_Func");
    TriggerAddEventCutsceneBookmarkFired(gt_VictoryFadeBookmark, c_cutsceneNone, "VictoryFade");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init02aPlayersAttackWaveData_Init();
    gt_Init03Units_Init();
    gt_Init04MusicSound_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_Debug_FirstBaseSetup_Init();
    gt_Debug_FullPower_Init();
    gt_Debug_Experience_Init();
    gt_StartGameQ_Init();
    gt_StartingTransmissionQ_Init();
    gt_HyperionBlinkTutorialQ_Init();
    gt_HyperionBlinkUsedQ_Init();
    gt_EncounterShipStop_Init();
    gt_HyperionIsClose1_Init();
    gt_HyperionIsClose2_Init();
    gt_AoeEncounterQ_Init();
    gt_LaunchFighterButtonClicked_Init();
    gt_AoeEncounterFighterInCombat_Init();
    gt_YamatoEncounterQ_Init();
    gt_LaunchYamatoButtonClicked_Init();
    gt_YamatoEncounterTowerInCombat_Init();
    gt_FirstBaseCaptured_Init();
    gt_MineralFieldTutorialQ_Init();
    gt_MineralTutorialMineralKilled_Init();
    gt_MineralClusterEnterRegion_Init();
    gt_MineralClustersFoundQ_Init();
    gt_MineralClustersMinesHighlight_Init();
    gt_MineralClustersMinesUnhighlight_Init();
    gt_MineralClustersMapPings_Init();
    gt_SecondBaseCloseQ_Init();
    gt_SecondBaseDamaged_Init();
    gt_SecondBaseCaptured_Init();
    gt_SecondBaseAutosaveQ_Init();
    gt_TransmissionSecondBaseCapturedQ_Init();
    gt_ThirdBaseCaptured_Init();
    gt_ThirdBaseAutosaveQ_Init();
    gt_TransmissionThirdBaseCapturedQ_Init();
    gt_MiraTaunt1Q_Init();
    gt_MiraTaunt2Q_Init();
    gt_MiraTauntFightQ_Init();
    gt_MiraTauntFinalQ_Init();
    gt_MeteorFX_Init();
    gt_HyperionBlinkStart_Init();
    gt_HyperionBlinkEnd_Init();
    gt_LaunchHyperionFighters_Init();
    gt_HyperionFightersLeashingBehavior_Init();
    gt_HyperionFighterAcquireTarget_Init();
    gt_RecallHyperionFighters_Init();
    gt_HyperionFightersInCombat_Init();
    gt_HyperionFightersInCombatIndicatorDiminish_Init();
    gt_HyperionFightersHaveTargetAttacked_Init();
    gt_HyperionFightersHaveTargetIndicatorDiminish_Init();
    gt_HyperionFightersDies_Init();
    gt_HyperionFightersShareAggro_Init();
    gt_HyperionEnterCombat_Init();
    gt_HyperionInCombatIndicatorDiminish_Init();
    gt_HyperionBeingAttacked_Init();
    gt_HyperionBeingAttackedIndicatorDiminish_Init();
    gt_TransmissionHyperionLeveledUpQ_Init();
    gt_XPBarCreate_Init();
    gt_XPBarUpdate_Init();
    gt_MineralPickup_Init();
    gt_MineralPickupAchievementCheckFailsafe_Init();
    gt_RepairBotPickup_Init();
    gt_RepairBotTutorialQ_Init();
    gt_HyperionLifeTooLow_Init();
    gt_HyperionLowHPFlashing_Init();
    gt_TransmissionHyperionLifeLowWarning_Init();
    gt_HyperionMinimapIcon_Init();
    gt_CenterOnHyperion_Init();
    gt_SpaceMineAttack_Init();
    gt_PirateCapitalShipDiscoveredQ_Init();
    gt_PirateCapitalShipEngaged_Init();
    gt_PirateCapitalShipController_Init();
    gt_PirateCapitalShipReset_Init();
    gt_PirateCapitalShipEFieldHitQ_Init();
    gt_PirateCapitalShipDestroyedQ_Init();
    gt_MercSpaceStationTakesDamage_Init();
    gt_MercSpaceStationBossBar_Init();
    gt_MercSpaceStationThrowingMines_Init();
    gt_BattlecruiserLogic_Init();
    gt_BattlecruiserDies_Init();
    gt_BattlecruiserTrained_Init();
    gt_BattlecruiserTakesDamage_Init();
    gt_TipMissionHelpQ_Init();
    gt_StartAI_Init();
    gt_AttackWavesPlayer_Init();
    gt_AttackWavesEnemy_Init();
    gt_AIGiveMinerals_Init();
    gt_AIGiveGas_Init();
    gt_AchievementCollectAllMinerals_Init();
    gt_AchievementHyperionHitbyMagMineNH_Init();
    gt_AchievementMaxLevelBy11Minutes_Init();
    gt_AchievementTimedRunH_Init();
    gt_StatHyperionDamageTaken_Init();
    gt_StatYamatoKills_Init();
    gt_DefeatPrimaryObjectiveFailed_Init();
    gt_DefeatBaseDestroyed_Init();
    gt_VictoryMainObjectiveCompleted_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_ObjectiveSetupSpaceStationCreate_Init();
    gt_ObjectiveSetupSpaceStationPing_Init();
    gt_ObjectiveSetupSpaceStationComplete_Init();
    gt_ObjectiveDestroyMercenarySpaceStationCreate_Init();
    gt_ObjectiveDestroyMercenarySpaceStationDiscoveredQ_Init();
    gt_ObjectiveDestroyMercenarySpaceStationComplete_Init();
    gt_ObjectiveHyperionMustSurviveCreate_Init();
    gt_ObjectiveHyperionMustSurviveComplete_Init();
    gt_ObjectiveHyperionMustSurviveFailed_Init();
    gt_ObjectiveMineralFieldsCreate_Init();
    gt_ObjectiveMineralFieldsUpdate_Init();
    gt_ObjectiveMineralFieldsComplete_Init();
    gt_TransmissionMineralFieldUpdateQ_Init();
    gt_TransmissionMineralFieldCompleteQ_Init();
    gt_ObjectivePirateCapitalShipCreate_Init();
    gt_ObjectivePirateCapitalShipComplete_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_IntroFadeBookmark_Init();
    gt_IntroMusic_Init();
    gt_MidQ_Init();
    gt_MidSetup_Init();
    gt_MidCinematic_Init();
    gt_MidCinematicEnd_Init();
    gt_MidCleanup_Init();
    gt_MidMusic_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
    gt_VictoryFadeBookmark_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
