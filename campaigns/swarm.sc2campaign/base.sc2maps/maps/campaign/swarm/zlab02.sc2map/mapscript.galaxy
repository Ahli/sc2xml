//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Back in the Saddle
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"
include "TriggerLibs/SwarmCampaignLib"
include "TriggerLibs/SwarmCampaignDataHelperLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libHots_InitLib();
    libSwaC_InitLib();
    libSCDH_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_DOMINION = 2;
const int gv_pLAYER_02_DOMINION2 = 3;
const int gv_pLAYER_02_DOMINION22 = 4;
const int gv_pLAYER_02_DOMINION222 = 5;
const int gv_pLAYER_02_DOMINION2222 = 6;
const int gv_pLAYER_02_DOMINION22222 = 7;
const fixed gv_heroHPThreshold = 0.4;
const int gv_button1stPositionY = 250;
const int gv_button2ndPositionY = 250;
const int gv_button1stPositionX = -500;
const int gv_button2ndPositionX = 500;
const int gv_buttonSizeWidth = 341;
const int gv_buttonSizeHeight = 115;
const int gv_labelOffsetWidth = 0;
const int gv_labelOffsetHeight = 5;
const int gv_labelDimensionWidth = 300;
const int gv_labelDimensionHeight = 60;
const int gv_securityComputer = 20;
const int gv_securityComputer_ReleaseGas = 21;
const int gv_securityComputer_ReleaseZerg = 22;
const int gv_s3_TramBossBarID = 1;

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_ArchangelLocation_Center = 0;
const int ge_ArchangelLocation_Top = 1;
const int ge_ArchangelLocation_Bottom = 2;
const int ge_ArchangelSideSwitch_Left = 0;
const int ge_ArchangelSideSwitch_Right = 1;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
bool gv_gameOver;
bool gv_inCinematic;
playergroup gv_enemyPlayers;
int gv_interruptableTransmission;
unit gv_kerrigan;
unit gv_kerrigan2;
unit gv_kerrigan22;
unit gv_kerrigan222;
unit gv_kerrigan2222;
string gv_mapMusicTrack;
actor gv_hiddenDoodadRegion;
string gv_crushingGrip_OriginalTooltip;
string gv_kineticBlast_OriginalTooltip;
unitgroup gv_kerriganDoorsInRange;
unitgroup gv_kerriganShareVisionDoors;
bool gv_flashButtonCrushingGrip;
bool gv_flashButtonKineticBlast;
wave gv_raynorEscortWave;
fixed gv_kerriganHPBak;
bool gv_criticalTransmissionPlaying;
unitgroup gv_incappedHeroes;
bool gv_raynorMoving;
unit gv_raynorTarget;
actor gv_s1_HealingTerminalPingActor;
int gv_s1_ObjectivePing;
unit gv_s1_HealBotScientist;
int gv_s1_HealBotScientistTrans;
unitgroup gv_s1_SublevelDoorDominion;
unitgroup gv_s1_SublevelDoorZerg;
unitgroup gv_s1_SublevelDoorUmojan;
unitgroup gv_s1_BridgeCrushingGripDominion;
unitgroup gv_s1_BridgeCrushingGripUmojan;
revealer gv_s1_BridgeBattleRevealer;
int gv_s1_UseCrushingGripHereTag;
actor gv_s1_UseCrushingGripHerePingActor;
bool gv_s1_IdleChatterCheck;
bool gv_computerInUse;
bool gv_computerZergReleased;
int gv_buttonSecurityComputer_ReleaseGas;
int gv_buttonSecurityComputer_ReleaseZerg;
int gv_dialogSecurityComputer_ReleaseGas;
int gv_dialogSecurityComputer_ReleaseZerg;
revealer gv_revealerCageArea;
bool gv_securityComputerActive;
bool gv_securityComputerNoCamera;
bool gv_securityComputerInCameraMode;
bool gv_securityComputerFinished;
timer gv_s2_LockdownTimer;
int gv_s2_LockdownTimerWindow;
int gv_s2_LockdownDoorPing;
unitgroup gv_s2_TramStationDominion;
fixed gv_s2_RUBBLE_MAX_HEALTH;
fixed[4] gv_s2_Lockdown_Time;
revealer gv_securityComputerRoomRevealer;
fixed gv_s3_TRAM_CURRENT_LIFE;
fixed gv_s3_TRAM_MAX_LIFE;
fixed gv_s3_TRAM_ENGINE_MAX_LIFE;
int[7] gv_s3_TramPings;
unit[7] gv_s3_TramEngineUnits;
doodad[7] gv_s3_TramEngineDoodads;
revealer gv_s3_TramRevealer1;
revealer gv_s3_TramRevealer2;
timer gv_s3_TramTimer;
unitgroup gv_s3_TramAttackGroup;
unitgroup gv_s3_TramEngineGroup;
int gv_s3_TramEnginesDestroyed;
int gv_s4_ArchangelBossBar;
fixed gv_s4_Archangel_CURRENT_HEALTH;
fixed gv_s4_Archangel_MAX_HEALTH;
int gv_s4_ObjectivePing;
unitgroup gv_s4_UmojanArchangelGroup;
int gv_s4_ArchangelPing;
bool gv_s4_ArchangelFlying;
int gv_s4_ArchangelStage;
int gv_s4_ArchangelLocation;
int gv_s4_ArchangelSideSwitcher;
point[101] gv_s4_ArchangelBarrages;
int gv_s4_ArchangelBarrageCount;
unitgroup gv_s4_DominionAttackers;
bool gv_damageTakenFromArchangel;
fixed gv_damageTakenFromArchangelAmount;
int gv_raynorKills;
int gv_kineticBlastUses;
int gv_crushingGripUses;
int gv_doorsReachedWithinTimeLimit;
fixed gv_achievementLockDownTime;
fixed gv_lowestLockDownTime;
int gv_objectiveDestroyDominionBase;
int gv_objectiveDestroyDominionBase2;
int gv_objectiveDestroyDominionBase22;
int gv_objectiveDestroyDominionBase222;
int gv_objectiveDestroyDominionBase2222;
int gv_objectiveDestroyDominionBase22222;
int gv_objectiveDestroyDominionBase22223;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicTempUnits;
bool gv_cinematicCompleted;
unit gv_cINEMATIC_RAYNOR;
unit gv_cINEMATIC_KERRIGAN;
bool gv_introMusicCompleted;
actor gv_midRaynorActor;
actor gv_midKerriganActor;
bool gv_midElevatorMusicCompleted;
sound gv_midThorSound;
sound gv_midAlertSound;
bool gv_midBoardTramMusicCompleted;
unitgroup gv_midCinematic04UmojanMarines;
bool gv_midLeavingTramMusicCompleted;
sound gv_midTramSound;
unitgroup gv_midCinematicArchangelDominionGroup;
unitgroup gv_midCinematicArchangelUmojanGroup;
unit gv_midCinematicArchangel;
unitgroup gv_midCinematicMarineGroup;
sound gv_midArchangelSound;
unitgroup gv_victoryHiddenUnitGroup;
sound gv_victoryLoadSound;

void InitGlobals () {
    int init_i;

    gv_enemyPlayers = PlayerGroupEmpty();
    gv_interruptableTransmission = c_invalidTransmissionId;
    gv_kerrigan2222 = UnitFromId(1235);
    gv_crushingGrip_OriginalTooltip = "";
    gv_kineticBlast_OriginalTooltip = "";
    gv_kerriganDoorsInRange = UnitGroupEmpty();
    gv_kerriganShareVisionDoors = UnitGroupEmpty();
    gv_incappedHeroes = UnitGroupEmpty();
    gv_s1_ObjectivePing = c_invalidPingId;
    gv_s1_HealBotScientistTrans = c_invalidTransmissionId;
    gv_s1_SublevelDoorDominion = UnitGroupEmpty();
    gv_s1_SublevelDoorZerg = UnitGroupEmpty();
    gv_s1_SublevelDoorUmojan = UnitGroupEmpty();
    gv_s1_BridgeCrushingGripDominion = UnitGroupEmpty();
    gv_s1_BridgeCrushingGripUmojan = UnitGroupEmpty();
    gv_s1_UseCrushingGripHereTag = c_textTagNone;
    gv_buttonSecurityComputer_ReleaseGas = c_invalidDialogControlId;
    gv_buttonSecurityComputer_ReleaseZerg = c_invalidDialogControlId;
    gv_dialogSecurityComputer_ReleaseGas = c_invalidDialogId;
    gv_dialogSecurityComputer_ReleaseZerg = c_invalidDialogId;
    gv_s2_LockdownTimer = TimerCreate();
    gv_s2_LockdownTimerWindow = c_timerWindowNone;
    gv_s2_LockdownDoorPing = c_invalidPingId;
    gv_s2_TramStationDominion = UnitGroupEmpty();
    gv_s2_RUBBLE_MAX_HEALTH = 200.0;
    gv_s3_TRAM_MAX_LIFE = 1200.0;
    gv_s3_TRAM_ENGINE_MAX_LIFE = 200.0;
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_s3_TramPings[init_i] = c_invalidPingId;
    }
    gv_s3_TramTimer = TimerCreate();
    gv_s3_TramAttackGroup = UnitGroupEmpty();
    gv_s3_TramEngineGroup = UnitGroupEmpty();
    gv_s4_Archangel_MAX_HEALTH = 2500.0;
    gv_s4_ObjectivePing = c_invalidPingId;
    gv_s4_UmojanArchangelGroup = UnitGroupEmpty();
    gv_s4_ArchangelPing = c_invalidPingId;
    gv_s4_ArchangelStage = 1;
    gv_s4_ArchangelSideSwitcher = ge_ArchangelSideSwitch_Left;
    gv_s4_ArchangelBarrageCount = 10;
    gv_s4_DominionAttackers = UnitGroupEmpty();
    gv_achievementLockDownTime = 40.0;
    gv_lowestLockDownTime = 180.0;
    gv_objectiveDestroyDominionBase = c_invalidObjectiveId;
    gv_objectiveDestroyDominionBase2 = c_invalidObjectiveId;
    gv_objectiveDestroyDominionBase22 = c_invalidObjectiveId;
    gv_objectiveDestroyDominionBase222 = c_invalidObjectiveId;
    gv_objectiveDestroyDominionBase2222 = c_invalidObjectiveId;
    gv_objectiveDestroyDominionBase22222 = c_invalidObjectiveId;
    gv_objectiveDestroyDominionBase22223 = c_invalidObjectiveId;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_midCinematic04UmojanMarines = UnitGroupEmpty();
    gv_midCinematicArchangelDominionGroup = UnitGroupEmpty();
    gv_midCinematicArchangelUmojanGroup = UnitGroupEmpty();
    gv_midCinematicMarineGroup = UnitGroupEmpty();
    gv_victoryHiddenUnitGroup = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_MakeUnitNonInteractive (unit lp_chosenUnit);
void gf_RemoveIncapforCinematic (unit lp_chosenUnit);
void gf_ChangeButtonTooltip (string lp_ability, string lp_tooltipPath);
void gf_RestoreButtonTooltip (string lp_ability);
void gf_WaitifCriticalTransmissionisinprogress ();
void gf_ReviveRaynor ();
void gf_TramAttackAir (int lp_number, string lp_unitType, region lp_originRegion);
void gf_TramAttackAirDumb (int lp_number, string lp_unitType, region lp_originRegion);
void gf_TramAttackDropship (int lp_numberUnit01, int lp_numberUnit02, string lp_cargoUnitType01, string lp_cargoUnitType02, region lp_originRegion, point lp_dropPoint);
void gf_ShuffleBarrageLocations ();
void gf_ResetBarrageLocations ();
void gf_DoMissileBarrage (point lp_targetPoint);
void gf_MidCineArchangelDoMissileBarrage (point lp_targetPoint);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04MusicSound;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_DEBUGStartS02;
trigger gt_DEBUGStartS03;
trigger gt_DEBUGStartS04;
trigger gt_DEBUGStartArchangelBossFight;
trigger gt_StartGameStage1Q;
trigger gt_StartGameStage2Q;
trigger gt_StartGameStage3Q;
trigger gt_StartGameStage4Q;
trigger gt_LowHealthRaynor;
trigger gt_LowHealthKerrigan;
trigger gt_TransmissionRaynorIsHurtQ;
trigger gt_TransmissionKerriganIsHurt;
trigger gt_HeroIncapacitated;
trigger gt_RecoverIncapacitatedHeroes;
trigger gt_ButtonFlashCrushingGripOn;
trigger gt_ButtonFlashCrushingGripOff;
trigger gt_ButtonFlashKineticBlastOn;
trigger gt_ButtonFlashKineticBlastOff;
trigger gt_KerriganSeeThroughDoors;
trigger gt_HealerbotRecharging;
trigger gt_HealerbotReady;
trigger gt_HealerbotMouseoverTip;
trigger gt_TransmissionIntroQ;
trigger gt_TransmissionIdleChatterQ;
trigger gt_KerriganMovesTurnoffChatter;
trigger gt_FirstDominionEncounterQ;
trigger gt_FirstKineticBlastUsed;
trigger gt_FirstMarauderEngaged;
trigger gt_FirstMarauderKilled;
trigger gt_FirstDoorAttackQ;
trigger gt_DeadEnd01Q;
trigger gt_SeeSecondGateQ;
trigger gt_TransmissionUmojanMarines;
trigger gt_SecondGateAttack;
trigger gt_DeadEnd02Q;
trigger gt_ReachedRestorationTerminalQ;
trigger gt_PlayerEntersHealingTerminal01Q;
trigger gt_DeadEnd03Q;
trigger gt_TeachCrushingGripQ;
trigger gt_FirstCrushingGripUsed;
trigger gt_MakeBridgeBattleForcesTakeDamage;
trigger gt_BridgeDominionUnitDies;
trigger gt_DominionBridgeForcesDeadQ;
trigger gt_UmojanBridgeForcesDead;
trigger gt_UmojanFleeBridgeArea;
trigger gt_RemoveUmojanAtExtractionPoint01;
trigger gt_ReachedDropPodPlatformQ;
trigger gt_DropPodCrashing01;
trigger gt_DropPodLanding01;
trigger gt_WhereAreUmojansGoingQ;
trigger gt_DropPodLanding02;
trigger gt_DropPodCrashing02;
trigger gt_DropPodLanding03;
trigger gt_ReachedSublevelDoorAreaQ;
trigger gt_MoveUmojantoDefensivePositions;
trigger gt_ActivateSublevelDoorQ;
trigger gt_OpenSublevelDoorZergAttack;
trigger gt_TransmissionUmojanAtSublevelDoorQ;
trigger gt_ZergStreamfromSublevel;
trigger gt_ZergStreamfromSublevelHard;
trigger gt_DominionAttackGate03Hard;
trigger gt_TransmissionDominionAttackGate03Q;
trigger gt_SublevelDoorSecured;
trigger gt_HoldoutMusic;
trigger gt_GateCloses;
trigger gt_ShowFirstObjective;
trigger gt_StartFirstLockdownTimer;
trigger gt_TransmissionBeforeLockdownTimerQ;
trigger gt_TransmissionLockdown01ReminderQ;
trigger gt_ActivateZergRampAttack01;
trigger gt_ActivateZergRampAttack02;
trigger gt_ActivateZergPenAttack01;
trigger gt_SaveScientistsfromThreat;
trigger gt_RaynorKerriganBanter01Q;
trigger gt_ForceRaynorThroughDoor01;
trigger gt_GotThroughLockdownDoor01;
trigger gt_TransmissionGotThroughLockdownDoor01Q;
trigger gt_StartSecondLockdownTimer;
trigger gt_SecondLockdownStartedQ;
trigger gt_RaynorKerriganBanter02Q;
trigger gt_ScientistChased01;
trigger gt_UltraliskAttackRubbleQ;
trigger gt_UltraliskDiesRemoveTextTagModel;
trigger gt_UltraliskShotUsedRemoveTextTagModel;
trigger gt_DominionTroopsSeeKerriganQ;
trigger gt_ZergAttackChokepointQ;
trigger gt_DebrisBlocksDoorExitQ;
trigger gt_DebrisDestroyed;
trigger gt_TransmissionLockdown02ReminderQ;
trigger gt_ForceRaynorThroughDoor02;
trigger gt_GotThroughLockdownDoor02;
trigger gt_TransmissionGotThroughLockdownDoor02Q;
trigger gt_StartThirdLockdownTimer;
trigger gt_ComputerRoomSecuredQ;
trigger gt_ComputerRoomSecuredMusic;
trigger gt_SecurityComputerProximityEnter;
trigger gt_SecurityComputerActivatedQ;
trigger gt_ButtonTurnonGas;
trigger gt_TransmissionGasDidntKillEverythingQ;
trigger gt_ButtonReleaseZerg;
trigger gt_TransmissionDominionReactionatCagesQ;
trigger gt_LeaveSecurityCamera;
trigger gt_TransmissionSomeZergRemainQ;
trigger gt_RestoreNormalGameplayUI;
trigger gt_SecurityRoomMusic;
trigger gt_DominionAttackFromTram;
trigger gt_UnpauseTramFight;
trigger gt_TransmissionLockdown03ReminderQ;
trigger gt_ForceRaynorThroughDoor03;
trigger gt_GotThroughLockdownDoor03Q;
trigger gt_TramStationDominionKilled;
trigger gt_CreateDestinationTimer;
trigger gt_CreateTramProgressBar;
trigger gt_UpdateTramProgressBar;
trigger gt_TramEngineUnderAttackWarning;
trigger gt_TramEngineDestroyed;
trigger gt_TransmissionTramEngineDestroyedQ;
trigger gt_TramAt75Health;
trigger gt_TramAt40Health;
trigger gt_TransmissionTramAt40HealthQ;
trigger gt_TramExitsTunnel;
trigger gt_StartTramAttacks;
trigger gt_StartTramAttacksHard;
trigger gt_TransmissionIncomingDominionForcesQ;
trigger gt_TransmissionTramGoesFasterQ;
trigger gt_TransmissionSiegeTanksQ;
trigger gt_TransmissionTramExitsTunnelQ;
trigger gt_TransmissionTramAlmostThereQ;
trigger gt_TramSuccessfullyDefended;
trigger gt_SlowDownandStopTram;
trigger gt_TramUnitUnloadedBehavior;
trigger gt_MakeCiviliansScared;
trigger gt_ReleaseUmojantoBullies;
trigger gt_UmojanMarinesMoveOut;
trigger gt_ArchangelMusic;
trigger gt_DominionAttackFromDoor;
trigger gt_DominionAttackAcrossBridge;
trigger gt_S4DropPodCrashing01;
trigger gt_PlayerReachesSpaceport;
trigger gt_AfterArchangelCinematicIntroQ;
trigger gt_CreateUpdateArchangelBossBar;
trigger gt_DominionDropsBehindEnemyLines;
trigger gt_ArchangelBehaviorStage1;
trigger gt_ArchangelMoveToStage2;
trigger gt_ArchangelBehaviorStage2;
trigger gt_ArchangelMoveToStage3;
trigger gt_ArchangelBehaviorStage3;
trigger gt_ArchangelBombingRun;
trigger gt_ArchangelLands;
trigger gt_TransmissionDropPodCalloutQ;
trigger gt_TransmissionKineticBlastReminderQ;
trigger gt_ArchangelStageDropPods;
trigger gt_ArchangelStageDropPodsHard;
trigger gt_ReplenishUmojanMarines;
trigger gt_ArchangelAttackMissileBarrageStage1;
trigger gt_ArchangelAttackMissileBarrageStage2;
trigger gt_ArchangelAttackMissileBarrageStage3;
trigger gt_ArchangelAttackMinigunStrafeStage1;
trigger gt_TipMissionHelpQ;
trigger gt_StartAI;
trigger gt_AchievementEnginesLost;
trigger gt_AchievementArchangelDamageNH;
trigger gt_AchievementLockdownSpeedRunH;
trigger gt_KerriganUsesKineticBlast;
trigger gt_KerriganUsesCrushingGrip;
trigger gt_KerriganTakesDamageFromArchangel;
trigger gt_DefeatKerriganDead;
trigger gt_DefeatLockdownDoorTimer;
trigger gt_DefeatTramDestroyed;
trigger gt_VictoryArchangelDestroyed;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_ObjectiveGettoSublevelDoorCreate;
trigger gt_ObjectiveGettoSublevelDoorComplete;
trigger gt_ObjectiveGettoSublevelDoorFailed;
trigger gt_ObjectiveHoldOutAtDoorCreate;
trigger gt_ObjectiveHoldOutAtDoorComplete;
trigger gt_ObjectiveHoldOutAtDoorFailed;
trigger gt_ObjectiveEscapeThroughSublevelCreate;
trigger gt_ObjectiveEscapeThroughSublevelComplete;
trigger gt_ObjectiveEscapeThroughSublevelFailed;
trigger gt_ObjectiveDefendTheTramCreate;
trigger gt_ObjectiveDefendTheTramComplete;
trigger gt_ObjectiveDefendTheTramFailed;
trigger gt_ObjectiveReachTheSpaceportCreate;
trigger gt_ObjectiveReachTheSpaceportComplete;
trigger gt_ObjectiveReachTheSpaceportFailed;
trigger gt_ObjectiveDestroytheArchangelCreate;
trigger gt_ObjectiveDestroytheArchangelComplete;
trigger gt_ObjectiveDestroytheArchangelFailed;
trigger gt_ObjectiveKerriganMustSurviveCreate;
trigger gt_ObjectiveKerriganMustSurviveComplete;
trigger gt_ObjectiveKerriganMustSurviveFailed;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_IntroMusic;
trigger gt_MidQStage2;
trigger gt_MidSetupStage2;
trigger gt_MidCinematicStage2;
trigger gt_MidCinematicEndStage2;
trigger gt_MidCleanupStage2;
trigger gt_MidElevatorMusic;
trigger gt_MidQStage3;
trigger gt_MidSetupStage3;
trigger gt_MidCinematicStage3;
trigger gt_MidCinematicEndStage3;
trigger gt_MidCleanupStage3;
trigger gt_MidBoardTramMusic;
trigger gt_MidQStage4;
trigger gt_MidSetupStage4;
trigger gt_MidCinematicStage4;
trigger gt_MidCinematicEndStage4;
trigger gt_MidCleanupStage4;
trigger gt_MidCineMarinesMove;
trigger gt_MidLeavingTramMusic;
trigger gt_MidQArchangel;
trigger gt_MidSetupArchangel;
trigger gt_MidCinematicArchangel;
trigger gt_MidCinematicEndArchangel;
trigger gt_MidCleanupArchangel;
trigger gt_MidCineArchangelDominionAttack;
trigger gt_MidCineArchangelBarrage;
trigger gt_MidCineArchangelUmojanAttack;
trigger gt_MidCineArchangelBridgeBlowsUp;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;
trigger gt_VictoryMusic;
trigger gt_VictoryCinematicDropPods;

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_MakeUnitNonInteractive (unit lp_chosenUnit) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_MakeUnitInvulnerable(lp_chosenUnit, true);
    UnitSetState(lp_chosenUnit, c_unitStateHighlightable, false);
    UnitSetState(lp_chosenUnit, c_unitStateTargetable, false);
    UnitSetState(lp_chosenUnit, c_unitStateStatusBar, false);
    UnitSetState(lp_chosenUnit, c_unitStateSelectable, false);
}

void gf_RemoveIncapforCinematic (unit lp_chosenUnit) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitHasBehavior(lp_chosenUnit, "Incapacitated") == true)) {
        UnitBehaviorRemove(lp_chosenUnit, "Incapacitated", 1);
        UnitGroupRemove(gv_incappedHeroes, lp_chosenUnit);
        libNtve_gf_PauseUnit(lp_chosenUnit, false);
        UnitBehaviorAddPlayer(lp_chosenUnit, "IncapStandUp", gv_pLAYER_01_USER, 1);
    }

}

void gf_ChangeButtonTooltip (string lp_ability, string lp_tooltipPath) {
    // Variable Declarations
    string lv_button;

    // Automatic Variable Declarations
    string auto783DD727_val;

    // Variable Initialization

    // Implementation
    auto783DD727_val = lp_ability;
    if (auto783DD727_val == "PsionicLift") {
        lv_button = "PsionicLift";
    }
    else if (auto783DD727_val == "MindBolt") {
        lv_button = "MindBolt";
    }
    else {
        return ;
    }
    CatalogFieldValueSet(c_gameCatalogButton, lv_button, "Tooltip", gv_pLAYER_01_USER, lp_tooltipPath);
}

void gf_RestoreButtonTooltip (string lp_ability) {
    // Variable Declarations
    string lv_button;

    // Automatic Variable Declarations
    string autoA644BFA2_val;

    // Variable Initialization

    // Implementation
    autoA644BFA2_val = lp_ability;
    if (autoA644BFA2_val == "PsionicLift") {
        lv_button = "PsionicLift";
        CatalogFieldValueSet(c_gameCatalogButton, lv_button, "Tooltip", gv_pLAYER_01_USER, gv_crushingGrip_OriginalTooltip);
    }
    else if (autoA644BFA2_val == "MindBolt") {
        lv_button = "MindBolt";
        CatalogFieldValueSet(c_gameCatalogButton, lv_button, "Tooltip", gv_pLAYER_01_USER, gv_kineticBlast_OriginalTooltip);
    }
    else {
    }
}

void gf_WaitifCriticalTransmissionisinprogress () {
    // Automatic Variable Declarations
    // Implementation
    while (!((gv_criticalTransmissionPlaying == false))) {
        Wait(0.0625, c_timeGame);
    }
}

void gf_ReviveRaynor () {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitHasBehavior(gv_kerrigan2, "Incapacitated") == true)) {
        UnitBehaviorAddPlayer(gv_kerrigan2, "IncapStandUp", gv_pLAYER_01_USER, 1);
        UnitBehaviorRemovePlayer(gv_kerrigan2, "Incapacitated", gv_pLAYER_01_USER, 1);
    }

}

trigger auto_gf_TramAttackAir_Trigger = null;
int auto_gf_TramAttackAir_lp_number;
string auto_gf_TramAttackAir_lp_unitType;
region auto_gf_TramAttackAir_lp_originRegion;

void gf_TramAttackAir (int lp_number, string lp_unitType, region lp_originRegion) {
    auto_gf_TramAttackAir_lp_number = lp_number;
    auto_gf_TramAttackAir_lp_unitType = lp_unitType;
    auto_gf_TramAttackAir_lp_originRegion = lp_originRegion;

    if (auto_gf_TramAttackAir_Trigger == null) {
        auto_gf_TramAttackAir_Trigger = TriggerCreate("auto_gf_TramAttackAir_TriggerFunc");
    }

    TriggerExecute(auto_gf_TramAttackAir_Trigger, false, false);
}

bool auto_gf_TramAttackAir_TriggerFunc (bool testConds, bool runActions) {
    int lp_number = auto_gf_TramAttackAir_lp_number;
    string lp_unitType = auto_gf_TramAttackAir_lp_unitType;
    region lp_originRegion = auto_gf_TramAttackAir_lp_originRegion;

    // Automatic Variable Declarations
    unitgroup autoE9ECCD06_g;
    int autoE9ECCD06_u;
    unit autoE9ECCD06_var;

    // Implementation
    libNtve_gf_UnitCreateFacingPoint(lp_number, lp_unitType, 0, gv_pLAYER_02_DOMINION, RegionRandomPoint(lp_originRegion), PointFromId(527));
    autoE9ECCD06_g = UnitLastCreatedGroup();
    autoE9ECCD06_u = UnitGroupCount(autoE9ECCD06_g, c_unitCountAll);
    for (;; autoE9ECCD06_u -= 1) {
        autoE9ECCD06_var = UnitGroupUnitFromEnd(autoE9ECCD06_g, autoE9ECCD06_u);
        if (autoE9ECCD06_var == null) { break; }
        UnitGroupAdd(gv_s3_TramAttackGroup, autoE9ECCD06_var);
        AISetUnitScriptControlled(autoE9ECCD06_var, false);
        AIAttackWaveUseUnit(gv_pLAYER_02_DOMINION, autoE9ECCD06_var);
    }
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveSend(gv_pLAYER_02_DOMINION, 0, false);
    return true;
}

trigger auto_gf_TramAttackAirDumb_Trigger = null;
int auto_gf_TramAttackAirDumb_lp_number;
string auto_gf_TramAttackAirDumb_lp_unitType;
region auto_gf_TramAttackAirDumb_lp_originRegion;

void gf_TramAttackAirDumb (int lp_number, string lp_unitType, region lp_originRegion) {
    auto_gf_TramAttackAirDumb_lp_number = lp_number;
    auto_gf_TramAttackAirDumb_lp_unitType = lp_unitType;
    auto_gf_TramAttackAirDumb_lp_originRegion = lp_originRegion;

    if (auto_gf_TramAttackAirDumb_Trigger == null) {
        auto_gf_TramAttackAirDumb_Trigger = TriggerCreate("auto_gf_TramAttackAirDumb_TriggerFunc");
    }

    TriggerExecute(auto_gf_TramAttackAirDumb_Trigger, false, false);
}

bool auto_gf_TramAttackAirDumb_TriggerFunc (bool testConds, bool runActions) {
    int lp_number = auto_gf_TramAttackAirDumb_lp_number;
    string lp_unitType = auto_gf_TramAttackAirDumb_lp_unitType;
    region lp_originRegion = auto_gf_TramAttackAirDumb_lp_originRegion;

    // Variable Declarations
    unit lv_dumbTarget;

    // Automatic Variable Declarations
    unitgroup autoFD3A0407_g;
    int autoFD3A0407_u;
    unit autoFD3A0407_var;

    // Variable Initialization

    // Implementation
    if ((UnitGroupCount(gv_s3_TramEngineGroup, c_unitCountAlive) > 0)) {
        libNtve_gf_UnitCreateFacingPoint(lp_number, lp_unitType, 0, gv_pLAYER_02_DOMINION, RegionRandomPoint(lp_originRegion), PointFromId(527));
        lv_dumbTarget = UnitGroupRandomUnit(gv_s3_TramEngineGroup, c_unitCountAlive);
        autoFD3A0407_g = UnitLastCreatedGroup();
        autoFD3A0407_u = UnitGroupCount(autoFD3A0407_g, c_unitCountAll);
        for (;; autoFD3A0407_u -= 1) {
            autoFD3A0407_var = UnitGroupUnitFromEnd(autoFD3A0407_g, autoFD3A0407_u);
            if (autoFD3A0407_var == null) { break; }
            UnitGroupAdd(gv_s3_TramAttackGroup, autoFD3A0407_var);
            if ((UnitGetType(autoFD3A0407_var) == "VikingFighter")) {
                UnitIssueOrder(autoFD3A0407_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(lv_dumbTarget)), c_orderQueueReplace);
                UnitIssueOrder(autoFD3A0407_var, Order(AbilityCommand("AssaultMode", 0)), c_orderQueueAddToEnd);
                UnitIssueOrder(autoFD3A0407_var, OrderTargetingUnit(AbilityCommand("attack", 0), lv_dumbTarget), c_orderQueueAddToEnd);
                UnitIssueOrder(autoFD3A0407_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_kerrigan)), c_orderQueueAddToEnd);
            }
            else {
                UnitIssueOrder(autoFD3A0407_var, OrderTargetingUnit(AbilityCommand("move", 0), lv_dumbTarget), c_orderQueueReplace);
                UnitIssueOrder(autoFD3A0407_var, OrderTargetingUnit(AbilityCommand("attack", 0), lv_dumbTarget), c_orderQueueAddToEnd);
                UnitIssueOrder(autoFD3A0407_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_kerrigan)), c_orderQueueAddToEnd);
            }
        }
    }

    return true;
}

trigger auto_gf_TramAttackDropship_Trigger = null;
int auto_gf_TramAttackDropship_lp_numberUnit01;
int auto_gf_TramAttackDropship_lp_numberUnit02;
string auto_gf_TramAttackDropship_lp_cargoUnitType01;
string auto_gf_TramAttackDropship_lp_cargoUnitType02;
region auto_gf_TramAttackDropship_lp_originRegion;
point auto_gf_TramAttackDropship_lp_dropPoint;

void gf_TramAttackDropship (int lp_numberUnit01, int lp_numberUnit02, string lp_cargoUnitType01, string lp_cargoUnitType02, region lp_originRegion, point lp_dropPoint) {
    auto_gf_TramAttackDropship_lp_numberUnit01 = lp_numberUnit01;
    auto_gf_TramAttackDropship_lp_numberUnit02 = lp_numberUnit02;
    auto_gf_TramAttackDropship_lp_cargoUnitType01 = lp_cargoUnitType01;
    auto_gf_TramAttackDropship_lp_cargoUnitType02 = lp_cargoUnitType02;
    auto_gf_TramAttackDropship_lp_originRegion = lp_originRegion;
    auto_gf_TramAttackDropship_lp_dropPoint = lp_dropPoint;

    if (auto_gf_TramAttackDropship_Trigger == null) {
        auto_gf_TramAttackDropship_Trigger = TriggerCreate("auto_gf_TramAttackDropship_TriggerFunc");
    }

    TriggerExecute(auto_gf_TramAttackDropship_Trigger, false, false);
}

bool auto_gf_TramAttackDropship_TriggerFunc (bool testConds, bool runActions) {
    int lp_numberUnit01 = auto_gf_TramAttackDropship_lp_numberUnit01;
    int lp_numberUnit02 = auto_gf_TramAttackDropship_lp_numberUnit02;
    string lp_cargoUnitType01 = auto_gf_TramAttackDropship_lp_cargoUnitType01;
    string lp_cargoUnitType02 = auto_gf_TramAttackDropship_lp_cargoUnitType02;
    region lp_originRegion = auto_gf_TramAttackDropship_lp_originRegion;
    point lp_dropPoint = auto_gf_TramAttackDropship_lp_dropPoint;

    // Variable Declarations
    unit lv_dropship;
    unitgroup lv_localCargoGroup;

    // Automatic Variable Declarations
    fixed autoFC16623B_at;

    // Variable Initialization
    lv_localCargoGroup = UnitGroupEmpty();

    // Implementation
    libNtve_gf_UnitCreateFacingPoint(1, "Medivac", 0, gv_pLAYER_02_DOMINION, RegionRandomPoint(lp_originRegion), PointFromId(527));
    lv_dropship = UnitLastCreated();
    UnitBehaviorAddPlayer(lv_dropship, "ForceLowDeath", gv_pLAYER_02_DOMINION, 1);
    UnitCargoCreate(lv_dropship, lp_cargoUnitType01, lp_numberUnit01);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitCargoLastCreatedGroup(), lv_localCargoGroup);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitCargoLastCreatedGroup(), gv_s3_TramAttackGroup);
    UnitCargoCreate(lv_dropship, lp_cargoUnitType02, lp_numberUnit02);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitCargoLastCreatedGroup(), lv_localCargoGroup);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitCargoLastCreatedGroup(), gv_s3_TramAttackGroup);
    Wait(0.5, c_timeGame);
    UnitGroupAdd(lv_localCargoGroup, lv_dropship);
    AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION, lv_localCargoGroup);
    AIAttackWaveSend(gv_pLAYER_02_DOMINION, 0, false);
    while (!((UnitGroupCount(lv_localCargoGroup, c_unitCountAlive) == 1))) {
        Wait(1.0, c_timeAI);
    }
    while (true) {
        if ((UnitIsAlive(lv_dropship) == false)) {
            return true;
        }

        UnitIssueOrder(lv_dropship, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(lp_originRegion)), c_orderQueueReplace);
        autoFC16623B_at = 0;
        while (!(((libNtve_gf_UnitInRegion(lv_dropship, lp_originRegion) == true) || (UnitIsAlive(lv_dropship) == false))) && autoFC16623B_at <= 10.0) {
            Wait(1.0, c_timeGame);
            autoFC16623B_at = autoFC16623B_at + 1.0;
        }
        if ((libNtve_gf_UnitInRegion(lv_dropship, lp_originRegion) == true) && (UnitIsAlive(lv_dropship) == true)) {
            UnitRemove(lv_dropship);
            break;
        }

    }
    return true;
}

void gf_ShuffleBarrageLocations () {
    // Variable Declarations
    int lv_index;
    int lv_indexRandom;
    point lv_barrageSwap;

    // Automatic Variable Declarations
    int autoEF557BD9_ae;
    const int autoEF557BD9_ai = 1;

    // Variable Initialization

    // Implementation
    autoEF557BD9_ae = (gv_s4_ArchangelBarrageCount - 1);
    lv_index = 1;
    for ( ; ( (autoEF557BD9_ai >= 0 && lv_index <= autoEF557BD9_ae) || (autoEF557BD9_ai < 0 && lv_index >= autoEF557BD9_ae) ) ; lv_index += autoEF557BD9_ai ) {
        lv_indexRandom = RandomInt(lv_index, gv_s4_ArchangelBarrageCount);
        if ((lv_indexRandom != lv_index)) {
            lv_barrageSwap = gv_s4_ArchangelBarrages[lv_indexRandom];
            gv_s4_ArchangelBarrages[lv_indexRandom] = gv_s4_ArchangelBarrages[lv_index];
            gv_s4_ArchangelBarrages[lv_index] = lv_barrageSwap;
        }

    }
}

void gf_ResetBarrageLocations () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto0D9DB4F4_ae = 100;
    const int auto0D9DB4F4_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i = 1;
    for ( ; ( (auto0D9DB4F4_ai >= 0 && lv_i <= auto0D9DB4F4_ae) || (auto0D9DB4F4_ai < 0 && lv_i >= auto0D9DB4F4_ae) ) ; lv_i += auto0D9DB4F4_ai ) {
        gv_s4_ArchangelBarrages[lv_i] = null;
    }
}

void gf_DoMissileBarrage (point lp_targetPoint) {
    // Automatic Variable Declarations
    // Implementation
    UnitIssueOrder(gv_kerrigan22, OrderTargetingPoint(AbilityCommand("TitanMechMissileShot", 0), lp_targetPoint), c_orderQueueAddToEnd);
}

void gf_MidCineArchangelDoMissileBarrage (point lp_targetPoint) {
    // Automatic Variable Declarations
    // Implementation
    UnitIssueOrder(gv_midCinematicArchangel, OrderTargetingPoint(AbilityCommand("TitanMechMissileShot", 0), lp_targetPoint), c_orderQueueAddToEnd);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_ULoadCampaignData("ZLab2");
    TriggerExecute(gt_Init01Technology, true, true);
    libSwaC_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03Units, true, true);
    TriggerExecute(gt_Init04MusicSound, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulties, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    TriggerExecute(gt_IntroQ, true, true);
    TriggerExecute(gt_StartGameStage1Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("MindBolt", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("PsionicLift", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("ExperimentalPlasmaGun", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("TossGrenade", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("TheMorosDevice", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("RaynorC4", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_02_DOMINION, AbilityCommand("Snipe", 0), false);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION, "ShieldWall", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION, "SiegeTech", 1);
    TechTreeAbilityAllow(gv_pLAYER_02_DOMINION, AbilityCommand("SiegeMode", 0), true);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION, "BattlecruiserEnableSpecializations", 1);
    TechTreeAbilityAllow(gv_pLAYER_02_DOMINION, AbilityCommand("Yamato", 0), true);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION2, "ShieldWall", 1);
    TechTreeAbilityAllow(gv_pLAYER_02_DOMINION22, AbilityCommand("BurrowChargeMP", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_visionGroup01;
    playergroup lv_visionGroup02;
    playergroup lv_visionGroup03;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_visionGroup01 = PlayerGroupEmpty();
    lv_visionGroup02 = PlayerGroupEmpty();
    lv_visionGroup03 = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION2, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION22, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION222, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION2222, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION22222, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION, gv_pLAYER_02_DOMINION22, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION, gv_pLAYER_02_DOMINION222, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION, gv_pLAYER_02_DOMINION2222, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION, gv_pLAYER_02_DOMINION22222, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION2, gv_pLAYER_02_DOMINION, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION2, gv_pLAYER_02_DOMINION22, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION2, gv_pLAYER_02_DOMINION222, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION2, gv_pLAYER_02_DOMINION2222, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION2, gv_pLAYER_02_DOMINION22222, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION22, gv_pLAYER_02_DOMINION2222, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION22, gv_pLAYER_02_DOMINION22222, libNtve_ge_AllianceSetting_Neutral);
    PlayerGroupAdd(gv_enemyPlayers, gv_pLAYER_02_DOMINION);
    PlayerGroupAdd(gv_enemyPlayers, gv_pLAYER_02_DOMINION22);
    PlayerSetAlliance(gv_pLAYER_02_DOMINION2, c_allianceIdPushable, gv_pLAYER_01_USER, true);
    PlayerSetAlliance(gv_pLAYER_02_DOMINION222, c_allianceIdPushable, gv_pLAYER_01_USER, true);
    PlayerGroupAdd(lv_visionGroup01, gv_pLAYER_02_DOMINION);
    PlayerGroupAdd(lv_visionGroup01, gv_pLAYER_02_DOMINION22);
    PlayerGroupAdd(lv_visionGroup01, gv_pLAYER_02_DOMINION22222);
    libSwaC_gf_ShareVisionAmongPlayers(lv_visionGroup01);
    PlayerGroupAdd(lv_visionGroup02, gv_pLAYER_01_USER);
    PlayerGroupAdd(lv_visionGroup02, gv_pLAYER_02_DOMINION222);
    libSwaC_gf_ShareVisionAmongPlayers(lv_visionGroup02);
    PlayerGroupAdd(lv_visionGroup03, gv_pLAYER_02_DOMINION2);
    PlayerGroupAdd(lv_visionGroup03, gv_pLAYER_02_DOMINION2222);
    libSwaC_gf_ShareVisionAmongPlayers(lv_visionGroup03);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 0);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 0);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerSetState(gv_pLAYER_02_DOMINION, c_playerStateFidgetingEnabled, false);
    PlayerSetState(gv_pLAYER_02_DOMINION2, c_playerStateFidgetingEnabled, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoC4ECCD0A_g;
    int autoC4ECCD0A_u;
    unit autoC4ECCD0A_var;
    unitgroup auto4551E5DF_g;
    int auto4551E5DF_u;
    unit auto4551E5DF_var;
    unitgroup auto9990C789_g;
    int auto9990C789_u;
    unit auto9990C789_var;
    unitgroup auto90682622_g;
    int auto90682622_u;
    unit auto90682622_var;
    unitgroup autoE8FC2D99_g;
    int autoE8FC2D99_u;
    unit autoE8FC2D99_var;
    unitgroup autoA558D35F_g;
    int autoA558D35F_u;
    unit autoA558D35F_var;
    unitgroup autoAB8560AA_g;
    int autoAB8560AA_u;
    unit autoAB8560AA_var;
    const int auto8BD12173_ae = 6;
    int auto8BD12173_var;
    unitgroup auto9197923E_g;
    int auto9197923E_u;
    unit auto9197923E_var;
    unitgroup auto73033279_g;
    int auto73033279_u;
    unit auto73033279_var;
    unitgroup autoD8B85E6E_g;
    int autoD8B85E6E_u;
    unit autoD8B85E6E_var;
    unitgroup autoF1E6E041_g;
    int autoF1E6E041_u;
    unit autoF1E6E041_var;
    unitgroup autoE25D70E8_g;
    int autoE25D70E8_u;
    unit autoE25D70E8_var;
    unitgroup auto5ABDEBA2_g;
    int auto5ABDEBA2_u;
    unit auto5ABDEBA2_var;
    unitgroup autoB994E9A3_g;
    int autoB994E9A3_u;
    unit autoB994E9A3_var;
    unitgroup auto1608AAF4_g;
    int auto1608AAF4_u;
    unit auto1608AAF4_var;
    unitgroup auto6C69F449_g;
    int auto6C69F449_u;
    unit auto6C69F449_var;
    unitgroup auto4E6B1551_g;
    int auto4E6B1551_u;
    unit auto4E6B1551_var;
    unitgroup auto613769D7_g;
    int auto613769D7_u;
    unit auto613769D7_var;
    unitgroup autoC05FF599_g;
    int autoC05FF599_u;
    unit autoC05FF599_var;
    unitgroup auto30CB3617_g;
    int auto30CB3617_u;
    unit auto30CB3617_var;
    unitgroup auto4275CA89_g;
    int auto4275CA89_u;
    unit auto4275CA89_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_kerrigan = UnitFromId(8);
    libSwaC_gf_RegisterCampaignKerrigan(gv_kerrigan);
    UnitSetTeamColorIndex(gv_kerrigan, 6);
    libSwaC_gf_SetHeroPanelUnit(1, gv_kerrigan);
    UnitMagazineArm(gv_kerrigan, AbilityCommand("RaynorLabMagazine", 0), 1);
    autoC4ECCD0A_g = UnitGroup("RaynorLab", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC4ECCD0A_u = UnitGroupCount(autoC4ECCD0A_g, c_unitCountAll);
    for (;; autoC4ECCD0A_u -= 1) {
        autoC4ECCD0A_var = UnitGroupUnitFromEnd(autoC4ECCD0A_g, autoC4ECCD0A_u);
        if (autoC4ECCD0A_var == null) { break; }
        gv_kerrigan2 = autoC4ECCD0A_var;
    }
    UnitSetState(gv_kerrigan2, c_unitStateSelectable, false);
    UnitSetState(gv_kerrigan2, c_unitStateTargetable, false);
    UnitStatusBarOverride(gv_kerrigan2, c_unitStatusGroupAll);
    UnitSetOwner(gv_kerrigan2, gv_pLAYER_02_DOMINION222, true);
    UnitControlGroupAddUnit(gv_pLAYER_01_USER, 1, gv_kerrigan);
    auto4551E5DF_g = UnitGroup("Medic", gv_pLAYER_02_DOMINION2, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4551E5DF_u = UnitGroupCount(auto4551E5DF_g, c_unitCountAll);
    for (;; auto4551E5DF_u -= 1) {
        auto4551E5DF_var = UnitGroupUnitFromEnd(auto4551E5DF_g, auto4551E5DF_u);
        if (auto4551E5DF_var == null) { break; }
        UnitSetPropertyFixed(auto4551E5DF_var, c_unitPropEnergyPercent, 100.0);
    }
    auto9990C789_g = UnitGroup("Battlecruiser", gv_pLAYER_02_DOMINION, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9990C789_u = UnitGroupCount(auto9990C789_g, c_unitCountAll);
    for (;; auto9990C789_u -= 1) {
        auto9990C789_var = UnitGroupUnitFromEnd(auto9990C789_g, auto9990C789_u);
        if (auto9990C789_var == null) { break; }
        UnitSetPropertyFixed(auto9990C789_var, c_unitPropEnergyPercent, 100.0);
    }
    auto90682622_g = UnitGroup("Medic", gv_pLAYER_02_DOMINION, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto90682622_u = UnitGroupCount(auto90682622_g, c_unitCountAll);
    for (;; auto90682622_u -= 1) {
        auto90682622_var = UnitGroupUnitFromEnd(auto90682622_g, auto90682622_u);
        if (auto90682622_var == null) { break; }
        UnitSetPropertyFixed(auto90682622_var, c_unitPropEnergyPercent, 100.0);
    }
    autoE8FC2D99_g = UnitGroup("Ghost", gv_pLAYER_02_DOMINION, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE8FC2D99_u = UnitGroupCount(autoE8FC2D99_g, c_unitCountAll);
    for (;; autoE8FC2D99_u -= 1) {
        autoE8FC2D99_var = UnitGroupUnitFromEnd(autoE8FC2D99_g, autoE8FC2D99_u);
        if (autoE8FC2D99_var == null) { break; }
        UnitSetPropertyFixed(autoE8FC2D99_var, c_unitPropEnergyPercent, 100.0);
    }
    autoA558D35F_g = UnitGroup(null, gv_pLAYER_02_DOMINION22222, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA558D35F_u = UnitGroupCount(autoA558D35F_g, c_unitCountAll);
    for (;; autoA558D35F_u -= 1) {
        autoA558D35F_var = UnitGroupUnitFromEnd(autoA558D35F_g, autoA558D35F_u);
        if (autoA558D35F_var == null) { break; }
        gf_MakeUnitNonInteractive(autoA558D35F_var);
    }
    UnitSetInfoText(UnitFromId(653), StringExternal("Param/Value/72D016CC"), StringExternal("Param/Value/ED6B8914"), StringToText(""));
    autoAB8560AA_g = UnitGroup("Beacon_Terran", 0, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoAB8560AA_u = UnitGroupCount(autoAB8560AA_g, c_unitCountAll);
    for (;; autoAB8560AA_u -= 1) {
        autoAB8560AA_var = UnitGroupUnitFromEnd(autoAB8560AA_g, autoAB8560AA_u);
        if (autoAB8560AA_var == null) { break; }
        UnitSetState(autoAB8560AA_var, c_unitStateTooltipable, true);
    }
    UnitSetInfoText(UnitFromId(445), StringExternal("Param/Value/BF6865FF"), StringExternal("Param/Value/628571B7"), StringToText(""));
    UnitSetState(UnitFromId(445), c_unitStateTooltipable, true);
    gv_s3_TramEngineUnits[1] = UnitFromId(379);
    gv_s3_TramEngineUnits[2] = UnitFromId(664);
    gv_s3_TramEngineUnits[3] = UnitFromId(392);
    gv_s3_TramEngineUnits[4] = UnitFromId(540);
    gv_s3_TramEngineUnits[5] = UnitFromId(665);
    gv_s3_TramEngineUnits[6] = UnitFromId(533);
    gv_s3_TramEngineDoodads[1] = DoodadFromId(1830);
    gv_s3_TramEngineDoodads[2] = DoodadFromId(1831);
    gv_s3_TramEngineDoodads[3] = DoodadFromId(1829);
    gv_s3_TramEngineDoodads[4] = DoodadFromId(1833);
    gv_s3_TramEngineDoodads[5] = DoodadFromId(1834);
    gv_s3_TramEngineDoodads[6] = DoodadFromId(1832);
    auto8BD12173_var = 1;
    for ( ; auto8BD12173_var <= auto8BD12173_ae; auto8BD12173_var += 1 ) {
        UnitSetInfoText(gv_s3_TramEngineUnits[auto8BD12173_var], StringToText(""), UnitTypeGetName(UnitGetType(gv_s3_TramEngineUnits[auto8BD12173_var])), StringToText(""));
    }
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(86), true);
    auto9197923E_g = UnitGroup("Scientist", gv_pLAYER_02_DOMINION2, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9197923E_u = UnitGroupCount(auto9197923E_g, c_unitCountAll);
    for (;; auto9197923E_u -= 1) {
        auto9197923E_var = UnitGroupUnitFromEnd(auto9197923E_g, auto9197923E_u);
        if (auto9197923E_var == null) { break; }
        UnitSetState(auto9197923E_var, c_unitStateTargetable, false);
    }
    auto73033279_g = UnitGroup("HealthDispenser", gv_pLAYER_02_DOMINION2, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto73033279_u = UnitGroupCount(auto73033279_g, c_unitCountAll);
    for (;; auto73033279_u -= 1) {
        auto73033279_var = UnitGroupUnitFromEnd(auto73033279_g, auto73033279_u);
        if (auto73033279_var == null) { break; }
        UnitSetInfoText(auto73033279_var, StringExternal("Param/Value/9082AF31"), StringExternal("Param/Value/50503B81"), StringToText(""));
        UnitBehaviorAddPlayer(auto73033279_var, "Harmless", gv_pLAYER_02_DOMINION2, 1);
        libNtve_gf_MakeUnitInvulnerable(auto73033279_var, true);
        UnitSetState(auto73033279_var, c_unitStateTargetable, false);
        UnitSetState(auto73033279_var, c_unitStateStatusBar, false);
    }
    autoD8B85E6E_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionFromId(38), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD8B85E6E_u = UnitGroupCount(autoD8B85E6E_g, c_unitCountAll);
    for (;; autoD8B85E6E_u -= 1) {
        autoD8B85E6E_var = UnitGroupUnitFromEnd(autoD8B85E6E_g, autoD8B85E6E_u);
        if (autoD8B85E6E_var == null) { break; }
        UnitGroupAdd(gv_s1_BridgeCrushingGripUmojan, autoD8B85E6E_var);
        UnitIssueOrder(autoD8B85E6E_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        libNtve_gf_ChangeUnitDamage(autoD8B85E6E_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    }
    autoF1E6E041_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionFromId(93), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF1E6E041_u = UnitGroupCount(autoF1E6E041_g, c_unitCountAll);
    for (;; autoF1E6E041_u -= 1) {
        autoF1E6E041_var = UnitGroupUnitFromEnd(autoF1E6E041_g, autoF1E6E041_u);
        if (autoF1E6E041_var == null) { break; }
        UnitGroupAdd(gv_s4_UmojanArchangelGroup, autoF1E6E041_var);
    }
    UnitGroupAdd(gv_kerriganShareVisionDoors, UnitFromId(191));
    UnitGroupAdd(gv_kerriganShareVisionDoors, UnitFromId(479));
    UnitGroupAdd(gv_kerriganShareVisionDoors, UnitFromId(46));
    UnitGroupAdd(gv_kerriganShareVisionDoors, UnitFromId(84));
    UnitGroupAdd(gv_kerriganShareVisionDoors, UnitFromId(35));
    UnitGroupAdd(gv_kerriganShareVisionDoors, UnitFromId(255));
    UnitGroupAdd(gv_kerriganShareVisionDoors, UnitFromId(4));
    UnitGroupAdd(gv_kerriganShareVisionDoors, UnitFromId(257));
    UnitGroupAdd(gv_kerriganShareVisionDoors, UnitFromId(306));
    UnitGroupAdd(gv_kerriganShareVisionDoors, UnitFromId(693));
    autoE25D70E8_g = UnitGroup("UmojanLabDebris", gv_pLAYER_02_DOMINION2222, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE25D70E8_u = UnitGroupCount(autoE25D70E8_g, c_unitCountAll);
    for (;; autoE25D70E8_u -= 1) {
        autoE25D70E8_var = UnitGroupUnitFromEnd(autoE25D70E8_g, autoE25D70E8_u);
        if (autoE25D70E8_var == null) { break; }
        UnitSetInfoText(UnitFromId(339), StringExternal("Param/Value/7F2C66C0"), StringExternal("Param/Value/362AC113"), StringToText(""));
    }
    gv_kerrigan22 = UnitFromId(703);
    UnitSetInfoTip(gv_kerrigan22, UnitTypeGetName(UnitGetType(gv_kerrigan22)));
    gv_kerrigan222 = UnitFromId(590);
    auto5ABDEBA2_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(26), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5ABDEBA2_u = UnitGroupCount(auto5ABDEBA2_g, c_unitCountAll);
    for (;; auto5ABDEBA2_u -= 1) {
        auto5ABDEBA2_var = UnitGroupUnitFromEnd(auto5ABDEBA2_g, auto5ABDEBA2_u);
        if (auto5ABDEBA2_var == null) { break; }
        UnitGroupAdd(gv_s1_SublevelDoorDominion, auto5ABDEBA2_var);
    }
    autoB994E9A3_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(98), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB994E9A3_u = UnitGroupCount(autoB994E9A3_g, c_unitCountAll);
    for (;; autoB994E9A3_u -= 1) {
        autoB994E9A3_var = UnitGroupUnitFromEnd(autoB994E9A3_g, autoB994E9A3_u);
        if (autoB994E9A3_var == null) { break; }
        UnitGroupAdd(gv_s1_BridgeCrushingGripDominion, autoB994E9A3_var);
        UnitIssueOrder(autoB994E9A3_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        libNtve_gf_ChangeUnitDamage(autoB994E9A3_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    }
    auto1608AAF4_g = UnitGroup("TerranDropPod", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto1608AAF4_u = UnitGroupCount(auto1608AAF4_g, c_unitCountAll);
    for (;; auto1608AAF4_u -= 1) {
        auto1608AAF4_var = UnitGroupUnitFromEnd(auto1608AAF4_g, auto1608AAF4_u);
        if (auto1608AAF4_var == null) { break; }
        UnitSetTeamColorIndex(auto1608AAF4_var, 1);
    }
    auto6C69F449_g = UnitGroup("UmojanLabCrashSiteSmall", gv_pLAYER_02_DOMINION, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6C69F449_u = UnitGroupCount(auto6C69F449_g, c_unitCountAll);
    for (;; auto6C69F449_u -= 1) {
        auto6C69F449_var = UnitGroupUnitFromEnd(auto6C69F449_g, auto6C69F449_u);
        if (auto6C69F449_var == null) { break; }
        gf_MakeUnitNonInteractive(auto6C69F449_var);
    }
    auto4E6B1551_g = UnitGroup("UmojanLabCrashSiteMedium", gv_pLAYER_02_DOMINION, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4E6B1551_u = UnitGroupCount(auto4E6B1551_g, c_unitCountAll);
    for (;; auto4E6B1551_u -= 1) {
        auto4E6B1551_var = UnitGroupUnitFromEnd(auto4E6B1551_g, auto4E6B1551_u);
        if (auto4E6B1551_var == null) { break; }
        gf_MakeUnitNonInteractive(auto4E6B1551_var);
    }
    gf_MakeUnitNonInteractive(UnitFromId(4));
    auto613769D7_g = UnitGroup("UmojanLabDoorsRight", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto613769D7_u = UnitGroupCount(auto613769D7_g, c_unitCountAll);
    for (;; auto613769D7_u -= 1) {
        auto613769D7_var = UnitGroupUnitFromEnd(auto613769D7_g, auto613769D7_u);
        if (auto613769D7_var == null) { break; }
        gf_MakeUnitNonInteractive(auto613769D7_var);
    }
    autoC05FF599_g = UnitGroup("UmojanLabDoorsLeft", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC05FF599_u = UnitGroupCount(autoC05FF599_g, c_unitCountAll);
    for (;; autoC05FF599_u -= 1) {
        autoC05FF599_var = UnitGroupUnitFromEnd(autoC05FF599_g, autoC05FF599_u);
        if (autoC05FF599_var == null) { break; }
        gf_MakeUnitNonInteractive(autoC05FF599_var);
    }
    auto30CB3617_g = UnitGroup("UmojanLabDoorsRightLowered", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto30CB3617_u = UnitGroupCount(auto30CB3617_g, c_unitCountAll);
    for (;; auto30CB3617_u -= 1) {
        auto30CB3617_var = UnitGroupUnitFromEnd(auto30CB3617_g, auto30CB3617_u);
        if (auto30CB3617_var == null) { break; }
        gf_MakeUnitNonInteractive(auto30CB3617_var);
    }
    auto4275CA89_g = UnitGroup("UmojanLabDoorsLeftLowered", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4275CA89_u = UnitGroupCount(auto4275CA89_g, c_unitCountAll);
    for (;; auto4275CA89_u -= 1) {
        auto4275CA89_var = UnitGroupUnitFromEnd(auto4275CA89_g, auto4275CA89_u);
        if (auto4275CA89_var == null) { break; }
        gf_MakeUnitNonInteractive(auto4275CA89_var);
    }
    gf_MakeUnitNonInteractive(gv_kerrigan2222);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_kerrigan2222), c_animNameDefault, "Stand Morph", c_animFlagPlayForever, c_animTimeDefault);
    gv_s1_HealBotScientist = UnitFromId(86);
    gv_crushingGrip_OriginalTooltip = CatalogFieldValueGet(c_gameCatalogButton, "PsionicLift", "Tooltip", gv_pLAYER_01_USER);
    gv_kineticBlast_OriginalTooltip = CatalogFieldValueGet(c_gameCatalogButton, "MindBolt", "Tooltip", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init04MusicSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mapMusicTrack = "ZLab02MusicMain";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04MusicSound_Init () {
    gt_Init04MusicSound = TriggerCreate("gt_Init04MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    libLbty_gf_AutoRevealRegion(RegionFromId(27), RegionFromId(27), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(21), RegionFromId(21), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(74), RegionFromId(74), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(77), RegionFromId(77), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(112), RegionFromId(112), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(113), RegionFromId(113), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(120), RegionFromId(120), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(114), RegionFromId(114), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(119), RegionFromId(119), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(121), RegionFromId(121), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(122), RegionFromId(122), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(115), RegionFromId(115), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(116), RegionFromId(116), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(117), RegionFromId(117), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(118), RegionFromId(118), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(124), RegionFromId(124), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(128), RegionFromId(128), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(14), RegionFromId(28), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(1), RegionFromId(1), gv_pLAYER_01_USER);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Lab02Level01", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    UnitSetInfoText(UnitFromId(40), StringExternal("Param/Value/A4CE4625"), StringExternal("Param/Value/FF783F03"), StringToText(""));
    UnitForceStatusBar(UnitFromId(40), true);
    UnitSetState(UnitFromId(40), c_unitStateHighlighted, true);
    UnitSetInfoText(UnitFromId(330), StringExternal("Param/Value/E7FB0CA2"), StringExternal("Param/Value/A03EB1BF"), StringToText(""));
    UnitForceStatusBar(UnitFromId(330), true);
    UnitSetInfoText(UnitFromId(373), StringExternal("Param/Value/BEF8D18C"), StringExternal("Param/Value/D6E66496"), StringToText(""));
    UnitForceStatusBar(UnitFromId(373), true);
    UnitSetInfoText(UnitFromId(308), StringExternal("Param/Value/F4FFC5CC"), StringExternal("Param/Value/9CC15B14"), StringToText(""));
    UnitForceStatusBar(UnitFromId(308), true);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(108), "UmojanLabLabGate", c_animNameDefault, "Stand Unpowered", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(109), "UmojanLabLabGate", c_animNameDefault, "Stand Unpowered", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(110), "UmojanLabLabGate", c_animNameDefault, "Stand Unpowered", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(106), "UmojanLabZergCrates", c_animNameDefault, "Stand Unpowered", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "UmojanLabTramBackgroundNaturalCliffs", c_animNameDefault, "Dead", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    ActorSend(ActorFromDoodad(DoodadFromId(1029)), "SetOpacity");
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "UmojanLabTramBackground", c_animNameDefault, "Dead", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    ActorSend(ActorFromDoodad(DoodadFromId(532)), "SetOpacity");
    TerrainShowRegion(RegionFromId(22), false);
    ActorRegionCreate(null, "TriggerRegion", RegionFromId(130));
    gv_hiddenDoodadRegion = libNtve_gf_ActorLastCreated();
    libNtve_gf_ActorRegionSendSimple(gv_hiddenDoodadRegion, "SetVisibility");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoA3EFDB9D_g;
    int autoA3EFDB9D_var;
    const int auto5C9F28A1_ae = 6;
    int auto5C9F28A1_var;
    unitgroup auto686D64F2_g;
    int auto686D64F2_u;
    unit auto686D64F2_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DifficultyValueInt(1, 0, 0, 0) == 1)) {
        PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION222, c_playerPropDamageTakenPercent, c_playerPropOperSetTo, 50);
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        autoA3EFDB9D_g = gv_enemyPlayers;
        autoA3EFDB9D_var = -1;
        while (true) {
            autoA3EFDB9D_var = PlayerGroupNextPlayer(autoA3EFDB9D_g, autoA3EFDB9D_var);
            if (autoA3EFDB9D_var < 0) { break; }
            TechTreeUpgradeAddLevel(autoA3EFDB9D_var, "TerranInfantryWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(autoA3EFDB9D_var, "TerranShipWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(autoA3EFDB9D_var, "TerranVehicleWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(autoA3EFDB9D_var, "ZergMeleeWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(autoA3EFDB9D_var, "ZergMissileWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(autoA3EFDB9D_var, "JackhammerConcussionGrenades", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION, "ArchangelHard", 1);
        }
    }

    gv_s2_Lockdown_Time[1] = libHots_gf_DifficultyValueFixed2(170.0, 170.0, 120.0);
    gv_s2_Lockdown_Time[2] = libHots_gf_DifficultyValueFixed2(160.0, 160.0, 110.0);
    gv_s2_Lockdown_Time[3] = libHots_gf_DifficultyValueFixed2(140.0, 140.0, 100.0);
    gv_s4_Archangel_MAX_HEALTH = libNtve_gf_DifficultyValueFixed(2000.0, 2500.0, 3500.0, 4000.0);
    UnitSetPropertyFixed(gv_kerrigan22, c_unitPropLifeMax, gv_s4_Archangel_MAX_HEALTH);
    UnitSetPropertyFixed(gv_kerrigan22, c_unitPropLifePercent, 100.0);
    gv_s2_RUBBLE_MAX_HEALTH = libNtve_gf_DifficultyValueFixed(400.0, 400.0, 250.0, 250.0);
    UnitSetPropertyFixed(UnitFromId(339), c_unitPropLifeMax, gv_s2_RUBBLE_MAX_HEALTH);
    UnitSetPropertyFixed(UnitFromId(339), c_unitPropLifePercent, 100.0);
    gv_s3_TRAM_ENGINE_MAX_LIFE = libNtve_gf_DifficultyValueFixed(200.0, 200.0, 200.0, 150.0);
    auto5C9F28A1_var = 1;
    for ( ; auto5C9F28A1_var <= auto5C9F28A1_ae; auto5C9F28A1_var += 1 ) {
        UnitSetPropertyFixed(gv_s3_TramEngineUnits[auto5C9F28A1_var], c_unitPropLifeMax, gv_s3_TRAM_ENGINE_MAX_LIFE);
        UnitSetPropertyFixed(gv_s3_TramEngineUnits[auto5C9F28A1_var], c_unitPropLifePercent, 100.0);
        UnitSetState(gv_s3_TramEngineUnits[auto5C9F28A1_var], c_unitStateTargetable, false);
    }
    if ((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1)) {
        auto686D64F2_g = gv_s1_SublevelDoorDominion;
        auto686D64F2_u = UnitGroupCount(auto686D64F2_g, c_unitCountAll);
        for (;; auto686D64F2_u -= 1) {
            auto686D64F2_var = UnitGroupUnitFromEnd(auto686D64F2_g, auto686D64F2_u);
            if (auto686D64F2_var == null) { break; }
            UnitRemove(auto686D64F2_var);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_AddMissionTipUserData("Kerrigan");
    libSwaC_gf_AddMissionTipUserData("Raynor");
    libSwaC_gf_AddMissionTipUserData("Hero Abilities");
    libSwaC_gf_AddMissionTipUserData("Kinetic Blast");
    libSwaC_gf_AddMissionTipUserData("Crushing Grip");
    libSwaC_gf_AddMissionTipUserData("Game (Lab02)");
    libSwaC_gf_AddMissionTipUserData("Combat (Lab02)");
    libSwaC_gf_AddMissionTipUserData("Archangel");
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("RaynorLab", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Marine", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Firebat", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Marauder", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Ghost", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Medic", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("VikingAssault", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("SiegeTank", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Wraith", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Medivac", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Zergling", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Roach", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Hydralisk", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Ultralisk", false, gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Start S02
//--------------------------------------------------------------------------------------------------
bool gt_DEBUGStartS02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueClear(c_triggerQueueKill);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("MindBolt", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("PsionicLift", 0), true);
    TriggerEnable(gt_LowHealthKerrigan, true);
    TriggerEnable(gt_LowHealthRaynor, true);
    TriggerEnable(gt_HealerbotRecharging, true);
    TriggerEnable(gt_HealerbotReady, true);
    TriggerStop(gt_HoldoutMusic);
    TriggerExecute(gt_MidQStage2, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DEBUGStartS02_Init () {
    gt_DEBUGStartS02 = TriggerCreate("gt_DEBUGStartS02_Func");
    TriggerAddEventChatMessage(gt_DEBUGStartS02, c_playerAny, "s2", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Start S03
//--------------------------------------------------------------------------------------------------
bool gt_DEBUGStartS03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("MindBolt", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("PsionicLift", 0), true);
    TriggerEnable(gt_LowHealthKerrigan, true);
    TriggerEnable(gt_LowHealthRaynor, true);
    TriggerStop(gt_HoldoutMusic);
    TriggerStop(gt_SecurityRoomMusic);
    TriggerExecute(gt_MidQStage3, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DEBUGStartS03_Init () {
    gt_DEBUGStartS03 = TriggerCreate("gt_DEBUGStartS03_Func");
    TriggerAddEventChatMessage(gt_DEBUGStartS03, c_playerAny, "s3", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Start S04
//--------------------------------------------------------------------------------------------------
bool gt_DEBUGStartS04_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueClear(c_triggerQueueKill);
    TriggerEnable(gt_LowHealthKerrigan, true);
    TriggerEnable(gt_LowHealthRaynor, true);
    ObjectiveShow(gv_objectiveDestroyDominionBase, PlayerGroupAll(), false);
    ObjectiveShow(gv_objectiveDestroyDominionBase2, PlayerGroupAll(), false);
    TimerPause(gv_s3_TramTimer, true);
    libSwaC_gf_ShowHideSingularBossBarSwarmCampaign(false);
    libSwaC_gf_ShowHideProgressBar(false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("MindBolt", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("PsionicLift", 0), true);
    TriggerStop(gt_HoldoutMusic);
    TriggerStop(gt_SecurityRoomMusic);
    TriggerExecute(gt_MidQStage4, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DEBUGStartS04_Init () {
    gt_DEBUGStartS04 = TriggerCreate("gt_DEBUGStartS04_Func");
    TriggerAddEventChatMessage(gt_DEBUGStartS04, c_playerAny, "s4", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Start Archangel Boss Fight
//--------------------------------------------------------------------------------------------------
bool gt_DEBUGStartArchangelBossFight_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto471521AB_g;
    int auto471521AB_u;
    unit auto471521AB_var;
    unitgroup auto9C052181_g;
    int auto9C052181_u;
    unit auto9C052181_var;
    unitgroup auto4E4DD3C6_g;
    int auto4E4DD3C6_u;
    unit auto4E4DD3C6_var;
    unitgroup auto63A3D202_g;
    int auto63A3D202_u;
    unit auto63A3D202_var;
    unitgroup auto389157BB_g;
    int auto389157BB_u;
    unit auto389157BB_var;
    unitgroup auto41033EC2_g;
    int auto41033EC2_u;
    unit auto41033EC2_var;
    unitgroup auto40EB60F5_g;
    int auto40EB60F5_u;
    unit auto40EB60F5_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("MindBolt", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("PsionicLift", 0), true);
    RegionPlayableMapSet(RegionFromId(60));
    TriggerQueueClear(c_triggerQueueKill);
    UnitRemove(UnitFromId(653));
    TimerPause(gv_s3_TramTimer, true);
    PingDestroy(gv_s4_ObjectivePing);
    auto471521AB_g = UnitGroup(null, c_playerAny, RegionFromId(8), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto471521AB_u = UnitGroupCount(auto471521AB_g, c_unitCountAll);
    for (;; auto471521AB_u -= 1) {
        auto471521AB_var = UnitGroupUnitFromEnd(auto471521AB_g, auto471521AB_u);
        if (auto471521AB_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto471521AB_var, false);
        libNtve_gf_PauseUnit(auto471521AB_var, true);
    }
    auto9C052181_g = UnitGroup(null, c_playerAny, RegionFromId(29), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9C052181_u = UnitGroupCount(auto9C052181_g, c_unitCountAll);
    for (;; auto9C052181_u -= 1) {
        auto9C052181_var = UnitGroupUnitFromEnd(auto9C052181_g, auto9C052181_u);
        if (auto9C052181_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto9C052181_var, false);
        libNtve_gf_PauseUnit(auto9C052181_var, true);
    }
    auto4E4DD3C6_g = UnitGroup(null, c_playerAny, RegionFromId(65), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4E4DD3C6_u = UnitGroupCount(auto4E4DD3C6_g, c_unitCountAll);
    for (;; auto4E4DD3C6_u -= 1) {
        auto4E4DD3C6_var = UnitGroupUnitFromEnd(auto4E4DD3C6_g, auto4E4DD3C6_u);
        if (auto4E4DD3C6_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto4E4DD3C6_var, false);
        libNtve_gf_PauseUnit(auto4E4DD3C6_var, true);
    }
    auto63A3D202_g = UnitGroup(null, c_playerAny, RegionFromId(60), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto63A3D202_u = UnitGroupCount(auto63A3D202_g, c_unitCountAll);
    for (;; auto63A3D202_u -= 1) {
        auto63A3D202_var = UnitGroupUnitFromEnd(auto63A3D202_g, auto63A3D202_u);
        if (auto63A3D202_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto63A3D202_var, true);
        libNtve_gf_PauseUnit(auto63A3D202_var, false);
    }
    auto389157BB_g = UnitGroup(null, c_playerAny, RegionFromId(90), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto389157BB_u = UnitGroupCount(auto389157BB_g, c_unitCountAll);
    for (;; auto389157BB_u -= 1) {
        auto389157BB_var = UnitGroupUnitFromEnd(auto389157BB_g, auto389157BB_u);
        if (auto389157BB_var == null) { break; }
        libNtve_gf_PauseUnit(auto389157BB_var, true);
    }
    auto41033EC2_g = gv_s4_UmojanArchangelGroup;
    auto41033EC2_u = UnitGroupCount(auto41033EC2_g, c_unitCountAll);
    for (;; auto41033EC2_u -= 1) {
        auto41033EC2_var = UnitGroupUnitFromEnd(auto41033EC2_g, auto41033EC2_u);
        if (auto41033EC2_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto41033EC2_var, false);
        libNtve_gf_PauseUnit(auto41033EC2_var, true);
    }
    auto40EB60F5_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionFromId(64), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto40EB60F5_u = UnitGroupCount(auto40EB60F5_g, c_unitCountAll);
    for (;; auto40EB60F5_u -= 1) {
        auto40EB60F5_var = UnitGroupUnitFromEnd(auto40EB60F5_g, auto40EB60F5_u);
        if (auto40EB60F5_var == null) { break; }
        UnitSetPosition(auto40EB60F5_var, PointFromId(652), false);
        UnitIssueOrder(auto40EB60F5_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(652)), c_orderQueueReplace);
    }
    ObjectiveShow(gv_objectiveDestroyDominionBase, PlayerGroupAll(), false);
    ObjectiveShow(gv_objectiveDestroyDominionBase2, PlayerGroupAll(), false);
    ObjectiveShow(gv_objectiveDestroyDominionBase2222, PlayerGroupAll(), false);
    libNtve_gf_ShowHideUnit(gv_kerrigan, true);
    libNtve_gf_ShowHideUnit(gv_kerrigan2, true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("MindBolt", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("PsionicLift", 0), true);
    TriggerStop(gt_HoldoutMusic);
    TriggerStop(gt_SecurityRoomMusic);
    TriggerExecute(gt_MidQArchangel, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DEBUGStartArchangelBossFight_Init () {
    gt_DEBUGStartArchangelBossFight = TriggerCreate("gt_DEBUGStartArchangelBossFight_Func");
    TriggerAddEventChatMessage(gt_DEBUGStartArchangelBossFight, c_playerAny, "boss", true);
    TriggerAddEventChatMessage(gt_DEBUGStartArchangelBossFight, c_playerAny, "s5", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game - Stage 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameStage1Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/E278BD50"), null, PointFromId(3));
    Wait(3.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveGettoSublevelDoorCreate, true, false);
    TriggerExecute(gt_ObjectiveKerriganMustSurviveCreate, true, true);
    TriggerQueueExit();
    TriggerExecute(gt_TipMissionHelpQ, true, true);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(40)), 3.0), 3.0, false);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/CEF80169"), null, UnitGetPosition(UnitFromId(40)));
    libSwaC_gf_CreateObjectivePing(true, UnitGetPosition(UnitFromId(40)), StringExternal("Param/Value/6586A304"));
    gv_s1_ObjectivePing = PingLastCreated();
    TriggerExecute(gt_TransmissionIntroQ, true, false);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_TransmissionIdleChatterQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameStage1Q_Init () {
    gt_StartGameStage1Q = TriggerCreate("gt_StartGameStage1Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game - Stage 2 Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameStage2Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto660FAB77_g;
    int auto660FAB77_u;
    unit auto660FAB77_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_DEBUGStartS02, false);
    UIAlertClear(gv_pLAYER_01_USER);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Lab02Level02", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    SoundPlayAtPoint(SoundLink("Umojan_Lab02Tram_Idle", -1), PlayerGroupAll(), PointFromId(87), 0.0, 100.0, 0.0);
    SoundPlayAtPoint(SoundLink("Umojan_Lab02Tram_Idle", -1), PlayerGroupAll(), PointFromId(997), 0.0, 100.0, 0.0);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/E669FAB1"), null, PointFromId(91));
    Wait(2.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveEscapeThroughSublevelCreate, true, true);
    TriggerQueueExit();
    TriggerExecute(gt_ShowFirstObjective, true, false);
    auto660FAB77_g = UnitGroup("Scientist", gv_pLAYER_02_DOMINION2, RegionFromId(44), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto660FAB77_u = UnitGroupCount(auto660FAB77_g, c_unitCountAll);
    for (;; auto660FAB77_u -= 1) {
        auto660FAB77_var = UnitGroupUnitFromEnd(auto660FAB77_g, auto660FAB77_u);
        if (auto660FAB77_var == null) { break; }
        UnitBehaviorAddPlayer(auto660FAB77_var, "Scared", gv_pLAYER_02_DOMINION2, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameStage2Q_Init () {
    gt_StartGameStage2Q = TriggerCreate("gt_StartGameStage2Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game - Stage 3 Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameStage3Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoDC42AA92_ae = 6;
    int autoDC42AA92_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_DEBUGStartS02, false);
    TriggerEnable(gt_DEBUGStartS03, false);
    UIAlertClear(gv_pLAYER_01_USER);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(532)), c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(1029)), c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_SetAnimationTimeScale(ActorFromDoodad(DoodadFromId(532)), c_animNameDefault, 0.5);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(73));
    gv_s3_TramRevealer1 = VisRevealerLastCreated();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/51A50410"), null, PointFromId(582));
    Wait(2.0, c_timeReal);
    autoDC42AA92_var = 1;
    for ( ; autoDC42AA92_var <= autoDC42AA92_ae; autoDC42AA92_var += 1 ) {
        libSwaC_gf_CreateObjectivePing(true, UnitGetPosition(gv_s3_TramEngineUnits[autoDC42AA92_var]), StringExternal("Param/Value/546D9158"));
        gv_s3_TramPings[autoDC42AA92_var] = PingLastCreated();
        PingSetScale(PingLastCreated(), 0.9);
    }
    Wait(2.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveDefendTheTramCreate, true, true);
    TriggerQueueExit();
    TriggerExecute(gt_CreateDestinationTimer, true, false);
    TriggerExecute(gt_CreateTramProgressBar, true, false);
    if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
        TriggerExecute(gt_StartTramAttacks, true, false);
    }
    else {
        TriggerExecute(gt_StartTramAttacksHard, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameStage3Q_Init () {
    gt_StartGameStage3Q = TriggerCreate("gt_StartGameStage3Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game - Stage 4 Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameStage4Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_DEBUGStartS02, false);
    TriggerEnable(gt_DEBUGStartS03, false);
    TriggerEnable(gt_DEBUGStartS04, false);
    UIAlertClear(gv_pLAYER_01_USER);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/2BCF3EEC"), null, PointFromId(565));
    TriggerExecute(gt_MakeCiviliansScared, true, false);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_UmojanMarinesMoveOut, true, false);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(653)), 3.0), 3.0, false);
    libSwaC_gf_CreateObjectivePing(true, UnitGetPosition(UnitFromId(653)), StringExternal("Param/Value/C874A459"));
    gv_s4_ObjectivePing = PingLastCreated();
    Wait(2.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveReachTheSpaceportCreate, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameStage4Q_Init () {
    gt_StartGameStage4Q = TriggerCreate("gt_StartGameStage4Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Low Health - Raynor
//--------------------------------------------------------------------------------------------------
bool gt_LowHealthRaynor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_kerrigan2, c_unitPropLife, c_unitPropCurrent) < (UnitGetPropertyFixed(gv_kerrigan2, c_unitPropLifeMax, c_unitPropNormal) * gv_heroHPThreshold)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionRaynorIsHurtQ, true, false);
    while (!((UnitGetPropertyFixed(gv_kerrigan2, c_unitPropLife, c_unitPropCurrent) >= (UnitGetPropertyFixed(gv_kerrigan2, c_unitPropLifeMax, c_unitPropNormal) * gv_heroHPThreshold)))) {
        Wait(1.0, c_timeGame);
    }
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LowHealthRaynor_Init () {
    gt_LowHealthRaynor = TriggerCreate("gt_LowHealthRaynor_Func");
    TriggerEnable(gt_LowHealthRaynor, false);
    TriggerAddEventUnitProperty(gt_LowHealthRaynor, UnitRefFromVariable("gv_kerrigan2"), c_unitPropLife);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Low Health - Kerrigan
//--------------------------------------------------------------------------------------------------
bool gt_LowHealthKerrigan_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_old;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_kerrigan) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_old = gv_kerriganHPBak;
    gv_kerriganHPBak = UnitGetPropertyFixed(gv_kerrigan, c_unitPropLife, c_unitPropCurrent);
    if ((gv_kerriganHPBak < lv_old) && (UnitGetPropertyFixed(gv_kerrigan, c_unitPropLifePercent, c_unitPropCurrent) <= (gv_heroHPThreshold * 100.0))) {
        if (((lv_old / UnitGetPropertyFixed(gv_kerrigan, c_unitPropLifeMax, c_unitPropCurrent)) > gv_heroHPThreshold)) {
            TriggerExecute(gt_TransmissionKerriganIsHurt, true, false);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LowHealthKerrigan_Init () {
    gt_LowHealthKerrigan = TriggerCreate("gt_LowHealthKerrigan_Func");
    TriggerAddEventUnitProperty(gt_LowHealthKerrigan, UnitRefFromVariable("gv_kerrigan"), c_unitPropLife);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Raynor Is Hurt Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionRaynorIsHurtQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_random;

    // Automatic Variable Declarations
    int autoBC5A9809_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_random = RandomInt(1, 2);
    gf_WaitifCriticalTransmissionisinprogress();
    TriggerQueueEnter();
    autoBC5A9809_val = lv_random;
    if (autoBC5A9809_val == 1) {
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libSwaC_gf_SendTransmissionCampaign(gv_kerrigan2, "zMission_Lab02|Line00051", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }
    else if (autoBC5A9809_val == 2) {
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libSwaC_gf_SendTransmissionCampaign(gv_kerrigan2, "zMission_Lab02|Line00050", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionRaynorIsHurtQ_Init () {
    gt_TransmissionRaynorIsHurtQ = TriggerCreate("gt_TransmissionRaynorIsHurtQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Kerrigan Is Hurt
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionKerriganIsHurt_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_random;
    bool lv_transmissionInProgress;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_criticalTransmissionPlaying = true;
    if ((libSwaC_gv_zS_SendTransmissionCampaignIndex != 0)) {
        lv_transmissionInProgress = true;
    }

    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    TransmissionClearAll();
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Lab02|Line00048", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    if ((lv_transmissionInProgress == false)) {
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    }

    gv_criticalTransmissionPlaying = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionKerriganIsHurt_Init () {
    gt_TransmissionKerriganIsHurt = TriggerCreate("gt_TransmissionKerriganIsHurt_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Incapacitated
//--------------------------------------------------------------------------------------------------
bool gt_HeroIncapacitated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(gv_kerrigan2, "Incapacitated") == true) && (UnitGroupHasUnit(gv_incappedHeroes, gv_kerrigan2) == false)) {
        UnitGroupAdd(gv_incappedHeroes, gv_kerrigan2);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroIncapacitated_Init () {
    gt_HeroIncapacitated = TriggerCreate("gt_HeroIncapacitated_Func");
    TriggerAddEventTimePeriodic(gt_HeroIncapacitated, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Recover Incapacitated Heroes
//--------------------------------------------------------------------------------------------------
bool gt_RecoverIncapacitatedHeroes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(gv_kerrigan2, "Incapacitated") == false) && (UnitGroupHasUnit(gv_incappedHeroes, gv_kerrigan2) == true)) {
        UnitGroupRemove(gv_incappedHeroes, gv_kerrigan2);
        if ((gv_raynorTarget != null)) {
            if ((gv_raynorMoving == true)) {
                UnitIssueOrder(gv_kerrigan2, OrderTargetingUnit(AbilityCommand("attack", 0), gv_raynorTarget), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(gv_kerrigan2, OrderTargetingUnit(AbilityCommand("attack", 0), gv_raynorTarget), c_orderQueueReplace);
                UnitIssueOrder(gv_kerrigan2, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
            }
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RecoverIncapacitatedHeroes_Init () {
    gt_RecoverIncapacitatedHeroes = TriggerCreate("gt_RecoverIncapacitatedHeroes_Func");
    TriggerAddEventTimePeriodic(gt_RecoverIncapacitatedHeroes, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button Flash Crushing Grip On
//--------------------------------------------------------------------------------------------------
bool gt_ButtonFlashCrushingGripOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_newTooltip;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_newTooltip = StringExternal("Param/Value/41BC3765");

    // Conditions
    if (testConds) {
        if (!((gv_flashButtonCrushingGrip == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("PsionicLift", 0), true);
    gv_flashButtonCrushingGrip = true;
    gf_ChangeButtonTooltip("PsionicLift", "Param/Value/41BC3765");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ButtonFlashCrushingGripOn_Init () {
    gt_ButtonFlashCrushingGripOn = TriggerCreate("gt_ButtonFlashCrushingGripOn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button Flash Crushing Grip Off
//--------------------------------------------------------------------------------------------------
bool gt_ButtonFlashCrushingGripOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_flashButtonCrushingGrip == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("PsionicLift", 0), false);
    gf_RestoreButtonTooltip("PsionicLift");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ButtonFlashCrushingGripOff_Init () {
    gt_ButtonFlashCrushingGripOff = TriggerCreate("gt_ButtonFlashCrushingGripOff_Func");
    TriggerAddEventButtonPressed(gt_ButtonFlashCrushingGripOff, c_playerAny, "PsionicLift");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button Flash Kinetic Blast On
//--------------------------------------------------------------------------------------------------
bool gt_ButtonFlashKineticBlastOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_newTooltip;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_newTooltip = StringExternal("Param/Value/3C0DAC4E");

    // Conditions
    if (testConds) {
        if (!((gv_flashButtonKineticBlast == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("MindBolt", 0), true);
    gv_flashButtonKineticBlast = true;
    gf_ChangeButtonTooltip("MindBolt", "Param/Value/3C0DAC4E");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ButtonFlashKineticBlastOn_Init () {
    gt_ButtonFlashKineticBlastOn = TriggerCreate("gt_ButtonFlashKineticBlastOn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button Flash Kinetic Blast Off
//--------------------------------------------------------------------------------------------------
bool gt_ButtonFlashKineticBlastOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_flashButtonKineticBlast == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("MindBolt", 0), false);
    gf_RestoreButtonTooltip("MindBolt");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ButtonFlashKineticBlastOff_Init () {
    gt_ButtonFlashKineticBlastOff = TriggerCreate("gt_ButtonFlashKineticBlastOff_Func");
    TriggerAddEventButtonPressed(gt_ButtonFlashKineticBlastOff, c_playerAny, "MindBolt");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan See Through Doors
//--------------------------------------------------------------------------------------------------
bool gt_KerriganSeeThroughDoors_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_searchRegion;

    // Automatic Variable Declarations
    unitgroup auto2720FF98_g;
    int auto2720FF98_u;
    unit auto2720FF98_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_searchRegion = RegionCircle(UnitGetPosition(gv_kerrigan), 11.0);
    auto2720FF98_g = gv_kerriganShareVisionDoors;
    auto2720FF98_u = UnitGroupCount(auto2720FF98_g, c_unitCountAll);
    for (;; auto2720FF98_u -= 1) {
        auto2720FF98_var = UnitGroupUnitFromEnd(auto2720FF98_g, auto2720FF98_u);
        if (auto2720FF98_var == null) { break; }
        if ((libNtve_gf_UnitInRegion(auto2720FF98_var, lv_searchRegion) == true) && (libNtve_gf_UnitIsVisibleToPlayer(auto2720FF98_var, gv_pLAYER_01_USER) == true)) {
            VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(auto2720FF98_var), 3.0), 0.75, false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganSeeThroughDoors_Init () {
    gt_KerriganSeeThroughDoors = TriggerCreate("gt_KerriganSeeThroughDoors_Func");
    TriggerAddEventTimePeriodic(gt_KerriganSeeThroughDoors, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Healerbot Recharging
//--------------------------------------------------------------------------------------------------
bool gt_HealerbotRecharging_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION2))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "HealthDispenser"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayOnUnit(SoundLink("Protoss_PowerDownSmall", -1), PlayerGroupAll(), EventUnit(), 8.0, 100.0, 0.0);
    TextTagCreate(StringExternal("Param/Value/7F218142"), 22, UnitGetPosition(EventUnit()), 2.0, true, true, PlayerGroupAll());
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 100.00, 0.00));
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    TextTagSetVelocity(TextTagLastCreated(), 0.5, 90.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HealerbotRecharging_Init () {
    gt_HealerbotRecharging = TriggerCreate("gt_HealerbotRecharging_Func");
    TriggerEnable(gt_HealerbotRecharging, false);
    TriggerAddEventUnitAbility(gt_HealerbotRecharging, null, AbilityCommand("HealthDispenser", 0), c_abilEffectStagePrep, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Healerbot Ready
//--------------------------------------------------------------------------------------------------
bool gt_HealerbotReady_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION2))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "HealthDispenser"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayOnUnit(SoundLink("ScavengingSystemsHealSound", -1), PlayerGroupAll(), EventUnit(), 8.0, 100.0, 0.0);
    TextTagCreate(StringExternal("Param/Value/BD187A1F"), 22, UnitGetPosition(EventUnit()), 2.0, true, true, PlayerGroupAll());
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 100.00, 0.00));
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    TextTagSetVelocity(TextTagLastCreated(), 0.5, 90.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HealerbotReady_Init () {
    gt_HealerbotReady = TriggerCreate("gt_HealerbotReady_Func");
    TriggerEnable(gt_HealerbotReady, false);
    TriggerAddEventUnitAbility(gt_HealerbotReady, null, AbilityCommand("HealthDispenser", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Healerbot Mouseover Tip
//--------------------------------------------------------------------------------------------------
bool gt_HealerbotMouseoverTip_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "HealthDispenserPickup"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetInfoTip(EventUnit(), UnitTypeGetName(UnitGetType(EventUnit())));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HealerbotMouseoverTip_Init () {
    gt_HealerbotMouseoverTip = TriggerCreate("gt_HealerbotMouseoverTip_Func");
    TriggerAddEventUnitRegion(gt_HealerbotMouseoverTip, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionIntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan2, "zBriefing_Lab02|Line00007", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_interruptableTransmission = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionIntroQ_Init () {
    gt_TransmissionIntroQ = TriggerCreate("gt_TransmissionIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Idle Chatter Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionIdleChatterQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_KerriganMovesTurnoffChatter, true);
    Wait(100.0, c_timeAI);
    if ((gv_s1_IdleChatterCheck == false)) {
        TriggerQueueEnter();
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
        gf_WaitifCriticalTransmissionisinprogress();
        libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Lab02|Line00156", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        gv_interruptableTransmission = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
        gf_WaitifCriticalTransmissionisinprogress();
        libSwaC_gf_SendTransmissionCampaign(gv_kerrigan2, "zMission_Lab02|Line00158", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        gv_interruptableTransmission = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionIdleChatterQ_Init () {
    gt_TransmissionIdleChatterQ = TriggerCreate("gt_TransmissionIdleChatterQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Moves - Turn off Chatter
//--------------------------------------------------------------------------------------------------
bool gt_KerriganMovesTurnoffChatter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_s1_IdleChatterCheck = true;
    TriggerStop(gt_TransmissionIdleChatterQ);
    TriggerEnable(gt_TransmissionIdleChatterQ, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganMovesTurnoffChatter_Init () {
    gt_KerriganMovesTurnoffChatter = TriggerCreate("gt_KerriganMovesTurnoffChatter_Func");
    TriggerEnable(gt_KerriganMovesTurnoffChatter, false);
    TriggerAddEventUnitBecomesIdle(gt_KerriganMovesTurnoffChatter, UnitRefFromVariable("gv_kerrigan"), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Dominion Encounter Q
//--------------------------------------------------------------------------------------------------
bool gt_FirstDominionEncounterQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_mister_Marauder;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TransmissionClear(gv_interruptableTransmission);
    lv_mister_Marauder = UnitFromId(29);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(1), 12.0, false);
    CameraLockInput(gv_pLAYER_01_USER, true);
    CameraPan(gv_pLAYER_01_USER, PointFromId(251), 2.5, -1, 10, false);
    libNtve_gf_AttachModelToUnit(lv_mister_Marauder, "BriefingUnitSelectRedSmall", "Ref_Head");
    libHots_gf_StoreActorForUnit(lv_mister_Marauder, 1, libNtve_gf_ActorLastCreated());
    libNtve_gf_ShareVisionofUnit(lv_mister_Marauder, true, gv_pLAYER_01_USER);
    UnitSetState(lv_mister_Marauder, c_unitStateStunned, true);
    libNtve_gf_MakeUnitUncommandable(gv_kerrigan, true);
    UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1778)), c_orderQueueReplace);
    UnitIssueOrder(gv_kerrigan, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    while (!((libNtve_gf_UnitInRegion(gv_kerrigan, RegionCircle(PointFromId(1778), 1.5)) == true))) {
        Wait(1.0, c_timeGame);
    }
    Wait(0.5, c_timeGame);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("MindBolt", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("move", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("attack", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("move", 1), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("stop", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("move", 2), false);
    libNtve_gf_MakeUnitUncommandable(gv_kerrigan, false);
    libNtve_gf_PauseUnit(gv_kerrigan, true);
    TriggerEnable(gt_FirstKineticBlastUsed, true);
    TriggerEnable(gt_FirstMarauderEngaged, true);
    TextTagCreate(StringExternal("Param/Value/7D05F033"), 24, UnitGetPosition(lv_mister_Marauder), 0.5, true, true, PlayerGroupAll());
    libHots_gf_StoreTextTagForUnit(lv_mister_Marauder, 2, TextTagLastCreated());
    TriggerQueueEnter();
    TriggerExecute(gt_ButtonFlashKineticBlastOn, true, false);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    gf_WaitifCriticalTransmissionisinprogress();
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Lab02|Line00002", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(8), "UmojanLabBackgroundCatwalk", c_animNameDefault, "Stand Work", c_animFlagNonLooping, c_animTimeDefault);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstDominionEncounterQ_Init () {
    gt_FirstDominionEncounterQ = TriggerCreate("gt_FirstDominionEncounterQ_Func");
    TriggerAddEventUnitRegion(gt_FirstDominionEncounterQ, UnitRefFromVariable("gv_kerrigan"), RegionFromId(1), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Kinetic Blast Used
//--------------------------------------------------------------------------------------------------
bool gt_FirstKineticBlastUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_misterMarauder;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_misterMarauder = UnitFromId(29);
    UnitSetState(lv_misterMarauder, c_unitStateStunned, false);
    libNtve_gf_PauseUnit(gv_kerrigan, false);
    CameraLockInput(gv_pLAYER_01_USER, false);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("MindBolt", 0), false);
    gf_RestoreButtonTooltip("MindBolt");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstKineticBlastUsed_Init () {
    gt_FirstKineticBlastUsed = TriggerCreate("gt_FirstKineticBlastUsed_Func");
    TriggerEnable(gt_FirstKineticBlastUsed, false);
    TriggerAddEventButtonPressed(gt_FirstKineticBlastUsed, gv_pLAYER_01_USER, "MindBolt");
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Marauder Engaged
//--------------------------------------------------------------------------------------------------
bool gt_FirstMarauderEngaged_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitSetState(UnitFromId(29), c_unitStateStunned, false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("move", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("attack", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("move", 1), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("stop", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("move", 2), true);
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitFromId(29), 1));
    TextTagDestroy(libHots_gf_TextTagForUnit(UnitFromId(29), 2));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstMarauderEngaged_Init () {
    gt_FirstMarauderEngaged = TriggerCreate("gt_FirstMarauderEngaged_Func");
    TriggerEnable(gt_FirstMarauderEngaged, false);
    TriggerAddEventUnitAbility(gt_FirstMarauderEngaged, UnitRefFromVariable("gv_kerrigan"), AbilityCommand("MindBolt", 0), c_abilEffectStagePrep, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Marauder Killed
//--------------------------------------------------------------------------------------------------
bool gt_FirstMarauderKilled_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_misterMarauder;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_FirstKineticBlastUsed, false);
    lv_misterMarauder = UnitFromId(29);
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(lv_misterMarauder, 1));
    TextTagDestroy(libHots_gf_TextTagForUnit(lv_misterMarauder, 2));
    gf_RestoreButtonTooltip("MindBolt");
    Wait(1.5, c_timeGame);
    TriggerExecute(gt_FirstDoorAttackQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstMarauderKilled_Init () {
    gt_FirstMarauderKilled = TriggerCreate("gt_FirstMarauderKilled_Func");
    TriggerAddEventUnitDied(gt_FirstMarauderKilled, UnitRefFromUnit(UnitFromId(29)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Door Attack Q
//--------------------------------------------------------------------------------------------------
bool gt_FirstDoorAttackQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoF6F8F1A5_g;
    int autoF6F8F1A5_u;
    unit autoF6F8F1A5_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitKill(UnitFromId(35));
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(6), 12.0, false);
    autoF6F8F1A5_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF6F8F1A5_u = UnitGroupCount(autoF6F8F1A5_g, c_unitCountAll);
    for (;; autoF6F8F1A5_u -= 1) {
        autoF6F8F1A5_var = UnitGroupUnitFromEnd(autoF6F8F1A5_g, autoF6F8F1A5_u);
        if (autoF6F8F1A5_var == null) { break; }
        libNtve_gf_PauseUnit(autoF6F8F1A5_var, false);
        AISetUnitScriptControlled(autoF6F8F1A5_var, false);
        AIAttackWaveUseUnit(gv_pLAYER_02_DOMINION, autoF6F8F1A5_var);
    }
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveSend(gv_pLAYER_02_DOMINION, 1, false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    gf_WaitifCriticalTransmissionisinprogress();
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan2, "zMission_Lab02|Line00001", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_interruptableTransmission = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstDoorAttackQ_Init () {
    gt_FirstDoorAttackQ = TriggerCreate("gt_FirstDoorAttackQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dead End 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_DeadEnd01Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TransmissionClear(gv_interruptableTransmission);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    gf_WaitifCriticalTransmissionisinprogress();
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan2, "zMission_Lab02|Line00153", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_interruptableTransmission = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DeadEnd01Q_Init () {
    gt_DeadEnd01Q = TriggerCreate("gt_DeadEnd01Q_Func");
    TriggerAddEventUnitRegion(gt_DeadEnd01Q, UnitRefFromVariable("gv_kerrigan"), RegionFromId(104), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: See Second Gate Q
//--------------------------------------------------------------------------------------------------
bool gt_SeeSecondGateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TransmissionClear(gv_interruptableTransmission);
    TriggerQueueEnter();
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(7), 10.0, true);
    UnitIssueOrder(UnitFromId(25), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(678)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(25), OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(550)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(99), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(667)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(99), OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(550)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(45), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(666)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(45), OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(550)), c_orderQueueAddToEnd);
    TriggerExecute(gt_SecondGateAttack, true, false);
    TriggerExecute(gt_TransmissionUmojanMarines, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SeeSecondGateQ_Init () {
    gt_SeeSecondGateQ = TriggerCreate("gt_SeeSecondGateQ_Func");
    TriggerAddEventUnitRegion(gt_SeeSecondGateQ, UnitRefFromVariable("gv_kerrigan"), RegionFromId(4), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Umojan Marines
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionUmojanMarines_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    gf_WaitifCriticalTransmissionisinprogress();
    libSwaC_gf_SendTransmissionCampaign(UnitFromId(25), "zMission_Lab02|Line00003", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_interruptableTransmission = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    gf_WaitifCriticalTransmissionisinprogress();
    libSwaC_gf_SendTransmissionCampaign(UnitFromId(45), "zMission_Lab02|Line00004", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_interruptableTransmission = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionUmojanMarines_Init () {
    gt_TransmissionUmojanMarines = TriggerCreate("gt_TransmissionUmojanMarines_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Second Gate Attack
//--------------------------------------------------------------------------------------------------
bool gt_SecondGateAttack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoBA616345_g;
    int autoBA616345_u;
    unit autoBA616345_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlayAtPoint(SoundLink("Event_Lab02_AlarmIncomingAttack", -1), PlayerGroupAll(), PointFromId(679), 8.0, 100.0, 0.0);
    Wait(3.0, c_timeGame);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(2), 30.0, true);
    UnitKill(UnitFromId(46));
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, UnitGetPosition(UnitFromId(46)));
    autoBA616345_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBA616345_u = UnitGroupCount(autoBA616345_g, c_unitCountAll);
    for (;; autoBA616345_u -= 1) {
        autoBA616345_var = UnitGroupUnitFromEnd(autoBA616345_g, autoBA616345_u);
        if (autoBA616345_var == null) { break; }
        libNtve_gf_PauseUnit(autoBA616345_var, false);
        AISetUnitScriptControlled(autoBA616345_var, false);
        AIAttackWaveUseUnit(gv_pLAYER_02_DOMINION, autoBA616345_var);
    }
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveSend(gv_pLAYER_02_DOMINION, 1, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SecondGateAttack_Init () {
    gt_SecondGateAttack = TriggerCreate("gt_SecondGateAttack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dead End 02 Q
//--------------------------------------------------------------------------------------------------
bool gt_DeadEnd02Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TransmissionClear(gv_interruptableTransmission);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    gf_WaitifCriticalTransmissionisinprogress();
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan2, "zMission_Lab02|Line00141", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_interruptableTransmission = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DeadEnd02Q_Init () {
    gt_DeadEnd02Q = TriggerCreate("gt_DeadEnd02Q_Func");
    TriggerAddEventUnitRegion(gt_DeadEnd02Q, UnitRefFromVariable("gv_kerrigan"), RegionFromId(102), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reached Restoration Terminal Q
//--------------------------------------------------------------------------------------------------
bool gt_ReachedRestorationTerminalQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_mister_Scientist;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TransmissionClear(gv_interruptableTransmission);
    lv_mister_Scientist = UnitFromId(86);
    TriggerQueueEnter();
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(11), 12.0, true);
    MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(9)), 2.0, Color(0.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/D43194CE"), null, RegionGetCenter(RegionFromId(9)));
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelect", RegionGetCenter(RegionFromId(9)));
    gv_s1_HealingTerminalPingActor = libNtve_gf_ActorLastCreated();
    UnitIssueOrder(lv_mister_Scientist, OrderTargetingUnit(AbilityCommand("move", 4), EventUnit()), c_orderQueueReplace);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    if ((UnitIsAlive(lv_mister_Scientist) == true)) {
        gf_WaitifCriticalTransmissionisinprogress();
        libSwaC_gf_SendTransmissionCampaign(lv_mister_Scientist, "zMission_Lab02|Line00182", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_LeavePortraitVisibleAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        gv_s1_HealBotScientistTrans = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
    }

    if ((UnitIsAlive(lv_mister_Scientist) == true)) {
        gf_WaitifCriticalTransmissionisinprogress();
        libSwaC_gf_SendTransmissionCampaign(lv_mister_Scientist, "zMission_Lab02|Line00007", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        gv_s1_HealBotScientistTrans = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
    }

    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    if ((UnitIsAlive(lv_mister_Scientist) == true)) {
        UnitBehaviorAddPlayer(lv_mister_Scientist, "Run", gv_pLAYER_02_DOMINION2, 1);
        UnitIssueOrder(lv_mister_Scientist, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1683)), c_orderQueueReplace);
    }

    TriggerEnable(gt_LowHealthKerrigan, true);
    TriggerEnable(gt_LowHealthRaynor, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReachedRestorationTerminalQ_Init () {
    gt_ReachedRestorationTerminalQ = TriggerCreate("gt_ReachedRestorationTerminalQ_Func");
    TriggerAddEventUnitRegion(gt_ReachedRestorationTerminalQ, UnitRefFromVariable("gv_kerrigan"), RegionFromId(11), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Enters Healing Terminal 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_PlayerEntersHealingTerminal01Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventUnit() == UnitFromId(83)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(gv_s1_HealingTerminalPingActor);
    UnitKill(UnitFromId(83));
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(86), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    gf_WaitifCriticalTransmissionisinprogress();
    if ((EventUnit() == gv_kerrigan)) {
        libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Lab02|Line00009", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        libSwaC_gf_SendTransmissionCampaign(gv_kerrigan2, "zMission_Lab02|Line00008", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    gv_interruptableTransmission = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerEnable(gt_HealerbotRecharging, true);
    TriggerEnable(gt_HealerbotReady, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerEntersHealingTerminal01Q_Init () {
    gt_PlayerEntersHealingTerminal01Q = TriggerCreate("gt_PlayerEntersHealingTerminal01Q_Func");
    TriggerAddEventUnitAbility(gt_PlayerEntersHealingTerminal01Q, null, AbilityCommand("HealthDispenser", 0), c_abilEffectStagePrep, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dead End 03 Q
//--------------------------------------------------------------------------------------------------
bool gt_DeadEnd03Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    gf_WaitifCriticalTransmissionisinprogress();
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan2, "zMission_Lab02|Line00146", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_interruptableTransmission = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    TransmissionClear(gv_interruptableTransmission);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DeadEnd03Q_Init () {
    gt_DeadEnd03Q = TriggerCreate("gt_DeadEnd03Q_Func");
    TriggerAddEventUnitRegion(gt_DeadEnd03Q, UnitRefFromVariable("gv_kerrigan"), RegionFromId(103), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Teach Crushing Grip Q
//--------------------------------------------------------------------------------------------------
bool gt_TeachCrushingGripQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto03517DB7_g;
    int auto03517DB7_u;
    unit auto03517DB7_var;
    unitgroup auto962D517F_g;
    int auto962D517F_u;
    unit auto962D517F_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(10));
    gv_s1_BridgeBattleRevealer = VisRevealerLastCreated();
    CameraLockInput(gv_pLAYER_01_USER, true);
    CameraPan(gv_pLAYER_01_USER, PointFromId(1042), 2.5, -1, 10, false);
    TriggerEnable(gt_MakeBridgeBattleForcesTakeDamage, true);
    TriggerEnable(gt_FirstCrushingGripUsed, true);
    TriggerEnable(gt_BridgeDominionUnitDies, true);
    TriggerEnable(gt_DominionBridgeForcesDeadQ, true);
    TriggerEnable(gt_UmojanBridgeForcesDead, true);
    auto03517DB7_g = gv_s1_BridgeCrushingGripDominion;
    auto03517DB7_u = UnitGroupCount(auto03517DB7_g, c_unitCountAll);
    for (;; auto03517DB7_u -= 1) {
        auto03517DB7_var = UnitGroupUnitFromEnd(auto03517DB7_g, auto03517DB7_u);
        if (auto03517DB7_var == null) { break; }
        libNtve_gf_PauseUnit(auto03517DB7_var, false);
        libNtve_gf_ShareVisionofUnit(auto03517DB7_var, true, gv_pLAYER_02_DOMINION2);
    }
    auto962D517F_g = gv_s1_BridgeCrushingGripUmojan;
    auto962D517F_u = UnitGroupCount(auto962D517F_g, c_unitCountAll);
    for (;; auto962D517F_u -= 1) {
        auto962D517F_var = UnitGroupUnitFromEnd(auto962D517F_g, auto962D517F_u);
        if (auto962D517F_var == null) { break; }
        libNtve_gf_PauseUnit(auto962D517F_var, false);
        UnitIssueOrder(auto962D517F_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    }
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/B111C448"), null, RegionGetCenter(RegionFromId(98)));
    MinimapPing(PlayerGroupSingle(gv_pLAYER_01_USER), RegionGetCenter(RegionFromId(98)), 2.0, Color(100.00, 0.00, 0.00));
    libNtve_gf_MakeUnitUncommandable(gv_kerrigan, true);
    UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(763)), c_orderQueueReplace);
    UnitIssueOrder(gv_kerrigan, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    while (!((libNtve_gf_UnitInRegion(gv_kerrigan, RegionCircle(PointFromId(763), 1.5)) == true))) {
        Wait(1.0, c_timeGame);
    }
    Wait(1.0, c_timeGame);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("PsionicLift", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("MindBolt", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("move", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("attack", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("move", 1), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("stop", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("move", 2), false);
    libNtve_gf_MakeUnitUncommandable(gv_kerrigan, false);
    libNtve_gf_PauseUnit(gv_kerrigan, true);
    TriggerExecute(gt_ButtonFlashCrushingGripOn, true, false);
    libSwaC_gf_CreateReticleEffectAndTextTagAtPoint(libSwaC_ge_CampaginReticleType_TerranEnemy, libSwaC_ge_CampaginReticleSize_Large, StringExternal("Param/Value/11D0F01C"), RegionGetCenter(RegionFromId(98)));
    gv_s1_UseCrushingGripHerePingActor = libNtve_gf_ActorLastCreated();
    gv_s1_UseCrushingGripHereTag = TextTagLastCreated();
    TransmissionClearAll();
    TriggerQueueEnter();
    if ((UnitGroupCount(gv_s1_BridgeCrushingGripDominion, c_unitCountAlive) > 0)) {
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
        gf_WaitifCriticalTransmissionisinprogress();
        libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Lab02|Line00052", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TeachCrushingGripQ_Init () {
    gt_TeachCrushingGripQ = TriggerCreate("gt_TeachCrushingGripQ_Func");
    TriggerAddEventUnitRegion(gt_TeachCrushingGripQ, UnitRefFromVariable("gv_kerrigan"), RegionFromId(5), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Crushing Grip Used
//--------------------------------------------------------------------------------------------------
bool gt_FirstCrushingGripUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_PauseUnit(gv_kerrigan, false);
    CameraLockInput(gv_pLAYER_01_USER, false);
    Wait(1.0, c_timeGame);
    libNtve_gf_KillModel(gv_s1_UseCrushingGripHerePingActor);
    TextTagDestroy(gv_s1_UseCrushingGripHereTag);
    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("PsionicLift", 0), false);
    gf_RestoreButtonTooltip("PsionicLift");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstCrushingGripUsed_Init () {
    gt_FirstCrushingGripUsed = TriggerCreate("gt_FirstCrushingGripUsed_Func");
    TriggerEnable(gt_FirstCrushingGripUsed, false);
    TriggerAddEventButtonPressed(gt_FirstCrushingGripUsed, gv_pLAYER_01_USER, "PsionicLift");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Make Bridge Battle Forces Take Damage
//--------------------------------------------------------------------------------------------------
bool gt_MakeBridgeBattleForcesTakeDamage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto35BBCBF7_g;
    int auto35BBCBF7_u;
    unit auto35BBCBF7_var;
    unitgroup auto20F581FA_g;
    int auto20F581FA_u;
    unit auto20F581FA_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("MindBolt", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("move", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("attack", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("move", 1), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("stop", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("move", 2), true);
    VisRevealerDestroy(gv_s1_BridgeBattleRevealer);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(10), 8.0, false);
    auto35BBCBF7_g = gv_s1_BridgeCrushingGripDominion;
    auto35BBCBF7_u = UnitGroupCount(auto35BBCBF7_g, c_unitCountAll);
    for (;; auto35BBCBF7_u -= 1) {
        auto35BBCBF7_var = UnitGroupUnitFromEnd(auto35BBCBF7_g, auto35BBCBF7_u);
        if (auto35BBCBF7_var == null) { break; }
        libNtve_gf_ChangeUnitDamage(auto35BBCBF7_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    }
    auto20F581FA_g = gv_s1_BridgeCrushingGripUmojan;
    auto20F581FA_u = UnitGroupCount(auto20F581FA_g, c_unitCountAll);
    for (;; auto20F581FA_u -= 1) {
        auto20F581FA_var = UnitGroupUnitFromEnd(auto20F581FA_g, auto20F581FA_u);
        if (auto20F581FA_var == null) { break; }
        libNtve_gf_ChangeUnitDamage(auto20F581FA_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MakeBridgeBattleForcesTakeDamage_Init () {
    gt_MakeBridgeBattleForcesTakeDamage = TriggerCreate("gt_MakeBridgeBattleForcesTakeDamage_Func");
    TriggerEnable(gt_MakeBridgeBattleForcesTakeDamage, false);
    TriggerAddEventUnitRange(gt_MakeBridgeBattleForcesTakeDamage, UnitRefFromVariable("gv_kerrigan"), UnitFromId(784), 7.0, true);
    TriggerAddEventUnitAbility(gt_MakeBridgeBattleForcesTakeDamage, UnitRefFromVariable("gv_kerrigan"), AbilityCommand("PsionicLift", 0), c_abilEffectStagePrep, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bridge Dominion Unit Dies
//--------------------------------------------------------------------------------------------------
bool gt_BridgeDominionUnitDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(gv_s1_BridgeCrushingGripDominion, c_unitCountAlive) < 3))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(1.0, c_timeGame);
    libNtve_gf_KillModel(gv_s1_UseCrushingGripHerePingActor);
    TextTagDestroy(gv_s1_UseCrushingGripHereTag);
    gf_RestoreButtonTooltip("PsionicLift");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeDominionUnitDies_Init () {
    gt_BridgeDominionUnitDies = TriggerCreate("gt_BridgeDominionUnitDies_Func");
    TriggerEnable(gt_BridgeDominionUnitDies, false);
    TriggerAddEventUnitDied(gt_BridgeDominionUnitDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Bridge Forces Dead Q
//--------------------------------------------------------------------------------------------------
bool gt_DominionBridgeForcesDeadQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_mister_Marine;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(gv_s1_BridgeCrushingGripUmojan, c_unitCountAlive) > 0))) {
            return false;
        }

        if (!((UnitGroupCount(gv_s1_BridgeCrushingGripDominion, c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_mister_Marine = UnitFromId(845);
    Wait(2.0, c_timeGame);
    TriggerQueueEnter();
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(38), 12.0, false);
    TriggerExecute(gt_UmojanFleeBridgeArea, true, false);
    if ((UnitIsAlive(lv_mister_Marine) == true)) {
        TransmissionClear(gv_interruptableTransmission);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
        gf_WaitifCriticalTransmissionisinprogress();
        libSwaC_gf_SendTransmissionCampaign(lv_mister_Marine, "zMission_Lab02|Line00155", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        gv_interruptableTransmission = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionBridgeForcesDeadQ_Init () {
    gt_DominionBridgeForcesDeadQ = TriggerCreate("gt_DominionBridgeForcesDeadQ_Func");
    TriggerEnable(gt_DominionBridgeForcesDeadQ, false);
    TriggerAddEventTimePeriodic(gt_DominionBridgeForcesDeadQ, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Umojan Bridge Forces Dead
//--------------------------------------------------------------------------------------------------
bool gt_UmojanBridgeForcesDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoB59DBB5F_g;
    int autoB59DBB5F_u;
    unit autoB59DBB5F_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(gv_s1_BridgeCrushingGripUmojan, c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoB59DBB5F_g = gv_s1_BridgeCrushingGripDominion;
    autoB59DBB5F_u = UnitGroupCount(autoB59DBB5F_g, c_unitCountAll);
    for (;; autoB59DBB5F_u -= 1) {
        autoB59DBB5F_var = UnitGroupUnitFromEnd(autoB59DBB5F_g, autoB59DBB5F_u);
        if (autoB59DBB5F_var == null) { break; }
        UnitIssueOrder(autoB59DBB5F_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UmojanBridgeForcesDead_Init () {
    gt_UmojanBridgeForcesDead = TriggerCreate("gt_UmojanBridgeForcesDead_Func");
    TriggerEnable(gt_UmojanBridgeForcesDead, false);
    TriggerAddEventUnitDied(gt_UmojanBridgeForcesDead, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Umojan Flee Bridge Area
//--------------------------------------------------------------------------------------------------
bool gt_UmojanFleeBridgeArea_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_secondGroupSoundOrigin;

    // Automatic Variable Declarations
    unitgroup auto0917D336_g;
    int auto0917D336_u;
    unit auto0917D336_var;
    unitgroup auto3D76EFAA_g;
    int auto3D76EFAA_u;
    unit auto3D76EFAA_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto0917D336_g = gv_s1_BridgeCrushingGripUmojan;
    auto0917D336_u = UnitGroupCount(auto0917D336_g, c_unitCountAll);
    for (;; auto0917D336_u -= 1) {
        auto0917D336_var = UnitGroupUnitFromEnd(auto0917D336_g, auto0917D336_u);
        if (auto0917D336_var == null) { break; }
        if ((UnitGetType(auto0917D336_var) == "Scientist")) {
            UnitBehaviorAddPlayer(auto0917D336_var, "Run", gv_pLAYER_02_DOMINION2, 1);
        }

        UnitIssueOrder(auto0917D336_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(850)), c_orderQueueReplace);
        Wait(0.25, c_timeGame);
    }
    auto3D76EFAA_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionFromId(97), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3D76EFAA_u = UnitGroupCount(auto3D76EFAA_g, c_unitCountAll);
    for (;; auto3D76EFAA_u -= 1) {
        auto3D76EFAA_var = UnitGroupUnitFromEnd(auto3D76EFAA_g, auto3D76EFAA_u);
        if (auto3D76EFAA_var == null) { break; }
        if ((UnitGetType(auto3D76EFAA_var) == "Scientist")) {
            UnitBehaviorAddPlayer(auto3D76EFAA_var, "Run", gv_pLAYER_02_DOMINION2, 1);
        }
        else {
            if ((lv_secondGroupSoundOrigin == null)) {
                lv_secondGroupSoundOrigin = auto3D76EFAA_var;
            }

        }
        UnitIssueOrder(auto3D76EFAA_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(850)), c_orderQueueReplace);
    }
    while (!(((UnitGroupCount(gv_s1_BridgeCrushingGripUmojan, c_unitCountAlive) == 0) || (DistanceBetweenPoints(UnitGetPosition(gv_kerrigan), UnitGroupCenterOfGroup(gv_s1_BridgeCrushingGripUmojan)) < 2.0)))) {
        Wait(0.25, c_timeGame);
    }
    if ((UnitGroupCount(gv_s1_BridgeCrushingGripUmojan, c_unitCountAlive) > 0)) {
        SoundPlayOnUnit(SoundLink("zLab_GroupRunBy_mono1", -1), PlayerGroupAll(), UnitGroupUnit(gv_s1_BridgeCrushingGripUmojan, 1), 4.0, 100.0, 0.0);
    }

    if ((lv_secondGroupSoundOrigin != null)) {
        while (!((DistanceBetweenPoints(UnitGetPosition(gv_kerrigan), UnitGetPosition(lv_secondGroupSoundOrigin)) < 2.0))) {
            Wait(0.25, c_timeGame);
        }
        SoundPlayOnUnit(SoundLink("zLab_GroupRunBy_stereo1", -1), PlayerGroupAll(), lv_secondGroupSoundOrigin, 4.0, 100.0, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UmojanFleeBridgeArea_Init () {
    gt_UmojanFleeBridgeArea = TriggerCreate("gt_UmojanFleeBridgeArea_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Umojan At Extraction Point 01
//--------------------------------------------------------------------------------------------------
bool gt_RemoveUmojanAtExtractionPoint01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION2))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnit());
    SoundPlayAtPoint(SoundLink("Medivac_Load", -1), PlayerGroupAll(), PointFromId(850), 8.0, 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveUmojanAtExtractionPoint01_Init () {
    gt_RemoveUmojanAtExtractionPoint01 = TriggerCreate("gt_RemoveUmojanAtExtractionPoint01_Func");
    TriggerAddEventUnitRange(gt_RemoveUmojanAtExtractionPoint01, null, UnitFromId(84), 2.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reached Drop Pod Platform Q
//--------------------------------------------------------------------------------------------------
bool gt_ReachedDropPodPlatformQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto27ED0BFE_g;
    int auto27ED0BFE_u;
    unit auto27ED0BFE_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TransmissionClear(gv_interruptableTransmission);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(13), 12.0, false);
    auto27ED0BFE_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionFromId(13), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto27ED0BFE_u = UnitGroupCount(auto27ED0BFE_g, c_unitCountAll);
    for (;; auto27ED0BFE_u -= 1) {
        auto27ED0BFE_var = UnitGroupUnitFromEnd(auto27ED0BFE_g, auto27ED0BFE_u);
        if (auto27ED0BFE_var == null) { break; }
        if ((UnitGetType(auto27ED0BFE_var) == "Scientist")) {
            UnitBehaviorAddPlayer(auto27ED0BFE_var, "Run", gv_pLAYER_02_DOMINION2, 1);
        }

        UnitIssueOrder(auto27ED0BFE_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(850)), c_orderQueueReplace);
    }
    TriggerQueueEnter();
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZLab02MusicEvent9_Ambush03", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    gf_WaitifCriticalTransmissionisinprogress();
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab02|Line00054", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_interruptableTransmission = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerExecute(gt_DropPodCrashing01, true, false);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    gf_WaitifCriticalTransmissionisinprogress();
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Lab02|Line00055", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_interruptableTransmission = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReachedDropPodPlatformQ_Init () {
    gt_ReachedDropPodPlatformQ = TriggerCreate("gt_ReachedDropPodPlatformQ_Func");
    TriggerAddEventUnitRegion(gt_ReachedDropPodPlatformQ, UnitRefFromVariable("gv_kerrigan"), RegionFromId(13), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Drop Pod Crashing 01
//--------------------------------------------------------------------------------------------------
bool gt_DropPodCrashing01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoD1AA4B39_g;
    int autoD1AA4B39_u;
    unit autoD1AA4B39_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitBehaviorAddPlayer(UnitFromId(160), "UmojanLabCrashSite", gv_pLAYER_02_DOMINION2, 1);
    Wait(1.5, c_timeGame);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, RegionGetCenter(RegionFromId(16)));
    CameraShakeStart(gv_pLAYER_01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.3, 2.0, 100.0, 1.5);
    autoD1AA4B39_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionFromId(16), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD1AA4B39_u = UnitGroupCount(autoD1AA4B39_g, c_unitCountAll);
    for (;; autoD1AA4B39_u -= 1) {
        autoD1AA4B39_var = UnitGroupUnitFromEnd(autoD1AA4B39_g, autoD1AA4B39_u);
        if (autoD1AA4B39_var == null) { break; }
        UnitKill(autoD1AA4B39_var);
    }
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(16), "Decal");
    TerrainShowRegion(RegionFromId(16), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DropPodCrashing01_Init () {
    gt_DropPodCrashing01 = TriggerCreate("gt_DropPodCrashing01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Drop Pod Landing 01
//--------------------------------------------------------------------------------------------------
bool gt_DropPodLanding01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_dropPodGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dropPodGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(libHots_gf_DifficultyValueInt2(4, 4, 3), "Marine", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION, PointFromId(167));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_dropPodGroup);
    libNtve_gf_CreateUnitsWithDefaultFacing(libHots_gf_DifficultyValueInt2(0, 0, 1), "Marauder", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION, PointFromId(167));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_dropPodGroup);
    libSwaC_gf_CreateDropPod(libSwaC_ge_DropPodRace_Terran, PointFromId(151), lv_dropPodGroup, false, gv_pLAYER_02_DOMINION);
    Wait(3.0, c_timeGame);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Terran, PointFromId(151));
    CameraShakeStart(gv_pLAYER_01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.25, 2.0, 100.0, 1.0);
    libNtve_gf_ShowHideUnit(UnitFromId(155), true);
    Wait(1.5, c_timeGame);
    UnitCreate(1, "UmojanLabCeilingTrash", 0, 0, PointFromId(508), libNtve_gf_RandomAngle());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DropPodLanding01_Init () {
    gt_DropPodLanding01 = TriggerCreate("gt_DropPodLanding01_Func");
    TriggerAddEventUnitRegion(gt_DropPodLanding01, UnitRefFromVariable("gv_kerrigan"), RegionFromId(17), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Where Are Umojans Going? Q
//--------------------------------------------------------------------------------------------------
bool gt_WhereAreUmojansGoingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    gf_WaitifCriticalTransmissionisinprogress();
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Lab02|Line00056", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_interruptableTransmission = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    gf_WaitifCriticalTransmissionisinprogress();
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan2, "zMission_Lab02|Line00057", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_interruptableTransmission = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WhereAreUmojansGoingQ_Init () {
    gt_WhereAreUmojansGoingQ = TriggerCreate("gt_WhereAreUmojansGoingQ_Func");
    TriggerAddEventUnitRegion(gt_WhereAreUmojansGoingQ, UnitRefFromVariable("gv_kerrigan"), RegionFromId(129), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Drop Pod Landing 02
//--------------------------------------------------------------------------------------------------
bool gt_DropPodLanding02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_dropPodGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dropPodGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_DropPodCrashing02, true, false);
    libNtve_gf_CreateUnitsWithDefaultFacing(libHots_gf_DifficultyValueInt2(2, 2, 2), "Marine", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION, PointFromId(167));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_dropPodGroup);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ghost", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION, PointFromId(167));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_dropPodGroup);
    libNtve_gf_CreateUnitsWithDefaultFacing(libHots_gf_DifficultyValueInt2(0, 0, 1), "Firebat", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION, PointFromId(167));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_dropPodGroup);
    libSwaC_gf_CreateDropPod(libSwaC_ge_DropPodRace_Terran, PointFromId(153), lv_dropPodGroup, false, gv_pLAYER_02_DOMINION);
    Wait(3.0, c_timeGame);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Terran, PointFromId(153));
    CameraShakeStart(gv_pLAYER_01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.25, 2.0, 100.0, 1.0);
    libNtve_gf_ShowHideUnit(UnitFromId(156), true);
    Wait(3.0, c_timeGame);
    UnitCreate(1, "UmojanLabCeilingTrash", 0, 0, PointFromId(583), libNtve_gf_RandomAngle());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DropPodLanding02_Init () {
    gt_DropPodLanding02 = TriggerCreate("gt_DropPodLanding02_Func");
    TriggerAddEventUnitRegion(gt_DropPodLanding02, UnitRefFromVariable("gv_kerrigan"), RegionFromId(18), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Drop Pod Crashing 02
//--------------------------------------------------------------------------------------------------
bool gt_DropPodCrashing02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto1C8997A3_g;
    int auto1C8997A3_u;
    unit auto1C8997A3_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.5, c_timeGame);
    UnitBehaviorAddPlayer(UnitFromId(168), "UmojanLabCrashSite", gv_pLAYER_02_DOMINION2, 1);
    Wait(1.5, c_timeGame);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, RegionGetCenter(RegionFromId(20)));
    CameraShakeStart(gv_pLAYER_01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.3, 2.0, 100.0, 1.5);
    auto1C8997A3_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionFromId(20), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1C8997A3_u = UnitGroupCount(auto1C8997A3_g, c_unitCountAll);
    for (;; auto1C8997A3_u -= 1) {
        auto1C8997A3_var = UnitGroupUnitFromEnd(auto1C8997A3_g, auto1C8997A3_u);
        if (auto1C8997A3_var == null) { break; }
        UnitKill(auto1C8997A3_var);
    }
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(20), "Decal");
    TerrainShowRegion(RegionFromId(20), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DropPodCrashing02_Init () {
    gt_DropPodCrashing02 = TriggerCreate("gt_DropPodCrashing02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Drop Pod Landing 03
//--------------------------------------------------------------------------------------------------
bool gt_DropPodLanding03_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_dropPodGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dropPodGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Marine", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION, PointFromId(167));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_dropPodGroup);
    libNtve_gf_CreateUnitsWithDefaultFacing(libHots_gf_DifficultyValueInt2(1, 1, 2), "Marauder", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION, PointFromId(167));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_dropPodGroup);
    libSwaC_gf_CreateDropPod(libSwaC_ge_DropPodRace_Terran, PointFromId(154), lv_dropPodGroup, false, gv_pLAYER_02_DOMINION);
    Wait(2.0, c_timeGame);
    UnitKill(UnitFromId(943));
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Terran, PointFromId(154));
    CameraShakeStart(gv_pLAYER_01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.25, 2.0, 100.0, 1.0);
    Wait(0.5, c_timeGame);
    libNtve_gf_ShowHideUnit(UnitFromId(157), true);
    Wait(2.5, c_timeGame);
    UnitCreate(1, "UmojanLabCeilingTrash", 0, 0, PointFromId(742), libNtve_gf_RandomAngle());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DropPodLanding03_Init () {
    gt_DropPodLanding03 = TriggerCreate("gt_DropPodLanding03_Func");
    TriggerAddEventUnitRegion(gt_DropPodLanding03, UnitRefFromVariable("gv_kerrigan"), RegionFromId(19), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reached Sublevel Door Area Q
//--------------------------------------------------------------------------------------------------
bool gt_ReachedSublevelDoorAreaQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_MoveUmojantoDefensivePositions, true, false);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "RaynorLabMagazineShortLeash", 1);
    gv_raynorMoving = true;
    gv_raynorTarget = UnitFromId(40);
    TriggerQueueEnter();
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(125), 12.0, false);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    gf_WaitifCriticalTransmissionisinprogress();
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan2, "zMission_Lab02|Line00058", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gf_WaitifCriticalTransmissionisinprogress();
    libSwaC_gf_SendTransmissionCampaign(UnitFromId(114), "zMission_Lab02|Line00059", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReachedSublevelDoorAreaQ_Init () {
    gt_ReachedSublevelDoorAreaQ = TriggerCreate("gt_ReachedSublevelDoorAreaQ_Func");
    TriggerAddEventUnitRegion(gt_ReachedSublevelDoorAreaQ, UnitRefFromVariable("gv_kerrigan"), RegionFromId(14), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Move Umojan to Defensive Positions
//--------------------------------------------------------------------------------------------------
bool gt_MoveUmojantoDefensivePositions_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupAdd(gv_s1_SublevelDoorUmojan, UnitFromId(111));
    UnitGroupAdd(gv_s1_SublevelDoorUmojan, UnitFromId(110));
    UnitGroupAdd(gv_s1_SublevelDoorUmojan, UnitFromId(112));
    UnitGroupAdd(gv_s1_SublevelDoorUmojan, UnitFromId(113));
    UnitGroupAdd(gv_s1_SublevelDoorUmojan, UnitFromId(114));
    Wait(3.0, c_timeGame);
    UnitIssueOrder(UnitFromId(112), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(180)), c_orderQueueReplace);
    Wait(0.6, c_timeGame);
    UnitIssueOrder(UnitFromId(111), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(181)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(113), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(183)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    UnitIssueOrder(UnitFromId(110), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(184)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(114), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(182)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoveUmojantoDefensivePositions_Init () {
    gt_MoveUmojantoDefensivePositions = TriggerCreate("gt_MoveUmojantoDefensivePositions_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Sublevel Door Q
//--------------------------------------------------------------------------------------------------
bool gt_ActivateSublevelDoorQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(gv_kerrigan, RegionFromId(24)) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(gv_kerrigan2, RegionFromId(24)) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/E4185BEA"));
    UnitKill(UnitFromId(40));
    PingDestroy(gv_s1_ObjectivePing);
    UnitIssueOrder(UnitFromId(957), Order(AbilityCommand("UmojanLabDoorsThinRight", 0)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathingBlocker4x4Diagonal", c_unitCreateIgnorePlacement, 0, PointFromId(804));
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "RaynorLabMagazineShortLeash", 0);
    TriggerExecute(gt_ObjectiveGettoSublevelDoorComplete, true, true);
    TriggerExecute(gt_HoldoutMusic, true, false);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveHoldOutAtDoorCreate, true, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    gf_WaitifCriticalTransmissionisinprogress();
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan2, "zMission_Lab02|Line00063", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gf_WaitifCriticalTransmissionisinprogress();
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab02|Line00064", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gf_WaitifCriticalTransmissionisinprogress();
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Lab02|Line00171", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gf_WaitifCriticalTransmissionisinprogress();
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan2, "zMission_Lab02|Line00172", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gf_WaitifCriticalTransmissionisinprogress();
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab02|Line00065", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(4)), "DoorFlashing", "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    TransmissionWait(TransmissionLastSent(), 2.0);
    TriggerStop(gt_HoldoutMusic);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 100.0, 0.0);
    TriggerExecute(gt_OpenSublevelDoorZergAttack, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateSublevelDoorQ_Init () {
    gt_ActivateSublevelDoorQ = TriggerCreate("gt_ActivateSublevelDoorQ_Func");
    TriggerAddEventTimePeriodic(gt_ActivateSublevelDoorQ, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Open Sublevel Door - Zerg Attack
//--------------------------------------------------------------------------------------------------
bool gt_OpenSublevelDoorZergAttack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto7D2366A3_g;
    int auto7D2366A3_u;
    unit auto7D2366A3_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZLab02MusicEvent11_ZergLoose2", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    SoundPlayOnUnit(SoundLink("Event_Lab02_AlarmIncomingAttack", -1), PlayerGroupAll(), UnitFromId(4), 8.0, 100.0, 0.0);
    libSwaC_gf_ClearAnimationwithblendtime("DoorFlashing", UnitFromId(4), c_animTimeDefault);
    UnitIssueOrder(UnitFromId(4), Order(AbilityCommand("UmojanLabDoorsWideRightLowered", 0)), c_orderQueueReplace);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(23), 0.0, true);
    auto7D2366A3_g = UnitGroup(null, gv_pLAYER_02_DOMINION22, RegionFromId(23), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7D2366A3_u = UnitGroupCount(auto7D2366A3_g, c_unitCountAll);
    for (;; auto7D2366A3_u -= 1) {
        auto7D2366A3_var = UnitGroupUnitFromEnd(auto7D2366A3_g, auto7D2366A3_u);
        if (auto7D2366A3_var == null) { break; }
        libNtve_gf_PauseUnit(auto7D2366A3_var, false);
        UnitGroupAdd(gv_s1_SublevelDoorZerg, auto7D2366A3_var);
        AISetUnitScriptControlled(auto7D2366A3_var, false);
        AIAttackWaveUseUnit(gv_pLAYER_02_DOMINION22, auto7D2366A3_var);
    }
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION22, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveSend(gv_pLAYER_02_DOMINION22, 0, true);
    Wait(2.0, c_timeGame);
    SoundPlayOnUnit(SoundLink("Event_Lab01_ZerglingRelease", -1), PlayerGroupAll(), UnitFromId(4), 8.0, 100.0, 0.0);
    if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
        TriggerExecute(gt_ZergStreamfromSublevel, true, false);
    }
    else {
        TriggerExecute(gt_ZergStreamfromSublevelHard, true, false);
    }
    TriggerEnable(gt_SublevelDoorSecured, true);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_TransmissionUmojanAtSublevelDoorQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OpenSublevelDoorZergAttack_Init () {
    gt_OpenSublevelDoorZergAttack = TriggerCreate("gt_OpenSublevelDoorZergAttack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Umojan At Sublevel Door Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionUmojanAtSublevelDoorQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_marineDude;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    lv_marineDude = UnitGroupRandomUnit(UnitGroup("WarPig", c_playerAny, RegionCircle(UnitGetPosition(gv_kerrigan), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    if ((UnitIsAlive(lv_marineDude) == false)) {
        return true;
    }

    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    gf_WaitifCriticalTransmissionisinprogress();
    libSwaC_gf_SendTransmissionCampaign(lv_marineDude, "zMission_Lab02|Line00068", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_interruptableTransmission = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 2.0);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionUmojanAtSublevelDoorQ_Init () {
    gt_TransmissionUmojanAtSublevelDoorQ = TriggerCreate("gt_TransmissionUmojanAtSublevelDoorQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Stream from Sublevel
//--------------------------------------------------------------------------------------------------
bool gt_ZergStreamfromSublevel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_pLAYER_02_DOMINION22, PointFromId(179));
    AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION22, UnitLastCreatedGroup());
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_s1_SublevelDoorZerg);
    AIAttackWaveSend(gv_pLAYER_02_DOMINION22, 0, true);
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_pLAYER_02_DOMINION22, PointFromId(178));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_s1_SublevelDoorZerg);
    AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION22, UnitLastCreatedGroup());
    AIAttackWaveSend(gv_pLAYER_02_DOMINION22, 0, true);
    Wait(1.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_pLAYER_02_DOMINION22, PointFromId(179));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_s1_SublevelDoorZerg);
    AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION22, UnitLastCreatedGroup());
    AIAttackWaveSend(gv_pLAYER_02_DOMINION22, 0, true);
    Wait(1.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_pLAYER_02_DOMINION22, PointFromId(178));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_s1_SublevelDoorZerg);
    AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION22, UnitLastCreatedGroup());
    AIAttackWaveSend(gv_pLAYER_02_DOMINION22, 0, true);
    Wait(1.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(2, "Zergling", 0, gv_pLAYER_02_DOMINION22, PointFromId(179));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_s1_SublevelDoorZerg);
    AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION22, UnitLastCreatedGroup());
    AIAttackWaveSend(gv_pLAYER_02_DOMINION22, 0, true);
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(2, "Zergling", 0, gv_pLAYER_02_DOMINION22, PointFromId(178));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_s1_SublevelDoorZerg);
    AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION22, UnitLastCreatedGroup());
    AIAttackWaveSend(gv_pLAYER_02_DOMINION22, 0, true);
    Wait(1.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(2, "Zergling", 0, gv_pLAYER_02_DOMINION22, PointFromId(179));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_s1_SublevelDoorZerg);
    AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION22, UnitLastCreatedGroup());
    AIAttackWaveSend(gv_pLAYER_02_DOMINION22, 0, true);
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(2, "Zergling", 0, gv_pLAYER_02_DOMINION22, PointFromId(178));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_s1_SublevelDoorZerg);
    AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION22, UnitLastCreatedGroup());
    AIAttackWaveSend(gv_pLAYER_02_DOMINION22, 0, true);
    Wait(1.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(3, "Zergling", 0, gv_pLAYER_02_DOMINION22, PointFromId(179));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_s1_SublevelDoorZerg);
    AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION22, UnitLastCreatedGroup());
    AIAttackWaveSend(gv_pLAYER_02_DOMINION22, 0, true);
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(3, "Zergling", 0, gv_pLAYER_02_DOMINION22, PointFromId(178));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_s1_SublevelDoorZerg);
    AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION22, UnitLastCreatedGroup());
    AIAttackWaveSend(gv_pLAYER_02_DOMINION22, 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergStreamfromSublevel_Init () {
    gt_ZergStreamfromSublevel = TriggerCreate("gt_ZergStreamfromSublevel_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Stream from Sublevel (Hard)
//--------------------------------------------------------------------------------------------------
bool gt_ZergStreamfromSublevelHard_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_pLAYER_02_DOMINION22, PointFromId(179));
    AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION22, UnitLastCreatedGroup());
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_s1_SublevelDoorZerg);
    AIAttackWaveSend(gv_pLAYER_02_DOMINION22, 0, true);
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(2, "Zergling", 0, gv_pLAYER_02_DOMINION22, PointFromId(178));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_s1_SublevelDoorZerg);
    AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION22, UnitLastCreatedGroup());
    AIAttackWaveSend(gv_pLAYER_02_DOMINION22, 0, true);
    Wait(1.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(2, "Zergling", 0, gv_pLAYER_02_DOMINION22, PointFromId(179));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_s1_SublevelDoorZerg);
    AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION22, UnitLastCreatedGroup());
    AIAttackWaveSend(gv_pLAYER_02_DOMINION22, 0, true);
    Wait(1.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "Roach", 0, gv_pLAYER_02_DOMINION22, PointFromId(178));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_s1_SublevelDoorZerg);
    AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION22, UnitLastCreatedGroup());
    AIAttackWaveSend(gv_pLAYER_02_DOMINION22, 0, true);
    Wait(1.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(2, "Zergling", 0, gv_pLAYER_02_DOMINION22, PointFromId(178));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_s1_SublevelDoorZerg);
    AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION22, UnitLastCreatedGroup());
    AIAttackWaveSend(gv_pLAYER_02_DOMINION22, 0, true);
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(2, "Zergling", 0, gv_pLAYER_02_DOMINION22, PointFromId(179));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_s1_SublevelDoorZerg);
    AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION22, UnitLastCreatedGroup());
    AIAttackWaveSend(gv_pLAYER_02_DOMINION22, 0, true);
    Wait(1.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(2, "Zergling", 0, gv_pLAYER_02_DOMINION22, PointFromId(179));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_s1_SublevelDoorZerg);
    AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION22, UnitLastCreatedGroup());
    AIAttackWaveSend(gv_pLAYER_02_DOMINION22, 0, true);
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "Baneling", 0, gv_pLAYER_02_DOMINION22, PointFromId(178));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_s1_SublevelDoorZerg);
    AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION22, UnitLastCreatedGroup());
    AIAttackWaveSend(gv_pLAYER_02_DOMINION22, 0, true);
    Wait(1.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(4, "Zergling", 0, gv_pLAYER_02_DOMINION22, PointFromId(179));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_s1_SublevelDoorZerg);
    AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION22, UnitLastCreatedGroup());
    AIAttackWaveSend(gv_pLAYER_02_DOMINION22, 0, true);
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(2, "Zergling", 0, gv_pLAYER_02_DOMINION22, PointFromId(178));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_s1_SublevelDoorZerg);
    AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION22, UnitLastCreatedGroup());
    AIAttackWaveSend(gv_pLAYER_02_DOMINION22, 0, true);
    libNtve_gf_CreateUnitsAtPoint2(1, "Roach", 0, gv_pLAYER_02_DOMINION22, PointFromId(178));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_s1_SublevelDoorZerg);
    AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION22, UnitLastCreatedGroup());
    AIAttackWaveSend(gv_pLAYER_02_DOMINION22, 0, true);
    TriggerExecute(gt_DominionAttackGate03Hard, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergStreamfromSublevelHard_Init () {
    gt_ZergStreamfromSublevelHard = TriggerCreate("gt_ZergStreamfromSublevelHard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Attack - Gate 03 (Hard)
//--------------------------------------------------------------------------------------------------
bool gt_DominionAttackGate03Hard_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoD8039E92_g;
    int autoD8039E92_u;
    unit autoD8039E92_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(191), Order(AbilityCommand("UmojanLabDoorsThinLeftLowered", 0)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    autoD8039E92_g = gv_s1_SublevelDoorDominion;
    autoD8039E92_u = UnitGroupCount(autoD8039E92_g, c_unitCountAll);
    for (;; autoD8039E92_u -= 1) {
        autoD8039E92_var = UnitGroupUnitFromEnd(autoD8039E92_g, autoD8039E92_u);
        if (autoD8039E92_var == null) { break; }
        libNtve_gf_PauseUnit(autoD8039E92_var, false);
        AISetUnitScriptControlled(autoD8039E92_var, false);
        AIAttackWaveUseUnit(gv_pLAYER_02_DOMINION, autoD8039E92_var);
    }
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveSend(gv_pLAYER_02_DOMINION, 1, false);
    TriggerExecute(gt_TransmissionDominionAttackGate03Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionAttackGate03Hard_Init () {
    gt_DominionAttackGate03Hard = TriggerCreate("gt_DominionAttackGate03Hard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Dominion Attack - Gate 03 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionDominionAttackGate03Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    gf_WaitifCriticalTransmissionisinprogress();
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan2, "zMission_Lab02|Line00001", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_interruptableTransmission = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 2.0);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionDominionAttackGate03Q_Init () {
    gt_TransmissionDominionAttackGate03Q = TriggerCreate("gt_TransmissionDominionAttackGate03Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sublevel Door Secured
//--------------------------------------------------------------------------------------------------
bool gt_SublevelDoorSecured_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(gv_s1_SublevelDoorDominion, c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((UnitGroupCount(gv_s1_SublevelDoorZerg, c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_ObjectiveHoldOutAtDoorComplete, true, true);
    Wait(1.0, c_timeGame);
    libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/3248DA7C"));
    TriggerExecute(gt_MidQStage2, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SublevelDoorSecured_Init () {
    gt_SublevelDoorSecured = TriggerCreate("gt_SublevelDoorSecured_Func");
    TriggerEnable(gt_SublevelDoorSecured, false);
    TriggerAddEventTimePeriodic(gt_SublevelDoorSecured, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Holdout Music
//--------------------------------------------------------------------------------------------------
bool gt_HoldoutMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_mapMusicTrack;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_mapMusicTrack = "ZLab02MusicEvent11_ZergLoose1";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_mapMusicTrack);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HoldoutMusic_Init () {
    gt_HoldoutMusic = TriggerCreate("gt_HoldoutMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gate Closes
//--------------------------------------------------------------------------------------------------
bool gt_GateCloses_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "UmojanLabDoorsThinRight") || (UnitGetType(EventUnit()) == "UmojanLabDoorsThinRightLowered") || (UnitGetType(EventUnit()) == "UmojanLabDoorsThinLeft") || (UnitGetType(EventUnit()) == "UmojanLabDoorsThinLeftLowered")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_MakeUnitNonInteractive(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GateCloses_Init () {
    gt_GateCloses = TriggerCreate("gt_GateCloses_Func");
    TriggerAddEventUnitAbility(gt_GateCloses, null, AbilityCommand("UmojanLabDoorsThinLeft", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_GateCloses, null, AbilityCommand("UmojanLabDoorsThinRight", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show First Objective
//--------------------------------------------------------------------------------------------------
bool gt_ShowFirstObjective_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(330)), 3.0), 5.0, false);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/E97D4A16"), null, UnitGetPosition(UnitFromId(330)));
    libSwaC_gf_CreateObjectivePing(true, UnitGetPosition(UnitFromId(330)), StringExternal("Param/Value/3462C9C1"));
    gv_s2_LockdownDoorPing = PingLastCreated();
    TriggerExecute(gt_TransmissionBeforeLockdownTimerQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowFirstObjective_Init () {
    gt_ShowFirstObjective = TriggerCreate("gt_ShowFirstObjective_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start First Lockdown Timer
//--------------------------------------------------------------------------------------------------
bool gt_StartFirstLockdownTimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_ForceRaynorThroughDoor01, true);
    TriggerEnable(gt_GotThroughLockdownDoor01, true);
    TimerStart(gv_s2_LockdownTimer, gv_s2_Lockdown_Time[1], false, c_timeGame);
    libSwaC_gf_TimerWindowCreate2(TimerLastStarted(), StringExternal("Param/Value/7966C20F"), true, false, libSwaC_ge_CampaignTimerPositiveNegativeOptions_Negative);
    gv_s2_LockdownTimerWindow = TimerWindowLastCreated();
    TimerWindowSetFormat(gv_s2_LockdownTimerWindow, StringToText("<mintotal/>:<sec2/>"));
    libNtve_gf_WaitForTimer(gv_s2_LockdownTimer, 45.0, false);
    TriggerExecute(gt_TransmissionLockdown01ReminderQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartFirstLockdownTimer_Init () {
    gt_StartFirstLockdownTimer = TriggerCreate("gt_StartFirstLockdownTimer_Func");
    TriggerAddEventUnitRegion(gt_StartFirstLockdownTimer, UnitRefFromVariable("gv_kerrigan"), RegionFromId(33), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Before Lockdown Timer Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionBeforeLockdownTimerQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    gf_WaitifCriticalTransmissionisinprogress();
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Lab02|Line00072", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gf_WaitifCriticalTransmissionisinprogress();
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan2, "zMission_Lab02|Line00073", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionBeforeLockdownTimerQ_Init () {
    gt_TransmissionBeforeLockdownTimerQ = TriggerCreate("gt_TransmissionBeforeLockdownTimerQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Lockdown 01 Reminder Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionLockdown01ReminderQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    gf_WaitifCriticalTransmissionisinprogress();
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Lab02|Line00164", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionLockdown01ReminderQ_Init () {
    gt_TransmissionLockdown01ReminderQ = TriggerCreate("gt_TransmissionLockdown01ReminderQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Zerg Ramp Attack 01
//--------------------------------------------------------------------------------------------------
bool gt_ActivateZergRampAttack01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto896D738C_g;
    int auto896D738C_u;
    unit auto896D738C_var;
    unitgroup auto8DF01D8A_g;
    int auto8DF01D8A_u;
    unit auto8DF01D8A_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto896D738C_g = UnitGroup(null, gv_pLAYER_02_DOMINION22, RegionFromId(34), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto896D738C_u = UnitGroupCount(auto896D738C_g, c_unitCountAll);
    for (;; auto896D738C_u -= 1) {
        auto896D738C_var = UnitGroupUnitFromEnd(auto896D738C_g, auto896D738C_u);
        if (auto896D738C_var == null) { break; }
        AISetUnitScriptControlled(auto896D738C_var, false);
        AIAttackWaveUseUnit(gv_pLAYER_02_DOMINION22, auto896D738C_var);
    }
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION22, PlayerGroupSingle(gv_pLAYER_02_DOMINION));
    AIAttackWaveSend(gv_pLAYER_02_DOMINION22, 0, false);
    Wait(3.0, c_timeGame);
    auto8DF01D8A_g = UnitGroup(null, gv_pLAYER_02_DOMINION22, RegionFromId(35), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8DF01D8A_u = UnitGroupCount(auto8DF01D8A_g, c_unitCountAll);
    for (;; auto8DF01D8A_u -= 1) {
        auto8DF01D8A_var = UnitGroupUnitFromEnd(auto8DF01D8A_g, auto8DF01D8A_u);
        if (auto8DF01D8A_var == null) { break; }
        AISetUnitScriptControlled(auto8DF01D8A_var, false);
        AIAttackWaveUseUnit(gv_pLAYER_02_DOMINION22, auto8DF01D8A_var);
    }
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION22, PlayerGroupSingle(gv_pLAYER_02_DOMINION));
    AIAttackWaveSend(gv_pLAYER_02_DOMINION22, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateZergRampAttack01_Init () {
    gt_ActivateZergRampAttack01 = TriggerCreate("gt_ActivateZergRampAttack01_Func");
    TriggerAddEventUnitRegion(gt_ActivateZergRampAttack01, UnitRefFromVariable("gv_kerrigan"), RegionFromId(42), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Zerg Ramp Attack 02
//--------------------------------------------------------------------------------------------------
bool gt_ActivateZergRampAttack02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto22565FDA_g;
    int auto22565FDA_u;
    unit auto22565FDA_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto22565FDA_g = UnitGroup(null, gv_pLAYER_02_DOMINION22, RegionFromId(36), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto22565FDA_u = UnitGroupCount(auto22565FDA_g, c_unitCountAll);
    for (;; auto22565FDA_u -= 1) {
        auto22565FDA_var = UnitGroupUnitFromEnd(auto22565FDA_g, auto22565FDA_u);
        if (auto22565FDA_var == null) { break; }
        AISetUnitScriptControlled(auto22565FDA_var, false);
        AIAttackWaveUseUnit(gv_pLAYER_02_DOMINION22, auto22565FDA_var);
    }
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION22, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveSend(gv_pLAYER_02_DOMINION22, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateZergRampAttack02_Init () {
    gt_ActivateZergRampAttack02 = TriggerCreate("gt_ActivateZergRampAttack02_Func");
    TriggerAddEventUnitRegion(gt_ActivateZergRampAttack02, UnitRefFromVariable("gv_kerrigan"), RegionFromId(45), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Zerg Pen Attack 01
//--------------------------------------------------------------------------------------------------
bool gt_ActivateZergPenAttack01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto98E3BD33_g;
    int auto98E3BD33_u;
    unit auto98E3BD33_var;
    unitgroup autoAFC41DC5_g;
    int autoAFC41DC5_u;
    unit autoAFC41DC5_var;
    unitgroup auto0CF5D410_g;
    int auto0CF5D410_u;
    unit auto0CF5D410_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto98E3BD33_g = UnitGroup(null, gv_pLAYER_02_DOMINION22, RegionFromId(37), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto98E3BD33_u = UnitGroupCount(auto98E3BD33_g, c_unitCountAll);
    for (;; auto98E3BD33_u -= 1) {
        auto98E3BD33_var = UnitGroupUnitFromEnd(auto98E3BD33_g, auto98E3BD33_u);
        if (auto98E3BD33_var == null) { break; }
        AISetUnitScriptControlled(auto98E3BD33_var, false);
        AIAttackWaveUseUnit(gv_pLAYER_02_DOMINION22, auto98E3BD33_var);
    }
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION22, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveSend(gv_pLAYER_02_DOMINION22, 0, false);
    Wait(1.0, c_timeGame);
    autoAFC41DC5_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(46), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoAFC41DC5_u = UnitGroupCount(autoAFC41DC5_g, c_unitCountAll);
    for (;; autoAFC41DC5_u -= 1) {
        autoAFC41DC5_var = UnitGroupUnitFromEnd(autoAFC41DC5_g, autoAFC41DC5_u);
        if (autoAFC41DC5_var == null) { break; }
        UnitIssueOrder(autoAFC41DC5_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(40))), c_orderQueueReplace);
    }
    Wait(1.0, c_timeGame);
    auto0CF5D410_g = UnitGroup(null, gv_pLAYER_02_DOMINION22, RegionFromId(41), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0CF5D410_u = UnitGroupCount(auto0CF5D410_g, c_unitCountAll);
    for (;; auto0CF5D410_u -= 1) {
        auto0CF5D410_var = UnitGroupUnitFromEnd(auto0CF5D410_g, auto0CF5D410_u);
        if (auto0CF5D410_var == null) { break; }
        AISetUnitScriptControlled(auto0CF5D410_var, false);
        AIAttackWaveUseUnit(gv_pLAYER_02_DOMINION22, auto0CF5D410_var);
    }
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION22, PlayerGroupSingle(gv_pLAYER_02_DOMINION));
    AIAttackWaveSend(gv_pLAYER_02_DOMINION22, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateZergPenAttack01_Init () {
    gt_ActivateZergPenAttack01 = TriggerCreate("gt_ActivateZergPenAttack01_Func");
    TriggerAddEventUnitRegion(gt_ActivateZergPenAttack01, UnitRefFromVariable("gv_kerrigan"), RegionFromId(40), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Save Scientists from Threat
//--------------------------------------------------------------------------------------------------
bool gt_SaveScientistsfromThreat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoD3546043_g;
    int autoD3546043_u;
    unit autoD3546043_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoD3546043_g = UnitGroup("Scientist", gv_pLAYER_02_DOMINION2, RegionFromId(44), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD3546043_u = UnitGroupCount(autoD3546043_g, c_unitCountAll);
    for (;; autoD3546043_u -= 1) {
        autoD3546043_var = UnitGroupUnitFromEnd(autoD3546043_g, autoD3546043_u);
        if (autoD3546043_var == null) { break; }
        UnitBehaviorRemovePlayer(autoD3546043_var, "Scared", gv_pLAYER_02_DOMINION2, 1);
        Wait(0.25, c_timeGame);
        UnitIssueOrder(autoD3546043_var, OrderTargetingUnit(AbilityCommand("move", 4), libNtve_gf_KillingUnit()), c_orderQueueReplace);
        Wait(0.25, c_timeGame);
        UnitBehaviorAddPlayer(autoD3546043_var, "VictoryAnimation", gv_pLAYER_02_DOMINION2, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SaveScientistsfromThreat_Init () {
    gt_SaveScientistsfromThreat = TriggerCreate("gt_SaveScientistsfromThreat_Func");
    TriggerAddEventUnitDied(gt_SaveScientistsfromThreat, UnitRefFromUnit(UnitFromId(1213)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Raynor & Kerrigan Banter 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_RaynorKerriganBanter01Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    gf_WaitifCriticalTransmissionisinprogress();
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Lab02|Line00026", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gf_WaitifCriticalTransmissionisinprogress();
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan2, "zMission_Lab02|Line00027", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gf_WaitifCriticalTransmissionisinprogress();
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Lab02|Line00028", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gf_WaitifCriticalTransmissionisinprogress();
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan2, "zMission_Lab02|Line00179", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RaynorKerriganBanter01Q_Init () {
    gt_RaynorKerriganBanter01Q = TriggerCreate("gt_RaynorKerriganBanter01Q_Func");
    TriggerAddEventUnitRegion(gt_RaynorKerriganBanter01Q, UnitRefFromVariable("gv_kerrigan"), RegionFromId(107), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Force Raynor Through Door 01
//--------------------------------------------------------------------------------------------------
bool gt_ForceRaynorThroughDoor01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "RaynorLabMagazineShortLeash", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ForceRaynorThroughDoor01_Init () {
    gt_ForceRaynorThroughDoor01 = TriggerCreate("gt_ForceRaynorThroughDoor01_Func");
    TriggerEnable(gt_ForceRaynorThroughDoor01, false);
    TriggerAddEventUnitRegion(gt_ForceRaynorThroughDoor01, UnitRefFromVariable("gv_kerrigan"), RegionFromId(47), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Got Through Lockdown Door 01
//--------------------------------------------------------------------------------------------------
bool gt_GotThroughLockdownDoor01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_gate;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(gv_kerrigan, RegionFromId(47)) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(gv_kerrigan2, RegionFromId(47)) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1) && (TimerGetRemaining(gv_s2_LockdownTimer) >= gv_achievementLockDownTime)) {
        gv_doorsReachedWithinTimeLimit += 1;
    }

    gv_lowestLockDownTime = MinF(gv_lowestLockDownTime, TimerGetRemaining(gv_s2_LockdownTimer));
    lv_gate = UnitFromId(329);
    TimerPause(gv_s2_LockdownTimer, true);
    TimerWindowShow(gv_s2_LockdownTimerWindow, PlayerGroupAll(), false);
    PingDestroy(gv_s2_LockdownDoorPing);
    UnitKill(UnitFromId(330));
    UnitIssueOrder(lv_gate, Order(AbilityCommand("UmojanLabDoorsThinLeft", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(257), Order(AbilityCommand("UmojanLabDoorsLeftLowered", 0)), c_orderQueueReplace);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "RaynorLabMagazineShortLeash", 0);
    TriggerEnable(gt_TransmissionLockdown01ReminderQ, false);
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Terran, PointFromId(482));
    SoundPlay(SoundLink("Goliath_Explode", -1), PlayerGroupAll(), 100.0, 0.0);
    CameraShakeStart(gv_pLAYER_01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.3, 2.0, 100.0, 1.5);
    Wait(1.5, c_timeGame);
    libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/C956279B"));
    TriggerExecute(gt_TransmissionGotThroughLockdownDoor01Q, true, false);
    Wait(5.0, c_timeGame);
    TriggerExecute(gt_ScientistChased01, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GotThroughLockdownDoor01_Init () {
    gt_GotThroughLockdownDoor01 = TriggerCreate("gt_GotThroughLockdownDoor01_Func");
    TriggerEnable(gt_GotThroughLockdownDoor01, false);
    TriggerAddEventTimePeriodic(gt_GotThroughLockdownDoor01, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Got Through Lockdown Door 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionGotThroughLockdownDoor01Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    gf_WaitifCriticalTransmissionisinprogress();
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Lab02|Line00077", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_interruptableTransmission = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionGotThroughLockdownDoor01Q_Init () {
    gt_TransmissionGotThroughLockdownDoor01Q = TriggerCreate("gt_TransmissionGotThroughLockdownDoor01Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Second Lockdown Timer
//--------------------------------------------------------------------------------------------------
bool gt_StartSecondLockdownTimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_ForceRaynorThroughDoor02, true);
    TriggerEnable(gt_GotThroughLockdownDoor02, true);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(373)), 3.0), 5.0, false);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/14CF7290"), null, UnitGetPosition(UnitFromId(373)));
    libSwaC_gf_CreateObjectivePing(true, UnitGetPosition(UnitFromId(373)), StringExternal("Param/Value/543646C5"));
    gv_s2_LockdownDoorPing = PingLastCreated();
    TimerStart(gv_s2_LockdownTimer, gv_s2_Lockdown_Time[2], false, c_timeGame);
    TimerWindowShow(gv_s2_LockdownTimerWindow, PlayerGroupAll(), true);
    TriggerExecute(gt_SecondLockdownStartedQ, true, false);
    libNtve_gf_WaitForTimer(gv_s2_LockdownTimer, 45.0, false);
    TriggerExecute(gt_TransmissionLockdown02ReminderQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartSecondLockdownTimer_Init () {
    gt_StartSecondLockdownTimer = TriggerCreate("gt_StartSecondLockdownTimer_Func");
    TriggerAddEventUnitRegion(gt_StartSecondLockdownTimer, UnitRefFromVariable("gv_kerrigan"), RegionFromId(52), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Second Lockdown Started Q
//--------------------------------------------------------------------------------------------------
bool gt_SecondLockdownStartedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TransmissionClear(gv_interruptableTransmission);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    gf_WaitifCriticalTransmissionisinprogress();
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab02|Line00088", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SecondLockdownStartedQ_Init () {
    gt_SecondLockdownStartedQ = TriggerCreate("gt_SecondLockdownStartedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Raynor & Kerrigan Banter 02 Q
//--------------------------------------------------------------------------------------------------
bool gt_RaynorKerriganBanter02Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    gf_WaitifCriticalTransmissionisinprogress();
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan2, "zMission_Lab02|Line00017", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gf_WaitifCriticalTransmissionisinprogress();
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Lab02|Line00016", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RaynorKerriganBanter02Q_Init () {
    gt_RaynorKerriganBanter02Q = TriggerCreate("gt_RaynorKerriganBanter02Q_Func");
    TriggerAddEventUnitRegion(gt_RaynorKerriganBanter02Q, UnitRefFromVariable("gv_kerrigan"), RegionFromId(105), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scientist Chased 01
//--------------------------------------------------------------------------------------------------
bool gt_ScientistChased01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_mister_Scientist;

    // Automatic Variable Declarations
    unitgroup autoF47F442D_g;
    int autoF47F442D_u;
    unit autoF47F442D_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(84), 2.0, false);
    libLbty_gf_AutoRevealRegion(RegionFromId(84), RegionFromId(84), gv_pLAYER_01_USER);
    lv_mister_Scientist = UnitFromId(858);
    libNtve_gf_PauseUnit(lv_mister_Scientist, false);
    UnitBehaviorAddPlayer(lv_mister_Scientist, "Run", gv_pLAYER_02_DOMINION2, 1);
    UnitIssueOrder(lv_mister_Scientist, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1576)), c_orderQueueReplace);
    UnitSetPropertyFixed(lv_mister_Scientist, c_unitPropLife, 5.0);
    UnitSetPropertyFixed(lv_mister_Scientist, c_unitPropLifeMax, 5.0);
    autoF47F442D_g = UnitGroup(null, gv_pLAYER_02_DOMINION22, RegionFromId(92), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF47F442D_u = UnitGroupCount(autoF47F442D_g, c_unitCountAll);
    for (;; autoF47F442D_u -= 1) {
        autoF47F442D_var = UnitGroupUnitFromEnd(autoF47F442D_g, autoF47F442D_u);
        if (autoF47F442D_var == null) { break; }
        libNtve_gf_PauseUnit(autoF47F442D_var, false);
        UnitIssueOrder(autoF47F442D_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1576)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScientistChased01_Init () {
    gt_ScientistChased01 = TriggerCreate("gt_ScientistChased01_Func");
    TriggerAddEventUnitRegion(gt_ScientistChased01, UnitRefFromVariable("gv_kerrigan"), RegionFromId(84), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ultralisk Attack Rubble Q
//--------------------------------------------------------------------------------------------------
bool gt_UltraliskAttackRubbleQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto6CED29F2_g;
    int auto6CED29F2_u;
    unit auto6CED29F2_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(68), 6.0, true);
    auto6CED29F2_g = UnitGroup(null, gv_pLAYER_02_DOMINION22, RegionFromId(68), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6CED29F2_u = UnitGroupCount(auto6CED29F2_g, c_unitCountAll);
    for (;; auto6CED29F2_u -= 1) {
        auto6CED29F2_var = UnitGroupUnitFromEnd(auto6CED29F2_g, auto6CED29F2_u);
        if (auto6CED29F2_var == null) { break; }
        UnitIssueOrder(auto6CED29F2_var, OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(339)), c_orderQueueReplace);
        UnitIssueOrder(auto6CED29F2_var, OrderTargetingUnit(AbilityCommand("attack", 0), gv_kerrigan), c_orderQueueAddToEnd);
    }
    if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
        libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(libSwaC_ge_CampaginReticleType_TerranEnemy, libSwaC_ge_CampaginReticleSize_Medium, StringExternal("Param/Value/965E43E5"), UnitFromId(380), "Ref_Origin");
        libHots_gf_StoreActorForUnit(UnitFromId(380), 1, libNtve_gf_ActorLastCreated());
        libHots_gf_StoreTextTagForUnit(UnitFromId(380), 1, TextTagLastCreated());
    }

    SoundPlayOnUnit(SoundLink("Ultralisk_Roar", 0), PlayerGroupAll(), UnitFromId(380), 0.0, 100.0, 0.0);
    SoundWait(SoundLastPlayed(), 1.5, c_soundOffsetEnd);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    gf_WaitifCriticalTransmissionisinprogress();
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Lab02|Line00084", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UltraliskAttackRubbleQ_Init () {
    gt_UltraliskAttackRubbleQ = TriggerCreate("gt_UltraliskAttackRubbleQ_Func");
    TriggerAddEventUnitRegion(gt_UltraliskAttackRubbleQ, UnitRefFromVariable("gv_kerrigan"), RegionFromId(58), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ultralisk Dies - Remove Text Tag/Model
//--------------------------------------------------------------------------------------------------
bool gt_UltraliskDiesRemoveTextTagModel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitFromId(380), 1));
    TextTagDestroy(libHots_gf_TextTagForUnit(UnitFromId(380), 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UltraliskDiesRemoveTextTagModel_Init () {
    gt_UltraliskDiesRemoveTextTagModel = TriggerCreate("gt_UltraliskDiesRemoveTextTagModel_Func");
    TriggerAddEventUnitDied(gt_UltraliskDiesRemoveTextTagModel, UnitRefFromUnit(UnitFromId(380)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ultralisk Shot Used - Remove Text Tag/Model
//--------------------------------------------------------------------------------------------------
bool gt_UltraliskShotUsedRemoveTextTagModel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventUnitTargetUnit() == UnitFromId(380)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitFromId(380), 1));
    TextTagDestroy(libHots_gf_TextTagForUnit(UnitFromId(380), 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UltraliskShotUsedRemoveTextTagModel_Init () {
    gt_UltraliskShotUsedRemoveTextTagModel = TriggerCreate("gt_UltraliskShotUsedRemoveTextTagModel_Func");
    TriggerAddEventUnitAbility(gt_UltraliskShotUsedRemoveTextTagModel, UnitRefFromVariable("gv_kerrigan"), AbilityCommand("MindBolt", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Troops See Kerrigan Q
//--------------------------------------------------------------------------------------------------
bool gt_DominionTroopsSeeKerriganQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_mister_Ghost;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_mister_Ghost = UnitFromId(357);
    TriggerQueueEnter();
    UnitIssueOrder(lv_mister_Ghost, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(420)), c_orderQueueReplace);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(55), 6.0, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    gf_WaitifCriticalTransmissionisinprogress();
    libSwaC_gf_SendTransmissionCampaign(lv_mister_Ghost, "zMission_Lab02|Line00087", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_interruptableTransmission = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionTroopsSeeKerriganQ_Init () {
    gt_DominionTroopsSeeKerriganQ = TriggerCreate("gt_DominionTroopsSeeKerriganQ_Func");
    TriggerAddEventUnitRegion(gt_DominionTroopsSeeKerriganQ, UnitRefFromVariable("gv_kerrigan"), RegionFromId(54), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Attack Chokepoint Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergAttackChokepointQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto12991DE7_g;
    int auto12991DE7_u;
    unit auto12991DE7_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(57), 6.0, true);
    auto12991DE7_g = UnitGroup(null, gv_pLAYER_02_DOMINION22, RegionFromId(53), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto12991DE7_u = UnitGroupCount(auto12991DE7_g, c_unitCountAll);
    for (;; auto12991DE7_u -= 1) {
        auto12991DE7_var = UnitGroupUnitFromEnd(auto12991DE7_g, auto12991DE7_u);
        if (auto12991DE7_var == null) { break; }
        UnitIssueOrder(auto12991DE7_var, OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(794)), c_orderQueueReplace);
        UnitIssueOrder(auto12991DE7_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_kerrigan)), c_orderQueueAddToEnd);
    }
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    gf_WaitifCriticalTransmissionisinprogress();
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan2, "zMission_Lab02|Line00018", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gf_WaitifCriticalTransmissionisinprogress();
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Lab02|Line00019", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergAttackChokepointQ_Init () {
    gt_ZergAttackChokepointQ = TriggerCreate("gt_ZergAttackChokepointQ_Func");
    TriggerAddEventUnitRegion(gt_ZergAttackChokepointQ, UnitRefFromVariable("gv_kerrigan"), RegionFromId(56), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debris Blocks Door Exit Q
//--------------------------------------------------------------------------------------------------
bool gt_DebrisBlocksDoorExitQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1) && (UnitIsAlive(UnitFromId(1014)) == true) && (UnitIsAlive(UnitFromId(1015)) == true)) {
        libSwaC_gf_CreateReticleEffectAndTextTagAtPoint(libSwaC_ge_CampaginReticleType_TerranMainObjective, libSwaC_ge_CampaginReticleSize_Medium, StringExternal("Param/Value/FD34C93B"), PointFromId(807));
        libHots_gf_StoreActorForUnit(UnitFromId(1015), 1, libNtve_gf_ActorLastCreated());
        libHots_gf_StoreTextTagForUnit(UnitFromId(1015), 1, TextTagLastCreated());
        VisRevealArea(gv_pLAYER_01_USER, RegionCircle(PointFromId(807), 10.0), 12.0, true);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
        gf_WaitifCriticalTransmissionisinprogress();
        libSwaC_gf_SendTransmissionCampaign(gv_kerrigan2, "zMission_Lab02|Line00089", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebrisBlocksDoorExitQ_Init () {
    gt_DebrisBlocksDoorExitQ = TriggerCreate("gt_DebrisBlocksDoorExitQ_Func");
    TriggerAddEventUnitRegion(gt_DebrisBlocksDoorExitQ, UnitRefFromVariable("gv_kerrigan"), RegionFromId(111), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debris Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_DebrisDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(EventUnit(), 1));
    TextTagDestroy(libHots_gf_TextTagForUnit(EventUnit(), 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebrisDestroyed_Init () {
    gt_DebrisDestroyed = TriggerCreate("gt_DebrisDestroyed_Func");
    TriggerAddEventUnitDied(gt_DebrisDestroyed, UnitRefFromUnit(UnitFromId(1015)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Lockdown 02 Reminder Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionLockdown02ReminderQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    gf_WaitifCriticalTransmissionisinprogress();
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab02|Line00169", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionLockdown02ReminderQ_Init () {
    gt_TransmissionLockdown02ReminderQ = TriggerCreate("gt_TransmissionLockdown02ReminderQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Force Raynor Through Door 02
//--------------------------------------------------------------------------------------------------
bool gt_ForceRaynorThroughDoor02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "RaynorLabMagazineShortLeash", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ForceRaynorThroughDoor02_Init () {
    gt_ForceRaynorThroughDoor02 = TriggerCreate("gt_ForceRaynorThroughDoor02_Func");
    TriggerEnable(gt_ForceRaynorThroughDoor02, false);
    TriggerAddEventUnitRegion(gt_ForceRaynorThroughDoor02, UnitRefFromVariable("gv_kerrigan"), RegionFromId(50), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Got Through Lockdown Door 02
//--------------------------------------------------------------------------------------------------
bool gt_GotThroughLockdownDoor02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_gate;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(gv_kerrigan, RegionFromId(50)) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(gv_kerrigan2, RegionFromId(50)) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1) && (TimerGetRemaining(gv_s2_LockdownTimer) >= gv_achievementLockDownTime)) {
        gv_doorsReachedWithinTimeLimit += 1;
    }

    gv_lowestLockDownTime = MinF(gv_lowestLockDownTime, TimerGetRemaining(gv_s2_LockdownTimer));
    lv_gate = UnitFromId(706);
    TransmissionClear(gv_interruptableTransmission);
    TimerPause(gv_s2_LockdownTimer, true);
    TimerWindowShow(gv_s2_LockdownTimerWindow, PlayerGroupAll(), false);
    PingDestroy(gv_s2_LockdownDoorPing);
    UnitKill(UnitFromId(373));
    UnitIssueOrder(lv_gate, Order(AbilityCommand("UmojanLabDoorsThinLeft", 0)), c_orderQueueReplace);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "RaynorLabMagazineShortLeash", 0);
    TriggerEnable(gt_TransmissionLockdown02ReminderQ, false);
    Wait(1.0, c_timeGame);
    libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/F1EE89F1"));
    TriggerExecute(gt_TransmissionGotThroughLockdownDoor02Q, true, false);
    Wait(5.0, c_timeGame);
    TriggerExecute(gt_StartThirdLockdownTimer, true, false);
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Terran, PointFromId(414));
    SoundPlay(SoundLink("Goliath_Explode", -1), PlayerGroupAll(), 100.0, 0.0);
    CameraShakeStart(gv_pLAYER_01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.3, 2.0, 100.0, 1.5);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GotThroughLockdownDoor02_Init () {
    gt_GotThroughLockdownDoor02 = TriggerCreate("gt_GotThroughLockdownDoor02_Func");
    TriggerEnable(gt_GotThroughLockdownDoor02, false);
    TriggerAddEventTimePeriodic(gt_GotThroughLockdownDoor02, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Got Through Lockdown Door 02 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionGotThroughLockdownDoor02Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    gf_WaitifCriticalTransmissionisinprogress();
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan2, "zMission_Lab02|Line00090", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gf_WaitifCriticalTransmissionisinprogress();
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Lab02|Line00091", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gf_WaitifCriticalTransmissionisinprogress();
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab02|Line00092", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionGotThroughLockdownDoor02Q_Init () {
    gt_TransmissionGotThroughLockdownDoor02Q = TriggerCreate("gt_TransmissionGotThroughLockdownDoor02Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Third Lockdown Timer
//--------------------------------------------------------------------------------------------------
bool gt_StartThirdLockdownTimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_ComputerRoomSecuredQ, true);
    TriggerEnable(gt_ForceRaynorThroughDoor03, true);
    TriggerEnable(gt_GotThroughLockdownDoor03Q, true);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(308)), 3.0), 5.0, false);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/87E04BB5"), null, UnitGetPosition(UnitFromId(308)));
    libSwaC_gf_CreateObjectivePing(true, UnitGetPosition(UnitFromId(308)), StringExternal("Param/Value/3BE01FC9"));
    gv_s2_LockdownDoorPing = PingLastCreated();
    Wait(2.0, c_timeReal);
    TimerStart(gv_s2_LockdownTimer, gv_s2_Lockdown_Time[3], false, c_timeGame);
    TimerWindowShow(gv_s2_LockdownTimerWindow, PlayerGroupAll(), true);
    libNtve_gf_WaitForTimer(gv_s2_LockdownTimer, 45.0, false);
    TriggerExecute(gt_TransmissionLockdown03ReminderQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartThirdLockdownTimer_Init () {
    gt_StartThirdLockdownTimer = TriggerCreate("gt_StartThirdLockdownTimer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer Room Secured Q
//--------------------------------------------------------------------------------------------------
bool gt_ComputerRoomSecuredQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(15), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateReticleEffectAndTextTagAtPoint(libSwaC_ge_CampaginReticleType_TerranMainObjective, libSwaC_ge_CampaginReticleSize_Medium, StringExternal("Param/Value/E4AE1BF9"), PointWithOffset(UnitGetPosition(UnitFromId(445)), 0.0, 0.0));
    libHots_gf_StoreActorForUnit(UnitFromId(445), 1, libNtve_gf_ActorLastCreated());
    libHots_gf_StoreTextTagForUnit(UnitFromId(445), 1, TextTagLastCreated());
    Wait(1.0, c_timeGame);
    TriggerEnable(gt_SecurityComputerProximityEnter, true);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    gf_WaitifCriticalTransmissionisinprogress();
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Lab02|Line00093", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ComputerRoomSecuredQ_Init () {
    gt_ComputerRoomSecuredQ = TriggerCreate("gt_ComputerRoomSecuredQ_Func");
    TriggerEnable(gt_ComputerRoomSecuredQ, false);
    TriggerAddEventTimePeriodic(gt_ComputerRoomSecuredQ, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer Room Secured Music
//--------------------------------------------------------------------------------------------------
bool gt_ComputerRoomSecuredMusic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZLab02MusicCutscene22_RoomChoiceAPPROACH", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ComputerRoomSecuredMusic_Init () {
    gt_ComputerRoomSecuredMusic = TriggerCreate("gt_ComputerRoomSecuredMusic_Func");
    TriggerEnable(gt_ComputerRoomSecuredMusic, false);
    TriggerAddEventUnitRegion(gt_ComputerRoomSecuredMusic, UnitRefFromVariable("gv_kerrigan"), RegionFromId(15), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Security Computer Proximity Enter
//--------------------------------------------------------------------------------------------------
bool gt_SecurityComputerProximityEnter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoA864738D_g;
    int autoA864738D_u;
    unit autoA864738D_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(gv_kerrigan, RegionFromId(12)) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoA864738D_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(61), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA864738D_u = UnitGroupCount(autoA864738D_g, c_unitCountAll);
    for (;; autoA864738D_u -= 1) {
        autoA864738D_var = UnitGroupUnitFromEnd(autoA864738D_g, autoA864738D_u);
        if (autoA864738D_var == null) { break; }
        libNtve_gf_PauseUnit(autoA864738D_var, true);
        libNtve_gf_ShowHideUnit(autoA864738D_var, false);
    }
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitFromId(445), 1));
    TextTagDestroy(libHots_gf_TextTagForUnit(UnitFromId(445), 1));
    SoundPlay(SoundLink("UI_TechConsole_Popup", -1), PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(gt_SecurityComputerActivatedQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SecurityComputerProximityEnter_Init () {
    gt_SecurityComputerProximityEnter = TriggerCreate("gt_SecurityComputerProximityEnter_Func");
    TriggerEnable(gt_SecurityComputerProximityEnter, false);
    TriggerAddEventTimePeriodic(gt_SecurityComputerProximityEnter, 0.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Security Computer Activated Q
//--------------------------------------------------------------------------------------------------
bool gt_SecurityComputerActivatedQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_panelReleaseZerg;
    int lv_panelReleaseGas;
    int lv_labelReleaseZerg;
    int lv_labelReleaseGas;

    // Automatic Variable Declarations
    unitgroup autoB78DF83D_g;
    int autoB78DF83D_u;
    unit autoB78DF83D_var;

    // Variable Initialization
    lv_panelReleaseZerg = c_invalidDialogControlId;
    lv_panelReleaseGas = c_invalidDialogControlId;
    lv_labelReleaseZerg = c_invalidDialogControlId;
    lv_labelReleaseGas = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_securityComputerNoCamera == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    gv_securityComputerActive = true;
    gv_securityComputerInCameraMode = true;
    gv_computerInUse = true;
    TimerPause(gv_s2_LockdownTimer, true);
    UnitKill(UnitFromId(445));
    libNtve_gf_StoreUnitSelection(gv_pLAYER_01_USER, libNtve_ge_UnitSelectionStoreOption_DoNotClearUnitSelection);
    libNtve_gf_PauseUnit(gv_kerrigan, true);
    libNtve_gf_MakeUnitInvulnerable(gv_kerrigan, true);
    libNtve_gf_PauseUnit(gv_kerrigan2, true);
    libNtve_gf_MakeUnitInvulnerable(gv_kerrigan2, true);
    autoB78DF83D_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(62), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB78DF83D_u = UnitGroupCount(autoB78DF83D_g, c_unitCountAll);
    for (;; autoB78DF83D_u -= 1) {
        autoB78DF83D_var = UnitGroupUnitFromEnd(autoB78DF83D_g, autoB78DF83D_u);
        if (autoB78DF83D_var == null) { break; }
        libNtve_gf_PauseUnit(autoB78DF83D_var, false);
    }
    UISetMode(PlayerGroupAll(), c_uiModeLetterboxed, 1.0);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(62));
    gv_securityComputerRoomRevealer = VisRevealerLastCreated();
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(921), 0.0, -1, 10, true);
    GameSetLighting("THorner05SSecurityCam", 0.0);
    CinematicOverlay(true, 0.0, "Assets\\Textures\\securitycam1.dds", 0.0, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(922), 12.0, -1, 10, true);
    libNtve_gf_HideScreenButton(false, gv_securityComputer);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Lab02_Camera", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZLab02MusicCutscene22_RoomChoice", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    Wait(1.0, c_timeGame);
    libNtve_gf_ShowHideUnit(gv_kerrigan, false);
    libNtve_gf_ShowHideUnit(gv_kerrigan2, false);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab02|Line00094", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_DontShowPortrait, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab02|Line00095", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_DontShowPortrait, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab02|Line00096", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_DontShowPortrait, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    UISetCursorVisible(PlayerGroupAll(), true);
    DialogCreate(gv_buttonSizeWidth, gv_buttonSizeHeight, c_anchorCenter, gv_button1stPositionX, gv_button1stPositionY, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_dialogSecurityComputer_ReleaseZerg = DialogLastCreated();
    DialogControlCreateFromTemplate(gv_dialogSecurityComputer_ReleaseZerg, c_triggerControlTypePanel, "HotS_GameUnitFrame/LabGreenButtonTemplate");
    lv_panelReleaseZerg = DialogControlLastCreated();
    DialogControlSetFullDialog(lv_panelReleaseZerg, PlayerGroupAll(), true);
    DialogControlHookup(lv_panelReleaseZerg, c_triggerControlTypeButton, "TerranSelectButton");
    gv_buttonSecurityComputer_ReleaseZerg = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(gv_buttonSecurityComputer_ReleaseZerg, StringExternal("Param/Value/7F50C7E1"), PlayerGroupAll());
    DialogControlSetPositionRelative(gv_buttonSecurityComputer_ReleaseZerg, PlayerGroupAll(), c_anchorTop, lv_panelReleaseZerg, c_anchorTop, 0, 40);
    DialogControlHookup(lv_panelReleaseZerg, c_triggerControlTypeLabel, "SelectionLabel");
    lv_labelReleaseZerg = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(lv_labelReleaseZerg, StringExternal("Param/Value/3F408EB8"), PlayerGroupAll());
    DialogControlSetVisible(lv_labelReleaseZerg, PlayerGroupAll(), true);
    DialogSetVisible(gv_dialogSecurityComputer_ReleaseZerg, PlayerGroupAll(), true);
    DialogCreate(gv_buttonSizeWidth, gv_buttonSizeHeight, c_anchorCenter, gv_button2ndPositionX, gv_button2ndPositionY, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_dialogSecurityComputer_ReleaseGas = DialogLastCreated();
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "HotS_GameUnitFrame/LabGreenButtonTemplate");
    lv_panelReleaseGas = DialogControlLastCreated();
    DialogControlSetFullDialog(lv_panelReleaseGas, PlayerGroupAll(), true);
    DialogControlHookup(lv_panelReleaseGas, c_triggerControlTypeButton, "TerranSelectButton");
    gv_buttonSecurityComputer_ReleaseGas = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(gv_buttonSecurityComputer_ReleaseGas, StringExternal("Param/Value/43CFA05C"), PlayerGroupAll());
    DialogControlSetPositionRelative(gv_buttonSecurityComputer_ReleaseGas, PlayerGroupAll(), c_anchorTop, lv_panelReleaseGas, c_anchorTop, 0, 40);
    DialogControlHookup(lv_panelReleaseGas, c_triggerControlTypeLabel, "SelectionLabel");
    lv_labelReleaseGas = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(lv_labelReleaseGas, StringExternal("Param/Value/95FB446A"), PlayerGroupAll());
    DialogControlSetVisible(lv_labelReleaseGas, PlayerGroupAll(), true);
    DialogSetVisible(gv_dialogSecurityComputer_ReleaseGas, PlayerGroupAll(), true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SecurityComputerActivatedQ_Init () {
    gt_SecurityComputerActivatedQ = TriggerCreate("gt_SecurityComputerActivatedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button - Turn on Gas
//--------------------------------------------------------------------------------------------------
bool gt_ButtonTurnonGas_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_gasTurret01;
    unit lv_gasTurret02;

    // Automatic Variable Declarations
    unitgroup auto88838869_g;
    int auto88838869_u;
    unit auto88838869_var;
    unitgroup auto8E99A0F9_g;
    int auto8E99A0F9_u;
    unit auto8E99A0F9_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventDialogControl() == gv_buttonSecurityComputer_ReleaseGas))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_SecurityRoomMusic, true, false);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackTownAlly", false);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackTownAlly_Terr", false);
    lv_gasTurret01 = UnitFromId(256);
    lv_gasTurret02 = UnitFromId(146);
    libNtve_gf_MakeUnitInvulnerable(lv_gasTurret01, true);
    libNtve_gf_MakeUnitInvulnerable(lv_gasTurret02, true);
    gv_securityComputerFinished = true;
    DialogDestroy(gv_dialogSecurityComputer_ReleaseGas);
    DialogDestroy(gv_dialogSecurityComputer_ReleaseZerg);
    Wait(2.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(921), 10.0, -1, 10, true);
    UISetCursorVisible(PlayerGroupAll(), false);
    UnitIssueOrder(lv_gasTurret01, Order(AbilityCommand("LabTurretUnburrow", 0)), c_orderQueueReplace);
    UnitIssueOrder(lv_gasTurret02, Order(AbilityCommand("LabTurretUnburrow", 0)), c_orderQueueReplace);
    Wait(3.0, c_timeGame);
    libNtve_gf_ChangeUnitDamage(lv_gasTurret01, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    libNtve_gf_ChangeUnitDamage(lv_gasTurret02, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    auto88838869_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionCircle(UnitGetPosition(lv_gasTurret01), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMechanical) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto88838869_u = UnitGroupCount(auto88838869_g, c_unitCountAll);
    for (;; auto88838869_u -= 1) {
        auto88838869_var = UnitGroupUnitFromEnd(auto88838869_g, auto88838869_u);
        if (auto88838869_var == null) { break; }
        UnitKill(auto88838869_var);
        Wait(0.5, c_timeGame);
    }
    auto8E99A0F9_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionCircle(UnitGetPosition(lv_gasTurret02), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMechanical) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8E99A0F9_u = UnitGroupCount(auto8E99A0F9_g, c_unitCountAll);
    for (;; auto8E99A0F9_u -= 1) {
        auto8E99A0F9_var = UnitGroupUnitFromEnd(auto8E99A0F9_g, auto8E99A0F9_u);
        if (auto8E99A0F9_var == null) { break; }
        UnitKill(auto8E99A0F9_var);
        Wait(0.5, c_timeGame);
    }
    TriggerExecute(gt_LeaveSecurityCamera, true, false);
    Wait(6.0, c_timeGame);
    UnitIssueOrder(lv_gasTurret01, Order(AbilityCommand("LabTurretBurrow", 0)), c_orderQueueReplace);
    UnitIssueOrder(lv_gasTurret02, Order(AbilityCommand("LabTurretBurrow", 0)), c_orderQueueReplace);
    TriggerExecute(gt_TransmissionGasDidntKillEverythingQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ButtonTurnonGas_Init () {
    gt_ButtonTurnonGas = TriggerCreate("gt_ButtonTurnonGas_Func");
    TriggerAddEventDialogControl(gt_ButtonTurnonGas, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Gas Didn't Kill Everything Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionGasDidntKillEverythingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    gf_WaitifCriticalTransmissionisinprogress();
    if ((gv_securityComputerInCameraMode == true)) {
        libSwaC_gf_SendTransmissionCampaign(gv_kerrigan2, "zMission_Lab02|Line00098", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        libSwaC_gf_SendTransmissionCampaign(gv_kerrigan2, "zMission_Lab02|Line00098", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        gv_interruptableTransmission = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
    }
    if ((gv_securityComputerInCameraMode == true)) {
        libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Lab02|Line00097", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Lab02|Line00097", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        gv_interruptableTransmission = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionGasDidntKillEverythingQ_Init () {
    gt_TransmissionGasDidntKillEverythingQ = TriggerCreate("gt_TransmissionGasDidntKillEverythingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button - Release Zerg
//--------------------------------------------------------------------------------------------------
bool gt_ButtonReleaseZerg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventDialogControl() == gv_buttonSecurityComputer_ReleaseZerg))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_SecurityRoomMusic, true, false);
    gv_securityComputerFinished = true;
    DialogDestroy(gv_dialogSecurityComputer_ReleaseGas);
    DialogDestroy(gv_dialogSecurityComputer_ReleaseZerg);
    UISetCursorVisible(PlayerGroupAll(), false);
    gv_computerZergReleased = true;
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(62), "UmojanLabZergCrates", c_animNameDefault, "Stand Unpowered Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(2.3, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(62), "UmojanLabZergCrates", c_animNameDefault, "Stand Unpowered", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(921), 10.0, -1, 10, true);
    UnitRemove(UnitFromId(1841));
    UnitRemove(UnitFromId(1840));
    UnitRemove(UnitFromId(1839));
    UnitRemove(UnitFromId(1838));
    UnitRemove(UnitFromId(1837));
    UnitRemove(UnitFromId(1836));
    UnitRemove(UnitFromId(1835));
    libNtve_gf_CreateUnitsAtPoint2(libHots_gf_DifficultyValueInt2(3, 3, 4), "Zergling", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION22, PointFromId(370));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1795)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(libHots_gf_DifficultyValueInt2(4, 4, 5), "Zergling", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION22, PointFromId(455));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1796)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "Roach", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION22, PointFromId(443));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1797)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(libHots_gf_DifficultyValueInt2(3, 3, 4), "Zergling", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION22, PointFromId(472));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1798)), c_orderQueueReplace);
    TriggerExecute(gt_TransmissionDominionReactionatCagesQ, true, false);
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(libHots_gf_DifficultyValueInt2(3, 3, 4), "Zergling", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION22, PointFromId(455));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1796)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Roach", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION22, PointFromId(473));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1799)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(libHots_gf_DifficultyValueInt2(3, 3, 4), "Zergling", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION22, PointFromId(474));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1800)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(libHots_gf_DifficultyValueInt2(3, 3, 4), "Zergling", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION22, PointFromId(476));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1800)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Roach", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION22, PointFromId(476));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1800)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(libHots_gf_DifficultyValueInt2(3, 3, 2), libHots_gf_DifficultyValueSwarmUnitType("Zergling", "Zergling", "Baneling"), c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION22, PointFromId(475));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1800)), c_orderQueueReplace);
    Wait(6.0, c_timeGame);
    TriggerExecute(gt_LeaveSecurityCamera, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ButtonReleaseZerg_Init () {
    gt_ButtonReleaseZerg = TriggerCreate("gt_ButtonReleaseZerg_Func");
    TriggerAddEventDialogControl(gt_ButtonReleaseZerg, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Dominion Reaction at Cages Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionDominionReactionatCagesQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    gf_WaitifCriticalTransmissionisinprogress();
    if ((gv_securityComputerInCameraMode == true)) {
        libSwaC_gf_SendTransmissionCampaign(UnitFromId(438), "zMission_Lab02|Line00100", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_DontShowPortrait, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        gv_interruptableTransmission = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
    }
    else {
        libSwaC_gf_SendTransmissionCampaign(UnitFromId(438), "zMission_Lab02|Line00100", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionDominionReactionatCagesQ_Init () {
    gt_TransmissionDominionReactionatCagesQ = TriggerCreate("gt_TransmissionDominionReactionatCagesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leave Security Camera
//--------------------------------------------------------------------------------------------------
bool gt_LeaveSecurityCamera_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto26CBC54C_g;
    int auto26CBC54C_u;
    unit auto26CBC54C_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_securityComputerInCameraMode = false;
    gv_computerInUse = false;
    gv_securityComputerActive = false;
    libNtve_gf_HideScreenButton(false, gv_securityComputer_ReleaseGas);
    libNtve_gf_HideScreenButton(false, gv_securityComputer_ReleaseZerg);
    VisRevealerDestroy(gv_securityComputerRoomRevealer);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(923), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Lab02Level02", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    TriggerExecute(gt_RestoreNormalGameplayUI, true, false);
    UnitIssueOrder(UnitFromId(479), Order(AbilityCommand("UmojanLabDoorsThinLeftLowered", 0)), c_orderQueueReplace);
    TimerPause(gv_s2_LockdownTimer, false);
    if ((gv_securityComputerFinished == false)) {
        VisRevealerDestroy(gv_revealerCageArea);
    }

    if ((gv_computerZergReleased == true)) {
        auto26CBC54C_g = UnitGroup(null, gv_pLAYER_02_DOMINION22, RegionFromId(62), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto26CBC54C_u = UnitGroupCount(auto26CBC54C_g, c_unitCountAll);
        for (;; auto26CBC54C_u -= 1) {
            auto26CBC54C_var = UnitGroupUnitFromEnd(auto26CBC54C_g, auto26CBC54C_u);
            if (auto26CBC54C_var == null) { break; }
            UnitIssueOrder(auto26CBC54C_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(62))), c_orderQueueReplace);
        }
        TriggerExecute(gt_TransmissionSomeZergRemainQ, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LeaveSecurityCamera_Init () {
    gt_LeaveSecurityCamera = TriggerCreate("gt_LeaveSecurityCamera_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Some Zerg Remain Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionSomeZergRemainQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    gf_WaitifCriticalTransmissionisinprogress();
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Lab02|Line00099", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_interruptableTransmission = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    gf_WaitifCriticalTransmissionisinprogress();
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan2, "zMission_Lab02|Line00101", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_interruptableTransmission = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionSomeZergRemainQ_Init () {
    gt_TransmissionSomeZergRemainQ = TriggerCreate("gt_TransmissionSomeZergRemainQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Restore Normal Gameplay UI
//--------------------------------------------------------------------------------------------------
bool gt_RestoreNormalGameplayUI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PauseUnit(gv_kerrigan, false);
    libNtve_gf_ShowHideUnit(gv_kerrigan, true);
    libNtve_gf_MakeUnitInvulnerable(gv_kerrigan, false);
    libNtve_gf_PauseUnit(gv_kerrigan2, false);
    libNtve_gf_ShowHideUnit(gv_kerrigan2, true);
    libNtve_gf_MakeUnitInvulnerable(gv_kerrigan2, false);
    libNtve_gf_RestoreUnitSelection(gv_pLAYER_01_USER);
    AISetUnitScriptControlled(gv_kerrigan2, false);
    CinematicOverlay(false, 0.0, "Assets\\Textures\\securitycam1.dds", 0.0, true);
    GameSetLighting("DominionLab", 0.0);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationImmediate);
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RestoreNormalGameplayUI_Init () {
    gt_RestoreNormalGameplayUI = TriggerCreate("gt_RestoreNormalGameplayUI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Security Room Music
//--------------------------------------------------------------------------------------------------
bool gt_SecurityRoomMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_soundtrack = "ZLab02MusicCutscene22_RoomChoiceSELECTED";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZLab02MusicAlt2", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SecurityRoomMusic_Init () {
    gt_SecurityRoomMusic = TriggerCreate("gt_SecurityRoomMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Attack From Tram
//--------------------------------------------------------------------------------------------------
bool gt_DominionAttackFromTram_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto09C8C5DD_g;
    int auto09C8C5DD_u;
    unit auto09C8C5DD_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitRemove(UnitFromId(1181));
    UnitRemove(UnitFromId(1180));
    UnitRemove(UnitFromId(1578));
    auto09C8C5DD_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(61), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto09C8C5DD_u = UnitGroupCount(auto09C8C5DD_g, c_unitCountAll);
    for (;; auto09C8C5DD_u -= 1) {
        auto09C8C5DD_var = UnitGroupUnitFromEnd(auto09C8C5DD_g, auto09C8C5DD_u);
        if (auto09C8C5DD_var == null) { break; }
        libNtve_gf_PauseUnit(auto09C8C5DD_var, false);
        libNtve_gf_ShowHideUnit(auto09C8C5DD_var, true);
        AISetUnitScriptControlled(auto09C8C5DD_var, false);
        AIAttackWaveUseUnit(gv_pLAYER_02_DOMINION, auto09C8C5DD_var);
    }
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveSend(gv_pLAYER_02_DOMINION, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionAttackFromTram_Init () {
    gt_DominionAttackFromTram = TriggerCreate("gt_DominionAttackFromTram_Func");
    TriggerAddEventUnitRegion(gt_DominionAttackFromTram, UnitRefFromVariable("gv_kerrigan"), RegionFromId(63), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unpause Tram Fight
//--------------------------------------------------------------------------------------------------
bool gt_UnpauseTramFight_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto2375CCF0_g;
    int auto2375CCF0_u;
    unit auto2375CCF0_var;
    unitgroup auto11B544E5_g;
    int auto11B544E5_u;
    unit auto11B544E5_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto2375CCF0_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(66), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2375CCF0_u = UnitGroupCount(auto2375CCF0_g, c_unitCountAll);
    for (;; auto2375CCF0_u -= 1) {
        auto2375CCF0_var = UnitGroupUnitFromEnd(auto2375CCF0_g, auto2375CCF0_u);
        if (auto2375CCF0_var == null) { break; }
        UnitGroupAdd(gv_s2_TramStationDominion, auto2375CCF0_var);
        libNtve_gf_PauseUnit(auto2375CCF0_var, false);
    }
    auto11B544E5_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionFromId(66), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto11B544E5_u = UnitGroupCount(auto11B544E5_g, c_unitCountAll);
    for (;; auto11B544E5_u -= 1) {
        auto11B544E5_var = UnitGroupUnitFromEnd(auto11B544E5_g, auto11B544E5_u);
        if (auto11B544E5_var == null) { break; }
        libNtve_gf_PauseUnit(auto11B544E5_var, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnpauseTramFight_Init () {
    gt_UnpauseTramFight = TriggerCreate("gt_UnpauseTramFight_Func");
    TriggerAddEventUnitRegion(gt_UnpauseTramFight, UnitRefFromVariable("gv_kerrigan"), RegionFromId(67), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Lockdown 03 Reminder Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionLockdown03ReminderQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    gf_WaitifCriticalTransmissionisinprogress();
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan2, "zMission_Lab02|Line00165", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionLockdown03ReminderQ_Init () {
    gt_TransmissionLockdown03ReminderQ = TriggerCreate("gt_TransmissionLockdown03ReminderQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Force Raynor Through Door 03
//--------------------------------------------------------------------------------------------------
bool gt_ForceRaynorThroughDoor03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "RaynorLabMagazineShortLeash", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ForceRaynorThroughDoor03_Init () {
    gt_ForceRaynorThroughDoor03 = TriggerCreate("gt_ForceRaynorThroughDoor03_Func");
    TriggerEnable(gt_ForceRaynorThroughDoor03, false);
    TriggerAddEventUnitRegion(gt_ForceRaynorThroughDoor03, UnitRefFromVariable("gv_kerrigan"), RegionFromId(59), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Got Through Lockdown Door 03 Q
//--------------------------------------------------------------------------------------------------
bool gt_GotThroughLockdownDoor03Q_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_gate;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(gv_kerrigan, RegionFromId(59)) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(gv_kerrigan2, RegionFromId(59)) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1) && (TimerGetRemaining(gv_s2_LockdownTimer) >= gv_achievementLockDownTime)) {
        gv_doorsReachedWithinTimeLimit += 1;
        if ((gv_doorsReachedWithinTimeLimit == 3)) {
            TriggerExecute(gt_AchievementLockdownSpeedRunH, true, false);
        }

    }

    gv_lowestLockDownTime = MinF(gv_lowestLockDownTime, TimerGetRemaining(gv_s2_LockdownTimer));
    SoundPlay(SoundLink("Goliath_Explode", -1), PlayerGroupAll(), 100.0, 0.0);
    CameraShakeStart(gv_pLAYER_01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.3, 2.0, 100.0, 1.5);
    lv_gate = UnitFromId(431);
    TransmissionClear(gv_interruptableTransmission);
    TimerPause(gv_s2_LockdownTimer, true);
    TimerWindowShow(gv_s2_LockdownTimerWindow, PlayerGroupAll(), false);
    PingDestroy(gv_s2_LockdownDoorPing);
    UnitKill(UnitFromId(308));
    UnitIssueOrder(lv_gate, Order(AbilityCommand("UmojanLabDoorsThinLeft", 0)), c_orderQueueReplace);
    TriggerStop(gt_SecurityRoomMusic);
    TriggerExecute(gt_MidBoardTramMusic, true, false);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "RaynorLabMagazineShortLeash", 0);
    TriggerEnable(gt_TransmissionLockdown03ReminderQ, false);
    TriggerExecute(gt_ObjectiveEscapeThroughSublevelComplete, true, true);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    gf_WaitifCriticalTransmissionisinprogress();
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Lab02|Line00102", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    TriggerEnable(gt_TramStationDominionKilled, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GotThroughLockdownDoor03Q_Init () {
    gt_GotThroughLockdownDoor03Q = TriggerCreate("gt_GotThroughLockdownDoor03Q_Func");
    TriggerEnable(gt_GotThroughLockdownDoor03Q, false);
    TriggerAddEventTimePeriodic(gt_GotThroughLockdownDoor03Q, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tram Station Dominion Killed
//--------------------------------------------------------------------------------------------------
bool gt_TramStationDominionKilled_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(gv_s2_TramStationDominion, c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(1.0, c_timeGame);
    libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/559FAB76"));
    TriggerExecute(gt_MidQStage3, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TramStationDominionKilled_Init () {
    gt_TramStationDominionKilled = TriggerCreate("gt_TramStationDominionKilled_Func");
    TriggerEnable(gt_TramStationDominionKilled, false);
    TriggerAddEventTimePeriodic(gt_TramStationDominionKilled, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Destination Timer
//--------------------------------------------------------------------------------------------------
bool gt_CreateDestinationTimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TimerStart(gv_s3_TramTimer, 190.0, false, c_timeGame);
    while (!((TimerGetRemaining(gv_s3_TramTimer) < 150.0))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_TransmissionTramGoesFasterQ, true, false);
    while (!((TimerGetRemaining(gv_s3_TramTimer) < 100.0))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_TramExitsTunnel, true, false);
    while (!((TimerGetRemaining(gv_s3_TramTimer) < 30.0))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_TransmissionTramAlmostThereQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateDestinationTimer_Init () {
    gt_CreateDestinationTimer = TriggerCreate("gt_CreateDestinationTimer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Tram Progress Bar
//--------------------------------------------------------------------------------------------------
bool gt_CreateTramProgressBar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupAdd(gv_s3_TramEngineGroup, UnitFromId(540));
    UnitGroupAdd(gv_s3_TramEngineGroup, UnitFromId(665));
    UnitGroupAdd(gv_s3_TramEngineGroup, UnitFromId(533));
    UnitGroupAdd(gv_s3_TramEngineGroup, UnitFromId(379));
    UnitGroupAdd(gv_s3_TramEngineGroup, UnitFromId(664));
    UnitGroupAdd(gv_s3_TramEngineGroup, UnitFromId(392));
    gv_s3_TRAM_CURRENT_LIFE = gv_s3_TRAM_MAX_LIFE;
    libSwaC_gf_DisplaySingularBossBarSwarmCampaign("Assets\\Textures\\btn-boss-tram.dds", StringExternal("Param/Value/A32853D7"), FixedToInt(gv_s3_TRAM_MAX_LIFE));
    libSwaC_gf_SetSingularBossBarColor(Color(16.47, 83.53, 0.00));
    libSwaC_gf_SetSingularBossBarTitleColor(Color(100.00, 100.00, 100.00));
    TriggerEnable(gt_UpdateTramProgressBar, true);
    TriggerEnable(gt_TramEngineDestroyed, true);
    TriggerEnable(gt_TramEngineUnderAttackWarning, true);
    TriggerEnable(gt_DefeatTramDestroyed, true);
    TriggerEnable(gt_TramAt75Health, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateTramProgressBar_Init () {
    gt_CreateTramProgressBar = TriggerCreate("gt_CreateTramProgressBar_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Tram Progress Bar
//--------------------------------------------------------------------------------------------------
bool gt_UpdateTramProgressBar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unit auto3C030BE8_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_s3_TRAM_CURRENT_LIFE = (UnitGetPropertyFixed(UnitFromId(533), c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(UnitFromId(665), c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(UnitFromId(540), c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(UnitFromId(392), c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(UnitFromId(664), c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(UnitFromId(379), c_unitPropLife, c_unitPropCurrent));
    libSwaC_gf_SetSingularBossBarCurrentValueSwarmCampaign(FixedToInt(gv_s3_TRAM_CURRENT_LIFE), true);
    if ((UnitGetCustomValue(EventUnit(), 0) == 0.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) <= (gv_s3_TRAM_ENGINE_MAX_LIFE / 2.0))) {
        UnitSetCustomValue(EventUnit(), 0, 1.0);
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "Signal Damaged");
        auto3C030BE8_val = EventUnit();
        if (auto3C030BE8_val == gv_s3_TramEngineUnits[1]) {
            ActorSend(ActorFromDoodad(gv_s3_TramEngineDoodads[1]), "AnimPlay Work Stand,Work PlayForever");
        }
        else if (auto3C030BE8_val == gv_s3_TramEngineUnits[2]) {
            ActorSend(ActorFromDoodad(gv_s3_TramEngineDoodads[2]), "AnimPlay Work Stand,Work PlayForever");
        }
        else if (auto3C030BE8_val == gv_s3_TramEngineUnits[3]) {
            ActorSend(ActorFromDoodad(gv_s3_TramEngineDoodads[3]), "AnimPlay Work Stand,Work PlayForever");
        }
        else if (auto3C030BE8_val == gv_s3_TramEngineUnits[4]) {
            ActorSend(ActorFromDoodad(gv_s3_TramEngineDoodads[4]), "AnimPlay Work Stand,Work PlayForever");
        }
        else if (auto3C030BE8_val == gv_s3_TramEngineUnits[5]) {
            ActorSend(ActorFromDoodad(gv_s3_TramEngineDoodads[5]), "AnimPlay Work Stand,Work PlayForever");
        }
        else if (auto3C030BE8_val == gv_s3_TramEngineUnits[6]) {
            ActorSend(ActorFromDoodad(gv_s3_TramEngineDoodads[6]), "AnimPlay Work Stand,Work PlayForever");
        }
        else {
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateTramProgressBar_Init () {
    gt_UpdateTramProgressBar = TriggerCreate("gt_UpdateTramProgressBar_Func");
    TriggerEnable(gt_UpdateTramProgressBar, false);
    TriggerAddEventUnitProperty(gt_UpdateTramProgressBar, UnitRefFromUnit(UnitFromId(540)), c_unitPropLife);
    TriggerAddEventUnitProperty(gt_UpdateTramProgressBar, UnitRefFromUnit(UnitFromId(665)), c_unitPropLife);
    TriggerAddEventUnitProperty(gt_UpdateTramProgressBar, UnitRefFromUnit(UnitFromId(533)), c_unitPropLife);
    TriggerAddEventUnitProperty(gt_UpdateTramProgressBar, UnitRefFromUnit(UnitFromId(379)), c_unitPropLife);
    TriggerAddEventUnitProperty(gt_UpdateTramProgressBar, UnitRefFromUnit(UnitFromId(664)), c_unitPropLife);
    TriggerAddEventUnitProperty(gt_UpdateTramProgressBar, UnitRefFromUnit(UnitFromId(392)), c_unitPropLife);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tram Engine Under Attack Warning
//--------------------------------------------------------------------------------------------------
bool gt_TramEngineUnderAttackWarning_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libHots_gf_PingStoredForUnit(EventUnit(), 1) == c_invalidPingId)) {
        UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/75DBA9D3"), null, EventUnit());
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(EventUnit()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 3.0, 270.0);
        SoundPlay(SoundLink("Alert_TerranAllyUnderAttack", -1), PlayerGroupAll(), 100.0, 0.0);
        libHots_gf_StorePingForUnit(EventUnit(), 1, PingLastCreated());
        Wait(15.0, c_timeAI);
        libHots_gf_StorePingForUnit(EventUnit(), 1, c_invalidPingId);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TramEngineUnderAttackWarning_Init () {
    gt_TramEngineUnderAttackWarning = TriggerCreate("gt_TramEngineUnderAttackWarning_Func");
    TriggerEnable(gt_TramEngineUnderAttackWarning, false);
    TriggerAddEventUnitProperty(gt_TramEngineUnderAttackWarning, UnitRefFromUnit(UnitFromId(540)), c_unitPropLife);
    TriggerAddEventUnitProperty(gt_TramEngineUnderAttackWarning, UnitRefFromUnit(UnitFromId(665)), c_unitPropLife);
    TriggerAddEventUnitProperty(gt_TramEngineUnderAttackWarning, UnitRefFromUnit(UnitFromId(533)), c_unitPropLife);
    TriggerAddEventUnitProperty(gt_TramEngineUnderAttackWarning, UnitRefFromUnit(UnitFromId(379)), c_unitPropLife);
    TriggerAddEventUnitProperty(gt_TramEngineUnderAttackWarning, UnitRefFromUnit(UnitFromId(664)), c_unitPropLife);
    TriggerAddEventUnitProperty(gt_TramEngineUnderAttackWarning, UnitRefFromUnit(UnitFromId(392)), c_unitPropLife);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tram Engine Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_TramEngineDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unit auto277FB764_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CameraShakeStart(gv_pLAYER_01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.1, 1.0, 100.0, 0.5);
    gv_s3_TramEnginesDestroyed += 1;
    TriggerExecute(gt_TransmissionTramEngineDestroyedQ, true, false);
    auto277FB764_val = EventUnit();
    if (auto277FB764_val == gv_s3_TramEngineUnits[1]) {
        PingDestroy(gv_s3_TramPings[1]);
        ActorSend(ActorFromDoodad(gv_s3_TramEngineDoodads[1]), "AnimClear Work");
        ActorSend(ActorFromDoodad(gv_s3_TramEngineDoodads[1]), "AnimPlay Dead Dead PlayForever");
    }
    else if (auto277FB764_val == gv_s3_TramEngineUnits[2]) {
        PingDestroy(gv_s3_TramPings[2]);
        ActorSend(ActorFromDoodad(gv_s3_TramEngineDoodads[2]), "AnimClear Work");
        ActorSend(ActorFromDoodad(gv_s3_TramEngineDoodads[2]), "AnimPlay Dead Dead PlayForever");
    }
    else if (auto277FB764_val == gv_s3_TramEngineUnits[3]) {
        PingDestroy(gv_s3_TramPings[3]);
        ActorSend(ActorFromDoodad(gv_s3_TramEngineDoodads[3]), "AnimClear Work");
        ActorSend(ActorFromDoodad(gv_s3_TramEngineDoodads[3]), "AnimPlay Dead Dead PlayForever");
    }
    else if (auto277FB764_val == gv_s3_TramEngineUnits[4]) {
        PingDestroy(gv_s3_TramPings[4]);
        ActorSend(ActorFromDoodad(gv_s3_TramEngineDoodads[4]), "AnimClear Work");
        ActorSend(ActorFromDoodad(gv_s3_TramEngineDoodads[4]), "AnimPlay Dead Dead PlayForever");
    }
    else if (auto277FB764_val == gv_s3_TramEngineUnits[5]) {
        PingDestroy(gv_s3_TramPings[5]);
        ActorSend(ActorFromDoodad(gv_s3_TramEngineDoodads[5]), "AnimClear Work");
        ActorSend(ActorFromDoodad(gv_s3_TramEngineDoodads[5]), "AnimPlay Dead Dead PlayForever");
    }
    else if (auto277FB764_val == gv_s3_TramEngineUnits[6]) {
        PingDestroy(gv_s3_TramPings[6]);
        ActorSend(ActorFromDoodad(gv_s3_TramEngineDoodads[6]), "AnimClear Work");
        ActorSend(ActorFromDoodad(gv_s3_TramEngineDoodads[6]), "AnimPlay Dead Dead PlayForever");
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TramEngineDestroyed_Init () {
    gt_TramEngineDestroyed = TriggerCreate("gt_TramEngineDestroyed_Func");
    TriggerEnable(gt_TramEngineDestroyed, false);
    TriggerAddEventUnitDied(gt_TramEngineDestroyed, UnitRefFromUnit(UnitFromId(379)));
    TriggerAddEventUnitDied(gt_TramEngineDestroyed, UnitRefFromUnit(UnitFromId(664)));
    TriggerAddEventUnitDied(gt_TramEngineDestroyed, UnitRefFromUnit(UnitFromId(392)));
    TriggerAddEventUnitDied(gt_TramEngineDestroyed, UnitRefFromUnit(UnitFromId(540)));
    TriggerAddEventUnitDied(gt_TramEngineDestroyed, UnitRefFromUnit(UnitFromId(665)));
    TriggerAddEventUnitDied(gt_TramEngineDestroyed, UnitRefFromUnit(UnitFromId(533)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Tram Engine Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionTramEngineDestroyedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoE7901CF1_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    autoE7901CF1_val = gv_s3_TramEnginesDestroyed;
    if (autoE7901CF1_val == 1) {
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
        gf_WaitifCriticalTransmissionisinprogress();
        libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Lab02|Line00149", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        gf_WaitifCriticalTransmissionisinprogress();
        libSwaC_gf_SendTransmissionCampaign(gv_kerrigan2, "zMission_Lab02|Line00148", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    }
    else if (autoE7901CF1_val == 4) {
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
        gf_WaitifCriticalTransmissionisinprogress();
        libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Lab02|Line00150", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    }
    else if (autoE7901CF1_val == 5) {
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
        gf_WaitifCriticalTransmissionisinprogress();
        libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Lab02|Line00151", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionTramEngineDestroyedQ_Init () {
    gt_TransmissionTramEngineDestroyedQ = TriggerCreate("gt_TransmissionTramEngineDestroyedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tram At 75% Health
//--------------------------------------------------------------------------------------------------
bool gt_TramAt75Health_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_s3_TRAM_CURRENT_LIFE <= (gv_s3_TRAM_MAX_LIFE * 0.75)))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_TramAt40Health, true);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(65), "UmojanLabTram", c_animNameDefault, "Stand Work Start", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TramAt75Health_Init () {
    gt_TramAt75Health = TriggerCreate("gt_TramAt75Health_Func");
    TriggerEnable(gt_TramAt75Health, false);
    TriggerAddEventTimePeriodic(gt_TramAt75Health, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tram At 40% Health
//--------------------------------------------------------------------------------------------------
bool gt_TramAt40Health_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_s3_TRAM_CURRENT_LIFE <= (gv_s3_TRAM_MAX_LIFE * 0.4)))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(65), "UmojanLabTram", c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    TriggerExecute(gt_TransmissionTramAt40HealthQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TramAt40Health_Init () {
    gt_TramAt40Health = TriggerCreate("gt_TramAt40Health_Func");
    TriggerEnable(gt_TramAt40Health, false);
    TriggerAddEventTimePeriodic(gt_TramAt40Health, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Tram At 40% Health Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionTramAt40HealthQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    gf_WaitifCriticalTransmissionisinprogress();
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan2, "zMission_Lab02|Line00154", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionTramAt40HealthQ_Init () {
    gt_TransmissionTramAt40HealthQ = TriggerCreate("gt_TransmissionTramAt40HealthQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tram Exits Tunnel
//--------------------------------------------------------------------------------------------------
bool gt_TramExitsTunnel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Lab02Train_Desert", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(126));
    gv_s3_TramRevealer2 = VisRevealerLastCreated();
    GameSetLighting("DominionLab02OutsideTramFlash", 1.0);
    ActorSend(ActorFromDoodad(DoodadFromId(1029)), "SetVisibility 1");
    ActorSend(ActorFromDoodad(DoodadFromId(1029)), "SetOpacity 1.000000 2.000000");
    ActorSend(ActorFromDoodad(DoodadFromId(532)), "SetOpacity 0.000000 2.000000");
    Wait(2.0, c_timeGame);
    ActorSend(ActorFromDoodad(DoodadFromId(532)), "SetVisibility");
    TriggerExecute(gt_TransmissionTramExitsTunnelQ, true, false);
    Wait(1.0, c_timeGame);
    GameSetLighting("DominionLab02OutsideTram", 2.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TramExitsTunnel_Init () {
    gt_TramExitsTunnel = TriggerCreate("gt_TramExitsTunnel_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Tram Attacks
//--------------------------------------------------------------------------------------------------
bool gt_StartTramAttacks_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionIncomingDominionForcesQ, true, false);
    Wait(15.0, c_timeGame);
    gf_TramAttackAir(1, "VikingFighter", RegionFromId(71));
    Wait(15.0, c_timeGame);
    gf_TramAttackAir(2, "VikingFighter", RegionFromId(72));
    Wait(10.0, c_timeGame);
    gf_TramAttackAirDumb(1, "Wraith", RegionFromId(94));
    Wait(10.0, c_timeGame);
    gf_TramAttackDropship(3, 0, "Marine", null, RegionFromId(70), PointFromId(629));
    Wait(10.0, c_timeGame);
    gf_TramAttackAir(2, "VikingFighter", RegionFromId(70));
    Wait(10.0, c_timeGame);
    gf_TramAttackAir(1, "VikingFighter", RegionFromId(69));
    Wait(10.0, c_timeGame);
    gf_TramAttackAirDumb(2, "Wraith", RegionFromId(95));
    Wait(20.0, c_timeGame);
    gf_TramAttackDropship(2, 1, "Marine", "Ghost", RegionFromId(72), PointFromId(302));
    Wait(10.0, c_timeGame);
    gf_TramAttackAirDumb(1, "Wraith", RegionFromId(69));
    gf_TramAttackAirDumb(1, "Wraith", RegionFromId(72));
    Wait(15.0, c_timeGame);
    gf_TramAttackAirDumb(1, "VikingFighter", RegionFromId(70));
    Wait(10.0, c_timeGame);
    gf_TramAttackAirDumb(1, "Wraith", RegionFromId(95));
    gf_TramAttackAirDumb(1, "Wraith", RegionFromId(94));
    Wait(25.0, c_timeGame);
    TriggerEnable(gt_TransmissionSiegeTanksQ, true);
    gf_TramAttackDropship(1, 1, "SiegeTank", "Marine", RegionFromId(71), PointFromId(603));
    Wait(3.0, c_timeGame);
    gf_TramAttackDropship(1, 1, "SiegeTank", "Marine", RegionFromId(70), PointFromId(629));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartTramAttacks_Init () {
    gt_StartTramAttacks = TriggerCreate("gt_StartTramAttacks_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Tram Attacks (Hard)
//--------------------------------------------------------------------------------------------------
bool gt_StartTramAttacksHard_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionIncomingDominionForcesQ, true, false);
    Wait(15.0, c_timeGame);
    gf_TramAttackAir(2, "VikingFighter", RegionFromId(72));
    Wait(1.5, c_timeGame);
    gf_TramAttackAir(2, "VikingFighter", RegionFromId(95));
    Wait(13.5, c_timeGame);
    gf_TramAttackAirDumb(2, "Wraith", RegionFromId(71));
    Wait(10.0, c_timeGame);
    gf_TramAttackAirDumb(2, "Wraith", RegionFromId(70));
    Wait(10.0, c_timeGame);
    gf_TramAttackDropship(3, 0, "Marine", null, RegionFromId(71), PointFromId(603));
    Wait(10.0, c_timeGame);
    gf_TramAttackAir(1, "VikingFighter", RegionFromId(70));
    gf_TramAttackAir(3, "VikingFighter", RegionFromId(69));
    Wait(10.0, c_timeGame);
    gf_TramAttackAir(2, "Wraith", RegionFromId(72));
    Wait(10.0, c_timeGame);
    gf_TramAttackAirDumb(2, "Wraith", RegionFromId(95));
    Wait(20.0, c_timeGame);
    gf_TramAttackDropship(2, 1, "Ghost", "Marine", RegionFromId(71), PointFromId(603));
    Wait(10.0, c_timeGame);
    gf_TramAttackAirDumb(2, "Wraith", RegionFromId(69));
    Wait(15.0, c_timeGame);
    gf_TramAttackAir(1, "MengskVikingFighter", RegionFromId(70));
    gf_TramAttackAir(1, "MengskVikingFighter", RegionFromId(69));
    gf_TramAttackAirDumb(2, "VikingFighter", RegionFromId(70));
    Wait(10.0, c_timeGame);
    gf_TramAttackAirDumb(1, "Wraith", RegionFromId(94));
    gf_TramAttackAirDumb(1, "Wraith", RegionFromId(71));
    Wait(25.0, c_timeGame);
    TriggerEnable(gt_TransmissionSiegeTanksQ, true);
    gf_TramAttackDropship(1, 0, "SiegeTank", null, RegionFromId(71), PointFromId(603));
    Wait(3.0, c_timeGame);
    gf_TramAttackDropship(1, 0, "Firebat", null, RegionFromId(72), PointFromId(302));
    Wait(3.0, c_timeGame);
    gf_TramAttackDropship(1, 0, "Firebat", null, RegionFromId(70), PointFromId(629));
    Wait(3.0, c_timeGame);
    gf_TramAttackDropship(1, 0, "SiegeTank", null, RegionFromId(69), PointFromId(677));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartTramAttacksHard_Init () {
    gt_StartTramAttacksHard = TriggerCreate("gt_StartTramAttacksHard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Incoming Dominion Forces Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionIncomingDominionForcesQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    gf_WaitifCriticalTransmissionisinprogress();
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab02|Line00106", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionIncomingDominionForcesQ_Init () {
    gt_TransmissionIncomingDominionForcesQ = TriggerCreate("gt_TransmissionIncomingDominionForcesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Tram Goes Faster Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionTramGoesFasterQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlay(SoundLink("Umojan_Lab02Tram_speedup", -1), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_SetAnimationTimeScale(ActorFromDoodad(DoodadFromId(532)), c_animNameDefault, 0.6);
    Wait(0.5, c_timeGame);
    libNtve_gf_SetAnimationTimeScale(ActorFromDoodad(DoodadFromId(532)), c_animNameDefault, 0.7);
    Wait(0.5, c_timeGame);
    libNtve_gf_SetAnimationTimeScale(ActorFromDoodad(DoodadFromId(532)), c_animNameDefault, 0.8);
    Wait(0.5, c_timeGame);
    libNtve_gf_SetAnimationTimeScale(ActorFromDoodad(DoodadFromId(532)), c_animNameDefault, 0.9);
    Wait(0.5, c_timeGame);
    libNtve_gf_SetAnimationTimeScale(ActorFromDoodad(DoodadFromId(532)), c_animNameDefault, 1.0);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZLab02MusicEvent24_TramPicksUpSpeedStart", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gf_WaitifCriticalTransmissionisinprogress();
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan2, "zMission_Lab02|Line00111", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionTramGoesFasterQ_Init () {
    gt_TransmissionTramGoesFasterQ = TriggerCreate("gt_TransmissionTramGoesFasterQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Siege Tanks Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionSiegeTanksQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "SiegeTank"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    gf_WaitifCriticalTransmissionisinprogress();
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Lab02|Line00181", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionSiegeTanksQ_Init () {
    gt_TransmissionSiegeTanksQ = TriggerCreate("gt_TransmissionSiegeTanksQ_Func");
    TriggerEnable(gt_TransmissionSiegeTanksQ, false);
    TriggerAddEventUnitStartedAttack(gt_TransmissionSiegeTanksQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Tram Exits Tunnel Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionTramExitsTunnelQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZLab02MusicEvent25_OutOfLabStart", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gf_WaitifCriticalTransmissionisinprogress();
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan2, "zMission_Lab02|Line00152", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionTramExitsTunnelQ_Init () {
    gt_TransmissionTramExitsTunnelQ = TriggerCreate("gt_TransmissionTramExitsTunnelQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Tram Almost There Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionTramAlmostThereQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Lab02|Line00110", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionTramAlmostThereQ_Init () {
    gt_TransmissionTramAlmostThereQ = TriggerCreate("gt_TransmissionTramAlmostThereQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tram Successfully Defended
//--------------------------------------------------------------------------------------------------
bool gt_TramSuccessfullyDefended_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_TramAt40Health, false);
    TriggerEnable(gt_TramAt75Health, false);
    while (!((UnitGroupCount(gv_s3_TramAttackGroup, c_unitCountAlive) == 0) && (libSwaC_gf_PlayerIsInCombatCampaign(gv_pLAYER_01_USER) == false))) {
        Wait(1.0, c_timeGame);
    }
    if ((gv_gameOver == true)) {
        return true;
    }

    TriggerEnable(gt_DefeatTramDestroyed, false);
    libSwaC_gf_ShowHideSingularBossBarSwarmCampaign(false);
    TriggerExecute(gt_AchievementEnginesLost, true, true);
    TriggerExecute(gt_SlowDownandStopTram, true, false);
    Wait(1.0, c_timeGame);
    SoundPlay(SoundLink("Umojan_Lab02Tram_docking", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    TriggerExecute(gt_ObjectiveDefendTheTramComplete, true, true);
    libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/966206AB"));
    TriggerExecute(gt_MidQStage4, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TramSuccessfullyDefended_Init () {
    gt_TramSuccessfullyDefended = TriggerCreate("gt_TramSuccessfullyDefended_Func");
    TriggerAddEventTimer(gt_TramSuccessfullyDefended, gv_s3_TramTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slow Down and Stop Tram
//--------------------------------------------------------------------------------------------------
bool gt_SlowDownandStopTram_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_SetAnimationTimeScale(ActorFromDoodad(DoodadFromId(1029)), c_animNameDefault, 0.8);
    Wait(2.0, c_timeGame);
    libNtve_gf_SetAnimationTimeScale(ActorFromDoodad(DoodadFromId(1029)), c_animNameDefault, 0.6);
    Wait(2.0, c_timeGame);
    libNtve_gf_SetAnimationTimeScale(ActorFromDoodad(DoodadFromId(1029)), c_animNameDefault, 0.4);
    Wait(2.0, c_timeGame);
    libNtve_gf_SetAnimationTimeScale(ActorFromDoodad(DoodadFromId(1029)), c_animNameDefault, 0.2);
    Wait(3.0, c_timeGame);
    CameraShakeStart(gv_pLAYER_01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.1, 1.0, 100.0, 0.5);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlowDownandStopTram_Init () {
    gt_SlowDownandStopTram = TriggerCreate("gt_SlowDownandStopTram_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tram - Unit Unloaded Behavior
//--------------------------------------------------------------------------------------------------
bool gt_TramUnitUnloadedBehavior_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Medivac"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AISetUnitSuicide(EventUnitCargo(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TramUnitUnloadedBehavior_Init () {
    gt_TramUnitUnloadedBehavior = TriggerCreate("gt_TramUnitUnloadedBehavior_Func");
    TriggerAddEventUnitCargo(gt_TramUnitUnloadedBehavior, null, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Make Civilians Scared
//--------------------------------------------------------------------------------------------------
bool gt_MakeCiviliansScared_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto4516E8DF_g;
    int auto4516E8DF_u;
    unit auto4516E8DF_var;
    unitgroup autoEA15FE59_g;
    int autoEA15FE59_u;
    unit autoEA15FE59_var;
    unitgroup auto205D1C24_g;
    int auto205D1C24_u;
    unit auto205D1C24_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto4516E8DF_g = UnitGroup("Scientist", gv_pLAYER_02_DOMINION2, RegionFromId(60), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4516E8DF_u = UnitGroupCount(auto4516E8DF_g, c_unitCountAll);
    for (;; auto4516E8DF_u -= 1) {
        auto4516E8DF_var = UnitGroupUnitFromEnd(auto4516E8DF_g, auto4516E8DF_u);
        if (auto4516E8DF_var == null) { break; }
        UnitBehaviorAddPlayer(auto4516E8DF_var, "Scared", gv_pLAYER_02_DOMINION2, 1);
        Wait(0.5, c_timeGame);
    }
    autoEA15FE59_g = UnitGroup("CivilianFemale", gv_pLAYER_02_DOMINION2, RegionFromId(60), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEA15FE59_u = UnitGroupCount(autoEA15FE59_g, c_unitCountAll);
    for (;; autoEA15FE59_u -= 1) {
        autoEA15FE59_var = UnitGroupUnitFromEnd(autoEA15FE59_g, autoEA15FE59_u);
        if (autoEA15FE59_var == null) { break; }
        UnitBehaviorAddPlayer(autoEA15FE59_var, "Scared", gv_pLAYER_02_DOMINION2, 1);
        Wait(0.5, c_timeGame);
    }
    auto205D1C24_g = UnitGroup("Civilian", gv_pLAYER_02_DOMINION2, RegionFromId(60), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto205D1C24_u = UnitGroupCount(auto205D1C24_g, c_unitCountAll);
    for (;; auto205D1C24_u -= 1) {
        auto205D1C24_var = UnitGroupUnitFromEnd(auto205D1C24_g, auto205D1C24_u);
        if (auto205D1C24_var == null) { break; }
        UnitBehaviorAddPlayer(auto205D1C24_var, "Scared", gv_pLAYER_02_DOMINION2, 1);
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MakeCiviliansScared_Init () {
    gt_MakeCiviliansScared = TriggerCreate("gt_MakeCiviliansScared_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Release Umojan to Bullies
//--------------------------------------------------------------------------------------------------
bool gt_ReleaseUmojantoBullies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION2))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AIRemoveUnitFromAnyWavesAndSetHome(EventUnit(), PointFromId(652));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReleaseUmojantoBullies_Init () {
    gt_ReleaseUmojantoBullies = TriggerCreate("gt_ReleaseUmojantoBullies_Func");
    TriggerAddEventUnitRegion(gt_ReleaseUmojantoBullies, null, RegionFromId(78), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Umojan Marines Move Out
//--------------------------------------------------------------------------------------------------
bool gt_UmojanMarinesMoveOut_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto81953146_g;
    int auto81953146_u;
    unit auto81953146_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto81953146_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionFromId(85), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto81953146_u = UnitGroupCount(auto81953146_g, c_unitCountAll);
    for (;; auto81953146_u -= 1) {
        auto81953146_var = UnitGroupUnitFromEnd(auto81953146_g, auto81953146_u);
        if (auto81953146_var == null) { break; }
        UnitIssueOrder(auto81953146_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(649)), c_orderQueueReplace);
        UnitIssueOrder(auto81953146_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(650)), c_orderQueueAddToEnd);
        UnitIssueOrder(auto81953146_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(651)), c_orderQueueAddToEnd);
        UnitIssueOrder(auto81953146_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(652)), c_orderQueueAddToEnd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UmojanMarinesMoveOut_Init () {
    gt_UmojanMarinesMoveOut = TriggerCreate("gt_UmojanMarinesMoveOut_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Archangel Music
//--------------------------------------------------------------------------------------------------
bool gt_ArchangelMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_soundtrack = "ZLab02MusicCutscene29_ArchangelFight";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 1.0);
    SoundtrackWait(lv_soundtrack);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TitanMusic", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArchangelMusic_Init () {
    gt_ArchangelMusic = TriggerCreate("gt_ArchangelMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Attack From Door
//--------------------------------------------------------------------------------------------------
bool gt_DominionAttackFromDoor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoCA0B1ACB_g;
    int autoCA0B1ACB_u;
    unit autoCA0B1ACB_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoCA0B1ACB_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(82), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCA0B1ACB_u = UnitGroupCount(autoCA0B1ACB_g, c_unitCountAll);
    for (;; autoCA0B1ACB_u -= 1) {
        autoCA0B1ACB_var = UnitGroupUnitFromEnd(autoCA0B1ACB_g, autoCA0B1ACB_u);
        if (autoCA0B1ACB_var == null) { break; }
        AISetUnitScriptControlled(autoCA0B1ACB_var, false);
        AIAttackWaveUseUnit(gv_pLAYER_02_DOMINION, autoCA0B1ACB_var);
        UnitGroupAdd(gv_s4_DominionAttackers, autoCA0B1ACB_var);
    }
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveSend(gv_pLAYER_02_DOMINION, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionAttackFromDoor_Init () {
    gt_DominionAttackFromDoor = TriggerCreate("gt_DominionAttackFromDoor_Func");
    TriggerAddEventUnitRegion(gt_DominionAttackFromDoor, UnitRefFromVariable("gv_kerrigan"), RegionFromId(127), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Attack Across Bridge
//--------------------------------------------------------------------------------------------------
bool gt_DominionAttackAcrossBridge_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto285E27D3_g;
    int auto285E27D3_u;
    unit auto285E27D3_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(76), 10.0, true);
    auto285E27D3_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(83), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto285E27D3_u = UnitGroupCount(auto285E27D3_g, c_unitCountAll);
    for (;; auto285E27D3_u -= 1) {
        auto285E27D3_var = UnitGroupUnitFromEnd(auto285E27D3_g, auto285E27D3_u);
        if (auto285E27D3_var == null) { break; }
        AISetUnitScriptControlled(auto285E27D3_var, false);
        AIAttackWaveUseUnit(gv_pLAYER_02_DOMINION, auto285E27D3_var);
        UnitGroupAdd(gv_s4_DominionAttackers, auto285E27D3_var);
    }
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveSend(gv_pLAYER_02_DOMINION, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionAttackAcrossBridge_Init () {
    gt_DominionAttackAcrossBridge = TriggerCreate("gt_DominionAttackAcrossBridge_Func");
    TriggerAddEventUnitRegion(gt_DominionAttackAcrossBridge, UnitRefFromVariable("gv_kerrigan"), RegionFromId(75), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S4 Drop Pod Crashing 01
//--------------------------------------------------------------------------------------------------
bool gt_S4DropPodCrashing01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto7D0F7606_g;
    int auto7D0F7606_u;
    unit auto7D0F7606_var;
    unitgroup autoE740977B_g;
    int autoE740977B_u;
    unit autoE740977B_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_ShowHideUnit(UnitFromId(680), true);
    UnitBehaviorAddPlayer(UnitFromId(680), "UmojanLabCrashSite", gv_pLAYER_02_DOMINION2, 1);
    Wait(2.0, c_timeGame);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, RegionGetCenter(RegionFromId(81)));
    CameraShakeStart(gv_pLAYER_01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.3, 2.0, 100.0, 1.5);
    TerrainShowRegion(RegionFromId(81), false);
    auto7D0F7606_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(81), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7D0F7606_u = UnitGroupCount(auto7D0F7606_g, c_unitCountAll);
    for (;; auto7D0F7606_u -= 1) {
        auto7D0F7606_var = UnitGroupUnitFromEnd(auto7D0F7606_g, auto7D0F7606_u);
        if (auto7D0F7606_var == null) { break; }
        UnitKill(auto7D0F7606_var);
    }
    autoE740977B_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionFromId(81), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE740977B_u = UnitGroupCount(autoE740977B_g, c_unitCountAll);
    for (;; autoE740977B_u -= 1) {
        autoE740977B_var = UnitGroupUnitFromEnd(autoE740977B_g, autoE740977B_u);
        if (autoE740977B_var == null) { break; }
        UnitKill(autoE740977B_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S4DropPodCrashing01_Init () {
    gt_S4DropPodCrashing01 = TriggerCreate("gt_S4DropPodCrashing01_Func");
    TriggerAddEventUnitRegion(gt_S4DropPodCrashing01, UnitRefFromVariable("gv_kerrigan"), RegionFromId(75), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Reaches Spaceport
//--------------------------------------------------------------------------------------------------
bool gt_PlayerReachesSpaceport_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_s4_ObjectivePing);
    UnitKill(UnitFromId(653));
    TriggerExecute(gt_ObjectiveReachTheSpaceportComplete, true, true);
    TriggerExecute(gt_ArchangelMusic, true, false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(123), 2.0, true);
    libLbty_gf_AutoRevealRegion(RegionFromId(123), RegionFromId(123), gv_pLAYER_01_USER);
    Wait(2.0, c_timeGame);
    libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/BAD73F7A"));
    TriggerExecute(gt_MidQArchangel, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerReachesSpaceport_Init () {
    gt_PlayerReachesSpaceport = TriggerCreate("gt_PlayerReachesSpaceport_Func");
    TriggerAddEventUnitRegion(gt_PlayerReachesSpaceport, UnitRefFromVariable("gv_kerrigan"), RegionFromId(79), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: After Archangel Cinematic Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_AfterArchangelCinematicIntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_KerriganTakesDamageFromArchangel, true);
    TriggerEnable(gt_ReplenishUmojanMarines, true);
    gv_s4_ArchangelStage = 1;
    gv_s4_ArchangelLocation = ge_ArchangelLocation_Top;
    UnitSetPropertyFixed(gv_kerrigan22, c_unitPropMovementSpeed, 0.0);
    UnitIssueOrder(gv_kerrigan22, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    TriggerEnable(gt_DEBUGStartS02, false);
    TriggerEnable(gt_DEBUGStartS03, false);
    TriggerEnable(gt_DEBUGStartS04, false);
    TriggerEnable(gt_DEBUGStartArchangelBossFight, false);
    libSCDH_gf_CreateHeroPing(gv_kerrigan22, libSCDH_ge_HeroPingType_Enemy);
    PingSetColor(PingLastCreated(), Color(100.00, 0.00, 0.00));
    PingSetScale(PingLastCreated(), 0.75);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/199878C6"));
    gv_s4_ArchangelPing = PingLastCreated();
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveDestroytheArchangelCreate, true, true);
    TriggerQueueExit();
    TriggerExecute(gt_CreateUpdateArchangelBossBar, true, false);
    TriggerExecute(gt_ArchangelBehaviorStage1, true, false);
    UnitGroupIssueOrder(UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionFromId(93), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingUnit(AbilityCommand("attack", 0), gv_kerrigan22), c_orderQueueReplace);
    TriggerQueueEnter();
    gf_WaitifCriticalTransmissionisinprogress();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan22, "zMission_Lab02|Line00121", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    TriggerQueueExit();
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_DominionDropsBehindEnemyLines, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AfterArchangelCinematicIntroQ_Init () {
    gt_AfterArchangelCinematicIntroQ = TriggerCreate("gt_AfterArchangelCinematicIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create/Update Archangel Boss Bar
//--------------------------------------------------------------------------------------------------
bool gt_CreateUpdateArchangelBossBar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_s4_ArchangelBossBar = 1;
    libSwaC_gf_DisplaySingularBossBarSwarmCampaign("Assets\\Textures\\btn-boss-vikingarchangel.dds", StringExternal("Param/Value/BB583CCF"), FixedToInt(gv_s4_Archangel_MAX_HEALTH));
    gv_s4_Archangel_CURRENT_HEALTH = gv_s4_Archangel_MAX_HEALTH;
    libSwaC_gf_SetSingularBossBarCurrentValueSwarmCampaign(FixedToInt(gv_s4_Archangel_CURRENT_HEALTH), true);
    libSwaC_gf_ShowHideSingularBossBarSwarmCampaign(true);
    libSwaC_gf_SetSingularBossBarBossSwarmCampaign(gv_kerrigan22, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateUpdateArchangelBossBar_Init () {
    gt_CreateUpdateArchangelBossBar = TriggerCreate("gt_CreateUpdateArchangelBossBar_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Drops Behind Enemy Lines
//--------------------------------------------------------------------------------------------------
bool gt_DominionDropsBehindEnemyLines_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_dropPodUnits01;
    unitgroup lv_dropPodUnits02;
    unitgroup lv_dropPodUnits03;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dropPodUnits01 = UnitGroupEmpty();
    lv_dropPodUnits02 = UnitGroupEmpty();
    lv_dropPodUnits03 = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_UnitCreateFacingPoint(6, "Marine", 0, gv_pLAYER_02_DOMINION, PointFromId(167), PointFromId(608));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_dropPodUnits01);
    libNtve_gf_UnitCreateFacingPoint(2, "Marauder", 0, gv_pLAYER_02_DOMINION, PointFromId(167), PointFromId(608));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_dropPodUnits01);
    libSwaC_gf_CreateDropPod(libSwaC_ge_DropPodRace_Terran, PointFromId(358), lv_dropPodUnits01, true, gv_pLAYER_02_DOMINION);
    libNtve_gf_UnitCreateFacingPoint(6, "Marine", 0, gv_pLAYER_02_DOMINION, PointFromId(167), PointFromId(608));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_dropPodUnits02);
    libNtve_gf_UnitCreateFacingPoint(2, "Marauder", 0, gv_pLAYER_02_DOMINION, PointFromId(167), PointFromId(608));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_dropPodUnits02);
    libSwaC_gf_CreateDropPod(libSwaC_ge_DropPodRace_Terran, PointFromId(359), lv_dropPodUnits02, true, gv_pLAYER_02_DOMINION);
    libNtve_gf_UnitCreateFacingPoint(6, "Marine", 0, gv_pLAYER_02_DOMINION, PointFromId(167), PointFromId(608));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_dropPodUnits03);
    libNtve_gf_UnitCreateFacingPoint(2, "Ghost", 0, gv_pLAYER_02_DOMINION, PointFromId(167), PointFromId(608));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_dropPodUnits03);
    libSwaC_gf_CreateDropPod(libSwaC_ge_DropPodRace_Terran, PointFromId(697), lv_dropPodUnits03, true, gv_pLAYER_02_DOMINION);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionDropsBehindEnemyLines_Init () {
    gt_DominionDropsBehindEnemyLines = TriggerCreate("gt_DominionDropsBehindEnemyLines_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Archangel Behavior (Stage 1)
//--------------------------------------------------------------------------------------------------
bool gt_ArchangelBehaviorStage1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((gv_s4_ArchangelStage != 1)) {
            return true;
        }

        Wait(2.0, c_timeGame);
        gv_s4_ArchangelSideSwitcher = ge_ArchangelSideSwitch_Left;
        TriggerExecute(gt_ArchangelAttackMinigunStrafeStage1, true, false);
        Wait(12.0, c_timeGame);
        TriggerExecute(gt_ArchangelAttackMissileBarrageStage1, true, true);
        Wait(8.0, c_timeGame);
        gv_s4_ArchangelSideSwitcher = ge_ArchangelSideSwitch_Right;
        TriggerExecute(gt_ArchangelAttackMinigunStrafeStage1, true, false);
        Wait(12.0, c_timeGame);
        TriggerExecute(gt_ArchangelAttackMissileBarrageStage1, true, true);
        Wait(8.0, c_timeGame);
        UnitIssueOrder(gv_kerrigan22, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(708)), c_orderQueueAddToEnd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArchangelBehaviorStage1_Init () {
    gt_ArchangelBehaviorStage1 = TriggerCreate("gt_ArchangelBehaviorStage1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Archangel Move To Stage 2
//--------------------------------------------------------------------------------------------------
bool gt_ArchangelMoveToStage2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_kerrigan22, c_unitPropLife, c_unitPropCurrent) <= (gv_s4_Archangel_MAX_HEALTH * 0.66)))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_s4_ArchangelFlying = true;
    TriggerStop(gt_ArchangelAttackMissileBarrageStage1);
    TriggerStop(gt_ArchangelBehaviorStage1);
    UnitIssueOrder(gv_kerrigan22, Order(AbilityCommand("TitanMechFighterMode", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArchangelMoveToStage2_Init () {
    gt_ArchangelMoveToStage2 = TriggerCreate("gt_ArchangelMoveToStage2_Func");
    TriggerAddEventUnitProperty(gt_ArchangelMoveToStage2, UnitRefFromVariable("gv_kerrigan22"), c_unitPropLife);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Archangel Behavior (Stage 2)
//--------------------------------------------------------------------------------------------------
bool gt_ArchangelBehaviorStage2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((gv_s4_ArchangelStage != 2)) {
            return true;
        }

        gv_s4_ArchangelSideSwitcher = ge_ArchangelSideSwitch_Left;
        TriggerExecute(gt_ArchangelAttackMissileBarrageStage2, true, false);
        Wait(7.0, c_timeGame);
        gv_s4_ArchangelSideSwitcher = ge_ArchangelSideSwitch_Right;
        TriggerExecute(gt_ArchangelAttackMissileBarrageStage2, true, false);
        Wait(7.0, c_timeGame);
        UnitIssueOrder(gv_kerrigan22, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(708)), c_orderQueueAddToEnd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArchangelBehaviorStage2_Init () {
    gt_ArchangelBehaviorStage2 = TriggerCreate("gt_ArchangelBehaviorStage2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Archangel Move To Stage 3
//--------------------------------------------------------------------------------------------------
bool gt_ArchangelMoveToStage3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_kerrigan22, c_unitPropLife, c_unitPropCurrent) <= (gv_s4_Archangel_MAX_HEALTH * 0.33)))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_s4_ArchangelFlying = true;
    TriggerStop(gt_ArchangelAttackMissileBarrageStage2);
    TriggerStop(gt_ArchangelBehaviorStage2);
    UnitIssueOrder(gv_kerrigan22, Order(AbilityCommand("TitanMechFighterMode", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArchangelMoveToStage3_Init () {
    gt_ArchangelMoveToStage3 = TriggerCreate("gt_ArchangelMoveToStage3_Func");
    TriggerAddEventUnitProperty(gt_ArchangelMoveToStage3, UnitRefFromVariable("gv_kerrigan22"), c_unitPropLife);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Archangel Behavior (Stage 3)
//--------------------------------------------------------------------------------------------------
bool gt_ArchangelBehaviorStage3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((gv_s4_ArchangelStage != 3)) {
            return true;
        }

        Wait(3.0, c_timeGame);
        UnitSetPropertyFixed(gv_kerrigan22, c_unitPropMovementSpeed, 0.25);
        UnitIssueOrder(gv_kerrigan22, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitIssueOrder(gv_kerrigan22, OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_kerrigan)), c_orderQueueAddToEnd);
        Wait(3.0, c_timeGame);
        TriggerExecute(gt_ArchangelAttackMissileBarrageStage3, true, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArchangelBehaviorStage3_Init () {
    gt_ArchangelBehaviorStage3 = TriggerCreate("gt_ArchangelBehaviorStage3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Archangel Bombing Run
//--------------------------------------------------------------------------------------------------
bool gt_ArchangelBombingRun_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto3CFD6BCB_g;
    int auto3CFD6BCB_u;
    unit auto3CFD6BCB_var;
    int autoA7D8C481_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PingDestroy(gv_s4_ArchangelPing);
    libNtve_gf_MakeUnitInvulnerable(gv_kerrigan22, true);
    UnitSetState(gv_kerrigan22, c_unitStateHighlightable, false);
    UnitSetState(gv_kerrigan22, c_unitStateTargetable, false);
    UnitSetState(gv_kerrigan22, c_unitStateStatusBar, false);
    UnitSetState(gv_kerrigan22, c_unitStateSelectable, false);
    UnitSetPropertyFixed(gv_kerrigan22, c_unitPropMovementSpeed, 4.0);
    UnitIssueOrder(gv_kerrigan22, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    auto3CFD6BCB_g = UnitGroupSelected(gv_pLAYER_01_USER);
    auto3CFD6BCB_u = UnitGroupCount(auto3CFD6BCB_g, c_unitCountAll);
    for (;; auto3CFD6BCB_u -= 1) {
        auto3CFD6BCB_var = UnitGroupUnitFromEnd(auto3CFD6BCB_g, auto3CFD6BCB_u);
        if (auto3CFD6BCB_var == null) { break; }
        if ((auto3CFD6BCB_var == UnitFromId(703))) {
            UnitSelect(auto3CFD6BCB_var, gv_pLAYER_01_USER, false);
        }

    }
    if ((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1)) {
        TriggerExecute(gt_ArchangelStageDropPods, true, false);
    }
    else {
        TriggerExecute(gt_ArchangelStageDropPodsHard, true, false);
    }
    TriggerExecute(gt_TransmissionDropPodCalloutQ, true, false);
    autoA7D8C481_val = gv_s4_ArchangelStage;
    if (autoA7D8C481_val == 1) {
        UnitIssueOrder(gv_kerrigan22, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(790)), c_orderQueueAddToEnd);
        UnitIssueOrder(gv_kerrigan22, OrderTargetingPoint(AbilityCommand("TitanMechBombardment", 0), PointFromId(793)), c_orderQueueAddToEnd);
        Wait(6.0, c_timeGame);
        UnitIssueOrder(gv_kerrigan22, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(793)), c_orderQueueAddToEnd);
        UnitIssueOrder(gv_kerrigan22, OrderTargetingPoint(AbilityCommand("TitanMechBombardment", 0), PointFromId(791)), c_orderQueueAddToEnd);
        Wait(6.0, c_timeGame);
        UnitIssueOrder(gv_kerrigan22, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(695)), c_orderQueueAddToEnd);
        UnitIssueOrder(gv_kerrigan22, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(708)), c_orderQueueAddToEnd);
        UnitIssueOrder(gv_kerrigan22, Order(AbilityCommand("TitanMechAssaultMode", 0)), c_orderQueueAddToEnd);
    }
    else if (autoA7D8C481_val == 2) {
        TriggerEnable(TriggerGetCurrent(), false);
        UnitIssueOrder(gv_kerrigan22, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(793)), c_orderQueueAddToEnd);
        UnitIssueOrder(gv_kerrigan22, OrderTargetingPoint(AbilityCommand("TitanMechBombardment", 0), PointFromId(791)), c_orderQueueAddToEnd);
        Wait(6.0, c_timeGame);
        UnitIssueOrder(gv_kerrigan22, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(792)), c_orderQueueAddToEnd);
        UnitIssueOrder(gv_kerrigan22, OrderTargetingPoint(AbilityCommand("TitanMechBombardment", 0), PointFromId(790)), c_orderQueueAddToEnd);
        Wait(6.0, c_timeGame);
        UnitIssueOrder(gv_kerrigan22, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(791)), c_orderQueueAddToEnd);
        UnitIssueOrder(gv_kerrigan22, OrderTargetingPoint(AbilityCommand("TitanMechBombardment", 0), PointFromId(793)), c_orderQueueAddToEnd);
        Wait(6.0, c_timeGame);
        UnitIssueOrder(gv_kerrigan22, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(708)), c_orderQueueAddToEnd);
        UnitIssueOrder(gv_kerrigan22, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(719)), c_orderQueueAddToEnd);
        UnitIssueOrder(gv_kerrigan22, Order(AbilityCommand("TitanMechAssaultMode", 0)), c_orderQueueAddToEnd);
    }
    else {
    }
    gv_s4_ArchangelStage += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArchangelBombingRun_Init () {
    gt_ArchangelBombingRun = TriggerCreate("gt_ArchangelBombingRun_Func");
    TriggerAddEventUnitAbility(gt_ArchangelBombingRun, UnitRefFromVariable("gv_kerrigan22"), AbilityCommand("TitanMechFighterMode", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Archangel Lands
//--------------------------------------------------------------------------------------------------
bool gt_ArchangelLands_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto544359EE_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_s4_ArchangelFlying = false;
    UnitSetPropertyFixed(gv_kerrigan22, c_unitPropMovementSpeed, 0.0);
    libNtve_gf_MakeUnitInvulnerable(gv_kerrigan22, false);
    UnitSetState(gv_kerrigan22, c_unitStateHighlightable, true);
    UnitSetState(gv_kerrigan22, c_unitStateTargetable, true);
    UnitSetState(gv_kerrigan22, c_unitStateStatusBar, true);
    UnitSetState(gv_kerrigan22, c_unitStateSelectable, true);
    UnitIssueOrder(gv_kerrigan22, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    libSCDH_gf_CreateHeroPing(gv_kerrigan22, libSCDH_ge_HeroPingType_Enemy);
    PingSetColor(PingLastCreated(), Color(100.00, 0.00, 0.00));
    PingSetScale(PingLastCreated(), 0.75);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/CED8612A"));
    gv_s4_ArchangelPing = PingLastCreated();
    auto544359EE_val = gv_s4_ArchangelStage;
    if (auto544359EE_val == 2) {
        gv_s4_ArchangelLocation = ge_ArchangelLocation_Bottom;
        UnitIssueOrder(gv_kerrigan22, Order(AbilityCommand("TitanMechRepel", 0)), c_orderQueueReplace);
        TriggerExecute(gt_ArchangelBehaviorStage2, true, false);
        TriggerEnable(gt_ReplenishUmojanMarines, false);
        TriggerEnable(gt_TransmissionKineticBlastReminderQ, true);
    }
    else if (auto544359EE_val == 3) {
        gv_s4_ArchangelLocation = ge_ArchangelLocation_Center;
        UnitIssueOrder(gv_kerrigan22, Order(AbilityCommand("TitanMechRepel", 0)), c_orderQueueReplace);
        TriggerExecute(gt_ArchangelBehaviorStage3, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArchangelLands_Init () {
    gt_ArchangelLands = TriggerCreate("gt_ArchangelLands_Func");
    TriggerAddEventUnitAbility(gt_ArchangelLands, UnitRefFromVariable("gv_kerrigan22"), AbilityCommand("TitanMechAssaultMode", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Drop Pod Callout Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionDropPodCalloutQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoB911E2E6_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    gf_WaitifCriticalTransmissionisinprogress();
    autoB911E2E6_val = gv_s4_ArchangelStage;
    if (autoB911E2E6_val == 1) {
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab02|Line00124", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    }
    else if (autoB911E2E6_val == 2) {
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab02|Line00123", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionDropPodCalloutQ_Init () {
    gt_TransmissionDropPodCalloutQ = TriggerCreate("gt_TransmissionDropPodCalloutQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Kinetic Blast Reminder Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionKineticBlastReminderQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_kerrigan22, c_unitPropLifePercent, c_unitPropCurrent) >= 0.4))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetPropertyFixed(gv_kerrigan, c_unitPropEnergy, c_unitPropCurrent) >= 50.0) && (UnitCheckAbilCmdState(gv_kerrigan, AbilityCommand("MindBolt", 0), c_cmdStateCooldown) == false)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerQueueEnter();
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
        gf_WaitifCriticalTransmissionisinprogress();
        libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_MultiMissionCallouts|Line00009", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
        TriggerQueueExit();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionKineticBlastReminderQ_Init () {
    gt_TransmissionKineticBlastReminderQ = TriggerCreate("gt_TransmissionKineticBlastReminderQ_Func");
    TriggerEnable(gt_TransmissionKineticBlastReminderQ, false);
    TriggerAddEventUnitProperty(gt_TransmissionKineticBlastReminderQ, UnitRefFromVariable("gv_kerrigan22"), c_unitPropLife);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Archangel Stage Drop Pods
//--------------------------------------------------------------------------------------------------
bool gt_ArchangelStageDropPods_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_dropPodUnits;

    // Automatic Variable Declarations
    int autoB86C9315_val;
    unitgroup auto612E45E1_g;
    int auto612E45E1_u;
    unit auto612E45E1_var;
    unitgroup auto966F97AC_g;
    int auto966F97AC_u;
    unit auto966F97AC_var;
    unitgroup auto162FB4B9_g;
    int auto162FB4B9_u;
    unit auto162FB4B9_var;
    unitgroup auto54FCDD1B_g;
    int auto54FCDD1B_u;
    unit auto54FCDD1B_var;

    // Variable Initialization
    lv_dropPodUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoB86C9315_val = gv_s4_ArchangelStage;
    if (autoB86C9315_val == 1) {
        Wait(2.0, c_timeGame);
        libNtve_gf_UnitCreateFacingPoint(3, "Marine", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION, PointFromId(167), PointFromId(608));
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_dropPodUnits);
        libSwaC_gf_CreateDropPod(libSwaC_ge_DropPodRace_Terran, PointFromId(646), lv_dropPodUnits, true, gv_pLAYER_02_DOMINION);
        auto612E45E1_g = lv_dropPodUnits;
        auto612E45E1_u = UnitGroupCount(auto612E45E1_g, c_unitCountAll);
        for (;; auto612E45E1_u -= 1) {
            auto612E45E1_var = UnitGroupUnitFromEnd(auto612E45E1_g, auto612E45E1_u);
            if (auto612E45E1_var == null) { break; }
            AISetUnitScriptControlled(auto612E45E1_var, false);
            AIAttackWaveUseUnit(gv_pLAYER_02_DOMINION, auto612E45E1_var);
        }
        AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION, PlayerGroupSingle(gv_pLAYER_01_USER));
        AIAttackWaveSend(gv_pLAYER_02_DOMINION, 0, false);
        auto966F97AC_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionFromId(90), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto966F97AC_u = UnitGroupCount(auto966F97AC_g, c_unitCountAll);
        for (;; auto966F97AC_u -= 1) {
            auto966F97AC_var = UnitGroupUnitFromEnd(auto966F97AC_g, auto966F97AC_u);
            if (auto966F97AC_var == null) { break; }
            UnitIssueOrder(auto966F97AC_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(646)), c_orderQueueReplace);
            UnitIssueOrder(auto966F97AC_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(725)), c_orderQueueAddToEnd);
        }
    }
    else if (autoB86C9315_val == 2) {
        Wait(3.0, c_timeGame);
        libNtve_gf_UnitCreateFacingPoint(2, "Marine", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION, PointFromId(167), PointFromId(608));
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_dropPodUnits);
        libNtve_gf_UnitCreateFacingPoint(1, "Ghost", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION, PointFromId(167), PointFromId(608));
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_dropPodUnits);
        libSwaC_gf_CreateDropPod(libSwaC_ge_DropPodRace_Terran, PointFromId(724), lv_dropPodUnits, true, gv_pLAYER_02_DOMINION);
        auto162FB4B9_g = lv_dropPodUnits;
        auto162FB4B9_u = UnitGroupCount(auto162FB4B9_g, c_unitCountAll);
        for (;; auto162FB4B9_u -= 1) {
            auto162FB4B9_var = UnitGroupUnitFromEnd(auto162FB4B9_g, auto162FB4B9_u);
            if (auto162FB4B9_var == null) { break; }
            AISetUnitScriptControlled(auto162FB4B9_var, false);
            AIAttackWaveUseUnit(gv_pLAYER_02_DOMINION, auto162FB4B9_var);
        }
        AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION, PlayerGroupSingle(gv_pLAYER_01_USER));
        AIAttackWaveSend(gv_pLAYER_02_DOMINION, 0, false);
        Wait(10.0, c_timeGame);
        UnitGroupClear(lv_dropPodUnits);
        libNtve_gf_UnitCreateFacingPoint(2, "Marine", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION, PointFromId(167), PointFromId(608));
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_dropPodUnits);
        libSwaC_gf_CreateDropPod(libSwaC_ge_DropPodRace_Terran, PointFromId(728), lv_dropPodUnits, true, gv_pLAYER_02_DOMINION);
        auto54FCDD1B_g = lv_dropPodUnits;
        auto54FCDD1B_u = UnitGroupCount(auto54FCDD1B_g, c_unitCountAll);
        for (;; auto54FCDD1B_u -= 1) {
            auto54FCDD1B_var = UnitGroupUnitFromEnd(auto54FCDD1B_g, auto54FCDD1B_u);
            if (auto54FCDD1B_var == null) { break; }
            AISetUnitScriptControlled(auto54FCDD1B_var, false);
            AIAttackWaveUseUnit(gv_pLAYER_02_DOMINION, auto54FCDD1B_var);
        }
        AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION, PlayerGroupSingle(gv_pLAYER_01_USER));
        AIAttackWaveSend(gv_pLAYER_02_DOMINION, 0, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArchangelStageDropPods_Init () {
    gt_ArchangelStageDropPods = TriggerCreate("gt_ArchangelStageDropPods_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Archangel Stage Drop Pods (Hard)
//--------------------------------------------------------------------------------------------------
bool gt_ArchangelStageDropPodsHard_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_dropPodUnits;

    // Automatic Variable Declarations
    int auto8E7E642E_val;
    unitgroup auto73031B39_g;
    int auto73031B39_u;
    unit auto73031B39_var;
    unitgroup auto860A8207_g;
    int auto860A8207_u;
    unit auto860A8207_var;
    unitgroup auto4B5D5EDB_g;
    int auto4B5D5EDB_u;
    unit auto4B5D5EDB_var;
    unitgroup auto7D7AF0C6_g;
    int auto7D7AF0C6_u;
    unit auto7D7AF0C6_var;

    // Variable Initialization
    lv_dropPodUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto8E7E642E_val = gv_s4_ArchangelStage;
    if (auto8E7E642E_val == 1) {
        Wait(2.0, c_timeGame);
        libNtve_gf_UnitCreateFacingPoint(1, "Medic", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION, PointFromId(167), PointFromId(608));
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_dropPodUnits);
        libNtve_gf_UnitCreateFacingPoint(2, "Ghost", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION, PointFromId(167), PointFromId(608));
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_dropPodUnits);
        libSwaC_gf_CreateDropPod(libSwaC_ge_DropPodRace_Terran, PointFromId(1218), lv_dropPodUnits, true, gv_pLAYER_02_DOMINION);
        auto73031B39_g = lv_dropPodUnits;
        auto73031B39_u = UnitGroupCount(auto73031B39_g, c_unitCountAll);
        for (;; auto73031B39_u -= 1) {
            auto73031B39_var = UnitGroupUnitFromEnd(auto73031B39_g, auto73031B39_u);
            if (auto73031B39_var == null) { break; }
            UnitSetPropertyFixed(auto73031B39_var, c_unitPropEnergyPercent, 100.0);
            AISetUnitScriptControlled(auto73031B39_var, false);
            AIAttackWaveUseUnit(gv_pLAYER_02_DOMINION, auto73031B39_var);
        }
        AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION, PlayerGroupSingle(gv_pLAYER_01_USER));
        AIAttackWaveSend(gv_pLAYER_02_DOMINION, 0, false);
        auto860A8207_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionFromId(90), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto860A8207_u = UnitGroupCount(auto860A8207_g, c_unitCountAll);
        for (;; auto860A8207_u -= 1) {
            auto860A8207_var = UnitGroupUnitFromEnd(auto860A8207_g, auto860A8207_u);
            if (auto860A8207_var == null) { break; }
            UnitIssueOrder(auto860A8207_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1218)), c_orderQueueReplace);
            UnitIssueOrder(auto860A8207_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(725)), c_orderQueueAddToEnd);
        }
    }
    else if (auto8E7E642E_val == 2) {
        Wait(3.0, c_timeGame);
        libNtve_gf_UnitCreateFacingPoint(1, "Marauder", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION, PointFromId(167), PointFromId(608));
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_dropPodUnits);
        libNtve_gf_UnitCreateFacingPoint(1, "Ghost", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION, PointFromId(167), PointFromId(608));
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_dropPodUnits);
        libSwaC_gf_CreateDropPod(libSwaC_ge_DropPodRace_Terran, PointFromId(1219), lv_dropPodUnits, true, gv_pLAYER_02_DOMINION);
        auto4B5D5EDB_g = lv_dropPodUnits;
        auto4B5D5EDB_u = UnitGroupCount(auto4B5D5EDB_g, c_unitCountAll);
        for (;; auto4B5D5EDB_u -= 1) {
            auto4B5D5EDB_var = UnitGroupUnitFromEnd(auto4B5D5EDB_g, auto4B5D5EDB_u);
            if (auto4B5D5EDB_var == null) { break; }
            UnitSetPropertyFixed(auto4B5D5EDB_var, c_unitPropEnergyPercent, 100.0);
            AISetUnitScriptControlled(auto4B5D5EDB_var, false);
            AIAttackWaveUseUnit(gv_pLAYER_02_DOMINION, auto4B5D5EDB_var);
        }
        AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION, PlayerGroupSingle(gv_pLAYER_01_USER));
        AIAttackWaveSend(gv_pLAYER_02_DOMINION, 0, false);
        Wait(10.0, c_timeGame);
        UnitGroupClear(lv_dropPodUnits);
        TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION, "SiegeTech", 1);
        libNtve_gf_UnitCreateFacingPoint(1, "SiegeTank", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION, PointFromId(167), PointFromId(608));
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_dropPodUnits);
        libSwaC_gf_CreateDropPod(libSwaC_ge_DropPodRace_Terran, PointFromId(1220), lv_dropPodUnits, true, gv_pLAYER_02_DOMINION);
        auto7D7AF0C6_g = lv_dropPodUnits;
        auto7D7AF0C6_u = UnitGroupCount(auto7D7AF0C6_g, c_unitCountAll);
        for (;; auto7D7AF0C6_u -= 1) {
            auto7D7AF0C6_var = UnitGroupUnitFromEnd(auto7D7AF0C6_g, auto7D7AF0C6_u);
            if (auto7D7AF0C6_var == null) { break; }
            UnitIssueOrder(auto7D7AF0C6_var, Order(AbilityCommand("SiegeMode", 0)), c_orderQueueReplace);
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArchangelStageDropPodsHard_Init () {
    gt_ArchangelStageDropPodsHard = TriggerCreate("gt_ArchangelStageDropPodsHard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Replenish Umojan Marines
//--------------------------------------------------------------------------------------------------
bool gt_ReplenishUmojanMarines_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto754E9B82_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(gv_s4_UmojanArchangelGroup, c_unitCountAlive) <= 3))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto754E9B82_val = gv_s4_ArchangelLocation;
    if (auto754E9B82_val == ge_ArchangelLocation_Top) {
        libNtve_gf_CreateUnitsAtPoint2(1, "WarPig", 0, gv_pLAYER_02_DOMINION2, PointFromId(720));
        SoundPlayAtPoint(SoundLink("Medivac_Load", -1), PlayerGroupAll(), PointFromId(720), 8.0, 100.0, 0.0);
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_s4_UmojanArchangelGroup);
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(725)), c_orderQueueReplace);
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingUnit(AbilityCommand("attack", 0), gv_kerrigan22), c_orderQueueAddToEnd);
        Wait(1.0, c_timeGame);
        libNtve_gf_CreateUnitsAtPoint2(1, "WarPig", 0, gv_pLAYER_02_DOMINION2, PointFromId(749));
        SoundPlayAtPoint(SoundLink("Medivac_Load", -1), PlayerGroupAll(), PointFromId(720), 8.0, 100.0, 0.0);
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_s4_UmojanArchangelGroup);
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(725)), c_orderQueueReplace);
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingUnit(AbilityCommand("attack", 0), gv_kerrigan22), c_orderQueueAddToEnd);
    }
    else if (auto754E9B82_val == ge_ArchangelLocation_Bottom) {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReplenishUmojanMarines_Init () {
    gt_ReplenishUmojanMarines = TriggerCreate("gt_ReplenishUmojanMarines_Func");
    TriggerEnable(gt_ReplenishUmojanMarines, false);
    TriggerAddEventTimePeriodic(gt_ReplenishUmojanMarines, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Archangel Attack - Missile Barrage (Stage 1)
//--------------------------------------------------------------------------------------------------
bool gt_ArchangelAttackMissileBarrageStage1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_randomUmojanTarget;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_s4_ArchangelFlying == false))) {
            return false;
        }

        if (!((gv_s4_ArchangelStage == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ResetBarrageLocations();
    gf_DoMissileBarrage(PointWithOffsetPolar(UnitGetPosition(gv_kerrigan), RandomFixed(0.2, 0.5), libNtve_gf_RandomAngle()));
    Wait(1.5, c_timeGame);
    lv_randomUmojanTarget = UnitGroupRandomUnit(UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionFromId(90), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive);
    gf_DoMissileBarrage(UnitGetPosition(lv_randomUmojanTarget));
    Wait(1.5, c_timeGame);
    gf_DoMissileBarrage(PointWithOffsetPolar(UnitGetPosition(gv_kerrigan), RandomFixed(0.2, 0.5), libNtve_gf_RandomAngle()));
    Wait(1.5, c_timeGame);
    lv_randomUmojanTarget = UnitGroupRandomUnit(UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionFromId(90), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive);
    gf_DoMissileBarrage(UnitGetPosition(lv_randomUmojanTarget));
    Wait(1.5, c_timeGame);
    gf_DoMissileBarrage(PointWithOffsetPolar(UnitGetPosition(gv_kerrigan), RandomFixed(0.2, 0.5), libNtve_gf_RandomAngle()));
    Wait(1.5, c_timeGame);
    lv_randomUmojanTarget = UnitGroupRandomUnit(UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionFromId(90), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive);
    gf_DoMissileBarrage(UnitGetPosition(lv_randomUmojanTarget));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArchangelAttackMissileBarrageStage1_Init () {
    gt_ArchangelAttackMissileBarrageStage1 = TriggerCreate("gt_ArchangelAttackMissileBarrageStage1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Archangel Attack - Missile Barrage (Stage 2)
//--------------------------------------------------------------------------------------------------
bool gt_ArchangelAttackMissileBarrageStage2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_archangelPosition;
    point lv_targetPosition;
    fixed lv_angleTarget;
    int lv_x;
    int lv_y;
    point lv_initialPosition;
    fixed lv_initialFacing;

    // Automatic Variable Declarations
    int auto7671BE66_val;
    const int autoBA28CE72_ae = 4;
    const int autoBA28CE72_ai = 1;
    const int auto8BF28A45_ae = 6;
    const int auto8BF28A45_ai = 1;
    int autoABBB8FF2_ae;
    int autoABBB8FF2_var;
    const int auto17CD12AC_ae = 4;
    const int auto17CD12AC_ai = 1;
    const int autoB9838DE8_ae = 6;
    const int autoB9838DE8_ai = 1;
    int autoF9021D63_ae;
    int autoF9021D63_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_s4_ArchangelStage == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_initialFacing = 45.0;
    lv_archangelPosition = UnitGetPosition(gv_kerrigan22);
    gv_s4_ArchangelBarrageCount = 0;
    gf_ResetBarrageLocations();
    auto7671BE66_val = gv_s4_ArchangelSideSwitcher;
    if (auto7671BE66_val == ge_ArchangelSideSwitch_Left) {
        lv_x = 1;
        for ( ; ( (autoBA28CE72_ai >= 0 && lv_x <= autoBA28CE72_ae) || (autoBA28CE72_ai < 0 && lv_x >= autoBA28CE72_ae) ) ; lv_x += autoBA28CE72_ai ) {
            lv_initialPosition = PointWithOffsetPolar(UnitGetPosition(gv_kerrigan22), (IntToFixed(lv_x) * 3.0), (lv_initialFacing + 30.0));
            lv_y = 1;
            for ( ; ( (auto8BF28A45_ai >= 0 && lv_y <= auto8BF28A45_ae) || (auto8BF28A45_ai < 0 && lv_y >= auto8BF28A45_ae) ) ; lv_y += auto8BF28A45_ai ) {
                gv_s4_ArchangelBarrageCount += 1;
                gv_s4_ArchangelBarrages[gv_s4_ArchangelBarrageCount] = PointWithOffsetPolar(lv_initialPosition, (IntToFixed(lv_y) * 4.0), (lv_initialFacing - 80.0));
                gv_s4_ArchangelBarrages[gv_s4_ArchangelBarrageCount] = PointWithOffsetPolar(gv_s4_ArchangelBarrages[gv_s4_ArchangelBarrageCount], RandomFixed(0.2, 0.5), libNtve_gf_RandomAngle());
            }
        }
        gf_ShuffleBarrageLocations();
        autoABBB8FF2_ae = gv_s4_ArchangelBarrageCount;
        autoABBB8FF2_var = 1;
        for ( ; autoABBB8FF2_var <= autoABBB8FF2_ae; autoABBB8FF2_var += 1 ) {
            gf_DoMissileBarrage(gv_s4_ArchangelBarrages[autoABBB8FF2_var]);
        }
        gf_DoMissileBarrage(PointWithOffsetPolar(UnitGetPosition(gv_kerrigan), RandomFixed(0.2, 0.5), libNtve_gf_RandomAngle()));
    }
    else if (auto7671BE66_val == ge_ArchangelSideSwitch_Right) {
        lv_x = 1;
        for ( ; ( (auto17CD12AC_ai >= 0 && lv_x <= auto17CD12AC_ae) || (auto17CD12AC_ai < 0 && lv_x >= auto17CD12AC_ae) ) ; lv_x += auto17CD12AC_ai ) {
            lv_initialPosition = PointWithOffsetPolar(UnitGetPosition(gv_kerrigan22), (IntToFixed(lv_x) * 3.0), (lv_initialFacing - 30.0));
            lv_y = 1;
            for ( ; ( (autoB9838DE8_ai >= 0 && lv_y <= autoB9838DE8_ae) || (autoB9838DE8_ai < 0 && lv_y >= autoB9838DE8_ae) ) ; lv_y += autoB9838DE8_ai ) {
                gv_s4_ArchangelBarrageCount += 1;
                gv_s4_ArchangelBarrages[gv_s4_ArchangelBarrageCount] = PointWithOffsetPolar(lv_initialPosition, (IntToFixed(lv_y) * 4.0), (lv_initialFacing + 80.0));
                gv_s4_ArchangelBarrages[gv_s4_ArchangelBarrageCount] = PointWithOffsetPolar(gv_s4_ArchangelBarrages[gv_s4_ArchangelBarrageCount], RandomFixed(0.2, 0.5), libNtve_gf_RandomAngle());
            }
        }
        gf_ShuffleBarrageLocations();
        autoF9021D63_ae = gv_s4_ArchangelBarrageCount;
        autoF9021D63_var = 1;
        for ( ; autoF9021D63_var <= autoF9021D63_ae; autoF9021D63_var += 1 ) {
            gf_DoMissileBarrage(gv_s4_ArchangelBarrages[autoF9021D63_var]);
        }
        gf_DoMissileBarrage(PointWithOffsetPolar(UnitGetPosition(gv_kerrigan), RandomFixed(0.2, 0.5), libNtve_gf_RandomAngle()));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArchangelAttackMissileBarrageStage2_Init () {
    gt_ArchangelAttackMissileBarrageStage2 = TriggerCreate("gt_ArchangelAttackMissileBarrageStage2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Archangel Attack - Missile Barrage (Stage 3)
//--------------------------------------------------------------------------------------------------
bool gt_ArchangelAttackMissileBarrageStage3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_archangelPosition;
    fixed lv_archangelFacing;
    point lv_targetPosition;
    fixed lv_angleTarget;
    int lv_x;
    int lv_y;
    point lv_startingPosition;

    // Automatic Variable Declarations
    const int auto26A13C10_ae = 3;
    const int auto26A13C10_ai = 1;
    const int auto7FD7B3EF_ae = 5;
    const int auto7FD7B3EF_ai = 1;
    int auto25701912_ae;
    int auto25701912_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_s4_ArchangelFlying == false))) {
            return false;
        }

        if (!((gv_s4_ArchangelStage == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_archangelFacing = UnitGetFacing(gv_kerrigan22);
    lv_archangelPosition = UnitGetPosition(gv_kerrigan22);
    gf_ResetBarrageLocations();
    UnitSetPropertyFixed(gv_kerrigan22, c_unitPropMovementSpeed, 0.0);
    UnitIssueOrder(gv_kerrigan22, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    gv_s4_ArchangelBarrageCount = 0;
    lv_x = 1;
    for ( ; ( (auto26A13C10_ai >= 0 && lv_x <= auto26A13C10_ae) || (auto26A13C10_ai < 0 && lv_x >= auto26A13C10_ae) ) ; lv_x += auto26A13C10_ai ) {
        lv_startingPosition = PointWithOffsetPolar(UnitGetPosition(gv_kerrigan22), (IntToFixed(lv_x) * 2.5), (lv_archangelFacing + 45.0));
        lv_y = 1;
        for ( ; ( (auto7FD7B3EF_ai >= 0 && lv_y <= auto7FD7B3EF_ae) || (auto7FD7B3EF_ai < 0 && lv_y >= auto7FD7B3EF_ae) ) ; lv_y += auto7FD7B3EF_ai ) {
            gv_s4_ArchangelBarrageCount += 1;
            gv_s4_ArchangelBarrages[gv_s4_ArchangelBarrageCount] = PointWithOffsetPolar(lv_startingPosition, (IntToFixed(lv_y) * 2.5), (lv_archangelFacing - 45.0));
        }
    }
    auto25701912_ae = gv_s4_ArchangelBarrageCount;
    auto25701912_var = 1;
    for ( ; auto25701912_var <= auto25701912_ae; auto25701912_var += 1 ) {
        gf_DoMissileBarrage(gv_s4_ArchangelBarrages[auto25701912_var]);
    }
    if ((DistanceBetweenPoints(UnitGetPosition(gv_kerrigan22), UnitGetPosition(gv_kerrigan)) >= 12.0)) {
        gf_DoMissileBarrage(PointWithOffsetPolar(UnitGetPosition(gv_kerrigan), RandomFixed(0.2, 0.5), libNtve_gf_RandomAngle()));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArchangelAttackMissileBarrageStage3_Init () {
    gt_ArchangelAttackMissileBarrageStage3 = TriggerCreate("gt_ArchangelAttackMissileBarrageStage3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Archangel Attack - Minigun Strafe (Stage 1)
//--------------------------------------------------------------------------------------------------
bool gt_ArchangelAttackMinigunStrafeStage1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_archangelFacing;
    int lv_archangelStrafeCount;
    point[101] lv_archangelStrafeShots;
    int lv_x;
    point lv_startingPosition;

    // Automatic Variable Declarations
    int auto17D7D62F_val;
    const int auto7601F506_ae = 6;
    const int auto7601F506_ai = 1;
    int autoBA7E22B5_ae;
    int autoBA7E22B5_var;
    const int auto0A71A26A_ae = 6;
    const int auto0A71A26A_ai = 1;
    int auto28C03B41_ae;
    int auto28C03B41_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_archangelFacing = 225.0;
    auto17D7D62F_val = gv_s4_ArchangelSideSwitcher;
    if (auto17D7D62F_val == ge_ArchangelSideSwitch_Left) {
        lv_startingPosition = PointFromId(821);
        UnitIssueOrder(gv_kerrigan22, OrderTargetingPoint(AbilityCommand("TitanMechGunShotCharge", 0), lv_startingPosition), c_orderQueueReplace);
        lv_x = 1;
        for ( ; ( (auto7601F506_ai >= 0 && lv_x <= auto7601F506_ae) || (auto7601F506_ai < 0 && lv_x >= auto7601F506_ae) ) ; lv_x += auto7601F506_ai ) {
            lv_archangelStrafeCount += 1;
            lv_archangelStrafeShots[lv_archangelStrafeCount] = PointWithOffsetPolar(lv_startingPosition, (IntToFixed(lv_x) * 1.0), (lv_archangelFacing + 75.0));
        }
        autoBA7E22B5_ae = lv_archangelStrafeCount;
        autoBA7E22B5_var = 1;
        for ( ; autoBA7E22B5_var <= autoBA7E22B5_ae; autoBA7E22B5_var += 1 ) {
            UnitIssueOrder(gv_kerrigan22, OrderTargetingPoint(AbilityCommand("TitanMechGunShot", 0), lv_archangelStrafeShots[autoBA7E22B5_var]), c_orderQueueAddToEnd);
        }
    }
    else if (auto17D7D62F_val == ge_ArchangelSideSwitch_Right) {
        lv_startingPosition = PointFromId(102);
        UnitIssueOrder(gv_kerrigan22, OrderTargetingPoint(AbilityCommand("TitanMechGunShotCharge", 0), lv_startingPosition), c_orderQueueReplace);
        lv_x = 1;
        for ( ; ( (auto0A71A26A_ai >= 0 && lv_x <= auto0A71A26A_ae) || (auto0A71A26A_ai < 0 && lv_x >= auto0A71A26A_ae) ) ; lv_x += auto0A71A26A_ai ) {
            lv_archangelStrafeCount += 1;
            lv_archangelStrafeShots[lv_archangelStrafeCount] = PointWithOffsetPolar(lv_startingPosition, (IntToFixed(lv_x) * 1.0), (lv_archangelFacing - 75.0));
        }
        auto28C03B41_ae = lv_archangelStrafeCount;
        auto28C03B41_var = 1;
        for ( ; auto28C03B41_var <= auto28C03B41_ae; auto28C03B41_var += 1 ) {
            UnitIssueOrder(gv_kerrigan22, OrderTargetingPoint(AbilityCommand("TitanMechGunShot", 0), lv_archangelStrafeShots[auto28C03B41_var]), c_orderQueueAddToEnd);
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArchangelAttackMinigunStrafeStage1_Init () {
    gt_ArchangelAttackMinigunStrafeStage1 = TriggerCreate("gt_ArchangelAttackMinigunStrafeStage1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Mission Help Q
//--------------------------------------------------------------------------------------------------
bool gt_TipMissionHelpQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_DisplayMissionTip(StringExternal("Param/Value/722A3C3B"));
    Wait(libSwaC_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipMissionHelpQ_Init () {
    gt_TipMissionHelpQ = TriggerCreate("gt_TipMissionHelpQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CampaignInitAI();
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION22, PlayerGroupSingle(gv_pLAYER_01_USER));
    AITransportDisableAutoPickup(gv_pLAYER_02_DOMINION);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION, RegionEntireMap(), false);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionEntireMap(), false);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION22, RegionEntireMap(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - Engines Lost
//--------------------------------------------------------------------------------------------------
bool gt_AchievementEnginesLost_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_s3_TramEnginesDestroyed == 0))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CampaignAwardAchievement("ZLab02_2", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementEnginesLost_Init () {
    gt_AchievementEnginesLost = TriggerCreate("gt_AchievementEnginesLost_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - Archangel Damage N/H
//--------------------------------------------------------------------------------------------------
bool gt_AchievementArchangelDamageNH_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1))) {
            return false;
        }

        if (!((gv_damageTakenFromArchangelAmount == 0.0))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CampaignAwardAchievement("ZLab02_3", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementArchangelDamageNH_Init () {
    gt_AchievementArchangelDamageNH = TriggerCreate("gt_AchievementArchangelDamageNH_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - Lockdown Speed Run H
//--------------------------------------------------------------------------------------------------
bool gt_AchievementLockdownSpeedRunH_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CampaignAwardAchievement("Mastery_Lab2", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementLockdownSpeedRunH_Init () {
    gt_AchievementLockdownSpeedRunH = TriggerCreate("gt_AchievementLockdownSpeedRunH_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Uses Kinetic Blast
//--------------------------------------------------------------------------------------------------
bool gt_KerriganUsesKineticBlast_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_kineticBlastUses += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganUsesKineticBlast_Init () {
    gt_KerriganUsesKineticBlast = TriggerCreate("gt_KerriganUsesKineticBlast_Func");
    TriggerAddEventUnitAbility(gt_KerriganUsesKineticBlast, UnitRefFromVariable("gv_kerrigan"), AbilityCommand("MindBolt", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Uses Crushing Grip
//--------------------------------------------------------------------------------------------------
bool gt_KerriganUsesCrushingGrip_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_crushingGripUses += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganUsesCrushingGrip_Init () {
    gt_KerriganUsesCrushingGrip = TriggerCreate("gt_KerriganUsesCrushingGrip_Func");
    TriggerAddEventUnitAbility(gt_KerriganUsesCrushingGrip, UnitRefFromVariable("gv_kerrigan"), AbilityCommand("PsionicLift", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Takes Damage From Archangel
//--------------------------------------------------------------------------------------------------
bool gt_KerriganTakesDamageFromArchangel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((EventUnitDamageSourceUnit() == gv_kerrigan22))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_damageTakenFromArchangel = true;
    gv_damageTakenFromArchangelAmount += EventUnitDamageAmount();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganTakesDamageFromArchangel_Init () {
    gt_KerriganTakesDamageFromArchangel = TriggerCreate("gt_KerriganTakesDamageFromArchangel_Func");
    TriggerEnable(gt_KerriganTakesDamageFromArchangel, false);
    TriggerAddEventUnitDamaged(gt_KerriganTakesDamageFromArchangel, UnitRefFromVariable("gv_kerrigan"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Kerrigan Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatKerriganDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerExecute(gt_ObjectiveKerriganMustSurviveFailed, true, false);
    Wait(2.0, c_timeReal);
    libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), libSwaC_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/91537AA8"), libSwaC_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatKerriganDead_Init () {
    gt_DefeatKerriganDead = TriggerCreate("gt_DefeatKerriganDead_Func");
    TriggerAddEventUnitDied(gt_DefeatKerriganDead, UnitRefFromVariable("gv_kerrigan"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Lockdown Door Timer
//--------------------------------------------------------------------------------------------------
bool gt_DefeatLockdownDoorTimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    UnitIssueOrder(UnitFromId(329), Order(AbilityCommand("UmojanLabDoorsThinLeft", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(706), Order(AbilityCommand("UmojanLabDoorsThinLeft", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(431), Order(AbilityCommand("UmojanLabDoorsThinLeft", 0)), c_orderQueueReplace);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    CameraShakeStart(gv_pLAYER_01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.25, 2.0, 100.0, 2.0);
    CinematicFade(false, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Lab02|Line00079", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TriggerExecute(gt_ObjectiveEscapeThroughSublevelFailed, true, false);
    Wait(2.0, c_timeReal);
    libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), libSwaC_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/DD8C2952"), libSwaC_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatLockdownDoorTimer_Init () {
    gt_DefeatLockdownDoorTimer = TriggerCreate("gt_DefeatLockdownDoorTimer_Func");
    TriggerAddEventTimer(gt_DefeatLockdownDoorTimer, gv_s2_LockdownTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Tram Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatTramDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_s3_TRAM_CURRENT_LIFE <= 0.0))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, PointFromId(258));
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, PointFromId(259));
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, PointFromId(552));
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, PointFromId(553));
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, PointFromId(558));
    libSwaC_gf_ShowHideSingularBossBarSwarmCampaign(false);
    UnitKill(gv_kerrigan);
    UnitKill(gv_kerrigan2);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveDefendTheTramFailed, true, false);
    libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), libSwaC_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/F11CB0C3"), libSwaC_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatTramDestroyed_Init () {
    gt_DefeatTramDestroyed = TriggerCreate("gt_DefeatTramDestroyed_Func");
    TriggerEnable(gt_DefeatTramDestroyed, false);
    TriggerAddEventTimePeriodic(gt_DefeatTramDestroyed, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Archangel Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryArchangelDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_MakeUnitInvulnerable(gv_kerrigan, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "VictoryMusic", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryArchangelDestroyed_Init () {
    gt_VictoryArchangelDestroyed = TriggerCreate("gt_VictoryArchangelDestroyed_Func");
    TriggerAddEventUnitDied(gt_VictoryArchangelDestroyed, UnitRefFromVariable("gv_kerrigan22"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetState(gv_kerrigan, c_unitStateInvulnerable, true);
    TriggerEnable(gt_ReplenishUmojanMarines, false);
    gv_gameOver = true;
    libSwaC_gf_ShowHideSingularBossBarSwarmCampaign(false);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveDestroytheArchangelComplete, true, false);
    TriggerExecute(gt_ObjectiveKerriganMustSurviveComplete, true, true);
    libSwaC_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((ObjectiveGetState(gv_objectiveDestroyDominionBase22222) == c_objectiveStateCompleted)) {
        libSwaC_gf_CampaignAwardAchievement("ZLab02_1", gv_pLAYER_01_USER);
    }

    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (GameGetMissionTime() < 901.0)) {
        libSwaC_gf_CampaignAwardAchievement("Anniversary_ZLab02", gv_pLAYER_01_USER);
    }

    TriggerExecute(gt_AchievementArchangelDamageNH, true, true);
    VictoryPanelAddAchievement("ZLab02_1");
    VictoryPanelAddAchievement("ZLab02_2");
    VictoryPanelAddAchievement("ZLab02_3");
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/36135BBC"), IntToText(libNtve_gf_UnitGetPropertyKills(gv_kerrigan, c_unitPropCurrent)));
    if ((gv_kineticBlastUses >= gv_crushingGripUses)) {
        VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/317A2619"), StringExternal(CatalogFieldValueGet(c_gameCatalogAbil, "MindBolt", "Name", gv_pLAYER_01_USER)));
    }
    else {
        VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/66D7C0AE"), StringExternal(CatalogFieldValueGet(c_gameCatalogAbil, "PsionicLift", "Name", gv_pLAYER_01_USER)));
    }
    TextExpressionSetToken("Param/Expression/F40CB0C7", "A", IntToText(gv_s3_TramEnginesDestroyed));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/997F854F"), TextExpressionAssemble("Param/Expression/F40CB0C7"));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/3384E585"), FixedToText(gv_damageTakenFromArchangelAmount, 0));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/5862D225"), TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(gv_lowestLockDownTime)));
    libSwaC_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_Defeat, false);
    TriggerEnable(gt_DefeatCheat, false);
    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    libSwaC_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_Victory, false);
    TriggerEnable(gt_VictoryCheat, false);
    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Get to Sublevel Door Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveGettoSublevelDoorCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZLab02Objective01");
    gv_objectiveDestroyDominionBase = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 1);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveGettoSublevelDoorCreate_Init () {
    gt_ObjectiveGettoSublevelDoorCreate = TriggerCreate("gt_ObjectiveGettoSublevelDoorCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Get to Sublevel Door Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveGettoSublevelDoorComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveGettoSublevelDoorCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZLab02Objective01", libSwaC_ge_MissionObjectiveState_Completed);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveGettoSublevelDoorComplete_Init () {
    gt_ObjectiveGettoSublevelDoorComplete = TriggerCreate("gt_ObjectiveGettoSublevelDoorComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Get to Sublevel Door Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveGettoSublevelDoorFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveGettoSublevelDoorCreate, true, false);
    ObjectiveSetState(gv_objectiveDestroyDominionBase, c_objectiveStateFailed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveGettoSublevelDoorFailed_Init () {
    gt_ObjectiveGettoSublevelDoorFailed = TriggerCreate("gt_ObjectiveGettoSublevelDoorFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Hold Out At Door Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveHoldOutAtDoorCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZLab02Objective02");
    gv_objectiveDestroyDominionBase2 = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 1);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveHoldOutAtDoorCreate_Init () {
    gt_ObjectiveHoldOutAtDoorCreate = TriggerCreate("gt_ObjectiveHoldOutAtDoorCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Hold Out At Door Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveHoldOutAtDoorComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveHoldOutAtDoorCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZLab02Objective02", libSwaC_ge_MissionObjectiveState_Completed);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveHoldOutAtDoorComplete_Init () {
    gt_ObjectiveHoldOutAtDoorComplete = TriggerCreate("gt_ObjectiveHoldOutAtDoorComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Hold Out At Door Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveHoldOutAtDoorFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveHoldOutAtDoorCreate, true, false);
    ObjectiveSetState(gv_objectiveDestroyDominionBase2, c_objectiveStateFailed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveHoldOutAtDoorFailed_Init () {
    gt_ObjectiveHoldOutAtDoorFailed = TriggerCreate("gt_ObjectiveHoldOutAtDoorFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Escape Through Sublevel Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveEscapeThroughSublevelCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZLab02Objective03");
    gv_objectiveDestroyDominionBase22 = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 1);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveEscapeThroughSublevelCreate_Init () {
    gt_ObjectiveEscapeThroughSublevelCreate = TriggerCreate("gt_ObjectiveEscapeThroughSublevelCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Escape Through Sublevel Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveEscapeThroughSublevelComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveEscapeThroughSublevelCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZLab02Objective03", libSwaC_ge_MissionObjectiveState_Completed);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveEscapeThroughSublevelComplete_Init () {
    gt_ObjectiveEscapeThroughSublevelComplete = TriggerCreate("gt_ObjectiveEscapeThroughSublevelComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Escape Through Sublevel Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveEscapeThroughSublevelFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveEscapeThroughSublevelCreate, true, false);
    ObjectiveSetState(gv_objectiveDestroyDominionBase22, c_objectiveStateFailed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveEscapeThroughSublevelFailed_Init () {
    gt_ObjectiveEscapeThroughSublevelFailed = TriggerCreate("gt_ObjectiveEscapeThroughSublevelFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Defend The Tram Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDefendTheTramCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZLab02Objective04");
    gv_objectiveDestroyDominionBase222 = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 1);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDefendTheTramCreate_Init () {
    gt_ObjectiveDefendTheTramCreate = TriggerCreate("gt_ObjectiveDefendTheTramCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Defend The Tram Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDefendTheTramComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDefendTheTramCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZLab02Objective04", libSwaC_ge_MissionObjectiveState_Completed);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDefendTheTramComplete_Init () {
    gt_ObjectiveDefendTheTramComplete = TriggerCreate("gt_ObjectiveDefendTheTramComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Defend The Tram Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDefendTheTramFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDefendTheTramCreate, true, false);
    ObjectiveSetState(gv_objectiveDestroyDominionBase222, c_objectiveStateFailed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDefendTheTramFailed_Init () {
    gt_ObjectiveDefendTheTramFailed = TriggerCreate("gt_ObjectiveDefendTheTramFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Reach The Spaceport Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveReachTheSpaceportCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZLab02Objective05");
    gv_objectiveDestroyDominionBase2222 = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 1);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveReachTheSpaceportCreate_Init () {
    gt_ObjectiveReachTheSpaceportCreate = TriggerCreate("gt_ObjectiveReachTheSpaceportCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Reach The Spaceport Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveReachTheSpaceportComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveReachTheSpaceportCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZLab02Objective05", libSwaC_ge_MissionObjectiveState_Completed);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveReachTheSpaceportComplete_Init () {
    gt_ObjectiveReachTheSpaceportComplete = TriggerCreate("gt_ObjectiveReachTheSpaceportComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Reach The Spaceport Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveReachTheSpaceportFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveReachTheSpaceportCreate, true, false);
    ObjectiveSetState(gv_objectiveDestroyDominionBase2222, c_objectiveStateFailed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveReachTheSpaceportFailed_Init () {
    gt_ObjectiveReachTheSpaceportFailed = TriggerCreate("gt_ObjectiveReachTheSpaceportFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy the Archangel Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroytheArchangelCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZLab02Objective06");
    gv_objectiveDestroyDominionBase22222 = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 1);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroytheArchangelCreate_Init () {
    gt_ObjectiveDestroytheArchangelCreate = TriggerCreate("gt_ObjectiveDestroytheArchangelCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy the Archangel Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroytheArchangelComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroytheArchangelCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZLab02Objective06", libSwaC_ge_MissionObjectiveState_Completed);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroytheArchangelComplete_Init () {
    gt_ObjectiveDestroytheArchangelComplete = TriggerCreate("gt_ObjectiveDestroytheArchangelComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy the Archangel Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroytheArchangelFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroytheArchangelCreate, true, false);
    ObjectiveSetState(gv_objectiveDestroyDominionBase22222, c_objectiveStateFailed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroytheArchangelFailed_Init () {
    gt_ObjectiveDestroytheArchangelFailed = TriggerCreate("gt_ObjectiveDestroytheArchangelFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kerrigan Must Survive Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKerriganMustSurviveCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZLab02Objective07");
    gv_objectiveDestroyDominionBase22223 = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 0);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKerriganMustSurviveCreate_Init () {
    gt_ObjectiveKerriganMustSurviveCreate = TriggerCreate("gt_ObjectiveKerriganMustSurviveCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kerrigan Must Survive Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKerriganMustSurviveComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveKerriganMustSurviveCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZLab02Objective07", libSwaC_ge_MissionObjectiveState_Completed);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKerriganMustSurviveComplete_Init () {
    gt_ObjectiveKerriganMustSurviveComplete = TriggerCreate("gt_ObjectiveKerriganMustSurviveComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kerrigan Must Survive Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKerriganMustSurviveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveKerriganMustSurviveCreate, true, false);
    ObjectiveSetState(gv_objectiveDestroyDominionBase22223, c_objectiveStateFailed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKerriganMustSurviveFailed_Init () {
    gt_ObjectiveKerriganMustSurviveFailed = TriggerCreate("gt_ObjectiveKerriganMustSurviveFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto2448601C_g;
    int auto2448601C_u;
    unit auto2448601C_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    gv_inCinematic = true;
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UnitPauseAll(true);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_pLAYER_02_DOMINION222, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    auto2448601C_g = gv_cinematicHiddenUnits;
    auto2448601C_u = UnitGroupCount(auto2448601C_g, c_unitCountAll);
    for (;; auto2448601C_u -= 1) {
        auto2448601C_var = UnitGroupUnitFromEnd(auto2448601C_g, auto2448601C_u);
        if (auto2448601C_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto2448601C_var, false);
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "KerriganGhostLab", 0, gv_pLAYER_01_USER, PointFromId(634));
    UnitSetState(UnitLastCreated(), c_unitStateFidget, false);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 2.0);
    UnitSetTeamColorIndex(UnitLastCreated(), 6);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    gv_cINEMATIC_KERRIGAN = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "RaynorLab", 0, gv_pLAYER_02_DOMINION222, PointFromId(1009));
    UnitSetState(UnitLastCreated(), c_unitStateFidget, false);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 2.0);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    gv_cINEMATIC_RAYNOR = UnitLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1010), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1043), 3.0, -1, 10.0, true);
    UnitIssueOrder(gv_cINEMATIC_RAYNOR, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1044)), c_orderQueueReplace);
    UnitIssueOrder(gv_cINEMATIC_RAYNOR, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(1152)), c_orderQueueAddToEnd);
    TriggerExecute(gt_IntroMusic, true, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    Wait(0.5, c_timeReal);
    UnitIssueOrder(gv_cINEMATIC_KERRIGAN, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1045)), c_orderQueueReplace);
    SoundPlay(SoundLink("UI_TransmissionStart", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(0.5, c_timeReal);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicInTransmission);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Lab02|Line00011", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_cINEMATIC_KERRIGAN, "zBriefing_Lab02|Line00012", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(0.2, c_timeReal);
    UnitIssueOrder(gv_cINEMATIC_RAYNOR, OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_cINEMATIC_KERRIGAN)), c_orderQueueReplace);
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1159), (SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Lab02|Line00013", true), c_soundIndexAny)) + 3.0), -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Lab02|Line00013", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Lab02|Line00014", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    UnitIssueOrder(gv_cINEMATIC_RAYNOR, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(1153)), c_orderQueueReplace);
    libSwaC_gf_SendTransmissionCampaign(gv_cINEMATIC_RAYNOR, "zBriefing_Lab02|Line00015", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(1.0, c_timeReal);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1154), 2.0, -1, 10.0, true);
    UnitIssueOrder(gv_cINEMATIC_RAYNOR, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1155)), c_orderQueueReplace);
    UnitIssueOrder(gv_cINEMATIC_RAYNOR, OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_cINEMATIC_KERRIGAN)), c_orderQueueAddToEnd);
    TransmissionWait(TransmissionLastSent(), 2.0);
    UnitIssueOrder(gv_cINEMATIC_KERRIGAN, OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_cINEMATIC_RAYNOR)), c_orderQueueReplace);
    TransmissionWait(TransmissionLastSent(), 0.0);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup autoCA7F58B6_g;
    int autoCA7F58B6_u;
    unit autoCA7F58B6_var;
    unitgroup auto5FCA0BB3_g;
    int auto5FCA0BB3_u;
    unit auto5FCA0BB3_var;
    unitgroup autoBDCDA126_g;
    int autoBDCDA126_u;
    unit autoBDCDA126_var;
    unitgroup autoB6B8FE37_g;
    int autoB6B8FE37_u;
    unit autoB6B8FE37_var;
    unitgroup auto845A9534_g;
    int auto845A9534_u;
    unit auto845A9534_var;
    unitgroup auto2F56146F_g;
    int auto2F56146F_u;
    unit auto2F56146F_var;
    unitgroup auto98B1DB10_g;
    int auto98B1DB10_u;
    unit auto98B1DB10_var;
    unitgroup auto06B836A4_g;
    int auto06B836A4_u;
    unit auto06B836A4_var;
    unitgroup auto688B1DAA_g;
    int auto688B1DAA_u;
    unit auto688B1DAA_var;
    unitgroup autoDC3D569A_g;
    int autoDC3D569A_u;
    unit autoDC3D569A_var;
    unitgroup auto813A9DC6_g;
    int auto813A9DC6_u;
    unit auto813A9DC6_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_introMusicCompleted == false)) {
        SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    }

    autoCA7F58B6_g = gv_cinematicTempUnits;
    autoCA7F58B6_u = UnitGroupCount(autoCA7F58B6_g, c_unitCountAll);
    for (;; autoCA7F58B6_u -= 1) {
        autoCA7F58B6_var = UnitGroupUnitFromEnd(autoCA7F58B6_g, autoCA7F58B6_u);
        if (autoCA7F58B6_var == null) { break; }
        UnitRemove(autoCA7F58B6_var);
    }
    auto5FCA0BB3_g = gv_cinematicHiddenUnits;
    auto5FCA0BB3_u = UnitGroupCount(auto5FCA0BB3_g, c_unitCountAll);
    for (;; auto5FCA0BB3_u -= 1) {
        auto5FCA0BB3_var = UnitGroupUnitFromEnd(auto5FCA0BB3_g, auto5FCA0BB3_u);
        if (auto5FCA0BB3_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto5FCA0BB3_var, true);
    }
    UnitPauseAll(false);
    autoBDCDA126_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBDCDA126_u = UnitGroupCount(autoBDCDA126_g, c_unitCountAll);
    for (;; autoBDCDA126_u -= 1) {
        autoBDCDA126_var = UnitGroupUnitFromEnd(autoBDCDA126_g, autoBDCDA126_u);
        if (autoBDCDA126_var == null) { break; }
        libNtve_gf_PauseUnit(autoBDCDA126_var, true);
    }
    autoB6B8FE37_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB6B8FE37_u = UnitGroupCount(autoB6B8FE37_g, c_unitCountAll);
    for (;; autoB6B8FE37_u -= 1) {
        autoB6B8FE37_var = UnitGroupUnitFromEnd(autoB6B8FE37_g, autoB6B8FE37_u);
        if (autoB6B8FE37_var == null) { break; }
        libNtve_gf_PauseUnit(autoB6B8FE37_var, true);
    }
    auto845A9534_g = gv_s1_BridgeCrushingGripDominion;
    auto845A9534_u = UnitGroupCount(auto845A9534_g, c_unitCountAll);
    for (;; auto845A9534_u -= 1) {
        auto845A9534_var = UnitGroupUnitFromEnd(auto845A9534_g, auto845A9534_u);
        if (auto845A9534_var == null) { break; }
        libNtve_gf_PauseUnit(auto845A9534_var, true);
    }
    auto2F56146F_g = gv_s1_BridgeCrushingGripUmojan;
    auto2F56146F_u = UnitGroupCount(auto2F56146F_g, c_unitCountAll);
    for (;; auto2F56146F_u -= 1) {
        auto2F56146F_var = UnitGroupUnitFromEnd(auto2F56146F_g, auto2F56146F_u);
        if (auto2F56146F_var == null) { break; }
        libNtve_gf_PauseUnit(auto2F56146F_var, true);
    }
    auto98B1DB10_g = gv_s1_SublevelDoorDominion;
    auto98B1DB10_u = UnitGroupCount(auto98B1DB10_g, c_unitCountAll);
    for (;; auto98B1DB10_u -= 1) {
        auto98B1DB10_var = UnitGroupUnitFromEnd(auto98B1DB10_g, auto98B1DB10_u);
        if (auto98B1DB10_var == null) { break; }
        libNtve_gf_PauseUnit(auto98B1DB10_var, true);
    }
    auto06B836A4_g = UnitGroup(null, gv_pLAYER_02_DOMINION22, RegionFromId(23), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto06B836A4_u = UnitGroupCount(auto06B836A4_g, c_unitCountAll);
    for (;; auto06B836A4_u -= 1) {
        auto06B836A4_var = UnitGroupUnitFromEnd(auto06B836A4_g, auto06B836A4_u);
        if (auto06B836A4_var == null) { break; }
        libNtve_gf_PauseUnit(auto06B836A4_var, true);
    }
    auto688B1DAA_g = UnitGroup(null, c_playerAny, RegionFromId(29), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto688B1DAA_u = UnitGroupCount(auto688B1DAA_g, c_unitCountAll);
    for (;; auto688B1DAA_u -= 1) {
        auto688B1DAA_var = UnitGroupUnitFromEnd(auto688B1DAA_g, auto688B1DAA_u);
        if (auto688B1DAA_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto688B1DAA_var, false);
        libNtve_gf_PauseUnit(auto688B1DAA_var, true);
    }
    autoDC3D569A_g = UnitGroup(null, c_playerAny, RegionFromId(65), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDC3D569A_u = UnitGroupCount(autoDC3D569A_g, c_unitCountAll);
    for (;; autoDC3D569A_u -= 1) {
        autoDC3D569A_var = UnitGroupUnitFromEnd(autoDC3D569A_g, autoDC3D569A_u);
        if (autoDC3D569A_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoDC3D569A_var, false);
        libNtve_gf_PauseUnit(autoDC3D569A_var, true);
    }
    auto813A9DC6_g = UnitGroup(null, c_playerAny, RegionFromId(60), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto813A9DC6_u = UnitGroupCount(auto813A9DC6_g, c_unitCountAll);
    for (;; auto813A9DC6_u -= 1) {
        auto813A9DC6_var = UnitGroupUnitFromEnd(auto813A9DC6_g, auto813A9DC6_u);
        if (auto813A9DC6_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto813A9DC6_var, false);
        libNtve_gf_PauseUnit(auto813A9DC6_var, true);
    }
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    TriggerExecute(gt_StartAI, true, false);
    Wait(0.5, c_timeReal);
    RegionPlayableMapSet(RegionFromId(8));
    UnitSelect(gv_kerrigan, gv_pLAYER_01_USER, true);
    UnitSetPosition(gv_kerrigan2, PointFromId(1155), false);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.5);
    libNtve_gf_GlobalCinematicSetting(false);
    gv_inCinematic = false;
    CameraSetData(PlayerGroupSingle(gv_pLAYER_01_USER), "LabHeroCamera");
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, (30.0 + 8.0), 30.0, PlayerStartLocation(gv_pLAYER_01_USER), lv_fadeDuration);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Music
//--------------------------------------------------------------------------------------------------
bool gt_IntroMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_soundtrack = "ZLab02MusicIntro";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    gv_introMusicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroMusic_Init () {
    gt_IntroMusic = TriggerCreate("gt_IntroMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Q - Stage 2
//--------------------------------------------------------------------------------------------------
bool gt_MidQStage2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_MidSetupStage2, true, true);
    TriggerExecute(gt_MidCinematicStage2, true, true);
    TriggerExecute(gt_MidCinematicEndStage2, true, true);
    TriggerExecute(gt_MidCleanupStage2, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidQStage2_Init () {
    gt_MidQStage2 = TriggerCreate("gt_MidQStage2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Setup - Stage 2
//--------------------------------------------------------------------------------------------------
bool gt_MidSetupStage2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoE1B41757_g;
    int autoE1B41757_u;
    unit autoE1B41757_var;
    unitgroup auto689E1F0E_g;
    int auto689E1F0E_u;
    unit auto689E1F0E_var;
    unitgroup autoA53B3E0A_g;
    int autoA53B3E0A_u;
    unit autoA53B3E0A_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    CameraSave(gv_pLAYER_01_USER);
    libNtve_gf_StoreUnitSelection(gv_pLAYER_01_USER, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    libNtve_gf_ActorRegionSendSimple(gv_hiddenDoodadRegion, "SetVisibility 1");
    UnitPauseAll(true);
    AITimePause(true);
    libNtve_gf_ShowHideUnit(gv_kerrigan, false);
    libNtve_gf_ShowHideUnit(gv_kerrigan2, false);
    autoE1B41757_g = UnitGroup("PathingBlocker2x2", c_playerAny, RegionCircle(UnitGetPosition(gv_kerrigan2), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE1B41757_u = UnitGroupCount(autoE1B41757_g, c_unitCountAll);
    for (;; autoE1B41757_u -= 1) {
        autoE1B41757_var = UnitGroupUnitFromEnd(autoE1B41757_g, autoE1B41757_u);
        if (autoE1B41757_var == null) { break; }
        UnitRemove(autoE1B41757_var);
    }
    auto689E1F0E_g = UnitGroup(null, gv_pLAYER_02_DOMINION22, RegionFromId(23), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto689E1F0E_u = UnitGroupCount(auto689E1F0E_g, c_unitCountAll);
    for (;; auto689E1F0E_u -= 1) {
        auto689E1F0E_var = UnitGroupUnitFromEnd(auto689E1F0E_g, auto689E1F0E_u);
        if (auto689E1F0E_var == null) { break; }
        UnitRemove(auto689E1F0E_var);
    }
    autoA53B3E0A_g = UnitGroup(null, c_playerAny, RegionFromId(29), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoA53B3E0A_u = UnitGroupCount(autoA53B3E0A_g, c_unitCountAll);
    for (;; autoA53B3E0A_u -= 1) {
        autoA53B3E0A_var = UnitGroupUnitFromEnd(autoA53B3E0A_g, autoA53B3E0A_u);
        if (autoA53B3E0A_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoA53B3E0A_var, true);
    }
    gf_ReviveRaynor();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidSetupStage2_Init () {
    gt_MidSetupStage2 = TriggerCreate("gt_MidSetupStage2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic - Stage 2
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematicStage2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(92), 0.0, -1, 10.0, true);
    libNtve_gf_AttachModelToActor(ActorFromDoodad(DoodadFromId(1717)), "KerriganGhostLab", "Ref_Hardpoint");
    gv_midKerriganActor = libNtve_gf_ActorLastCreated();
    ActorSend(gv_midKerriganActor, "SetTeamColor 255,128,0 255,128,0");
    libNtve_gf_AttachModelToActor(ActorFromDoodad(DoodadFromId(1717)), "RaynorLab", "Ref_Hardpoint 01");
    gv_midRaynorActor = libNtve_gf_ActorLastCreated();
    ActorSend(gv_midRaynorActor, "SetTeamColor 0,0,255 0,0,255");
    TriggerExecute(gt_MidElevatorMusic, true, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(1717)), c_animNameDefault, "Cover Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    SoundPlay(SoundLink("Thor_Movement", -1), PlayerGroupAll(), 70.0, 0.0);
    gv_midThorSound = SoundLastPlayed();
    Wait(3.3, c_timeGame);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Lab02Level02", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(700), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(701), 4.3, -1, 10.0, true);
    libNtve_gf_KillModel(gv_midKerriganActor);
    libNtve_gf_KillModel(gv_midRaynorActor);
    libNtve_gf_AttachModelToActor(ActorFromDoodad(DoodadFromId(47)), "KerriganGhostLab", "Ref_Hardpoint");
    gv_midKerriganActor = libNtve_gf_ActorLastCreated();
    ActorSend(gv_midKerriganActor, "SetTeamColor 255,128,0 255,128,0");
    libNtve_gf_AttachModelToActor(ActorFromDoodad(DoodadFromId(47)), "RaynorLab", "Ref_Hardpoint 01");
    gv_midRaynorActor = libNtve_gf_ActorLastCreated();
    ActorSend(gv_midRaynorActor, "SetTeamColor 0,0,255 0,0,255");
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(47)), c_animNameDefault, "Cover Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    SoundPlay(SoundLink("Thor_Movement", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_midThorSound = SoundLastPlayed();
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    SoundPlay(SoundLink("UI_TerranKlaxonAlert", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_midAlertSound = SoundLastPlayed();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicInTransmission);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan222, "zMission_Lab02|Line00070", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_LeavePortraitVisibleAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan222, "zMission_Lab02|Line00071", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematicStage2_Init () {
    gt_MidCinematicStage2 = TriggerCreate("gt_MidCinematicStage2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic End - Stage 2
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematicEndStage2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematicEndStage2_Init () {
    gt_MidCinematicEndStage2 = TriggerCreate("gt_MidCinematicEndStage2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cleanup - Stage 2
//--------------------------------------------------------------------------------------------------
bool gt_MidCleanupStage2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup autoB352350A_g;
    int autoB352350A_u;
    unit autoB352350A_var;
    unitgroup auto1217D780_g;
    int auto1217D780_u;
    unit auto1217D780_var;
    unitgroup autoA91AC736_g;
    int autoA91AC736_u;
    unit autoA91AC736_var;
    unitgroup auto0B00C70A_g;
    int auto0B00C70A_u;
    unit auto0B00C70A_var;
    unitgroup auto3BE72301_g;
    int auto3BE72301_u;
    unit auto3BE72301_var;
    unitgroup auto6C75E54F_g;
    int auto6C75E54F_u;
    unit auto6C75E54F_var;
    unitgroup auto88441343_g;
    int auto88441343_u;
    unit auto88441343_var;
    unitgroup autoF75FC053_g;
    int autoF75FC053_u;
    unit autoF75FC053_var;
    unitgroup autoA26FD2A9_g;
    int autoA26FD2A9_u;
    unit autoA26FD2A9_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == false) && (gv_midElevatorMusicCompleted == false)) {
        TriggerStop(gt_MidElevatorMusic);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZLab02MusicAlt1", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }

    autoB352350A_g = gv_cinematicTempUnits;
    autoB352350A_u = UnitGroupCount(autoB352350A_g, c_unitCountAll);
    for (;; autoB352350A_u -= 1) {
        autoB352350A_var = UnitGroupUnitFromEnd(autoB352350A_g, autoB352350A_u);
        if (autoB352350A_var == null) { break; }
        UnitRemove(autoB352350A_var);
    }
    ActorSend(gv_midKerriganActor, "Destroy Immediate");
    ActorSend(gv_midRaynorActor, "Destroy Immediate");
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(47)), c_animNameDefault, "Cover", c_animFlagPlayForever, c_animTimeDefault);
    UnitPauseAll(false);
    AITimePause(false);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    CameraRestore(gv_pLAYER_01_USER, 0.0, -1, 10);
    SoundStop(gv_midThorSound, true);
    SoundStop(gv_midAlertSound, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Lab02Level02", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    ObjectiveShow(gv_objectiveDestroyDominionBase, PlayerGroupAll(), false);
    ObjectiveShow(gv_objectiveDestroyDominionBase2, PlayerGroupAll(), false);
    RegionPlayableMapSet(RegionFromId(29));
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    gf_RemoveIncapforCinematic(gv_kerrigan2);
    libNtve_gf_ShowHideUnit(gv_kerrigan, true);
    libNtve_gf_ShowHideUnit(gv_kerrigan2, true);
    UnitSetPropertyFixed(gv_kerrigan, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_kerrigan, c_unitPropEnergyPercent, 100.0);
    UnitSetPropertyFixed(gv_kerrigan2, c_unitPropLifePercent, 100.0);
    UnitSetPosition(gv_kerrigan, PointFromId(1184), false);
    UnitIssueOrder(gv_kerrigan, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    libNtve_gf_MakeUnitFacePoint(gv_kerrigan, PointFromId(423), 0.0);
    UnitAbilityReset(gv_kerrigan, AbilityCommand("PsionicLift", 0), c_spendLocationAll);
    UnitAbilityReset(gv_kerrigan, AbilityCommand("MindBolt", 0), c_spendLocationAll);
    UnitSetPosition(gv_kerrigan2, PointFromId(1185), false);
    UnitIssueOrder(gv_kerrigan2, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    libNtve_gf_MakeUnitFacePoint(gv_kerrigan2, PointFromId(423), 0.0);
    UnitSelect(gv_kerrigan, gv_pLAYER_01_USER, true);
    auto1217D780_g = UnitGroup(null, c_playerAny, RegionFromId(8), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1217D780_u = UnitGroupCount(auto1217D780_g, c_unitCountAll);
    for (;; auto1217D780_u -= 1) {
        auto1217D780_var = UnitGroupUnitFromEnd(auto1217D780_g, auto1217D780_u);
        if (auto1217D780_var == null) { break; }
        UnitRemove(auto1217D780_var);
    }
    autoA91AC736_g = UnitGroup(null, c_playerAny, RegionFromId(29), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoA91AC736_u = UnitGroupCount(autoA91AC736_g, c_unitCountAll);
    for (;; autoA91AC736_u -= 1) {
        autoA91AC736_var = UnitGroupUnitFromEnd(autoA91AC736_g, autoA91AC736_u);
        if (autoA91AC736_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoA91AC736_var, true);
        libNtve_gf_PauseUnit(autoA91AC736_var, false);
    }
    auto0B00C70A_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(62), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0B00C70A_u = UnitGroupCount(auto0B00C70A_g, c_unitCountAll);
    for (;; auto0B00C70A_u -= 1) {
        auto0B00C70A_var = UnitGroupUnitFromEnd(auto0B00C70A_g, auto0B00C70A_u);
        if (auto0B00C70A_var == null) { break; }
        libNtve_gf_PauseUnit(auto0B00C70A_var, true);
    }
    auto3BE72301_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(61), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3BE72301_u = UnitGroupCount(auto3BE72301_g, c_unitCountAll);
    for (;; auto3BE72301_u -= 1) {
        auto3BE72301_var = UnitGroupUnitFromEnd(auto3BE72301_g, auto3BE72301_u);
        if (auto3BE72301_var == null) { break; }
        libNtve_gf_PauseUnit(auto3BE72301_var, true);
    }
    auto6C75E54F_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionFromId(92), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6C75E54F_u = UnitGroupCount(auto6C75E54F_g, c_unitCountAll);
    for (;; auto6C75E54F_u -= 1) {
        auto6C75E54F_var = UnitGroupUnitFromEnd(auto6C75E54F_g, auto6C75E54F_u);
        if (auto6C75E54F_var == null) { break; }
        libNtve_gf_PauseUnit(auto6C75E54F_var, true);
    }
    auto88441343_g = UnitGroup(null, gv_pLAYER_02_DOMINION22, RegionFromId(92), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto88441343_u = UnitGroupCount(auto88441343_g, c_unitCountAll);
    for (;; auto88441343_u -= 1) {
        auto88441343_var = UnitGroupUnitFromEnd(auto88441343_g, auto88441343_u);
        if (auto88441343_var == null) { break; }
        libNtve_gf_PauseUnit(auto88441343_var, true);
    }
    autoF75FC053_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(66), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF75FC053_u = UnitGroupCount(autoF75FC053_g, c_unitCountAll);
    for (;; autoF75FC053_u -= 1) {
        autoF75FC053_var = UnitGroupUnitFromEnd(autoF75FC053_g, autoF75FC053_u);
        if (autoF75FC053_var == null) { break; }
        libNtve_gf_PauseUnit(autoF75FC053_var, true);
    }
    autoA26FD2A9_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionFromId(66), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA26FD2A9_u = UnitGroupCount(autoA26FD2A9_g, c_unitCountAll);
    for (;; autoA26FD2A9_u -= 1) {
        autoA26FD2A9_var = UnitGroupUnitFromEnd(autoA26FD2A9_g, autoA26FD2A9_u);
        if (autoA26FD2A9_var == null) { break; }
        libNtve_gf_PauseUnit(autoA26FD2A9_var, true);
    }
    TerrainShowRegion(RegionFromId(32), false);
    TerrainShowRegion(RegionFromId(31), false);
    TerrainShowRegion(RegionFromId(30), false);
    TerrainShowRegion(RegionFromId(43), false);
    TerrainShowRegion(RegionFromId(49), false);
    TerrainShowRegion(RegionFromId(51), false);
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(32), "Decal");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(31), "Decal");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(30), "Decal");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(43), "Decal");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(49), "Decal");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(51), "Decal");
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    gv_inCinematic = false;
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, (30.0 + 8.0), 30.0, PointFromId(91), lv_fadeDuration);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_StartGameStage2Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCleanupStage2_Init () {
    gt_MidCleanupStage2 = TriggerCreate("gt_MidCleanupStage2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Elevator Music
//--------------------------------------------------------------------------------------------------
bool gt_MidElevatorMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_soundtrack = "ZLab02MusicCutscene12_ElevatorDescent";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    gv_midElevatorMusicCompleted = true;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZLab02MusicAlt1", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidElevatorMusic_Init () {
    gt_MidElevatorMusic = TriggerCreate("gt_MidElevatorMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Q - Stage 3
//--------------------------------------------------------------------------------------------------
bool gt_MidQStage3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_MidSetupStage3, true, true);
    TriggerExecute(gt_MidCinematicStage3, true, true);
    TriggerExecute(gt_MidCinematicEndStage3, true, true);
    TriggerExecute(gt_MidCleanupStage3, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidQStage3_Init () {
    gt_MidQStage3 = TriggerCreate("gt_MidQStage3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Setup - Stage 3
//--------------------------------------------------------------------------------------------------
bool gt_MidSetupStage3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    CameraSave(gv_pLAYER_01_USER);
    libNtve_gf_StoreUnitSelection(gv_pLAYER_01_USER, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UnitPauseAll(true);
    AITimePause(true);
    gf_ReviveRaynor();
    libNtve_gf_ShowHideUnit(gv_kerrigan2, false);
    libNtve_gf_CreateUnitsAtPoint2(1, "RaynorLab", 0, gv_pLAYER_02_DOMINION222, PointFromId(398));
    gv_cINEMATIC_RAYNOR = UnitLastCreated();
    UnitSetState(gv_cINEMATIC_RAYNOR, c_unitStateFidget, false);
    UnitSetPropertyFixed(gv_cINEMATIC_RAYNOR, c_unitPropMovementSpeed, 2.0);
    UnitGroupAdd(gv_cinematicTempUnits, gv_cINEMATIC_RAYNOR);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidSetupStage3_Init () {
    gt_MidSetupStage3 = TriggerCreate("gt_MidSetupStage3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic - Stage 3
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematicStage3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoE8BB9BC3_g;
    int autoE8BB9BC3_u;
    unit autoE8BB9BC3_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(460), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(538), (SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Lab02|Line00103", true), c_soundIndexAny)) + (SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Lab02|Line00184", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Lab02|Line00185", true), c_soundIndexAny)))), -1, 10.0, true);
    UnitRemove(UnitFromId(308));
    libNtve_gf_PauseUnit(gv_kerrigan, false);
    UnitSetPosition(gv_kerrigan, PointFromId(407), false);
    UnitIssueOrder(gv_cINEMATIC_RAYNOR, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(702)), c_orderQueueReplace);
    UnitIssueOrder(gv_cINEMATIC_RAYNOR, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(1186)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_kerrigan, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1186)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(702)), c_orderQueueAddToEnd);
    autoE8BB9BC3_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionCircle(UnitGetPosition(gv_kerrigan), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE8BB9BC3_u = UnitGroupCount(autoE8BB9BC3_g, c_unitCountAll);
    for (;; autoE8BB9BC3_u -= 1) {
        autoE8BB9BC3_var = UnitGroupUnitFromEnd(autoE8BB9BC3_g, autoE8BB9BC3_u);
        if (autoE8BB9BC3_var == null) { break; }
        UnitRemove(autoE8BB9BC3_var);
    }
    TriggerExecute(gt_MidBoardTramMusic, true, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicInTransmission);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab02|Line00103", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_cINEMATIC_RAYNOR, "zMission_Lab02|Line00184", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Lab02|Line00185", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 0.5);
    UnitIssueOrder(gv_cINEMATIC_RAYNOR, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(424)), c_orderQueueReplace);
    TransmissionWait(TransmissionLastSent(), 0.0);
    UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1790)), c_orderQueueReplace);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematicStage3_Init () {
    gt_MidCinematicStage3 = TriggerCreate("gt_MidCinematicStage3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic End - Stage 3
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematicEndStage3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematicEndStage3_Init () {
    gt_MidCinematicEndStage3 = TriggerCreate("gt_MidCinematicEndStage3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cleanup - Stage 3
//--------------------------------------------------------------------------------------------------
bool gt_MidCleanupStage3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto0E54C56C_g;
    int auto0E54C56C_u;
    unit auto0E54C56C_var;
    unitgroup auto54F03E51_g;
    int auto54F03E51_u;
    unit auto54F03E51_var;
    unitgroup auto8FDA6640_g;
    int auto8FDA6640_u;
    unit auto8FDA6640_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == false) && (gv_midBoardTramMusicCompleted == false)) {
        TriggerStop(gt_MidBoardTramMusic);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZLab02MusicAlt3", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }

    auto0E54C56C_g = gv_cinematicTempUnits;
    auto0E54C56C_u = UnitGroupCount(auto0E54C56C_g, c_unitCountAll);
    for (;; auto0E54C56C_u -= 1) {
        auto0E54C56C_var = UnitGroupUnitFromEnd(auto0E54C56C_g, auto0E54C56C_u);
        if (auto0E54C56C_var == null) { break; }
        UnitRemove(auto0E54C56C_var);
    }
    UnitPauseAll(false);
    AITimePause(false);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    CameraSetData(PlayerGroupSingle(gv_pLAYER_01_USER), "Dflt");
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    UnitSelect(gv_kerrigan, gv_pLAYER_01_USER, true);
    ObjectiveShow(gv_objectiveDestroyDominionBase22, PlayerGroupAll(), false);
    RegionPlayableMapSet(RegionFromId(65));
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(65), "UmojanLabTramBackground", c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    ActorSend(ActorFromDoodad(DoodadFromId(532)), "SetOpacity 1.000000 1.000000");
    FogSetEnabled(false);
    EnvironmentShow(c_environmentTerrain, false);
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(29), null);
    UnitRemove(UnitFromId(479));
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Lab02Train", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    UnitSetPropertyFixed(gv_kerrigan, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_kerrigan, c_unitPropEnergyPercent, 100.0);
    UnitSetPosition(gv_kerrigan, PointFromId(499), false);
    UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(499)), c_orderQueueReplace);
    libNtve_gf_MakeUnitFacePoint(gv_kerrigan, PointFromId(527), 0.0);
    UnitAbilityReset(gv_kerrigan, AbilityCommand("PsionicLift", 0), c_spendLocationAll);
    UnitAbilityReset(gv_kerrigan, AbilityCommand("MindBolt", 0), c_spendLocationAll);
    libNtve_gf_ShowHideUnit(gv_kerrigan2, true);
    UnitSetPropertyFixed(gv_kerrigan2, c_unitPropLifePercent, 100.0);
    UnitSetPosition(gv_kerrigan2, PointFromId(500), false);
    UnitIssueOrder(gv_kerrigan2, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(500)), c_orderQueueReplace);
    libNtve_gf_MakeUnitFacePoint(gv_kerrigan2, PointFromId(527), 0.0);
    auto54F03E51_g = UnitGroup(null, c_playerAny, RegionFromId(29), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto54F03E51_u = UnitGroupCount(auto54F03E51_g, c_unitCountAll);
    for (;; auto54F03E51_u -= 1) {
        auto54F03E51_var = UnitGroupUnitFromEnd(auto54F03E51_g, auto54F03E51_u);
        if (auto54F03E51_var == null) { break; }
        UnitRemove(auto54F03E51_var);
    }
    auto8FDA6640_g = UnitGroup(null, c_playerAny, RegionFromId(65), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto8FDA6640_u = UnitGroupCount(auto8FDA6640_g, c_unitCountAll);
    for (;; auto8FDA6640_u -= 1) {
        auto8FDA6640_var = UnitGroupUnitFromEnd(auto8FDA6640_g, auto8FDA6640_u);
        if (auto8FDA6640_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto8FDA6640_var, true);
        libNtve_gf_PauseUnit(auto8FDA6640_var, false);
    }
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    gv_inCinematic = false;
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PointFromId(582), lv_fadeDuration);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_StartGameStage3Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCleanupStage3_Init () {
    gt_MidCleanupStage3 = TriggerCreate("gt_MidCleanupStage3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Board Tram Music
//--------------------------------------------------------------------------------------------------
bool gt_MidBoardTramMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_soundtrack = "ZLab02MusicCutscene27_BoardingTheTram";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    gv_midBoardTramMusicCompleted = true;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZLab02MusicAlt3", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidBoardTramMusic_Init () {
    gt_MidBoardTramMusic = TriggerCreate("gt_MidBoardTramMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Q - Stage 4
//--------------------------------------------------------------------------------------------------
bool gt_MidQStage4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_MidSetupStage4, true, true);
    TriggerExecute(gt_MidCinematicStage4, true, true);
    TriggerExecute(gt_MidCinematicEndStage4, true, true);
    TriggerExecute(gt_MidCleanupStage4, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidQStage4_Init () {
    gt_MidQStage4 = TriggerCreate("gt_MidQStage4_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Setup - Stage 4
//--------------------------------------------------------------------------------------------------
bool gt_MidSetupStage4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto1817A382_g;
    int auto1817A382_u;
    unit auto1817A382_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    EnvironmentShow(c_environmentTerrain, true);
    CameraSave(gv_pLAYER_01_USER);
    libNtve_gf_StoreUnitSelection(gv_pLAYER_01_USER, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "UmojanLabTramBackground");
    libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "UmojanLabTramBackgroundNaturalCliffs");
    VisRevealerDestroy(gv_s3_TramRevealer1);
    VisRevealerDestroy(gv_s3_TramRevealer2);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Avernus", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    FogSetColor(Color(86.67, 78.04, 65.10));
    FogSetDensity(0.07);
    FogSetFallOff(0.12);
    FogSetStartHeight(-4.0);
    FogSetEnabled(true);
    UnitPauseAll(true);
    AITimePause(true);
    auto1817A382_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionFromId(64), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto1817A382_u = UnitGroupCount(auto1817A382_g, c_unitCountAll);
    for (;; auto1817A382_u -= 1) {
        auto1817A382_var = UnitGroupUnitFromEnd(auto1817A382_g, auto1817A382_u);
        if (auto1817A382_var == null) { break; }
        UnitGroupAdd(gv_midCinematic04UmojanMarines, auto1817A382_var);
        libNtve_gf_ShowHideUnit(auto1817A382_var, true);
    }
    libNtve_gf_ShowHideUnit(UnitFromId(186), true);
    gf_ReviveRaynor();
    libNtve_gf_ShowHideUnit(gv_kerrigan2, false);
    libNtve_gf_CreateUnitsAtPoint2(1, "RaynorLab", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION222, PointFromId(562));
    gv_cINEMATIC_RAYNOR = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, gv_cINEMATIC_RAYNOR);
    UnitSetState(gv_cINEMATIC_RAYNOR, c_unitStateFidget, false);
    UnitSetPropertyFixed(gv_cINEMATIC_RAYNOR, c_unitPropMovementSpeed, 2.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidSetupStage4_Init () {
    gt_MidSetupStage4 = TriggerCreate("gt_MidSetupStage4_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic - Stage 4
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematicStage4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoCC7A1B9B_g;
    int autoCC7A1B9B_u;
    unit autoCC7A1B9B_var;
    unitgroup autoDE31FA88_g;
    int autoDE31FA88_u;
    unit autoDE31FA88_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(645), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(647), 3.0, -1, 10.0, true);
    autoCC7A1B9B_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionFromId(64), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCC7A1B9B_u = UnitGroupCount(autoCC7A1B9B_g, c_unitCountAll);
    for (;; autoCC7A1B9B_u -= 1) {
        autoCC7A1B9B_var = UnitGroupUnitFromEnd(autoCC7A1B9B_g, autoCC7A1B9B_u);
        if (autoCC7A1B9B_var == null) { break; }
        libNtve_gf_PauseUnit(autoCC7A1B9B_var, false);
    }
    UnitIssueOrder(UnitFromId(568), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(730)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(567), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(736)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(566), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(737)), c_orderQueueReplace);
    autoDE31FA88_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionFromId(64), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDE31FA88_u = UnitGroupCount(autoDE31FA88_g, c_unitCountAll);
    for (;; autoDE31FA88_u -= 1) {
        autoDE31FA88_var = UnitGroupUnitFromEnd(autoDE31FA88_g, autoDE31FA88_u);
        if (autoDE31FA88_var == null) { break; }
        UnitIssueOrder(autoDE31FA88_var, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(563)), c_orderQueueAddToEnd);
    }
    libNtve_gf_PauseUnit(gv_kerrigan, false);
    UnitSetPosition(gv_kerrigan, PointFromId(561), false);
    UnitIssueOrder(gv_kerrigan, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    SoundPlayAtPoint(SoundLink("Hercules_Unload", -1), PlayerGroupAll(), PointFromId(531), 8.0, 100.0, 0.0);
    gv_midTramSound = SoundLastPlayed();
    UnitIssueOrder(gv_cINEMATIC_RAYNOR, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1188)), c_orderQueueReplace);
    UnitIssueOrder(gv_cINEMATIC_RAYNOR, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(563)), c_orderQueueAddToEnd);
    TriggerExecute(gt_MidLeavingTramMusic, true, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    Wait(0.5, c_timeReal);
    UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1187)), c_orderQueueReplace);
    UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(563)), c_orderQueueAddToEnd);
    Wait(0.5, c_timeReal);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicInTransmission);
    libSwaC_gf_SendTransmissionCampaign(UnitFromId(568), "zMission_Lab02|Line00112", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 0.5);
    UnitIssueOrder(UnitFromId(566), OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(648)), c_orderQueueAddToEnd);
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1189), (SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Lab02|Line00113", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Lab02|Line00114", true), c_soundIndexAny))), -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(UnitFromId(566), "zMission_Lab02|Line00113", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(0.25, c_timeReal);
    UnitIssueOrder(UnitFromId(568), OrderTargetingUnit(AbilityCommand("move", 4), UnitFromId(566)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(567), OrderTargetingUnit(AbilityCommand("move", 4), UnitFromId(566)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_cINEMATIC_RAYNOR, OrderTargetingUnit(AbilityCommand("move", 4), UnitFromId(566)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_kerrigan, OrderTargetingUnit(AbilityCommand("move", 4), UnitFromId(566)), c_orderQueueAddToEnd);
    Wait(1.0, c_timeReal);
    TriggerExecute(gt_MidCineMarinesMove, true, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SendTransmissionCampaign(gv_cINEMATIC_RAYNOR, "zMission_Lab02|Line00114", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    UnitIssueOrder(gv_cINEMATIC_RAYNOR, OrderTargetingUnit(AbilityCommand("move", 4), gv_kerrigan), c_orderQueueAddToEnd);
    Wait(0.25, c_timeReal);
    UnitIssueOrder(gv_kerrigan, OrderTargetingUnit(AbilityCommand("move", 4), gv_kerrigan2), c_orderQueueAddToEnd);
    TransmissionWait(TransmissionLastSent(), 0.0);
    UnitIssueOrder(gv_cINEMATIC_RAYNOR, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(730)), c_orderQueueAddToEnd);
    Wait(0.2, c_timeReal);
    UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(730)), c_orderQueueAddToEnd);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematicStage4_Init () {
    gt_MidCinematicStage4 = TriggerCreate("gt_MidCinematicStage4_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic End - Stage 4
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematicEndStage4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematicEndStage4_Init () {
    gt_MidCinematicEndStage4 = TriggerCreate("gt_MidCinematicEndStage4_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cleanup - Stage 4
//--------------------------------------------------------------------------------------------------
bool gt_MidCleanupStage4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto6B1FF976_g;
    int auto6B1FF976_u;
    unit auto6B1FF976_var;
    unitgroup autoF8F81449_g;
    int autoF8F81449_u;
    unit autoF8F81449_var;
    unitgroup auto13E07853_g;
    int auto13E07853_u;
    unit auto13E07853_var;
    unitgroup auto50E07E88_g;
    int auto50E07E88_u;
    unit auto50E07E88_var;
    unitgroup autoD2C753E4_g;
    int autoD2C753E4_u;
    unit autoD2C753E4_var;
    unitgroup auto05A99D33_g;
    int auto05A99D33_u;
    unit auto05A99D33_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == false) && (gv_midLeavingTramMusicCompleted == false)) {
        TriggerStop(gt_MidLeavingTramMusic);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZLab02MusicAlt4", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }

    auto6B1FF976_g = gv_cinematicTempUnits;
    auto6B1FF976_u = UnitGroupCount(auto6B1FF976_g, c_unitCountAll);
    for (;; auto6B1FF976_u -= 1) {
        auto6B1FF976_var = UnitGroupUnitFromEnd(auto6B1FF976_g, auto6B1FF976_u);
        if (auto6B1FF976_var == null) { break; }
        UnitRemove(auto6B1FF976_var);
    }
    UnitPauseAll(false);
    AITimePause(false);
    GameSetLighting("DominionLab02Outside", 0.0);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    CameraSetData(PlayerGroupSingle(gv_pLAYER_01_USER), "LabHeroCamera");
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    UnitSelect(gv_kerrigan, gv_pLAYER_01_USER, true);
    SoundStop(gv_midTramSound, true);
    libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "UmojanLabTramBackground");
    libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "UmojanLabTramBackgroundNaturalCliffs");
    FogSetColor(Color(86.67, 78.04, 65.10));
    FogSetDensity(0.07);
    FogSetFallOff(0.12);
    FogSetStartHeight(-4.0);
    ObjectiveShow(gv_objectiveDestroyDominionBase222, PlayerGroupAll(), false);
    RegionPlayableMapSet(RegionFromId(60));
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    UnitSetPropertyFixed(gv_kerrigan, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_kerrigan, c_unitPropEnergyPercent, 100.0);
    UnitSetPropertyFixed(gv_kerrigan2, c_unitPropLifePercent, 100.0);
    UnitSetPosition(gv_kerrigan, PointFromId(1632), false);
    libNtve_gf_MakeUnitFacePoint(gv_kerrigan, PointFromId(681), 0.0);
    UnitAbilityReset(gv_kerrigan, AbilityCommand("PsionicLift", 0), c_spendLocationAll);
    UnitAbilityReset(gv_kerrigan, AbilityCommand("MindBolt", 0), c_spendLocationAll);
    UnitSetPosition(gv_kerrigan2, PointFromId(1633), false);
    libNtve_gf_MakeUnitFacePoint(gv_kerrigan2, PointFromId(681), 0.0);
    UnitIssueOrder(gv_kerrigan, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_kerrigan2, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    autoF8F81449_g = UnitGroup(null, c_playerAny, RegionFromId(65), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF8F81449_u = UnitGroupCount(autoF8F81449_g, c_unitCountAll);
    for (;; autoF8F81449_u -= 1) {
        autoF8F81449_var = UnitGroupUnitFromEnd(autoF8F81449_g, autoF8F81449_u);
        if (autoF8F81449_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoF8F81449_var, false);
        libNtve_gf_PauseUnit(autoF8F81449_var, true);
        UnitRemove(autoF8F81449_var);
    }
    auto13E07853_g = UnitGroup(null, c_playerAny, RegionFromId(60), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto13E07853_u = UnitGroupCount(auto13E07853_g, c_unitCountAll);
    for (;; auto13E07853_u -= 1) {
        auto13E07853_var = UnitGroupUnitFromEnd(auto13E07853_g, auto13E07853_u);
        if (auto13E07853_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto13E07853_var, true);
        libNtve_gf_PauseUnit(auto13E07853_var, false);
    }
    auto50E07E88_g = UnitGroup(null, c_playerAny, RegionFromId(90), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto50E07E88_u = UnitGroupCount(auto50E07E88_g, c_unitCountAll);
    for (;; auto50E07E88_u -= 1) {
        auto50E07E88_var = UnitGroupUnitFromEnd(auto50E07E88_g, auto50E07E88_u);
        if (auto50E07E88_var == null) { break; }
        libNtve_gf_PauseUnit(auto50E07E88_var, true);
    }
    autoD2C753E4_g = gv_s4_UmojanArchangelGroup;
    autoD2C753E4_u = UnitGroupCount(autoD2C753E4_g, c_unitCountAll);
    for (;; autoD2C753E4_u -= 1) {
        autoD2C753E4_var = UnitGroupUnitFromEnd(autoD2C753E4_g, autoD2C753E4_u);
        if (autoD2C753E4_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoD2C753E4_var, false);
        libNtve_gf_PauseUnit(autoD2C753E4_var, true);
    }
    auto05A99D33_g = gv_midCinematic04UmojanMarines;
    auto05A99D33_u = UnitGroupCount(auto05A99D33_g, c_unitCountAll);
    for (;; auto05A99D33_u -= 1) {
        auto05A99D33_var = UnitGroupUnitFromEnd(auto05A99D33_g, auto05A99D33_u);
        if (auto05A99D33_var == null) { break; }
        UnitRemove(auto05A99D33_var);
    }
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    gv_inCinematic = false;
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, (30.0 + 8.0), 30.0, PointFromId(565), lv_fadeDuration);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_StartGameStage4Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCleanupStage4_Init () {
    gt_MidCleanupStage4 = TriggerCreate("gt_MidCleanupStage4_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cine - Marines Move
//--------------------------------------------------------------------------------------------------
bool gt_MidCineMarinesMove_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto1D211199_g;
    int auto1D211199_u;
    unit auto1D211199_var;
    unitgroup auto1E281A17_g;
    int auto1E281A17_u;
    unit auto1E281A17_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto1D211199_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionFromId(99), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1D211199_u = UnitGroupCount(auto1D211199_g, c_unitCountAll);
    for (;; auto1D211199_u -= 1) {
        auto1D211199_var = UnitGroupUnitFromEnd(auto1D211199_g, auto1D211199_u);
        if (auto1D211199_var == null) { break; }
        libNtve_gf_PauseUnit(auto1D211199_var, false);
        UnitIssueOrder(auto1D211199_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(648)), c_orderQueueReplace);
        UnitIssueOrder(auto1D211199_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(649)), c_orderQueueAddToEnd);
        UnitIssueOrder(auto1D211199_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(650)), c_orderQueueAddToEnd);
        UnitIssueOrder(auto1D211199_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(651)), c_orderQueueAddToEnd);
        UnitIssueOrder(auto1D211199_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(652)), c_orderQueueAddToEnd);
        UnitIssueOrder(auto1D211199_var, Order(AbilityCommand("stop", 0)), c_orderQueueAddToEnd);
        Wait(0.75, c_timeGame);
    }
    auto1E281A17_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionFromId(100), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1E281A17_u = UnitGroupCount(auto1E281A17_g, c_unitCountAll);
    for (;; auto1E281A17_u -= 1) {
        auto1E281A17_var = UnitGroupUnitFromEnd(auto1E281A17_g, auto1E281A17_u);
        if (auto1E281A17_var == null) { break; }
        libNtve_gf_PauseUnit(auto1E281A17_var, false);
        UnitIssueOrder(auto1E281A17_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(648)), c_orderQueueReplace);
        UnitIssueOrder(auto1E281A17_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(649)), c_orderQueueAddToEnd);
        UnitIssueOrder(auto1E281A17_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(650)), c_orderQueueAddToEnd);
        UnitIssueOrder(auto1E281A17_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(651)), c_orderQueueAddToEnd);
        UnitIssueOrder(auto1E281A17_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(652)), c_orderQueueAddToEnd);
        UnitIssueOrder(auto1E281A17_var, Order(AbilityCommand("stop", 0)), c_orderQueueAddToEnd);
        Wait(0.75, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCineMarinesMove_Init () {
    gt_MidCineMarinesMove = TriggerCreate("gt_MidCineMarinesMove_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Leaving Tram Music
//--------------------------------------------------------------------------------------------------
bool gt_MidLeavingTramMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_soundtrack = "ZLab02MusicCutscene28_LeavingTheTram";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    gv_midLeavingTramMusicCompleted = true;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZLab02MusicAlt4", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidLeavingTramMusic_Init () {
    gt_MidLeavingTramMusic = TriggerCreate("gt_MidLeavingTramMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Q - Archangel
//--------------------------------------------------------------------------------------------------
bool gt_MidQArchangel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_MidSetupArchangel, true, true);
    TriggerExecute(gt_MidCinematicArchangel, true, true);
    TriggerExecute(gt_MidCinematicEndArchangel, true, true);
    TriggerExecute(gt_MidCleanupArchangel, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidQArchangel_Init () {
    gt_MidQArchangel = TriggerCreate("gt_MidQArchangel_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Setup - Archangel
//--------------------------------------------------------------------------------------------------
bool gt_MidSetupArchangel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto4CDE9FB3_g;
    int auto4CDE9FB3_u;
    unit auto4CDE9FB3_var;
    unitgroup auto67B9F05B_g;
    int auto67B9F05B_u;
    unit auto67B9F05B_var;
    unitgroup autoC173A019_g;
    int autoC173A019_u;
    unit autoC173A019_var;
    unitgroup autoBC540373_g;
    int autoBC540373_u;
    unit autoBC540373_var;
    unitgroup auto2A31284A_g;
    int auto2A31284A_u;
    unit auto2A31284A_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    CameraSave(gv_pLAYER_01_USER);
    UnitClearSelection(gv_pLAYER_01_USER);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UnitRemove(UnitFromId(662));
    UnitRemove(UnitFromId(661));
    auto4CDE9FB3_g = gv_s4_DominionAttackers;
    auto4CDE9FB3_u = UnitGroupCount(auto4CDE9FB3_g, c_unitCountAll);
    for (;; auto4CDE9FB3_u -= 1) {
        auto4CDE9FB3_var = UnitGroupUnitFromEnd(auto4CDE9FB3_g, auto4CDE9FB3_u);
        if (auto4CDE9FB3_var == null) { break; }
        UnitRemove(auto4CDE9FB3_var);
    }
    libNtve_gf_ShowHideUnit(gv_kerrigan22, false);
    UnitPauseAll(true);
    AITimePause(true);
    libNtve_gf_MakeUnitInvulnerable(gv_kerrigan, true);
    libNtve_gf_MakeUnitInvulnerable(gv_kerrigan2, true);
    libNtve_gf_MakeUnitInvulnerable(gv_kerrigan22, true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(1261), true);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackTownAlly", false);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackTownAlly_Terr", false);
    auto67B9F05B_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionFromId(90), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto67B9F05B_u = UnitGroupCount(auto67B9F05B_g, c_unitCountAll);
    for (;; auto67B9F05B_u -= 1) {
        auto67B9F05B_var = UnitGroupUnitFromEnd(auto67B9F05B_g, auto67B9F05B_u);
        if (auto67B9F05B_var == null) { break; }
        UnitGroupAdd(gv_midCinematicArchangelUmojanGroup, auto67B9F05B_var);
    }
    autoC173A019_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(90), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC173A019_u = UnitGroupCount(autoC173A019_g, c_unitCountAll);
    for (;; autoC173A019_u -= 1) {
        autoC173A019_var = UnitGroupUnitFromEnd(autoC173A019_g, autoC173A019_u);
        if (autoC173A019_var == null) { break; }
        UnitGroupAdd(gv_midCinematicArchangelDominionGroup, autoC173A019_var);
    }
    autoBC540373_g = UnitGroup("HealthDispenser", gv_pLAYER_02_DOMINION2, RegionFromId(90), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBC540373_u = UnitGroupCount(autoBC540373_g, c_unitCountAll);
    for (;; autoBC540373_u -= 1) {
        autoBC540373_var = UnitGroupUnitFromEnd(autoBC540373_g, autoBC540373_u);
        if (autoBC540373_var == null) { break; }
        UnitGroupRemove(gv_midCinematicArchangelUmojanGroup, autoBC540373_var);
    }
    auto2A31284A_g = UnitGroup("HealthDispenserPickup", gv_pLAYER_02_DOMINION2, RegionFromId(90), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2A31284A_u = UnitGroupCount(auto2A31284A_g, c_unitCountAll);
    for (;; auto2A31284A_u -= 1) {
        auto2A31284A_var = UnitGroupUnitFromEnd(auto2A31284A_g, auto2A31284A_u);
        if (auto2A31284A_var == null) { break; }
        UnitGroupRemove(gv_midCinematicArchangelUmojanGroup, auto2A31284A_var);
    }
    UnitGroupRemove(gv_midCinematicArchangelDominionGroup, gv_kerrigan22);
    UnitGroupRemove(gv_midCinematicArchangelUmojanGroup, gv_kerrigan2222);
    UnitSetPropertyFixed(UnitFromId(587), c_unitPropLifePercent, 75.0);
    UnitSetPropertyFixed(UnitFromId(588), c_unitPropLifePercent, 75.0);
    libNtve_gf_PauseUnit(gv_kerrigan, false);
    libNtve_gf_ChangeUnitDamage(gv_kerrigan, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitSetPosition(gv_kerrigan, PointFromId(704), false);
    UnitIssueOrder(gv_kerrigan, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    libNtve_gf_MakeUnitFacePoint(gv_kerrigan, PointFromId(640), 0.0);
    gv_raynorKills = FixedToInt(UnitGetPropertyFixed(gv_kerrigan2, c_unitPropKills, c_unitPropCurrent));
    gf_RemoveIncapforCinematic(gv_kerrigan2);
    UnitRemove(gv_kerrigan2);
    libNtve_gf_CreateUnitsAtPoint2(1, "RaynorLab", 0, gv_pLAYER_02_DOMINION222, PointFromId(705));
    gv_cINEMATIC_RAYNOR = UnitLastCreated();
    libNtve_gf_ChangeUnitDamage(gv_cINEMATIC_RAYNOR, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    UnitSetState(gv_cINEMATIC_RAYNOR, c_unitStateFidget, false);
    UnitSetPropertyFixed(gv_cINEMATIC_RAYNOR, c_unitPropMovementSpeed, 2.0);
    UnitGroupAdd(gv_cinematicTempUnits, gv_cINEMATIC_RAYNOR);
    UnitIssueOrder(gv_cINEMATIC_RAYNOR, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    libNtve_gf_MakeUnitFacePoint(gv_cINEMATIC_RAYNOR, PointFromId(640), 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidSetupArchangel_Init () {
    gt_MidSetupArchangel = TriggerCreate("gt_MidSetupArchangel_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic - Archangel
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematicArchangel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoF7A7D6ED_g;
    int autoF7A7D6ED_u;
    unit autoF7A7D6ED_var;
    unitgroup auto3CCDCB8E_g;
    int auto3CCDCB8E_u;
    unit auto3CCDCB8E_var;
    unitgroup autoDFF81459_g;
    int autoDFF81459_u;
    unit autoDFF81459_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(687), 0.0, -1, 10.0, true);
    libNtve_gf_CreateUnitsAtPoint2(1, "TitanMechFighter", 0, gv_pLAYER_02_DOMINION, PointFromId(727));
    gv_midCinematicArchangel = UnitLastCreated();
    UnitIssueOrder(gv_midCinematicArchangel, Order(AbilityCommand("TitanMechAssaultMode", 0)), c_orderQueueReplace);
    libNtve_gf_SendActorMessageToUnit(gv_midCinematicArchangel, "ClearOpacity 0.000000 FighterMorph");
    TriggerExecute(gt_MidCineArchangelDominionAttack, true, false);
    TriggerExecute(gt_MidCineArchangelUmojanAttack, true, false);
    TriggerExecute(gt_ArchangelMusic, true, false);
    SoundPlay(SoundLink("LostViking_TerraTronBirth", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_midArchangelSound = SoundLastPlayed();
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(688), 1.5, -1, 10.0, true);
    Wait(1.5, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1038), (SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Lab02|Line00117", true), c_soundIndexAny)) - 1.0), -1, 10.0, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicInTransmission);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    libSwaC_gf_SendTransmissionCampaign(gv_midCinematicArchangel, "zMission_Lab02|Line00117", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(1.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(689), 0.0, 0.0, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1192), (SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Lab02|Line00116", true), c_soundIndexAny)) - 0.0), -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Lab02|Line00116", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(0.5, c_timeReal);
    UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(1688)), c_orderQueueReplace);
    TransmissionWait(TransmissionLastSent(), 1.0);
    UnitCreate(1, "Marine", 0, gv_pLAYER_01_USER, PointFromId(1191), 270.0);
    UnitGroupAdd(gv_midCinematicArchangelDominionGroup, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(756)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), gv_cINEMATIC_RAYNOR), c_orderQueueAddToEnd);
    UnitSetTeamColorIndex(UnitLastCreated(), 1);
    TriggerExecute(gt_MidCineArchangelBarrage, true, false);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicOutofTransmission);
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1193), 4.0, -1, 10.0, true);
    UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(690)), c_orderQueueReplace);
    Wait(0.25, c_timeReal);
    UnitIssueOrder(gv_cINEMATIC_RAYNOR, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(713)), c_orderQueueReplace);
    Wait(0.5, c_timeReal);
    UnitIssueOrder(gv_cINEMATIC_RAYNOR, OrderTargetingUnit(AbilityCommand("attack", 0), UnitLastCreated()), c_orderQueueAddToFront);
    UnitIssueOrder(gv_midCinematicArchangel, OrderTargetingPoint(AbilityCommand("TitanMechMissileShot", 0), PointFromId(640)), c_orderQueueReplace);
    while (!((libNtve_gf_UnitInRegion(gv_kerrigan, RegionFromId(101)) == true))) {
        Wait(0.1, c_timeGame);
    }
    TriggerExecute(gt_MidCineArchangelBridgeBlowsUp, true, false);
    Wait(0.2, c_timeReal);
    UnitIssueOrder(gv_kerrigan, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_kerrigan, OrderTargetingUnit(AbilityCommand("move", 4), gv_kerrigan2), c_orderQueueReplace);
    UnitIssueOrder(gv_kerrigan, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicInTransmission);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    Wait(0.25, c_timeReal);
    UnitIssueOrder(gv_cINEMATIC_RAYNOR, OrderTargetingUnit(AbilityCommand("move", 4), gv_kerrigan), c_orderQueueReplace);
    Wait(0.25, c_timeReal);
    UnitIssueOrder(gv_cINEMATIC_RAYNOR, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(713)), c_orderQueueReplace);
    UnitIssueOrder(gv_cINEMATIC_RAYNOR, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    UnitKill(UnitLastCreated());
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1194), 0.7, -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Lab02|Line00118", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(714)), c_orderQueueReplace);
    UnitIssueOrder(gv_kerrigan, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    libSwaC_gf_SendTransmissionCampaign(gv_cINEMATIC_RAYNOR, "zMission_Lab02|Line00119", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_LeavePortraitVisibleAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    autoF7A7D6ED_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(96), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF7A7D6ED_u = UnitGroupCount(autoF7A7D6ED_g, c_unitCountAll);
    for (;; autoF7A7D6ED_u -= 1) {
        autoF7A7D6ED_var = UnitGroupUnitFromEnd(autoF7A7D6ED_g, autoF7A7D6ED_u);
        if (autoF7A7D6ED_var == null) { break; }
        UnitRemove(autoF7A7D6ED_var);
    }
    auto3CCDCB8E_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionFromId(96), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3CCDCB8E_u = UnitGroupCount(auto3CCDCB8E_g, c_unitCountAll);
    for (;; auto3CCDCB8E_u -= 1) {
        auto3CCDCB8E_var = UnitGroupUnitFromEnd(auto3CCDCB8E_g, auto3CCDCB8E_u);
        if (auto3CCDCB8E_var == null) { break; }
        UnitRemove(auto3CCDCB8E_var);
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "WarPig", 0, gv_pLAYER_02_DOMINION2, PointFromId(369));
    UnitGroupAdd(gv_midCinematicMarineGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "WarPig", 0, gv_pLAYER_02_DOMINION2, PointFromId(394));
    UnitGroupAdd(gv_midCinematicMarineGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "WarPig", 0, gv_pLAYER_02_DOMINION2, PointFromId(908));
    UnitGroupAdd(gv_midCinematicMarineGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "WarPig", 0, gv_pLAYER_02_DOMINION2, PointFromId(909));
    UnitGroupAdd(gv_midCinematicMarineGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "WarPig", 0, gv_pLAYER_02_DOMINION2, PointFromId(910));
    UnitGroupAdd(gv_midCinematicMarineGroup, UnitLastCreated());
    autoDFF81459_g = gv_midCinematicMarineGroup;
    autoDFF81459_u = UnitGroupCount(autoDFF81459_g, c_unitCountAll);
    for (;; autoDFF81459_u -= 1) {
        autoDFF81459_var = UnitGroupUnitFromEnd(autoDFF81459_g, autoDFF81459_u);
        if (autoDFF81459_var == null) { break; }
        libNtve_gf_ChangeUnitDamage(autoDFF81459_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "VikingAssault", 0, gv_pLAYER_02_DOMINION, PointFromId(1204));
    UnitGroupAdd(gv_midCinematicArchangelDominionGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "VikingAssault", 0, gv_pLAYER_02_DOMINION, PointFromId(1205));
    UnitGroupAdd(gv_midCinematicArchangelDominionGroup, UnitLastCreated());
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1196), 0.0, -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Lab02|Line00120", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    UnitIssueOrder(gv_cINEMATIC_RAYNOR, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(715)), c_orderQueueReplace);
    Wait(2.0, c_timeReal);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1034), SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Lab02|Line00120", true), c_soundIndexAny)), -1, 10.0, true);
    UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(718)), c_orderQueueReplace);
    UnitIssueOrder(gv_kerrigan, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(2.0, c_timeReal);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematicArchangel_Init () {
    gt_MidCinematicArchangel = TriggerCreate("gt_MidCinematicArchangel_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic End - Archangel
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematicEndArchangel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematicEndArchangel_Init () {
    gt_MidCinematicEndArchangel = TriggerCreate("gt_MidCinematicEndArchangel_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cleanup - Archangel
//--------------------------------------------------------------------------------------------------
bool gt_MidCleanupArchangel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup autoB3A626F9_g;
    int autoB3A626F9_u;
    unit autoB3A626F9_var;
    unitgroup autoE28DF43D_g;
    int autoE28DF43D_u;
    unit autoE28DF43D_var;
    unitgroup auto9AEFB252_g;
    int auto9AEFB252_u;
    unit auto9AEFB252_var;
    unitgroup autoE3764186_g;
    int autoE3764186_u;
    unit autoE3764186_var;
    unitgroup auto880E32AA_g;
    int auto880E32AA_u;
    unit auto880E32AA_var;
    unitgroup auto8EDA46F7_g;
    int auto8EDA46F7_u;
    unit auto8EDA46F7_var;
    unitgroup autoE75BE718_g;
    int autoE75BE718_u;
    unit autoE75BE718_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoB3A626F9_g = gv_cinematicTempUnits;
    autoB3A626F9_u = UnitGroupCount(autoB3A626F9_g, c_unitCountAll);
    for (;; autoB3A626F9_u -= 1) {
        autoB3A626F9_var = UnitGroupUnitFromEnd(autoB3A626F9_g, autoB3A626F9_u);
        if (autoB3A626F9_var == null) { break; }
        UnitRemove(autoB3A626F9_var);
    }
    UnitPauseAll(false);
    AITimePause(false);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    CameraSetData(PlayerGroupSingle(gv_pLAYER_01_USER), "LabHeroCamera");
    UnitSelect(gv_kerrigan, gv_pLAYER_01_USER, true);
    SoundStop(gv_midArchangelSound, true);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(64), false);
    ObjectiveShow(gv_objectiveDestroyDominionBase2222, PlayerGroupAll(), false);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION222, libNtve_ge_AllianceSetting_Neutral);
    TriggerEnable(gt_HeroIncapacitated, false);
    TriggerEnable(gt_RecoverIncapacitatedHeroes, false);
    autoE28DF43D_g = gv_midCinematicArchangelDominionGroup;
    autoE28DF43D_u = UnitGroupCount(autoE28DF43D_g, c_unitCountAll);
    for (;; autoE28DF43D_u -= 1) {
        autoE28DF43D_var = UnitGroupUnitFromEnd(autoE28DF43D_g, autoE28DF43D_u);
        if (autoE28DF43D_var == null) { break; }
        UnitRemove(autoE28DF43D_var);
    }
    auto9AEFB252_g = gv_midCinematicArchangelUmojanGroup;
    auto9AEFB252_u = UnitGroupCount(auto9AEFB252_g, c_unitCountAll);
    for (;; auto9AEFB252_u -= 1) {
        auto9AEFB252_var = UnitGroupUnitFromEnd(auto9AEFB252_g, auto9AEFB252_u);
        if (auto9AEFB252_var == null) { break; }
        UnitRemove(auto9AEFB252_var);
    }
    if ((gv_cinematicCompleted == false)) {
        UnitKill(UnitFromId(1261));
        UnitRemove(gv_midCinematicArchangel);
        libNtve_gf_ShowHideUnit(gv_kerrigan22, true);
        libNtve_gf_MakeUnitInvulnerable(gv_kerrigan22, false);
        auto8EDA46F7_g = gv_midCinematicMarineGroup;
        auto8EDA46F7_u = UnitGroupCount(auto8EDA46F7_g, c_unitCountAll);
        for (;; auto8EDA46F7_u -= 1) {
            auto8EDA46F7_var = UnitGroupUnitFromEnd(auto8EDA46F7_g, auto8EDA46F7_u);
            if (auto8EDA46F7_var == null) { break; }
            UnitRemove(auto8EDA46F7_var);
        }
        autoE75BE718_g = gv_s4_UmojanArchangelGroup;
        autoE75BE718_u = UnitGroupCount(autoE75BE718_g, c_unitCountAll);
        for (;; autoE75BE718_u -= 1) {
            autoE75BE718_var = UnitGroupUnitFromEnd(autoE75BE718_g, autoE75BE718_u);
            if (autoE75BE718_var == null) { break; }
            libNtve_gf_ShowHideUnit(autoE75BE718_var, true);
        }
        UnitSetPropertyFixed(UnitGroupUnit(gv_s4_UmojanArchangelGroup, 3), c_unitPropLife, 55.0);
        UnitSetPropertyFixed(UnitGroupUnit(gv_s4_UmojanArchangelGroup, 5), c_unitPropLife, 45.0);
        UnitSetPosition(gv_kerrigan, PointFromId(718), false);
        UnitIssueOrder(gv_kerrigan, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(708)), c_orderQueueAddToEnd);
    }
    else {
        UnitRemove(gv_kerrigan22);
        gv_kerrigan22 = gv_midCinematicArchangel;
        libNtve_gf_MakeUnitInvulnerable(gv_kerrigan22, false);
        UnitSetPropertyFixed(gv_kerrigan22, c_unitPropLifeMax, gv_s4_Archangel_MAX_HEALTH);
        UnitSetPropertyFixed(gv_kerrigan22, c_unitPropLifePercent, 100.0);
        autoE3764186_g = gv_s4_UmojanArchangelGroup;
        autoE3764186_u = UnitGroupCount(autoE3764186_g, c_unitCountAll);
        for (;; autoE3764186_u -= 1) {
            autoE3764186_var = UnitGroupUnitFromEnd(autoE3764186_g, autoE3764186_u);
            if (autoE3764186_var == null) { break; }
            UnitRemove(autoE3764186_var);
        }
        auto880E32AA_g = gv_midCinematicMarineGroup;
        auto880E32AA_u = UnitGroupCount(auto880E32AA_g, c_unitCountAll);
        for (;; auto880E32AA_u -= 1) {
            auto880E32AA_var = UnitGroupUnitFromEnd(auto880E32AA_g, auto880E32AA_u);
            if (auto880E32AA_var == null) { break; }
            UnitGroupAdd(gv_s4_UmojanArchangelGroup, auto880E32AA_var);
            UnitSetPropertyFixed(auto880E32AA_var, c_unitPropLifePercent, 100.0);
            libNtve_gf_ChangeUnitDamage(auto880E32AA_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
        }
        UnitSetPropertyFixed(UnitGroupUnit(gv_s4_UmojanArchangelGroup, 3), c_unitPropLife, 55.0);
        UnitSetPropertyFixed(UnitGroupUnit(gv_s4_UmojanArchangelGroup, 5), c_unitPropLife, 45.0);
    }
    libNtve_gf_ChangeUnitDamage(gv_kerrigan, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    libNtve_gf_MakeUnitInvulnerable(gv_kerrigan, false);
    UnitBehaviorRemovePlayer(gv_kerrigan, "HeroDeathPrevention", gv_pLAYER_01_USER, 1);
    UnitSetPropertyFixed(gv_kerrigan, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_kerrigan, c_unitPropEnergyPercent, 100.0);
    UnitAbilityReset(gv_kerrigan, AbilityCommand("PsionicLift", 0), c_spendLocationAll);
    UnitAbilityReset(gv_kerrigan, AbilityCommand("MindBolt", 0), c_spendLocationAll);
    UIAlertClear(gv_pLAYER_01_USER);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(39));
    VisRevealerEnable(VisRevealerLastCreated(), true);
    Wait(0.1, c_timeGame);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), lv_fadeDuration, -1, 10.0, false);
        CameraSetValue(gv_pLAYER_01_USER, c_cameraValueDistance, 30.0, lv_fadeDuration, -1, 10.0);
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
        libNtve_gf_GlobalCinematicSetting(false);
        gv_inCinematic = false;
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
        Wait(lv_fadeDuration, c_timeGame);
    }
    else {
        lv_fadeDuration = 1.0;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10.0, false);
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
        libNtve_gf_GlobalCinematicSetting(false);
        gv_inCinematic = false;
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
        libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, (30.0 + 8.0), 30.0, PointFromId(719), lv_fadeDuration);
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    TriggerExecute(gt_AfterArchangelCinematicIntroQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCleanupArchangel_Init () {
    gt_MidCleanupArchangel = TriggerCreate("gt_MidCleanupArchangel_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cine - Archangel - Dominion Attack
//--------------------------------------------------------------------------------------------------
bool gt_MidCineArchangelDominionAttack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dropship01;
    unit lv_dropship02;

    // Automatic Variable Declarations
    unitgroup autoDAF574F1_g;
    int autoDAF574F1_u;
    unit autoDAF574F1_var;
    unitgroup autoEAD11066_g;
    int autoEAD11066_u;
    unit autoEAD11066_var;
    unitgroup autoED72B1FF_g;
    int autoED72B1FF_u;
    unit autoED72B1FF_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_PauseUnit(UnitFromId(731), false);
    libNtve_gf_PauseUnit(UnitFromId(569), false);
    UnitIssueOrder(UnitFromId(731), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(729)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(731), Order(AbilityCommand("SiegeMode", 0)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(569), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(709)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(569), Order(AbilityCommand("SiegeMode", 0)), c_orderQueueAddToEnd);
    libNtve_gf_UnitCreateFacingPoint(1, "Medivac", 0, gv_pLAYER_02_DOMINION, PointFromId(710), PointFromId(527));
    lv_dropship01 = UnitLastCreated();
    UnitGroupAdd(gv_midCinematicArchangelDominionGroup, lv_dropship01);
    UnitSetPropertyFixed(lv_dropship01, c_unitPropEnergyPercent, 100.0);
    UnitCargoCreate(lv_dropship01, "Marine", 4);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitCargoLastCreatedGroup(), gv_midCinematicArchangelDominionGroup);
    libLbty_gf_OrderTransporttoUnloadAllthenDespawn(lv_dropship01, PointFromId(608), PointFromId(710));
    libNtve_gf_UnitCreateFacingPoint(1, "Medivac", 0, gv_pLAYER_02_DOMINION, PointFromId(616), PointFromId(527));
    lv_dropship02 = UnitLastCreated();
    UnitGroupAdd(gv_midCinematicArchangelDominionGroup, lv_dropship02);
    UnitSetPropertyFixed(lv_dropship02, c_unitPropEnergyPercent, 100.0);
    UnitCargoCreate(lv_dropship02, "Marine", 3);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitCargoLastCreatedGroup(), gv_midCinematicArchangelDominionGroup);
    UnitCargoCreate(lv_dropship02, "Ghost", 1);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitCargoLastCreatedGroup(), gv_midCinematicArchangelDominionGroup);
    libLbty_gf_OrderTransporttoUnloadAllthenDespawn(lv_dropship02, PointFromId(615), PointFromId(616));
    autoDAF574F1_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(86), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDAF574F1_u = UnitGroupCount(autoDAF574F1_g, c_unitCountAll);
    for (;; autoDAF574F1_u -= 1) {
        autoDAF574F1_var = UnitGroupUnitFromEnd(autoDAF574F1_g, autoDAF574F1_u);
        if (autoDAF574F1_var == null) { break; }
        libNtve_gf_PauseUnit(autoDAF574F1_var, false);
        UnitIssueOrder(autoDAF574F1_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(741)), c_orderQueueAddToEnd);
    }
    autoEAD11066_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(87), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEAD11066_u = UnitGroupCount(autoEAD11066_g, c_unitCountAll);
    for (;; autoEAD11066_u -= 1) {
        autoEAD11066_var = UnitGroupUnitFromEnd(autoEAD11066_g, autoEAD11066_u);
        if (autoEAD11066_var == null) { break; }
        libNtve_gf_PauseUnit(autoEAD11066_var, false);
        UnitIssueOrder(autoEAD11066_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(741)), c_orderQueueAddToEnd);
    }
    autoED72B1FF_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(88), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoED72B1FF_u = UnitGroupCount(autoED72B1FF_g, c_unitCountAll);
    for (;; autoED72B1FF_u -= 1) {
        autoED72B1FF_var = UnitGroupUnitFromEnd(autoED72B1FF_g, autoED72B1FF_u);
        if (autoED72B1FF_var == null) { break; }
        libNtve_gf_PauseUnit(autoED72B1FF_var, false);
        UnitIssueOrder(autoED72B1FF_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(741)), c_orderQueueAddToEnd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCineArchangelDominionAttack_Init () {
    gt_MidCineArchangelDominionAttack = TriggerCreate("gt_MidCineArchangelDominionAttack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cine - Archangel - Barrage
//--------------------------------------------------------------------------------------------------
bool gt_MidCineArchangelBarrage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto6373E11A_ae;
    int auto6373E11A_var;
    int autoEEA4CBCA_ae;
    int autoEEA4CBCA_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_s4_ArchangelBarrageCount = 0;
    UnitIssueOrder(gv_midCinematicArchangel, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(708)), c_orderQueueReplace);
    gv_s4_ArchangelBarrageCount += 1;
    gv_s4_ArchangelBarrages[gv_s4_ArchangelBarrageCount] = PointFromId(895);
    gv_s4_ArchangelBarrageCount += 1;
    gv_s4_ArchangelBarrages[gv_s4_ArchangelBarrageCount] = PointFromId(896);
    gv_s4_ArchangelBarrageCount += 1;
    gv_s4_ArchangelBarrages[gv_s4_ArchangelBarrageCount] = PointFromId(897);
    gv_s4_ArchangelBarrageCount += 1;
    gv_s4_ArchangelBarrages[gv_s4_ArchangelBarrageCount] = PointFromId(898);
    gv_s4_ArchangelBarrageCount += 1;
    gv_s4_ArchangelBarrages[gv_s4_ArchangelBarrageCount] = PointFromId(899);
    gv_s4_ArchangelBarrageCount += 1;
    gv_s4_ArchangelBarrages[gv_s4_ArchangelBarrageCount] = PointFromId(900);
    gf_ShuffleBarrageLocations();
    auto6373E11A_ae = gv_s4_ArchangelBarrageCount;
    auto6373E11A_var = 1;
    for ( ; auto6373E11A_var <= auto6373E11A_ae; auto6373E11A_var += 1 ) {
        gf_MidCineArchangelDoMissileBarrage(gv_s4_ArchangelBarrages[auto6373E11A_var]);
    }
    Wait(1.5, c_timeGame);
    gf_ShuffleBarrageLocations();
    autoEEA4CBCA_ae = gv_s4_ArchangelBarrageCount;
    autoEEA4CBCA_var = 1;
    for ( ; autoEEA4CBCA_var <= autoEEA4CBCA_ae; autoEEA4CBCA_var += 1 ) {
        gf_MidCineArchangelDoMissileBarrage(gv_s4_ArchangelBarrages[autoEEA4CBCA_var]);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCineArchangelBarrage_Init () {
    gt_MidCineArchangelBarrage = TriggerCreate("gt_MidCineArchangelBarrage_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cine - Archangel - Umojan Attack
//--------------------------------------------------------------------------------------------------
bool gt_MidCineArchangelUmojanAttack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto790D7480_g;
    int auto790D7480_u;
    unit auto790D7480_var;
    unitgroup auto187C7A41_g;
    int auto187C7A41_u;
    unit auto187C7A41_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_PauseUnit(UnitFromId(587), false);
    libNtve_gf_PauseUnit(UnitFromId(588), false);
    libNtve_gf_PauseUnit(UnitFromId(587), false);
    libNtve_gf_PauseUnit(UnitFromId(716), false);
    libNtve_gf_PauseUnit(UnitFromId(618), false);
    UnitGroupAdd(gv_midCinematicArchangelUmojanGroup, UnitFromId(716));
    UnitGroupAdd(gv_midCinematicArchangelUmojanGroup, UnitFromId(618));
    libNtve_gf_PauseUnit(UnitFromId(739), false);
    libNtve_gf_PauseUnit(UnitFromId(738), false);
    libNtve_gf_PauseUnit(UnitFromId(740), false);
    UnitIssueOrder(UnitFromId(739), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(817)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(739), Order(AbilityCommand("WreckingCrewAssaultMode", 0)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(738), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(815)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(738), Order(AbilityCommand("WreckingCrewAssaultMode", 0)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(738), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(731)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(740), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(816)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(740), Order(AbilityCommand("WreckingCrewAssaultMode", 0)), c_orderQueueAddToEnd);
    UnitGroupAdd(gv_midCinematicArchangelUmojanGroup, UnitFromId(739));
    UnitGroupAdd(gv_midCinematicArchangelUmojanGroup, UnitFromId(738));
    UnitGroupAdd(gv_midCinematicArchangelUmojanGroup, UnitFromId(740));
    auto790D7480_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionFromId(91), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto790D7480_u = UnitGroupCount(auto790D7480_g, c_unitCountAll);
    for (;; auto790D7480_u -= 1) {
        auto790D7480_var = UnitGroupUnitFromEnd(auto790D7480_g, auto790D7480_u);
        if (auto790D7480_var == null) { break; }
        libNtve_gf_PauseUnit(auto790D7480_var, false);
        UnitGroupAdd(gv_midCinematicArchangelUmojanGroup, auto790D7480_var);
        UnitIssueOrder(auto790D7480_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(708)), c_orderQueueAddToEnd);
    }
    auto187C7A41_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionFromId(89), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto187C7A41_u = UnitGroupCount(auto187C7A41_g, c_unitCountAll);
    for (;; auto187C7A41_u -= 1) {
        auto187C7A41_var = UnitGroupUnitFromEnd(auto187C7A41_g, auto187C7A41_u);
        if (auto187C7A41_var == null) { break; }
        libNtve_gf_PauseUnit(auto187C7A41_var, false);
        UnitGroupAdd(gv_midCinematicArchangelUmojanGroup, auto187C7A41_var);
        UnitIssueOrder(auto187C7A41_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(734)), c_orderQueueReplace);
        UnitIssueOrder(auto187C7A41_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(708)), c_orderQueueAddToEnd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCineArchangelUmojanAttack_Init () {
    gt_MidCineArchangelUmojanAttack = TriggerCreate("gt_MidCineArchangelUmojanAttack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cine - Archangel - Bridge Blows Up
//--------------------------------------------------------------------------------------------------
bool gt_MidCineArchangelBridgeBlowsUp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto315176CC_n = 10;
    int auto315176CC_i;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(1261), false);
    CameraShake(gv_pLAYER_01_USER, "Heavy", "Earthquake", 0.5, 0.5, 3.0);
    UnitKill(UnitFromId(716));
    UnitKill(UnitFromId(618));
    for (auto315176CC_i = 1; auto315176CC_i <= auto315176CC_n; auto315176CC_i += 1) {
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, RegionRandomPoint(RegionCircle(UnitGetPosition(UnitFromId(1261)), 2.0)));
        Wait(0.2, c_timeGame);
    }
    UnitKill(UnitFromId(1261));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCineArchangelBridgeBlowsUp_Init () {
    gt_MidCineArchangelBridgeBlowsUp = TriggerCreate("gt_MidCineArchangelBridgeBlowsUp_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoCBC77195_g;
    int autoCBC77195_u;
    unit autoCBC77195_var;
    unitgroup auto62BB9853_g;
    int auto62BB9853_u;
    unit auto62BB9853_var;
    unitgroup autoB95896A2_g;
    int autoB95896A2_u;
    unit autoB95896A2_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UnitClearSelection(gv_pLAYER_01_USER);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    RegionPlayableMapSet(RegionFromId(60));
    UnitPauseAll(true);
    AITimePause(true);
    autoCBC77195_g = UnitGroup(null, c_playerAny, RegionFromId(60), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoCBC77195_u = UnitGroupCount(autoCBC77195_g, c_unitCountAll);
    for (;; autoCBC77195_u -= 1) {
        autoCBC77195_var = UnitGroupUnitFromEnd(autoCBC77195_g, autoCBC77195_u);
        if (autoCBC77195_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoCBC77195_var, true);
        libNtve_gf_PauseUnit(autoCBC77195_var, false);
    }
    UnitRemove(gv_kerrigan2);
    libNtve_gf_CreateUnitsAtPoint2(1, "RaynorLab", 0, gv_pLAYER_02_DOMINION222, PointFromId(758));
    gv_cINEMATIC_RAYNOR = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, gv_cINEMATIC_RAYNOR);
    UnitSetState(gv_cINEMATIC_RAYNOR, c_unitStateFidget, false);
    UnitSetState(gv_cINEMATIC_RAYNOR, c_unitStateInvulnerable, true);
    UnitSetPropertyFixed(gv_cINEMATIC_RAYNOR, c_unitPropMovementSpeed, 2.0);
    UnitIssueOrder(gv_cINEMATIC_RAYNOR, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    libNtve_gf_MakeUnitFacePoint(gv_cINEMATIC_RAYNOR, PointFromId(640), 0.0);
    libNtve_gf_PauseUnit(UnitFromId(693), false);
    libNtve_gf_PauseUnit(gv_kerrigan2222, false);
    libNtve_gf_PauseUnit(gv_kerrigan, false);
    UnitSetState(gv_kerrigan, c_unitStateFidget, false);
    libNtve_gf_PauseUnit(gv_kerrigan222, false);
    UnitBehaviorAddPlayer(gv_kerrigan222, "SuppressCloak", gv_pLAYER_02_DOMINION, 1);
    libNtve_gf_ChangeUnitDamage(gv_kerrigan222, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitSetState(gv_kerrigan222, c_unitStateFidget, false);
    UnitSetState(gv_kerrigan222, c_unitStateInvulnerable, true);
    auto62BB9853_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionFromId(90), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto62BB9853_u = UnitGroupCount(auto62BB9853_g, c_unitCountAll);
    for (;; auto62BB9853_u -= 1) {
        auto62BB9853_var = UnitGroupUnitFromEnd(auto62BB9853_g, auto62BB9853_u);
        if (auto62BB9853_var == null) { break; }
        if ((UnitGetType(auto62BB9853_var) != "HealerBot")) {
            UnitRemove(auto62BB9853_var);
        }

    }
    autoB95896A2_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(90), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB95896A2_u = UnitGroupCount(autoB95896A2_g, c_unitCountAll);
    for (;; autoB95896A2_u -= 1) {
        autoB95896A2_var = UnitGroupUnitFromEnd(autoB95896A2_g, autoB95896A2_u);
        if (autoB95896A2_var == null) { break; }
        UnitRemove(autoB95896A2_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_dropPodGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dropPodGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(753), 0.0, -1, 10.0, true);
    libNtve_gf_ChangeUnitDamage(gv_kerrigan, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitIssueOrder(UnitFromId(693), Order(AbilityCommand("UmojanLabDoorsRightLowered", 0)), c_orderQueueReplace);
    UnitSetPosition(gv_kerrigan, PointFromId(752), false);
    UnitIssueOrder(gv_kerrigan, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_kerrigan, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitSetFacing(gv_kerrigan, 260.0, 0.0);
    UnitSetPosition(gv_kerrigan222, PointFromId(757), false);
    libNtve_gf_RemoveDeathModelsinRegionImmediately(RegionFromId(60));
    TriggerExecute(gt_VictoryMusic, true, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(754), (SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Lab02|Line00126", true), c_soundIndexAny)) - 1.0), -1, 10.0, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicInTransmission);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Lab02|Line00126", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(755), 0.0, -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(gv_cINEMATIC_RAYNOR, "zMission_Lab02|Line00127", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_LeavePortraitVisibleAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(1.0, c_timeReal);
    UnitIssueOrder(gv_cINEMATIC_RAYNOR, OrderTargetingUnit(AbilityCommand("move", 4), gv_kerrigan), c_orderQueueReplace);
    TransmissionWait(TransmissionLastSent(), 0.0);
    UnitSetFacing(gv_kerrigan, 225.0, 0.0);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Lab02|Line00128", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(0.25, c_timeReal);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1234), 0.0, -1, 10.0, true);
    UnitIssueOrder(gv_cINEMATIC_RAYNOR, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(759)), c_orderQueueReplace);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab02|Line00186", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(755), 0.0, -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(gv_cINEMATIC_RAYNOR, "zMission_Lab02|Line00187", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab02|Line00188", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1234), 0.0, -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(gv_cINEMATIC_KERRIGAN, "zMission_Lab02|Line00193", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab02|Line00189", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait((SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Lab02|Line00189", true), c_soundIndexAny)) / 3.0), c_timeReal);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1200), 3.0, -1, 10.0, true);
    UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1198)), c_orderQueueReplace);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Lab02|Line00132", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_LeavePortraitVisibleAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(0.5, c_timeReal);
    UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(708)), c_orderQueueReplace);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SendTransmissionCampaign(gv_cINEMATIC_RAYNOR, "zMission_Lab02|Line00133", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicOutofTransmission);
    UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(gv_kerrigan2222)), c_orderQueueAddToEnd);
    Wait(0.5, c_timeReal);
    SoundPlay(SoundLink("Medivac_Load", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_victoryLoadSound = SoundLastPlayed();
    UnitSetHeight(gv_kerrigan2222, 6.0, 3.0);
    libNtve_gf_ShowHideUnit(gv_kerrigan, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1689), 2.0, -1, 10.0, true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_kerrigan2222), c_animNameDefault, "Stand Morph End", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(2.0, c_timeGame);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZLab02MusicOutro_NovaCatchesRaynor", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(755), 0.0, -1, 10.0, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicInTransmission);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab02|Line00190", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_cINEMATIC_RAYNOR, "zMission_Lab02|Line00191", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab02|Line00192", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicOutofTransmission);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1201), 2.0, -1, 10.0, true);
    UnitKill(UnitFromId(673));
    CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 0.5, 0.5, 2.0);
    Wait(0.5, c_timeReal);
    UnitIssueOrder(gv_cINEMATIC_RAYNOR, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(1202)), c_orderQueueReplace);
    Wait(0.5, c_timeReal);
    UnitIssueOrder(gv_cINEMATIC_RAYNOR, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1202)), c_orderQueueReplace);
    UnitIssueOrder(gv_kerrigan222, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1203)), c_orderQueueReplace);
    Wait(2.0, c_timeReal);
    UnitIssueOrder(gv_kerrigan222, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    libNtve_gf_MakeUnitFacePoint(gv_kerrigan222, UnitGetPosition(gv_cINEMATIC_RAYNOR), 1.0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicInTransmission);
    libSwaC_gf_SendTransmissionCampaign(gv_cINEMATIC_RAYNOR, "zMission_Lab02|Line00134", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1207), 3.0, -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan222, "zMission_Lab02|Line00135", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan222, "zMission_Lab02|Line00136", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_cINEMATIC_RAYNOR, "zMission_Lab02|Line00173", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicOutofTransmission);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuratioin;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuratioin = 2.0;
        CinematicFade(false, lv_fadeDuratioin, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
        SoundPlay(SoundLink("FX_Lab02_PartingShot", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(1.0, c_timeReal);
    }
    else {
        lv_fadeDuratioin = 0.5;
        CinematicFade(false, lv_fadeDuratioin, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitPauseAll(true);
    TriggerStop(gt_VictoryMusic);
    SoundStop(gv_victoryLoadSound, true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZLabMusicScoreScreen", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Music
//--------------------------------------------------------------------------------------------------
bool gt_VictoryMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_soundtrack = "ZLab02MusicCutscene30_ArchangelDefeated";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryMusic_Init () {
    gt_VictoryMusic = TriggerCreate("gt_VictoryMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic Drop Pods
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicDropPods_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_dropPodGroup01;
    unitgroup lv_dropPodGroup02;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dropPodGroup01 = UnitGroupEmpty();
    lv_dropPodGroup02 = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_UnitCreateFacingPoint(3, "Marine", 0, gv_pLAYER_02_DOMINION, PointFromId(167), PointFromId(608));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_dropPodGroup01);
    libNtve_gf_UnitCreateFacingPoint(1, "Ghost", 0, gv_pLAYER_02_DOMINION, PointFromId(167), PointFromId(608));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_dropPodGroup01);
    libSwaC_gf_CreateDropPod(libSwaC_ge_DropPodRace_Terran, PointFromId(781), lv_dropPodGroup01, true, gv_pLAYER_02_DOMINION);
    libNtve_gf_UnitCreateFacingPoint(2, "Marine", 0, gv_pLAYER_02_DOMINION, PointFromId(167), PointFromId(608));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_dropPodGroup02);
    libNtve_gf_UnitCreateFacingPoint(2, "Ghost", 0, gv_pLAYER_02_DOMINION, PointFromId(167), PointFromId(608));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_dropPodGroup02);
    libSwaC_gf_CreateDropPod(libSwaC_ge_DropPodRace_Terran, PointFromId(782), lv_dropPodGroup02, true, gv_pLAYER_02_DOMINION);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicDropPods_Init () {
    gt_VictoryCinematicDropPods = TriggerCreate("gt_VictoryCinematicDropPods_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04MusicSound_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_DEBUGStartS02_Init();
    gt_DEBUGStartS03_Init();
    gt_DEBUGStartS04_Init();
    gt_DEBUGStartArchangelBossFight_Init();
    gt_StartGameStage1Q_Init();
    gt_StartGameStage2Q_Init();
    gt_StartGameStage3Q_Init();
    gt_StartGameStage4Q_Init();
    gt_LowHealthRaynor_Init();
    gt_LowHealthKerrigan_Init();
    gt_TransmissionRaynorIsHurtQ_Init();
    gt_TransmissionKerriganIsHurt_Init();
    gt_HeroIncapacitated_Init();
    gt_RecoverIncapacitatedHeroes_Init();
    gt_ButtonFlashCrushingGripOn_Init();
    gt_ButtonFlashCrushingGripOff_Init();
    gt_ButtonFlashKineticBlastOn_Init();
    gt_ButtonFlashKineticBlastOff_Init();
    gt_KerriganSeeThroughDoors_Init();
    gt_HealerbotRecharging_Init();
    gt_HealerbotReady_Init();
    gt_HealerbotMouseoverTip_Init();
    gt_TransmissionIntroQ_Init();
    gt_TransmissionIdleChatterQ_Init();
    gt_KerriganMovesTurnoffChatter_Init();
    gt_FirstDominionEncounterQ_Init();
    gt_FirstKineticBlastUsed_Init();
    gt_FirstMarauderEngaged_Init();
    gt_FirstMarauderKilled_Init();
    gt_FirstDoorAttackQ_Init();
    gt_DeadEnd01Q_Init();
    gt_SeeSecondGateQ_Init();
    gt_TransmissionUmojanMarines_Init();
    gt_SecondGateAttack_Init();
    gt_DeadEnd02Q_Init();
    gt_ReachedRestorationTerminalQ_Init();
    gt_PlayerEntersHealingTerminal01Q_Init();
    gt_DeadEnd03Q_Init();
    gt_TeachCrushingGripQ_Init();
    gt_FirstCrushingGripUsed_Init();
    gt_MakeBridgeBattleForcesTakeDamage_Init();
    gt_BridgeDominionUnitDies_Init();
    gt_DominionBridgeForcesDeadQ_Init();
    gt_UmojanBridgeForcesDead_Init();
    gt_UmojanFleeBridgeArea_Init();
    gt_RemoveUmojanAtExtractionPoint01_Init();
    gt_ReachedDropPodPlatformQ_Init();
    gt_DropPodCrashing01_Init();
    gt_DropPodLanding01_Init();
    gt_WhereAreUmojansGoingQ_Init();
    gt_DropPodLanding02_Init();
    gt_DropPodCrashing02_Init();
    gt_DropPodLanding03_Init();
    gt_ReachedSublevelDoorAreaQ_Init();
    gt_MoveUmojantoDefensivePositions_Init();
    gt_ActivateSublevelDoorQ_Init();
    gt_OpenSublevelDoorZergAttack_Init();
    gt_TransmissionUmojanAtSublevelDoorQ_Init();
    gt_ZergStreamfromSublevel_Init();
    gt_ZergStreamfromSublevelHard_Init();
    gt_DominionAttackGate03Hard_Init();
    gt_TransmissionDominionAttackGate03Q_Init();
    gt_SublevelDoorSecured_Init();
    gt_HoldoutMusic_Init();
    gt_GateCloses_Init();
    gt_ShowFirstObjective_Init();
    gt_StartFirstLockdownTimer_Init();
    gt_TransmissionBeforeLockdownTimerQ_Init();
    gt_TransmissionLockdown01ReminderQ_Init();
    gt_ActivateZergRampAttack01_Init();
    gt_ActivateZergRampAttack02_Init();
    gt_ActivateZergPenAttack01_Init();
    gt_SaveScientistsfromThreat_Init();
    gt_RaynorKerriganBanter01Q_Init();
    gt_ForceRaynorThroughDoor01_Init();
    gt_GotThroughLockdownDoor01_Init();
    gt_TransmissionGotThroughLockdownDoor01Q_Init();
    gt_StartSecondLockdownTimer_Init();
    gt_SecondLockdownStartedQ_Init();
    gt_RaynorKerriganBanter02Q_Init();
    gt_ScientistChased01_Init();
    gt_UltraliskAttackRubbleQ_Init();
    gt_UltraliskDiesRemoveTextTagModel_Init();
    gt_UltraliskShotUsedRemoveTextTagModel_Init();
    gt_DominionTroopsSeeKerriganQ_Init();
    gt_ZergAttackChokepointQ_Init();
    gt_DebrisBlocksDoorExitQ_Init();
    gt_DebrisDestroyed_Init();
    gt_TransmissionLockdown02ReminderQ_Init();
    gt_ForceRaynorThroughDoor02_Init();
    gt_GotThroughLockdownDoor02_Init();
    gt_TransmissionGotThroughLockdownDoor02Q_Init();
    gt_StartThirdLockdownTimer_Init();
    gt_ComputerRoomSecuredQ_Init();
    gt_ComputerRoomSecuredMusic_Init();
    gt_SecurityComputerProximityEnter_Init();
    gt_SecurityComputerActivatedQ_Init();
    gt_ButtonTurnonGas_Init();
    gt_TransmissionGasDidntKillEverythingQ_Init();
    gt_ButtonReleaseZerg_Init();
    gt_TransmissionDominionReactionatCagesQ_Init();
    gt_LeaveSecurityCamera_Init();
    gt_TransmissionSomeZergRemainQ_Init();
    gt_RestoreNormalGameplayUI_Init();
    gt_SecurityRoomMusic_Init();
    gt_DominionAttackFromTram_Init();
    gt_UnpauseTramFight_Init();
    gt_TransmissionLockdown03ReminderQ_Init();
    gt_ForceRaynorThroughDoor03_Init();
    gt_GotThroughLockdownDoor03Q_Init();
    gt_TramStationDominionKilled_Init();
    gt_CreateDestinationTimer_Init();
    gt_CreateTramProgressBar_Init();
    gt_UpdateTramProgressBar_Init();
    gt_TramEngineUnderAttackWarning_Init();
    gt_TramEngineDestroyed_Init();
    gt_TransmissionTramEngineDestroyedQ_Init();
    gt_TramAt75Health_Init();
    gt_TramAt40Health_Init();
    gt_TransmissionTramAt40HealthQ_Init();
    gt_TramExitsTunnel_Init();
    gt_StartTramAttacks_Init();
    gt_StartTramAttacksHard_Init();
    gt_TransmissionIncomingDominionForcesQ_Init();
    gt_TransmissionTramGoesFasterQ_Init();
    gt_TransmissionSiegeTanksQ_Init();
    gt_TransmissionTramExitsTunnelQ_Init();
    gt_TransmissionTramAlmostThereQ_Init();
    gt_TramSuccessfullyDefended_Init();
    gt_SlowDownandStopTram_Init();
    gt_TramUnitUnloadedBehavior_Init();
    gt_MakeCiviliansScared_Init();
    gt_ReleaseUmojantoBullies_Init();
    gt_UmojanMarinesMoveOut_Init();
    gt_ArchangelMusic_Init();
    gt_DominionAttackFromDoor_Init();
    gt_DominionAttackAcrossBridge_Init();
    gt_S4DropPodCrashing01_Init();
    gt_PlayerReachesSpaceport_Init();
    gt_AfterArchangelCinematicIntroQ_Init();
    gt_CreateUpdateArchangelBossBar_Init();
    gt_DominionDropsBehindEnemyLines_Init();
    gt_ArchangelBehaviorStage1_Init();
    gt_ArchangelMoveToStage2_Init();
    gt_ArchangelBehaviorStage2_Init();
    gt_ArchangelMoveToStage3_Init();
    gt_ArchangelBehaviorStage3_Init();
    gt_ArchangelBombingRun_Init();
    gt_ArchangelLands_Init();
    gt_TransmissionDropPodCalloutQ_Init();
    gt_TransmissionKineticBlastReminderQ_Init();
    gt_ArchangelStageDropPods_Init();
    gt_ArchangelStageDropPodsHard_Init();
    gt_ReplenishUmojanMarines_Init();
    gt_ArchangelAttackMissileBarrageStage1_Init();
    gt_ArchangelAttackMissileBarrageStage2_Init();
    gt_ArchangelAttackMissileBarrageStage3_Init();
    gt_ArchangelAttackMinigunStrafeStage1_Init();
    gt_TipMissionHelpQ_Init();
    gt_StartAI_Init();
    gt_AchievementEnginesLost_Init();
    gt_AchievementArchangelDamageNH_Init();
    gt_AchievementLockdownSpeedRunH_Init();
    gt_KerriganUsesKineticBlast_Init();
    gt_KerriganUsesCrushingGrip_Init();
    gt_KerriganTakesDamageFromArchangel_Init();
    gt_DefeatKerriganDead_Init();
    gt_DefeatLockdownDoorTimer_Init();
    gt_DefeatTramDestroyed_Init();
    gt_VictoryArchangelDestroyed_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_ObjectiveGettoSublevelDoorCreate_Init();
    gt_ObjectiveGettoSublevelDoorComplete_Init();
    gt_ObjectiveGettoSublevelDoorFailed_Init();
    gt_ObjectiveHoldOutAtDoorCreate_Init();
    gt_ObjectiveHoldOutAtDoorComplete_Init();
    gt_ObjectiveHoldOutAtDoorFailed_Init();
    gt_ObjectiveEscapeThroughSublevelCreate_Init();
    gt_ObjectiveEscapeThroughSublevelComplete_Init();
    gt_ObjectiveEscapeThroughSublevelFailed_Init();
    gt_ObjectiveDefendTheTramCreate_Init();
    gt_ObjectiveDefendTheTramComplete_Init();
    gt_ObjectiveDefendTheTramFailed_Init();
    gt_ObjectiveReachTheSpaceportCreate_Init();
    gt_ObjectiveReachTheSpaceportComplete_Init();
    gt_ObjectiveReachTheSpaceportFailed_Init();
    gt_ObjectiveDestroytheArchangelCreate_Init();
    gt_ObjectiveDestroytheArchangelComplete_Init();
    gt_ObjectiveDestroytheArchangelFailed_Init();
    gt_ObjectiveKerriganMustSurviveCreate_Init();
    gt_ObjectiveKerriganMustSurviveComplete_Init();
    gt_ObjectiveKerriganMustSurviveFailed_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_IntroMusic_Init();
    gt_MidQStage2_Init();
    gt_MidSetupStage2_Init();
    gt_MidCinematicStage2_Init();
    gt_MidCinematicEndStage2_Init();
    gt_MidCleanupStage2_Init();
    gt_MidElevatorMusic_Init();
    gt_MidQStage3_Init();
    gt_MidSetupStage3_Init();
    gt_MidCinematicStage3_Init();
    gt_MidCinematicEndStage3_Init();
    gt_MidCleanupStage3_Init();
    gt_MidBoardTramMusic_Init();
    gt_MidQStage4_Init();
    gt_MidSetupStage4_Init();
    gt_MidCinematicStage4_Init();
    gt_MidCinematicEndStage4_Init();
    gt_MidCleanupStage4_Init();
    gt_MidCineMarinesMove_Init();
    gt_MidLeavingTramMusic_Init();
    gt_MidQArchangel_Init();
    gt_MidSetupArchangel_Init();
    gt_MidCinematicArchangel_Init();
    gt_MidCinematicEndArchangel_Init();
    gt_MidCleanupArchangel_Init();
    gt_MidCineArchangelDominionAttack_Init();
    gt_MidCineArchangelBarrage_Init();
    gt_MidCineArchangelUmojanAttack_Init();
    gt_MidCineArchangelBridgeBlowsUp_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
    gt_VictoryMusic_Init();
    gt_VictoryCinematicDropPods_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
