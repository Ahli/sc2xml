//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Planetfall
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"
include "TriggerLibs/SwarmCampaignLib"
include "aiAC1D4E5B"
include "ai62C4CA14"
include "ai8E40AF2E"
include "ai6366AE01"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libHots_InitLib();
    libSwaC_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_DOMINION = 2;
const int gv_pLAYER_02_DOMINION2 = 3;
const int gv_pLAYER_02_DOMINION3 = 4;
const int gv_pLAYER_02_DOMINION43 = 5;
const int gv_pLAYER_02_DOMINION42 = 6;
const int gv_pLAYER_02_DOMINION422 = 7;
const int gv_pLAYER_02_DOMINION423 = 8;

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_LandingPointStatus_Vacant = 0;
const int ge_LandingPointStatus_Occupied = 1;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
bool gv_gameOver;
bool gv_inCinematic;
string gv_mapMusicTrack;
unit gv_kerrigan;
int gv_bileLaunchersOwned;
string gv_bileLauncherUnitType;
playergroup gv_dominionPlayerGroup;
int gv_inCombatIndicator;
unit[4] gv_gateUnit;
int[4] gv_gatePing;
point gv_nextDropLocation;
point[6] gv_landingPoint;
actor gv_nextLandingModel;
int gv_nextLandingTextTag;
int gv_nextLandingPing;
timer gv_dropTimer;
timer gv_dropWarningTimer;
int gv_dropTimerWindow;
int gv_dropNumber;
int[3] gv_enemyTerritoryPing;
unit[6] gv_bileLaunchers;
int[6] gv_bileLauncherPing;
int[101] gv_bileLauncherDlgLabel;
int[101] gv_bileLauncherDlgValue;
int[101] gv_bileLauncherDlgMax;
int[101] gv_bileLauncherDlgProgressBar;
int[101] gv_bileLauncherDlgBorder;
int gv_bileLauncherCount;
unit[101] gv_bileLauncherUnits;
bool[7] gv_outpostDrop;
int[3] gv_dominionBasePing;
int gv_dominionBasesDestroyed;
int gv_achievementLauncherCount;
int gv_gatesDestroyedBeforeLaunchersDeployed;
int gv_largestZergForce;
int gv_kerriganKills;
int gv_dominionStructuresTotal;
int gv_dominionStructuresDestroyed;
int gv_anniversaryAchievementTermDominionStructuresDestroyed;
unitgroup gv_killTeam01;
unitgroup gv_killTeam02;
int gv_killTeam01Ping;
int gv_killTeam02Ping;
int gv_bileLauncherDeaths;
int gv_objectiveDestroyDominionBase;
int gv_objectiveDestroyDominionBase22;
int gv_objectiveDestroyDominionBase2;
int gv_objectiveDestroyDominionBase222;
int gv_gatesDestroyed;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicPausedUnits;
unitgroup gv_cinematicTempUnits;
bool gv_cinematicCompleted;
unit[16] gv_introMineralFields;
fixed[16] gv_introMineralFieldAmounts;
int gv_introNumberOfMineralFields;
int gv_introMinerals;
sound gv_introStinger;
sound gv_introZoomSound;
sound gv_introExplosionSound;
sound gv_introLandingSound;
unitgroup gv_introDominionAttackers;
unit gv_introBileLauncher;
bool gv_introCutsceneCompleted;
bool gv_introMusicCompleted;
unit gv_midBileLauncher;
unit gv_midAirCannon;
bool gv_midMusicCompleted;
sound gv_midBileSound;
region[6] gv_victoryZergRegions;
unitgroup[6] gv_victoryZergGroups;
sound gv_victoryZergSound;
sound gv_victoryPodSound;

void InitGlobals () {
    int init_i;

    gv_bileLauncherUnitType = "KorhalSporeCannon";
    gv_dominionPlayerGroup = PlayerGroupEmpty();
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_gatePing[init_i] = c_invalidPingId;
    }
    gv_nextLandingTextTag = c_textTagNone;
    gv_nextLandingPing = c_invalidPingId;
    gv_dropTimer = TimerCreate();
    gv_dropWarningTimer = TimerCreate();
    gv_dropTimerWindow = c_timerWindowNone;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_enemyTerritoryPing[init_i] = c_invalidPingId;
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_bileLauncherPing[init_i] = c_invalidPingId;
    }
    for (init_i = 0; init_i <= 100; init_i += 1) {
        gv_bileLauncherDlgLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 100; init_i += 1) {
        gv_bileLauncherDlgValue[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 100; init_i += 1) {
        gv_bileLauncherDlgProgressBar[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 100; init_i += 1) {
        gv_bileLauncherDlgBorder[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_dominionBasePing[init_i] = c_invalidPingId;
    }
    gv_killTeam01 = UnitGroupEmpty();
    gv_killTeam02 = UnitGroupEmpty();
    gv_killTeam01Ping = c_invalidPingId;
    gv_killTeam02Ping = c_invalidPingId;
    gv_objectiveDestroyDominionBase = c_invalidObjectiveId;
    gv_objectiveDestroyDominionBase22 = c_invalidObjectiveId;
    gv_objectiveDestroyDominionBase2 = c_invalidObjectiveId;
    gv_objectiveDestroyDominionBase222 = c_invalidObjectiveId;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_introDominionAttackers = UnitGroupEmpty();
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_victoryZergGroups[init_i] = UnitGroupEmpty();
    }
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
bool gf_PlayerIsInCombat (int lp_player);
void gf_DropP07ZergUnits (int lp_nUMBER_UNIT_01, string lp_uNIT_TYPE_01, int lp_nUMBER_UNIT_02, string lp_uNIT_TYPE_02, point lp_dROP_LOCATION, point lp_dESTINATION);
void gf_HandleBileLauncherProgressWindow (unit lp_launcher, int lp_time);
void gf_CreateBileLauncherTimerWindow (int lp_index, int lp_max);
void gf_SetBileLauncherTimerWindowProgress (int lp_index, int lp_progress);
void gf_ShowHideBileLauncherTimerWindow (int lp_index, bool lp_showHideOptions);
void gf_CreateNextDropIndicator (point lp_tARGET_POINT);
void gf_DropZergUnits (int lp_nUMBER, string lp_uNIT_TYPE, point lp_dROP_LOCATION);
void gf_DropCreepTumor (point lp_dROP_LOCATION);
void gf_DropSpineCrawler (point lp_dROP_LOCATION);
void gf_DropBileLauncher (int lp_cANNON_NUMBER, point lp_dROP_LOCATION);
void gf_CreateCreepinCircularRegion (region lp_circularRegion);
void gf_VictoryDropPod (int lp_zerglings, int lp_roaches, int lp_hydras, int lp_ultras, point lp_location);
void gf_VictoryDropPodHatchery (point lp_location);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04MusicSound;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_PlayerIsInCombat;
trigger gt_PlayerIsInCombatIndicatorDiminish;
trigger gt_StartGameQ;
trigger gt_StartHarvesting;
trigger gt_CreateGatePings;
trigger gt_Gate01DestroyedZergInvadeCity;
trigger gt_Gate02DestroyedZergInvadeCity;
trigger gt_Gate03DestroyedZergInvadeCity;
trigger gt_RemoveInvadersAtGate01;
trigger gt_RemoveInvadersAtGate02;
trigger gt_RemoveInvadersAtGate03;
trigger gt_GateIntroProximitySafety;
trigger gt_StartNextLandingTimer;
trigger gt_BileLauncherLandings;
trigger gt_LandingsOrdered;
trigger gt_LandingsRepeat;
trigger gt_ShowNextLanding;
trigger gt_Expansion1Cleared;
trigger gt_Expansion2Cleared;
trigger gt_DropBileLauncher01;
trigger gt_DropBileLauncher02;
trigger gt_DropBileLauncher03;
trigger gt_DropBileLauncher04;
trigger gt_DropBileLauncher05;
trigger gt_DropBileLauncherREPEAT;
trigger gt_BileLauncherKilled;
trigger gt_BileLaunchersAttackAirDefenseCannons;
trigger gt_UpdateBileLaunchersOwned;
trigger gt_RandomZergLandings;
trigger gt_HandleKerriganDeath;
trigger gt_CreateLandingTimerWindow;
trigger gt_CrashingZergDropPods;
trigger gt_TransitiontoDestroyDominionBasesQ;
trigger gt_GivePlayerForcesIfNeeded;
trigger gt_CreatePingatDominionBases;
trigger gt_DestroyPingatDominionBase01;
trigger gt_DestroyPingatDominionBase02;
trigger gt_LeviathanSafety;
trigger gt_TransmissionMengskTauntQ;
trigger gt_TransmissionBileLauncherDropsQ;
trigger gt_TransmissionBileLauncherLandingQ;
trigger gt_TransmissionBileLauncherLossQ;
trigger gt_TransmissionBileLauncherDeathQ;
trigger gt_TransmissionDestroyGatesIntroQ;
trigger gt_TransmissionGatehasbeenDestroyedQ;
trigger gt_TransmissionEnemyTerritory1Q;
trigger gt_TransmissionEnemyTerritory2Q;
trigger gt_TransmissionKillTeam01Q;
trigger gt_TransmissionKillTeam02Q;
trigger gt_TipMissionHelpQ;
trigger gt_AchievementBileLaunchersLost;
trigger gt_AchievementGatesBeforeLaunchersNH;
trigger gt_AchievementBasesBeforeLaunchersH;
trigger gt_AnniversaryAchievementDestroy20Dominionstructuresbefore3rdBileLauncher;
trigger gt_AchievementLauncherTracking;
trigger gt_LargestZergForce;
trigger gt_StartAI;
trigger gt_AIUpgradesNormal;
trigger gt_AIUpgradesHard;
trigger gt_AIGiveResources;
trigger gt_SendKillTeam01;
trigger gt_SendKillTeam02;
trigger gt_KillTeam01Ping;
trigger gt_KillTeam02Ping;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_DefeatBileLauncherDeathsFailed;
trigger gt_DefeatBaseDead;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_ObjectiveDeployBileLauncherCreate;
trigger gt_ObjectiveDeployBileLauncherComplete;
trigger gt_ObjectiveDeployBileLauncherUpdate;
trigger gt_ObjectiveDeployBileLauncherFailed;
trigger gt_ObjectiveBileLauncherLossCreate;
trigger gt_ObjectiveBileLauncherLossComplete;
trigger gt_ObjectiveBileLauncherLossUpdate;
trigger gt_ObjectiveBileLauncherLossFailed;
trigger gt_ObjectiveDestroyDominionBaseCreate;
trigger gt_ObjectiveDestroyDominionBaseComplete;
trigger gt_ObjectiveDestroyDominionBaseUpdate;
trigger gt_ObjectiveDestroyDominionBaseFailed;
trigger gt_ObjectiveDestroyGatesCreate;
trigger gt_ObjectiveDestroyGatesUpdate;
trigger gt_ObjectiveDestroyGatesComplete;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_IntroZerg;
trigger gt_IntroExplosion;
trigger gt_IntroDominionMovement;
trigger gt_IntroDropPod;
trigger gt_IntroZoomIn;
trigger gt_IntroMusic;
trigger gt_MidQ;
trigger gt_MidSetup;
trigger gt_MidCinematic;
trigger gt_MidCinematicEnd;
trigger gt_MidCleanup;
trigger gt_MidMusic;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;
trigger gt_VictoryZerg;
trigger gt_VictoryDropPods;
trigger gt_VictorySounds;
trigger gt_VictoryDropPodSounds;
trigger gt_VictoryMusic;

//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;

//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        cai_playerAI[init_i] = null;
    }
}

//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;

    if (cai_playerAI[p] == "aiAC1D4E5B") { aiAC1D4E5B_start(p); }
    if (cai_playerAI[p] == "ai62C4CA14") { ai62C4CA14_start(p); }
    if (cai_playerAI[p] == "ai8E40AF2E") { ai8E40AF2E_start(p); }
    if (cai_playerAI[p] == "ai6366AE01") { ai6366AE01_start(p); }
}

//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiAC1D4E5B") { aiAC1D4E5B_setDefGather(p, val); }
    if (cai_playerAI[p] == "ai62C4CA14") { ai62C4CA14_setDefGather(p, val); }
    if (cai_playerAI[p] == "ai8E40AF2E") { ai8E40AF2E_setDefGather(p, val); }
    if (cai_playerAI[p] == "ai6366AE01") { ai6366AE01_setDefGather(p, val); }
}

//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiAC1D4E5B") { return aiAC1D4E5B_getCustomData(p); }
    if (cai_playerAI[p] == "ai62C4CA14") { return ai62C4CA14_getCustomData(p); }
    if (cai_playerAI[p] == "ai8E40AF2E") { return ai8E40AF2E_getCustomData(p); }
    if (cai_playerAI[p] == "ai6366AE01") { return ai6366AE01_getCustomData(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiAC1D4E5B") { return aiAC1D4E5B_getLastWave(p); }
    if (cai_playerAI[p] == "ai62C4CA14") { return ai62C4CA14_getLastWave(p); }
    if (cai_playerAI[p] == "ai8E40AF2E") { return ai8E40AF2E_getLastWave(p); }
    if (cai_playerAI[p] == "ai6366AE01") { return ai6366AE01_getLastWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiAC1D4E5B") { aiAC1D4E5B_waves_run(p, target); }
    if (cai_playerAI[p] == "ai62C4CA14") { ai62C4CA14_waves_run(p, target); }
    if (cai_playerAI[p] == "ai8E40AF2E") { ai8E40AF2E_waves_run(p, target); }
    if (cai_playerAI[p] == "ai6366AE01") { ai6366AE01_waves_run(p, target); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiAC1D4E5B") { aiAC1D4E5B_waves_enable(p, val); }
    if (cai_playerAI[p] == "ai62C4CA14") { ai62C4CA14_waves_enable(p, val); }
    if (cai_playerAI[p] == "ai8E40AF2E") { ai8E40AF2E_waves_enable(p, val); }
    if (cai_playerAI[p] == "ai6366AE01") { ai6366AE01_waves_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "aiAC1D4E5B") { aiAC1D4E5B_waves_stop(); }
    if (ai == "ai62C4CA14") { ai62C4CA14_waves_stop(); }
    if (ai == "ai8E40AF2E") { ai8E40AF2E_waves_stop(); }
    if (ai == "ai6366AE01") { ai6366AE01_waves_stop(); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiAC1D4E5B") { aiAC1D4E5B_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "ai62C4CA14") { ai62C4CA14_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "ai8E40AF2E") { ai8E40AF2E_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "ai6366AE01") { ai6366AE01_wave_run(w, p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiAC1D4E5B") { aiAC1D4E5B_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "ai62C4CA14") { ai62C4CA14_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "ai8E40AF2E") { ai8E40AF2E_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "ai6366AE01") { ai6366AE01_wave_enable(w, p, val); }
}

//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "aiAC1D4E5B") { return aiAC1D4E5B_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "ai62C4CA14") { return ai62C4CA14_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "ai8E40AF2E") { return ai8E40AF2E_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "ai6366AE01") { return ai6366AE01_wave_isEnabled(w, p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiAC1D4E5B") { return aiAC1D4E5B_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "ai62C4CA14") { return ai62C4CA14_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "ai8E40AF2E") { return ai8E40AF2E_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "ai6366AE01") { return ai6366AE01_wave_createdUnits(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiAC1D4E5B") { return aiAC1D4E5B_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "ai62C4CA14") { return ai62C4CA14_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "ai8E40AF2E") { return ai8E40AF2E_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "ai6366AE01") { return ai6366AE01_wave_createdWave(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_startall () {
    cai_start("aiAC1D4E5B", 2);
    cai_start("ai62C4CA14", 7);
    cai_start("ai8E40AF2E", 3);
    cai_start("ai6366AE01", 4);
    AICampaignStart(5);
    AICampaignStart(6);
    AICampaignStart(8);
}

//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(2, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 2);
    PlayerGroupAdd(target, 3);
    PlayerGroupAdd(target, 4);
    PlayerGroupAdd(target, 5);
    cai_waves_run(7, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(3, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(4, target);
}

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
bool gf_PlayerIsInCombat (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_inCombatIndicator > 0)) {
        return true;
    }
    else {
        return false;
    }
}

trigger auto_gf_DropP07ZergUnits_Trigger = null;
int auto_gf_DropP07ZergUnits_lp_nUMBER_UNIT_01;
string auto_gf_DropP07ZergUnits_lp_uNIT_TYPE_01;
int auto_gf_DropP07ZergUnits_lp_nUMBER_UNIT_02;
string auto_gf_DropP07ZergUnits_lp_uNIT_TYPE_02;
point auto_gf_DropP07ZergUnits_lp_dROP_LOCATION;
point auto_gf_DropP07ZergUnits_lp_dESTINATION;

void gf_DropP07ZergUnits (int lp_nUMBER_UNIT_01, string lp_uNIT_TYPE_01, int lp_nUMBER_UNIT_02, string lp_uNIT_TYPE_02, point lp_dROP_LOCATION, point lp_dESTINATION) {
    auto_gf_DropP07ZergUnits_lp_nUMBER_UNIT_01 = lp_nUMBER_UNIT_01;
    auto_gf_DropP07ZergUnits_lp_uNIT_TYPE_01 = lp_uNIT_TYPE_01;
    auto_gf_DropP07ZergUnits_lp_nUMBER_UNIT_02 = lp_nUMBER_UNIT_02;
    auto_gf_DropP07ZergUnits_lp_uNIT_TYPE_02 = lp_uNIT_TYPE_02;
    auto_gf_DropP07ZergUnits_lp_dROP_LOCATION = lp_dROP_LOCATION;
    auto_gf_DropP07ZergUnits_lp_dESTINATION = lp_dESTINATION;

    if (auto_gf_DropP07ZergUnits_Trigger == null) {
        auto_gf_DropP07ZergUnits_Trigger = TriggerCreate("auto_gf_DropP07ZergUnits_TriggerFunc");
    }

    TriggerExecute(auto_gf_DropP07ZergUnits_Trigger, false, false);
}

bool auto_gf_DropP07ZergUnits_TriggerFunc (bool testConds, bool runActions) {
    int lp_nUMBER_UNIT_01 = auto_gf_DropP07ZergUnits_lp_nUMBER_UNIT_01;
    string lp_uNIT_TYPE_01 = auto_gf_DropP07ZergUnits_lp_uNIT_TYPE_01;
    int lp_nUMBER_UNIT_02 = auto_gf_DropP07ZergUnits_lp_nUMBER_UNIT_02;
    string lp_uNIT_TYPE_02 = auto_gf_DropP07ZergUnits_lp_uNIT_TYPE_02;
    point lp_dROP_LOCATION = auto_gf_DropP07ZergUnits_lp_dROP_LOCATION;
    point lp_dESTINATION = auto_gf_DropP07ZergUnits_lp_dESTINATION;

    // Variable Declarations
    unitgroup lv_dropGroup;

    // Automatic Variable Declarations
    unitgroup auto08C3EC2C_g;
    int auto08C3EC2C_u;
    unit auto08C3EC2C_var;

    // Variable Initialization
    lv_dropGroup = UnitGroupEmpty();

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(lp_nUMBER_UNIT_01, lp_uNIT_TYPE_01, c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION422, PointFromId(247));
    UnitGroupAddUnitGroup(lv_dropGroup, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(lp_nUMBER_UNIT_02, lp_uNIT_TYPE_02, c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION422, PointFromId(247));
    UnitGroupAddUnitGroup(lv_dropGroup, UnitLastCreatedGroup());
    libSwaC_gf_CreateDropPod(libSwaC_ge_DropPodRace_Zerg, lp_dROP_LOCATION, lv_dropGroup, false, gv_pLAYER_01_USER);
    Wait(2.5, c_timeGame);
    auto08C3EC2C_g = lv_dropGroup;
    auto08C3EC2C_u = UnitGroupCount(auto08C3EC2C_g, c_unitCountAll);
    for (;; auto08C3EC2C_u -= 1) {
        auto08C3EC2C_var = UnitGroupUnitFromEnd(auto08C3EC2C_g, auto08C3EC2C_u);
        if (auto08C3EC2C_var == null) { break; }
        UnitSetPropertyFixed(auto08C3EC2C_var, c_unitPropEnergyPercent, 100.0);
        UnitBehaviorAddPlayer(auto08C3EC2C_var, "SuppressCollision", gv_pLAYER_02_DOMINION422, 1);
        UnitBehaviorAddPlayer(auto08C3EC2C_var, "PermanentShareVision", gv_pLAYER_01_USER, 1);
    }
    UnitGroupIssueOrder(lv_dropGroup, OrderTargetingPoint(AbilityCommand("attack", 0), lp_dESTINATION), c_orderQueueReplace);
    return true;
}

trigger auto_gf_HandleBileLauncherProgressWindow_Trigger = null;
unit auto_gf_HandleBileLauncherProgressWindow_lp_launcher;
int auto_gf_HandleBileLauncherProgressWindow_lp_time;

void gf_HandleBileLauncherProgressWindow (unit lp_launcher, int lp_time) {
    auto_gf_HandleBileLauncherProgressWindow_lp_launcher = lp_launcher;
    auto_gf_HandleBileLauncherProgressWindow_lp_time = lp_time;

    if (auto_gf_HandleBileLauncherProgressWindow_Trigger == null) {
        auto_gf_HandleBileLauncherProgressWindow_Trigger = TriggerCreate("auto_gf_HandleBileLauncherProgressWindow_TriggerFunc");
    }

    TriggerExecute(auto_gf_HandleBileLauncherProgressWindow_Trigger, false, false);
}

bool auto_gf_HandleBileLauncherProgressWindow_TriggerFunc (bool testConds, bool runActions) {
    unit lp_launcher = auto_gf_HandleBileLauncherProgressWindow_lp_launcher;
    int lp_time = auto_gf_HandleBileLauncherProgressWindow_lp_time;

    // Variable Declarations
    int lv_index;
    int lv_timeCount;

    // Automatic Variable Declarations
    int auto7065B746_n;
    int auto7065B746_i;

    // Variable Initialization

    // Implementation
    gv_bileLauncherCount += 1;
    lv_index = gv_bileLauncherCount;
    gv_bileLauncherUnits[lv_index] = lp_launcher;
    lv_timeCount = 0;
    gv_bileLauncherDlgMax[lv_index] = lp_time;
    gf_CreateBileLauncherTimerWindow(lv_index, lp_time);
    gf_ShowHideBileLauncherTimerWindow(lv_index, true);
    auto7065B746_n = lp_time;
    for (auto7065B746_i = 1; auto7065B746_i <= auto7065B746_n; auto7065B746_i += 1) {
        lv_timeCount += 1;
        if ((gv_gameOver == false) && (UnitIsAlive(gv_bileLauncherUnits[lv_index]) == true)) {
            gf_SetBileLauncherTimerWindowProgress(lv_index, lv_timeCount);
        }
        else {
            break;
        }
        Wait(1.0, c_timeAI);
    }
    gf_ShowHideBileLauncherTimerWindow(lv_index, false);
    return true;
}

void gf_CreateBileLauncherTimerWindow (int lp_index, int lp_max) {
    // Variable Declarations
    int lv_panel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_panel = c_invalidDialogControlId;

    // Implementation
    if ((gv_bileLauncherDlgLabel[lp_index] != c_invalidDialogControlId)) {
        return ;
    }

    DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "NameLabel", gv_bileLauncherUnits[lp_index]);
    gv_bileLauncherDlgLabel[lp_index] = DialogControlLastCreated();
    DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "ValueLabel", gv_bileLauncherUnits[lp_index]);
    gv_bileLauncherDlgValue[lp_index] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(100.00, 61.57, 23.53), PlayerGroupAll());
    DialogControlHookupUnitStatus(c_triggerControlTypeImage, "BarImage", gv_bileLauncherUnits[lp_index]);
    gv_bileLauncherDlgProgressBar[lp_index] = DialogControlLastCreated();
    DialogControlHookupUnitStatus(c_triggerControlTypeImage, "BorderImage", gv_bileLauncherUnits[lp_index]);
    gv_bileLauncherDlgBorder[lp_index] = DialogControlLastCreated();
}

void gf_SetBileLauncherTimerWindowProgress (int lp_index, int lp_progress) {
    // Variable Declarations
    int lv_panel;
    const int lv_c_Width = 260;
    const int lv_c_Height = 12;
    color lv_textColor;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_panel = c_invalidDialogControlId;
    lv_textColor = Color(0.00, 0.00, 0.00);

    // Implementation
    if ((lp_progress == 0)) {
        DialogControlSetVisible(gv_bileLauncherDlgProgressBar[lp_index], PlayerGroupAll(), false);
    }
    else {
        DialogControlSetSize(gv_bileLauncherDlgProgressBar[lp_index], PlayerGroupAll(), FixedToInt((IntToFixed(lv_c_Width) * (IntToFixed(lp_progress) / IntToFixed(gv_bileLauncherDlgMax[lp_index])))), lv_c_Height);
        libNtve_gf_SetDialogItemColor(gv_bileLauncherDlgProgressBar[lp_index], libSwaC_gf_GetProgressBarColorCampaign(), PlayerGroupAll());
        DialogControlSetVisible(gv_bileLauncherDlgProgressBar[lp_index], PlayerGroupAll(), true);
    }
    libNtve_gf_SetDialogItemText(gv_bileLauncherDlgLabel[lp_index], StringExternal("Param/Value/53449720"), PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/5F5FA2DF", "A", IntToText(FixedToInt(((IntToFixed(lp_progress) / gv_bileLauncherDlgMax[lp_index]) * 100.0))));
    libNtve_gf_SetDialogItemText(gv_bileLauncherDlgValue[lp_index], TextExpressionAssemble("Param/Expression/5F5FA2DF"), PlayerGroupAll());
}

void gf_ShowHideBileLauncherTimerWindow (int lp_index, bool lp_showHideOptions) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(gv_bileLauncherDlgLabel[lp_index], PlayerGroupAll(), lp_showHideOptions);
    DialogControlSetVisible(gv_bileLauncherDlgValue[lp_index], PlayerGroupAll(), lp_showHideOptions);
    DialogControlSetVisible(gv_bileLauncherDlgProgressBar[lp_index], PlayerGroupAll(), lp_showHideOptions);
    DialogControlSetVisible(gv_bileLauncherDlgBorder[lp_index], PlayerGroupAll(), lp_showHideOptions);
}

void gf_CreateNextDropIndicator (point lp_tARGET_POINT) {
    // Automatic Variable Declarations
    // Implementation
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(lp_tARGET_POINT, 5.0), 6.0, false);
    MinimapPing(PlayerGroupSingle(gv_pLAYER_01_USER), lp_tARGET_POINT, 2.0, Color(0.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/C6EF4A1C"), null, lp_tARGET_POINT);
    PingCreate(PlayerGroupSingle(gv_pLAYER_01_USER), "PingSimple", lp_tARGET_POINT, ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0);
    gv_nextLandingPing = PingLastCreated();
    PingSetScale(PingLastCreated(), 0.9);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/6DAE1844"));
    libSwaC_gf_CreateReticleEffectAndTextTagAtPoint(libSwaC_ge_CampaginReticleType_ZergMainObjective, libSwaC_ge_CampaginReticleSize_Medium, StringExternal("Param/Value/6B5F9521"), lp_tARGET_POINT);
    gv_nextLandingModel = libNtve_gf_ActorLastCreated();
    gv_nextLandingTextTag = TextTagLastCreated();
}

void gf_DropZergUnits (int lp_nUMBER, string lp_uNIT_TYPE, point lp_dROP_LOCATION) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(lp_nUMBER, lp_uNIT_TYPE, c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(247));
    libSwaC_gf_CreateDropPod(libSwaC_ge_DropPodRace_Zerg, lp_dROP_LOCATION, UnitLastCreatedGroup(), false, gv_pLAYER_01_USER);
}

trigger auto_gf_DropCreepTumor_Trigger = null;
point auto_gf_DropCreepTumor_lp_dROP_LOCATION;

void gf_DropCreepTumor (point lp_dROP_LOCATION) {
    auto_gf_DropCreepTumor_lp_dROP_LOCATION = lp_dROP_LOCATION;

    if (auto_gf_DropCreepTumor_Trigger == null) {
        auto_gf_DropCreepTumor_Trigger = TriggerCreate("auto_gf_DropCreepTumor_TriggerFunc");
    }

    TriggerExecute(auto_gf_DropCreepTumor_Trigger, false, false);
}

bool auto_gf_DropCreepTumor_TriggerFunc (bool testConds, bool runActions) {
    point lp_dROP_LOCATION = auto_gf_DropCreepTumor_lp_dROP_LOCATION;

    // Automatic Variable Declarations
    // Implementation
    libSwaC_gf_CreateDropPod(libSwaC_ge_DropPodRace_Zerg, lp_dROP_LOCATION, UnitGroupEmpty(), false, gv_pLAYER_01_USER);
    Wait(2.5, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumor", 0, gv_pLAYER_01_USER, lp_dROP_LOCATION);
    return true;
}

trigger auto_gf_DropSpineCrawler_Trigger = null;
point auto_gf_DropSpineCrawler_lp_dROP_LOCATION;

void gf_DropSpineCrawler (point lp_dROP_LOCATION) {
    auto_gf_DropSpineCrawler_lp_dROP_LOCATION = lp_dROP_LOCATION;

    if (auto_gf_DropSpineCrawler_Trigger == null) {
        auto_gf_DropSpineCrawler_Trigger = TriggerCreate("auto_gf_DropSpineCrawler_TriggerFunc");
    }

    TriggerExecute(auto_gf_DropSpineCrawler_Trigger, false, false);
}

bool auto_gf_DropSpineCrawler_TriggerFunc (bool testConds, bool runActions) {
    point lp_dROP_LOCATION = auto_gf_DropSpineCrawler_lp_dROP_LOCATION;

    // Automatic Variable Declarations
    // Implementation
    libSwaC_gf_CreateDropPod(libSwaC_ge_DropPodRace_Zerg, lp_dROP_LOCATION, UnitGroupEmpty(), false, gv_pLAYER_01_USER);
    Wait(2.5, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SpineCrawlerUprooted", 0, gv_pLAYER_01_USER, lp_dROP_LOCATION);
    return true;
}

trigger auto_gf_DropBileLauncher_Trigger = null;
int auto_gf_DropBileLauncher_lp_cANNON_NUMBER;
point auto_gf_DropBileLauncher_lp_dROP_LOCATION;

void gf_DropBileLauncher (int lp_cANNON_NUMBER, point lp_dROP_LOCATION) {
    auto_gf_DropBileLauncher_lp_cANNON_NUMBER = lp_cANNON_NUMBER;
    auto_gf_DropBileLauncher_lp_dROP_LOCATION = lp_dROP_LOCATION;

    if (auto_gf_DropBileLauncher_Trigger == null) {
        auto_gf_DropBileLauncher_Trigger = TriggerCreate("auto_gf_DropBileLauncher_TriggerFunc");
    }

    TriggerExecute(auto_gf_DropBileLauncher_Trigger, false, false);
}

bool auto_gf_DropBileLauncher_TriggerFunc (bool testConds, bool runActions) {
    int lp_cANNON_NUMBER = auto_gf_DropBileLauncher_lp_cANNON_NUMBER;
    point lp_dROP_LOCATION = auto_gf_DropBileLauncher_lp_dROP_LOCATION;

    // Automatic Variable Declarations
    unitgroup autoEACA5FB9_g;
    int autoEACA5FB9_u;
    unit autoEACA5FB9_var;
    point autoA13268B8_val;

    // Implementation
    MinimapPing(PlayerGroupAll(), lp_dROP_LOCATION, 2.0, Color(0.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/6B8B52D3"), null, lp_dROP_LOCATION);
    libSwaC_gf_CreateDropPod(libSwaC_ge_DropPodRace_Zerg, lp_dROP_LOCATION, UnitGroupEmpty(), false, gv_pLAYER_02_DOMINION422);
    Wait(2.5, c_timeGame);
    autoEACA5FB9_g = UnitGroup(null, c_playerAny, RegionCircle(lp_dROP_LOCATION, 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEACA5FB9_u = UnitGroupCount(autoEACA5FB9_g, c_unitCountAll);
    for (;; autoEACA5FB9_u -= 1) {
        autoEACA5FB9_var = UnitGroupUnitFromEnd(autoEACA5FB9_g, autoEACA5FB9_u);
        if (autoEACA5FB9_var == null) { break; }
        if ((UnitGetType(autoEACA5FB9_var) != "ZergDropPod") && (autoEACA5FB9_var != UnitLastCreated())) {
            if (((UnitGetOwner(autoEACA5FB9_var) == gv_pLAYER_01_USER) || (libNtve_gf_PlayerIsEnemy(gv_pLAYER_01_USER, UnitGetOwner(autoEACA5FB9_var), libNtve_ge_PlayerRelation_Ally) == true))) {
                UnitSetPosition(autoEACA5FB9_var, UnitTypePlacementFromPoint("KorhalSporeCannon", UnitGetOwner(autoEACA5FB9_var), lp_dROP_LOCATION, 4.0), true);
            }
            else {
                UnitKill(autoEACA5FB9_var);
            }
        }

    }
    Wait(0.1, c_timeGame);
    if ((gv_inCinematic == true)) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_bileLauncherUnitType, c_unitCreateConstruct | c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION422, lp_dROP_LOCATION);
    gv_bileLaunchers[lp_cANNON_NUMBER] = UnitLastCreated();
    UnitBehaviorAddPlayer(UnitLastCreated(), "PermanentShareVision", gv_pLAYER_01_USER, 1);
    gf_HandleBileLauncherProgressWindow(UnitLastCreated(), 120);
    autoA13268B8_val = lp_dROP_LOCATION;
    if (autoA13268B8_val == PointFromId(243)) {
        ActorSend(ActorFromDoodad(DoodadFromId(1074)), "SetVisibility");
        ActorSend(ActorFromDoodad(DoodadFromId(1074)), "SetHeight -1.000000");
    }
    else if (autoA13268B8_val == PointFromId(113)) {
        ActorSend(ActorFromDoodad(DoodadFromId(1073)), "SetVisibility");
        ActorSend(ActorFromDoodad(DoodadFromId(1073)), "SetHeight -1.000000");
    }
    else if (autoA13268B8_val == PointFromId(111)) {
        ActorSend(ActorFromDoodad(DoodadFromId(1075)), "SetVisibility");
        ActorSend(ActorFromDoodad(DoodadFromId(1075)), "SetHeight -1.000000");
    }
    else if (autoA13268B8_val == PointFromId(250)) {
        ActorSend(ActorFromDoodad(DoodadFromId(1077)), "SetVisibility");
        ActorSend(ActorFromDoodad(DoodadFromId(1077)), "SetHeight -1.000000");
    }
    else if (autoA13268B8_val == PointFromId(277)) {
        ActorSend(ActorFromDoodad(DoodadFromId(1076)), "SetVisibility");
        ActorSend(ActorFromDoodad(DoodadFromId(1076)), "SetHeight -1.000000");
    }
    else {
    }
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        UnitSetPropertyFixed(gv_bileLaunchers[lp_cANNON_NUMBER], c_unitPropLifeMax, 1500.0);
        UnitSetPropertyFixed(gv_bileLaunchers[lp_cANNON_NUMBER], c_unitPropLifePercent, 100.0);
    }

    libSwaC_gf_SetUnitInfoTextCampaign(gv_bileLaunchers[lp_cANNON_NUMBER], null, StringExternal("Param/Value/EE54C090"), null);
    Wait(0.5, c_timeGame);
    libSwaC_gf_CreateObjectivePing(true, lp_dROP_LOCATION, StringExternal("Param/Value/791B2883"));
    gv_bileLauncherPing[lp_cANNON_NUMBER] = PingLastCreated();
    return true;
}

void gf_CreateCreepinCircularRegion (region lp_circularRegion) {
    // Automatic Variable Declarations
    // Implementation
    CreepModify(RegionGetCenter(lp_circularRegion), (libNtve_gf_WidthOfRegion(lp_circularRegion) / 2.0), true, false);
}

trigger auto_gf_VictoryDropPod_Trigger = null;
int auto_gf_VictoryDropPod_lp_zerglings;
int auto_gf_VictoryDropPod_lp_roaches;
int auto_gf_VictoryDropPod_lp_hydras;
int auto_gf_VictoryDropPod_lp_ultras;
point auto_gf_VictoryDropPod_lp_location;

void gf_VictoryDropPod (int lp_zerglings, int lp_roaches, int lp_hydras, int lp_ultras, point lp_location) {
    auto_gf_VictoryDropPod_lp_zerglings = lp_zerglings;
    auto_gf_VictoryDropPod_lp_roaches = lp_roaches;
    auto_gf_VictoryDropPod_lp_hydras = lp_hydras;
    auto_gf_VictoryDropPod_lp_ultras = lp_ultras;
    auto_gf_VictoryDropPod_lp_location = lp_location;

    if (auto_gf_VictoryDropPod_Trigger == null) {
        auto_gf_VictoryDropPod_Trigger = TriggerCreate("auto_gf_VictoryDropPod_TriggerFunc");
    }

    TriggerExecute(auto_gf_VictoryDropPod_Trigger, false, false);
}

bool auto_gf_VictoryDropPod_TriggerFunc (bool testConds, bool runActions) {
    int lp_zerglings = auto_gf_VictoryDropPod_lp_zerglings;
    int lp_roaches = auto_gf_VictoryDropPod_lp_roaches;
    int lp_hydras = auto_gf_VictoryDropPod_lp_hydras;
    int lp_ultras = auto_gf_VictoryDropPod_lp_ultras;
    point lp_location = auto_gf_VictoryDropPod_lp_location;

    // Variable Declarations
    unitgroup lv_dropGroup;
    int lv_regionIndex;

    // Automatic Variable Declarations
    int auto3DBE0581_n;
    int auto3DBE0581_i;
    int auto77F170B6_n;
    int auto77F170B6_i;
    int auto92212337_n;
    int auto92212337_i;
    int autoAAC182C2_n;
    int autoAAC182C2_i;
    const int autoB2C2A68F_ae = 5;
    const int autoB2C2A68F_ai = 1;
    unitgroup auto5C8D34B1_g;
    int auto5C8D34B1_u;
    unit auto5C8D34B1_var;

    // Variable Initialization
    lv_dropGroup = UnitGroupEmpty();

    // Implementation
    auto3DBE0581_n = lp_zerglings;
    for (auto3DBE0581_i = 1; auto3DBE0581_i <= auto3DBE0581_n; auto3DBE0581_i += 1) {
        UnitCreate(1, "Zergling", 0, gv_pLAYER_01_USER, PointFromId(247), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_dropGroup, UnitLastCreated());
        Wait(0.0625, c_timeGame);
    }
    auto77F170B6_n = lp_roaches;
    for (auto77F170B6_i = 1; auto77F170B6_i <= auto77F170B6_n; auto77F170B6_i += 1) {
        UnitCreate(1, "Roach", 0, gv_pLAYER_01_USER, PointFromId(247), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_dropGroup, UnitLastCreated());
        Wait(0.0625, c_timeGame);
    }
    auto92212337_n = lp_hydras;
    for (auto92212337_i = 1; auto92212337_i <= auto92212337_n; auto92212337_i += 1) {
        UnitCreate(1, "Hydralisk", 0, gv_pLAYER_01_USER, PointFromId(247), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_dropGroup, UnitLastCreated());
        Wait(0.0625, c_timeGame);
    }
    autoAAC182C2_n = lp_ultras;
    for (autoAAC182C2_i = 1; autoAAC182C2_i <= autoAAC182C2_n; autoAAC182C2_i += 1) {
        UnitCreate(1, "Ultralisk", 0, gv_pLAYER_01_USER, PointFromId(247), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_dropGroup, UnitLastCreated());
        Wait(0.0625, c_timeGame);
    }
    lv_regionIndex = 1;
    for ( ; ( (autoB2C2A68F_ai >= 0 && lv_regionIndex <= autoB2C2A68F_ae) || (autoB2C2A68F_ai < 0 && lv_regionIndex >= autoB2C2A68F_ae) ) ; lv_regionIndex += autoB2C2A68F_ai ) {
        if ((RegionContainsPoint(gv_victoryZergRegions[lv_regionIndex], lp_location) == true)) {
            UnitGroupAddUnitGroup(gv_victoryZergGroups[lv_regionIndex], lv_dropGroup);
            break;
        }

    }
    libSwaC_gf_CreateDropPod(libSwaC_ge_DropPodRace_Zerg, lp_location, lv_dropGroup, false, gv_pLAYER_01_USER);
    Wait(2.5, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumorBurrowed", 0, 0, lp_location);
    Wait(0.5, c_timeGame);
    if ((lv_regionIndex <= 5)) {
        auto5C8D34B1_g = lv_dropGroup;
        auto5C8D34B1_u = UnitGroupCount(auto5C8D34B1_g, c_unitCountAll);
        for (;; auto5C8D34B1_u -= 1) {
            auto5C8D34B1_var = UnitGroupUnitFromEnd(auto5C8D34B1_g, auto5C8D34B1_u);
            if (auto5C8D34B1_var == null) { break; }
            UnitIssueOrder(auto5C8D34B1_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(gv_victoryZergRegions[lv_regionIndex])), c_orderQueueReplace);
        }
    }

    return true;
}

trigger auto_gf_VictoryDropPodHatchery_Trigger = null;
point auto_gf_VictoryDropPodHatchery_lp_location;

void gf_VictoryDropPodHatchery (point lp_location) {
    auto_gf_VictoryDropPodHatchery_lp_location = lp_location;

    if (auto_gf_VictoryDropPodHatchery_Trigger == null) {
        auto_gf_VictoryDropPodHatchery_Trigger = TriggerCreate("auto_gf_VictoryDropPodHatchery_TriggerFunc");
    }

    TriggerExecute(auto_gf_VictoryDropPodHatchery_Trigger, false, false);
}

bool auto_gf_VictoryDropPodHatchery_TriggerFunc (bool testConds, bool runActions) {
    point lp_location = auto_gf_VictoryDropPodHatchery_lp_location;

    // Automatic Variable Declarations
    unitgroup autoC550E738_g;
    int autoC550E738_u;
    unit autoC550E738_var;

    // Implementation
    if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(lp_location, 3.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
        return true;
    }

    libSwaC_gf_CreateDropPod(libSwaC_ge_DropPodRace_Zerg, lp_location, UnitGroupEmpty(), false, gv_pLAYER_01_USER);
    Wait(2.1, c_timeGame);
    autoC550E738_g = UnitGroup(null, c_playerAny, RegionCircle(lp_location, 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC550E738_u = UnitGroupCount(autoC550E738_g, c_unitCountAll);
    for (;; autoC550E738_u -= 1) {
        autoC550E738_var = UnitGroupUnitFromEnd(autoC550E738_g, autoC550E738_u);
        if (autoC550E738_var == null) { break; }
        UnitKill(autoC550E738_var);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hatchery", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, lp_location);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Build D Start", 0, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_ULoadCampaignData("ZKorhal1");
    TriggerExecute(gt_Init01Technology, true, true);
    libSwaC_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03Units, true, true);
    TriggerExecute(gt_Init04MusicSound, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulties, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    TriggerExecute(gt_IntroQ, true, true);
    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_visionGroup;

    // Automatic Variable Declarations
    playergroup autoA7178B81_g;
    int autoA7178B81_var;
    playergroup auto13297558_g;
    int auto13297558_var;

    // Variable Initialization
    lv_visionGroup = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupAdd(gv_dominionPlayerGroup, gv_pLAYER_02_DOMINION);
    PlayerGroupAdd(gv_dominionPlayerGroup, gv_pLAYER_02_DOMINION2);
    PlayerGroupAdd(gv_dominionPlayerGroup, gv_pLAYER_02_DOMINION3);
    PlayerGroupAdd(gv_dominionPlayerGroup, gv_pLAYER_02_DOMINION43);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION2, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION3, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION43, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION42, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION422, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION423, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAllianceOneWay(gv_pLAYER_02_DOMINION422, gv_pLAYER_02_DOMINION, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAllianceOneWay(gv_pLAYER_02_DOMINION422, gv_pLAYER_02_DOMINION2, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAllianceOneWay(gv_pLAYER_02_DOMINION422, gv_pLAYER_02_DOMINION3, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION422, gv_pLAYER_02_DOMINION42, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION422, gv_pLAYER_02_DOMINION423, libNtve_ge_AllianceSetting_Enemy);
    autoA7178B81_g = gv_dominionPlayerGroup;
    autoA7178B81_var = -1;
    while (true) {
        autoA7178B81_var = PlayerGroupNextPlayer(autoA7178B81_g, autoA7178B81_var);
        if (autoA7178B81_var < 0) { break; }
        libNtve_gf_SetAlliance(autoA7178B81_var, gv_pLAYER_02_DOMINION, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        libNtve_gf_SetAlliance(autoA7178B81_var, gv_pLAYER_02_DOMINION2, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        libNtve_gf_SetAlliance(autoA7178B81_var, gv_pLAYER_02_DOMINION3, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        libNtve_gf_SetAlliance(autoA7178B81_var, gv_pLAYER_02_DOMINION43, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        libNtve_gf_SetAlliance(autoA7178B81_var, gv_pLAYER_02_DOMINION42, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        libNtve_gf_SetAllianceOneWay(autoA7178B81_var, gv_pLAYER_02_DOMINION422, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(autoA7178B81_var, gv_pLAYER_02_DOMINION423, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    }
    PlayerGroupAdd(lv_visionGroup, gv_pLAYER_02_DOMINION);
    PlayerGroupAdd(lv_visionGroup, gv_pLAYER_02_DOMINION2);
    PlayerGroupAdd(lv_visionGroup, gv_pLAYER_02_DOMINION3);
    PlayerGroupAdd(lv_visionGroup, gv_pLAYER_02_DOMINION43);
    PlayerGroupAdd(lv_visionGroup, gv_pLAYER_02_DOMINION42);
    PlayerGroupAdd(lv_visionGroup, gv_pLAYER_02_DOMINION423);
    libSwaC_gf_ShareVisionAmongPlayers(lv_visionGroup);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 250);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 100);
    auto13297558_g = gv_dominionPlayerGroup;
    auto13297558_var = -1;
    while (true) {
        auto13297558_var = PlayerGroupNextPlayer(auto13297558_g, auto13297558_var);
        if (auto13297558_var < 0) { break; }
        PlayerModifyPropertyInt(auto13297558_var, c_playerPropMinerals, c_playerPropOperSetTo, 50000);
        PlayerModifyPropertyInt(auto13297558_var, c_playerPropVespene, c_playerPropOperSetTo, 50000);
        PlayerModifyPropertyInt(auto13297558_var, c_playerPropSuppliesLimit, c_playerPropOperSetTo, 400);
        PlayerSetColorIndex(auto13297558_var, 1, true);
        PlayerSetState(auto13297558_var, c_playerStateFidgetingEnabled, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoD5955FDB_g;
    int autoD5955FDB_u;
    unit autoD5955FDB_var;
    unitgroup auto60484AFF_g;
    int auto60484AFF_u;
    unit auto60484AFF_var;
    unitgroup auto8B930106_g;
    int auto8B930106_u;
    unit auto8B930106_var;
    unitgroup auto5CAFDB67_g;
    int auto5CAFDB67_u;
    unit auto5CAFDB67_var;
    unitgroup autoF073D4B8_g;
    int autoF073D4B8_u;
    unit autoF073D4B8_var;
    unitgroup autoCAF15810_g;
    int autoCAF15810_u;
    unit autoCAF15810_var;
    unitgroup auto5C31A30C_g;
    int auto5C31A30C_u;
    unit auto5C31A30C_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_dominionStructuresTotal = (UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) + UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION3, RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
    libSwaC_gf_CreateHero2(PointFromId(3), gv_pLAYER_01_USER, libSwaC_ge_HeroUnit_Kerrigan, 270.0, 0, libSwaC_ge_KerriganCreatePurpose_GamePlay);
    gv_kerrigan = UnitLastCreated();
    libSwaC_gf_SetHeroPanelUnit(1, UnitLastCreated());
    autoD5955FDB_g = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD5955FDB_u = UnitGroupCount(autoD5955FDB_g, c_unitCountAll);
    for (;; autoD5955FDB_u -= 1) {
        autoD5955FDB_var = UnitGroupUnitFromEnd(autoD5955FDB_g, autoD5955FDB_u);
        if (autoD5955FDB_var == null) { break; }
        UnitSetOwner(autoD5955FDB_var, gv_pLAYER_02_DOMINION422, true);
        libNtve_gf_ShowHideUnit(autoD5955FDB_var, false);
        libNtve_gf_PauseUnit(autoD5955FDB_var, true);
        UnitSetHeight(autoD5955FDB_var, 10.0, 0.0);
    }
    auto60484AFF_g = UnitGroup("KorhalCannon", gv_pLAYER_02_DOMINION423, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto60484AFF_u = UnitGroupCount(auto60484AFF_g, c_unitCountAll);
    for (;; auto60484AFF_u -= 1) {
        auto60484AFF_var = UnitGroupUnitFromEnd(auto60484AFF_g, auto60484AFF_u);
        if (auto60484AFF_var == null) { break; }
        libNtve_gf_ChangeUnitDamage(auto60484AFF_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
        UnitSetState(auto60484AFF_var, c_unitStateTargetable, false);
    }
    gv_gateUnit[1] = UnitFromId(11);
    gv_gateUnit[2] = UnitFromId(61);
    gv_gateUnit[3] = UnitFromId(96);
    auto8B930106_g = UnitGroup("Bunker", gv_pLAYER_02_DOMINION, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8B930106_u = UnitGroupCount(auto8B930106_g, c_unitCountAll);
    for (;; auto8B930106_u -= 1) {
        auto8B930106_var = UnitGroupUnitFromEnd(auto8B930106_g, auto8B930106_u);
        if (auto8B930106_var == null) { break; }
        UnitCargoCreate(auto8B930106_var, "Marine", 4);
    }
    auto5CAFDB67_g = UnitGroup("Bunker", gv_pLAYER_02_DOMINION2, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5CAFDB67_u = UnitGroupCount(auto5CAFDB67_g, c_unitCountAll);
    for (;; auto5CAFDB67_u -= 1) {
        auto5CAFDB67_var = UnitGroupUnitFromEnd(auto5CAFDB67_g, auto5CAFDB67_u);
        if (auto5CAFDB67_var == null) { break; }
        UnitCargoCreate(auto5CAFDB67_var, "Marine", 4);
    }
    autoF073D4B8_g = UnitGroup("Bunker", gv_pLAYER_02_DOMINION3, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF073D4B8_u = UnitGroupCount(autoF073D4B8_g, c_unitCountAll);
    for (;; autoF073D4B8_u -= 1) {
        autoF073D4B8_var = UnitGroupUnitFromEnd(autoF073D4B8_g, autoF073D4B8_u);
        if (autoF073D4B8_var == null) { break; }
        UnitCargoCreate(autoF073D4B8_var, "Marine", 4);
    }
    autoCAF15810_g = UnitGroup("SCV", gv_pLAYER_02_DOMINION2, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCAF15810_u = UnitGroupCount(autoCAF15810_g, c_unitCountAll);
    for (;; autoCAF15810_u -= 1) {
        autoCAF15810_var = UnitGroupUnitFromEnd(autoCAF15810_g, autoCAF15810_u);
        if (autoCAF15810_var == null) { break; }
        AISetUnitScriptControlled(autoCAF15810_var, false);
        UnitIssueOrder(autoCAF15810_var, OrderSetAutoCast(AbilityCommand("Repair", 0), true), c_orderQueueReplace);
    }
    auto5C31A30C_g = UnitGroup("SCV", gv_pLAYER_02_DOMINION3, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5C31A30C_u = UnitGroupCount(auto5C31A30C_g, c_unitCountAll);
    for (;; auto5C31A30C_u -= 1) {
        auto5C31A30C_var = UnitGroupUnitFromEnd(auto5C31A30C_g, auto5C31A30C_u);
        if (auto5C31A30C_var == null) { break; }
        AISetUnitScriptControlled(auto5C31A30C_var, false);
        UnitIssueOrder(auto5C31A30C_var, OrderSetAutoCast(AbilityCommand("Repair", 0), true), c_orderQueueReplace);
    }
    libSwaC_gf_SetHatcheryRallyPoint(UnitFromId(107), PointFromId(955));
    UnitIssueOrder(UnitFromId(764), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init04MusicSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mapMusicTrack = "ZKorhal01MusicMain";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04MusicSound_Init () {
    gt_Init04MusicSound = TriggerCreate("gt_Init04MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("01:00:00");
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Hybrid01", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    gv_landingPoint[1] = PointFromId(243);
    gv_landingPoint[2] = PointFromId(113);
    gv_landingPoint[3] = PointFromId(111);
    gv_landingPoint[4] = PointFromId(250);
    gv_landingPoint[5] = PointFromId(277);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto5FDB5904_g;
    int auto5FDB5904_u;
    unit auto5FDB5904_var;
    unitgroup auto4DDE6AD3_g;
    int auto4DDE6AD3_u;
    unit auto4DDE6AD3_var;
    playergroup auto25770434_g;
    int auto25770434_var;
    playergroup auto16DEC3D3_g;
    int auto16DEC3D3_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        auto5FDB5904_g = UnitGroup("KorhalGateWest", gv_pLAYER_02_DOMINION43, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto5FDB5904_u = UnitGroupCount(auto5FDB5904_g, c_unitCountAll);
        for (;; auto5FDB5904_u -= 1) {
            auto5FDB5904_var = UnitGroupUnitFromEnd(auto5FDB5904_g, auto5FDB5904_u);
            if (auto5FDB5904_var == null) { break; }
            UnitSetPropertyFixed(auto5FDB5904_var, c_unitPropLifeMax, 2000.0);
            UnitSetPropertyFixed(auto5FDB5904_var, c_unitPropLifePercent, 100.0);
        }
        auto4DDE6AD3_g = UnitGroup("KorhalGateEast", gv_pLAYER_02_DOMINION43, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto4DDE6AD3_u = UnitGroupCount(auto4DDE6AD3_g, c_unitCountAll);
        for (;; auto4DDE6AD3_u -= 1) {
            auto4DDE6AD3_var = UnitGroupUnitFromEnd(auto4DDE6AD3_g, auto4DDE6AD3_u);
            if (auto4DDE6AD3_var == null) { break; }
            UnitSetPropertyFixed(auto4DDE6AD3_var, c_unitPropLifeMax, 2000.0);
            UnitSetPropertyFixed(auto4DDE6AD3_var, c_unitPropLifePercent, 100.0);
        }
    }

    auto25770434_g = gv_dominionPlayerGroup;
    auto25770434_var = -1;
    while (true) {
        auto25770434_var = PlayerGroupNextPlayer(auto25770434_g, auto25770434_var);
        if (auto25770434_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto25770434_var, "CombatShield", 1);
        TechTreeUpgradeAllow(auto25770434_var, "JackhammerConcussionGrenades", true);
        TechTreeUpgradeAddLevel(auto25770434_var, "PunisherGrenades", 1);
        TechTreeAbilityAllow(auto25770434_var, AbilityCommand("SiegeMode", 0), true);
        TechTreeUpgradeAddLevel(auto25770434_var, "SiegeTech", 1);
    }
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        auto16DEC3D3_g = gv_dominionPlayerGroup;
        auto16DEC3D3_var = -1;
        while (true) {
            auto16DEC3D3_var = PlayerGroupNextPlayer(auto16DEC3D3_g, auto16DEC3D3_var);
            if (auto16DEC3D3_var < 0) { break; }
            TechTreeUpgradeAddLevel(auto16DEC3D3_var, "TerranInfantryWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto16DEC3D3_var, "TerranInfantryArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(auto16DEC3D3_var, "TerranVehicleWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto16DEC3D3_var, "TerranVehicleArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(auto16DEC3D3_var, "TerranShipWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto16DEC3D3_var, "TerranShipArmorsLevel1", 1);
            TechTreeUpgradeAllow(auto16DEC3D3_var, "TwinLinkedFlameThrowers", true);
            TechTreeUpgradeAddLevel(auto16DEC3D3_var, "TwinLinkedFlameThrowers", 1);
            TechTreeUpgradeAllow(auto16DEC3D3_var, "ClusterWarheads", true);
            TechTreeUpgradeAddLevel(auto16DEC3D3_var, "ClusterWarheads", 1);
            TechTreeUpgradeAddLevel(auto16DEC3D3_var, "MultilockTargetingSystems", 1);
            TechTreeUpgradeAddLevel(auto16DEC3D3_var, "NeoSteelFrame", 1);
            TechTreeUpgradeAddLevel(auto16DEC3D3_var, "DualFusionWelders", 1);
            TechTreeUpgradeAddLevel(auto16DEC3D3_var, "FireSuppressionSystems", 1);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_AddMissionTipUserData("Next Landing Location");
    libSwaC_gf_AddMissionTipUserData("Bile Launcher");
    libSwaC_gf_AddMissionTipUserData("Korhal");
    libSwaC_gf_AddMissionTipUserData("Defend");
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("KorhalSporeCannon", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("SCV", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Marine", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Medic", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Marauder", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Firebat", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Hellion", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Goliath", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("SiegeTank", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Thor", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Medivac", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("VikingFighter", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Banshee", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Battlecruiser", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("PlanetaryFortress", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Bunker", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("MissileTurret", false, gv_pLAYER_01_USER);
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        libSwaC_gf_AddUnitTypeToUnitHelpPanel("Reaper", false, gv_pLAYER_01_USER);
        libSwaC_gf_AddUnitTypeToUnitHelpPanel("ScienceVessel", false, gv_pLAYER_01_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Is In Combat
//--------------------------------------------------------------------------------------------------
bool gt_PlayerIsInCombat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER) || (UnitGetOwner(EventUnitTarget()) == gv_pLAYER_01_USER)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_inCombatIndicator = 4;
    Wait(0.5, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerIsInCombat_Init () {
    gt_PlayerIsInCombat = TriggerCreate("gt_PlayerIsInCombat_Func");
    TriggerAddEventUnitAttacked(gt_PlayerIsInCombat, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Is In Combat Indicator Diminish
//--------------------------------------------------------------------------------------------------
bool gt_PlayerIsInCombatIndicatorDiminish_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_inCombatIndicator > 0)) {
        gv_inCombatIndicator = (gv_inCombatIndicator - 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerIsInCombatIndicatorDiminish_Init () {
    gt_PlayerIsInCombatIndicatorDiminish = TriggerCreate("gt_PlayerIsInCombatIndicatorDiminish_Func");
    TriggerAddEventTimePeriodic(gt_PlayerIsInCombatIndicatorDiminish, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
        libSwaC_gf_RemindPlayertoSpawnDrones(200.0, 7);
        libSwaC_gf_RemindPlayertoAssign3DronestoExtractor(UnitFromId(168), 230.0);
        libSwaC_gf_RemindPlayertoCreateAntiAirUnits();
    }

    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/3EF59700"), null, PointFromId(2));
    TriggerExecute(gt_StartHarvesting, true, false);
    Wait(3.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveDeployBileLauncherCreate, true, true);
    TriggerQueueExit();
    Wait(3.0, c_timeGame);
    TriggerExecute(gt_TipMissionHelpQ, true, false);
    Wait(3.0, c_timeGame);
    TriggerEnable(gt_UpdateBileLaunchersOwned, true);
    TriggerExecute(gt_TransmissionBileLauncherDropsQ, true, false);
    Wait(1.0, c_timeGame);
    TriggerExecute(gt_StartNextLandingTimer, true, false);
    Wait(40.0, c_timeGame);
    TriggerExecute(gt_TransmissionMengskTauntQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Harvesting
//--------------------------------------------------------------------------------------------------
bool gt_StartHarvesting_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_StartingWorkersAutoHarvest(RegionFromId(49), RegionFromId(50));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartHarvesting_Init () {
    gt_StartHarvesting = TriggerCreate("gt_StartHarvesting_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Gate Pings
//--------------------------------------------------------------------------------------------------
bool gt_CreateGatePings_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto641795E8_ae = 3;
    int auto641795E8_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto641795E8_var = 1;
    for ( ; auto641795E8_var <= auto641795E8_ae; auto641795E8_var += 1 ) {
        if ((UnitIsAlive(gv_gateUnit[auto641795E8_var]) == true)) {
            VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_gateUnit[auto641795E8_var]), 5.0), 3.0, false);
            libSwaC_gf_CreateObjectivePing(false, UnitGetPosition(gv_gateUnit[auto641795E8_var]), StringExternal("Param/Value/634EF1B5"));
            gv_gatePing[auto641795E8_var] = PingLastCreated();
            Wait(0.5, c_timeGame);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateGatePings_Init () {
    gt_CreateGatePings = TriggerCreate("gt_CreateGatePings_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gate 01 Destroyed - Zerg Invade City
//--------------------------------------------------------------------------------------------------
bool gt_Gate01DestroyedZergInvadeCity_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_RemoveInvadersAtGate01, true);
    gv_gatesDestroyed += 1;
    if ((gv_achievementLauncherCount < 5)) {
        gv_gatesDestroyedBeforeLaunchersDeployed += 1;
    }

    PingDestroy(gv_gatePing[1]);
    TriggerExecute(gt_ObjectiveDestroyGatesUpdate, true, false);
    libSwaC_gf_DisplayMissionObjectiveRewardFloatingText(UnitGetPosition(gv_kerrigan), "ZKorhal01Objective03", gv_pLAYER_01_USER);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_TransmissionGatehasbeenDestroyedQ, true, true);
    while (!((gv_inCinematic == false))) {
        Wait(1.0, c_timeGame);
    }
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(PointFromId(344), 6.0), 6.0, false);
    gf_DropP07ZergUnits(12, "Zergling", 6, "Baneling", PointFromId(342), PointFromId(347));
    Wait(1.0, c_timeGame);
    while (!((gv_inCinematic == false))) {
        Wait(1.0, c_timeGame);
    }
    gf_DropP07ZergUnits(12, "Zergling", 6, "Baneling", PointFromId(343), PointFromId(347));
    Wait(1.0, c_timeGame);
    while (!((gv_inCinematic == false))) {
        Wait(1.0, c_timeGame);
    }
    gf_DropP07ZergUnits(6, "Baneling", 6, "Baneling", PointFromId(344), PointFromId(347));
    Wait(1.5, c_timeGame);
    SoundPlayAtPoint(SoundLink("ZergArmy_Cheer_StormGates", -1), PlayerGroupAll(), Point(147.5, 71.5), 0.0, 100.0, 0.0);
    while (!((gv_inCinematic == false))) {
        Wait(1.0, c_timeGame);
    }
    gf_DropP07ZergUnits(11, "Hydralisk", 8, "Roach", PointFromId(361), PointFromId(347));
    Wait(1.5, c_timeGame);
    while (!((gv_inCinematic == false))) {
        Wait(1.0, c_timeGame);
    }
    if ((gv_gatesDestroyed == 3)) {
        gf_DropP07ZergUnits(10, "Zergling", 1, "ZaGara", PointFromId(362), PointFromId(347));
    }
    else {
        gf_DropP07ZergUnits(10, "Zergling", 0, null, PointFromId(362), PointFromId(347));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Gate01DestroyedZergInvadeCity_Init () {
    gt_Gate01DestroyedZergInvadeCity = TriggerCreate("gt_Gate01DestroyedZergInvadeCity_Func");
    TriggerAddEventUnitDied(gt_Gate01DestroyedZergInvadeCity, UnitRefFromUnit(UnitFromId(11)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gate 02 Destroyed - Zerg Invade City
//--------------------------------------------------------------------------------------------------
bool gt_Gate02DestroyedZergInvadeCity_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_RemoveInvadersAtGate02, true);
    gv_gatesDestroyed += 1;
    if ((gv_achievementLauncherCount < 5)) {
        gv_gatesDestroyedBeforeLaunchersDeployed += 1;
    }

    PingDestroy(gv_gatePing[2]);
    TriggerExecute(gt_ObjectiveDestroyGatesUpdate, true, false);
    libSwaC_gf_DisplayMissionObjectiveRewardFloatingText(UnitGetPosition(gv_kerrigan), "ZKorhal01Objective03", gv_pLAYER_01_USER);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_TransmissionGatehasbeenDestroyedQ, true, true);
    while (!((gv_inCinematic == false))) {
        Wait(1.0, c_timeGame);
    }
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(PointFromId(427), 6.0), 6.0, false);
    gf_DropP07ZergUnits(12, "InfestedCivilian", 9, "InfestedTerranCampaign", PointFromId(425), PointFromId(437));
    Wait(1.0, c_timeGame);
    while (!((gv_inCinematic == false))) {
        Wait(1.0, c_timeGame);
    }
    gf_DropP07ZergUnits(12, "InfestedCivilian", 9, "InfestedTerranCampaign", PointFromId(426), PointFromId(437));
    Wait(1.0, c_timeGame);
    while (!((gv_inCinematic == false))) {
        Wait(1.0, c_timeGame);
    }
    gf_DropP07ZergUnits(5, "Infestor", 3, "InfestedAbomination", PointFromId(427), PointFromId(437));
    Wait(1.5, c_timeGame);
    SoundPlayAtPoint(SoundLink("ZergArmy_Cheer_StormGates", -1), PlayerGroupAll(), Point(33.5, 126.5), 0.0, 100.0, 0.0);
    while (!((gv_inCinematic == false))) {
        Wait(1.0, c_timeGame);
    }
    gf_DropP07ZergUnits(12, "InfestedCivilian", 3, "InfestedAbomination", PointFromId(428), PointFromId(437));
    Wait(1.5, c_timeGame);
    while (!((gv_inCinematic == false))) {
        Wait(1.0, c_timeGame);
    }
    if ((gv_gatesDestroyed == 3)) {
        gf_DropP07ZergUnits(12, "InfestedTerranCampaign", 1, "ZaGara", PointFromId(432), PointFromId(437));
    }
    else {
        gf_DropP07ZergUnits(12, "InfestedTerranCampaign", 1, "InfestedStukov", PointFromId(432), PointFromId(437));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Gate02DestroyedZergInvadeCity_Init () {
    gt_Gate02DestroyedZergInvadeCity = TriggerCreate("gt_Gate02DestroyedZergInvadeCity_Func");
    TriggerAddEventUnitDied(gt_Gate02DestroyedZergInvadeCity, UnitRefFromUnit(UnitFromId(61)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gate 03 Destroyed - Zerg Invade City
//--------------------------------------------------------------------------------------------------
bool gt_Gate03DestroyedZergInvadeCity_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_dropGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dropGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_RemoveInvadersAtGate03, true);
    gv_gatesDestroyed += 1;
    if ((gv_achievementLauncherCount < 5)) {
        gv_gatesDestroyedBeforeLaunchersDeployed += 1;
    }

    PingDestroy(gv_gatePing[3]);
    TriggerExecute(gt_ObjectiveDestroyGatesUpdate, true, false);
    libSwaC_gf_DisplayMissionObjectiveRewardFloatingText(UnitGetPosition(gv_kerrigan), "ZKorhal01Objective03", gv_pLAYER_01_USER);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_TransmissionGatehasbeenDestroyedQ, true, true);
    while (!((gv_inCinematic == false))) {
        Wait(1.0, c_timeGame);
    }
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(PointFromId(441), 6.0), 6.0, false);
    gf_DropP07ZergUnits(8, "Zergling", 5, "Roach", PointFromId(439), PointFromId(438));
    Wait(1.0, c_timeGame);
    while (!((gv_inCinematic == false))) {
        Wait(1.0, c_timeGame);
    }
    gf_DropP07ZergUnits(2, "Ultralisk", 1, "Ultralisk", PointFromId(440), PointFromId(438));
    Wait(1.0, c_timeGame);
    while (!((gv_inCinematic == false))) {
        Wait(1.0, c_timeGame);
    }
    gf_DropP07ZergUnits(8, "Zergling", 5, "Hydralisk", PointFromId(441), PointFromId(438));
    Wait(1.5, c_timeGame);
    SoundPlayAtPoint(SoundLink("ZergArmy_Cheer_StormGates", -1), PlayerGroupAll(), Point(98.5, 138.5), 0.0, 100.0, 0.0);
    while (!((gv_inCinematic == false))) {
        Wait(1.0, c_timeGame);
    }
    gf_DropP07ZergUnits(2, "Ultralisk", 1, "Ultralisk", PointFromId(444), PointFromId(438));
    Wait(1.5, c_timeGame);
    while (!((gv_inCinematic == false))) {
        Wait(1.0, c_timeGame);
    }
    if ((gv_gatesDestroyed == 3)) {
        gf_DropP07ZergUnits(8, "Zergling", 1, "ZaGara", PointFromId(445), PointFromId(438));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Gate03DestroyedZergInvadeCity_Init () {
    gt_Gate03DestroyedZergInvadeCity = TriggerCreate("gt_Gate03DestroyedZergInvadeCity_Func");
    TriggerAddEventUnitDied(gt_Gate03DestroyedZergInvadeCity, UnitRefFromUnit(UnitFromId(96)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Invaders At Gate01
//--------------------------------------------------------------------------------------------------
bool gt_RemoveInvadersAtGate01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto75C24B17_g;
    int auto75C24B17_u;
    unit auto75C24B17_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION422, RegionFromId(25), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto75C24B17_g = UnitGroup(null, gv_pLAYER_02_DOMINION422, RegionFromId(25), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto75C24B17_u = UnitGroupCount(auto75C24B17_g, c_unitCountAll);
    for (;; auto75C24B17_u -= 1) {
        auto75C24B17_var = UnitGroupUnitFromEnd(auto75C24B17_g, auto75C24B17_u);
        if (auto75C24B17_var == null) { break; }
        UnitRemove(auto75C24B17_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveInvadersAtGate01_Init () {
    gt_RemoveInvadersAtGate01 = TriggerCreate("gt_RemoveInvadersAtGate01_Func");
    TriggerEnable(gt_RemoveInvadersAtGate01, false);
    TriggerAddEventTimePeriodic(gt_RemoveInvadersAtGate01, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Invaders At Gate02
//--------------------------------------------------------------------------------------------------
bool gt_RemoveInvadersAtGate02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto2656A4EB_g;
    int auto2656A4EB_u;
    unit auto2656A4EB_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION422, RegionFromId(26), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto2656A4EB_g = UnitGroup(null, gv_pLAYER_02_DOMINION422, RegionFromId(26), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2656A4EB_u = UnitGroupCount(auto2656A4EB_g, c_unitCountAll);
    for (;; auto2656A4EB_u -= 1) {
        auto2656A4EB_var = UnitGroupUnitFromEnd(auto2656A4EB_g, auto2656A4EB_u);
        if (auto2656A4EB_var == null) { break; }
        UnitRemove(auto2656A4EB_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveInvadersAtGate02_Init () {
    gt_RemoveInvadersAtGate02 = TriggerCreate("gt_RemoveInvadersAtGate02_Func");
    TriggerEnable(gt_RemoveInvadersAtGate02, false);
    TriggerAddEventTimePeriodic(gt_RemoveInvadersAtGate02, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Invaders At Gate03
//--------------------------------------------------------------------------------------------------
bool gt_RemoveInvadersAtGate03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto32B08102_g;
    int auto32B08102_u;
    unit auto32B08102_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION422, RegionFromId(27), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto32B08102_g = UnitGroup(null, gv_pLAYER_02_DOMINION422, RegionFromId(27), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto32B08102_u = UnitGroupCount(auto32B08102_g, c_unitCountAll);
    for (;; auto32B08102_u -= 1) {
        auto32B08102_var = UnitGroupUnitFromEnd(auto32B08102_g, auto32B08102_u);
        if (auto32B08102_var == null) { break; }
        UnitRemove(auto32B08102_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveInvadersAtGate03_Init () {
    gt_RemoveInvadersAtGate03 = TriggerCreate("gt_RemoveInvadersAtGate03_Func");
    TriggerEnable(gt_RemoveInvadersAtGate03, false);
    TriggerAddEventTimePeriodic(gt_RemoveInvadersAtGate03, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gate Intro Proximity Safety
//--------------------------------------------------------------------------------------------------
bool gt_GateIntroProximitySafety_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionDestroyGatesIntroQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GateIntroProximitySafety_Init () {
    gt_GateIntroProximitySafety = TriggerCreate("gt_GateIntroProximitySafety_Func");
    TriggerAddEventUnitRegion(gt_GateIntroProximitySafety, null, RegionFromId(24), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Next Landing Timer
//--------------------------------------------------------------------------------------------------
bool gt_StartNextLandingTimer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_time;

    // Automatic Variable Declarations
    int autoC934BB38_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((ObjectiveGetState(gv_objectiveDestroyDominionBase) != c_objectiveStateCompleted))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoC934BB38_val = TriggerGetExecCount(TriggerGetCurrent());
    if (autoC934BB38_val == 0) {
        lv_time = 120.0;
    }
    else if (autoC934BB38_val == 1) {
        lv_time = 180.0;
    }
    else if (autoC934BB38_val == 2) {
        lv_time = 240.0;
    }
    else if (autoC934BB38_val == 3) {
        lv_time = 300.0;
    }
    else if (autoC934BB38_val == 4) {
        lv_time = 300.0;
    }
    else {
        lv_time = 240.0;
    }
    TimerStart(gv_dropTimer, lv_time, false, c_timeAI);
    TimerStart(gv_dropWarningTimer, (lv_time - 15.0), false, c_timeAI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartNextLandingTimer_Init () {
    gt_StartNextLandingTimer = TriggerCreate("gt_StartNextLandingTimer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bile Launcher Landings
//--------------------------------------------------------------------------------------------------
bool gt_BileLauncherLandings_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((ObjectiveGetState(gv_objectiveDestroyDominionBase) != c_objectiveStateCompleted))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerWindowShow(gv_dropTimerWindow, PlayerGroupSingle(gv_pLAYER_01_USER), false);
    PingDestroy(gv_nextLandingPing);
    libNtve_gf_KillModel(gv_nextLandingModel);
    TextTagDestroy(gv_nextLandingTextTag);
    if ((gv_dropNumber <= 5)) {
        TriggerExecute(gt_LandingsOrdered, true, false);
    }
    else if ((gv_dropNumber > 5)) {
        TriggerExecute(gt_LandingsRepeat, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BileLauncherLandings_Init () {
    gt_BileLauncherLandings = TriggerCreate("gt_BileLauncherLandings_Func");
    TriggerAddEventTimer(gt_BileLauncherLandings, gv_dropTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Landings (Ordered)
//--------------------------------------------------------------------------------------------------
bool gt_LandingsOrdered_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto647E7DC6_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((ObjectiveGetState(gv_objectiveDestroyDominionBase) != c_objectiveStateCompleted))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_StartNextLandingTimer, true, false);
    auto647E7DC6_val = gv_dropNumber;
    if (auto647E7DC6_val == 1) {
        TriggerExecute(gt_DropBileLauncher01, true, true);
        Wait(45.0, c_timeGame);
        TriggerExecute(gt_ShowNextLanding, true, false);
    }
    else if (auto647E7DC6_val == 2) {
        TriggerExecute(gt_DropBileLauncher02, true, true);
        Wait(45.0, c_timeGame);
        TriggerExecute(gt_ShowNextLanding, true, false);
    }
    else if (auto647E7DC6_val == 3) {
        TriggerExecute(gt_DropBileLauncher03, true, true);
        Wait(45.0, c_timeGame);
        TriggerExecute(gt_ShowNextLanding, true, false);
        TriggerExecute(gt_TransmissionEnemyTerritory1Q, true, false);
    }
    else if (auto647E7DC6_val == 4) {
        TriggerExecute(gt_DropBileLauncher04, true, true);
        Wait(75.0, c_timeGame);
        TriggerExecute(gt_ShowNextLanding, true, false);
        TriggerExecute(gt_TransmissionEnemyTerritory2Q, true, false);
    }
    else if (auto647E7DC6_val == 5) {
        if ((gv_bileLaunchersOwned == 4)) {
            cai_wave_enable(4, gv_pLAYER_02_DOMINION, true);
            cai_wave_run(4, gv_pLAYER_02_DOMINION, PlayerGroupSingle(gv_pLAYER_01_USER), false);
        }

        TriggerExecute(gt_DropBileLauncher05, true, true);
        if ((gv_bileLaunchersOwned == 4)) {
            Wait(150.0, c_timeGame);
        }
        else {
            Wait(75.0, c_timeGame);
        }
        TriggerExecute(gt_ShowNextLanding, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LandingsOrdered_Init () {
    gt_LandingsOrdered = TriggerCreate("gt_LandingsOrdered_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Landings (Repeat)
//--------------------------------------------------------------------------------------------------
bool gt_LandingsRepeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((ObjectiveGetState(gv_objectiveDestroyDominionBase) != c_objectiveStateCompleted))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_bileLaunchersOwned == 4)) {
        cai_wave_enable(4, gv_pLAYER_02_DOMINION, true);
        cai_wave_run(4, gv_pLAYER_02_DOMINION, PlayerGroupSingle(gv_pLAYER_01_USER), false);
    }

    TriggerExecute(gt_DropBileLauncherREPEAT, true, true);
    TriggerExecute(gt_StartNextLandingTimer, true, false);
    if ((gv_bileLaunchersOwned == 4)) {
        Wait(150.0, c_timeGame);
    }
    else {
        Wait(75.0, c_timeGame);
    }
    if ((gv_bileLaunchersOwned == 5)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    else {
        TriggerExecute(gt_ShowNextLanding, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LandingsRepeat_Init () {
    gt_LandingsRepeat = TriggerCreate("gt_LandingsRepeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show Next Landing
//--------------------------------------------------------------------------------------------------
bool gt_ShowNextLanding_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoDD552FEF_ae = 5;
    int autoDD552FEF_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((ObjectiveGetState(gv_objectiveDestroyDominionBase) != c_objectiveStateCompleted))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_dropNumber += 1;
    if ((gv_dropNumber <= 5)) {
        gv_nextDropLocation = gv_landingPoint[gv_dropNumber];
    }
    else {
        autoDD552FEF_var = 1;
        for ( ; autoDD552FEF_var <= autoDD552FEF_ae; autoDD552FEF_var += 1 ) {
            if ((UnitIsAlive(gv_bileLaunchers[autoDD552FEF_var]) == false)) {
                gv_nextDropLocation = gv_landingPoint[autoDD552FEF_var];
                break;
            }

        }
    }
    Wait(1.0, c_timeGame);
    gf_CreateNextDropIndicator(gv_nextDropLocation);
    if ((gv_dropNumber != 1)) {
        TimerWindowShow(gv_dropTimerWindow, PlayerGroupSingle(gv_pLAYER_01_USER), true);
    }
    else {
        TimerWindowShow(gv_dropTimerWindow, PlayerGroupSingle(gv_pLAYER_01_USER), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowNextLanding_Init () {
    gt_ShowNextLanding = TriggerCreate("gt_ShowNextLanding_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Expansion 1 Cleared
//--------------------------------------------------------------------------------------------------
bool gt_Expansion1Cleared_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionFromId(6), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(6), false);
    PingDestroy(gv_enemyTerritoryPing[1]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Expansion1Cleared_Init () {
    gt_Expansion1Cleared = TriggerCreate("gt_Expansion1Cleared_Func");
    TriggerEnable(gt_Expansion1Cleared, false);
    TriggerAddEventTimePeriodic(gt_Expansion1Cleared, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Expansion 2 Cleared
//--------------------------------------------------------------------------------------------------
bool gt_Expansion2Cleared_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionFromId(13), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION3, RegionFromId(13), false);
    PingDestroy(gv_enemyTerritoryPing[2]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Expansion2Cleared_Init () {
    gt_Expansion2Cleared = TriggerCreate("gt_Expansion2Cleared_Func");
    TriggerEnable(gt_Expansion2Cleared, false);
    TriggerAddEventTimePeriodic(gt_Expansion2Cleared, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Drop Bile Launcher 01
//--------------------------------------------------------------------------------------------------
bool gt_DropBileLauncher01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto88DCF40F_n;
    int auto88DCF40F_i;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_DropCreepTumor(PointFromId(242));
    auto88DCF40F_n = libNtve_gf_DifficultyValueInt(2, 2, 1, 0);
    for (auto88DCF40F_i = 1; auto88DCF40F_i <= auto88DCF40F_n; auto88DCF40F_i += 1) {
        UnitCreate(1, "Overlord", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(22)), libNtve_gf_RandomAngle());
        libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
        UnitSetHeight(UnitLastCreated(), 10.0, 0.0);
        UnitSetHeight(UnitLastCreated(), 3.75, 2.0);
        Wait(0.1, c_timeGame);
        libNtve_gf_ShowHideUnit(UnitLastCreated(), true);
    }
    Wait(libHots_gf_DifficultyValueFixed2(1.3, 1.3, 1.4), c_timeGame);
    gf_DropZergUnits(libNtve_gf_DifficultyValueInt(1, 1, 1, 2), libNtve_gf_DifficultyValueUnitType("Roach", "Roach", "Roach", "Zergling"), PointFromId(246));
    Wait(1.5, c_timeGame);
    gf_DropZergUnits(libNtve_gf_DifficultyValueInt(4, 4, 4, 2), "Zergling", PointFromId(245));
    Wait(5.0, c_timeGame);
    gf_DropBileLauncher(1, PointFromId(243));
    Wait(1.0, c_timeGame);
    gf_DropSpineCrawler(PointFromId(985));
    Wait(1.0, c_timeGame);
    gf_DropSpineCrawler(PointFromId(1066));
    Wait(5.0, c_timeGame);
    TriggerExecute(gt_TransmissionBileLauncherLossQ, true, false);
    TriggerEnable(gt_BileLaunchersAttackAirDefenseCannons, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DropBileLauncher01_Init () {
    gt_DropBileLauncher01 = TriggerCreate("gt_DropBileLauncher01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Drop Bile Launcher 02
//--------------------------------------------------------------------------------------------------
bool gt_DropBileLauncher02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_DropCreepTumor(PointFromId(112));
    Wait(2.0, c_timeGame);
    gf_DropZergUnits(libNtve_gf_DifficultyValueInt(3, 3, 2, 2), libNtve_gf_DifficultyValueUnitType("Hydralisk", "Hydralisk", "Hydralisk", "Zergling"), PointFromId(248));
    Wait(5.0, c_timeGame);
    gf_DropBileLauncher(2, PointFromId(113));
    Wait(1.0, c_timeGame);
    gf_DropSpineCrawler(PointFromId(1087));
    Wait(1.0, c_timeGame);
    gf_DropSpineCrawler(PointFromId(1121));
    Wait(20.0, c_timeGame);
    TriggerExecute(gt_TransmissionDestroyGatesIntroQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DropBileLauncher02_Init () {
    gt_DropBileLauncher02 = TriggerCreate("gt_DropBileLauncher02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Drop Bile Launcher 03
//--------------------------------------------------------------------------------------------------
bool gt_DropBileLauncher03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto6767A8C2_n;
    int auto6767A8C2_i;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_DropCreepTumor(PointFromId(78));
    auto6767A8C2_n = libNtve_gf_DifficultyValueInt(3, 3, 2, 0);
    for (auto6767A8C2_i = 1; auto6767A8C2_i <= auto6767A8C2_n; auto6767A8C2_i += 1) {
        UnitCreate(1, "Overlord", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(22)), libNtve_gf_RandomAngle());
        libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
        UnitSetHeight(UnitLastCreated(), 10.0, 0.0);
        UnitSetHeight(UnitLastCreated(), 3.75, 2.0);
        Wait(0.1, c_timeGame);
        libNtve_gf_ShowHideUnit(UnitLastCreated(), true);
    }
    Wait(libHots_gf_DifficultyValueFixed2(1.2, 1.2, 1.3), c_timeGame);
    if ((libNtve_gf_DifficultyValueInt(1, 1, 1, 0) == 1)) {
        gf_DropZergUnits(libNtve_gf_DifficultyValueInt(1, 1, 1, 0), "Ultralisk", PointFromId(715));
    }

    Wait(1.0, c_timeGame);
    if ((libNtve_gf_DifficultyValueInt(1, 1, 1, 0) == 1)) {
        gf_DropZergUnits(libNtve_gf_DifficultyValueInt(1, 1, 1, 0), "Ultralisk", PointFromId(181));
    }

    Wait(5.0, c_timeGame);
    gf_DropBileLauncher(3, PointFromId(111));
    Wait(5.0, c_timeGame);
    libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/AAC0B496"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DropBileLauncher03_Init () {
    gt_DropBileLauncher03 = TriggerCreate("gt_DropBileLauncher03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Drop Bile Launcher 04
//--------------------------------------------------------------------------------------------------
bool gt_DropBileLauncher04_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoDAFAF020_g;
    int autoDAFAF020_u;
    unit autoDAFAF020_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_DropCreepTumor(PointFromId(85));
    Wait(2.0, c_timeGame);
    autoDAFAF020_g = UnitGroup(null, gv_pLAYER_02_DOMINION422, RegionFromId(9), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoDAFAF020_u = UnitGroupCount(autoDAFAF020_g, c_unitCountAll);
    for (;; autoDAFAF020_u -= 1) {
        autoDAFAF020_var = UnitGroupUnitFromEnd(autoDAFAF020_g, autoDAFAF020_u);
        if (autoDAFAF020_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoDAFAF020_var, true);
        libNtve_gf_PauseUnit(autoDAFAF020_var, false);
        UnitSetHeight(autoDAFAF020_var, 3.75, 2.0);
        UnitSetOwner(autoDAFAF020_var, gv_pLAYER_01_USER, true);
    }
    Wait(5.0, c_timeGame);
    gf_DropBileLauncher(4, PointFromId(250));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DropBileLauncher04_Init () {
    gt_DropBileLauncher04 = TriggerCreate("gt_DropBileLauncher04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Drop Bile Launcher 05
//--------------------------------------------------------------------------------------------------
bool gt_DropBileLauncher05_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_DropCreepTumor(PointFromId(192));
    Wait(1.5, c_timeGame);
    gf_DropCreepTumor(PointFromId(109));
    Wait(5.0, c_timeGame);
    gf_DropBileLauncher(5, PointFromId(277));
    Wait(5.0, c_timeGame);
    libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/CCF2A598"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DropBileLauncher05_Init () {
    gt_DropBileLauncher05 = TriggerCreate("gt_DropBileLauncher05_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Drop Bile Launcher REPEAT
//--------------------------------------------------------------------------------------------------
bool gt_DropBileLauncherREPEAT_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    point auto342A9A9E_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto342A9A9E_val = gv_nextDropLocation;
    if (auto342A9A9E_val == PointFromId(243)) {
        gf_DropBileLauncher(1, PointFromId(243));
    }
    else if (auto342A9A9E_val == PointFromId(113)) {
        gf_DropBileLauncher(2, PointFromId(113));
    }
    else if (auto342A9A9E_val == PointFromId(111)) {
        gf_DropBileLauncher(3, PointFromId(111));
    }
    else if (auto342A9A9E_val == PointFromId(250)) {
        gf_DropBileLauncher(4, PointFromId(250));
    }
    else if (auto342A9A9E_val == PointFromId(277)) {
        gf_DropBileLauncher(5, PointFromId(277));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DropBileLauncherREPEAT_Init () {
    gt_DropBileLauncherREPEAT = TriggerCreate("gt_DropBileLauncherREPEAT_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bile Launcher Killed
//--------------------------------------------------------------------------------------------------
bool gt_BileLauncherKilled_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto22B0AE87_ae = 5;
    int auto22B0AE87_var;
    int autoBE1D706B_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "KorhalSporeCannon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_bileLauncherDeaths += 1;
    TriggerExecute(gt_ObjectiveBileLauncherLossUpdate, true, false);
    TriggerExecute(gt_TransmissionBileLauncherDeathQ, true, false);
    auto22B0AE87_var = 1;
    for ( ; auto22B0AE87_var <= auto22B0AE87_ae; auto22B0AE87_var += 1 ) {
        if ((UnitIsAlive(gv_bileLaunchers[auto22B0AE87_var]) == false)) {
            PingDestroy(gv_bileLauncherPing[auto22B0AE87_var]);
            autoBE1D706B_val = auto22B0AE87_var;
            if (autoBE1D706B_val == 1) {
                ActorSend(ActorFromDoodad(DoodadFromId(1074)), "SetVisibility 1");
                ActorSend(ActorFromDoodad(DoodadFromId(1074)), "SetHeight");
            }
            else if (autoBE1D706B_val == 2) {
                ActorSend(ActorFromDoodad(DoodadFromId(1073)), "SetVisibility 1");
                ActorSend(ActorFromDoodad(DoodadFromId(1073)), "SetHeight");
            }
            else if (autoBE1D706B_val == 3) {
                ActorSend(ActorFromDoodad(DoodadFromId(1075)), "SetVisibility 1");
                ActorSend(ActorFromDoodad(DoodadFromId(1075)), "SetHeight");
            }
            else if (autoBE1D706B_val == 4) {
                ActorSend(ActorFromDoodad(DoodadFromId(1077)), "SetVisibility 1");
                ActorSend(ActorFromDoodad(DoodadFromId(1077)), "SetHeight");
            }
            else if (autoBE1D706B_val == 5) {
                ActorSend(ActorFromDoodad(DoodadFromId(1076)), "SetVisibility 1");
                ActorSend(ActorFromDoodad(DoodadFromId(1076)), "SetHeight");
            }
            else {
            }
        }

    }
    if ((gv_bileLauncherDeaths == 3)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_DefeatBileLauncherDeathsFailed, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BileLauncherKilled_Init () {
    gt_BileLauncherKilled = TriggerCreate("gt_BileLauncherKilled_Func");
    TriggerAddEventUnitDied(gt_BileLauncherKilled, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bile Launchers Attack Air Defense Cannons
//--------------------------------------------------------------------------------------------------
bool gt_BileLaunchersAttackAirDefenseCannons_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(gv_bileLaunchers[1]) == true) && (libNtve_gf_UnitIsUnderConstruction(gv_bileLaunchers[1]) == false)) {
        if ((UnitIsAlive(UnitFromId(60)) == true)) {
            libNtve_gf_ChangeUnitDamage(UnitFromId(60), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
            libNtve_gf_ShareVisionofUnit(UnitFromId(60), true, gv_pLAYER_02_DOMINION422);
            UnitIssueOrder(gv_bileLaunchers[1], OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(60)), c_orderQueueReplace);
        }
        else {
            libNtve_gf_ChangeUnitDamage(UnitFromId(1129), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
            libNtve_gf_ShareVisionofUnit(UnitFromId(1129), true, gv_pLAYER_02_DOMINION422);
            UnitIssueOrder(gv_bileLaunchers[1], OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(1129)), c_orderQueueReplace);
        }
    }

    Wait(1.0, c_timeAI);
    if ((UnitIsAlive(gv_bileLaunchers[2]) == true) && (libNtve_gf_UnitIsUnderConstruction(gv_bileLaunchers[2]) == false)) {
        if ((UnitIsAlive(UnitFromId(707)) == true)) {
            libNtve_gf_ChangeUnitDamage(UnitFromId(707), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
            libNtve_gf_ShareVisionofUnit(UnitFromId(707), true, gv_pLAYER_02_DOMINION422);
            UnitIssueOrder(gv_bileLaunchers[2], OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(707)), c_orderQueueReplace);
        }
        else {
            libNtve_gf_ChangeUnitDamage(UnitFromId(443), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
            libNtve_gf_ShareVisionofUnit(UnitFromId(443), true, gv_pLAYER_02_DOMINION422);
            UnitIssueOrder(gv_bileLaunchers[2], OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(443)), c_orderQueueReplace);
        }
    }

    Wait(1.0, c_timeAI);
    if ((UnitIsAlive(gv_bileLaunchers[3]) == true) && (libNtve_gf_UnitIsUnderConstruction(gv_bileLaunchers[3]) == false)) {
        if ((UnitIsAlive(UnitFromId(1129)) == true)) {
            libNtve_gf_ChangeUnitDamage(UnitFromId(1129), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
            libNtve_gf_ShareVisionofUnit(UnitFromId(1129), true, gv_pLAYER_02_DOMINION422);
            UnitIssueOrder(gv_bileLaunchers[3], OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(1129)), c_orderQueueReplace);
        }
        else {
            libNtve_gf_ChangeUnitDamage(UnitFromId(443), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
            libNtve_gf_ShareVisionofUnit(UnitFromId(443), true, gv_pLAYER_02_DOMINION422);
            UnitIssueOrder(gv_bileLaunchers[3], OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(443)), c_orderQueueReplace);
        }
    }

    Wait(1.0, c_timeAI);
    if ((UnitIsAlive(gv_bileLaunchers[4]) == true) && (libNtve_gf_UnitIsUnderConstruction(gv_bileLaunchers[4]) == false)) {
        if ((UnitIsAlive(UnitFromId(47)) == true)) {
            libNtve_gf_ChangeUnitDamage(UnitFromId(47), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
            libNtve_gf_ShareVisionofUnit(UnitFromId(47), true, gv_pLAYER_02_DOMINION422);
            UnitIssueOrder(gv_bileLaunchers[4], OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(47)), c_orderQueueReplace);
        }
        else {
            libNtve_gf_ChangeUnitDamage(UnitFromId(1132), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
            libNtve_gf_ShareVisionofUnit(UnitFromId(1132), true, gv_pLAYER_02_DOMINION422);
            UnitIssueOrder(gv_bileLaunchers[4], OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(1132)), c_orderQueueReplace);
        }
    }

    Wait(1.0, c_timeAI);
    if ((UnitIsAlive(gv_bileLaunchers[5]) == true) && (libNtve_gf_UnitIsUnderConstruction(gv_bileLaunchers[5]) == false)) {
        if ((UnitIsAlive(UnitFromId(1110)) == true)) {
            libNtve_gf_ChangeUnitDamage(UnitFromId(1110), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
            libNtve_gf_ShareVisionofUnit(UnitFromId(1110), true, gv_pLAYER_02_DOMINION422);
            UnitIssueOrder(gv_bileLaunchers[5], OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(1110)), c_orderQueueReplace);
        }
        else {
            libNtve_gf_ChangeUnitDamage(UnitFromId(1133), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
            libNtve_gf_ShareVisionofUnit(UnitFromId(1133), true, gv_pLAYER_02_DOMINION422);
            UnitIssueOrder(gv_bileLaunchers[5], OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(1133)), c_orderQueueReplace);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BileLaunchersAttackAirDefenseCannons_Init () {
    gt_BileLaunchersAttackAirDefenseCannons = TriggerCreate("gt_BileLaunchersAttackAirDefenseCannons_Func");
    TriggerEnable(gt_BileLaunchersAttackAirDefenseCannons, false);
    TriggerAddEventTimePeriodic(gt_BileLaunchersAttackAirDefenseCannons, 8.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Bile Launchers Owned
//--------------------------------------------------------------------------------------------------
bool gt_UpdateBileLaunchersOwned_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto9EB44190_ae = 5;
    int auto9EB44190_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_bileLaunchersOwned = 0;
    auto9EB44190_var = 1;
    for ( ; auto9EB44190_var <= auto9EB44190_ae; auto9EB44190_var += 1 ) {
        if ((UnitGroupCount(UnitGroup("KorhalSporeCannon", gv_pLAYER_02_DOMINION422, RegionCircle(gv_landingPoint[auto9EB44190_var], 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            gv_bileLaunchersOwned += 1;
        }

    }
    TriggerExecute(gt_ObjectiveDeployBileLauncherUpdate, true, false);
    if ((gv_bileLaunchersOwned == libSwaC_gf_MissionObjectiveItemCount("ZKorhal01Objective01")) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION3, RegionFromId(16), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION3, RegionFromId(15), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        TimerPause(gv_dropTimer, true);
        TimerPause(gv_dropWarningTimer, true);
        TriggerEnable(gt_StartNextLandingTimer, false);
        TriggerEnable(gt_ShowNextLanding, false);
        TriggerStop(gt_ShowNextLanding);
        TriggerEnable(gt_BileLauncherKilled, false);
        TriggerEnable(gt_BileLauncherLandings, false);
        TriggerExecute(gt_ObjectiveDeployBileLauncherComplete, true, false);
        TriggerExecute(gt_ObjectiveBileLauncherLossComplete, true, true);
        TriggerExecute(gt_VictorySequence, true, false);
    }
    else {
        if ((gv_bileLaunchersOwned == libSwaC_gf_MissionObjectiveItemCount("ZKorhal01Objective01"))) {
            TriggerEnable(TriggerGetCurrent(), false);
            libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/F0E21AB9"));
            TimerPause(gv_dropTimer, true);
            TimerPause(gv_dropWarningTimer, true);
            TriggerEnable(gt_StartNextLandingTimer, false);
            TriggerEnable(gt_ShowNextLanding, false);
            TriggerStop(gt_ShowNextLanding);
            TriggerEnable(gt_BileLauncherKilled, false);
            TriggerEnable(gt_BileLauncherLandings, false);
            TriggerExecute(gt_ObjectiveDeployBileLauncherComplete, true, false);
            TriggerExecute(gt_ObjectiveBileLauncherLossComplete, true, true);
            TriggerExecute(gt_MidQ, true, false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateBileLaunchersOwned_Init () {
    gt_UpdateBileLaunchersOwned = TriggerCreate("gt_UpdateBileLaunchersOwned_Func");
    TriggerEnable(gt_UpdateBileLaunchersOwned, false);
    TriggerAddEventTimePeriodic(gt_UpdateBileLaunchersOwned, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Random Zerg Landings
//--------------------------------------------------------------------------------------------------
bool gt_RandomZergLandings_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    region autoAD8CB3EE_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, EventUnitRegion(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterSummoned - 32))), 0), c_unitCountAlive) >= 5))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.5, c_timeGame);
    autoAD8CB3EE_val = EventUnitRegion();
    if (autoAD8CB3EE_val == RegionFromId(19)) {
        if ((gv_outpostDrop[1] == false)) {
            gv_outpostDrop[1] = true;
            gf_DropZergUnits(3, "Roach", PointFromId(626));
        }

    }
    else if (autoAD8CB3EE_val == RegionFromId(21)) {
        if ((gv_outpostDrop[2] == false)) {
            gv_outpostDrop[2] = true;
            gf_DropZergUnits(5, "Zergling", PointFromId(628));
        }

    }
    else if (autoAD8CB3EE_val == RegionFromId(18)) {
        if ((gv_outpostDrop[5] == false)) {
            gv_outpostDrop[5] = true;
            gf_DropZergUnits(6, "Zergling", PointFromId(565));
        }

    }
    else if (autoAD8CB3EE_val == RegionFromId(23)) {
        if ((gv_outpostDrop[6] == false)) {
            gv_outpostDrop[6] = true;
            gf_DropZergUnits(5, "Zergling", PointFromId(630));
            Wait(2.0, c_timeGame);
            gf_DropZergUnits(3, "Hydralisk", PointFromId(631));
        }

    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RandomZergLandings_Init () {
    gt_RandomZergLandings = TriggerCreate("gt_RandomZergLandings_Func");
    TriggerAddEventUnitRegion(gt_RandomZergLandings, null, RegionFromId(19), true);
    TriggerAddEventUnitRegion(gt_RandomZergLandings, null, RegionFromId(21), true);
    TriggerAddEventUnitRegion(gt_RandomZergLandings, null, RegionFromId(18), true);
    TriggerAddEventUnitRegion(gt_RandomZergLandings, null, RegionFromId(23), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Handle Kerrigan Death
//--------------------------------------------------------------------------------------------------
bool gt_HandleKerriganDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_StartKerriganReviveCooldown();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HandleKerriganDeath_Init () {
    gt_HandleKerriganDeath = TriggerCreate("gt_HandleKerriganDeath_Func");
    TriggerAddEventUnitDied(gt_HandleKerriganDeath, UnitRefFromVariable("gv_kerrigan"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Landing Timer Window
//--------------------------------------------------------------------------------------------------
bool gt_CreateLandingTimerWindow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((ObjectiveGetState(gv_objectiveDestroyDominionBase) != c_objectiveStateCompleted))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_TimerWindowCreate2(gv_dropTimer, StringExternal("Param/Value/FE2D95A7"), false, false, libSwaC_ge_CampaignTimerPositiveNegativeOptions_Positive);
    gv_dropTimerWindow = TimerWindowLastCreated();
    TimerWindowSetFormat(gv_dropTimerWindow, StringToText("<mintotal/>:<sec2/>"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateLandingTimerWindow_Init () {
    gt_CreateLandingTimerWindow = TriggerCreate("gt_CreateLandingTimerWindow_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Crashing Zerg Drop Pods
//--------------------------------------------------------------------------------------------------
bool gt_CrashingZergDropPods_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoF4AE6384_n = 5;
    int autoF4AE6384_i;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    for (autoF4AE6384_i = 1; autoF4AE6384_i <= autoF4AE6384_n; autoF4AE6384_i += 1) {
        PlayerCreateEffectPoint(gv_pLAYER_01_USER, "ZergDropPodCrashing", RegionRandomPoint(RegionFromId(7)));
        Wait(4.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CrashingZergDropPods_Init () {
    gt_CrashingZergDropPods = TriggerCreate("gt_CrashingZergDropPods_Func");
    TriggerAddEventTimePeriodic(gt_CrashingZergDropPods, 25.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transition to Destroy Dominion Bases Q
//--------------------------------------------------------------------------------------------------
bool gt_TransitiontoDestroyDominionBasesQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_DestroyPingatDominionBase01, true);
    TriggerEnable(gt_DestroyPingatDominionBase02, true);
    if ((PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropSuppliesUsed) <= 100)) {
        TriggerExecute(gt_GivePlayerForcesIfNeeded, true, false);
    }

    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveDestroyDominionBaseCreate, true, true);
    TriggerExecute(gt_CreatePingatDominionBases, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransitiontoDestroyDominionBasesQ_Init () {
    gt_TransitiontoDestroyDominionBasesQ = TriggerCreate("gt_TransitiontoDestroyDominionBasesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Give Player Forces If Needed
//--------------------------------------------------------------------------------------------------
bool gt_GivePlayerForcesIfNeeded_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(12, "Zergling", 0, gv_pLAYER_01_USER, PointFromId(247));
    libSwaC_gf_CreateDropPod(libSwaC_ge_DropPodRace_Zerg, PointFromId(138), UnitLastCreatedGroup(), false, gv_pLAYER_01_USER);
    Wait(1.5, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Ultralisk", 0, gv_pLAYER_01_USER, PointFromId(247));
    libSwaC_gf_CreateDropPod(libSwaC_ge_DropPodRace_Zerg, PointFromId(1050), UnitLastCreatedGroup(), false, gv_pLAYER_01_USER);
    Wait(1.5, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(6, "Hydralisk", 0, gv_pLAYER_01_USER, PointFromId(247));
    libSwaC_gf_CreateDropPod(libSwaC_ge_DropPodRace_Zerg, PointFromId(1401), UnitLastCreatedGroup(), false, gv_pLAYER_01_USER);
    Wait(1.5, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(12, "Zergling", 0, gv_pLAYER_01_USER, PointFromId(247));
    libSwaC_gf_CreateDropPod(libSwaC_ge_DropPodRace_Zerg, PointFromId(1402), UnitLastCreatedGroup(), false, gv_pLAYER_01_USER);
    Wait(1.5, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Ultralisk", 0, gv_pLAYER_01_USER, PointFromId(247));
    libSwaC_gf_CreateDropPod(libSwaC_ge_DropPodRace_Zerg, PointFromId(1403), UnitLastCreatedGroup(), false, gv_pLAYER_01_USER);
    Wait(1.5, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(6, "Hydralisk", 0, gv_pLAYER_01_USER, PointFromId(247));
    libSwaC_gf_CreateDropPod(libSwaC_ge_DropPodRace_Zerg, PointFromId(1404), UnitLastCreatedGroup(), false, gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GivePlayerForcesIfNeeded_Init () {
    gt_GivePlayerForcesIfNeeded = TriggerCreate("gt_GivePlayerForcesIfNeeded_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Ping at Dominion Bases
//--------------------------------------------------------------------------------------------------
bool gt_CreatePingatDominionBases_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectivePing(true, PointFromId(795), StringExternal("Param/Value/0F351F0D"));
    gv_dominionBasePing[1] = PingLastCreated();
    libSwaC_gf_CreateObjectivePing(true, PointFromId(668), StringExternal("Param/Value/984EFCF5"));
    gv_dominionBasePing[2] = PingLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreatePingatDominionBases_Init () {
    gt_CreatePingatDominionBases = TriggerCreate("gt_CreatePingatDominionBases_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Destroy Ping at Dominion Base 01
//--------------------------------------------------------------------------------------------------
bool gt_DestroyPingatDominionBase01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionFromId(16), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_dominionBasesDestroyed += 1;
    PingDestroy(gv_dominionBasePing[1]);
    TriggerExecute(gt_ObjectiveDestroyDominionBaseUpdate, true, false);
    if ((gv_dominionBasesDestroyed == 2)) {
        TriggerExecute(gt_ObjectiveDestroyDominionBaseComplete, true, true);
        TriggerExecute(gt_VictorySequence, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DestroyPingatDominionBase01_Init () {
    gt_DestroyPingatDominionBase01 = TriggerCreate("gt_DestroyPingatDominionBase01_Func");
    TriggerEnable(gt_DestroyPingatDominionBase01, false);
    TriggerAddEventTimePeriodic(gt_DestroyPingatDominionBase01, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Destroy Ping at Dominion Base 02
//--------------------------------------------------------------------------------------------------
bool gt_DestroyPingatDominionBase02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionFromId(15), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_dominionBasesDestroyed += 1;
    PingDestroy(gv_dominionBasePing[2]);
    TriggerExecute(gt_ObjectiveDestroyDominionBaseUpdate, true, false);
    if ((gv_dominionBasesDestroyed == 2)) {
        TriggerExecute(gt_ObjectiveDestroyDominionBaseComplete, true, true);
        TriggerExecute(gt_VictorySequence, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DestroyPingatDominionBase02_Init () {
    gt_DestroyPingatDominionBase02 = TriggerCreate("gt_DestroyPingatDominionBase02_Func");
    TriggerEnable(gt_DestroyPingatDominionBase02, false);
    TriggerAddEventTimePeriodic(gt_DestroyPingatDominionBase02, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leviathan Safety
//--------------------------------------------------------------------------------------------------
bool gt_LeviathanSafety_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "HotSLeviathan"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitRegion() == RegionFromId(46))) {
        UnitSetPosition(EventUnit(), PointFromId(1411), false);
    }

    if ((EventUnitRegion() == RegionFromId(47))) {
        UnitSetPosition(EventUnit(), PointFromId(1410), false);
    }

    if ((EventUnitRegion() == RegionFromId(48))) {
        UnitSetPosition(EventUnit(), PointFromId(1081), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LeviathanSafety_Init () {
    gt_LeviathanSafety = TriggerCreate("gt_LeviathanSafety_Func");
    TriggerAddEventUnitRegion(gt_LeviathanSafety, null, RegionFromId(46), true);
    TriggerAddEventUnitRegion(gt_LeviathanSafety, null, RegionFromId(47), true);
    TriggerAddEventUnitRegion(gt_LeviathanSafety, null, RegionFromId(48), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Mengsk Taunt Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionMengskTauntQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZKorhal01MusicEvent01_BackToHell", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundPlay(SoundLink("IncomingTransmission", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 20.0, 0.15);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 20.0, 0.15);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal01|Line00052", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal01|Line00053", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionMengskTauntQ_Init () {
    gt_TransmissionMengskTauntQ = TriggerCreate("gt_TransmissionMengskTauntQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Bile Launcher Drops Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionBileLauncherDropsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal01|Line00031", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Korhal01|Line00032", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal01|Line00002", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerExecute(gt_CreateLandingTimerWindow, true, true);
    TriggerExecute(gt_ShowNextLanding, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionBileLauncherDropsQ_Init () {
    gt_TransmissionBileLauncherDropsQ = TriggerCreate("gt_TransmissionBileLauncherDropsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Bile Launcher Landing Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionBileLauncherLandingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto2092F542_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((ObjectiveGetState(gv_objectiveDestroyDominionBase) != c_objectiveStateCompleted))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    auto2092F542_val = gv_dropNumber;
    if (auto2092F542_val == 1) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal01|Line00003", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto2092F542_val == 2) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal01|Line00004", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto2092F542_val == 3) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal01|Line00005", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto2092F542_val == 4) {
        if ((gv_bileLaunchersOwned != 4)) {
            libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal01|Line00006", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else {
            libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal01|Line00009", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
    }
    else {
        if ((gv_dropNumber >= 5)) {
            if ((gv_bileLaunchersOwned != 4)) {
                libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal01|Line00008", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else {
                libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal01|Line00009", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
        }

    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionBileLauncherLandingQ_Init () {
    gt_TransmissionBileLauncherLandingQ = TriggerCreate("gt_TransmissionBileLauncherLandingQ_Func");
    TriggerAddEventTimer(gt_TransmissionBileLauncherLandingQ, gv_dropWarningTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Bile Launcher Loss Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionBileLauncherLossQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveBileLauncherLossCreate, true, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal01|Line00010", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Korhal01|Line00040", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZKorhal01MusicAlt1", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionBileLauncherLossQ_Init () {
    gt_TransmissionBileLauncherLossQ = TriggerCreate("gt_TransmissionBileLauncherLossQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Bile Launcher Death Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionBileLauncherDeathQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoCDB750A2_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    autoCDB750A2_val = gv_bileLauncherDeaths;
    if (autoCDB750A2_val == 1) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal01|Line00035", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoCDB750A2_val == 2) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal01|Line00027", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Korhal01|Line00028", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionBileLauncherDeathQ_Init () {
    gt_TransmissionBileLauncherDeathQ = TriggerCreate("gt_TransmissionBileLauncherDeathQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Destroy Gates Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionDestroyGatesIntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_CreateGatePings, true, false);
    TriggerExecute(gt_ObjectiveDestroyGatesCreate, true, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal01|Line00020", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Korhal01|Line00001", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionDestroyGatesIntroQ_Init () {
    gt_TransmissionDestroyGatesIntroQ = TriggerCreate("gt_TransmissionDestroyGatesIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Gate has been Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionGatehasbeenDestroyedQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_gatesDestroyedLocal;

    // Automatic Variable Declarations
    int autoF2229B25_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_gatesDestroyedLocal = gv_gatesDestroyed;
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    autoF2229B25_val = lv_gatesDestroyedLocal;
    if (autoF2229B25_val == 1) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal01|Line00024", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoF2229B25_val == 2) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal01|Line00022", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoF2229B25_val == 3) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal01|Line00026", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        UserDataSetInt("WriterStates", "Korhal01BonusObjectiveComplete", "Value", 1, 1);
        if ((gv_bileLaunchersOwned != 5)) {
            libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Korhal01|Line00021", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else {
            libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Korhal01|Line00055", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal01|Line00023", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionGatehasbeenDestroyedQ_Init () {
    gt_TransmissionGatehasbeenDestroyedQ = TriggerCreate("gt_TransmissionGatehasbeenDestroyedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Enemy Territory 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionEnemyTerritory1Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(PointFromId(530), 3.0), 2.0, false);
    MinimapPing(PlayerGroupSingle(gv_pLAYER_01_USER), PointFromId(530), 3.0, Color(0.00, 100.00, 0.00));
    PingCreate(PlayerGroupSingle(gv_pLAYER_01_USER), "PingAlert", PointFromId(530), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
    gv_enemyTerritoryPing[1] = PingLastCreated();
    PingSetScale(PingLastCreated(), 0.9);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/C74789B8"));
    TriggerEnable(gt_Expansion1Cleared, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    if ((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal01|Line00013", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal01|Line00017", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal01|Line00066", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionEnemyTerritory1Q_Init () {
    gt_TransmissionEnemyTerritory1Q = TriggerCreate("gt_TransmissionEnemyTerritory1Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Enemy Territory 2 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionEnemyTerritory2Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(PointFromId(542), 3.0), 2.0, false);
    MinimapPing(PlayerGroupSingle(gv_pLAYER_01_USER), PointFromId(542), 2.0, Color(0.00, 100.00, 0.00));
    PingCreate(PlayerGroupSingle(gv_pLAYER_01_USER), "PingAlert", PointFromId(542), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
    gv_enemyTerritoryPing[2] = PingLastCreated();
    PingSetScale(PingLastCreated(), 0.9);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/9C0A805B"));
    TriggerEnable(gt_Expansion2Cleared, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    if ((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionFromId(13), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal01|Line00014", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal01|Line00068", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionEnemyTerritory2Q_Init () {
    gt_TransmissionEnemyTerritory2Q = TriggerCreate("gt_TransmissionEnemyTerritory2Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Kill Team 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionKillTeam01Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal01|Line00011", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionKillTeam01Q_Init () {
    gt_TransmissionKillTeam01Q = TriggerCreate("gt_TransmissionKillTeam01Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Kill Team 02 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionKillTeam02Q_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_random;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal01|Line00012", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionKillTeam02Q_Init () {
    gt_TransmissionKillTeam02Q = TriggerCreate("gt_TransmissionKillTeam02Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Mission Help Q
//--------------------------------------------------------------------------------------------------
bool gt_TipMissionHelpQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_DisplayMissionTip(StringExternal("Param/Value/D58A20DD"));
    Wait(libSwaC_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipMissionHelpQ_Init () {
    gt_TipMissionHelpQ = TriggerCreate("gt_TipMissionHelpQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement Bile Launchers Lost
//--------------------------------------------------------------------------------------------------
bool gt_AchievementBileLaunchersLost_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libHots_gf_DifficultyValueInt2(1, 1, 1) == 1))) {
            return false;
        }

        if (!((gv_bileLauncherDeaths == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CampaignAwardAchievement("ZKorhal01_2", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementBileLaunchersLost_Init () {
    gt_AchievementBileLaunchersLost = TriggerCreate("gt_AchievementBileLaunchersLost_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement Gates Before Launchers N/H
//--------------------------------------------------------------------------------------------------
bool gt_AchievementGatesBeforeLaunchersNH_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libHots_gf_DifficultyValueInt2(0, 1, 1) == 1))) {
            return false;
        }

        if (!((gv_achievementLauncherCount < 5))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CampaignAwardAchievement("ZKorhal01_3", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementGatesBeforeLaunchersNH_Init () {
    gt_AchievementGatesBeforeLaunchersNH = TriggerCreate("gt_AchievementGatesBeforeLaunchersNH_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement Bases Before Launchers H
//--------------------------------------------------------------------------------------------------
bool gt_AchievementBasesBeforeLaunchersH_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_achievementLauncherCount < 5)) {
        if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1) && (libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionPlayableMap(), UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)) == true) && (libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_02_DOMINION3, RegionPlayableMap(), UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)) == true)) {
            libSwaC_gf_CampaignAwardAchievement("Mastery_Korhal1", gv_pLAYER_01_USER);
        }

        gv_dominionStructuresDestroyed = (gv_dominionStructuresTotal - (UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) + UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION3, RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)));
    }
    else {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementBasesBeforeLaunchersH_Init () {
    gt_AchievementBasesBeforeLaunchersH = TriggerCreate("gt_AchievementBasesBeforeLaunchersH_Func");
    TriggerAddEventUnitDied(gt_AchievementBasesBeforeLaunchersH, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Anniversary Achievement - Destroy 20 Dominion structures before 3rd Bile Launcher
//--------------------------------------------------------------------------------------------------
bool gt_AnniversaryAchievementDestroy20Dominionstructuresbefore3rdBileLauncher_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }

        if (!((gv_achievementLauncherCount < 3))) {
            return false;
        }

        if (!((libHots_gf_DifficultyValueInt2(0, 1, 1) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_anniversaryAchievementTermDominionStructuresDestroyed = (gv_anniversaryAchievementTermDominionStructuresDestroyed + 1);
    AchievementTermQuantitySet(gv_pLAYER_01_USER, "Anniversary_ZKorhal01", gv_anniversaryAchievementTermDominionStructuresDestroyed);
    TextExpressionSetToken("Param/Expression/2679F798", "A", IntToText(gv_anniversaryAchievementTermDominionStructuresDestroyed));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/2679F798"), false);
    if ((gv_dominionStructuresDestroyed == 20)) {
        libSwaC_gf_CampaignAwardAchievement("Anniversary_ZKorhal01", gv_pLAYER_01_USER);
        TriggerEnable(TriggerGetCurrent(), false);
    }

    gv_dominionStructuresDestroyed = (gv_dominionStructuresTotal - (UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) + UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION3, RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AnniversaryAchievementDestroy20Dominionstructuresbefore3rdBileLauncher_Init () {
    gt_AnniversaryAchievementDestroy20Dominionstructuresbefore3rdBileLauncher = TriggerCreate("gt_AnniversaryAchievementDestroy20Dominionstructuresbefore3rdBileLauncher_Func");
    TriggerAddEventUnitDied(gt_AnniversaryAchievementDestroy20Dominionstructuresbefore3rdBileLauncher, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement Launcher Tracking
//--------------------------------------------------------------------------------------------------
bool gt_AchievementLauncherTracking_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "KorhalSporeCannon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_achievementLauncherCount += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementLauncherTracking_Init () {
    gt_AchievementLauncherTracking = TriggerCreate("gt_AchievementLauncherTracking_Func");
    TriggerAddEventUnitConstructProgress(gt_AchievementLauncherTracking, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Largest Zerg Force
//--------------------------------------------------------------------------------------------------
bool gt_LargestZergForce_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentForce;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentForce = PlayerScoreValueGetAsInt(gv_pLAYER_01_USER, "UnitsActiveCount");
    if ((lv_currentForce > gv_largestZergForce)) {
        gv_largestZergForce = lv_currentForce;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LargestZergForce_Init () {
    gt_LargestZergForce = TriggerCreate("gt_LargestZergForce_Func");
    TriggerAddEventTimePeriodic(gt_LargestZergForce, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    cai_start("aiAC1D4E5B", gv_pLAYER_02_DOMINION);
    cai_start("ai8E40AF2E", gv_pLAYER_02_DOMINION2);
    cai_start("ai6366AE01", gv_pLAYER_02_DOMINION3);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(17), true);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(16), true);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION3, RegionFromId(15), true);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION3, RegionFromId(14), true);
    AINearestTownBullyRebuild(gv_pLAYER_02_DOMINION2, true);
    AINearestTownBullyRebuild(gv_pLAYER_02_DOMINION3, true);
    cai_waves_run(gv_pLAYER_02_DOMINION, PlayerGroupSingle(gv_pLAYER_01_USER));
    cai_waves_run(gv_pLAYER_02_DOMINION2, PlayerGroupSingle(gv_pLAYER_01_USER));
    cai_waves_run(gv_pLAYER_02_DOMINION3, PlayerGroupSingle(gv_pLAYER_01_USER));
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        TriggerExecute(gt_AIUpgradesHard, true, false);
    }
    else {
        TriggerExecute(gt_AIUpgradesNormal, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrades (Normal)
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradesNormal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoBA1432C7_g;
    int autoBA1432C7_var;
    playergroup auto75FF94D3_g;
    int auto75FF94D3_var;
    playergroup autoB2AAC8ED_g;
    int autoB2AAC8ED_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(600.0, c_timeAI);
    autoBA1432C7_g = gv_dominionPlayerGroup;
    autoBA1432C7_var = -1;
    while (true) {
        autoBA1432C7_var = PlayerGroupNextPlayer(autoBA1432C7_g, autoBA1432C7_var);
        if (autoBA1432C7_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoBA1432C7_var, "TerranInfantryWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(autoBA1432C7_var, "TerranVehicleWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(autoBA1432C7_var, "TerranShipWeaponsLevel1", 1);
    }
    Wait(300.0, c_timeAI);
    auto75FF94D3_g = gv_dominionPlayerGroup;
    auto75FF94D3_var = -1;
    while (true) {
        auto75FF94D3_var = PlayerGroupNextPlayer(auto75FF94D3_g, auto75FF94D3_var);
        if (auto75FF94D3_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto75FF94D3_var, "TerranInfantryArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(auto75FF94D3_var, "TerranVehicleArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(auto75FF94D3_var, "TerranShipArmorsLevel1", 1);
    }
    Wait(300.0, c_timeAI);
    autoB2AAC8ED_g = gv_dominionPlayerGroup;
    autoB2AAC8ED_var = -1;
    while (true) {
        autoB2AAC8ED_var = PlayerGroupNextPlayer(autoB2AAC8ED_g, autoB2AAC8ED_var);
        if (autoB2AAC8ED_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoB2AAC8ED_var, "TerranInfantryWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(autoB2AAC8ED_var, "TerranVehicleWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(autoB2AAC8ED_var, "TerranShipWeaponsLevel2", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradesNormal_Init () {
    gt_AIUpgradesNormal = TriggerCreate("gt_AIUpgradesNormal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrades (Hard)
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradesHard_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoA83F8AD7_g;
    int autoA83F8AD7_var;
    playergroup auto402B485E_g;
    int auto402B485E_var;
    playergroup auto1C812701_g;
    int auto1C812701_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(300.0, c_timeAI);
    autoA83F8AD7_g = gv_dominionPlayerGroup;
    autoA83F8AD7_var = -1;
    while (true) {
        autoA83F8AD7_var = PlayerGroupNextPlayer(autoA83F8AD7_g, autoA83F8AD7_var);
        if (autoA83F8AD7_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoA83F8AD7_var, "TerranInfantryWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(autoA83F8AD7_var, "TerranVehicleWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(autoA83F8AD7_var, "TerranShipWeaponsLevel2", 1);
    }
    Wait(300.0, c_timeAI);
    auto402B485E_g = gv_dominionPlayerGroup;
    auto402B485E_var = -1;
    while (true) {
        auto402B485E_var = PlayerGroupNextPlayer(auto402B485E_g, auto402B485E_var);
        if (auto402B485E_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto402B485E_var, "TerranInfantryArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(auto402B485E_var, "TerranVehicleArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(auto402B485E_var, "TerranShipArmorsLevel2", 1);
    }
    Wait(300.0, c_timeAI);
    auto1C812701_g = gv_dominionPlayerGroup;
    auto1C812701_var = -1;
    while (true) {
        auto1C812701_var = PlayerGroupNextPlayer(auto1C812701_g, auto1C812701_var);
        if (auto1C812701_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto1C812701_var, "TerranInfantryWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(auto1C812701_var, "TerranVehicleWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(auto1C812701_var, "TerranShipWeaponsLevel3", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradesHard_Init () {
    gt_AIUpgradesHard = TriggerCreate("gt_AIUpgradesHard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Resources
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveResources_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoF2AABA62_g;
    int autoF2AABA62_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoF2AABA62_g = gv_dominionPlayerGroup;
    autoF2AABA62_var = -1;
    while (true) {
        autoF2AABA62_var = PlayerGroupNextPlayer(autoF2AABA62_g, autoF2AABA62_var);
        if (autoF2AABA62_var < 0) { break; }
        PlayerModifyPropertyInt(autoF2AABA62_var, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
        PlayerModifyPropertyInt(autoF2AABA62_var, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveResources_Init () {
    gt_AIGiveResources = TriggerCreate("gt_AIGiveResources_Func");
    TriggerAddEventTimePeriodic(gt_AIGiveResources, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Send Kill Team 01
//--------------------------------------------------------------------------------------------------
bool gt_SendKillTeam01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoB685E356_n;
    int autoB685E356_i;
    int auto3A4C04E1_n;
    int auto3A4C04E1_i;
    int autoFE277193_n;
    int autoFE277193_i;
    unitgroup auto392DF9EF_g;
    int auto392DF9EF_u;
    unit auto392DF9EF_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoB685E356_n = libHots_gf_DifficultyValueInt2(8, 8, 10);
    for (autoB685E356_i = 1; autoB685E356_i <= autoB685E356_n; autoB685E356_i += 1) {
        UnitCreate(1, "MengskMarine", 0, gv_pLAYER_02_DOMINION, PointFromId(18), 90.0);
        UnitGroupAdd(gv_killTeam01, UnitLastCreated());
        AISetUnitScriptControlled(UnitLastCreated(), true);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(202)), c_orderQueueReplace);
        Wait(1.0, c_timeAI);
    }
    auto3A4C04E1_n = libHots_gf_DifficultyValueInt2(6, 6, 8);
    for (auto3A4C04E1_i = 1; auto3A4C04E1_i <= auto3A4C04E1_n; auto3A4C04E1_i += 1) {
        UnitCreate(1, "MengskGoliath", 0, gv_pLAYER_02_DOMINION, PointFromId(18), 90.0);
        UnitGroupAdd(gv_killTeam01, UnitLastCreated());
        AISetUnitScriptControlled(UnitLastCreated(), true);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(202)), c_orderQueueReplace);
        Wait(1.0, c_timeAI);
    }
    autoFE277193_n = libHots_gf_DifficultyValueInt2(3, 3, 4);
    for (autoFE277193_i = 1; autoFE277193_i <= autoFE277193_n; autoFE277193_i += 1) {
        UnitCreate(1, "Medivac", 0, gv_pLAYER_02_DOMINION, PointFromId(18), 90.0);
        UnitGroupAdd(gv_killTeam01, UnitLastCreated());
        AISetUnitScriptControlled(UnitLastCreated(), true);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(202)), c_orderQueueReplace);
        Wait(1.0, c_timeAI);
    }
    Wait(3.0, c_timeGame);
    if ((UnitGroupCount(gv_killTeam01, c_unitCountAlive) > 0)) {
        AIAttackWaveSetTargetUnit(gv_pLAYER_02_DOMINION, gv_kerrigan);
        auto392DF9EF_g = gv_killTeam01;
        auto392DF9EF_u = UnitGroupCount(auto392DF9EF_g, c_unitCountAll);
        for (;; auto392DF9EF_u -= 1) {
            auto392DF9EF_var = UnitGroupUnitFromEnd(auto392DF9EF_g, auto392DF9EF_u);
            if (auto392DF9EF_var == null) { break; }
            if ((UnitGetType(auto392DF9EF_var) == "Medivac")) {
                UnitGroupRemove(gv_killTeam01, auto392DF9EF_var);
            }

            AISetUnitScriptControlled(auto392DF9EF_var, false);
            AIAttackWaveUseUnit(gv_pLAYER_02_DOMINION, auto392DF9EF_var);
        }
        AIAttackWaveSend(gv_pLAYER_02_DOMINION, 0, false);
    }

    TriggerExecute(gt_KillTeam01Ping, true, false);
    TriggerExecute(gt_TransmissionKillTeam01Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SendKillTeam01_Init () {
    gt_SendKillTeam01 = TriggerCreate("gt_SendKillTeam01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Send Kill Team 02
//--------------------------------------------------------------------------------------------------
bool gt_SendKillTeam02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoDC93F9C1_n = 4;
    int autoDC93F9C1_i;
    int auto847D7EE3_n;
    int auto847D7EE3_i;
    unitgroup auto44D09FD1_g;
    int auto44D09FD1_u;
    unit auto44D09FD1_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    for (autoDC93F9C1_i = 1; autoDC93F9C1_i <= autoDC93F9C1_n; autoDC93F9C1_i += 1) {
        UnitCreate(1, "MengskBanshee", 0, gv_pLAYER_02_DOMINION, PointFromId(4), 90.0);
        UnitGroupAdd(gv_killTeam02, UnitLastCreated());
        AISetUnitScriptControlled(UnitLastCreated(), true);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(201)), c_orderQueueReplace);
        Wait(0.5, c_timeAI);
    }
    auto847D7EE3_n = libHots_gf_DifficultyValueInt2(3, 3, 4);
    for (auto847D7EE3_i = 1; auto847D7EE3_i <= auto847D7EE3_n; auto847D7EE3_i += 1) {
        UnitCreate(1, "MengskVikingFighter", 0, gv_pLAYER_02_DOMINION, PointFromId(4), 90.0);
        UnitGroupAdd(gv_killTeam02, UnitLastCreated());
        AISetUnitScriptControlled(UnitLastCreated(), true);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(201)), c_orderQueueReplace);
        Wait(0.5, c_timeAI);
    }
    Wait(3.0, c_timeGame);
    if ((UnitGroupCount(gv_killTeam02, c_unitCountAlive) > 0)) {
        AIAttackWaveSetTargetUnit(gv_pLAYER_02_DOMINION, gv_kerrigan);
        auto44D09FD1_g = gv_killTeam02;
        auto44D09FD1_u = UnitGroupCount(auto44D09FD1_g, c_unitCountAll);
        for (;; auto44D09FD1_u -= 1) {
            auto44D09FD1_var = UnitGroupUnitFromEnd(auto44D09FD1_g, auto44D09FD1_u);
            if (auto44D09FD1_var == null) { break; }
            AISetUnitScriptControlled(auto44D09FD1_var, false);
            AIAttackWaveUseUnit(gv_pLAYER_02_DOMINION, auto44D09FD1_var);
        }
        AIAttackWaveSend(gv_pLAYER_02_DOMINION, 0, false);
    }

    TriggerExecute(gt_KillTeam02Ping, true, false);
    TriggerExecute(gt_TransmissionKillTeam02Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SendKillTeam02_Init () {
    gt_SendKillTeam02 = TriggerCreate("gt_SendKillTeam02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kill Team 01 Ping
//--------------------------------------------------------------------------------------------------
bool gt_KillTeam01Ping_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoFC70B9EB_g;
    int autoFC70B9EB_u;
    unit autoFC70B9EB_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(gv_pLAYER_01_USER), "PingWarning", PointFromId(202), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    gv_killTeam01Ping = PingLastCreated();
    PingSetVisible(gv_killTeam01Ping, false);
    PingSetScale(gv_killTeam01Ping, 0.6);
    PingSetTooltip(gv_killTeam01Ping, StringExternal("Param/Value/63168C1A"));
    while (true) {
        if ((gv_gameOver == true)) {
            return true;
        }

        if ((libNtve_gf_UnitGroupIsDead(gv_killTeam01) == true)) {
            PingDestroy(gv_killTeam01Ping);
            return true;
        }
        else {
            PingSetPosition(gv_killTeam01Ping, UnitGroupCenterOfGroup(gv_killTeam01));
            PingSetVisible(gv_killTeam01Ping, true);
            autoFC70B9EB_g = gv_killTeam01;
            autoFC70B9EB_u = UnitGroupCount(autoFC70B9EB_g, c_unitCountAll);
            for (;; autoFC70B9EB_u -= 1) {
                autoFC70B9EB_var = UnitGroupUnitFromEnd(autoFC70B9EB_g, autoFC70B9EB_u);
                if (autoFC70B9EB_var == null) { break; }
                if ((UnitGetOwner(autoFC70B9EB_var) == gv_pLAYER_01_USER)) {
                    UnitGroupRemove(gv_killTeam01, autoFC70B9EB_var);
                }

            }
        }
        Wait(0.1, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KillTeam01Ping_Init () {
    gt_KillTeam01Ping = TriggerCreate("gt_KillTeam01Ping_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kill Team 02 Ping
//--------------------------------------------------------------------------------------------------
bool gt_KillTeam02Ping_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoC20B8CB3_g;
    int autoC20B8CB3_u;
    unit autoC20B8CB3_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(gv_pLAYER_01_USER), "PingWarning", PointFromId(201), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    gv_killTeam02Ping = PingLastCreated();
    PingSetVisible(gv_killTeam02Ping, false);
    PingSetScale(gv_killTeam02Ping, 0.6);
    PingSetTooltip(gv_killTeam02Ping, StringExternal("Param/Value/B1B25717"));
    while (true) {
        if ((gv_gameOver == true)) {
            return true;
        }

        if ((libNtve_gf_UnitGroupIsDead(gv_killTeam02) == true)) {
            PingDestroy(gv_killTeam02Ping);
            return true;
        }
        else {
            PingSetPosition(gv_killTeam02Ping, UnitGroupCenterOfGroup(gv_killTeam02));
            PingSetVisible(gv_killTeam02Ping, true);
            autoC20B8CB3_g = gv_killTeam02;
            autoC20B8CB3_u = UnitGroupCount(autoC20B8CB3_g, c_unitCountAll);
            for (;; autoC20B8CB3_u -= 1) {
                autoC20B8CB3_var = UnitGroupUnitFromEnd(autoC20B8CB3_g, autoC20B8CB3_u);
                if (autoC20B8CB3_var == null) { break; }
                if ((UnitGetOwner(autoC20B8CB3_var) == gv_pLAYER_01_USER)) {
                    UnitGroupRemove(gv_killTeam02, autoC20B8CB3_var);
                }

            }
        }
        Wait(0.1, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KillTeam02Ping_Init () {
    gt_KillTeam02Ping = TriggerCreate("gt_KillTeam02Ping_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    if ((UnitIsAlive(gv_kerrigan) == true)) {
        libNtve_gf_MakeUnitInvulnerable(gv_kerrigan, true);
    }

    Wait(2.0, c_timeReal);
    libSwaC_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CampaignAwardAchievement("ZKorhal01_1", gv_pLAYER_01_USER);
    TriggerExecute(gt_AchievementBileLaunchersLost, true, false);
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/BB9B49C2"), IntToText(gv_kerriganKills));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/90865FFA"), IntToText(gv_bileLauncherDeaths));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/3E1C7A4D"), IntToText(gv_gatesDestroyedBeforeLaunchersDeployed));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/9F442C12"), IntToText(PlayerScoreValueGetAsInt(gv_pLAYER_01_USER, "UnitsKilledCount")));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/2C0B91F8"), IntToText(gv_largestZergForce));
    TextExpressionSetToken("Param/Expression/8242AF3A", "Destroyed", IntToText(gv_dominionStructuresDestroyed));
    TextExpressionSetToken("Param/Expression/8242AF3A", "Total", IntToText(gv_dominionStructuresTotal));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/CA0F1C6B"), TextExpressionAssemble("Param/Expression/8242AF3A"));
    libSwaC_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Bile Launcher Deaths Failed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBileLauncherDeathsFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerExecute(gt_ObjectiveBileLauncherLossFailed, true, false);
    Wait(2.0, c_timeReal);
    libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), libSwaC_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/36B96632"), libSwaC_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBileLauncherDeathsFailed_Init () {
    gt_DefeatBileLauncherDeathsFailed = TriggerCreate("gt_DefeatBileLauncherDeathsFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), libSwaC_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/D8C342F0"), libSwaC_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_VictoryCheat, false);
    TriggerEnable(gt_DefeatCheat, false);
    TriggerEnable(gt_Defeat, false);
    gv_gameOver = true;
    libSwaC_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_VictoryCheat, false);
    TriggerEnable(gt_DefeatCheat, false);
    TriggerEnable(gt_Victory, false);
    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Deploy Bile Launcher Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDeployBileLauncherCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZKorhal01Objective01");
    gv_objectiveDestroyDominionBase = ObjectiveLastCreated();
    libSwaC_gf_SetMissionObjectiveProgress2("ZKorhal01Objective01", 0, true, null, true);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDeployBileLauncherCreate_Init () {
    gt_ObjectiveDeployBileLauncherCreate = TriggerCreate("gt_ObjectiveDeployBileLauncherCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Deploy Bile Launcher Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDeployBileLauncherComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDeployBileLauncherCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZKorhal01Objective01", libSwaC_ge_MissionObjectiveState_Completed);
    libSwaC_gf_SetMissionObjectiveProgress2("ZKorhal01Objective01", 1, false, null, false);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDeployBileLauncherComplete_Init () {
    gt_ObjectiveDeployBileLauncherComplete = TriggerCreate("gt_ObjectiveDeployBileLauncherComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Deploy Bile Launcher Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDeployBileLauncherUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((ObjectiveGetState(gv_objectiveDestroyDominionBase) == c_objectiveStateActive))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveDeployBileLauncherCreate, true, false);
    libSwaC_gf_SetMissionObjectiveProgress2("ZKorhal01Objective01", gv_bileLaunchersOwned, true, null, true);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDeployBileLauncherUpdate_Init () {
    gt_ObjectiveDeployBileLauncherUpdate = TriggerCreate("gt_ObjectiveDeployBileLauncherUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Deploy Bile Launcher Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDeployBileLauncherFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDeployBileLauncherCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZKorhal01Objective01", libSwaC_ge_MissionObjectiveState_Failed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDeployBileLauncherFailed_Init () {
    gt_ObjectiveDeployBileLauncherFailed = TriggerCreate("gt_ObjectiveDeployBileLauncherFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Bile Launcher Loss Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveBileLauncherLossCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZKorhal01Objective02");
    gv_objectiveDestroyDominionBase22 = ObjectiveLastCreated();
    libSwaC_gf_SetMissionObjectiveProgress2("ZKorhal01Objective02", gv_bileLauncherDeaths, false, StringExternal("Param/Value/8BCDCE7C"), true);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveBileLauncherLossCreate_Init () {
    gt_ObjectiveBileLauncherLossCreate = TriggerCreate("gt_ObjectiveBileLauncherLossCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Bile Launcher Loss Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveBileLauncherLossComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveBileLauncherLossCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZKorhal01Objective02", libSwaC_ge_MissionObjectiveState_Completed);
    libSwaC_gf_SetMissionObjectiveProgress2("ZKorhal01Objective02", 1, true, null, false);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveBileLauncherLossComplete_Init () {
    gt_ObjectiveBileLauncherLossComplete = TriggerCreate("gt_ObjectiveBileLauncherLossComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Bile Launcher Loss Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveBileLauncherLossUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((ObjectiveGetState(gv_objectiveDestroyDominionBase22) == c_objectiveStateActive))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveBileLauncherLossCreate, true, false);
    libSwaC_gf_SetMissionObjectiveProgress2("ZKorhal01Objective02", gv_bileLauncherDeaths, false, StringExternal("Param/Value/1F4849B5"), true);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveBileLauncherLossUpdate_Init () {
    gt_ObjectiveBileLauncherLossUpdate = TriggerCreate("gt_ObjectiveBileLauncherLossUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Bile Launcher Loss Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveBileLauncherLossFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveBileLauncherLossCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZKorhal01Objective02", libSwaC_ge_MissionObjectiveState_Failed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveBileLauncherLossFailed_Init () {
    gt_ObjectiveBileLauncherLossFailed = TriggerCreate("gt_ObjectiveBileLauncherLossFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Dominion Base Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyDominionBaseCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZKorhal01Objective04");
    gv_objectiveDestroyDominionBase2 = ObjectiveLastCreated();
    libSwaC_gf_SetMissionObjectiveProgress2("ZKorhal01Objective04", 0, true, null, true);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyDominionBaseCreate_Init () {
    gt_ObjectiveDestroyDominionBaseCreate = TriggerCreate("gt_ObjectiveDestroyDominionBaseCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Dominion Base Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyDominionBaseComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyDominionBaseCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZKorhal01Objective04", libSwaC_ge_MissionObjectiveState_Completed);
    libSwaC_gf_SetMissionObjectiveProgress2("ZKorhal01Objective04", 1, false, null, false);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyDominionBaseComplete_Init () {
    gt_ObjectiveDestroyDominionBaseComplete = TriggerCreate("gt_ObjectiveDestroyDominionBaseComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Dominion Base Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyDominionBaseUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveDestroyDominionBaseCreate, true, false);
    libSwaC_gf_SetMissionObjectiveProgress2("ZKorhal01Objective04", gv_dominionBasesDestroyed, true, null, true);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyDominionBaseUpdate_Init () {
    gt_ObjectiveDestroyDominionBaseUpdate = TriggerCreate("gt_ObjectiveDestroyDominionBaseUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Dominion Base Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyDominionBaseFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyDominionBaseCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZKorhal01Objective04", libSwaC_ge_MissionObjectiveState_Failed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyDominionBaseFailed_Init () {
    gt_ObjectiveDestroyDominionBaseFailed = TriggerCreate("gt_ObjectiveDestroyDominionBaseFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Gates Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyGatesCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZKorhal01Objective03");
    gv_objectiveDestroyDominionBase222 = ObjectiveLastCreated();
    libSwaC_gf_SetMissionObjectiveProgress2("ZKorhal01Objective03", 0, true, null, true);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyGatesCreate_Init () {
    gt_ObjectiveDestroyGatesCreate = TriggerCreate("gt_ObjectiveDestroyGatesCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Gates Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyGatesUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveDestroyGatesCreate, true, false);
    libSwaC_gf_SetMissionObjectiveProgress2("ZKorhal01Objective03", gv_gatesDestroyed, true, null, true);
    if ((gv_gatesDestroyed == 3)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_ObjectiveDestroyGatesComplete, true, false);
        TriggerExecute(gt_AchievementGatesBeforeLaunchersNH, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyGatesUpdate_Init () {
    gt_ObjectiveDestroyGatesUpdate = TriggerCreate("gt_ObjectiveDestroyGatesUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Gates Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyGatesComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyGatesCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZKorhal01Objective03", libSwaC_ge_MissionObjectiveState_Completed);
    libSwaC_gf_SetMissionObjectiveProgress2("ZKorhal01Objective03", 1, true, null, false);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyGatesComplete_Init () {
    gt_ObjectiveDestroyGatesComplete = TriggerCreate("gt_ObjectiveDestroyGatesComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto49ABAED8_g;
    int auto49ABAED8_u;
    unit auto49ABAED8_var;
    unitgroup autoC34419F9_g;
    int autoC34419F9_u;
    unit autoC34419F9_var;
    const int autoE86E6406_n = 6;
    int autoE86E6406_i;
    const int auto628A6A65_n = 7;
    int auto628A6A65_i;
    const int auto5FB70D01_n = 3;
    int auto5FB70D01_i;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UnitPauseAll(true);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    auto49ABAED8_g = gv_cinematicHiddenUnits;
    auto49ABAED8_u = UnitGroupCount(auto49ABAED8_g, c_unitCountAll);
    for (;; auto49ABAED8_u -= 1) {
        auto49ABAED8_var = UnitGroupUnitFromEnd(auto49ABAED8_g, auto49ABAED8_u);
        if (auto49ABAED8_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto49ABAED8_var, false);
    }
    CreepModify(PointFromId(2), 24.0, false, false);
    gv_introMinerals = PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 1000);
    libSwaC_gf_EnableDisableZerglingRespawn(false);
    UnitCreate(1, "Marine", 0, gv_pLAYER_02_DOMINION, PointFromId(665), 225.0);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitGroupAdd(gv_introDominionAttackers, UnitLastCreated());
    UnitCreate(1, "Marine", 0, gv_pLAYER_02_DOMINION, PointFromId(1351), 225.0);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitGroupAdd(gv_introDominionAttackers, UnitLastCreated());
    UnitCreate(1, "Marauder", 0, gv_pLAYER_02_DOMINION, PointFromId(227), 225.0);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitGroupAdd(gv_introDominionAttackers, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CommandCenter", 0, gv_pLAYER_02_DOMINION, PointFromId(992));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Barracks", 0, gv_pLAYER_02_DOMINION, PointFromId(993));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Barracks", 0, gv_pLAYER_02_DOMINION, PointFromId(994));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "EngineeringBay", 0, gv_pLAYER_02_DOMINION, PointFromId(995));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Factory", 0, gv_pLAYER_02_DOMINION, PointFromId(996));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SupplyDepot", 0, gv_pLAYER_02_DOMINION, PointFromId(997));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SupplyDepot", 0, gv_pLAYER_02_DOMINION, PointFromId(998));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SupplyDepot", 0, gv_pLAYER_02_DOMINION, PointFromId(999));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SupplyDepot", 0, gv_pLAYER_02_DOMINION, PointFromId(1000));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SupplyDepot", 0, gv_pLAYER_02_DOMINION, PointFromId(1001));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SupplyDepot", 0, gv_pLAYER_02_DOMINION, PointFromId(1002));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SupplyDepot", 0, gv_pLAYER_02_DOMINION, PointFromId(1003));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    autoC34419F9_g = UnitGroup("MineralField", c_playerAny, RegionFromId(8), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 15);
    autoC34419F9_u = UnitGroupCount(autoC34419F9_g, c_unitCountAll);
    for (;; autoC34419F9_u -= 1) {
        autoC34419F9_var = UnitGroupUnitFromEnd(autoC34419F9_g, autoC34419F9_u);
        if (autoC34419F9_var == null) { break; }
        gv_introNumberOfMineralFields += 1;
        gv_introMineralFields[gv_introNumberOfMineralFields] = autoC34419F9_var;
        gv_introMineralFieldAmounts[gv_introNumberOfMineralFields] = UnitGetPropertyFixed(autoC34419F9_var, c_unitPropResources, c_unitPropCurrent);
    }
    for (autoE86E6406_i = 1; autoE86E6406_i <= autoE86E6406_n; autoE86E6406_i += 1) {
        UnitCreate(1, "SCV", 0, gv_pLAYER_02_DOMINION, RegionRandomPoint(RegionFromId(11)), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    }
    for (auto628A6A65_i = 1; auto628A6A65_i <= auto628A6A65_n; auto628A6A65_i += 1) {
        UnitCreate(1, "Marine", 0, gv_pLAYER_02_DOMINION, RegionRandomPoint(RegionFromId(10)), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    }
    for (auto5FB70D01_i = 1; auto5FB70D01_i <= auto5FB70D01_n; auto5FB70D01_i += 1) {
        UnitCreate(1, "Marauder", 0, gv_pLAYER_02_DOMINION, RegionRandomPoint(RegionFromId(10)), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    }
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionFromId(8), gv_pLAYER_02_DOMINION);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto198EEB3E_g;
    int auto198EEB3E_u;
    unit auto198EEB3E_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1352), 0.0, -1, 10.0, true);
    CameraSetValue(1, c_cameraValueDistance, (CameraInfoGetValue(CameraInfoFromId(1352), c_cameraValueDistance)+50.0), 1.5, -1, 10.0);
    ActorSend(ActorFromDoodad(DoodadFromId(1074)), "SetVisibility");
    ActorSend(ActorFromDoodad(DoodadFromId(1074)), "SetHeight -1.000000");
    FogSetEnabled(false);
    TriggerExecute(gt_IntroMusic, true, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    TriggerExecute(gt_IntroDropPod, true, false);
    CinematicFade(true, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    libSwaC_gf_CampaignPlayCutscene2("Cutscenes\\zLD_Korhal1_DropPodCutscene.SC2Cutscene", true, true);
    FogSetEnabled(true);
    Wait(2.0, c_timeReal);
    gv_introCutsceneCompleted = true;
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1353), (SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Korhal01|Line00025", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Korhal01|Line00006", true), c_soundIndexAny))), -1, 10.0, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicInTransmission);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Korhal01|Line00025", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(UnitGroupUnit(gv_introDominionAttackers, 1), "zBriefing_Korhal01|Line00006", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_DontShowPortrait, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(1.0, c_timeReal);
    libNtve_gf_ChangeUnitDamage(gv_introBileLauncher, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    UnitSetPropertyFixed(gv_introBileLauncher, c_unitPropLife, 1.0);
    Wait(1.0, c_timeReal);
    UnitGroupIssueOrder(gv_introDominionAttackers, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(227)), c_orderQueueReplace);
    UnitGroupIssueOrder(gv_introDominionAttackers, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(243)), c_orderQueueAddToEnd);
    auto198EEB3E_g = UnitGroup("CreepTumorBurrowed", c_playerAny, RegionCircle(PointFromId(243), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto198EEB3E_u = UnitGroupCount(auto198EEB3E_g, c_unitCountAll);
    for (;; auto198EEB3E_u -= 1) {
        auto198EEB3E_var = UnitGroupUnitFromEnd(auto198EEB3E_g, auto198EEB3E_u);
        if (auto198EEB3E_var == null) { break; }
        UnitRemove(auto198EEB3E_var);
    }
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Korhal01|Line00027", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zBriefing_Korhal01|Line00026", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicOutofTransmission);
    libSwaC_gf_CreateDropPod(libSwaC_ge_DropPodRace_Zerg, PointFromId(3), UnitGroupEmpty(), false, gv_pLAYER_01_USER);
    TriggerExecute(gt_IntroDominionMovement, true, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(272), 0.0, -1, 10.0, true);
    CameraShake(gv_pLAYER_01_USER, "Light", "SubtleMove", 0.5, 0.5, 4.0);
    Wait(3.0, c_timeGame);
    TriggerExecute(gt_IntroExplosion, true, false);
    TriggerExecute(gt_IntroZerg, true, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(273), 1.5, -1, 10.0, true);
    Wait(6.0, c_timeReal);
    libNtve_gf_PauseUnit(gv_kerrigan, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1004), 4.0, -1, 10.0, true);
    UnitBehaviorAdd(gv_kerrigan, "KerriganWalk", gv_kerrigan, 1);
    UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1007)), c_orderQueueReplace);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicInTransmission);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zBriefing_Korhal01|Line00022", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zBriefing_Korhal01|Line00023", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        if ((gv_introCutsceneCompleted == false)) {
            lv_fadeDuration = 0.0;
        }
        else {
            lv_fadeDuration = 0.5;
        }
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;
    int lv_i;

    // Automatic Variable Declarations
    unitgroup auto524D027D_g;
    int auto524D027D_u;
    unit auto524D027D_var;
    unitgroup auto7FFD1ACC_g;
    int auto7FFD1ACC_u;
    unit auto7FFD1ACC_var;
    unitgroup auto390B0F3F_g;
    int auto390B0F3F_u;
    unit auto390B0F3F_var;
    unitgroup auto185737CF_g;
    int auto185737CF_u;
    unit auto185737CF_var;
    unitgroup auto32E218C7_g;
    int auto32E218C7_u;
    unit auto32E218C7_var;
    unitgroup auto77582FF9_g;
    int auto77582FF9_u;
    unit auto77582FF9_var;
    unitgroup auto4172AD4B_g;
    int auto4172AD4B_u;
    unit auto4172AD4B_var;
    int autoCAEE5519_ae;
    const int autoCAEE5519_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_IntroZerg);
    TriggerStop(gt_IntroExplosion);
    TriggerStop(gt_IntroDominionMovement);
    TriggerStop(gt_IntroDropPod);
    SoundStop(gv_introStinger, true);
    SoundStop(gv_introZoomSound, true);
    SoundStop(gv_introLandingSound, true);
    SoundStop(gv_introExplosionSound, true);
    if ((gv_cinematicCompleted == false) && (gv_introMusicCompleted == false)) {
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    }

    CameraShakeStop(gv_pLAYER_01_USER);
    auto524D027D_g = UnitGroup(null, gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto524D027D_u = UnitGroupCount(auto524D027D_g, c_unitCountAll);
    for (;; auto524D027D_u -= 1) {
        auto524D027D_var = UnitGroupUnitFromEnd(auto524D027D_g, auto524D027D_u);
        if (auto524D027D_var == null) { break; }
        UnitRemove(auto524D027D_var);
    }
    auto7FFD1ACC_g = UnitGroup("Larva", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7FFD1ACC_u = UnitGroupCount(auto7FFD1ACC_g, c_unitCountAll);
    for (;; auto7FFD1ACC_u -= 1) {
        auto7FFD1ACC_var = UnitGroupUnitFromEnd(auto7FFD1ACC_g, auto7FFD1ACC_u);
        if (auto7FFD1ACC_var == null) { break; }
        UnitRemove(auto7FFD1ACC_var);
    }
    auto390B0F3F_g = gv_cinematicTempUnits;
    auto390B0F3F_u = UnitGroupCount(auto390B0F3F_g, c_unitCountAll);
    for (;; auto390B0F3F_u -= 1) {
        auto390B0F3F_var = UnitGroupUnitFromEnd(auto390B0F3F_g, auto390B0F3F_u);
        if (auto390B0F3F_var == null) { break; }
        UnitRemove(auto390B0F3F_var);
    }
    auto185737CF_g = UnitGroup("ZergDropPod", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto185737CF_u = UnitGroupCount(auto185737CF_g, c_unitCountAll);
    for (;; auto185737CF_u -= 1) {
        auto185737CF_var = UnitGroupUnitFromEnd(auto185737CF_g, auto185737CF_u);
        if (auto185737CF_var == null) { break; }
        UnitRemove(auto185737CF_var);
    }
    auto32E218C7_g = UnitGroup("ZergDropPodCreep", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto32E218C7_u = UnitGroupCount(auto32E218C7_g, c_unitCountAll);
    for (;; auto32E218C7_u -= 1) {
        auto32E218C7_var = UnitGroupUnitFromEnd(auto32E218C7_g, auto32E218C7_u);
        if (auto32E218C7_var == null) { break; }
        UnitRemove(auto32E218C7_var);
    }
    auto77582FF9_g = gv_cinematicHiddenUnits;
    auto77582FF9_u = UnitGroupCount(auto77582FF9_g, c_unitCountAll);
    for (;; auto77582FF9_u -= 1) {
        auto77582FF9_var = UnitGroupUnitFromEnd(auto77582FF9_g, auto77582FF9_u);
        if (auto77582FF9_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto77582FF9_var, true);
    }
    UnitPauseAll(false);
    auto4172AD4B_g = UnitGroup(null, gv_pLAYER_02_DOMINION422, RegionFromId(9), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto4172AD4B_u = UnitGroupCount(auto4172AD4B_g, c_unitCountAll);
    for (;; auto4172AD4B_u -= 1) {
        auto4172AD4B_var = UnitGroupUnitFromEnd(auto4172AD4B_g, auto4172AD4B_u);
        if (auto4172AD4B_var == null) { break; }
        libNtve_gf_PauseUnit(auto4172AD4B_var, true);
    }
    UnitBehaviorRemove(gv_kerrigan, "KerriganWalk", 1);
    UnitSetPosition(gv_kerrigan, PointFromId(1007), false);
    UnitIssueOrder(gv_kerrigan, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    CreepModify(PointFromId(243), 12.0, false, false);
    CreepSetSpeed(c_creepSpeedGrowth, 100.0);
    ActorSend(ActorFromDoodad(DoodadFromId(1074)), "SetVisibility 1");
    ActorSend(ActorFromDoodad(DoodadFromId(1074)), "SetHeight");
    gf_CreateCreepinCircularRegion(RegionFromId(28));
    gf_CreateCreepinCircularRegion(RegionFromId(29));
    gf_CreateCreepinCircularRegion(RegionFromId(30));
    gf_CreateCreepinCircularRegion(RegionFromId(31));
    gf_CreateCreepinCircularRegion(RegionFromId(32));
    gf_CreateCreepinCircularRegion(RegionFromId(33));
    gf_CreateCreepinCircularRegion(RegionFromId(35));
    gf_CreateCreepinCircularRegion(RegionFromId(37));
    gf_CreateCreepinCircularRegion(RegionFromId(38));
    gf_CreateCreepinCircularRegion(RegionFromId(39));
    gf_CreateCreepinCircularRegion(RegionFromId(40));
    gf_CreateCreepinCircularRegion(RegionFromId(41));
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    FogSetEnabled(true);
    EnvironmentShow(c_environmentAll, true);
    libSwaC_gf_EnableDisableZerglingRespawn(true);
    autoCAEE5519_ae = gv_introNumberOfMineralFields;
    lv_i = 1;
    for ( ; ( (autoCAEE5519_ai >= 0 && lv_i <= autoCAEE5519_ae) || (autoCAEE5519_ai < 0 && lv_i >= autoCAEE5519_ae) ) ; lv_i += autoCAEE5519_ai ) {
        UnitSetPropertyFixed(gv_introMineralFields[lv_i], c_unitPropResources, gv_introMineralFieldAmounts[lv_i]);
    }
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, gv_introMinerals);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10.0, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    TriggerExecute(gt_StartAI, true, false);
    Wait(0.5, c_timeReal);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PlayerStartLocation(gv_pLAYER_01_USER), lv_fadeDuration);
    CutsceneFade(true, 0.0, Color(0,0,0), 100.0, PlayerGroupAll(), true);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gv_inCinematic = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Zerg
//--------------------------------------------------------------------------------------------------
bool gt_IntroZerg_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_drone1;
    unit lv_drone2;
    unit lv_drone3;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CreepSetSpeed(c_creepSpeedGrowth, 200.0);
    libNtve_gf_ShowHideUnit(gv_kerrigan, true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_kerrigan), c_animNameDefault, "Unburrow", 0, c_animTimeDefault);
    libNtve_gf_CreateUnitsAtPoint2(1, "CreepTumorBurrowed", 0, 0, PointFromId(986));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "CreepTumorBurrowed", 0, 0, PointFromId(987));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "CreepTumorBurrowed", 0, 0, PointFromId(988));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "CreepTumorBurrowed", 0, 0, PointFromId(1005));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "CreepTumorBurrowed", 0, 0, PointFromId(1006));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "Drone", 0, gv_pLAYER_01_USER, PointFromId(989));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    lv_drone1 = UnitLastCreated();
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitFromId(230))), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Drone", 0, gv_pLAYER_01_USER, PointFromId(990));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    lv_drone2 = UnitLastCreated();
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitFromId(107))), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Drone", 0, gv_pLAYER_01_USER, PointFromId(991));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    lv_drone3 = UnitLastCreated();
    Wait(2.0, c_timeGame);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitFromId(8))), c_orderQueueReplace);
    Wait(5.0, c_timeGame);
    UnitIssueOrder(lv_drone2, OrderTargetingPoint(AbilityCommand("ZergBuild", 0), UnitGetPosition(UnitFromId(107))), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(lv_drone1, OrderTargetingPoint(AbilityCommand("ZergBuild", 4), UnitGetPosition(UnitFromId(230))), c_orderQueueReplace);
    UnitIssueOrder(lv_drone3, OrderTargetingPoint(AbilityCommand("ZergBuild", 3), UnitGetPosition(UnitFromId(8))), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroZerg_Init () {
    gt_IntroZerg = TriggerCreate("gt_IntroZerg_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Explosion
//--------------------------------------------------------------------------------------------------
bool gt_IntroExplosion_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_dominionGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dominionGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 100.0, 0.0);
    UnitCreateEffectPoint(gv_kerrigan, "KerriganDropPodExplosion", UnitGetPosition(gv_kerrigan));
    SoundPlay(SoundLink("Artifact_EnergyNova", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introExplosionSound = SoundLastPlayed();
    CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 0.25, 0.5, 3.0);
    while (true) {
        lv_dominionGroup = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionCircle(UnitGetPosition(gv_kerrigan), 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        if ((UnitGroupCount(lv_dominionGroup, c_unitCountAlive) >= 1)) {
            UnitKill(UnitGroupClosestToPoint(UnitGroup(null, gv_pLAYER_02_DOMINION, RegionCircle(UnitGetPosition(gv_kerrigan), 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(gv_kerrigan)));
        }
        else {
            return true;
        }
        Wait(0.1, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroExplosion_Init () {
    gt_IntroExplosion = TriggerCreate("gt_IntroExplosion_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Dominion Movement
//--------------------------------------------------------------------------------------------------
bool gt_IntroDominionMovement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto9B199B9D_g;
    int auto9B199B9D_u;
    unit auto9B199B9D_var;
    unitgroup autoFBC9A91C_g;
    int autoFBC9A91C_u;
    unit autoFBC9A91C_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto9B199B9D_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(8), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9B199B9D_u = UnitGroupCount(auto9B199B9D_g, c_unitCountAll);
    for (;; auto9B199B9D_u -= 1) {
        auto9B199B9D_var = UnitGroupUnitFromEnd(auto9B199B9D_g, auto9B199B9D_u);
        if (auto9B199B9D_var == null) { break; }
        UnitIssueOrder(auto9B199B9D_var, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(3)), c_orderQueueReplace);
        Wait(0.05, c_timeGame);
    }
    Wait(0.5, c_timeGame);
    autoFBC9A91C_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(8), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFBC9A91C_u = UnitGroupCount(autoFBC9A91C_g, c_unitCountAll);
    for (;; autoFBC9A91C_u -= 1) {
        autoFBC9A91C_var = UnitGroupUnitFromEnd(autoFBC9A91C_g, autoFBC9A91C_u);
        if (autoFBC9A91C_var == null) { break; }
        UnitIssueOrder(autoFBC9A91C_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(autoFBC9A91C_var), 6.0, AngleBetweenPoints(UnitGetPosition(gv_kerrigan), UnitGetPosition(autoFBC9A91C_var)))), c_orderQueueReplace);
        Wait(0.05, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroDominionMovement_Init () {
    gt_IntroDominionMovement = TriggerCreate("gt_IntroDominionMovement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Drop Pod
//--------------------------------------------------------------------------------------------------
bool gt_IntroDropPod_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto725FC288_g;
    int auto725FC288_u;
    unit auto725FC288_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(8.0, c_timeGame);
    CameraShake(gv_pLAYER_01_USER, "Light", "Tremor", 0.25, 0.5, 5.0);
    SoundPlay(SoundLink("ZKorhal01IntroStinger3", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introStinger = SoundLastPlayed();
    SoundPlay(SoundLink("UI_Evolutions_PlanetaryZoom", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introZoomSound = SoundLastPlayed();
    Wait(1.25, c_timeGame);
    libSwaC_gf_CreateDropPod(libSwaC_ge_DropPodRace_Zerg, PointFromId(243), UnitGroupEmpty(), false, gv_pLAYER_01_USER);
    Wait(3.0, c_timeGame);
    SoundPlay(SoundLink("Aberration_Unburrow", -1), PlayerGroupAll(), 70.0, 0.0);
    gv_introLandingSound = SoundLastPlayed();
    CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 0.25, 0.5, 2.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_bileLauncherUnitType, c_unitCreateConstruct | c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION422, PointFromId(243));
    gv_introBileLauncher = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, gv_introBileLauncher);
    libNtve_gf_ChangeUnitDamage(gv_introBileLauncher, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    libNtve_gf_CreateUnitsAtPoint2(1, "CreepTumorBurrowed", 0, 0, PointFromId(1105));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "CreepTumorBurrowed", 0, 0, PointFromId(1070));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    auto725FC288_g = gv_introDominionAttackers;
    auto725FC288_u = UnitGroupCount(auto725FC288_g, c_unitCountAll);
    for (;; auto725FC288_u -= 1) {
        auto725FC288_var = UnitGroupUnitFromEnd(auto725FC288_g, auto725FC288_u);
        if (auto725FC288_var == null) { break; }
        UnitIssueOrder(auto725FC288_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(271)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroDropPod_Init () {
    gt_IntroDropPod = TriggerCreate("gt_IntroDropPod_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Zoom In
//--------------------------------------------------------------------------------------------------
bool gt_IntroZoomIn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraSetValue(1, c_cameraValueDistance, CameraInfoGetValue(CameraInfoFromId(1352), c_cameraValueDistance), 1.5, -1, 10.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroZoomIn_Init () {
    gt_IntroZoomIn = TriggerCreate("gt_IntroZoomIn_Func");
    TriggerAddEventCutsceneBookmarkFired(gt_IntroZoomIn, c_cutsceneNone, "Start Zoom");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Music
//--------------------------------------------------------------------------------------------------
bool gt_IntroMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_soundtrack = "ZKorhal01MissionIntro";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    gv_introMusicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroMusic_Init () {
    gt_IntroMusic = TriggerCreate("gt_IntroMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Q
//--------------------------------------------------------------------------------------------------
bool gt_MidQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_MidSetup, true, true);
    TriggerExecute(gt_MidCinematic, true, true);
    TriggerExecute(gt_MidCinematicEnd, true, true);
    TriggerExecute(gt_MidCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidQ_Init () {
    gt_MidQ = TriggerCreate("gt_MidQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto243223A6_g;
    int auto243223A6_u;
    unit auto243223A6_var;
    unitgroup autoCA539827_g;
    int autoCA539827_u;
    unit autoCA539827_var;
    unitgroup auto73123051_g;
    int auto73123051_u;
    unit auto73123051_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    gv_inCinematic = true;
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    CameraSave(gv_pLAYER_01_USER);
    libNtve_gf_StoreUnitSelection(gv_pLAYER_01_USER, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    libSwaC_gf_EnableDisableZerglingRespawn(false);
    auto243223A6_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto243223A6_u = UnitGroupCount(auto243223A6_g, c_unitCountAll);
    for (;; auto243223A6_u -= 1) {
        auto243223A6_var = UnitGroupUnitFromEnd(auto243223A6_g, auto243223A6_u);
        if (auto243223A6_var == null) { break; }
        if ((libNtve_gf_UnitIsPaused(auto243223A6_var) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, auto243223A6_var);
            libNtve_gf_PauseUnit(auto243223A6_var, true);
        }

    }
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    autoCA539827_g = gv_cinematicHiddenUnits;
    autoCA539827_u = UnitGroupCount(autoCA539827_g, c_unitCountAll);
    for (;; autoCA539827_u -= 1) {
        autoCA539827_var = UnitGroupUnitFromEnd(autoCA539827_g, autoCA539827_u);
        if (autoCA539827_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoCA539827_var, false);
    }
    auto73123051_g = UnitGroup(null, c_playerAny, RegionFromId(20), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto73123051_u = UnitGroupCount(auto73123051_g, c_unitCountAll);
    for (;; auto73123051_u -= 1) {
        auto73123051_var = UnitGroupUnitFromEnd(auto73123051_g, auto73123051_u);
        if (auto73123051_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto73123051_var, true);
        libNtve_gf_PauseUnit(auto73123051_var, true);
    }
    libNtve_gf_ShowHideUnit(UnitFromId(1132), false);
    libNtve_gf_CreateUnitsAtPoint2(1, "KorhalCannon", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION423, PointFromId(1083));
    gv_midAirCannon = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, gv_midAirCannon);
    UnitSetPropertyFixed(gv_midAirCannon, c_unitPropLife, 20.0);
    libNtve_gf_ChangeUnitDamage(gv_midAirCannon, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Mega);
    libNtve_gf_CreateUnitsAtPoint2(1, "KorhalSporeCannon", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION422, PointFromId(1355));
    gv_midBileLauncher = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, gv_midBileLauncher);
    UnitIssueOrder(gv_midBileLauncher, OrderTargetingUnit(AbilityCommand("attack", 0), gv_midAirCannon), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidSetup_Init () {
    gt_MidSetup = TriggerCreate("gt_MidSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(465), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(768), 12.0, -1, 10, true);
    TriggerExecute(gt_MidMusic, true, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    Wait(1.0, c_timeGame);
    SoundPlay(SoundLink("Korhal01_CS_BileFly_IntoCannon", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_midBileSound = SoundLastPlayed();
    while (!((UnitIsAlive(gv_midAirCannon) == false))) {
        Wait(0.5, c_timeGame);
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicInTransmission);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal01|Line00041", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION3, RegionFromId(16), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1356), 0.0, -1, 10, true);
    }
    else {
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1357), 0.0, -1, 10, true);
    }
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Korhal01|Line00054", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(3.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1357), 0.0, -1, 10, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematic_Init () {
    gt_MidCinematic = TriggerCreate("gt_MidCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematicEnd_Init () {
    gt_MidCinematicEnd = TriggerCreate("gt_MidCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto5C20186A_g;
    int auto5C20186A_u;
    unit auto5C20186A_var;
    unitgroup auto10777165_g;
    int auto10777165_u;
    unit auto10777165_var;
    unitgroup autoE684BDC5_g;
    int autoE684BDC5_u;
    unit autoE684BDC5_var;
    const int auto657C393E_ae = 5;
    int auto657C393E_var;
    unitgroup autoF7C04339_g;
    int autoF7C04339_u;
    unit autoF7C04339_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == false) && (gv_midMusicCompleted == false)) {
        TriggerStop(gt_MidMusic);
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZKorhal01MusicAlt1", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }

    auto5C20186A_g = gv_cinematicTempUnits;
    auto5C20186A_u = UnitGroupCount(auto5C20186A_g, c_unitCountAll);
    for (;; auto5C20186A_u -= 1) {
        auto5C20186A_var = UnitGroupUnitFromEnd(auto5C20186A_g, auto5C20186A_u);
        if (auto5C20186A_var == null) { break; }
        UnitRemove(auto5C20186A_var);
    }
    auto10777165_g = gv_cinematicHiddenUnits;
    auto10777165_u = UnitGroupCount(auto10777165_g, c_unitCountAll);
    for (;; auto10777165_u -= 1) {
        auto10777165_var = UnitGroupUnitFromEnd(auto10777165_g, auto10777165_u);
        if (auto10777165_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto10777165_var, true);
    }
    autoE684BDC5_g = gv_cinematicPausedUnits;
    autoE684BDC5_u = UnitGroupCount(autoE684BDC5_g, c_unitCountAll);
    for (;; autoE684BDC5_u -= 1) {
        autoE684BDC5_var = UnitGroupUnitFromEnd(autoE684BDC5_g, autoE684BDC5_u);
        if (autoE684BDC5_var == null) { break; }
        libNtve_gf_PauseUnit(autoE684BDC5_var, false);
    }
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    libSwaC_gf_EnableDisableZerglingRespawn(true);
    libSwaC_gf_ReviveHeroInstantly(libSwaC_ge_HeroUnit_Kerrigan, false);
    libSwaC_gf_ResetHeroAbilityCooldowns(libSwaC_ge_HeroUnit_Kerrigan);
    UnitSetPropertyFixed(gv_kerrigan, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_kerrigan, c_unitPropEnergyPercent, 100.0);
    libNtve_gf_RestoreUnitSelection(gv_pLAYER_01_USER);
    CameraRestore(gv_pLAYER_01_USER, 0.0, -1, 10);
    SoundStop(gv_midBileSound, true);
    auto657C393E_var = 1;
    for ( ; auto657C393E_var <= auto657C393E_ae; auto657C393E_var += 1 ) {
        PingDestroy(gv_bileLauncherPing[auto657C393E_var]);
    }
    autoF7C04339_g = UnitGroup("KorhalCannon", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF7C04339_u = UnitGroupCount(autoF7C04339_g, c_unitCountAll);
    for (;; autoF7C04339_u -= 1) {
        autoF7C04339_var = UnitGroupUnitFromEnd(autoF7C04339_g, autoF7C04339_u);
        if (autoF7C04339_var == null) { break; }
        UnitKill(autoF7C04339_var);
    }
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    gv_inCinematic = false;
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_TransitiontoDestroyDominionBasesQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCleanup_Init () {
    gt_MidCleanup = TriggerCreate("gt_MidCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Music
//--------------------------------------------------------------------------------------------------
bool gt_MidMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_soundtrack = "ZKorhal01MusicEvent02_IntoTheCity";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    gv_midMusicCompleted = true;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZKorhal01MusicAlt1", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidMusic_Init () {
    gt_MidMusic = TriggerCreate("gt_MidMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto5629795E_g;
    int auto5629795E_u;
    unit auto5629795E_var;
    unitgroup autoE9AF9FDD_g;
    int autoE9AF9FDD_u;
    unit autoE9AF9FDD_var;
    unitgroup autoA6E958FC_g;
    int autoA6E958FC_u;
    unit autoA6E958FC_var;
    unitgroup auto75F71C69_g;
    int auto75F71C69_u;
    unit auto75F71C69_var;
    unitgroup auto53F2F387_g;
    int auto53F2F387_u;
    unit auto53F2F387_var;
    const int autoB1FCE12B_n = 25;
    int autoB1FCE12B_i;
    const int auto3371D2D1_n = 3;
    int auto3371D2D1_i;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UnitClearSelection(gv_pLAYER_01_USER);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_kerriganKills = libNtve_gf_UnitGetPropertyKills(gv_kerrigan, c_unitPropCurrent);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    auto5629795E_g = gv_cinematicHiddenUnits;
    auto5629795E_u = UnitGroupCount(auto5629795E_g, c_unitCountAll);
    for (;; auto5629795E_u -= 1) {
        auto5629795E_var = UnitGroupUnitFromEnd(auto5629795E_g, auto5629795E_u);
        if (auto5629795E_var == null) { break; }
        UnitRemove(auto5629795E_var);
    }
    autoE9AF9FDD_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionFromId(12), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE9AF9FDD_u = UnitGroupCount(autoE9AF9FDD_g, c_unitCountAll);
    for (;; autoE9AF9FDD_u -= 1) {
        autoE9AF9FDD_var = UnitGroupUnitFromEnd(autoE9AF9FDD_g, autoE9AF9FDD_u);
        if (autoE9AF9FDD_var == null) { break; }
        UnitRemove(autoE9AF9FDD_var);
    }
    autoA6E958FC_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionFromId(12), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA6E958FC_u = UnitGroupCount(autoA6E958FC_g, c_unitCountAll);
    for (;; autoA6E958FC_u -= 1) {
        autoA6E958FC_var = UnitGroupUnitFromEnd(autoA6E958FC_g, autoA6E958FC_u);
        if (autoA6E958FC_var == null) { break; }
        UnitRemove(autoA6E958FC_var);
    }
    auto75F71C69_g = UnitGroup(null, gv_pLAYER_02_DOMINION3, RegionFromId(12), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto75F71C69_u = UnitGroupCount(auto75F71C69_g, c_unitCountAll);
    for (;; auto75F71C69_u -= 1) {
        auto75F71C69_var = UnitGroupUnitFromEnd(auto75F71C69_g, auto75F71C69_u);
        if (auto75F71C69_var == null) { break; }
        UnitRemove(auto75F71C69_var);
    }
    auto53F2F387_g = UnitGroup(null, gv_pLAYER_02_DOMINION3, RegionFromId(12), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto53F2F387_u = UnitGroupCount(auto53F2F387_g, c_unitCountAll);
    for (;; auto53F2F387_u -= 1) {
        auto53F2F387_var = UnitGroupUnitFromEnd(auto53F2F387_g, auto53F2F387_u);
        if (auto53F2F387_var == null) { break; }
        UnitRemove(auto53F2F387_var);
    }
    for (autoB1FCE12B_i = 1; autoB1FCE12B_i <= autoB1FCE12B_n; autoB1FCE12B_i += 1) {
        UnitCreate(1, "Marine", 0, gv_pLAYER_02_DOMINION, RegionRandomPoint(RegionFromId(45)), 225.0);
    }
    for (auto3371D2D1_i = 1; auto3371D2D1_i <= auto3371D2D1_n; auto3371D2D1_i += 1) {
        UnitCreate(1, "Thor", 0, gv_pLAYER_02_DOMINION, RegionRandomPoint(RegionFromId(45)), 225.0);
    }
    if ((UnitGroupCount(UnitGroup("CreepTumor", c_playerAny, RegionCircle(PointFromId(92), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("CreepTumorBurrowed", c_playerAny, RegionCircle(PointFromId(92), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("CreepTumorUsed", c_playerAny, RegionCircle(PointFromId(92), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumor", 0, gv_pLAYER_01_USER, PointFromId(92));
    }

    if ((UnitGroupCount(UnitGroup("CreepTumor", c_playerAny, RegionCircle(PointFromId(91), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("CreepTumorBurrowed", c_playerAny, RegionCircle(PointFromId(91), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("CreepTumorUsed", c_playerAny, RegionCircle(PointFromId(91), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumor", 0, gv_pLAYER_01_USER, PointFromId(91));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1008), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1029), 21.0, -1, 10.0, true);
    CameraShake(gv_pLAYER_01_USER, "Light", "SubtleMove", 1.0, 2.0, 21.0);
    TriggerExecute(gt_VictoryZerg, true, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    TriggerExecute(gt_VictorySounds, true, false);
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicInTransmission);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal01|Line00070", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal01|Line00025", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal01|Line00038", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal01|Line00039", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal01|Line00042", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(1.0, c_timeReal);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_SilenceShort", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 3.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_VictoryZerg);
    TriggerStop(gt_VictorySounds);
    TriggerStop(gt_VictoryDropPods);
    TriggerStop(gt_VictoryDropPodSounds);
    SoundStop(gv_victoryZergSound, true);
    SoundStop(gv_victoryPodSound, true);
    SoundChannelStop(PlayerGroupAll(), c_soundCategoryCombat);
    CameraShakeStop(gv_pLAYER_01_USER);
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Zerg
//--------------------------------------------------------------------------------------------------
bool gt_VictoryZerg_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto9BC5C366_ae = 5;
    const int auto9BC5C366_ai = 1;
    unitgroup autoD97D4000_g;
    int autoD97D4000_u;
    unit autoD97D4000_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_victoryZergRegions[1] = RegionFromId(12);
    gv_victoryZergRegions[2] = RegionFromId(42);
    gv_victoryZergRegions[3] = RegionFromId(43);
    gv_victoryZergRegions[4] = RegionFromId(44);
    gv_victoryZergRegions[5] = RegionFromId(45);
    TriggerExecute(gt_VictoryDropPods, true, false);
    while (true) {
        Wait(2.0, c_timeGame);
        lv_i = 1;
        for ( ; ( (auto9BC5C366_ai >= 0 && lv_i <= auto9BC5C366_ae) || (auto9BC5C366_ai < 0 && lv_i >= auto9BC5C366_ae) ) ; lv_i += auto9BC5C366_ai ) {
            autoD97D4000_g = gv_victoryZergGroups[lv_i];
            autoD97D4000_u = UnitGroupCount(autoD97D4000_g, c_unitCountAll);
            for (;; autoD97D4000_u -= 1) {
                autoD97D4000_var = UnitGroupUnitFromEnd(autoD97D4000_g, autoD97D4000_u);
                if (autoD97D4000_var == null) { break; }
                if ((RandomInt(1, 7) == 1)) {
                    UnitIssueOrder(autoD97D4000_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(gv_victoryZergRegions[lv_i])), c_orderQueueReplace);
                }

            }
            Wait(0.1, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryZerg_Init () {
    gt_VictoryZerg = TriggerCreate("gt_VictoryZerg_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Drop Pods
//--------------------------------------------------------------------------------------------------
bool gt_VictoryDropPods_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_VictoryDropPod(8, 4, 0, 0, PointFromId(1011));
    Wait(1.0, c_timeGame);
    gf_VictoryDropPod(8, 4, 0, 0, PointFromId(1015));
    Wait(1.0, c_timeGame);
    gf_VictoryDropPod(8, 3, 3, 0, PointFromId(1017));
    Wait(1.0, c_timeGame);
    gf_VictoryDropPod(8, 0, 4, 0, PointFromId(1012));
    Wait(1.0, c_timeGame);
    gf_VictoryDropPod(8, 0, 4, 0, PointFromId(1014));
    Wait(1.0, c_timeGame);
    gf_VictoryDropPod(8, 2, 2, 0, PointFromId(1013));
    Wait(1.0, c_timeGame);
    gf_VictoryDropPod(8, 2, 2, 0, PointFromId(1016));
    Wait(1.0, c_timeGame);
    SoundPlay(SoundLink("Korhal01_CS_EndWin_ZergHorde_QuadLoop", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_victoryZergSound = SoundLastPlayed();
    gf_VictoryDropPod(8, 2, 2, 0, PointFromId(1009));
    Wait(1.0, c_timeGame);
    gf_VictoryDropPod(0, 0, 4, 1, PointFromId(1010));
    Wait(1.0, c_timeGame);
    gf_VictoryDropPod(8, 0, 0, 1, PointFromId(1021));
    Wait(1.0, c_timeGame);
    gf_VictoryDropPod(8, 0, 0, 0, PointFromId(1023));
    Wait(1.0, c_timeGame);
    gf_VictoryDropPod(8, 3, 3, 0, PointFromId(1022));
    Wait(1.0, c_timeGame);
    gf_VictoryDropPod(8, 0, 0, 0, PointFromId(1024));
    Wait(1.0, c_timeGame);
    gf_VictoryDropPod(8, 3, 3, 1, PointFromId(1026));
    Wait(1.0, c_timeGame);
    gf_VictoryDropPod(8, 3, 3, 1, PointFromId(1025));
    Wait(1.0, c_timeGame);
    gf_VictoryDropPod(8, 3, 3, 1, PointFromId(1027));
    Wait(1.0, c_timeGame);
    gf_VictoryDropPod(8, 0, 3, 1, PointFromId(1028));
    Wait(1.0, c_timeGame);
    TriggerStop(gt_VictorySounds);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryDropPods_Init () {
    gt_VictoryDropPods = TriggerCreate("gt_VictoryDropPods_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sounds
//--------------------------------------------------------------------------------------------------
bool gt_VictorySounds_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 100.0, 0.1);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 100.0, 0.1);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 100.0, 0.1);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 100.0, 0.1);
    TriggerExecute(gt_VictoryMusic, true, false);
    Wait(1.0, c_timeReal);
    while (true) {
        TriggerExecute(gt_VictoryDropPodSounds, true, false);
        Wait(RandomInt(1, 2), c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySounds_Init () {
    gt_VictorySounds = TriggerCreate("gt_VictorySounds_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Drop Pod Sounds
//--------------------------------------------------------------------------------------------------
bool gt_VictoryDropPodSounds_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("ZergDropPod_Drop", -1), PlayerGroupAll(), RandomFixed(30.0, 40.0), 0.0);
    gv_victoryPodSound = SoundLastPlayed();
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    SoundPlay(SoundLink("ZergDropPodImpact", -1), PlayerGroupAll(), RandomFixed(30.0, 40.0), 0.0);
    gv_victoryPodSound = SoundLastPlayed();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryDropPodSounds_Init () {
    gt_VictoryDropPodSounds = TriggerCreate("gt_VictoryDropPodSounds_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Music
//--------------------------------------------------------------------------------------------------
bool gt_VictoryMusic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZKorhal01VictoryMusic", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryMusic_Init () {
    gt_VictoryMusic = TriggerCreate("gt_VictoryMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04MusicSound_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_PlayerIsInCombat_Init();
    gt_PlayerIsInCombatIndicatorDiminish_Init();
    gt_StartGameQ_Init();
    gt_StartHarvesting_Init();
    gt_CreateGatePings_Init();
    gt_Gate01DestroyedZergInvadeCity_Init();
    gt_Gate02DestroyedZergInvadeCity_Init();
    gt_Gate03DestroyedZergInvadeCity_Init();
    gt_RemoveInvadersAtGate01_Init();
    gt_RemoveInvadersAtGate02_Init();
    gt_RemoveInvadersAtGate03_Init();
    gt_GateIntroProximitySafety_Init();
    gt_StartNextLandingTimer_Init();
    gt_BileLauncherLandings_Init();
    gt_LandingsOrdered_Init();
    gt_LandingsRepeat_Init();
    gt_ShowNextLanding_Init();
    gt_Expansion1Cleared_Init();
    gt_Expansion2Cleared_Init();
    gt_DropBileLauncher01_Init();
    gt_DropBileLauncher02_Init();
    gt_DropBileLauncher03_Init();
    gt_DropBileLauncher04_Init();
    gt_DropBileLauncher05_Init();
    gt_DropBileLauncherREPEAT_Init();
    gt_BileLauncherKilled_Init();
    gt_BileLaunchersAttackAirDefenseCannons_Init();
    gt_UpdateBileLaunchersOwned_Init();
    gt_RandomZergLandings_Init();
    gt_HandleKerriganDeath_Init();
    gt_CreateLandingTimerWindow_Init();
    gt_CrashingZergDropPods_Init();
    gt_TransitiontoDestroyDominionBasesQ_Init();
    gt_GivePlayerForcesIfNeeded_Init();
    gt_CreatePingatDominionBases_Init();
    gt_DestroyPingatDominionBase01_Init();
    gt_DestroyPingatDominionBase02_Init();
    gt_LeviathanSafety_Init();
    gt_TransmissionMengskTauntQ_Init();
    gt_TransmissionBileLauncherDropsQ_Init();
    gt_TransmissionBileLauncherLandingQ_Init();
    gt_TransmissionBileLauncherLossQ_Init();
    gt_TransmissionBileLauncherDeathQ_Init();
    gt_TransmissionDestroyGatesIntroQ_Init();
    gt_TransmissionGatehasbeenDestroyedQ_Init();
    gt_TransmissionEnemyTerritory1Q_Init();
    gt_TransmissionEnemyTerritory2Q_Init();
    gt_TransmissionKillTeam01Q_Init();
    gt_TransmissionKillTeam02Q_Init();
    gt_TipMissionHelpQ_Init();
    gt_AchievementBileLaunchersLost_Init();
    gt_AchievementGatesBeforeLaunchersNH_Init();
    gt_AchievementBasesBeforeLaunchersH_Init();
    gt_AnniversaryAchievementDestroy20Dominionstructuresbefore3rdBileLauncher_Init();
    gt_AchievementLauncherTracking_Init();
    gt_LargestZergForce_Init();
    gt_StartAI_Init();
    gt_AIUpgradesNormal_Init();
    gt_AIUpgradesHard_Init();
    gt_AIGiveResources_Init();
    gt_SendKillTeam01_Init();
    gt_SendKillTeam02_Init();
    gt_KillTeam01Ping_Init();
    gt_KillTeam02Ping_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_DefeatBileLauncherDeathsFailed_Init();
    gt_DefeatBaseDead_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_ObjectiveDeployBileLauncherCreate_Init();
    gt_ObjectiveDeployBileLauncherComplete_Init();
    gt_ObjectiveDeployBileLauncherUpdate_Init();
    gt_ObjectiveDeployBileLauncherFailed_Init();
    gt_ObjectiveBileLauncherLossCreate_Init();
    gt_ObjectiveBileLauncherLossComplete_Init();
    gt_ObjectiveBileLauncherLossUpdate_Init();
    gt_ObjectiveBileLauncherLossFailed_Init();
    gt_ObjectiveDestroyDominionBaseCreate_Init();
    gt_ObjectiveDestroyDominionBaseComplete_Init();
    gt_ObjectiveDestroyDominionBaseUpdate_Init();
    gt_ObjectiveDestroyDominionBaseFailed_Init();
    gt_ObjectiveDestroyGatesCreate_Init();
    gt_ObjectiveDestroyGatesUpdate_Init();
    gt_ObjectiveDestroyGatesComplete_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_IntroZerg_Init();
    gt_IntroExplosion_Init();
    gt_IntroDominionMovement_Init();
    gt_IntroDropPod_Init();
    gt_IntroZoomIn_Init();
    gt_IntroMusic_Init();
    gt_MidQ_Init();
    gt_MidSetup_Init();
    gt_MidCinematic_Init();
    gt_MidCinematicEnd_Init();
    gt_MidCleanup_Init();
    gt_MidMusic_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
    gt_VictoryZerg_Init();
    gt_VictoryDropPods_Init();
    gt_VictorySounds_Init();
    gt_VictoryDropPodSounds_Init();
    gt_VictoryMusic_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}
