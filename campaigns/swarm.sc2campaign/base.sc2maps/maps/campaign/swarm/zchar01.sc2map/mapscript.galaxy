//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Domination
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/SwarmLib"
include "TriggerLibs/SwarmCampaignLib"
include "TriggerLibs/SwarmCampaignDataHelperLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libHots_InitLib();
    libSwaC_InitLib();
    libSCDH_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_ZERG = 2;
const int gv_pLAYER_02_ZERG2 = 3;
const int gv_pLAYER_02_ZERG22 = 4;
const int gv_pLAYER_02_ZERG222 = 5;
const int gv_pLAYER_02_ZERG2222 = 6;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_RECORD_EggCluster {
    point lv_centerPoint;
    unitgroup lv_eggs;
    unitgroup lv_feralZergGroup;
};

struct gs_RECORD_EggNest {
    unit lv_eggNest;
    bool lv_currentlyGrowing;
    int lv_state;
};

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_PRESET_EggNestState_Empty = 0;
const int ge_PRESET_EggNestState_HalfFull = 1;
const int ge_PRESET_EggNestState_Full = 2;
const int ge_PRESET_EggNestState_Hatched = 3;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
bool gv_gameOver;
bool gv_inCinematic;
string gv_mapMusicTrack;
unit gv_kerrigan;
unit gv_zagara;
playergroup gv_zergPlayers;
bool gv_baseDefenseMessage;
int[3] gv_infestedCCPings;
int gv_infestedCCsDestroyed;
gs_RECORD_EggCluster[22] gv_eggClusters;
int gv_numberOfEggClusters;
gs_RECORD_EggNest[7] gv_eggNests;
int gv_eggsCollected;
int gv_eggsLostToZagara;
int gv_banelingEggsCollected;
region[13] gv_visibilityRegions;
revealer[13] gv_visiblilityRevealers;
int gv_numberOfVisibilityRegions;
actor gv_banelingEggIndicator;
int gv_eggTextTag;
actor gv_eggActor;
int gv_timesZagaraDefeated;
fixed gv_zagaraReviveTime;
bool gv_zagaraAlive;
bool gv_zagaraEscortsSpawned;
int[21] gv_zagaraPath;
fixed gv_zagaraPathWaitPerEgg;
wave gv_zagaraEscortWave;
int gv_transfusionCooldown;
timer gv_transfusionCooldownTimer;
int gv_zagaraBossPing;
bool gv_zagaraCorruptingEgg;
fixed gv_zagaraEggCorruptionTime;
bool gv_zagaraDeathExplained;
int gv_zagaraFirstDeath;
fixed gv_zagaraMaximumLife;
fixed gv_zagaraMaximumEnergy;
fixed gv_zagaraLifeRegen;
unitgroup gv_feralBanelingGroup;
int gv_numberOfZerglingActors;
actor[11] gv_zerglingActors;
bool gv__50EggAttackSent;
int gv_objectiveDestroyDominionBase;
int gv_objectiveDestroyDominionBase2;
int gv_objectiveDestroyDominionBase3;
int gv_objectiveDestroyDominionBase42;
int gv_banelingKills;
int gv_banelingNestsBeforeVictoryLap;
bool gv_banelingNestsBeforeVictoryLapSet;
timer gv_destroyZagarasBaseTimer;
bool gv_introCinematicCompleted;
unitgroup gv_introHiddenUnitGroup;
unitgroup gv_introHiddenUnitGroup2;
unit gv_introEggs;
actor gv_introCorruptionEffect;
sound gv_introOneShot;
bool gv_introMusicFinished;
bool gv_midCinematicCompleted;
unitgroup gv_midSpawnedUnits;
unitgroup gv_midHiddenUnits;
bool gv_midSpawnedUnitsSelected;
fixed gv_midEggHatchDelay;
bool gv_midMusicFinished;
bool gv_victoryCinematicCompleted;
unit gv_victoryKerrigan;
unit gv_victoryZagara;
unitgroup gv_victoryZerg;

void InitGlobals () {
    int init_i;

    gv_zagara = UnitFromId(577);
    gv_zergPlayers = PlayerGroupEmpty();
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_infestedCCPings[init_i] = c_invalidPingId;
    }
    for (init_i = 0; init_i <= 21; init_i += 1) {
        gv_eggClusters[init_i].lv_eggs = UnitGroupEmpty();
        gv_eggClusters[init_i].lv_feralZergGroup = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_eggNests[init_i].lv_state = ge_PRESET_EggNestState_Empty;
    }
    gv_eggTextTag = c_textTagNone;
    gv_zagaraAlive = true;
    gv_transfusionCooldownTimer = TimerCreate();
    gv_zagaraBossPing = c_invalidPingId;
    gv_zagaraFirstDeath = c_invalidTransmissionId;
    gv_feralBanelingGroup = UnitGroupEmpty();
    gv_objectiveDestroyDominionBase = c_invalidObjectiveId;
    gv_objectiveDestroyDominionBase2 = c_invalidObjectiveId;
    gv_objectiveDestroyDominionBase3 = c_invalidObjectiveId;
    gv_objectiveDestroyDominionBase42 = c_invalidObjectiveId;
    gv_destroyZagarasBaseTimer = TimerCreate();
    gv_introHiddenUnitGroup = UnitGroupEmpty();
    gv_introHiddenUnitGroup2 = UnitGroupEmpty();
    gv_midSpawnedUnits = UnitGroupEmpty();
    gv_midHiddenUnits = UnitGroupEmpty();
    gv_midEggHatchDelay = 1.8;
    gv_victoryZerg = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_CreateInfoText (unit lp_cHOSEN_UNIT);
void gf_DeselectUnit (unit lp_unit);
void gf_RevealRegion (int lp_region);
void gf_AnimateEggNesttoState (int lp_eggNest, int lp_state);
void gf_HatchBanelings (int lp_number, point lp_location);
void gf_CorruptEggwithZagara (unit lp_eggToCorrupt, int lp_cluster);
void gf_FeralBanelingAttack (region lp_sPAWN_REGION, region lp_aTTACK_REGION);
void gf_MidEggNestSpawn (int lp_numberOfSpawns, region lp_region);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04Music;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_CHEAT100Eggs;
trigger gt_CreatedUnit;
trigger gt_SpineCrawlerTransform;
trigger gt_KerriganDies;
trigger gt_StartGameQ;
trigger gt_UnitDiesGenericQ;
trigger gt_FeralZergMovement;
trigger gt_DestructibleSpikesTopCenter;
trigger gt_CreepBlockerRemoval;
trigger gt_PlayerApproachingInfestedCommandCenters;
trigger gt_InfestedCommandCenterDestroyed;
trigger gt_InfestedCCsDestroyedQ;
trigger gt_DestroyInfestedCommandCentersQ;
trigger gt_EggRevealArea01Q;
trigger gt_EggRevealAreas01;
trigger gt_RevealMoreEggsArea02;
trigger gt_EggRevealArea02Q;
trigger gt_EggRevealAreas02;
trigger gt_RevealMoreEggsArea03;
trigger gt_EggRevealArea03Q;
trigger gt_EggRevealAreas03;
trigger gt_EggClusterAssignment;
trigger gt_EggPickup;
trigger gt_EggNestAnimations;
trigger gt__50EggQ;
trigger gt__90EggQ;
trigger gt_BanelingEggPickup;
trigger gt_BanelingEggQ;
trigger gt_BanelingEggCompleteQ;
trigger gt_FirstEggEvent;
trigger gt_FirstEggEventCollected;
trigger gt_ZagaraEggCollectionQ;
trigger gt_ZagaraPathInit;
trigger gt_ZagaraPathInitHard;
trigger gt_FirstAttackZagaraTauntQ;
trigger gt_FirstAttackZagaraEntersBase;
trigger gt_FirstAttackBanelingDefense;
trigger gt_FirstAttackBanelingDefenseQ;
trigger gt_FirstAttackReinforcements;
trigger gt_ZerglingBriefSelect;
trigger gt_ZerglingSelectedtoMorphBaneling;
trigger gt_AbathurTeachesBanelingsQ;
trigger gt_BanelingMorphHighlightDisable;
trigger gt_ZagaraDies;
trigger gt_ZagaraDeepBurrows;
trigger gt_ZagaraForcedEscortUpgrade;
trigger gt_ZagaraEscortsCreated;
trigger gt_ZagaraTransfusion;
trigger gt_Zagara25EggQ;
trigger gt_Zagara50EggQ;
trigger gt_Zagara75EggQ;
trigger gt_Zagara90EggQ;
trigger gt_ZagaraFirstAttackQ;
trigger gt_ZagaraBigAttackQ;
trigger gt_ZagaraDeathQ;
trigger gt_ZagaraReviveQ;
trigger gt_ZagaraMinionDeathQ;
trigger gt_ZagaraBanelingTauntQ;
trigger gt_ZagaraPingControl;
trigger gt_TipMissionHelpQ;
trigger gt_StartAI;
trigger gt_ZergAttackWaves;
trigger gt__50EggAttack;
trigger gt_AIGiveMinerals;
trigger gt_AIGiveGas;
trigger gt_AIResearchHard;
trigger gt_ObjectiveInit;
trigger gt_ObjectiveCollectEggsCreate;
trigger gt_ObjectiveCollectEggsUpdate;
trigger gt_ObjectiveCollectEggsComplete;
trigger gt_ObjectiveZagaraEggsCreate;
trigger gt_ObjectiveZagaraEggsUpdate;
trigger gt_ObjectiveZagaraEggsComplete;
trigger gt_ObjectiveZagaraEggsFailed;
trigger gt_ObjectiveDestroyZagaraCreate;
trigger gt_ObjectiveDestroyZagaraComplete;
trigger gt_ObjectiveDestroyInfestedCCCreate;
trigger gt_ObjectiveDestroyInfestedCCUpdate;
trigger gt_ObjectiveDestroyInfestedCCComplete;
trigger gt_DefeatBaseDead;
trigger gt_DefeatPrimaryObjectiveFailed;
trigger gt_VictoryZagarasBaseDestroyed;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_AchievementBanelingNestsBeforeEggs;
trigger gt_AchievementZagaraNoEggsNH;
trigger gt_AchievementDestroyZagarasBaseH;
trigger gt_AchievementBanelingKills;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_IntroZagaraEggCapture;
trigger gt_IntroMusic;
trigger gt_MidQ;
trigger gt_MidSetup;
trigger gt_MidCinematic;
trigger gt_MidCinematicEnd;
trigger gt_MidCleanup;
trigger gt_MidEggHatching;
trigger gt_MidEggsplosions;
trigger gt_MidMusic;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;
trigger gt_VictoryZerglings;
trigger gt_VictoryZergHold;

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_CreateInfoText (unit lp_cHOSEN_UNIT) {
    // Automatic Variable Declarations
    string autoA80D3956_val;

    // Implementation
    autoA80D3956_val = UnitGetType(lp_cHOSEN_UNIT);
    if (autoA80D3956_val == "SpineCrawler") {
        libSwaC_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/16AF1750"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/7E7EBEC7"));
    }
    else if (autoA80D3956_val == "SpineCrawlerUprooted") {
        libSwaC_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/46C99FA4"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/C41A47E9"));
    }
    else {
    }
    UnitSetState(lp_cHOSEN_UNIT, c_unitStateTooltipable, true);
}

void gf_DeselectUnit (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitGroupCount(UnitGroupSelected(gv_pLAYER_01_USER), c_unitCountAlive) >= 1)) {
        if ((UnitGroupHasUnit(UnitGroupSelected(gv_pLAYER_01_USER), lp_unit) == true)) {
            UnitSelect(lp_unit, gv_pLAYER_01_USER, false);
        }

    }

}

trigger auto_gf_RevealRegion_Trigger = null;
int auto_gf_RevealRegion_lp_region;

void gf_RevealRegion (int lp_region) {
    auto_gf_RevealRegion_lp_region = lp_region;

    if (auto_gf_RevealRegion_Trigger == null) {
        auto_gf_RevealRegion_Trigger = TriggerCreate("auto_gf_RevealRegion_TriggerFunc");
    }

    TriggerExecute(auto_gf_RevealRegion_Trigger, false, false);
}

bool auto_gf_RevealRegion_TriggerFunc (bool testConds, bool runActions) {
    int lp_region = auto_gf_RevealRegion_lp_region;

    // Automatic Variable Declarations
    // Implementation
    if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_ZERG22, gv_visibilityRegions[lp_region], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
        VisRevealerCreate(gv_pLAYER_01_USER, gv_visibilityRegions[lp_region]);
        gv_visiblilityRevealers[lp_region] = VisRevealerLastCreated();
        VisRevealerEnable(VisRevealerLastCreated(), true);
        Wait(6.0, c_timeReal);
        VisRevealerEnable(VisRevealerLastCreated(), false);
    }

    return true;
}

trigger auto_gf_AnimateEggNesttoState_Trigger = null;
int auto_gf_AnimateEggNesttoState_lp_eggNest;
int auto_gf_AnimateEggNesttoState_lp_state;

void gf_AnimateEggNesttoState (int lp_eggNest, int lp_state) {
    auto_gf_AnimateEggNesttoState_lp_eggNest = lp_eggNest;
    auto_gf_AnimateEggNesttoState_lp_state = lp_state;

    if (auto_gf_AnimateEggNesttoState_Trigger == null) {
        auto_gf_AnimateEggNesttoState_Trigger = TriggerCreate("auto_gf_AnimateEggNesttoState_TriggerFunc");
    }

    TriggerExecute(auto_gf_AnimateEggNesttoState_Trigger, false, false);
}

bool auto_gf_AnimateEggNesttoState_TriggerFunc (bool testConds, bool runActions) {
    int lp_eggNest = auto_gf_AnimateEggNesttoState_lp_eggNest;
    int lp_state = auto_gf_AnimateEggNesttoState_lp_state;

    // Automatic Variable Declarations
    // Implementation
    while (!((gv_eggNests[lp_eggNest].lv_currentlyGrowing == false))) {
        Wait(1.0, c_timeGame);
    }
    if ((lp_state == ge_PRESET_EggNestState_HalfFull) && (gv_eggNests[lp_eggNest].lv_state == ge_PRESET_EggNestState_Empty)) {
        gv_eggNests[lp_eggNest].lv_currentlyGrowing = true;
        ActorSend(libNtve_gf_MainActorofUnit(gv_eggNests[lp_eggNest].lv_eggNest), "AnimGroupRemove A");
        ActorSend(libNtve_gf_MainActorofUnit(gv_eggNests[lp_eggNest].lv_eggNest), "AnimGroupApply B Start,Stand,B Stand,B");
        Wait(3.0, c_timeGame);
        gv_eggNests[lp_eggNest].lv_currentlyGrowing = false;
        gv_eggNests[lp_eggNest].lv_state = ge_PRESET_EggNestState_HalfFull;
        return true;
    }

    if ((lp_state == ge_PRESET_EggNestState_Full) && ((gv_eggNests[lp_eggNest].lv_state == ge_PRESET_EggNestState_Empty) || (gv_eggNests[lp_eggNest].lv_state == ge_PRESET_EggNestState_HalfFull))) {
        gv_eggNests[lp_eggNest].lv_currentlyGrowing = true;
        if ((gv_eggNests[lp_eggNest].lv_state == ge_PRESET_EggNestState_Empty)) {
            ActorSend(libNtve_gf_MainActorofUnit(gv_eggNests[lp_eggNest].lv_eggNest), "AnimGroupRemove A");
            ActorSend(libNtve_gf_MainActorofUnit(gv_eggNests[lp_eggNest].lv_eggNest), "AnimGroupApply B Start,Stand,B Stand,B");
            Wait(3.0, c_timeGame);
            ActorSend(libNtve_gf_MainActorofUnit(gv_eggNests[lp_eggNest].lv_eggNest), "AnimGroupRemove B");
            ActorSend(libNtve_gf_MainActorofUnit(gv_eggNests[lp_eggNest].lv_eggNest), "AnimGroupApply C Start,Stand,C Stand,C");
            Wait(3.0, c_timeGame);
        }
        else {
            ActorSend(libNtve_gf_MainActorofUnit(gv_eggNests[lp_eggNest].lv_eggNest), "AnimGroupRemove B");
            ActorSend(libNtve_gf_MainActorofUnit(gv_eggNests[lp_eggNest].lv_eggNest), "AnimGroupApply C Start,Stand,C Stand,C");
            Wait(3.0, c_timeGame);
        }
        gv_eggNests[lp_eggNest].lv_currentlyGrowing = false;
        gv_eggNests[lp_eggNest].lv_state = ge_PRESET_EggNestState_Full;
    }

    if ((lp_state == ge_PRESET_EggNestState_Hatched) && (gv_eggNests[lp_eggNest].lv_state != ge_PRESET_EggNestState_Hatched)) {
        ActorSend(libNtve_gf_MainActorofUnit(gv_eggNests[lp_eggNest].lv_eggNest), "AnimGroupRemove C");
        gv_eggNests[lp_eggNest].lv_state = ge_PRESET_EggNestState_Hatched;
        gv_eggNests[lp_eggNest].lv_currentlyGrowing = false;
        UnitKill(gv_eggNests[lp_eggNest].lv_eggNest);
    }

    return true;
}

trigger auto_gf_HatchBanelings_Trigger = null;
int auto_gf_HatchBanelings_lp_number;
point auto_gf_HatchBanelings_lp_location;

void gf_HatchBanelings (int lp_number, point lp_location) {
    auto_gf_HatchBanelings_lp_number = lp_number;
    auto_gf_HatchBanelings_lp_location = lp_location;

    if (auto_gf_HatchBanelings_Trigger == null) {
        auto_gf_HatchBanelings_Trigger = TriggerCreate("auto_gf_HatchBanelings_TriggerFunc");
    }

    TriggerExecute(auto_gf_HatchBanelings_Trigger, false, false);
}

bool auto_gf_HatchBanelings_TriggerFunc (bool testConds, bool runActions) {
    int lp_number = auto_gf_HatchBanelings_lp_number;
    point lp_location = auto_gf_HatchBanelings_lp_location;

    // Automatic Variable Declarations
    unitgroup auto6E6BD473_g;
    int auto6E6BD473_u;
    unit auto6E6BD473_var;
    unitgroup auto319E7CE0_g;
    int auto319E7CE0_u;
    unit auto319E7CE0_var;

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(lp_number, "Baneling", 0, gv_pLAYER_01_USER, lp_location);
    auto6E6BD473_g = UnitLastCreatedGroup();
    auto6E6BD473_u = UnitGroupCount(auto6E6BD473_g, c_unitCountAll);
    for (;; auto6E6BD473_u -= 1) {
        auto6E6BD473_var = UnitGroupUnitFromEnd(auto6E6BD473_g, auto6E6BD473_u);
        if (auto6E6BD473_var == null) { break; }
        libNtve_gf_MakeUnitFacePoint(auto6E6BD473_var, UnitGetPosition(gv_kerrigan), 0.0);
        UnitFlashSelection(auto6E6BD473_var, 4.0);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(auto6E6BD473_var), c_animNameDefault, "Birth", 0, c_animTimeDefault);
        libNtve_gf_PauseUnit(auto6E6BD473_var, true);
    }
    Wait(0.9, c_timeGame);
    auto319E7CE0_g = UnitLastCreatedGroup();
    auto319E7CE0_u = UnitGroupCount(auto319E7CE0_g, c_unitCountAll);
    for (;; auto319E7CE0_u -= 1) {
        auto319E7CE0_var = UnitGroupUnitFromEnd(auto319E7CE0_g, auto319E7CE0_u);
        if (auto319E7CE0_var == null) { break; }
        libNtve_gf_PauseUnit(auto319E7CE0_var, false);
    }
    return true;
}

void gf_CorruptEggwithZagara (unit lp_eggToCorrupt, int lp_cluster) {
    // Variable Declarations
    actor lv_corruptionEffect;
    fixed lv_corruptionTime;
    int lv_numberOfEggs;
    int lv_i;

    // Automatic Variable Declarations
    string auto681F11C8_val;
    int auto9457D0A6_ae;
    const int auto9457D0A6_ai = 1;

    // Variable Initialization

    // Implementation
    while (true) {
        UnitIssueOrder(gv_zagara, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(lp_eggToCorrupt)), c_orderQueueReplace);
        if ((libNtve_gf_UnitInRegion(gv_zagara, RegionCircle(UnitGetPosition(lp_eggToCorrupt), 4.0)) == true)) {
            break;
        }

        Wait(0.5, c_timeAI);
        if (((gv_zagaraAlive == false) || (UnitGetCustomValue(lp_eggToCorrupt, 0) > 1.0) || (gv_eggsCollected >= 100))) {
            return ;
        }

    }
    gv_zagaraCorruptingEgg = true;
    libNtve_gf_AttachModelToUnit(lp_eggToCorrupt, "ZagaraEggCollection", "Ref_Center");
    UnitBehaviorAdd(lp_eggToCorrupt, "TerrazineCountdownDummyBar", lp_eggToCorrupt, 1);
    UnitBehaviorSetDuration(lp_eggToCorrupt, "TerrazineCountdownDummyBar", FixedToInt(gv_zagaraEggCorruptionTime));
    UnitSetState(lp_eggToCorrupt, c_unitStateStatusBar, true);
    UnitStatusBarOverride(lp_eggToCorrupt, c_unitStatusGroupAll);
    lv_corruptionEffect = libNtve_gf_ActorLastCreated();
    ActorSend(lv_corruptionEffect, "SetScale 0.500000");
    libNtve_gf_MakeUnitFacePoint(gv_zagara, UnitGetPosition(lp_eggToCorrupt), 0.0);
    UnitIssueOrder(gv_zagara, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libNtve_gf_PauseUnit(gv_zagara, true);
    libNtve_gf_SendActorMessageToUnit(gv_zagara, "Signal CollectStart");
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_zagara), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    lv_corruptionTime = gv_zagaraEggCorruptionTime;
    UnitSetCustomValue(lp_eggToCorrupt, 0, 2.0);
    while (true) {
        Wait(0.5, c_timeAI);
        lv_corruptionTime -= 0.5;
        if (((gv_zagaraAlive == false) || (UnitHasBehavior(gv_zagara, "PsionicPulse") == true) || (UnitHasBehavior(gv_zagara, "PsiGrip") == true) || (UnitHasBehavior(gv_zagara, "PsiGripHeight") == true) || (UnitHasBehavior(gv_zagara, "PsionicLift") == true) || (UnitHasBehavior(gv_zagara, "PsionicLiftRaise") == true) || (UnitTestState(gv_zagara, c_unitStateStunned) == true))) {
            if ((gv_eggsCollected >= 100)) {
                UnitSelect(lp_eggToCorrupt, gv_pLAYER_01_USER, false);
                UnitKill(lp_eggToCorrupt);
            }
            else {
                UnitSetCustomValue(lp_eggToCorrupt, 0, 0.0);
            }
            UnitBehaviorRemove(lp_eggToCorrupt, "TerrazineCountdownDummyBar", 1);
            UnitSetState(lp_eggToCorrupt, c_unitStateStatusBar, false);
            UnitStatusBarClearOverride(lp_eggToCorrupt);
            UnitStatusBarClearOverride(lp_eggToCorrupt);
            libNtve_gf_KillModel(lv_corruptionEffect);
            libNtve_gf_SendActorMessageToUnit(gv_zagara, "Signal CollectStop");
            libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_zagara), "Default");
            gv_zagaraCorruptingEgg = false;
            if ((gv_zagaraAlive == true)) {
                libNtve_gf_PauseUnit(gv_zagara, false);
            }

            return ;
        }

        if ((lv_corruptionTime == 0)) {
            gv_zagaraCorruptingEgg = false;
            break;
        }

    }
    libNtve_gf_PauseUnit(gv_zagara, false);
    UnitBehaviorRemove(lp_eggToCorrupt, "TerrazineCountdownDummyBar", 1);
    UnitSetState(lp_eggToCorrupt, c_unitStateStatusBar, false);
    UnitStatusBarClearOverride(lp_eggToCorrupt);
    auto681F11C8_val = UnitGetType(lp_eggToCorrupt);
    if (auto681F11C8_val == "CharEggSackOneEgg") {
        lv_numberOfEggs = 1;
    }
    else if (auto681F11C8_val == "CharEggSackTwoEgg") {
        lv_numberOfEggs = 2;
    }
    else if (auto681F11C8_val == "CharEggSackThreeEgg") {
        lv_numberOfEggs = 3;
    }
    else {
    }
    auto9457D0A6_ae = gv_numberOfEggClusters;
    lv_i = 1;
    for ( ; ( (auto9457D0A6_ai >= 0 && lv_i <= auto9457D0A6_ae) || (auto9457D0A6_ai < 0 && lv_i >= auto9457D0A6_ae) ) ; lv_i += auto9457D0A6_ai ) {
        if ((UnitGroupHasUnit(gv_eggClusters[lv_i].lv_eggs, lp_eggToCorrupt) == true)) {
            UnitGroupRemove(gv_eggClusters[lv_i].lv_eggs, lp_eggToCorrupt);
            break;
        }

    }
    libNtve_gf_SendActorMessageToUnit(gv_zagara, "Signal CollectStop");
    libNtve_gf_KillModel(lv_corruptionEffect);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_zagara), "Default");
    libNtve_gf_ShareVisionofUnit(lp_eggToCorrupt, false, gv_pLAYER_01_USER);
    UnitSelect(lp_eggToCorrupt, gv_pLAYER_01_USER, false);
    UnitKill(lp_eggToCorrupt);
    if ((gv_eggsCollected < 100)) {
        gv_eggsLostToZagara += lv_numberOfEggs;
        VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lp_eggToCorrupt), 4.0), 6.0, true);
        if ((gv_eggsLostToZagara >= 100)) {
            gv_eggsLostToZagara = 100;
            TriggerExecute(gt_ObjectiveZagaraEggsUpdate, true, false);
            TriggerExecute(gt_DefeatPrimaryObjectiveFailed, true, false);
        }
        else {
            TriggerExecute(gt_ObjectiveZagaraEggsUpdate, true, false);
        }
        Wait(2.0, c_timeReal);
        TriggerExecute(gt_Zagara25EggQ, true, false);
        TriggerExecute(gt_Zagara50EggQ, true, false);
        TriggerExecute(gt_Zagara75EggQ, true, false);
        TriggerExecute(gt_Zagara90EggQ, true, false);
    }

}

trigger auto_gf_FeralBanelingAttack_Trigger = null;
region auto_gf_FeralBanelingAttack_lp_sPAWN_REGION;
region auto_gf_FeralBanelingAttack_lp_aTTACK_REGION;

void gf_FeralBanelingAttack (region lp_sPAWN_REGION, region lp_aTTACK_REGION) {
    auto_gf_FeralBanelingAttack_lp_sPAWN_REGION = lp_sPAWN_REGION;
    auto_gf_FeralBanelingAttack_lp_aTTACK_REGION = lp_aTTACK_REGION;

    if (auto_gf_FeralBanelingAttack_Trigger == null) {
        auto_gf_FeralBanelingAttack_Trigger = TriggerCreate("auto_gf_FeralBanelingAttack_TriggerFunc");
    }

    TriggerExecute(auto_gf_FeralBanelingAttack_Trigger, false, false);
}

bool auto_gf_FeralBanelingAttack_TriggerFunc (bool testConds, bool runActions) {
    region lp_sPAWN_REGION = auto_gf_FeralBanelingAttack_lp_sPAWN_REGION;
    region lp_aTTACK_REGION = auto_gf_FeralBanelingAttack_lp_aTTACK_REGION;

    // Automatic Variable Declarations
    // Implementation
    UnitCreate(1, "BanelingBurrowed", 0, gv_pLAYER_02_ZERG2222, RegionRandomPoint(lp_sPAWN_REGION), libNtve_gf_RandomAngle());
    libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, gv_pLAYER_01_USER);
    UnitGroupAdd(gv_feralBanelingGroup, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowBanelingUp", 0)), c_orderQueueReplace);
    Wait(2.5, c_timeGame);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(lp_aTTACK_REGION)), c_orderQueueReplace);
    return true;
}

trigger auto_gf_MidEggNestSpawn_Trigger = null;
int auto_gf_MidEggNestSpawn_lp_numberOfSpawns;
region auto_gf_MidEggNestSpawn_lp_region;

void gf_MidEggNestSpawn (int lp_numberOfSpawns, region lp_region) {
    auto_gf_MidEggNestSpawn_lp_numberOfSpawns = lp_numberOfSpawns;
    auto_gf_MidEggNestSpawn_lp_region = lp_region;

    if (auto_gf_MidEggNestSpawn_Trigger == null) {
        auto_gf_MidEggNestSpawn_Trigger = TriggerCreate("auto_gf_MidEggNestSpawn_TriggerFunc");
    }

    TriggerExecute(auto_gf_MidEggNestSpawn_Trigger, false, false);
}

bool auto_gf_MidEggNestSpawn_TriggerFunc (bool testConds, bool runActions) {
    int lp_numberOfSpawns = auto_gf_MidEggNestSpawn_lp_numberOfSpawns;
    region lp_region = auto_gf_MidEggNestSpawn_lp_region;

    // Variable Declarations
    bool lv_select;

    // Automatic Variable Declarations
    int autoCB7F757D_n;
    int autoCB7F757D_i;
    const int auto1A34ECDE_n = 2;
    int auto1A34ECDE_i;
    const int auto71964A15_n = 4;
    int auto71964A15_i;

    // Variable Initialization

    // Implementation
    Wait(gv_midEggHatchDelay, c_timeGame);
    if ((UnitGroupHasUnit(gv_midSpawnedUnits, UnitGroupUnit(UnitGroupSelected(gv_pLAYER_01_USER), 1)) == true)) {
        lv_select = true;
    }

    autoCB7F757D_n = lp_numberOfSpawns;
    for (autoCB7F757D_i = 1; autoCB7F757D_i <= autoCB7F757D_n; autoCB7F757D_i += 1) {
        if ((RandomInt(1, 3) == 1)) {
            for (auto71964A15_i = 1; auto71964A15_i <= auto71964A15_n; auto71964A15_i += 1) {
                UnitCreate(1, "Baneling", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, RegionRandomPoint(lp_region), libNtve_gf_RandomAngle());
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), RandomFixed(1.0, 2.0), AngleBetweenPoints(RegionGetCenter(lp_region), UnitGetPosition(UnitLastCreated())))), c_orderQueueReplace);
                UnitGroupAdd(gv_midSpawnedUnits, UnitLastCreated());
                if ((gv_midSpawnedUnitsSelected == true) && (UnitGroupCount(UnitGroupSelected(gv_pLAYER_01_USER), c_unitCountAlive) >= 1)) {
                    if ((lv_select == true)) {
                        UnitSelect(UnitLastCreated(), gv_pLAYER_01_USER, true);
                    }

                }

            }
        }
        else {
            for (auto1A34ECDE_i = 1; auto1A34ECDE_i <= auto1A34ECDE_n; auto1A34ECDE_i += 1) {
                UnitCreate(1, "Zergling", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, RegionRandomPoint(lp_region), libNtve_gf_RandomAngle());
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), RandomFixed(1.0, 2.0), AngleBetweenPoints(RegionGetCenter(lp_region), UnitGetPosition(UnitLastCreated())))), c_orderQueueReplace);
                UnitGroupAdd(gv_midSpawnedUnits, UnitLastCreated());
                if ((gv_midSpawnedUnitsSelected == true) && (UnitGroupCount(UnitGroupSelected(gv_pLAYER_01_USER), c_unitCountAlive) >= 1)) {
                    if ((lv_select == true)) {
                        UnitSelect(UnitLastCreated(), gv_pLAYER_01_USER, true);
                    }

                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_ULoadCampaignData("ZChar1");
    TriggerExecute(gt_Init01Technology, true, true);
    libSwaC_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03Units, true, true);
    TriggerExecute(gt_Init04Music, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulties, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    TriggerExecute(gt_IntroQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    libSwaC_gf_EnableCampaignTechUnit(true, "Baneling", gv_pLAYER_01_USER);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_ZERG, "Burrow", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_visionGroup01;
    playergroup lv_visionGroup02;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_visionGroup01 = PlayerGroupEmpty();
    lv_visionGroup02 = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupAdd(gv_zergPlayers, gv_pLAYER_02_ZERG);
    PlayerGroupAdd(gv_zergPlayers, gv_pLAYER_02_ZERG2);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_ZERG22, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_ZERG222, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_ZERG2222, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_02_ZERG, gv_pLAYER_02_ZERG2, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_02_ZERG, gv_pLAYER_02_ZERG22, libNtve_ge_AllianceSetting_NeutralWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_02_ZERG, gv_pLAYER_02_ZERG222, libNtve_ge_AllianceSetting_NeutralWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_02_ZERG2, gv_pLAYER_02_ZERG, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_02_ZERG2, gv_pLAYER_02_ZERG22, libNtve_ge_AllianceSetting_NeutralWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_02_ZERG2, gv_pLAYER_02_ZERG222, libNtve_ge_AllianceSetting_NeutralWithSharedVision);
    PlayerGroupAdd(lv_visionGroup01, gv_pLAYER_02_ZERG);
    PlayerGroupAdd(lv_visionGroup01, gv_pLAYER_02_ZERG2);
    PlayerGroupAdd(lv_visionGroup01, gv_pLAYER_02_ZERG22);
    PlayerGroupAdd(lv_visionGroup01, gv_pLAYER_02_ZERG222);
    libSwaC_gf_ShareVisionAmongPlayers(lv_visionGroup01);
    PlayerGroupAdd(lv_visionGroup02, gv_pLAYER_01_USER);
    PlayerGroupAdd(lv_visionGroup02, gv_pLAYER_02_ZERG2222);
    libSwaC_gf_ShareVisionAmongPlayers(lv_visionGroup02);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 250);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 125);
    PlayerModifyPropertyInt(gv_pLAYER_02_ZERG, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_02_ZERG, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto09291B66_g;
    int auto09291B66_u;
    unit auto09291B66_var;
    unitgroup auto9DF72A04_g;
    int auto9DF72A04_u;
    unit auto9DF72A04_var;
    unitgroup auto2E444423_g;
    int auto2E444423_u;
    unit auto2E444423_var;
    unitgroup auto2281DCAB_g;
    int auto2281DCAB_u;
    unit auto2281DCAB_var;
    unitgroup autoC0EB5ADF_g;
    int autoC0EB5ADF_u;
    unit autoC0EB5ADF_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_CreateHero2(PointFromId(807), gv_pLAYER_01_USER, libSwaC_ge_HeroUnit_Kerrigan, PointGetFacing(PointFromId(807)), 0, libSwaC_ge_KerriganCreatePurpose_GamePlay);
    gv_kerrigan = UnitLastCreated();
    libSwaC_gf_SetHeroPanelUnit(1, UnitLastCreated());
    TriggerExecute(gt_EggClusterAssignment, true, false);
    libSCDH_gf_CreateHeroPing(gv_zagara, libSCDH_ge_HeroPingType_Enemy);
    gv_zagaraBossPing = PingLastCreated();
    PingSetVisible(gv_zagaraBossPing, false);
    PingSetTooltip(gv_zagaraBossPing, StringExternal("Param/Value/567E997B"));
    libSwaC_gf_SetUnitInfoTextCampaign(UnitFromId(577), null, StringExternal("Param/Value/52EBBB47"), null);
    auto09291B66_g = UnitGroup("CreepTumorBurrowed", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto09291B66_u = UnitGroupCount(auto09291B66_g, c_unitCountAll);
    for (;; auto09291B66_u -= 1) {
        auto09291B66_var = UnitGroupUnitFromEnd(auto09291B66_g, auto09291B66_u);
        if (auto09291B66_var == null) { break; }
        UnitSetTeamColorIndex(auto09291B66_var, PlayerGetColorIndex(gv_pLAYER_02_ZERG, false));
    }
    auto9DF72A04_g = UnitGroup("InfestedCC", gv_pLAYER_02_ZERG2, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9DF72A04_u = UnitGroupCount(auto9DF72A04_g, c_unitCountAll);
    for (;; auto9DF72A04_u -= 1) {
        auto9DF72A04_var = UnitGroupUnitFromEnd(auto9DF72A04_g, auto9DF72A04_u);
        if (auto9DF72A04_var == null) { break; }
        UnitBehaviorAddPlayer(auto9DF72A04_var, "ColonyInfestation", gv_pLAYER_02_ZERG2, 1);
        UnitSetPropertyFixed(auto9DF72A04_var, c_unitPropLifePercent, libHots_gf_DifficultyValueFixed2(75.0, 75.0, 85.0));
        UnitBehaviorRemove(auto9DF72A04_var, "TerranBuildingBurnDown", 1);
        libSwaC_gf_SetUnitInfoTextCampaign(auto9DF72A04_var, null, StringExternal("Param/Value/25B22369"), null);
    }
    auto2E444423_g = UnitGroup(null, gv_pLAYER_02_ZERG, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterHasEnergy - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2E444423_u = UnitGroupCount(auto2E444423_g, c_unitCountAll);
    for (;; auto2E444423_u -= 1) {
        auto2E444423_var = UnitGroupUnitFromEnd(auto2E444423_g, auto2E444423_u);
        if (auto2E444423_var == null) { break; }
        UnitSetPropertyFixed(auto2E444423_var, c_unitPropEnergyPercent, 100.0);
    }
    auto2281DCAB_g = UnitGroup(null, gv_pLAYER_02_ZERG2, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterHasEnergy - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2281DCAB_u = UnitGroupCount(auto2281DCAB_g, c_unitCountAll);
    for (;; auto2281DCAB_u -= 1) {
        auto2281DCAB_var = UnitGroupUnitFromEnd(auto2281DCAB_g, auto2281DCAB_u);
        if (auto2281DCAB_var == null) { break; }
        UnitSetPropertyFixed(auto2281DCAB_var, c_unitPropEnergyPercent, 100.0);
    }
    libSwaC_gf_SetHatcheryRallyPoint(UnitFromId(1), PointFromId(636));
    if ((libSwaC_gf_MissionStatusCheck("ZExpedition1", libSwaC_ge_MissionStatus_Completed) == false)) {
        libSwaC_gf_SetUnitInfoTextCampaignDetailed(UnitFromId(1627), StringExternal("Param/Value/F11773C2"), UnitTypeGetName(UnitGetType(UnitFromId(1627))), StringExternal("Param/Value/73C1D0BE"));
        UnitSetState(UnitFromId(1627), c_unitStateTooltipable, true);
    }

    if (((libSwaC_gf_MissionStatusCheck("ZExpedition3", libSwaC_ge_MissionStatus_Completed) == false) || (libSwaC_gf_MissionStatusCheck("ZZerus3", libSwaC_ge_MissionStatus_Completed) == false))) {
        autoC0EB5ADF_g = UnitGroupFromId(1);
        autoC0EB5ADF_u = UnitGroupCount(autoC0EB5ADF_g, c_unitCountAll);
        for (;; autoC0EB5ADF_u -= 1) {
            autoC0EB5ADF_var = UnitGroupUnitFromEnd(autoC0EB5ADF_g, autoC0EB5ADF_u);
            if (autoC0EB5ADF_var == null) { break; }
            UnitRemove(autoC0EB5ADF_var);
        }
    }
    else {
        UnitBehaviorAddPlayer(gv_zagara, "Detector9", gv_pLAYER_02_ZERG, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music
//--------------------------------------------------------------------------------------------------
bool gt_Init04Music_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mapMusicTrack = "ZChar01MusicMain";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04Music_Init () {
    gt_Init04Music = TriggerCreate("gt_Init04Music_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto4182A387_g;
    int auto4182A387_u;
    unit auto4182A387_var;
    unitgroup auto9E7FF797_g;
    int auto9E7FF797_u;
    unit auto9E7FF797_var;
    unitgroup auto9AA19548_g;
    int auto9AA19548_u;
    unit auto9AA19548_var;
    unitgroup autoF091FE90_g;
    int autoF091FE90_u;
    unit autoF091FE90_var;

    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    auto4182A387_g = UnitGroup("ZergEggNest", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4182A387_u = UnitGroupCount(auto4182A387_g, c_unitCountAll);
    for (;; auto4182A387_u -= 1) {
        auto4182A387_var = UnitGroupUnitFromEnd(auto4182A387_g, auto4182A387_u);
        if (auto4182A387_var == null) { break; }
        UnitSetState(auto4182A387_var, c_unitStateStatusBar, false);
        UnitSetState(auto4182A387_var, c_unitStateTargetable, false);
        UnitSetState(auto4182A387_var, c_unitStateInvulnerable, true);
        UnitSetState(auto4182A387_var, c_unitStateTooltipable, false);
        ActorSend(libNtve_gf_MainActorofUnit(auto4182A387_var), "AnimGroupApply A");
    }
    auto9E7FF797_g = UnitGroup("ZergEggNestSmall", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9E7FF797_u = UnitGroupCount(auto9E7FF797_g, c_unitCountAll);
    for (;; auto9E7FF797_u -= 1) {
        auto9E7FF797_var = UnitGroupUnitFromEnd(auto9E7FF797_g, auto9E7FF797_u);
        if (auto9E7FF797_var == null) { break; }
        UnitSetState(auto9E7FF797_var, c_unitStateStatusBar, false);
        UnitSetState(auto9E7FF797_var, c_unitStateTargetable, false);
        UnitSetState(auto9E7FF797_var, c_unitStateInvulnerable, true);
        UnitSetState(auto9E7FF797_var, c_unitStateTooltipable, false);
        ActorSend(libNtve_gf_MainActorofUnit(auto9E7FF797_var), "AnimGroupApply A");
    }
    auto9AA19548_g = UnitGroup(null, gv_pLAYER_02_ZERG22, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9AA19548_u = UnitGroupCount(auto9AA19548_g, c_unitCountAll);
    for (;; auto9AA19548_u -= 1) {
        auto9AA19548_var = UnitGroupUnitFromEnd(auto9AA19548_g, auto9AA19548_u);
        if (auto9AA19548_var == null) { break; }
        UnitSetState(auto9AA19548_var, c_unitStateStatusBar, false);
        UnitSetState(auto9AA19548_var, c_unitStateTargetable, false);
        UnitSetState(auto9AA19548_var, c_unitStateInvulnerable, true);
        libSwaC_gf_SetUnitInfoTextCampaign(auto9AA19548_var, null, StringExternal("Param/Value/C7BD448C"), null);
    }
    autoF091FE90_g = UnitGroup(null, gv_pLAYER_02_ZERG222, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF091FE90_u = UnitGroupCount(autoF091FE90_g, c_unitCountAll);
    for (;; autoF091FE90_u -= 1) {
        autoF091FE90_var = UnitGroupUnitFromEnd(autoF091FE90_g, autoF091FE90_u);
        if (autoF091FE90_var == null) { break; }
        UnitSetState(autoF091FE90_var, c_unitStateStatusBar, false);
        UnitSetState(autoF091FE90_var, c_unitStateTargetable, false);
        UnitSetState(autoF091FE90_var, c_unitStateInvulnerable, true);
        libSwaC_gf_SetUnitInfoTextCampaign(autoF091FE90_var, null, StringExternal("Param/Value/FDF9DA73"), null);
    }
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(3));
    VisRevealerEnable(VisRevealerLastCreated(), true);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "CharRibs", c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    TriggerExecute(gt_FeralZergMovement, true, false);
    gv_visibilityRegions[1] = RegionFromId(6);
    gv_visibilityRegions[2] = RegionFromId(7);
    gv_visibilityRegions[3] = RegionFromId(8);
    gv_visibilityRegions[4] = RegionFromId(9);
    gv_visibilityRegions[5] = RegionFromId(10);
    gv_visibilityRegions[6] = RegionFromId(11);
    gv_visibilityRegions[7] = RegionFromId(12);
    gv_visibilityRegions[8] = RegionFromId(13);
    gv_visibilityRegions[9] = RegionFromId(14);
    gv_visibilityRegions[10] = RegionFromId(17);
    gv_visibilityRegions[11] = RegionFromId(15);
    gv_visibilityRegions[12] = RegionFromId(16);
    gv_numberOfVisibilityRegions = 12;
    gv_eggNests[1].lv_eggNest = UnitFromId(1900);
    gv_eggNests[2].lv_eggNest = UnitFromId(1902);
    gv_eggNests[3].lv_eggNest = UnitFromId(1901);
    gv_eggNests[4].lv_eggNest = UnitFromId(1905);
    gv_eggNests[5].lv_eggNest = UnitFromId(1903);
    gv_eggNests[6].lv_eggNest = UnitFromId(1904);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto14F00B83_g;
    int auto14F00B83_var;
    unitgroup auto21C79A32_g;
    int auto21C79A32_u;
    unit auto21C79A32_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
        TechTreeAbilityAllow(gv_pLAYER_02_ZERG2, AbilityCommand("FungalGrowth", 0), false);
        TechTreeAbilityAllow(gv_pLAYER_02_ZERG2, AbilityCommand("InfestedTerrans", 0), true);
    }

    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        auto14F00B83_g = gv_zergPlayers;
        auto14F00B83_var = -1;
        while (true) {
            auto14F00B83_var = PlayerGroupNextPlayer(auto14F00B83_g, auto14F00B83_var);
            if (auto14F00B83_var < 0) { break; }
            TechTreeUpgradeAddLevel(auto14F00B83_var, "zerglingmovementspeed", 1);
            TechTreeUpgradeAddLevel(auto14F00B83_var, "hydraliskspeed", 1);
        }
    }

    auto21C79A32_g = UnitGroup("Bunker", gv_pLAYER_02_ZERG2, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto21C79A32_u = UnitGroupCount(auto21C79A32_g, c_unitCountAll);
    for (;; auto21C79A32_u -= 1) {
        auto21C79A32_var = UnitGroupUnitFromEnd(auto21C79A32_g, auto21C79A32_u);
        if (auto21C79A32_var == null) { break; }
        UnitCargoCreate(auto21C79A32_var, "Marine", libHots_gf_DifficultyValueInt2(3, 3, 4));
    }
    gv_zagaraPathWaitPerEgg = 3.0;
    gv_zagaraEggCorruptionTime = libHots_gf_DifficultyValueFixed2(14.0, 14.0, 7.0);
    gv_zagaraMaximumLife = libNtve_gf_DifficultyValueFixed(400.0, 400.0, 600.0, 750.0);
    gv_zagaraMaximumEnergy = libHots_gf_DifficultyValueFixed2(200.0, 200.0, 250.0);
    gv_zagaraLifeRegen = libNtve_gf_DifficultyValueFixed(2.0, 2.0, 3.0, 4.0);
    gv_transfusionCooldown = libNtve_gf_DifficultyValueInt(7, 7, 3, 3);
    gv_zagaraReviveTime = libHots_gf_DifficultyValueFixed2(120.0, 120.0, 75.0);
    UnitSetPropertyFixed(gv_zagara, c_unitPropLifeMax, gv_zagaraMaximumLife);
    UnitSetPropertyFixed(gv_zagara, c_unitPropLifeRegen, gv_zagaraLifeRegen);
    UnitSetPropertyFixed(gv_zagara, c_unitPropEnergyMax, gv_zagaraMaximumEnergy);
    UnitSetPropertyFixed(gv_zagara, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_zagara, c_unitPropEnergyPercent, 100.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_AddMissionTipUserData("Hive Cluster");
    libSwaC_gf_AddMissionTipUserData("Base Defense");
    libSwaC_gf_AddMissionTipUserData("Zagara");
    libSwaC_gf_AddMissionTipUserData("Zergling Morph");
    libSwaC_gf_AddMissionTipUserData("Banelings");
    libSwaC_gf_AddMissionTipUserData("Kerrigan Power");
    libSwaC_gf_AddMissionTipUserData("Army Button");
    libSwaC_gf_AddMissionTipUserData("Egg Collection");
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("ZaGara", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Roach", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Hydralisk", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("SpineCrawler", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("SporeCrawler", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("InfestedTerranCampaign", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("InfestedCivilian", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Bunker", false, gv_pLAYER_01_USER);
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        libSwaC_gf_AddUnitTypeToUnitHelpPanel("Mutalisk", false, gv_pLAYER_01_USER);
        libSwaC_gf_AddUnitTypeToUnitHelpPanel("Infestor", false, gv_pLAYER_01_USER);
    }

    if (((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1) || (libSwaC_gf_MissionStatusCheck("ZExpedition3", libSwaC_ge_MissionStatus_Completed) == true) || (libSwaC_gf_MissionStatusCheck("ZZerus3", libSwaC_ge_MissionStatus_Completed) == true))) {
        libSwaC_gf_AddUnitTypeToUnitHelpPanel("Ultralisk", false, gv_pLAYER_01_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CHEAT - 100 Eggs
//--------------------------------------------------------------------------------------------------
bool gt_CHEAT100Eggs_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto6F063167_ae = 6;
    const int auto6F063167_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_eggsCollected < 100))) {
            return false;
        }

        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_eggsCollected = 100;
    libSwaC_gf_SetMissionObjectiveProgress2("ZChar01Objective1", 100, true, null, true);
    lv_i = 1;
    for ( ; ( (auto6F063167_ai >= 0 && lv_i <= auto6F063167_ae) || (auto6F063167_ai < 0 && lv_i >= auto6F063167_ae) ) ; lv_i += auto6F063167_ai ) {
        gf_AnimateEggNesttoState(lv_i, ge_PRESET_EggNestState_Full);
    }
    TriggerExecute(gt_ObjectiveCollectEggsComplete, true, false);
    TriggerExecute(gt_ObjectiveZagaraEggsComplete, true, false);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_MidQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CHEAT100Eggs_Init () {
    gt_CHEAT100Eggs = TriggerCreate("gt_CHEAT100Eggs_Func");
    TriggerAddEventChatMessage(gt_CHEAT100Eggs, gv_pLAYER_01_USER, "s2", true);
    TriggerAddEventChatMessage(gt_CHEAT100Eggs, gv_pLAYER_01_USER, "100eggs", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Created Unit
//--------------------------------------------------------------------------------------------------
bool gt_CreatedUnit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitCreatedUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((libSwaC_gf_MissionStatusCheck("ZExpedition1", libSwaC_ge_MissionStatus_Completed) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_CreateInfoText(EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreatedUnit_Init () {
    gt_CreatedUnit = TriggerCreate("gt_CreatedUnit_Func");
    TriggerAddEventUnitCreated(gt_CreatedUnit, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spine Crawler Transform
//--------------------------------------------------------------------------------------------------
bool gt_SpineCrawlerTransform_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((libSwaC_gf_MissionStatusCheck("ZExpedition1", libSwaC_ge_MissionStatus_Completed) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_CreateInfoText(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpineCrawlerTransform_Init () {
    gt_SpineCrawlerTransform = TriggerCreate("gt_SpineCrawlerTransform_Func");
    TriggerAddEventUnitAbility(gt_SpineCrawlerTransform, null, AbilityCommand("SpineCrawlerRoot", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(gt_SpineCrawlerTransform, null, AbilityCommand("SpineCrawlerUproot", 0), c_abilMorphStageUnitEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Dies
//--------------------------------------------------------------------------------------------------
bool gt_KerriganDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_StartKerriganReviveCooldown();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganDies_Init () {
    gt_KerriganDies = TriggerCreate("gt_KerriganDies_Func");
    TriggerAddEventUnitDied(gt_KerriganDies, UnitRefFromVariable("gv_kerrigan"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_StartingWorkersAutoHarvest(RegionFromId(20), RegionFromId(21));
    if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
        libSwaC_gf_RemindPlayertoSpawnDrones(225.0, 6);
        libSwaC_gf_RemindPlayertoAssign3DronestoExtractor(UnitFromId(9), 300.0);
    }

    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        TimerStart(gv_destroyZagarasBaseTimer, 840.0, false, c_timeAI);
    }

    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/858F9839"), null, UnitGetPosition(UnitFromId(1)));
    Wait(3.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveCollectEggsCreate, true, true);
    TriggerQueueExit();
    Wait(4.0, c_timeReal);
    TriggerExecute(gt_TipMissionHelpQ, true, false);
    Wait(8.0, c_timeReal);
    TriggerExecute(gt_FirstAttackZagaraTauntQ, true, false);
    Wait(20.0, c_timeReal);
    TriggerExecute(gt_FirstAttackZagaraEntersBase, true, false);
    Wait(45.0, c_timeReal);
    TriggerExecute(gt_EggRevealArea01Q, true, false);
    Wait(200.0, c_timeReal);
    TriggerExecute(gt_DestroyInfestedCommandCentersQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Dies Generic Q
//--------------------------------------------------------------------------------------------------
bool gt_UnitDiesGenericQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoF63DAEE7_g;
    int autoF63DAEE7_u;
    unit autoF63DAEE7_var;
    unitgroup auto2B63CAC4_g;
    int auto2B63CAC4_u;
    unit auto2B63CAC4_var;
    unitgroup auto9CD86608_g;
    int auto9CD86608_u;
    unit auto9CD86608_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_baseDefenseMessage == false) && (GameGetMissionTime() > 600.0) && (UnitGetOwner(EventUnit()) == gv_pLAYER_02_ZERG) && (libNtve_gf_UnitInRegion(EventUnit(), RegionCircle(PointFromId(807), 16.0)) == true) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_02_ZERG, RegionCircle(PointFromId(807), 32.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0) && (libNtve_gf_UnitInRegion(gv_kerrigan, RegionCircle(PointFromId(807), 24.0)) == false)) {
        gv_baseDefenseMessage = true;
        TriggerQueueEnter();
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libSwaC_gf_SendTransmissionCampaign(gv_zagara, "zMission_Char01|Line00048", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }
    else if (((UnitGetType(EventUnit()) == "Hatchery") || (UnitGetType(EventUnit()) == "Lair") || (UnitGetType(EventUnit()) == "Hive")) && ((UnitGetOwner(EventUnit()) == gv_pLAYER_02_ZERG) || (UnitGetOwner(EventUnit()) == gv_pLAYER_02_ZERG2))) {
        autoF63DAEE7_g = UnitGroup("Larva", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoF63DAEE7_u = UnitGroupCount(autoF63DAEE7_g, c_unitCountAll);
        for (;; autoF63DAEE7_u -= 1) {
            autoF63DAEE7_var = UnitGroupUnitFromEnd(autoF63DAEE7_g, autoF63DAEE7_u);
            if (autoF63DAEE7_var == null) { break; }
            UnitKill(autoF63DAEE7_var);
        }
        auto2B63CAC4_g = UnitGroup("Egg", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto2B63CAC4_u = UnitGroupCount(auto2B63CAC4_g, c_unitCountAll);
        for (;; auto2B63CAC4_u -= 1) {
            auto2B63CAC4_var = UnitGroupUnitFromEnd(auto2B63CAC4_g, auto2B63CAC4_u);
            if (auto2B63CAC4_var == null) { break; }
            UnitKill(auto2B63CAC4_var);
        }
    }
    else if ((UnitGetOwner(EventUnit()) == gv_pLAYER_02_ZERG2) && (UnitGetType(EventUnit()) == "Bunker")) {
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(UnitGetPosition(EventUnit()), 2.0), "InfestedHomeSmall", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Zerg, UnitGetPosition(EventUnit()));
        auto9CD86608_g = UnitGroup("Marine", gv_pLAYER_02_ZERG2, RegionCircle(UnitGetPosition(EventUnit()), 4.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto9CD86608_u = UnitGroupCount(auto9CD86608_g, c_unitCountAll);
        for (;; auto9CD86608_u -= 1) {
            auto9CD86608_var = UnitGroupUnitFromEnd(auto9CD86608_g, auto9CD86608_u);
            if (auto9CD86608_var == null) { break; }
            libNtve_gf_ReplaceUnit(auto9CD86608_var, "InfestedTerranCampaign", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitDiesGenericQ_Init () {
    gt_UnitDiesGenericQ = TriggerCreate("gt_UnitDiesGenericQ_Func");
    TriggerAddEventUnitDied(gt_UnitDiesGenericQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Feral Zerg Movement
//--------------------------------------------------------------------------------------------------
bool gt_FeralZergMovement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto28B61AD3_g;
    int auto28B61AD3_u;
    unit auto28B61AD3_var;
    unitgroup autoEC7409C0_g;
    int autoEC7409C0_u;
    unit autoEC7409C0_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto28B61AD3_g = UnitGroup(null, gv_pLAYER_02_ZERG2, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHasEnergy - 32))), 0);
    auto28B61AD3_u = UnitGroupCount(auto28B61AD3_g, c_unitCountAll);
    for (;; auto28B61AD3_u -= 1) {
        auto28B61AD3_var = UnitGroupUnitFromEnd(auto28B61AD3_g, auto28B61AD3_u);
        if (auto28B61AD3_var == null) { break; }
        UnitSetCustomValue(auto28B61AD3_var, 0, PointGetX(UnitGetPosition(auto28B61AD3_var)));
        UnitSetCustomValue(auto28B61AD3_var, 1, PointGetY(UnitGetPosition(auto28B61AD3_var)));
    }
    while (true) {
        Wait(1.0, c_timeGame);
        autoEC7409C0_g = UnitGroup(null, gv_pLAYER_02_ZERG2, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHasEnergy - 32))), 0);
        autoEC7409C0_u = UnitGroupCount(autoEC7409C0_g, c_unitCountAll);
        for (;; autoEC7409C0_u -= 1) {
            autoEC7409C0_var = UnitGroupUnitFromEnd(autoEC7409C0_g, autoEC7409C0_u);
            if (autoEC7409C0_var == null) { break; }
            if ((UnitGetCustomValue(autoEC7409C0_var, 2) > 1.5)) {
                UnitSetCustomValue(autoEC7409C0_var, 2, (UnitGetCustomValue(autoEC7409C0_var, 2) - 2.0));
            }
            else {
                if ((UnitGetCustomValue(autoEC7409C0_var, 2) > 0.5)) {
                    UnitSetCustomValue(autoEC7409C0_var, 2, 0.0);
                    AISetUnitScriptControlled(autoEC7409C0_var, false);
                }

            }
            if ((RandomInt(1, 12) == 1)) {
                libNtve_gf_AICast(autoEC7409C0_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionCircle(Point(UnitGetCustomValue(autoEC7409C0_var, 0), UnitGetCustomValue(autoEC7409C0_var, 1)), 2.0))));
                UnitIssueOrder(autoEC7409C0_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionCircle(Point(UnitGetCustomValue(autoEC7409C0_var, 0), UnitGetCustomValue(autoEC7409C0_var, 1)), 3.0))), c_orderQueueReplace);
                UnitSetCustomValue(autoEC7409C0_var, 2, 5.0);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FeralZergMovement_Init () {
    gt_FeralZergMovement = TriggerCreate("gt_FeralZergMovement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Destructible Spikes Top Center
//--------------------------------------------------------------------------------------------------
bool gt_DestructibleSpikesTopCenter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_KillDoodadsInRegion(RegionFromId(4), "CliffSpikesDestructible");
    SoundPlayAtPoint(SoundLink("Aberration_Unburrow", -1), PlayerGroupAll(), RegionGetCenter(RegionFromId(4)), 8.0, 70.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DestructibleSpikesTopCenter_Init () {
    gt_DestructibleSpikesTopCenter = TriggerCreate("gt_DestructibleSpikesTopCenter_Func");
    TriggerAddEventUnitDied(gt_DestructibleSpikesTopCenter, UnitRefFromUnit(UnitFromId(766)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Creep Blocker Removal
//--------------------------------------------------------------------------------------------------
bool gt_CreepBlockerRemoval_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoAA34C365_g;
    int autoAA34C365_u;
    unit autoAA34C365_var;
    unitgroup auto9F888AA9_g;
    int auto9F888AA9_u;
    unit auto9F888AA9_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoAA34C365_g = UnitGroup("CreepBlocker1x1", 0, RegionCircle(UnitGetPosition(EventUnitProgressUnit()), 16.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoAA34C365_u = UnitGroupCount(autoAA34C365_g, c_unitCountAll);
    for (;; autoAA34C365_u -= 1) {
        autoAA34C365_var = UnitGroupUnitFromEnd(autoAA34C365_g, autoAA34C365_u);
        if (autoAA34C365_var == null) { break; }
        UnitKill(autoAA34C365_var);
    }
    auto9F888AA9_g = UnitGroup("CreepBlocker4x4", 0, RegionCircle(UnitGetPosition(EventUnitProgressUnit()), 16.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto9F888AA9_u = UnitGroupCount(auto9F888AA9_g, c_unitCountAll);
    for (;; auto9F888AA9_u -= 1) {
        auto9F888AA9_var = UnitGroupUnitFromEnd(auto9F888AA9_g, auto9F888AA9_u);
        if (auto9F888AA9_var == null) { break; }
        UnitKill(auto9F888AA9_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreepBlockerRemoval_Init () {
    gt_CreepBlockerRemoval = TriggerCreate("gt_CreepBlockerRemoval_Func");
    TriggerAddEventUnitConstructProgress(gt_CreepBlockerRemoval, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Approaching Infested Command Centers
//--------------------------------------------------------------------------------------------------
bool gt_PlayerApproachingInfestedCommandCenters_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_DestroyInfestedCommandCentersQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerApproachingInfestedCommandCenters_Init () {
    gt_PlayerApproachingInfestedCommandCenters = TriggerCreate("gt_PlayerApproachingInfestedCommandCenters_Func");
    TriggerAddEventUnitRange(gt_PlayerApproachingInfestedCommandCenters, null, UnitFromId(948), 10.0, true);
    TriggerAddEventUnitRange(gt_PlayerApproachingInfestedCommandCenters, null, UnitFromId(946), 10.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infested Command Center Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_InfestedCommandCenterDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unit autoDC3543C0_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_ZERG2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_infestedCCsDestroyed += 1;
    autoDC3543C0_val = EventUnit();
    if (autoDC3543C0_val == UnitFromId(946)) {
        PingDestroy(gv_infestedCCPings[1]);
    }
    else if (autoDC3543C0_val == UnitFromId(948)) {
        PingDestroy(gv_infestedCCPings[2]);
    }
    else {
    }
    TriggerExecute(gt_ObjectiveDestroyInfestedCCUpdate, true, false);
    TriggerExecute(gt_InfestedCCsDestroyedQ, true, false);
    if ((gv_infestedCCsDestroyed == 2)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_ObjectiveDestroyInfestedCCComplete, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfestedCommandCenterDestroyed_Init () {
    gt_InfestedCommandCenterDestroyed = TriggerCreate("gt_InfestedCommandCenterDestroyed_Func");
    TriggerAddEventUnitDied(gt_InfestedCommandCenterDestroyed, UnitRefFromUnit(UnitFromId(948)));
    TriggerAddEventUnitDied(gt_InfestedCommandCenterDestroyed, UnitRefFromUnit(UnitFromId(946)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infested CCs Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_InfestedCCsDestroyedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoB83CAADD_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    autoB83CAADD_val = gv_infestedCCsDestroyed;
    if (autoB83CAADD_val == 1) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char01|Line00116", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoB83CAADD_val == 2) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char01|Line00117", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        if ((libSwaC_gf_MissionStatusCheck("ZExpedition1", libSwaC_ge_MissionStatus_Completed) == false) && (libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
            libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_MultiMissionCallouts|Line00015", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }

    }
    else {
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfestedCCsDestroyedQ_Init () {
    gt_InfestedCCsDestroyedQ = TriggerCreate("gt_InfestedCCsDestroyedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Destroy Infested Command Centers Q
//--------------------------------------------------------------------------------------------------
bool gt_DestroyInfestedCommandCentersQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    fixed autoAB552CAC_at;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoAB552CAC_at = 0;
    while (!((gv_inCinematic == false) && (libSwaC_gf_PlayerIsInCombatCampaign(gv_pLAYER_01_USER) == false)) && autoAB552CAC_at <= 10.0) {
        Wait(1.0, c_timeGame);
        autoAB552CAC_at = autoAB552CAC_at + 1.0;
    }
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveDestroyInfestedCCCreate, true, true);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(946)), 5.0), 3.0, false);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(948)), 5.0), 3.0, false);
    libSwaC_gf_CreateObjectivePing(false, UnitGetPosition(UnitFromId(946)), StringExternal("Param/Value/05AA5603"));
    gv_infestedCCPings[1] = PingLastCreated();
    libSwaC_gf_CreateObjectivePing(false, UnitGetPosition(UnitFromId(948)), StringExternal("Param/Value/4C33B895"));
    gv_infestedCCPings[2] = PingLastCreated();
    libSwaC_gf_RemindPlayertoCompleteBonusObjective("ZChar01Objective5", 600.0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char01|Line00112", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Char01|Line00111", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    if ((libSwaC_gf_MissionStatusCheck("ZExpedition1", libSwaC_ge_MissionStatus_Completed) == false) && (libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_MultiMissionCallouts|Line00044", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_MultiMissionCallouts|Line00032", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }

    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DestroyInfestedCommandCentersQ_Init () {
    gt_DestroyInfestedCommandCentersQ = TriggerCreate("gt_DestroyInfestedCommandCentersQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Egg Reveal - Area 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_EggRevealArea01Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_eggsCollected >= 100)) {
        return true;
    }

    SoundPlay(SoundLink("UI_ZergWarningPing", -1), PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(gt_EggRevealAreas01, true, false);
    Wait(2.0, c_timeReal);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Char01|Line00015", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EggRevealArea01Q_Init () {
    gt_EggRevealArea01Q = TriggerCreate("gt_EggRevealArea01Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Egg Reveal Areas 01
//--------------------------------------------------------------------------------------------------
bool gt_EggRevealAreas01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_RevealRegion(1);
    Wait(2.0, c_timeGame);
    gf_RevealRegion(2);
    Wait(2.0, c_timeGame);
    gf_RevealRegion(4);
    Wait(2.0, c_timeGame);
    gf_RevealRegion(7);
    Wait(2.0, c_timeGame);
    gf_RevealRegion(5);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EggRevealAreas01_Init () {
    gt_EggRevealAreas01 = TriggerCreate("gt_EggRevealAreas01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reveal More Eggs - Area 02
//--------------------------------------------------------------------------------------------------
bool gt_RevealMoreEggsArea02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!(((gv_eggsCollected >= 30) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(42), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_EggRevealArea02Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RevealMoreEggsArea02_Init () {
    gt_RevealMoreEggsArea02 = TriggerCreate("gt_RevealMoreEggsArea02_Func");
    TriggerAddEventTimePeriodic(gt_RevealMoreEggsArea02, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Egg Reveal - Area 02 Q
//--------------------------------------------------------------------------------------------------
bool gt_EggRevealArea02Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_eggsCollected >= 100)) {
        return true;
    }

    SoundPlay(SoundLink("UI_TerranPing", -1), PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(gt_EggRevealAreas02, true, false);
    Wait(2.0, c_timeReal);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Char01|Line00106", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EggRevealArea02Q_Init () {
    gt_EggRevealArea02Q = TriggerCreate("gt_EggRevealArea02Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Egg Reveal Areas 02
//--------------------------------------------------------------------------------------------------
bool gt_EggRevealAreas02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_RevealRegion(3);
    Wait(2.0, c_timeGame);
    gf_RevealRegion(6);
    Wait(2.0, c_timeGame);
    gf_RevealRegion(8);
    Wait(2.0, c_timeGame);
    gf_RevealRegion(9);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EggRevealAreas02_Init () {
    gt_EggRevealAreas02 = TriggerCreate("gt_EggRevealAreas02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reveal More Eggs - Area 03
//--------------------------------------------------------------------------------------------------
bool gt_RevealMoreEggsArea03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!(((gv_eggsCollected >= 60) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(43), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_EggRevealArea03Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RevealMoreEggsArea03_Init () {
    gt_RevealMoreEggsArea03 = TriggerCreate("gt_RevealMoreEggsArea03_Func");
    TriggerAddEventTimePeriodic(gt_RevealMoreEggsArea03, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Egg Reveal - Area 03 Q
//--------------------------------------------------------------------------------------------------
bool gt_EggRevealArea03Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_eggsCollected >= 100)) {
        return true;
    }

    SoundPlay(SoundLink("UI_TerranPing", -1), PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(gt_EggRevealAreas03, true, false);
    Wait(2.0, c_timeReal);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Char01|Line00107", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EggRevealArea03Q_Init () {
    gt_EggRevealArea03Q = TriggerCreate("gt_EggRevealArea03Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Egg Reveal Areas 03
//--------------------------------------------------------------------------------------------------
bool gt_EggRevealAreas03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_RevealRegion(10);
    Wait(2.0, c_timeGame);
    gf_RevealRegion(12);
    Wait(2.0, c_timeGame);
    gf_RevealRegion(11);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EggRevealAreas03_Init () {
    gt_EggRevealAreas03 = TriggerCreate("gt_EggRevealAreas03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Egg Cluster Assignment
//--------------------------------------------------------------------------------------------------
bool gt_EggClusterAssignment_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_closestCluster;
    fixed lv_distance;
    unitgroup lv_eggGroup;

    // Automatic Variable Declarations
    unitgroup auto8FC5DA3B_g;
    int auto8FC5DA3B_u;
    unit auto8FC5DA3B_var;
    int auto6610B2A9_ae;
    const int auto6610B2A9_ai = 1;
    unitgroup autoB8871AAB_g;
    int autoB8871AAB_u;
    unit autoB8871AAB_var;
    int autoD0FD6386_ae;
    const int autoD0FD6386_ai = 1;

    // Variable Initialization
    lv_eggGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    gv_eggClusters[1].lv_centerPoint = PointFromId(578);
    gv_eggClusters[2].lv_centerPoint = PointFromId(579);
    gv_eggClusters[3].lv_centerPoint = PointFromId(591);
    gv_eggClusters[4].lv_centerPoint = PointFromId(599);
    gv_eggClusters[5].lv_centerPoint = PointFromId(603);
    gv_eggClusters[6].lv_centerPoint = PointFromId(613);
    gv_eggClusters[7].lv_centerPoint = PointFromId(631);
    gv_eggClusters[8].lv_centerPoint = PointFromId(692);
    gv_eggClusters[9].lv_centerPoint = PointFromId(634);
    gv_eggClusters[10].lv_centerPoint = PointFromId(656);
    gv_eggClusters[11].lv_centerPoint = PointFromId(691);
    gv_eggClusters[12].lv_centerPoint = PointFromId(673);
    gv_eggClusters[13].lv_centerPoint = PointFromId(676);
    gv_eggClusters[14].lv_centerPoint = PointFromId(679);
    gv_eggClusters[15].lv_centerPoint = PointFromId(686);
    gv_eggClusters[16].lv_centerPoint = PointFromId(688);
    gv_eggClusters[17].lv_centerPoint = PointFromId(689);
    gv_eggClusters[18].lv_centerPoint = PointFromId(690);
    gv_numberOfEggClusters = 18;
    auto8FC5DA3B_g = UnitGroup(null, gv_pLAYER_02_ZERG22, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8FC5DA3B_u = UnitGroupCount(auto8FC5DA3B_g, c_unitCountAll);
    for (;; auto8FC5DA3B_u -= 1) {
        auto8FC5DA3B_var = UnitGroupUnitFromEnd(auto8FC5DA3B_g, auto8FC5DA3B_u);
        if (auto8FC5DA3B_var == null) { break; }
        lv_closestCluster = 1;
        lv_distance = DistanceBetweenPoints(UnitGetPosition(auto8FC5DA3B_var), gv_eggClusters[1].lv_centerPoint);
        auto6610B2A9_ae = gv_numberOfEggClusters;
        lv_i = 2;
        for ( ; ( (auto6610B2A9_ai >= 0 && lv_i <= auto6610B2A9_ae) || (auto6610B2A9_ai < 0 && lv_i >= auto6610B2A9_ae) ) ; lv_i += auto6610B2A9_ai ) {
            if ((DistanceBetweenPoints(UnitGetPosition(auto8FC5DA3B_var), gv_eggClusters[lv_i].lv_centerPoint) < lv_distance)) {
                lv_closestCluster = lv_i;
                lv_distance = DistanceBetweenPoints(UnitGetPosition(auto8FC5DA3B_var), gv_eggClusters[lv_i].lv_centerPoint);
            }

        }
        UnitGroupAdd(gv_eggClusters[lv_closestCluster].lv_eggs, auto8FC5DA3B_var);
    }
    autoB8871AAB_g = UnitGroup(null, gv_pLAYER_02_ZERG2, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB8871AAB_u = UnitGroupCount(autoB8871AAB_g, c_unitCountAll);
    for (;; autoB8871AAB_u -= 1) {
        autoB8871AAB_var = UnitGroupUnitFromEnd(autoB8871AAB_g, autoB8871AAB_u);
        if (autoB8871AAB_var == null) { break; }
        lv_closestCluster = 1;
        lv_distance = DistanceBetweenPoints(UnitGetPosition(autoB8871AAB_var), gv_eggClusters[1].lv_centerPoint);
        autoD0FD6386_ae = gv_numberOfEggClusters;
        lv_i = 2;
        for ( ; ( (autoD0FD6386_ai >= 0 && lv_i <= autoD0FD6386_ae) || (autoD0FD6386_ai < 0 && lv_i >= autoD0FD6386_ae) ) ; lv_i += autoD0FD6386_ai ) {
            if ((DistanceBetweenPoints(UnitGetPosition(autoB8871AAB_var), gv_eggClusters[lv_i].lv_centerPoint) < lv_distance)) {
                lv_closestCluster = lv_i;
                lv_distance = DistanceBetweenPoints(UnitGetPosition(autoB8871AAB_var), gv_eggClusters[lv_i].lv_centerPoint);
            }

        }
        UnitGroupAdd(gv_eggClusters[lv_closestCluster].lv_feralZergGroup, autoB8871AAB_var);
    }
    if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
        TriggerExecute(gt_ZagaraPathInit, true, false);
    }
    else {
        TriggerExecute(gt_ZagaraPathInitHard, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EggClusterAssignment_Init () {
    gt_EggClusterAssignment = TriggerCreate("gt_EggClusterAssignment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Egg Pickup
//--------------------------------------------------------------------------------------------------
bool gt_EggPickup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_numberOfEggs;
    int lv_i;

    // Automatic Variable Declarations
    unitgroup auto3B0F3FBC_g;
    int auto3B0F3FBC_u;
    unit auto3B0F3FBC_var;
    string autoC22E45DF_val;
    int autoA4305B7E_ae;
    const int autoA4305B7E_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto3B0F3FBC_g = UnitGroup(null, gv_pLAYER_02_ZERG22, RegionCircle(UnitGetPosition(gv_kerrigan), 3.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3B0F3FBC_u = UnitGroupCount(auto3B0F3FBC_g, c_unitCountAll);
    for (;; auto3B0F3FBC_u -= 1) {
        auto3B0F3FBC_var = UnitGroupUnitFromEnd(auto3B0F3FBC_g, auto3B0F3FBC_u);
        if (auto3B0F3FBC_var == null) { break; }
        if ((UnitGetCustomValue(auto3B0F3FBC_var, 0) < 1.0)) {
            UnitSetCustomValue(auto3B0F3FBC_var, 0, 2.0);
            libNtve_gf_ShareVisionofUnit(auto3B0F3FBC_var, false, gv_pLAYER_01_USER);
            lv_numberOfEggs = 0;
            autoC22E45DF_val = UnitGetType(auto3B0F3FBC_var);
            if (autoC22E45DF_val == "CharEggSackOneEgg") {
                lv_numberOfEggs = 1;
            }
            else if (autoC22E45DF_val == "CharEggSackTwoEgg") {
                lv_numberOfEggs = 2;
            }
            else if (autoC22E45DF_val == "CharEggSackThreeEgg") {
                lv_numberOfEggs = 3;
            }
            else {
            }
            TextTagCreate(TextReplaceWord(StringExternal("Param/Value/AB71505C"), StringExternal("Param/Value/F6E2D9A2"), IntToText(lv_numberOfEggs), c_stringReplaceAll, c_stringCase), 24, UnitGetPosition(auto3B0F3FBC_var), 1.0, true, false, PlayerGroupAll());
            TextTagSetVelocity(TextTagLastCreated(), 0.5, 90.0);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
            SoundPlay(SoundLink("UI_ResourcePickup", -1), PlayerGroupAll(), 100.0, 0.0);
            UnitSelect(auto3B0F3FBC_var, gv_pLAYER_01_USER, false);
            autoA4305B7E_ae = gv_numberOfEggClusters;
            lv_i = 1;
            for ( ; ( (autoA4305B7E_ai >= 0 && lv_i <= autoA4305B7E_ae) || (autoA4305B7E_ai < 0 && lv_i >= autoA4305B7E_ae) ) ; lv_i += autoA4305B7E_ai ) {
                if ((UnitGroupHasUnit(gv_eggClusters[lv_i].lv_eggs, auto3B0F3FBC_var) == true)) {
                    UnitGroupRemove(gv_eggClusters[lv_i].lv_eggs, auto3B0F3FBC_var);
                    break;
                }

            }
            UnitKill(auto3B0F3FBC_var);
            if ((gv_eggsCollected < 100)) {
                gv_eggsCollected += lv_numberOfEggs;
                TriggerExecute(gt_EggNestAnimations, true, false);
                if ((gv_eggsCollected >= 100)) {
                    gv_eggsCollected = 100;
                    TriggerExecute(gt_ObjectiveCollectEggsUpdate, true, false);
                    TriggerExecute(gt_ObjectiveCollectEggsComplete, true, false);
                    TriggerExecute(gt_ObjectiveZagaraEggsComplete, true, false);
                    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
                    libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/577805F8"));
                    TriggerExecute(gt_MidQ, true, false);
                }
                else {
                    TriggerExecute(gt_ObjectiveCollectEggsUpdate, true, false);
                }
                Wait(2.0, c_timeReal);
                TriggerExecute(gt__50EggQ, true, false);
                TriggerExecute(gt__90EggQ, true, false);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EggPickup_Init () {
    gt_EggPickup = TriggerCreate("gt_EggPickup_Func");
    TriggerAddEventTimePeriodic(gt_EggPickup, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Egg Nest Animations
//--------------------------------------------------------------------------------------------------
bool gt_EggNestAnimations_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_eggsCollected >= 96)) {
        gf_AnimateEggNesttoState(6, ge_PRESET_EggNestState_Full);
        return true;
    }

    if ((gv_eggsCollected >= 86)) {
        gf_AnimateEggNesttoState(4, ge_PRESET_EggNestState_Full);
        return true;
    }

    if ((gv_eggsCollected >= 76)) {
        gf_AnimateEggNesttoState(1, ge_PRESET_EggNestState_Full);
        return true;
    }

    if ((gv_eggsCollected >= 66)) {
        gf_AnimateEggNesttoState(3, ge_PRESET_EggNestState_Full);
        return true;
    }

    if ((gv_eggsCollected >= 60)) {
        gf_AnimateEggNesttoState(5, ge_PRESET_EggNestState_Full);
        return true;
    }

    if ((gv_eggsCollected >= 54)) {
        gf_AnimateEggNesttoState(2, ge_PRESET_EggNestState_Full);
        return true;
    }

    if ((gv_eggsCollected >= 48)) {
        gf_AnimateEggNesttoState(6, ge_PRESET_EggNestState_HalfFull);
        return true;
    }

    if ((gv_eggsCollected >= 38)) {
        gf_AnimateEggNesttoState(4, ge_PRESET_EggNestState_HalfFull);
        return true;
    }

    if ((gv_eggsCollected >= 28)) {
        gf_AnimateEggNesttoState(1, ge_PRESET_EggNestState_HalfFull);
        return true;
    }

    if ((gv_eggsCollected >= 18)) {
        gf_AnimateEggNesttoState(3, ge_PRESET_EggNestState_HalfFull);
        return true;
    }

    if ((gv_eggsCollected >= 12)) {
        gf_AnimateEggNesttoState(5, ge_PRESET_EggNestState_HalfFull);
        return true;
    }

    if ((gv_eggsCollected >= 6)) {
        gf_AnimateEggNesttoState(2, ge_PRESET_EggNestState_HalfFull);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EggNestAnimations_Init () {
    gt_EggNestAnimations = TriggerCreate("gt_EggNestAnimations_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 50 Egg Q
//--------------------------------------------------------------------------------------------------
bool gt__50EggQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_eggsCollected >= 50))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_eggsCollected >= 100)) {
        return true;
    }

    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    if ((UnitIsAlive(gv_kerrigan) == true)) {
        libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Char01|Line00037", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char01|Line00038", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    Wait(2.0, c_timeReal);
    libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/8F1C47BD"));
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__50EggQ_Init () {
    gt__50EggQ = TriggerCreate("gt__50EggQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 90 Egg Q
//--------------------------------------------------------------------------------------------------
bool gt__90EggQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_eggsCollected >= 90))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_eggsCollected >= 100)) {
        return true;
    }

    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    if ((UnitIsAlive(gv_kerrigan) == true)) {
        libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Char01|Line00039", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char01|Line00040", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__90EggQ_Init () {
    gt__90EggQ = TriggerCreate("gt__90EggQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Baneling Egg Pickup
//--------------------------------------------------------------------------------------------------
bool gt_BanelingEggPickup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_eggPoint;

    // Automatic Variable Declarations
    unitgroup auto6171D946_g;
    int auto6171D946_u;
    unit auto6171D946_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto6171D946_g = UnitGroup("BanelingEggNest", gv_pLAYER_02_ZERG222, RegionCircle(UnitGetPosition(gv_kerrigan), 3.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6171D946_u = UnitGroupCount(auto6171D946_g, c_unitCountAll);
    for (;; auto6171D946_u -= 1) {
        auto6171D946_var = UnitGroupUnitFromEnd(auto6171D946_g, auto6171D946_u);
        if (auto6171D946_var == null) { break; }
        UnitKill(auto6171D946_var);
        gv_banelingEggsCollected += 1;
        SoundPlay(SoundLink("UI_TerranRescueUnit", -1), PlayerGroupAll(), 100.0, 0.0);
        lv_eggPoint = UnitGetPosition(auto6171D946_var);
        gf_HatchBanelings(libHots_gf_DifficultyValueInt2(8, 8, 6), lv_eggPoint);
        libNtve_gf_KillModel(gv_banelingEggIndicator);
        if ((gv_banelingEggsCollected >= 6)) {
            TriggerExecute(gt_AchievementBanelingNestsBeforeEggs, true, false);
            TriggerExecute(gt_BanelingEggCompleteQ, true, false);
        }

        Wait(2.0, c_timeReal);
        TriggerExecute(gt_ZagaraBanelingTauntQ, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BanelingEggPickup_Init () {
    gt_BanelingEggPickup = TriggerCreate("gt_BanelingEggPickup_Func");
    TriggerAddEventTimePeriodic(gt_BanelingEggPickup, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Baneling Egg Q
//--------------------------------------------------------------------------------------------------
bool gt_BanelingEggQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_nearestBanelingEgg;
    timer lv_banelingIndicatorTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_banelingIndicatorTimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_nearestBanelingEgg = libNtve_gf_ClosestUnitToPoint(UnitGetPosition(gv_kerrigan), UnitGroup("BanelingEggNest", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    TriggerQueueEnter();
    if ((UnitIsAlive(lv_nearestBanelingEgg) == true)) {
        TimerStart(lv_banelingIndicatorTimer, 20.0, false, c_timeAI);
        libNtve_gf_AttachModelToUnit(lv_nearestBanelingEgg, "BriefingUnitSelectZerg", "Ref_Head");
        gv_banelingEggIndicator = libNtve_gf_ActorLastCreated();
    }

    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Char01|Line00049", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char01|Line00118", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/C7620A1C"), null, UnitFromId(1810));
    TriggerQueueExit();
    while (!(((TimerGetRemaining(lv_banelingIndicatorTimer) == 0.0) || (gv_gameOver == true)))) {
        Wait(1.0, c_timeGame);
    }
    libNtve_gf_KillModel(gv_banelingEggIndicator);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BanelingEggQ_Init () {
    gt_BanelingEggQ = TriggerCreate("gt_BanelingEggQ_Func");
    TriggerAddEventUnitRegion(gt_BanelingEggQ, UnitRefFromVariable("gv_kerrigan"), RegionFromId(1), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Baneling Egg Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_BanelingEggCompleteQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_banelingEggsCollected >= 6))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char01|Line00012", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    if ((gv_eggsCollected < 100)) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char01|Line00043", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        if ((UnitIsAlive(gv_kerrigan) == true)) {
            libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Char01|Line00013", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }

    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BanelingEggCompleteQ_Init () {
    gt_BanelingEggCompleteQ = TriggerCreate("gt_BanelingEggCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Egg Event
//--------------------------------------------------------------------------------------------------
bool gt_FirstEggEvent_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(libSwaC_ge_CampaginReticleType_ZergMainObjective, libSwaC_ge_CampaginReticleSize_Medium, StringExternal("Param/Value/35A995CA"), UnitFromId(640), "Ref_Head");
    gv_eggActor = libNtve_gf_ActorLastCreated();
    gv_eggTextTag = TextTagLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstEggEvent_Init () {
    gt_FirstEggEvent = TriggerCreate("gt_FirstEggEvent_Func");
    TriggerAddEventUnitRange(gt_FirstEggEvent, UnitRefFromVariable("gv_kerrigan"), UnitFromId(640), 8.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Egg Event Collected
//--------------------------------------------------------------------------------------------------
bool gt_FirstEggEventCollected_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_FirstEggEvent, false);
    libNtve_gf_KillModel(gv_eggActor);
    TextTagDestroy(gv_eggTextTag);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstEggEventCollected_Init () {
    gt_FirstEggEventCollected = TriggerCreate("gt_FirstEggEventCollected_Func");
    TriggerAddEventUnitDied(gt_FirstEggEventCollected, UnitRefFromUnit(UnitFromId(640)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zagara Egg Collection Q
//--------------------------------------------------------------------------------------------------
bool gt_ZagaraEggCollectionQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentEggCluster;
    fixed lv_waitTime;

    // Automatic Variable Declarations
    int auto067604CD_ae;
    const int auto067604CD_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveZagaraEggsCreate, true, true);
    TriggerQueueExit();
    auto067604CD_ae = gv_numberOfEggClusters;
    lv_currentEggCluster = 1;
    for ( ; ( (auto067604CD_ai >= 0 && lv_currentEggCluster <= auto067604CD_ae) || (auto067604CD_ai < 0 && lv_currentEggCluster >= auto067604CD_ae) ) ; lv_currentEggCluster += auto067604CD_ai ) {
        while (!((gv_zagaraAlive == true) && (gv_zagaraEscortsSpawned == true))) {
            Wait(1.0, c_timeAI);
        }
        if ((UnitGroupCount(gv_eggClusters[gv_zagaraPath[lv_currentEggCluster]].lv_eggs, c_unitCountAlive) >= 1)) {
            lv_waitTime = (IntToFixed(UnitGroupCount(gv_eggClusters[gv_zagaraPath[lv_currentEggCluster]].lv_eggs, c_unitCountAlive)) * gv_zagaraPathWaitPerEgg);
            while (true) {
                Wait(1.0, c_timeAI);
                if ((gv_zagaraAlive == false)) {
                    if ((UnitGroupCount(gv_eggClusters[gv_zagaraPath[lv_currentEggCluster]].lv_eggs, c_unitCountAlive) >= 1)) {
                        lv_currentEggCluster -= 1;
                    }

                    break;
                }
                else {
                    if ((UnitGroupCount(gv_eggClusters[gv_zagaraPath[lv_currentEggCluster]].lv_eggs, c_unitCountAlive) >= 1) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_zagara), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0) && (UnitHasBehavior(gv_zagara, "PsionicLift") == false) && (UnitHasBehavior(gv_zagara, "PsionicLiftRaise") == false) && (UnitTestState(gv_zagara, c_unitStateStunned) == false)) {
                        gf_CorruptEggwithZagara(libNtve_gf_ClosestUnitToPoint(UnitGetPosition(gv_zagara), gv_eggClusters[gv_zagaraPath[lv_currentEggCluster]].lv_eggs), lv_currentEggCluster);
                    }

                }
                if ((gv_eggsCollected >= 100)) {
                    break;
                }

                if ((UnitGroupCount(gv_eggClusters[gv_zagaraPath[lv_currentEggCluster]].lv_eggs, c_unitCountAlive) == 0)) {
                    if ((((gv_zagaraPath[lv_currentEggCluster] == 11) && (gv_timesZagaraDefeated == 0) && (gv_zagaraAlive == true)) || ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1) && (gv_zagaraPath[lv_currentEggCluster] == 14) && (gv_zagaraAlive == true)))) {
                        TriggerExecute(gt_ZagaraForcedEscortUpgrade, true, false);
                    }
                    else {
                        if ((gv_zagaraAlive == true)) {
                            UnitIssueOrder(gv_zagara, OrderTargetingPoint(AbilityCommand("attack", 0), gv_eggClusters[gv_zagaraPath[lv_currentEggCluster]].lv_centerPoint), c_orderQueueReplace);
                        }

                    }
                    break;
                }

            }
            if ((gv_eggsCollected >= 100)) {
                break;
            }

            Wait(lv_waitTime, c_timeAI);
        }

    }
    if ((gv_zagaraAlive == false)) {
        return true;
    }

    AIAttackWaveCancel(AIUnitGetWave(gv_zagara));
    AISetUnitScriptControlled(gv_zagara, false);
    AIRemoveUnitFromAnyWavesAndSetHome(gv_zagara, PointFromId(3));
    AIAttackWaveSetTargetPatrol(gv_pLAYER_02_ZERG, 0);
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_ZERG, UnitGetPosition(gv_zagara));
    AIAttackWaveAddWaypoint(gv_pLAYER_02_ZERG, PointFromId(3), false);
    AIAttackWaveUseUnit(gv_pLAYER_02_ZERG, gv_zagara);
    AIAttackWaveSend(gv_pLAYER_02_ZERG, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZagaraEggCollectionQ_Init () {
    gt_ZagaraEggCollectionQ = TriggerCreate("gt_ZagaraEggCollectionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zagara Path Init
//--------------------------------------------------------------------------------------------------
bool gt_ZagaraPathInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = 1;
    gv_zagaraPath[lv_index] = 1;
    lv_index += 1;
    gv_zagaraPath[lv_index] = 6;
    lv_index += 1;
    gv_zagaraPath[lv_index] = 15;
    lv_index += 1;
    gv_zagaraPath[lv_index] = 17;
    lv_index += 1;
    gv_zagaraPath[lv_index] = 18;
    lv_index += 1;
    gv_zagaraPath[lv_index] = 9;
    lv_index += 1;
    gv_zagaraPath[lv_index] = 11;
    lv_index += 1;
    gv_zagaraPath[lv_index] = 10;
    lv_index += 1;
    gv_zagaraPath[lv_index] = 7;
    lv_index += 1;
    gv_zagaraPath[lv_index] = 5;
    lv_index += 1;
    gv_zagaraPath[lv_index] = 4;
    lv_index += 1;
    gv_zagaraPath[lv_index] = 2;
    lv_index += 1;
    gv_zagaraPath[lv_index] = 3;
    lv_index += 1;
    gv_zagaraPath[lv_index] = 14;
    lv_index += 1;
    gv_zagaraPath[lv_index] = 13;
    lv_index += 1;
    gv_zagaraPath[lv_index] = 12;
    lv_index += 1;
    gv_zagaraPath[lv_index] = 16;
    lv_index += 1;
    gv_zagaraPath[lv_index] = 8;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZagaraPathInit_Init () {
    gt_ZagaraPathInit = TriggerCreate("gt_ZagaraPathInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zagara Path Init (Hard)
//--------------------------------------------------------------------------------------------------
bool gt_ZagaraPathInitHard_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 1;
    gv_zagaraPath[lv_i] = 1;
    lv_i += 1;
    gv_zagaraPath[lv_i] = 6;
    lv_i += 1;
    gv_zagaraPath[lv_i] = 15;
    lv_i += 1;
    gv_zagaraPath[lv_i] = 16;
    lv_i += 1;
    gv_zagaraPath[lv_i] = 17;
    lv_i += 1;
    gv_zagaraPath[lv_i] = 18;
    lv_i += 1;
    gv_zagaraPath[lv_i] = 9;
    lv_i += 1;
    gv_zagaraPath[lv_i] = 8;
    lv_i += 1;
    gv_zagaraPath[lv_i] = 11;
    lv_i += 1;
    gv_zagaraPath[lv_i] = 2;
    lv_i += 1;
    gv_zagaraPath[lv_i] = 12;
    lv_i += 1;
    gv_zagaraPath[lv_i] = 13;
    lv_i += 1;
    gv_zagaraPath[lv_i] = 3;
    lv_i += 1;
    gv_zagaraPath[lv_i] = 14;
    lv_i += 1;
    gv_zagaraPath[lv_i] = 10;
    lv_i += 1;
    gv_zagaraPath[lv_i] = 7;
    lv_i += 1;
    gv_zagaraPath[lv_i] = 5;
    lv_i += 1;
    gv_zagaraPath[lv_i] = 4;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZagaraPathInitHard_Init () {
    gt_ZagaraPathInitHard = TriggerCreate("gt_ZagaraPathInitHard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Attack - Zagara Taunt Q
//--------------------------------------------------------------------------------------------------
bool gt_FirstAttackZagaraTauntQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZChar01MusicEvent1_ZagaraTaunts", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_zagara, "zMission_Char01|Line00017", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_zagara, "zMission_Char01|Line00019", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstAttackZagaraTauntQ_Init () {
    gt_FirstAttackZagaraTauntQ = TriggerCreate("gt_FirstAttackZagaraTauntQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Attack - Zagara Enters Base
//--------------------------------------------------------------------------------------------------
bool gt_FirstAttackZagaraEntersBase_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_angle;

    // Automatic Variable Declarations
    unitgroup auto31CD32E2_g;
    int auto31CD32E2_u;
    unit auto31CD32E2_var;

    // Variable Initialization
    lv_angle = -90.0;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AIAttackWaveSetTargetEscort(gv_pLAYER_02_ZERG, libNtve_gf_ConvertUnitToUnitGroup(gv_zagara), 0);
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_ZERG, UnitGetPosition(gv_zagara));
    AISetUnitScriptControlled(gv_zagara, false);
    auto31CD32E2_g = UnitGroup("Zergling", gv_pLAYER_02_ZERG, RegionFromId(40), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto31CD32E2_u = UnitGroupCount(auto31CD32E2_g, c_unitCountAll);
    for (;; auto31CD32E2_u -= 1) {
        auto31CD32E2_var = UnitGroupUnitFromEnd(auto31CD32E2_g, auto31CD32E2_u);
        if (auto31CD32E2_var == null) { break; }
        lv_angle -= 20.0;
        AISetUnitScriptControlled(auto31CD32E2_var, false);
        AIAttackWaveAddEscortUnit(gv_pLAYER_02_ZERG, auto31CD32E2_var, gv_zagara, 2.5, lv_angle);
    }
    AIAttackWaveSend(gv_pLAYER_02_ZERG, 0, true);
    UnitIssueOrder(gv_zagara, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(41))), c_orderQueueReplace);
    UnitIssueOrder(gv_zagara, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(2)), c_orderQueueAddToEnd);
    libNtve_gf_ShareVisionofUnit(gv_zagara, true, gv_pLAYER_01_USER);
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/0E2745F0"), null, gv_zagara);
    libSwaC_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_zagara), 2.0, Color(100.00, 0.00, 0.00));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstAttackZagaraEntersBase_Init () {
    gt_FirstAttackZagaraEntersBase = TriggerCreate("gt_FirstAttackZagaraEntersBase_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Attack - Baneling Defense
//--------------------------------------------------------------------------------------------------
bool gt_FirstAttackBanelingDefense_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto90A0772B_n;
    int auto90A0772B_i;
    int autoB67C14F2_n;
    int autoB67C14F2_i;
    int auto764CF606_n;
    int auto764CF606_i;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((EventUnit() == gv_zagara))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_FirstAttackBanelingDefenseQ, true, false);
    auto90A0772B_n = libHots_gf_DifficultyValueInt2(5, 5, 4);
    for (auto90A0772B_i = 1; auto90A0772B_i <= auto90A0772B_n; auto90A0772B_i += 1) {
        gf_FeralBanelingAttack(RegionFromId(39), RegionFromId(41));
    }
    autoB67C14F2_n = libHots_gf_DifficultyValueInt2(4, 4, 3);
    for (autoB67C14F2_i = 1; autoB67C14F2_i <= autoB67C14F2_n; autoB67C14F2_i += 1) {
        gf_FeralBanelingAttack(RegionFromId(44), RegionFromId(41));
    }
    auto764CF606_n = libHots_gf_DifficultyValueInt2(4, 4, 3);
    for (auto764CF606_i = 1; auto764CF606_i <= auto764CF606_n; auto764CF606_i += 1) {
        gf_FeralBanelingAttack(RegionFromId(45), RegionFromId(41));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstAttackBanelingDefense_Init () {
    gt_FirstAttackBanelingDefense = TriggerCreate("gt_FirstAttackBanelingDefense_Func");
    TriggerAddEventUnitRegion(gt_FirstAttackBanelingDefense, null, RegionFromId(41), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Attack - Baneling Defense Q
//--------------------------------------------------------------------------------------------------
bool gt_FirstAttackBanelingDefenseQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/26BD98AC"), null, RegionGetCenter(RegionFromId(39)));
    libSwaC_gf_PingMinimapCampaign(PlayerGroupAll(), RegionGetCenter(RegionFromId(39)), 2.0, Color(100.00, 0.00, 0.00));
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char01|Line00109", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstAttackBanelingDefenseQ_Init () {
    gt_FirstAttackBanelingDefenseQ = TriggerCreate("gt_FirstAttackBanelingDefenseQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Attack - Reinforcements
//--------------------------------------------------------------------------------------------------
bool gt_FirstAttackReinforcements_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto9D0D67C2_g;
    int auto9D0D67C2_u;
    unit auto9D0D67C2_var;
    int autoFBCF3AF2_n;
    int autoFBCF3AF2_i;
    int autoC92AF17C_n;
    int autoC92AF17C_i;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto9D0D67C2_g = gv_feralBanelingGroup;
    auto9D0D67C2_u = UnitGroupCount(auto9D0D67C2_g, c_unitCountAll);
    for (;; auto9D0D67C2_u -= 1) {
        auto9D0D67C2_var = UnitGroupUnitFromEnd(auto9D0D67C2_g, auto9D0D67C2_u);
        if (auto9D0D67C2_var == null) { break; }
        libNtve_gf_RescueUnit(auto9D0D67C2_var, gv_pLAYER_01_USER, true);
    }
    Wait(2.0, c_timeGame);
    autoFBCF3AF2_n = (6 - UnitGroupCount(UnitGroup("ZerglingBurrowed", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
    for (autoFBCF3AF2_i = 1; autoFBCF3AF2_i <= autoFBCF3AF2_n; autoFBCF3AF2_i += 1) {
        UnitCreate(1, "ZerglingBurrowed", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(46)), libNtve_gf_RandomAngle());
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        Wait(0.25, c_timeGame);
    }
    autoC92AF17C_n = (6 - UnitGroupCount(UnitGroup("Baneling", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
    for (autoC92AF17C_i = 1; autoC92AF17C_i <= autoC92AF17C_n; autoC92AF17C_i += 1) {
        Wait(0.25, c_timeGame);
        UnitCreate(1, "BanelingBurrowed", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(46)), libNtve_gf_RandomAngle());
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowBanelingUp", 0)), c_orderQueueReplace);
    }
    TransmissionWait(gv_zagaraFirstDeath, 0.0);
    Wait(6.0, c_timeGame);
    TriggerExecute(gt_AbathurTeachesBanelingsQ, true, true);
    TriggerExecute(gt_ZerglingBriefSelect, true, false);
    if ((libHots_gf_DifficultyValueSwarmBoolean(true, true, false) == true)) {
        UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("MorphZerglingToBaneling", 0), true);
        TriggerEnable(gt_BanelingMorphHighlightDisable, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstAttackReinforcements_Init () {
    gt_FirstAttackReinforcements = TriggerCreate("gt_FirstAttackReinforcements_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zergling Brief Select
//--------------------------------------------------------------------------------------------------
bool gt_ZerglingBriefSelect_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_anyZerglingSelected;

    // Automatic Variable Declarations
    unitgroup autoC27B3AE2_g;
    int autoC27B3AE2_u;
    unit autoC27B3AE2_var;
    unitgroup auto7E177317_g;
    int auto7E177317_u;
    unit auto7E177317_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libHots_gf_DifficultyValueSwarmBoolean(true, true, false) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoC27B3AE2_g = UnitGroupSelected(gv_pLAYER_01_USER);
    autoC27B3AE2_u = UnitGroupCount(autoC27B3AE2_g, c_unitCountAll);
    for (;; autoC27B3AE2_u -= 1) {
        autoC27B3AE2_var = UnitGroupUnitFromEnd(autoC27B3AE2_g, autoC27B3AE2_u);
        if (autoC27B3AE2_var == null) { break; }
        if ((UnitGetType(autoC27B3AE2_var) == "Zergling")) {
            lv_anyZerglingSelected = true;
            TriggerExecute(gt_ZerglingSelectedtoMorphBaneling, false, false);
            break;
        }

    }
    if ((lv_anyZerglingSelected == false)) {
        auto7E177317_g = UnitGroup("Zergling", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto7E177317_u = UnitGroupCount(auto7E177317_g, c_unitCountAll);
        for (;; auto7E177317_u -= 1) {
            auto7E177317_var = UnitGroupUnitFromEnd(auto7E177317_g, auto7E177317_u);
            if (auto7E177317_var == null) { break; }
            libNtve_gf_AttachModelToUnit(auto7E177317_var, "BriefingUnitSelectZergSmall", "Ref_Origin");
            gv_numberOfZerglingActors += 1;
            gv_zerglingActors[gv_numberOfZerglingActors] = libNtve_gf_ActorLastCreated();
            if ((gv_numberOfZerglingActors >= 10)) {
                break;
            }

        }
        TriggerEnable(gt_ZerglingSelectedtoMorphBaneling, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZerglingBriefSelect_Init () {
    gt_ZerglingBriefSelect = TriggerCreate("gt_ZerglingBriefSelect_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zergling Selected to Morph Baneling
//--------------------------------------------------------------------------------------------------
bool gt_ZerglingSelectedtoMorphBaneling_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int autoAE7ED17E_ae;
    const int autoAE7ED17E_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Zergling"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoAE7ED17E_ae = gv_numberOfZerglingActors;
    lv_i = 1;
    for ( ; ( (autoAE7ED17E_ai >= 0 && lv_i <= autoAE7ED17E_ae) || (autoAE7ED17E_ai < 0 && lv_i >= autoAE7ED17E_ae) ) ; lv_i += autoAE7ED17E_ai ) {
        libNtve_gf_KillModel(gv_zerglingActors[lv_i]);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZerglingSelectedtoMorphBaneling_Init () {
    gt_ZerglingSelectedtoMorphBaneling = TriggerCreate("gt_ZerglingSelectedtoMorphBaneling_Func");
    TriggerEnable(gt_ZerglingSelectedtoMorphBaneling, false);
    TriggerAddEventUnitSelected(gt_ZerglingSelectedtoMorphBaneling, null, gv_pLAYER_01_USER, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Abathur Teaches Banelings Q
//--------------------------------------------------------------------------------------------------
bool gt_AbathurTeachesBanelingsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char01|Line00097", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AbathurTeachesBanelingsQ_Init () {
    gt_AbathurTeachesBanelingsQ = TriggerCreate("gt_AbathurTeachesBanelingsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Baneling Morph Highlight Disable
//--------------------------------------------------------------------------------------------------
bool gt_BanelingMorphHighlightDisable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("MorphZerglingToBaneling", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BanelingMorphHighlightDisable_Init () {
    gt_BanelingMorphHighlightDisable = TriggerCreate("gt_BanelingMorphHighlightDisable_Func");
    TriggerEnable(gt_BanelingMorphHighlightDisable, false);
    TriggerAddEventUnitAbility(gt_BanelingMorphHighlightDisable, null, AbilityCommand("MorphZerglingToBaneling", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zagara Dies
//--------------------------------------------------------------------------------------------------
bool gt_ZagaraDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_zagaraAlive == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_zagaraAlive = false;
    gv_zagaraEscortsSpawned = false;
    gv_timesZagaraDefeated += 1;
    PingDestroy(gv_zagaraBossPing);
    AIAttackWaveCancel(gv_zagaraEscortWave);
    TriggerExecute(gt_ZagaraDeathQ, true, false);
    if ((gv_eggsCollected < 100)) {
        TimerStart(TimerCreate(), gv_zagaraReviveTime, false, c_timeAI);
    }
    else {
        return true;
    }
    libSwaC_gf_TimerWindowCreate2(TimerLastStarted(), StringExternal("Param/Value/BA756A5C"), true, false, libSwaC_ge_CampaignTimerPositiveNegativeOptions_Positive);
    TimerWindowSetFormat(TimerWindowLastCreated(), StringToText("<mintotal/>:<sec2/>"));
    libNtve_gf_WaitForTimer(TimerLastStarted(), 0.0, false);
    TimerWindowDestroy(TimerWindowLastCreated());
    UnitCreate(1, "ZaGara", 0, gv_pLAYER_02_ZERG, PointFromId(3), 270.0);
    UnitSetPropertyFixed(gv_zagara, c_unitPropLifeMax, gv_zagaraMaximumLife);
    UnitSetPropertyFixed(gv_zagara, c_unitPropLifeRegen, gv_zagaraLifeRegen);
    UnitSetPropertyFixed(gv_zagara, c_unitPropEnergyMax, gv_zagaraMaximumEnergy);
    UnitSetPropertyFixed(gv_zagara, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_zagara, c_unitPropEnergyPercent, 100.0);
    libSwaC_gf_SetUnitInfoTextCampaign(UnitLastCreated(), null, StringExternal("Param/Value/87F7AEAC"), null);
    gv_zagara = UnitLastCreated();
    gv_zagaraAlive = true;
    libSCDH_gf_CreateHeroPing(gv_zagara, libSCDH_ge_HeroPingType_Enemy);
    gv_zagaraBossPing = PingLastCreated();
    PingSetVisible(gv_zagaraBossPing, false);
    PingSetTooltip(gv_zagaraBossPing, StringExternal("Param/Value/993092C1"));
    libNtve_gf_ShareVisionofUnit(gv_zagara, true, gv_pLAYER_01_USER);
    TriggerExecute(gt_ZagaraReviveQ, true, false);
    if ((gv_eggsCollected < 100)) {
        TriggerExecute(gt_ZagaraEscortsCreated, true, true);
    }
    else {
        gv_zagaraAlive = true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZagaraDies_Init () {
    gt_ZagaraDies = TriggerCreate("gt_ZagaraDies_Func");
    TriggerAddEventUnitDied(gt_ZagaraDies, UnitRefFromVariable("gv_zagara"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zagara Deep Burrows
//--------------------------------------------------------------------------------------------------
bool gt_ZagaraDeepBurrows_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_zagaraDeathPosition;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_zagara, c_unitPropLife, c_unitPropCurrent) <= 60.0))) {
            return false;
        }

        if (!((gv_zagaraAlive == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_zagaraAlive = false;
    gv_zagaraEscortsSpawned = false;
    gv_timesZagaraDefeated += 1;
    libNtve_gf_ShareVisionofUnit(gv_zagara, false, gv_pLAYER_01_USER);
    PingDestroy(gv_zagaraBossPing);
    AIAttackWaveCancel(gv_zagaraEscortWave);
    libNtve_gf_PauseUnit(gv_zagara, false);
    UnitBehaviorRemove(gv_zagara, "PsionicPulse", 1);
    UnitBehaviorRemove(gv_zagara, "PsiGrip", 1);
    UnitBehaviorRemove(gv_zagara, "PsiGripHeight", 1);
    UnitBehaviorRemove(gv_zagara, "PsionicLift", 1);
    UnitBehaviorRemove(gv_zagara, "PsionicLiftRaise", 1);
    UnitSetState(gv_zagara, c_unitStateInvulnerable, true);
    UnitSetState(gv_zagara, c_unitStateTargetable, false);
    lv_zagaraDeathPosition = UnitGetPosition(gv_zagara);
    UnitIssueOrder(gv_zagara, OrderTargetingPoint(AbilityCommand("ZaGaraDeepTunnel", 0), PointFromId(643)), c_orderQueueReplace);
    Wait(0.83, c_timeGame);
    UnitSelect(gv_zagara, gv_pLAYER_01_USER, false);
    UnitSetState(gv_zagara, c_unitStateSelectable, false);
    UnitSetState(gv_zagara, c_unitStateHidden, true);
    Wait(1.0, c_timeGame);
    libNtve_gf_PauseUnit(gv_zagara, true);
    if ((libNtve_gf_UnitInRegion(gv_kerrigan, RegionCircle(lv_zagaraDeathPosition, 24.0)) == false) && (TriggerIsEnabled(gt_ZagaraMinionDeathQ) == true)) {
        TriggerExecute(gt_ZagaraMinionDeathQ, true, false);
    }
    else {
        TriggerExecute(gt_ZagaraDeathQ, true, false);
    }
    if ((gv_timesZagaraDefeated == 1)) {
        gv_zagaraReviveTime = 75.0;
        TriggerExecute(gt_FirstAttackReinforcements, true, false);
    }
    else {
        gv_zagaraReviveTime = libHots_gf_DifficultyValueFixed2(150.0, 120.0, 90.0);
    }
    if ((gv_eggsCollected < 100)) {
        TimerStart(TimerCreate(), gv_zagaraReviveTime, false, c_timeAI);
    }
    else {
        return true;
    }
    libSwaC_gf_TimerWindowCreate2(TimerLastStarted(), StringExternal("Param/Value/50FB92C3"), true, false, libSwaC_ge_CampaignTimerPositiveNegativeOptions_Positive);
    TimerWindowSetFormat(TimerWindowLastCreated(), StringToText("<mintotal/>:<sec2/>"));
    libNtve_gf_WaitForTimer(TimerLastStarted(), 0.0, false);
    TimerWindowDestroy(TimerWindowLastCreated());
    libNtve_gf_PauseUnit(gv_zagara, false);
    UnitSetState(gv_zagara, c_unitStateInvulnerable, false);
    UnitSetState(gv_zagara, c_unitStateTargetable, true);
    UnitSetPropertyFixed(gv_zagara, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_zagara, c_unitPropEnergyPercent, 100.0);
    UnitIssueOrder(gv_zagara, OrderTargetingPoint(AbilityCommand("ZaGaraDeepTunnel", 0), PointFromId(3)), c_orderQueueReplace);
    Wait(0.84, c_timeGame);
    UnitSetState(gv_zagara, c_unitStateHidden, false);
    UnitSetState(gv_zagara, c_unitStateSelectable, true);
    Wait(2.0, c_timeAI);
    gv_zagaraAlive = true;
    libSCDH_gf_CreateHeroPing(gv_zagara, libSCDH_ge_HeroPingType_Enemy);
    gv_zagaraBossPing = PingLastCreated();
    PingSetVisible(gv_zagaraBossPing, false);
    PingSetTooltip(gv_zagaraBossPing, StringExternal("Param/Value/1E4278AD"));
    libNtve_gf_ShareVisionofUnit(gv_zagara, true, gv_pLAYER_01_USER);
    TriggerExecute(gt_ZagaraReviveQ, true, false);
    if ((gv_timesZagaraDefeated == 1)) {
        TriggerExecute(gt_ZagaraEggCollectionQ, true, false);
    }

    if ((gv_eggsCollected < 100)) {
        TriggerExecute(gt_ZagaraEscortsCreated, true, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZagaraDeepBurrows_Init () {
    gt_ZagaraDeepBurrows = TriggerCreate("gt_ZagaraDeepBurrows_Func");
    TriggerAddEventUnitDamaged(gt_ZagaraDeepBurrows, UnitRefFromVariable("gv_zagara"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zagara Forced Escort Upgrade
//--------------------------------------------------------------------------------------------------
bool gt_ZagaraForcedEscortUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_zagaraAlive == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_zagaraAlive = false;
    gv_zagaraEscortsSpawned = false;
    gv_timesZagaraDefeated += 1;
    AIAttackWaveCancel(gv_zagaraEscortWave);
    UnitIssueOrder(gv_zagara, OrderTargetingPoint(AbilityCommand("ZaGaraDeepTunnel", 0), PointFromId(3)), c_orderQueueReplace);
    Wait(2.0, c_timeAI);
    gv_zagaraAlive = true;
    TriggerExecute(gt_ZagaraEscortsCreated, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZagaraForcedEscortUpgrade_Init () {
    gt_ZagaraForcedEscortUpgrade = TriggerCreate("gt_ZagaraForcedEscortUpgrade_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zagara Escorts Created
//--------------------------------------------------------------------------------------------------
bool gt_ZagaraEscortsCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
        AIAttackWaveSetTargetEscort(gv_pLAYER_02_ZERG, libNtve_gf_ConvertUnitToUnitGroup(gv_zagara), 0);
    }
    else {
        AIAttackWaveSetTargetEscort(gv_pLAYER_02_ZERG, libNtve_gf_ConvertUnitToUnitGroup(gv_zagara), 2);
    }
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_ZERG, UnitGetPosition(gv_zagara));
    if ((gv_timesZagaraDefeated == 1)) {
        if ((libHots_gf_DifficultyValueSwarmBoolean(false, false, true) == true)) {
            AIAttackWaveAddEscortType(gv_pLAYER_02_ZERG, "Hydralisk", gv_zagara, 4.0, 60.0);
            AIAttackWaveAddEscortType(gv_pLAYER_02_ZERG, "Hydralisk", gv_zagara, 4.0, -60.0);
            AIAttackWaveAddEscortType(gv_pLAYER_02_ZERG, "Hydralisk", gv_zagara, 4.0, 180.0);
        }
        else {
            AIAttackWaveAddEscortType(gv_pLAYER_02_ZERG, "Hydralisk", gv_zagara, 4.0, 60.0);
            AIAttackWaveAddEscortType(gv_pLAYER_02_ZERG, "Hydralisk", gv_zagara, 4.0, -60.0);
        }
    }
    else {
        if ((gv_timesZagaraDefeated == 2)) {
            if ((libHots_gf_DifficultyValueSwarmBoolean(false, false, true) == true)) {
                AIAttackWaveAddEscortType(gv_pLAYER_02_ZERG, "Hydralisk", gv_zagara, 4.0, 60.0);
                AIAttackWaveAddEscortType(gv_pLAYER_02_ZERG, "Hydralisk", gv_zagara, 4.0, 0.0);
                AIAttackWaveAddEscortType(gv_pLAYER_02_ZERG, "Hydralisk", gv_zagara, 4.0, -60.0);
                AIAttackWaveAddEscortType(gv_pLAYER_02_ZERG, "Hydralisk", gv_zagara, 4.0, 120.0);
                AIAttackWaveAddEscortType(gv_pLAYER_02_ZERG, "Hydralisk", gv_zagara, 4.0, 240.0);
            }
            else {
                AIAttackWaveAddEscortType(gv_pLAYER_02_ZERG, "Hydralisk", gv_zagara, 4.0, 60.0);
                AIAttackWaveAddEscortType(gv_pLAYER_02_ZERG, "Hydralisk", gv_zagara, 4.0, -60.0);
                AIAttackWaveAddEscortType(gv_pLAYER_02_ZERG, "Hydralisk", gv_zagara, 4.0, 180.0);
            }
        }
        else {
            if ((libHots_gf_DifficultyValueSwarmBoolean(false, false, true) == true)) {
                AIAttackWaveAddEscortType(gv_pLAYER_02_ZERG, "Roach", gv_zagara, 4.0, 22.5);
                AIAttackWaveAddEscortType(gv_pLAYER_02_ZERG, "Roach", gv_zagara, 4.0, -22.5);
                AIAttackWaveAddEscortType(gv_pLAYER_02_ZERG, "Hydralisk", gv_zagara, 4.0, 67.5);
                AIAttackWaveAddEscortType(gv_pLAYER_02_ZERG, "Hydralisk", gv_zagara, 4.0, -67.5);
                AIAttackWaveAddEscortType(gv_pLAYER_02_ZERG, "Hydralisk", gv_zagara, 4.0, 112.5);
                AIAttackWaveAddEscortType(gv_pLAYER_02_ZERG, "Hydralisk", gv_zagara, 4.0, 157.5);
            }
            else {
                AIAttackWaveAddEscortType(gv_pLAYER_02_ZERG, "Hydralisk", gv_zagara, 4.0, 45.0);
                AIAttackWaveAddEscortType(gv_pLAYER_02_ZERG, "Hydralisk", gv_zagara, 4.0, -45.0);
                AIAttackWaveAddEscortType(gv_pLAYER_02_ZERG, "Hydralisk", gv_zagara, 4.0, 135.0);
                AIAttackWaveAddEscortType(gv_pLAYER_02_ZERG, "Hydralisk", gv_zagara, 4.0, -135.0);
            }
        }
    }
    AIAttackWaveSend(gv_pLAYER_02_ZERG, 60, false);
    gv_zagaraEscortWave = WaveLastCreated();
    Wait(60.0, c_timeAI);
    if ((gv_zagaraAlive == true)) {
        gv_zagaraEscortsSpawned = true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZagaraEscortsCreated_Init () {
    gt_ZagaraEscortsCreated = TriggerCreate("gt_ZagaraEscortsCreated_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zagara Transfusion
//--------------------------------------------------------------------------------------------------
bool gt_ZagaraTransfusion_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_target;

    // Automatic Variable Declarations
    unitgroup auto64931796_g;
    int auto64931796_u;
    unit auto64931796_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_zagaraAlive == true))) {
            return false;
        }

        if (!((gv_zagaraCorruptingEgg == false))) {
            return false;
        }

        if (!((TimerGetRemaining(gv_transfusionCooldownTimer) <= 0.1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto64931796_g = UnitGroup(null, gv_pLAYER_02_ZERG, RegionCircle(UnitGetPosition(gv_zagara), 6.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto64931796_u = UnitGroupCount(auto64931796_g, c_unitCountAll);
    for (;; auto64931796_u -= 1) {
        auto64931796_var = UnitGroupUnitFromEnd(auto64931796_g, auto64931796_u);
        if (auto64931796_var == null) { break; }
        if ((UnitGetPropertyFixed(auto64931796_var, c_unitPropLifePercent, c_unitPropCurrent) <= 40.0) && (UnitGetPropertyFixed(auto64931796_var, c_unitPropLifeMax, c_unitPropCurrent) >= 75.0)) {
            UnitIssueOrder(gv_zagara, OrderTargetingUnit(AbilityCommand("Transfusion", 0), auto64931796_var), c_orderQueueReplace);
            TimerStart(gv_transfusionCooldownTimer, IntToFixed(gv_transfusionCooldown), false, c_timeAI);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZagaraTransfusion_Init () {
    gt_ZagaraTransfusion = TriggerCreate("gt_ZagaraTransfusion_Func");
    TriggerAddEventTimePeriodic(gt_ZagaraTransfusion, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zagara 25 Egg Q
//--------------------------------------------------------------------------------------------------
bool gt_Zagara25EggQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_eggsLostToZagara >= 25))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_eggsCollected >= 100)) {
        return true;
    }

    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char01|Line00009", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Zagara25EggQ_Init () {
    gt_Zagara25EggQ = TriggerCreate("gt_Zagara25EggQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zagara 50 Egg Q
//--------------------------------------------------------------------------------------------------
bool gt_Zagara50EggQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_eggsLostToZagara >= 50))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_eggsCollected >= 100)) {
        return true;
    }

    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_zagara, "zMission_Char01|Line00034", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Zagara50EggQ_Init () {
    gt_Zagara50EggQ = TriggerCreate("gt_Zagara50EggQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zagara 75 Egg Q
//--------------------------------------------------------------------------------------------------
bool gt_Zagara75EggQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_eggsLostToZagara >= 75))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_eggsCollected >= 100)) {
        return true;
    }

    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char01|Line00035", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Zagara75EggQ_Init () {
    gt_Zagara75EggQ = TriggerCreate("gt_Zagara75EggQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zagara 90 Egg Q
//--------------------------------------------------------------------------------------------------
bool gt_Zagara90EggQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_eggsLostToZagara >= 90))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_eggsCollected >= 100)) {
        return true;
    }

    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_zagara, "zMission_Char01|Line00036", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Zagara90EggQ_Init () {
    gt_Zagara90EggQ = TriggerCreate("gt_Zagara90EggQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zagara First Attack Q
//--------------------------------------------------------------------------------------------------
bool gt_ZagaraFirstAttackQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_timeoutTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timeoutTimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(255.0, c_timeAI);
    TimerStart(lv_timeoutTimer, 30.0, false, c_timeAI);
    TriggerQueueEnter();
    if ((libSwaC_gf_MissionObjectiveStateCheck("ZChar01Objective1", libSwaC_ge_MissionObjectiveState_Completed) == false) && (TimerGetRemaining(lv_timeoutTimer) > 0.0)) {
        SoundPlay(SoundLink("UI_ZergWarning", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(2.0, c_timeGame);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char01|Line00014", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }

    TriggerQueueExit();
    Wait(60.0, c_timeAI);
    TriggerQueueEnter();
    if ((libSwaC_gf_MissionObjectiveStateCheck("ZChar01Objective1", libSwaC_ge_MissionObjectiveState_Completed) == false) && (UnitGroupCount(UnitGroup("SpineCrawler", gv_pLAYER_01_USER, RegionCircle(PointFromId(2), 24.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("SpineCrawlerUprooted", gv_pLAYER_01_USER, RegionCircle(PointFromId(2), 24.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0)) {
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char01|Line00053", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZagaraFirstAttackQ_Init () {
    gt_ZagaraFirstAttackQ = TriggerCreate("gt_ZagaraFirstAttackQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zagara Big Attack Q
//--------------------------------------------------------------------------------------------------
bool gt_ZagaraBigAttackQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_timeoutTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timeoutTimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((gv_eggsCollected < 100))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(lv_timeoutTimer, 30.0, false, c_timeAI);
    TriggerQueueEnter();
    if (((TimerGetRemaining(lv_timeoutTimer) == 0.0) || (gv_eggsCollected >= 100))) {
        return true;
    }

    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_zagara, "zMission_Char01|Line00020", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    Wait(2.0, c_timeReal);
    SoundPlay(SoundLink("UI_ZergWarning", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeReal);
    if (((TimerGetRemaining(lv_timeoutTimer) == 0.0) || (gv_eggsCollected >= 100))) {
        return true;
    }

    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char01|Line00021", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char01|Line00022", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZagaraBigAttackQ_Init () {
    gt_ZagaraBigAttackQ = TriggerCreate("gt_ZagaraBigAttackQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zagara Death Q
//--------------------------------------------------------------------------------------------------
bool gt_ZagaraDeathQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_firedOnce;

    // Automatic Variable Declarations
    int auto408F97FE_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    if ((gv_zagaraDeathExplained == false)) {
        gv_zagaraDeathExplained = true;
        lv_firedOnce = true;
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char01|Line00052", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        gv_zagaraFirstDeath = TransmissionLastSent();
    }
    else {
        if ((gv_eggsCollected < 100)) {
            auto408F97FE_val = RandomInt(1, 5);
            if (auto408F97FE_val == 1) {
                libSwaC_gf_SendTransmissionCampaign(gv_zagara, "zMission_Char01|Line00023", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (auto408F97FE_val == 2) {
                libSwaC_gf_SendTransmissionCampaign(gv_zagara, "zMission_Char01|Line00024", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (auto408F97FE_val == 3) {
                libSwaC_gf_SendTransmissionCampaign(gv_zagara, "zMission_Char01|Line00025", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (auto408F97FE_val == 4) {
                libSwaC_gf_SendTransmissionCampaign(gv_zagara, "zMission_Char01|Line00054", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (auto408F97FE_val == 5) {
                libSwaC_gf_SendTransmissionCampaign(gv_zagara, "zMission_Char01|Line00055", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else {
            }
        }
        else {
            libSwaC_gf_SendTransmissionCampaign(gv_zagara, "zMission_Char01|Line00026", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZagaraDeathQ_Init () {
    gt_ZagaraDeathQ = TriggerCreate("gt_ZagaraDeathQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zagara Revive Q
//--------------------------------------------------------------------------------------------------
bool gt_ZagaraReviveQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto3E91A50D_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZChar01MusicEvent13_ZagaraReturns", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    if ((gv_eggsCollected < 100)) {
        if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_ZERG, RegionFromId(18), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            lv_index = RandomInt(1, 5);
        }
        else {
            lv_index = 4;
        }
        auto3E91A50D_val = lv_index;
        if (auto3E91A50D_val == 1) {
            libSwaC_gf_SendTransmissionCampaign(gv_zagara, "zMission_Char01|Line00027", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto3E91A50D_val == 2) {
            libSwaC_gf_SendTransmissionCampaign(gv_zagara, "zMission_Char01|Line00028", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto3E91A50D_val == 3) {
            libSwaC_gf_SendTransmissionCampaign(gv_zagara, "zMission_Char01|Line00029", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto3E91A50D_val == 4) {
            libSwaC_gf_SendTransmissionCampaign(gv_zagara, "zMission_Char01|Line00056", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto3E91A50D_val == 5) {
            libSwaC_gf_SendTransmissionCampaign(gv_zagara, "zMission_Char01|Line00057", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else {
            libSwaC_gf_SendTransmissionCampaign(gv_zagara, "zMission_Char01|Line00056", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
    }
    else {
        libSwaC_gf_SendTransmissionCampaign(gv_zagara, "zMission_Char01|Line00030", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZagaraReviveQ_Init () {
    gt_ZagaraReviveQ = TriggerCreate("gt_ZagaraReviveQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zagara Minion Death Q
//--------------------------------------------------------------------------------------------------
bool gt_ZagaraMinionDeathQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    if ((gv_eggsCollected < 100)) {
        libSwaC_gf_SendTransmissionCampaign(gv_zagara, "zMission_Char01|Line00046", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SendTransmissionCampaign(gv_zagara, "zMission_Char01|Line00047", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        libSwaC_gf_SendTransmissionCampaign(gv_zagara, "zMission_Char01|Line00026", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZagaraMinionDeathQ_Init () {
    gt_ZagaraMinionDeathQ = TriggerCreate("gt_ZagaraMinionDeathQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zagara Baneling Taunt Q
//--------------------------------------------------------------------------------------------------
bool gt_ZagaraBanelingTauntQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_banelingEggsCollected >= 3))) {
            return false;
        }

        if (!((gv_banelingEggsCollected <= 4))) {
            return false;
        }

        if (!((gv_eggsLostToZagara >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(gv_zagara) == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerQueueEnter();
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libSwaC_gf_SendTransmissionCampaign(gv_zagara, "zMission_Char01|Line00041", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZagaraBanelingTauntQ_Init () {
    gt_ZagaraBanelingTauntQ = TriggerCreate("gt_ZagaraBanelingTauntQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zagara Ping Control
//--------------------------------------------------------------------------------------------------
bool gt_ZagaraPingControl_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_gameOver == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        return true;
    }

    if ((gv_zagaraAlive == true) && (gv_inCinematic == false)) {
        if ((libNtve_gf_UnitIsVisibleToPlayer(gv_zagara, gv_pLAYER_01_USER) == true)) {
            PingSetVisible(gv_zagaraBossPing, true);
        }
        else {
            PingSetVisible(gv_zagaraBossPing, false);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZagaraPingControl_Init () {
    gt_ZagaraPingControl = TriggerCreate("gt_ZagaraPingControl_Func");
    TriggerAddEventTimePeriodic(gt_ZagaraPingControl, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Mission Help Q
//--------------------------------------------------------------------------------------------------
bool gt_TipMissionHelpQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_DisplayMissionTip(StringExternal("Param/Value/F9DA2684"));
    Wait(libSwaC_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipMissionHelpQ_Init () {
    gt_TipMissionHelpQ = TriggerCreate("gt_TipMissionHelpQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CampaignInitAI();
    AISetAPM(gv_pLAYER_02_ZERG, 10000);
    TriggerExecute(gt_ZergAttackWaves, true, false);
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        TriggerExecute(gt_AIResearchHard, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_ZergAttackWaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ZagaraFirstAttackQ, true, false);
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_ZERG, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_ZERG, PointFromId(3));
    AIAttackWaveAddWaypoint(gv_pLAYER_02_ZERG, PointFromId(524), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_ZERG, PointFromId(525), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_ZERG, PointFromId(567), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_ZERG, PointFromId(585), false);
    AIAttackWaveAddUnits3(5, 5, 10, "Zergling");
    AIAttackWaveSend(gv_pLAYER_02_ZERG, 290, true);
    TriggerExecute(gt__50EggAttack, true, true);
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_ZERG, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_ZERG, PointFromId(3));
    AIAttackWaveAddWaypoint(gv_pLAYER_02_ZERG, PointFromId(524), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_ZERG, PointFromId(525), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_ZERG, PointFromId(567), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_ZERG, PointFromId(585), false);
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1) && ((UnitGroupCount(UnitGroup("Hatchery", gv_pLAYER_01_USER, RegionFromId(36), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup("Lair", gv_pLAYER_01_USER, RegionFromId(36), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup("Hive", gv_pLAYER_01_USER, RegionFromId(36), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
        AIAttackWaveAddWaypoint(gv_pLAYER_02_ZERG, PointFromId(485), false);
    }

    AIAttackWaveAddUnits3(8, 8, 10, "Zergling");
    AIAttackWaveAddUnits3(2, 2, 3, "Hydralisk");
    AIAttackWaveAddUnits3(0, 0, 1, "Roach");
    AIAttackWaveSend(gv_pLAYER_02_ZERG, 130, true);
    while (true) {
        TriggerExecute(gt__50EggAttack, true, true);
        AIAttackWaveSetTargetPlayer(gv_pLAYER_02_ZERG, PlayerGroupSingle(gv_pLAYER_01_USER));
        AIAttackWaveSetGatherPoint(gv_pLAYER_02_ZERG, PointFromId(3));
        AIAttackWaveAddUnits3(12, 12, 20, "Zergling");
        AIAttackWaveAddUnits3(2, 2, 4, "Roach");
        AIAttackWaveAddWaypoint(gv_pLAYER_02_ZERG, PointFromId(524), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_ZERG, PointFromId(525), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_ZERG, PointFromId(567), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_ZERG, PointFromId(585), false);
        if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1) && ((UnitGroupCount(UnitGroup("Hatchery", gv_pLAYER_01_USER, RegionFromId(36), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup("Lair", gv_pLAYER_01_USER, RegionFromId(36), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup("Hive", gv_pLAYER_01_USER, RegionFromId(36), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            AIAttackWaveAddWaypoint(gv_pLAYER_02_ZERG, PointFromId(485), false);
        }

        AIAttackWaveSend(gv_pLAYER_02_ZERG, 170, true);
        TriggerExecute(gt__50EggAttack, true, true);
        AIAttackWaveSetTargetPlayer(gv_pLAYER_02_ZERG, PlayerGroupSingle(gv_pLAYER_01_USER));
        AIAttackWaveSetGatherPoint(gv_pLAYER_02_ZERG, PointFromId(3));
        AIAttackWaveAddUnits3(8, 8, 14, "Zergling");
        AIAttackWaveAddUnits3(3, 3, 6, "Hydralisk");
        AIAttackWaveAddWaypoint(gv_pLAYER_02_ZERG, PointFromId(524), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_ZERG, PointFromId(525), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_ZERG, PointFromId(567), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_ZERG, PointFromId(585), false);
        if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1) && ((UnitGroupCount(UnitGroup("Hatchery", gv_pLAYER_01_USER, RegionFromId(36), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup("Lair", gv_pLAYER_01_USER, RegionFromId(36), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup("Hive", gv_pLAYER_01_USER, RegionFromId(36), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            AIAttackWaveAddWaypoint(gv_pLAYER_02_ZERG, PointFromId(485), false);
        }

        AIAttackWaveSend(gv_pLAYER_02_ZERG, 190, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergAttackWaves_Init () {
    gt_ZergAttackWaves = TriggerCreate("gt_ZergAttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 50 Egg Attack
//--------------------------------------------------------------------------------------------------
bool gt__50EggAttack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_eggsCollected >= 50) && (gv__50EggAttackSent == false)) {
        gv__50EggAttackSent = true;
        AIAttackWaveSetTargetPlayer(gv_pLAYER_02_ZERG, PlayerGroupSingle(gv_pLAYER_01_USER));
        AIAttackWaveSetGatherPoint(gv_pLAYER_02_ZERG, PointFromId(3));
        AIAttackWaveAddWaypoint(gv_pLAYER_02_ZERG, PointFromId(524), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_ZERG, PointFromId(525), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_ZERG, PointFromId(567), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_ZERG, PointFromId(585), false);
        if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1) && ((UnitGroupCount(UnitGroup("Hatchery", gv_pLAYER_01_USER, RegionFromId(36), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup("Lair", gv_pLAYER_01_USER, RegionFromId(36), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup("Hive", gv_pLAYER_01_USER, RegionFromId(36), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            AIAttackWaveAddWaypoint(gv_pLAYER_02_ZERG, PointFromId(485), false);
        }

        AIAttackWaveAddUnits3(24, 24, 48, "Zergling");
        AIAttackWaveSend(gv_pLAYER_02_ZERG, 90, false);
        Wait(35.0, c_timeAI);
        TriggerExecute(gt_ZagaraBigAttackQ, true, false);
        Wait(85.0, c_timeAI);
    }
    else {
        Wait(120.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__50EggAttack_Init () {
    gt__50EggAttack = TriggerCreate("gt__50EggAttack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Minerals
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveMinerals_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveMinerals_Init () {
    gt_AIGiveMinerals = TriggerCreate("gt_AIGiveMinerals_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_pLAYER_02_ZERG, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Gas
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveGas_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveGas_Init () {
    gt_AIGiveGas = TriggerCreate("gt_AIGiveGas_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_pLAYER_02_ZERG, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Research Hard
//--------------------------------------------------------------------------------------------------
bool gt_AIResearchHard_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoDBCCCE3B_g;
    int autoDBCCCE3B_var;
    playergroup autoEAEBD563_g;
    int autoEAEBD563_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(300.0, c_timeAI);
    autoDBCCCE3B_g = gv_zergPlayers;
    autoDBCCCE3B_var = -1;
    while (true) {
        autoDBCCCE3B_var = PlayerGroupNextPlayer(autoDBCCCE3B_g, autoDBCCCE3B_var);
        if (autoDBCCCE3B_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoDBCCCE3B_var, "ZergMeleeWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(autoDBCCCE3B_var, "ZergMissileWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(autoDBCCCE3B_var, "ZergFlyerWeaponsLevel1", 1);
    }
    Wait(300.0, c_timeAI);
    autoEAEBD563_g = gv_zergPlayers;
    autoEAEBD563_var = -1;
    while (true) {
        autoEAEBD563_var = PlayerGroupNextPlayer(autoEAEBD563_g, autoEAEBD563_var);
        if (autoEAEBD563_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoEAEBD563_var, "ZergGroundArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(autoEAEBD563_var, "ZergFlyerArmorsLevel1", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIResearchHard_Init () {
    gt_AIResearchHard = TriggerCreate("gt_AIResearchHard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Init
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZChar01Objective1");
    libSwaC_gf_SetMissionObjectiveProgress2("ZChar01Objective1", gv_eggsCollected, true, null, true);
    gv_objectiveDestroyDominionBase = ObjectiveLastCreated();
    libSwaC_gf_CreateObjectiveCampaign("ZChar01Objective2");
    libSwaC_gf_SetMissionObjectiveProgress2("ZChar01Objective2", gv_eggsLostToZagara, true, null, true);
    gv_objectiveDestroyDominionBase2 = ObjectiveLastCreated();
    ObjectiveShow(ObjectiveLastCreated(), PlayerGroupAll(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZChar01Objective3");
    gv_objectiveDestroyDominionBase3 = ObjectiveLastCreated();
    ObjectiveShow(ObjectiveLastCreated(), PlayerGroupAll(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZChar01Objective5");
    libSwaC_gf_SetMissionObjectiveProgress2("ZChar01Objective5", 0, true, null, true);
    gv_objectiveDestroyDominionBase42 = ObjectiveLastCreated();
    ObjectiveShow(ObjectiveLastCreated(), PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveInit_Init () {
    gt_ObjectiveInit = TriggerCreate("gt_ObjectiveInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Collect Eggs - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCollectEggsCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveInit, true, false);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCollectEggsCreate_Init () {
    gt_ObjectiveCollectEggsCreate = TriggerCreate("gt_ObjectiveCollectEggsCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Collect Eggs - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCollectEggsUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveCollectEggsCreate, true, false);
    libSwaC_gf_SetMissionObjectiveProgress2("ZChar01Objective1", gv_eggsCollected, true, null, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCollectEggsUpdate_Init () {
    gt_ObjectiveCollectEggsUpdate = TriggerCreate("gt_ObjectiveCollectEggsUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Collect Eggs - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCollectEggsComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveCollectEggsCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZChar01Objective1", libSwaC_ge_MissionObjectiveState_Completed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCollectEggsComplete_Init () {
    gt_ObjectiveCollectEggsComplete = TriggerCreate("gt_ObjectiveCollectEggsComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Zagara Eggs - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveZagaraEggsCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveInit, true, false);
    ObjectiveShow(gv_objectiveDestroyDominionBase2, PlayerGroupAll(), true);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveZagaraEggsCreate_Init () {
    gt_ObjectiveZagaraEggsCreate = TriggerCreate("gt_ObjectiveZagaraEggsCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Zagara Eggs - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveZagaraEggsUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveZagaraEggsCreate, true, false);
    libSwaC_gf_SetMissionObjectiveProgress2("ZChar01Objective2", gv_eggsLostToZagara, true, null, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveZagaraEggsUpdate_Init () {
    gt_ObjectiveZagaraEggsUpdate = TriggerCreate("gt_ObjectiveZagaraEggsUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Zagara Eggs - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveZagaraEggsComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveZagaraEggsCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZChar01Objective2", libSwaC_ge_MissionObjectiveState_Completed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveZagaraEggsComplete_Init () {
    gt_ObjectiveZagaraEggsComplete = TriggerCreate("gt_ObjectiveZagaraEggsComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Zagara Eggs - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveZagaraEggsFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveZagaraEggsCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZChar01Objective2", libSwaC_ge_MissionObjectiveState_Failed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveZagaraEggsFailed_Init () {
    gt_ObjectiveZagaraEggsFailed = TriggerCreate("gt_ObjectiveZagaraEggsFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Destroy Zagara - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyZagaraCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveInit, true, false);
    ObjectiveShow(gv_objectiveDestroyDominionBase3, PlayerGroupAll(), true);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyZagaraCreate_Init () {
    gt_ObjectiveDestroyZagaraCreate = TriggerCreate("gt_ObjectiveDestroyZagaraCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Destroy Zagara - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyZagaraComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyZagaraCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZChar01Objective3", libSwaC_ge_MissionObjectiveState_Completed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyZagaraComplete_Init () {
    gt_ObjectiveDestroyZagaraComplete = TriggerCreate("gt_ObjectiveDestroyZagaraComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Destroy Infested CC - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyInfestedCCCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveInit, true, false);
    ObjectiveShow(gv_objectiveDestroyDominionBase42, PlayerGroupAll(), true);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyInfestedCCCreate_Init () {
    gt_ObjectiveDestroyInfestedCCCreate = TriggerCreate("gt_ObjectiveDestroyInfestedCCCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Destroy Infested CC - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyInfestedCCUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveDestroyInfestedCCCreate, true, false);
    libSwaC_gf_SetMissionObjectiveProgress2("ZChar01Objective5", gv_infestedCCsDestroyed, true, null, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyInfestedCCUpdate_Init () {
    gt_ObjectiveDestroyInfestedCCUpdate = TriggerCreate("gt_ObjectiveDestroyInfestedCCUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Destroy Infested CC - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyInfestedCCComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyInfestedCCCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZChar01Objective5", libSwaC_ge_MissionObjectiveState_Completed);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyInfestedCCComplete_Init () {
    gt_ObjectiveDestroyInfestedCCComplete = TriggerCreate("gt_ObjectiveDestroyInfestedCCComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), libSwaC_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/EF2C68D9"), libSwaC_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Primary Objective Failed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatPrimaryObjectiveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(1.0, c_timeReal);
    TriggerExecute(gt_ObjectiveZagaraEggsFailed, true, false);
    libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), libSwaC_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/07C355C1"), libSwaC_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatPrimaryObjectiveFailed_Init () {
    gt_DefeatPrimaryObjectiveFailed = TriggerCreate("gt_DefeatPrimaryObjectiveFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory - Zagara's Base Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryZagarasBaseDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_ZERG, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) <= 3))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(229)) == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(228)) == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(227)) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryZagarasBaseDestroyed_Init () {
    gt_VictoryZagarasBaseDestroyed = TriggerCreate("gt_VictoryZagarasBaseDestroyed_Func");
    TriggerAddEventTimePeriodic(gt_VictoryZagarasBaseDestroyed, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveCollectEggsComplete, true, false);
    TriggerExecute(gt_ObjectiveDestroyZagaraComplete, true, false);
    TriggerExecute(gt_ObjectiveZagaraEggsComplete, true, false);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    libSwaC_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_banelingNestsRescued;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((ObjectiveGetState(gv_objectiveDestroyDominionBase) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objectiveDestroyDominionBase2) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objectiveDestroyDominionBase3) == c_objectiveStateCompleted)) {
        libSwaC_gf_CampaignAwardAchievement("ZChar01_1", gv_pLAYER_01_USER);
    }

    TriggerExecute(gt_AchievementZagaraNoEggsNH, true, true);
    TriggerExecute(gt_AchievementDestroyZagarasBaseH, true, true);
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/780C4990"), IntToText(libNtve_gf_UnitGetPropertyKills(gv_kerrigan, c_unitPropCurrent)));
    if ((gv_banelingNestsBeforeVictoryLapSet == true)) {
        lv_banelingNestsRescued = gv_banelingNestsBeforeVictoryLap;
    }
    else {
        lv_banelingNestsRescued = gv_banelingEggsCollected;
    }
    TextExpressionSetToken("Param/Expression/A96F5429", "BanesRescued", IntToText(lv_banelingNestsRescued));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/D9E70ECE"), TextExpressionAssemble("Param/Expression/A96F5429"));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/68E2B288"), IntToText(gv_eggsLostToZagara));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/96A977A1"), IntToText(PlayerScoreValueGetAsInt(gv_pLAYER_01_USER, "UnitsKilledCount")));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/5BD64939"), IntToText(gv_timesZagaraDefeated));
    libSwaC_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_Defeat, false);
    TriggerEnable(gt_DefeatCheat, false);
    gv_gameOver = true;
    libSwaC_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_Victory, false);
    TriggerEnable(gt_VictoryCheat, false);
    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Baneling Nests Before Eggs
//--------------------------------------------------------------------------------------------------
bool gt_AchievementBanelingNestsBeforeEggs_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libHots_gf_DifficultyValueInt2(1, 1, 1) == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(gt_ObjectiveCollectEggsComplete) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CampaignAwardAchievement("ZChar01_2", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementBanelingNestsBeforeEggs_Init () {
    gt_AchievementBanelingNestsBeforeEggs = TriggerCreate("gt_AchievementBanelingNestsBeforeEggs_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Zagara No Eggs N/H
//--------------------------------------------------------------------------------------------------
bool gt_AchievementZagaraNoEggsNH_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libHots_gf_DifficultyValueInt2(0, 1, 1) == 1))) {
            return false;
        }

        if (!((gv_eggsLostToZagara == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CampaignAwardAchievement("ZChar01_3", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementZagaraNoEggsNH_Init () {
    gt_AchievementZagaraNoEggsNH = TriggerCreate("gt_AchievementZagaraNoEggsNH_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Destroy Zagara's Base H
//--------------------------------------------------------------------------------------------------
bool gt_AchievementDestroyZagarasBaseH_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1))) {
            return false;
        }

        if (!((TimerGetRemaining(gv_destroyZagarasBaseTimer) > 0.0))) {
            return false;
        }

        if (!((gv_eggsCollected < 100))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CampaignAwardAchievement("Mastery_Char1", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementDestroyZagarasBaseH_Init () {
    gt_AchievementDestroyZagarasBaseH = TriggerCreate("gt_AchievementDestroyZagarasBaseH_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Baneling Kills
//--------------------------------------------------------------------------------------------------
bool gt_AchievementBanelingKills_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnit()), UnitGetOwner(libNtve_gf_KillingUnit()), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }

        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitGetType(libNtve_gf_KillingUnit()) == "Baneling"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_banelingKills += 1;
    AchievementTermQuantitySet(gv_pLAYER_01_USER, "Anniversary_ZChar01", gv_banelingKills);
    TextExpressionSetToken("Param/Expression/78F1C32E", "A", IntToText(gv_banelingKills));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/78F1C32E"), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementBanelingKills_Init () {
    gt_AchievementBanelingKills = TriggerCreate("gt_AchievementBanelingKills_Func");
    TriggerAddEventUnitDied(gt_AchievementBanelingKills, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto8BEBF748_g;
    int auto8BEBF748_u;
    unit auto8BEBF748_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    gv_inCinematic = true;
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UnitSetState(gv_kerrigan, c_unitStateFidget, false);
    libSwaC_gf_EnableDisableZerglingRespawn(false);
    libNtve_gf_PauseUnit(UnitFromId(1), true);
    auto8BEBF748_g = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(19), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8BEBF748_u = UnitGroupCount(auto8BEBF748_g, c_unitCountAll);
    for (;; auto8BEBF748_u -= 1) {
        auto8BEBF748_var = UnitGroupUnitFromEnd(auto8BEBF748_g, auto8BEBF748_u);
        if (auto8BEBF748_var == null) { break; }
        if ((auto8BEBF748_var != gv_kerrigan)) {
            UnitGroupAdd(gv_introHiddenUnitGroup, auto8BEBF748_var);
            libNtve_gf_ShowHideUnit(auto8BEBF748_var, false);
        }

    }
    UnitGroupAdd(gv_introHiddenUnitGroup, UnitFromId(20));
    libNtve_gf_ShowHideUnit(UnitFromId(20), false);
    libNtve_gf_CreateUnitsAtPoint2(1, "Overlord", 0, gv_pLAYER_01_USER, PointFromId(1630));
    UnitGroupAdd(gv_introHiddenUnitGroup2, UnitLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1895), 0.0, -1, 10.0, true);
    libNtve_gf_PauseUnit(gv_kerrigan, false);
    UnitSetPosition(gv_kerrigan, PointFromId(1621), false);
    UnitSetFacing(gv_kerrigan, PointGetFacing(PointFromId(1621)), 0.0);
    gv_introEggs = UnitFromId(1626);
    UnitSetState(gv_introEggs, c_unitStateStatusBar, false);
    UnitSetState(gv_introEggs, c_unitStateSelectable, false);
    UnitSetState(gv_introEggs, c_unitStateTargetable, false);
    UnitSetState(gv_introEggs, c_unitStateTooltipable, false);
    UnitSetState(gv_introEggs, c_unitStateInvulnerable, true);
    UnitSetTeamColorIndex(gv_introEggs, 14);
    libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_pLAYER_01_USER, PointFromId(1635));
    UnitGroupAdd(gv_introHiddenUnitGroup2, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_pLAYER_01_USER, PointFromId(1636));
    UnitGroupAdd(gv_introHiddenUnitGroup2, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_pLAYER_01_USER, PointFromId(482));
    UnitGroupAdd(gv_introHiddenUnitGroup2, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_pLAYER_01_USER, PointFromId(1364));
    UnitGroupAdd(gv_introHiddenUnitGroup2, UnitLastCreated());
    TriggerExecute(gt_IntroMusic, true, false);
    SoundPlay(SoundLink("Char01_CS_Open_Part1", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introOneShot = SoundLastPlayed();
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_introCinematicCompleted = false;
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1896), (SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Char01|Line00002", true), c_soundIndexAny)) - 1), -1, 10.0, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicInTransmission);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Char01|Line00002", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TriggerExecute(gt_IntroZagaraEggCapture, true, false);
    SoundPlay(SoundLink("Char01_CS_Open_Part2", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introOneShot = SoundLastPlayed();
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1618), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1619), (SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Char01|Line00023", true), c_soundIndexAny)) - 1), -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Char01|Line00023", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicOutofTransmission);
    Wait(2.0, c_timeReal);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(601), 0.0, -1, 10.0, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1628), (SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Char01|Line00025", true), c_soundIndexAny))), -1, 10.0, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicInTransmission);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zBriefing_Char01|Line00025", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Char01|Line00024", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(3.0, c_timeReal);
    UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(1625)), c_orderQueueReplace);
    Wait(1.0, c_timeReal);
    UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1625)), c_orderQueueReplace);
    UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(PointFromId(1625), 1.0, PointGetFacing(PointFromId(1625)))), c_orderQueueAddToEnd);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1622), 4.0, -1, 10.0, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zBriefing_Char01|Line00009", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_introCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_introCinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto3B7330B3_g;
    int auto3B7330B3_u;
    unit auto3B7330B3_var;
    unitgroup auto13E6629E_g;
    int auto13E6629E_u;
    unit auto13E6629E_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_IntroZagaraEggCapture);
    if ((gv_introCinematicCompleted == false) && (gv_introMusicFinished == false)) {
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    }

    SoundStop(gv_introOneShot, true);
    libNtve_gf_PauseUnit(UnitFromId(1), false);
    auto3B7330B3_g = gv_introHiddenUnitGroup2;
    auto3B7330B3_u = UnitGroupCount(auto3B7330B3_g, c_unitCountAll);
    for (;; auto3B7330B3_u -= 1) {
        auto3B7330B3_var = UnitGroupUnitFromEnd(auto3B7330B3_g, auto3B7330B3_u);
        if (auto3B7330B3_var == null) { break; }
        UnitRemove(auto3B7330B3_var);
    }
    auto13E6629E_g = gv_introHiddenUnitGroup;
    auto13E6629E_u = UnitGroupCount(auto13E6629E_g, c_unitCountAll);
    for (;; auto13E6629E_u -= 1) {
        auto13E6629E_var = UnitGroupUnitFromEnd(auto13E6629E_g, auto13E6629E_u);
        if (auto13E6629E_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto13E6629E_var, true);
    }
    UnitSetPosition(gv_kerrigan, PointFromId(807), false);
    UnitIssueOrder(gv_kerrigan, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitSetFacing(gv_kerrigan, PointGetFacing(PointFromId(807)), 0.0);
    UnitSetPosition(gv_zagara, PointFromId(616), false);
    UnitIssueOrder(gv_zagara, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_zagara, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(2)), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsAtPoint2(2, "Zergling", 0, gv_pLAYER_02_ZERG, PointFromId(621));
    AISetGroupScriptControlled(UnitLastCreatedGroup(), true);
    libNtve_gf_CreateUnitsAtPoint2(2, "Zergling", 0, gv_pLAYER_02_ZERG, PointFromId(625));
    AISetGroupScriptControlled(UnitLastCreatedGroup(), true);
    libNtve_gf_CreateUnitsAtPoint2(2, "Zergling", 0, gv_pLAYER_02_ZERG, PointFromId(630));
    AISetGroupScriptControlled(UnitLastCreatedGroup(), true);
    libNtve_gf_CreateUnitsAtPoint2(2, "Zergling", 0, gv_pLAYER_02_ZERG, PointFromId(86));
    AISetGroupScriptControlled(UnitLastCreatedGroup(), true);
    libNtve_gf_SendActorMessageToUnit(gv_zagara, "Signal CollectStop");
    libNtve_gf_KillModel(gv_introCorruptionEffect);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_zagara), "Default");
    UnitKill(gv_introEggs);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    UnitSetState(gv_kerrigan, c_unitStateFidget, true);
    libSwaC_gf_EnableDisableZerglingRespawn(true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10.0, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    TriggerExecute(gt_StartAI, true, false);
    Wait(0.5, c_timeReal);
    if ((gv_introCinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    gv_inCinematic = false;
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(770)), lv_fadeDuration);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Zagara Egg Capture
//--------------------------------------------------------------------------------------------------
bool gt_IntroZagaraEggCapture_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(gv_zagara, PointFromId(1972), false);
    UnitIssueOrder(gv_zagara, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1971)), c_orderQueueReplace);
    while (!((libNtve_gf_UnitInRegion(gv_zagara, RegionCircle(PointFromId(1971), 1.0)) == true))) {
        Wait(1.0, c_timeGame);
    }
    Wait(1.0, c_timeGame);
    UnitIssueOrder(gv_zagara, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    libNtve_gf_AttachModelToUnit(gv_introEggs, "KerriganSearchImpact", "Ref_Center");
    gv_introCorruptionEffect = libNtve_gf_ActorLastCreated();
    ActorSend(gv_introCorruptionEffect, "SetScale 0.500000");
    libNtve_gf_MakeUnitFacePoint(gv_zagara, UnitGetPosition(gv_introEggs), 0.0);
    libNtve_gf_SendActorMessageToUnit(gv_zagara, "Signal CollectStart");
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_zagara), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    SoundPlay(SoundLink("Char01_CS_Open_Part3", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introOneShot = SoundLastPlayed();
    Wait(6.0, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_zagara, "Signal CollectStop");
    libNtve_gf_KillModel(gv_introCorruptionEffect);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_zagara), "Default");
    UnitKill(gv_introEggs);
    Wait(1.5, c_timeGame);
    UnitIssueOrder(gv_zagara, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(3)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroZagaraEggCapture_Init () {
    gt_IntroZagaraEggCapture = TriggerCreate("gt_IntroZagaraEggCapture_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Music
//--------------------------------------------------------------------------------------------------
bool gt_IntroMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_soundtrack = "ZChar01MusicIntro";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    gv_introMusicFinished = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroMusic_Init () {
    gt_IntroMusic = TriggerCreate("gt_IntroMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Q
//--------------------------------------------------------------------------------------------------
bool gt_MidQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_MidSetup, true, true);
    TriggerExecute(gt_MidCinematic, true, true);
    TriggerExecute(gt_MidCinematicEnd, true, true);
    TriggerExecute(gt_MidCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidQ_Init () {
    gt_MidQ = TriggerCreate("gt_MidQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoEBD76D9D_g;
    int autoEBD76D9D_u;
    unit autoEBD76D9D_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    gv_inCinematic = true;
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    CameraSave(gv_pLAYER_01_USER);
    libNtve_gf_StoreUnitSelection(gv_pLAYER_01_USER, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    libSwaC_gf_EnableDisableZerglingRespawn(false);
    libSwaC_gf_EnableDisableNeedOverlordInfo(false);
    gv_banelingNestsBeforeVictoryLap = gv_banelingEggsCollected;
    gv_banelingNestsBeforeVictoryLapSet = true;
    UnitPauseAll(true);
    AITimePause(true);
    autoEBD76D9D_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEBD76D9D_u = UnitGroupCount(autoEBD76D9D_g, c_unitCountAll);
    for (;; autoEBD76D9D_u -= 1) {
        autoEBD76D9D_var = UnitGroupUnitFromEnd(autoEBD76D9D_g, autoEBD76D9D_u);
        if (autoEBD76D9D_var == null) { break; }
        if ((UnitGetType(autoEBD76D9D_var) != "ZergEggNest") && (UnitGetType(autoEBD76D9D_var) != "ZergEggNestSmall")) {
            UnitGroupAdd(gv_midHiddenUnits, autoEBD76D9D_var);
            libNtve_gf_ShowHideUnit(autoEBD76D9D_var, false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidSetup_Init () {
    gt_MidSetup = TriggerCreate("gt_MidSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoE4CF8368_g;
    int autoE4CF8368_u;
    unit autoE4CF8368_var;
    unitgroup auto3BBA1368_g;
    int auto3BBA1368_u;
    unit auto3BBA1368_var;
    unitgroup auto42A7F1F7_g;
    int auto42A7F1F7_u;
    unit auto42A7F1F7_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(27), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(650), (SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Char01|Line00031", true), c_soundIndexAny)) + (SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Char01|Line00032", true), c_soundIndexAny)) + 2.0)), -1, 10.0, true);
    autoE4CF8368_g = UnitGroup("PathingBlocker1x1", 0, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE4CF8368_u = UnitGroupCount(autoE4CF8368_g, c_unitCountAll);
    for (;; autoE4CF8368_u -= 1) {
        autoE4CF8368_var = UnitGroupUnitFromEnd(autoE4CF8368_g, autoE4CF8368_u);
        if (autoE4CF8368_var == null) { break; }
        UnitRemove(autoE4CF8368_var);
    }
    auto3BBA1368_g = UnitGroup("PathingBlocker2x2", 0, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3BBA1368_u = UnitGroupCount(auto3BBA1368_g, c_unitCountAll);
    for (;; auto3BBA1368_u -= 1) {
        auto3BBA1368_var = UnitGroupUnitFromEnd(auto3BBA1368_g, auto3BBA1368_u);
        if (auto3BBA1368_var == null) { break; }
        UnitRemove(auto3BBA1368_var);
    }
    auto42A7F1F7_g = UnitGroup("Blocker4x4", 0, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto42A7F1F7_u = UnitGroupCount(auto42A7F1F7_g, c_unitCountAll);
    for (;; auto42A7F1F7_u -= 1) {
        auto42A7F1F7_var = UnitGroupUnitFromEnd(auto42A7F1F7_g, auto42A7F1F7_u);
        if (auto42A7F1F7_var == null) { break; }
        UnitRemove(auto42A7F1F7_var);
    }
    TriggerExecute(gt_MidMusic, true, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_midCinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicInTransmission);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Char01|Line00031", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TriggerExecute(gt_MidEggsplosions, true, false);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char01|Line00032", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 2.0);
    Wait(1.2, c_timeReal);
    TriggerExecute(gt_MidEggHatching, true, false);
    Wait(0.8, c_timeReal);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicOutofTransmission);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(105), (3.0 + 0.0), -1, 10.0, true);
    Wait(3.5, c_timeReal);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1906), SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Char01|Line00033", true), c_soundIndexAny)), -1, 10.0, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicInTransmission);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Char01|Line00033", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_midCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematic_Init () {
    gt_MidCinematic = TriggerCreate("gt_MidCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_midEggHatchDelay = 0.4;
    TriggerExecute(gt_MidEggHatching, true, false);
    if ((gv_midCinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematicEnd_Init () {
    gt_MidCinematicEnd = TriggerCreate("gt_MidCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;
    int lv_i;

    // Automatic Variable Declarations
    unitgroup autoBB8C2F5E_g;
    int autoBB8C2F5E_u;
    unit autoBB8C2F5E_var;
    unitgroup auto1CE342C4_g;
    int auto1CE342C4_u;
    unit auto1CE342C4_var;
    int auto04E5D757_ae;
    const int auto04E5D757_ai = 1;
    const int auto53AD7E79_n = 25;
    int auto53AD7E79_i;
    unitgroup autoC7F749AD_g;
    int autoC7F749AD_u;
    unit autoC7F749AD_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_midCinematicCompleted == false) && (gv_midMusicFinished == false)) {
        TriggerStop(gt_MidMusic);
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZChar01MusicAlt", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }

    TriggerStop(gt_MidEggsplosions);
    UnitPauseAll(false);
    AITimePause(false);
    autoBB8C2F5E_g = gv_midHiddenUnits;
    autoBB8C2F5E_u = UnitGroupCount(autoBB8C2F5E_g, c_unitCountAll);
    for (;; autoBB8C2F5E_u -= 1) {
        autoBB8C2F5E_var = UnitGroupUnitFromEnd(autoBB8C2F5E_g, autoBB8C2F5E_u);
        if (autoBB8C2F5E_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoBB8C2F5E_var, true);
    }
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    libSwaC_gf_EnableDisableZerglingRespawn(true);
    libSwaC_gf_ReviveHeroInstantly(libSwaC_ge_HeroUnit_Kerrigan, false);
    libSwaC_gf_ResetHeroAbilityCooldowns(libSwaC_ge_HeroUnit_Kerrigan);
    UnitSetPropertyFixed(gv_kerrigan, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_kerrigan, c_unitPropEnergyPercent, 100.0);
    Wait(0.1, c_timeGame);
    UnitGroupSelect(gv_midSpawnedUnits, gv_pLAYER_01_USER, true);
    gv_midSpawnedUnitsSelected = true;
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(725), 0.0, -1, 10, true);
    auto1CE342C4_g = UnitGroup(null, gv_pLAYER_02_ZERG22, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1CE342C4_u = UnitGroupCount(auto1CE342C4_g, c_unitCountAll);
    for (;; auto1CE342C4_u -= 1) {
        auto1CE342C4_var = UnitGroupUnitFromEnd(auto1CE342C4_g, auto1CE342C4_u);
        if (auto1CE342C4_var == null) { break; }
        libNtve_gf_ShareVisionofUnit(auto1CE342C4_var, false, gv_pLAYER_01_USER);
        if ((UnitGetCustomValue(auto1CE342C4_var, 0) < 1.0)) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(auto1CE342C4_var), c_animNameDefault, "Stand Unpowered", c_animFlagPlayForever, c_animTimeDefault);
            UnitSetTeamColorIndex(auto1CE342C4_var, 14);
            UnitSetOwner(auto1CE342C4_var, 0, false);
            UnitSetState(auto1CE342C4_var, c_unitStateTooltipable, false);
            UnitSetState(auto1CE342C4_var, c_unitStateSelectable, false);
            UnitSetCustomValue(auto1CE342C4_var, 0, 2.0);
        }

    }
    auto04E5D757_ae = gv_numberOfVisibilityRegions;
    lv_i = 1;
    for ( ; ( (auto04E5D757_ai >= 0 && lv_i <= auto04E5D757_ae) || (auto04E5D757_ai < 0 && lv_i >= auto04E5D757_ae) ) ; lv_i += auto04E5D757_ai ) {
        VisRevealerEnable(gv_visiblilityRevealers[lv_i], false);
    }
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropSuppliesMade, c_playerPropOperSetTo, 200);
    if ((gv_midCinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(725)), lv_fadeDuration);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    gv_inCinematic = false;
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    Wait(2.0, c_timeReal);
    SoundPlay(SoundLink("UI_TerranPing", -1), PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(gt_ObjectiveDestroyZagaraCreate, true, true);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(PointFromId(653), 12.0), 16.0, true);
    libSwaC_gf_CreateObjectivePing(true, PointFromId(653), StringExternal("Param/Value/78C875AC"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "MinimapPing", PointFromId(653), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 6.0, 270.0);
    for (auto53AD7E79_i = 1; auto53AD7E79_i <= auto53AD7E79_n; auto53AD7E79_i += 1) {
        UnitCreate(1, "ZerglingBurrowed", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(RegionFromId(5)), libNtve_gf_RandomAngle());
    }
    autoC7F749AD_g = UnitGroupFromId(1);
    autoC7F749AD_u = UnitGroupCount(autoC7F749AD_g, c_unitCountAll);
    for (;; autoC7F749AD_u -= 1) {
        autoC7F749AD_var = UnitGroupUnitFromEnd(autoC7F749AD_g, autoC7F749AD_u);
        if (autoC7F749AD_var == null) { break; }
        UnitRemove(autoC7F749AD_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCleanup_Init () {
    gt_MidCleanup = TriggerCreate("gt_MidCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Egg Hatching
//--------------------------------------------------------------------------------------------------
bool gt_MidEggHatching_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_numberOfSpawns;
    region lv_region;

    // Automatic Variable Declarations
    const int auto12890CC3_ae = 6;
    const int auto12890CC3_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_i = 1;
    for ( ; ( (auto12890CC3_ai >= 0 && lv_i <= auto12890CC3_ae) || (auto12890CC3_ai < 0 && lv_i >= auto12890CC3_ae) ) ; lv_i += auto12890CC3_ai ) {
        if (((lv_i == 1) || (lv_i == 4) || (lv_i == 6))) {
            lv_numberOfSpawns = 20;
            lv_region = RegionCircle(UnitGetPosition(gv_eggNests[lv_i].lv_eggNest), 1.5);
        }
        else {
            lv_numberOfSpawns = 10;
            lv_region = RegionCircle(UnitGetPosition(gv_eggNests[lv_i].lv_eggNest), 1.0);
        }
        gf_AnimateEggNesttoState(lv_i, ge_PRESET_EggNestState_Hatched);
        gf_MidEggNestSpawn(lv_numberOfSpawns, lv_region);
        Wait(0.35, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidEggHatching_Init () {
    gt_MidEggHatching = TriggerCreate("gt_MidEggHatching_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Eggsplosions
//--------------------------------------------------------------------------------------------------
bool gt_MidEggsplosions_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoE082AD5C_n = 8;
    int autoE082AD5C_i;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeReal);
    for (autoE082AD5C_i = 1; autoE082AD5C_i <= autoE082AD5C_n; autoE082AD5C_i += 1) {
        PlayerCreateEffectPoint(gv_pLAYER_01_USER, "FungalGrowthInitialSet", RegionRandomPoint(RegionCircle(UnitGetPosition(gv_eggNests[RandomInt(1, 6)].lv_eggNest), 1.0)));
        Wait(RandomFixed(0.5, 1.5), c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidEggsplosions_Init () {
    gt_MidEggsplosions = TriggerCreate("gt_MidEggsplosions_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Music
//--------------------------------------------------------------------------------------------------
bool gt_MidMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_soundtrack = "ZChar01MusicCutscene24_EggsCollectionFinished";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    gv_midMusicFinished = true;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZChar01MusicAlt", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidMusic_Init () {
    gt_MidMusic = TriggerCreate("gt_MidMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    gv_inCinematic = true;
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UnitClearSelection(gv_pLAYER_01_USER);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    libSwaC_gf_EnableDisableZerglingRespawn(false);
    UnitPauseAll(true);
    AITimePause(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoA0361EB6_g;
    int autoA0361EB6_u;
    unit autoA0361EB6_var;
    unitgroup autoD21CA087_g;
    int autoD21CA087_u;
    unit autoD21CA087_var;
    unitgroup autoEF98789C_g;
    int autoEF98789C_u;
    unit autoEF98789C_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(29), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(681), 5.0, -1, 10.0, true);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_ZERG, libNtve_ge_AllianceSetting_Neutral);
    autoA0361EB6_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA0361EB6_u = UnitGroupCount(autoA0361EB6_g, c_unitCountAll);
    for (;; autoA0361EB6_u -= 1) {
        autoA0361EB6_var = UnitGroupUnitFromEnd(autoA0361EB6_g, autoA0361EB6_u);
        if (autoA0361EB6_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoA0361EB6_var, false);
    }
    autoD21CA087_g = UnitGroup(null, gv_pLAYER_02_ZERG, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD21CA087_u = UnitGroupCount(autoD21CA087_g, c_unitCountAll);
    for (;; autoD21CA087_u -= 1) {
        autoD21CA087_var = UnitGroupUnitFromEnd(autoD21CA087_g, autoD21CA087_u);
        if (autoD21CA087_var == null) { break; }
        UnitRemove(autoD21CA087_var);
    }
    autoEF98789C_g = UnitGroup(null, gv_pLAYER_02_ZERG2, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEF98789C_u = UnitGroupCount(autoEF98789C_g, c_unitCountAll);
    for (;; autoEF98789C_u -= 1) {
        autoEF98789C_var = UnitGroupUnitFromEnd(autoEF98789C_g, autoEF98789C_u);
        if (autoEF98789C_var == null) { break; }
        UnitRemove(autoEF98789C_var);
    }
    libSwaC_gf_CreateHero2(PointFromId(822), gv_pLAYER_01_USER, libSwaC_ge_HeroUnit_Kerrigan, PointGetFacing(PointFromId(822)), 0, libSwaC_ge_KerriganCreatePurpose_Cinematic);
    gv_victoryKerrigan = UnitLastCreated();
    UnitSetState(gv_victoryKerrigan, c_unitStateFidget, false);
    UnitBehaviorAdd(gv_victoryKerrigan, "KerriganWalk", gv_victoryKerrigan, 1);
    UnitIssueOrder(gv_victoryKerrigan, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(220)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "ZaGara", 0, gv_pLAYER_02_ZERG, PointFromId(1611));
    gv_victoryZagara = UnitLastCreated();
    libNtve_gf_ChangeUnitDamage(gv_victoryZagara, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitSetState(gv_victoryZagara, c_unitStateFidget, false);
    TriggerExecute(gt_VictoryZerglings, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZChar01MusicOutro25_KerrigansRetaliation", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_victoryCinematicCompleted = false;
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicInTransmission);
    libSwaC_gf_SendTransmissionCampaign(gv_victoryKerrigan, "zMission_Char01|Line00001", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_victoryZagara, "zMission_Char01|Line00002", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_victoryZagara), c_animNameDefault, "Spell", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(1.332, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_victoryZagara), c_animNameDefault, "Cover", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    TransmissionWait(TransmissionLastSent(), 0.0);
    UnitIssueOrder(gv_victoryKerrigan, OrderTargetingUnit(AbilityCommand("move", 4), gv_victoryZagara), c_orderQueueReplace);
    libSwaC_gf_SendTransmissionCampaign(gv_victoryKerrigan, "zMission_Char01|Line00003", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_LeavePortraitVisibleAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TriggerExecute(gt_VictoryZergHold, true, false);
    Wait(1.0, c_timeReal);
    libSwaC_gf_SendTransmissionCampaign(gv_victoryKerrigan, "zMission_Char01|Line00004", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1612), (SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Char01|Line00005", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Char01|Line00006", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Char01|Line00058", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Char01|Line00007", true), c_soundIndexAny))), -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(gv_victoryZagara, "zMission_Char01|Line00005", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_victoryZagara, "zMission_Char01|Line00006", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_victoryKerrigan, "zMission_Char01|Line00058", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_victoryKerrigan, "zMission_Char01|Line00007", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_victoryZagara, "zMission_Char01|Line00008", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_victoryCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuratioin;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_victoryCinematicCompleted == true)) {
        lv_fadeDuratioin = 2.0;
    }
    else {
        lv_fadeDuratioin = 0.5;
    }
    CinematicFade(false, lv_fadeDuratioin, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitPauseAll(true);
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Zerglings
//--------------------------------------------------------------------------------------------------
bool gt_VictoryZerglings_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_speed;

    // Automatic Variable Declarations
    unitgroup autoF18E7E2B_g;
    int autoF18E7E2B_u;
    unit autoF18E7E2B_var;

    // Variable Initialization
    lv_speed = UnitTypeGetProperty("Zergling", c_unitPropMovementSpeed);

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_UnitCreateFacingPoint(1, "Zergling", 0, gv_pLAYER_01_USER, PointFromId(1614), UnitGetPosition(gv_victoryZagara));
    UnitGroupAdd(gv_victoryZerg, UnitLastCreated());
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, lv_speed);
    libNtve_gf_UnitCreateFacingPoint(1, "Zergling", 0, gv_pLAYER_01_USER, PointFromId(2151), UnitGetPosition(gv_victoryZagara));
    UnitGroupAdd(gv_victoryZerg, UnitLastCreated());
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, lv_speed);
    libNtve_gf_UnitCreateFacingPoint(1, "Zergling", 0, gv_pLAYER_01_USER, PointFromId(2150), UnitGetPosition(gv_victoryZagara));
    UnitGroupAdd(gv_victoryZerg, UnitLastCreated());
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, lv_speed);
    libNtve_gf_UnitCreateFacingPoint(1, "Zergling", 0, gv_pLAYER_01_USER, PointFromId(2185), UnitGetPosition(gv_victoryZagara));
    UnitGroupAdd(gv_victoryZerg, UnitLastCreated());
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, lv_speed);
    libNtve_gf_UnitCreateFacingPoint(1, "Zergling", 0, gv_pLAYER_01_USER, PointFromId(2152), UnitGetPosition(gv_victoryZagara));
    UnitGroupAdd(gv_victoryZerg, UnitLastCreated());
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, lv_speed);
    libNtve_gf_UnitCreateFacingPoint(1, "Zergling", 0, gv_pLAYER_01_USER, PointFromId(2176), UnitGetPosition(gv_victoryZagara));
    UnitGroupAdd(gv_victoryZerg, UnitLastCreated());
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, lv_speed);
    libNtve_gf_UnitCreateFacingPoint(1, "Zergling", 0, gv_pLAYER_01_USER, PointFromId(2178), UnitGetPosition(gv_victoryZagara));
    UnitGroupAdd(gv_victoryZerg, UnitLastCreated());
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, lv_speed);
    libNtve_gf_UnitCreateFacingPoint(1, "Zergling", 0, gv_pLAYER_01_USER, PointFromId(2177), UnitGetPosition(gv_victoryZagara));
    UnitGroupAdd(gv_victoryZerg, UnitLastCreated());
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, lv_speed);
    libNtve_gf_UnitCreateFacingPoint(1, "Zergling", 0, gv_pLAYER_01_USER, PointFromId(2184), UnitGetPosition(gv_victoryZagara));
    UnitGroupAdd(gv_victoryZerg, UnitLastCreated());
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, lv_speed);
    libNtve_gf_UnitCreateFacingPoint(1, "Zergling", 0, gv_pLAYER_01_USER, PointFromId(2179), UnitGetPosition(gv_victoryZagara));
    UnitGroupAdd(gv_victoryZerg, UnitLastCreated());
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, lv_speed);
    libNtve_gf_UnitCreateFacingPoint(1, "Zergling", 0, gv_pLAYER_01_USER, PointFromId(2180), UnitGetPosition(gv_victoryZagara));
    UnitGroupAdd(gv_victoryZerg, UnitLastCreated());
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, lv_speed);
    libNtve_gf_UnitCreateFacingPoint(1, "Zergling", 0, gv_pLAYER_01_USER, PointFromId(2181), UnitGetPosition(gv_victoryZagara));
    UnitGroupAdd(gv_victoryZerg, UnitLastCreated());
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, lv_speed);
    libNtve_gf_UnitCreateFacingPoint(1, "Zergling", 0, gv_pLAYER_01_USER, PointFromId(2183), UnitGetPosition(gv_victoryZagara));
    UnitGroupAdd(gv_victoryZerg, UnitLastCreated());
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, lv_speed);
    libNtve_gf_UnitCreateFacingPoint(1, "Zergling", 0, gv_pLAYER_01_USER, PointFromId(2182), UnitGetPosition(gv_victoryZagara));
    UnitGroupAdd(gv_victoryZerg, UnitLastCreated());
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, lv_speed);
    autoF18E7E2B_g = gv_victoryZerg;
    autoF18E7E2B_u = UnitGroupCount(autoF18E7E2B_g, c_unitCountAll);
    for (;; autoF18E7E2B_u -= 1) {
        autoF18E7E2B_var = UnitGroupUnitFromEnd(autoF18E7E2B_g, autoF18E7E2B_u);
        if (autoF18E7E2B_var == null) { break; }
        UnitIssueOrder(autoF18E7E2B_var, OrderTargetingUnit(AbilityCommand("attack", 0), gv_victoryZagara), c_orderQueueReplace);
        Wait(0.1, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryZerglings_Init () {
    gt_VictoryZerglings = TriggerCreate("gt_VictoryZerglings_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Zerg Hold
//--------------------------------------------------------------------------------------------------
bool gt_VictoryZergHold_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto5FE48D25_g;
    int auto5FE48D25_u;
    unit auto5FE48D25_var;
    unitgroup auto408FC0C1_g;
    int auto408FC0C1_u;
    unit auto408FC0C1_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_victoryZagara), c_animNameDefault);
    auto5FE48D25_g = gv_victoryZerg;
    auto5FE48D25_u = UnitGroupCount(auto5FE48D25_g, c_unitCountAll);
    for (;; auto5FE48D25_u -= 1) {
        auto5FE48D25_var = UnitGroupUnitFromEnd(auto5FE48D25_g, auto5FE48D25_u);
        if (auto5FE48D25_var == null) { break; }
        UnitIssueOrder(auto5FE48D25_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    }
    auto408FC0C1_g = gv_victoryZerg;
    auto408FC0C1_u = UnitGroupCount(auto408FC0C1_g, c_unitCountAll);
    for (;; auto408FC0C1_u -= 1) {
        auto408FC0C1_var = UnitGroupUnitFromEnd(auto408FC0C1_g, auto408FC0C1_u);
        if (auto408FC0C1_var == null) { break; }
        UnitIssueOrder(auto408FC0C1_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(2))), c_orderQueueReplace);
        UnitIssueOrder(auto408FC0C1_var, OrderTargetingUnit(AbilityCommand("move", 4), gv_victoryZagara), c_orderQueueAddToEnd);
        Wait(RandomFixed(0.2, 0.3), c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryZergHold_Init () {
    gt_VictoryZergHold = TriggerCreate("gt_VictoryZergHold_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04Music_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_CHEAT100Eggs_Init();
    gt_CreatedUnit_Init();
    gt_SpineCrawlerTransform_Init();
    gt_KerriganDies_Init();
    gt_StartGameQ_Init();
    gt_UnitDiesGenericQ_Init();
    gt_FeralZergMovement_Init();
    gt_DestructibleSpikesTopCenter_Init();
    gt_CreepBlockerRemoval_Init();
    gt_PlayerApproachingInfestedCommandCenters_Init();
    gt_InfestedCommandCenterDestroyed_Init();
    gt_InfestedCCsDestroyedQ_Init();
    gt_DestroyInfestedCommandCentersQ_Init();
    gt_EggRevealArea01Q_Init();
    gt_EggRevealAreas01_Init();
    gt_RevealMoreEggsArea02_Init();
    gt_EggRevealArea02Q_Init();
    gt_EggRevealAreas02_Init();
    gt_RevealMoreEggsArea03_Init();
    gt_EggRevealArea03Q_Init();
    gt_EggRevealAreas03_Init();
    gt_EggClusterAssignment_Init();
    gt_EggPickup_Init();
    gt_EggNestAnimations_Init();
    gt__50EggQ_Init();
    gt__90EggQ_Init();
    gt_BanelingEggPickup_Init();
    gt_BanelingEggQ_Init();
    gt_BanelingEggCompleteQ_Init();
    gt_FirstEggEvent_Init();
    gt_FirstEggEventCollected_Init();
    gt_ZagaraEggCollectionQ_Init();
    gt_ZagaraPathInit_Init();
    gt_ZagaraPathInitHard_Init();
    gt_FirstAttackZagaraTauntQ_Init();
    gt_FirstAttackZagaraEntersBase_Init();
    gt_FirstAttackBanelingDefense_Init();
    gt_FirstAttackBanelingDefenseQ_Init();
    gt_FirstAttackReinforcements_Init();
    gt_ZerglingBriefSelect_Init();
    gt_ZerglingSelectedtoMorphBaneling_Init();
    gt_AbathurTeachesBanelingsQ_Init();
    gt_BanelingMorphHighlightDisable_Init();
    gt_ZagaraDies_Init();
    gt_ZagaraDeepBurrows_Init();
    gt_ZagaraForcedEscortUpgrade_Init();
    gt_ZagaraEscortsCreated_Init();
    gt_ZagaraTransfusion_Init();
    gt_Zagara25EggQ_Init();
    gt_Zagara50EggQ_Init();
    gt_Zagara75EggQ_Init();
    gt_Zagara90EggQ_Init();
    gt_ZagaraFirstAttackQ_Init();
    gt_ZagaraBigAttackQ_Init();
    gt_ZagaraDeathQ_Init();
    gt_ZagaraReviveQ_Init();
    gt_ZagaraMinionDeathQ_Init();
    gt_ZagaraBanelingTauntQ_Init();
    gt_ZagaraPingControl_Init();
    gt_TipMissionHelpQ_Init();
    gt_StartAI_Init();
    gt_ZergAttackWaves_Init();
    gt__50EggAttack_Init();
    gt_AIGiveMinerals_Init();
    gt_AIGiveGas_Init();
    gt_AIResearchHard_Init();
    gt_ObjectiveInit_Init();
    gt_ObjectiveCollectEggsCreate_Init();
    gt_ObjectiveCollectEggsUpdate_Init();
    gt_ObjectiveCollectEggsComplete_Init();
    gt_ObjectiveZagaraEggsCreate_Init();
    gt_ObjectiveZagaraEggsUpdate_Init();
    gt_ObjectiveZagaraEggsComplete_Init();
    gt_ObjectiveZagaraEggsFailed_Init();
    gt_ObjectiveDestroyZagaraCreate_Init();
    gt_ObjectiveDestroyZagaraComplete_Init();
    gt_ObjectiveDestroyInfestedCCCreate_Init();
    gt_ObjectiveDestroyInfestedCCUpdate_Init();
    gt_ObjectiveDestroyInfestedCCComplete_Init();
    gt_DefeatBaseDead_Init();
    gt_DefeatPrimaryObjectiveFailed_Init();
    gt_VictoryZagarasBaseDestroyed_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_AchievementBanelingNestsBeforeEggs_Init();
    gt_AchievementZagaraNoEggsNH_Init();
    gt_AchievementDestroyZagarasBaseH_Init();
    gt_AchievementBanelingKills_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_IntroZagaraEggCapture_Init();
    gt_IntroMusic_Init();
    gt_MidQ_Init();
    gt_MidSetup_Init();
    gt_MidCinematic_Init();
    gt_MidCinematicEnd_Init();
    gt_MidCleanup_Init();
    gt_MidEggHatching_Init();
    gt_MidEggsplosions_Init();
    gt_MidMusic_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
    gt_VictoryZerglings_Init();
    gt_VictoryZergHold_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
