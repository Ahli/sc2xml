//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Fire in the Sky
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"
include "TriggerLibs/SwarmCampaignLib"
include "ai55EC7BB9"
include "ai869ED511"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libHots_InitLib();
    libSwaC_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_TERRAN_RED = 2;
const int gv_pLAYER_03_TERRAN_TEAL = 3;
const int gv_pLAYER_04_GORGON = 4;
const int gv_pLAYER_05_DEAD_NEST = 5;
const int gv_pLAYER_06_ACTIVE_NEST = 6;
const int gv_pLAYER_07_TERRAN_YELLOW = 7;
const int gv_pLAYER_08_ZERG_BIOMASS = 8;
const fixed gv_c_ScourgeActivationRange = 5.0;
const int gv_gorgonsDestroyedQuota = 7;
const int gv_scourgeNestsGoal = 7;
const int gv_objectiveZergBiomassGoal = 3;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
bool gv_gameOver;
bool gv_inCinematic;
unit gv_kerrigan;
playergroup gv_dominionPlayers;
int gv_transmissionInterrutable;
unit[11] gv_scourgeNestUnit;
int[11] gv_scourgeNestPing;
bool[11] gv_scourgeNestActivated;
bool gv_scourgeNestStarted;
int gv_scourgeNestMapTotal;
region[9] gv_scourgeNestEarlyGorgon;
int gv_clear2FireCheckCount;
int gv_tag_TumorHasTumors;
actor gv_helper_L2Tumor;
int gv_transmission_ProximityWarning;
unit gv_tHE_ONE_GORGON;
int gv_gorgonPing;
int gv_gorgonWarningPing;
bool gv_gorgonBeingSpawned;
int gv_scene_GorgonLaunch;
fixed gv_gorgonSpeed;
int gv_launchTimeIncrement;
timer gv_gorgonDestroyedQuicklyTimer;
bool gv_gorgonDestructionInProgress;
unit gv_gorgonTarget;
int gv_gorgonAttacker;
unit gv_rescuedQueen;
unitgroup gv_firebats;
point[7] gv_finalDropPod_ImpactPoint;
unit gv_finalScourgeNestUnit;
unitgroup gv_scourgeNestGroup;
unitgroup gv_finalDropGroup;
unitgroup gv_ravenTumorHunterForce;
int gv_unitsLostToGorgon;
int gv_orbComsDestroyed;
int gv_kerriganKills;
int gv_largestZergForce;
int gv_gorgonsDestroyedForAchievement;
int gv_mostGorgonsDestroyedInAchievementTime;
int gv_gorgonsDestroyed;
int gv_objectiveDestroyGorgons;
int gv_scourgeNestsActivatedCount;
int[11] gv_scourgeNest_Tag;
actor[11] gv_scourgeNest_Helper;
point[11] gv_scourgeNest_Point;
int gv_objectiveActivateScourgeNests;
int gv_objectiveFindZergBiomass;
int gv_objectiveZergBiomassFound;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicTempUnits;
bool gv_cinematicCompleted;
unitgroup gv_introZerg;
actor gv_introReticle;
int gv_introTextTag;
sound gv_introFlashbackSound;
int gv_introMusicState;
bool gv_midCinematicCompleted;
unitgroup gv_midHiddenUnitGroup;
unit gv_midSpawnedCruiser;
unit gv_midCinematicScourgeNest;
bool gv_midMusicFinished;
sound gv_midScourgeStinger;
sound gv_midCruiserStinger;
bool gv_victoryCinematicCompleted;
unitgroup gv_victoryHiddenUnitGroup2;
unit gv_victoryKerrigan;
sound gv_victorySound;

void InitGlobals () {
    int init_i;

    gv_dominionPlayers = PlayerGroupEmpty();
    gv_transmissionInterrutable = c_invalidTransmissionId;
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_scourgeNestPing[init_i] = c_invalidPingId;
    }
    gv_clear2FireCheckCount = 1;
    gv_tag_TumorHasTumors = c_textTagNone;
    gv_transmission_ProximityWarning = c_invalidTransmissionId;
    gv_gorgonPing = c_invalidPingId;
    gv_gorgonWarningPing = c_invalidPingId;
    gv_gorgonDestroyedQuicklyTimer = TimerCreate();
    gv_firebats = UnitGroupEmpty();
    gv_scourgeNestGroup = UnitGroupEmpty();
    gv_finalDropGroup = UnitGroupEmpty();
    gv_ravenTumorHunterForce = UnitGroupEmpty();
    gv_objectiveDestroyGorgons = c_invalidObjectiveId;
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_scourgeNest_Tag[init_i] = c_textTagNone;
    }
    gv_objectiveActivateScourgeNests = c_invalidObjectiveId;
    gv_objectiveFindZergBiomass = c_invalidObjectiveId;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_introZerg = UnitGroupEmpty();
    gv_introTextTag = c_textTagNone;
    gv_midHiddenUnitGroup = UnitGroupEmpty();
    gv_victoryHiddenUnitGroup2 = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_CreateTerranDropPod (unitgroup lp_dROPGROUP, point lp_lZ, int lp_pLAYER);
int gf_CreepAreaOnMap (fixed lp_stepSize);
void gf_CreateScourgeNestPing (point lp_lOC);
void gf_ShowHelperAtNest (int lp_nestIndex);
void gf_HideHelperAtNest (int lp_nestIndex);
void gf_RevealNest (int lp_nestIndex);
void gf_FinishNest (int lp_nestIndex);
void gf_ScourgeNestAttack (int lp_nestIndex);
int gf_ScourgeNestAvailableToShoot ();
bool gf_GorgonAvailableToAttack ();
void gf_FinalDrop_SetPoints (unit lp_lastNestStanding);
fixed gf_CreepPercent ();

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init03aScourgeNests;
trigger gt_Init04MusicSound;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_PrepareKerriganRevive;
trigger gt_StartGameQ;
trigger gt_BonusObjectiveRevealQ;
trigger gt_TeachCreepTumor;
trigger gt_ScourgeNestCycle;
trigger gt_ScourgeNestVisualUpdate;
trigger gt_ScourgeNestTumorDeath;
trigger gt_ScourgeNestContructionStarted;
trigger gt_ScourgeNestContructionCompleted;
trigger gt_CreepTumorTargetCursorEnter;
trigger gt_CreepTumorTargetCursorLeave;
trigger gt_GorgonClosetoBase;
trigger gt_GorgonProximityWARNING;
trigger gt_GorgonProximityWarningQ;
trigger gt_TransmissionGorgonCloseQ;
trigger gt_GorgonLaunchSchedule;
trigger gt_GorgonLaunchPlay;
trigger gt_GorgonFirstCruiser01;
trigger gt_GorgonFirstCruiser02;
trigger gt_TransmissionGorgonCreatedQ;
trigger gt_GorgonAIStarted;
trigger gt_GorgonAIEnd;
trigger gt_GorgonAI;
trigger gt_GorgonDestroyed;
trigger gt_TransmissionGorgonDestroyedQ;
trigger gt_StartFirebatAttacks;
trigger gt_ZergRescueTop;
trigger gt_ZergRescueCenter;
trigger gt_ZergRescueBottom;
trigger gt_QueenRescue01;
trigger gt_QueenRescue02;
trigger gt_SendTransmissionQueenThanksYouQ;
trigger gt_FirebatAttacked;
trigger gt_SiegeTankEntersSiegeMode;
trigger gt_CenterDropPods;
trigger gt_RavenTumorHunterForce;
trigger gt_TransmissionDominionRavenQ;
trigger gt_SetLastScourgeNest;
trigger gt_DropFinalPods;
trigger gt_TransmissionFinalDropPodsQ;
trigger gt_StartAI;
trigger gt_StartUpgradesHard;
trigger gt_AIGiveMinerals;
trigger gt_AIGiveGas;
trigger gt_TipMissionHelpQ;
trigger gt_TransmissionScourgeNestActivatedQ;
trigger gt_TransmissionFirstScourgeNestQ;
trigger gt_TransmissionAttackWaveScourgeNestTargetQ;
trigger gt_SendTransmissionQueenThanksYouQ2;
trigger gt_TransmissionZergBiomassFoundQ;
trigger gt_TransmissionFirebatsIntroQ;
trigger gt_TransmissionSupplylineBreakersQ;
trigger gt_TransmissionNorthDropPodsQ;
trigger gt_VictorySequence;
trigger gt_DefeatBaseDead;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_AchievementUnitsLosttoGorgon;
trigger gt_AchievementDestroyOrbitalCommandsNH;
trigger gt_AchievementDestroyXGorgonsinYsecondsH;
trigger gt_GorgonDestroyedforAchievement;
trigger gt_UnitsLostToGorgon;
trigger gt_LargestZergForce;
trigger gt_ObjectiveDestroyGorgonsCreate;
trigger gt_ObjectiveDestroyGorgonsUpdate;
trigger gt_ObjectiveDestroyGorgonsComplete;
trigger gt_ObjectiveActivateScourgeNestCreate;
trigger gt_ObjectiveActivateScourgeNestUpdate;
trigger gt_ObjectiveActivateScourgeNestComplete;
trigger gt_ObjectiveFindZergBiomassCreate;
trigger gt_ObjectiveFindZergBiomassUpdate;
trigger gt_ObjectiveFindZergBiomassComplete;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_IntroZerg;
trigger gt_IntroExplosions;
trigger gt_IntroZergBase;
trigger gt_IntroGorgonLaunch;
trigger gt_IntroMusic1;
trigger gt_IntroMusic2;
trigger gt_MidQ;
trigger gt_MidSetup;
trigger gt_MidCinematic;
trigger gt_MidCinematicEnd;
trigger gt_MidCleanup;
trigger gt_MidScourgeNestAttack;
trigger gt_MidMusic;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;
trigger gt_VictoryDominion;
trigger gt_VictoryDominionRetreat;
trigger gt_VictoryKerrigan;
trigger gt_VictroryDroppods;
trigger gt_VictoryCameras;

//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;

//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        cai_playerAI[init_i] = null;
    }
}

//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;

    if (cai_playerAI[p] == "ai55EC7BB9") { ai55EC7BB9_start(p); }
    if (cai_playerAI[p] == "ai869ED511") { ai869ED511_start(p); }
}

//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai55EC7BB9") { ai55EC7BB9_setDefGather(p, val); }
    if (cai_playerAI[p] == "ai869ED511") { ai869ED511_setDefGather(p, val); }
}

//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai55EC7BB9") { return ai55EC7BB9_getCustomData(p); }
    if (cai_playerAI[p] == "ai869ED511") { return ai869ED511_getCustomData(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai55EC7BB9") { return ai55EC7BB9_getLastWave(p); }
    if (cai_playerAI[p] == "ai869ED511") { return ai869ED511_getLastWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai55EC7BB9") { ai55EC7BB9_waves_run(p, target); }
    if (cai_playerAI[p] == "ai869ED511") { ai869ED511_waves_run(p, target); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai55EC7BB9") { ai55EC7BB9_waves_enable(p, val); }
    if (cai_playerAI[p] == "ai869ED511") { ai869ED511_waves_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "ai55EC7BB9") { ai55EC7BB9_waves_stop(); }
    if (ai == "ai869ED511") { ai869ED511_waves_stop(); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai55EC7BB9") { ai55EC7BB9_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "ai869ED511") { ai869ED511_wave_run(w, p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai55EC7BB9") { ai55EC7BB9_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "ai869ED511") { ai869ED511_wave_enable(w, p, val); }
}

//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "ai55EC7BB9") { return ai55EC7BB9_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "ai869ED511") { return ai869ED511_wave_isEnabled(w, p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai55EC7BB9") { return ai55EC7BB9_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "ai869ED511") { return ai869ED511_wave_createdUnits(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai55EC7BB9") { return ai55EC7BB9_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "ai869ED511") { return ai869ED511_wave_createdWave(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_startall () {
    cai_start("ai55EC7BB9", 2);
    cai_start("ai869ED511", 3);
    AICampaignStart(4);
    AICampaignStart(5);
    AICampaignStart(6);
    AICampaignStart(7);
    AICampaignStart(8);
}

//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(2, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(3, target);
}

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
trigger auto_gf_CreateTerranDropPod_Trigger = null;
unitgroup auto_gf_CreateTerranDropPod_lp_dROPGROUP;
point auto_gf_CreateTerranDropPod_lp_lZ;
int auto_gf_CreateTerranDropPod_lp_pLAYER;

void gf_CreateTerranDropPod (unitgroup lp_dROPGROUP, point lp_lZ, int lp_pLAYER) {
    auto_gf_CreateTerranDropPod_lp_dROPGROUP = lp_dROPGROUP;
    auto_gf_CreateTerranDropPod_lp_lZ = lp_lZ;
    auto_gf_CreateTerranDropPod_lp_pLAYER = lp_pLAYER;

    if (auto_gf_CreateTerranDropPod_Trigger == null) {
        auto_gf_CreateTerranDropPod_Trigger = TriggerCreate("auto_gf_CreateTerranDropPod_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateTerranDropPod_Trigger, false, false);
}

bool auto_gf_CreateTerranDropPod_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_dROPGROUP = auto_gf_CreateTerranDropPod_lp_dROPGROUP;
    point lp_lZ = auto_gf_CreateTerranDropPod_lp_lZ;
    int lp_pLAYER = auto_gf_CreateTerranDropPod_lp_pLAYER;

    // Automatic Variable Declarations
    // Implementation
    libSwaC_gf_CreateDropPod(libSwaC_ge_DropPodRace_Terran, lp_lZ, lp_dROPGROUP, true, lp_pLAYER);
    AISetGroupScriptControlled(lp_dROPGROUP, false);
    return true;
}

int gf_CreepAreaOnMap (fixed lp_stepSize) {
    // Variable Declarations
    fixed lv_x;
    fixed lv_y;
    fixed lv_endx;
    fixed lv_endy;
    int lv_acres;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_x = PointGetX(RegionGetBoundsMin(RegionPlayableMap()));
    lv_y = PointGetY(RegionGetBoundsMin(RegionPlayableMap()));
    lv_endx = PointGetX(RegionGetBoundsMax(RegionPlayableMap()));
    lv_endy = PointGetY(RegionGetBoundsMax(RegionPlayableMap()));

    // Implementation
    while ((lv_x <= lv_endx)) {
        lv_y = PointGetY(RegionGetBoundsMin(RegionPlayableMap()));
        while ((lv_y <= lv_endy)) {
            if ((CreepIsPresent(Point(lv_x, lv_y)) == true)) {
                lv_acres += 1;
            }

            lv_y += lp_stepSize;
        }
        lv_x += lp_stepSize;
    }
    return lv_acres;
}

void gf_CreateScourgeNestPing (point lp_lOC) {
    // Automatic Variable Declarations
    // Implementation
    libSwaC_gf_CreateObjectivePing(true, lp_lOC, StringExternal("Param/Value/8A1AB149"));
    PingSetVisible(PingLastCreated(), false);
}

trigger auto_gf_ShowHelperAtNest_Trigger = null;
int auto_gf_ShowHelperAtNest_lp_nestIndex;

void gf_ShowHelperAtNest (int lp_nestIndex) {
    auto_gf_ShowHelperAtNest_lp_nestIndex = lp_nestIndex;

    if (auto_gf_ShowHelperAtNest_Trigger == null) {
        auto_gf_ShowHelperAtNest_Trigger = TriggerCreate("auto_gf_ShowHelperAtNest_TriggerFunc");
    }

    TriggerExecute(auto_gf_ShowHelperAtNest_Trigger, false, false);
}

bool auto_gf_ShowHelperAtNest_TriggerFunc (bool testConds, bool runActions) {
    int lp_nestIndex = auto_gf_ShowHelperAtNest_lp_nestIndex;

    // Automatic Variable Declarations
    // Implementation
    if ((gv_scourgeNest_Helper[lp_nestIndex] == null) && (gv_scourgeNest_Tag[lp_nestIndex] == c_textTagNone)) {
        libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(libSwaC_ge_CampaginReticleType_ZergMainObjective, libSwaC_ge_CampaginReticleSize_Medium, null, gv_scourgeNestUnit[lp_nestIndex], "Ref_Center");
        gv_scourgeNest_Helper[lp_nestIndex] = libNtve_gf_ActorLastCreated();
    }

    return true;
}

trigger auto_gf_HideHelperAtNest_Trigger = null;
int auto_gf_HideHelperAtNest_lp_nestIndex;

void gf_HideHelperAtNest (int lp_nestIndex) {
    auto_gf_HideHelperAtNest_lp_nestIndex = lp_nestIndex;

    if (auto_gf_HideHelperAtNest_Trigger == null) {
        auto_gf_HideHelperAtNest_Trigger = TriggerCreate("auto_gf_HideHelperAtNest_TriggerFunc");
    }

    TriggerExecute(auto_gf_HideHelperAtNest_Trigger, false, false);
}

bool auto_gf_HideHelperAtNest_TriggerFunc (bool testConds, bool runActions) {
    int lp_nestIndex = auto_gf_HideHelperAtNest_lp_nestIndex;

    // Automatic Variable Declarations
    // Implementation
    if ((gv_scourgeNest_Tag[lp_nestIndex] != c_textTagNone)) {
        TextTagDestroy(gv_scourgeNest_Tag[lp_nestIndex]);
        gv_scourgeNest_Tag[lp_nestIndex] = c_textTagNone;
    }

    if ((gv_scourgeNest_Helper[lp_nestIndex] != null)) {
        libNtve_gf_KillModel(gv_scourgeNest_Helper[lp_nestIndex]);
        gv_scourgeNest_Helper[lp_nestIndex] = null;
    }

    return true;
}

trigger auto_gf_RevealNest_Trigger = null;
int auto_gf_RevealNest_lp_nestIndex;

void gf_RevealNest (int lp_nestIndex) {
    auto_gf_RevealNest_lp_nestIndex = lp_nestIndex;

    if (auto_gf_RevealNest_Trigger == null) {
        auto_gf_RevealNest_Trigger = TriggerCreate("auto_gf_RevealNest_TriggerFunc");
    }

    TriggerExecute(auto_gf_RevealNest_Trigger, false, false);
}

bool auto_gf_RevealNest_TriggerFunc (bool testConds, bool runActions) {
    int lp_nestIndex = auto_gf_RevealNest_lp_nestIndex;

    // Variable Declarations
    point lv_nEST_POSITION;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UnitIsAlive(gv_scourgeNestUnit[lp_nestIndex]) == true)) {
        libNtve_gf_ShareVisionofUnit(gv_scourgeNestUnit[lp_nestIndex], true, gv_pLAYER_01_USER);
        libSwaC_gf_CreateObjectivePing(true, UnitGetPosition(gv_scourgeNestUnit[lp_nestIndex]), StringExternal("Param/Value/0FD53926"));
        gv_scourgeNestPing[lp_nestIndex] = PingLastCreated();
        gf_ShowHelperAtNest(lp_nestIndex);
        libSwaC_gf_AddRemoveObjectiveRePing(gv_scourgeNestPing[lp_nestIndex], true, 240.0, 120.0);
    }

    return true;
}

trigger auto_gf_FinishNest_Trigger = null;
int auto_gf_FinishNest_lp_nestIndex;

void gf_FinishNest (int lp_nestIndex) {
    auto_gf_FinishNest_lp_nestIndex = lp_nestIndex;

    if (auto_gf_FinishNest_Trigger == null) {
        auto_gf_FinishNest_Trigger = TriggerCreate("auto_gf_FinishNest_TriggerFunc");
    }

    TriggerExecute(auto_gf_FinishNest_Trigger, false, false);
}

bool auto_gf_FinishNest_TriggerFunc (bool testConds, bool runActions) {
    int lp_nestIndex = auto_gf_FinishNest_lp_nestIndex;

    // Variable Declarations
    point lv_nEST_POSITION;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gv_scourgeNestPing[lp_nestIndex] != c_invalidPingId)) {
        PingDestroy(gv_scourgeNestPing[lp_nestIndex]);
        gv_scourgeNestPing[lp_nestIndex] = c_invalidPingId;
    }

    gf_HideHelperAtNest(lp_nestIndex);
    return true;
}

trigger auto_gf_ScourgeNestAttack_Trigger = null;
int auto_gf_ScourgeNestAttack_lp_nestIndex;

void gf_ScourgeNestAttack (int lp_nestIndex) {
    auto_gf_ScourgeNestAttack_lp_nestIndex = lp_nestIndex;

    if (auto_gf_ScourgeNestAttack_Trigger == null) {
        auto_gf_ScourgeNestAttack_Trigger = TriggerCreate("auto_gf_ScourgeNestAttack_TriggerFunc");
    }

    TriggerExecute(auto_gf_ScourgeNestAttack_Trigger, false, false);
}

bool auto_gf_ScourgeNestAttack_TriggerFunc (bool testConds, bool runActions) {
    int lp_nestIndex = auto_gf_ScourgeNestAttack_lp_nestIndex;

    // Automatic Variable Declarations
    // Implementation
    while (!((gv_inCinematic == false) && (gv_gameOver == false) && (gv_clear2FireCheckCount == 0) && (gf_GorgonAvailableToAttack() == true))) {
        Wait(0.5, c_timeGame);
    }
    gv_clear2FireCheckCount += 1;
    gv_gorgonAttacker = lp_nestIndex;
    Wait(0.5, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_scourgeNestUnit[lp_nestIndex]), c_animNameDefault, "Stand", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    TransmissionClear(gv_transmission_ProximityWarning);
    Wait(0.5, c_timeGame);
    UnitSetState(gv_tHE_ONE_GORGON, c_unitStateTargetable, true);
    UnitIssueOrder(gv_scourgeNestUnit[lp_nestIndex], OrderTargetingUnit(AbilityCommand("attack", 0), gv_tHE_ONE_GORGON), c_orderQueueReplace);
    UnitGroupRemove(gv_scourgeNestGroup, gv_scourgeNestUnit[lp_nestIndex]);
    gf_FinishNest(lp_nestIndex);
    return true;
}

int gf_ScourgeNestAvailableToShoot () {
    // Variable Declarations
    int lv_loopVar;

    // Automatic Variable Declarations
    const int autoB8676095_ae = gv_scourgeNestsGoal;
    const int autoB8676095_ai = 1;

    // Variable Initialization

    // Implementation
    lv_loopVar = 1;
    for ( ; ( (autoB8676095_ai >= 0 && lv_loopVar <= autoB8676095_ae) || (autoB8676095_ai < 0 && lv_loopVar >= autoB8676095_ae) ) ; lv_loopVar += autoB8676095_ai ) {
        if ((UnitIsAlive(gv_scourgeNestUnit[lv_loopVar]) == true) && ((UnitGroupCount(UnitGroup("CreepTumor", c_playerAny, gv_scourgeNestEarlyGorgon[lv_loopVar], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("CreepTumorBurrowed", c_playerAny, gv_scourgeNestEarlyGorgon[lv_loopVar], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("CreepTumorUsed", c_playerAny, gv_scourgeNestEarlyGorgon[lv_loopVar], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("Hatchery", c_playerAny, gv_scourgeNestEarlyGorgon[lv_loopVar], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("Lair", c_playerAny, gv_scourgeNestEarlyGorgon[lv_loopVar], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("Hive", c_playerAny, gv_scourgeNestEarlyGorgon[lv_loopVar], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0))) {
            return lv_loopVar;
        }

    }
    return 0;
}

bool gf_GorgonAvailableToAttack () {
    // Automatic Variable Declarations
    // Implementation
    if (((gv_tHE_ONE_GORGON == null) || (UnitIsAlive(gv_tHE_ONE_GORGON) == false))) {
        return false;
    }

    return (gv_gorgonAttacker == 0);
}

void gf_FinalDrop_SetPoints (unit lp_lastNestStanding) {
    // Automatic Variable Declarations
    unit autoE1005D75_val;

    // Implementation
    autoE1005D75_val = lp_lastNestStanding;
    if (autoE1005D75_val == gv_scourgeNestUnit[2]) {
        gv_finalDropPod_ImpactPoint[1] = PointFromId(733);
        gv_finalDropPod_ImpactPoint[2] = PointFromId(1269);
        gv_finalDropPod_ImpactPoint[3] = PointFromId(1277);
    }
    else if (autoE1005D75_val == gv_scourgeNestUnit[3]) {
        gv_finalDropPod_ImpactPoint[1] = PointFromId(31);
        gv_finalDropPod_ImpactPoint[2] = PointFromId(105);
        gv_finalDropPod_ImpactPoint[3] = PointFromId(107);
    }
    else if (autoE1005D75_val == gv_scourgeNestUnit[4]) {
        gv_finalDropPod_ImpactPoint[1] = PointFromId(1347);
        gv_finalDropPod_ImpactPoint[2] = PointFromId(1348);
        gv_finalDropPod_ImpactPoint[3] = PointFromId(1349);
    }
    else if (autoE1005D75_val == gv_scourgeNestUnit[5]) {
        gv_finalDropPod_ImpactPoint[1] = PointFromId(1350);
        gv_finalDropPod_ImpactPoint[2] = PointFromId(1351);
        gv_finalDropPod_ImpactPoint[3] = PointFromId(1352);
    }
    else if (autoE1005D75_val == gv_scourgeNestUnit[6]) {
        gv_finalDropPod_ImpactPoint[1] = PointFromId(1344);
        gv_finalDropPod_ImpactPoint[2] = PointFromId(1345);
        gv_finalDropPod_ImpactPoint[3] = PointFromId(1346);
    }
    else if (autoE1005D75_val == gv_scourgeNestUnit[7]) {
        gv_finalDropPod_ImpactPoint[1] = PointFromId(1353);
        gv_finalDropPod_ImpactPoint[2] = PointFromId(1354);
        gv_finalDropPod_ImpactPoint[3] = PointFromId(1355);
    }
    else {
    }
}

fixed gf_CreepPercent () {
    // Variable Declarations
    fixed lv_mapArea;
    int lv_creepArea;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_creepArea = gf_CreepAreaOnMap(1.0);
    lv_mapArea = (libNtve_gf_WidthOfRegion(RegionPlayableMap()) * libNtve_gf_HeightOfRegion(RegionPlayableMap()));
    return ((lv_creepArea / lv_mapArea) * 100);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_ULoadCampaignData("ZChar2");
    TriggerExecute(gt_Init01Technology, true, true);
    libSwaC_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03Units, true, true);
    TriggerExecute(gt_Init03aScourgeNests, true, true);
    TriggerExecute(gt_Init04MusicSound, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulties, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    TriggerExecute(gt_IntroQ, true, true);
    TriggerExecute(gt_StartFirebatAttacks, true, false);
    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    TechTreeUpgradeAllow(gv_pLAYER_02_TERRAN_RED, "HailstormMissilePods", true);
    TechTreeUpgradeAllow(gv_pLAYER_03_TERRAN_TEAL, "HailstormMissilePods", true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_visionGroup;

    // Automatic Variable Declarations
    playergroup auto33FED383_g;
    int auto33FED383_var;

    // Variable Initialization
    lv_visionGroup = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_TERRAN_RED, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_03_TERRAN_TEAL, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_04_GORGON, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_05_DEAD_NEST, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_06_ACTIVE_NEST, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_07_TERRAN_YELLOW, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_08_ZERG_BIOMASS, libNtve_ge_AllianceSetting_Neutral);
    PlayerGroupAdd(gv_dominionPlayers, gv_pLAYER_02_TERRAN_RED);
    PlayerGroupAdd(gv_dominionPlayers, gv_pLAYER_03_TERRAN_TEAL);
    PlayerGroupAdd(gv_dominionPlayers, gv_pLAYER_07_TERRAN_YELLOW);
    auto33FED383_g = gv_dominionPlayers;
    auto33FED383_var = -1;
    while (true) {
        auto33FED383_var = PlayerGroupNextPlayer(auto33FED383_g, auto33FED383_var);
        if (auto33FED383_var < 0) { break; }
        libNtve_gf_SetAlliance(auto33FED383_var, gv_pLAYER_03_TERRAN_TEAL, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        libNtve_gf_SetAlliance(auto33FED383_var, gv_pLAYER_05_DEAD_NEST, libNtve_ge_AllianceSetting_Neutral);
        libNtve_gf_SetAlliance(auto33FED383_var, gv_pLAYER_06_ACTIVE_NEST, libNtve_ge_AllianceSetting_Neutral);
        libNtve_gf_SetAlliance(auto33FED383_var, gv_pLAYER_07_TERRAN_YELLOW, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        libNtve_gf_SetAlliance(auto33FED383_var, gv_pLAYER_08_ZERG_BIOMASS, libNtve_ge_AllianceSetting_Neutral);
        PlayerSetColorIndex(auto33FED383_var, 1, true);
    }
    libNtve_gf_SetAlliance(gv_pLAYER_04_GORGON, gv_pLAYER_02_TERRAN_RED, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_04_GORGON, gv_pLAYER_03_TERRAN_TEAL, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_04_GORGON, gv_pLAYER_05_DEAD_NEST, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_04_GORGON, gv_pLAYER_06_ACTIVE_NEST, libNtve_ge_AllianceSetting_NeutralWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_04_GORGON, gv_pLAYER_07_TERRAN_YELLOW, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_05_DEAD_NEST, gv_pLAYER_06_ACTIVE_NEST, libNtve_ge_AllianceSetting_Neutral);
    PlayerGroupAdd(lv_visionGroup, gv_pLAYER_02_TERRAN_RED);
    PlayerGroupAdd(lv_visionGroup, gv_pLAYER_03_TERRAN_TEAL);
    PlayerGroupAdd(lv_visionGroup, gv_pLAYER_04_GORGON);
    PlayerGroupAdd(lv_visionGroup, gv_pLAYER_05_DEAD_NEST);
    PlayerGroupAdd(lv_visionGroup, gv_pLAYER_06_ACTIVE_NEST);
    PlayerGroupAdd(lv_visionGroup, gv_pLAYER_07_TERRAN_YELLOW);
    PlayerGroupAdd(lv_visionGroup, gv_pLAYER_08_ZERG_BIOMASS);
    libSwaC_gf_ShareVisionAmongPlayers(lv_visionGroup);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 250);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 100);
    PlayerModifyPropertyInt(gv_pLAYER_02_TERRAN_RED, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_02_TERRAN_RED, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_03_TERRAN_TEAL, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_03_TERRAN_TEAL, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerSetState(gv_pLAYER_05_DEAD_NEST, c_playerStateFidgetingEnabled, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoD86F3D3F_g;
    int autoD86F3D3F_u;
    unit autoD86F3D3F_var;
    unitgroup autoA41A0CF0_g;
    int autoA41A0CF0_u;
    unit autoA41A0CF0_var;
    unitgroup auto8B97F196_g;
    int auto8B97F196_u;
    unit auto8B97F196_var;
    unitgroup auto2A9E8D8C_g;
    int auto2A9E8D8C_u;
    unit auto2A9E8D8C_var;
    unitgroup auto9AC18241_g;
    int auto9AC18241_u;
    unit auto9AC18241_var;
    unitgroup autoBB441A2D_g;
    int autoBB441A2D_u;
    unit autoBB441A2D_var;
    unitgroup autoBBD51A65_g;
    int autoBBD51A65_u;
    unit autoBBD51A65_var;
    unitgroup auto0A3050CC_g;
    int auto0A3050CC_u;
    unit auto0A3050CC_var;
    unitgroup autoFB709A3B_g;
    int autoFB709A3B_u;
    unit autoFB709A3B_var;
    unitgroup autoF701BE02_g;
    int autoF701BE02_u;
    unit autoF701BE02_var;
    unitgroup autoADA484F0_g;
    int autoADA484F0_u;
    unit autoADA484F0_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_CreateHero2(PointFromId(16), gv_pLAYER_01_USER, libSwaC_ge_HeroUnit_Kerrigan, PointGetFacing(PointFromId(16)), 0, libSwaC_ge_KerriganCreatePurpose_GamePlay);
    gv_kerrigan = UnitLastCreated();
    libSwaC_gf_SetHeroPanelUnit(1, UnitLastCreated());
    AISetUnitScriptControlled(UnitFromId(253), true);
    autoD86F3D3F_g = UnitGroup("Firebat", gv_pLAYER_07_TERRAN_YELLOW, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD86F3D3F_u = UnitGroupCount(autoD86F3D3F_g, c_unitCountAll);
    for (;; autoD86F3D3F_u -= 1) {
        autoD86F3D3F_var = UnitGroupUnitFromEnd(autoD86F3D3F_g, autoD86F3D3F_u);
        if (autoD86F3D3F_var == null) { break; }
        UnitGroupAdd(gv_firebats, autoD86F3D3F_var);
    }
    autoA41A0CF0_g = UnitGroup(null, gv_pLAYER_07_TERRAN_YELLOW, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA41A0CF0_u = UnitGroupCount(autoA41A0CF0_g, c_unitCountAll);
    for (;; autoA41A0CF0_u -= 1) {
        autoA41A0CF0_var = UnitGroupUnitFromEnd(autoA41A0CF0_g, autoA41A0CF0_u);
        if (autoA41A0CF0_var == null) { break; }
        UnitGroupAdd(gv_ravenTumorHunterForce, autoA41A0CF0_var);
    }
    auto8B97F196_g = UnitGroup("SCV", gv_pLAYER_07_TERRAN_YELLOW, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8B97F196_u = UnitGroupCount(auto8B97F196_g, c_unitCountAll);
    for (;; auto8B97F196_u -= 1) {
        auto8B97F196_var = UnitGroupUnitFromEnd(auto8B97F196_g, auto8B97F196_u);
        if (auto8B97F196_var == null) { break; }
        UnitIssueOrder(auto8B97F196_var, OrderSetAutoCast(AbilityCommand("Repair", 0), true), c_orderQueueReplace);
    }
    auto2A9E8D8C_g = UnitGroup("AutoTurret", gv_pLAYER_02_TERRAN_RED, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2A9E8D8C_u = UnitGroupCount(auto2A9E8D8C_g, c_unitCountAll);
    for (;; auto2A9E8D8C_u -= 1) {
        auto2A9E8D8C_var = UnitGroupUnitFromEnd(auto2A9E8D8C_g, auto2A9E8D8C_u);
        if (auto2A9E8D8C_var == null) { break; }
        UnitBehaviorRemove(auto2A9E8D8C_var, "AutoTurretTimedLife", 1);
    }
    auto9AC18241_g = UnitGroup("Bulldozer", gv_pLAYER_02_TERRAN_RED, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9AC18241_u = UnitGroupCount(auto9AC18241_g, c_unitCountAll);
    for (;; auto9AC18241_u -= 1) {
        auto9AC18241_var = UnitGroupUnitFromEnd(auto9AC18241_g, auto9AC18241_u);
        if (auto9AC18241_var == null) { break; }
        UnitSetPropertyFixed(auto9AC18241_var, c_unitPropMovementSpeed, 0.25);
        UnitSetPropertyFixed(auto9AC18241_var, c_unitPropLifeMax, 150.0);
        UnitSetPropertyFixed(auto9AC18241_var, c_unitPropLifePercent, 100.0);
        UnitIssueOrder(auto9AC18241_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    }
    autoBB441A2D_g = UnitGroup("ZergBiomassPickup", gv_pLAYER_08_ZERG_BIOMASS, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBB441A2D_u = UnitGroupCount(autoBB441A2D_g, c_unitCountAll);
    for (;; autoBB441A2D_u -= 1) {
        autoBB441A2D_var = UnitGroupUnitFromEnd(autoBB441A2D_g, autoBB441A2D_u);
        if (autoBB441A2D_var == null) { break; }
        libSwaC_gf_SetUnitInfoTextCampaign(autoBB441A2D_var, StringExternal("Param/Value/B04BE048"), StringExternal("Param/Value/95E73740"), null);
    }
    UnitSetTeamColorIndex(UnitFromId(54), libSwaC_gf_CampaignKerriganZergPlayerColor());
    libNtve_gf_ShareVisionofUnit(UnitFromId(54), true, gv_pLAYER_01_USER);
    libSwaC_gf_SetUnitInfoTextCampaign(UnitFromId(54), null, UnitTypeGetName(UnitGetType(UnitFromId(54))), null);
    gv_scourgeNestGroup = UnitGroup("ZergTowerArtillery", gv_pLAYER_05_DEAD_NEST, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBBD51A65_g = gv_scourgeNestGroup;
    autoBBD51A65_u = UnitGroupCount(autoBBD51A65_g, c_unitCountAll);
    for (;; autoBBD51A65_u -= 1) {
        autoBBD51A65_var = UnitGroupUnitFromEnd(autoBBD51A65_g, autoBBD51A65_u);
        if (autoBBD51A65_var == null) { break; }
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(autoBBD51A65_var), c_animNameDefault, "Stand Unpowered", c_animFlagPlayForever, c_animTimeDefault);
        libNtve_gf_MakeUnitInvulnerable(autoBBD51A65_var, true);
        UnitSetState(autoBBD51A65_var, c_unitStateRadarable, false);
        libSwaC_gf_SetUnitInfoTextCampaign(autoBBD51A65_var, StringExternal("Param/Value/E46F58A3"), StringExternal("Param/Value/FF9A9242"), null);
        if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
            UnitSetInfoSubTip(autoBBD51A65_var, StringExternal("Param/Value/1F12C68C"));
        }

    }
    auto0A3050CC_g = UnitGroup("Bunker", gv_pLAYER_02_TERRAN_RED, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0A3050CC_u = UnitGroupCount(auto0A3050CC_g, c_unitCountAll);
    for (;; auto0A3050CC_u -= 1) {
        auto0A3050CC_var = UnitGroupUnitFromEnd(auto0A3050CC_g, auto0A3050CC_u);
        if (auto0A3050CC_var == null) { break; }
        UnitCargoCreate(auto0A3050CC_var, "Marine", 4);
    }
    autoFB709A3B_g = UnitGroup("Bunker", gv_pLAYER_03_TERRAN_TEAL, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFB709A3B_u = UnitGroupCount(autoFB709A3B_g, c_unitCountAll);
    for (;; autoFB709A3B_u -= 1) {
        autoFB709A3B_var = UnitGroupUnitFromEnd(autoFB709A3B_g, autoFB709A3B_u);
        if (autoFB709A3B_var == null) { break; }
        UnitCargoCreate(autoFB709A3B_var, "Marine", 4);
    }
    autoF701BE02_g = UnitGroup("Bunker", gv_pLAYER_07_TERRAN_YELLOW, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF701BE02_u = UnitGroupCount(autoF701BE02_g, c_unitCountAll);
    for (;; autoF701BE02_u -= 1) {
        autoF701BE02_var = UnitGroupUnitFromEnd(autoF701BE02_g, autoF701BE02_u);
        if (autoF701BE02_var == null) { break; }
        UnitCargoCreate(autoF701BE02_var, "Marine", 4);
    }
    autoADA484F0_g = UnitGroup("InvisibleTargetDummy", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoADA484F0_u = UnitGroupCount(autoADA484F0_g, c_unitCountAll);
    for (;; autoADA484F0_u -= 1) {
        autoADA484F0_var = UnitGroupUnitFromEnd(autoADA484F0_g, autoADA484F0_u);
        if (autoADA484F0_var == null) { break; }
        libNtve_gf_ChangeUnitDamage(autoADA484F0_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    }
    ActorSend(ActorFromDoodad(DoodadFromId(294)), "AliasAdd CruiserLaunchBay");
    ActorSend(ActorFromDoodad(DoodadFromId(294)), "ExternalFinderAdd");
    CutsceneCreateNew("Cutscenes\\ZChar02CruiserLaunch.SC2Cutscene", libNtve_gf_PointFromXYZ(168.29, 65.25, 10.02), 0.0, PlayerGroupAll(), false);
    gv_scene_GorgonLaunch = CutsceneLastCreated();
    CutscenePause(gv_scene_GorgonLaunch);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03a Scourge Nests
//--------------------------------------------------------------------------------------------------
bool gt_Init03aScourgeNests_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_scourgeNestUnit[1] = UnitFromId(82);
    gv_scourgeNest_Point[1] = UnitGetPosition(gv_scourgeNestUnit[1]);
    gv_scourgeNestEarlyGorgon[1] = RegionFromId(35);
    gv_scourgeNestUnit[2] = UnitFromId(38);
    gv_scourgeNest_Point[2] = UnitGetPosition(gv_scourgeNestUnit[2]);
    gv_scourgeNestEarlyGorgon[2] = RegionFromId(4);
    gv_scourgeNestUnit[3] = UnitFromId(178);
    gv_scourgeNest_Point[3] = UnitGetPosition(gv_scourgeNestUnit[3]);
    gv_scourgeNestEarlyGorgon[3] = RegionFromId(5);
    gv_scourgeNestUnit[4] = UnitFromId(239);
    gv_scourgeNest_Point[4] = UnitGetPosition(gv_scourgeNestUnit[4]);
    gv_scourgeNestEarlyGorgon[4] = RegionFromId(8);
    gv_scourgeNestUnit[5] = UnitFromId(34);
    gv_scourgeNest_Point[5] = UnitGetPosition(gv_scourgeNestUnit[5]);
    gv_scourgeNestEarlyGorgon[5] = RegionFromId(10);
    gv_scourgeNestUnit[6] = UnitFromId(270);
    gv_scourgeNest_Point[6] = UnitGetPosition(gv_scourgeNestUnit[6]);
    gv_scourgeNestEarlyGorgon[6] = RegionFromId(14);
    gv_scourgeNestUnit[7] = UnitFromId(139);
    gv_scourgeNest_Point[7] = UnitGetPosition(gv_scourgeNestUnit[7]);
    gv_scourgeNestEarlyGorgon[7] = RegionFromId(15);
    gv_scourgeNestMapTotal = 7;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03aScourgeNests_Init () {
    gt_Init03aScourgeNests = TriggerCreate("gt_Init03aScourgeNests_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init04MusicSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_IntroMusic1, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04MusicSound_Init () {
    gt_Init04MusicSound = TriggerCreate("gt_Init04MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    libLbty_gf_AutoRevealRegion(RegionFromId(24), RegionFromId(24), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(25), RegionFromId(25), gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_gorgonArrivalTime;

    // Automatic Variable Declarations
    playergroup auto971F6F29_g;
    int auto971F6F29_var;
    playergroup autoF3471316_g;
    int autoF3471316_var;
    playergroup autoEB4262D1_g;
    int autoEB4262D1_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_gorgonArrivalTime = libHots_gf_DifficultyValueFixed2(360.0, 360.0, 300.0);
    gv_gorgonSpeed = (DistanceBetweenPoints(PointFromId(13), PointFromId(222)) / lv_gorgonArrivalTime);
    auto971F6F29_g = gv_dominionPlayers;
    auto971F6F29_var = -1;
    while (true) {
        auto971F6F29_var = PlayerGroupNextPlayer(auto971F6F29_g, auto971F6F29_var);
        if (auto971F6F29_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto971F6F29_var, "PunisherGrenades", 1);
        TechTreeUpgradeAddLevel(auto971F6F29_var, "SiegeTech", 1);
    }
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        TriggerEnable(gt_RavenTumorHunterForce, true);
        autoF3471316_g = gv_dominionPlayers;
        autoF3471316_var = -1;
        while (true) {
            autoF3471316_var = PlayerGroupNextPlayer(autoF3471316_g, autoF3471316_var);
            if (autoF3471316_var < 0) { break; }
            TechTreeUpgradeAddLevel(autoF3471316_var, "TerranInfantryWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(autoF3471316_var, "TerranShipWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(autoF3471316_var, "TerranVehicleWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(autoF3471316_var, "ClusterWarheads", 1);
        }
    }

    if (((libSwaC_gf_MissionStatus("ZExpedition3") == libSwaC_ge_MissionStatus_Completed) || (libSwaC_gf_MissionStatus("ZZerus3") == libSwaC_ge_MissionStatus_Completed))) {
        autoEB4262D1_g = gv_dominionPlayers;
        autoEB4262D1_var = -1;
        while (true) {
            autoEB4262D1_var = PlayerGroupNextPlayer(autoEB4262D1_g, autoEB4262D1_var);
            if (autoEB4262D1_var < 0) { break; }
            TechTreeUpgradeAddLevel(autoEB4262D1_var, "ShieldWall", 1);
            TechTreeAbilityAllow(autoEB4262D1_var, AbilityCommand("250mmStrikeCannons", 0), true);
            TechTreeUpgradeAddLevel(autoEB4262D1_var, "AresClassWeaponsSystemViking", 1);
            TechTreeUpgradeAddLevel(autoEB4262D1_var, "MultilockTargetingSystems", 1);
            TechTreeUpgradeAddLevel(autoEB4262D1_var, "NeoSteelAndShrikeTurretIconUpgrade", 1);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_AddMissionTipUserData("Production");
    libSwaC_gf_AddMissionTipUserData("Zerg Structures");
    libSwaC_gf_AddMissionTipUserData("Upgrades");
    libSwaC_gf_AddMissionTipUserData("Creep Tumor");
    libSwaC_gf_AddMissionTipUserData("Scourge Nests");
    libSwaC_gf_AddMissionTipUserData("Gorgon Battlecruiser");
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("SCV", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Marine", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Firebat", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Medic", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Marauder", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Ghost", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Hellion", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("WarHound", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Goliath", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("SiegeTank", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Thor", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("VikingFighter", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Medivac", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Bunker", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("MissileTurret", false, gv_pLAYER_01_USER);
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        libSwaC_gf_AddUnitTypeToUnitHelpPanel("Banshee", false, gv_pLAYER_01_USER);
        libSwaC_gf_AddUnitTypeToUnitHelpPanel("ScienceVessel", false, gv_pLAYER_01_USER);
        libSwaC_gf_AddUnitTypeToUnitHelpPanel("Wraith", false, gv_pLAYER_01_USER);
        libSwaC_gf_AddUnitTypeToUnitHelpPanel("Raven", false, gv_pLAYER_01_USER);
        libSwaC_gf_AddUnitTypeToUnitHelpPanel("AutoTurret", false, gv_pLAYER_01_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prepare Kerrigan Revive
//--------------------------------------------------------------------------------------------------
bool gt_PrepareKerriganRevive_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_StartKerriganReviveCooldown();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrepareKerriganRevive_Init () {
    gt_PrepareKerriganRevive = TriggerCreate("gt_PrepareKerriganRevive_Func");
    TriggerAddEventUnitDied(gt_PrepareKerriganRevive, UnitRefFromVariable("gv_kerrigan"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_StartingWorkersAutoHarvest(RegionFromId(44), RegionFromId(45));
    if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
        libSwaC_gf_RemindPlayertoSpawnDrones(180.0, 6);
        libSwaC_gf_RemindPlayertoAssign3DronestoExtractor(UnitFromId(10), 240.0);
    }

    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/F577E35D"), null, CameraInfoGetTarget(CameraInfoFromId(439)));
    TriggerEnable(gt_DefeatBaseDead, true);
    Wait(3.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveDestroyGorgonsCreate, true, true);
    TriggerQueueExit();
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_GorgonLaunchPlay, true, false);
    TriggerEnable(gt_GorgonClosetoBase, true);
    TriggerExecute(gt_TipMissionHelpQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective Reveal Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveRevealQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto9BEDE610_g;
    int auto9BEDE610_u;
    unit auto9BEDE610_var;

    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((CreepIsPresent(PointFromId(205)) == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerQueueEnter();
        TriggerExecute(gt_ObjectiveFindZergBiomassCreate, true, true);
        TriggerQueueExit();
        TriggerExecute(gt_SendTransmissionQueenThanksYouQ2, true, false);
        if ((UnitIsAlive(UnitFromId(1831)) == true)) {
            libSwaC_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(UnitFromId(1831)), 2.0, Color(0.00, 100.00, 0.00));
            UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/4AFAF0F4"), null, UnitGetPosition(UnitFromId(1831)));
            libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(libSwaC_ge_CampaginReticleType_ZergBonusObjective, libSwaC_ge_CampaginReticleSize_Medium, null, UnitFromId(1831), "Ref_Center");
            VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(1831)), 4.0), 5.0, true);
        }

        return true;
    }

    auto9BEDE610_g = UnitGroup("ZergBiomassPickup", gv_pLAYER_08_ZERG_BIOMASS, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9BEDE610_u = UnitGroupCount(auto9BEDE610_g, c_unitCountAll);
    for (;; auto9BEDE610_u -= 1) {
        auto9BEDE610_var = UnitGroupUnitFromEnd(auto9BEDE610_g, auto9BEDE610_u);
        if (auto9BEDE610_var == null) { break; }
        if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(auto9BEDE610_var), 13.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
            TriggerEnable(TriggerGetCurrent(), false);
            TriggerQueueEnter();
            TriggerExecute(gt_ObjectiveFindZergBiomassCreate, true, true);
            TriggerQueueExit();
            TriggerExecute(gt_SendTransmissionQueenThanksYouQ2, true, false);
            if ((UnitIsAlive(auto9BEDE610_var) == true)) {
                libSwaC_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(auto9BEDE610_var), 2.0, Color(0.00, 100.00, 0.00));
                UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/549E3918"), null, UnitGetPosition(auto9BEDE610_var));
                libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(libSwaC_ge_CampaginReticleType_ZergBonusObjective, libSwaC_ge_CampaginReticleSize_Medium, null, auto9BEDE610_var, "Ref_Center");
                VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(1831)), 4.0), 5.0, true);
            }

            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveRevealQ_Init () {
    gt_BonusObjectiveRevealQ = TriggerCreate("gt_BonusObjectiveRevealQ_Func");
    TriggerAddEventTimePeriodic(gt_BonusObjectiveRevealQ, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Teach Creep Tumor
//--------------------------------------------------------------------------------------------------
bool gt_TeachCreepTumor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_tUMOR;
    int lv_index;

    // Automatic Variable Declarations
    int auto2E3FAE38_ae;
    const int auto2E3FAE38_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_scourgeNestStarted == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_tUMOR = UnitFromId(54);
    libSwaC_gf_PingMinimapCampaign(PlayerGroupAll(), RegionGetCenter(RegionFromId(13)), 2.0, Color(100.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/DE1E0DC5"), null, RegionGetCenter(RegionFromId(13)));
    libNtve_gf_RescueUnit(UnitFromId(54), gv_pLAYER_01_USER, true);
    if ((libHots_gf_DifficultyValueSwarmBoolean(true, true, false) == true)) {
        CameraPan(gv_pLAYER_01_USER, PointFromId(603), 1.5, -1, 10.0, false);
        UISetButtonHighlighted(PlayerGroupSingle(gv_pLAYER_01_USER), AbilityCommand("QueenBuild", 0), true);
        UISetButtonHighlighted(PlayerGroupSingle(gv_pLAYER_01_USER), AbilityCommand("CreepTumorBuild", 0), true);
        if ((UnitIsSelected(UnitFromId(54), gv_pLAYER_01_USER) == false)) {
            libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(libSwaC_ge_CampaginReticleType_ZergMainObjective, libSwaC_ge_CampaginReticleSize_Small, StringExternal("Param/Value/4F661D1F"), lv_tUMOR, "Ref_Origin");
            gv_helper_L2Tumor = libNtve_gf_ActorLastCreated();
            gv_tag_TumorHasTumors = TextTagLastCreated();
        }

    }

    auto2E3FAE38_ae = gv_scourgeNestMapTotal;
    lv_index = 1;
    for ( ; ( (auto2E3FAE38_ai >= 0 && lv_index <= auto2E3FAE38_ae) || (auto2E3FAE38_ai < 0 && lv_index >= auto2E3FAE38_ae) ) ; lv_index += auto2E3FAE38_ai ) {
        gf_ShowHelperAtNest(lv_index);
    }
    gf_RevealNest(1);
    while (!(((gv_scourgeNestStarted == true) || (UnitIsSelected(lv_tUMOR, gv_pLAYER_01_USER) == true) || (UnitIsAlive(lv_tUMOR) == false)))) {
        Wait(0.25, c_timeGame);
    }
    TextTagDestroy(gv_tag_TumorHasTumors);
    libNtve_gf_KillModel(gv_helper_L2Tumor);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TeachCreepTumor_Init () {
    gt_TeachCreepTumor = TriggerCreate("gt_TeachCreepTumor_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scourge Nest Cycle
//--------------------------------------------------------------------------------------------------
bool gt_ScourgeNestCycle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_nEXT_NEST;
    point lv_nEST_POSITION;

    // Automatic Variable Declarations
    int auto02AEEC73_ae;
    const int auto02AEEC73_ai = 1;
    int auto604005D3_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gorgonBeingSpawned == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto02AEEC73_ae = gv_scourgeNestMapTotal;
    lv_index = 1;
    for ( ; ( (auto02AEEC73_ai >= 0 && lv_index <= auto02AEEC73_ae) || (auto02AEEC73_ai < 0 && lv_index >= auto02AEEC73_ae) ) ; lv_index += auto02AEEC73_ai ) {
        if ((gv_scourgeNestActivated[lv_index] == false) && (UnitIsAlive(gv_scourgeNestUnit[lv_index]) == true)) {
            if ((UnitGroupCount(UnitGroup("CreepTumorBurrowed", gv_pLAYER_01_USER, RegionCircle(gv_scourgeNest_Point[lv_index], gv_c_ScourgeActivationRange), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
                gv_scourgeNestActivated[lv_index] = true;
                gv_scourgeNestsActivatedCount += 1;
                TriggerExecute(gt_ObjectiveActivateScourgeNestUpdate, true, false);
                PingDestroy(gv_scourgeNestPing[lv_index]);
                if ((gv_scourgeNestsActivatedCount == 1)) {
                    gv_gorgonAttacker = lv_index;
                    gv_midCinematicScourgeNest = gv_scourgeNestUnit[lv_index];
                    lv_nEST_POSITION = UnitGetPosition(gv_scourgeNestUnit[lv_index]);
                    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/A86D9394"), null, lv_nEST_POSITION);
                    TriggerExecute(gt_TransmissionFirstScourgeNestQ, true, true);
                    TriggerExecute(gt_MidQ, true, true);
                    gv_gorgonAttacker = 0;
                }
                else {
                    UnitSetOwner(gv_scourgeNestUnit[lv_index], gv_pLAYER_06_ACTIVE_NEST, false);
                    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/38DBE651"), null, UnitGetPosition(gv_scourgeNestUnit[lv_index]));
                    libSwaC_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_scourgeNestUnit[lv_index]), 2.0, Color(100.00, 100.00, 0.00));
                    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_scourgeNestUnit[lv_index]), c_animNameDefault, "Stand Unpowered Morph", c_animFlagNonLooping, c_animTimeDefault);
                    Wait(2.5, c_timeGame);
                    gf_ScourgeNestAttack(lv_index);
                    gv_gorgonDestructionInProgress = false;
                    while (!((gv_gorgonDestructionInProgress == true))) {
                        Wait(0.5, c_timeGame);
                    }
                }
                auto604005D3_val = lv_index;
                if (auto604005D3_val == 1) {
                    lv_nEXT_NEST = 2;
                    gf_RevealNest(lv_nEXT_NEST);
                }
                else if (auto604005D3_val == 2) {
                    lv_nEXT_NEST = 3;
                    gf_RevealNest(lv_nEXT_NEST);
                }
                else if (auto604005D3_val == 3) {
                    lv_nEXT_NEST = 4;
                    gf_RevealNest(lv_nEXT_NEST);
                }
                else if (auto604005D3_val == 4) {
                    lv_nEXT_NEST = 5;
                    gf_RevealNest(lv_nEXT_NEST);
                    lv_nEXT_NEST = 6;
                    gf_RevealNest(lv_nEXT_NEST);
                }
                else if (auto604005D3_val == 5) {
                    lv_nEXT_NEST = 7;
                    gf_RevealNest(lv_nEXT_NEST);
                }
                else if (auto604005D3_val == 6) {
                    lv_nEXT_NEST = 7;
                    gf_RevealNest(lv_nEXT_NEST);
                }
                else if (auto604005D3_val == 7) {
                }
                else {
                }
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScourgeNestCycle_Init () {
    gt_ScourgeNestCycle = TriggerCreate("gt_ScourgeNestCycle_Func");
    TriggerAddEventTimePeriodic(gt_ScourgeNestCycle, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scourge Nest - Visual Update
//--------------------------------------------------------------------------------------------------
bool gt_ScourgeNestVisualUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoC849DC1D_ae;
    int autoC849DC1D_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoC849DC1D_ae = gv_scourgeNestMapTotal;
    autoC849DC1D_var = 1;
    for ( ; autoC849DC1D_var <= autoC849DC1D_ae; autoC849DC1D_var += 1 ) {
        if ((UnitIsAlive(gv_scourgeNestUnit[autoC849DC1D_var]) == true)) {
            if ((UnitGroupCount(UnitGroup("CreepTumorBurrowed", gv_pLAYER_01_USER, RegionCircle(gv_scourgeNest_Point[autoC849DC1D_var], gv_c_ScourgeActivationRange), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("CreepTumor", gv_pLAYER_01_USER, RegionCircle(gv_scourgeNest_Point[autoC849DC1D_var], gv_c_ScourgeActivationRange), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("CreepTumorUsed", gv_pLAYER_01_USER, RegionCircle(gv_scourgeNest_Point[autoC849DC1D_var], gv_c_ScourgeActivationRange), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                gf_ShowHelperAtNest(autoC849DC1D_var);
            }
            else {
                gf_HideHelperAtNest(autoC849DC1D_var);
            }
        }
        else {
            if ((gv_scourgeNestPing[autoC849DC1D_var] != c_invalidPingId)) {
                gf_FinishNest(autoC849DC1D_var);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScourgeNestVisualUpdate_Init () {
    gt_ScourgeNestVisualUpdate = TriggerCreate("gt_ScourgeNestVisualUpdate_Func");
    TriggerEnable(gt_ScourgeNestVisualUpdate, false);
    TriggerAddEventTimePeriodic(gt_ScourgeNestVisualUpdate, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scourge Nest - Tumor Death
//--------------------------------------------------------------------------------------------------
bool gt_ScourgeNestTumorDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoC2102447_ae;
    int autoC2102447_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "CreepTumor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoC2102447_ae = gv_scourgeNestMapTotal;
    autoC2102447_var = 1;
    for ( ; autoC2102447_var <= autoC2102447_ae; autoC2102447_var += 1 ) {
        if ((UnitIsAlive(gv_scourgeNestUnit[autoC2102447_var]) == true) && (libNtve_gf_UnitGroupIsDead(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("CreepTumor", "CreepTumorBurrowed", "CreepTumorUsed", gv_pLAYER_01_USER, -1, RegionCircle(gv_scourgeNest_Point[autoC2102447_var], gv_c_ScourgeActivationRange), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)) == false)) {
            gf_ShowHelperAtNest(autoC2102447_var);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScourgeNestTumorDeath_Init () {
    gt_ScourgeNestTumorDeath = TriggerCreate("gt_ScourgeNestTumorDeath_Func");
    TriggerAddEventUnitDied(gt_ScourgeNestTumorDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scourge Nest - Contruction Started
//--------------------------------------------------------------------------------------------------
bool gt_ScourgeNestContructionStarted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    unit lv_creepTumor;

    // Automatic Variable Declarations
    int autoB066BE1B_ae;
    const int autoB066BE1B_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "CreepTumor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_creepTumor = EventUnitProgressUnit();
    gv_scourgeNestStarted = true;
    libNtve_gf_ChangeUnitDamage(lv_creepTumor, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Mega);
    UISetButtonHighlighted(PlayerGroupSingle(gv_pLAYER_01_USER), AbilityCommand("CreepTumorBuild", 0), false);
    UISetButtonHighlighted(PlayerGroupSingle(gv_pLAYER_01_USER), AbilityCommand("QueenBuild", 0), false);
    TriggerEnable(gt_ScourgeNestVisualUpdate, true);
    autoB066BE1B_ae = gv_scourgeNestMapTotal;
    lv_index = 1;
    for ( ; ( (autoB066BE1B_ai >= 0 && lv_index <= autoB066BE1B_ae) || (autoB066BE1B_ai < 0 && lv_index >= autoB066BE1B_ae) ) ; lv_index += autoB066BE1B_ai ) {
        if ((UnitIsAlive(gv_scourgeNestUnit[lv_index]) == true) && (gv_scourgeNestActivated[lv_index] == false) && (DistanceBetweenPoints(UnitGetPosition(lv_creepTumor), gv_scourgeNest_Point[lv_index]) <= gv_c_ScourgeActivationRange)) {
            Wait(3.0, c_timeGame);
            if ((UnitIsAlive(gv_scourgeNestUnit[lv_index]) == true) && (gv_scourgeNestActivated[lv_index] == false)) {
                gf_HideHelperAtNest(lv_index);
                UnitCreateEffectUnit(lv_creepTumor, "ScourgeNestAcquire", gv_scourgeNestUnit[lv_index]);
            }

            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScourgeNestContructionStarted_Init () {
    gt_ScourgeNestContructionStarted = TriggerCreate("gt_ScourgeNestContructionStarted_Func");
    TriggerAddEventUnitConstructProgress(gt_ScourgeNestContructionStarted, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scourge Nest - Contruction Completed
//--------------------------------------------------------------------------------------------------
bool gt_ScourgeNestContructionCompleted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "CreepTumor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ChangeUnitDamage(EventUnitProgressUnit(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScourgeNestContructionCompleted_Init () {
    gt_ScourgeNestContructionCompleted = TriggerCreate("gt_ScourgeNestContructionCompleted_Func");
    TriggerAddEventUnitConstructProgress(gt_ScourgeNestContructionCompleted, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Creep Tumor Target Cursor Enter
//--------------------------------------------------------------------------------------------------
bool gt_CreepTumorTargetCursorEnter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int autoD21E6D69_ae;
    const int autoD21E6D69_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoD21E6D69_ae = gv_scourgeNestMapTotal;
    lv_index = 1;
    for ( ; ( (autoD21E6D69_ai >= 0 && lv_index <= autoD21E6D69_ae) || (autoD21E6D69_ai < 0 && lv_index >= autoD21E6D69_ae) ) ; lv_index += autoD21E6D69_ai ) {
        if ((UnitIsAlive(gv_scourgeNestUnit[lv_index]) == true) && (gv_scourgeNestActivated[lv_index] == false)) {
            libNtve_gf_SendActorMessageToUnit(gv_scourgeNestUnit[lv_index], "Signal BuildOn");
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreepTumorTargetCursorEnter_Init () {
    gt_CreepTumorTargetCursorEnter = TriggerCreate("gt_CreepTumorTargetCursorEnter_Func");
    TriggerAddEventTargetModeUpdate(gt_CreepTumorTargetCursorEnter, gv_pLAYER_01_USER, AbilityCommand("CreepTumorBuild", 0), c_targetModeStateOn);
    TriggerAddEventTargetModeUpdate(gt_CreepTumorTargetCursorEnter, gv_pLAYER_01_USER, AbilityCommand("QueenBuild", 0), c_targetModeStateOn);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Creep Tumor Target Cursor Leave
//--------------------------------------------------------------------------------------------------
bool gt_CreepTumorTargetCursorLeave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto8010577B_ae;
    const int auto8010577B_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto8010577B_ae = gv_scourgeNestMapTotal;
    lv_index = 1;
    for ( ; ( (auto8010577B_ai >= 0 && lv_index <= auto8010577B_ae) || (auto8010577B_ai < 0 && lv_index >= auto8010577B_ae) ) ; lv_index += auto8010577B_ai ) {
        if ((UnitIsAlive(gv_scourgeNestUnit[lv_index]) == true)) {
            libNtve_gf_SendActorMessageToUnit(gv_scourgeNestUnit[lv_index], "Signal BuildOff");
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreepTumorTargetCursorLeave_Init () {
    gt_CreepTumorTargetCursorLeave = TriggerCreate("gt_CreepTumorTargetCursorLeave_Func");
    TriggerAddEventTargetModeUpdate(gt_CreepTumorTargetCursorLeave, gv_pLAYER_01_USER, AbilityCommand("CreepTumorBuild", 0), c_targetModeStateOff);
    TriggerAddEventTargetModeUpdate(gt_CreepTumorTargetCursorLeave, gv_pLAYER_01_USER, AbilityCommand("QueenBuild", 0), c_targetModeStateOff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gorgon Close to Base
//--------------------------------------------------------------------------------------------------
bool gt_GorgonClosetoBase_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_tHE_ONE_GORGON) == true))) {
            return false;
        }

        if (!((DistanceBetweenPoints(PointFromId(13), UnitGetPosition(gv_tHE_ONE_GORGON)) <= 60.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionGorgonCloseQ, true, false);
    Wait(90.0, c_timeReal);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GorgonClosetoBase_Init () {
    gt_GorgonClosetoBase = TriggerCreate("gt_GorgonClosetoBase_Func");
    TriggerAddEventTimePeriodic(gt_GorgonClosetoBase, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gorgon Proximity WARNING
//--------------------------------------------------------------------------------------------------
bool gt_GorgonProximityWARNING_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_tHE_ONE_GORGON != null))) {
            return false;
        }

        if (!((UnitIsAlive(gv_tHE_ONE_GORGON) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_tHE_ONE_GORGON), 14.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlay(SoundLink("UI_ZergWarning", -1), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(gv_tHE_ONE_GORGON), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 6.0, 270.0);
    gv_gorgonWarningPing = PingLastCreated();
    PingSetUnit(PingLastCreated(), gv_tHE_ONE_GORGON);
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/63105B12"), null, gv_tHE_ONE_GORGON);
    TriggerExecute(gt_GorgonProximityWarningQ, true, false);
    Wait(15.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GorgonProximityWARNING_Init () {
    gt_GorgonProximityWARNING = TriggerCreate("gt_GorgonProximityWARNING_Func");
    TriggerAddEventTimePeriodic(gt_GorgonProximityWARNING, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gorgon Proximity Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_GorgonProximityWarningQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char02|Line00193", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GorgonProximityWarningQ_Init () {
    gt_GorgonProximityWarningQ = TriggerCreate("gt_GorgonProximityWarningQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Gorgon Close Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionGorgonCloseQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_random;

    // Automatic Variable Declarations
    int autoE8FBCA8D_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(gv_tHE_ONE_GORGON) == true)) {
        TriggerQueueEnter();
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
        UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/356319FD"), null, gv_tHE_ONE_GORGON);
        if ((gv_gorgonsDestroyed != 0)) {
            if ((libNtve_gf_UnitInRegion(gv_tHE_ONE_GORGON, RegionFromId(26)) == true)) {
                libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Char02|Line00149", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
                gv_transmission_ProximityWarning = TransmissionLastSent();
                TransmissionWait(TransmissionLastSent(), 0.0);
            }
            else {
                libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Char02|Line00049", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
                gv_transmission_ProximityWarning = TransmissionLastSent();
                TransmissionWait(TransmissionLastSent(), 0.0);
            }
        }
        else {
            lv_random = RandomInt(1, 2);
            autoE8FBCA8D_val = lv_random;
            if (autoE8FBCA8D_val == 1) {
                libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char02|Line00048", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
                gv_transmission_ProximityWarning = TransmissionLastSent();
                TransmissionWait(TransmissionLastSent(), 0.0);
            }
            else if (autoE8FBCA8D_val == 2) {
                libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char02|Line00047", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
                gv_transmission_ProximityWarning = TransmissionLastSent();
                TransmissionWait(TransmissionLastSent(), 0.0);
            }
            else {
            }
        }
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionGorgonCloseQ_Init () {
    gt_TransmissionGorgonCloseQ = TriggerCreate("gt_TransmissionGorgonCloseQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gorgon Launch Schedule
//--------------------------------------------------------------------------------------------------
bool gt_GorgonLaunchSchedule_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        while (((UnitIsAlive(gv_tHE_ONE_GORGON) == true) || ((GameGetMissionTime() < (300 + gv_launchTimeIncrement)) && (gf_ScourgeNestAvailableToShoot() == 0)))) {
            Wait(1.0, c_timeAI);
        }
        while (!((UnitIsAlive(gv_tHE_ONE_GORGON) == false))) {
            Wait(1.0, c_timeAI);
        }
        Wait(6.0, c_timeAI);
        TriggerExecute(gt_GorgonLaunchPlay, true, false);
        while (!((UnitIsAlive(gv_tHE_ONE_GORGON) == true))) {
            Wait(1.0, c_timeGame);
        }
        gv_launchTimeIncrement += 300;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GorgonLaunchSchedule_Init () {
    gt_GorgonLaunchSchedule = TriggerCreate("gt_GorgonLaunchSchedule_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gorgon Launch - Play
//--------------------------------------------------------------------------------------------------
bool gt_GorgonLaunchPlay_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_gorgonsDestroyed <= gv_gorgonsDestroyedQuota))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((gv_gorgonBeingSpawned == false))) {
        Wait(0.5, c_timeGame);
    }
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", PointFromId(222), ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    gv_gorgonPing = PingLastCreated();
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/61C12B20"));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/5CF6C5B6"), null, PointFromId(222));
    TriggerExecute(gt_TransmissionGorgonCreatedQ, true, false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(3), 10.0, false);
    CutsceneGoToBookmark(gv_scene_GorgonLaunch, "Char02CruiserLaunch_Start");
    CutscenePlay(gv_scene_GorgonLaunch);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GorgonLaunchPlay_Init () {
    gt_GorgonLaunchPlay = TriggerCreate("gt_GorgonLaunchPlay_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gorgon First Cruiser01
//--------------------------------------------------------------------------------------------------
bool gt_GorgonFirstCruiser01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((EventCutsceneId() == gv_scene_GorgonLaunch))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    CutscenePause(gv_scene_GorgonLaunch);
    CutsceneSetTime(gv_scene_GorgonLaunch, 0);
    UnitCreate(1, "GehennaCruiser", 0, gv_pLAYER_04_GORGON, PointFromId(222), -133.9159);
    gv_tHE_ONE_GORGON = UnitLastCreated();
    libNtve_gf_SendActorMessageToUnit(gv_tHE_ONE_GORGON, "AnimCopy ::external.GorgonFinderTag");
    Wait(1.0, c_timeAI);
    UnitSetPropertyFixed(gv_tHE_ONE_GORGON, c_unitPropMovementSpeed, gv_gorgonSpeed);
    UnitIssueOrder(gv_tHE_ONE_GORGON, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(13)), c_orderQueueReplace);
    UnitSetState(gv_tHE_ONE_GORGON, c_unitStateTargetable, false);
    libNtve_gf_MakeUnitInvulnerable(gv_tHE_ONE_GORGON, true);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/E15ED9D8"), null, PointFromId(222));
    PingSetUnit(gv_gorgonPing, UnitLastCreated());
    gv_clear2FireCheckCount -= 1;
    TriggerEnable(gt_GorgonFirstCruiser02, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GorgonFirstCruiser01_Init () {
    gt_GorgonFirstCruiser01 = TriggerCreate("gt_GorgonFirstCruiser01_Func");
    TriggerAddEventCutsceneBookmarkFired(gt_GorgonFirstCruiser01, c_cutsceneNone, "Char02CruiserLaunch_End");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gorgon First Cruiser02
//--------------------------------------------------------------------------------------------------
bool gt_GorgonFirstCruiser02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_gorgonBeingSpawned == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gorgonBeingSpawned = true;
    CutscenePause(gv_scene_GorgonLaunch);
    CutsceneSetTime(gv_scene_GorgonLaunch, 0);
    UnitCreate(1, "GehennaCruiser", 0, gv_pLAYER_04_GORGON, PointFromId(222), -133.9159);
    gv_tHE_ONE_GORGON = UnitLastCreated();
    libNtve_gf_SendActorMessageToUnit(gv_tHE_ONE_GORGON, "AnimCopy ::external.GorgonFinderTag");
    Wait(1.0, c_timeGame);
    UnitSetPropertyFixed(gv_tHE_ONE_GORGON, c_unitPropMovementSpeed, gv_gorgonSpeed);
    UnitIssueOrder(gv_tHE_ONE_GORGON, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(13)), c_orderQueueReplace);
    UnitSetState(gv_tHE_ONE_GORGON, c_unitStateTargetable, false);
    libNtve_gf_MakeUnitInvulnerable(gv_tHE_ONE_GORGON, true);
    PingSetUnit(gv_gorgonPing, UnitLastCreated());
    gv_clear2FireCheckCount -= 1;
    libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/C7174FFF"));
    Wait(10.0, c_timeAI);
    gv_gorgonBeingSpawned = false;
    TimerStart(gv_gorgonDestroyedQuicklyTimer, 50.0, false, c_timeAI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GorgonFirstCruiser02_Init () {
    gt_GorgonFirstCruiser02 = TriggerCreate("gt_GorgonFirstCruiser02_Func");
    TriggerEnable(gt_GorgonFirstCruiser02, false);
    TriggerAddEventCutsceneBookmarkFired(gt_GorgonFirstCruiser02, c_cutsceneNone, "Char02CruiserLaunch_End");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Gorgon Created Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionGorgonCreatedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoE1570948_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    autoE1570948_val = gv_gorgonsDestroyed;
    if (autoE1570948_val == 0) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char02|Line00001", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Char02|Line00055", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char02|Line00058", c_transmissionDurationAdd, 0.5, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        if ((gv_scourgeNestActivated[1] == false) && (UnitGroupCount(UnitGroup("CreepTumorBurrowed", gv_pLAYER_01_USER, RegionCircle(gv_scourgeNest_Point[1], gv_c_ScourgeActivationRange), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("CreepTumor", gv_pLAYER_01_USER, RegionCircle(gv_scourgeNest_Point[1], gv_c_ScourgeActivationRange), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("CreepTumorUsed", gv_pLAYER_01_USER, RegionCircle(gv_scourgeNest_Point[1], gv_c_ScourgeActivationRange), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0)) {
            if ((gv_scourgeNestStarted == true) && (TriggerIsEnabled(gt_TeachCreepTumor) == true)) {
                libSwaC_gf_PingMinimapCampaign(PlayerGroupAll(), RegionGetCenter(RegionFromId(13)), 2.0, Color(100.00, 100.00, 0.00));
                UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/ABAD7A82"), null, RegionGetCenter(RegionFromId(13)));
            }

            libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Char02|Line00002", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            Wait(1.0, c_timeGame);
            TriggerExecute(gt_TeachCreepTumor, true, false);
            TransmissionWait(TransmissionLastSent(), 0.0);
        }

        if ((gv_scourgeNestActivated[1] == false) && (UnitGroupCount(UnitGroup("CreepTumorBurrowed", gv_pLAYER_01_USER, RegionCircle(gv_scourgeNest_Point[1], gv_c_ScourgeActivationRange), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("CreepTumor", gv_pLAYER_01_USER, RegionCircle(gv_scourgeNest_Point[1], gv_c_ScourgeActivationRange), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("CreepTumorUsed", gv_pLAYER_01_USER, RegionCircle(gv_scourgeNest_Point[1], gv_c_ScourgeActivationRange), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0)) {
            libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char02|Line00003", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            gv_transmissionInterrutable = TransmissionLastSent();
            TransmissionWait(TransmissionLastSent(), 0.0);
        }

        if ((gv_scourgeNestActivated[1] == false) && (UnitGroupCount(UnitGroup("CreepTumorBurrowed", gv_pLAYER_01_USER, RegionCircle(gv_scourgeNest_Point[1], gv_c_ScourgeActivationRange), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("CreepTumor", gv_pLAYER_01_USER, RegionCircle(gv_scourgeNest_Point[1], gv_c_ScourgeActivationRange), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("CreepTumorUsed", gv_pLAYER_01_USER, RegionCircle(gv_scourgeNest_Point[1], gv_c_ScourgeActivationRange), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0) && (gv_scourgeNestStarted == true) && (TriggerIsEnabled(gt_TeachCreepTumor) == true)) {
            gf_RevealNest(1);
        }

        TriggerExecute(gt_ObjectiveActivateScourgeNestCreate, true, true);
    }
    else if (autoE1570948_val == 1) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char02|Line00017", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoE1570948_val == 2) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char02|Line00018", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoE1570948_val == 3) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char02|Line00016", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoE1570948_val == 4) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char02|Line00020", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char02|Line00045", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoE1570948_val == 5) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char02|Line00017", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoE1570948_val == 6) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char02|Line00042", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Char02|Line00190", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionGorgonCreatedQ_Init () {
    gt_TransmissionGorgonCreatedQ = TriggerCreate("gt_TransmissionGorgonCreatedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gorgon AI Started
//--------------------------------------------------------------------------------------------------
bool gt_GorgonAIStarted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_GorgonAI, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GorgonAIStarted_Init () {
    gt_GorgonAIStarted = TriggerCreate("gt_GorgonAIStarted_Func");
    TriggerAddEventUnitRangePoint(gt_GorgonAIStarted, UnitRefFromVariable("gv_tHE_ONE_GORGON"), PointFromId(13), 1.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gorgon AI End
//--------------------------------------------------------------------------------------------------
bool gt_GorgonAIEnd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_GorgonAI, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GorgonAIEnd_Init () {
    gt_GorgonAIEnd = TriggerCreate("gt_GorgonAIEnd_Func");
    TriggerAddEventUnitDied(gt_GorgonAIEnd, UnitRefFromVariable("gv_tHE_ONE_GORGON"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gorgon AI
//--------------------------------------------------------------------------------------------------
bool gt_GorgonAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_playerBuildings;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_playerBuildings = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(gv_tHE_ONE_GORGON) == true)) {
        if ((UnitIsAlive(gv_gorgonTarget) == true)) {
            UnitIssueOrder(gv_tHE_ONE_GORGON, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_gorgonTarget)), c_orderQueueReplace);
            return true;
        }

    }
    else {
        gv_gorgonTarget = null;
        return true;
    }
    lv_playerBuildings = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(26), UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv_gorgonTarget = UnitGroupRandomUnit(lv_playerBuildings, c_unitCountAlive);
    if ((gv_gorgonTarget != null)) {
        UnitIssueOrder(gv_tHE_ONE_GORGON, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_gorgonTarget)), c_orderQueueReplace);
    }
    else {
        lv_playerBuildings = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        gv_gorgonTarget = UnitGroupClosestToPoint(lv_playerBuildings, UnitGetPosition(gv_tHE_ONE_GORGON));
        if ((gv_gorgonTarget != null)) {
            UnitIssueOrder(gv_tHE_ONE_GORGON, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_gorgonTarget)), c_orderQueueReplace);
        }
        else {
            AISetUnitScriptControlled(gv_tHE_ONE_GORGON, false);
            AISetUnitSuicide(gv_tHE_ONE_GORGON, true);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GorgonAI_Init () {
    gt_GorgonAI = TriggerCreate("gt_GorgonAI_Func");
    TriggerEnable(gt_GorgonAI, false);
    TriggerAddEventTimePeriodic(gt_GorgonAI, 2.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gorgon Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_GorgonDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_gorgonPing != c_invalidPingId)) {
        PingDestroy(gv_gorgonPing);
        gv_gorgonPing = c_invalidPingId;
    }

    if ((gv_gorgonWarningPing != c_invalidPingId)) {
        PingDestroy(gv_gorgonWarningPing);
        gv_gorgonWarningPing = c_invalidPingId;
    }

    gv_gorgonAttacker = 0;
    CameraShakeStart(gv_pLAYER_01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.75, 1.5, 100.0, 2.5);
    SoundPlay(SoundLink("Terran_ExplosionLarge", -1), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", UnitGetPosition(EventUnit()), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 2.0, 270.0);
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/01238865"), null, EventUnit());
    Wait(2.0, c_timeGame);
    gv_gorgonsDestroyed += 1;
    TriggerExecute(gt_GorgonDestroyedforAchievement, true, false);
    TriggerExecute(gt_ObjectiveDestroyGorgonsUpdate, true, false);
    Wait(3.0, c_timeGame);
    TriggerExecute(gt_TransmissionGorgonDestroyedQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GorgonDestroyed_Init () {
    gt_GorgonDestroyed = TriggerCreate("gt_GorgonDestroyed_Func");
    TriggerAddEventUnitDied(gt_GorgonDestroyed, UnitRefFromVariable("gv_tHE_ONE_GORGON"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Gorgon Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionGorgonDestroyedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoC67DC863_val;

    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    autoC67DC863_val = gv_scourgeNestsActivatedCount;
    if (autoC67DC863_val == 2) {
        libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Char02|Line00021", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoC67DC863_val == 3) {
        if ((TimerGetRemaining(gv_gorgonDestroyedQuicklyTimer) != 0.0)) {
            TimerPause(gv_gorgonDestroyedQuicklyTimer, true);
            libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Char02|Line00064", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else {
            libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Char02|Line00024", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
    }
    else if (autoC67DC863_val == 4) {
        libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Char02|Line00022", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char02|Line00023", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoC67DC863_val == 5) {
        if ((TimerGetRemaining(gv_gorgonDestroyedQuicklyTimer) != 0.0)) {
            TimerPause(gv_gorgonDestroyedQuicklyTimer, true);
            libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Char02|Line00065", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else {
            libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char02|Line00028", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
    }
    else if (autoC67DC863_val == 6) {
        libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Char02|Line00024", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    gv_gorgonDestructionInProgress = true;
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionGorgonDestroyedQ_Init () {
    gt_TransmissionGorgonDestroyedQ = TriggerCreate("gt_TransmissionGorgonDestroyedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Firebat Attacks
//--------------------------------------------------------------------------------------------------
bool gt_StartFirebatAttacks_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(51), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(49)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(50), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(37)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(299), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(300)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(734), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(95)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(427), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(428)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(742), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(195)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(741), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(196)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(743), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(197)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(292), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(157)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(168), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(128)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(245), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(157)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(53), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(250)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(353), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(423)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartFirebatAttacks_Init () {
    gt_StartFirebatAttacks = TriggerCreate("gt_StartFirebatAttacks_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Rescue - Top
//--------------------------------------------------------------------------------------------------
bool gt_ZergRescueTop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoBF8F5C2B_n;
    int autoBF8F5C2B_i;
    int auto7D480D0E_n;
    int auto7D480D0E_i;

    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(11), 0.0, true);
    while (!((UnitIsAlive(UnitFromId(168)) == false) && (UnitIsAlive(UnitFromId(245)) == false) && (UnitIsAlive(UnitFromId(292)) == false))) {
        Wait(1.0, c_timeGame);
    }
    autoBF8F5C2B_n = libHots_gf_DifficultyValueInt2(5, 5, 4);
    for (autoBF8F5C2B_i = 1; autoBF8F5C2B_i <= autoBF8F5C2B_n; autoBF8F5C2B_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_01_USER, PointFromId(710));
        libNtve_gf_RescueUnit(UnitLastCreated(), gv_pLAYER_01_USER, true);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, RandomFixed(65.0, 75.0));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(11))), c_orderQueueReplace);
    }
    auto7D480D0E_n = libHots_gf_DifficultyValueInt2(4, 4, 2);
    for (auto7D480D0E_i = 1; auto7D480D0E_i <= auto7D480D0E_n; auto7D480D0E_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Baneling", 0, gv_pLAYER_01_USER, PointFromId(751));
        libNtve_gf_RescueUnit(UnitLastCreated(), gv_pLAYER_01_USER, true);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, RandomFixed(65.0, 75.0));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(11))), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergRescueTop_Init () {
    gt_ZergRescueTop = TriggerCreate("gt_ZergRescueTop_Func");
    TriggerAddEventTimePeriodic(gt_ZergRescueTop, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Rescue - Center
//--------------------------------------------------------------------------------------------------
bool gt_ZergRescueCenter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoEE80EECA_n;
    int autoEE80EECA_i;
    int autoC7F5A4DC_n;
    int autoC7F5A4DC_i;

    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(1), 8.0, true);
    UnitIssueOrder(UnitFromId(392), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(166)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(392), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    while (!((UnitIsAlive(UnitFromId(53)) == false) && (UnitIsAlive(UnitFromId(353)) == false))) {
        Wait(1.0, c_timeGame);
    }
    autoEE80EECA_n = libHots_gf_DifficultyValueInt2(5, 5, 4);
    for (autoEE80EECA_i = 1; autoEE80EECA_i <= autoEE80EECA_n; autoEE80EECA_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_01_USER, PointFromId(1890));
        libNtve_gf_RescueUnit(UnitLastCreated(), gv_pLAYER_01_USER, true);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(310)), c_orderQueueReplace);
        Wait(0.25, c_timeGame);
    }
    autoC7F5A4DC_n = libHots_gf_DifficultyValueInt2(4, 4, 2);
    for (autoC7F5A4DC_i = 1; autoC7F5A4DC_i <= autoC7F5A4DC_n; autoC7F5A4DC_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Baneling", 0, gv_pLAYER_01_USER, PointFromId(1891));
        libNtve_gf_RescueUnit(UnitLastCreated(), gv_pLAYER_01_USER, true);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(310)), c_orderQueueReplace);
        Wait(0.25, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergRescueCenter_Init () {
    gt_ZergRescueCenter = TriggerCreate("gt_ZergRescueCenter_Func");
    TriggerAddEventTimePeriodic(gt_ZergRescueCenter, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Rescue - Bottom
//--------------------------------------------------------------------------------------------------
bool gt_ZergRescueBottom_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(32), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((UnitIsAlive(UnitFromId(50)) == false) && (UnitIsAlive(UnitFromId(51)) == false))) {
        Wait(1.0, c_timeGame);
    }
    libNtve_gf_CreateUnitsAtPoint2(libHots_gf_DifficultyValueInt2(3, 3, 2), "ZerglingBurrowed", 0, gv_pLAYER_01_USER, PointFromId(769));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
    libNtve_gf_RescueUnit(UnitLastCreated(), gv_pLAYER_01_USER, true);
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(libHots_gf_DifficultyValueInt2(3, 3, 2), "ZerglingBurrowed", 0, gv_pLAYER_01_USER, PointFromId(770));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
    libNtve_gf_RescueUnit(UnitLastCreated(), gv_pLAYER_01_USER, true);
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(libHots_gf_DifficultyValueInt2(2, 2, 1), "BanelingBurrowed", 0, gv_pLAYER_01_USER, PointFromId(769));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("BurrowBanelingUp", 0)), c_orderQueueReplace);
    libNtve_gf_RescueUnit(UnitLastCreated(), gv_pLAYER_01_USER, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergRescueBottom_Init () {
    gt_ZergRescueBottom = TriggerCreate("gt_ZergRescueBottom_Func");
    TriggerAddEventTimePeriodic(gt_ZergRescueBottom, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Queen Rescue 01
//--------------------------------------------------------------------------------------------------
bool gt_QueenRescue01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(299)) == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(734)) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsAtPoint2(1, "QueenBurrowed", 0, gv_pLAYER_01_USER, PointFromId(612));
    gv_rescuedQueen = UnitLastCreated();
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 73.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergy, libHots_gf_DifficultyValueFixed2(55.0, 55.0, 30.0));
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowQueenUp", 0)), c_orderQueueReplace);
    libNtve_gf_RescueUnit(UnitLastCreated(), gv_pLAYER_01_USER, true);
    TriggerExecute(gt_SendTransmissionQueenThanksYouQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QueenRescue01_Init () {
    gt_QueenRescue01 = TriggerCreate("gt_QueenRescue01_Func");
    TriggerAddEventUnitDied(gt_QueenRescue01, UnitRefFromUnit(UnitFromId(299)));
    TriggerAddEventUnitDied(gt_QueenRescue01, UnitRefFromUnit(UnitFromId(734)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Queen Rescue 02
//--------------------------------------------------------------------------------------------------
bool gt_QueenRescue02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsAtPoint2(1, "QueenBurrowed", 0, gv_pLAYER_01_USER, PointFromId(430));
    gv_rescuedQueen = UnitLastCreated();
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 85.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergy, libHots_gf_DifficultyValueFixed2(45.0, 45.0, 20.0));
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowQueenUp", 0)), c_orderQueueReplace);
    if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
        libNtve_gf_RescueUnit(UnitLastCreated(), gv_pLAYER_01_USER, true);
        libNtve_gf_MakeUnitUncommandable(UnitLastCreated(), true);
        CreepModify(PointFromId(1274), 1.0, true, true);
        Wait(1.5, c_timeGame);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("QueenBuild", 0), PointFromId(1274)), c_orderQueueAddToEnd);
        Wait(3.0, c_timeGame);
        libNtve_gf_MakeUnitUncommandable(UnitLastCreated(), false);
    }
    else {
        libNtve_gf_RescueUnit(UnitLastCreated(), gv_pLAYER_01_USER, true);
    }
    TriggerExecute(gt_SendTransmissionQueenThanksYouQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QueenRescue02_Init () {
    gt_QueenRescue02 = TriggerCreate("gt_QueenRescue02_Func");
    TriggerAddEventUnitDied(gt_QueenRescue02, UnitRefFromUnit(UnitFromId(427)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Queen Thanks You Q
//--------------------------------------------------------------------------------------------------
bool gt_SendTransmissionQueenThanksYouQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    if ((UnitIsAlive(gv_rescuedQueen) == true)) {
        libSwaC_gf_SendTransmissionCampaign(gv_rescuedQueen, "zMission_Char02|Line00025", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        if ((UnitIsAlive(gv_kerrigan) == true) && (UnitIsAlive(gv_rescuedQueen) == true)) {
            libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Char02|Line00026", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            if ((UnitIsAlive(gv_rescuedQueen) == true)) {
                libSwaC_gf_SendTransmissionCampaign(gv_rescuedQueen, "zMission_Char02|Line00027", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }

        }

    }

    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SendTransmissionQueenThanksYouQ_Init () {
    gt_SendTransmissionQueenThanksYouQ = TriggerCreate("gt_SendTransmissionQueenThanksYouQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Firebat Attacked
//--------------------------------------------------------------------------------------------------
bool gt_FirebatAttacked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoD430C434_g;
    int autoD430C434_u;
    unit autoD430C434_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_firebats, EventUnit()) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoD430C434_g = UnitGroupFilterRegion(gv_firebats, RegionCircle(UnitGetPosition(EventUnit()), 5.0), 0);
    autoD430C434_u = UnitGroupCount(autoD430C434_g, c_unitCountAll);
    for (;; autoD430C434_u -= 1) {
        autoD430C434_var = UnitGroupUnitFromEnd(autoD430C434_g, autoD430C434_u);
        if (autoD430C434_var == null) { break; }
        UnitIssueOrder(autoD430C434_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitGroupRemove(gv_firebats, autoD430C434_var);
        AISetUnitScriptControlled(autoD430C434_var, false);
        AISetUnitSuicide(autoD430C434_var, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirebatAttacked_Init () {
    gt_FirebatAttacked = TriggerCreate("gt_FirebatAttacked_Func");
    TriggerAddEventUnitAttacked(gt_FirebatAttacked, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Siege Tank Enters Siege Mode
//--------------------------------------------------------------------------------------------------
bool gt_SiegeTankEntersSiegeMode_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(253), Order(AbilityCommand("SiegeMode", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SiegeTankEntersSiegeMode_Init () {
    gt_SiegeTankEntersSiegeMode = TriggerCreate("gt_SiegeTankEntersSiegeMode_Func");
    TriggerAddEventUnitAcquiredTarget(gt_SiegeTankEntersSiegeMode, UnitRefFromUnit(UnitFromId(253)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Center Drop Pods
//--------------------------------------------------------------------------------------------------
bool gt_CenterDropPods_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_lOOP;
    unitgroup[5] lv_dropGroup;
    point lv_pOINT;

    // Automatic Variable Declarations
    const int autoB1FEC3C2_n = 3;
    int autoB1FEC3C2_i;
    int auto89FA10B4_val;

    // Variable Initialization
    for (init_i = 0; init_i <= 4; init_i += 1) {
        lv_dropGroup[init_i] = UnitGroupEmpty();
    }

    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(12), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 5))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionNorthDropPodsQ, true, false);
    Wait(6.0, c_timeAI);
    for (autoB1FEC3C2_i = 1; autoB1FEC3C2_i <= autoB1FEC3C2_n; autoB1FEC3C2_i += 1) {
        lv_lOOP = (lv_lOOP + 1);
        auto89FA10B4_val = lv_lOOP;
        if (auto89FA10B4_val == 1) {
            lv_pOINT = PointFromId(31);
            libNtve_gf_CreateUnitsWithDefaultFacing(libHots_gf_DifficultyValueInt2(1, 1, 2), "Marauder", 0, gv_pLAYER_07_TERRAN_YELLOW, PointFromId(526));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_dropGroup[lv_lOOP]);
        }
        else if (auto89FA10B4_val == 2) {
            lv_pOINT = PointFromId(105);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marauder", 0, gv_pLAYER_07_TERRAN_YELLOW, PointFromId(526));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_dropGroup[lv_lOOP]);
            libNtve_gf_CreateUnitsWithDefaultFacing(libHots_gf_DifficultyValueInt2(0, 0, 1), "Medic", 0, gv_pLAYER_07_TERRAN_YELLOW, PointFromId(526));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_dropGroup[lv_lOOP]);
        }
        else if (auto89FA10B4_val == 3) {
            lv_pOINT = PointFromId(107);
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Marine", 0, gv_pLAYER_07_TERRAN_YELLOW, PointFromId(526));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_dropGroup[lv_lOOP]);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Medic", 0, gv_pLAYER_07_TERRAN_YELLOW, PointFromId(526));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_dropGroup[lv_lOOP]);
        }
        else {
        }
        gf_CreateTerranDropPod(lv_dropGroup[lv_lOOP], lv_pOINT, gv_pLAYER_07_TERRAN_YELLOW);
        VisRevealArea(gv_pLAYER_01_USER, RegionCircle(lv_pOINT, 2.0), 5.0, false);
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CenterDropPods_Init () {
    gt_CenterDropPods = TriggerCreate("gt_CenterDropPods_Func");
    TriggerAddEventTimePeriodic(gt_CenterDropPods, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Raven Tumor Hunter Force
//--------------------------------------------------------------------------------------------------
bool gt_RavenTumorHunterForce_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoB1B923FC_g;
    int autoB1B923FC_u;
    unit autoB1B923FC_var;

    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((RegionContainsPoint(RegionFromId(7), EventUnitTargetPoint()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionDominionRavenQ, true, false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(2), 12.0, false);
    libSwaC_gf_PingMinimapCampaign(PlayerGroupAll(), RegionGetCenter(RegionFromId(2)), 2.0, Color(100.00, 0.00, 0.00));
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/A4208892"), null, UnitFromId(725));
    Wait(10.0, c_timeAI);
    autoB1B923FC_g = gv_ravenTumorHunterForce;
    autoB1B923FC_u = UnitGroupCount(autoB1B923FC_g, c_unitCountAll);
    for (;; autoB1B923FC_u -= 1) {
        autoB1B923FC_var = UnitGroupUnitFromEnd(autoB1B923FC_g, autoB1B923FC_u);
        if (autoB1B923FC_var == null) { break; }
        UnitGroupRemove(gv_ravenTumorHunterForce, autoB1B923FC_var);
        AISetUnitScriptControlled(autoB1B923FC_var, false);
        AIAttackWaveUseUnit(gv_pLAYER_07_TERRAN_YELLOW, autoB1B923FC_var);
    }
    AIAttackWaveSetTargetPlayer(gv_pLAYER_07_TERRAN_YELLOW, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveSend(gv_pLAYER_07_TERRAN_YELLOW, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RavenTumorHunterForce_Init () {
    gt_RavenTumorHunterForce = TriggerCreate("gt_RavenTumorHunterForce_Func");
    TriggerEnable(gt_RavenTumorHunterForce, false);
    TriggerAddEventUnitAbility(gt_RavenTumorHunterForce, null, AbilityCommand("CreepTumorBuild", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_RavenTumorHunterForce, null, AbilityCommand("QueenBuild", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Dominion Raven Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionDominionRavenQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Char02|Line00158", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionDominionRavenQ_Init () {
    gt_TransmissionDominionRavenQ = TriggerCreate("gt_TransmissionDominionRavenQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set Last Scourge Nest
//--------------------------------------------------------------------------------------------------
bool gt_SetLastScourgeNest_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "ZergTowerArtillery"))) {
            return false;
        }

        if (!((UnitGroupCount(gv_scourgeNestGroup, c_unitCountAlive) == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_finalScourgeNestUnit = UnitGroupUnit(gv_scourgeNestGroup, 1);
    TriggerExecute(gt_DropFinalPods, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetLastScourgeNest_Init () {
    gt_SetLastScourgeNest = TriggerCreate("gt_SetLastScourgeNest_Func");
    TriggerAddEventUnitDied(gt_SetLastScourgeNest, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Drop Final Pods
//--------------------------------------------------------------------------------------------------
bool gt_DropFinalPods_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_dROP_GROUP;
    int lv_lOOP;
    point lv_pOINT;

    // Automatic Variable Declarations
    const int autoC7844818_n = 4;
    int autoC7844818_i;
    int autoA5160EA1_val;

    // Variable Initialization
    lv_dROP_GROUP = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_FinalDrop_SetPoints(gv_finalScourgeNestUnit);
    TriggerExecute(gt_TransmissionFinalDropPodsQ, true, true);
    for (autoC7844818_i = 1; autoC7844818_i <= autoC7844818_n; autoC7844818_i += 1) {
        lv_lOOP = (lv_lOOP + 1);
        autoA5160EA1_val = lv_lOOP;
        if (autoA5160EA1_val == 1) {
            lv_pOINT = gv_finalDropPod_ImpactPoint[lv_lOOP];
            libNtve_gf_CreateUnitsWithDefaultFacing(libHots_gf_DifficultyValueInt2(2, 2, 4), "Marine", 0, gv_pLAYER_03_TERRAN_TEAL, PointFromId(526));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_dROP_GROUP);
            libNtve_gf_CreateUnitsWithDefaultFacing(libHots_gf_DifficultyValueInt2(0, 0, 1), "Medic", 0, gv_pLAYER_03_TERRAN_TEAL, PointFromId(526));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_dROP_GROUP);
        }
        else if (autoA5160EA1_val == 2) {
            lv_pOINT = gv_finalDropPod_ImpactPoint[lv_lOOP];
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "WarHound", 0, gv_pLAYER_03_TERRAN_TEAL, PointFromId(526));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_dROP_GROUP);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marauder", 0, gv_pLAYER_03_TERRAN_TEAL, PointFromId(526));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_dROP_GROUP);
        }
        else if (autoA5160EA1_val == 3) {
            lv_pOINT = gv_finalDropPod_ImpactPoint[lv_lOOP];
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Marine", 0, gv_pLAYER_03_TERRAN_TEAL, PointFromId(526));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_dROP_GROUP);
            libNtve_gf_CreateUnitsWithDefaultFacing(libHots_gf_DifficultyValueInt2(0, 0, 1), "Ghost", 0, gv_pLAYER_03_TERRAN_TEAL, PointFromId(526));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_dROP_GROUP);
        }
        else {
        }
        gf_CreateTerranDropPod(lv_dROP_GROUP, lv_pOINT, gv_pLAYER_03_TERRAN_TEAL);
        VisRevealArea(gv_pLAYER_01_USER, RegionCircle(lv_pOINT, 2.0), 5.0, false);
        UnitGroupAddUnitGroup(gv_finalDropGroup, lv_dROP_GROUP);
        UnitGroupClear(lv_dROP_GROUP);
        Wait(2.5, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DropFinalPods_Init () {
    gt_DropFinalPods = TriggerCreate("gt_DropFinalPods_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Final Drop Pods Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionFinalDropPodsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char02|Line00051", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionFinalDropPodsQ_Init () {
    gt_TransmissionFinalDropPodsQ = TriggerCreate("gt_TransmissionFinalDropPodsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    cai_startall();
    cai_runall();
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        TriggerExecute(gt_StartUpgradesHard, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Upgrades (Hard)
//--------------------------------------------------------------------------------------------------
bool gt_StartUpgradesHard_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto22D11110_g;
    int auto22D11110_var;
    playergroup auto461C6973_g;
    int auto461C6973_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(300.0, c_timeAI);
    auto22D11110_g = gv_dominionPlayers;
    auto22D11110_var = -1;
    while (true) {
        auto22D11110_var = PlayerGroupNextPlayer(auto22D11110_g, auto22D11110_var);
        if (auto22D11110_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto22D11110_var, "TerranInfantryArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(auto22D11110_var, "TerranShipArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(auto22D11110_var, "TerranVehicleArmorsLevel1", 1);
    }
    Wait(360.0, c_timeAI);
    auto461C6973_g = gv_dominionPlayers;
    auto461C6973_var = -1;
    while (true) {
        auto461C6973_var = PlayerGroupNextPlayer(auto461C6973_g, auto461C6973_var);
        if (auto461C6973_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto461C6973_var, "TerranInfantryWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(auto461C6973_var, "TerranShipWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(auto461C6973_var, "TerranVehicleWeaponsLevel2", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartUpgradesHard_Init () {
    gt_StartUpgradesHard = TriggerCreate("gt_StartUpgradesHard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Minerals
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveMinerals_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveMinerals_Init () {
    gt_AIGiveMinerals = TriggerCreate("gt_AIGiveMinerals_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_pLAYER_02_TERRAN_RED, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_pLAYER_03_TERRAN_TEAL, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Gas
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveGas_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveGas_Init () {
    gt_AIGiveGas = TriggerCreate("gt_AIGiveGas_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_pLAYER_02_TERRAN_RED, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_pLAYER_03_TERRAN_TEAL, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Mission Help Q
//--------------------------------------------------------------------------------------------------
bool gt_TipMissionHelpQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_DisplayMissionTip(StringExternal("Param/Value/A50B2849"));
    Wait(libSwaC_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipMissionHelpQ_Init () {
    gt_TipMissionHelpQ = TriggerCreate("gt_TipMissionHelpQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Scourge Nest Activated Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionScourgeNestActivatedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto1D8C09B8_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    auto1D8C09B8_val = gv_scourgeNestsActivatedCount;
    if (auto1D8C09B8_val == 1) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char02|Line00001", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto1D8C09B8_val == 2) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char02|Line00018", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto1D8C09B8_val == 3) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char02|Line00017", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto1D8C09B8_val == 4) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char02|Line00016", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto1D8C09B8_val == 5) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char02|Line00019", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char02|Line00020", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionScourgeNestActivatedQ_Init () {
    gt_TransmissionScourgeNestActivatedQ = TriggerCreate("gt_TransmissionScourgeNestActivatedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: First Scourge Nest Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionFirstScourgeNestQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TransmissionClear(gv_transmissionInterrutable);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char02|Line00010", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionFirstScourgeNestQ_Init () {
    gt_TransmissionFirstScourgeNestQ = TriggerCreate("gt_TransmissionFirstScourgeNestQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Attack Wave Scourge Nest Target Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionAttackWaveScourgeNestTargetQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char02|Line00050", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionAttackWaveScourgeNestTargetQ_Init () {
    gt_TransmissionAttackWaveScourgeNestTargetQ = TriggerCreate("gt_TransmissionAttackWaveScourgeNestTargetQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Bonus Objective Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_SendTransmissionQueenThanksYouQ2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_RemindPlayertoCompleteBonusObjective("ZChar02Objective02", 600.0);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char02|Line00178", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char02|Line00179", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SendTransmissionQueenThanksYouQ2_Init () {
    gt_SendTransmissionQueenThanksYouQ2 = TriggerCreate("gt_SendTransmissionQueenThanksYouQ2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Zerg Biomass Found Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionZergBiomassFoundQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char02|Line00182", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionZergBiomassFoundQ_Init () {
    gt_TransmissionZergBiomassFoundQ = TriggerCreate("gt_TransmissionZergBiomassFoundQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Firebats Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionFirebatsIntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Char02|Line00070", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionFirebatsIntroQ_Init () {
    gt_TransmissionFirebatsIntroQ = TriggerCreate("gt_TransmissionFirebatsIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Supplyline Breakers Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionSupplylineBreakersQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char02|Line00157", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionSupplylineBreakersQ_Init () {
    gt_TransmissionSupplylineBreakersQ = TriggerCreate("gt_TransmissionSupplylineBreakersQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: North Drop Pods Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionNorthDropPodsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char02|Line00054", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionNorthDropPodsQ_Init () {
    gt_TransmissionNorthDropPodsQ = TriggerCreate("gt_TransmissionNorthDropPodsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveDestroyGorgonsComplete, true, false);
    TriggerExecute(gt_ObjectiveActivateScourgeNestComplete, true, true);
    libSwaC_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), libSwaC_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/455BBF48"), libSwaC_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerEnable(gt_DefeatBaseDead, false);
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((ObjectiveGetState(gv_objectiveActivateScourgeNests) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objectiveDestroyGorgons) == c_objectiveStateCompleted)) {
        libSwaC_gf_CampaignAwardAchievement("ZChar02_1", gv_pLAYER_01_USER);
    }

    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (gf_CreepPercent() > 40.0)) {
        libSwaC_gf_CampaignAwardAchievement("Anniversary_ZChar02", gv_pLAYER_01_USER);
        TriggerDebugOutput(1, StringExternal("Param/Value/D090751A"), false);
    }

    TriggerExecute(gt_AchievementUnitsLosttoGorgon, true, false);
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/4D4B978E"), IntToText(gv_kerriganKills));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/871EA3CE"), IntToText(gv_unitsLostToGorgon));
    TextExpressionSetToken("Param/Expression/426B07F3", "A", IntToText(gv_orbComsDestroyed));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/D8B7A5F2"), TextExpressionAssemble("Param/Expression/426B07F3"));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/D82FBE19"), IntToText(PlayerScoreValueGetAsInt(gv_pLAYER_01_USER, "UnitsKilledCount")));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/B74336EA"), IntToText(gv_largestZergForce));
    TextExpressionSetToken("Param/Expression/FD8C5F2A", "A", FixedToText(gf_CreepPercent(), 1));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/828B34DF"), TextExpressionAssemble("Param/Expression/FD8C5F2A"));
    TextExpressionSetToken("Param/Expression/699740CF", "MostGorgonsDestroyed", IntToText(gv_mostGorgonsDestroyedInAchievementTime));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/439D6A7D"), TextExpressionAssemble("Param/Expression/699740CF"));
    libSwaC_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_Defeat, false);
    TriggerEnable(gt_DefeatCheat, false);
    TriggerEnable(gt_VictoryCheat, false);
    gv_gameOver = true;
    libSwaC_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_Victory, false);
    TriggerEnable(gt_DefeatCheat, false);
    TriggerEnable(gt_VictoryCheat, false);
    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Units Lost to Gorgon
//--------------------------------------------------------------------------------------------------
bool gt_AchievementUnitsLosttoGorgon_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libHots_gf_DifficultyValueInt2(1, 1, 1) == 1))) {
            return false;
        }

        if (!((gv_unitsLostToGorgon < 5))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CampaignAwardAchievement("ZChar02_2", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementUnitsLosttoGorgon_Init () {
    gt_AchievementUnitsLosttoGorgon = TriggerCreate("gt_AchievementUnitsLosttoGorgon_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Destroy Orbital Commands N/H
//--------------------------------------------------------------------------------------------------
bool gt_AchievementDestroyOrbitalCommandsNH_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_orbComsDestroyed += 1;
    if ((libHots_gf_DifficultyValueInt2(0, 1, 1) == 1) && (gv_orbComsDestroyed == 3)) {
        TriggerEnable(TriggerGetCurrent(), false);
        libSwaC_gf_CampaignAwardAchievement("ZChar02_3", gv_pLAYER_01_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementDestroyOrbitalCommandsNH_Init () {
    gt_AchievementDestroyOrbitalCommandsNH = TriggerCreate("gt_AchievementDestroyOrbitalCommandsNH_Func");
    TriggerAddEventUnitDied(gt_AchievementDestroyOrbitalCommandsNH, UnitRefFromUnit(UnitFromId(130)));
    TriggerAddEventUnitDied(gt_AchievementDestroyOrbitalCommandsNH, UnitRefFromUnit(UnitFromId(306)));
    TriggerAddEventUnitDied(gt_AchievementDestroyOrbitalCommandsNH, UnitRefFromUnit(UnitFromId(242)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Destroy X Gorgons in Y seconds H
//--------------------------------------------------------------------------------------------------
bool gt_AchievementDestroyXGorgonsinYsecondsH_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CampaignAwardAchievement("Mastery_Char2", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementDestroyXGorgonsinYsecondsH_Init () {
    gt_AchievementDestroyXGorgonsinYsecondsH = TriggerCreate("gt_AchievementDestroyXGorgonsinYsecondsH_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gorgon Destroyed for Achievement
//--------------------------------------------------------------------------------------------------
bool gt_GorgonDestroyedforAchievement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gorgonsDestroyedForAchievement += 1;
    gv_mostGorgonsDestroyedInAchievementTime = MaxI(gv_mostGorgonsDestroyedInAchievementTime, gv_gorgonsDestroyedForAchievement);
    if ((gv_gorgonsDestroyedForAchievement >= 4) && (libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        TriggerExecute(gt_AchievementDestroyXGorgonsinYsecondsH, true, false);
    }

    Wait(120.0, c_timeAI);
    gv_gorgonsDestroyedForAchievement -= 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GorgonDestroyedforAchievement_Init () {
    gt_GorgonDestroyedforAchievement = TriggerCreate("gt_GorgonDestroyedforAchievement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Units Lost To Gorgon
//--------------------------------------------------------------------------------------------------
bool gt_UnitsLostToGorgon_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((libNtve_gf_KillingUnit() == gv_tHE_ONE_GORGON))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_unitsLostToGorgon += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitsLostToGorgon_Init () {
    gt_UnitsLostToGorgon = TriggerCreate("gt_UnitsLostToGorgon_Func");
    TriggerAddEventUnitDied(gt_UnitsLostToGorgon, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Largest Zerg Force
//--------------------------------------------------------------------------------------------------
bool gt_LargestZergForce_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentForce;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentForce = PlayerScoreValueGetAsInt(gv_pLAYER_01_USER, "UnitsActiveCount");
    if ((lv_currentForce > gv_largestZergForce)) {
        gv_largestZergForce = lv_currentForce;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LargestZergForce_Init () {
    gt_LargestZergForce = TriggerCreate("gt_LargestZergForce_Func");
    TriggerAddEventTimePeriodic(gt_LargestZergForce, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Gorgons Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyGorgonsCreate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_objectiveINT;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZChar02Objective03");
    gv_objectiveDestroyGorgons = ObjectiveLastCreated();
    libSwaC_gf_SetMissionObjectiveProgress2("ZChar02Objective03", gv_gorgonsDestroyed, true, null, true);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyGorgonsCreate_Init () {
    gt_ObjectiveDestroyGorgonsCreate = TriggerCreate("gt_ObjectiveDestroyGorgonsCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Gorgons Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyGorgonsUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveDestroyGorgonsCreate, true, false);
    libSwaC_gf_SetMissionObjectiveProgress2("ZChar02Objective03", gv_gorgonsDestroyed, true, null, true);
    if ((gv_gorgonsDestroyed >= gv_gorgonsDestroyedQuota)) {
        TriggerExecute(gt_ObjectiveDestroyGorgonsComplete, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyGorgonsUpdate_Init () {
    gt_ObjectiveDestroyGorgonsUpdate = TriggerCreate("gt_ObjectiveDestroyGorgonsUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Gorgons Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyGorgonsComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((ObjectiveGetState(gv_objectiveActivateScourgeNests) == c_objectiveStateCompleted)) {
        gv_gameOver = true;
    }

    TriggerExecute(gt_ObjectiveDestroyGorgonsCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZChar02Objective03", libSwaC_ge_MissionObjectiveState_Completed);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    if ((ObjectiveGetState(gv_objectiveActivateScourgeNests) == c_objectiveStateCompleted)) {
        TriggerExecute(gt_VictorySequence, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyGorgonsComplete_Init () {
    gt_ObjectiveDestroyGorgonsComplete = TriggerCreate("gt_ObjectiveDestroyGorgonsComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Activate Scourge Nest Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveActivateScourgeNestCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZChar02Objective2");
    gv_objectiveActivateScourgeNests = ObjectiveLastCreated();
    libSwaC_gf_SetMissionObjectiveProgress2("ZChar02Objective2", gv_scourgeNestsActivatedCount, true, null, true);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveActivateScourgeNestCreate_Init () {
    gt_ObjectiveActivateScourgeNestCreate = TriggerCreate("gt_ObjectiveActivateScourgeNestCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Activate Scourge Nest Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveActivateScourgeNestUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveActivateScourgeNestCreate, true, false);
    libSwaC_gf_SetMissionObjectiveProgress2("ZChar02Objective2", gv_scourgeNestsActivatedCount, true, null, true);
    if ((gv_scourgeNestsActivatedCount >= gv_scourgeNestsGoal)) {
        TriggerExecute(gt_ObjectiveActivateScourgeNestComplete, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveActivateScourgeNestUpdate_Init () {
    gt_ObjectiveActivateScourgeNestUpdate = TriggerCreate("gt_ObjectiveActivateScourgeNestUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Activate Scourge Nest Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveActivateScourgeNestComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((ObjectiveGetState(gv_objectiveDestroyGorgons) == c_objectiveStateCompleted)) {
        gv_gameOver = true;
    }

    TriggerExecute(gt_ObjectiveActivateScourgeNestCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZChar02Objective2", libSwaC_ge_MissionObjectiveState_Completed);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    if ((ObjectiveGetState(gv_objectiveDestroyGorgons) == c_objectiveStateCompleted)) {
        TriggerExecute(gt_VictorySequence, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveActivateScourgeNestComplete_Init () {
    gt_ObjectiveActivateScourgeNestComplete = TriggerCreate("gt_ObjectiveActivateScourgeNestComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Find Zerg Biomass Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFindZergBiomassCreate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZChar02Objective02");
    gv_objectiveFindZergBiomass = ObjectiveLastCreated();
    libSwaC_gf_SetMissionObjectiveProgress2("ZChar02Objective02", gv_objectiveZergBiomassFound, true, null, true);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFindZergBiomassCreate_Init () {
    gt_ObjectiveFindZergBiomassCreate = TriggerCreate("gt_ObjectiveFindZergBiomassCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Find Zerg Biomass Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFindZergBiomassUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnitRangeUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetCustomValue(EventUnitRangeUnit(), 0) == 0.0)) {
        UnitSetCustomValue(EventUnitRangeUnit(), 0, 1.0);
        UnitKill(EventUnitRangeUnit());
        gv_objectiveZergBiomassFound += 1;
        if ((gv_objectiveZergBiomassFound == gv_objectiveZergBiomassGoal)) {
            TriggerEnable(TriggerGetCurrent(), false);
            TriggerExecute(gt_TransmissionZergBiomassFoundQ, true, false);
        }

        TriggerExecute(gt_ObjectiveFindZergBiomassCreate, true, false);
        libSwaC_gf_SetMissionObjectiveProgress2("ZChar02Objective02", gv_objectiveZergBiomassFound, true, null, true);
        libSwaC_gf_DisplayMissionObjectiveRewardFloatingText(UnitGetPosition(EventUnit()), "ZChar02Objective02", gv_pLAYER_01_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFindZergBiomassUpdate_Init () {
    gt_ObjectiveFindZergBiomassUpdate = TriggerCreate("gt_ObjectiveFindZergBiomassUpdate_Func");
    TriggerAddEventUnitRange(gt_ObjectiveFindZergBiomassUpdate, UnitRefFromVariable("gv_kerrigan"), UnitFromId(1831), 1.5, true);
    TriggerAddEventUnitRange(gt_ObjectiveFindZergBiomassUpdate, UnitRefFromVariable("gv_kerrigan"), UnitFromId(1824), 1.5, true);
    TriggerAddEventUnitRange(gt_ObjectiveFindZergBiomassUpdate, UnitRefFromVariable("gv_kerrigan"), UnitFromId(1832), 1.5, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Find Zerg Biomass Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFindZergBiomassComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_objectiveZergBiomassFound == gv_objectiveZergBiomassGoal))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveFindZergBiomassCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZChar02Objective02", libSwaC_ge_MissionObjectiveState_Completed);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFindZergBiomassComplete_Init () {
    gt_ObjectiveFindZergBiomassComplete = TriggerCreate("gt_ObjectiveFindZergBiomassComplete_Func");
    TriggerAddEventTimePeriodic(gt_ObjectiveFindZergBiomassComplete, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto85BF4EA0_g;
    int auto85BF4EA0_u;
    unit auto85BF4EA0_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    gv_inCinematic = true;
    libSwaC_gf_CinematicModeSwarmCampaign(true, c_transitionDurationDefault);
    libNtve_gf_GlobalCinematicSetting(true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    libSwaC_gf_EnableDisableZerglingRespawn(false);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_03_TERRAN_TEAL, libNtve_ge_AllianceSetting_Neutral);
    UnitPauseAll(true);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    UnitGroupAddUnitGroup(gv_cinematicHiddenUnits, UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(16), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(gv_cinematicHiddenUnits, UnitGroup(null, gv_pLAYER_07_TERRAN_YELLOW, RegionFromId(16), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAdd(gv_cinematicHiddenUnits, UnitFromId(54));
    auto85BF4EA0_g = gv_cinematicHiddenUnits;
    auto85BF4EA0_u = UnitGroupCount(auto85BF4EA0_g, c_unitCountAll);
    for (;; auto85BF4EA0_u -= 1) {
        auto85BF4EA0_var = UnitGroupUnitFromEnd(auto85BF4EA0_g, auto85BF4EA0_u);
        if (auto85BF4EA0_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto85BF4EA0_var, false);
        libNtve_gf_ChangeUnitDamage(auto85BF4EA0_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    }
    Wait(0.1, c_timeGame);
    CreepModify(PointFromId(576), 20.0, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoE948E721_g;
    int autoE948E721_u;
    unit autoE948E721_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(620), 0.0, -1, 10.0, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(621), ((0.0 + SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Char02|Line00018", true), c_soundIndexAny))) + 0.0), -1, 10.0, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicInTransmission);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Char02|Line00018", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CinematicFade(false, 3.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_SpeechAndMusicNoEffects);
    SoundChannelDSPInsert(PlayerGroupAll(), c_soundCategoryCombat, "LowPassSimple_700Hz");
    SoundChannelDSPInsert(PlayerGroupAll(), c_soundCategoryCombat, "ReverbConcertHall");
    GameSetLighting("AiurFlashback", 0.0);
    TriggerExecute(gt_IntroZerg, true, false);
    UnitCreate(1, "GehennaCruiser", 0, gv_pLAYER_04_GORGON, PointFromId(625), 225.0);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 0.4);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(626)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1552)), c_orderQueueAddToEnd);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(622), 0.0, -1, 10.0, true);
    TriggerExecute(gt_IntroMusic2, true, false);
    SoundPlay(SoundLink("Event_Char02_FlashbackLoop", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introFlashbackSound = SoundLastPlayed();
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_IntroExplosions, true, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(623), (SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Char02|Line00019", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Char02|Line00020", true), c_soundIndexAny))), -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Char02|Line00019", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_DontShowPortrait, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Char02|Line00020", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_DontShowPortrait, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CinematicFade(false, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    SoundStop(gv_introFlashbackSound, true);
    TriggerStop(gt_IntroExplosions);
    TriggerStop(gt_IntroZerg);
    UnitRemove(UnitLastCreated());
    autoE948E721_g = gv_introZerg;
    autoE948E721_u = UnitGroupCount(autoE948E721_g, c_unitCountAll);
    for (;; autoE948E721_u -= 1) {
        autoE948E721_var = UnitGroupUnitFromEnd(autoE948E721_g, autoE948E721_u);
        if (autoE948E721_var == null) { break; }
        UnitRemove(autoE948E721_var);
    }
    Wait(0.1, c_timeGame);
    CreepModify(PointFromId(576), 20.0, false, false);
    libNtve_gf_RemoveDeathModelsinRegion(RegionFromId(16));
    GameSetLighting("Char", 0.0);
    SoundChannelDSPRemove(PlayerGroupAll(), c_soundCategoryCombat, "LowPassSimple_700Hz");
    SoundChannelDSPRemove(PlayerGroupAll(), c_soundCategoryCombat, "ReverbConcertHall");
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicInTransmission);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(627), 0.0, -1, 10.0, true);
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(628), 3.0, -1, 10.0, true);
    libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(libSwaC_ge_CampaginReticleType_ZergMainObjective, libSwaC_ge_CampaginReticleSize_Medium, null, UnitFromId(82), "Ref_Center");
    gv_introReticle = libNtve_gf_ActorLastCreated();
    SoundPlay(SoundLink("UI_BriefingUnitSelect", -1), PlayerGroupAll(), 100.0, 0.0);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Char02|Line00021", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_CreateUnitsAtPoint2(1, "VikingFighter", 0, gv_pLAYER_03_TERRAN_TEAL, PointFromId(686));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(687)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsAtPoint2(1, "VikingFighter", 0, gv_pLAYER_03_TERRAN_TEAL, PointFromId(630));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(688)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    libNtve_gf_PauseUnit(UnitFromId(299), false);
    libNtve_gf_PauseUnit(UnitFromId(734), false);
    UnitIssueOrder(UnitFromId(299), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(300)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(734), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(95)), c_orderQueueReplace);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(624), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(629), ((2.0 + SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Char02|Line00023", true), c_soundIndexAny))) + SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Char02|Line00024", true), c_soundIndexAny))), -1, 10.0, true);
    libNtve_gf_KillModel(gv_introReticle);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Char02|Line00023", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Char02|Line00024", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zBriefing_Char02|Line00025", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_LeavePortraitVisibleAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(3.0, c_timeReal);
    UnitIssueOrder(UnitFromId(299), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(734), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    libNtve_gf_PauseUnit(UnitFromId(299), true);
    libNtve_gf_PauseUnit(UnitFromId(734), true);
    TriggerExecute(gt_IntroZergBase, true, false);
    Wait(1.0, c_timeReal);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(694), 0.0, -1, 10.0, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1238), 3.0, -1, 10.0, true);
    UnitIssueOrder(gv_kerrigan, OrderTargetingUnit(AbilityCommand("move", 4), UnitFromId(82)), c_orderQueueReplace);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zBriefing_Char02|Line00027", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(3.0, c_timeGame);
    libSwaC_gf_CreateReticleEffectAndTextTagAtPoint(libSwaC_ge_CampaginReticleType_ZergMainObjective, libSwaC_ge_CampaginReticleSize_Medium, StringExternal("Param/Value/24A78440"), PointFromId(112));
    gv_introReticle = libNtve_gf_ActorLastCreated();
    gv_introTextTag = TextTagLastCreated();
    TextTagSetPosition(TextTagLastCreated(), PointFromId(112), 1.0);
    SoundPlay(SoundLink("UI_BriefingUnitSelect", -1), PlayerGroupAll(), 100.0, 0.0);
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(1.0, c_timeGame);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;
    point lv_hatcheryPoint;
    string lv_hatcheryType;
    fixed lv_distanceIncrement;
    fixed lv_distanceTotal;
    int lv_distanceStepCount;
    point lv_revealPoint;

    // Automatic Variable Declarations
    unitgroup auto81EDF5F9_g;
    int auto81EDF5F9_u;
    unit auto81EDF5F9_var;
    unitgroup auto742DFB62_g;
    int auto742DFB62_u;
    unit auto742DFB62_var;
    unitgroup auto273F1D40_g;
    int auto273F1D40_u;
    unit auto273F1D40_var;
    int auto5598168F_ae;
    int auto5598168F_var;
    unitgroup autoB471E740_g;
    int autoB471E740_u;
    unit autoB471E740_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    SoundStop(gv_introFlashbackSound, true);
    SoundChannelDSPRemove(PlayerGroupAll(), c_soundCategoryCombat, "LowPassSimple_700Hz");
    SoundChannelDSPRemove(PlayerGroupAll(), c_soundCategoryCombat, "ReverbConcertHall");
    if ((gv_introMusicState == 0)) {
        TriggerStop(gt_IntroMusic1);
        SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZChar02MusicAlt", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }

    if ((gv_introMusicState == 1) && (gv_cinematicCompleted == false)) {
        TriggerStop(gt_IntroMusic2);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZChar02MusicAlt", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }

    TriggerStop(gt_IntroZerg);
    TriggerStop(gt_IntroExplosions);
    TriggerStop(gt_IntroZergBase);
    TriggerStop(gt_IntroGorgonLaunch);
    TriggerEnable(gt_IntroGorgonLaunch, false);
    libNtve_gf_RemoveDeathModelsinRegionImmediately(RegionFromId(16));
    libNtve_gf_KillModel(gv_introReticle);
    TextTagDestroy(gv_introTextTag);
    auto81EDF5F9_g = UnitGroup("Larva", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto81EDF5F9_u = UnitGroupCount(auto81EDF5F9_g, c_unitCountAll);
    for (;; auto81EDF5F9_u -= 1) {
        auto81EDF5F9_var = UnitGroupUnitFromEnd(auto81EDF5F9_g, auto81EDF5F9_u);
        if (auto81EDF5F9_var == null) { break; }
        UnitRemove(auto81EDF5F9_var);
    }
    auto742DFB62_g = gv_cinematicTempUnits;
    auto742DFB62_u = UnitGroupCount(auto742DFB62_g, c_unitCountAll);
    for (;; auto742DFB62_u -= 1) {
        auto742DFB62_var = UnitGroupUnitFromEnd(auto742DFB62_g, auto742DFB62_u);
        if (auto742DFB62_var == null) { break; }
        UnitRemove(auto742DFB62_var);
    }
    lv_hatcheryType = UnitGetType(UnitFromId(1));
    lv_hatcheryPoint = UnitGetPosition(UnitFromId(1));
    UnitRemove(UnitFromId(1));
    CreepSetSpeed(c_creepSpeedGrowth, 100.0);
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_hatcheryType, 0, gv_pLAYER_01_USER, lv_hatcheryPoint);
    libSwaC_gf_SetHatcheryRallyPoint(UnitLastCreated(), PointFromId(16));
    libSwaC_gf_SpawnLarvaForHatchery(UnitLastCreated(), 3);
    auto273F1D40_g = gv_cinematicHiddenUnits;
    auto273F1D40_u = UnitGroupCount(auto273F1D40_g, c_unitCountAll);
    for (;; auto273F1D40_u -= 1) {
        auto273F1D40_var = UnitGroupUnitFromEnd(auto273F1D40_g, auto273F1D40_u);
        if (auto273F1D40_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto273F1D40_var, true);
    }
    UnitPauseAll(false);
    UnitSetPosition(gv_kerrigan, PointFromId(16), false);
    libSwaC_gf_EnableDisableZerglingRespawn(true);
    CutscenePause(gv_scene_GorgonLaunch);
    CutsceneSetTime(gv_scene_GorgonLaunch, 0);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_03_TERRAN_TEAL, libNtve_ge_AllianceSetting_Enemy);
    CreepModify(RegionGetCenter(RegionFromId(37)), (libNtve_gf_WidthOfRegion(RegionFromId(37)) / 2.0), true, false);
    CreepModify(RegionGetCenter(RegionFromId(38)), (libNtve_gf_WidthOfRegion(RegionFromId(38)) / 2.0), true, false);
    CreepModify(RegionGetCenter(RegionFromId(39)), (libNtve_gf_WidthOfRegion(RegionFromId(39)) / 2.0), true, false);
    CreepModify(RegionGetCenter(RegionFromId(40)), (libNtve_gf_WidthOfRegion(RegionFromId(40)) / 2.0), true, false);
    CreepModify(RegionGetCenter(RegionFromId(41)), (libNtve_gf_WidthOfRegion(RegionFromId(41)) / 2.0), true, false);
    CreepModify(RegionGetCenter(RegionFromId(42)), (libNtve_gf_WidthOfRegion(RegionFromId(42)) / 2.0), true, false);
    CreepModify(RegionGetCenter(RegionFromId(43)), (libNtve_gf_WidthOfRegion(RegionFromId(43)) / 2.0), true, false);
    GameSetLighting("Char", 0.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    TriggerExecute(gt_StartAI, true, false);
    Wait(0.5, c_timeReal);
    lv_distanceIncrement = 2.0;
    lv_distanceTotal = DistanceBetweenPoints(PointFromId(222), PointFromId(13));
    lv_distanceStepCount = FixedToInt((lv_distanceTotal / lv_distanceIncrement));
    auto5598168F_ae = lv_distanceStepCount;
    auto5598168F_var = 0;
    for ( ; auto5598168F_var <= auto5598168F_ae; auto5598168F_var += 1 ) {
        lv_revealPoint = libNtve_gf_PointOffsetTowardsPoint(PointFromId(222), (auto5598168F_var * lv_distanceIncrement), PointFromId(13));
        VisExploreArea(gv_pLAYER_01_USER, RegionCircle(lv_revealPoint, 8.0), true, false);
    }
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    gv_inCinematic = false;
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(439)), lv_fadeDuration);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    autoB471E740_g = gv_cinematicHiddenUnits;
    autoB471E740_u = UnitGroupCount(autoB471E740_g, c_unitCountAll);
    for (;; autoB471E740_u -= 1) {
        autoB471E740_var = UnitGroupUnitFromEnd(autoB471E740_g, autoB471E740_u);
        if (autoB471E740_var == null) { break; }
        libNtve_gf_ChangeUnitDamage(autoB471E740_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Zerg
//--------------------------------------------------------------------------------------------------
bool gt_IntroZerg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoC6FBE432_n = 50;
    int autoC6FBE432_i;
    const int auto9148C8EA_n = 10;
    int auto9148C8EA_i;
    unitgroup auto41C007FB_g;
    int auto41C007FB_u;
    unit auto41C007FB_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hatchery", 0, gv_pLAYER_01_USER, UnitGetPosition(UnitFromId(1)));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitGroupAdd(gv_introZerg, UnitLastCreated());
    CreepModify(RegionGetCenter(RegionFromId(37)), (libNtve_gf_WidthOfRegion(RegionFromId(37)) / 2.0), true, false);
    for (autoC6FBE432_i = 1; autoC6FBE432_i <= autoC6FBE432_n; autoC6FBE432_i += 1) {
        UnitCreate(1, "Zergling", 0, 0, RegionRandomPoint(RegionFromId(28)), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitGroupAdd(gv_introZerg, UnitLastCreated());
        UnitSetOwner(UnitLastCreated(), 1, true);
    }
    for (auto9148C8EA_i = 1; auto9148C8EA_i <= auto9148C8EA_n; auto9148C8EA_i += 1) {
        UnitCreate(1, "Baneling", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(28)), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitGroupAdd(gv_introZerg, UnitLastCreated());
    }
    while (true) {
        auto41C007FB_g = gv_introZerg;
        auto41C007FB_u = UnitGroupCount(auto41C007FB_g, c_unitCountAll);
        for (;; auto41C007FB_u -= 1) {
            auto41C007FB_var = UnitGroupUnitFromEnd(auto41C007FB_g, auto41C007FB_u);
            if (auto41C007FB_var == null) { break; }
            if ((RandomInt(1, 8) == 1)) {
                UnitIssueOrder(auto41C007FB_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(28))), c_orderQueueReplace);
            }

        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroZerg_Init () {
    gt_IntroZerg = TriggerCreate("gt_IntroZerg_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Explosions
//--------------------------------------------------------------------------------------------------
bool gt_IntroExplosions_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;

    // Automatic Variable Declarations
    unitgroup autoDE2FAD6B_g;
    int autoDE2FAD6B_u;
    unit autoDE2FAD6B_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(RandomFixed(0.5, 1.5), c_timeReal);
        lv_point = RegionRandomPoint(RegionFromId(28));
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, lv_point);
        autoDE2FAD6B_g = UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(lv_point, 2.5), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoDE2FAD6B_u = UnitGroupCount(autoDE2FAD6B_g, c_unitCountAll);
        for (;; autoDE2FAD6B_u -= 1) {
            autoDE2FAD6B_var = UnitGroupUnitFromEnd(autoDE2FAD6B_g, autoDE2FAD6B_u);
            if (autoDE2FAD6B_var == null) { break; }
            UnitKill(autoDE2FAD6B_var);
        }
        CameraShake(gv_pLAYER_01_USER, "Light", "Earthquake", 0.1, 0.1, 0.4);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroExplosions_Init () {
    gt_IntroExplosions = TriggerCreate("gt_IntroExplosions_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Zerg Base
//--------------------------------------------------------------------------------------------------
bool gt_IntroZergBase_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto3B447DCC_g;
    int auto3B447DCC_u;
    unit auto3B447DCC_var;
    unitgroup auto9214BA70_g;
    int auto9214BA70_u;
    unit auto9214BA70_var;
    unitgroup auto95B16F81_g;
    int auto95B16F81_u;
    unit auto95B16F81_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumorBurrowed", 0, gv_pLAYER_01_USER, UnitGetPosition(UnitFromId(54)));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    CreepModify(RegionGetCenter(RegionFromId(27)), (libNtve_gf_WidthOfRegion(RegionFromId(27)) / 2.0), true, false);
    CreepModify(RegionGetCenter(RegionFromId(36)), (libNtve_gf_WidthOfRegion(RegionFromId(37)) / 2.0), true, false);
    CreepSetSpeed(c_creepSpeedGrowth, 200.0);
    auto3B447DCC_g = UnitGroup("Larva", gv_pLAYER_01_USER, RegionFromId(16), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3B447DCC_u = UnitGroupCount(auto3B447DCC_g, c_unitCountAll);
    for (;; auto3B447DCC_u -= 1) {
        auto3B447DCC_var = UnitGroupUnitFromEnd(auto3B447DCC_g, auto3B447DCC_u);
        if (auto3B447DCC_var == null) { break; }
        UnitRemove(auto3B447DCC_var);
    }
    auto9214BA70_g = gv_cinematicTempUnits;
    auto9214BA70_u = UnitGroupCount(auto9214BA70_g, c_unitCountAll);
    for (;; auto9214BA70_u -= 1) {
        auto9214BA70_var = UnitGroupUnitFromEnd(auto9214BA70_g, auto9214BA70_u);
        if (auto9214BA70_var == null) { break; }
        if ((UnitGetType(auto9214BA70_var) != "CreepTumorBurrowed")) {
            UnitRemove(auto9214BA70_var);
        }

    }
    libNtve_gf_ShowHideUnit(gv_kerrigan, true);
    libNtve_gf_PauseUnit(gv_kerrigan, false);
    auto95B16F81_g = gv_cinematicHiddenUnits;
    auto95B16F81_u = UnitGroupCount(auto95B16F81_g, c_unitCountAll);
    for (;; auto95B16F81_u -= 1) {
        auto95B16F81_var = UnitGroupUnitFromEnd(auto95B16F81_g, auto95B16F81_u);
        if (auto95B16F81_var == null) { break; }
        if ((UnitTypeTestAttribute(UnitGetType(auto95B16F81_var), c_unitAttributeStructure) == true) && (UnitGetType(auto95B16F81_var) != "CreepTumorBurrowed")) {
            libNtve_gf_ShowHideUnit(auto95B16F81_var, true);
        }

    }
    Wait(1.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_pLAYER_01_USER, PointFromId(1231));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1665)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_kerrigan)), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_pLAYER_01_USER, PointFromId(1232));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1666)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_kerrigan)), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_pLAYER_01_USER, PointFromId(1228));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1667)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_kerrigan)), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_pLAYER_01_USER, PointFromId(1229));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1668)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_kerrigan)), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroZergBase_Init () {
    gt_IntroZergBase = TriggerCreate("gt_IntroZergBase_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Gorgon Launch
//--------------------------------------------------------------------------------------------------
bool gt_IntroGorgonLaunch_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventCutsceneId() == gv_scene_GorgonLaunch))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    CutscenePause(gv_scene_GorgonLaunch);
    CutsceneSetTime(gv_scene_GorgonLaunch, 0);
    UnitCreate(1, "GehennaCruiser", 0, gv_pLAYER_04_GORGON, PointFromId(222), -133.9159);
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "AnimCopy ::external.GorgonFinderTag");
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    Wait(1.0, c_timeGame);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, gv_gorgonSpeed);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(13)), c_orderQueueReplace);
    UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroGorgonLaunch_Init () {
    gt_IntroGorgonLaunch = TriggerCreate("gt_IntroGorgonLaunch_Func");
    TriggerAddEventCutsceneBookmarkFired(gt_IntroGorgonLaunch, c_cutsceneNone, "Char02CruiserLaunch_End");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Music 1
//--------------------------------------------------------------------------------------------------
bool gt_IntroMusic1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_soundtrack = "ZChar02MusicPreIntro";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroMusic1_Init () {
    gt_IntroMusic1 = TriggerCreate("gt_IntroMusic1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Music 2
//--------------------------------------------------------------------------------------------------
bool gt_IntroMusic2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_IntroMusic1);
    gv_introMusicState += 1;
    lv_soundtrack = "ZChar02MusicIntro";
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    gv_introMusicState += 1;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZChar02MusicAlt", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroMusic2_Init () {
    gt_IntroMusic2 = TriggerCreate("gt_IntroMusic2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Q
//--------------------------------------------------------------------------------------------------
bool gt_MidQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_MidSetup, true, true);
    TriggerExecute(gt_MidCinematic, true, true);
    TriggerExecute(gt_MidCinematicEnd, true, true);
    TriggerExecute(gt_MidCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidQ_Init () {
    gt_MidQ = TriggerCreate("gt_MidQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto6387482B_g;
    int auto6387482B_u;
    unit auto6387482B_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    gv_inCinematic = true;
    libSwaC_gf_CinematicModeSwarmCampaign(true, c_transitionDurationDefault);
    libNtve_gf_GlobalCinematicSetting(true);
    libNtve_gf_StoreUnitSelection(gv_pLAYER_01_USER, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    libSwaC_gf_EnableDisableZerglingRespawn(false);
    UnitPauseAll(true);
    AITimePause(true);
    gv_midHiddenUnitGroup = UnitGroup(null, gv_pLAYER_04_GORGON, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    UnitGroupAdd(gv_midHiddenUnitGroup, UnitFromId(299));
    UnitGroupAdd(gv_midHiddenUnitGroup, UnitFromId(734));
    auto6387482B_g = gv_midHiddenUnitGroup;
    auto6387482B_u = UnitGroupCount(auto6387482B_g, c_unitCountAll);
    for (;; auto6387482B_u -= 1) {
        auto6387482B_var = UnitGroupUnitFromEnd(auto6387482B_g, auto6387482B_u);
        if (auto6387482B_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto6387482B_var, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidSetup_Init () {
    gt_MidSetup = TriggerCreate("gt_MidSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_spawnAngle;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(744), 0.0, -1, 10.0, false);
    CameraPan(gv_pLAYER_01_USER, UnitGetPosition(gv_midCinematicScourgeNest), 0.0, -1, 10.0, false);
    libNtve_gf_PauseUnit(gv_midCinematicScourgeNest, false);
    lv_spawnAngle = UnitGetFacing(gv_tHE_ONE_GORGON);
    UnitCreate(1, "GehennaCruiser", 0, gv_pLAYER_04_GORGON, UnitGetPosition(gv_tHE_ONE_GORGON), lv_spawnAngle);
    gv_midSpawnedCruiser = UnitLastCreated();
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, gv_gorgonSpeed);
    UnitIssueOrder(gv_midSpawnedCruiser, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(13)), c_orderQueueReplace);
    TriggerExecute(gt_MidMusic, true, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_midCinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(451), (SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Char02|Line00011", true), c_soundIndexAny)) + 0.0), -1, 10.0, false);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicInTransmission);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Char02|Line00011", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 3.0);
    TriggerExecute(gt_MidScourgeNestAttack, true, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicOutofTransmission);
    while (!((UnitIsAlive(gv_midSpawnedCruiser) == false))) {
        Wait(0.1, c_timeGame);
    }
    SoundPlay(SoundLink("BattlecruiserStinger", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_midCruiserStinger = SoundLastPlayed();
    CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 0.5, 0.5, 3.0);
    Wait(3.0, c_timeReal);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicInTransmission);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 20.0, 0.5);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 20.0, 0.5);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Char02|Line00013", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(451), 0.0, -1, 10.0, false);
    CameraPan(gv_pLAYER_01_USER, UnitGetPosition(gv_midCinematicScourgeNest), 0.0, -1, 10.0, false);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char02|Line00175", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Char02|Line00015", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_midCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematic_Init () {
    gt_MidCinematic = TriggerCreate("gt_MidCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_midCinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematicEnd_Init () {
    gt_MidCinematicEnd = TriggerCreate("gt_MidCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto12FA47D9_g;
    int auto12FA47D9_u;
    unit auto12FA47D9_var;
    unitgroup auto5F41E9B9_g;
    int auto5F41E9B9_u;
    unit auto5F41E9B9_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_MidScourgeNestAttack);
    if ((gv_cinematicCompleted == false) && (gv_midMusicFinished == false)) {
        TriggerStop(gt_MidMusic);
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZChar02MusicMain", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }

    auto12FA47D9_g = gv_midHiddenUnitGroup;
    auto12FA47D9_u = UnitGroupCount(auto12FA47D9_g, c_unitCountAll);
    for (;; auto12FA47D9_u -= 1) {
        auto12FA47D9_var = UnitGroupUnitFromEnd(auto12FA47D9_g, auto12FA47D9_u);
        if (auto12FA47D9_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto12FA47D9_var, true);
    }
    UnitPauseAll(false);
    AITimePause(false);
    auto5F41E9B9_g = UnitGroup("ZergTowerArtilleryLaunchSquidMissile", c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterMissile), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5F41E9B9_u = UnitGroupCount(auto5F41E9B9_g, c_unitCountAll);
    for (;; auto5F41E9B9_u -= 1) {
        auto5F41E9B9_var = UnitGroupUnitFromEnd(auto5F41E9B9_g, auto5F41E9B9_u);
        if (auto5F41E9B9_var == null) { break; }
        UnitRemove(auto5F41E9B9_var);
    }
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    libSwaC_gf_EnableDisableZerglingRespawn(true);
    libNtve_gf_RestoreUnitSelection(1);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10.0, false);
    CameraPan(gv_pLAYER_01_USER, CameraInfoGetTarget(CameraInfoFromId(1863)), 0.0, -1, 10.0, false);
    SoundStop(gv_midScourgeStinger, true);
    SoundStop(gv_midCruiserStinger, true);
    PingDestroy(gv_gorgonPing);
    UnitKill(gv_midCinematicScourgeNest);
    UnitRemove(gv_tHE_ONE_GORGON);
    gv_gorgonsDestroyed += 1;
    gv_clear2FireCheckCount += 1;
    TriggerExecute(gt_GorgonDestroyedforAchievement, true, false);
    TriggerExecute(gt_ObjectiveDestroyGorgonsUpdate, true, false);
    TriggerExecute(gt_GorgonLaunchSchedule, true, false);
    if ((gv_midCinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
        UnitKill(gv_midSpawnedCruiser);
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    gv_inCinematic = false;
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCleanup_Init () {
    gt_MidCleanup = TriggerCreate("gt_MidCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Scourge Nest Attack
//--------------------------------------------------------------------------------------------------
bool gt_MidScourgeNestAttack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_midCinematicScourgeNest), c_animNameDefault, "Stand Unpowered Morph A", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(3.0, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_midCinematicScourgeNest), c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    SoundPlay(SoundLink("ScourgeCannonStinger", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_midScourgeStinger = SoundLastPlayed();
    UnitIssueOrder(gv_midCinematicScourgeNest, OrderTargetingUnit(AbilityCommand("attack", 0), gv_midSpawnedCruiser), c_orderQueueReplace);
    Wait(4.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1242), 5.0, -1, 10, false);
    CameraPan(gv_pLAYER_01_USER, PointWithOffset(UnitGetPosition(gv_tHE_ONE_GORGON), -6.0, 4.0), 0.0, -1, 10, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidScourgeNestAttack_Init () {
    gt_MidScourgeNestAttack = TriggerCreate("gt_MidScourgeNestAttack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Music
//--------------------------------------------------------------------------------------------------
bool gt_MidMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_soundtrack = "ZChar02MusicCutscene1_FirstCreepTumor";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    gv_midMusicFinished = true;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZChar02MusicMain", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidMusic_Init () {
    gt_MidMusic = TriggerCreate("gt_MidMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto49931009_g;
    int auto49931009_u;
    unit auto49931009_var;
    unitgroup auto7ABFB2D3_g;
    int auto7ABFB2D3_u;
    unit auto7ABFB2D3_var;
    unitgroup auto21571B35_g;
    int auto21571B35_u;
    unit auto21571B35_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    gv_inCinematic = true;
    libSwaC_gf_CinematicModeSwarmCampaign(true, c_transitionDurationDefault);
    libNtve_gf_GlobalCinematicSetting(true);
    UnitClearSelection(gv_pLAYER_01_USER);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    CutsceneStop(gv_scene_GorgonLaunch);
    gv_kerriganKills = libNtve_gf_UnitGetPropertyKills(gv_kerrigan, c_unitPropCurrent);
    UnitPauseAll(true);
    auto49931009_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto49931009_u = UnitGroupCount(auto49931009_g, c_unitCountAll);
    for (;; auto49931009_u -= 1) {
        auto49931009_var = UnitGroupUnitFromEnd(auto49931009_g, auto49931009_u);
        if (auto49931009_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto49931009_var, false);
    }
    auto7ABFB2D3_g = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(34), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7ABFB2D3_u = UnitGroupCount(auto7ABFB2D3_g, c_unitCountAll);
    for (;; auto7ABFB2D3_u -= 1) {
        auto7ABFB2D3_var = UnitGroupUnitFromEnd(auto7ABFB2D3_g, auto7ABFB2D3_u);
        if (auto7ABFB2D3_var == null) { break; }
        UnitRemove(auto7ABFB2D3_var);
    }
    auto21571B35_g = UnitGroup(null, gv_pLAYER_03_TERRAN_TEAL, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto21571B35_u = UnitGroupCount(auto21571B35_g, c_unitCountAll);
    for (;; auto21571B35_u -= 1) {
        auto21571B35_var = UnitGroupUnitFromEnd(auto21571B35_g, auto21571B35_u);
        if (auto21571B35_var == null) { break; }
        UnitRemove(auto21571B35_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto0D84BE33_g;
    int auto0D84BE33_u;
    unit auto0D84BE33_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1243), 0.0, -1, 10.0, true);
    Wait(0.1, c_timeGame);
    auto0D84BE33_g = UnitGroup(null, gv_pLAYER_03_TERRAN_TEAL, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0D84BE33_u = UnitGroupCount(auto0D84BE33_g, c_unitCountAll);
    for (;; auto0D84BE33_u -= 1) {
        auto0D84BE33_var = UnitGroupUnitFromEnd(auto0D84BE33_g, auto0D84BE33_u);
        if (auto0D84BE33_var == null) { break; }
        UnitRemove(auto0D84BE33_var);
    }
    TriggerExecute(gt_VictoryDominion, true, false);
    TriggerExecute(gt_VictoryKerrigan, true, false);
    Wait(0.9, c_timeGame);
    TriggerExecute(gt_VictoryCameras, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZChar02MusicOutro14_WarfieldDefeated", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundPlay(SoundLink("Char02_CS_End_Win", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_victorySound = gv_victorySound;
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_victoryCinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicInTransmission);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char02|Line00032", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char02|Line00035", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_LeavePortraitVisibleAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char02|Line00036", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_LeavePortraitVisibleAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_victoryKerrigan, "zMission_Char02|Line00037", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_victoryCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuratioin;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_victoryCinematicCompleted == true)) {
        lv_fadeDuratioin = 2.0;
    }
    else {
        lv_fadeDuratioin = 0.5;
    }
    CinematicFade(false, lv_fadeDuratioin, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_VictoryDominion);
    TriggerStop(gt_VictoryKerrigan);
    TriggerStop(gt_VictroryDroppods);
    TriggerStop(gt_VictoryCameras);
    UnitPauseAll(true);
    SoundStop(gv_victorySound, true);
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Dominion
//--------------------------------------------------------------------------------------------------
bool gt_VictoryDominion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto04DC1847_n = 5;
    int auto04DC1847_i;
    const int auto36FA3AB1_n = 10;
    int auto36FA3AB1_i;
    const int autoF4183EAD_n = 15;
    int autoF4183EAD_i;
    const int auto77893A2C_n = 5;
    int auto77893A2C_i;
    unitgroup auto85FEF454_g;
    int auto85FEF454_u;
    unit auto85FEF454_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PauseUnit(UnitFromId(46), false);
    libNtve_gf_PauseUnit(UnitFromId(142), false);
    UnitIssueOrder(UnitFromId(142), Order(AbilityCommand("DefensiveWall45GateWestLowered", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(46), Order(AbilityCommand("DefensiveWall45GateWestLowered", 0)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    UnitCreate(1, "Thor", 0, gv_pLAYER_03_TERRAN_TEAL, PointFromId(241), 45.0);
    UnitGroupAdd(gv_victoryHiddenUnitGroup2, UnitLastCreated());
    for (auto04DC1847_i = 1; auto04DC1847_i <= auto04DC1847_n; auto04DC1847_i += 1) {
        UnitCreate(1, "Goliath", 0, gv_pLAYER_03_TERRAN_TEAL, RegionRandomPoint(RegionFromId(29)), 45.0);
        UnitGroupAdd(gv_victoryHiddenUnitGroup2, UnitLastCreated());
        UnitCreate(1, "Wraith", 0, gv_pLAYER_03_TERRAN_TEAL, RegionRandomPoint(RegionFromId(29)), 45.0);
        UnitGroupAdd(gv_victoryHiddenUnitGroup2, UnitLastCreated());
        UnitCreate(1, "Firebat", 0, gv_pLAYER_03_TERRAN_TEAL, RegionRandomPoint(RegionFromId(29)), 45.0);
        UnitGroupAdd(gv_victoryHiddenUnitGroup2, UnitLastCreated());
    }
    for (auto36FA3AB1_i = 1; auto36FA3AB1_i <= auto36FA3AB1_n; auto36FA3AB1_i += 1) {
        UnitCreate(1, "WarPig", 0, gv_pLAYER_03_TERRAN_TEAL, RegionRandomPoint(RegionFromId(29)), 45.0);
        UnitGroupAdd(gv_victoryHiddenUnitGroup2, UnitLastCreated());
    }
    for (autoF4183EAD_i = 1; autoF4183EAD_i <= autoF4183EAD_n; autoF4183EAD_i += 1) {
        UnitCreate(1, "Marine", 0, gv_pLAYER_03_TERRAN_TEAL, RegionRandomPoint(RegionFromId(29)), 45.0);
        UnitGroupAdd(gv_victoryHiddenUnitGroup2, UnitLastCreated());
    }
    for (auto77893A2C_i = 1; auto77893A2C_i <= auto77893A2C_n; auto77893A2C_i += 1) {
        auto85FEF454_g = UnitGroup(null, c_playerAny, RegionFromId(29), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto85FEF454_u = UnitGroupCount(auto85FEF454_g, c_unitCountAll);
        for (;; auto85FEF454_u -= 1) {
            auto85FEF454_var = UnitGroupUnitFromEnd(auto85FEF454_g, auto85FEF454_u);
            if (auto85FEF454_var == null) { break; }
            if ((UnitGetOwner(auto85FEF454_var) != gv_pLAYER_01_USER)) {
                UnitIssueOrder(auto85FEF454_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(30))), c_orderQueueReplace);
            }

        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryDominion_Init () {
    gt_VictoryDominion = TriggerCreate("gt_VictoryDominion_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Dominion Retreat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryDominionRetreat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_victoryHiddenUnitGroup2, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryDominionRetreat_Init () {
    gt_VictoryDominionRetreat = TriggerCreate("gt_VictoryDominionRetreat_Func");
    TriggerAddEventUnitRegion(gt_VictoryDominionRetreat, null, RegionFromId(30), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Kerrigan
//--------------------------------------------------------------------------------------------------
bool gt_VictoryKerrigan_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_victoryZergMiddle;

    // Automatic Variable Declarations
    const int auto2DB8FE6A_n = 4;
    int auto2DB8FE6A_i;
    const int auto8E5A0780_n = 12;
    int auto8E5A0780_i;
    unitgroup auto4E61E32C_g;
    int auto4E61E32C_u;
    unit auto4E61E32C_var;

    // Variable Initialization
    lv_victoryZergMiddle = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_CreateHero2(PointFromId(1245), gv_pLAYER_01_USER, libSwaC_ge_HeroUnit_Kerrigan, 45.0, 0, libSwaC_ge_KerriganCreatePurpose_Cinematic);
    gv_victoryKerrigan = UnitLastCreated();
    UnitSetState(gv_victoryKerrigan, c_unitStateFidget, false);
    UnitIssueOrder(gv_victoryKerrigan, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    for (auto2DB8FE6A_i = 1; auto2DB8FE6A_i <= auto2DB8FE6A_n; auto2DB8FE6A_i += 1) {
        UnitCreate(1, "Baneling", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(33)), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_victoryZergMiddle, UnitLastCreated());
    }
    for (auto8E5A0780_i = 1; auto8E5A0780_i <= auto8E5A0780_n; auto8E5A0780_i += 1) {
        UnitCreate(1, "Zergling", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(33)), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_victoryZergMiddle, UnitLastCreated());
    }
    Wait(7.0, c_timeGame);
    UnitBehaviorAdd(gv_victoryKerrigan, "KerriganWalk", gv_victoryKerrigan, 1);
    UnitIssueOrder(gv_victoryKerrigan, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1246)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    TriggerExecute(gt_VictroryDroppods, true, false);
    while (true) {
        auto4E61E32C_g = lv_victoryZergMiddle;
        auto4E61E32C_u = UnitGroupCount(auto4E61E32C_g, c_unitCountAll);
        for (;; auto4E61E32C_u -= 1) {
            auto4E61E32C_var = UnitGroupUnitFromEnd(auto4E61E32C_g, auto4E61E32C_u);
            if (auto4E61E32C_var == null) { break; }
            if ((RandomInt(1, 8) == 1)) {
                UnitIssueOrder(auto4E61E32C_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(33))), c_orderQueueReplace);
            }

        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryKerrigan_Init () {
    gt_VictoryKerrigan = TriggerCreate("gt_VictoryKerrigan_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victrory Droppods
//--------------------------------------------------------------------------------------------------
bool gt_VictroryDroppods_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_victoryZergLeft;
    unitgroup lv_victoryZergRight;

    // Automatic Variable Declarations
    const int autoC2BEEF06_n = 4;
    int autoC2BEEF06_i;
    const int autoC7E297B3_n = 2;
    int autoC7E297B3_i;
    const int auto09118086_n = 4;
    int auto09118086_i;
    const int autoB43B23C6_n = 2;
    int autoB43B23C6_i;
    unitgroup auto16972B2E_g;
    int auto16972B2E_u;
    unit auto16972B2E_var;
    unitgroup auto564A47C9_g;
    int auto564A47C9_u;
    unit auto564A47C9_var;

    // Variable Initialization
    lv_victoryZergLeft = UnitGroupEmpty();
    lv_victoryZergRight = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_CreateDropPod(libSwaC_ge_DropPodRace_Zerg, PointFromId(1874), UnitGroupEmpty(), false, gv_pLAYER_01_USER);
    Wait(1.0, c_timeGame);
    libSwaC_gf_CreateDropPod(libSwaC_ge_DropPodRace_Zerg, PointFromId(1875), UnitGroupEmpty(), false, gv_pLAYER_01_USER);
    Wait(1.7, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumorBurrowed", 0, gv_pLAYER_01_USER, PointFromId(1874));
    for (autoC2BEEF06_i = 1; autoC2BEEF06_i <= autoC2BEEF06_n; autoC2BEEF06_i += 1) {
        UnitCreate(1, "Zergling", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionCircle(PointFromId(1874), 1.0)), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_victoryZergLeft, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(23))), c_orderQueueReplace);
    }
    for (autoC7E297B3_i = 1; autoC7E297B3_i <= autoC7E297B3_n; autoC7E297B3_i += 1) {
        UnitCreate(1, "Baneling", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionCircle(PointFromId(1874), 1.0)), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_victoryZergLeft, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(23))), c_orderQueueReplace);
    }
    Wait(1.0, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumorBurrowed", 0, gv_pLAYER_01_USER, PointFromId(1875));
    for (auto09118086_i = 1; auto09118086_i <= auto09118086_n; auto09118086_i += 1) {
        UnitCreate(1, "Zergling", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionCircle(PointFromId(1875), 1.0)), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_victoryZergRight, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(31))), c_orderQueueReplace);
    }
    for (autoB43B23C6_i = 1; autoB43B23C6_i <= autoB43B23C6_n; autoB43B23C6_i += 1) {
        UnitCreate(1, "Baneling", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionCircle(PointFromId(1875), 1.0)), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_victoryZergRight, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(31))), c_orderQueueReplace);
    }
    while (true) {
        Wait(1.0, c_timeGame);
        auto16972B2E_g = lv_victoryZergLeft;
        auto16972B2E_u = UnitGroupCount(auto16972B2E_g, c_unitCountAll);
        for (;; auto16972B2E_u -= 1) {
            auto16972B2E_var = UnitGroupUnitFromEnd(auto16972B2E_g, auto16972B2E_u);
            if (auto16972B2E_var == null) { break; }
            if ((RandomInt(1, 8) == 1)) {
                UnitIssueOrder(auto16972B2E_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(23))), c_orderQueueReplace);
            }

        }
        auto564A47C9_g = lv_victoryZergRight;
        auto564A47C9_u = UnitGroupCount(auto564A47C9_g, c_unitCountAll);
        for (;; auto564A47C9_u -= 1) {
            auto564A47C9_var = UnitGroupUnitFromEnd(auto564A47C9_g, auto564A47C9_u);
            if (auto564A47C9_var == null) { break; }
            if ((RandomInt(1, 8) == 1)) {
                UnitIssueOrder(auto564A47C9_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(31))), c_orderQueueReplace);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictroryDroppods_Init () {
    gt_VictroryDroppods = TriggerCreate("gt_VictroryDroppods_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cameras
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCameras_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1244), 12.0, -1, 10.0, true);
    Wait(13.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1247), 10.0, -1, 10.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCameras_Init () {
    gt_VictoryCameras = TriggerCreate("gt_VictoryCameras_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init03aScourgeNests_Init();
    gt_Init04MusicSound_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_PrepareKerriganRevive_Init();
    gt_StartGameQ_Init();
    gt_BonusObjectiveRevealQ_Init();
    gt_TeachCreepTumor_Init();
    gt_ScourgeNestCycle_Init();
    gt_ScourgeNestVisualUpdate_Init();
    gt_ScourgeNestTumorDeath_Init();
    gt_ScourgeNestContructionStarted_Init();
    gt_ScourgeNestContructionCompleted_Init();
    gt_CreepTumorTargetCursorEnter_Init();
    gt_CreepTumorTargetCursorLeave_Init();
    gt_GorgonClosetoBase_Init();
    gt_GorgonProximityWARNING_Init();
    gt_GorgonProximityWarningQ_Init();
    gt_TransmissionGorgonCloseQ_Init();
    gt_GorgonLaunchSchedule_Init();
    gt_GorgonLaunchPlay_Init();
    gt_GorgonFirstCruiser01_Init();
    gt_GorgonFirstCruiser02_Init();
    gt_TransmissionGorgonCreatedQ_Init();
    gt_GorgonAIStarted_Init();
    gt_GorgonAIEnd_Init();
    gt_GorgonAI_Init();
    gt_GorgonDestroyed_Init();
    gt_TransmissionGorgonDestroyedQ_Init();
    gt_StartFirebatAttacks_Init();
    gt_ZergRescueTop_Init();
    gt_ZergRescueCenter_Init();
    gt_ZergRescueBottom_Init();
    gt_QueenRescue01_Init();
    gt_QueenRescue02_Init();
    gt_SendTransmissionQueenThanksYouQ_Init();
    gt_FirebatAttacked_Init();
    gt_SiegeTankEntersSiegeMode_Init();
    gt_CenterDropPods_Init();
    gt_RavenTumorHunterForce_Init();
    gt_TransmissionDominionRavenQ_Init();
    gt_SetLastScourgeNest_Init();
    gt_DropFinalPods_Init();
    gt_TransmissionFinalDropPodsQ_Init();
    gt_StartAI_Init();
    gt_StartUpgradesHard_Init();
    gt_AIGiveMinerals_Init();
    gt_AIGiveGas_Init();
    gt_TipMissionHelpQ_Init();
    gt_TransmissionScourgeNestActivatedQ_Init();
    gt_TransmissionFirstScourgeNestQ_Init();
    gt_TransmissionAttackWaveScourgeNestTargetQ_Init();
    gt_SendTransmissionQueenThanksYouQ2_Init();
    gt_TransmissionZergBiomassFoundQ_Init();
    gt_TransmissionFirebatsIntroQ_Init();
    gt_TransmissionSupplylineBreakersQ_Init();
    gt_TransmissionNorthDropPodsQ_Init();
    gt_VictorySequence_Init();
    gt_DefeatBaseDead_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_AchievementUnitsLosttoGorgon_Init();
    gt_AchievementDestroyOrbitalCommandsNH_Init();
    gt_AchievementDestroyXGorgonsinYsecondsH_Init();
    gt_GorgonDestroyedforAchievement_Init();
    gt_UnitsLostToGorgon_Init();
    gt_LargestZergForce_Init();
    gt_ObjectiveDestroyGorgonsCreate_Init();
    gt_ObjectiveDestroyGorgonsUpdate_Init();
    gt_ObjectiveDestroyGorgonsComplete_Init();
    gt_ObjectiveActivateScourgeNestCreate_Init();
    gt_ObjectiveActivateScourgeNestUpdate_Init();
    gt_ObjectiveActivateScourgeNestComplete_Init();
    gt_ObjectiveFindZergBiomassCreate_Init();
    gt_ObjectiveFindZergBiomassUpdate_Init();
    gt_ObjectiveFindZergBiomassComplete_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_IntroZerg_Init();
    gt_IntroExplosions_Init();
    gt_IntroZergBase_Init();
    gt_IntroGorgonLaunch_Init();
    gt_IntroMusic1_Init();
    gt_IntroMusic2_Init();
    gt_MidQ_Init();
    gt_MidSetup_Init();
    gt_MidCinematic_Init();
    gt_MidCinematicEnd_Init();
    gt_MidCleanup_Init();
    gt_MidScourgeNestAttack_Init();
    gt_MidMusic_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
    gt_VictoryDominion_Init();
    gt_VictoryDominionRetreat_Init();
    gt_VictoryKerrigan_Init();
    gt_VictroryDroppods_Init();
    gt_VictoryCameras_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}
