//==================================================================================================
// 
// Generated AI Script
// 
// AI Name: P02 - Red
// 
//==================================================================================================
include "TriggerLibs/natives"
include "TriggerLibs/AI"
include "TriggerLibs/Computer"

//--------------------------------------------------------------------------------------------------
// Globals
//--------------------------------------------------------------------------------------------------
point[17] aiEC423AC6_defGather;
string[17] aiEC423AC6_customData;
wave[17] aiEC423AC6_lastWave;

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiEC423AC6_wave1_enabled;
wave[17] aiEC423AC6_wave1_lastWave;
trigger aiEC423AC6_wave1_trigger = null;
int aiEC423AC6_wave1_runPlayer;
playergroup aiEC423AC6_wave1_runTarget;

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave1_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiEC423AC6_wave1_enabled[init_i] = true;
        aiEC423AC6_wave1_lastWave[init_i] = null;
    }

    aiEC423AC6_wave1_trigger = TriggerCreate("aiEC423AC6_wave1_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave1_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiEC423AC6_wave1_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave1_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiEC423AC6_wave1_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiEC423AC6_wave1_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiEC423AC6_wave1_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave1_runFunc (bool c, bool a) {
    int p = aiEC423AC6_wave1_runPlayer;
    playergroup target = aiEC423AC6_wave1_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiEC423AC6_wave1_enabled[p]) {
        td = 0;
        if (d == 1) { td = 270; }
        if (d == 2) { td = 270; }
        if (d == 3) { td = 270; }
        if (d == 4) { td = 270; }
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiEC423AC6_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 270; }
    if (d == 2) { ta = 270; }
    if (d == 3) { ta = 270; }
    if (d == 4) { ta = 270; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(1077));

    gatherPoint = aiEC423AC6_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(579), false);
    AIAttackWaveAddWaypoint(p, PointFromId(578), false);

    AIAttackWaveAddUnits(2, 6, "MengskMarine");
    AIAttackWaveAddUnits(3, 6, "MengskMarine");
    AIAttackWaveAddUnits(4, 8, "MengskMarine");
    AIAttackWaveAddUnits(5, 8, "MengskMarine");

    AIAttackWaveAddUnits(2, 2, "MengskMedic");
    AIAttackWaveAddUnits(3, 2, "MengskMedic");
    AIAttackWaveAddUnits(4, 3, "MengskMedic");
    AIAttackWaveAddUnits(5, 3, "MengskMedic");

    AIAttackWaveAddUnits(2, 3, "MengskMarauder");
    AIAttackWaveAddUnits(3, 3, "MengskMarauder");
    AIAttackWaveAddUnits(4, 4, "MengskMarauder");
    AIAttackWaveAddUnits(5, 4, "MengskMarauder");

    AIAttackWaveSend(p, ts, false);
    aiEC423AC6_wave1_lastWave[p] = WaveLastCreated();
    aiEC423AC6_lastWave[p] = aiEC423AC6_wave1_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave1_run (int p, playergroup target, bool wait) {
    aiEC423AC6_wave1_runPlayer = p;
    aiEC423AC6_wave1_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiEC423AC6_wave1_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiEC423AC6_wave13_enabled;
wave[17] aiEC423AC6_wave13_lastWave;
trigger aiEC423AC6_wave13_trigger = null;
int aiEC423AC6_wave13_runPlayer;
playergroup aiEC423AC6_wave13_runTarget;

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave13_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiEC423AC6_wave13_enabled[init_i] = true;
        aiEC423AC6_wave13_lastWave[init_i] = null;
    }

    aiEC423AC6_wave13_trigger = TriggerCreate("aiEC423AC6_wave13_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave13_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiEC423AC6_wave13_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave13_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiEC423AC6_wave13_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiEC423AC6_wave13_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiEC423AC6_wave13_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave13_runFunc (bool c, bool a) {
    int p = aiEC423AC6_wave13_runPlayer;
    playergroup target = aiEC423AC6_wave13_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiEC423AC6_wave13_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiEC423AC6_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 126; }
    if (d == 2) { ta = 126; }
    if (d == 3) { ta = 126; }
    if (d == 4) { ta = 126; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(2));

    gatherPoint = aiEC423AC6_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    AIAttackWaveAddUnits(2, 6, "MengskMarine");
    AIAttackWaveAddUnits(3, 6, "MengskMarine");
    AIAttackWaveAddUnits(4, 8, "MengskMarine");
    AIAttackWaveAddUnits(5, 8, "MengskMarine");

    AIAttackWaveAddUnits(2, 2, "WarHound");
    AIAttackWaveAddUnits(3, 2, "WarHound");
    AIAttackWaveAddUnits(4, 2, "WarHound");
    AIAttackWaveAddUnits(5, 2, "WarHound");

    AIAttackWaveSend(p, ts, false);
    aiEC423AC6_wave13_lastWave[p] = WaveLastCreated();
    aiEC423AC6_lastWave[p] = aiEC423AC6_wave13_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave13_run (int p, playergroup target, bool wait) {
    aiEC423AC6_wave13_runPlayer = p;
    aiEC423AC6_wave13_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiEC423AC6_wave13_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiEC423AC6_wave15_enabled;
wave[17] aiEC423AC6_wave15_lastWave;
trigger aiEC423AC6_wave15_trigger = null;
int aiEC423AC6_wave15_runPlayer;
playergroup aiEC423AC6_wave15_runTarget;

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave15_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiEC423AC6_wave15_enabled[init_i] = true;
        aiEC423AC6_wave15_lastWave[init_i] = null;
    }

    aiEC423AC6_wave15_trigger = TriggerCreate("aiEC423AC6_wave15_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave15_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiEC423AC6_wave15_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave15_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiEC423AC6_wave15_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiEC423AC6_wave15_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiEC423AC6_wave15_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave15_runFunc (bool c, bool a) {
    int p = aiEC423AC6_wave15_runPlayer;
    playergroup target = aiEC423AC6_wave15_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiEC423AC6_wave15_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiEC423AC6_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 276; }
    if (d == 2) { ta = 276; }
    if (d == 3) { ta = 276; }
    if (d == 4) { ta = 276; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(2));

    gatherPoint = aiEC423AC6_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    AIAttackWaveAddUnits(2, 6, "MengskMarine");
    AIAttackWaveAddUnits(3, 6, "MengskMarine");
    AIAttackWaveAddUnits(4, 8, "MengskMarine");
    AIAttackWaveAddUnits(5, 8, "MengskMarine");

    AIAttackWaveAddUnits(2, 2, "MengskMarauder");
    AIAttackWaveAddUnits(3, 2, "MengskMarauder");
    AIAttackWaveAddUnits(4, 3, "MengskMarauder");
    AIAttackWaveAddUnits(5, 3, "MengskMarauder");

    AIAttackWaveSend(p, ts, false);
    aiEC423AC6_wave15_lastWave[p] = WaveLastCreated();
    aiEC423AC6_lastWave[p] = aiEC423AC6_wave15_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave15_run (int p, playergroup target, bool wait) {
    aiEC423AC6_wave15_runPlayer = p;
    aiEC423AC6_wave15_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiEC423AC6_wave15_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiEC423AC6_wave9_enabled;
wave[17] aiEC423AC6_wave9_lastWave;
trigger aiEC423AC6_wave9_trigger = null;
int aiEC423AC6_wave9_runPlayer;
playergroup aiEC423AC6_wave9_runTarget;

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave9_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiEC423AC6_wave9_enabled[init_i] = true;
        aiEC423AC6_wave9_lastWave[init_i] = null;
    }

    aiEC423AC6_wave9_trigger = TriggerCreate("aiEC423AC6_wave9_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave9_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiEC423AC6_wave9_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave9_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiEC423AC6_wave9_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiEC423AC6_wave9_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiEC423AC6_wave9_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave9_runFunc (bool c, bool a) {
    int p = aiEC423AC6_wave9_runPlayer;
    playergroup target = aiEC423AC6_wave9_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiEC423AC6_wave9_enabled[p]) {
        td = 0;
        if (d == 1) { td = 300; }
        if (d == 2) { td = 300; }
        if (d == 3) { td = 300; }
        if (d == 4) { td = 300; }
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiEC423AC6_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 300; }
    if (d == 2) { ta = 300; }
    if (d == 3) { ta = 300; }
    if (d == 4) { ta = 300; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(1077));

    gatherPoint = aiEC423AC6_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(732), false);
    AIAttackWaveAddWaypoint(p, PointFromId(422), false);

    AIAttackWaveAddUnits(2, 6, "MengskReaper");
    AIAttackWaveAddUnits(3, 6, "MengskReaper");
    AIAttackWaveAddUnits(4, 8, "MengskReaper");
    AIAttackWaveAddUnits(5, 8, "MengskReaper");

    AIAttackWaveAddUnits(2, 4, "MengskHellion");
    AIAttackWaveAddUnits(3, 4, "MengskHellion");
    AIAttackWaveAddUnits(4, 6, "MengskHellion");
    AIAttackWaveAddUnits(5, 6, "MengskHellion");

    AIAttackWaveSend(p, ts, false);
    aiEC423AC6_wave9_lastWave[p] = WaveLastCreated();
    aiEC423AC6_lastWave[p] = aiEC423AC6_wave9_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave9_run (int p, playergroup target, bool wait) {
    aiEC423AC6_wave9_runPlayer = p;
    aiEC423AC6_wave9_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiEC423AC6_wave9_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: Wave 5 - SKY FURY
//--------------------------------------------------------------------------------------------------
bool[17] aiEC423AC6_wave14_enabled;
wave[17] aiEC423AC6_wave14_lastWave;
trigger aiEC423AC6_wave14_trigger = null;
int aiEC423AC6_wave14_runPlayer;
playergroup aiEC423AC6_wave14_runTarget;

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave14_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiEC423AC6_wave14_enabled[init_i] = true;
        aiEC423AC6_wave14_lastWave[init_i] = null;
    }

    aiEC423AC6_wave14_trigger = TriggerCreate("aiEC423AC6_wave14_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave14_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiEC423AC6_wave14_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave14_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiEC423AC6_wave14_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiEC423AC6_wave14_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiEC423AC6_wave14_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave14_runFunc (bool c, bool a) {
    int p = aiEC423AC6_wave14_runPlayer;
    playergroup target = aiEC423AC6_wave14_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiEC423AC6_wave14_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiEC423AC6_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 426; }
    if (d == 2) { ta = 426; }
    if (d == 3) { ta = 426; }
    if (d == 4) { ta = 426; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(2));

    gatherPoint = aiEC423AC6_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    AIAttackWaveAddUnits(2, 14, "MengskVikingFighter");
    AIAttackWaveAddUnits(3, 14, "MengskVikingFighter");
    AIAttackWaveAddUnits(4, 16, "MengskVikingFighter");
    AIAttackWaveAddUnits(5, 16, "MengskVikingFighter");

    AIAttackWaveAddUnits(2, 2, "MengskBanshee");
    AIAttackWaveAddUnits(3, 2, "MengskBanshee");
    AIAttackWaveAddUnits(4, 4, "MengskBanshee");
    AIAttackWaveAddUnits(5, 4, "MengskBanshee");

    AIAttackWaveSend(p, ts, false);
    aiEC423AC6_wave14_lastWave[p] = WaveLastCreated();
    aiEC423AC6_lastWave[p] = aiEC423AC6_wave14_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave14_run (int p, playergroup target, bool wait) {
    aiEC423AC6_wave14_runPlayer = p;
    aiEC423AC6_wave14_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiEC423AC6_wave14_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiEC423AC6_wave16_enabled;
wave[17] aiEC423AC6_wave16_lastWave;
trigger aiEC423AC6_wave16_trigger = null;
int aiEC423AC6_wave16_runPlayer;
playergroup aiEC423AC6_wave16_runTarget;

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave16_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiEC423AC6_wave16_enabled[init_i] = true;
        aiEC423AC6_wave16_lastWave[init_i] = null;
    }

    aiEC423AC6_wave16_trigger = TriggerCreate("aiEC423AC6_wave16_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave16_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiEC423AC6_wave16_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave16_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiEC423AC6_wave16_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiEC423AC6_wave16_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiEC423AC6_wave16_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave16_runFunc (bool c, bool a) {
    int p = aiEC423AC6_wave16_runPlayer;
    playergroup target = aiEC423AC6_wave16_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiEC423AC6_wave16_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiEC423AC6_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 152; }
    if (d == 2) { ta = 152; }
    if (d == 3) { ta = 152; }
    if (d == 4) { ta = 152; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(2));

    gatherPoint = aiEC423AC6_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    AIAttackWaveAddUnits(2, 8, "MengskMarine");
    AIAttackWaveAddUnits(3, 8, "MengskMarine");
    AIAttackWaveAddUnits(4, 10, "MengskMarine");
    AIAttackWaveAddUnits(5, 10, "MengskMarine");

    AIAttackWaveAddUnits(2, 2, "MengskMarauder");
    AIAttackWaveAddUnits(3, 2, "MengskMarauder");
    AIAttackWaveAddUnits(4, 3, "MengskMarauder");
    AIAttackWaveAddUnits(5, 3, "MengskMarauder");

    AIAttackWaveSend(p, ts, false);
    aiEC423AC6_wave16_lastWave[p] = WaveLastCreated();
    aiEC423AC6_lastWave[p] = aiEC423AC6_wave16_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave16_run (int p, playergroup target, bool wait) {
    aiEC423AC6_wave16_runPlayer = p;
    aiEC423AC6_wave16_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiEC423AC6_wave16_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiEC423AC6_wave6_enabled;
wave[17] aiEC423AC6_wave6_lastWave;
trigger aiEC423AC6_wave6_trigger = null;
int aiEC423AC6_wave6_runPlayer;
playergroup aiEC423AC6_wave6_runTarget;

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave6_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiEC423AC6_wave6_enabled[init_i] = true;
        aiEC423AC6_wave6_lastWave[init_i] = null;
    }

    aiEC423AC6_wave6_trigger = TriggerCreate("aiEC423AC6_wave6_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave6_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiEC423AC6_wave6_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave6_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiEC423AC6_wave6_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiEC423AC6_wave6_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiEC423AC6_wave6_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave6_runFunc (bool c, bool a) {
    int p = aiEC423AC6_wave6_runPlayer;
    playergroup target = aiEC423AC6_wave6_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiEC423AC6_wave6_enabled[p]) {
        td = 0;
        if (d == 1) { td = 176; }
        if (d == 2) { td = 176; }
        if (d == 3) { td = 176; }
        if (d == 4) { td = 176; }
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiEC423AC6_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 176; }
    if (d == 2) { ta = 176; }
    if (d == 3) { ta = 176; }
    if (d == 4) { ta = 176; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(1077));

    gatherPoint = aiEC423AC6_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(579), false);
    AIAttackWaveAddWaypoint(p, PointFromId(578), false);

    AIAttackWaveAddUnits(2, 2, "MengskSiegeTank");
    AIAttackWaveAddUnits(3, 2, "MengskSiegeTank");
    AIAttackWaveAddUnits(4, 3, "MengskSiegeTank");
    AIAttackWaveAddUnits(5, 3, "MengskSiegeTank");

    AIAttackWaveAddUnits(2, 3, "MengskGoliath");
    AIAttackWaveAddUnits(3, 3, "MengskGoliath");
    AIAttackWaveAddUnits(4, 4, "MengskGoliath");
    AIAttackWaveAddUnits(5, 4, "MengskGoliath");

    AIAttackWaveSend(p, ts, false);
    aiEC423AC6_wave6_lastWave[p] = WaveLastCreated();
    aiEC423AC6_lastWave[p] = aiEC423AC6_wave6_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave6_run (int p, playergroup target, bool wait) {
    aiEC423AC6_wave6_runPlayer = p;
    aiEC423AC6_wave6_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiEC423AC6_wave6_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: Wave 8 - ALPHA SQUADRON
//--------------------------------------------------------------------------------------------------
bool[17] aiEC423AC6_wave17_enabled;
wave[17] aiEC423AC6_wave17_lastWave;
trigger aiEC423AC6_wave17_trigger = null;
int aiEC423AC6_wave17_runPlayer;
playergroup aiEC423AC6_wave17_runTarget;

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave17_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiEC423AC6_wave17_enabled[init_i] = true;
        aiEC423AC6_wave17_lastWave[init_i] = null;
    }

    aiEC423AC6_wave17_trigger = TriggerCreate("aiEC423AC6_wave17_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave17_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiEC423AC6_wave17_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave17_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiEC423AC6_wave17_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiEC423AC6_wave17_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiEC423AC6_wave17_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave17_runFunc (bool c, bool a) {
    int p = aiEC423AC6_wave17_runPlayer;
    playergroup target = aiEC423AC6_wave17_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiEC423AC6_wave17_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiEC423AC6_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 332; }
    if (d == 2) { ta = 332; }
    if (d == 3) { ta = 332; }
    if (d == 4) { ta = 332; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(2));

    gatherPoint = aiEC423AC6_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    AIAttackWaveAddUnits(2, 4, "MengskSiegeTank");
    AIAttackWaveAddUnits(3, 4, "MengskSiegeTank");
    AIAttackWaveAddUnits(4, 6, "MengskSiegeTank");
    AIAttackWaveAddUnits(5, 6, "MengskSiegeTank");

    AIAttackWaveAddUnits(2, 2, "MengskBC");
    AIAttackWaveAddUnits(3, 2, "MengskBC");
    AIAttackWaveAddUnits(4, 3, "MengskBC");
    AIAttackWaveAddUnits(5, 3, "MengskBC");

    AIAttackWaveAddUnits(2, 12, "MengskMarine");
    AIAttackWaveAddUnits(3, 12, "MengskMarine");
    AIAttackWaveAddUnits(4, 16, "MengskMarine");
    AIAttackWaveAddUnits(5, 16, "MengskMarine");

    AIAttackWaveSend(p, ts, false);
    aiEC423AC6_wave17_lastWave[p] = WaveLastCreated();
    aiEC423AC6_lastWave[p] = aiEC423AC6_wave17_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave17_run (int p, playergroup target, bool wait) {
    aiEC423AC6_wave17_runPlayer = p;
    aiEC423AC6_wave17_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiEC423AC6_wave17_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiEC423AC6_wave18_enabled;
wave[17] aiEC423AC6_wave18_lastWave;
trigger aiEC423AC6_wave18_trigger = null;
int aiEC423AC6_wave18_runPlayer;
playergroup aiEC423AC6_wave18_runTarget;

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave18_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiEC423AC6_wave18_enabled[init_i] = true;
        aiEC423AC6_wave18_lastWave[init_i] = null;
    }

    aiEC423AC6_wave18_trigger = TriggerCreate("aiEC423AC6_wave18_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave18_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiEC423AC6_wave18_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave18_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiEC423AC6_wave18_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiEC423AC6_wave18_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiEC423AC6_wave18_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave18_runFunc (bool c, bool a) {
    int p = aiEC423AC6_wave18_runPlayer;
    playergroup target = aiEC423AC6_wave18_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiEC423AC6_wave18_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiEC423AC6_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 120; }
    if (d == 2) { ta = 120; }
    if (d == 3) { ta = 120; }
    if (d == 4) { ta = 120; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(2));

    gatherPoint = aiEC423AC6_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    AIAttackWaveAddUnits(2, 8, "MengskMarine");
    AIAttackWaveAddUnits(3, 8, "MengskMarine");
    AIAttackWaveAddUnits(4, 8, "MengskMarine");
    AIAttackWaveAddUnits(5, 8, "MengskMarine");

    AIAttackWaveAddUnits(2, 2, "MengskGoliath");
    AIAttackWaveAddUnits(3, 2, "MengskGoliath");
    AIAttackWaveAddUnits(4, 3, "MengskGoliath");
    AIAttackWaveAddUnits(5, 3, "MengskGoliath");

    AIAttackWaveSend(p, ts, false);
    aiEC423AC6_wave18_lastWave[p] = WaveLastCreated();
    aiEC423AC6_lastWave[p] = aiEC423AC6_wave18_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave18_run (int p, playergroup target, bool wait) {
    aiEC423AC6_wave18_runPlayer = p;
    aiEC423AC6_wave18_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiEC423AC6_wave18_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiEC423AC6_wave5_enabled;
wave[17] aiEC423AC6_wave5_lastWave;
trigger aiEC423AC6_wave5_trigger = null;
int aiEC423AC6_wave5_runPlayer;
playergroup aiEC423AC6_wave5_runTarget;

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave5_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiEC423AC6_wave5_enabled[init_i] = true;
        aiEC423AC6_wave5_lastWave[init_i] = null;
    }

    aiEC423AC6_wave5_trigger = TriggerCreate("aiEC423AC6_wave5_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave5_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiEC423AC6_wave5_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave5_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiEC423AC6_wave5_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiEC423AC6_wave5_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiEC423AC6_wave5_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave5_runFunc (bool c, bool a) {
    int p = aiEC423AC6_wave5_runPlayer;
    playergroup target = aiEC423AC6_wave5_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiEC423AC6_wave5_enabled[p]) {
        td = 0;
        if (d == 1) { td = 144; }
        if (d == 2) { td = 144; }
        if (d == 3) { td = 144; }
        if (d == 4) { td = 144; }
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiEC423AC6_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 144; }
    if (d == 2) { ta = 144; }
    if (d == 3) { ta = 144; }
    if (d == 4) { ta = 144; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(1077));

    gatherPoint = aiEC423AC6_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(732), false);
    AIAttackWaveAddWaypoint(p, PointFromId(422), false);

    AIAttackWaveAddUnits(2, 3, "MengskVikingFighter");
    AIAttackWaveAddUnits(3, 3, "MengskVikingFighter");
    AIAttackWaveAddUnits(4, 5, "MengskVikingFighter");
    AIAttackWaveAddUnits(5, 5, "MengskVikingFighter");

    AIAttackWaveAddUnits(2, 2, "MengskBanshee");
    AIAttackWaveAddUnits(3, 2, "MengskBanshee");
    AIAttackWaveAddUnits(4, 3, "MengskBanshee");
    AIAttackWaveAddUnits(5, 3, "MengskBanshee");

    AIAttackWaveSend(p, ts, false);
    aiEC423AC6_wave5_lastWave[p] = WaveLastCreated();
    aiEC423AC6_lastWave[p] = aiEC423AC6_wave5_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave5_run (int p, playergroup target, bool wait) {
    aiEC423AC6_wave5_runPlayer = p;
    aiEC423AC6_wave5_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiEC423AC6_wave5_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiEC423AC6_wave19_enabled;
wave[17] aiEC423AC6_wave19_lastWave;
trigger aiEC423AC6_wave19_trigger = null;
int aiEC423AC6_wave19_runPlayer;
playergroup aiEC423AC6_wave19_runTarget;

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave19_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiEC423AC6_wave19_enabled[init_i] = true;
        aiEC423AC6_wave19_lastWave[init_i] = null;
    }

    aiEC423AC6_wave19_trigger = TriggerCreate("aiEC423AC6_wave19_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave19_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiEC423AC6_wave19_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave19_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiEC423AC6_wave19_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiEC423AC6_wave19_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiEC423AC6_wave19_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave19_runFunc (bool c, bool a) {
    int p = aiEC423AC6_wave19_runPlayer;
    playergroup target = aiEC423AC6_wave19_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiEC423AC6_wave19_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiEC423AC6_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 126; }
    if (d == 2) { ta = 126; }
    if (d == 3) { ta = 126; }
    if (d == 4) { ta = 126; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(2));

    gatherPoint = aiEC423AC6_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    AIAttackWaveAddUnits(2, 8, "MengskMarine");
    AIAttackWaveAddUnits(3, 8, "MengskMarine");
    AIAttackWaveAddUnits(4, 10, "MengskMarine");
    AIAttackWaveAddUnits(5, 10, "MengskMarine");

    AIAttackWaveAddUnits(2, 1, "MengskThor");
    AIAttackWaveAddUnits(3, 1, "MengskThor");
    AIAttackWaveAddUnits(4, 2, "MengskThor");
    AIAttackWaveAddUnits(5, 2, "MengskThor");

    AIAttackWaveSend(p, ts, false);
    aiEC423AC6_wave19_lastWave[p] = WaveLastCreated();
    aiEC423AC6_lastWave[p] = aiEC423AC6_wave19_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave19_run (int p, playergroup target, bool wait) {
    aiEC423AC6_wave19_runPlayer = p;
    aiEC423AC6_wave19_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiEC423AC6_wave19_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: Wave 11 - ODIN
//--------------------------------------------------------------------------------------------------
bool[17] aiEC423AC6_wave20_enabled;
wave[17] aiEC423AC6_wave20_lastWave;
trigger aiEC423AC6_wave20_trigger = null;
int aiEC423AC6_wave20_runPlayer;
playergroup aiEC423AC6_wave20_runTarget;

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave20_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiEC423AC6_wave20_enabled[init_i] = true;
        aiEC423AC6_wave20_lastWave[init_i] = null;
    }

    aiEC423AC6_wave20_trigger = TriggerCreate("aiEC423AC6_wave20_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave20_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiEC423AC6_wave20_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave20_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiEC423AC6_wave20_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiEC423AC6_wave20_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiEC423AC6_wave20_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave20_runFunc (bool c, bool a) {
    int p = aiEC423AC6_wave20_runPlayer;
    playergroup target = aiEC423AC6_wave20_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiEC423AC6_wave20_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiEC423AC6_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 276; }
    if (d == 2) { ta = 276; }
    if (d == 3) { ta = 276; }
    if (d == 4) { ta = 276; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(2));

    gatherPoint = aiEC423AC6_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(2634), false);
    AIAttackWaveAddWaypoint(p, PointFromId(2635), false);
    AIAttackWaveAddWaypoint(p, PointFromId(2636), false);

    AIAttackWaveAddUnits(2, 1, "Odin");
    AIAttackWaveAddUnits(3, 1, "Odin");
    AIAttackWaveAddUnits(4, 1, "Odin");
    AIAttackWaveAddUnits(5, 1, "Odin");

    AIAttackWaveAddUnits(2, 8, "MengskGoliath");
    AIAttackWaveAddUnits(3, 8, "MengskGoliath");
    AIAttackWaveAddUnits(4, 12, "MengskGoliath");
    AIAttackWaveAddUnits(5, 12, "MengskGoliath");

    AIAttackWaveAddUnits(2, 1, "MengskSiegeTank");
    AIAttackWaveAddUnits(3, 1, "MengskSiegeTank");
    AIAttackWaveAddUnits(4, 2, "MengskSiegeTank");
    AIAttackWaveAddUnits(5, 2, "MengskSiegeTank");

    AIAttackWaveAddUnits(2, 12, "MengskMarine");
    AIAttackWaveAddUnits(3, 12, "MengskMarine");
    AIAttackWaveAddUnits(4, 16, "MengskMarine");
    AIAttackWaveAddUnits(5, 16, "MengskMarine");

    AIAttackWaveSend(p, ts, false);
    aiEC423AC6_wave20_lastWave[p] = WaveLastCreated();
    aiEC423AC6_lastWave[p] = aiEC423AC6_wave20_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave20_run (int p, playergroup target, bool wait) {
    aiEC423AC6_wave20_runPlayer = p;
    aiEC423AC6_wave20_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiEC423AC6_wave20_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiEC423AC6_wave37_enabled;
wave[17] aiEC423AC6_wave37_lastWave;
trigger aiEC423AC6_wave37_trigger = null;
int aiEC423AC6_wave37_runPlayer;
playergroup aiEC423AC6_wave37_runTarget;

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave37_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiEC423AC6_wave37_enabled[init_i] = true;
        aiEC423AC6_wave37_lastWave[init_i] = null;
    }

    aiEC423AC6_wave37_trigger = TriggerCreate("aiEC423AC6_wave37_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave37_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiEC423AC6_wave37_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave37_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiEC423AC6_wave37_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiEC423AC6_wave37_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiEC423AC6_wave37_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave37_runFunc (bool c, bool a) {
    int p = aiEC423AC6_wave37_runPlayer;
    playergroup target = aiEC423AC6_wave37_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiEC423AC6_wave37_enabled[p]) {
        td = 0;
        if (d == 1) { td = 300; }
        if (d == 2) { td = 300; }
        if (d == 3) { td = 300; }
        if (d == 4) { td = 300; }
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiEC423AC6_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 300; }
    if (d == 2) { ta = 300; }
    if (d == 3) { ta = 300; }
    if (d == 4) { ta = 300; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(1077));

    gatherPoint = aiEC423AC6_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(579), false);
    AIAttackWaveAddWaypoint(p, PointFromId(578), false);

    AIAttackWaveAddUnits(2, 3, "VikingFighter");
    AIAttackWaveAddUnits(3, 3, "VikingFighter");
    AIAttackWaveAddUnits(4, 4, "VikingFighter");
    AIAttackWaveAddUnits(5, 4, "VikingFighter");

    AIAttackWaveAddUnits(2, 3, "MengskBanshee");
    AIAttackWaveAddUnits(3, 3, "MengskBanshee");
    AIAttackWaveAddUnits(4, 4, "MengskBanshee");
    AIAttackWaveAddUnits(5, 4, "MengskBanshee");

    AIAttackWaveSend(p, ts, false);
    aiEC423AC6_wave37_lastWave[p] = WaveLastCreated();
    aiEC423AC6_lastWave[p] = aiEC423AC6_wave37_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave37_run (int p, playergroup target, bool wait) {
    aiEC423AC6_wave37_runPlayer = p;
    aiEC423AC6_wave37_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiEC423AC6_wave37_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiEC423AC6_wave21_enabled;
wave[17] aiEC423AC6_wave21_lastWave;
trigger aiEC423AC6_wave21_trigger = null;
int aiEC423AC6_wave21_runPlayer;
playergroup aiEC423AC6_wave21_runTarget;

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave21_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiEC423AC6_wave21_enabled[init_i] = true;
        aiEC423AC6_wave21_lastWave[init_i] = null;
    }

    aiEC423AC6_wave21_trigger = TriggerCreate("aiEC423AC6_wave21_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave21_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiEC423AC6_wave21_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave21_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiEC423AC6_wave21_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiEC423AC6_wave21_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiEC423AC6_wave21_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave21_runFunc (bool c, bool a) {
    int p = aiEC423AC6_wave21_runPlayer;
    playergroup target = aiEC423AC6_wave21_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiEC423AC6_wave21_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiEC423AC6_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 126; }
    if (d == 2) { ta = 126; }
    if (d == 3) { ta = 126; }
    if (d == 4) { ta = 126; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(2));

    gatherPoint = aiEC423AC6_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    AIAttackWaveAddUnits(2, 8, "MengskMarine");
    AIAttackWaveAddUnits(3, 8, "MengskMarine");
    AIAttackWaveAddUnits(4, 10, "MengskMarine");
    AIAttackWaveAddUnits(5, 10, "MengskMarine");

    AIAttackWaveAddUnits(2, 2, "WarHound");
    AIAttackWaveAddUnits(3, 2, "WarHound");
    AIAttackWaveAddUnits(4, 2, "WarHound");
    AIAttackWaveAddUnits(5, 2, "WarHound");

    AIAttackWaveSend(p, ts, false);
    aiEC423AC6_wave21_lastWave[p] = WaveLastCreated();
    aiEC423AC6_lastWave[p] = aiEC423AC6_wave21_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave21_run (int p, playergroup target, bool wait) {
    aiEC423AC6_wave21_runPlayer = p;
    aiEC423AC6_wave21_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiEC423AC6_wave21_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiEC423AC6_wave22_enabled;
wave[17] aiEC423AC6_wave22_lastWave;
trigger aiEC423AC6_wave22_trigger = null;
int aiEC423AC6_wave22_runPlayer;
playergroup aiEC423AC6_wave22_runTarget;

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave22_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiEC423AC6_wave22_enabled[init_i] = true;
        aiEC423AC6_wave22_lastWave[init_i] = null;
    }

    aiEC423AC6_wave22_trigger = TriggerCreate("aiEC423AC6_wave22_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave22_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiEC423AC6_wave22_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave22_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiEC423AC6_wave22_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiEC423AC6_wave22_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiEC423AC6_wave22_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave22_runFunc (bool c, bool a) {
    int p = aiEC423AC6_wave22_runPlayer;
    playergroup target = aiEC423AC6_wave22_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiEC423AC6_wave22_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiEC423AC6_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 276; }
    if (d == 2) { ta = 276; }
    if (d == 3) { ta = 276; }
    if (d == 4) { ta = 276; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(2));

    gatherPoint = aiEC423AC6_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    AIAttackWaveAddUnits(2, 8, "MengskMarine");
    AIAttackWaveAddUnits(3, 8, "MengskMarine");
    AIAttackWaveAddUnits(4, 10, "MengskMarine");
    AIAttackWaveAddUnits(5, 10, "MengskMarine");

    AIAttackWaveAddUnits(2, 2, "MengskMarauder");
    AIAttackWaveAddUnits(3, 2, "MengskMarauder");
    AIAttackWaveAddUnits(4, 3, "MengskMarauder");
    AIAttackWaveAddUnits(5, 3, "MengskMarauder");

    AIAttackWaveSend(p, ts, false);
    aiEC423AC6_wave22_lastWave[p] = WaveLastCreated();
    aiEC423AC6_lastWave[p] = aiEC423AC6_wave22_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave22_run (int p, playergroup target, bool wait) {
    aiEC423AC6_wave22_runPlayer = p;
    aiEC423AC6_wave22_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiEC423AC6_wave22_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiEC423AC6_wave2_enabled;
wave[17] aiEC423AC6_wave2_lastWave;
trigger aiEC423AC6_wave2_trigger = null;
int aiEC423AC6_wave2_runPlayer;
playergroup aiEC423AC6_wave2_runTarget;

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave2_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiEC423AC6_wave2_enabled[init_i] = true;
        aiEC423AC6_wave2_lastWave[init_i] = null;
    }

    aiEC423AC6_wave2_trigger = TriggerCreate("aiEC423AC6_wave2_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave2_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiEC423AC6_wave2_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave2_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiEC423AC6_wave2_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiEC423AC6_wave2_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiEC423AC6_wave2_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave2_runFunc (bool c, bool a) {
    int p = aiEC423AC6_wave2_runPlayer;
    playergroup target = aiEC423AC6_wave2_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiEC423AC6_wave2_enabled[p]) {
        td = 0;
        if (d == 1) { td = 300; }
        if (d == 2) { td = 300; }
        if (d == 3) { td = 300; }
        if (d == 4) { td = 300; }
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiEC423AC6_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 300; }
    if (d == 2) { ta = 300; }
    if (d == 3) { ta = 300; }
    if (d == 4) { ta = 300; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(1077));

    gatherPoint = aiEC423AC6_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(532), false);
    AIAttackWaveAddWaypoint(p, PointFromId(49), false);

    AIAttackWaveAddUnits(2, 2, "MengskGoliath");
    AIAttackWaveAddUnits(3, 2, "MengskGoliath");
    AIAttackWaveAddUnits(4, 3, "MengskGoliath");
    AIAttackWaveAddUnits(5, 3, "MengskGoliath");

    AIAttackWaveAddUnits(2, 2, "MengskThor");
    AIAttackWaveAddUnits(3, 2, "MengskThor");
    AIAttackWaveAddUnits(4, 3, "MengskThor");
    AIAttackWaveAddUnits(5, 3, "MengskThor");

    AIAttackWaveSend(p, ts, false);
    aiEC423AC6_wave2_lastWave[p] = WaveLastCreated();
    aiEC423AC6_lastWave[p] = aiEC423AC6_wave2_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave2_run (int p, playergroup target, bool wait) {
    aiEC423AC6_wave2_runPlayer = p;
    aiEC423AC6_wave2_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiEC423AC6_wave2_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiEC423AC6_wave23_enabled;
wave[17] aiEC423AC6_wave23_lastWave;
trigger aiEC423AC6_wave23_trigger = null;
int aiEC423AC6_wave23_runPlayer;
playergroup aiEC423AC6_wave23_runTarget;

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave23_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiEC423AC6_wave23_enabled[init_i] = true;
        aiEC423AC6_wave23_lastWave[init_i] = null;
    }

    aiEC423AC6_wave23_trigger = TriggerCreate("aiEC423AC6_wave23_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave23_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiEC423AC6_wave23_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave23_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiEC423AC6_wave23_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiEC423AC6_wave23_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiEC423AC6_wave23_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave23_runFunc (bool c, bool a) {
    int p = aiEC423AC6_wave23_runPlayer;
    playergroup target = aiEC423AC6_wave23_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiEC423AC6_wave23_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiEC423AC6_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 126; }
    if (d == 2) { ta = 126; }
    if (d == 3) { ta = 126; }
    if (d == 4) { ta = 126; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(2));

    gatherPoint = aiEC423AC6_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    AIAttackWaveAddUnits(2, 8, "MengskMarine");
    AIAttackWaveAddUnits(3, 8, "MengskMarine");
    AIAttackWaveAddUnits(4, 10, "MengskMarine");
    AIAttackWaveAddUnits(5, 10, "MengskMarine");

    AIAttackWaveAddUnits(2, 2, "MengskMarauder");
    AIAttackWaveAddUnits(3, 2, "MengskMarauder");
    AIAttackWaveAddUnits(4, 3, "MengskMarauder");
    AIAttackWaveAddUnits(5, 3, "MengskMarauder");

    AIAttackWaveSend(p, ts, false);
    aiEC423AC6_wave23_lastWave[p] = WaveLastCreated();
    aiEC423AC6_lastWave[p] = aiEC423AC6_wave23_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave23_run (int p, playergroup target, bool wait) {
    aiEC423AC6_wave23_runPlayer = p;
    aiEC423AC6_wave23_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiEC423AC6_wave23_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiEC423AC6_wave24_enabled;
wave[17] aiEC423AC6_wave24_lastWave;
trigger aiEC423AC6_wave24_trigger = null;
int aiEC423AC6_wave24_runPlayer;
playergroup aiEC423AC6_wave24_runTarget;

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave24_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiEC423AC6_wave24_enabled[init_i] = true;
        aiEC423AC6_wave24_lastWave[init_i] = null;
    }

    aiEC423AC6_wave24_trigger = TriggerCreate("aiEC423AC6_wave24_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave24_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiEC423AC6_wave24_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave24_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiEC423AC6_wave24_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiEC423AC6_wave24_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiEC423AC6_wave24_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave24_runFunc (bool c, bool a) {
    int p = aiEC423AC6_wave24_runPlayer;
    playergroup target = aiEC423AC6_wave24_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiEC423AC6_wave24_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiEC423AC6_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 276; }
    if (d == 2) { ta = 276; }
    if (d == 3) { ta = 276; }
    if (d == 4) { ta = 276; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(2));

    gatherPoint = aiEC423AC6_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    AIAttackWaveAddUnits(2, 8, "MengskMarine");
    AIAttackWaveAddUnits(3, 8, "MengskMarine");
    AIAttackWaveAddUnits(4, 10, "MengskMarine");
    AIAttackWaveAddUnits(5, 10, "MengskMarine");

    AIAttackWaveAddUnits(2, 2, "WarHound");
    AIAttackWaveAddUnits(3, 2, "WarHound");
    AIAttackWaveAddUnits(4, 2, "WarHound");
    AIAttackWaveAddUnits(5, 2, "WarHound");

    AIAttackWaveSend(p, ts, false);
    aiEC423AC6_wave24_lastWave[p] = WaveLastCreated();
    aiEC423AC6_lastWave[p] = aiEC423AC6_wave24_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave24_run (int p, playergroup target, bool wait) {
    aiEC423AC6_wave24_runPlayer = p;
    aiEC423AC6_wave24_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiEC423AC6_wave24_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiEC423AC6_wave3_enabled;
wave[17] aiEC423AC6_wave3_lastWave;
trigger aiEC423AC6_wave3_trigger = null;
int aiEC423AC6_wave3_runPlayer;
playergroup aiEC423AC6_wave3_runTarget;

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave3_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiEC423AC6_wave3_enabled[init_i] = true;
        aiEC423AC6_wave3_lastWave[init_i] = null;
    }

    aiEC423AC6_wave3_trigger = TriggerCreate("aiEC423AC6_wave3_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave3_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiEC423AC6_wave3_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave3_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiEC423AC6_wave3_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiEC423AC6_wave3_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiEC423AC6_wave3_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave3_runFunc (bool c, bool a) {
    int p = aiEC423AC6_wave3_runPlayer;
    playergroup target = aiEC423AC6_wave3_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiEC423AC6_wave3_enabled[p]) {
        td = 0;
        if (d == 1) { td = 300; }
        if (d == 2) { td = 300; }
        if (d == 3) { td = 300; }
        if (d == 4) { td = 300; }
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiEC423AC6_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 300; }
    if (d == 2) { ta = 300; }
    if (d == 3) { ta = 300; }
    if (d == 4) { ta = 300; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(1077));

    gatherPoint = aiEC423AC6_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(579), false);
    AIAttackWaveAddWaypoint(p, PointFromId(578), false);

    AIAttackWaveAddUnits(2, 2, "MengskSiegeTank");
    AIAttackWaveAddUnits(3, 2, "MengskSiegeTank");
    AIAttackWaveAddUnits(4, 3, "MengskSiegeTank");
    AIAttackWaveAddUnits(5, 3, "MengskSiegeTank");

    AIAttackWaveAddUnits(2, 3, "WarHound");
    AIAttackWaveAddUnits(3, 3, "WarHound");
    AIAttackWaveAddUnits(4, 4, "WarHound");
    AIAttackWaveAddUnits(5, 4, "WarHound");

    AIAttackWaveSend(p, ts, false);
    aiEC423AC6_wave3_lastWave[p] = WaveLastCreated();
    aiEC423AC6_lastWave[p] = aiEC423AC6_wave3_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave3_run (int p, playergroup target, bool wait) {
    aiEC423AC6_wave3_runPlayer = p;
    aiEC423AC6_wave3_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiEC423AC6_wave3_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiEC423AC6_wave25_enabled;
wave[17] aiEC423AC6_wave25_lastWave;
trigger aiEC423AC6_wave25_trigger = null;
int aiEC423AC6_wave25_runPlayer;
playergroup aiEC423AC6_wave25_runTarget;

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave25_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiEC423AC6_wave25_enabled[init_i] = true;
        aiEC423AC6_wave25_lastWave[init_i] = null;
    }

    aiEC423AC6_wave25_trigger = TriggerCreate("aiEC423AC6_wave25_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave25_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiEC423AC6_wave25_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave25_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiEC423AC6_wave25_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiEC423AC6_wave25_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiEC423AC6_wave25_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave25_runFunc (bool c, bool a) {
    int p = aiEC423AC6_wave25_runPlayer;
    playergroup target = aiEC423AC6_wave25_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiEC423AC6_wave25_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiEC423AC6_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 126; }
    if (d == 2) { ta = 126; }
    if (d == 3) { ta = 126; }
    if (d == 4) { ta = 126; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(2));

    gatherPoint = aiEC423AC6_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    AIAttackWaveAddUnits(2, 8, "MengskMarine");
    AIAttackWaveAddUnits(3, 8, "MengskMarine");
    AIAttackWaveAddUnits(4, 10, "MengskMarine");
    AIAttackWaveAddUnits(5, 10, "MengskMarine");

    AIAttackWaveAddUnits(2, 2, "WarHound");
    AIAttackWaveAddUnits(3, 2, "WarHound");
    AIAttackWaveAddUnits(4, 2, "WarHound");
    AIAttackWaveAddUnits(5, 2, "WarHound");

    AIAttackWaveSend(p, ts, false);
    aiEC423AC6_wave25_lastWave[p] = WaveLastCreated();
    aiEC423AC6_lastWave[p] = aiEC423AC6_wave25_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave25_run (int p, playergroup target, bool wait) {
    aiEC423AC6_wave25_runPlayer = p;
    aiEC423AC6_wave25_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiEC423AC6_wave25_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiEC423AC6_wave26_enabled;
wave[17] aiEC423AC6_wave26_lastWave;
trigger aiEC423AC6_wave26_trigger = null;
int aiEC423AC6_wave26_runPlayer;
playergroup aiEC423AC6_wave26_runTarget;

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave26_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiEC423AC6_wave26_enabled[init_i] = true;
        aiEC423AC6_wave26_lastWave[init_i] = null;
    }

    aiEC423AC6_wave26_trigger = TriggerCreate("aiEC423AC6_wave26_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave26_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiEC423AC6_wave26_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave26_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiEC423AC6_wave26_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiEC423AC6_wave26_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiEC423AC6_wave26_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave26_runFunc (bool c, bool a) {
    int p = aiEC423AC6_wave26_runPlayer;
    playergroup target = aiEC423AC6_wave26_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiEC423AC6_wave26_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiEC423AC6_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 276; }
    if (d == 2) { ta = 276; }
    if (d == 3) { ta = 276; }
    if (d == 4) { ta = 276; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(2));

    gatherPoint = aiEC423AC6_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    AIAttackWaveAddUnits(2, 8, "MengskMarine");
    AIAttackWaveAddUnits(3, 8, "MengskMarine");
    AIAttackWaveAddUnits(4, 10, "MengskMarine");
    AIAttackWaveAddUnits(5, 10, "MengskMarine");

    AIAttackWaveAddUnits(2, 2, "MengskMarauder");
    AIAttackWaveAddUnits(3, 2, "MengskMarauder");
    AIAttackWaveAddUnits(4, 3, "MengskMarauder");
    AIAttackWaveAddUnits(5, 3, "MengskMarauder");

    AIAttackWaveSend(p, ts, false);
    aiEC423AC6_wave26_lastWave[p] = WaveLastCreated();
    aiEC423AC6_lastWave[p] = aiEC423AC6_wave26_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave26_run (int p, playergroup target, bool wait) {
    aiEC423AC6_wave26_runPlayer = p;
    aiEC423AC6_wave26_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiEC423AC6_wave26_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiEC423AC6_wave4_enabled;
wave[17] aiEC423AC6_wave4_lastWave;
trigger aiEC423AC6_wave4_trigger = null;
int aiEC423AC6_wave4_runPlayer;
playergroup aiEC423AC6_wave4_runTarget;

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave4_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiEC423AC6_wave4_enabled[init_i] = true;
        aiEC423AC6_wave4_lastWave[init_i] = null;
    }

    aiEC423AC6_wave4_trigger = TriggerCreate("aiEC423AC6_wave4_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave4_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiEC423AC6_wave4_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave4_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiEC423AC6_wave4_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiEC423AC6_wave4_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiEC423AC6_wave4_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave4_runFunc (bool c, bool a) {
    int p = aiEC423AC6_wave4_runPlayer;
    playergroup target = aiEC423AC6_wave4_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiEC423AC6_wave4_enabled[p]) {
        td = 0;
        if (d == 1) { td = 300; }
        if (d == 2) { td = 300; }
        if (d == 3) { td = 300; }
        if (d == 4) { td = 300; }
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiEC423AC6_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 300; }
    if (d == 2) { ta = 300; }
    if (d == 3) { ta = 300; }
    if (d == 4) { ta = 300; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(1077));

    gatherPoint = aiEC423AC6_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(732), false);
    AIAttackWaveAddWaypoint(p, PointFromId(422), false);

    AIAttackWaveAddUnits(2, 2, "MengskGoliath");
    AIAttackWaveAddUnits(3, 2, "MengskGoliath");
    AIAttackWaveAddUnits(4, 3, "MengskGoliath");
    AIAttackWaveAddUnits(5, 3, "MengskGoliath");

    AIAttackWaveAddUnits(2, 2, "MengskThor");
    AIAttackWaveAddUnits(3, 2, "MengskThor");
    AIAttackWaveAddUnits(4, 3, "MengskThor");
    AIAttackWaveAddUnits(5, 3, "MengskThor");

    AIAttackWaveSend(p, ts, false);
    aiEC423AC6_wave4_lastWave[p] = WaveLastCreated();
    aiEC423AC6_lastWave[p] = aiEC423AC6_wave4_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave4_run (int p, playergroup target, bool wait) {
    aiEC423AC6_wave4_runPlayer = p;
    aiEC423AC6_wave4_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiEC423AC6_wave4_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiEC423AC6_wave27_enabled;
wave[17] aiEC423AC6_wave27_lastWave;
trigger aiEC423AC6_wave27_trigger = null;
int aiEC423AC6_wave27_runPlayer;
playergroup aiEC423AC6_wave27_runTarget;

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave27_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiEC423AC6_wave27_enabled[init_i] = true;
        aiEC423AC6_wave27_lastWave[init_i] = null;
    }

    aiEC423AC6_wave27_trigger = TriggerCreate("aiEC423AC6_wave27_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave27_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiEC423AC6_wave27_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave27_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiEC423AC6_wave27_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiEC423AC6_wave27_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiEC423AC6_wave27_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave27_runFunc (bool c, bool a) {
    int p = aiEC423AC6_wave27_runPlayer;
    playergroup target = aiEC423AC6_wave27_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiEC423AC6_wave27_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiEC423AC6_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 126; }
    if (d == 2) { ta = 126; }
    if (d == 3) { ta = 126; }
    if (d == 4) { ta = 126; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(2));

    gatherPoint = aiEC423AC6_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    AIAttackWaveAddUnits(2, 8, "MengskMarine");
    AIAttackWaveAddUnits(3, 8, "MengskMarine");
    AIAttackWaveAddUnits(4, 10, "MengskMarine");
    AIAttackWaveAddUnits(5, 10, "MengskMarine");

    AIAttackWaveAddUnits(2, 2, "WarHound");
    AIAttackWaveAddUnits(3, 2, "WarHound");
    AIAttackWaveAddUnits(4, 2, "WarHound");
    AIAttackWaveAddUnits(5, 2, "WarHound");

    AIAttackWaveSend(p, ts, false);
    aiEC423AC6_wave27_lastWave[p] = WaveLastCreated();
    aiEC423AC6_lastWave[p] = aiEC423AC6_wave27_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave27_run (int p, playergroup target, bool wait) {
    aiEC423AC6_wave27_runPlayer = p;
    aiEC423AC6_wave27_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiEC423AC6_wave27_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiEC423AC6_wave28_enabled;
wave[17] aiEC423AC6_wave28_lastWave;
trigger aiEC423AC6_wave28_trigger = null;
int aiEC423AC6_wave28_runPlayer;
playergroup aiEC423AC6_wave28_runTarget;

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave28_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiEC423AC6_wave28_enabled[init_i] = true;
        aiEC423AC6_wave28_lastWave[init_i] = null;
    }

    aiEC423AC6_wave28_trigger = TriggerCreate("aiEC423AC6_wave28_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave28_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiEC423AC6_wave28_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave28_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiEC423AC6_wave28_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiEC423AC6_wave28_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiEC423AC6_wave28_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave28_runFunc (bool c, bool a) {
    int p = aiEC423AC6_wave28_runPlayer;
    playergroup target = aiEC423AC6_wave28_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiEC423AC6_wave28_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiEC423AC6_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 276; }
    if (d == 2) { ta = 276; }
    if (d == 3) { ta = 276; }
    if (d == 4) { ta = 276; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(2));

    gatherPoint = aiEC423AC6_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    AIAttackWaveAddUnits(2, 8, "MengskMarine");
    AIAttackWaveAddUnits(3, 8, "MengskMarine");
    AIAttackWaveAddUnits(4, 10, "MengskMarine");
    AIAttackWaveAddUnits(5, 10, "MengskMarine");

    AIAttackWaveAddUnits(2, 2, "MengskMarauder");
    AIAttackWaveAddUnits(3, 2, "MengskMarauder");
    AIAttackWaveAddUnits(4, 3, "MengskMarauder");
    AIAttackWaveAddUnits(5, 3, "MengskMarauder");

    AIAttackWaveSend(p, ts, false);
    aiEC423AC6_wave28_lastWave[p] = WaveLastCreated();
    aiEC423AC6_lastWave[p] = aiEC423AC6_wave28_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave28_run (int p, playergroup target, bool wait) {
    aiEC423AC6_wave28_runPlayer = p;
    aiEC423AC6_wave28_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiEC423AC6_wave28_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiEC423AC6_wave7_enabled;
wave[17] aiEC423AC6_wave7_lastWave;
trigger aiEC423AC6_wave7_trigger = null;
int aiEC423AC6_wave7_runPlayer;
playergroup aiEC423AC6_wave7_runTarget;

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave7_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiEC423AC6_wave7_enabled[init_i] = true;
        aiEC423AC6_wave7_lastWave[init_i] = null;
    }

    aiEC423AC6_wave7_trigger = TriggerCreate("aiEC423AC6_wave7_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave7_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiEC423AC6_wave7_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave7_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiEC423AC6_wave7_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiEC423AC6_wave7_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiEC423AC6_wave7_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave7_runFunc (bool c, bool a) {
    int p = aiEC423AC6_wave7_runPlayer;
    playergroup target = aiEC423AC6_wave7_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiEC423AC6_wave7_enabled[p]) {
        td = 0;
        if (d == 1) { td = 300; }
        if (d == 2) { td = 300; }
        if (d == 3) { td = 300; }
        if (d == 4) { td = 300; }
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiEC423AC6_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 300; }
    if (d == 2) { ta = 300; }
    if (d == 3) { ta = 300; }
    if (d == 4) { ta = 300; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(1077));

    gatherPoint = aiEC423AC6_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(578), false);

    AIAttackWaveAddUnits(2, 1, "MengskBC");
    AIAttackWaveAddUnits(3, 1, "MengskBC");
    AIAttackWaveAddUnits(4, 2, "MengskBC");
    AIAttackWaveAddUnits(5, 2, "MengskBC");

    AIAttackWaveAddUnits(2, 4, "MengskVikingFighter");
    AIAttackWaveAddUnits(3, 4, "MengskVikingFighter");
    AIAttackWaveAddUnits(4, 6, "MengskVikingFighter");
    AIAttackWaveAddUnits(5, 6, "MengskVikingFighter");

    AIAttackWaveSend(p, ts, false);
    aiEC423AC6_wave7_lastWave[p] = WaveLastCreated();
    aiEC423AC6_lastWave[p] = aiEC423AC6_wave7_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave7_run (int p, playergroup target, bool wait) {
    aiEC423AC6_wave7_runPlayer = p;
    aiEC423AC6_wave7_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiEC423AC6_wave7_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiEC423AC6_wave29_enabled;
wave[17] aiEC423AC6_wave29_lastWave;
trigger aiEC423AC6_wave29_trigger = null;
int aiEC423AC6_wave29_runPlayer;
playergroup aiEC423AC6_wave29_runTarget;

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave29_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiEC423AC6_wave29_enabled[init_i] = true;
        aiEC423AC6_wave29_lastWave[init_i] = null;
    }

    aiEC423AC6_wave29_trigger = TriggerCreate("aiEC423AC6_wave29_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave29_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiEC423AC6_wave29_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave29_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiEC423AC6_wave29_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiEC423AC6_wave29_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiEC423AC6_wave29_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave29_runFunc (bool c, bool a) {
    int p = aiEC423AC6_wave29_runPlayer;
    playergroup target = aiEC423AC6_wave29_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiEC423AC6_wave29_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiEC423AC6_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 126; }
    if (d == 2) { ta = 126; }
    if (d == 3) { ta = 126; }
    if (d == 4) { ta = 126; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(2));

    gatherPoint = aiEC423AC6_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    AIAttackWaveAddUnits(2, 8, "MengskMarine");
    AIAttackWaveAddUnits(3, 8, "MengskMarine");
    AIAttackWaveAddUnits(4, 10, "MengskMarine");
    AIAttackWaveAddUnits(5, 10, "MengskMarine");

    AIAttackWaveAddUnits(2, 2, "WarHound");
    AIAttackWaveAddUnits(3, 2, "WarHound");
    AIAttackWaveAddUnits(4, 2, "WarHound");
    AIAttackWaveAddUnits(5, 2, "WarHound");

    AIAttackWaveSend(p, ts, false);
    aiEC423AC6_wave29_lastWave[p] = WaveLastCreated();
    aiEC423AC6_lastWave[p] = aiEC423AC6_wave29_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave29_run (int p, playergroup target, bool wait) {
    aiEC423AC6_wave29_runPlayer = p;
    aiEC423AC6_wave29_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiEC423AC6_wave29_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiEC423AC6_wave30_enabled;
wave[17] aiEC423AC6_wave30_lastWave;
trigger aiEC423AC6_wave30_trigger = null;
int aiEC423AC6_wave30_runPlayer;
playergroup aiEC423AC6_wave30_runTarget;

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave30_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiEC423AC6_wave30_enabled[init_i] = true;
        aiEC423AC6_wave30_lastWave[init_i] = null;
    }

    aiEC423AC6_wave30_trigger = TriggerCreate("aiEC423AC6_wave30_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave30_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiEC423AC6_wave30_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave30_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiEC423AC6_wave30_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiEC423AC6_wave30_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiEC423AC6_wave30_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave30_runFunc (bool c, bool a) {
    int p = aiEC423AC6_wave30_runPlayer;
    playergroup target = aiEC423AC6_wave30_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiEC423AC6_wave30_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiEC423AC6_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 276; }
    if (d == 2) { ta = 276; }
    if (d == 3) { ta = 276; }
    if (d == 4) { ta = 276; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(2));

    gatherPoint = aiEC423AC6_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    AIAttackWaveAddUnits(2, 8, "MengskMarine");
    AIAttackWaveAddUnits(3, 8, "MengskMarine");
    AIAttackWaveAddUnits(4, 10, "MengskMarine");
    AIAttackWaveAddUnits(5, 10, "MengskMarine");

    AIAttackWaveAddUnits(2, 2, "MengskMarauder");
    AIAttackWaveAddUnits(3, 2, "MengskMarauder");
    AIAttackWaveAddUnits(4, 3, "MengskMarauder");
    AIAttackWaveAddUnits(5, 3, "MengskMarauder");

    AIAttackWaveSend(p, ts, false);
    aiEC423AC6_wave30_lastWave[p] = WaveLastCreated();
    aiEC423AC6_lastWave[p] = aiEC423AC6_wave30_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave30_run (int p, playergroup target, bool wait) {
    aiEC423AC6_wave30_runPlayer = p;
    aiEC423AC6_wave30_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiEC423AC6_wave30_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiEC423AC6_wave10_enabled;
wave[17] aiEC423AC6_wave10_lastWave;
trigger aiEC423AC6_wave10_trigger = null;
int aiEC423AC6_wave10_runPlayer;
playergroup aiEC423AC6_wave10_runTarget;

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave10_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiEC423AC6_wave10_enabled[init_i] = true;
        aiEC423AC6_wave10_lastWave[init_i] = null;
    }

    aiEC423AC6_wave10_trigger = TriggerCreate("aiEC423AC6_wave10_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave10_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiEC423AC6_wave10_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave10_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiEC423AC6_wave10_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiEC423AC6_wave10_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiEC423AC6_wave10_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave10_runFunc (bool c, bool a) {
    int p = aiEC423AC6_wave10_runPlayer;
    playergroup target = aiEC423AC6_wave10_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiEC423AC6_wave10_enabled[p]) {
        td = 0;
        if (d == 1) { td = 300; }
        if (d == 2) { td = 300; }
        if (d == 3) { td = 300; }
        if (d == 4) { td = 300; }
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiEC423AC6_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 300; }
    if (d == 2) { ta = 300; }
    if (d == 3) { ta = 300; }
    if (d == 4) { ta = 300; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(1077));

    gatherPoint = aiEC423AC6_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(532), false);
    AIAttackWaveAddWaypoint(p, PointFromId(49), false);

    AIAttackWaveAddUnits(2, 3, "MengskGoliath");
    AIAttackWaveAddUnits(3, 3, "MengskGoliath");
    AIAttackWaveAddUnits(4, 6, "MengskGoliath");
    AIAttackWaveAddUnits(5, 6, "MengskGoliath");

    AIAttackWaveAddUnits(2, 2, "MengskThor");
    AIAttackWaveAddUnits(3, 2, "MengskThor");
    AIAttackWaveAddUnits(4, 3, "MengskThor");
    AIAttackWaveAddUnits(5, 3, "MengskThor");

    AIAttackWaveSend(p, ts, false);
    aiEC423AC6_wave10_lastWave[p] = WaveLastCreated();
    aiEC423AC6_lastWave[p] = aiEC423AC6_wave10_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave10_run (int p, playergroup target, bool wait) {
    aiEC423AC6_wave10_runPlayer = p;
    aiEC423AC6_wave10_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiEC423AC6_wave10_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiEC423AC6_wave31_enabled;
wave[17] aiEC423AC6_wave31_lastWave;
trigger aiEC423AC6_wave31_trigger = null;
int aiEC423AC6_wave31_runPlayer;
playergroup aiEC423AC6_wave31_runTarget;

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave31_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiEC423AC6_wave31_enabled[init_i] = true;
        aiEC423AC6_wave31_lastWave[init_i] = null;
    }

    aiEC423AC6_wave31_trigger = TriggerCreate("aiEC423AC6_wave31_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave31_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiEC423AC6_wave31_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave31_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiEC423AC6_wave31_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiEC423AC6_wave31_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiEC423AC6_wave31_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave31_runFunc (bool c, bool a) {
    int p = aiEC423AC6_wave31_runPlayer;
    playergroup target = aiEC423AC6_wave31_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiEC423AC6_wave31_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiEC423AC6_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 126; }
    if (d == 2) { ta = 126; }
    if (d == 3) { ta = 126; }
    if (d == 4) { ta = 126; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(2));

    gatherPoint = aiEC423AC6_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    AIAttackWaveAddUnits(2, 8, "MengskMarine");
    AIAttackWaveAddUnits(3, 8, "MengskMarine");
    AIAttackWaveAddUnits(4, 10, "MengskMarine");
    AIAttackWaveAddUnits(5, 10, "MengskMarine");

    AIAttackWaveAddUnits(2, 2, "MengskMarauder");
    AIAttackWaveAddUnits(3, 2, "MengskMarauder");
    AIAttackWaveAddUnits(4, 3, "MengskMarauder");
    AIAttackWaveAddUnits(5, 3, "MengskMarauder");

    AIAttackWaveSend(p, ts, false);
    aiEC423AC6_wave31_lastWave[p] = WaveLastCreated();
    aiEC423AC6_lastWave[p] = aiEC423AC6_wave31_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave31_run (int p, playergroup target, bool wait) {
    aiEC423AC6_wave31_runPlayer = p;
    aiEC423AC6_wave31_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiEC423AC6_wave31_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiEC423AC6_wave32_enabled;
wave[17] aiEC423AC6_wave32_lastWave;
trigger aiEC423AC6_wave32_trigger = null;
int aiEC423AC6_wave32_runPlayer;
playergroup aiEC423AC6_wave32_runTarget;

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave32_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiEC423AC6_wave32_enabled[init_i] = true;
        aiEC423AC6_wave32_lastWave[init_i] = null;
    }

    aiEC423AC6_wave32_trigger = TriggerCreate("aiEC423AC6_wave32_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave32_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiEC423AC6_wave32_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave32_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiEC423AC6_wave32_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiEC423AC6_wave32_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiEC423AC6_wave32_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave32_runFunc (bool c, bool a) {
    int p = aiEC423AC6_wave32_runPlayer;
    playergroup target = aiEC423AC6_wave32_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiEC423AC6_wave32_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiEC423AC6_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 276; }
    if (d == 2) { ta = 276; }
    if (d == 3) { ta = 276; }
    if (d == 4) { ta = 276; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(2));

    gatherPoint = aiEC423AC6_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    AIAttackWaveAddUnits(2, 8, "MengskMarine");
    AIAttackWaveAddUnits(3, 8, "MengskMarine");
    AIAttackWaveAddUnits(4, 10, "MengskMarine");
    AIAttackWaveAddUnits(5, 10, "MengskMarine");

    AIAttackWaveAddUnits(2, 2, "WarHound");
    AIAttackWaveAddUnits(3, 2, "WarHound");
    AIAttackWaveAddUnits(4, 2, "WarHound");
    AIAttackWaveAddUnits(5, 2, "WarHound");

    AIAttackWaveSend(p, ts, false);
    aiEC423AC6_wave32_lastWave[p] = WaveLastCreated();
    aiEC423AC6_lastWave[p] = aiEC423AC6_wave32_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave32_run (int p, playergroup target, bool wait) {
    aiEC423AC6_wave32_runPlayer = p;
    aiEC423AC6_wave32_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiEC423AC6_wave32_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiEC423AC6_wave11_enabled;
wave[17] aiEC423AC6_wave11_lastWave;
trigger aiEC423AC6_wave11_trigger = null;
int aiEC423AC6_wave11_runPlayer;
playergroup aiEC423AC6_wave11_runTarget;

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave11_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiEC423AC6_wave11_enabled[init_i] = true;
        aiEC423AC6_wave11_lastWave[init_i] = null;
    }

    aiEC423AC6_wave11_trigger = TriggerCreate("aiEC423AC6_wave11_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave11_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiEC423AC6_wave11_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave11_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiEC423AC6_wave11_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiEC423AC6_wave11_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiEC423AC6_wave11_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave11_runFunc (bool c, bool a) {
    int p = aiEC423AC6_wave11_runPlayer;
    playergroup target = aiEC423AC6_wave11_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiEC423AC6_wave11_enabled[p]) {
        td = 0;
        if (d == 1) { td = 300; }
        if (d == 2) { td = 300; }
        if (d == 3) { td = 300; }
        if (d == 4) { td = 300; }
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiEC423AC6_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 300; }
    if (d == 2) { ta = 300; }
    if (d == 3) { ta = 300; }
    if (d == 4) { ta = 300; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(1077));

    gatherPoint = aiEC423AC6_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(579), false);
    AIAttackWaveAddWaypoint(p, PointFromId(578), false);

    AIAttackWaveAddUnits(2, 2, "MengskSiegeTank");
    AIAttackWaveAddUnits(3, 2, "MengskSiegeTank");
    AIAttackWaveAddUnits(4, 3, "MengskSiegeTank");
    AIAttackWaveAddUnits(5, 3, "MengskSiegeTank");

    AIAttackWaveAddUnits(2, 4, "WarHound");
    AIAttackWaveAddUnits(3, 4, "WarHound");
    AIAttackWaveAddUnits(4, 6, "WarHound");
    AIAttackWaveAddUnits(5, 6, "WarHound");

    AIAttackWaveSend(p, ts, false);
    aiEC423AC6_wave11_lastWave[p] = WaveLastCreated();
    aiEC423AC6_lastWave[p] = aiEC423AC6_wave11_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave11_run (int p, playergroup target, bool wait) {
    aiEC423AC6_wave11_runPlayer = p;
    aiEC423AC6_wave11_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiEC423AC6_wave11_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiEC423AC6_wave33_enabled;
wave[17] aiEC423AC6_wave33_lastWave;
trigger aiEC423AC6_wave33_trigger = null;
int aiEC423AC6_wave33_runPlayer;
playergroup aiEC423AC6_wave33_runTarget;

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave33_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiEC423AC6_wave33_enabled[init_i] = true;
        aiEC423AC6_wave33_lastWave[init_i] = null;
    }

    aiEC423AC6_wave33_trigger = TriggerCreate("aiEC423AC6_wave33_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave33_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiEC423AC6_wave33_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave33_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiEC423AC6_wave33_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiEC423AC6_wave33_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiEC423AC6_wave33_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave33_runFunc (bool c, bool a) {
    int p = aiEC423AC6_wave33_runPlayer;
    playergroup target = aiEC423AC6_wave33_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiEC423AC6_wave33_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiEC423AC6_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 126; }
    if (d == 2) { ta = 126; }
    if (d == 3) { ta = 126; }
    if (d == 4) { ta = 126; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(2));

    gatherPoint = aiEC423AC6_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    AIAttackWaveAddUnits(2, 8, "MengskMarine");
    AIAttackWaveAddUnits(3, 8, "MengskMarine");
    AIAttackWaveAddUnits(4, 10, "MengskMarine");
    AIAttackWaveAddUnits(5, 10, "MengskMarine");

    AIAttackWaveAddUnits(2, 2, "MengskMarauder");
    AIAttackWaveAddUnits(3, 2, "MengskMarauder");
    AIAttackWaveAddUnits(4, 3, "MengskMarauder");
    AIAttackWaveAddUnits(5, 3, "MengskMarauder");

    AIAttackWaveSend(p, ts, false);
    aiEC423AC6_wave33_lastWave[p] = WaveLastCreated();
    aiEC423AC6_lastWave[p] = aiEC423AC6_wave33_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave33_run (int p, playergroup target, bool wait) {
    aiEC423AC6_wave33_runPlayer = p;
    aiEC423AC6_wave33_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiEC423AC6_wave33_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiEC423AC6_wave34_enabled;
wave[17] aiEC423AC6_wave34_lastWave;
trigger aiEC423AC6_wave34_trigger = null;
int aiEC423AC6_wave34_runPlayer;
playergroup aiEC423AC6_wave34_runTarget;

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave34_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiEC423AC6_wave34_enabled[init_i] = true;
        aiEC423AC6_wave34_lastWave[init_i] = null;
    }

    aiEC423AC6_wave34_trigger = TriggerCreate("aiEC423AC6_wave34_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave34_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiEC423AC6_wave34_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave34_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiEC423AC6_wave34_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiEC423AC6_wave34_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiEC423AC6_wave34_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave34_runFunc (bool c, bool a) {
    int p = aiEC423AC6_wave34_runPlayer;
    playergroup target = aiEC423AC6_wave34_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiEC423AC6_wave34_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiEC423AC6_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 276; }
    if (d == 2) { ta = 276; }
    if (d == 3) { ta = 276; }
    if (d == 4) { ta = 276; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(2));

    gatherPoint = aiEC423AC6_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    AIAttackWaveAddUnits(2, 8, "MengskMarine");
    AIAttackWaveAddUnits(3, 8, "MengskMarine");
    AIAttackWaveAddUnits(4, 10, "MengskMarine");
    AIAttackWaveAddUnits(5, 10, "MengskMarine");

    AIAttackWaveAddUnits(2, 2, "WarHound");
    AIAttackWaveAddUnits(3, 2, "WarHound");
    AIAttackWaveAddUnits(4, 2, "WarHound");
    AIAttackWaveAddUnits(5, 2, "WarHound");

    AIAttackWaveSend(p, ts, false);
    aiEC423AC6_wave34_lastWave[p] = WaveLastCreated();
    aiEC423AC6_lastWave[p] = aiEC423AC6_wave34_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave34_run (int p, playergroup target, bool wait) {
    aiEC423AC6_wave34_runPlayer = p;
    aiEC423AC6_wave34_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiEC423AC6_wave34_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiEC423AC6_wave12_enabled;
wave[17] aiEC423AC6_wave12_lastWave;
trigger aiEC423AC6_wave12_trigger = null;
int aiEC423AC6_wave12_runPlayer;
playergroup aiEC423AC6_wave12_runTarget;

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave12_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiEC423AC6_wave12_enabled[init_i] = true;
        aiEC423AC6_wave12_lastWave[init_i] = null;
    }

    aiEC423AC6_wave12_trigger = TriggerCreate("aiEC423AC6_wave12_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave12_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiEC423AC6_wave12_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave12_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiEC423AC6_wave12_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiEC423AC6_wave12_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiEC423AC6_wave12_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave12_runFunc (bool c, bool a) {
    int p = aiEC423AC6_wave12_runPlayer;
    playergroup target = aiEC423AC6_wave12_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiEC423AC6_wave12_enabled[p]) {
        td = 0;
        if (d == 1) { td = 300; }
        if (d == 2) { td = 300; }
        if (d == 3) { td = 300; }
        if (d == 4) { td = 300; }
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiEC423AC6_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 300; }
    if (d == 2) { ta = 300; }
    if (d == 3) { ta = 300; }
    if (d == 4) { ta = 300; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(1077));

    gatherPoint = aiEC423AC6_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(732), false);
    AIAttackWaveAddWaypoint(p, PointFromId(422), false);

    AIAttackWaveAddUnits(2, 3, "MengskGoliath");
    AIAttackWaveAddUnits(3, 3, "MengskGoliath");
    AIAttackWaveAddUnits(4, 6, "MengskGoliath");
    AIAttackWaveAddUnits(5, 6, "MengskGoliath");

    AIAttackWaveAddUnits(2, 2, "MengskThor");
    AIAttackWaveAddUnits(3, 2, "MengskThor");
    AIAttackWaveAddUnits(4, 3, "MengskThor");
    AIAttackWaveAddUnits(5, 3, "MengskThor");

    AIAttackWaveSend(p, ts, false);
    aiEC423AC6_wave12_lastWave[p] = WaveLastCreated();
    aiEC423AC6_lastWave[p] = aiEC423AC6_wave12_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave12_run (int p, playergroup target, bool wait) {
    aiEC423AC6_wave12_runPlayer = p;
    aiEC423AC6_wave12_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiEC423AC6_wave12_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiEC423AC6_wave35_enabled;
wave[17] aiEC423AC6_wave35_lastWave;
trigger aiEC423AC6_wave35_trigger = null;
int aiEC423AC6_wave35_runPlayer;
playergroup aiEC423AC6_wave35_runTarget;

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave35_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiEC423AC6_wave35_enabled[init_i] = true;
        aiEC423AC6_wave35_lastWave[init_i] = null;
    }

    aiEC423AC6_wave35_trigger = TriggerCreate("aiEC423AC6_wave35_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave35_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiEC423AC6_wave35_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave35_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiEC423AC6_wave35_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiEC423AC6_wave35_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiEC423AC6_wave35_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave35_runFunc (bool c, bool a) {
    int p = aiEC423AC6_wave35_runPlayer;
    playergroup target = aiEC423AC6_wave35_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiEC423AC6_wave35_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiEC423AC6_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 126; }
    if (d == 2) { ta = 126; }
    if (d == 3) { ta = 126; }
    if (d == 4) { ta = 126; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(2));

    gatherPoint = aiEC423AC6_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    AIAttackWaveAddUnits(2, 8, "MengskMarine");
    AIAttackWaveAddUnits(3, 8, "MengskMarine");
    AIAttackWaveAddUnits(4, 10, "MengskMarine");
    AIAttackWaveAddUnits(5, 10, "MengskMarine");

    AIAttackWaveAddUnits(2, 2, "MengskMarauder");
    AIAttackWaveAddUnits(3, 2, "MengskMarauder");
    AIAttackWaveAddUnits(4, 3, "MengskMarauder");
    AIAttackWaveAddUnits(5, 3, "MengskMarauder");

    AIAttackWaveSend(p, ts, false);
    aiEC423AC6_wave35_lastWave[p] = WaveLastCreated();
    aiEC423AC6_lastWave[p] = aiEC423AC6_wave35_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave35_run (int p, playergroup target, bool wait) {
    aiEC423AC6_wave35_runPlayer = p;
    aiEC423AC6_wave35_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiEC423AC6_wave35_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiEC423AC6_wave36_enabled;
wave[17] aiEC423AC6_wave36_lastWave;
trigger aiEC423AC6_wave36_trigger = null;
int aiEC423AC6_wave36_runPlayer;
playergroup aiEC423AC6_wave36_runTarget;

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave36_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiEC423AC6_wave36_enabled[init_i] = true;
        aiEC423AC6_wave36_lastWave[init_i] = null;
    }

    aiEC423AC6_wave36_trigger = TriggerCreate("aiEC423AC6_wave36_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave36_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiEC423AC6_wave36_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave36_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiEC423AC6_wave36_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiEC423AC6_wave36_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiEC423AC6_wave36_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave36_runFunc (bool c, bool a) {
    int p = aiEC423AC6_wave36_runPlayer;
    playergroup target = aiEC423AC6_wave36_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiEC423AC6_wave36_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiEC423AC6_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 276; }
    if (d == 2) { ta = 276; }
    if (d == 3) { ta = 276; }
    if (d == 4) { ta = 276; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(2));

    gatherPoint = aiEC423AC6_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    AIAttackWaveAddUnits(2, 8, "MengskMarine");
    AIAttackWaveAddUnits(3, 8, "MengskMarine");
    AIAttackWaveAddUnits(4, 10, "MengskMarine");
    AIAttackWaveAddUnits(5, 10, "MengskMarine");

    AIAttackWaveAddUnits(2, 2, "WarHound");
    AIAttackWaveAddUnits(3, 2, "WarHound");
    AIAttackWaveAddUnits(4, 2, "WarHound");
    AIAttackWaveAddUnits(5, 2, "WarHound");

    AIAttackWaveSend(p, ts, false);
    aiEC423AC6_wave36_lastWave[p] = WaveLastCreated();
    aiEC423AC6_lastWave[p] = aiEC423AC6_wave36_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave36_run (int p, playergroup target, bool wait) {
    aiEC423AC6_wave36_runPlayer = p;
    aiEC423AC6_wave36_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiEC423AC6_wave36_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave Wrappers
//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave_enable (int w, int p, bool val) {
    if (w == 1) { aiEC423AC6_wave1_enable(p, val); }
    if (w == 13) { aiEC423AC6_wave13_enable(p, val); }
    if (w == 15) { aiEC423AC6_wave15_enable(p, val); }
    if (w == 9) { aiEC423AC6_wave9_enable(p, val); }
    if (w == 14) { aiEC423AC6_wave14_enable(p, val); }
    if (w == 16) { aiEC423AC6_wave16_enable(p, val); }
    if (w == 6) { aiEC423AC6_wave6_enable(p, val); }
    if (w == 17) { aiEC423AC6_wave17_enable(p, val); }
    if (w == 18) { aiEC423AC6_wave18_enable(p, val); }
    if (w == 5) { aiEC423AC6_wave5_enable(p, val); }
    if (w == 19) { aiEC423AC6_wave19_enable(p, val); }
    if (w == 20) { aiEC423AC6_wave20_enable(p, val); }
    if (w == 37) { aiEC423AC6_wave37_enable(p, val); }
    if (w == 21) { aiEC423AC6_wave21_enable(p, val); }
    if (w == 22) { aiEC423AC6_wave22_enable(p, val); }
    if (w == 2) { aiEC423AC6_wave2_enable(p, val); }
    if (w == 23) { aiEC423AC6_wave23_enable(p, val); }
    if (w == 24) { aiEC423AC6_wave24_enable(p, val); }
    if (w == 3) { aiEC423AC6_wave3_enable(p, val); }
    if (w == 25) { aiEC423AC6_wave25_enable(p, val); }
    if (w == 26) { aiEC423AC6_wave26_enable(p, val); }
    if (w == 4) { aiEC423AC6_wave4_enable(p, val); }
    if (w == 27) { aiEC423AC6_wave27_enable(p, val); }
    if (w == 28) { aiEC423AC6_wave28_enable(p, val); }
    if (w == 7) { aiEC423AC6_wave7_enable(p, val); }
    if (w == 29) { aiEC423AC6_wave29_enable(p, val); }
    if (w == 30) { aiEC423AC6_wave30_enable(p, val); }
    if (w == 10) { aiEC423AC6_wave10_enable(p, val); }
    if (w == 31) { aiEC423AC6_wave31_enable(p, val); }
    if (w == 32) { aiEC423AC6_wave32_enable(p, val); }
    if (w == 11) { aiEC423AC6_wave11_enable(p, val); }
    if (w == 33) { aiEC423AC6_wave33_enable(p, val); }
    if (w == 34) { aiEC423AC6_wave34_enable(p, val); }
    if (w == 12) { aiEC423AC6_wave12_enable(p, val); }
    if (w == 35) { aiEC423AC6_wave35_enable(p, val); }
    if (w == 36) { aiEC423AC6_wave36_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_wave_isEnabled (int w, int p) {
    if (w == 1) { return aiEC423AC6_wave1_isEnabled(p); }
    if (w == 13) { return aiEC423AC6_wave13_isEnabled(p); }
    if (w == 15) { return aiEC423AC6_wave15_isEnabled(p); }
    if (w == 9) { return aiEC423AC6_wave9_isEnabled(p); }
    if (w == 14) { return aiEC423AC6_wave14_isEnabled(p); }
    if (w == 16) { return aiEC423AC6_wave16_isEnabled(p); }
    if (w == 6) { return aiEC423AC6_wave6_isEnabled(p); }
    if (w == 17) { return aiEC423AC6_wave17_isEnabled(p); }
    if (w == 18) { return aiEC423AC6_wave18_isEnabled(p); }
    if (w == 5) { return aiEC423AC6_wave5_isEnabled(p); }
    if (w == 19) { return aiEC423AC6_wave19_isEnabled(p); }
    if (w == 20) { return aiEC423AC6_wave20_isEnabled(p); }
    if (w == 37) { return aiEC423AC6_wave37_isEnabled(p); }
    if (w == 21) { return aiEC423AC6_wave21_isEnabled(p); }
    if (w == 22) { return aiEC423AC6_wave22_isEnabled(p); }
    if (w == 2) { return aiEC423AC6_wave2_isEnabled(p); }
    if (w == 23) { return aiEC423AC6_wave23_isEnabled(p); }
    if (w == 24) { return aiEC423AC6_wave24_isEnabled(p); }
    if (w == 3) { return aiEC423AC6_wave3_isEnabled(p); }
    if (w == 25) { return aiEC423AC6_wave25_isEnabled(p); }
    if (w == 26) { return aiEC423AC6_wave26_isEnabled(p); }
    if (w == 4) { return aiEC423AC6_wave4_isEnabled(p); }
    if (w == 27) { return aiEC423AC6_wave27_isEnabled(p); }
    if (w == 28) { return aiEC423AC6_wave28_isEnabled(p); }
    if (w == 7) { return aiEC423AC6_wave7_isEnabled(p); }
    if (w == 29) { return aiEC423AC6_wave29_isEnabled(p); }
    if (w == 30) { return aiEC423AC6_wave30_isEnabled(p); }
    if (w == 10) { return aiEC423AC6_wave10_isEnabled(p); }
    if (w == 31) { return aiEC423AC6_wave31_isEnabled(p); }
    if (w == 32) { return aiEC423AC6_wave32_isEnabled(p); }
    if (w == 11) { return aiEC423AC6_wave11_isEnabled(p); }
    if (w == 33) { return aiEC423AC6_wave33_isEnabled(p); }
    if (w == 34) { return aiEC423AC6_wave34_isEnabled(p); }
    if (w == 12) { return aiEC423AC6_wave12_isEnabled(p); }
    if (w == 35) { return aiEC423AC6_wave35_isEnabled(p); }
    if (w == 36) { return aiEC423AC6_wave36_isEnabled(p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup aiEC423AC6_wave_createdUnits (int w, int p) {
    return null;
}

//--------------------------------------------------------------------------------------------------
wave aiEC423AC6_wave_createdWave (int w, int p) {
    if (w == 1) { return aiEC423AC6_wave1_createdWave(p); }
    if (w == 13) { return aiEC423AC6_wave13_createdWave(p); }
    if (w == 15) { return aiEC423AC6_wave15_createdWave(p); }
    if (w == 9) { return aiEC423AC6_wave9_createdWave(p); }
    if (w == 14) { return aiEC423AC6_wave14_createdWave(p); }
    if (w == 16) { return aiEC423AC6_wave16_createdWave(p); }
    if (w == 6) { return aiEC423AC6_wave6_createdWave(p); }
    if (w == 17) { return aiEC423AC6_wave17_createdWave(p); }
    if (w == 18) { return aiEC423AC6_wave18_createdWave(p); }
    if (w == 5) { return aiEC423AC6_wave5_createdWave(p); }
    if (w == 19) { return aiEC423AC6_wave19_createdWave(p); }
    if (w == 20) { return aiEC423AC6_wave20_createdWave(p); }
    if (w == 37) { return aiEC423AC6_wave37_createdWave(p); }
    if (w == 21) { return aiEC423AC6_wave21_createdWave(p); }
    if (w == 22) { return aiEC423AC6_wave22_createdWave(p); }
    if (w == 2) { return aiEC423AC6_wave2_createdWave(p); }
    if (w == 23) { return aiEC423AC6_wave23_createdWave(p); }
    if (w == 24) { return aiEC423AC6_wave24_createdWave(p); }
    if (w == 3) { return aiEC423AC6_wave3_createdWave(p); }
    if (w == 25) { return aiEC423AC6_wave25_createdWave(p); }
    if (w == 26) { return aiEC423AC6_wave26_createdWave(p); }
    if (w == 4) { return aiEC423AC6_wave4_createdWave(p); }
    if (w == 27) { return aiEC423AC6_wave27_createdWave(p); }
    if (w == 28) { return aiEC423AC6_wave28_createdWave(p); }
    if (w == 7) { return aiEC423AC6_wave7_createdWave(p); }
    if (w == 29) { return aiEC423AC6_wave29_createdWave(p); }
    if (w == 30) { return aiEC423AC6_wave30_createdWave(p); }
    if (w == 10) { return aiEC423AC6_wave10_createdWave(p); }
    if (w == 31) { return aiEC423AC6_wave31_createdWave(p); }
    if (w == 32) { return aiEC423AC6_wave32_createdWave(p); }
    if (w == 11) { return aiEC423AC6_wave11_createdWave(p); }
    if (w == 33) { return aiEC423AC6_wave33_createdWave(p); }
    if (w == 34) { return aiEC423AC6_wave34_createdWave(p); }
    if (w == 12) { return aiEC423AC6_wave12_createdWave(p); }
    if (w == 35) { return aiEC423AC6_wave35_createdWave(p); }
    if (w == 36) { return aiEC423AC6_wave36_createdWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_wave_run (int w, int p, playergroup target, bool wait) {
    if (w == 1) { aiEC423AC6_wave1_run(p, target, wait); }
    if (w == 13) { aiEC423AC6_wave13_run(p, target, wait); }
    if (w == 15) { aiEC423AC6_wave15_run(p, target, wait); }
    if (w == 9) { aiEC423AC6_wave9_run(p, target, wait); }
    if (w == 14) { aiEC423AC6_wave14_run(p, target, wait); }
    if (w == 16) { aiEC423AC6_wave16_run(p, target, wait); }
    if (w == 6) { aiEC423AC6_wave6_run(p, target, wait); }
    if (w == 17) { aiEC423AC6_wave17_run(p, target, wait); }
    if (w == 18) { aiEC423AC6_wave18_run(p, target, wait); }
    if (w == 5) { aiEC423AC6_wave5_run(p, target, wait); }
    if (w == 19) { aiEC423AC6_wave19_run(p, target, wait); }
    if (w == 20) { aiEC423AC6_wave20_run(p, target, wait); }
    if (w == 37) { aiEC423AC6_wave37_run(p, target, wait); }
    if (w == 21) { aiEC423AC6_wave21_run(p, target, wait); }
    if (w == 22) { aiEC423AC6_wave22_run(p, target, wait); }
    if (w == 2) { aiEC423AC6_wave2_run(p, target, wait); }
    if (w == 23) { aiEC423AC6_wave23_run(p, target, wait); }
    if (w == 24) { aiEC423AC6_wave24_run(p, target, wait); }
    if (w == 3) { aiEC423AC6_wave3_run(p, target, wait); }
    if (w == 25) { aiEC423AC6_wave25_run(p, target, wait); }
    if (w == 26) { aiEC423AC6_wave26_run(p, target, wait); }
    if (w == 4) { aiEC423AC6_wave4_run(p, target, wait); }
    if (w == 27) { aiEC423AC6_wave27_run(p, target, wait); }
    if (w == 28) { aiEC423AC6_wave28_run(p, target, wait); }
    if (w == 7) { aiEC423AC6_wave7_run(p, target, wait); }
    if (w == 29) { aiEC423AC6_wave29_run(p, target, wait); }
    if (w == 30) { aiEC423AC6_wave30_run(p, target, wait); }
    if (w == 10) { aiEC423AC6_wave10_run(p, target, wait); }
    if (w == 31) { aiEC423AC6_wave31_run(p, target, wait); }
    if (w == 32) { aiEC423AC6_wave32_run(p, target, wait); }
    if (w == 11) { aiEC423AC6_wave11_run(p, target, wait); }
    if (w == 33) { aiEC423AC6_wave33_run(p, target, wait); }
    if (w == 34) { aiEC423AC6_wave34_run(p, target, wait); }
    if (w == 12) { aiEC423AC6_wave12_run(p, target, wait); }
    if (w == 35) { aiEC423AC6_wave35_run(p, target, wait); }
    if (w == 36) { aiEC423AC6_wave36_run(p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
// Attack Wave Sequence
//--------------------------------------------------------------------------------------------------
trigger aiEC423AC6_waves_trigger = null;
int aiEC423AC6_waves_runPlayer;
playergroup aiEC423AC6_waves_runTarget;

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_waves_init () {
    aiEC423AC6_waves_trigger = TriggerCreate("aiEC423AC6_waves_runFunc");
}

//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_waves_runFunc (bool c, bool a) {
    int p = aiEC423AC6_waves_runPlayer;
    playergroup target = aiEC423AC6_waves_runTarget;

    if (p < 0 || p >= 16) {
        return false;
    }

    aiEC423AC6_wave1_run(p, target, true);
    aiEC423AC6_wave13_run(p, target, false);
    Wait(0, c_timeAI);
    aiEC423AC6_wave15_run(p, target, false);
    Wait(0, c_timeAI);
    aiEC423AC6_wave9_run(p, target, false);
    Wait(0, c_timeAI);
    aiEC423AC6_wave14_run(p, target, true);
    aiEC423AC6_wave16_run(p, target, false);
    Wait(0, c_timeAI);
    aiEC423AC6_wave6_run(p, target, false);
    Wait(0, c_timeAI);
    aiEC423AC6_wave17_run(p, target, true);
    aiEC423AC6_wave18_run(p, target, false);
    Wait(0, c_timeAI);
    aiEC423AC6_wave5_run(p, target, true);
    aiEC423AC6_wave19_run(p, target, false);
    Wait(0, c_timeAI);
    aiEC423AC6_wave20_run(p, target, false);
    Wait(0, c_timeAI);
    aiEC423AC6_wave37_run(p, target, true);
    aiEC423AC6_wave21_run(p, target, false);
    Wait(0, c_timeAI);
    aiEC423AC6_wave22_run(p, target, false);
    Wait(0, c_timeAI);
    aiEC423AC6_wave2_run(p, target, true);
    aiEC423AC6_wave23_run(p, target, false);
    Wait(0, c_timeAI);
    aiEC423AC6_wave24_run(p, target, false);
    Wait(0, c_timeAI);
    aiEC423AC6_wave3_run(p, target, true);
    aiEC423AC6_wave25_run(p, target, false);
    Wait(0, c_timeAI);
    aiEC423AC6_wave26_run(p, target, false);
    Wait(0, c_timeAI);
    aiEC423AC6_wave4_run(p, target, true);
    aiEC423AC6_wave27_run(p, target, false);
    Wait(0, c_timeAI);
    aiEC423AC6_wave28_run(p, target, false);
    Wait(0, c_timeAI);
    aiEC423AC6_wave7_run(p, target, true);
    aiEC423AC6_wave29_run(p, target, false);
    Wait(0, c_timeAI);
    aiEC423AC6_wave30_run(p, target, false);
    Wait(0, c_timeAI);
    aiEC423AC6_wave10_run(p, target, true);
    aiEC423AC6_wave31_run(p, target, false);
    Wait(0, c_timeAI);
    aiEC423AC6_wave32_run(p, target, false);
    Wait(0, c_timeAI);
    aiEC423AC6_wave11_run(p, target, true);
    aiEC423AC6_wave33_run(p, target, false);
    Wait(0, c_timeAI);
    aiEC423AC6_wave34_run(p, target, false);
    Wait(0, c_timeAI);
    aiEC423AC6_wave12_run(p, target, true);
    aiEC423AC6_wave35_run(p, target, false);
    Wait(0, c_timeAI);
    aiEC423AC6_wave36_run(p, target, false);
    Wait(0, c_timeAI);

    while (true) {
        aiEC423AC6_wave7_run(p, target, true);
        aiEC423AC6_wave29_run(p, target, false);
        Wait(0, c_timeAI);
        aiEC423AC6_wave30_run(p, target, false);
        Wait(0, c_timeAI);
        aiEC423AC6_wave10_run(p, target, true);
        aiEC423AC6_wave31_run(p, target, false);
        Wait(0, c_timeAI);
        aiEC423AC6_wave32_run(p, target, false);
        Wait(0, c_timeAI);
        aiEC423AC6_wave11_run(p, target, true);
        aiEC423AC6_wave33_run(p, target, false);
        Wait(0, c_timeAI);
        aiEC423AC6_wave34_run(p, target, false);
        Wait(0, c_timeAI);
        aiEC423AC6_wave12_run(p, target, true);
        aiEC423AC6_wave35_run(p, target, false);
        Wait(0, c_timeAI);
        aiEC423AC6_wave36_run(p, target, false);
        Wait(0, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_waves_run (int p, playergroup target) {
    aiEC423AC6_waves_runPlayer = p;
    aiEC423AC6_waves_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiEC423AC6_waves_trigger, false, false);
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }

    aiEC423AC6_wave1_enable(p, val);
    aiEC423AC6_wave13_enable(p, val);
    aiEC423AC6_wave15_enable(p, val);
    aiEC423AC6_wave9_enable(p, val);
    aiEC423AC6_wave14_enable(p, val);
    aiEC423AC6_wave16_enable(p, val);
    aiEC423AC6_wave6_enable(p, val);
    aiEC423AC6_wave17_enable(p, val);
    aiEC423AC6_wave18_enable(p, val);
    aiEC423AC6_wave5_enable(p, val);
    aiEC423AC6_wave19_enable(p, val);
    aiEC423AC6_wave20_enable(p, val);
    aiEC423AC6_wave37_enable(p, val);
    aiEC423AC6_wave21_enable(p, val);
    aiEC423AC6_wave22_enable(p, val);
    aiEC423AC6_wave2_enable(p, val);
    aiEC423AC6_wave23_enable(p, val);
    aiEC423AC6_wave24_enable(p, val);
    aiEC423AC6_wave3_enable(p, val);
    aiEC423AC6_wave25_enable(p, val);
    aiEC423AC6_wave26_enable(p, val);
    aiEC423AC6_wave4_enable(p, val);
    aiEC423AC6_wave27_enable(p, val);
    aiEC423AC6_wave28_enable(p, val);
    aiEC423AC6_wave7_enable(p, val);
    aiEC423AC6_wave29_enable(p, val);
    aiEC423AC6_wave30_enable(p, val);
    aiEC423AC6_wave10_enable(p, val);
    aiEC423AC6_wave31_enable(p, val);
    aiEC423AC6_wave32_enable(p, val);
    aiEC423AC6_wave11_enable(p, val);
    aiEC423AC6_wave33_enable(p, val);
    aiEC423AC6_wave34_enable(p, val);
    aiEC423AC6_wave12_enable(p, val);
    aiEC423AC6_wave35_enable(p, val);
    aiEC423AC6_wave36_enable(p, val);
}

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_waves_stop () {
    TriggerStop(aiEC423AC6_waves_trigger);

    TriggerStop(aiEC423AC6_wave1_trigger);
    TriggerStop(aiEC423AC6_wave13_trigger);
    TriggerStop(aiEC423AC6_wave15_trigger);
    TriggerStop(aiEC423AC6_wave9_trigger);
    TriggerStop(aiEC423AC6_wave14_trigger);
    TriggerStop(aiEC423AC6_wave16_trigger);
    TriggerStop(aiEC423AC6_wave6_trigger);
    TriggerStop(aiEC423AC6_wave17_trigger);
    TriggerStop(aiEC423AC6_wave18_trigger);
    TriggerStop(aiEC423AC6_wave5_trigger);
    TriggerStop(aiEC423AC6_wave19_trigger);
    TriggerStop(aiEC423AC6_wave20_trigger);
    TriggerStop(aiEC423AC6_wave37_trigger);
    TriggerStop(aiEC423AC6_wave21_trigger);
    TriggerStop(aiEC423AC6_wave22_trigger);
    TriggerStop(aiEC423AC6_wave2_trigger);
    TriggerStop(aiEC423AC6_wave23_trigger);
    TriggerStop(aiEC423AC6_wave24_trigger);
    TriggerStop(aiEC423AC6_wave3_trigger);
    TriggerStop(aiEC423AC6_wave25_trigger);
    TriggerStop(aiEC423AC6_wave26_trigger);
    TriggerStop(aiEC423AC6_wave4_trigger);
    TriggerStop(aiEC423AC6_wave27_trigger);
    TriggerStop(aiEC423AC6_wave28_trigger);
    TriggerStop(aiEC423AC6_wave7_trigger);
    TriggerStop(aiEC423AC6_wave29_trigger);
    TriggerStop(aiEC423AC6_wave30_trigger);
    TriggerStop(aiEC423AC6_wave10_trigger);
    TriggerStop(aiEC423AC6_wave31_trigger);
    TriggerStop(aiEC423AC6_wave32_trigger);
    TriggerStop(aiEC423AC6_wave11_trigger);
    TriggerStop(aiEC423AC6_wave33_trigger);
    TriggerStop(aiEC423AC6_wave34_trigger);
    TriggerStop(aiEC423AC6_wave12_trigger);
    TriggerStop(aiEC423AC6_wave35_trigger);
    TriggerStop(aiEC423AC6_wave36_trigger);
}

//--------------------------------------------------------------------------------------------------
// Configuration
//--------------------------------------------------------------------------------------------------
void aiEC423AC6_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiEC423AC6_defGather[p] = val;
}

//--------------------------------------------------------------------------------------------------
string aiEC423AC6_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiEC423AC6_customData[p];
}

//--------------------------------------------------------------------------------------------------
wave aiEC423AC6_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiEC423AC6_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
// Start
//--------------------------------------------------------------------------------------------------
bool aiEC423AC6_initialized = false;

//--------------------------------------------------------------------------------------------------
void aiEC423AC6_start (int p) {
    int init_i;

    if (p < 0 || p >= 16) {
        return;
    }
    if (!aiEC423AC6_initialized) {
        aiEC423AC6_wave1_init();
        aiEC423AC6_wave13_init();
        aiEC423AC6_wave15_init();
        aiEC423AC6_wave9_init();
        aiEC423AC6_wave14_init();
        aiEC423AC6_wave16_init();
        aiEC423AC6_wave6_init();
        aiEC423AC6_wave17_init();
        aiEC423AC6_wave18_init();
        aiEC423AC6_wave5_init();
        aiEC423AC6_wave19_init();
        aiEC423AC6_wave20_init();
        aiEC423AC6_wave37_init();
        aiEC423AC6_wave21_init();
        aiEC423AC6_wave22_init();
        aiEC423AC6_wave2_init();
        aiEC423AC6_wave23_init();
        aiEC423AC6_wave24_init();
        aiEC423AC6_wave3_init();
        aiEC423AC6_wave25_init();
        aiEC423AC6_wave26_init();
        aiEC423AC6_wave4_init();
        aiEC423AC6_wave27_init();
        aiEC423AC6_wave28_init();
        aiEC423AC6_wave7_init();
        aiEC423AC6_wave29_init();
        aiEC423AC6_wave30_init();
        aiEC423AC6_wave10_init();
        aiEC423AC6_wave31_init();
        aiEC423AC6_wave32_init();
        aiEC423AC6_wave11_init();
        aiEC423AC6_wave33_init();
        aiEC423AC6_wave34_init();
        aiEC423AC6_wave12_init();
        aiEC423AC6_wave35_init();
        aiEC423AC6_wave36_init();
        aiEC423AC6_waves_init();

        for (init_i = 0; init_i <= 16; init_i += 1) {
            aiEC423AC6_defGather[init_i] = PointFromId(809);
        }

        aiEC423AC6_initialized = true;
    }

    AICampaignStart(p);
}
