//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Phantoms of the Void
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"
include "TriggerLibs/SwarmCampaignLib"
include "TriggerLibs/SwarmCampaignDataHelperLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libHots_InitLib();
    libSwaC_InitLib();
    libSCDH_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_DOMINION = 2;
const int gv_pLAYER_02_DOMINION2 = 3;
const int gv_pLAYER_02_DOMINION22 = 4;
const int gv_pLAYER_02_DOMINION222 = 5;
const int gv_pLAYER_02_DOMINION2222 = 6;
const int gv_pLAYER_02_DOMINION22222 = 7;

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_PRESET_MovementDirection_Forward = 0;
const int ge_PRESET_MovementDirection_Stopped = 1;
const int ge_PRESET_MovementDirection_Reverse = 2;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
playergroup gv_protossPlayers;
bool gv_gameOver;
bool gv_inCinematic;
unit gv_kerrigan;
unit gv_kerrigan2;
unit gv_kerrigan22;
unit gv_stukov;
unitgroup gv_startingUnits;
revealer gv_firstTempleReveal;
string gv_mapMusicTrack;
bool gv_tugOfWarStarted;
unitgroup gv_introGasPickups;
bool gv_inCombat;
timer gv_inCombatTimer;
bool gv_corrosiveBlastUsed;
int gv_protossBasePing;
unit gv_ultra1;
unit gv_ultra2;
int gv_nullZoneMovement;
int gv_nullZonePing;
int gv_narudPing;
int gv_kerriganPing;
fixed gv_nullZoneReverseFactor;
int[9] gv_nullZoneArrowPings;
bool gv_nullZoneMovingForward;
int gv_nullZoneBarPanel;
int gv_nullZoneBarLeft;
int gv_nullZoneBarPortraitKerrigan;
int gv_nullZoneBarPortraitNarud;
int gv_nullZoneTugOfWar;
actor gv_kerriganSoundRegionActor;
region gv_kerriganSoundRegion;
actor gv_narudSoundRegionActor;
region gv_narudSoundRegion;
int gv_numberOfHybridSpawned;
unit gv_templeSuperWarpGate;
int gv_hybridsKilled;
bool gv_bottomSpawnInProgress;
bool gv_topSpawnInProgress;
fixed gv_hybridHealth;
int gv_templesDeactivated;
int[6] gv_templePings;
region gv_templeDefenseRegion;
point gv_templeDefensePoint;
bool gv_firstTransmissionSequenceInProgress;
bool[6] gv_templeChannelQs;
bool[6] gv_templeGuardiansSpawned;
unitgroup gv_hybridGroup;
int gv_templeChannelUINameLabel;
int gv_templeChannelUITime;
int gv_templeChannelUIProgressBar;
int gv_templeChannelUIBorder;
int gv_crystalsDestroyed;
bool gv_crystalDiscoverWait;
timer gv_achievementHybridKilledTimer;
int gv_achievementStukovSurvivalDeathCount;
int gv_statisticStukovKills;
int gv_statisticMaxArmy;
int gv_statisticZergKilledByHybrid;
int gv_statisticProtossStructuresTotal;
int gv_statisticProtossStructuresDestroyed;
int gv_objectiveDestroyDominionBase4;
int gv_objectiveDestroyDominionBase;
int gv_objectiveDestroyDominionBase2;
int gv_objectiveDestroyDominionBase3;
wave gv_firstWave;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicTempUnits;
bool gv_cinematicCompleted;
unitgroup gv_startingBase;
sound gv_introStinger;
sound gv_introUltraliskSound1;
sound gv_introUltraliskSound2;
sound gv_introUltraliskSound3;
sound gv_introUltraliskSound4;
sound gv_introZealotSound;
bool gv_introMusicCompleted;
bool gv_narudBeamCreated;
bool gv_kerriganBeamCreated;
sound gv_midMusic;
unit gv_midHybrid;
unit gv_midStukov;
sound gv_midStinger;
sound gv_midReveal;
sound gv_midStreamCross;
sound gv_midWarning;
sound gv_midNarudWeapon;
sound gv_midRoar;
sound gv_midKerriganWeapon;
sound gv_midCollide;
unit gv_midHive;
bool gv_midMusicCompleted;
sound gv_victoryStinger;
sound gv_victoryNarudDeath;
unit gv_victoryStukov;

void InitGlobals () {
    int init_i;

    gv_protossPlayers = PlayerGroupEmpty();
    gv_startingUnits = UnitGroupEmpty();
    gv_introGasPickups = UnitGroupEmpty();
    gv_inCombatTimer = TimerCreate();
    gv_protossBasePing = c_invalidPingId;
    gv_nullZoneMovement = ge_PRESET_MovementDirection_Reverse;
    gv_nullZonePing = c_invalidPingId;
    gv_narudPing = c_invalidPingId;
    gv_kerriganPing = c_invalidPingId;
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_nullZoneArrowPings[init_i] = c_invalidPingId;
    }
    gv_nullZoneBarPanel = c_invalidDialogControlId;
    gv_nullZoneBarLeft = c_invalidDialogControlId;
    gv_nullZoneBarPortraitKerrigan = c_invalidDialogControlId;
    gv_nullZoneBarPortraitNarud = c_invalidDialogControlId;
    gv_nullZoneTugOfWar = c_invalidDialogControlId;
    gv_templeSuperWarpGate = UnitFromId(1092);
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_templePings[init_i] = c_invalidPingId;
    }
    gv_hybridGroup = UnitGroupEmpty();
    gv_templeChannelUINameLabel = c_invalidDialogControlId;
    gv_templeChannelUITime = c_invalidDialogControlId;
    gv_templeChannelUIProgressBar = c_invalidDialogControlId;
    gv_templeChannelUIBorder = c_invalidDialogControlId;
    gv_achievementHybridKilledTimer = TimerCreate();
    gv_objectiveDestroyDominionBase4 = c_invalidObjectiveId;
    gv_objectiveDestroyDominionBase = c_invalidObjectiveId;
    gv_objectiveDestroyDominionBase2 = c_invalidObjectiveId;
    gv_objectiveDestroyDominionBase3 = c_invalidObjectiveId;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_startingBase = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_TeachCorrosiveBlast (unit lp_hybrid);
void gf_SetNullZoneDirection (int lp_direction);
fixed gf_NullZonePercentage ();
void gf_CreateChannelUI ();
void gf_ShowHideChannelUI (bool lp_showHide);
void gf_UpdateChannelUI (int lp_channelTimeRemaining, int lp_channelTimeMAX);
void gf_SpawnHybridforTemple (point lp_spawnPoint, point lp_templePoint);
void gf_CreatePingforHybrid (unit lp_hybrid);
void gf_CreatePingforTemple (region lp_templeRegion);
void gf_KillTemple (point lp_templePoint);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04Music;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_S2;
trigger gt_StartGameIntroQ;
trigger gt_StartGameTugofWarQ;
trigger gt_OpeningQ;
trigger gt_InCombatCheck;
trigger gt_InCombatTimerExpirers;
trigger gt_CorrosiveBlastQ;
trigger gt_CorrosiveBlastUsed;
trigger gt_StukovRevive;
trigger gt_BullyDeactivate1;
trigger gt_BullyDeactivate2;
trigger gt_IntroComplete;
trigger gt_ProtossInitialAttack1Q;
trigger gt_ProtossInitialAttack2Q;
trigger gt_NullZoneStaticPings;
trigger gt_NullZoneMovementandArrowPings;
trigger gt_NullZone10Q;
trigger gt_CreateTugWarBar;
trigger gt_UpdateTugWarBar;
trigger gt_DestoryTugWarBar;
trigger gt_KerriganBeamRegionSounds;
trigger gt_NarudBeamRegionSounds;
trigger gt_HybridDies;
trigger gt_TempleChanneling;
trigger gt_TempleHoldoutAttacks;
trigger gt_TempleChannelingQ;
trigger gt_TempleDeactivatedQ;
trigger gt_FirstHybridQ;
trigger gt_WarpInAttacks;
trigger gt_CrystalDiscoverProximity;
trigger gt_CrystalDiscoverQ;
trigger gt_CrystalDestroyed;
trigger gt_Crystal1Defense;
trigger gt_Crystal1DefenseQ;
trigger gt_Crystal2Defense;
trigger gt_Crystal2DefenseQ;
trigger gt_Crystal3Defense;
trigger gt_Crystal3DefenseQ;
trigger gt_AllCrystalsDestroyedQ;
trigger gt_DefeatBaseDead;
trigger gt_DefeatDuelLose;
trigger gt_DefeatKerriganDies;
trigger gt_VictoryDuelWin;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_AchievementStukovSurvival;
trigger gt_AchievementKill2Hybridwithin20secondsNH;
trigger gt_AchievementDestroyProtossBasesH;
trigger gt_StatisticMaxArmy;
trigger gt_StatisticZergKilledbyHybrid;
trigger gt_AnniversaryAchievementDestroyallProtossstructuresbeforeactivating4Temples2;
trigger gt_ObjectiveDestroyProtossCreate;
trigger gt_ObjectiveDestroyProtossComplete;
trigger gt_ObjectiveDeactivateTemplesCreate;
trigger gt_ObjectiveDeactivateTemplesComplete;
trigger gt_ObjectiveKerriganMustSurviveCreate;
trigger gt_ObjectiveKerriganMustSurviveComplete;
trigger gt_ObjectiveKerriganMustSurviveFailed;
trigger gt_ObjectiveCrystalsCreate;
trigger gt_ObjectiveCrystalsComplete;
trigger gt_HybridAI;
trigger gt_StartAI;
trigger gt_StartUpgradesNormal;
trigger gt_StartUpgradesHard;
trigger gt_ProtossAttackWaves;
trigger gt_FirstWaveDynamicTiming;
trigger gt_FirstAttackQ;
trigger gt_DangerousAttack1Q;
trigger gt_DangerousAttack2Q;
trigger gt_BaseWarningEastQ;
trigger gt_BaseWarningWestQ;
trigger gt_AIGiveMinerals;
trigger gt_AIGiveGas;
trigger gt_TipMissionHelpQ;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_IntroAttacks;
trigger gt_IntroMusic;
trigger gt_MidQ;
trigger gt_MidSetup;
trigger gt_MidCinematic;
trigger gt_MidCinematicEnd;
trigger gt_MidCleanup;
trigger gt_MidMusic;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;
trigger gt_VictoryKillNarud;

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
trigger auto_gf_TeachCorrosiveBlast_Trigger = null;
unit auto_gf_TeachCorrosiveBlast_lp_hybrid;

void gf_TeachCorrosiveBlast (unit lp_hybrid) {
    auto_gf_TeachCorrosiveBlast_lp_hybrid = lp_hybrid;

    if (auto_gf_TeachCorrosiveBlast_Trigger == null) {
        auto_gf_TeachCorrosiveBlast_Trigger = TriggerCreate("auto_gf_TeachCorrosiveBlast_TriggerFunc");
    }

    TriggerExecute(auto_gf_TeachCorrosiveBlast_Trigger, false, false);
}

bool auto_gf_TeachCorrosiveBlast_TriggerFunc (bool testConds, bool runActions) {
    unit lp_hybrid = auto_gf_TeachCorrosiveBlast_lp_hybrid;

    // Automatic Variable Declarations
    // Implementation
    MinimapPing(PlayerGroupAll(), UnitGetPosition(lp_hybrid), 5.0, Color(0.00, 100.00, 0.00));
    libNtve_gf_AttachModelToUnit(lp_hybrid, "BriefingUnitSelectLargeZerg", "Ref_Center");
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("DevastatingShot", 0), true);
    while (!(((UnitIsAlive(lp_hybrid) == false) || (UnitHasBehavior(lp_hybrid, "DevastatingShotExtraDamage") == true)))) {
        Wait(0.1, c_timeGame);
    }
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("DevastatingShot", 0), false);
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    return true;
}

trigger auto_gf_SetNullZoneDirection_Trigger = null;
int auto_gf_SetNullZoneDirection_lp_direction;

void gf_SetNullZoneDirection (int lp_direction) {
    auto_gf_SetNullZoneDirection_lp_direction = lp_direction;

    if (auto_gf_SetNullZoneDirection_Trigger == null) {
        auto_gf_SetNullZoneDirection_Trigger = TriggerCreate("auto_gf_SetNullZoneDirection_TriggerFunc");
    }

    TriggerExecute(auto_gf_SetNullZoneDirection_Trigger, false, false);
}

bool auto_gf_SetNullZoneDirection_TriggerFunc (bool testConds, bool runActions) {
    int lp_direction = auto_gf_SetNullZoneDirection_lp_direction;

    // Automatic Variable Declarations
    int auto62596307_val;

    // Implementation
    while (!((gv_nullZoneMovingForward == false))) {
        Wait(1.0, c_timeAI);
    }
    auto62596307_val = lp_direction;
    if (auto62596307_val == ge_PRESET_MovementDirection_Forward) {
        gv_nullZoneMovingForward = true;
        gv_nullZoneMovement = ge_PRESET_MovementDirection_Forward;
        Wait(3.0, c_timeAI);
        if ((ObjectiveGetState(gv_objectiveDestroyDominionBase) == c_objectiveStateCompleted)) {
            return true;
        }

        gv_nullZoneMovingForward = false;
        gv_nullZoneMovement = ge_PRESET_MovementDirection_Reverse;
    }
    else if (auto62596307_val == ge_PRESET_MovementDirection_Reverse) {
        gv_nullZoneMovement = ge_PRESET_MovementDirection_Reverse;
    }
    else if (auto62596307_val == ge_PRESET_MovementDirection_Stopped) {
        gv_nullZoneMovement = ge_PRESET_MovementDirection_Stopped;
    }
    else {
    }
    return true;
}

fixed gf_NullZonePercentage () {
    // Variable Declarations
    fixed lv_fullDistance;
    fixed lv_ballDistance;
    fixed lv_percentage;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_fullDistance = DistanceBetweenPoints(UnitGetPosition(gv_kerrigan), UnitGetPosition(gv_kerrigan2));
    lv_ballDistance = DistanceBetweenPoints(UnitGetPosition(gv_kerrigan), UnitGetPosition(gv_kerrigan22));
    lv_percentage = ((lv_ballDistance / lv_fullDistance) * 100.0);
    return lv_percentage;
}

void gf_CreateChannelUI () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_templeChannelUINameLabel == c_invalidDialogControlId)) {
        DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "NameLabel", gv_stukov);
        gv_templeChannelUINameLabel = DialogControlLastCreated();
        libNtve_gf_SetDialogItemText(gv_templeChannelUINameLabel, StringExternal("Param/Value/670EDD43"), PlayerGroupAll());
        DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "ValueLabel", gv_stukov);
        gv_templeChannelUITime = DialogControlLastCreated();
        DialogControlHookupUnitStatus(c_triggerControlTypeImage, "BarImage", gv_stukov);
        gv_templeChannelUIProgressBar = DialogControlLastCreated();
        DialogControlHookupUnitStatus(c_triggerControlTypeImage, "BorderImage", gv_stukov);
        gv_templeChannelUIBorder = DialogControlLastCreated();
    }

}

void gf_ShowHideChannelUI (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(gv_templeChannelUINameLabel, PlayerGroupAll(), lp_showHide);
    DialogControlSetVisible(gv_templeChannelUITime, PlayerGroupAll(), lp_showHide);
    DialogControlSetVisible(gv_templeChannelUIProgressBar, PlayerGroupAll(), lp_showHide);
    DialogControlSetVisible(gv_templeChannelUIBorder, PlayerGroupAll(), lp_showHide);
}

void gf_UpdateChannelUI (int lp_channelTimeRemaining, int lp_channelTimeMAX) {
    // Variable Declarations
    const int lv_c_Width = 180;
    const int lv_c_Height = 12;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libNtve_gf_SetDialogItemText(gv_templeChannelUITime, TextTimeFormat(StringToText("<sectotal/>"), FixedToInt(lp_channelTimeRemaining)), PlayerGroupAll());
    DialogControlSetSize(gv_templeChannelUIProgressBar, PlayerGroupAll(), FixedToInt((lv_c_Width * (IntToFixed(lp_channelTimeRemaining) / lp_channelTimeMAX))), lv_c_Height);
    libNtve_gf_SetDialogItemColor(gv_templeChannelUIProgressBar, libSwaC_gf_GetProgressBarColorCampaign(), PlayerGroupAll());
}

trigger auto_gf_SpawnHybridforTemple_Trigger = null;
point auto_gf_SpawnHybridforTemple_lp_spawnPoint;
point auto_gf_SpawnHybridforTemple_lp_templePoint;

void gf_SpawnHybridforTemple (point lp_spawnPoint, point lp_templePoint) {
    auto_gf_SpawnHybridforTemple_lp_spawnPoint = lp_spawnPoint;
    auto_gf_SpawnHybridforTemple_lp_templePoint = lp_templePoint;

    if (auto_gf_SpawnHybridforTemple_Trigger == null) {
        auto_gf_SpawnHybridforTemple_Trigger = TriggerCreate("auto_gf_SpawnHybridforTemple_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpawnHybridforTemple_Trigger, false, false);
}

bool auto_gf_SpawnHybridforTemple_TriggerFunc (bool testConds, bool runActions) {
    point lp_spawnPoint = auto_gf_SpawnHybridforTemple_lp_spawnPoint;
    point lp_templePoint = auto_gf_SpawnHybridforTemple_lp_templePoint;

    // Variable Declarations
    int lv_numberOfEscorts;
    point lv_spawnPoint_LOCAL;
    unit lv_hybrid;

    // Automatic Variable Declarations
    int autoCA580942_val;
    unitgroup auto0A92F2EA_g;
    int auto0A92F2EA_u;
    unit auto0A92F2EA_var;

    // Variable Initialization

    // Implementation
    if ((lp_spawnPoint == PointFromId(497))) {
        while (!((gv_topSpawnInProgress == false))) {
            Wait(1.0, c_timeAI);
        }
        gv_topSpawnInProgress = true;
    }
    else {
        while (!((gv_bottomSpawnInProgress == false))) {
            Wait(1.0, c_timeAI);
        }
        gv_bottomSpawnInProgress = true;
    }
    if ((gv_gameOver == true)) {
        return true;
    }

    if ((gv_templesDeactivated >= 4)) {
        lv_numberOfEscorts = libHots_gf_DifficultyValueInt2(2, 2, 3);
    }
    else {
        if ((gv_templesDeactivated >= 3)) {
            lv_numberOfEscorts = libHots_gf_DifficultyValueInt2(2, 2, 2);
        }
        else {
            lv_numberOfEscorts = libHots_gf_DifficultyValueInt2(0, 0, 0);
        }
    }
    lv_spawnPoint_LOCAL = lp_spawnPoint;
    VisRevealArea(gv_pLAYER_02_DOMINION222, RegionCircle(lv_spawnPoint_LOCAL, 8.0), 5.0, false);
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "Hybrid", 0, gv_pLAYER_02_DOMINION, lv_spawnPoint_LOCAL);
    lv_hybrid = UnitLastCreated();
    libNtve_gf_AttachModelToUnit(UnitLastCreated(), "HybridWarpInEffect", "Ref_Origin");
    UnitGroupAdd(gv_hybridGroup, UnitLastCreated());
    gv_numberOfHybridSpawned += 1;
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_hybridHealth);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 3.5);
    gf_CreatePingforHybrid(UnitLastCreated());
    autoCA580942_val = lv_numberOfEscorts;
    if (autoCA580942_val == 2) {
        UnitIssueOrder(gv_templeSuperWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointWithOffsetPolar(lv_spawnPoint_LOCAL, 3.0, (PointGetFacing(lv_spawnPoint_LOCAL) + 45.0))), c_orderQueueReplace);
        UnitIssueOrder(gv_templeSuperWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointWithOffsetPolar(lv_spawnPoint_LOCAL, 3.0, (PointGetFacing(lv_spawnPoint_LOCAL) - 45.0))), c_orderQueueReplace);
    }
    else if (autoCA580942_val == 3) {
        UnitIssueOrder(gv_templeSuperWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointWithOffsetPolar(lv_spawnPoint_LOCAL, 3.0, (PointGetFacing(lv_spawnPoint_LOCAL) + 45.0))), c_orderQueueReplace);
        UnitIssueOrder(gv_templeSuperWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointWithOffsetPolar(lv_spawnPoint_LOCAL, 3.0, (PointGetFacing(lv_spawnPoint_LOCAL) - 45.0))), c_orderQueueReplace);
        UnitIssueOrder(gv_templeSuperWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointWithOffsetPolar(lv_spawnPoint_LOCAL, 3.0, (PointGetFacing(lv_spawnPoint_LOCAL) + 180.0))), c_orderQueueReplace);
    }
    else {
    }
    Wait(5.0, c_timeAI);
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    AIAttackWaveSetTargetEscort(gv_pLAYER_02_DOMINION222, libNtve_gf_ConvertUnitToUnitGroup(lv_hybrid), 0);
    auto0A92F2EA_g = UnitGroup(null, gv_pLAYER_02_DOMINION222, RegionCircle(lv_spawnPoint_LOCAL, 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0A92F2EA_u = UnitGroupCount(auto0A92F2EA_g, c_unitCountAll);
    for (;; auto0A92F2EA_u -= 1) {
        auto0A92F2EA_var = UnitGroupUnitFromEnd(auto0A92F2EA_g, auto0A92F2EA_u);
        if (auto0A92F2EA_var == null) { break; }
        AIAttackWaveAddEscortUnit(gv_pLAYER_02_DOMINION222, auto0A92F2EA_var, lv_hybrid, DistanceBetweenPoints(UnitGetPosition(auto0A92F2EA_var), UnitGetPosition(lv_hybrid)), (AngleBetweenPoints(UnitGetPosition(lv_hybrid), UnitGetPosition(auto0A92F2EA_var)) - UnitGetFacing(lv_hybrid)));
    }
    AIAttackWaveSend(gv_pLAYER_02_DOMINION222, 0, false);
    AIAttackWaveSetTargetRegion(gv_pLAYER_02_DOMINION, RegionCircle(gv_templeDefensePoint, 6.0), 0);
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_DOMINION, UnitGetPosition(lv_hybrid));
    AIAttackWaveUseUnit(gv_pLAYER_02_DOMINION, lv_hybrid);
    AIAttackWaveSend(gv_pLAYER_02_DOMINION, 0, false);
    Wait(5.0, c_timeAI);
    if ((lp_spawnPoint == PointFromId(497))) {
        gv_topSpawnInProgress = false;
    }
    else {
        gv_bottomSpawnInProgress = false;
    }
    return true;
}

trigger auto_gf_CreatePingforHybrid_Trigger = null;
unit auto_gf_CreatePingforHybrid_lp_hybrid;

void gf_CreatePingforHybrid (unit lp_hybrid) {
    auto_gf_CreatePingforHybrid_lp_hybrid = lp_hybrid;

    if (auto_gf_CreatePingforHybrid_Trigger == null) {
        auto_gf_CreatePingforHybrid_Trigger = TriggerCreate("auto_gf_CreatePingforHybrid_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreatePingforHybrid_Trigger, false, false);
}

bool auto_gf_CreatePingforHybrid_TriggerFunc (bool testConds, bool runActions) {
    unit lp_hybrid = auto_gf_CreatePingforHybrid_lp_hybrid;

    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", UnitGetPosition(lp_hybrid), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetScale(PingLastCreated(), 0.5);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/C103B1CA"));
    PingSetUnit(PingLastCreated(), lp_hybrid);
    PingSetVisible(PingLastCreated(), false);
    Wait(5.0, c_timeAI);
    while (true) {
        Wait(1.0, c_timeGame);
        if ((UnitIsAlive(lp_hybrid) == false)) {
            PingDestroy(PingLastCreated());
            return true;
        }

        if ((UnitHasBehavior(lp_hybrid, "NarudEnhanceBeam") == true)) {
            PingSetVisible(PingLastCreated(), false);
        }
        else {
            PingSetVisible(PingLastCreated(), true);
        }
    }
    return true;
}

void gf_CreatePingforTemple (region lp_templeRegion) {
    // Automatic Variable Declarations
    region autoCB256DBE_val;

    // Implementation
    if (((UnitGroupCount(UnitGroup("Beacon_Zerg", c_playerAny, lp_templeRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1) || ((UnitGroupCount(UnitGroup("Beacon_Zerg", c_playerAny, lp_templeRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("InfestedStukov", c_playerAny, RegionCircle(RegionGetCenter(lp_templeRegion), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1) && (gv_nullZoneMovement == ge_PRESET_MovementDirection_Stopped)))) {
        MinimapPing(PlayerGroupAll(), RegionGetCenter(lp_templeRegion), 5.0, Color(0.00, 100.00, 0.00));
        VisRevealArea(gv_pLAYER_01_USER, RegionCircle(RegionGetCenter(lp_templeRegion), 12.0), 16.0, false);
        libSwaC_gf_CreateObjectivePing(true, RegionGetCenter(lp_templeRegion), StringExternal("Param/Value/7C3DBEDF"));
        autoCB256DBE_val = lp_templeRegion;
        if (autoCB256DBE_val == RegionFromId(29)) {
            gv_templePings[1] = PingLastCreated();
            VisRevealArea(gv_pLAYER_01_USER, RegionCircle(RegionGetCenter(lp_templeRegion), 12.0), 0.0, false);
            gv_firstTempleReveal = VisRevealerLastCreated();
        }
        else if (autoCB256DBE_val == RegionFromId(30)) {
            gv_templePings[2] = PingLastCreated();
        }
        else if (autoCB256DBE_val == RegionFromId(31)) {
            gv_templePings[3] = PingLastCreated();
        }
        else if (autoCB256DBE_val == RegionFromId(32)) {
            gv_templePings[4] = PingLastCreated();
        }
        else if (autoCB256DBE_val == RegionFromId(33)) {
            gv_templePings[5] = PingLastCreated();
        }
        else {
            PingDestroy(PingLastCreated());
        }
    }

}

trigger auto_gf_KillTemple_Trigger = null;
point auto_gf_KillTemple_lp_templePoint;

void gf_KillTemple (point lp_templePoint) {
    auto_gf_KillTemple_lp_templePoint = lp_templePoint;

    if (auto_gf_KillTemple_Trigger == null) {
        auto_gf_KillTemple_Trigger = TriggerCreate("auto_gf_KillTemple_TriggerFunc");
    }

    TriggerExecute(auto_gf_KillTemple_Trigger, false, false);
}

bool auto_gf_KillTemple_TriggerFunc (bool testConds, bool runActions) {
    point lp_templePoint = auto_gf_KillTemple_lp_templePoint;

    // Automatic Variable Declarations
    // Implementation
    if ((RegionContainsPoint(RegionCircle(lp_templePoint, 16.0), CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
        CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 0.5, 0.5, 3.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_ULoadCampaignData("ZHybrid3");
    TriggerExecute(gt_Init01Technology, true, true);
    libSwaC_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03Units, true, true);
    TriggerExecute(gt_Init04Music, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulties, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    TriggerExecute(gt_IntroQ, true, true);
    TriggerExecute(gt_StartGameIntroQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("KerriganEnhance", 0), true);
    libSwaC_gf_EnableCampaignTechUnit(true, "Ultralisk", gv_pLAYER_01_USER);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION22222, "KerriganInfestedCosmetic", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION2, "DarkProtoss", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION22, "DarkProtoss", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION222, "DarkProtoss", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION2222, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION22222, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION, gv_pLAYER_02_DOMINION2, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION, gv_pLAYER_02_DOMINION22, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION, gv_pLAYER_02_DOMINION222, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION, gv_pLAYER_02_DOMINION2222, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION2, gv_pLAYER_02_DOMINION22, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION2, gv_pLAYER_02_DOMINION222, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION2, gv_pLAYER_02_DOMINION2222, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION22, gv_pLAYER_02_DOMINION222, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION22, gv_pLAYER_02_DOMINION2222, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION222, gv_pLAYER_02_DOMINION2222, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    PlayerGroupAdd(gv_protossPlayers, gv_pLAYER_02_DOMINION);
    PlayerGroupAdd(gv_protossPlayers, gv_pLAYER_02_DOMINION2);
    PlayerGroupAdd(gv_protossPlayers, gv_pLAYER_02_DOMINION22);
    PlayerGroupAdd(gv_protossPlayers, gv_pLAYER_02_DOMINION222);
    PlayerGroupAdd(gv_protossPlayers, gv_pLAYER_02_DOMINION2222);
    libSwaC_gf_ShareVisionAmongPlayers(gv_protossPlayers);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 300);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 150);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION2, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION2, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION22, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION22, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION222, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION222, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerSetState(gv_pLAYER_02_DOMINION2, c_playerStateFoodIgnored, true);
    PlayerSetState(gv_pLAYER_02_DOMINION22, c_playerStateFoodIgnored, true);
    PlayerSetState(gv_pLAYER_02_DOMINION222, c_playerStateFoodIgnored, true);
    PlayerSetColorIndex(gv_pLAYER_02_DOMINION, 3, true);
    PlayerSetColorIndex(gv_pLAYER_02_DOMINION2, 3, true);
    PlayerSetColorIndex(gv_pLAYER_02_DOMINION22, 3, true);
    PlayerSetColorIndex(gv_pLAYER_02_DOMINION222, 3, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoEFDB69A6_g;
    int autoEFDB69A6_u;
    unit autoEFDB69A6_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_CreateHero2(PointFromId(248), gv_pLAYER_01_USER, libSwaC_ge_HeroUnit_Kerrigan, 0.0, 0, libSwaC_ge_KerriganCreatePurpose_GamePlay);
    gv_kerrigan = UnitLastCreated();
    libSwaC_gf_SetHeroPanelUnit(1, UnitLastCreated());
    libSwaC_gf_CreateHero2(PointFromId(165), gv_pLAYER_01_USER, libSwaC_ge_HeroUnit_Stukov, 0.0, 0, libSwaC_ge_KerriganCreatePurpose_GamePlay);
    gv_stukov = UnitLastCreated();
    libSCDH_gf_CreateHeroPing(gv_stukov, libSCDH_ge_HeroPingType_Ally);
    libSwaC_gf_SetHeroPanelUnit(2, UnitLastCreated());
    gf_CreateChannelUI();
    gf_ShowHideChannelUI(false);
    gv_kerrigan2 = UnitFromId(242);
    UnitSetState(gv_kerrigan2, c_unitStateInvulnerable, true);
    UnitSetState(gv_kerrigan2, c_unitStateStatusBar, false);
    UnitSetState(gv_kerrigan2, c_unitStateTargetable, false);
    UnitSetInfoTip(gv_kerrigan2, StringExternal("Param/Value/28C034A8"));
    autoEFDB69A6_g = UnitGroup("Beacon_Zerg", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoEFDB69A6_u = UnitGroupCount(autoEFDB69A6_g, c_unitCountAll);
    for (;; autoEFDB69A6_u -= 1) {
        autoEFDB69A6_var = UnitGroupUnitFromEnd(autoEFDB69A6_g, autoEFDB69A6_u);
        if (autoEFDB69A6_var == null) { break; }
        libSwaC_gf_SetUnitInfoTextCampaign(autoEFDB69A6_var, StringExternal("Param/Value/33ECEFEA"), StringExternal("Param/Value/D3FBD915"), null);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music
//--------------------------------------------------------------------------------------------------
bool gt_Init04Music_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04Music_Init () {
    gt_Init04Music = TriggerCreate("gt_Init04Music_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(11)), c_animNameDefault, "Cover", c_animFlagPlayForever, c_animTimeDefault);
    ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(533)), "Signal Death");
    libLbty_gf_AutoRevealRegion(RegionFromId(28), RegionFromId(28), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(3), RegionFromId(3), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(4), RegionFromId(4), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(5), RegionFromId(5), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(6), RegionFromId(6), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(7), RegionFromId(7), gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto7D21F902_g;
    int auto7D21F902_var;
    playergroup autoAA7E5060_g;
    int autoAA7E5060_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_hybridHealth = libHots_gf_DifficultyValueFixed2(1000.0, 1250.0, 2000.0);
    gv_nullZoneReverseFactor = libHots_gf_DifficultyValueFixed2(0.07, 0.07, 0.07);
    auto7D21F902_g = gv_protossPlayers;
    auto7D21F902_var = -1;
    while (true) {
        auto7D21F902_var = PlayerGroupNextPlayer(auto7D21F902_g, auto7D21F902_var);
        if (auto7D21F902_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto7D21F902_var, "Charge", 1);
        TechTreeUpgradeAddLevel(auto7D21F902_var, "PsiStormTech", 1);
        if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
            TechTreeUpgradeAddLevel(auto7D21F902_var, "ExtendedThermalLance", 1);
            TechTreeUpgradeAddLevel(auto7D21F902_var, "BlinkTech", 1);
        }

    }
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        autoAA7E5060_g = gv_protossPlayers;
        autoAA7E5060_var = -1;
        while (true) {
            autoAA7E5060_var = PlayerGroupNextPlayer(autoAA7E5060_g, autoAA7E5060_var);
            if (autoAA7E5060_var < 0) { break; }
            TechTreeUpgradeAddLevel(autoAA7E5060_var, "ProtossGroundWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(autoAA7E5060_var, "ProtossAirWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(autoAA7E5060_var, "ProtossAirArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(autoAA7E5060_var, "ProtossGroundArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(autoAA7E5060_var, "ProtossShieldsLevel1", 1);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_AddMissionTipUserData("Alexei Stukov");
    libSwaC_gf_AddMissionTipUserData("Corrosive Blast");
    libSwaC_gf_AddMissionTipUserData("Spawn Infested Terrans");
    libSwaC_gf_AddMissionTipUserData("Regeneration Aura");
    libSwaC_gf_AddMissionTipUserData("Ultralisk");
    libSwaC_gf_AddMissionTipUserData("Xelnaga Temples");
    libSwaC_gf_AddMissionTipUserData("Null Zone");
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("InfestedStukov", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Probe", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Zealot", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Stalker", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Sentry", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("HighTemplar", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Archon", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Immortal", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Colossus", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Scout", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Phoenix", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("VoidRay", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Carrier", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("PhotonCannon", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Hybrid", false, gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2
//--------------------------------------------------------------------------------------------------
bool gt_S2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto3C8E4D8E_g;
    int auto3C8E4D8E_u;
    unit auto3C8E4D8E_var;

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto3C8E4D8E_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3C8E4D8E_u = UnitGroupCount(auto3C8E4D8E_g, c_unitCountAll);
    for (;; auto3C8E4D8E_u -= 1) {
        auto3C8E4D8E_var = UnitGroupUnitFromEnd(auto3C8E4D8E_g, auto3C8E4D8E_u);
        if (auto3C8E4D8E_var == null) { break; }
        UnitKill(auto3C8E4D8E_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_Init () {
    gt_S2 = TriggerCreate("gt_S2_Func");
    TriggerAddEventChatMessage(gt_S2, c_playerAny, "s2", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameIntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto452D5517_g;
    int auto452D5517_u;
    unit auto452D5517_var;
    unitgroup autoA83A89A2_g;
    int autoA83A89A2_u;
    unit autoA83A89A2_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
        libSwaC_gf_RemindPlayertoCreateAntiAirUnits();
    }

    libSwaC_gf_SetKerriganRevivable(false);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/C50207AB"), null, PointFromId(1194));
    auto452D5517_g = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(12), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto452D5517_u = UnitGroupCount(auto452D5517_g, c_unitCountAll);
    for (;; auto452D5517_u -= 1) {
        auto452D5517_var = UnitGroupUnitFromEnd(auto452D5517_g, auto452D5517_u);
        if (auto452D5517_var == null) { break; }
        UnitGroupAdd(gv_startingUnits, auto452D5517_var);
    }
    autoA83A89A2_g = UnitGroup("NaturalGas", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA83A89A2_u = UnitGroupCount(autoA83A89A2_g, c_unitCountAll);
    for (;; autoA83A89A2_u -= 1) {
        autoA83A89A2_var = UnitGroupUnitFromEnd(autoA83A89A2_g, autoA83A89A2_u);
        if (autoA83A89A2_var == null) { break; }
        UnitGroupAdd(gv_introGasPickups, autoA83A89A2_var);
        libNtve_gf_ShowHideUnit(autoA83A89A2_var, false);
    }
    Wait(3.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveDestroyProtossCreate, true, false);
    TriggerExecute(gt_ObjectiveKerriganMustSurviveCreate, true, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Hybrid03|Line00088", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    libSwaC_gf_CreateObjectivePing(true, UnitGetPosition(UnitFromId(724)), StringExternal("Param/Value/5F776A1F"));
    gv_protossBasePing = PingLastCreated();
    Wait(2.0, c_timeReal);
    TriggerQueueExit();
    Wait(8.0, c_timeReal);
    TriggerExecute(gt_TipMissionHelpQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameIntroQ_Init () {
    gt_StartGameIntroQ = TriggerCreate("gt_StartGameIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Tug-of-War Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameTugofWarQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoF11BB31C_g;
    int autoF11BB31C_u;
    unit autoF11BB31C_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_SetKerriganRevivable(true);
    gv_statisticProtossStructuresTotal = (UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) + UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION22, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) + UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION222, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/D3A5B236"), null, PointFromId(709));
    gv_tugOfWarStarted = true;
    TriggerEnable(gt_DefeatBaseDead, true);
    TriggerEnable(gt_DefeatDuelLose, true);
    TriggerEnable(gt_VictoryDuelWin, true);
    autoF11BB31C_g = gv_introGasPickups;
    autoF11BB31C_u = UnitGroupCount(autoF11BB31C_g, c_unitCountAll);
    for (;; autoF11BB31C_u -= 1) {
        autoF11BB31C_var = UnitGroupUnitFromEnd(autoF11BB31C_g, autoF11BB31C_u);
        if (autoF11BB31C_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoF11BB31C_var, true);
    }
    UnitSetState(gv_kerrigan, c_unitStateSelectable, false);
    ObjectiveSetDescription(gv_objectiveDestroyDominionBase2, libSwaC_gf_MissionObjectiveDescription("ZHybrid03Objective02"));
    TriggerExecute(gt_NullZone10Q, true, false);
    TriggerExecute(gt_CorrosiveBlastQ, true, false);
    TriggerExecute(gt_CreateTugWarBar, true, false);
    Wait(3.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveDeactivateTemplesCreate, true, true);
    TriggerExecute(gt_NullZoneStaticPings, true, false);
    Wait(2.0, c_timeReal);
    TriggerQueueExit();
    Wait(8.0, c_timeReal);
    TriggerExecute(gt_OpeningQ, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameTugofWarQ_Init () {
    gt_StartGameTugofWarQ = TriggerCreate("gt_StartGameTugofWarQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Opening Q
//--------------------------------------------------------------------------------------------------
bool gt_OpeningQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    gf_CreatePingforTemple(RegionFromId(29));
    Wait(1.0, c_timeReal);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_stukov, "zMission_Hybrid03|Line00095", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Hybrid03|Line00119", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OpeningQ_Init () {
    gt_OpeningQ = TriggerCreate("gt_OpeningQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: In Combat Check
//--------------------------------------------------------------------------------------------------
bool gt_InCombatCheck_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER) || (UnitGetOwner(EventUnitTarget()) == gv_pLAYER_01_USER)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCombat = true;
    TimerStart(gv_inCombatTimer, 3.0, false, c_timeAI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InCombatCheck_Init () {
    gt_InCombatCheck = TriggerCreate("gt_InCombatCheck_Func");
    TriggerAddEventUnitAttacked(gt_InCombatCheck, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: In Combat Timer Expirers
//--------------------------------------------------------------------------------------------------
bool gt_InCombatTimerExpirers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCombat = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InCombatTimerExpirers_Init () {
    gt_InCombatTimerExpirers = TriggerCreate("gt_InCombatTimerExpirers_Func");
    TriggerAddEventTimer(gt_InCombatTimerExpirers, gv_inCombatTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Corrosive Blast Q
//--------------------------------------------------------------------------------------------------
bool gt_CorrosiveBlastQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((UnitIsAlive(gv_stukov) == true) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION, RegionCircle(UnitGetPosition(gv_stukov), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
        Wait(1.0, c_timeAI);
    }
    TriggerQueueEnter();
    if ((gv_corrosiveBlastUsed == false)) {
        if ((UnitIsAlive(gv_stukov) == true) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION, RegionCircle(UnitGetPosition(gv_stukov), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
            gf_TeachCorrosiveBlast(UnitGroupClosestToPoint(UnitGroup(null, gv_pLAYER_02_DOMINION, RegionCircle(UnitGetPosition(gv_stukov), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(gv_stukov)));
            Wait(1.0, c_timeReal);
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
            libSwaC_gf_SendTransmissionCampaign(gv_stukov, "zMission_Hybrid03|Line00090", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
        }
        else {
            TriggerExecute(TriggerGetCurrent(), true, false);
        }
    }
    else {
        return true;
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CorrosiveBlastQ_Init () {
    gt_CorrosiveBlastQ = TriggerCreate("gt_CorrosiveBlastQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Corrosive Blast Used
//--------------------------------------------------------------------------------------------------
bool gt_CorrosiveBlastUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitTargetUnit()) == gv_pLAYER_02_DOMINION))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_corrosiveBlastUsed = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CorrosiveBlastUsed_Init () {
    gt_CorrosiveBlastUsed = TriggerCreate("gt_CorrosiveBlastUsed_Func");
    TriggerAddEventUnitAbility(gt_CorrosiveBlastUsed, UnitRefFromVariable("gv_stukov"), AbilityCommand("DevastatingShot", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stukov Revive
//--------------------------------------------------------------------------------------------------
bool gt_StukovRevive_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_achievementStukovSurvivalDeathCount += 1;
    if ((gv_tugOfWarStarted == true)) {
        libSwaC_gf_StartKerriganReviveCooldown2();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StukovRevive_Init () {
    gt_StukovRevive = TriggerCreate("gt_StukovRevive_Func");
    TriggerAddEventUnitDied(gt_StukovRevive, UnitRefFromVariable("gv_stukov"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bully Deactivate 1
//--------------------------------------------------------------------------------------------------
bool gt_BullyDeactivate1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(35), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BullyDeactivate1_Init () {
    gt_BullyDeactivate1 = TriggerCreate("gt_BullyDeactivate1_Func");
    TriggerAddEventUnitDied(gt_BullyDeactivate1, UnitRefFromUnit(UnitFromId(722)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bully Deactivate 2
//--------------------------------------------------------------------------------------------------
bool gt_BullyDeactivate2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION22, RegionFromId(36), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BullyDeactivate2_Init () {
    gt_BullyDeactivate2 = TriggerCreate("gt_BullyDeactivate2_Func");
    TriggerAddEventUnitDied(gt_BullyDeactivate2, UnitRefFromUnit(UnitFromId(573)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Complete
//--------------------------------------------------------------------------------------------------
bool gt_IntroComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionFromId(18), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyProtossComplete, true, true);
    libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/9F036873"));
    TriggerExecute(gt_MidQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroComplete_Init () {
    gt_IntroComplete = TriggerCreate("gt_IntroComplete_Func");
    TriggerAddEventTimePeriodic(gt_IntroComplete, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Initial Attack 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossInitialAttack1Q_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_playerUnits;

    // Automatic Variable Declarations
    unitgroup auto74F695C2_g;
    int auto74F695C2_u;
    unit auto74F695C2_var;

    // Variable Initialization
    lv_playerUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_playerUnits = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(18), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto74F695C2_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionFromId(27), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto74F695C2_u = UnitGroupCount(auto74F695C2_g, c_unitCountAll);
    for (;; auto74F695C2_u -= 1) {
        auto74F695C2_var = UnitGroupUnitFromEnd(auto74F695C2_g, auto74F695C2_u);
        if (auto74F695C2_var == null) { break; }
        UnitIssueOrder(auto74F695C2_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(lv_playerUnits, UnitGetPosition(auto74F695C2_var)))), c_orderQueueReplace);
    }
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(UnitFromId(1281), "zMission_Hybrid03|Line00071", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossInitialAttack1Q_Init () {
    gt_ProtossInitialAttack1Q = TriggerCreate("gt_ProtossInitialAttack1Q_Func");
    TriggerAddEventUnitRegion(gt_ProtossInitialAttack1Q, null, RegionFromId(27), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Initial Attack 2 Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossInitialAttack2Q_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_playerUnits;

    // Automatic Variable Declarations
    unitgroup auto3A48285B_g;
    int auto3A48285B_u;
    unit auto3A48285B_var;

    // Variable Initialization
    lv_playerUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_playerUnits = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(18), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3A48285B_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionFromId(26), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3A48285B_u = UnitGroupCount(auto3A48285B_g, c_unitCountAll);
    for (;; auto3A48285B_u -= 1) {
        auto3A48285B_var = UnitGroupUnitFromEnd(auto3A48285B_g, auto3A48285B_u);
        if (auto3A48285B_var == null) { break; }
        UnitIssueOrder(auto3A48285B_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(lv_playerUnits, UnitGetPosition(auto3A48285B_var)))), c_orderQueueReplace);
    }
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(UnitFromId(1254), "zMission_Hybrid03|Line00073", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossInitialAttack2Q_Init () {
    gt_ProtossInitialAttack2Q = TriggerCreate("gt_ProtossInitialAttack2Q_Func");
    TriggerAddEventUnitRegion(gt_ProtossInitialAttack2Q, null, RegionFromId(26), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Null Zone Static Pings
//--------------------------------------------------------------------------------------------------
bool gt_NullZoneStaticPings_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(gv_kerrigan2), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/7EB3060C"));
    PingSetUnit(PingLastCreated(), gv_kerrigan2);
    gv_narudPing = PingLastCreated();
    Wait(0.1, c_timeGame);
    TriggerExecute(gt_NullZoneMovementandArrowPings, true, false);
    Wait(0.1, c_timeGame);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", UnitGetPosition(gv_kerrigan22), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/D48C737D"));
    PingSetScale(PingLastCreated(), 0.9);
    PingSetUnit(PingLastCreated(), gv_kerrigan22);
    gv_nullZonePing = PingLastCreated();
    Wait(0.1, c_timeGame);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingCircleImportant", UnitGetPosition(gv_kerrigan), ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetColor(PingLastCreated(), Color(70.59, 47.06, 100.00));
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/36611DCA"));
    PingSetScale(PingLastCreated(), 0.4);
    PingSetUnit(PingLastCreated(), gv_kerrigan);
    gv_kerriganPing = PingLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NullZoneStaticPings_Init () {
    gt_NullZoneStaticPings = TriggerCreate("gt_NullZoneStaticPings_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Null Zone Movement and Arrow Pings
//--------------------------------------------------------------------------------------------------
bool gt_NullZoneMovementandArrowPings_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_numberOfArrowPings;
    fixed lv_arrowPingIncrement;
    fixed lv_arrowPingDistance;
    fixed lv_currentOffset;
    fixed lv_angle;

    // Automatic Variable Declarations
    const int auto967A8018_ae = 8;
    const int auto967A8018_ai = 1;
    const int autoD3B1F200_ae = 8;
    const int autoD3B1F200_ai = 1;
    int auto34245DEB_val;
    const int auto24219A82_ae = 8;
    const int auto24219A82_ai = 1;
    const int autoB9089551_ae = 8;
    const int autoB9089551_ai = 1;
    const int autoF1C26AF6_ae = 8;
    const int autoF1C26AF6_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = 1;
    for ( ; ( (auto967A8018_ai >= 0 && lv_index <= auto967A8018_ae) || (auto967A8018_ai < 0 && lv_index >= auto967A8018_ae) ) ; lv_index += auto967A8018_ai ) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingArrow", UnitGetPosition(gv_kerrigan22), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 45.0);
        PingSetScale(PingLastCreated(), 0.75);
        gv_nullZoneArrowPings[lv_index] = PingLastCreated();
        PingSetVisible(PingLastCreated(), false);
    }
    while (true) {
        Wait(1.0, c_timeAI);
        if ((UnitIsAlive(gv_kerrigan22) == false)) {
            PingDestroy(gv_nullZonePing);
            lv_index = 1;
            for ( ; ( (autoD3B1F200_ai >= 0 && lv_index <= autoD3B1F200_ae) || (autoD3B1F200_ai < 0 && lv_index >= autoD3B1F200_ae) ) ; lv_index += autoD3B1F200_ai ) {
                PingDestroy(gv_nullZoneArrowPings[lv_index]);
            }
            return true;
        }

        auto34245DEB_val = gv_nullZoneMovement;
        if (auto34245DEB_val == ge_PRESET_MovementDirection_Forward) {
            UnitSetPropertyFixed(gv_kerrigan22, c_unitPropMovementSpeed, 5.0);
            UnitIssueOrder(gv_kerrigan22, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(763)), c_orderQueueReplace);
            PingSetColor(gv_nullZonePing, Color(0.00, 100.00, 0.00));
            PingSetColor(gv_narudPing, Color(0.00, 100.00, 0.00));
            lv_arrowPingDistance = DistanceBetweenPoints(UnitGetPosition(gv_kerrigan), UnitGetPosition(gv_kerrigan22));
            lv_angle = AngleBetweenPoints(UnitGetPosition(gv_kerrigan), UnitGetPosition(gv_kerrigan22));
            lv_numberOfArrowPings = FloorI((lv_arrowPingDistance / 16.0));
            if ((lv_numberOfArrowPings <= 0)) {
                lv_numberOfArrowPings = 1;
            }

            lv_arrowPingIncrement = (lv_arrowPingDistance / (IntToFixed(lv_numberOfArrowPings) + 1.0));
            lv_currentOffset = 0.0;
            lv_index = 1;
            for ( ; ( (auto24219A82_ai >= 0 && lv_index <= auto24219A82_ae) || (auto24219A82_ai < 0 && lv_index >= auto24219A82_ae) ) ; lv_index += auto24219A82_ai ) {
                if ((lv_index <= lv_numberOfArrowPings)) {
                    lv_currentOffset += lv_arrowPingIncrement;
                    PingSetPosition(gv_nullZoneArrowPings[lv_index], PointWithOffsetPolar(UnitGetPosition(gv_kerrigan), lv_currentOffset, lv_angle));
                    PingSetColor(gv_nullZoneArrowPings[lv_index], Color(0.00, 100.00, 0.00));
                    PingSetRotation(gv_nullZoneArrowPings[lv_index], 45.0);
                    PingSetVisible(gv_nullZoneArrowPings[lv_index], true);
                }
                else {
                    PingSetVisible(gv_nullZoneArrowPings[lv_index], false);
                }
            }
        }
        else if (auto34245DEB_val == ge_PRESET_MovementDirection_Reverse) {
            UnitSetPropertyFixed(gv_kerrigan22, c_unitPropMovementSpeed, gv_nullZoneReverseFactor);
            UnitIssueOrder(gv_kerrigan22, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(gv_kerrigan)), c_orderQueueReplace);
            PingSetColor(gv_nullZonePing, Color(100.00, 0.00, 0.00));
            PingSetColor(gv_narudPing, Color(100.00, 0.00, 0.00));
            lv_arrowPingDistance = DistanceBetweenPoints(UnitGetPosition(gv_kerrigan2), UnitGetPosition(gv_kerrigan22));
            lv_angle = AngleBetweenPoints(UnitGetPosition(gv_kerrigan2), UnitGetPosition(gv_kerrigan22));
            lv_numberOfArrowPings = FloorI((lv_arrowPingDistance / 16.0));
            if ((lv_numberOfArrowPings <= 0)) {
                lv_numberOfArrowPings = 1;
            }

            lv_arrowPingIncrement = (lv_arrowPingDistance / (IntToFixed(lv_numberOfArrowPings) + 1.0));
            lv_currentOffset = 0.0;
            lv_index = 1;
            for ( ; ( (autoB9089551_ai >= 0 && lv_index <= autoB9089551_ae) || (autoB9089551_ai < 0 && lv_index >= autoB9089551_ae) ) ; lv_index += autoB9089551_ai ) {
                if ((lv_index <= lv_numberOfArrowPings)) {
                    lv_currentOffset += lv_arrowPingIncrement;
                    PingSetPosition(gv_nullZoneArrowPings[lv_index], PointWithOffsetPolar(UnitGetPosition(gv_kerrigan2), lv_currentOffset, lv_angle));
                    PingSetColor(gv_nullZoneArrowPings[lv_index], Color(100.00, 0.00, 0.00));
                    PingSetRotation(gv_nullZoneArrowPings[lv_index], 225.0);
                    PingSetVisible(gv_nullZoneArrowPings[lv_index], true);
                }
                else {
                    PingSetVisible(gv_nullZoneArrowPings[lv_index], false);
                }
            }
        }
        else if (auto34245DEB_val == ge_PRESET_MovementDirection_Stopped) {
            UnitIssueOrder(gv_kerrigan22, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            PingSetColor(gv_nullZonePing, Color(75.29, 75.29, 75.29));
            PingSetColor(gv_narudPing, Color(75.29, 75.29, 75.29));
            PingSetColor(gv_nullZoneArrowPings[1], Color(75.29, 75.29, 75.29));
            PingSetColor(gv_nullZoneArrowPings[2], Color(75.29, 75.29, 75.29));
            PingSetPosition(gv_nullZoneArrowPings[1], PointWithOffsetPolar(UnitGetPosition(gv_kerrigan22), 12.0, AngleBetweenPoints(UnitGetPosition(gv_kerrigan22), UnitGetPosition(gv_kerrigan))));
            PingSetPosition(gv_nullZoneArrowPings[2], PointWithOffsetPolar(UnitGetPosition(gv_kerrigan22), 12.0, AngleBetweenPoints(UnitGetPosition(gv_kerrigan22), UnitGetPosition(gv_kerrigan2))));
            PingSetRotation(gv_nullZoneArrowPings[1], 45.0);
            PingSetRotation(gv_nullZoneArrowPings[2], 225.0);
            PingSetVisible(gv_nullZoneArrowPings[1], true);
            PingSetVisible(gv_nullZoneArrowPings[2], true);
            lv_index = 3;
            for ( ; ( (autoF1C26AF6_ai >= 0 && lv_index <= autoF1C26AF6_ae) || (autoF1C26AF6_ai < 0 && lv_index >= autoF1C26AF6_ae) ) ; lv_index += autoF1C26AF6_ai ) {
                PingSetVisible(gv_nullZoneArrowPings[lv_index], false);
            }
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NullZoneMovementandArrowPings_Init () {
    gt_NullZoneMovementandArrowPings = TriggerCreate("gt_NullZoneMovementandArrowPings_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Null Zone 10% Q
//--------------------------------------------------------------------------------------------------
bool gt_NullZone10Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((gf_NullZonePercentage() <= 10.0))) {
        Wait(1.0, c_timeAI);
    }
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid03|Line00002", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Hybrid03|Line00135", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NullZone10Q_Init () {
    gt_NullZone10Q = TriggerCreate("gt_NullZone10Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create TugWar Bar
//--------------------------------------------------------------------------------------------------
bool gt_CreateTugWarBar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/TugOfWarFrame");
    gv_nullZoneBarPanel = DialogControlLastCreated();
    DialogControlHookup(gv_nullZoneBarPanel, c_triggerControlTypeFlash, "TugOfWarEffects");
    gv_nullZoneTugOfWar = DialogControlLastCreated();
    DialogControlSetVisible(gv_nullZoneTugOfWar, PlayerGroupAll(), true);
    DialogControlHookup(gv_nullZoneBarPanel, c_triggerControlTypeImage, "LeftIconImage");
    gv_nullZoneBarPortraitKerrigan = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-hero-kerriganqueenofblades.dds", PlayerGroupAll());
    DialogControlHookup(gv_nullZoneBarPanel, c_triggerControlTypeLabel, "LeftNameLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), UnitTypeGetName(UnitGetType(gv_kerrigan)), PlayerGroupAll());
    DialogControlHookup(gv_nullZoneBarPanel, c_triggerControlTypeImage, "RightIconImage");
    gv_nullZoneBarPortraitNarud = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-boss-narud.dds", PlayerGroupAll());
    DialogControlHookup(gv_nullZoneBarPanel, c_triggerControlTypeLabel, "RightNameLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), UnitTypeGetName(UnitGetType(gv_kerrigan2)), PlayerGroupAll());
    DialogControlSetVisible(gv_nullZoneBarPanel, PlayerGroupAll(), true);
    TriggerExecute(gt_UpdateTugWarBar, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateTugWarBar_Init () {
    gt_CreateTugWarBar = TriggerCreate("gt_CreateTugWarBar_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update TugWar Bar
//--------------------------------------------------------------------------------------------------
bool gt_UpdateTugWarBar_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_distanceK;
    fixed lv_distanceN;
    fixed lv_tugofWarBarPercent;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((UnitIsAlive(gv_kerrigan) == true) && (UnitIsAlive(gv_kerrigan2) == true)) {
            lv_distanceK = DistanceBetweenPoints(UnitGetPosition(gv_kerrigan), UnitGetPosition(gv_kerrigan22));
            lv_distanceK -= 1.5;
            lv_distanceN = DistanceBetweenPoints(UnitGetPosition(gv_kerrigan2), UnitGetPosition(gv_kerrigan22));
            lv_distanceN -= 2.0;
            lv_tugofWarBarPercent = (1.0*(lv_distanceK/(lv_distanceK+lv_distanceN)));
        }
        else {
            if ((UnitIsAlive(gv_kerrigan) == true)) {
                lv_tugofWarBarPercent = 1.0;
                libNtve_gf_SetDialogItemColor(gv_nullZoneBarPortraitNarud, Color(100.00, 0.00, 0.00), PlayerGroupAll());
            }
            else {
                lv_tugofWarBarPercent = 0;
                libNtve_gf_SetDialogItemColor(gv_nullZoneBarPortraitKerrigan, Color(100.00, 0.00, 0.00), PlayerGroupAll());
            }
        }
        DialogControlInvokeAsString(gv_nullZoneTugOfWar, PlayerGroupAll(), "SetMarker", FixedToString(lv_tugofWarBarPercent, c_fixedPrecisionAny), null, null, null);
        Wait(0.125, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateTugWarBar_Init () {
    gt_UpdateTugWarBar = TriggerCreate("gt_UpdateTugWarBar_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Destory TugWar Bar
//--------------------------------------------------------------------------------------------------
bool gt_DestoryTugWarBar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_UpdateTugWarBar);
    DialogControlDestroy(gv_nullZoneBarPanel);
    gv_nullZoneBarPanel = c_invalidDialogControlId;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DestoryTugWarBar_Init () {
    gt_DestoryTugWarBar = TriggerCreate("gt_DestoryTugWarBar_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Beam Region Sounds
//--------------------------------------------------------------------------------------------------
bool gt_KerriganBeamRegionSounds_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_a;
    point lv_b;
    fixed lv_d;
    int lv_di;
    fixed lv_facing;
    int lv_i;
    fixed lv_x;
    fixed lv_y;

    // Automatic Variable Declarations
    int autoA1C900F0_ae;
    const int autoA1C900F0_ai = 1;

    // Variable Initialization
    lv_a = UnitGetPosition(gv_kerrigan);
    lv_b = UnitGetPosition(gv_kerrigan22);
    lv_d = DistanceBetweenPoints(UnitGetPosition(gv_kerrigan), UnitGetPosition(gv_kerrigan22));
    lv_facing = AngleBetweenPoints(UnitGetPosition(gv_kerrigan), UnitGetPosition(gv_kerrigan22));

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_kerriganSoundRegion = null;
    ActorScopeKill(ActorScopeFromActor(gv_kerriganSoundRegionActor));
    Wait(0.0625, c_timeGame);
    lv_x = (PointGetX(lv_a) + (Cos(lv_facing) * 5.0));
    lv_y = (PointGetY(lv_a) + (Sin(lv_facing) * 5.0));
    gv_kerriganSoundRegion = RegionCircle(Point(lv_x, lv_y), 1.0);
    lv_di = FixedToInt((lv_d / 5.0));
    autoA1C900F0_ae = lv_di;
    lv_i = 1;
    for ( ; ( (autoA1C900F0_ai >= 0 && lv_i <= autoA1C900F0_ae) || (autoA1C900F0_ai < 0 && lv_i >= autoA1C900F0_ae) ) ; lv_i += autoA1C900F0_ai ) {
        lv_x = (PointGetX(lv_a) + (Cos(lv_facing) * (IntToFixed(lv_i) * 5.0)));
        lv_y = (PointGetY(lv_a) + (Sin(lv_facing) * (IntToFixed(lv_i) * 5.0)));
        RegionAddCircle(gv_kerriganSoundRegion, true, Point(lv_x, lv_y), 3.0);
    }
    ActorRegionCreate(null, "KerriganBeamRegion", gv_kerriganSoundRegion);
    gv_kerriganSoundRegionActor = libNtve_gf_ActorLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganBeamRegionSounds_Init () {
    gt_KerriganBeamRegionSounds = TriggerCreate("gt_KerriganBeamRegionSounds_Func");
    TriggerEnable(gt_KerriganBeamRegionSounds, false);
    TriggerAddEventTimePeriodic(gt_KerriganBeamRegionSounds, 2.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Narud Beam Region Sounds
//--------------------------------------------------------------------------------------------------
bool gt_NarudBeamRegionSounds_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_a;
    point lv_b;
    fixed lv_d;
    int lv_di;
    fixed lv_facing;
    int lv_i;
    fixed lv_x;
    fixed lv_y;

    // Automatic Variable Declarations
    int auto053EBF50_ae;
    const int auto053EBF50_ai = 1;

    // Variable Initialization
    lv_a = UnitGetPosition(gv_kerrigan2);
    lv_b = UnitGetPosition(gv_kerrigan22);
    lv_d = DistanceBetweenPoints(UnitGetPosition(gv_kerrigan2), UnitGetPosition(gv_kerrigan22));
    lv_facing = AngleBetweenPoints(UnitGetPosition(gv_kerrigan2), UnitGetPosition(gv_kerrigan22));

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_narudSoundRegion = null;
    ActorScopeKill(ActorScopeFromActor(gv_narudSoundRegionActor));
    Wait(0.0625, c_timeGame);
    lv_x = (PointGetX(lv_a) + (Cos(lv_facing) * 5.0));
    lv_y = (PointGetY(lv_a) + (Sin(lv_facing) * 5.0));
    gv_narudSoundRegion = RegionCircle(Point(lv_x, lv_y), 1.0);
    lv_di = FixedToInt((lv_d / 5.0));
    auto053EBF50_ae = lv_di;
    lv_i = 1;
    for ( ; ( (auto053EBF50_ai >= 0 && lv_i <= auto053EBF50_ae) || (auto053EBF50_ai < 0 && lv_i >= auto053EBF50_ae) ) ; lv_i += auto053EBF50_ai ) {
        lv_x = (PointGetX(lv_a) + (Cos(lv_facing) * (IntToFixed(lv_i) * 5.0)));
        lv_y = (PointGetY(lv_a) + (Sin(lv_facing) * (IntToFixed(lv_i) * 5.0)));
        RegionAddCircle(gv_narudSoundRegion, true, Point(lv_x, lv_y), 3.0);
    }
    ActorRegionCreate(null, "NarudBeamRegion", gv_narudSoundRegion);
    gv_narudSoundRegionActor = libNtve_gf_ActorLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NarudBeamRegionSounds_Init () {
    gt_NarudBeamRegionSounds = TriggerCreate("gt_NarudBeamRegionSounds_Func");
    TriggerEnable(gt_NarudBeamRegionSounds, false);
    TriggerAddEventTimePeriodic(gt_NarudBeamRegionSounds, 2.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Dies
//--------------------------------------------------------------------------------------------------
bool gt_HybridDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Hybrid") || (UnitGetType(EventUnit()) == "HybridChannel")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_hybridsKilled += 1;
    if ((libHots_gf_DifficultyValueInt2(0, 1, 1) == 1)) {
        if ((TimerGetRemaining(gv_achievementHybridKilledTimer) != 0.0)) {
            TriggerExecute(gt_AchievementKill2Hybridwithin20secondsNH, true, false);
        }
        else {
            TimerStart(gv_achievementHybridKilledTimer, 20.0, false, c_timeAI);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridDies_Init () {
    gt_HybridDies = TriggerCreate("gt_HybridDies_Func");
    TriggerAddEventUnitDied(gt_HybridDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Temple Channeling
//--------------------------------------------------------------------------------------------------
bool gt_TempleChanneling_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    point lv_beaconPoint;
    point lv_templePoint;
    actor lv_templeDoodadActor;
    unit lv_dummyUnit;
    int lv_channelProgress;
    const int lv_channelTime = 60;

    // Automatic Variable Declarations
    region autoF3026113_val;
    unitgroup auto9A6E41BA_g;
    int auto9A6E41BA_u;
    unit auto9A6E41BA_var;
    const int autoBC1B26C1_ae = 1;
    const int autoBC1B26C1_ai = -1;
    const int autoDBBF0ECC_ae = 5;
    const int autoDBBF0ECC_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("Beacon_Zerg", 0, EventUnitRegion(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_templeDefensePoint = RegionGetCenter(EventUnitRegion());
    autoF3026113_val = EventUnitRegion();
    if (autoF3026113_val == RegionFromId(29)) {
        lv_templePoint = PointFromId(849);
        gv_templeDefenseRegion = RegionFromId(38);
        lv_templeDoodadActor = ActorFromDoodad(DoodadFromId(59));
    }
    else if (autoF3026113_val == RegionFromId(30)) {
        lv_templePoint = PointFromId(853);
        gv_templeDefenseRegion = RegionFromId(37);
        lv_templeDoodadActor = ActorFromDoodad(DoodadFromId(171));
    }
    else if (autoF3026113_val == RegionFromId(31)) {
        lv_templePoint = PointFromId(850);
        gv_templeDefenseRegion = RegionFromId(39);
        lv_templeDoodadActor = ActorFromDoodad(DoodadFromId(192));
    }
    else if (autoF3026113_val == RegionFromId(32)) {
        lv_templePoint = PointFromId(854);
        gv_templeDefenseRegion = RegionFromId(40);
        lv_templeDoodadActor = ActorFromDoodad(DoodadFromId(170));
    }
    else if (autoF3026113_val == RegionFromId(33)) {
        lv_templePoint = PointFromId(851);
        gv_templeDefenseRegion = RegionFromId(41);
        lv_templeDoodadActor = ActorFromDoodad(DoodadFromId(194));
    }
    else {
        return true;
    }
    lv_beaconPoint = UnitGetPosition(UnitGroupUnit(UnitGroup("Beacon_Zerg", c_playerAny, EventUnitRegion(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1));
    auto9A6E41BA_g = UnitGroup("Beacon_Zerg", c_playerAny, EventUnitRegion(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9A6E41BA_u = UnitGroupCount(auto9A6E41BA_g, c_unitCountAll);
    for (;; auto9A6E41BA_u -= 1) {
        auto9A6E41BA_var = UnitGroupUnitFromEnd(auto9A6E41BA_g, auto9A6E41BA_u);
        if (auto9A6E41BA_var == null) { break; }
        UnitKill(auto9A6E41BA_var);
    }
    gf_SetNullZoneDirection(ge_PRESET_MovementDirection_Stopped);
    libNtve_gf_MakeUnitUncommandable(gv_stukov, true);
    UnitIssueOrder(gv_stukov, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(EventUnitRegion())), c_orderQueueReplace);
    Wait(1.0, c_timeAI);
    UnitIssueOrder(gv_stukov, OrderTargetingPoint(AbilityCommand("move", 4), lv_templePoint), c_orderQueueAddToEnd);
    Wait(0.5, c_timeAI);
    UnitIssueOrder(gv_stukov, Order(AbilityCommand("StukovCrystalChannel", 0)), c_orderQueueReplace);
    libNtve_gf_MakeUnitFacePoint(gv_stukov, lv_templePoint, 0.0);
    Wait(0.1, c_timeAI);
    libNtve_gf_MakeUnitUncommandable(gv_stukov, false);
    if ((UnitIsAlive(gv_stukov) == true)) {
        gf_ShowHideChannelUI(true);
        gf_UpdateChannelUI(lv_channelTime, lv_channelTime);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Mutalisk", c_unitCreateIgnorePlacement, 0, lv_templePoint);
        lv_dummyUnit = UnitLastCreated();
        UnitSetHeight(lv_dummyUnit, 8.0, 0.0);
        UnitSetState(lv_dummyUnit, c_unitStateHidden, true);
        UnitSetState(lv_dummyUnit, c_unitStateInvulnerable, true);
        UnitSetState(lv_dummyUnit, c_unitStateSelectable, false);
        UnitSetState(lv_dummyUnit, c_unitStateTargetable, false);
        UnitSetState(lv_dummyUnit, c_unitStateTooltipable, false);
        UnitSetState(lv_dummyUnit, c_unitStateStatusBar, false);
        UnitBehaviorAdd(lv_dummyUnit, "StukovEnhanceBeam", lv_dummyUnit, 1);
        TriggerExecute(gt_TempleHoldoutAttacks, true, false);
        TriggerExecute(gt_TempleChannelingQ, true, false);
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Beacon_Zerg", c_unitCreateIgnorePlacement, 0, lv_beaconPoint);
        libSwaC_gf_SetUnitInfoTextCampaign(UnitLastCreated(), StringExternal("Param/Value/ADE7B1E9"), StringExternal("Param/Value/959E28B7"), null);
    }
    if ((UnitIsAlive(gv_stukov) == true)) {
        lv_channelProgress = lv_channelTime;
        for ( ; ( (autoBC1B26C1_ai >= 0 && lv_channelProgress <= autoBC1B26C1_ae) || (autoBC1B26C1_ai < 0 && lv_channelProgress >= autoBC1B26C1_ae) ) ; lv_channelProgress += autoBC1B26C1_ai ) {
            gf_UpdateChannelUI(lv_channelProgress, lv_channelTime);
            Wait(1.0, c_timeAI);
            if ((UnitIsAlive(gv_stukov) == false)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Beacon_Zerg", c_unitCreateIgnorePlacement, 0, lv_beaconPoint);
                libSwaC_gf_SetUnitInfoTextCampaign(UnitLastCreated(), StringExternal("Param/Value/1D5B2717"), StringExternal("Param/Value/101CEA0B"), null);
                break;
            }

        }
    }

    gf_ShowHideChannelUI(false);
    UnitIssueOrder(gv_stukov, Order(AbilityCommand("StukovCrystalChannel", 1)), c_orderQueueReplace);
    UnitRemove(lv_dummyUnit);
    if ((UnitIsAlive(gv_stukov) == true)) {
        gv_templesDeactivated += 1;
        ActorSend(lv_templeDoodadActor, "Signal PowerDown");
        if ((lv_templePoint == PointFromId(849))) {
            VisRevealerDestroy(gv_firstTempleReveal);
        }

        gf_KillTemple(lv_templePoint);
        UnitIssueOrder(gv_stukov, OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(gv_stukov), 1.0, (UnitGetFacing(gv_stukov) + 180.0))), c_orderQueueReplace);
        TriggerExecute(gt_TempleDeactivatedQ, true, false);
        gf_SetNullZoneDirection(ge_PRESET_MovementDirection_Forward);
        TriggerExecute(gt_ObjectiveDeactivateTemplesCreate, true, false);
        if ((gv_templesDeactivated >= 5)) {
            gv_crystalsDestroyed = 5;
            libSwaC_gf_SetMissionObjectiveProgress2("ZHybrid03Objective01", gv_templesDeactivated, true, null, true);
            TriggerExecute(gt_ObjectiveDeactivateTemplesComplete, true, false);
        }
        else {
            libSwaC_gf_SetMissionObjectiveProgress2("ZHybrid03Objective01", gv_templesDeactivated, true, null, true);
        }
        lv_i = 1;
        for ( ; ( (autoDBBF0ECC_ai >= 0 && lv_i <= autoDBBF0ECC_ae) || (autoDBBF0ECC_ai < 0 && lv_i >= autoDBBF0ECC_ae) ) ; lv_i += autoDBBF0ECC_ai ) {
            if ((gv_templePings[lv_i] != c_invalidPingId)) {
                if ((libNtve_gf_UnitInRegion(gv_stukov, RegionCircle(PingGetPosition(gv_templePings[lv_i]), 8.0)) == true)) {
                    PingDestroy(gv_templePings[lv_i]);
                    gv_templePings[lv_i] = c_invalidPingId;
                    break;
                }

            }

        }
    }
    else {
        gf_SetNullZoneDirection(ge_PRESET_MovementDirection_Reverse);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TempleChanneling_Init () {
    gt_TempleChanneling = TriggerCreate("gt_TempleChanneling_Func");
    TriggerAddEventUnitRegion(gt_TempleChanneling, UnitRefFromVariable("gv_stukov"), RegionFromId(29), true);
    TriggerAddEventUnitRegion(gt_TempleChanneling, UnitRefFromVariable("gv_stukov"), RegionFromId(30), true);
    TriggerAddEventUnitRegion(gt_TempleChanneling, UnitRefFromVariable("gv_stukov"), RegionFromId(31), true);
    TriggerAddEventUnitRegion(gt_TempleChanneling, UnitRefFromVariable("gv_stukov"), RegionFromId(32), true);
    TriggerAddEventUnitRegion(gt_TempleChanneling, UnitRefFromVariable("gv_stukov"), RegionFromId(33), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Temple Holdout Attacks
//--------------------------------------------------------------------------------------------------
bool gt_TempleHoldoutAttacks_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoADDD8551_val;
    int auto0BC94FF0_n;
    int auto0BC94FF0_i;
    int auto91C47000_n;
    int auto91C47000_i;
    int auto533A18BB_n;
    int auto533A18BB_i;
    int autoEFF369C3_n;
    int autoEFF369C3_i;
    int auto9314DBA7_n;
    int auto9314DBA7_i;
    int auto3470C531_n;
    int auto3470C531_i;
    int auto1C9259CB_n;
    int auto1C9259CB_i;
    int autoD4B675E1_n;
    int autoD4B675E1_i;
    int autoD8E01007_n;
    int autoD8E01007_i;
    int autoA08EA8CC_n;
    int autoA08EA8CC_i;
    int auto5C9BD8CE_n;
    int auto5C9BD8CE_i;
    int autoB6B85A35_n;
    int autoB6B85A35_i;
    int autoE84FCBE1_n;
    int autoE84FCBE1_i;
    int auto175193DE_n;
    int auto175193DE_i;

    // Actions
    if (!runActions) {
        return true;
    }

    VisRevealArea(gv_pLAYER_02_DOMINION222, RegionCircle(RegionGetCenter(gv_templeDefenseRegion), 32.0), 20.0, false);
    autoADDD8551_val = gv_templesDeactivated;
    if (autoADDD8551_val == 0) {
        if ((gv_templeGuardiansSpawned[5] == false)) {
            gv_templeGuardiansSpawned[5] = true;
            Wait((SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Hybrid03|Line00096", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Hybrid03|Line00098", true), c_soundIndexAny))), c_timeAI);
        }
        else {
            Wait((SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Hybrid03|Line00098", true), c_soundIndexAny))), c_timeAI);
        }
        auto0BC94FF0_n = libHots_gf_DifficultyValueInt2(3, 3, 6);
        for (auto0BC94FF0_i = 1; auto0BC94FF0_i <= auto0BC94FF0_n; auto0BC94FF0_i += 1) {
            UnitIssueOrder(gv_templeSuperWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), RegionRandomPoint(gv_templeDefenseRegion)), c_orderQueueReplace);
            Wait(0.35, c_timeAI);
        }
        auto91C47000_n = libHots_gf_DifficultyValueInt2(2, 2, 3);
        for (auto91C47000_i = 1; auto91C47000_i <= auto91C47000_n; auto91C47000_i += 1) {
            UnitIssueOrder(gv_templeSuperWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), RegionRandomPoint(gv_templeDefenseRegion)), c_orderQueueReplace);
            Wait(0.35, c_timeAI);
        }
        Wait(10.0, c_timeAI);
        if ((gv_templeGuardiansSpawned[0] == false) && (UnitIsAlive(gv_stukov) == true)) {
            gv_templeGuardiansSpawned[0] = true;
            if (((libNtve_gf_UnitInRegion(gv_stukov, RegionCircle(RegionGetCenter(RegionFromId(29)), 8.0)) == true) || (libNtve_gf_UnitInRegion(gv_stukov, RegionCircle(RegionGetCenter(RegionFromId(31)), 8.0)) == true) || (libNtve_gf_UnitInRegion(gv_stukov, RegionCircle(RegionGetCenter(RegionFromId(33)), 8.0)) == true))) {
                gf_SpawnHybridforTemple(PointFromId(602), gv_templeDefensePoint);
            }
            else {
                gf_SpawnHybridforTemple(PointFromId(497), gv_templeDefensePoint);
            }
            Wait(5.0, c_timeAI);
            TriggerExecute(gt_FirstHybridQ, true, false);
        }

    }
    else if (autoADDD8551_val == 1) {
        Wait((SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Hybrid03|Line00100", true), c_soundIndexAny))), c_timeAI);
        auto533A18BB_n = libHots_gf_DifficultyValueInt2(3, 3, 6);
        for (auto533A18BB_i = 1; auto533A18BB_i <= auto533A18BB_n; auto533A18BB_i += 1) {
            UnitIssueOrder(gv_templeSuperWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), RegionRandomPoint(gv_templeDefenseRegion)), c_orderQueueReplace);
            Wait(0.35, c_timeAI);
        }
        autoEFF369C3_n = libHots_gf_DifficultyValueInt2(2, 2, 3);
        for (autoEFF369C3_i = 1; autoEFF369C3_i <= autoEFF369C3_n; autoEFF369C3_i += 1) {
            UnitIssueOrder(gv_templeSuperWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), RegionRandomPoint(gv_templeDefenseRegion)), c_orderQueueReplace);
            Wait(0.35, c_timeAI);
        }
        auto9314DBA7_n = libHots_gf_DifficultyValueInt2(0, 1, 2);
        for (auto9314DBA7_i = 1; auto9314DBA7_i <= auto9314DBA7_n; auto9314DBA7_i += 1) {
            UnitIssueOrder(gv_templeSuperWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 14), RegionRandomPoint(gv_templeDefenseRegion)), c_orderQueueReplace);
            Wait(0.35, c_timeAI);
        }
        if ((gv_templeGuardiansSpawned[1] == false)) {
            if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
                if (((libNtve_gf_UnitInRegion(gv_stukov, RegionCircle(RegionGetCenter(RegionFromId(29)), 8.0)) == true) || (libNtve_gf_UnitInRegion(gv_stukov, RegionCircle(RegionGetCenter(RegionFromId(31)), 8.0)) == true) || (libNtve_gf_UnitInRegion(gv_stukov, RegionCircle(RegionGetCenter(RegionFromId(33)), 8.0)) == true))) {
                    gf_SpawnHybridforTemple(PointFromId(602), gv_templeDefensePoint);
                }
                else {
                    gf_SpawnHybridforTemple(PointFromId(497), gv_templeDefensePoint);
                }
            }
            else {
                gf_SpawnHybridforTemple(PointFromId(602), gv_templeDefensePoint);
                gf_SpawnHybridforTemple(PointFromId(497), gv_templeDefensePoint);
            }
            gv_templeGuardiansSpawned[1] = true;
        }

    }
    else if (autoADDD8551_val == 2) {
        Wait((SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Hybrid03|Line00102", true), c_soundIndexAny))), c_timeAI);
        auto3470C531_n = libHots_gf_DifficultyValueInt2(4, 4, 8);
        for (auto3470C531_i = 1; auto3470C531_i <= auto3470C531_n; auto3470C531_i += 1) {
            UnitIssueOrder(gv_templeSuperWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), RegionRandomPoint(gv_templeDefenseRegion)), c_orderQueueReplace);
            Wait(0.35, c_timeAI);
        }
        auto1C9259CB_n = libHots_gf_DifficultyValueInt2(2, 2, 3);
        for (auto1C9259CB_i = 1; auto1C9259CB_i <= auto1C9259CB_n; auto1C9259CB_i += 1) {
            UnitIssueOrder(gv_templeSuperWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 5), RegionRandomPoint(gv_templeDefenseRegion)), c_orderQueueReplace);
            Wait(0.35, c_timeAI);
        }
        autoD4B675E1_n = libHots_gf_DifficultyValueInt2(1, 2, 3);
        for (autoD4B675E1_i = 1; autoD4B675E1_i <= autoD4B675E1_n; autoD4B675E1_i += 1) {
            UnitIssueOrder(gv_templeSuperWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 14), RegionRandomPoint(gv_templeDefenseRegion)), c_orderQueueReplace);
            Wait(0.35, c_timeAI);
        }
        if ((gv_templeGuardiansSpawned[2] == false)) {
            gf_SpawnHybridforTemple(PointFromId(602), gv_templeDefensePoint);
            gf_SpawnHybridforTemple(PointFromId(497), gv_templeDefensePoint);
            gv_templeGuardiansSpawned[2] = true;
        }

    }
    else if (autoADDD8551_val == 3) {
        if ((gv_templeGuardiansSpawned[3] == false)) {
            if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
            }
            else {
                if (((libNtve_gf_UnitInRegion(gv_stukov, RegionCircle(RegionGetCenter(RegionFromId(29)), 8.0)) == true) || (libNtve_gf_UnitInRegion(gv_stukov, RegionCircle(RegionGetCenter(RegionFromId(31)), 8.0)) == true) || (libNtve_gf_UnitInRegion(gv_stukov, RegionCircle(RegionGetCenter(RegionFromId(33)), 8.0)) == true))) {
                    gf_SpawnHybridforTemple(PointFromId(602), gv_templeDefensePoint);
                }
                else {
                    gf_SpawnHybridforTemple(PointFromId(497), gv_templeDefensePoint);
                }
            }
        }

        Wait((SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Hybrid03|Line00104", true), c_soundIndexAny))), c_timeAI);
        autoD8E01007_n = libHots_gf_DifficultyValueInt2(2, 2, 2);
        for (autoD8E01007_i = 1; autoD8E01007_i <= autoD8E01007_n; autoD8E01007_i += 1) {
            UnitIssueOrder(gv_templeSuperWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 9), RegionRandomPoint(gv_templeDefenseRegion)), c_orderQueueReplace);
            Wait(0.35, c_timeAI);
        }
        autoA08EA8CC_n = libHots_gf_DifficultyValueInt2(2, 2, 4);
        for (autoA08EA8CC_i = 1; autoA08EA8CC_i <= autoA08EA8CC_n; autoA08EA8CC_i += 1) {
            UnitIssueOrder(gv_templeSuperWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), RegionRandomPoint(gv_templeDefenseRegion)), c_orderQueueReplace);
            Wait(0.35, c_timeAI);
        }
        auto5C9BD8CE_n = libHots_gf_DifficultyValueInt2(1, 1, 2);
        for (auto5C9BD8CE_i = 1; auto5C9BD8CE_i <= auto5C9BD8CE_n; auto5C9BD8CE_i += 1) {
            UnitIssueOrder(gv_templeSuperWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 8), RegionRandomPoint(gv_templeDefenseRegion)), c_orderQueueReplace);
            Wait(0.35, c_timeAI);
        }
        if ((gv_templeGuardiansSpawned[3] == false)) {
            gf_SpawnHybridforTemple(PointFromId(602), gv_templeDefensePoint);
            gf_SpawnHybridforTemple(PointFromId(497), gv_templeDefensePoint);
            gv_templeGuardiansSpawned[3] = true;
        }

    }
    else if (autoADDD8551_val == 4) {
        if ((gv_templeGuardiansSpawned[4] == false)) {
            gf_SpawnHybridforTemple(PointFromId(602), gv_templeDefensePoint);
            gf_SpawnHybridforTemple(PointFromId(497), gv_templeDefensePoint);
        }

        Wait((SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Hybrid03|Line00106", true), c_soundIndexAny))), c_timeAI);
        autoB6B85A35_n = libHots_gf_DifficultyValueInt2(4, 4, 6);
        for (autoB6B85A35_i = 1; autoB6B85A35_i <= autoB6B85A35_n; autoB6B85A35_i += 1) {
            UnitIssueOrder(gv_templeSuperWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), RegionRandomPoint(gv_templeDefenseRegion)), c_orderQueueReplace);
            Wait(0.35, c_timeAI);
        }
        autoE84FCBE1_n = libHots_gf_DifficultyValueInt2(1, 2, 3);
        for (autoE84FCBE1_i = 1; autoE84FCBE1_i <= autoE84FCBE1_n; autoE84FCBE1_i += 1) {
            UnitIssueOrder(gv_templeSuperWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 15), RegionRandomPoint(gv_templeDefenseRegion)), c_orderQueueReplace);
            Wait(0.35, c_timeAI);
        }
        auto175193DE_n = libHots_gf_DifficultyValueInt2(2, 2, 4);
        for (auto175193DE_i = 1; auto175193DE_i <= auto175193DE_n; auto175193DE_i += 1) {
            UnitIssueOrder(gv_templeSuperWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 14), RegionRandomPoint(gv_templeDefenseRegion)), c_orderQueueReplace);
            Wait(0.35, c_timeAI);
        }
        if ((gv_templeGuardiansSpawned[4] == false)) {
            if (((libNtve_gf_UnitInRegion(gv_stukov, RegionCircle(RegionGetCenter(RegionFromId(29)), 8.0)) == true) || (libNtve_gf_UnitInRegion(gv_stukov, RegionCircle(RegionGetCenter(RegionFromId(31)), 8.0)) == true) || (libNtve_gf_UnitInRegion(gv_stukov, RegionCircle(RegionGetCenter(RegionFromId(33)), 8.0)) == true))) {
                gf_SpawnHybridforTemple(PointFromId(602), gv_templeDefensePoint);
            }
            else {
                gf_SpawnHybridforTemple(PointFromId(497), gv_templeDefensePoint);
            }
            gv_templeGuardiansSpawned[4] = true;
        }

    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TempleHoldoutAttacks_Init () {
    gt_TempleHoldoutAttacks = TriggerCreate("gt_TempleHoldoutAttacks_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Temple Channeling Q
//--------------------------------------------------------------------------------------------------
bool gt_TempleChannelingQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_timeOutTimer;

    // Automatic Variable Declarations
    int auto16BAF5C4_val;

    // Variable Initialization
    lv_timeOutTimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(lv_timeOutTimer, 10.0, false, c_timeAI);
    TriggerQueueEnter();
    if (((UnitIsAlive(gv_stukov) == false) || (TimerGetRemaining(lv_timeOutTimer) == 0.0))) {
        return true;
    }

    auto16BAF5C4_val = gv_templesDeactivated;
    if (auto16BAF5C4_val == 0) {
        if ((gv_templeChannelQs[0] == false)) {
            gv_templeChannelQs[0] = true;
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
            libSwaC_gf_SendTransmissionCampaign(gv_stukov, "zMission_Hybrid03|Line00096", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid03|Line00098", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libSwaC_gf_SendTransmissionCampaign(gv_stukov, "zMission_Hybrid03|Line00097", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
        }
        else {
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
            libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid03|Line00098", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
        }
    }
    else if (auto16BAF5C4_val == 1) {
        if ((gv_templeChannelQs[1] == false)) {
            gv_templeChannelQs[1] = true;
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
            libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid03|Line00100", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libSwaC_gf_SendTransmissionCampaign(gv_stukov, "zMission_Hybrid03|Line00103", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
            SoundPlay(SoundLink("HybridZerg_DistantRoar", -1), PlayerGroupAll(), 100.0, 0.0);
        }
        else {
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
            libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid03|Line00100", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
        }
    }
    else if (auto16BAF5C4_val == 2) {
        if ((gv_templeChannelQs[2] == false)) {
            gv_templeChannelQs[2] = true;
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
            libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid03|Line00102", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libSwaC_gf_SendTransmissionCampaign(gv_stukov, "zMission_Hybrid03|Line00101", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
            SoundPlay(SoundLink("HybridZerg_DistantRoar", -1), PlayerGroupAll(), 100.0, 0.0);
        }
        else {
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
            libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid03|Line00102", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
        }
    }
    else if (auto16BAF5C4_val == 3) {
        if ((gv_templeChannelQs[3] == false)) {
            gv_templeChannelQs[3] = true;
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
            libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid03|Line00104", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libSwaC_gf_SendTransmissionCampaign(gv_stukov, "zMission_Hybrid03|Line00105", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
            SoundPlay(SoundLink("HybridZerg_DistantRoar", -1), PlayerGroupAll(), 100.0, 0.0);
        }
        else {
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
            libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid03|Line00104", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
        }
    }
    else if (auto16BAF5C4_val == 4) {
        if ((gv_templeChannelQs[4] == false)) {
            gv_templeChannelQs[4] = true;
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
            libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid03|Line00106", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libSwaC_gf_SendTransmissionCampaign(gv_stukov, "zMission_Hybrid03|Line00107", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
            SoundPlay(SoundLink("HybridZerg_DistantRoar", -1), PlayerGroupAll(), 100.0, 0.0);
        }
        else {
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
            libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid03|Line00106", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
        }
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TempleChannelingQ_Init () {
    gt_TempleChannelingQ = TriggerCreate("gt_TempleChannelingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Temple Deactivated Q
//--------------------------------------------------------------------------------------------------
bool gt_TempleDeactivatedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto0543D4F3_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    auto0543D4F3_val = gv_templesDeactivated;
    if (auto0543D4F3_val == 1) {
        gv_firstTransmissionSequenceInProgress = true;
        Wait(2.0, c_timeReal);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
        libSwaC_gf_SendTransmissionCampaign(gv_stukov, "zMission_Hybrid03|Line00109", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Hybrid03|Line00108", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SendTransmissionCampaign(gv_stukov, "zMission_Hybrid03|Line00118", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
        gf_CreatePingforTemple(RegionFromId(30));
        Wait(1.0, c_timeReal);
        gf_CreatePingforTemple(RegionFromId(31));
        Wait(1.0, c_timeReal);
        gf_CreatePingforTemple(RegionFromId(32));
        Wait(1.0, c_timeReal);
        gf_CreatePingforTemple(RegionFromId(33));
        Wait(5.0, c_timeReal);
        gv_firstTransmissionSequenceInProgress = false;
        if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
            libSwaC_gf_RemindPlayertoSpawnDrones(60.0, 8);
            libSwaC_gf_RemindPlayertoAssign3DronestoExtractor(UnitGroupUnit(UnitGroup("Extractor", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1), 90.0);
        }

    }
    else if (auto0543D4F3_val == 2) {
        Wait(2.0, c_timeReal);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
        libSwaC_gf_SendTransmissionCampaign(gv_stukov, "zMission_Hybrid03|Line00111", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SendTransmissionCampaign(gv_kerrigan2, "zMission_Hybrid03|Line00114", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
        libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/9B5DA5F4"));
    }
    else if (auto0543D4F3_val == 3) {
        Wait(2.0, c_timeReal);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
        libSwaC_gf_SendTransmissionCampaign(gv_stukov, "zMission_Hybrid03|Line00112", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Hybrid03|Line00052", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SendTransmissionCampaign(gv_kerrigan2, "zMission_Hybrid03|Line00126", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    }
    else if (auto0543D4F3_val == 4) {
        Wait(2.0, c_timeReal);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
        libSwaC_gf_SendTransmissionCampaign(gv_stukov, "zMission_Hybrid03|Line00113", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SendTransmissionCampaign(gv_kerrigan2, "zMission_Hybrid03|Line00063", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Hybrid03|Line00043", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
        libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/D749A715"));
    }
    else if (auto0543D4F3_val == 5) {
        Wait(1.0, c_timeReal);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
        libSwaC_gf_SendTransmissionCampaign(gv_kerrigan2, "zMission_Hybrid03|Line00117", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Hybrid03|Line00116", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    }
    else {
    }
    TriggerQueueExit();
    if ((gv_templesDeactivated == 1)) {
        Wait(20.0, c_timeReal);
        TriggerExecute(gt_CrystalDiscoverQ, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TempleDeactivatedQ_Init () {
    gt_TempleDeactivatedQ = TriggerCreate("gt_TempleDeactivatedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Hybrid Q
//--------------------------------------------------------------------------------------------------
bool gt_FirstHybridQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_stukov, "zMission_Hybrid03|Line00099", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    SoundPlay(SoundLink("HybridZerg_DistantRoar", -1), PlayerGroupAll(), 100.0, 0.0);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstHybridQ_Init () {
    gt_FirstHybridQ = TriggerCreate("gt_FirstHybridQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warp In Attacks
//--------------------------------------------------------------------------------------------------
bool gt_WarpInAttacks_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_02_DOMINION222))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnitProgressUnit(), RegionCircle(PointFromId(497), 12.0)) == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnitProgressUnit(), RegionCircle(PointFromId(602), 12.0)) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_AICast(EventUnitProgressUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), gv_templeDefensePoint));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarpInAttacks_Init () {
    gt_WarpInAttacks = TriggerCreate("gt_WarpInAttacks_Func");
    TriggerAddEventUnitConstructProgress(gt_WarpInAttacks, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Crystal Discover Proximity
//--------------------------------------------------------------------------------------------------
bool gt_CrystalDiscoverProximity_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_CrystalDiscoverQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CrystalDiscoverProximity_Init () {
    gt_CrystalDiscoverProximity = TriggerCreate("gt_CrystalDiscoverProximity_Func");
    TriggerAddEventUnitRegion(gt_CrystalDiscoverProximity, null, RegionFromId(10), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Crystal Discover Q
//--------------------------------------------------------------------------------------------------
bool gt_CrystalDiscoverQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((gv_nullZoneMovement == ge_PRESET_MovementDirection_Reverse) && ((TriggerIsEnabled(gt_CrystalDiscoverProximity) == false) || (gv_crystalDiscoverWait == false)))) {
        Wait(1.0, c_timeAI);
    }
    libSwaC_gf_RemindPlayertoCompleteBonusObjective("ZHybrid03Objective03", 600.0);
    TriggerQueueEnter();
    Wait(1.0, c_timeReal);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid03|Line00021", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_stukov, "zMission_Hybrid03|Line00028", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerExecute(gt_ObjectiveCrystalsCreate, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CrystalDiscoverQ_Init () {
    gt_CrystalDiscoverQ = TriggerCreate("gt_CrystalDiscoverQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Crystal Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_CrystalDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_crystalsDestroyed += 1;
    libSwaC_gf_DisplayMissionObjectiveRewardFloatingText(UnitGetPosition(EventUnit()), "ZHybrid03Objective03", gv_pLAYER_01_USER);
    TriggerExecute(gt_ObjectiveCrystalsCreate, true, false);
    if ((gv_crystalsDestroyed >= 3)) {
        gv_crystalsDestroyed = 3;
        libSwaC_gf_SetMissionObjectiveProgress2("ZHybrid03Objective03", gv_crystalsDestroyed, true, null, true);
        TriggerExecute(gt_ObjectiveCrystalsComplete, true, false);
        TriggerExecute(gt_AllCrystalsDestroyedQ, true, false);
    }
    else {
        libSwaC_gf_SetMissionObjectiveProgress2("ZHybrid03Objective03", gv_crystalsDestroyed, true, null, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CrystalDestroyed_Init () {
    gt_CrystalDestroyed = TriggerCreate("gt_CrystalDestroyed_Func");
    TriggerAddEventUnitDied(gt_CrystalDestroyed, UnitRefFromUnit(UnitFromId(749)));
    TriggerAddEventUnitDied(gt_CrystalDestroyed, UnitRefFromUnit(UnitFromId(773)));
    TriggerAddEventUnitDied(gt_CrystalDestroyed, UnitRefFromUnit(UnitFromId(778)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Crystal 1 Defense
//--------------------------------------------------------------------------------------------------
bool gt_Crystal1Defense_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_numberOfGuardians;
    fixed lv_increment;
    int lv_i;

    // Automatic Variable Declarations
    int auto3CA3ABC2_ae;
    const int auto3CA3ABC2_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_Crystal1DefenseQ, true, false);
    lv_numberOfGuardians = libHots_gf_DifficultyValueInt2(4, 5, 6);
    lv_increment = (360.0 / IntToFixed(lv_numberOfGuardians));
    auto3CA3ABC2_ae = lv_numberOfGuardians;
    lv_i = 1;
    for ( ; ( (auto3CA3ABC2_ai >= 0 && lv_i <= auto3CA3ABC2_ae) || (auto3CA3ABC2_ai < 0 && lv_i >= auto3CA3ABC2_ae) ) ; lv_i += auto3CA3ABC2_ai ) {
        UnitIssueOrder(gv_templeSuperWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 2.5, ((375 - (lv_increment / 2)) + (IntToFixed(lv_i) * lv_increment)))), c_orderQueueReplace);
        Wait(0.35, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Crystal1Defense_Init () {
    gt_Crystal1Defense = TriggerCreate("gt_Crystal1Defense_Func");
    TriggerAddEventUnitAttacked(gt_Crystal1Defense, UnitRefFromUnit(UnitFromId(749)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Crystal 1 Defense Q
//--------------------------------------------------------------------------------------------------
bool gt_Crystal1DefenseQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_timeOutTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timeOutTimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(lv_timeOutTimer, 5.0, false, c_timeAI);
    TriggerQueueEnter();
    if ((TimerGetRemaining(lv_timeOutTimer) == 0.0)) {
        return true;
    }

    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid03|Line00026", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Crystal1DefenseQ_Init () {
    gt_Crystal1DefenseQ = TriggerCreate("gt_Crystal1DefenseQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Crystal 2 Defense
//--------------------------------------------------------------------------------------------------
bool gt_Crystal2Defense_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_numberOfGuardians;
    fixed lv_increment;
    int lv_i;

    // Automatic Variable Declarations
    int auto9C96A138_ae;
    const int auto9C96A138_ai = 1;
    int autoE1E26033_ae;
    const int autoE1E26033_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_Crystal2DefenseQ, true, false);
    lv_numberOfGuardians = libHots_gf_DifficultyValueInt2(2, 3, 4);
    lv_increment = (360.0 / IntToFixed(lv_numberOfGuardians));
    auto9C96A138_ae = lv_numberOfGuardians;
    lv_i = 1;
    for ( ; ( (auto9C96A138_ai >= 0 && lv_i <= auto9C96A138_ae) || (auto9C96A138_ai < 0 && lv_i >= auto9C96A138_ae) ) ; lv_i += auto9C96A138_ai ) {
        UnitIssueOrder(gv_templeSuperWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 2.0, ((360 - (lv_increment / 2)) + ((IntToFixed(lv_i) - 1) * lv_increment)))), c_orderQueueReplace);
        Wait(0.35, c_timeAI);
    }
    lv_numberOfGuardians = libHots_gf_DifficultyValueInt2(2, 3, 4);
    lv_increment = (360.0 / IntToFixed(lv_numberOfGuardians));
    autoE1E26033_ae = lv_numberOfGuardians;
    lv_i = 1;
    for ( ; ( (autoE1E26033_ai >= 0 && lv_i <= autoE1E26033_ae) || (autoE1E26033_ai < 0 && lv_i >= autoE1E26033_ae) ) ; lv_i += autoE1E26033_ai ) {
        UnitIssueOrder(gv_templeSuperWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 3.5, ((375 - (lv_increment / 2)) + (IntToFixed(lv_i) * lv_increment)))), c_orderQueueReplace);
        Wait(0.35, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Crystal2Defense_Init () {
    gt_Crystal2Defense = TriggerCreate("gt_Crystal2Defense_Func");
    TriggerAddEventUnitAttacked(gt_Crystal2Defense, UnitRefFromUnit(UnitFromId(773)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Crystal 2 Defense Q
//--------------------------------------------------------------------------------------------------
bool gt_Crystal2DefenseQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_timeOutTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timeOutTimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(lv_timeOutTimer, 5.0, false, c_timeAI);
    TriggerQueueEnter();
    if ((TimerGetRemaining(lv_timeOutTimer) == 0.0)) {
        return true;
    }

    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid03|Line00025", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Crystal2DefenseQ_Init () {
    gt_Crystal2DefenseQ = TriggerCreate("gt_Crystal2DefenseQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Crystal 3 Defense
//--------------------------------------------------------------------------------------------------
bool gt_Crystal3Defense_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_numberOfGuardians;
    fixed lv_increment;
    int lv_i;

    // Automatic Variable Declarations
    int autoA90C1C9E_ae;
    const int autoA90C1C9E_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_Crystal3DefenseQ, true, false);
    lv_numberOfGuardians = libHots_gf_DifficultyValueInt2(3, 3, 4);
    lv_increment = (360.0 / IntToFixed(lv_numberOfGuardians));
    autoA90C1C9E_ae = lv_numberOfGuardians;
    lv_i = 1;
    for ( ; ( (autoA90C1C9E_ai >= 0 && lv_i <= autoA90C1C9E_ae) || (autoA90C1C9E_ai < 0 && lv_i >= autoA90C1C9E_ae) ) ; lv_i += autoA90C1C9E_ai ) {
        UnitIssueOrder(gv_templeSuperWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 8), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 4.0, (-45 + ((IntToFixed(lv_i) - 1) * lv_increment)))), c_orderQueueReplace);
        Wait(0.35, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Crystal3Defense_Init () {
    gt_Crystal3Defense = TriggerCreate("gt_Crystal3Defense_Func");
    TriggerAddEventUnitAttacked(gt_Crystal3Defense, UnitRefFromUnit(UnitFromId(778)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Crystal 3 Defense Q
//--------------------------------------------------------------------------------------------------
bool gt_Crystal3DefenseQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_timeOutTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timeOutTimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(lv_timeOutTimer, 5.0, false, c_timeAI);
    TriggerQueueEnter();
    if ((TimerGetRemaining(lv_timeOutTimer) == 0.0)) {
        return true;
    }

    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid03|Line00027", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Crystal3DefenseQ_Init () {
    gt_Crystal3DefenseQ = TriggerCreate("gt_Crystal3DefenseQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: All Crystals Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_AllCrystalsDestroyedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_stukov, "zMission_Hybrid03|Line00127", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AllCrystalsDestroyedQ_Init () {
    gt_AllCrystalsDestroyedQ = TriggerCreate("gt_AllCrystalsDestroyedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), libSwaC_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/1D437ECE"), libSwaC_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerEnable(gt_DefeatBaseDead, false);
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Duel Lose
//--------------------------------------------------------------------------------------------------
bool gt_DefeatDuelLose_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_UnitInRegion(gv_kerrigan22, RegionCircle(UnitGetPosition(gv_kerrigan), 2.0)) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    UnitCreateEffectPoint(gv_kerrigan22, "EnergyNovaPersistent", UnitGetPosition(gv_kerrigan));
    SoundPlay(SoundLink("Artifact_EnergyNova", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitKill(gv_kerrigan);
    UnitRemove(gv_kerrigan22);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveKerriganMustSurviveFailed, true, true);
    libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), libSwaC_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/048A853B"), libSwaC_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatDuelLose_Init () {
    gt_DefeatDuelLose = TriggerCreate("gt_DefeatDuelLose_Func");
    TriggerEnable(gt_DefeatDuelLose, false);
    TriggerAddEventTimePeriodic(gt_DefeatDuelLose, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Kerrigan Dies
//--------------------------------------------------------------------------------------------------
bool gt_DefeatKerriganDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveKerriganMustSurviveFailed, true, true);
    libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), libSwaC_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/8AE033AC"), libSwaC_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatKerriganDies_Init () {
    gt_DefeatKerriganDies = TriggerCreate("gt_DefeatKerriganDies_Func");
    TriggerAddEventUnitDied(gt_DefeatKerriganDies, UnitRefFromVariable("gv_kerrigan"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Duel Win
//--------------------------------------------------------------------------------------------------
bool gt_VictoryDuelWin_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_SetNullZoneDirection(ge_PRESET_MovementDirection_Stopped);
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryDuelWin_Init () {
    gt_VictoryDuelWin = TriggerCreate("gt_VictoryDuelWin_Func");
    TriggerEnable(gt_VictoryDuelWin, false);
    TriggerAddEventUnitRegion(gt_VictoryDuelWin, UnitRefFromVariable("gv_kerrigan22"), RegionFromId(34), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    UnitSetState(gv_kerrigan, c_unitStateInvulnerable, true);
    UnitSetState(gv_stukov, c_unitStateInvulnerable, true);
    TriggerExecute(gt_ObjectiveDeactivateTemplesComplete, true, true);
    TriggerExecute(gt_ObjectiveKerriganMustSurviveComplete, true, true);
    libSwaC_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CampaignAwardAchievement("ZHybrid03_1", gv_pLAYER_01_USER);
    TriggerExecute(gt_AchievementStukovSurvival, true, false);
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/D7287C9D"), IntToText(gv_statisticStukovKills));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/F7808405"), IntToText(gv_achievementStukovSurvivalDeathCount));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/E718D271"), IntToText(PlayerScoreValueGetAsInt(gv_pLAYER_01_USER, "UnitsKilledCount")));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/965CF5D3"), IntToText(gv_statisticMaxArmy));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/F394A306"), IntToText(gv_statisticZergKilledByHybrid));
    TextExpressionSetToken("Param/Expression/330ED440", "Destroyed", IntToText(gv_statisticProtossStructuresDestroyed));
    TextExpressionSetToken("Param/Expression/330ED440", "Total", IntToText(gv_statisticProtossStructuresTotal));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/E33AB1FE"), TextExpressionAssemble("Param/Expression/330ED440"));
    libSwaC_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_Defeat, false);
    TriggerEnable(gt_DefeatCheat, false);
    gv_gameOver = true;
    libSwaC_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_Victory, false);
    TriggerEnable(gt_VictoryCheat, false);
    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Stukov Survival
//--------------------------------------------------------------------------------------------------
bool gt_AchievementStukovSurvival_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_achievementStukovSurvivalDeathCount == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CampaignAwardAchievement("ZHybrid03_3", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementStukovSurvival_Init () {
    gt_AchievementStukovSurvival = TriggerCreate("gt_AchievementStukovSurvival_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Kill 2 Hybrid within 20 seconds N/H
//--------------------------------------------------------------------------------------------------
bool gt_AchievementKill2Hybridwithin20secondsNH_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libHots_gf_DifficultyValueInt2(0, 1, 1) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CampaignAwardAchievement("ZHybrid03_2", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementKill2Hybridwithin20secondsNH_Init () {
    gt_AchievementKill2Hybridwithin20secondsNH = TriggerCreate("gt_AchievementKill2Hybridwithin20secondsNH_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Destroy Protoss Bases H
//--------------------------------------------------------------------------------------------------
bool gt_AchievementDestroyProtossBasesH_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_tugOfWarStarted == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1) && (libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionPlayableMap(), UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)) == true) && (libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_02_DOMINION22, RegionPlayableMap(), UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)) == true) && (libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_02_DOMINION222, RegionPlayableMap(), UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)) == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        libSwaC_gf_CampaignAwardAchievement("Mastery_Hybrid3", gv_pLAYER_01_USER);
    }

    gv_statisticProtossStructuresDestroyed = (gv_statisticProtossStructuresTotal - (UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) + UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION22, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) + UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION222, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementDestroyProtossBasesH_Init () {
    gt_AchievementDestroyProtossBasesH = TriggerCreate("gt_AchievementDestroyProtossBasesH_Func");
    TriggerAddEventUnitDied(gt_AchievementDestroyProtossBasesH, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Statistic: Max Army
//--------------------------------------------------------------------------------------------------
bool gt_StatisticMaxArmy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerScoreValueGetAsInt(gv_pLAYER_01_USER, "UnitsActiveCount") > gv_statisticMaxArmy)) {
        gv_statisticMaxArmy = PlayerScoreValueGetAsInt(gv_pLAYER_01_USER, "UnitsActiveCount");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatisticMaxArmy_Init () {
    gt_StatisticMaxArmy = TriggerCreate("gt_StatisticMaxArmy_Func");
    TriggerAddEventTimePeriodic(gt_StatisticMaxArmy, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Statistic: Zerg Killed by Hybrid
//--------------------------------------------------------------------------------------------------
bool gt_StatisticZergKilledbyHybrid_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) == gv_pLAYER_02_DOMINION))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_statisticZergKilledByHybrid += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatisticZergKilledbyHybrid_Init () {
    gt_StatisticZergKilledbyHybrid = TriggerCreate("gt_StatisticZergKilledbyHybrid_Func");
    TriggerAddEventUnitDied(gt_StatisticZergKilledbyHybrid, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Anniversary Achievement - Destroy all Protoss structures before activating 4 Temples 2
//--------------------------------------------------------------------------------------------------
bool gt_AnniversaryAchievementDestroyallProtossstructuresbeforeactivating4Temples2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_templesDeactivated < 4)) {
        if ((libHots_gf_DifficultyValueInt2(0, 1, 1) == 1) && (libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0)) == true) && (libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_02_DOMINION22, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0)) == true)) {
            libSwaC_gf_CampaignAwardAchievement("Anniversary_ZHybrid03", gv_pLAYER_01_USER);
            TriggerEnable(TriggerGetCurrent(), false);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AnniversaryAchievementDestroyallProtossstructuresbeforeactivating4Temples2_Init () {
    gt_AnniversaryAchievementDestroyallProtossstructuresbeforeactivating4Temples2 = TriggerCreate("gt_AnniversaryAchievementDestroyallProtossstructuresbeforeactivating4Temples2_Func");
    TriggerAddEventUnitDied(gt_AnniversaryAchievementDestroyallProtossstructuresbeforeactivating4Temples2, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Destroy Protoss - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyProtossCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZHybrid03Objective04");
    gv_objectiveDestroyDominionBase4 = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyProtossCreate_Init () {
    gt_ObjectiveDestroyProtossCreate = TriggerCreate("gt_ObjectiveDestroyProtossCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Destroy Protoss - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyProtossComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyProtossCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZHybrid03Objective04", libSwaC_ge_MissionObjectiveState_Completed);
    PingDestroy(gv_protossBasePing);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyProtossComplete_Init () {
    gt_ObjectiveDestroyProtossComplete = TriggerCreate("gt_ObjectiveDestroyProtossComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Deactivate Temples - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDeactivateTemplesCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZHybrid03Objective01");
    libSwaC_gf_SetMissionObjectiveProgress2("ZHybrid03Objective01", 0, true, null, true);
    ObjectiveSetPriority(ObjectiveLastCreated(), 2);
    gv_objectiveDestroyDominionBase = ObjectiveLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDeactivateTemplesCreate_Init () {
    gt_ObjectiveDeactivateTemplesCreate = TriggerCreate("gt_ObjectiveDeactivateTemplesCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Deactivate Temples - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDeactivateTemplesComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDeactivateTemplesCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZHybrid03Objective01", libSwaC_ge_MissionObjectiveState_Completed);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDeactivateTemplesComplete_Init () {
    gt_ObjectiveDeactivateTemplesComplete = TriggerCreate("gt_ObjectiveDeactivateTemplesComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Kerrigan Must Survive - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKerriganMustSurviveCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZHybrid03Objective02");
    gv_objectiveDestroyDominionBase2 = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 0);
    ObjectiveSetDescription(ObjectiveLastCreated(), StringExternal("Param/Value/C010B197"));
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKerriganMustSurviveCreate_Init () {
    gt_ObjectiveKerriganMustSurviveCreate = TriggerCreate("gt_ObjectiveKerriganMustSurviveCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Kerrigan Must Survive - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKerriganMustSurviveComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveKerriganMustSurviveCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZHybrid03Objective02", libSwaC_ge_MissionObjectiveState_Completed);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKerriganMustSurviveComplete_Init () {
    gt_ObjectiveKerriganMustSurviveComplete = TriggerCreate("gt_ObjectiveKerriganMustSurviveComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Kerrigan Must Survive - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKerriganMustSurviveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveKerriganMustSurviveCreate, true, false);
    ObjectiveSetState(gv_objectiveDestroyDominionBase2, c_objectiveStateFailed);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKerriganMustSurviveFailed_Init () {
    gt_ObjectiveKerriganMustSurviveFailed = TriggerCreate("gt_ObjectiveKerriganMustSurviveFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Crystals - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCrystalsCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZHybrid03Objective03");
    libSwaC_gf_SetMissionObjectiveProgress2("ZHybrid03Objective03", 0, true, null, true);
    gv_objectiveDestroyDominionBase3 = ObjectiveLastCreated();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCrystalsCreate_Init () {
    gt_ObjectiveCrystalsCreate = TriggerCreate("gt_ObjectiveCrystalsCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Crystals - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCrystalsComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveCrystalsCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZHybrid03Objective03", libSwaC_ge_MissionObjectiveState_Completed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCrystalsComplete_Init () {
    gt_ObjectiveCrystalsComplete = TriggerCreate("gt_ObjectiveCrystalsComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid AI
//--------------------------------------------------------------------------------------------------
bool gt_HybridAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_consumeDNATargets;
    unit lv_potentialTarget;

    // Automatic Variable Declarations
    unitgroup auto9D485733_g;
    int auto9D485733_u;
    unit auto9D485733_var;
    unitgroup autoD8945647_g;
    int autoD8945647_u;
    unitgroup auto2020BFEA_g;
    int auto2020BFEA_u;
    unit auto2020BFEA_var;

    // Variable Initialization
    lv_consumeDNATargets = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeAI);
        auto9D485733_g = gv_hybridGroup;
        auto9D485733_u = UnitGroupCount(auto9D485733_g, c_unitCountAll);
        for (;; auto9D485733_u -= 1) {
            auto9D485733_var = UnitGroupUnitFromEnd(auto9D485733_g, auto9D485733_u);
            if (auto9D485733_var == null) { break; }
            lv_consumeDNATargets = UnitGroupEmpty();
            autoD8945647_g = UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(auto9D485733_var), 6.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoD8945647_u = UnitGroupCount(autoD8945647_g, c_unitCountAll);
            for (;; autoD8945647_u -= 1) {
                lv_potentialTarget = UnitGroupUnitFromEnd(autoD8945647_g, autoD8945647_u);
                if (lv_potentialTarget == null) { break; }
                if ((DistanceBetweenPoints(UnitGetPosition(auto9D485733_var), UnitGetPosition(lv_potentialTarget)) > 3.0)) {
                    UnitGroupAdd(lv_consumeDNATargets, lv_potentialTarget);
                }

            }
            if ((UnitGroupCount(lv_consumeDNATargets, c_unitCountAlive) >= 1)) {
                libNtve_gf_AICast(auto9D485733_var, OrderTargetingUnit(AbilityCommand("ConsumeDNA", 0), UnitGroupClosestToPoint(lv_consumeDNATargets, UnitGetPosition(auto9D485733_var))));
            }

        }
        Wait(1.0, c_timeAI);
        auto2020BFEA_g = gv_hybridGroup;
        auto2020BFEA_u = UnitGroupCount(auto2020BFEA_g, c_unitCountAll);
        for (;; auto2020BFEA_u -= 1) {
            auto2020BFEA_var = UnitGroupUnitFromEnd(auto2020BFEA_g, auto2020BFEA_u);
            if (auto2020BFEA_var == null) { break; }
            if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(auto2020BFEA_var), 6.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 5)) {
                libNtve_gf_AICast(auto2020BFEA_var, Order(AbilityCommand("HybridFAoEStun", 0)));
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridAI_Init () {
    gt_HybridAI = TriggerCreate("gt_HybridAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CampaignInitAI();
    TriggerExecute(gt_HybridAI, true, false);
    TriggerExecute(gt_ProtossAttackWaves, true, false);
    if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
        TriggerExecute(gt_StartUpgradesNormal, true, false);
    }
    else {
        TriggerExecute(gt_StartUpgradesHard, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Upgrades (Normal)
//--------------------------------------------------------------------------------------------------
bool gt_StartUpgradesNormal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto965C77FD_g;
    int auto965C77FD_var;
    playergroup auto19D9CDF6_g;
    int auto19D9CDF6_var;
    playergroup auto8B4F2F05_g;
    int auto8B4F2F05_var;
    playergroup auto4172EA7B_g;
    int auto4172EA7B_var;
    playergroup autoC84DC713_g;
    int autoC84DC713_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(660.0, c_timeAI);
    auto965C77FD_g = gv_protossPlayers;
    auto965C77FD_var = -1;
    while (true) {
        auto965C77FD_var = PlayerGroupNextPlayer(auto965C77FD_g, auto965C77FD_var);
        if (auto965C77FD_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto965C77FD_var, "ProtossGroundWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(auto965C77FD_var, "ProtossAirWeaponsLevel1", 1);
    }
    Wait(270.0, c_timeAI);
    auto19D9CDF6_g = gv_protossPlayers;
    auto19D9CDF6_var = -1;
    while (true) {
        auto19D9CDF6_var = PlayerGroupNextPlayer(auto19D9CDF6_g, auto19D9CDF6_var);
        if (auto19D9CDF6_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto19D9CDF6_var, "ProtossAirArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(auto19D9CDF6_var, "ProtossGroundArmorsLevel1", 1);
    }
    Wait(240.0, c_timeAI);
    auto8B4F2F05_g = gv_protossPlayers;
    auto8B4F2F05_var = -1;
    while (true) {
        auto8B4F2F05_var = PlayerGroupNextPlayer(auto8B4F2F05_g, auto8B4F2F05_var);
        if (auto8B4F2F05_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto8B4F2F05_var, "ProtossShieldsLevel1", 1);
    }
    Wait(300.0, c_timeAI);
    auto4172EA7B_g = gv_protossPlayers;
    auto4172EA7B_var = -1;
    while (true) {
        auto4172EA7B_var = PlayerGroupNextPlayer(auto4172EA7B_g, auto4172EA7B_var);
        if (auto4172EA7B_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto4172EA7B_var, "ProtossGroundWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(auto4172EA7B_var, "ProtossAirWeaponsLevel2", 1);
    }
    Wait(300.0, c_timeAI);
    autoC84DC713_g = gv_protossPlayers;
    autoC84DC713_var = -1;
    while (true) {
        autoC84DC713_var = PlayerGroupNextPlayer(autoC84DC713_g, autoC84DC713_var);
        if (autoC84DC713_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoC84DC713_var, "ProtossAirArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(autoC84DC713_var, "ProtossGroundArmorsLevel2", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartUpgradesNormal_Init () {
    gt_StartUpgradesNormal = TriggerCreate("gt_StartUpgradesNormal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Upgrades (Hard)
//--------------------------------------------------------------------------------------------------
bool gt_StartUpgradesHard_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto777CC548_g;
    int auto777CC548_var;
    playergroup autoE985CE4E_g;
    int autoE985CE4E_var;
    playergroup auto43C83290_g;
    int auto43C83290_var;
    playergroup auto75DAADA3_g;
    int auto75DAADA3_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(300.0, c_timeAI);
    auto777CC548_g = gv_protossPlayers;
    auto777CC548_var = -1;
    while (true) {
        auto777CC548_var = PlayerGroupNextPlayer(auto777CC548_g, auto777CC548_var);
        if (auto777CC548_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto777CC548_var, "ProtossGroundWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(auto777CC548_var, "ProtossAirWeaponsLevel2", 1);
    }
    Wait(360.0, c_timeAI);
    autoE985CE4E_g = gv_protossPlayers;
    autoE985CE4E_var = -1;
    while (true) {
        autoE985CE4E_var = PlayerGroupNextPlayer(autoE985CE4E_g, autoE985CE4E_var);
        if (autoE985CE4E_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoE985CE4E_var, "ProtossAirArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(autoE985CE4E_var, "ProtossGroundArmorsLevel2", 1);
    }
    Wait(270.0, c_timeAI);
    auto43C83290_g = gv_protossPlayers;
    auto43C83290_var = -1;
    while (true) {
        auto43C83290_var = PlayerGroupNextPlayer(auto43C83290_g, auto43C83290_var);
        if (auto43C83290_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto43C83290_var, "ProtossShieldsLevel2", 1);
    }
    Wait(240.0, c_timeAI);
    auto75DAADA3_g = gv_protossPlayers;
    auto75DAADA3_var = -1;
    while (true) {
        auto75DAADA3_var = PlayerGroupNextPlayer(auto75DAADA3_g, auto75DAADA3_var);
        if (auto75DAADA3_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto75DAADA3_var, "ProtossGroundWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(auto75DAADA3_var, "ProtossAirWeaponsLevel3", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartUpgradesHard_Init () {
    gt_StartUpgradesHard = TriggerCreate("gt_StartUpgradesHard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_ProtossAttackWaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION22, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_DOMINION22, PointFromId(435));
    AIAttackWaveAddUnits3(3, 3, 4, "Zealot");
    AIAttackWaveSend(gv_pLAYER_02_DOMINION22, 300, false);
    gv_firstWave = WaveLastCreated();
    Wait(260.0, c_timeAI);
    gv_crystalDiscoverWait = true;
    Wait(20.0, c_timeAI);
    TriggerExecute(gt_FirstWaveDynamicTiming, true, false);
    Wait(20.0, c_timeAI);
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION2, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_DOMINION2, PointFromId(5));
    AIAttackWaveAddUnits3(3, 3, 4, "Zealot");
    AIAttackWaveAddUnits3(2, 2, 3, "Stalker");
    TriggerExecute(gt_DangerousAttack1Q, true, false);
    AIAttackWaveSend(gv_pLAYER_02_DOMINION2, 240, true);
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION22, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_DOMINION22, PointFromId(435));
    AIAttackWaveAddUnits3(3, 3, 4, "Zealot");
    AIAttackWaveAddUnits3(2, 2, 4, "Stalker");
    AIAttackWaveAddUnits3(1, 1, 2, "Sentry");
    AIAttackWaveAddUnits3(0, 0, 1, "Observer");
    AIAttackWaveSend(gv_pLAYER_02_DOMINION22, 180, true);
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION2, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_DOMINION2, PointFromId(5));
    AIAttackWaveAddUnits3(4, 4, 6, "Stalker");
    AIAttackWaveAddUnits3(1, 1, 2, libHots_gf_DifficultyValueSwarmUnitType("Scout", "Scout", "VoidRay"));
    AIAttackWaveSend(gv_pLAYER_02_DOMINION2, 180, true);
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION2, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_DOMINION2, PointFromId(5));
    AIAttackWaveAddUnits3(3, 3, 4, "Archon");
    AIAttackWaveAddUnits3(1, 1, 2, libHots_gf_DifficultyValueSwarmUnitType("Scout", "Scout", "Carrier"));
    AIAttackWaveAddUnits3(0, 0, 1, "Observer");
    TriggerExecute(gt_DangerousAttack2Q, true, false);
    AIAttackWaveSend(gv_pLAYER_02_DOMINION2, 180, true);
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION22, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_DOMINION22, PointFromId(435));
    AIAttackWaveAddUnits3(3, 3, 6, "Zealot");
    AIAttackWaveAddUnits3(2, 2, 4, "Stalker");
    AIAttackWaveAddUnits3(1, 1, 2, "Colossus");
    AIAttackWaveAddUnits3(0, 0, 1, "Observer");
    AIAttackWaveSend(gv_pLAYER_02_DOMINION22, 180, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossAttackWaves_Init () {
    gt_ProtossAttackWaves = TriggerCreate("gt_ProtossAttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Wave Dynamic Timing
//--------------------------------------------------------------------------------------------------
bool gt_FirstWaveDynamicTiming_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_nullZoneMovement == ge_PRESET_MovementDirection_Stopped)) {
        AIAttackWaveCancel(gv_firstWave);
        while (!((gv_nullZoneMovement == ge_PRESET_MovementDirection_Reverse))) {
            Wait(1.0, c_timeAI);
        }
        AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION22, PlayerGroupSingle(gv_pLAYER_01_USER));
        AIAttackWaveSetGatherPoint(gv_pLAYER_02_DOMINION22, PointFromId(435));
        AIAttackWaveAddUnits3(3, 3, 4, "Zealot");
        AIAttackWaveSend(gv_pLAYER_02_DOMINION22, 20, false);
        TriggerExecute(gt_FirstAttackQ, true, false);
    }
    else {
        TriggerExecute(gt_FirstAttackQ, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstWaveDynamicTiming_Init () {
    gt_FirstWaveDynamicTiming = TriggerCreate("gt_FirstWaveDynamicTiming_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Attack Q
//--------------------------------------------------------------------------------------------------
bool gt_FirstAttackQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan2, "zMission_Hybrid03|Line00001", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(30.0, c_timeAI);
    gv_crystalDiscoverWait = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstAttackQ_Init () {
    gt_FirstAttackQ = TriggerCreate("gt_FirstAttackQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dangerous Attack 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_DangerousAttack1Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(200.0, c_timeAI);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan2, "zMission_Hybrid03|Line00137", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DangerousAttack1Q_Init () {
    gt_DangerousAttack1Q = TriggerCreate("gt_DangerousAttack1Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dangerous Attack 2 Q
//--------------------------------------------------------------------------------------------------
bool gt_DangerousAttack2Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(140.0, c_timeAI);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan2, "zMission_Hybrid03|Line00056", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DangerousAttack2Q_Init () {
    gt_DangerousAttack2Q = TriggerCreate("gt_DangerousAttack2Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Base Warning East Q
//--------------------------------------------------------------------------------------------------
bool gt_BaseWarningEastQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid03|Line00145", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BaseWarningEastQ_Init () {
    gt_BaseWarningEastQ = TriggerCreate("gt_BaseWarningEastQ_Func");
    TriggerAddEventUnitRegion(gt_BaseWarningEastQ, null, RegionFromId(13), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Base Warning West Q
//--------------------------------------------------------------------------------------------------
bool gt_BaseWarningWestQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid03|Line00146", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BaseWarningWestQ_Init () {
    gt_BaseWarningWestQ = TriggerCreate("gt_BaseWarningWestQ_Func");
    TriggerAddEventUnitRegion(gt_BaseWarningWestQ, null, RegionFromId(14), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Minerals
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveMinerals_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveMinerals_Init () {
    gt_AIGiveMinerals = TriggerCreate("gt_AIGiveMinerals_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_pLAYER_02_DOMINION, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_pLAYER_02_DOMINION2, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_pLAYER_02_DOMINION22, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_pLAYER_02_DOMINION222, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Gas
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveGas_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveGas_Init () {
    gt_AIGiveGas = TriggerCreate("gt_AIGiveGas_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_pLAYER_02_DOMINION, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_pLAYER_02_DOMINION2, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_pLAYER_02_DOMINION22, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_pLAYER_02_DOMINION222, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Mission Help Q
//--------------------------------------------------------------------------------------------------
bool gt_TipMissionHelpQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_DisplayMissionTip(StringExternal("Param/Value/6C98B653"));
    Wait(libSwaC_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipMissionHelpQ_Init () {
    gt_TipMissionHelpQ = TriggerCreate("gt_TipMissionHelpQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto1469E835_g;
    int auto1469E835_u;
    unit auto1469E835_var;
    unitgroup auto45F036A3_g;
    int auto45F036A3_u;
    unit auto45F036A3_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    gv_inCinematic = true;
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    RegionPlayableMapSet(RegionFromId(18));
    UnitSetState(gv_kerrigan, c_unitStateFidget, false);
    UnitSetState(gv_stukov, c_unitStateFidget, false);
    libSwaC_gf_EnableDisableZerglingRespawn(false);
    libNtve_gf_PauseUnit(gv_kerrigan2, true);
    libNtve_gf_ShowHideUnit(gv_kerrigan2, false);
    libNtve_gf_ChangeUnitDamage(gv_kerrigan, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    auto1469E835_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionFromId(15), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1469E835_u = UnitGroupCount(auto1469E835_g, c_unitCountAll);
    for (;; auto1469E835_u -= 1) {
        auto1469E835_var = UnitGroupUnitFromEnd(auto1469E835_g, auto1469E835_u);
        if (auto1469E835_var == null) { break; }
        UnitGroupAdd(gv_cinematicTempUnits, auto1469E835_var);
    }
    auto45F036A3_g = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(20), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto45F036A3_u = UnitGroupCount(auto45F036A3_g, c_unitCountAll);
    for (;; auto45F036A3_u -= 1) {
        auto45F036A3_var = UnitGroupUnitFromEnd(auto45F036A3_g, auto45F036A3_u);
        if (auto45F036A3_var == null) { break; }
        UnitGroupAdd(gv_startingBase, auto45F036A3_var);
        libNtve_gf_PauseUnit(auto45F036A3_var, true);
        libNtve_gf_ShowHideUnit(auto45F036A3_var, false);
    }
    Wait(0.1, c_timeGame);
    CreepModify(PointFromId(709), 32.0, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_tempPoint;

    // Automatic Variable Declarations
    unitgroup autoCF5A4031_g;
    int autoCF5A4031_u;
    unit autoCF5A4031_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1186), 0.0, -1, 10.0, true);
    Wait(1.0, c_timeGame);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 0.0, 0.1);
    TriggerExecute(gt_IntroAttacks, true, false);
    TriggerExecute(gt_IntroMusic, true, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicInTransmission);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 0.0, 0.1);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(906), 4.0, -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(UnitFromId(708), "zBriefing_Hybrid03|Line00020", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zBriefing_Hybrid03|Line00023", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_stukov, "zBriefing_Hybrid03|Line00014", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_stukov, "zBriefing_Hybrid03|Line00021", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    while (!((libNtve_gf_UnitInRegion(gv_stukov, RegionCircle(PointFromId(1189), 1.0)) == true))) {
        Wait(0.1, c_timeGame);
    }
    UnitIssueOrder(UnitFromId(686), OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_stukov)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(695), OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_stukov)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_stukov, OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_kerrigan)), c_orderQueueAddToEnd);
    libSwaC_gf_SendTransmissionCampaign(gv_stukov, "zBriefing_Hybrid03|Line00016", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(257), (SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Hybrid03|Line00017", true), c_soundIndexAny))), 50.0, 10.0, true);
    UnitIssueOrder(gv_stukov, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(PointFromId(1189), 1.0, PointGetFacing(PointFromId(1189)))), c_orderQueueAddToEnd);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Hybrid03|Line00017", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    SoundPlay(SoundLink("Hybrid03_CS_Open_ScreenShake", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introStinger = SoundLastPlayed();
    CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 1.0, 1.0, 5.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(736), 2.5, -1, 10.0, true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(533)), c_animNameDefault, "Stand A End", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 100.0, 0.1);
    Wait(0.666, c_timeGame);
    SoundPlay(SoundLink("Hybrid03_CS_Open_UltrliskReconstitutes", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introUltraliskSound1 = SoundLastPlayed();
    Wait(2.0, c_timeGame);
    SoundPlay(SoundLink("Doodad_HybridUltraliskShackled_StandWorkStart", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introUltraliskSound2 = SoundLastPlayed();
    SoundPlay(SoundLink("Hybrid03_CS_Open_Ultralisk_ChainBreak", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introUltraliskSound3 = SoundLastPlayed();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(533)), c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(2.166, c_timeGame);
    UnitCreate(1, "Ultralisk", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(260), 180.0);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 0.0, 2.0);
    SoundPlay(SoundLink("Hybrid03_CS_Open_Ultrlisk_Roar", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introUltraliskSound4 = SoundLastPlayed();
    CameraShake(gv_pLAYER_01_USER, "Light", "Earthquake", 1.0, 1.0, 4.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(533)), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Stand Victory", 0, c_animTimeDefault);
    Wait(4.5, c_timeReal);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1187), (SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Hybrid03|Line00018", true), c_soundIndexAny)) - 1), 50.0, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Hybrid03|Line00018", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1193), 8.0, -1, 10.0, true);
    Wait(1.0, c_timeReal);
    SoundPlay(SoundLink("Hybrid03_CS_Open_Zealots_RunIn", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introZealotSound = SoundLastPlayed();
    autoCF5A4031_g = UnitGroup("Zealot", gv_pLAYER_02_DOMINION2, RegionFromId(27), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCF5A4031_u = UnitGroupCount(autoCF5A4031_g, c_unitCountAll);
    for (;; autoCF5A4031_u -= 1) {
        autoCF5A4031_var = UnitGroupUnitFromEnd(autoCF5A4031_g, autoCF5A4031_u);
        if (autoCF5A4031_var == null) { break; }
        lv_tempPoint = UnitGetPosition(autoCF5A4031_var);
        UnitSetPosition(autoCF5A4031_var, PointWithOffsetPolar(UnitGetPosition(autoCF5A4031_var), 6.0, 45.0), false);
        UnitIssueOrder(autoCF5A4031_var, OrderTargetingPoint(AbilityCommand("attack", 0), lv_tempPoint), c_orderQueueReplace);
    }
    Wait(4.0, c_timeReal);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zBriefing_Hybrid03|Line00019", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto068E9556_g;
    int auto068E9556_u;
    unit auto068E9556_var;
    unitgroup auto2FBEEA23_g;
    int auto2FBEEA23_u;
    unit auto2FBEEA23_var;
    unitgroup auto9BE20F04_g;
    int auto9BE20F04_u;
    unit auto9BE20F04_var;
    unitgroup auto05F1752F_g;
    int auto05F1752F_u;
    unit auto05F1752F_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    SoundStop(gv_introStinger, true);
    SoundStop(gv_introUltraliskSound1, true);
    SoundStop(gv_introUltraliskSound2, true);
    SoundStop(gv_introUltraliskSound3, true);
    SoundStop(gv_introUltraliskSound4, true);
    SoundStop(gv_introZealotSound, true);
    TriggerStop(gt_IntroAttacks);
    CameraShakeStop(gv_pLAYER_01_USER);
    if ((gv_cinematicCompleted == false) && (gv_introMusicCompleted == false)) {
        TriggerStop(gt_IntroMusic);
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZHybrid03MusicAlt1", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }

    auto068E9556_g = gv_cinematicTempUnits;
    auto068E9556_u = UnitGroupCount(auto068E9556_g, c_unitCountAll);
    for (;; auto068E9556_u -= 1) {
        auto068E9556_var = UnitGroupUnitFromEnd(auto068E9556_g, auto068E9556_u);
        if (auto068E9556_var == null) { break; }
        UnitRemove(auto068E9556_var);
    }
    auto2FBEEA23_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2FBEEA23_u = UnitGroupCount(auto2FBEEA23_g, c_unitCountAll);
    for (;; auto2FBEEA23_u -= 1) {
        auto2FBEEA23_var = UnitGroupUnitFromEnd(auto2FBEEA23_g, auto2FBEEA23_u);
        if (auto2FBEEA23_var == null) { break; }
        UnitIssueOrder(auto2FBEEA23_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    }
    UnitSetPosition(gv_kerrigan, PointFromId(1194), false);
    UnitSetFacing(gv_kerrigan, PointGetFacing(PointFromId(1194)), 0.0);
    UnitSetPosition(gv_stukov, PointFromId(1195), false);
    UnitSetFacing(gv_stukov, PointGetFacing(PointFromId(1195)), 0.0);
    UnitSetPosition(UnitFromId(695), PointFromId(1197), false);
    UnitSetFacing(UnitFromId(695), PointGetFacing(PointFromId(1197)), 0.0);
    UnitSetPosition(UnitFromId(686), PointFromId(1196), false);
    UnitSetFacing(UnitFromId(686), PointGetFacing(PointFromId(1196)), 0.0);
    libNtve_gf_CreateUnitsAtPoint2(1, "Ultralisk", 0, gv_pLAYER_01_USER, PointFromId(1198));
    gv_ultra1 = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "Ultralisk", 0, gv_pLAYER_01_USER, PointFromId(1199));
    gv_ultra2 = UnitLastCreated();
    UnitSetPropertyFixed(gv_kerrigan, c_unitPropKills, 0.0);
    UnitSetPropertyFixed(gv_stukov, c_unitPropKills, 0.0);
    UnitSetPropertyFixed(UnitFromId(695), c_unitPropKills, 0.0);
    UnitSetPropertyFixed(UnitFromId(686), c_unitPropKills, 0.0);
    libNtve_gf_ChangeUnitDamage(gv_kerrigan, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    auto9BE20F04_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionFromId(35), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9BE20F04_u = UnitGroupCount(auto9BE20F04_g, c_unitCountAll);
    for (;; auto9BE20F04_u -= 1) {
        auto9BE20F04_var = UnitGroupUnitFromEnd(auto9BE20F04_g, auto9BE20F04_u);
        if (auto9BE20F04_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto9BE20F04_var, false);
        libNtve_gf_PauseUnit(auto9BE20F04_var, true);
    }
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(533)), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    libSwaC_gf_EnableDisableZerglingRespawn(true);
    UnitSetState(gv_kerrigan, c_unitStateFidget, true);
    UnitSetState(gv_stukov, c_unitStateFidget, true);
    auto05F1752F_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto05F1752F_u = UnitGroupCount(auto05F1752F_g, c_unitCountAll);
    for (;; auto05F1752F_u -= 1) {
        auto05F1752F_var = UnitGroupUnitFromEnd(auto05F1752F_g, auto05F1752F_u);
        if (auto05F1752F_var == null) { break; }
        UnitSetPropertyFixed(auto05F1752F_var, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(auto05F1752F_var, c_unitPropEnergyPercent, 100.0);
        UnitSelect(auto05F1752F_var, gv_pLAYER_01_USER, true);
    }
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(17), true, true);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(1));
    VisRevealerEnable(VisRevealerLastCreated(), true);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    gv_inCinematic = false;
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(1201)), lv_fadeDuration);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Attacks
//--------------------------------------------------------------------------------------------------
bool gt_IntroAttacks_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto4FF2D251_g;
    int auto4FF2D251_u;
    unit auto4FF2D251_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(UnitFromId(702), c_unitPropShieldsPercent, 25.0);
    UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(701)), c_orderQueueReplace);
    UnitIssueOrder(gv_stukov, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(764)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(686), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(772)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(695), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(780)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    auto4FF2D251_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionFromId(15), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4FF2D251_u = UnitGroupCount(auto4FF2D251_g, c_unitCountAll);
    for (;; auto4FF2D251_u -= 1) {
        auto4FF2D251_var = UnitGroupUnitFromEnd(auto4FF2D251_g, auto4FF2D251_u);
        if (auto4FF2D251_var == null) { break; }
        UnitIssueOrder(auto4FF2D251_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(701)), c_orderQueueReplace);
    }
    while (!((UnitIsAlive(UnitFromId(702)) == false))) {
        Wait(0.1, c_timeGame);
    }
    UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1188)), c_orderQueueReplace);
    UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(PointFromId(1188), 1.0, PointGetFacing(PointFromId(1188)))), c_orderQueueAddToEnd);
    while (!((UnitIsAlive(UnitFromId(708)) == false))) {
        Wait(0.1, c_timeGame);
    }
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1209), 3.0, -1, 10.0, true);
    UnitIssueOrder(UnitFromId(695), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1190)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(686), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1210)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(686), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1191)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_stukov, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1189)), c_orderQueueReplace);
    while (!((UnitIsAlive(UnitFromId(1093)) == false))) {
        Wait(0.1, c_timeGame);
    }
    UnitIssueOrder(gv_stukov, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(533)), c_animNameDefault, "Dead", c_animFlagPlayForever, c_animTimeDefault);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(249), 8.0, -1, 10.0, true);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(gv_stukov, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1189)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroAttacks_Init () {
    gt_IntroAttacks = TriggerCreate("gt_IntroAttacks_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Music
//--------------------------------------------------------------------------------------------------
bool gt_IntroMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_soundtrack = "ZHybrid03MissionIntro";
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    gv_introMusicCompleted = true;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZHybrid03MusicAlt1", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroMusic_Init () {
    gt_IntroMusic = TriggerCreate("gt_IntroMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Q
//--------------------------------------------------------------------------------------------------
bool gt_MidQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_MidSetup, true, true);
    TriggerExecute(gt_MidCinematic, true, true);
    TriggerExecute(gt_MidCinematicEnd, true, true);
    TriggerExecute(gt_MidCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidQ_Init () {
    gt_MidQ = TriggerCreate("gt_MidQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoCC74642C_g;
    int autoCC74642C_u;
    unit autoCC74642C_var;
    unitgroup autoD4B266CF_g;
    int autoD4B266CF_u;
    unit autoD4B266CF_var;
    unitgroup auto15D56025_g;
    int auto15D56025_u;
    unit auto15D56025_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    gv_inCinematic = true;
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    libSwaC_gf_EnableDisableZerglingRespawn(false);
    RegionPlayableMapSet(RegionFromId(19));
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    UnitCreate(1, "BallOfDeath", 0, 0, PointFromId(251), 45.0);
    gv_kerrigan22 = UnitLastCreated();
    UnitSetHeight(gv_kerrigan22, 16.0, 0.0);
    UnitSetState(gv_kerrigan, c_unitStateFidget, false);
    UnitSetState(gv_stukov, c_unitStateFidget, false);
    UnitClearSelection(gv_pLAYER_01_USER);
    autoCC74642C_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCC74642C_u = UnitGroupCount(autoCC74642C_g, c_unitCountAll);
    for (;; autoCC74642C_u -= 1) {
        autoCC74642C_var = UnitGroupUnitFromEnd(autoCC74642C_g, autoCC74642C_u);
        if (autoCC74642C_var == null) { break; }
        UnitIssueOrder(autoCC74642C_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        if ((UnitGetType(autoCC74642C_var) == "StukovInfestedTerran")) {
            UnitRemove(autoCC74642C_var);
        }

        if ((UnitGroupHasUnit(gv_startingUnits, autoCC74642C_var) == false)) {
            UnitSetPosition(autoCC74642C_var, RegionRandomPoint(RegionFromId(11)), false);
        }

    }
    UnitRemove(gv_kerrigan);
    libSwaC_gf_CreateHero2(PointFromId(250), gv_pLAYER_01_USER, libSwaC_ge_HeroUnit_Kerrigan, 0.0, 0, libSwaC_ge_KerriganCreatePurpose_Cinematic);
    gv_kerrigan = UnitLastCreated();
    UnitSetFacing(gv_kerrigan, PointGetFacing(PointFromId(250)), 0.0);
    UnitBehaviorAdd(gv_kerrigan, "KerriganWalk", gv_kerrigan, 1);
    libNtve_gf_ShowHideUnit(gv_stukov, false);
    UnitGroupAdd(gv_cinematicHiddenUnits, gv_stukov);
    libSwaC_gf_CreateHero2(PointFromId(1203), gv_pLAYER_01_USER, libSwaC_ge_HeroUnit_Stukov, 0.0, 0, libSwaC_ge_KerriganCreatePurpose_Cinematic);
    gv_midStukov = UnitLastCreated();
    UnitSetFacing(gv_midStukov, PointGetFacing(PointFromId(1203)), 0.0);
    UnitGroupAdd(gv_cinematicTempUnits, gv_midStukov);
    UnitSetPosition(UnitFromId(695), PointFromId(1205), false);
    UnitSetFacing(UnitFromId(695), PointGetFacing(PointFromId(1205)), 0.0);
    UnitSetPosition(UnitFromId(686), PointFromId(1204), false);
    UnitSetFacing(UnitFromId(686), PointGetFacing(PointFromId(1204)), 0.0);
    libNtve_gf_ShowHideUnit(gv_kerrigan2, true);
    if ((UnitIsAlive(gv_ultra1) == false)) {
        UnitCreate(1, "Ultralisk", 0, gv_pLAYER_01_USER, PointFromId(1206), 270.0);
        gv_ultra1 = UnitLastCreated();
    }

    if ((UnitIsAlive(gv_ultra2) == false)) {
        UnitCreate(1, "Ultralisk", 0, gv_pLAYER_01_USER, PointFromId(1207), 270.0);
        gv_ultra2 = UnitLastCreated();
    }

    UnitSetPosition(gv_ultra1, PointFromId(1206), false);
    UnitSetFacing(gv_ultra1, PointGetFacing(PointFromId(1206)), 0.0);
    UnitSetPosition(gv_ultra2, PointFromId(1207), false);
    UnitSetFacing(gv_ultra2, PointGetFacing(PointFromId(1207)), 0.0);
    autoD4B266CF_g = gv_startingBase;
    autoD4B266CF_u = UnitGroupCount(autoD4B266CF_g, c_unitCountAll);
    for (;; autoD4B266CF_u -= 1) {
        autoD4B266CF_var = UnitGroupUnitFromEnd(autoD4B266CF_g, autoD4B266CF_u);
        if (autoD4B266CF_var == null) { break; }
        libNtve_gf_PauseUnit(autoD4B266CF_var, false);
        libNtve_gf_ShowHideUnit(autoD4B266CF_var, true);
    }
    UnitRemove(UnitFromId(692));
    auto15D56025_g = UnitGroup("Larva", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto15D56025_u = UnitGroupCount(auto15D56025_g, c_unitCountAll);
    for (;; auto15D56025_u -= 1) {
        auto15D56025_var = UnitGroupUnitFromEnd(auto15D56025_g, auto15D56025_u);
        if (auto15D56025_var == null) { break; }
        UnitRemove(auto15D56025_var);
    }
    CreepModify(RegionGetCenter(RegionFromId(22)), (libNtve_gf_WidthOfRegion(RegionFromId(22))/2), true, false);
    CreepModify(RegionGetCenter(RegionFromId(23)), (libNtve_gf_WidthOfRegion(RegionFromId(23))/2), true, false);
    CreepModify(RegionGetCenter(RegionFromId(24)), (libNtve_gf_WidthOfRegion(RegionFromId(24))/2), true, false);
    CreepModify(RegionGetCenter(RegionFromId(25)), (libNtve_gf_WidthOfRegion(RegionFromId(25))/2), true, false);
    CreepModify(RegionGetCenter(RegionFromId(8)), (libNtve_gf_WidthOfRegion(RegionFromId(8))/2), true, false);
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hive", 0, gv_pLAYER_01_USER, PointFromId(709));
    gv_midHive = UnitLastCreated();
    libNtve_gf_PauseUnit(gv_midHive, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidSetup_Init () {
    gt_MidSetup = TriggerCreate("gt_MidSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1202), 0.0, -1, 10.0, true);
    libNtve_gf_ShowHideUnit(UnitFromId(239), false);
    libNtve_gf_ShowHideUnit(UnitFromId(916), false);
    TriggerExecute(gt_MidMusic, true, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1208), 3.0, -1, 10.0, true);
    UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(253)), c_orderQueueReplace);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicInTransmission);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Hybrid03|Line00080", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(247), 0.0, -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan2, "zMission_Hybrid03|Line00133", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicOutofTransmission);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    SoundPlay(SoundLink("Hybrid03_CS_2_Narud_Reveal", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_midReveal = SoundLastPlayed();
    CameraShake(gv_pLAYER_01_USER, "Light", "Earthquake", 0.5, 0.5, 2.666);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(856), 2.666, -1, 0, true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_kerrigan2), c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, 0.5);
    Wait(2.666, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_kerrigan2), c_animNameDefault, "Stand Angry", 0, 0.5);
    SoundPlay(SoundLink("MidRoar", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_midRoar = SoundLastPlayed();
    CameraShake(gv_pLAYER_01_USER, "Heavy", "Earthquake", 0.5, 1.5, 3.333);
    Wait(3.333, c_timeGame);
    UnitBehaviorAdd(gv_kerrigan2, "NarudBeamOfDeath", gv_kerrigan2, 1);
    gv_narudBeamCreated = true;
    TriggerEnable(gt_NarudBeamRegionSounds, true);
    SoundPlay(SoundLink("StingerIntro", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_midStinger = SoundLastPlayed();
    SoundPlay(SoundLink("Hybrid03_CS_2_Narud_WeaponFire", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_midNarudWeapon = SoundLastPlayed();
    SoundPlay(SoundLink("Hybrid03_CS_2_WeaponStreamCrossSteady_Mixed", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_midStreamCross = SoundLastPlayed();
    UnitSetPosition(gv_kerrigan, PointFromId(3), false);
    UnitSetFacing(gv_kerrigan, 45.0, 0.0);
    UnitSetPropertyFixed(gv_kerrigan, c_unitPropHeight, 0.0);
    libNtve_gf_PauseUnit(gv_kerrigan, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(255), 2.5, -1, 0, true);
    Wait(2.0, c_timeReal);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_kerrigan), c_animNameDefault, "Stand Channel", c_animFlagPlayForever, c_animTimeDefault);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(252), 0.0, 0, 0, true);
    UnitBehaviorAdd(gv_kerrigan, "KerriganBeamOfDeath", gv_kerrigan, 1);
    gv_kerriganBeamCreated = true;
    TriggerEnable(gt_KerriganBeamRegionSounds, true);
    SoundPlay(SoundLink("Hybrid03_CS_2_Kerrigan_WeaponFire", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_midKerriganWeapon = SoundLastPlayed();
    Wait(0.5, c_timeReal);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(254), 2.5, 0, 10.0, true);
    Wait(2.0, c_timeReal);
    SoundPlay(SoundLink("Hybrid03_CS_2_WeaponStreamsCollide", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_midCollide = SoundLastPlayed();
    Wait(2.5, c_timeReal);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(256), (SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Hybrid03|Line00082", true), c_soundIndexAny))), -1, 10.0, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicInTransmission);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    libSwaC_gf_SendTransmissionCampaign(gv_midStukov, "zMission_Hybrid03|Line00082", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(27), 5.0, -1, 10.0, true);
    Wait(6.0, c_timeReal);
    libSwaC_gf_SendTransmissionCampaign(gv_midStukov, "zMission_Hybrid03|Line00091", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(238), 3.0, -1, 10.0, true);
    Wait(3.0, c_timeReal);
    libNtve_gf_ShowHideUnit(UnitFromId(239), true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Beacon_Zerg", c_unitCreateIgnorePlacement, 0, UnitGetPosition(UnitFromId(239)));
    UnitKill(UnitLastCreated());
    SoundPlay(SoundLink("UI_ZergWarning", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_midWarning = SoundLastPlayed();
    Wait(2.0, c_timeReal);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Hybrid03|Line00120", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_midStukov, "zMission_Hybrid03|Line00092", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematic_Init () {
    gt_MidCinematic = TriggerCreate("gt_MidCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematicEnd_Init () {
    gt_MidCinematicEnd = TriggerCreate("gt_MidCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup autoA3A0D241_g;
    int autoA3A0D241_u;
    unit autoA3A0D241_var;
    unitgroup auto5EEEB2A7_g;
    int auto5EEEB2A7_u;
    unit auto5EEEB2A7_var;
    unitgroup autoF0AD5A3B_g;
    int autoF0AD5A3B_u;
    unit autoF0AD5A3B_var;
    unitgroup auto41D57E42_g;
    int auto41D57E42_u;
    unit auto41D57E42_var;
    const int auto9CE5C92E_ae = 9;
    int auto9CE5C92E_var;
    unitgroup auto3C6CB8F5_g;
    int auto3C6CB8F5_u;
    unit auto3C6CB8F5_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    SoundStop(gv_midReveal, true);
    SoundStop(gv_midRoar, true);
    SoundStop(gv_midStinger, true);
    SoundStop(gv_midNarudWeapon, true);
    SoundStop(gv_midStreamCross, true);
    SoundStop(gv_midKerriganWeapon, true);
    SoundStop(gv_midCollide, true);
    SoundStop(gv_midWarning, true);
    CameraShakeStop(gv_pLAYER_01_USER);
    if ((gv_cinematicCompleted == false) && (gv_midMusicCompleted == false)) {
        TriggerStop(gt_MidMusic);
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZHybrid03MusicMain", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }

    autoA3A0D241_g = gv_cinematicTempUnits;
    autoA3A0D241_u = UnitGroupCount(autoA3A0D241_g, c_unitCountAll);
    for (;; autoA3A0D241_u -= 1) {
        autoA3A0D241_var = UnitGroupUnitFromEnd(autoA3A0D241_g, autoA3A0D241_u);
        if (autoA3A0D241_var == null) { break; }
        UnitRemove(autoA3A0D241_var);
    }
    UnitRemove(UnitFromId(147));
    auto5EEEB2A7_g = gv_cinematicHiddenUnits;
    auto5EEEB2A7_u = UnitGroupCount(auto5EEEB2A7_g, c_unitCountAll);
    for (;; auto5EEEB2A7_u -= 1) {
        auto5EEEB2A7_var = UnitGroupUnitFromEnd(auto5EEEB2A7_g, auto5EEEB2A7_u);
        if (auto5EEEB2A7_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto5EEEB2A7_var, true);
    }
    autoF0AD5A3B_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF0AD5A3B_u = UnitGroupCount(autoF0AD5A3B_g, c_unitCountAll);
    for (;; autoF0AD5A3B_u -= 1) {
        autoF0AD5A3B_var = UnitGroupUnitFromEnd(autoF0AD5A3B_g, autoF0AD5A3B_u);
        if (autoF0AD5A3B_var == null) { break; }
        UnitIssueOrder(autoF0AD5A3B_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    }
    auto41D57E42_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionFromId(35), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto41D57E42_u = UnitGroupCount(auto41D57E42_g, c_unitCountAll);
    for (;; auto41D57E42_u -= 1) {
        auto41D57E42_var = UnitGroupUnitFromEnd(auto41D57E42_g, auto41D57E42_u);
        if (auto41D57E42_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto41D57E42_var, true);
        libNtve_gf_PauseUnit(auto41D57E42_var, false);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Extractor", 0, gv_pLAYER_01_USER, PointFromId(976));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropResources, 3641.0);
    UnitSetPosition(gv_kerrigan22, PointFromId(57), false);
    UnitSetPosition(gv_kerrigan, PointFromId(3), false);
    UnitSetFacing(gv_kerrigan, 45.0, 0.0);
    libNtve_gf_PauseUnit(gv_kerrigan, true);
    libNtve_gf_PauseUnit(gv_kerrigan2, true);
    libNtve_gf_ShowHideUnit(gv_kerrigan2, true);
    UnitSetState(gv_kerrigan2, c_unitStateInvulnerable, true);
    libNtve_gf_ShowHideUnit(UnitFromId(239), true);
    libNtve_gf_ShowHideUnit(UnitFromId(916), true);
    libNtve_gf_PauseUnit(gv_midHive, false);
    libSwaC_gf_SpawnLarvaForHatchery(gv_midHive, 3);
    libSwaC_gf_SetHatcheryRallyPoint(gv_midHive, PointFromId(176));
    if ((gv_narudBeamCreated == false)) {
        UnitBehaviorAdd(gv_kerrigan2, "NarudBeamOfDeath", gv_kerrigan2, 1);
        TriggerEnable(gt_NarudBeamRegionSounds, true);
    }

    if ((gv_kerriganBeamCreated == false)) {
        UnitBehaviorAdd(gv_kerrigan, "KerriganBeamOfDeath", gv_kerrigan, 1);
        TriggerEnable(gt_KerriganBeamRegionSounds, true);
    }

    libSwaC_gf_SetHeroPanelUnit(1, gv_stukov);
    libSwaC_gf_SetHeroPanelUnit(2, null);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    libSwaC_gf_EnableDisableZerglingRespawn(true);
    UnitSetState(gv_stukov, c_unitStateFidget, true);
    UnitSetState(gv_kerrigan2, c_unitStateStatusBar, false);
    UnitSetState(gv_kerrigan2, c_unitStateTargetable, false);
    UnitSetState(gv_kerrigan2, c_unitStateInvulnerable, true);
    UnitSetState(gv_kerrigan2, c_unitStateTooltipable, false);
    UnitSetOwner(gv_kerrigan, gv_pLAYER_02_DOMINION22222, true);
    UnitSetState(gv_kerrigan, c_unitStateInvulnerable, true);
    UnitSetState(gv_kerrigan, c_unitStateStatusBar, false);
    UnitSetState(gv_kerrigan, c_unitStateTargetable, false);
    UnitSetPropertyFixed(gv_kerrigan, c_unitPropEnergyMax, 0.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_kerrigan), c_animNameDefault, "Stand Channel", c_animFlagPlayForever, c_animTimeDefault);
    if ((UnitIsAlive(gv_stukov) == false)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "StukovReviveCocoon", 0, 1, PointFromId(1203));
        libSwaC_gf_SetHeroReviverCocoon(libSwaC_ge_CampaignHeroes_Stukov, UnitLastCreated());
        libSwaC_gf_ReviveHeroInstantly(libSwaC_ge_HeroUnit_Stukov, false);
    }

    UnitSetPosition(gv_stukov, PointFromId(1203), false);
    UnitSetFacing(gv_stukov, PointGetFacing(PointFromId(1203)), 0.0);
    libSwaC_gf_ResetHeroAbilityCooldowns(libSwaC_ge_HeroUnit_Stukov);
    auto9CE5C92E_var = 0;
    for ( ; auto9CE5C92E_var <= auto9CE5C92E_ae; auto9CE5C92E_var += 1 ) {
        UnitControlGroupClear(gv_pLAYER_01_USER, auto9CE5C92E_var);
    }
    auto3C6CB8F5_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3C6CB8F5_u = UnitGroupCount(auto3C6CB8F5_g, c_unitCountAll);
    for (;; auto3C6CB8F5_u -= 1) {
        auto3C6CB8F5_var = UnitGroupUnitFromEnd(auto3C6CB8F5_g, auto3C6CB8F5_u);
        if (auto3C6CB8F5_var == null) { break; }
        UnitSetPropertyFixed(auto3C6CB8F5_var, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(auto3C6CB8F5_var, c_unitPropEnergyPercent, 100.0);
    }
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(17), true, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(2), true, false);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(1));
    VisRevealerEnable(VisRevealerLastCreated(), true);
    TriggerExecute(gt_StartAI, true, false);
    Wait(0.5, c_timeReal);
    ObjectiveShow(gv_objectiveDestroyDominionBase4, PlayerGroupAll(), false);
    UnitClearSelection(gv_pLAYER_01_USER);
    libSwaC_gf_StartingWorkersAutoHarvest(RegionFromId(21), RegionFromId(42));
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    gv_inCinematic = false;
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PlayerStartLocation(gv_pLAYER_01_USER), lv_fadeDuration);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(9), 0.1, false);
    TriggerExecute(gt_StartGameTugofWarQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCleanup_Init () {
    gt_MidCleanup = TriggerCreate("gt_MidCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Music
//--------------------------------------------------------------------------------------------------
bool gt_MidMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_soundtrack = "ZHybrid03MusicCutscene01_DestroyTemples";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    gv_midMusicCompleted = true;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZHybrid03MusicMain", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidMusic_Init () {
    gt_MidMusic = TriggerCreate("gt_MidMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoEB1786C7_g;
    int autoEB1786C7_u;
    unit autoEB1786C7_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    DialogControlFadeTransparency(gv_nullZoneBarPanel, PlayerGroupAll(), 1.0, 100.0);
    Wait(1.0, c_timeReal);
    gv_inCinematic = true;
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UnitClearSelection(gv_pLAYER_01_USER);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    TriggerEnable(gt_NarudBeamRegionSounds, false);
    TriggerEnable(gt_KerriganBeamRegionSounds, false);
    GameTimeOfDayPause(true);
    libSwaC_gf_EnableDisableZerglingRespawn(false);
    RegionPlayableMapSet(RegionFromId(19));
    UnitPauseAll(true);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_statisticStukovKills = libNtve_gf_UnitGetPropertyKills(gv_stukov, c_unitPropCurrent);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    autoEB1786C7_g = gv_cinematicHiddenUnits;
    autoEB1786C7_u = UnitGroupCount(autoEB1786C7_g, c_unitCountAll);
    for (;; autoEB1786C7_u -= 1) {
        autoEB1786C7_var = UnitGroupUnitFromEnd(autoEB1786C7_g, autoEB1786C7_u);
        if (autoEB1786C7_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoEB1786C7_var, false);
    }
    TriggerStop(gt_NullZoneMovementandArrowPings);
    libNtve_gf_PauseUnit(gv_kerrigan22, false);
    if ((UnitIsAlive(gv_kerrigan22) == false)) {
        UnitCreate(1, "BallOfDeath", 0, 0, PointFromId(763), 45.0);
        gv_kerrigan22 = UnitLastCreated();
        UnitSetHeight(gv_kerrigan22, 16.0, 0.0);
    }

    if ((gv_narudBeamCreated == false)) {
        UnitBehaviorAdd(gv_kerrigan2, "NarudBeamOfDeath", gv_kerrigan2, 1);
        TriggerEnable(gt_NarudBeamRegionSounds, true);
    }

    if ((gv_kerriganBeamCreated == false)) {
        UnitSetPosition(gv_kerrigan, PointFromId(3), false);
        UnitSetFacing(gv_kerrigan, 45.0, 0.0);
        libNtve_gf_PauseUnit(gv_kerrigan, true);
        UnitBehaviorAdd(gv_kerrigan, "KerriganBeamOfDeath", gv_kerrigan, 1);
        TriggerEnable(gt_KerriganBeamRegionSounds, true);
    }

    UnitBehaviorAdd(gv_kerrigan2, "NarudBeamOfDeathClose", gv_kerrigan2, 1);
    UnitSetPosition(gv_kerrigan22, PointFromId(763), false);
    UnitSetPropertyFixed(gv_kerrigan22, c_unitPropMovementSpeed, 5.0);
    UnitIssueOrder(gv_kerrigan22, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(gv_kerrigan2)), c_orderQueueReplace);
    libNtve_gf_ShowHideUnit(gv_kerrigan22, true);
    libNtve_gf_ShowHideUnit(gv_kerrigan2, true);
    libNtve_gf_ShowHideUnit(gv_kerrigan, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(413), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(403), 4.0, -1, 10.0, true);
    SoundPlay(SoundLink("StingerVictory", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_victoryStinger = SoundLastPlayed();
    SoundPlay(SoundLink("Hybrid03_CS_Finale_NarudDeath", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_victoryNarudDeath = SoundLastPlayed();
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZHybrid03MusicCutscene02_AmonDefeated", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    while (!((libNtve_gf_UnitInRegion(gv_kerrigan22, RegionCircle(UnitGetPosition(gv_kerrigan2), 1.0)) == true))) {
        Wait(0.1, c_timeGame);
    }
    TriggerExecute(gt_VictoryKillNarud, true, false);
    CameraShake(gv_pLAYER_01_USER, "Heavy", "Earthquake", 0.5, 0.5, 3.0);
    Wait(3.0, c_timeReal);
    CameraShake(gv_pLAYER_01_USER, "Light", "SubtleMove", 1.0, 1.0, 6.0);
    Wait(4.0, c_timeReal);
    CinematicFade(false, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libSwaC_gf_CreateHero2(PointFromId(819), gv_pLAYER_01_USER, libSwaC_ge_HeroUnit_Kerrigan, PointGetFacing(PointFromId(819)), 0, libSwaC_ge_KerriganCreatePurpose_Cinematic);
    gv_kerrigan = UnitLastCreated();
    UnitSetState(UnitLastCreated(), c_unitStateFidget, false);
    UnitBehaviorAdd(gv_kerrigan, "KerriganWalk", gv_kerrigan, 1);
    libSwaC_gf_CreateHero2(PointFromId(901), gv_pLAYER_01_USER, libSwaC_ge_HeroUnit_Stukov, PointGetFacing(PointFromId(901)), 0, libSwaC_ge_KerriganCreatePurpose_Cinematic);
    gv_victoryStukov = UnitLastCreated();
    UnitSetState(UnitLastCreated(), c_unitStateFidget, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(411), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(820), 5.0, -1, 10.0, true);
    CinematicFade(true, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    Wait(4.0, c_timeReal);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(687), (SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Hybrid03|Line00139", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Hybrid03|Line00140", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Hybrid03|Line00141", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Hybrid03|Line00143", true), c_soundIndexAny))), -1, 10.0, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicInTransmission);
    libSwaC_gf_SendTransmissionCampaign(gv_victoryStukov, "zMission_Hybrid03|Line00139", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Hybrid03|Line00140", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    UnitIssueOrder(gv_victoryStukov, OrderTargetingUnit(AbilityCommand("move", 4), gv_kerrigan), c_orderQueueReplace);
    libSwaC_gf_SendTransmissionCampaign(gv_victoryStukov, "zMission_Hybrid03|Line00141", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Hybrid03|Line00143", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(894)), c_orderQueueReplace);
    Wait(1.0, c_timeReal);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraShakeStop(gv_pLAYER_01_USER);
    SoundStop(gv_victoryStinger, true);
    SoundStop(gv_victoryNarudDeath, true);
    UnitPauseAll(true);
    UISetWorldVisible(PlayerGroupAll(), false);
    libSwaC_gf_PlayCinematic("Zerg09 - Hybrid Arc", true);
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Kill Narud
//--------------------------------------------------------------------------------------------------
bool gt_VictoryKillNarud_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(gv_kerrigan22);
    SoundPlay(SoundLink("Artifact_EnergyNova", -1), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_kerrigan2), c_animNameDefault, "Stand Work End", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(4.9, c_timeGame);
    UnitRemove(gv_kerrigan2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryKillNarud_Init () {
    gt_VictoryKillNarud = TriggerCreate("gt_VictoryKillNarud_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04Music_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_S2_Init();
    gt_StartGameIntroQ_Init();
    gt_StartGameTugofWarQ_Init();
    gt_OpeningQ_Init();
    gt_InCombatCheck_Init();
    gt_InCombatTimerExpirers_Init();
    gt_CorrosiveBlastQ_Init();
    gt_CorrosiveBlastUsed_Init();
    gt_StukovRevive_Init();
    gt_BullyDeactivate1_Init();
    gt_BullyDeactivate2_Init();
    gt_IntroComplete_Init();
    gt_ProtossInitialAttack1Q_Init();
    gt_ProtossInitialAttack2Q_Init();
    gt_NullZoneStaticPings_Init();
    gt_NullZoneMovementandArrowPings_Init();
    gt_NullZone10Q_Init();
    gt_CreateTugWarBar_Init();
    gt_UpdateTugWarBar_Init();
    gt_DestoryTugWarBar_Init();
    gt_KerriganBeamRegionSounds_Init();
    gt_NarudBeamRegionSounds_Init();
    gt_HybridDies_Init();
    gt_TempleChanneling_Init();
    gt_TempleHoldoutAttacks_Init();
    gt_TempleChannelingQ_Init();
    gt_TempleDeactivatedQ_Init();
    gt_FirstHybridQ_Init();
    gt_WarpInAttacks_Init();
    gt_CrystalDiscoverProximity_Init();
    gt_CrystalDiscoverQ_Init();
    gt_CrystalDestroyed_Init();
    gt_Crystal1Defense_Init();
    gt_Crystal1DefenseQ_Init();
    gt_Crystal2Defense_Init();
    gt_Crystal2DefenseQ_Init();
    gt_Crystal3Defense_Init();
    gt_Crystal3DefenseQ_Init();
    gt_AllCrystalsDestroyedQ_Init();
    gt_DefeatBaseDead_Init();
    gt_DefeatDuelLose_Init();
    gt_DefeatKerriganDies_Init();
    gt_VictoryDuelWin_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_AchievementStukovSurvival_Init();
    gt_AchievementKill2Hybridwithin20secondsNH_Init();
    gt_AchievementDestroyProtossBasesH_Init();
    gt_StatisticMaxArmy_Init();
    gt_StatisticZergKilledbyHybrid_Init();
    gt_AnniversaryAchievementDestroyallProtossstructuresbeforeactivating4Temples2_Init();
    gt_ObjectiveDestroyProtossCreate_Init();
    gt_ObjectiveDestroyProtossComplete_Init();
    gt_ObjectiveDeactivateTemplesCreate_Init();
    gt_ObjectiveDeactivateTemplesComplete_Init();
    gt_ObjectiveKerriganMustSurviveCreate_Init();
    gt_ObjectiveKerriganMustSurviveComplete_Init();
    gt_ObjectiveKerriganMustSurviveFailed_Init();
    gt_ObjectiveCrystalsCreate_Init();
    gt_ObjectiveCrystalsComplete_Init();
    gt_HybridAI_Init();
    gt_StartAI_Init();
    gt_StartUpgradesNormal_Init();
    gt_StartUpgradesHard_Init();
    gt_ProtossAttackWaves_Init();
    gt_FirstWaveDynamicTiming_Init();
    gt_FirstAttackQ_Init();
    gt_DangerousAttack1Q_Init();
    gt_DangerousAttack2Q_Init();
    gt_BaseWarningEastQ_Init();
    gt_BaseWarningWestQ_Init();
    gt_AIGiveMinerals_Init();
    gt_AIGiveGas_Init();
    gt_TipMissionHelpQ_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_IntroAttacks_Init();
    gt_IntroMusic_Init();
    gt_MidQ_Init();
    gt_MidSetup_Init();
    gt_MidCinematic_Init();
    gt_MidCinematicEnd_Init();
    gt_MidCleanup_Init();
    gt_MidMusic_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
    gt_VictoryKillNarud_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
