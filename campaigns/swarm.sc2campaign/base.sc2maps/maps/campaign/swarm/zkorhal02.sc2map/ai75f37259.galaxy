//==================================================================================================
// 
// Generated AI Script
// 
// AI Name: Dominion P06 - Orange
// 
//==================================================================================================
include "TriggerLibs/natives"
include "TriggerLibs/AI"
include "TriggerLibs/Computer"

//--------------------------------------------------------------------------------------------------
// Globals
//--------------------------------------------------------------------------------------------------
point[17] ai75F37259_defGather;
string[17] ai75F37259_customData;
wave[17] ai75F37259_lastWave;

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] ai75F37259_wave1_enabled;
wave[17] ai75F37259_wave1_lastWave;
trigger ai75F37259_wave1_trigger = null;
int ai75F37259_wave1_runPlayer;
playergroup ai75F37259_wave1_runTarget;

//--------------------------------------------------------------------------------------------------
void ai75F37259_wave1_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai75F37259_wave1_enabled[init_i] = true;
        ai75F37259_wave1_lastWave[init_i] = null;
    }

    ai75F37259_wave1_trigger = TriggerCreate("ai75F37259_wave1_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai75F37259_wave1_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai75F37259_wave1_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai75F37259_wave1_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai75F37259_wave1_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave ai75F37259_wave1_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai75F37259_wave1_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai75F37259_wave1_runFunc (bool c, bool a) {
    int p = ai75F37259_wave1_runPlayer;
    playergroup target = ai75F37259_wave1_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai75F37259_wave1_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai75F37259_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 210; }
    if (d == 2) { ta = 210; }
    if (d == 3) { ta = 210; }
    if (d == 4) { ta = 210; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = ai75F37259_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    AIAttackWaveAddUnits(2, 6, "Marine");
    AIAttackWaveAddUnits(3, 6, "Marine");
    AIAttackWaveAddUnits(4, 8, "Marine");
    AIAttackWaveAddUnits(5, 8, "Marine");

    AIAttackWaveAddUnits(4, 2, "Firebat");
    AIAttackWaveAddUnits(5, 2, "Firebat");

    AIAttackWaveAddUnits(5, 1, "SiegeTank");

    AIAttackWaveSend(p, ts, false);
    ai75F37259_wave1_lastWave[p] = WaveLastCreated();
    ai75F37259_lastWave[p] = ai75F37259_wave1_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai75F37259_wave1_run (int p, playergroup target, bool wait) {
    ai75F37259_wave1_runPlayer = p;
    ai75F37259_wave1_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai75F37259_wave1_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave Wrappers
//--------------------------------------------------------------------------------------------------
void ai75F37259_wave_enable (int w, int p, bool val) {
    if (w == 1) { ai75F37259_wave1_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
bool ai75F37259_wave_isEnabled (int w, int p) {
    if (w == 1) { return ai75F37259_wave1_isEnabled(p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup ai75F37259_wave_createdUnits (int w, int p) {
    return null;
}

//--------------------------------------------------------------------------------------------------
wave ai75F37259_wave_createdWave (int w, int p) {
    if (w == 1) { return ai75F37259_wave1_createdWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void ai75F37259_wave_run (int w, int p, playergroup target, bool wait) {
    if (w == 1) { ai75F37259_wave1_run(p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
// Attack Wave Sequence
//--------------------------------------------------------------------------------------------------
trigger ai75F37259_waves_trigger = null;
int ai75F37259_waves_runPlayer;
playergroup ai75F37259_waves_runTarget;

//--------------------------------------------------------------------------------------------------
void ai75F37259_waves_init () {
    ai75F37259_waves_trigger = TriggerCreate("ai75F37259_waves_runFunc");
}

//--------------------------------------------------------------------------------------------------
bool ai75F37259_waves_runFunc (bool c, bool a) {
    int p = ai75F37259_waves_runPlayer;
    playergroup target = ai75F37259_waves_runTarget;

    if (p < 0 || p >= 16) {
        return false;
    }

    ai75F37259_wave1_run(p, target, true);

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai75F37259_waves_run (int p, playergroup target) {
    ai75F37259_waves_runPlayer = p;
    ai75F37259_waves_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai75F37259_waves_trigger, false, false);
}

//--------------------------------------------------------------------------------------------------
void ai75F37259_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }

    ai75F37259_wave1_enable(p, val);
}

//--------------------------------------------------------------------------------------------------
void ai75F37259_waves_stop () {
    TriggerStop(ai75F37259_waves_trigger);

    TriggerStop(ai75F37259_wave1_trigger);
}

//--------------------------------------------------------------------------------------------------
// Configuration
//--------------------------------------------------------------------------------------------------
void ai75F37259_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai75F37259_defGather[p] = val;
}

//--------------------------------------------------------------------------------------------------
string ai75F37259_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai75F37259_customData[p];
}

//--------------------------------------------------------------------------------------------------
wave ai75F37259_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai75F37259_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
// Start
//--------------------------------------------------------------------------------------------------
bool ai75F37259_initialized = false;

//--------------------------------------------------------------------------------------------------
void ai75F37259_start (int p) {
    int init_i;

    if (p < 0 || p >= 16) {
        return;
    }
    if (!ai75F37259_initialized) {
        ai75F37259_wave1_init();
        ai75F37259_waves_init();

        for (init_i = 0; init_i <= 16; init_i += 1) {
            ai75F37259_defGather[init_i] = PointFromId(965);
        }

        ai75F37259_initialized = true;
    }

    AICampaignStart(p);
}
